ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L50
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L50
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L50
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L50
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L50
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L50
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e B8E2     		b	.L1
  75              	.L51:
  76              		.align	2
  77              	.L50:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F2B182 		bhi	.L49
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c B1050000 		.word	.L49+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 B1050000 		.word	.L49+1
  96 0074 B1050000 		.word	.L49+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 B1050000 		.word	.L49+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 B1050000 		.word	.L49+1
 102 008c B1050000 		.word	.L49+1
 103 0090 B1050000 		.word	.L49+1
 104 0094 B1050000 		.word	.L49+1
 105 0098 B1050000 		.word	.L49+1
 106 009c B1050000 		.word	.L49+1
 107 00a0 B1050000 		.word	.L49+1
 108 00a4 B1050000 		.word	.L49+1
 109 00a8 B1050000 		.word	.L49+1
 110 00ac B1050000 		.word	.L49+1
 111 00b0 B1050000 		.word	.L49+1
 112 00b4 B1050000 		.word	.L49+1
 113 00b8 B1050000 		.word	.L49+1
 114 00bc B1050000 		.word	.L49+1
 115 00c0 B1050000 		.word	.L49+1
 116 00c4 B1050000 		.word	.L49+1
 117 00c8 B1050000 		.word	.L49+1
 118 00cc B1050000 		.word	.L49+1
 119 00d0 B1050000 		.word	.L49+1
 120 00d4 B1050000 		.word	.L49+1
 121 00d8 B1050000 		.word	.L49+1
 122 00dc B1050000 		.word	.L49+1
 123 00e0 B1050000 		.word	.L49+1
 124 00e4 B1050000 		.word	.L49+1
 125 00e8 B1050000 		.word	.L49+1
 126 00ec B1050000 		.word	.L49+1
 127 00f0 B1050000 		.word	.L49+1
 128 00f4 B1050000 		.word	.L49+1
 129 00f8 B1050000 		.word	.L49+1
 130 00fc B1050000 		.word	.L49+1
 131 0100 B1050000 		.word	.L49+1
 132 0104 B1050000 		.word	.L49+1
 133 0108 B1050000 		.word	.L49+1
 134 010c B1050000 		.word	.L49+1
 135 0110 B1050000 		.word	.L49+1
 136 0114 B1050000 		.word	.L49+1
 137 0118 B1050000 		.word	.L49+1
 138 011c B1050000 		.word	.L49+1
 139 0120 B1050000 		.word	.L49+1
 140 0124 B1050000 		.word	.L49+1
 141 0128 B1050000 		.word	.L49+1
 142 012c B1050000 		.word	.L49+1
 143 0130 B1050000 		.word	.L49+1
 144 0134 B1050000 		.word	.L49+1
 145 0138 B1050000 		.word	.L49+1
 146 013c B1050000 		.word	.L49+1
 147 0140 B1050000 		.word	.L49+1
 148 0144 B1050000 		.word	.L49+1
 149 0148 B1050000 		.word	.L49+1
 150 014c B1050000 		.word	.L49+1
 151 0150 B1050000 		.word	.L49+1
 152 0154 B1050000 		.word	.L49+1
 153 0158 B1050000 		.word	.L49+1
 154 015c B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 5


 155 0160 B1050000 		.word	.L49+1
 156 0164 B1050000 		.word	.L49+1
 157 0168 B1050000 		.word	.L49+1
 158 016c B1050000 		.word	.L49+1
 159 0170 B1050000 		.word	.L49+1
 160 0174 B1050000 		.word	.L49+1
 161 0178 B1050000 		.word	.L49+1
 162 017c B1050000 		.word	.L49+1
 163 0180 B1050000 		.word	.L49+1
 164 0184 B1050000 		.word	.L49+1
 165 0188 B1050000 		.word	.L49+1
 166 018c B1050000 		.word	.L49+1
 167 0190 B1050000 		.word	.L49+1
 168 0194 B1050000 		.word	.L49+1
 169 0198 B1050000 		.word	.L49+1
 170 019c B1050000 		.word	.L49+1
 171 01a0 B1050000 		.word	.L49+1
 172 01a4 B1050000 		.word	.L49+1
 173 01a8 B1050000 		.word	.L49+1
 174 01ac B1050000 		.word	.L49+1
 175 01b0 B1050000 		.word	.L49+1
 176 01b4 B1050000 		.word	.L49+1
 177 01b8 B1050000 		.word	.L49+1
 178 01bc B1050000 		.word	.L49+1
 179 01c0 B1050000 		.word	.L49+1
 180 01c4 B1050000 		.word	.L49+1
 181 01c8 B1050000 		.word	.L49+1
 182 01cc B1050000 		.word	.L49+1
 183 01d0 B1050000 		.word	.L49+1
 184 01d4 B1050000 		.word	.L49+1
 185 01d8 B1050000 		.word	.L49+1
 186 01dc B1050000 		.word	.L49+1
 187 01e0 B1050000 		.word	.L49+1
 188 01e4 B1050000 		.word	.L49+1
 189 01e8 B1050000 		.word	.L49+1
 190 01ec B1050000 		.word	.L49+1
 191 01f0 B1050000 		.word	.L49+1
 192 01f4 B1050000 		.word	.L49+1
 193 01f8 B1050000 		.word	.L49+1
 194 01fc B1050000 		.word	.L49+1
 195 0200 B1050000 		.word	.L49+1
 196 0204 B1050000 		.word	.L49+1
 197 0208 B1050000 		.word	.L49+1
 198 020c B1050000 		.word	.L49+1
 199 0210 B1050000 		.word	.L49+1
 200 0214 B1050000 		.word	.L49+1
 201 0218 B1050000 		.word	.L49+1
 202 021c B1050000 		.word	.L49+1
 203 0220 B1050000 		.word	.L49+1
 204 0224 B1050000 		.word	.L49+1
 205 0228 B1050000 		.word	.L49+1
 206 022c B1050000 		.word	.L49+1
 207 0230 B1050000 		.word	.L49+1
 208 0234 B1050000 		.word	.L49+1
 209 0238 B1050000 		.word	.L49+1
 210 023c B1050000 		.word	.L49+1
 211 0240 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 6


 212 0244 B1050000 		.word	.L49+1
 213 0248 B1050000 		.word	.L49+1
 214 024c B1050000 		.word	.L49+1
 215 0250 B1050000 		.word	.L49+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 B1050000 		.word	.L49+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c B1050000 		.word	.L49+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 B1050000 		.word	.L49+1
 230 028c B1050000 		.word	.L49+1
 231 0290 B1050000 		.word	.L49+1
 232 0294 89040000 		.word	.L27+1
 233 0298 B1050000 		.word	.L49+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 B1050000 		.word	.L49+1
 236 02a4 B1050000 		.word	.L49+1
 237 02a8 B1050000 		.word	.L49+1
 238 02ac B1050000 		.word	.L49+1
 239 02b0 B1050000 		.word	.L49+1
 240 02b4 B1050000 		.word	.L49+1
 241 02b8 B1050000 		.word	.L49+1
 242 02bc B1050000 		.word	.L49+1
 243 02c0 B1050000 		.word	.L49+1
 244 02c4 B1050000 		.word	.L49+1
 245 02c8 B1050000 		.word	.L49+1
 246 02cc B1050000 		.word	.L49+1
 247 02d0 B1050000 		.word	.L49+1
 248 02d4 B1050000 		.word	.L49+1
 249 02d8 4B050000 		.word	.L29+1
 250 02dc 51050000 		.word	.L30+1
 251 02e0 69050000 		.word	.L31+1
 252 02e4 6F050000 		.word	.L32+1
 253 02e8 75050000 		.word	.L33+1
 254 02ec 7B050000 		.word	.L34+1
 255 02f0 81050000 		.word	.L35+1
 256 02f4 99050000 		.word	.L36+1
 257 02f8 B1050000 		.word	.L49+1
 258 02fc B1050000 		.word	.L49+1
 259 0300 B1050000 		.word	.L49+1
 260 0304 B1050000 		.word	.L49+1
 261 0308 B1050000 		.word	.L49+1
 262 030c B1050000 		.word	.L49+1
 263 0310 B1050000 		.word	.L49+1
 264 0314 B1050000 		.word	.L49+1
 265 0318 B1050000 		.word	.L49+1
 266 031c B1050000 		.word	.L49+1
 267 0320 B1050000 		.word	.L49+1
 268 0324 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 7


 269 0328 B1050000 		.word	.L49+1
 270 032c B1050000 		.word	.L49+1
 271 0330 B1050000 		.word	.L49+1
 272 0334 B1050000 		.word	.L49+1
 273 0338 B1050000 		.word	.L49+1
 274 033c B1050000 		.word	.L49+1
 275 0340 B1050000 		.word	.L49+1
 276 0344 B1050000 		.word	.L49+1
 277 0348 B1050000 		.word	.L49+1
 278 034c B1050000 		.word	.L49+1
 279 0350 B1050000 		.word	.L49+1
 280 0354 B1050000 		.word	.L49+1
 281 0358 B1050000 		.word	.L49+1
 282 035c B1050000 		.word	.L49+1
 283 0360 B1050000 		.word	.L49+1
 284 0364 B1050000 		.word	.L49+1
 285 0368 B1050000 		.word	.L49+1
 286 036c B1050000 		.word	.L49+1
 287 0370 B1050000 		.word	.L49+1
 288 0374 B1050000 		.word	.L49+1
 289 0378 B1050000 		.word	.L49+1
 290 037c B1050000 		.word	.L49+1
 291 0380 B1050000 		.word	.L49+1
 292 0384 B1050000 		.word	.L49+1
 293 0388 B1050000 		.word	.L49+1
 294 038c B1050000 		.word	.L49+1
 295 0390 B1050000 		.word	.L49+1
 296 0394 B1050000 		.word	.L49+1
 297 0398 B1050000 		.word	.L49+1
 298 039c B1050000 		.word	.L49+1
 299 03a0 B1050000 		.word	.L49+1
 300 03a4 B1050000 		.word	.L49+1
 301 03a8 B1050000 		.word	.L49+1
 302 03ac B1050000 		.word	.L49+1
 303 03b0 B1050000 		.word	.L49+1
 304 03b4 B1050000 		.word	.L49+1
 305 03b8 B1050000 		.word	.L49+1
 306 03bc B1050000 		.word	.L49+1
 307 03c0 B1050000 		.word	.L49+1
 308 03c4 B1050000 		.word	.L49+1
 309 03c8 B1050000 		.word	.L49+1
 310 03cc B1050000 		.word	.L49+1
 311 03d0 B1050000 		.word	.L49+1
 312 03d4 B1050000 		.word	.L49+1
 313 03d8 B1050000 		.word	.L49+1
 314 03dc B1050000 		.word	.L49+1
 315 03e0 B1050000 		.word	.L49+1
 316 03e4 B1050000 		.word	.L49+1
 317 03e8 B1050000 		.word	.L49+1
 318 03ec B1050000 		.word	.L49+1
 319 03f0 B1050000 		.word	.L49+1
 320 03f4 B1050000 		.word	.L49+1
 321 03f8 B1050000 		.word	.L49+1
 322 03fc B1050000 		.word	.L49+1
 323 0400 B1050000 		.word	.L49+1
 324 0404 B1050000 		.word	.L49+1
 325 0408 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 8


 326 040c B1050000 		.word	.L49+1
 327 0410 B1050000 		.word	.L49+1
 328 0414 B1050000 		.word	.L49+1
 329 0418 B1050000 		.word	.L49+1
 330 041c B1050000 		.word	.L49+1
 331 0420 B1050000 		.word	.L49+1
 332 0424 B1050000 		.word	.L49+1
 333 0428 B1050000 		.word	.L49+1
 334 042c B1050000 		.word	.L49+1
 335 0430 B1050000 		.word	.L49+1
 336 0434 B1050000 		.word	.L49+1
 337 0438 B1050000 		.word	.L49+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 B5E0     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a B2E0     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 AFE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 ACE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c A9E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 A6E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 A3E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e A0E0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 9DE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a 9AE0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 97E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 94E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c 91E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 8EE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 484B     		ldr	r3, .L52
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa 82E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 7FE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),TRUE );
 443              		.loc 1 174 0
 444 04b2 414B     		ldr	r3, .L52
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca 72E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 6FE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 6CE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea 62E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 5EE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 55E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c 51E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 48E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 28


 529              		.loc 1 214 0
 530 0526 44E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 33E0     		b	.L1
 548              	.L29:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:           
 230:..\src/command_processing.c ****             break;
 231:..\src/command_processing.c ****             
 232:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 233:..\src/command_processing.c **** 
 234:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 235:..\src/command_processing.c ****             cmd_get_imu_readings();
 549              		.loc 1 235 0
 550 054a FFF7FEFF 		bl	cmd_get_imu_readings
 236:..\src/command_processing.c ****             break; 
 551              		.loc 1 236 0
 552 054e 30E0     		b	.L1
 553              	.L30:
 237:..\src/command_processing.c ****             
 238:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 239:..\src/command_processing.c **** 
 240:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 241:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 554              		.loc 1 241 0
 555 0550 194B     		ldr	r3, .L52
 556 0552 1B88     		ldrh	r3, [r3]
 557 0554 7B62     		str	r3, [r7, #36]
 558              	.LBB16:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 29


 559              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 560              		.loc 2 792 0
 561 0556 7B6A     		ldr	r3, [r7, #36]
 562              		.syntax unified
 563              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 564 0558 5BBA     		rev16 r3, r3
 565              	@ 0 "" 2
 566              		.thumb
 567              		.syntax unified
 568 055a FB60     		str	r3, [r7, #12]
 569              		.loc 2 793 0
 570 055c FB68     		ldr	r3, [r7, #12]
 571              	.LBE17:
 572              	.LBE16:
 573              		.loc 1 241 0
 574 055e 9BB2     		uxth	r3, r3
 575 0560 1846     		mov	r0, r3
 576 0562 FFF7FEFF 		bl	get_IMU_param_list
 242:..\src/command_processing.c ****             break;             
 577              		.loc 1 242 0
 578 0566 24E0     		b	.L1
 579              	.L31:
 243:..\src/command_processing.c ****             
 244:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 245:..\src/command_processing.c **** 
 246:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 247:..\src/command_processing.c ****             cmd_get_encoder_map();
 580              		.loc 1 247 0
 581 0568 FFF7FEFF 		bl	cmd_get_encoder_map
 248:..\src/command_processing.c ****             break; 
 582              		.loc 1 248 0
 583 056c 21E0     		b	.L1
 584              	.L32:
 249:..\src/command_processing.c **** 
 250:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 251:..\src/command_processing.c **** 
 252:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 253:..\src/command_processing.c ****             cmd_get_encoder_raw();
 585              		.loc 1 253 0
 586 056e FFF7FEFF 		bl	cmd_get_encoder_raw
 254:..\src/command_processing.c ****             break; 
 587              		.loc 1 254 0
 588 0572 1EE0     		b	.L1
 589              	.L33:
 255:..\src/command_processing.c **** 
 256:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 257:..\src/command_processing.c **** 
 258:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 259:..\src/command_processing.c ****             cmd_get_ADC_map();
 590              		.loc 1 259 0
 591 0574 FFF7FEFF 		bl	cmd_get_ADC_map
 260:..\src/command_processing.c ****             break; 
 592              		.loc 1 260 0
 593 0578 1BE0     		b	.L1
 594              	.L34:
 261:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 30


 262:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 263:..\src/command_processing.c **** 
 264:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 265:..\src/command_processing.c ****             cmd_get_ADC_raw();
 595              		.loc 1 265 0
 596 057a FFF7FEFF 		bl	cmd_get_ADC_raw
 266:..\src/command_processing.c ****             break; 
 597              		.loc 1 266 0
 598 057e 18E0     		b	.L1
 599              	.L35:
 267:..\src/command_processing.c ****             
 268:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 269:..\src/command_processing.c **** 
 270:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 271:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 600              		.loc 1 271 0
 601 0580 0D4B     		ldr	r3, .L52
 602 0582 1B88     		ldrh	r3, [r3]
 603 0584 3B62     		str	r3, [r7, #32]
 604              	.LBB18:
 605              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 606              		.loc 2 792 0
 607 0586 3B6A     		ldr	r3, [r7, #32]
 608              		.syntax unified
 609              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 610 0588 5BBA     		rev16 r3, r3
 611              	@ 0 "" 2
 612              		.thumb
 613              		.syntax unified
 614 058a BB60     		str	r3, [r7, #8]
 615              		.loc 2 793 0
 616 058c BB68     		ldr	r3, [r7, #8]
 617              	.LBE19:
 618              	.LBE18:
 619              		.loc 1 271 0
 620 058e 9BB2     		uxth	r3, r3
 621 0590 1846     		mov	r0, r3
 622 0592 FFF7FEFF 		bl	cmd_get_SD_file
 272:..\src/command_processing.c ****             break;   
 623              		.loc 1 272 0
 624 0596 0CE0     		b	.L1
 625              	.L36:
 273:..\src/command_processing.c ****             
 274:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 275:..\src/command_processing.c **** 
 276:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 277:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 626              		.loc 1 277 0
 627 0598 074B     		ldr	r3, .L52
 628 059a 1B88     		ldrh	r3, [r3]
 629 059c FB61     		str	r3, [r7, #28]
 630              	.LBB20:
 631              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 632              		.loc 2 792 0
 633 059e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 31


 634              		.syntax unified
 635              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 636 05a0 5BBA     		rev16 r3, r3
 637              	@ 0 "" 2
 638              		.thumb
 639              		.syntax unified
 640 05a2 7B60     		str	r3, [r7, #4]
 641              		.loc 2 793 0
 642 05a4 7B68     		ldr	r3, [r7, #4]
 643              	.LBE21:
 644              	.LBE20:
 645              		.loc 1 277 0
 646 05a6 9BB2     		uxth	r3, r3
 647 05a8 1846     		mov	r0, r3
 648 05aa FFF7FEFF 		bl	cmd_remove_SD_file
 278:..\src/command_processing.c ****             break;               
 649              		.loc 1 278 0
 650 05ae 00E0     		b	.L1
 651              	.L49:
 279:..\src/command_processing.c ****             
 280:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 281:..\src/command_processing.c ****         default:
 282:..\src/command_processing.c ****             break;
 652              		.loc 1 282 0
 653 05b0 00BF     		nop
 654              	.L1:
 283:..\src/command_processing.c **** 
 284:..\src/command_processing.c ****     }
 285:..\src/command_processing.c **** }  
 655              		.loc 1 285 0
 656 05b2 3037     		adds	r7, r7, #48
 657              		.cfi_def_cfa_offset 8
 658 05b4 BD46     		mov	sp, r7
 659              		.cfi_def_cfa_register 13
 660              		@ sp needed
 661 05b6 80BD     		pop	{r7, pc}
 662              	.L53:
 663              		.align	2
 664              	.L52:
 665 05b8 01000000 		.word	g_rx+1
 666              		.cfi_endproc
 667              	.LFE64:
 668              		.size	commProcess, .-commProcess
 669              		.section	.text.infoSend,"ax",%progbits
 670              		.align	2
 671              		.global	infoSend
 672              		.thumb
 673              		.thumb_func
 674              		.type	infoSend, %function
 675              	infoSend:
 676              	.LFB65:
 286:..\src/command_processing.c **** 
 287:..\src/command_processing.c **** //==============================================================================
 288:..\src/command_processing.c **** //                                                                     INFO SEND
 289:..\src/command_processing.c **** //==============================================================================
 290:..\src/command_processing.c **** 
 291:..\src/command_processing.c **** void infoSend(void){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 32


 677              		.loc 1 291 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 1504
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 ADF5BC6D 		sub	sp, sp, #1504
 686              		.cfi_def_cfa_offset 1512
 687 0006 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 292:..\src/command_processing.c ****     char packet_string[1500];
 293:..\src/command_processing.c ****     
 294:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 689              		.loc 1 294 0
 690 0008 3B1D     		adds	r3, r7, #4
 691 000a 1846     		mov	r0, r3
 692 000c FFF7FEFF 		bl	prepare_generic_info
 295:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 693              		.loc 1 295 0
 694 0010 3B1D     		adds	r3, r7, #4
 695 0012 1846     		mov	r0, r3
 696 0014 FFF7FEFF 		bl	UART_RS485_PutString
 296:..\src/command_processing.c **** }
 697              		.loc 1 296 0
 698 0018 00BF     		nop
 699 001a 07F5BC67 		add	r7, r7, #1504
 700              		.cfi_def_cfa_offset 8
 701 001e BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0020 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE65:
 707              		.size	infoSend, .-infoSend
 708 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 709              		.align	2
 710              		.global	num_of_bytes
 711              		.thumb
 712              		.thumb_func
 713              		.type	num_of_bytes, %function
 714              	num_of_bytes:
 715              	.LFB66:
 297:..\src/command_processing.c **** //==============================================================================
 298:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 299:..\src/command_processing.c **** //==============================================================================
 300:..\src/command_processing.c ****                     
 301:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
 716              		.loc 1 301 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 33


 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 302:..\src/command_processing.c ****     uint8 sod;
 303:..\src/command_processing.c ****     switch (TYPE) {
 730              		.loc 1 303 0
 731 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 000c 092B     		cmp	r3, #9
 733 000e 20D8     		bhi	.L56
 734 0010 01A2     		adr	r2, .L58
 735 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 736 0016 00BF     		.p2align 2
 737              	.L58:
 738 0018 41000000 		.word	.L57+1
 739 001c 41000000 		.word	.L57+1
 740 0020 41000000 		.word	.L57+1
 741 0024 47000000 		.word	.L59+1
 742 0028 47000000 		.word	.L59+1
 743 002c 4D000000 		.word	.L60+1
 744 0030 4D000000 		.word	.L60+1
 745 0034 4D000000 		.word	.L60+1
 746 0038 53000000 		.word	.L56+1
 747 003c 41000000 		.word	.L57+1
 748              		.p2align 1
 749              	.L57:
 304:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 305:..\src/command_processing.c ****                 sod = 1; break;
 750              		.loc 1 305 0
 751 0040 0123     		movs	r3, #1
 752 0042 FB73     		strb	r3, [r7, #15]
 753 0044 05E0     		b	.L56
 754              	.L59:
 306:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 307:..\src/command_processing.c ****                 sod = 2; break;
 755              		.loc 1 307 0
 756 0046 0223     		movs	r3, #2
 757 0048 FB73     		strb	r3, [r7, #15]
 758 004a 02E0     		b	.L56
 759              	.L60:
 308:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 309:..\src/command_processing.c ****                 sod = 4; break;
 760              		.loc 1 309 0
 761 004c 0423     		movs	r3, #4
 762 004e FB73     		strb	r3, [r7, #15]
 763 0050 00BF     		nop
 764              	.L56:
 310:..\src/command_processing.c ****     }  
 311:..\src/command_processing.c ****     return sod;
 765              		.loc 1 311 0
 766 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 312:..\src/command_processing.c **** }
 767              		.loc 1 312 0
 768 0054 1846     		mov	r0, r3
 769 0056 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 34


 770              		.cfi_def_cfa_offset 4
 771 0058 BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 005a 80BC     		pop	{r7}
 775              		.cfi_restore 7
 776              		.cfi_def_cfa_offset 0
 777 005c 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE66:
 780              		.size	num_of_bytes, .-num_of_bytes
 781 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 782              		.align	2
 783              		.global	infoGet
 784              		.thumb
 785              		.thumb_func
 786              		.type	infoGet, %function
 787              	infoGet:
 788              	.LFB67:
 313:..\src/command_processing.c **** 
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 316:..\src/command_processing.c **** //==============================================================================
 317:..\src/command_processing.c **** 
 318:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 789              		.loc 1 318 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 24008
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 ADF5BB4D 		sub	sp, sp, #23936
 798              		.cfi_def_cfa_offset 23944
 799 0006 92B0     		sub	sp, sp, #72
 800              		.cfi_def_cfa_offset 24016
 801 0008 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 000a 0246     		mov	r2, r0
 804 000c 07F14803 		add	r3, r7, #72
 805 0010 423B     		subs	r3, r3, #66
 806 0012 1A80     		strh	r2, [r3]	@ movhi
 319:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 807              		.loc 1 319 0
 808 0014 07F59C43 		add	r3, r7, #19968
 809 0018 03F12803 		add	r3, r3, #40
 810 001c 0022     		movs	r2, #0
 811 001e 1A60     		str	r2, [r3]
 812 0020 0433     		adds	r3, r3, #4
 813 0022 40F69C72 		movw	r2, #3996
 814 0026 0021     		movs	r1, #0
 815 0028 1846     		mov	r0, r3
 816 002a FFF7FEFF 		bl	memset
 320:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 817              		.loc 1 320 0
 818 002e 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 35


 819 0032 403B     		subs	r3, r3, #64
 820 0034 0022     		movs	r2, #0
 821 0036 1A60     		str	r2, [r3]
 822 0038 0433     		adds	r3, r3, #4
 823 003a 44F61C62 		movw	r2, #19996
 824 003e 0021     		movs	r1, #0
 825 0040 1846     		mov	r0, r3
 826 0042 FFF7FEFF 		bl	memset
 321:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 322:..\src/command_processing.c **** 
 323:..\src/command_processing.c ****     switch (info_type) {
 827              		.loc 1 323 0
 828 0046 07F14803 		add	r3, r7, #72
 829 004a 423B     		subs	r3, r3, #66
 830 004c 1B88     		ldrh	r3, [r3]
 831 004e 062B     		cmp	r3, #6
 832 0050 7DD8     		bhi	.L73
 833 0052 01A2     		adr	r2, .L65
 834 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 835              		.p2align 2
 836              	.L65:
 837 0058 75000000 		.word	.L64+1
 838 005c 97000000 		.word	.L66+1
 839 0060 B9000000 		.word	.L67+1
 840 0064 E1000000 		.word	.L68+1
 841 0068 03010000 		.word	.L69+1
 842 006c 21010000 		.word	.L70+1
 843 0070 27010000 		.word	.L71+1
 844              		.p2align 1
 845              	.L64:
 324:..\src/command_processing.c ****         case INFO_ALL:
 325:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 846              		.loc 1 325 0
 847 0074 07F59C43 		add	r3, r7, #19968
 848 0078 03F12803 		add	r3, r3, #40
 849 007c 1846     		mov	r0, r3
 850 007e FFF7FEFF 		bl	prepare_generic_info
 326:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 851              		.loc 1 326 0
 852 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 327:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 853              		.loc 1 327 0
 854 0086 07F59C43 		add	r3, r7, #19968
 855 008a 03F12803 		add	r3, r3, #40
 856 008e 1846     		mov	r0, r3
 857 0090 FFF7FEFF 		bl	UART_RS485_PutString
 328:..\src/command_processing.c ****             break;
 858              		.loc 1 328 0
 859 0094 5CE0     		b	.L72
 860              	.L66:
 329:..\src/command_processing.c ****         case CYCLES_INFO:
 330:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 861              		.loc 1 330 0
 862 0096 07F59C43 		add	r3, r7, #19968
 863 009a 03F12803 		add	r3, r3, #40
 864 009e 1846     		mov	r0, r3
 865 00a0 FFF7FEFF 		bl	prepare_counter_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 36


 331:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 866              		.loc 1 331 0
 867 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 332:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 868              		.loc 1 332 0
 869 00a8 07F59C43 		add	r3, r7, #19968
 870 00ac 03F12803 		add	r3, r3, #40
 871 00b0 1846     		mov	r0, r3
 872 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 333:..\src/command_processing.c ****             break;
 873              		.loc 1 333 0
 874 00b6 4BE0     		b	.L72
 875              	.L67:
 334:..\src/command_processing.c ****         case GET_SD_PARAM:
 335:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 876              		.loc 1 335 0
 877 00b8 07F59C43 		add	r3, r7, #19968
 878 00bc 03F12803 		add	r3, r3, #40
 879 00c0 4FF47A62 		mov	r2, #4000
 880 00c4 1946     		mov	r1, r3
 881 00c6 2548     		ldr	r0, .L74
 882 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 336:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 883              		.loc 1 336 0
 884 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 337:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 885              		.loc 1 337 0
 886 00d0 07F59C43 		add	r3, r7, #19968
 887 00d4 03F12803 		add	r3, r3, #40
 888 00d8 1846     		mov	r0, r3
 889 00da FFF7FEFF 		bl	UART_RS485_PutString
 338:..\src/command_processing.c ****             break;
 890              		.loc 1 338 0
 891 00de 37E0     		b	.L72
 892              	.L68:
 339:..\src/command_processing.c ****         case GET_SD_DATA:
 340:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 893              		.loc 1 340 0
 894 00e0 07F14803 		add	r3, r7, #72
 895 00e4 403B     		subs	r3, r3, #64
 896 00e6 44F62061 		movw	r1, #20000
 897 00ea 1846     		mov	r0, r3
 898 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 341:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 899              		.loc 1 341 0
 900 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 342:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 901              		.loc 1 342 0
 902 00f4 07F14803 		add	r3, r7, #72
 903 00f8 403B     		subs	r3, r3, #64
 904 00fa 1846     		mov	r0, r3
 905 00fc FFF7FEFF 		bl	UART_RS485_PutString
 343:..\src/command_processing.c ****             break;
 906              		.loc 1 343 0
 907 0100 26E0     		b	.L72
 908              	.L69:
 344:..\src/command_processing.c ****         case GET_SD_FS_TREE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 37


 345:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 909              		.loc 1 345 0
 910 0102 07F14803 		add	r3, r7, #72
 911 0106 403B     		subs	r3, r3, #64
 912 0108 1846     		mov	r0, r3
 913 010a FFF7FEFF 		bl	Get_SD_FS
 346:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 914              		.loc 1 346 0
 915 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 347:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 916              		.loc 1 347 0
 917 0112 07F14803 		add	r3, r7, #72
 918 0116 403B     		subs	r3, r3, #64
 919 0118 1846     		mov	r0, r3
 920 011a FFF7FEFF 		bl	UART_RS485_PutString
 348:..\src/command_processing.c ****             break;
 921              		.loc 1 348 0
 922 011e 17E0     		b	.L72
 923              	.L70:
 349:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 350:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 351:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 924              		.loc 1 351 0
 925 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 352:..\src/command_processing.c ****             break;
 926              		.loc 1 352 0
 927 0124 14E0     		b	.L72
 928              	.L71:
 353:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 354:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 929              		.loc 1 354 0
 930 0126 07F59C43 		add	r3, r7, #19968
 931 012a 03F12803 		add	r3, r3, #40
 932 012e 4FF47A62 		mov	r2, #4000
 933 0132 1946     		mov	r1, r3
 934 0134 0A48     		ldr	r0, .L74+4
 935 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 355:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 936              		.loc 1 355 0
 937 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 356:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 938              		.loc 1 356 0
 939 013e 07F59C43 		add	r3, r7, #19968
 940 0142 03F12803 		add	r3, r3, #40
 941 0146 1846     		mov	r0, r3
 942 0148 FFF7FEFF 		bl	UART_RS485_PutString
 357:..\src/command_processing.c ****             break;            
 943              		.loc 1 357 0
 944 014c 00E0     		b	.L72
 945              	.L73:
 358:..\src/command_processing.c ****         default:
 359:..\src/command_processing.c ****             break;
 946              		.loc 1 359 0
 947 014e 00BF     		nop
 948              	.L72:
 360:..\src/command_processing.c ****     }
 361:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 38


 949              		.loc 1 361 0 discriminator 1
 950 0150 00BF     		nop
 951 0152 07F5BB47 		add	r7, r7, #23936
 952 0156 4837     		adds	r7, r7, #72
 953              		.cfi_def_cfa_offset 8
 954 0158 BD46     		mov	sp, r7
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 015a 80BD     		pop	{r7, pc}
 958              	.L75:
 959              		.align	2
 960              	.L74:
 961 015c 00000000 		.word	sdParam
 962 0160 00000000 		.word	sdR01File
 963              		.cfi_endproc
 964              	.LFE67:
 965              		.size	infoGet, .-infoGet
 966              		.section	.rodata
 967              		.align	2
 968              	.LC8:
 969 0000 00       		.ascii	"\000"
 970 0001 000000   		.align	2
 971              	.LC14:
 972 0004 202D2000 		.ascii	" - \000"
 973              		.align	2
 974              	.LC15:
 975 0008 54686520 		.ascii	"The board will reset\012\000"
 975      626F6172 
 975      64207769 
 975      6C6C2072 
 975      65736574 
 976 001e 0000     		.align	2
 977              	.LC16:
 978 0020 202D3E20 		.ascii	" -> \000"
 978      00
 979 0025 000000   		.align	2
 980              	.LC17:
 981 0028 0A00     		.ascii	"\012\000"
 982              		.section	.text.get_param_list,"ax",%progbits
 983              		.align	2
 984              		.global	get_param_list
 985              		.thumb
 986              		.thumb_func
 987              		.type	get_param_list, %function
 988              	get_param_list:
 989              	.LFB68:
 362:..\src/command_processing.c **** 
 363:..\src/command_processing.c **** 
 364:..\src/command_processing.c **** //==============================================================================
 365:..\src/command_processing.c **** //                                                                GET PARAM LIST
 366:..\src/command_processing.c **** //==============================================================================
 367:..\src/command_processing.c **** 
 368:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 990              		.loc 1 368 0
 991              		.cfi_startproc
 992              		@ args = 4, pretend = 0, frame = 608
 993              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 39


 994 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 995              		.cfi_def_cfa_offset 28
 996              		.cfi_offset 4, -28
 997              		.cfi_offset 5, -24
 998              		.cfi_offset 6, -20
 999              		.cfi_offset 7, -16
 1000              		.cfi_offset 8, -12
 1001              		.cfi_offset 9, -8
 1002              		.cfi_offset 14, -4
 1003 0004 ADF5197D 		sub	sp, sp, #612
 1004              		.cfi_def_cfa_offset 640
 1005 0008 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 000a 0646     		mov	r6, r0
 1008 000c 0846     		mov	r0, r1
 1009 000e 07F10801 		add	r1, r7, #8
 1010 0012 0A60     		str	r2, [r1]
 1011 0014 3A1D     		adds	r2, r7, #4
 1012 0016 1360     		str	r3, [r2]
 1013 0018 07F10F03 		add	r3, r7, #15
 1014 001c 3246     		mov	r2, r6
 1015 001e 1A70     		strb	r2, [r3]
 1016 0020 07F10E03 		add	r3, r7, #14
 1017 0024 0246     		mov	r2, r0
 1018 0026 1A70     		strb	r2, [r3]
 1019              		.loc 1 368 0
 1020 0028 6B46     		mov	r3, sp
 1021 002a 1E46     		mov	r6, r3
 369:..\src/command_processing.c ****     
 370:..\src/command_processing.c ****     uint8 CYDATA idx = 0;      
 1022              		.loc 1 370 0
 1023 002c 0023     		movs	r3, #0
 1024 002e 87F85F32 		strb	r3, [r7, #607]
 371:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1025              		.loc 1 371 0
 1026 0032 07F10803 		add	r3, r7, #8
 1027 0036 1B68     		ldr	r3, [r3]
 1028 0038 1B68     		ldr	r3, [r3]
 1029 003a C7F85032 		str	r3, [r7, #592]
 372:..\src/command_processing.c ****     uint8 CYDATA string_length;
 373:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1030              		.loc 1 373 0
 1031 003e 07F5A473 		add	r3, r7, #328
 1032 0042 0022     		movs	r2, #0
 1033 0044 1A60     		str	r2, [r3]
 1034 0046 0433     		adds	r3, r3, #4
 1035 0048 F622     		movs	r2, #246
 1036 004a 0021     		movs	r1, #0
 1037 004c 1846     		mov	r0, r3
 1038 004e FFF7FEFF 		bl	memset
 374:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1039              		.loc 1 374 0
 1040 0052 07F14C03 		add	r3, r7, #76
 1041 0056 0022     		movs	r2, #0
 1042 0058 1A60     		str	r2, [r3]
 1043 005a 0433     		adds	r3, r3, #4
 1044 005c F622     		movs	r2, #246
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 40


 1045 005e 0021     		movs	r1, #0
 1046 0060 1846     		mov	r0, r3
 1047 0062 FFF7FEFF 		bl	memset
 375:..\src/command_processing.c ****     
 376:..\src/command_processing.c ****     int32 aux_int32;
 377:..\src/command_processing.c ****     uint8 i, j;
 378:..\src/command_processing.c ****     uint8 count;
 379:..\src/command_processing.c ****     char aux_char[50];
 380:..\src/command_processing.c ****     
 381:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1048              		.loc 1 381 0
 1049 0066 07F10F03 		add	r3, r7, #15
 1050 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 006c 9BB2     		uxth	r3, r3
 1052 006e 1A46     		mov	r2, r3	@ movhi
 1053 0070 9200     		lsls	r2, r2, #2
 1054 0072 1344     		add	r3, r3, r2
 1055 0074 1A46     		mov	r2, r3	@ movhi
 1056 0076 9100     		lsls	r1, r2, #2
 1057 0078 1A46     		mov	r2, r3	@ movhi
 1058 007a 0B46     		mov	r3, r1	@ movhi
 1059 007c 1344     		add	r3, r3, r2
 1060 007e 5B00     		lsls	r3, r3, #1
 1061 0080 9AB2     		uxth	r2, r3
 1062 0082 07F10E03 		add	r3, r7, #14
 1063 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 0088 9BB2     		uxth	r3, r3
 1065 008a 1946     		mov	r1, r3	@ movhi
 1066 008c 8900     		lsls	r1, r1, #2
 1067 008e 0B44     		add	r3, r3, r1
 1068 0090 1946     		mov	r1, r3	@ movhi
 1069 0092 0901     		lsls	r1, r1, #4
 1070 0094 CB1A     		subs	r3, r1, r3
 1071 0096 5B00     		lsls	r3, r3, #1
 1072 0098 9BB2     		uxth	r3, r3
 1073 009a 1344     		add	r3, r3, r2
 1074 009c 9BB2     		uxth	r3, r3
 1075 009e 3233     		adds	r3, r3, #50
 1076 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 382:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1077              		.loc 1 382 0
 1078 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1079 00a8 0B46     		mov	r3, r1
 1080 00aa 013B     		subs	r3, r3, #1
 1081 00ac C7F84832 		str	r3, [r7, #584]
 1082 00b0 8AB2     		uxth	r2, r1
 1083 00b2 4FF00003 		mov	r3, #0
 1084 00b6 4FEAC309 		lsl	r9, r3, #3
 1085 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1086 00be 4FEAC208 		lsl	r8, r2, #3
 1087 00c2 8AB2     		uxth	r2, r1
 1088 00c4 4FF00003 		mov	r3, #0
 1089 00c8 DD00     		lsls	r5, r3, #3
 1090 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1091 00ce D400     		lsls	r4, r2, #3
 1092 00d0 0B46     		mov	r3, r1
 1093 00d2 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 41


 1094 00d4 DB08     		lsrs	r3, r3, #3
 1095 00d6 DB00     		lsls	r3, r3, #3
 1096 00d8 ADEB030D 		sub	sp, sp, r3
 1097 00dc 6B46     		mov	r3, sp
 1098 00de 0033     		adds	r3, r3, #0
 1099 00e0 C7F84432 		str	r3, [r7, #580]
 1100              	.LBB22:
 383:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1101              		.loc 1 383 0
 1102 00e4 0023     		movs	r3, #0
 1103 00e6 C7F85432 		str	r3, [r7, #596]
 1104 00ea 0BE0     		b	.L77
 1105              	.L78:
 1106              		.loc 1 383 0 is_stmt 0 discriminator 3
 1107 00ec D7F84422 		ldr	r2, [r7, #580]
 1108 00f0 D7F85432 		ldr	r3, [r7, #596]
 1109 00f4 1344     		add	r3, r3, r2
 1110 00f6 0022     		movs	r2, #0
 1111 00f8 1A70     		strb	r2, [r3]
 1112 00fa D7F85432 		ldr	r3, [r7, #596]
 1113 00fe 0133     		adds	r3, r3, #1
 1114 0100 C7F85432 		str	r3, [r7, #596]
 1115              	.L77:
 1116              		.loc 1 383 0 discriminator 1
 1117 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1118 0108 D7F85432 		ldr	r3, [r7, #596]
 1119 010c 9A42     		cmp	r2, r3
 1120 010e EDDC     		bgt	.L78
 1121              	.LBE22:
 384:..\src/command_processing.c **** 
 385:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1122              		.loc 1 385 0 is_stmt 1
 1123 0110 D7F84432 		ldr	r3, [r7, #580]
 1124 0114 0C22     		movs	r2, #12
 1125 0116 1A70     		strb	r2, [r3]
 386:..\src/command_processing.c ****     packet_data[1] = num_params;
 1126              		.loc 1 386 0
 1127 0118 D7F84432 		ldr	r3, [r7, #580]
 1128 011c 07F10F02 		add	r2, r7, #15
 1129 0120 1278     		ldrb	r2, [r2]
 1130 0122 5A70     		strb	r2, [r3, #1]
 387:..\src/command_processing.c ****     
 388:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1131              		.loc 1 388 0
 1132 0124 0023     		movs	r3, #0
 1133 0126 87F85F32 		strb	r3, [r7, #607]
 1134 012a 44E2     		b	.L79
 1135              	.L102:
 1136              	.LBB23:
 389:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1137              		.loc 1 389 0
 1138 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1139 0130 1B01     		lsls	r3, r3, #4
 1140 0132 07F10802 		add	r2, r7, #8
 1141 0136 1268     		ldr	r2, [r2]
 1142 0138 1344     		add	r3, r3, r2
 1143 013a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 42


 1144 013c C7F85032 		str	r3, [r7, #592]
 390:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1145              		.loc 1 390 0
 1146 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1147 0144 1B01     		lsls	r3, r3, #4
 1148 0146 07F10802 		add	r2, r7, #8
 1149 014a 1268     		ldr	r2, [r2]
 1150 014c 1344     		add	r3, r3, r2
 1151 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1152 0150 1846     		mov	r0, r3
 1153 0152 FFF7FEFF 		bl	num_of_bytes
 1154 0156 0346     		mov	r3, r0
 1155 0158 87F84332 		strb	r3, [r7, #579]
 391:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1156              		.loc 1 391 0
 1157 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1158 0160 3222     		movs	r2, #50
 1159 0162 02FB03F3 		mul	r3, r2, r3
 1160 0166 0233     		adds	r3, r3, #2
 1161 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1162 016c 1201     		lsls	r2, r2, #4
 1163 016e 07F10801 		add	r1, r7, #8
 1164 0172 0968     		ldr	r1, [r1]
 1165 0174 0A44     		add	r2, r2, r1
 1166 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1167 0178 D7F84422 		ldr	r2, [r7, #580]
 1168 017c D154     		strb	r1, [r2, r3]
 392:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1169              		.loc 1 392 0
 1170 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1171 0182 3222     		movs	r2, #50
 1172 0184 02FB03F3 		mul	r3, r2, r3
 1173 0188 0333     		adds	r3, r3, #3
 1174 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1175 018e 1201     		lsls	r2, r2, #4
 1176 0190 07F10801 		add	r1, r7, #8
 1177 0194 0968     		ldr	r1, [r1]
 1178 0196 0A44     		add	r2, r2, r1
 1179 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1180 019a D7F84422 		ldr	r2, [r7, #580]
 1181 019e D154     		strb	r1, [r2, r3]
 393:..\src/command_processing.c **** 
 394:..\src/command_processing.c **** 
 395:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1182              		.loc 1 395 0
 1183 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1184 01a4 1B01     		lsls	r3, r3, #4
 1185 01a6 07F10802 		add	r2, r7, #8
 1186 01aa 1268     		ldr	r2, [r2]
 1187 01ac 1344     		add	r3, r3, r2
 1188 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1189 01b0 052B     		cmp	r3, #5
 1190 01b2 61D1     		bne	.L113
 396:..\src/command_processing.c **** 
 397:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 398:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1191              		.loc 1 398 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 43


 1192 01b4 B74B     		ldr	r3, .L114
 1193 01b6 1B6A     		ldr	r3, [r3, #32]
 1194 01b8 B64A     		ldr	r2, .L114
 1195 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1196 01be 43FA02F2 		asr	r2, r3, r2
 1197 01c2 07F14803 		add	r3, r7, #72
 1198 01c6 1A60     		str	r2, [r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1199              		.loc 1 399 0
 1200 01c8 0023     		movs	r3, #0
 1201 01ca 87F85C32 		strb	r3, [r7, #604]
 1202 01ce 1AE0     		b	.L82
 1203              	.L83:
 400:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1204              		.loc 1 400 0 discriminator 3
 1205 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1206 01d4 3222     		movs	r2, #50
 1207 01d6 02FB03F3 		mul	r3, r2, r3
 1208 01da 1A1D     		adds	r2, r3, #4
 1209 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1210 01e0 1A44     		add	r2, r2, r3
 1211 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1212 01e6 D31A     		subs	r3, r2, r3
 1213 01e8 013B     		subs	r3, r3, #1
 1214 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1215 01ee 07F14801 		add	r1, r7, #72
 1216 01f2 0A44     		add	r2, r2, r1
 1217 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1218 01f6 D7F84422 		ldr	r2, [r7, #580]
 1219 01fa D154     		strb	r1, [r2, r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1220              		.loc 1 399 0 discriminator 3
 1221 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1222 0200 0133     		adds	r3, r3, #1
 1223 0202 87F85C32 		strb	r3, [r7, #604]
 1224              	.L82:
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1225              		.loc 1 399 0 is_stmt 0 discriminator 1
 1226 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1227 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1228 020e 9A42     		cmp	r2, r3
 1229 0210 DED3     		bcc	.L83
 401:..\src/command_processing.c ****             }
 402:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1230              		.loc 1 402 0 is_stmt 1
 1231 0212 A04B     		ldr	r3, .L114
 1232 0214 5B6A     		ldr	r3, [r3, #36]
 1233 0216 9F4A     		ldr	r2, .L114
 1234 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1235 021c 43FA02F2 		asr	r2, r3, r2
 1236 0220 07F14803 		add	r3, r7, #72
 1237 0224 1A60     		str	r2, [r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1238              		.loc 1 403 0
 1239 0226 0023     		movs	r3, #0
 1240 0228 87F85C32 		strb	r3, [r7, #604]
 1241 022c 1DE0     		b	.L84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 44


 1242              	.L85:
 404:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1243              		.loc 1 404 0 discriminator 3
 1244 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1245 0232 3222     		movs	r2, #50
 1246 0234 02FB03F3 		mul	r3, r2, r3
 1247 0238 1A1D     		adds	r2, r3, #4
 1248 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1249 023e 1A44     		add	r2, r2, r3
 1250 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1251 0244 1A44     		add	r2, r2, r3
 1252 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1253 024a D31A     		subs	r3, r2, r3
 1254 024c 013B     		subs	r3, r3, #1
 1255 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1256 0252 07F14801 		add	r1, r7, #72
 1257 0256 0A44     		add	r2, r2, r1
 1258 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1259 025a D7F84422 		ldr	r2, [r7, #580]
 1260 025e D154     		strb	r1, [r2, r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1261              		.loc 1 403 0 discriminator 3
 1262 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1263 0264 0133     		adds	r3, r3, #1
 1264 0266 87F85C32 		strb	r3, [r7, #604]
 1265              	.L84:
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1266              		.loc 1 403 0 is_stmt 0 discriminator 1
 1267 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1268 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1269 0272 9A42     		cmp	r2, r3
 1270 0274 DBD3     		bcc	.L85
 405:..\src/command_processing.c ****             }
 406:..\src/command_processing.c ****             break;            
 1271              		.loc 1 406 0 is_stmt 1
 1272 0276 48E0     		b	.L86
 1273              	.L113:
 407:..\src/command_processing.c ****             
 408:..\src/command_processing.c **** 
 409:..\src/command_processing.c ****         case 0:  // Not custom parameter
 410:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 411:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1274              		.loc 1 411 0
 1275 0278 0023     		movs	r3, #0
 1276 027a 87F85D32 		strb	r3, [r7, #605]
 1277 027e 32E0     		b	.L87
 1278              	.L90:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1279              		.loc 1 412 0
 1280 0280 0023     		movs	r3, #0
 1281 0282 87F85C32 		strb	r3, [r7, #604]
 1282 0286 21E0     		b	.L88
 1283              	.L89:
 413:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1284              		.loc 1 413 0 discriminator 3
 1285 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1286 028c 3222     		movs	r2, #50
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 45


 1287 028e 02FB03F3 		mul	r3, r2, r3
 1288 0292 1A1D     		adds	r2, r3, #4
 1289 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1290 0298 1A44     		add	r2, r2, r3
 1291 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1292 029e 1A44     		add	r2, r2, r3
 1293 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1294 02a4 D31A     		subs	r3, r2, r3
 1295 02a6 013B     		subs	r3, r3, #1
 1296 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1297 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1298 02b0 0A44     		add	r2, r2, r1
 1299 02b2 1146     		mov	r1, r2
 1300 02b4 D7F85022 		ldr	r2, [r7, #592]
 1301 02b8 0A44     		add	r2, r2, r1
 1302 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1303 02bc D7F84422 		ldr	r2, [r7, #580]
 1304 02c0 D154     		strb	r1, [r2, r3]
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1305              		.loc 1 412 0 discriminator 3
 1306 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1307 02c6 0133     		adds	r3, r3, #1
 1308 02c8 87F85C32 		strb	r3, [r7, #604]
 1309              	.L88:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1310              		.loc 1 412 0 is_stmt 0 discriminator 1
 1311 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1313 02d4 9A42     		cmp	r2, r3
 1314 02d6 D7D3     		bcc	.L89
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1315              		.loc 1 411 0 is_stmt 1 discriminator 2
 1316 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1317 02dc 97F84332 		ldrb	r3, [r7, #579]
 1318 02e0 1344     		add	r3, r3, r2
 1319 02e2 87F85D32 		strb	r3, [r7, #605]
 1320              	.L87:
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1321              		.loc 1 411 0 is_stmt 0 discriminator 1
 1322 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1323 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1324 02ee 1B01     		lsls	r3, r3, #4
 1325 02f0 07F10801 		add	r1, r7, #8
 1326 02f4 0968     		ldr	r1, [r1]
 1327 02f6 0B44     		add	r3, r3, r1
 1328 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1329 02fa 1946     		mov	r1, r3
 1330 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1331 0300 03FB01F3 		mul	r3, r3, r1
 1332 0304 9A42     		cmp	r2, r3
 1333 0306 BBDB     		blt	.L90
 414:..\src/command_processing.c ****                 }
 415:..\src/command_processing.c ****             }
 416:..\src/command_processing.c ****             break;
 1334              		.loc 1 416 0 is_stmt 1
 1335 0308 00BF     		nop
 1336              	.L86:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 46


 417:..\src/command_processing.c ****     }
 418:..\src/command_processing.c ****        
 419:..\src/command_processing.c ****         sprintf(aux_str,"");
 1337              		.loc 1 419 0
 1338 030a 634B     		ldr	r3, .L114+4
 1339 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1340 030e 07F5A473 		add	r3, r7, #328
 1341 0312 1A70     		strb	r2, [r3]
 420:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1342              		.loc 1 420 0
 1343 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1344 0318 0133     		adds	r3, r3, #1
 1345 031a 07F11401 		add	r1, r7, #20
 1346 031e 0A22     		movs	r2, #10
 1347 0320 1846     		mov	r0, r3
 1348 0322 FFF7FEFF 		bl	itoa
 421:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1349              		.loc 1 421 0
 1350 0326 07F11402 		add	r2, r7, #20
 1351 032a 07F5A473 		add	r3, r7, #328
 1352 032e 1146     		mov	r1, r2
 1353 0330 1846     		mov	r0, r3
 1354 0332 FFF7FEFF 		bl	strcat
 422:..\src/command_processing.c ****         strcat(aux_str," - ");
 1355              		.loc 1 422 0
 1356 0336 07F5A473 		add	r3, r7, #328
 1357 033a 1846     		mov	r0, r3
 1358 033c FFF7FEFF 		bl	strlen
 1359 0340 0346     		mov	r3, r0
 1360 0342 1A46     		mov	r2, r3
 1361 0344 07F5A473 		add	r3, r7, #328
 1362 0348 1344     		add	r3, r3, r2
 1363 034a 544A     		ldr	r2, .L114+8
 1364 034c 1068     		ldr	r0, [r2]	@ unaligned
 1365 034e 1860     		str	r0, [r3]	@ unaligned
 423:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1366              		.loc 1 423 0
 1367 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1368 0354 1B01     		lsls	r3, r3, #4
 1369 0356 07F10802 		add	r2, r7, #8
 1370 035a 1268     		ldr	r2, [r2]
 1371 035c 1344     		add	r3, r3, r2
 1372 035e 9A68     		ldr	r2, [r3, #8]
 1373 0360 07F5A473 		add	r3, r7, #328
 1374 0364 1146     		mov	r1, r2
 1375 0366 1846     		mov	r0, r3
 1376 0368 FFF7FEFF 		bl	strcat
 424:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1377              		.loc 1 424 0
 1378 036c 07F5A473 		add	r3, r7, #328
 1379 0370 1846     		mov	r0, r3
 1380 0372 FFF7FEFF 		bl	strlen
 1381 0376 0346     		mov	r3, r0
 1382 0378 87F85E32 		strb	r3, [r7, #606]
 425:..\src/command_processing.c ****         
 426:..\src/command_processing.c ****         // Parameters with a menu
 427:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 47


 1383              		.loc 1 427 0
 1384 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1385 0380 1B01     		lsls	r3, r3, #4
 1386 0382 07F10802 		add	r2, r7, #8
 1387 0386 1268     		ldr	r2, [r2]
 1388 0388 1344     		add	r3, r3, r2
 1389 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1390 038c 002B     		cmp	r3, #0
 1391 038e 40D0     		beq	.L91
 428:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1392              		.loc 1 428 0
 1393 0390 0023     		movs	r3, #0
 1394 0392 87F85D32 		strb	r3, [r7, #605]
 1395 0396 35E0     		b	.L92
 1396              	.L94:
 429:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1397              		.loc 1 429 0
 1398 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1399 039c 2C22     		movs	r2, #44
 1400 039e 02FB03F3 		mul	r3, r2, r3
 1401 03a2 3A1D     		adds	r2, r7, #4
 1402 03a4 1268     		ldr	r2, [r2]
 1403 03a6 1344     		add	r3, r3, r2
 1404 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1405 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1406 03ae 1B01     		lsls	r3, r3, #4
 1407 03b0 07F10801 		add	r1, r7, #8
 1408 03b4 0968     		ldr	r1, [r1]
 1409 03b6 0B44     		add	r3, r3, r1
 1410 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1411 03ba 9A42     		cmp	r2, r3
 1412 03bc 13D1     		bne	.L93
 430:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1413              		.loc 1 430 0
 1414 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1415 03c2 2C22     		movs	r2, #44
 1416 03c4 02FB03F3 		mul	r3, r2, r3
 1417 03c8 3A1D     		adds	r2, r7, #4
 1418 03ca 1268     		ldr	r2, [r2]
 1419 03cc 1A44     		add	r2, r2, r3
 1420 03ce D7F85032 		ldr	r3, [r7, #592]
 1421 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1422 03d4 9B00     		lsls	r3, r3, #2
 1423 03d6 1344     		add	r3, r3, r2
 1424 03d8 5A68     		ldr	r2, [r3, #4]
 1425 03da 07F5A473 		add	r3, r7, #328
 1426 03de 1146     		mov	r1, r2
 1427 03e0 1846     		mov	r0, r3
 1428 03e2 FFF7FEFF 		bl	strcat
 1429              	.L93:
 431:..\src/command_processing.c ****                 }              
 432:..\src/command_processing.c ****             //Recomputes string length
 433:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1430              		.loc 1 433 0 discriminator 2
 1431 03e6 07F5A473 		add	r3, r7, #328
 1432 03ea 1846     		mov	r0, r3
 1433 03ec FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 48


 1434 03f0 0346     		mov	r3, r0
 1435 03f2 DBB2     		uxtb	r3, r3
 1436 03f4 0133     		adds	r3, r3, #1
 1437 03f6 87F85E32 		strb	r3, [r7, #606]
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1438              		.loc 1 428 0 discriminator 2
 1439 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1440 03fe 0133     		adds	r3, r3, #1
 1441 0400 87F85D32 		strb	r3, [r7, #605]
 1442              	.L92:
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1443              		.loc 1 428 0 is_stmt 0 discriminator 1
 1444 0404 07F10E03 		add	r3, r7, #14
 1445 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1446 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1447 040e 9A42     		cmp	r2, r3
 1448 0410 C2D3     		bcc	.L94
 1449              	.L91:
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****         }
 436:..\src/command_processing.c **** 
 437:..\src/command_processing.c ****         // Add parameter string to packet
 438:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1450              		.loc 1 438 0 is_stmt 1
 1451 0412 97F85E32 		ldrb	r3, [r7, #606]
 1452 0416 87F85D32 		strb	r3, [r7, #605]
 1453 041a 28E0     		b	.L95
 1454              	.L96:
 439:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1455              		.loc 1 439 0 discriminator 3
 1456 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1457 0420 3222     		movs	r2, #50
 1458 0422 02FB03F3 		mul	r3, r2, r3
 1459 0426 1A1D     		adds	r2, r3, #4
 1460 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1461 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1462 0430 0901     		lsls	r1, r1, #4
 1463 0432 07F10800 		add	r0, r7, #8
 1464 0436 0068     		ldr	r0, [r0]
 1465 0438 0144     		add	r1, r1, r0
 1466 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1467 043c 01FB03F3 		mul	r3, r1, r3
 1468 0440 1A44     		add	r2, r2, r3
 1469 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1470 0446 1A44     		add	r2, r2, r3
 1471 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1472 044c D31A     		subs	r3, r2, r3
 1473 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1474 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1475 0456 8A1A     		subs	r2, r1, r2
 1476 0458 07F5A471 		add	r1, r7, #328
 1477 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1478 045e D7F84422 		ldr	r2, [r7, #580]
 1479 0462 D154     		strb	r1, [r2, r3]
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1480              		.loc 1 438 0 discriminator 3
 1481 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 49


 1482 0468 013B     		subs	r3, r3, #1
 1483 046a 87F85D32 		strb	r3, [r7, #605]
 1484              	.L95:
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1485              		.loc 1 438 0 is_stmt 0 discriminator 1
 1486 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1487 0472 002B     		cmp	r3, #0
 1488 0474 D2D1     		bne	.L96
 440:..\src/command_processing.c ****         
 441:..\src/command_processing.c ****         
 442:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1489              		.loc 1 442 0 is_stmt 1
 1490 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1491 047a 1B01     		lsls	r3, r3, #4
 1492 047c 07F10802 		add	r2, r7, #8
 1493 0480 1268     		ldr	r2, [r2]
 1494 0482 1344     		add	r3, r3, r2
 1495 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1496 0486 002B     		cmp	r3, #0
 1497 0488 6ED1     		bne	.L97
 443:..\src/command_processing.c ****             //Send the number of menus          
 444:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1498              		.loc 1 444 0
 1499 048a 0023     		movs	r3, #0
 1500 048c 87F85D32 		strb	r3, [r7, #605]
 1501 0490 40E0     		b	.L98
 1502              	.L115:
 1503 0492 00BF     		.align	2
 1504              	.L114:
 1505 0494 00000000 		.word	c_mem
 1506 0498 00000000 		.word	.LC8
 1507 049c 04000000 		.word	.LC14
 1508              	.L100:
 445:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1509              		.loc 1 445 0
 1510 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1511 04a4 2C22     		movs	r2, #44
 1512 04a6 02FB03F3 		mul	r3, r2, r3
 1513 04aa 3A1D     		adds	r2, r7, #4
 1514 04ac 1268     		ldr	r2, [r2]
 1515 04ae 1344     		add	r3, r3, r2
 1516 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1517 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1518 04b6 1B01     		lsls	r3, r3, #4
 1519 04b8 07F10801 		add	r1, r7, #8
 1520 04bc 0968     		ldr	r1, [r1]
 1521 04be 0B44     		add	r3, r3, r1
 1522 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1523 04c2 9A42     		cmp	r2, r3
 1524 04c4 21D1     		bne	.L99
 446:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1525              		.loc 1 446 0
 1526 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1527 04ca 3222     		movs	r2, #50
 1528 04cc 02FB03F3 		mul	r3, r2, r3
 1529 04d0 1A1D     		adds	r2, r3, #4
 1530 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 50


 1531 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1532 04da 0901     		lsls	r1, r1, #4
 1533 04dc 07F10800 		add	r0, r7, #8
 1534 04e0 0068     		ldr	r0, [r0]
 1535 04e2 0144     		add	r1, r1, r0
 1536 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1537 04e6 01FB03F3 		mul	r3, r1, r3
 1538 04ea 1A44     		add	r2, r2, r3
 1539 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1540 04f0 1344     		add	r3, r3, r2
 1541 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1542 04f6 0132     		adds	r2, r2, #1
 1543 04f8 D1B2     		uxtb	r1, r2
 1544 04fa D7F84422 		ldr	r2, [r7, #580]
 1545 04fe D154     		strb	r1, [r2, r3]
 447:..\src/command_processing.c ****                 i = num_menus;}              
 1546              		.loc 1 447 0
 1547 0500 07F10E03 		add	r3, r7, #14
 1548 0504 1B78     		ldrb	r3, [r3]
 1549 0506 87F85D32 		strb	r3, [r7, #605]
 1550              	.L99:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1551              		.loc 1 444 0 discriminator 2
 1552 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1553 050e 0133     		adds	r3, r3, #1
 1554 0510 87F85D32 		strb	r3, [r7, #605]
 1555              	.L98:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1556              		.loc 1 444 0 is_stmt 0 discriminator 1
 1557 0514 07F10E03 		add	r3, r7, #14
 1558 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1559 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1560 051e 9A42     		cmp	r2, r3
 1561 0520 BED3     		bcc	.L100
 448:..\src/command_processing.c ****             }
 449:..\src/command_processing.c ****             // Add empty bit + struct number
 450:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 451:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1562              		.loc 1 451 0 is_stmt 1
 1563 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1564 0526 3222     		movs	r2, #50
 1565 0528 02FB03F3 		mul	r3, r2, r3
 1566 052c 1A1D     		adds	r2, r3, #4
 1567 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1568 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1569 0536 0901     		lsls	r1, r1, #4
 1570 0538 07F10800 		add	r0, r7, #8
 1571 053c 0068     		ldr	r0, [r0]
 1572 053e 0144     		add	r1, r1, r0
 1573 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1574 0542 01FB03F3 		mul	r3, r1, r3
 1575 0546 1A44     		add	r2, r2, r3
 1576 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1577 054c 1344     		add	r3, r3, r2
 1578 054e 0233     		adds	r3, r3, #2
 1579 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1580 0554 1201     		lsls	r2, r2, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 51


 1581 0556 07F10801 		add	r1, r7, #8
 1582 055a 0968     		ldr	r1, [r1]
 1583 055c 0A44     		add	r2, r2, r1
 1584 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1585 0560 D7F84422 		ldr	r2, [r7, #580]
 1586 0564 D154     		strb	r1, [r2, r3]
 1587 0566 21E0     		b	.L101
 1588              	.L97:
 452:..\src/command_processing.c ****         }
 453:..\src/command_processing.c ****         else {
 454:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1589              		.loc 1 454 0
 1590 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1591 056c 3222     		movs	r2, #50
 1592 056e 02FB03F3 		mul	r3, r2, r3
 1593 0572 1A1D     		adds	r2, r3, #4
 1594 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1595 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1596 057c 0901     		lsls	r1, r1, #4
 1597 057e 07F10800 		add	r0, r7, #8
 1598 0582 0068     		ldr	r0, [r0]
 1599 0584 0144     		add	r1, r1, r0
 1600 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1601 0588 01FB03F3 		mul	r3, r1, r3
 1602 058c 1A44     		add	r2, r2, r3
 1603 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1604 0592 1344     		add	r3, r3, r2
 1605 0594 0133     		adds	r3, r3, #1
 1606 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1607 059a 1201     		lsls	r2, r2, #4
 1608 059c 07F10801 		add	r1, r7, #8
 1609 05a0 0968     		ldr	r1, [r1]
 1610 05a2 0A44     		add	r2, r2, r1
 1611 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1612 05a6 D7F84422 		ldr	r2, [r7, #580]
 1613 05aa D154     		strb	r1, [r2, r3]
 1614              	.L101:
 1615              	.LBE23:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1616              		.loc 1 388 0 discriminator 2
 1617 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1618 05b0 0133     		adds	r3, r3, #1
 1619 05b2 87F85F32 		strb	r3, [r7, #607]
 1620              	.L79:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1621              		.loc 1 388 0 is_stmt 0 discriminator 1
 1622 05b6 07F10F03 		add	r3, r7, #15
 1623 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1624 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 05c0 9A42     		cmp	r2, r3
 1626 05c2 FFF4B3AD 		bcc	.L102
 455:..\src/command_processing.c ****         }
 456:..\src/command_processing.c ****     }
 457:..\src/command_processing.c ****     
 458:..\src/command_processing.c ****     // Add menu
 459:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1627              		.loc 1 459 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 52


 1628 05c6 0023     		movs	r3, #0
 1629 05c8 87F85C32 		strb	r3, [r7, #604]
 1630 05cc C0E0     		b	.L103
 1631              	.L111:
 460:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1632              		.loc 1 460 0
 1633 05ce 774B     		ldr	r3, .L116
 1634 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 05d2 07F14C03 		add	r3, r7, #76
 1636 05d6 1A70     		strb	r2, [r3]
 461:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1637              		.loc 1 461 0
 1638 05d8 0023     		movs	r3, #0
 1639 05da 87F85B32 		strb	r3, [r7, #603]
 1640 05de 7AE0     		b	.L104
 1641              	.L108:
 462:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1642              		.loc 1 462 0
 1643 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1644 05e4 2C22     		movs	r2, #44
 1645 05e6 02FB03F3 		mul	r3, r2, r3
 1646 05ea 3A1D     		adds	r2, r7, #4
 1647 05ec 1268     		ldr	r2, [r2]
 1648 05ee 1A44     		add	r2, r2, r3
 1649 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1650 05f4 9B00     		lsls	r3, r3, #2
 1651 05f6 1344     		add	r3, r3, r2
 1652 05f8 5B68     		ldr	r3, [r3, #4]
 1653 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1654 05fc 002B     		cmp	r3, #0
 1655 05fe 24D1     		bne	.L105
 463:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1656              		.loc 1 463 0
 1657 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1658 0604 2C22     		movs	r2, #44
 1659 0606 02FB03F3 		mul	r3, r2, r3
 1660 060a 3A1D     		adds	r2, r7, #4
 1661 060c 1268     		ldr	r2, [r2]
 1662 060e 1344     		add	r3, r3, r2
 1663 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1664 0612 012B     		cmp	r3, #1
 1665 0614 15D1     		bne	.L106
 464:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1666              		.loc 1 464 0
 1667 0616 07F14C03 		add	r3, r7, #76
 1668 061a 1846     		mov	r0, r3
 1669 061c FFF7FEFF 		bl	strlen
 1670 0620 0346     		mov	r3, r0
 1671 0622 1A46     		mov	r2, r3
 1672 0624 07F14C03 		add	r3, r7, #76
 1673 0628 1344     		add	r3, r3, r2
 1674 062a 614A     		ldr	r2, .L116+4
 1675 062c 1D46     		mov	r5, r3
 1676 062e 1446     		mov	r4, r2
 1677 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1678 0632 2860     		str	r0, [r5]	@ unaligned
 1679 0634 6960     		str	r1, [r5, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 53


 1680 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1681 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1682 063a 2068     		ldr	r0, [r4]	@ unaligned
 1683 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1684 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1685 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1686              	.L106:
 465:..\src/command_processing.c ****                 }
 466:..\src/command_processing.c ****                 count = 10;
 1687              		.loc 1 466 0
 1688 0642 0A23     		movs	r3, #10
 1689 0644 87F85B32 		strb	r3, [r7, #603]
 1690 0648 40E0     		b	.L107
 1691              	.L105:
 467:..\src/command_processing.c ****             }            
 468:..\src/command_processing.c ****             else {
 469:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1692              		.loc 1 469 0
 1693 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1694 064e 07F11401 		add	r1, r7, #20
 1695 0652 0A22     		movs	r2, #10
 1696 0654 1846     		mov	r0, r3
 1697 0656 FFF7FEFF 		bl	itoa
 470:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1698              		.loc 1 470 0
 1699 065a 07F11402 		add	r2, r7, #20
 1700 065e 07F14C03 		add	r3, r7, #76
 1701 0662 1146     		mov	r1, r2
 1702 0664 1846     		mov	r0, r3
 1703 0666 FFF7FEFF 		bl	strcat
 471:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1704              		.loc 1 471 0
 1705 066a 07F14C03 		add	r3, r7, #76
 1706 066e 1846     		mov	r0, r3
 1707 0670 FFF7FEFF 		bl	strlen
 1708 0674 0346     		mov	r3, r0
 1709 0676 1A46     		mov	r2, r3
 1710 0678 07F14C03 		add	r3, r7, #76
 1711 067c 1344     		add	r3, r3, r2
 1712 067e 4D4A     		ldr	r2, .L116+8
 1713 0680 1068     		ldr	r0, [r2]	@ unaligned
 1714 0682 1860     		str	r0, [r3]	@ unaligned
 1715 0684 1279     		ldrb	r2, [r2, #4]
 1716 0686 1A71     		strb	r2, [r3, #4]
 472:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
 1717              		.loc 1 472 0
 1718 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1719 068c 2C22     		movs	r2, #44
 1720 068e 02FB03F3 		mul	r3, r2, r3
 1721 0692 3A1D     		adds	r2, r7, #4
 1722 0694 1268     		ldr	r2, [r2]
 1723 0696 1A44     		add	r2, r2, r3
 1724 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1725 069c 9B00     		lsls	r3, r3, #2
 1726 069e 1344     		add	r3, r3, r2
 1727 06a0 5A68     		ldr	r2, [r3, #4]
 1728 06a2 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 54


 1729 06a6 1146     		mov	r1, r2
 1730 06a8 1846     		mov	r0, r3
 1731 06aa FFF7FEFF 		bl	strcat
 473:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1732              		.loc 1 473 0
 1733 06ae 07F14C03 		add	r3, r7, #76
 1734 06b2 1846     		mov	r0, r3
 1735 06b4 FFF7FEFF 		bl	strlen
 1736 06b8 0346     		mov	r3, r0
 1737 06ba 1A46     		mov	r2, r3
 1738 06bc 07F14C03 		add	r3, r7, #76
 1739 06c0 1344     		add	r3, r3, r2
 1740 06c2 3D49     		ldr	r1, .L116+12
 1741 06c4 1A46     		mov	r2, r3
 1742 06c6 0B46     		mov	r3, r1
 1743 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1744 06ca 1380     		strh	r3, [r2]	@ unaligned
 1745              	.L107:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1746              		.loc 1 461 0 discriminator 2
 1747 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1748 06d0 0133     		adds	r3, r3, #1
 1749 06d2 87F85B32 		strb	r3, [r7, #603]
 1750              	.L104:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1751              		.loc 1 461 0 is_stmt 0 discriminator 1
 1752 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1753 06da 092B     		cmp	r3, #9
 1754 06dc 80D9     		bls	.L108
 474:..\src/command_processing.c ****             }    
 475:..\src/command_processing.c ****         }
 476:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1755              		.loc 1 476 0 is_stmt 1
 1756 06de 07F14C03 		add	r3, r7, #76
 1757 06e2 1846     		mov	r0, r3
 1758 06e4 FFF7FEFF 		bl	strlen
 1759 06e8 0346     		mov	r3, r0
 1760 06ea 87F85E32 		strb	r3, [r7, #606]
 477:..\src/command_processing.c ****         
 478:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1761              		.loc 1 478 0
 1762 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1763 06f2 87F85D32 		strb	r3, [r7, #605]
 1764 06f6 22E0     		b	.L109
 1765              	.L110:
 479:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1766              		.loc 1 479 0 discriminator 3
 1767 06f8 07F10F03 		add	r3, r7, #15
 1768 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1769 06fe 3222     		movs	r2, #50
 1770 0700 02FB03F3 		mul	r3, r2, r3
 1771 0704 9A1C     		adds	r2, r3, #2
 1772 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1773 070a 9621     		movs	r1, #150
 1774 070c 01FB03F3 		mul	r3, r1, r3
 1775 0710 1A44     		add	r2, r2, r3
 1776 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 55


 1777 0716 1A44     		add	r2, r2, r3
 1778 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1779 071c D31A     		subs	r3, r2, r3
 1780 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1781 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1782 0726 8A1A     		subs	r2, r1, r2
 1783 0728 07F14C01 		add	r1, r7, #76
 1784 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1785 072e D7F84422 		ldr	r2, [r7, #580]
 1786 0732 D154     		strb	r1, [r2, r3]
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1787              		.loc 1 478 0 discriminator 3
 1788 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1789 0738 013B     		subs	r3, r3, #1
 1790 073a 87F85D32 		strb	r3, [r7, #605]
 1791              	.L109:
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1792              		.loc 1 478 0 is_stmt 0 discriminator 1
 1793 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1794 0742 002B     		cmp	r3, #0
 1795 0744 D8D1     		bne	.L110
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1796              		.loc 1 459 0 is_stmt 1 discriminator 2
 1797 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1798 074a 0133     		adds	r3, r3, #1
 1799 074c 87F85C32 		strb	r3, [r7, #604]
 1800              	.L103:
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1801              		.loc 1 459 0 is_stmt 0 discriminator 1
 1802 0750 07F10E03 		add	r3, r7, #14
 1803 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1804 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1805 075a 9A42     		cmp	r2, r3
 1806 075c FFF437AF 		bcc	.L111
 480:..\src/command_processing.c ****     }
 481:..\src/command_processing.c ****         
 482:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1807              		.loc 1 482 0 is_stmt 1
 1808 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1809 0764 5C1E     		subs	r4, r3, #1
 1810 0766 D7F84422 		ldr	r2, [r7, #580]
 1811 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1812 076e DBB2     		uxtb	r3, r3
 1813 0770 013B     		subs	r3, r3, #1
 1814 0772 DBB2     		uxtb	r3, r3
 1815 0774 1946     		mov	r1, r3
 1816 0776 1046     		mov	r0, r2
 1817 0778 FFF7FEFF 		bl	LCRChecksum
 1818 077c 0346     		mov	r3, r0
 1819 077e 1A46     		mov	r2, r3
 1820 0780 D7F84432 		ldr	r3, [r7, #580]
 1821 0784 1A55     		strb	r2, [r3, r4]
 483:..\src/command_processing.c ****     
 484:..\src/command_processing.c ****     if (sendToDevice)
 1822              		.loc 1 484 0
 1823 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1824 078a 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 56


 1825 078c 07D0     		beq	.L112
 485:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1826              		.loc 1 485 0
 1827 078e D7F84432 		ldr	r3, [r7, #580]
 1828 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1829 0796 1146     		mov	r1, r2
 1830 0798 1846     		mov	r0, r3
 1831 079a FFF7FEFF 		bl	commWrite
 1832              	.L112:
 1833 079e B546     		mov	sp, r6
 486:..\src/command_processing.c ****     }
 487:..\src/command_processing.c ****     else {
 488:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 489:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 490:..\src/command_processing.c ****       // longPkgSize = packet_length;
 491:..\src/command_processing.c ****     }
 492:..\src/command_processing.c **** }
 1834              		.loc 1 492 0
 1835 07a0 00BF     		nop
 1836 07a2 07F51977 		add	r7, r7, #612
 1837              		.cfi_def_cfa_offset 28
 1838 07a6 BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1842              	.L117:
 1843              		.align	2
 1844              	.L116:
 1845 07ac 00000000 		.word	.LC8
 1846 07b0 08000000 		.word	.LC15
 1847 07b4 20000000 		.word	.LC16
 1848 07b8 28000000 		.word	.LC17
 1849              		.cfi_endproc
 1850              	.LFE68:
 1851              		.size	get_param_list, .-get_param_list
 1852              		.section	.rodata
 1853 002a 0000     		.align	2
 1854              	.LC19:
 1855 002c 44657669 		.ascii	"Device ID:\000"
 1855      63652049 
 1855      443A00
 1856 0037 00       		.align	2
 1857              	.LC20:
 1858 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1858      74687265 
 1858      73686F6C 
 1858      64733A00 
 1859              		.align	2
 1860              	.LC21:
 1861 0048 454D4720 		.ascii	"EMG max values:\000"
 1861      6D617820 
 1861      76616C75 
 1861      65733A00 
 1862              		.align	2
 1863              	.LC22:
 1864 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1864      6D617820 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 57


 1864      73706565 
 1864      64733A00 
 1865              		.align	2
 1866              	.LC23:
 1867 0068 454D4720 		.ascii	"EMG inversion:\000"
 1867      696E7665 
 1867      7273696F 
 1867      6E3A00
 1868 0077 00       		.align	2
 1869              	.LC24:
 1870 0078 4D617374 		.ascii	"Master Mode:\000"
 1870      6572204D 
 1870      6F64653A 
 1870      00
 1871 0085 000000   		.align	2
 1872              	.LC25:
 1873 0088 536C6176 		.ascii	"Slave ID:\000"
 1873      65204944 
 1873      3A00
 1874 0092 0000     		.align	2
 1875              	.LC26:
 1876 0094 536C6176 		.ascii	"Slave resolution:\000"
 1876      65207265 
 1876      736F6C75 
 1876      74696F6E 
 1876      3A00
 1877 00a6 0000     		.align	2
 1878              	.LC27:
 1879 00a8 496E7075 		.ascii	"Input mode:\000"
 1879      74206D6F 
 1879      64653A00 
 1880              		.align	2
 1881              	.LC28:
 1882 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1882      206C696D 
 1882      69747320 
 1882      5B696E66 
 1882      2C207375 
 1883              		.align	2
 1884              	.LC29:
 1885 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1885      6F746163 
 1885      74696C65 
 1885      20466565 
 1885      64626163 
 1886 00e3 00       		.align	2
 1887              	.LC30:
 1888 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1888      4368616D 
 1888      62657220 
 1888      46656564 
 1888      6261636B 
 1889 00fa 0000     		.align	2
 1890              	.LC31:
 1891 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1891      6D756D20 
 1891      736C6176 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 58


 1891      65207265 
 1891      73696475 
 1892              		.align	2
 1893              	.LC32:
 1894 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1894      6D756D20 
 1894      70726573 
 1894      73757265 
 1894      20666565 
 1895 013d 000000   		.align	2
 1896              	.LC33:
 1897 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1897      6F727469 
 1897      6F6E616C 
 1897      20707265 
 1897      73737572 
 1898 0162 0000     		.align	2
 1899              	.LC0:
 1900 0164 20557362 		.ascii	" Usb\000"
 1900      00
 1901 0169 000000   		.align	2
 1902              	.LC1:
 1903 016c 2048616E 		.ascii	" Handle\000"
 1903      646C6500 
 1904              		.align	2
 1905              	.LC2:
 1906 0174 20454D47 		.ascii	" EMG proportional\000"
 1906      2070726F 
 1906      706F7274 
 1906      696F6E61 
 1906      6C00
 1907 0186 0000     		.align	2
 1908              	.LC3:
 1909 0188 20454D47 		.ascii	" EMG Integral\000"
 1909      20496E74 
 1909      65677261 
 1909      6C00
 1910 0196 0000     		.align	2
 1911              	.LC4:
 1912 0198 20454D47 		.ascii	" EMG FCFS\000"
 1912      20464346 
 1912      5300
 1913 01a2 0000     		.align	2
 1914              	.LC5:
 1915 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
 1915      20464346 
 1915      53204164 
 1915      76616E63 
 1915      656400
 1916 01b7 00       		.align	2
 1917              	.LC6:
 1918 01b8 204A6F79 		.ascii	" Joystick\000"
 1918      73746963 
 1918      6B00
 1919 01c2 0000     		.align	2
 1920              	.LC7:
 1921 01c4 20454D47 		.ascii	" EMG proportional NC\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 59


 1921      2070726F 
 1921      706F7274 
 1921      696F6E61 
 1921      6C204E43 
 1922 01d9 000000   		.align	2
 1923              	.LC9:
 1924 01dc 204E4F00 		.ascii	" NO\000"
 1925              		.align	2
 1926              	.LC10:
 1927 01e0 20594553 		.ascii	" YES\000"
 1927      00
 1928 01e5 000000   		.align	2
 1929              	.LC11:
 1930 01e8 204F4646 		.ascii	" OFF\000"
 1930      00
 1931 01ed 000000   		.align	2
 1932              	.LC12:
 1933 01f0 204F4E00 		.ascii	" ON\000"
 1934              		.align	2
 1935              	.LC18:
 1936 01f4 01       		.byte	1
 1937 01f5 00       		.byte	0
 1938 01f6 0000     		.space	2
 1939 01f8 64010000 		.word	.LC0
 1940 01fc 6C010000 		.word	.LC1
 1941 0200 74010000 		.word	.LC2
 1942 0204 88010000 		.word	.LC3
 1943 0208 98010000 		.word	.LC4
 1944 020c A4010000 		.word	.LC5
 1945 0210 B8010000 		.word	.LC6
 1946 0214 C4010000 		.word	.LC7
 1947 0218 00000000 		.word	.LC8
 1948 021c 00000000 		.word	.LC8
 1949 0220 03       		.byte	3
 1950 0221 00       		.byte	0
 1951 0222 0000     		.space	2
 1952 0224 DC010000 		.word	.LC9
 1953 0228 E0010000 		.word	.LC10
 1954 022c 00000000 		.word	.LC8
 1955 0230 00000000 		.word	.LC8
 1956 0234 00000000 		.word	.LC8
 1957 0238 00000000 		.word	.LC8
 1958 023c 00000000 		.word	.LC8
 1959 0240 00000000 		.word	.LC8
 1960 0244 00000000 		.word	.LC8
 1961 0248 00000000 		.word	.LC8
 1962 024c 05       		.byte	5
 1963 024d 01       		.byte	1
 1964 024e 0000     		.space	2
 1965 0250 E8010000 		.word	.LC11
 1966 0254 F0010000 		.word	.LC12
 1967 0258 00000000 		.word	.LC8
 1968 025c 00000000 		.word	.LC8
 1969 0260 00000000 		.word	.LC8
 1970 0264 00000000 		.word	.LC8
 1971 0268 00000000 		.word	.LC8
 1972 026c 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 60


 1973 0270 00000000 		.word	.LC8
 1974 0274 00000000 		.word	.LC8
 1975              		.section	.text.manage_param_list,"ax",%progbits
 1976              		.align	2
 1977              		.global	manage_param_list
 1978              		.thumb
 1979              		.thumb_func
 1980              		.type	manage_param_list, %function
 1981              	manage_param_list:
 1982              	.LFB69:
 493:..\src/command_processing.c **** 
 494:..\src/command_processing.c **** //==============================================================================
 495:..\src/command_processing.c **** // MANAGE PARAM LIST
 496:..\src/command_processing.c **** //==============================================================================
 497:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 1983              		.loc 1 497 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 456
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 90B5     		push	{r4, r7, lr}
 1988              		.cfi_def_cfa_offset 12
 1989              		.cfi_offset 4, -12
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 F5B0     		sub	sp, sp, #468
 1993              		.cfi_def_cfa_offset 480
 1994 0004 02AF     		add	r7, sp, #8
 1995              		.cfi_def_cfa 7, 472
 1996 0006 0246     		mov	r2, r0
 1997 0008 BB1D     		adds	r3, r7, #6
 1998 000a 1A80     		strh	r2, [r3]	@ movhi
 1999 000c 7B1D     		adds	r3, r7, #5
 2000 000e 0A46     		mov	r2, r1
 2001 0010 1A70     		strb	r2, [r3]
 498:..\src/command_processing.c ****     uint8 CYDATA i, j;
 499:..\src/command_processing.c ****     
 500:..\src/command_processing.c ****     uint8 PARAM_IDX;
 501:..\src/command_processing.c ****          
 502:..\src/command_processing.c ****     // Arrays
 503:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2002              		.loc 1 503 0
 2003 0012 EE4B     		ldr	r3, .L134
 2004 0014 C7F8C031 		str	r3, [r7, #448]
 504:..\src/command_processing.c ****     
 505:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
 2005              		.loc 1 505 0
 2006 0018 BB1D     		adds	r3, r7, #6
 2007 001a 1B88     		ldrh	r3, [r3]
 2008 001c 002B     		cmp	r3, #0
 2009 001e 02D0     		beq	.L119
 506:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2010              		.loc 1 506 0
 2011 0020 EB4B     		ldr	r3, .L134+4
 2012 0022 C7F8C031 		str	r3, [r7, #448]
 2013              	.L119:
 507:..\src/command_processing.c ****     }
 508:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 61


 509:..\src/command_processing.c ****     struct menu menu_type;
 510:..\src/command_processing.c ****     
 511:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 512:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2014              		.loc 1 512 0
 2015 0026 EB4A     		ldr	r2, .L134+8
 2016 0028 07F58673 		add	r3, r7, #268
 2017 002c 1146     		mov	r1, r2
 2018 002e 8422     		movs	r2, #132
 2019 0030 1846     		mov	r0, r3
 2020 0032 FFF7FEFF 		bl	memcpy
 513:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 514:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 515:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 516:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 517:..\src/command_processing.c ****        };
 518:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 519:..\src/command_processing.c ****         
 520:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2021              		.loc 1 520 0
 2022 0036 0323     		movs	r3, #3
 2023 0038 87F8BF31 		strb	r3, [r7, #447]
 521:..\src/command_processing.c ****     
 522:..\src/command_processing.c ****     struct parameter param_type;   
 523:..\src/command_processing.c ****     
 524:..\src/command_processing.c ****     const struct parameter PARAM_LIST[] = {
 525:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 526:..\src/command_processing.c ****         //DEVICE_PARAMETERS    
 527:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->dev.id)                           , TYPE_UINT8      , 1         , 
 2024              		.loc 1 527 0
 2025 003c D7F8C031 		ldr	r3, [r7, #448]
 2026 0040 03F11002 		add	r2, r3, #16
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2027              		.loc 1 524 0
 2028 0044 07F10C03 		add	r3, r7, #12
 2029 0048 1A60     		str	r2, [r3]
 2030 004a 07F10C03 		add	r3, r7, #12
 2031 004e 0222     		movs	r2, #2
 2032 0050 1A71     		strb	r2, [r3, #4]
 2033 0052 07F10C03 		add	r3, r7, #12
 2034 0056 0122     		movs	r2, #1
 2035 0058 5A71     		strb	r2, [r3, #5]
 2036 005a 07F10C03 		add	r3, r7, #12
 2037 005e DE4A     		ldr	r2, .L134+12
 2038 0060 9A60     		str	r2, [r3, #8]
 2039 0062 07F10C03 		add	r3, r7, #12
 2040 0066 0022     		movs	r2, #0
 2041 0068 1A73     		strb	r2, [r3, #12]
 2042 006a 07F10C03 		add	r3, r7, #12
 2043 006e 0022     		movs	r2, #0
 2044 0070 5A73     		strb	r2, [r3, #13]
 2045 0072 07F10C03 		add	r3, r7, #12
 2046 0076 0022     		movs	r2, #0
 2047 0078 9A73     		strb	r2, [r3, #14]
 2048 007a 07F10C03 		add	r3, r7, #12
 2049 007e 0122     		movs	r2, #1
 2050 0080 DA73     		strb	r2, [r3, #15]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 62


 528:..\src/command_processing.c ****         
 529:..\src/command_processing.c ****         //EMG_PARAMETERS    
 530:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , 
 2051              		.loc 1 530 0
 2052 0082 D7F8C031 		ldr	r3, [r7, #448]
 2053 0086 03F13002 		add	r2, r3, #48
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2054              		.loc 1 524 0
 2055 008a 07F10C03 		add	r3, r7, #12
 2056 008e 1A61     		str	r2, [r3, #16]
 2057 0090 07F10C03 		add	r3, r7, #12
 2058 0094 0422     		movs	r2, #4
 2059 0096 1A75     		strb	r2, [r3, #20]
 2060 0098 07F10C03 		add	r3, r7, #12
 2061 009c 0222     		movs	r2, #2
 2062 009e 5A75     		strb	r2, [r3, #21]
 2063 00a0 07F10C03 		add	r3, r7, #12
 2064 00a4 CD4A     		ldr	r2, .L134+16
 2065 00a6 9A61     		str	r2, [r3, #24]
 2066 00a8 07F10C03 		add	r3, r7, #12
 2067 00ac 0022     		movs	r2, #0
 2068 00ae 1A77     		strb	r2, [r3, #28]
 2069 00b0 07F10C03 		add	r3, r7, #12
 2070 00b4 1E22     		movs	r2, #30
 2071 00b6 5A77     		strb	r2, [r3, #29]
 2072 00b8 07F10C03 		add	r3, r7, #12
 2073 00bc 0022     		movs	r2, #0
 2074 00be 9A77     		strb	r2, [r3, #30]
 2075 00c0 07F10C03 		add	r3, r7, #12
 2076 00c4 0122     		movs	r2, #1
 2077 00c6 DA77     		strb	r2, [r3, #31]
 531:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , 
 2078              		.loc 1 531 0
 2079 00c8 D7F8C031 		ldr	r3, [r7, #448]
 2080 00cc 03F13402 		add	r2, r3, #52
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2081              		.loc 1 524 0
 2082 00d0 07F10C03 		add	r3, r7, #12
 2083 00d4 1A62     		str	r2, [r3, #32]
 2084 00d6 07F10C03 		add	r3, r7, #12
 2085 00da 0622     		movs	r2, #6
 2086 00dc 83F82420 		strb	r2, [r3, #36]
 2087 00e0 07F10C03 		add	r3, r7, #12
 2088 00e4 0222     		movs	r2, #2
 2089 00e6 83F82520 		strb	r2, [r3, #37]
 2090 00ea 07F10C03 		add	r3, r7, #12
 2091 00ee BC4A     		ldr	r2, .L134+20
 2092 00f0 9A62     		str	r2, [r3, #40]
 2093 00f2 07F10C03 		add	r3, r7, #12
 2094 00f6 0022     		movs	r2, #0
 2095 00f8 83F82C20 		strb	r2, [r3, #44]
 2096 00fc 07F10C03 		add	r3, r7, #12
 2097 0100 1E22     		movs	r2, #30
 2098 0102 83F82D20 		strb	r2, [r3, #45]
 2099 0106 07F10C03 		add	r3, r7, #12
 2100 010a 0022     		movs	r2, #0
 2101 010c 83F82E20 		strb	r2, [r3, #46]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 63


 2102 0110 07F10C03 		add	r3, r7, #12
 2103 0114 0122     		movs	r2, #1
 2104 0116 83F82F20 		strb	r2, [r3, #47]
 532:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , 
 2105              		.loc 1 532 0
 2106 011a D7F8C031 		ldr	r3, [r7, #448]
 2107 011e 03F13C02 		add	r2, r3, #60
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2108              		.loc 1 524 0
 2109 0122 07F10C03 		add	r3, r7, #12
 2110 0126 1A63     		str	r2, [r3, #48]
 2111 0128 07F10C03 		add	r3, r7, #12
 2112 012c 0222     		movs	r2, #2
 2113 012e 83F83420 		strb	r2, [r3, #52]
 2114 0132 07F10C03 		add	r3, r7, #12
 2115 0136 0222     		movs	r2, #2
 2116 0138 83F83520 		strb	r2, [r3, #53]
 2117 013c 07F10C03 		add	r3, r7, #12
 2118 0140 A84A     		ldr	r2, .L134+24
 2119 0142 9A63     		str	r2, [r3, #56]
 2120 0144 07F10C03 		add	r3, r7, #12
 2121 0148 0022     		movs	r2, #0
 2122 014a 83F83C20 		strb	r2, [r3, #60]
 2123 014e 07F10C03 		add	r3, r7, #12
 2124 0152 1E22     		movs	r2, #30
 2125 0154 83F83D20 		strb	r2, [r3, #61]
 2126 0158 07F10C03 		add	r3, r7, #12
 2127 015c 0022     		movs	r2, #0
 2128 015e 83F83E20 		strb	r2, [r3, #62]
 2129 0162 07F10C03 		add	r3, r7, #12
 2130 0166 0122     		movs	r2, #1
 2131 0168 83F83F20 		strb	r2, [r3, #63]
 533:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , 
 2132              		.loc 1 533 0
 2133 016c D7F8C031 		ldr	r3, [r7, #448]
 2134 0170 03F13E02 		add	r2, r3, #62
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2135              		.loc 1 524 0
 2136 0174 07F10C03 		add	r3, r7, #12
 2137 0178 1A64     		str	r2, [r3, #64]
 2138 017a 07F10C03 		add	r3, r7, #12
 2139 017e 0022     		movs	r2, #0
 2140 0180 83F84420 		strb	r2, [r3, #68]
 2141 0184 07F10C03 		add	r3, r7, #12
 2142 0188 0122     		movs	r2, #1
 2143 018a 83F84520 		strb	r2, [r3, #69]
 2144 018e 07F10C03 		add	r3, r7, #12
 2145 0192 954A     		ldr	r2, .L134+28
 2146 0194 9A64     		str	r2, [r3, #72]
 2147 0196 07F10C03 		add	r3, r7, #12
 2148 019a 0322     		movs	r2, #3
 2149 019c 83F84C20 		strb	r2, [r3, #76]
 2150 01a0 07F10C03 		add	r3, r7, #12
 2151 01a4 1E22     		movs	r2, #30
 2152 01a6 83F84D20 		strb	r2, [r3, #77]
 2153 01aa 07F10C03 		add	r3, r7, #12
 2154 01ae 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 64


 2155 01b0 83F84E20 		strb	r2, [r3, #78]
 2156 01b4 07F10C03 		add	r3, r7, #12
 2157 01b8 0122     		movs	r2, #1
 2158 01ba 83F84F20 		strb	r2, [r3, #79]
 534:..\src/command_processing.c ****         
 535:..\src/command_processing.c ****         //MASTER MODE PARAMETERS
 536:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , 
 2159              		.loc 1 536 0
 2160 01be D7F8C031 		ldr	r3, [r7, #448]
 2161 01c2 03F14002 		add	r2, r3, #64
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2162              		.loc 1 524 0
 2163 01c6 07F10C03 		add	r3, r7, #12
 2164 01ca 1A65     		str	r2, [r3, #80]
 2165 01cc 07F10C03 		add	r3, r7, #12
 2166 01d0 0022     		movs	r2, #0
 2167 01d2 83F85420 		strb	r2, [r3, #84]
 2168 01d6 07F10C03 		add	r3, r7, #12
 2169 01da 0122     		movs	r2, #1
 2170 01dc 83F85520 		strb	r2, [r3, #85]
 2171 01e0 07F10C03 		add	r3, r7, #12
 2172 01e4 814A     		ldr	r2, .L134+32
 2173 01e6 9A65     		str	r2, [r3, #88]
 2174 01e8 07F10C03 		add	r3, r7, #12
 2175 01ec 0522     		movs	r2, #5
 2176 01ee 83F85C20 		strb	r2, [r3, #92]
 2177 01f2 07F10C03 		add	r3, r7, #12
 2178 01f6 5022     		movs	r2, #80
 2179 01f8 83F85D20 		strb	r2, [r3, #93]
 2180 01fc 07F10C03 		add	r3, r7, #12
 2181 0200 0022     		movs	r2, #0
 2182 0202 83F85E20 		strb	r2, [r3, #94]
 2183 0206 07F10C03 		add	r3, r7, #12
 2184 020a 0122     		movs	r2, #1
 2185 020c 83F85F20 		strb	r2, [r3, #95]
 537:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , 
 2186              		.loc 1 537 0
 2187 0210 D7F8C031 		ldr	r3, [r7, #448]
 2188 0214 03F14102 		add	r2, r3, #65
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2189              		.loc 1 524 0
 2190 0218 07F10C03 		add	r3, r7, #12
 2191 021c 1A66     		str	r2, [r3, #96]
 2192 021e 07F10C03 		add	r3, r7, #12
 2193 0222 0222     		movs	r2, #2
 2194 0224 83F86420 		strb	r2, [r3, #100]
 2195 0228 07F10C03 		add	r3, r7, #12
 2196 022c 0122     		movs	r2, #1
 2197 022e 83F86520 		strb	r2, [r3, #101]
 2198 0232 07F10C03 		add	r3, r7, #12
 2199 0236 6E4A     		ldr	r2, .L134+36
 2200 0238 9A66     		str	r2, [r3, #104]
 2201 023a 07F10C03 		add	r3, r7, #12
 2202 023e 0022     		movs	r2, #0
 2203 0240 83F86C20 		strb	r2, [r3, #108]
 2204 0244 07F10C03 		add	r3, r7, #12
 2205 0248 5022     		movs	r2, #80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 65


 2206 024a 83F86D20 		strb	r2, [r3, #109]
 2207 024e 07F10C03 		add	r3, r7, #12
 2208 0252 0022     		movs	r2, #0
 2209 0254 83F86E20 		strb	r2, [r3, #110]
 2210 0258 07F10C03 		add	r3, r7, #12
 2211 025c 0122     		movs	r2, #1
 2212 025e 83F86F20 		strb	r2, [r3, #111]
 538:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , 
 2213              		.loc 1 538 0
 2214 0262 D7F8C031 		ldr	r3, [r7, #448]
 2215 0266 03F12902 		add	r2, r3, #41
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2216              		.loc 1 524 0
 2217 026a 07F10C03 		add	r3, r7, #12
 2218 026e 1A67     		str	r2, [r3, #112]
 2219 0270 07F10C03 		add	r3, r7, #12
 2220 0274 0222     		movs	r2, #2
 2221 0276 83F87420 		strb	r2, [r3, #116]
 2222 027a 07F10C03 		add	r3, r7, #12
 2223 027e 0122     		movs	r2, #1
 2224 0280 83F87520 		strb	r2, [r3, #117]
 2225 0284 07F10C03 		add	r3, r7, #12
 2226 0288 5A4A     		ldr	r2, .L134+40
 2227 028a 9A67     		str	r2, [r3, #120]
 2228 028c 07F10C03 		add	r3, r7, #12
 2229 0290 0022     		movs	r2, #0
 2230 0292 83F87C20 		strb	r2, [r3, #124]
 2231 0296 07F10C03 		add	r3, r7, #12
 2232 029a 5022     		movs	r2, #80
 2233 029c 83F87D20 		strb	r2, [r3, #125]
 2234 02a0 07F10C03 		add	r3, r7, #12
 2235 02a4 0022     		movs	r2, #0
 2236 02a6 83F87E20 		strb	r2, [r3, #126]
 2237 02aa 07F10C03 		add	r3, r7, #12
 2238 02ae 0122     		movs	r2, #1
 2239 02b0 83F87F20 		strb	r2, [r3, #127]
 539:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , 
 2240              		.loc 1 539 0
 2241 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2242 02b8 03F12802 		add	r2, r3, #40
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2243              		.loc 1 524 0
 2244 02bc 07F10C03 		add	r3, r7, #12
 2245 02c0 C3F88020 		str	r2, [r3, #128]
 2246 02c4 07F10C03 		add	r3, r7, #12
 2247 02c8 0022     		movs	r2, #0
 2248 02ca 83F88420 		strb	r2, [r3, #132]
 2249 02ce 07F10C03 		add	r3, r7, #12
 2250 02d2 0122     		movs	r2, #1
 2251 02d4 83F88520 		strb	r2, [r3, #133]
 2252 02d8 07F10C03 		add	r3, r7, #12
 2253 02dc 464A     		ldr	r2, .L134+44
 2254 02de C3F88820 		str	r2, [r3, #136]
 2255 02e2 07F10C03 		add	r3, r7, #12
 2256 02e6 0122     		movs	r2, #1
 2257 02e8 83F88C20 		strb	r2, [r3, #140]
 2258 02ec 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 66


 2259 02f0 5022     		movs	r2, #80
 2260 02f2 83F88D20 		strb	r2, [r3, #141]
 2261 02f6 07F10C03 		add	r3, r7, #12
 2262 02fa 0322     		movs	r2, #3
 2263 02fc 83F88E20 		strb	r2, [r3, #142]
 2264 0300 07F10C03 		add	r3, r7, #12
 2265 0304 0122     		movs	r2, #1
 2266 0306 83F88F20 		strb	r2, [r3, #143]
 540:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , 
 2267              		.loc 1 540 0
 2268 030a D7F8C031 		ldr	r3, [r7, #448]
 2269 030e 03F12002 		add	r2, r3, #32
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2270              		.loc 1 524 0
 2271 0312 07F10C03 		add	r3, r7, #12
 2272 0316 C3F89020 		str	r2, [r3, #144]
 2273 031a 07F10C03 		add	r3, r7, #12
 2274 031e 0522     		movs	r2, #5
 2275 0320 83F89420 		strb	r2, [r3, #148]
 2276 0324 07F10C03 		add	r3, r7, #12
 2277 0328 0222     		movs	r2, #2
 2278 032a 83F89520 		strb	r2, [r3, #149]
 2279 032e 07F10C03 		add	r3, r7, #12
 2280 0332 324A     		ldr	r2, .L134+48
 2281 0334 C3F89820 		str	r2, [r3, #152]
 2282 0338 07F10C03 		add	r3, r7, #12
 2283 033c 0022     		movs	r2, #0
 2284 033e 83F89C20 		strb	r2, [r3, #156]
 2285 0342 07F10C03 		add	r3, r7, #12
 2286 0346 5022     		movs	r2, #80
 2287 0348 83F89D20 		strb	r2, [r3, #157]
 2288 034c 07F10C03 		add	r3, r7, #12
 2289 0350 0522     		movs	r2, #5
 2290 0352 83F89E20 		strb	r2, [r3, #158]
 2291 0356 07F10C03 		add	r3, r7, #12
 2292 035a 0122     		movs	r2, #1
 2293 035c 83F89F20 		strb	r2, [r3, #159]
 541:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , 
 2294              		.loc 1 541 0
 2295 0360 D7F8C031 		ldr	r3, [r7, #448]
 2296 0364 03F15C02 		add	r2, r3, #92
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2297              		.loc 1 524 0
 2298 0368 07F10C03 		add	r3, r7, #12
 2299 036c C3F8A020 		str	r2, [r3, #160]
 2300 0370 07F10C03 		add	r3, r7, #12
 2301 0374 0022     		movs	r2, #0
 2302 0376 83F8A420 		strb	r2, [r3, #164]
 2303 037a 07F10C03 		add	r3, r7, #12
 2304 037e 0122     		movs	r2, #1
 2305 0380 83F8A520 		strb	r2, [r3, #165]
 2306 0384 07F10C03 		add	r3, r7, #12
 2307 0388 1D4A     		ldr	r2, .L134+52
 2308 038a C3F8A820 		str	r2, [r3, #168]
 2309 038e 07F10C03 		add	r3, r7, #12
 2310 0392 0522     		movs	r2, #5
 2311 0394 83F8AC20 		strb	r2, [r3, #172]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 67


 2312 0398 07F10C03 		add	r3, r7, #12
 2313 039c 5022     		movs	r2, #80
 2314 039e 83F8AD20 		strb	r2, [r3, #173]
 2315 03a2 07F10C03 		add	r3, r7, #12
 2316 03a6 0022     		movs	r2, #0
 2317 03a8 83F8AE20 		strb	r2, [r3, #174]
 2318 03ac 07F10C03 		add	r3, r7, #12
 2319 03b0 0122     		movs	r2, #1
 2320 03b2 83F8AF20 		strb	r2, [r3, #175]
 542:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , 
 2321              		.loc 1 542 0
 2322 03b6 D7F8C031 		ldr	r3, [r7, #448]
 2323 03ba 03F15D02 		add	r2, r3, #93
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2324              		.loc 1 524 0
 2325 03be 07F10C03 		add	r3, r7, #12
 2326 03c2 C3F8B020 		str	r2, [r3, #176]
 2327 03c6 07F10C03 		add	r3, r7, #12
 2328 03ca 1BE0     		b	.L135
 2329              	.L136:
 2330              		.align	2
 2331              	.L134:
 2332 03cc 00000000 		.word	c_mem
 2333 03d0 00000000 		.word	g_mem
 2334 03d4 F4010000 		.word	.LC18
 2335 03d8 2C000000 		.word	.LC19
 2336 03dc 38000000 		.word	.LC20
 2337 03e0 48000000 		.word	.LC21
 2338 03e4 58000000 		.word	.LC22
 2339 03e8 68000000 		.word	.LC23
 2340 03ec 78000000 		.word	.LC24
 2341 03f0 88000000 		.word	.LC25
 2342 03f4 94000000 		.word	.LC26
 2343 03f8 A8000000 		.word	.LC27
 2344 03fc B4000000 		.word	.LC28
 2345 0400 CC000000 		.word	.LC29
 2346              	.L135:
 2347 0404 0022     		movs	r2, #0
 2348 0406 83F8B420 		strb	r2, [r3, #180]
 2349 040a 07F10C03 		add	r3, r7, #12
 2350 040e 0122     		movs	r2, #1
 2351 0410 83F8B520 		strb	r2, [r3, #181]
 2352 0414 07F10C03 		add	r3, r7, #12
 2353 0418 C04A     		ldr	r2, .L137
 2354 041a C3F8B820 		str	r2, [r3, #184]
 2355 041e 07F10C03 		add	r3, r7, #12
 2356 0422 0522     		movs	r2, #5
 2357 0424 83F8BC20 		strb	r2, [r3, #188]
 2358 0428 07F10C03 		add	r3, r7, #12
 2359 042c 5022     		movs	r2, #80
 2360 042e 83F8BD20 		strb	r2, [r3, #189]
 2361 0432 07F10C03 		add	r3, r7, #12
 2362 0436 0022     		movs	r2, #0
 2363 0438 83F8BE20 		strb	r2, [r3, #190]
 2364 043c 07F10C03 		add	r3, r7, #12
 2365 0440 0122     		movs	r2, #1
 2366 0442 83F8BF20 		strb	r2, [r3, #191]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 68


 543:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , 
 2367              		.loc 1 543 0
 2368 0446 D7F8C031 		ldr	r3, [r7, #448]
 2369 044a 03F15002 		add	r2, r3, #80
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2370              		.loc 1 524 0
 2371 044e 07F10C03 		add	r3, r7, #12
 2372 0452 C3F8C020 		str	r2, [r3, #192]
 2373 0456 07F10C03 		add	r3, r7, #12
 2374 045a 0522     		movs	r2, #5
 2375 045c 83F8C420 		strb	r2, [r3, #196]
 2376 0460 07F10C03 		add	r3, r7, #12
 2377 0464 0122     		movs	r2, #1
 2378 0466 83F8C520 		strb	r2, [r3, #197]
 2379 046a 07F10C03 		add	r3, r7, #12
 2380 046e AC4A     		ldr	r2, .L137+4
 2381 0470 C3F8C820 		str	r2, [r3, #200]
 2382 0474 07F10C03 		add	r3, r7, #12
 2383 0478 0022     		movs	r2, #0
 2384 047a 83F8CC20 		strb	r2, [r3, #204]
 2385 047e 07F10C03 		add	r3, r7, #12
 2386 0482 5022     		movs	r2, #80
 2387 0484 83F8CD20 		strb	r2, [r3, #205]
 2388 0488 07F10C03 		add	r3, r7, #12
 2389 048c 0022     		movs	r2, #0
 2390 048e 83F8CE20 		strb	r2, [r3, #206]
 2391 0492 07F10C03 		add	r3, r7, #12
 2392 0496 0122     		movs	r2, #1
 2393 0498 83F8CF20 		strb	r2, [r3, #207]
 544:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , 
 2394              		.loc 1 544 0
 2395 049c D7F8C031 		ldr	r3, [r7, #448]
 2396 04a0 03F15402 		add	r2, r3, #84
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2397              		.loc 1 524 0
 2398 04a4 07F10C03 		add	r3, r7, #12
 2399 04a8 C3F8D020 		str	r2, [r3, #208]
 2400 04ac 07F10C03 		add	r3, r7, #12
 2401 04b0 0722     		movs	r2, #7
 2402 04b2 83F8D420 		strb	r2, [r3, #212]
 2403 04b6 07F10C03 		add	r3, r7, #12
 2404 04ba 0122     		movs	r2, #1
 2405 04bc 83F8D520 		strb	r2, [r3, #213]
 2406 04c0 07F10C03 		add	r3, r7, #12
 2407 04c4 974A     		ldr	r2, .L137+8
 2408 04c6 C3F8D820 		str	r2, [r3, #216]
 2409 04ca 07F10C03 		add	r3, r7, #12
 2410 04ce 0022     		movs	r2, #0
 2411 04d0 83F8DC20 		strb	r2, [r3, #220]
 2412 04d4 07F10C03 		add	r3, r7, #12
 2413 04d8 5022     		movs	r2, #80
 2414 04da 83F8DD20 		strb	r2, [r3, #221]
 2415 04de 07F10C03 		add	r3, r7, #12
 2416 04e2 0022     		movs	r2, #0
 2417 04e4 83F8DE20 		strb	r2, [r3, #222]
 2418 04e8 07F10C03 		add	r3, r7, #12
 2419 04ec 0122     		movs	r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 69


 2420 04ee 83F8DF20 		strb	r2, [r3, #223]
 545:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , 
 2421              		.loc 1 545 0
 2422 04f2 D7F8C031 		ldr	r3, [r7, #448]
 2423 04f6 03F15802 		add	r2, r3, #88
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2424              		.loc 1 524 0
 2425 04fa 07F10C03 		add	r3, r7, #12
 2426 04fe C3F8E020 		str	r2, [r3, #224]
 2427 0502 07F10C03 		add	r3, r7, #12
 2428 0506 0722     		movs	r2, #7
 2429 0508 83F8E420 		strb	r2, [r3, #228]
 2430 050c 07F10C03 		add	r3, r7, #12
 2431 0510 0122     		movs	r2, #1
 2432 0512 83F8E520 		strb	r2, [r3, #229]
 2433 0516 07F10C03 		add	r3, r7, #12
 2434 051a 834A     		ldr	r2, .L137+12
 2435 051c C3F8E820 		str	r2, [r3, #232]
 2436 0520 07F10C03 		add	r3, r7, #12
 2437 0524 0022     		movs	r2, #0
 2438 0526 83F8EC20 		strb	r2, [r3, #236]
 2439 052a 07F10C03 		add	r3, r7, #12
 2440 052e 5022     		movs	r2, #80
 2441 0530 83F8ED20 		strb	r2, [r3, #237]
 2442 0534 07F10C03 		add	r3, r7, #12
 2443 0538 0022     		movs	r2, #0
 2444 053a 83F8EE20 		strb	r2, [r3, #238]
 2445 053e 07F10C03 		add	r3, r7, #12
 2446 0542 0122     		movs	r2, #1
 2447 0544 83F8EF20 		strb	r2, [r3, #239]
 546:..\src/command_processing.c ****     };
 547:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);  
 2448              		.loc 1 547 0
 2449 0548 0F23     		movs	r3, #15
 2450 054a 87F8BE31 		strb	r3, [r7, #446]
 548:..\src/command_processing.c ****     
 549:..\src/command_processing.c **** 
 550:..\src/command_processing.c ****     if (!index) {
 2451              		.loc 1 550 0
 2452 054e BB1D     		adds	r3, r7, #6
 2453 0550 1B88     		ldrh	r3, [r3]
 2454 0552 002B     		cmp	r3, #0
 2455 0554 0ED1     		bne	.L120
 551:..\src/command_processing.c ****         // Get parameters list with relative types
 552:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2456              		.loc 1 552 0
 2457 0556 07F58674 		add	r4, r7, #268
 2458 055a 07F10C02 		add	r2, r7, #12
 2459 055e 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2460 0562 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2461 0566 7B1D     		adds	r3, r7, #5
 2462 0568 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2463 056a 0093     		str	r3, [sp]
 2464 056c 2346     		mov	r3, r4
 2465 056e FFF7FEFF 		bl	get_param_list
 553:..\src/command_processing.c ****     }   
 554:..\src/command_processing.c ****     else if  (index == 300) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 70


 555:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 556:..\src/command_processing.c ****         qbadminp_string(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST);
 557:..\src/command_processing.c ****     }
 558:..\src/command_processing.c **** 
 559:..\src/command_processing.c ****     else {
 560:..\src/command_processing.c ****          // Set specific parameter        
 561:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 562:..\src/command_processing.c ****         
 563:..\src/command_processing.c ****         // Find size of data
 564:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 565:..\src/command_processing.c ****    
 566:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 567:..\src/command_processing.c ****             // Use default specifications for param setting
 568:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 569:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 570:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 571:..\src/command_processing.c ****                 }
 572:..\src/command_processing.c ****             } 
 573:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 574:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 575:..\src/command_processing.c ****         }
 576:..\src/command_processing.c ****         
 577:..\src/command_processing.c ****         else {  
 578:..\src/command_processing.c ****             // Use custom specifications for param setting
 579:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 580:..\src/command_processing.c ****         }
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****        
 583:..\src/command_processing.c ****         // Perform chip reset if needed
 584:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 585:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 586:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 587:..\src/command_processing.c ****             }   
 588:..\src/command_processing.c ****         }
 589:..\src/command_processing.c ****     }
 590:..\src/command_processing.c **** } 
 2466              		.loc 1 590 0
 2467 0572 CEE0     		b	.L133
 2468              	.L120:
 554:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 2469              		.loc 1 554 0
 2470 0574 BB1D     		adds	r3, r7, #6
 2471 0576 1B88     		ldrh	r3, [r3]
 2472 0578 B3F5967F 		cmp	r3, #300
 2473 057c 0AD1     		bne	.L122
 556:..\src/command_processing.c ****     }
 2474              		.loc 1 556 0
 2475 057e 07F58673 		add	r3, r7, #268
 2476 0582 07F10C02 		add	r2, r7, #12
 2477 0586 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2478 058a 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2479 058e FFF7FEFF 		bl	qbadminp_string
 2480              		.loc 1 590 0
 2481 0592 BEE0     		b	.L133
 2482              	.L122:
 2483              	.LBB24:
 561:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 71


 2484              		.loc 1 561 0
 2485 0594 BB1D     		adds	r3, r7, #6
 2486 0596 1B88     		ldrh	r3, [r3]	@ movhi
 2487 0598 DBB2     		uxtb	r3, r3
 2488 059a 013B     		subs	r3, r3, #1
 2489 059c 87F8BD31 		strb	r3, [r7, #445]
 564:..\src/command_processing.c ****    
 2490              		.loc 1 564 0
 2491 05a0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2492 05a4 07F10C02 		add	r2, r7, #12
 2493 05a8 1B01     		lsls	r3, r3, #4
 2494 05aa 1344     		add	r3, r3, r2
 2495 05ac 0433     		adds	r3, r3, #4
 2496 05ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2497 05b0 1846     		mov	r0, r3
 2498 05b2 FFF7FEFF 		bl	num_of_bytes
 2499 05b6 0346     		mov	r3, r0
 2500 05b8 87F8BC31 		strb	r3, [r7, #444]
 566:..\src/command_processing.c ****             // Use default specifications for param setting
 2501              		.loc 1 566 0
 2502 05bc 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2503 05c0 07F10C02 		add	r2, r7, #12
 2504 05c4 1B01     		lsls	r3, r3, #4
 2505 05c6 1344     		add	r3, r3, r2
 2506 05c8 0E33     		adds	r3, r3, #14
 2507 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2508 05cc 002B     		cmp	r3, #0
 2509 05ce 5BD1     		bne	.L123
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2510              		.loc 1 568 0
 2511 05d0 0023     		movs	r3, #0
 2512 05d2 87F8C731 		strb	r3, [r7, #455]
 2513 05d6 2FE0     		b	.L124
 2514              	.L127:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2515              		.loc 1 569 0
 2516 05d8 0023     		movs	r3, #0
 2517 05da 87F8C631 		strb	r3, [r7, #454]
 2518 05de 1EE0     		b	.L125
 2519              	.L126:
 570:..\src/command_processing.c ****                 }
 2520              		.loc 1 570 0 discriminator 3
 2521 05e0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2522 05e4 07F10C02 		add	r2, r7, #12
 2523 05e8 1B01     		lsls	r3, r3, #4
 2524 05ea 1344     		add	r3, r3, r2
 2525 05ec 1A68     		ldr	r2, [r3]
 2526 05ee 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2527 05f2 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2528 05f6 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2529 05fa 411A     		subs	r1, r0, r1
 2530 05fc 0B44     		add	r3, r3, r1
 2531 05fe 013B     		subs	r3, r3, #1
 2532 0600 1344     		add	r3, r3, r2
 2533 0602 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2534 0606 D11C     		adds	r1, r2, #3
 2535 0608 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 72


 2536 060c 0A44     		add	r2, r2, r1
 2537 060e 4749     		ldr	r1, .L137+16
 2538 0610 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2539 0612 1A70     		strb	r2, [r3]
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2540              		.loc 1 569 0 discriminator 3
 2541 0614 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2542 0618 0133     		adds	r3, r3, #1
 2543 061a 87F8C631 		strb	r3, [r7, #454]
 2544              	.L125:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2545              		.loc 1 569 0 is_stmt 0 discriminator 1
 2546 061e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2547 0622 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2548 0626 9A42     		cmp	r2, r3
 2549 0628 DAD3     		bcc	.L126
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 568 0 is_stmt 1 discriminator 2
 2551 062a 97F8C721 		ldrb	r2, [r7, #455]
 2552 062e 97F8BC31 		ldrb	r3, [r7, #444]
 2553 0632 1344     		add	r3, r3, r2
 2554 0634 87F8C731 		strb	r3, [r7, #455]
 2555              	.L124:
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2556              		.loc 1 568 0 is_stmt 0 discriminator 1
 2557 0638 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2558 063c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2559 0640 07F10C01 		add	r1, r7, #12
 2560 0644 1B01     		lsls	r3, r3, #4
 2561 0646 0B44     		add	r3, r3, r1
 2562 0648 0533     		adds	r3, r3, #5
 2563 064a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 064c 1946     		mov	r1, r3
 2565 064e 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2566 0652 03FB01F3 		mul	r3, r3, r1
 2567 0656 9A42     		cmp	r2, r3
 2568 0658 BEDB     		blt	.L127
 573:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2569              		.loc 1 573 0 is_stmt 1
 2570 065a 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2571 065e 07F10C02 		add	r2, r7, #12
 2572 0662 1B01     		lsls	r3, r3, #4
 2573 0664 1344     		add	r3, r3, r2
 2574 0666 0433     		adds	r3, r3, #4
 2575 0668 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2576 066a 092B     		cmp	r3, #9
 2577 066c 15D1     		bne	.L129
 574:..\src/command_processing.c ****         }
 2578              		.loc 1 574 0
 2579 066e 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2580 0672 07F10C02 		add	r2, r7, #12
 2581 0676 1B01     		lsls	r3, r3, #4
 2582 0678 1344     		add	r3, r3, r2
 2583 067a 1A68     		ldr	r2, [r3]
 2584 067c 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2585 0680 1344     		add	r3, r3, r2
 2586 0682 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 73


 2587 0684 1A70     		strb	r2, [r3]
 2588 0686 08E0     		b	.L129
 2589              	.L123:
 579:..\src/command_processing.c ****         }
 2590              		.loc 1 579 0
 2591 0688 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2592 068c 9BB2     		uxth	r3, r3
 2593 068e 07F10C02 		add	r2, r7, #12
 2594 0692 1146     		mov	r1, r2
 2595 0694 1846     		mov	r0, r3
 2596 0696 FFF7FEFF 		bl	set_custom_param
 2597              	.L129:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2598              		.loc 1 584 0
 2599 069a 0023     		movs	r3, #0
 2600 069c 87F8C731 		strb	r3, [r7, #455]
 2601 06a0 31E0     		b	.L130
 2602              	.L132:
 585:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2603              		.loc 1 585 0
 2604 06a2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2605 06a6 2C22     		movs	r2, #44
 2606 06a8 02FB03F3 		mul	r3, r2, r3
 2607 06ac 07F5E472 		add	r2, r7, #456
 2608 06b0 1344     		add	r3, r3, r2
 2609 06b2 BC3B     		subs	r3, r3, #188
 2610 06b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2611 06b6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2612 06ba 07F10C01 		add	r1, r7, #12
 2613 06be 1B01     		lsls	r3, r3, #4
 2614 06c0 0B44     		add	r3, r3, r1
 2615 06c2 0C33     		adds	r3, r3, #12
 2616 06c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 06c6 9A42     		cmp	r2, r3
 2618 06c8 0CBF     		ite	eq
 2619 06ca 0123     		moveq	r3, #1
 2620 06cc 0023     		movne	r3, #0
 2621 06ce DAB2     		uxtb	r2, r3
 2622 06d0 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2623 06d4 2C21     		movs	r1, #44
 2624 06d6 01FB03F3 		mul	r3, r1, r3
 2625 06da 07F5E471 		add	r1, r7, #456
 2626 06de 0B44     		add	r3, r3, r1
 2627 06e0 BB3B     		subs	r3, r3, #187
 2628 06e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 06e4 012B     		cmp	r3, #1
 2630 06e6 0CBF     		ite	eq
 2631 06e8 0123     		moveq	r3, #1
 2632 06ea 0023     		movne	r3, #0
 2633 06ec DBB2     		uxtb	r3, r3
 2634 06ee 1340     		ands	r3, r3, r2
 2635 06f0 DBB2     		uxtb	r3, r3
 2636 06f2 002B     		cmp	r3, #0
 2637 06f4 02D0     		beq	.L131
 586:..\src/command_processing.c ****             }   
 2638              		.loc 1 586 0
 2639 06f6 0E4B     		ldr	r3, .L137+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 74


 2640 06f8 0122     		movs	r2, #1
 2641 06fa 1A70     		strb	r2, [r3]
 2642              	.L131:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2643              		.loc 1 584 0 discriminator 2
 2644 06fc 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 0700 0133     		adds	r3, r3, #1
 2646 0702 87F8C731 		strb	r3, [r7, #455]
 2647              	.L130:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2648              		.loc 1 584 0 is_stmt 0 discriminator 1
 2649 0706 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2650 070a 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2651 070e 9A42     		cmp	r2, r3
 2652 0710 C7D3     		bcc	.L132
 2653              	.L133:
 2654              	.LBE24:
 2655              		.loc 1 590 0 is_stmt 1
 2656 0712 00BF     		nop
 2657 0714 07F5E677 		add	r7, r7, #460
 2658              		.cfi_def_cfa_offset 12
 2659 0718 BD46     		mov	sp, r7
 2660              		.cfi_def_cfa_register 13
 2661              		@ sp needed
 2662 071a 90BD     		pop	{r4, r7, pc}
 2663              	.L138:
 2664              		.align	2
 2665              	.L137:
 2666 071c E4000000 		.word	.LC30
 2667 0720 FC000000 		.word	.LC31
 2668 0724 1C010000 		.word	.LC32
 2669 0728 40010000 		.word	.LC33
 2670 072c 00000000 		.word	g_rx
 2671 0730 00000000 		.word	reset_PSoC_flag
 2672              		.cfi_endproc
 2673              	.LFE69:
 2674              		.size	manage_param_list, .-manage_param_list
 2675              		.section	.text.set_custom_param,"ax",%progbits
 2676              		.align	2
 2677              		.global	set_custom_param
 2678              		.thumb
 2679              		.thumb_func
 2680              		.type	set_custom_param, %function
 2681              	set_custom_param:
 2682              	.LFB70:
 591:..\src/command_processing.c **** 
 592:..\src/command_processing.c **** 
 593:..\src/command_processing.c **** //==============================================================================
 594:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 595:..\src/command_processing.c **** //==============================================================================
 596:..\src/command_processing.c **** 
 597:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2683              		.loc 1 597 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 16
 2686              		@ frame_needed = 1, uses_anonymous_args = 0
 2687 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 75


 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 7, -8
 2690              		.cfi_offset 14, -4
 2691 0002 84B0     		sub	sp, sp, #16
 2692              		.cfi_def_cfa_offset 24
 2693 0004 00AF     		add	r7, sp, #0
 2694              		.cfi_def_cfa_register 7
 2695 0006 0346     		mov	r3, r0
 2696 0008 3960     		str	r1, [r7]
 2697 000a FB80     		strh	r3, [r7, #6]	@ movhi
 598:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2698              		.loc 1 598 0
 2699 000c FB88     		ldrh	r3, [r7, #6]
 2700 000e 1B01     		lsls	r3, r3, #4
 2701 0010 3A68     		ldr	r2, [r7]
 2702 0012 1344     		add	r3, r3, r2
 2703 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2704 0016 1846     		mov	r0, r3
 2705 0018 FFF7FEFF 		bl	num_of_bytes
 2706 001c 0346     		mov	r3, r0
 2707 001e 7B73     		strb	r3, [r7, #13]
 599:..\src/command_processing.c **** 
 600:..\src/command_processing.c ****     uint8 CYDATA i, j;
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2708              		.loc 1 602 0
 2709 0020 FB88     		ldrh	r3, [r7, #6]
 2710 0022 1B01     		lsls	r3, r3, #4
 2711 0024 3A68     		ldr	r2, [r7]
 2712 0026 1344     		add	r3, r3, r2
 2713 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2714 002a 032B     		cmp	r3, #3
 2715 002c 02D0     		beq	.L141
 2716 002e 052B     		cmp	r3, #5
 2717 0030 06D0     		beq	.L142
 2718 0032 36E0     		b	.L149
 2719              	.L141:
 603:..\src/command_processing.c ****         
 604:..\src/command_processing.c ****             
 605:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 606:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2720              		.loc 1 606 0
 2721 0034 3D4B     		ldr	r3, .L151
 2722 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2723 0038 3D4B     		ldr	r3, .L151+4
 2724 003a 83F82820 		strb	r2, [r3, #40]
 607:..\src/command_processing.c ****             break;   
 2725              		.loc 1 607 0
 2726 003e 71E0     		b	.L143
 2727              	.L142:
 608:..\src/command_processing.c **** 
 609:..\src/command_processing.c ****         
 610:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 611:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2728              		.loc 1 611 0
 2729 0040 3A4B     		ldr	r3, .L151
 2730 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 76


 2731 0044 1A06     		lsls	r2, r3, #24
 2732 0046 394B     		ldr	r3, .L151
 2733 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2734 004a 1B04     		lsls	r3, r3, #16
 2735 004c 1A43     		orrs	r2, r2, r3
 2736 004e 374B     		ldr	r3, .L151
 2737 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2738 0052 1B02     		lsls	r3, r3, #8
 2739 0054 1343     		orrs	r3, r3, r2
 2740 0056 354A     		ldr	r2, .L151
 2741 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2742 005a 1343     		orrs	r3, r3, r2
 2743 005c 344A     		ldr	r2, .L151+4
 2744 005e 1362     		str	r3, [r2, #32]
 612:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2745              		.loc 1 612 0
 2746 0060 324B     		ldr	r3, .L151
 2747 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2748 0064 1A06     		lsls	r2, r3, #24
 2749 0066 314B     		ldr	r3, .L151
 2750 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2751 006a 1B04     		lsls	r3, r3, #16
 2752 006c 1A43     		orrs	r2, r2, r3
 2753 006e 2F4B     		ldr	r3, .L151
 2754 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2755 0072 1B02     		lsls	r3, r3, #8
 2756 0074 1343     		orrs	r3, r3, r2
 2757 0076 2D4A     		ldr	r2, .L151
 2758 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2759 007a 1343     		orrs	r3, r3, r2
 2760 007c 2C4A     		ldr	r2, .L151+4
 2761 007e 5362     		str	r3, [r2, #36]
 613:..\src/command_processing.c **** 
 614:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2762              		.loc 1 614 0
 2763 0080 2B4B     		ldr	r3, .L151+4
 2764 0082 1B6A     		ldr	r3, [r3, #32]
 2765 0084 2A4A     		ldr	r2, .L151+4
 2766 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2767 008a 9340     		lsls	r3, r3, r2
 2768 008c 284A     		ldr	r2, .L151+4
 2769 008e 1362     		str	r3, [r2, #32]
 615:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2770              		.loc 1 615 0
 2771 0090 274B     		ldr	r3, .L151+4
 2772 0092 5B6A     		ldr	r3, [r3, #36]
 2773 0094 264A     		ldr	r2, .L151+4
 2774 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2775 009a 9340     		lsls	r3, r3, r2
 2776 009c 244A     		ldr	r2, .L151+4
 2777 009e 5362     		str	r3, [r2, #36]
 616:..\src/command_processing.c ****             break;            
 2778              		.loc 1 616 0
 2779 00a0 40E0     		b	.L143
 2780              	.L149:
 617:..\src/command_processing.c ****             default:
 618:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 77


 619:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2781              		.loc 1 619 0
 2782 00a2 0023     		movs	r3, #0
 2783 00a4 FB73     		strb	r3, [r7, #15]
 2784 00a6 20E0     		b	.L144
 2785              	.L147:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2786              		.loc 1 620 0
 2787 00a8 0023     		movs	r3, #0
 2788 00aa BB73     		strb	r3, [r7, #14]
 2789 00ac 15E0     		b	.L145
 2790              	.L146:
 621:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2791              		.loc 1 621 0 discriminator 3
 2792 00ae FB88     		ldrh	r3, [r7, #6]
 2793 00b0 1B01     		lsls	r3, r3, #4
 2794 00b2 3A68     		ldr	r2, [r7]
 2795 00b4 1344     		add	r3, r3, r2
 2796 00b6 1A68     		ldr	r2, [r3]
 2797 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2798 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2799 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2800 00be 411A     		subs	r1, r0, r1
 2801 00c0 0B44     		add	r3, r3, r1
 2802 00c2 013B     		subs	r3, r3, #1
 2803 00c4 1344     		add	r3, r3, r2
 2804 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2805 00c8 D11C     		adds	r1, r2, #3
 2806 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2807 00cc 0A44     		add	r2, r2, r1
 2808 00ce 1749     		ldr	r1, .L151
 2809 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2810 00d2 1A70     		strb	r2, [r3]
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2811              		.loc 1 620 0 discriminator 3
 2812 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2813 00d6 0133     		adds	r3, r3, #1
 2814 00d8 BB73     		strb	r3, [r7, #14]
 2815              	.L145:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2816              		.loc 1 620 0 is_stmt 0 discriminator 1
 2817 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2818 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2819 00de 9A42     		cmp	r2, r3
 2820 00e0 E5D3     		bcc	.L146
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2821              		.loc 1 619 0 is_stmt 1 discriminator 2
 2822 00e2 FA7B     		ldrb	r2, [r7, #15]
 2823 00e4 7B7B     		ldrb	r3, [r7, #13]
 2824 00e6 1344     		add	r3, r3, r2
 2825 00e8 FB73     		strb	r3, [r7, #15]
 2826              	.L144:
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2827              		.loc 1 619 0 is_stmt 0 discriminator 1
 2828 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2829 00ec FB88     		ldrh	r3, [r7, #6]
 2830 00ee 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 78


 2831 00f0 3968     		ldr	r1, [r7]
 2832 00f2 0B44     		add	r3, r3, r1
 2833 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2834 00f6 1946     		mov	r1, r3
 2835 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2836 00fa 03FB01F3 		mul	r3, r3, r1
 2837 00fe 9A42     		cmp	r2, r3
 2838 0100 D2DB     		blt	.L147
 622:..\src/command_processing.c ****                     }
 623:..\src/command_processing.c ****                 } 
 624:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2839              		.loc 1 624 0 is_stmt 1
 2840 0102 FB88     		ldrh	r3, [r7, #6]
 2841 0104 1B01     		lsls	r3, r3, #4
 2842 0106 3A68     		ldr	r2, [r7]
 2843 0108 1344     		add	r3, r3, r2
 2844 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2845 010c 092B     		cmp	r3, #9
 2846 010e 08D1     		bne	.L150
 625:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2847              		.loc 1 625 0
 2848 0110 FB88     		ldrh	r3, [r7, #6]
 2849 0112 1B01     		lsls	r3, r3, #4
 2850 0114 3A68     		ldr	r2, [r7]
 2851 0116 1344     		add	r3, r3, r2
 2852 0118 1A68     		ldr	r2, [r3]
 2853 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2854 011c 1344     		add	r3, r3, r2
 2855 011e 0022     		movs	r2, #0
 2856 0120 1A70     		strb	r2, [r3]
 2857              	.L150:
 626:..\src/command_processing.c ****             break;
 2858              		.loc 1 626 0
 2859 0122 00BF     		nop
 2860              	.L143:
 627:..\src/command_processing.c ****     }
 628:..\src/command_processing.c **** 
 629:..\src/command_processing.c ****       
 630:..\src/command_processing.c **** }
 2861              		.loc 1 630 0
 2862 0124 00BF     		nop
 2863 0126 1037     		adds	r7, r7, #16
 2864              		.cfi_def_cfa_offset 8
 2865 0128 BD46     		mov	sp, r7
 2866              		.cfi_def_cfa_register 13
 2867              		@ sp needed
 2868 012a 80BD     		pop	{r7, pc}
 2869              	.L152:
 2870              		.align	2
 2871              	.L151:
 2872 012c 00000000 		.word	g_rx
 2873 0130 00000000 		.word	g_mem
 2874              		.cfi_endproc
 2875              	.LFE70:
 2876              		.size	set_custom_param, .-set_custom_param
 2877              		.section	.text.get_IMU_param_list,"ax",%progbits
 2878              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 79


 2879              		.global	get_IMU_param_list
 2880              		.thumb
 2881              		.thumb_func
 2882              		.type	get_IMU_param_list, %function
 2883              	get_IMU_param_list:
 2884              	.LFB71:
 631:..\src/command_processing.c **** 
 632:..\src/command_processing.c **** //==============================================================================
 633:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 634:..\src/command_processing.c **** //==============================================================================
 635:..\src/command_processing.c **** 
 636:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 637:..\src/command_processing.c **** {
 2885              		.loc 1 637 0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 8
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889              		@ link register save eliminated.
 2890 0000 80B4     		push	{r7}
 2891              		.cfi_def_cfa_offset 4
 2892              		.cfi_offset 7, -4
 2893 0002 83B0     		sub	sp, sp, #12
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              		.cfi_def_cfa_register 7
 2897 0006 0346     		mov	r3, r0
 2898 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 638:..\src/command_processing.c **** }
 2899              		.loc 1 638 0
 2900 000a 00BF     		nop
 2901 000c 0C37     		adds	r7, r7, #12
 2902              		.cfi_def_cfa_offset 4
 2903 000e BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 0010 80BC     		pop	{r7}
 2907              		.cfi_restore 7
 2908              		.cfi_def_cfa_offset 0
 2909 0012 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE71:
 2912              		.size	get_IMU_param_list, .-get_IMU_param_list
 2913              		.section	.text.setZeros,"ax",%progbits
 2914              		.align	2
 2915              		.global	setZeros
 2916              		.thumb
 2917              		.thumb_func
 2918              		.type	setZeros, %function
 2919              	setZeros:
 2920              	.LFB72:
 639:..\src/command_processing.c **** 
 640:..\src/command_processing.c **** //==============================================================================
 641:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 642:..\src/command_processing.c **** //==============================================================================
 643:..\src/command_processing.c **** 
 644:..\src/command_processing.c **** void setZeros()
 645:..\src/command_processing.c **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 80


 2921              		.loc 1 645 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 1, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926 0000 80B4     		push	{r7}
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 00AF     		add	r7, sp, #0
 2930              		.cfi_def_cfa_register 7
 646:..\src/command_processing.c **** }
 2931              		.loc 1 646 0
 2932 0004 00BF     		nop
 2933 0006 BD46     		mov	sp, r7
 2934              		.cfi_def_cfa_register 13
 2935              		@ sp needed
 2936 0008 80BC     		pop	{r7}
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 000a 7047     		bx	lr
 2940              		.cfi_endproc
 2941              	.LFE72:
 2942              		.size	setZeros, .-setZeros
 2943              		.section	.rodata
 2944              		.align	2
 2945              	.LC34:
 2946 0278 20256400 		.ascii	" %d\000"
 2947              		.align	2
 2948              	.LC35:
 2949 027c 20256C64 		.ascii	" %ld\000"
 2949      00
 2950              		.global	__aeabi_f2d
 2951 0281 000000   		.align	2
 2952              	.LC36:
 2953 0284 20256600 		.ascii	" %f\000"
 2954              		.section	.text.qbadminp_string,"ax",%progbits
 2955              		.align	2
 2956              		.global	qbadminp_string
 2957              		.thumb
 2958              		.thumb_func
 2959              		.type	qbadminp_string, %function
 2960              	qbadminp_string:
 2961              	.LFB73:
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c **** void  qbadminp_string ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], con
 2962              		.loc 1 648 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 2664
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 90B5     		push	{r4, r7, lr}
 2967              		.cfi_def_cfa_offset 12
 2968              		.cfi_offset 4, -12
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 ADF66C2D 		subw	sp, sp, #2668
 2972              		.cfi_def_cfa_offset 2680
 2973 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 81


 2974              		.cfi_def_cfa_register 7
 2975 0008 0446     		mov	r4, r0
 2976 000a 0846     		mov	r0, r1
 2977 000c 07F10801 		add	r1, r7, #8
 2978 0010 0A60     		str	r2, [r1]
 2979 0012 3A1D     		adds	r2, r7, #4
 2980 0014 1360     		str	r3, [r2]
 2981 0016 07F10F03 		add	r3, r7, #15
 2982 001a 2246     		mov	r2, r4
 2983 001c 1A70     		strb	r2, [r3]
 2984 001e 07F10E03 		add	r3, r7, #14
 2985 0022 0246     		mov	r2, r0
 2986 0024 1A70     		strb	r2, [r3]
 649:..\src/command_processing.c ****     strcpy(superstring, "");
 2987              		.loc 1 649 0
 2988 0026 AD4B     		ldr	r3, .L181
 2989 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2990 002a AD4B     		ldr	r3, .L181+4
 2991 002c 1A70     		strb	r2, [r3]
 650:..\src/command_processing.c ****     char info_string[2500] = "";
 2992              		.loc 1 650 0
 2993 002e 07F17803 		add	r3, r7, #120
 2994 0032 0022     		movs	r2, #0
 2995 0034 1A60     		str	r2, [r3]
 2996 0036 0433     		adds	r3, r3, #4
 2997 0038 4FF41C62 		mov	r2, #2496
 2998 003c 0021     		movs	r1, #0
 2999 003e 1846     		mov	r0, r3
 3000 0040 FFF7FEFF 		bl	memset
 651:..\src/command_processing.c ****     int i;
 652:..\src/command_processing.c ****     int idx;
 653:..\src/command_processing.c ****     int32 aux_int32;
 654:..\src/command_processing.c ****     uint32 aux_uint32;
 655:..\src/command_processing.c ****     float aux_float;
 656:..\src/command_processing.c ****     uint8 aux_uint8;
 657:..\src/command_processing.c ****     int8 aux_int8;
 658:..\src/command_processing.c ****     int16 aux_int16;
 659:..\src/command_processing.c ****     uint16 aux_uint16;
 660:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3001              		.loc 1 660 0
 3002 0044 A74B     		ldr	r3, .L181+8
 3003 0046 C7F85C3A 		str	r3, [r7, #2652]
 661:..\src/command_processing.c ****     
 662:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3004              		.loc 1 662 0
 3005 004a A64B     		ldr	r3, .L181+8
 3006 004c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3007 004e FA2B     		cmp	r3, #250
 3008 0050 00F0A581 		beq	.L179
 3009              	.LBB25:
 663:..\src/command_processing.c ****         uint8* m_addr;
 664:..\src/command_processing.c ****         uint8* m_tmp;
 665:..\src/command_processing.c ****         char str[100];
 666:..\src/command_processing.c ****         strcpy(info_string, "");
 3010              		.loc 1 666 0
 3011 0054 A14B     		ldr	r3, .L181
 3012 0056 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 82


 3013 0058 07F17803 		add	r3, r7, #120
 3014 005c 1A70     		strb	r2, [r3]
 667:..\src/command_processing.c ****         strcat(info_string, "\n");
 3015              		.loc 1 667 0
 3016 005e 07F17803 		add	r3, r7, #120
 3017 0062 1846     		mov	r0, r3
 3018 0064 FFF7FEFF 		bl	strlen
 3019 0068 0346     		mov	r3, r0
 3020 006a 1A46     		mov	r2, r3
 3021 006c 07F17803 		add	r3, r7, #120
 3022 0070 1344     		add	r3, r3, r2
 3023 0072 9D49     		ldr	r1, .L181+12
 3024 0074 1A46     		mov	r2, r3
 3025 0076 0B46     		mov	r3, r1
 3026 0078 1B88     		ldrh	r3, [r3]	@ unaligned
 3027 007a 1380     		strh	r3, [r2]	@ unaligned
 668:..\src/command_processing.c ****         
 669:..\src/command_processing.c ****         
 670:..\src/command_processing.c ****         for (idx = 0; idx < num_params; idx ++) {
 3028              		.loc 1 670 0
 3029 007c 0023     		movs	r3, #0
 3030 007e C7F8603A 		str	r3, [r7, #2656]
 3031 0082 7EE1     		b	.L157
 3032              	.L178:
 671:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3033              		.loc 1 671 0
 3034 0084 D7F8603A 		ldr	r3, [r7, #2656]
 3035 0088 1B01     		lsls	r3, r3, #4
 3036 008a 07F10802 		add	r2, r7, #8
 3037 008e 1268     		ldr	r2, [r2]
 3038 0090 1344     		add	r3, r3, r2
 3039 0092 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3040 0094 002B     		cmp	r3, #0
 3041 0096 00F06F81 		beq	.L158
 3042              	.LBB26:
 672:..\src/command_processing.c ****                 strcat(info_string, PARAM_LIST[idx].PARAM_STR );
 3043              		.loc 1 672 0
 3044 009a D7F8603A 		ldr	r3, [r7, #2656]
 3045 009e 1B01     		lsls	r3, r3, #4
 3046 00a0 07F10802 		add	r2, r7, #8
 3047 00a4 1268     		ldr	r2, [r2]
 3048 00a6 1344     		add	r3, r3, r2
 3049 00a8 9A68     		ldr	r2, [r3, #8]
 3050 00aa 07F17803 		add	r3, r7, #120
 3051 00ae 1146     		mov	r1, r2
 3052 00b0 1846     		mov	r0, r3
 3053 00b2 FFF7FEFF 		bl	strcat
 673:..\src/command_processing.c ****                 m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 3054              		.loc 1 673 0
 3055 00b6 D7F8603A 		ldr	r3, [r7, #2656]
 3056 00ba 1B01     		lsls	r3, r3, #4
 3057 00bc 07F10802 		add	r2, r7, #8
 3058 00c0 1268     		ldr	r2, [r2]
 3059 00c2 1344     		add	r3, r3, r2
 3060 00c4 1B68     		ldr	r3, [r3]
 3061 00c6 C7F8583A 		str	r3, [r7, #2648]
 674:..\src/command_processing.c ****                 uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 83


 3062              		.loc 1 674 0
 3063 00ca D7F8603A 		ldr	r3, [r7, #2656]
 3064 00ce 1B01     		lsls	r3, r3, #4
 3065 00d0 07F10802 		add	r2, r7, #8
 3066 00d4 1268     		ldr	r2, [r2]
 3067 00d6 1344     		add	r3, r3, r2
 3068 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3069 00da 1846     		mov	r0, r3
 3070 00dc FFF7FEFF 		bl	num_of_bytes
 3071 00e0 0346     		mov	r3, r0
 3072 00e2 87F8573A 		strb	r3, [r7, #2647]
 675:..\src/command_processing.c ****                 switch(PARAM_LIST[idx].custom){
 3073              		.loc 1 675 0
 3074 00e6 D7F8603A 		ldr	r3, [r7, #2656]
 3075 00ea 1B01     		lsls	r3, r3, #4
 3076 00ec 07F10802 		add	r2, r7, #8
 3077 00f0 1268     		ldr	r2, [r2]
 3078 00f2 1344     		add	r3, r3, r2
 3079 00f4 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3080 00f6 052B     		cmp	r3, #5
 3081 00f8 00F0FE80 		beq	.L160
 676:..\src/command_processing.c ****                 case 0:   default:    
 677:..\src/command_processing.c ****                     for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS; i++){
 3082              		.loc 1 677 0
 3083 00fc 0023     		movs	r3, #0
 3084 00fe C7F8643A 		str	r3, [r7, #2660]
 3085 0102 DCE0     		b	.L161
 3086              	.L176:
 678:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3087              		.loc 1 678 0
 3088 0104 97F8573A 		ldrb	r3, [r7, #2647]	@ zero_extendqisi2
 3089 0108 D7F8642A 		ldr	r2, [r7, #2660]
 3090 010c 02FB03F3 		mul	r3, r2, r3
 3091 0110 1A46     		mov	r2, r3
 3092 0112 D7F8583A 		ldr	r3, [r7, #2648]
 3093 0116 1344     		add	r3, r3, r2
 3094 0118 C7F8503A 		str	r3, [r7, #2640]
 679:..\src/command_processing.c ****                         switch (PARAM_LIST[idx].TYPES){
 3095              		.loc 1 679 0
 3096 011c D7F8603A 		ldr	r3, [r7, #2656]
 3097 0120 1B01     		lsls	r3, r3, #4
 3098 0122 07F10802 		add	r2, r7, #8
 3099 0126 1268     		ldr	r2, [r2]
 3100 0128 1344     		add	r3, r3, r2
 3101 012a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3102 012c 072B     		cmp	r3, #7
 3103 012e 00F2B980 		bhi	.L162
 3104 0132 01A2     		adr	r2, .L164
 3105 0134 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3106              		.p2align 2
 3107              	.L164:
 3108 0138 27020000 		.word	.L163+1
 3109 013c 75010000 		.word	.L165+1
 3110 0140 59010000 		.word	.L166+1
 3111 0144 91010000 		.word	.L167+1
 3112 0148 AD010000 		.word	.L168+1
 3113 014c E5010000 		.word	.L169+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 84


 3114 0150 C9010000 		.word	.L170+1
 3115 0154 01020000 		.word	.L171+1
 3116              		.p2align 1
 3117              	.L166:
 680:..\src/command_processing.c ****                             case TYPE_UINT8:
 681:..\src/command_processing.c ****                                 aux_uint8 = *((uint8*)m_tmp);
 3118              		.loc 1 681 0
 3119 0158 D7F8503A 		ldr	r3, [r7, #2640]
 3120 015c 1B78     		ldrb	r3, [r3]
 3121 015e 87F84F3A 		strb	r3, [r7, #2639]
 682:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint8);
 3122              		.loc 1 682 0
 3123 0162 97F84F2A 		ldrb	r2, [r7, #2639]	@ zero_extendqisi2
 3124 0166 07F11403 		add	r3, r7, #20
 3125 016a 6049     		ldr	r1, .L181+16
 3126 016c 1846     		mov	r0, r3
 3127 016e FFF7FEFF 		bl	sprintf
 683:..\src/command_processing.c ****                                 break;
 3128              		.loc 1 683 0
 3129 0172 97E0     		b	.L162
 3130              	.L165:
 684:..\src/command_processing.c ****                             case TYPE_INT8:
 685:..\src/command_processing.c ****                                 aux_int8 = *((int8*)m_tmp);
 3131              		.loc 1 685 0
 3132 0174 D7F8503A 		ldr	r3, [r7, #2640]
 3133 0178 1B78     		ldrb	r3, [r3]
 3134 017a 87F84E3A 		strb	r3, [r7, #2638]
 686:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int8);
 3135              		.loc 1 686 0
 3136 017e 97F94E2A 		ldrsb	r2, [r7, #2638]
 3137 0182 07F11403 		add	r3, r7, #20
 3138 0186 5949     		ldr	r1, .L181+16
 3139 0188 1846     		mov	r0, r3
 3140 018a FFF7FEFF 		bl	sprintf
 687:..\src/command_processing.c ****                                 break;
 3141              		.loc 1 687 0
 3142 018e 89E0     		b	.L162
 3143              	.L167:
 688:..\src/command_processing.c ****                             case TYPE_INT16:   
 689:..\src/command_processing.c ****                                 aux_int16 = *((int16*)m_tmp);
 3144              		.loc 1 689 0
 3145 0190 D7F8503A 		ldr	r3, [r7, #2640]
 3146 0194 1B88     		ldrh	r3, [r3]	@ movhi
 3147 0196 A7F84C3A 		strh	r3, [r7, #2636]	@ movhi
 690:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int16);
 3148              		.loc 1 690 0
 3149 019a B7F94C2A 		ldrsh	r2, [r7, #2636]
 3150 019e 07F11403 		add	r3, r7, #20
 3151 01a2 5249     		ldr	r1, .L181+16
 3152 01a4 1846     		mov	r0, r3
 3153 01a6 FFF7FEFF 		bl	sprintf
 691:..\src/command_processing.c ****                                 break;
 3154              		.loc 1 691 0
 3155 01aa 7BE0     		b	.L162
 3156              	.L168:
 692:..\src/command_processing.c ****                             
 693:..\src/command_processing.c ****                             case TYPE_UINT16: 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 85


 694:..\src/command_processing.c ****                                 aux_uint16 = *((uint16*)m_tmp);
 3157              		.loc 1 694 0
 3158 01ac D7F8503A 		ldr	r3, [r7, #2640]
 3159 01b0 1B88     		ldrh	r3, [r3]	@ movhi
 3160 01b2 A7F84A3A 		strh	r3, [r7, #2634]	@ movhi
 695:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint16);
 3161              		.loc 1 695 0
 3162 01b6 B7F84A2A 		ldrh	r2, [r7, #2634]
 3163 01ba 07F11403 		add	r3, r7, #20
 3164 01be 4B49     		ldr	r1, .L181+16
 3165 01c0 1846     		mov	r0, r3
 3166 01c2 FFF7FEFF 		bl	sprintf
 696:..\src/command_processing.c ****                                 break;
 3167              		.loc 1 696 0
 3168 01c6 6DE0     		b	.L162
 3169              	.L170:
 697:..\src/command_processing.c ****                             
 698:..\src/command_processing.c ****                             case TYPE_UINT32:
 699:..\src/command_processing.c ****                                 aux_uint32 = *((uint32*)m_tmp);
 3170              		.loc 1 699 0
 3171 01c8 D7F8503A 		ldr	r3, [r7, #2640]
 3172 01cc 1B68     		ldr	r3, [r3]
 3173 01ce C7F8443A 		str	r3, [r7, #2628]
 700:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_uint32);
 3174              		.loc 1 700 0
 3175 01d2 07F11403 		add	r3, r7, #20
 3176 01d6 D7F8442A 		ldr	r2, [r7, #2628]
 3177 01da 4549     		ldr	r1, .L181+20
 3178 01dc 1846     		mov	r0, r3
 3179 01de FFF7FEFF 		bl	sprintf
 701:..\src/command_processing.c ****                                 break;
 3180              		.loc 1 701 0
 3181 01e2 5FE0     		b	.L162
 3182              	.L169:
 702:..\src/command_processing.c ****                                 
 703:..\src/command_processing.c ****                             case TYPE_INT32:
 704:..\src/command_processing.c ****                                 aux_int32 = *((int32*)m_tmp);
 3183              		.loc 1 704 0
 3184 01e4 D7F8503A 		ldr	r3, [r7, #2640]
 3185 01e8 1B68     		ldr	r3, [r3]
 3186 01ea C7F8403A 		str	r3, [r7, #2624]
 705:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_int32);
 3187              		.loc 1 705 0
 3188 01ee 07F11403 		add	r3, r7, #20
 3189 01f2 D7F8402A 		ldr	r2, [r7, #2624]
 3190 01f6 3E49     		ldr	r1, .L181+20
 3191 01f8 1846     		mov	r0, r3
 3192 01fa FFF7FEFF 		bl	sprintf
 706:..\src/command_processing.c ****                                 break;
 3193              		.loc 1 706 0
 3194 01fe 51E0     		b	.L162
 3195              	.L171:
 707:..\src/command_processing.c ****                                 
 708:..\src/command_processing.c ****                             case TYPE_FLOAT:
 709:..\src/command_processing.c ****                                 aux_float = *((float*)m_tmp);
 3196              		.loc 1 709 0
 3197 0200 D7F8503A 		ldr	r3, [r7, #2640]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 86


 3198 0204 1B68     		ldr	r3, [r3]	@ float
 3199 0206 C7F83C3A 		str	r3, [r7, #2620]	@ float
 710:..\src/command_processing.c ****                                 sprintf(str, " %f", aux_float);
 3200              		.loc 1 710 0
 3201 020a D7F83C0A 		ldr	r0, [r7, #2620]	@ float
 3202 020e FFF7FEFF 		bl	__aeabi_f2d
 3203 0212 0346     		mov	r3, r0
 3204 0214 0C46     		mov	r4, r1
 3205 0216 07F11400 		add	r0, r7, #20
 3206 021a 1A46     		mov	r2, r3
 3207 021c 2346     		mov	r3, r4
 3208 021e 3549     		ldr	r1, .L181+24
 3209 0220 FFF7FEFF 		bl	sprintf
 711:..\src/command_processing.c ****                                 break;
 3210              		.loc 1 711 0
 3211 0224 3EE0     		b	.L162
 3212              	.L163:
 712:..\src/command_processing.c ****                                 
 713:..\src/command_processing.c ****                             case TYPE_FLAG:
 714:..\src/command_processing.c ****                                 for (i = 0; i < num_menus; i++){
 3213              		.loc 1 714 0
 3214 0226 0023     		movs	r3, #0
 3215 0228 C7F8643A 		str	r3, [r7, #2660]
 3216 022c 32E0     		b	.L172
 3217              	.L175:
 715:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3218              		.loc 1 715 0
 3219 022e D7F8643A 		ldr	r3, [r7, #2660]
 3220 0232 2C22     		movs	r2, #44
 3221 0234 02FB03F3 		mul	r3, r2, r3
 3222 0238 3A1D     		adds	r2, r7, #4
 3223 023a 1268     		ldr	r2, [r2]
 3224 023c 1344     		add	r3, r3, r2
 3225 023e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3226 0240 D7F8603A 		ldr	r3, [r7, #2656]
 3227 0244 1B01     		lsls	r3, r3, #4
 3228 0246 07F10801 		add	r1, r7, #8
 3229 024a 0968     		ldr	r1, [r1]
 3230 024c 0B44     		add	r3, r3, r1
 3231 024e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3232 0250 9A42     		cmp	r2, r3
 3233 0252 1AD1     		bne	.L173
 716:..\src/command_processing.c ****                                         strcpy(str, "");
 3234              		.loc 1 716 0
 3235 0254 214B     		ldr	r3, .L181
 3236 0256 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3237 0258 07F11403 		add	r3, r7, #20
 3238 025c 1A70     		strb	r2, [r3]
 717:..\src/command_processing.c ****                                         strcat(str, MENU_LIST[i].choice[*m_addr]);
 3239              		.loc 1 717 0
 3240 025e D7F8643A 		ldr	r3, [r7, #2660]
 3241 0262 2C22     		movs	r2, #44
 3242 0264 02FB03F3 		mul	r3, r2, r3
 3243 0268 3A1D     		adds	r2, r7, #4
 3244 026a 1268     		ldr	r2, [r2]
 3245 026c 1A44     		add	r2, r2, r3
 3246 026e D7F8583A 		ldr	r3, [r7, #2648]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 87


 3247 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3248 0274 9B00     		lsls	r3, r3, #2
 3249 0276 1344     		add	r3, r3, r2
 3250 0278 5A68     		ldr	r2, [r3, #4]
 3251 027a 07F11403 		add	r3, r7, #20
 3252 027e 1146     		mov	r1, r2
 3253 0280 1846     		mov	r0, r3
 3254 0282 FFF7FEFF 		bl	strcat
 718:..\src/command_processing.c ****                                         break;
 3255              		.loc 1 718 0
 3256 0286 00BF     		nop
 719:..\src/command_processing.c ****                                     }
 720:..\src/command_processing.c ****                                 }
 721:..\src/command_processing.c ****                                 break;
 3257              		.loc 1 721 0
 3258 0288 0BE0     		b	.L180
 3259              	.L173:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3260              		.loc 1 714 0 discriminator 2
 3261 028a D7F8643A 		ldr	r3, [r7, #2660]
 3262 028e 0133     		adds	r3, r3, #1
 3263 0290 C7F8643A 		str	r3, [r7, #2660]
 3264              	.L172:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3265              		.loc 1 714 0 is_stmt 0 discriminator 1
 3266 0294 07F10E03 		add	r3, r7, #14
 3267 0298 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3268 029a D7F8643A 		ldr	r3, [r7, #2660]
 3269 029e 9A42     		cmp	r2, r3
 3270 02a0 C5DC     		bgt	.L175
 3271              	.L180:
 3272              		.loc 1 721 0 is_stmt 1
 3273 02a2 00BF     		nop
 3274              	.L162:
 722:..\src/command_processing.c ****                         } 
 723:..\src/command_processing.c ****                         strcat(info_string, str);
 3275              		.loc 1 723 0 discriminator 2
 3276 02a4 07F11402 		add	r2, r7, #20
 3277 02a8 07F17803 		add	r3, r7, #120
 3278 02ac 1146     		mov	r1, r2
 3279 02ae 1846     		mov	r0, r3
 3280 02b0 FFF7FEFF 		bl	strcat
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3281              		.loc 1 677 0 discriminator 2
 3282 02b4 D7F8643A 		ldr	r3, [r7, #2660]
 3283 02b8 0133     		adds	r3, r3, #1
 3284 02ba C7F8643A 		str	r3, [r7, #2660]
 3285              	.L161:
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3286              		.loc 1 677 0 is_stmt 0 discriminator 1
 3287 02be D7F8603A 		ldr	r3, [r7, #2656]
 3288 02c2 1B01     		lsls	r3, r3, #4
 3289 02c4 07F10802 		add	r2, r7, #8
 3290 02c8 1268     		ldr	r2, [r2]
 3291 02ca 1344     		add	r3, r3, r2
 3292 02cc 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3293 02ce 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 88


 3294 02d0 D7F8643A 		ldr	r3, [r7, #2660]
 3295 02d4 9A42     		cmp	r2, r3
 3296 02d6 3FF715AF 		bgt	.L176
 724:..\src/command_processing.c ****                     }
 725:..\src/command_processing.c ****                     break;
 3297              		.loc 1 725 0 is_stmt 1
 3298 02da 3EE0     		b	.L177
 3299              	.L182:
 3300              		.align	2
 3301              	.L181:
 3302 02dc 00000000 		.word	.LC8
 3303 02e0 00000000 		.word	superstring
 3304 02e4 00000000 		.word	c_mem
 3305 02e8 28000000 		.word	.LC17
 3306 02ec 78020000 		.word	.LC34
 3307 02f0 7C020000 		.word	.LC35
 3308 02f4 84020000 		.word	.LC36
 3309              	.L160:
 726:..\src/command_processing.c ****                     
 727:..\src/command_processing.c ****                     
 728:..\src/command_processing.c ****                 case CUSTOM_POS_LIM:        
 729:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 3310              		.loc 1 729 0
 3311 02f8 2B4B     		ldr	r3, .L183
 3312 02fa 1B6A     		ldr	r3, [r3, #32]
 3313 02fc 2A4A     		ldr	r2, .L183
 3314 02fe 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3315 0302 1341     		asrs	r3, r3, r2
 3316 0304 C7F8403A 		str	r3, [r7, #2624]
 730:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3317              		.loc 1 730 0
 3318 0308 07F11403 		add	r3, r7, #20
 3319 030c D7F8402A 		ldr	r2, [r7, #2624]
 3320 0310 2649     		ldr	r1, .L183+4
 3321 0312 1846     		mov	r0, r3
 3322 0314 FFF7FEFF 		bl	sprintf
 731:..\src/command_processing.c ****                     strcat(info_string, str);
 3323              		.loc 1 731 0
 3324 0318 07F11402 		add	r2, r7, #20
 3325 031c 07F17803 		add	r3, r7, #120
 3326 0320 1146     		mov	r1, r2
 3327 0322 1846     		mov	r0, r3
 3328 0324 FFF7FEFF 		bl	strcat
 732:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 3329              		.loc 1 732 0
 3330 0328 1F4B     		ldr	r3, .L183
 3331 032a 5B6A     		ldr	r3, [r3, #36]
 3332 032c 1E4A     		ldr	r2, .L183
 3333 032e 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3334 0332 1341     		asrs	r3, r3, r2
 3335 0334 C7F8403A 		str	r3, [r7, #2624]
 733:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3336              		.loc 1 733 0
 3337 0338 07F11403 		add	r3, r7, #20
 3338 033c D7F8402A 		ldr	r2, [r7, #2624]
 3339 0340 1A49     		ldr	r1, .L183+4
 3340 0342 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 89


 3341 0344 FFF7FEFF 		bl	sprintf
 734:..\src/command_processing.c ****                     strcat(info_string, str);
 3342              		.loc 1 734 0
 3343 0348 07F11402 		add	r2, r7, #20
 3344 034c 07F17803 		add	r3, r7, #120
 3345 0350 1146     		mov	r1, r2
 3346 0352 1846     		mov	r0, r3
 3347 0354 FFF7FEFF 		bl	strcat
 735:..\src/command_processing.c ****                     break;
 3348              		.loc 1 735 0
 3349 0358 00BF     		nop
 3350              	.L177:
 736:..\src/command_processing.c ****                 }
 737:..\src/command_processing.c ****                 
 738:..\src/command_processing.c ****                 strcat(info_string, "\n");
 3351              		.loc 1 738 0
 3352 035a 07F17803 		add	r3, r7, #120
 3353 035e 1846     		mov	r0, r3
 3354 0360 FFF7FEFF 		bl	strlen
 3355 0364 0346     		mov	r3, r0
 3356 0366 1A46     		mov	r2, r3
 3357 0368 07F17803 		add	r3, r7, #120
 3358 036c 1344     		add	r3, r3, r2
 3359 036e 1049     		ldr	r1, .L183+8
 3360 0370 1A46     		mov	r2, r3
 3361 0372 0B46     		mov	r3, r1
 3362 0374 1B88     		ldrh	r3, [r3]	@ unaligned
 3363 0376 1380     		strh	r3, [r2]	@ unaligned
 3364              	.L158:
 3365              	.LBE26:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3366              		.loc 1 670 0 discriminator 2
 3367 0378 D7F8603A 		ldr	r3, [r7, #2656]
 3368 037c 0133     		adds	r3, r3, #1
 3369 037e C7F8603A 		str	r3, [r7, #2656]
 3370              	.L157:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3371              		.loc 1 670 0 is_stmt 0 discriminator 1
 3372 0382 07F10F03 		add	r3, r7, #15
 3373 0386 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3374 0388 D7F8603A 		ldr	r3, [r7, #2656]
 3375 038c 9A42     		cmp	r2, r3
 3376 038e 3FF779AE 		bgt	.L178
 739:..\src/command_processing.c ****                 
 740:..\src/command_processing.c ****             }
 741:..\src/command_processing.c ****             
 742:..\src/command_processing.c ****         }
 743:..\src/command_processing.c ****               
 744:..\src/command_processing.c ****       
 745:..\src/command_processing.c ****     strcat(superstring,info_string);
 3377              		.loc 1 745 0 is_stmt 1
 3378 0392 07F17803 		add	r3, r7, #120
 3379 0396 1946     		mov	r1, r3
 3380 0398 0648     		ldr	r0, .L183+12
 3381 039a FFF7FEFF 		bl	strcat
 3382              	.L179:
 3383              	.LBE25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 90


 746:..\src/command_processing.c ****     
 747:..\src/command_processing.c **** }}
 3384              		.loc 1 747 0
 3385 039e 00BF     		nop
 3386 03a0 07F66C27 		addw	r7, r7, #2668
 3387              		.cfi_def_cfa_offset 12
 3388 03a4 BD46     		mov	sp, r7
 3389              		.cfi_def_cfa_register 13
 3390              		@ sp needed
 3391 03a6 90BD     		pop	{r4, r7, pc}
 3392              	.L184:
 3393              		.align	2
 3394              	.L183:
 3395 03a8 00000000 		.word	c_mem
 3396 03ac 7C020000 		.word	.LC35
 3397 03b0 28000000 		.word	.LC17
 3398 03b4 00000000 		.word	superstring
 3399              		.cfi_endproc
 3400              	.LFE73:
 3401              		.size	qbadminp_string, .-qbadminp_string
 3402              		.section	.rodata
 3403              		.align	2
 3404              	.LC37:
 3405 0288 0D0A00   		.ascii	"\015\012\000"
 3406 028b 00       		.align	2
 3407              	.LC38:
 3408 028c 4669726D 		.ascii	"Firmware version: \000"
 3408      77617265 
 3408      20766572 
 3408      73696F6E 
 3408      3A2000
 3409 029f 00       		.align	2
 3410              	.LC39:
 3411 02a0 4149525F 		.ascii	"AIR_CHAMBERS_and_VIBROTACTILE_FB\000"
 3411      4348414D 
 3411      42455253 
 3411      5F616E64 
 3411      5F564942 
 3412 02c1 000000   		.align	2
 3413              	.LC40:
 3414 02c4 2E0D0A0D 		.ascii	".\015\012\015\012\000"
 3414      0A00
 3415 02ca 0000     		.align	2
 3416              	.LC41:
 3417 02cc 44455649 		.ascii	"DEVICE INFO\015\012\000"
 3417      43452049 
 3417      4E464F0D 
 3417      0A00
 3418 02da 0000     		.align	2
 3419              	.LC42:
 3420 02dc 44657669 		.ascii	"Device: PULSE\015\012\000"
 3420      63653A20 
 3420      50554C53 
 3420      450D0A00 
 3421              		.align	2
 3422              	.LC43:
 3423 02ec 454D4720 		.ascii	"EMG input %d -> %d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 91


 3423      696E7075 
 3423      74202564 
 3423      202D3E20 
 3423      256400
 3424 02ff 00       		.align	2
 3425              	.LC44:
 3426 0300 41637475 		.ascii	"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \015"
 3426      61746F72 
 3426      7320696E 
 3426      7075743A 
 3426      2050756D 
 3427 0330 0A00     		.ascii	"\012\000"
 3428              		.global	__aeabi_f2uiz
 3429 0332 0000     		.align	2
 3430              	.LC45:
 3431 0334 4C617374 		.ascii	"Last FW cycle time: %u us\015\012\000"
 3431      20465720 
 3431      6379636C 
 3431      65207469 
 3431      6D653A20 
 3432              		.align	2
 3433              	.LC46:
 3434 0350 0D0A0000 		.ascii	"\015\012\000\000"
 3435              		.section	.text.prepare_generic_info,"ax",%progbits
 3436              		.align	2
 3437              		.global	prepare_generic_info
 3438              		.thumb
 3439              		.thumb_func
 3440              		.type	prepare_generic_info, %function
 3441              	prepare_generic_info:
 3442              	.LFB74:
 748:..\src/command_processing.c **** //==============================================================================
 749:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 750:..\src/command_processing.c **** //==============================================================================
 751:..\src/command_processing.c **** 
 752:..\src/command_processing.c **** void prepare_generic_info(char *info_string){   
 3443              		.loc 1 752 0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 120
 3446              		@ frame_needed = 1, uses_anonymous_args = 0
 3447 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3448              		.cfi_def_cfa_offset 20
 3449              		.cfi_offset 4, -20
 3450              		.cfi_offset 5, -16
 3451              		.cfi_offset 6, -12
 3452              		.cfi_offset 7, -8
 3453              		.cfi_offset 14, -4
 3454 0002 A1B0     		sub	sp, sp, #132
 3455              		.cfi_def_cfa_offset 152
 3456 0004 02AF     		add	r7, sp, #8
 3457              		.cfi_def_cfa 7, 144
 3458 0006 7860     		str	r0, [r7, #4]
 753:..\src/command_processing.c ****     
 754:..\src/command_processing.c ****      manage_param_list(300,0);
 3459              		.loc 1 754 0
 3460 0008 0021     		movs	r1, #0
 3461 000a 4FF49670 		mov	r0, #300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 92


 3462 000e FFF7FEFF 		bl	manage_param_list
 755:..\src/command_processing.c ****     int i;
 756:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3463              		.loc 1 756 0
 3464 0012 704B     		ldr	r3, .L191
 3465 0014 3B67     		str	r3, [r7, #112]
 757:..\src/command_processing.c ****     
 758:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3466              		.loc 1 758 0
 3467 0016 6F4B     		ldr	r3, .L191
 3468 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3469 001a FA2B     		cmp	r3, #250
 3470 001c 00F0D680 		beq	.L190
 3471              	.LBB27:
 759:..\src/command_processing.c ****         
 760:..\src/command_processing.c ****         char str[100];
 761:..\src/command_processing.c ****         strcpy(info_string, "");
 3472              		.loc 1 761 0
 3473 0020 7B68     		ldr	r3, [r7, #4]
 3474 0022 0022     		movs	r2, #0
 3475 0024 1A70     		strb	r2, [r3]
 762:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3476              		.loc 1 762 0
 3477 0026 7868     		ldr	r0, [r7, #4]
 3478 0028 FFF7FEFF 		bl	strlen
 3479 002c 0346     		mov	r3, r0
 3480 002e 1A46     		mov	r2, r3
 3481 0030 7B68     		ldr	r3, [r7, #4]
 3482 0032 1344     		add	r3, r3, r2
 3483 0034 684A     		ldr	r2, .L191+4
 3484 0036 1188     		ldrh	r1, [r2]	@ unaligned
 3485 0038 9278     		ldrb	r2, [r2, #2]
 3486 003a 1980     		strh	r1, [r3]	@ unaligned
 3487 003c 9A70     		strb	r2, [r3, #2]
 763:..\src/command_processing.c ****         strcat(info_string, "Firmware version: ");
 3488              		.loc 1 763 0
 3489 003e 7868     		ldr	r0, [r7, #4]
 3490 0040 FFF7FEFF 		bl	strlen
 3491 0044 0346     		mov	r3, r0
 3492 0046 1A46     		mov	r2, r3
 3493 0048 7B68     		ldr	r3, [r7, #4]
 3494 004a 1344     		add	r3, r3, r2
 3495 004c 634A     		ldr	r2, .L191+8
 3496 004e 1D46     		mov	r5, r3
 3497 0050 1446     		mov	r4, r2
 3498 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3499 0054 2860     		str	r0, [r5]	@ unaligned
 3500 0056 6960     		str	r1, [r5, #4]	@ unaligned
 3501 0058 AA60     		str	r2, [r5, #8]	@ unaligned
 3502 005a EB60     		str	r3, [r5, #12]	@ unaligned
 3503 005c 2388     		ldrh	r3, [r4]	@ unaligned
 3504 005e A278     		ldrb	r2, [r4, #2]
 3505 0060 2B82     		strh	r3, [r5, #16]	@ unaligned
 3506 0062 1346     		mov	r3, r2
 3507 0064 AB74     		strb	r3, [r5, #18]
 764:..\src/command_processing.c ****         strcat(info_string, VERSION);
 3508              		.loc 1 764 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 93


 3509 0066 7868     		ldr	r0, [r7, #4]
 3510 0068 FFF7FEFF 		bl	strlen
 3511 006c 0346     		mov	r3, r0
 3512 006e 1A46     		mov	r2, r3
 3513 0070 7B68     		ldr	r3, [r7, #4]
 3514 0072 1344     		add	r3, r3, r2
 3515 0074 5A4A     		ldr	r2, .L191+12
 3516 0076 1446     		mov	r4, r2
 3517 0078 9E46     		mov	lr, r3
 3518 007a 04F1200C 		add	ip, r4, #32
 3519              	.L187:
 3520 007e 7546     		mov	r5, lr
 3521 0080 2646     		mov	r6, r4
 3522 0082 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 3523 0084 2860     		str	r0, [r5]	@ unaligned
 3524 0086 6960     		str	r1, [r5, #4]	@ unaligned
 3525 0088 AA60     		str	r2, [r5, #8]	@ unaligned
 3526 008a EB60     		str	r3, [r5, #12]	@ unaligned
 3527 008c 1034     		adds	r4, r4, #16
 3528 008e 0EF1100E 		add	lr, lr, #16
 3529 0092 6445     		cmp	r4, ip
 3530 0094 F3D1     		bne	.L187
 3531 0096 7346     		mov	r3, lr
 3532 0098 2246     		mov	r2, r4
 3533 009a 1278     		ldrb	r2, [r2]
 3534 009c 1A70     		strb	r2, [r3]
 765:..\src/command_processing.c ****         strcat(info_string, ".\r\n\r\n");      
 3535              		.loc 1 765 0
 3536 009e 7868     		ldr	r0, [r7, #4]
 3537 00a0 FFF7FEFF 		bl	strlen
 3538 00a4 0346     		mov	r3, r0
 3539 00a6 1A46     		mov	r2, r3
 3540 00a8 7B68     		ldr	r3, [r7, #4]
 3541 00aa 1344     		add	r3, r3, r2
 3542 00ac 4D4A     		ldr	r2, .L191+16
 3543 00ae 1068     		ldr	r0, [r2]	@ unaligned
 3544 00b0 1860     		str	r0, [r3]	@ unaligned
 3545 00b2 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3546 00b4 9A80     		strh	r2, [r3, #4]	@ unaligned
 766:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 3547              		.loc 1 766 0
 3548 00b6 7868     		ldr	r0, [r7, #4]
 3549 00b8 FFF7FEFF 		bl	strlen
 3550 00bc 0346     		mov	r3, r0
 3551 00be 1A46     		mov	r2, r3
 3552 00c0 7B68     		ldr	r3, [r7, #4]
 3553 00c2 1344     		add	r3, r3, r2
 3554 00c4 484A     		ldr	r2, .L191+20
 3555 00c6 1C46     		mov	r4, r3
 3556 00c8 1346     		mov	r3, r2
 3557 00ca 07CB     		ldmia	r3!, {r0, r1, r2}
 3558 00cc 2060     		str	r0, [r4]	@ unaligned
 3559 00ce 6160     		str	r1, [r4, #4]	@ unaligned
 3560 00d0 A260     		str	r2, [r4, #8]	@ unaligned
 3561 00d2 1B88     		ldrh	r3, [r3]	@ unaligned
 3562 00d4 A381     		strh	r3, [r4, #12]	@ unaligned
 767:..\src/command_processing.c ****         strcat(info_string, "Device: PULSE\r\n");
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 94


 3563              		.loc 1 767 0
 3564 00d6 7868     		ldr	r0, [r7, #4]
 3565 00d8 FFF7FEFF 		bl	strlen
 3566 00dc 0346     		mov	r3, r0
 3567 00de 1A46     		mov	r2, r3
 3568 00e0 7B68     		ldr	r3, [r7, #4]
 3569 00e2 1344     		add	r3, r3, r2
 3570 00e4 414A     		ldr	r2, .L191+24
 3571 00e6 1C46     		mov	r4, r3
 3572 00e8 1546     		mov	r5, r2
 3573 00ea 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3574 00ec 2060     		str	r0, [r4]	@ unaligned
 3575 00ee 6160     		str	r1, [r4, #4]	@ unaligned
 3576 00f0 A260     		str	r2, [r4, #8]	@ unaligned
 3577 00f2 E360     		str	r3, [r4, #12]	@ unaligned
 768:..\src/command_processing.c ****         strcat(info_string, superstring);
 3578              		.loc 1 768 0
 3579 00f4 3E49     		ldr	r1, .L191+28
 3580 00f6 7868     		ldr	r0, [r7, #4]
 3581 00f8 FFF7FEFF 		bl	strcat
 769:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3582              		.loc 1 769 0
 3583 00fc 7868     		ldr	r0, [r7, #4]
 3584 00fe FFF7FEFF 		bl	strlen
 3585 0102 0346     		mov	r3, r0
 3586 0104 1A46     		mov	r2, r3
 3587 0106 7B68     		ldr	r3, [r7, #4]
 3588 0108 1344     		add	r3, r3, r2
 3589 010a 334A     		ldr	r2, .L191+4
 3590 010c 1188     		ldrh	r1, [r2]	@ unaligned
 3591 010e 9278     		ldrb	r2, [r2, #2]
 3592 0110 1980     		strh	r1, [r3]	@ unaligned
 3593 0112 9A70     		strb	r2, [r3, #2]
 770:..\src/command_processing.c **** 
 771:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 3594              		.loc 1 771 0
 3595 0114 0023     		movs	r3, #0
 3596 0116 7B67     		str	r3, [r7, #116]
 3597 0118 20E0     		b	.L188
 3598              	.L189:
 772:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3599              		.loc 1 772 0 discriminator 3
 3600 011a 7B6F     		ldr	r3, [r7, #116]
 3601 011c 591C     		adds	r1, r3, #1
 3602 011e 354A     		ldr	r2, .L191+32
 3603 0120 7B6F     		ldr	r3, [r7, #116]
 3604 0122 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3605 0126 07F10C00 		add	r0, r7, #12
 3606 012a 0A46     		mov	r2, r1
 3607 012c 3249     		ldr	r1, .L191+36
 3608 012e FFF7FEFF 		bl	sprintf
 773:..\src/command_processing.c ****                 strcat(info_string, str);
 3609              		.loc 1 773 0 discriminator 3
 3610 0132 07F10C03 		add	r3, r7, #12
 3611 0136 1946     		mov	r1, r3
 3612 0138 7868     		ldr	r0, [r7, #4]
 3613 013a FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 95


 774:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 3614              		.loc 1 774 0 discriminator 3
 3615 013e 7868     		ldr	r0, [r7, #4]
 3616 0140 FFF7FEFF 		bl	strlen
 3617 0144 0346     		mov	r3, r0
 3618 0146 1A46     		mov	r2, r3
 3619 0148 7B68     		ldr	r3, [r7, #4]
 3620 014a 1344     		add	r3, r3, r2
 3621 014c 224A     		ldr	r2, .L191+4
 3622 014e 1188     		ldrh	r1, [r2]	@ unaligned
 3623 0150 9278     		ldrb	r2, [r2, #2]
 3624 0152 1980     		strh	r1, [r3]	@ unaligned
 3625 0154 9A70     		strb	r2, [r3, #2]
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3626              		.loc 1 771 0 discriminator 3
 3627 0156 7B6F     		ldr	r3, [r7, #116]
 3628 0158 0133     		adds	r3, r3, #1
 3629 015a 7B67     		str	r3, [r7, #116]
 3630              	.L188:
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3631              		.loc 1 771 0 is_stmt 0 discriminator 1
 3632 015c 7B6F     		ldr	r3, [r7, #116]
 3633 015e 012B     		cmp	r3, #1
 3634 0160 DBDD     		ble	.L189
 775:..\src/command_processing.c ****             }
 776:..\src/command_processing.c ****             
 777:..\src/command_processing.c ****             
 778:..\src/command_processing.c ****         sprintf(str,"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \r\n",(int) Pump_refOld, (int)V
 3635              		.loc 1 778 0 is_stmt 1
 3636 0162 264B     		ldr	r3, .L191+40
 3637 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3638 0166 1A46     		mov	r2, r3
 3639 0168 254B     		ldr	r3, .L191+44
 3640 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3641 016c 1946     		mov	r1, r3
 3642 016e 244B     		ldr	r3, .L191+44
 3643 0170 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3644 0172 07F10C00 		add	r0, r7, #12
 3645 0176 0093     		str	r3, [sp]
 3646 0178 0B46     		mov	r3, r1
 3647 017a 2249     		ldr	r1, .L191+48
 3648 017c FFF7FEFF 		bl	sprintf
 779:..\src/command_processing.c ****         strcat(info_string, str);
 3649              		.loc 1 779 0
 3650 0180 07F10C03 		add	r3, r7, #12
 3651 0184 1946     		mov	r1, r3
 3652 0186 7868     		ldr	r0, [r7, #4]
 3653 0188 FFF7FEFF 		bl	strcat
 780:..\src/command_processing.c ****         //sprintf(str, "Last FW cycle time: %d us\r\n", (uint16_t)cycle_time);
 781:..\src/command_processing.c ****         sprintf(str, "Last FW cycle time: %u us\r\n", (uint16)cycle_time);
 3654              		.loc 1 781 0
 3655 018c 1E4B     		ldr	r3, .L191+52
 3656 018e 1B68     		ldr	r3, [r3]	@ float
 3657 0190 1846     		mov	r0, r3
 3658 0192 FFF7FEFF 		bl	__aeabi_f2uiz
 3659 0196 0346     		mov	r3, r0
 3660 0198 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 96


 3661 019a 1A46     		mov	r2, r3
 3662 019c 07F10C03 		add	r3, r7, #12
 3663 01a0 1A49     		ldr	r1, .L191+56
 3664 01a2 1846     		mov	r0, r3
 3665 01a4 FFF7FEFF 		bl	sprintf
 782:..\src/command_processing.c ****         strcat(info_string, str);
 3666              		.loc 1 782 0
 3667 01a8 07F10C03 		add	r3, r7, #12
 3668 01ac 1946     		mov	r1, r3
 3669 01ae 7868     		ldr	r0, [r7, #4]
 3670 01b0 FFF7FEFF 		bl	strcat
 783:..\src/command_processing.c **** 
 784:..\src/command_processing.c ****                
 785:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 3671              		.loc 1 785 0
 3672 01b4 7868     		ldr	r0, [r7, #4]
 3673 01b6 FFF7FEFF 		bl	strlen
 3674 01ba 0346     		mov	r3, r0
 3675 01bc 1A46     		mov	r2, r3
 3676 01be 7B68     		ldr	r3, [r7, #4]
 3677 01c0 1344     		add	r3, r3, r2
 3678 01c2 134A     		ldr	r2, .L191+60
 3679 01c4 1188     		ldrh	r1, [r2]	@ unaligned
 3680 01c6 9278     		ldrb	r2, [r2, #2]
 3681 01c8 1980     		strh	r1, [r3]	@ unaligned
 3682 01ca 9A70     		strb	r2, [r3, #2]
 3683              	.L190:
 3684              	.LBE27:
 786:..\src/command_processing.c ****     }
 787:..\src/command_processing.c **** }
 3685              		.loc 1 787 0
 3686 01cc 00BF     		nop
 3687 01ce 7C37     		adds	r7, r7, #124
 3688              		.cfi_def_cfa_offset 20
 3689 01d0 BD46     		mov	sp, r7
 3690              		.cfi_def_cfa_register 13
 3691              		@ sp needed
 3692 01d2 F0BD     		pop	{r4, r5, r6, r7, pc}
 3693              	.L192:
 3694              		.align	2
 3695              	.L191:
 3696 01d4 00000000 		.word	c_mem
 3697 01d8 88020000 		.word	.LC37
 3698 01dc 8C020000 		.word	.LC38
 3699 01e0 A0020000 		.word	.LC39
 3700 01e4 C4020000 		.word	.LC40
 3701 01e8 CC020000 		.word	.LC41
 3702 01ec DC020000 		.word	.LC42
 3703 01f0 00000000 		.word	superstring
 3704 01f4 00000000 		.word	g_adc_meas
 3705 01f8 EC020000 		.word	.LC43
 3706 01fc 00000000 		.word	Pump_refOld
 3707 0200 00000000 		.word	VT_refOld
 3708 0204 00030000 		.word	.LC44
 3709 0208 00000000 		.word	cycle_time
 3710 020c 34030000 		.word	.LC45
 3711 0210 50030000 		.word	.LC46
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 97


 3712              		.cfi_endproc
 3713              	.LFE74:
 3714              		.size	prepare_generic_info, .-prepare_generic_info
 3715              		.section	.text.prepare_counter_info,"ax",%progbits
 3716              		.align	2
 3717              		.global	prepare_counter_info
 3718              		.thumb
 3719              		.thumb_func
 3720              		.type	prepare_counter_info, %function
 3721              	prepare_counter_info:
 3722              	.LFB75:
 788:..\src/command_processing.c **** 
 789:..\src/command_processing.c **** //==============================================================================
 790:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 791:..\src/command_processing.c **** //==============================================================================
 792:..\src/command_processing.c **** 
 793:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 794:..\src/command_processing.c **** {
 3723              		.loc 1 794 0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 8
 3726              		@ frame_needed = 1, uses_anonymous_args = 0
 3727              		@ link register save eliminated.
 3728 0000 80B4     		push	{r7}
 3729              		.cfi_def_cfa_offset 4
 3730              		.cfi_offset 7, -4
 3731 0002 83B0     		sub	sp, sp, #12
 3732              		.cfi_def_cfa_offset 16
 3733 0004 00AF     		add	r7, sp, #0
 3734              		.cfi_def_cfa_register 7
 3735 0006 7860     		str	r0, [r7, #4]
 795:..\src/command_processing.c **** }
 3736              		.loc 1 795 0
 3737 0008 00BF     		nop
 3738 000a 0C37     		adds	r7, r7, #12
 3739              		.cfi_def_cfa_offset 4
 3740 000c BD46     		mov	sp, r7
 3741              		.cfi_def_cfa_register 13
 3742              		@ sp needed
 3743 000e 80BC     		pop	{r7}
 3744              		.cfi_restore 7
 3745              		.cfi_def_cfa_offset 0
 3746 0010 7047     		bx	lr
 3747              		.cfi_endproc
 3748              	.LFE75:
 3749              		.size	prepare_counter_info, .-prepare_counter_info
 3750 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 3751              		.align	2
 3752              		.global	prepare_R01_info
 3753              		.thumb
 3754              		.thumb_func
 3755              		.type	prepare_R01_info, %function
 3756              	prepare_R01_info:
 3757              	.LFB76:
 796:..\src/command_processing.c **** 
 797:..\src/command_processing.c **** //==============================================================================
 798:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 98


 799:..\src/command_processing.c **** //==============================================================================
 800:..\src/command_processing.c **** 
 801:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
 802:..\src/command_processing.c **** {
 3758              		.loc 1 802 0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 8
 3761              		@ frame_needed = 1, uses_anonymous_args = 0
 3762              		@ link register save eliminated.
 3763 0000 80B4     		push	{r7}
 3764              		.cfi_def_cfa_offset 4
 3765              		.cfi_offset 7, -4
 3766 0002 83B0     		sub	sp, sp, #12
 3767              		.cfi_def_cfa_offset 16
 3768 0004 00AF     		add	r7, sp, #0
 3769              		.cfi_def_cfa_register 7
 3770 0006 7860     		str	r0, [r7, #4]
 803:..\src/command_processing.c **** }
 3771              		.loc 1 803 0
 3772 0008 00BF     		nop
 3773 000a 0C37     		adds	r7, r7, #12
 3774              		.cfi_def_cfa_offset 4
 3775 000c BD46     		mov	sp, r7
 3776              		.cfi_def_cfa_register 13
 3777              		@ sp needed
 3778 000e 80BC     		pop	{r7}
 3779              		.cfi_restore 7
 3780              		.cfi_def_cfa_offset 0
 3781 0010 7047     		bx	lr
 3782              		.cfi_endproc
 3783              	.LFE76:
 3784              		.size	prepare_R01_info, .-prepare_R01_info
 3785 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 3786              		.align	2
 3787              		.global	prepare_SD_param_info
 3788              		.thumb
 3789              		.thumb_func
 3790              		.type	prepare_SD_param_info, %function
 3791              	prepare_SD_param_info:
 3792              	.LFB77:
 804:..\src/command_processing.c **** 
 805:..\src/command_processing.c **** //==============================================================================
 806:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 807:..\src/command_processing.c **** //==============================================================================
 808:..\src/command_processing.c **** 
 809:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 810:..\src/command_processing.c **** {
 3793              		.loc 1 810 0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 8
 3796              		@ frame_needed = 1, uses_anonymous_args = 0
 3797              		@ link register save eliminated.
 3798 0000 80B4     		push	{r7}
 3799              		.cfi_def_cfa_offset 4
 3800              		.cfi_offset 7, -4
 3801 0002 83B0     		sub	sp, sp, #12
 3802              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 99


 3803 0004 00AF     		add	r7, sp, #0
 3804              		.cfi_def_cfa_register 7
 3805 0006 7860     		str	r0, [r7, #4]
 811:..\src/command_processing.c **** }
 3806              		.loc 1 811 0
 3807 0008 00BF     		nop
 3808 000a 0C37     		adds	r7, r7, #12
 3809              		.cfi_def_cfa_offset 4
 3810 000c BD46     		mov	sp, r7
 3811              		.cfi_def_cfa_register 13
 3812              		@ sp needed
 3813 000e 80BC     		pop	{r7}
 3814              		.cfi_restore 7
 3815              		.cfi_def_cfa_offset 0
 3816 0010 7047     		bx	lr
 3817              		.cfi_endproc
 3818              	.LFE77:
 3819              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 3820 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 3821              		.align	2
 3822              		.global	prepare_SD_legend
 3823              		.thumb
 3824              		.thumb_func
 3825              		.type	prepare_SD_legend, %function
 3826              	prepare_SD_legend:
 3827              	.LFB78:
 812:..\src/command_processing.c **** 
 813:..\src/command_processing.c **** 
 814:..\src/command_processing.c **** //==============================================================================
 815:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 816:..\src/command_processing.c **** //==============================================================================
 817:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 818:..\src/command_processing.c **** {
 3828              		.loc 1 818 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 8
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832              		@ link register save eliminated.
 3833 0000 80B4     		push	{r7}
 3834              		.cfi_def_cfa_offset 4
 3835              		.cfi_offset 7, -4
 3836 0002 83B0     		sub	sp, sp, #12
 3837              		.cfi_def_cfa_offset 16
 3838 0004 00AF     		add	r7, sp, #0
 3839              		.cfi_def_cfa_register 7
 3840 0006 7860     		str	r0, [r7, #4]
 819:..\src/command_processing.c **** }
 3841              		.loc 1 819 0
 3842 0008 00BF     		nop
 3843 000a 0C37     		adds	r7, r7, #12
 3844              		.cfi_def_cfa_offset 4
 3845 000c BD46     		mov	sp, r7
 3846              		.cfi_def_cfa_register 13
 3847              		@ sp needed
 3848 000e 80BC     		pop	{r7}
 3849              		.cfi_restore 7
 3850              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 100


 3851 0010 7047     		bx	lr
 3852              		.cfi_endproc
 3853              	.LFE78:
 3854              		.size	prepare_SD_legend, .-prepare_SD_legend
 3855 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 3856              		.align	2
 3857              		.global	prepare_SD_EMG_History_legend
 3858              		.thumb
 3859              		.thumb_func
 3860              		.type	prepare_SD_EMG_History_legend, %function
 3861              	prepare_SD_EMG_History_legend:
 3862              	.LFB79:
 820:..\src/command_processing.c **** 
 821:..\src/command_processing.c **** //==============================================================================
 822:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 823:..\src/command_processing.c **** //==============================================================================
 824:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 825:..\src/command_processing.c **** {
 3863              		.loc 1 825 0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 8
 3866              		@ frame_needed = 1, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
 3868 0000 80B4     		push	{r7}
 3869              		.cfi_def_cfa_offset 4
 3870              		.cfi_offset 7, -4
 3871 0002 83B0     		sub	sp, sp, #12
 3872              		.cfi_def_cfa_offset 16
 3873 0004 00AF     		add	r7, sp, #0
 3874              		.cfi_def_cfa_register 7
 3875 0006 7860     		str	r0, [r7, #4]
 826:..\src/command_processing.c ****     
 827:..\src/command_processing.c **** }
 3876              		.loc 1 827 0
 3877 0008 00BF     		nop
 3878 000a 0C37     		adds	r7, r7, #12
 3879              		.cfi_def_cfa_offset 4
 3880 000c BD46     		mov	sp, r7
 3881              		.cfi_def_cfa_register 13
 3882              		@ sp needed
 3883 000e 80BC     		pop	{r7}
 3884              		.cfi_restore 7
 3885              		.cfi_def_cfa_offset 0
 3886 0010 7047     		bx	lr
 3887              		.cfi_endproc
 3888              	.LFE79:
 3889              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 3890 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 3891              		.align	2
 3892              		.global	prepare_SD_EMG_history
 3893              		.thumb
 3894              		.thumb_func
 3895              		.type	prepare_SD_EMG_history, %function
 3896              	prepare_SD_EMG_history:
 3897              	.LFB80:
 828:..\src/command_processing.c **** 
 829:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 101


 830:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 831:..\src/command_processing.c **** //==============================================================================
 832:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
 833:..\src/command_processing.c **** {
 3898              		.loc 1 833 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 8
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902              		@ link register save eliminated.
 3903 0000 80B4     		push	{r7}
 3904              		.cfi_def_cfa_offset 4
 3905              		.cfi_offset 7, -4
 3906 0002 83B0     		sub	sp, sp, #12
 3907              		.cfi_def_cfa_offset 16
 3908 0004 00AF     		add	r7, sp, #0
 3909              		.cfi_def_cfa_register 7
 3910 0006 7860     		str	r0, [r7, #4]
 834:..\src/command_processing.c ****         
 835:..\src/command_processing.c **** }
 3911              		.loc 1 835 0
 3912 0008 00BF     		nop
 3913 000a 0C37     		adds	r7, r7, #12
 3914              		.cfi_def_cfa_offset 4
 3915 000c BD46     		mov	sp, r7
 3916              		.cfi_def_cfa_register 13
 3917              		@ sp needed
 3918 000e 80BC     		pop	{r7}
 3919              		.cfi_restore 7
 3920              		.cfi_def_cfa_offset 0
 3921 0010 7047     		bx	lr
 3922              		.cfi_endproc
 3923              	.LFE80:
 3924              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 3925 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 3926              		.align	2
 3927              		.global	IMU_reading_info
 3928              		.thumb
 3929              		.thumb_func
 3930              		.type	IMU_reading_info, %function
 3931              	IMU_reading_info:
 3932              	.LFB81:
 836:..\src/command_processing.c **** 
 837:..\src/command_processing.c **** //==============================================================================
 838:..\src/command_processing.c **** //                                                              IMU READING INFO
 839:..\src/command_processing.c **** //==============================================================================
 840:..\src/command_processing.c **** 
 841:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 842:..\src/command_processing.c **** {
 3933              		.loc 1 842 0
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 8
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937              		@ link register save eliminated.
 3938 0000 80B4     		push	{r7}
 3939              		.cfi_def_cfa_offset 4
 3940              		.cfi_offset 7, -4
 3941 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 102


 3942              		.cfi_def_cfa_offset 16
 3943 0004 00AF     		add	r7, sp, #0
 3944              		.cfi_def_cfa_register 7
 3945 0006 7860     		str	r0, [r7, #4]
 843:..\src/command_processing.c **** }
 3946              		.loc 1 843 0
 3947 0008 00BF     		nop
 3948 000a 0C37     		adds	r7, r7, #12
 3949              		.cfi_def_cfa_offset 4
 3950 000c BD46     		mov	sp, r7
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 000e 80BC     		pop	{r7}
 3954              		.cfi_restore 7
 3955              		.cfi_def_cfa_offset 0
 3956 0010 7047     		bx	lr
 3957              		.cfi_endproc
 3958              	.LFE81:
 3959              		.size	IMU_reading_info, .-IMU_reading_info
 3960 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 3961              		.align	2
 3962              		.global	commWrite_old_id
 3963              		.thumb
 3964              		.thumb_func
 3965              		.type	commWrite_old_id, %function
 3966              	commWrite_old_id:
 3967              	.LFB82:
 844:..\src/command_processing.c **** 
 845:..\src/command_processing.c **** //==============================================================================
 846:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 847:..\src/command_processing.c **** //==============================================================================
 848:..\src/command_processing.c **** 
 849:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 850:..\src/command_processing.c **** {
 3968              		.loc 1 850 0
 3969              		.cfi_startproc
 3970              		@ args = 0, pretend = 0, frame = 16
 3971              		@ frame_needed = 1, uses_anonymous_args = 0
 3972 0000 80B5     		push	{r7, lr}
 3973              		.cfi_def_cfa_offset 8
 3974              		.cfi_offset 7, -8
 3975              		.cfi_offset 14, -4
 3976 0002 84B0     		sub	sp, sp, #16
 3977              		.cfi_def_cfa_offset 24
 3978 0004 00AF     		add	r7, sp, #0
 3979              		.cfi_def_cfa_register 7
 3980 0006 7860     		str	r0, [r7, #4]
 3981 0008 0B46     		mov	r3, r1
 3982 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3983 000c 1346     		mov	r3, r2
 3984 000e 7B70     		strb	r3, [r7, #1]
 851:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 852:..\src/command_processing.c **** 
 853:..\src/command_processing.c ****     // frame - start
 854:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3985              		.loc 1 854 0
 3986 0010 3A20     		movs	r0, #58
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 103


 3987 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 855:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3988              		.loc 1 855 0
 3989 0016 3A20     		movs	r0, #58
 3990 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 856:..\src/command_processing.c ****     // frame - ID
 857:..\src/command_processing.c ****     //if(old_id)
 858:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 3991              		.loc 1 858 0
 3992 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3993 001e 1846     		mov	r0, r3
 3994 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 859:..\src/command_processing.c ****     //else
 860:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 861:..\src/command_processing.c ****         
 862:..\src/command_processing.c ****     // frame - length
 863:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3995              		.loc 1 863 0
 3996 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3997 0026 DBB2     		uxtb	r3, r3
 3998 0028 1846     		mov	r0, r3
 3999 002a FFF7FEFF 		bl	UART_RS485_PutChar
 864:..\src/command_processing.c ****     // frame - packet data
 865:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4000              		.loc 1 865 0
 4001 002e 0023     		movs	r3, #0
 4002 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 4003 0032 09E0     		b	.L201
 4004              	.L202:
 866:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4005              		.loc 1 866 0 discriminator 3
 4006 0034 FB89     		ldrh	r3, [r7, #14]
 4007 0036 7A68     		ldr	r2, [r7, #4]
 4008 0038 1344     		add	r3, r3, r2
 4009 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4010 003c 1846     		mov	r0, r3
 4011 003e FFF7FEFF 		bl	UART_RS485_PutChar
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4012              		.loc 1 865 0 discriminator 3
 4013 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4014 0044 0133     		adds	r3, r3, #1
 4015 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4016              	.L201:
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4017              		.loc 1 865 0 is_stmt 0 discriminator 1
 4018 0048 FA89     		ldrh	r2, [r7, #14]
 4019 004a 7B88     		ldrh	r3, [r7, #2]
 4020 004c 9A42     		cmp	r2, r3
 4021 004e F1D3     		bcc	.L202
 867:..\src/command_processing.c ****     }
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     index = 0;
 4022              		.loc 1 869 0 is_stmt 1
 4023 0050 0023     		movs	r3, #0
 4024 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 104


 4025              		.loc 1 871 0
 4026 0054 00BF     		nop
 4027              	.L204:
 4028              		.loc 1 871 0 is_stmt 0 discriminator 2
 4029 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4030 005a 0346     		mov	r3, r0
 4031 005c 03F00103 		and	r3, r3, #1
 4032 0060 002B     		cmp	r3, #0
 4033 0062 05D1     		bne	.L203
 4034              		.loc 1 871 0 discriminator 1
 4035 0064 FB89     		ldrh	r3, [r7, #14]
 4036 0066 5A1C     		adds	r2, r3, #1
 4037 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 4038 006a B3F57A7F 		cmp	r3, #1000
 4039 006e F2D9     		bls	.L204
 4040              	.L203:
 872:..\src/command_processing.c **** 
 873:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4041              		.loc 1 873 0 is_stmt 1
 4042 0070 0120     		movs	r0, #1
 4043 0072 FFF7FEFF 		bl	RS485_CTS_Write
 874:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4044              		.loc 1 874 0
 4045 0076 0020     		movs	r0, #0
 4046 0078 FFF7FEFF 		bl	RS485_CTS_Write
 875:..\src/command_processing.c **** }
 4047              		.loc 1 875 0
 4048 007c 00BF     		nop
 4049 007e 1037     		adds	r7, r7, #16
 4050              		.cfi_def_cfa_offset 8
 4051 0080 BD46     		mov	sp, r7
 4052              		.cfi_def_cfa_register 13
 4053              		@ sp needed
 4054 0082 80BD     		pop	{r7, pc}
 4055              		.cfi_endproc
 4056              	.LFE82:
 4057              		.size	commWrite_old_id, .-commWrite_old_id
 4058              		.section	.text.commWrite,"ax",%progbits
 4059              		.align	2
 4060              		.global	commWrite
 4061              		.thumb
 4062              		.thumb_func
 4063              		.type	commWrite, %function
 4064              	commWrite:
 4065              	.LFB83:
 876:..\src/command_processing.c **** 
 877:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 878:..\src/command_processing.c **** {
 4066              		.loc 1 878 0
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 16
 4069              		@ frame_needed = 1, uses_anonymous_args = 0
 4070 0000 80B5     		push	{r7, lr}
 4071              		.cfi_def_cfa_offset 8
 4072              		.cfi_offset 7, -8
 4073              		.cfi_offset 14, -4
 4074 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 105


 4075              		.cfi_def_cfa_offset 24
 4076 0004 00AF     		add	r7, sp, #0
 4077              		.cfi_def_cfa_register 7
 4078 0006 7860     		str	r0, [r7, #4]
 4079 0008 0B46     		mov	r3, r1
 4080 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 879:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 880:..\src/command_processing.c **** 
 881:..\src/command_processing.c ****     // frame - start
 882:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4081              		.loc 1 882 0
 4082 000c 3A20     		movs	r0, #58
 4083 000e FFF7FEFF 		bl	UART_RS485_PutChar
 883:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4084              		.loc 1 883 0
 4085 0012 3A20     		movs	r0, #58
 4086 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 884:..\src/command_processing.c ****     // frame - ID
 885:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 4087              		.loc 1 885 0
 4088 0018 1A4B     		ldr	r3, .L210
 4089 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 4090 001c 1846     		mov	r0, r3
 4091 001e FFF7FEFF 		bl	UART_RS485_PutChar
 886:..\src/command_processing.c ****     // frame - length
 887:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4092              		.loc 1 887 0
 4093 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4094 0024 DBB2     		uxtb	r3, r3
 4095 0026 1846     		mov	r0, r3
 4096 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 888:..\src/command_processing.c ****     // frame - packet data
 889:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4097              		.loc 1 889 0
 4098 002c 0023     		movs	r3, #0
 4099 002e FB81     		strh	r3, [r7, #14]	@ movhi
 4100 0030 09E0     		b	.L206
 4101              	.L207:
 890:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4102              		.loc 1 890 0 discriminator 3
 4103 0032 FB89     		ldrh	r3, [r7, #14]
 4104 0034 7A68     		ldr	r2, [r7, #4]
 4105 0036 1344     		add	r3, r3, r2
 4106 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4107 003a 1846     		mov	r0, r3
 4108 003c FFF7FEFF 		bl	UART_RS485_PutChar
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4109              		.loc 1 889 0 discriminator 3
 4110 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4111 0042 0133     		adds	r3, r3, #1
 4112 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 4113              	.L206:
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4114              		.loc 1 889 0 is_stmt 0 discriminator 1
 4115 0046 FA89     		ldrh	r2, [r7, #14]
 4116 0048 7B88     		ldrh	r3, [r7, #2]
 4117 004a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 106


 4118 004c F1D3     		bcc	.L207
 891:..\src/command_processing.c ****     }
 892:..\src/command_processing.c **** 
 893:..\src/command_processing.c ****     index = 0;
 4119              		.loc 1 893 0 is_stmt 1
 4120 004e 0023     		movs	r3, #0
 4121 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 894:..\src/command_processing.c **** 
 895:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4122              		.loc 1 895 0
 4123 0052 00BF     		nop
 4124              	.L209:
 4125              		.loc 1 895 0 is_stmt 0 discriminator 2
 4126 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4127 0058 0346     		mov	r3, r0
 4128 005a 03F00103 		and	r3, r3, #1
 4129 005e 002B     		cmp	r3, #0
 4130 0060 05D1     		bne	.L208
 4131              		.loc 1 895 0 discriminator 1
 4132 0062 FB89     		ldrh	r3, [r7, #14]
 4133 0064 5A1C     		adds	r2, r3, #1
 4134 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 4135 0068 B3F57A7F 		cmp	r3, #1000
 4136 006c F2D9     		bls	.L209
 4137              	.L208:
 896:..\src/command_processing.c **** 
 897:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4138              		.loc 1 897 0 is_stmt 1
 4139 006e 0120     		movs	r0, #1
 4140 0070 FFF7FEFF 		bl	RS485_CTS_Write
 898:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4141              		.loc 1 898 0
 4142 0074 0020     		movs	r0, #0
 4143 0076 FFF7FEFF 		bl	RS485_CTS_Write
 899:..\src/command_processing.c **** }
 4144              		.loc 1 899 0
 4145 007a 00BF     		nop
 4146 007c 1037     		adds	r7, r7, #16
 4147              		.cfi_def_cfa_offset 8
 4148 007e BD46     		mov	sp, r7
 4149              		.cfi_def_cfa_register 13
 4150              		@ sp needed
 4151 0080 80BD     		pop	{r7, pc}
 4152              	.L211:
 4153 0082 00BF     		.align	2
 4154              	.L210:
 4155 0084 00000000 		.word	g_mem
 4156              		.cfi_endproc
 4157              	.LFE83:
 4158              		.size	commWrite, .-commWrite
 4159              		.section	.text.commWriteID,"ax",%progbits
 4160              		.align	2
 4161              		.global	commWriteID
 4162              		.thumb
 4163              		.thumb_func
 4164              		.type	commWriteID, %function
 4165              	commWriteID:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 107


 4166              	.LFB84:
 900:..\src/command_processing.c **** 
 901:..\src/command_processing.c **** 
 902:..\src/command_processing.c **** //==============================================================================
 903:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 904:..\src/command_processing.c **** //==============================================================================
 905:..\src/command_processing.c **** 
 906:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 907:..\src/command_processing.c **** {
 4167              		.loc 1 907 0
 4168              		.cfi_startproc
 4169              		@ args = 0, pretend = 0, frame = 8
 4170              		@ frame_needed = 1, uses_anonymous_args = 0
 4171 0000 80B5     		push	{r7, lr}
 4172              		.cfi_def_cfa_offset 8
 4173              		.cfi_offset 7, -8
 4174              		.cfi_offset 14, -4
 4175 0002 82B0     		sub	sp, sp, #8
 4176              		.cfi_def_cfa_offset 16
 4177 0004 00AF     		add	r7, sp, #0
 4178              		.cfi_def_cfa_register 7
 4179 0006 7860     		str	r0, [r7, #4]
 4180 0008 0B46     		mov	r3, r1
 4181 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4182 000c 1346     		mov	r3, r2
 4183 000e 7B70     		strb	r3, [r7, #1]
 908:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 909:..\src/command_processing.c **** 
 910:..\src/command_processing.c ****     // frame - start
 911:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4184              		.loc 1 911 0
 4185 0010 3A20     		movs	r0, #58
 4186 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 912:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4187              		.loc 1 912 0
 4188 0016 3A20     		movs	r0, #58
 4189 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 913:..\src/command_processing.c ****     // frame - ID
 914:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 4190              		.loc 1 914 0
 4191 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4192 001e 1846     		mov	r0, r3
 4193 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 915:..\src/command_processing.c ****     // frame - length
 916:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4194              		.loc 1 916 0
 4195 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4196 0026 DBB2     		uxtb	r3, r3
 4197 0028 1846     		mov	r0, r3
 4198 002a FFF7FEFF 		bl	UART_RS485_PutChar
 917:..\src/command_processing.c ****     // frame - packet data
 918:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 4199              		.loc 1 918 0
 4200 002e 1B4B     		ldr	r3, .L217
 4201 0030 0022     		movs	r2, #0
 4202 0032 1A80     		strh	r2, [r3]	@ movhi
 4203 0034 0EE0     		b	.L213
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 108


 4204              	.L214:
 919:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4205              		.loc 1 919 0 discriminator 3
 4206 0036 194B     		ldr	r3, .L217
 4207 0038 1B88     		ldrh	r3, [r3]
 4208 003a 1A46     		mov	r2, r3
 4209 003c 7B68     		ldr	r3, [r7, #4]
 4210 003e 1344     		add	r3, r3, r2
 4211 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4212 0042 1846     		mov	r0, r3
 4213 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4214              		.loc 1 918 0 discriminator 3
 4215 0048 144B     		ldr	r3, .L217
 4216 004a 1B88     		ldrh	r3, [r3]
 4217 004c 0133     		adds	r3, r3, #1
 4218 004e 9AB2     		uxth	r2, r3
 4219 0050 124B     		ldr	r3, .L217
 4220 0052 1A80     		strh	r2, [r3]	@ movhi
 4221              	.L213:
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4222              		.loc 1 918 0 is_stmt 0 discriminator 1
 4223 0054 114B     		ldr	r3, .L217
 4224 0056 1B88     		ldrh	r3, [r3]
 4225 0058 7A88     		ldrh	r2, [r7, #2]
 4226 005a 9A42     		cmp	r2, r3
 4227 005c EBD8     		bhi	.L214
 920:..\src/command_processing.c ****     }
 921:..\src/command_processing.c **** 
 922:..\src/command_processing.c ****     i = 0;
 4228              		.loc 1 922 0 is_stmt 1
 4229 005e 0F4B     		ldr	r3, .L217
 4230 0060 0022     		movs	r2, #0
 4231 0062 1A80     		strh	r2, [r3]	@ movhi
 923:..\src/command_processing.c **** 
 924:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 4232              		.loc 1 924 0
 4233 0064 00BF     		nop
 4234              	.L216:
 4235              		.loc 1 924 0 is_stmt 0 discriminator 2
 4236 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4237 006a 0346     		mov	r3, r0
 4238 006c 03F00103 		and	r3, r3, #1
 4239 0070 002B     		cmp	r3, #0
 4240 0072 08D1     		bne	.L215
 4241              		.loc 1 924 0 discriminator 1
 4242 0074 094B     		ldr	r3, .L217
 4243 0076 1B88     		ldrh	r3, [r3]
 4244 0078 5A1C     		adds	r2, r3, #1
 4245 007a 91B2     		uxth	r1, r2
 4246 007c 074A     		ldr	r2, .L217
 4247 007e 1180     		strh	r1, [r2]	@ movhi
 4248 0080 B3F57A7F 		cmp	r3, #1000
 4249 0084 EFD9     		bls	.L216
 4250              	.L215:
 925:..\src/command_processing.c ****     
 926:..\src/command_processing.c ****     RS485_CTS_Write(1);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 109


 4251              		.loc 1 926 0 is_stmt 1
 4252 0086 0120     		movs	r0, #1
 4253 0088 FFF7FEFF 		bl	RS485_CTS_Write
 927:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4254              		.loc 1 927 0
 4255 008c 0020     		movs	r0, #0
 4256 008e FFF7FEFF 		bl	RS485_CTS_Write
 928:..\src/command_processing.c **** }
 4257              		.loc 1 928 0
 4258 0092 00BF     		nop
 4259 0094 0837     		adds	r7, r7, #8
 4260              		.cfi_def_cfa_offset 8
 4261 0096 BD46     		mov	sp, r7
 4262              		.cfi_def_cfa_register 13
 4263              		@ sp needed
 4264 0098 80BD     		pop	{r7, pc}
 4265              	.L218:
 4266 009a 00BF     		.align	2
 4267              	.L217:
 4268 009c 00000000 		.word	i.10045
 4269              		.cfi_endproc
 4270              	.LFE84:
 4271              		.size	commWriteID, .-commWriteID
 4272              		.section	.text.LCRChecksum,"ax",%progbits
 4273              		.align	2
 4274              		.global	LCRChecksum
 4275              		.thumb
 4276              		.thumb_func
 4277              		.type	LCRChecksum, %function
 4278              	LCRChecksum:
 4279              	.LFB85:
 929:..\src/command_processing.c **** 
 930:..\src/command_processing.c **** //==============================================================================
 931:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 932:..\src/command_processing.c **** //==============================================================================
 933:..\src/command_processing.c **** 
 934:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 935:..\src/command_processing.c **** 
 936:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 4280              		.loc 1 936 0
 4281              		.cfi_startproc
 4282              		@ args = 0, pretend = 0, frame = 16
 4283              		@ frame_needed = 1, uses_anonymous_args = 0
 4284              		@ link register save eliminated.
 4285 0000 80B4     		push	{r7}
 4286              		.cfi_def_cfa_offset 4
 4287              		.cfi_offset 7, -4
 4288 0002 85B0     		sub	sp, sp, #20
 4289              		.cfi_def_cfa_offset 24
 4290 0004 00AF     		add	r7, sp, #0
 4291              		.cfi_def_cfa_register 7
 4292 0006 7860     		str	r0, [r7, #4]
 4293 0008 0B46     		mov	r3, r1
 4294 000a FB70     		strb	r3, [r7, #3]
 937:..\src/command_processing.c ****     
 938:..\src/command_processing.c ****     uint8 CYDATA i;
 939:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 110


 4295              		.loc 1 939 0
 4296 000c 0023     		movs	r3, #0
 4297 000e BB73     		strb	r3, [r7, #14]
 940:..\src/command_processing.c ****     
 941:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 4298              		.loc 1 941 0
 4299 0010 0023     		movs	r3, #0
 4300 0012 FB73     		strb	r3, [r7, #15]
 4301 0014 09E0     		b	.L220
 4302              	.L221:
 942:..\src/command_processing.c ****        checksum ^= data_array[i];
 4303              		.loc 1 942 0 discriminator 3
 4304 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4305 0018 7A68     		ldr	r2, [r7, #4]
 4306 001a 1344     		add	r3, r3, r2
 4307 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4308 001e BB7B     		ldrb	r3, [r7, #14]
 4309 0020 5340     		eors	r3, r3, r2
 4310 0022 BB73     		strb	r3, [r7, #14]
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4311              		.loc 1 941 0 discriminator 3
 4312 0024 FB7B     		ldrb	r3, [r7, #15]
 4313 0026 0133     		adds	r3, r3, #1
 4314 0028 FB73     		strb	r3, [r7, #15]
 4315              	.L220:
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4316              		.loc 1 941 0 is_stmt 0 discriminator 1
 4317 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4318 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4319 002e 9A42     		cmp	r2, r3
 4320 0030 F1D3     		bcc	.L221
 943:..\src/command_processing.c ****   
 944:..\src/command_processing.c ****     return checksum;
 4321              		.loc 1 944 0 is_stmt 1
 4322 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 945:..\src/command_processing.c **** }
 4323              		.loc 1 945 0
 4324 0034 1846     		mov	r0, r3
 4325 0036 1437     		adds	r7, r7, #20
 4326              		.cfi_def_cfa_offset 4
 4327 0038 BD46     		mov	sp, r7
 4328              		.cfi_def_cfa_register 13
 4329              		@ sp needed
 4330 003a 80BC     		pop	{r7}
 4331              		.cfi_restore 7
 4332              		.cfi_def_cfa_offset 0
 4333 003c 7047     		bx	lr
 4334              		.cfi_endproc
 4335              	.LFE85:
 4336              		.size	LCRChecksum, .-LCRChecksum
 4337 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 4338              		.align	2
 4339              		.global	sendAcknowledgment
 4340              		.thumb
 4341              		.thumb_func
 4342              		.type	sendAcknowledgment, %function
 4343              	sendAcknowledgment:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 111


 4344              	.LFB86:
 946:..\src/command_processing.c **** 
 947:..\src/command_processing.c **** 
 948:..\src/command_processing.c **** //==============================================================================
 949:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 950:..\src/command_processing.c **** //==============================================================================
 951:..\src/command_processing.c **** 
 952:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 4345              		.loc 1 952 0
 4346              		.cfi_startproc
 4347              		@ args = 0, pretend = 0, frame = 16
 4348              		@ frame_needed = 1, uses_anonymous_args = 0
 4349 0000 80B5     		push	{r7, lr}
 4350              		.cfi_def_cfa_offset 8
 4351              		.cfi_offset 7, -8
 4352              		.cfi_offset 14, -4
 4353 0002 84B0     		sub	sp, sp, #16
 4354              		.cfi_def_cfa_offset 24
 4355 0004 00AF     		add	r7, sp, #0
 4356              		.cfi_def_cfa_register 7
 4357 0006 0346     		mov	r3, r0
 4358 0008 FB71     		strb	r3, [r7, #7]
 953:..\src/command_processing.c ****     int packet_length = 2;
 4359              		.loc 1 953 0
 4360 000a 0223     		movs	r3, #2
 4361 000c FB60     		str	r3, [r7, #12]
 954:..\src/command_processing.c ****     uint8 packet_data[2];
 955:..\src/command_processing.c **** 
 956:..\src/command_processing.c ****     packet_data[0] = value;
 4362              		.loc 1 956 0
 4363 000e FB79     		ldrb	r3, [r7, #7]
 4364 0010 3B72     		strb	r3, [r7, #8]
 957:..\src/command_processing.c ****     packet_data[1] = value;
 4365              		.loc 1 957 0
 4366 0012 FB79     		ldrb	r3, [r7, #7]
 4367 0014 7B72     		strb	r3, [r7, #9]
 958:..\src/command_processing.c **** 
 959:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 4368              		.loc 1 959 0
 4369 0016 FB68     		ldr	r3, [r7, #12]
 4370 0018 9AB2     		uxth	r2, r3
 4371 001a 07F10803 		add	r3, r7, #8
 4372 001e 1146     		mov	r1, r2
 4373 0020 1846     		mov	r0, r3
 4374 0022 FFF7FEFF 		bl	commWrite
 960:..\src/command_processing.c **** }
 4375              		.loc 1 960 0
 4376 0026 00BF     		nop
 4377 0028 1037     		adds	r7, r7, #16
 4378              		.cfi_def_cfa_offset 8
 4379 002a BD46     		mov	sp, r7
 4380              		.cfi_def_cfa_register 13
 4381              		@ sp needed
 4382 002c 80BD     		pop	{r7, pc}
 4383              		.cfi_endproc
 4384              	.LFE86:
 4385              		.size	sendAcknowledgment, .-sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 112


 4386 002e 00BF     		.section	.text.memStore,"ax",%progbits
 4387              		.align	2
 4388              		.global	memStore
 4389              		.thumb
 4390              		.thumb_func
 4391              		.type	memStore, %function
 4392              	memStore:
 4393              	.LFB87:
 961:..\src/command_processing.c **** 
 962:..\src/command_processing.c **** //==============================================================================
 963:..\src/command_processing.c **** //                                                                  STORE MEMORY
 964:..\src/command_processing.c **** //==============================================================================
 965:..\src/command_processing.c **** 
 966:..\src/command_processing.c **** 
 967:..\src/command_processing.c **** uint8 memStore(int displacement)
 968:..\src/command_processing.c **** {
 4394              		.loc 1 968 0
 4395              		.cfi_startproc
 4396              		@ args = 0, pretend = 0, frame = 24
 4397              		@ frame_needed = 1, uses_anonymous_args = 0
 4398 0000 80B5     		push	{r7, lr}
 4399              		.cfi_def_cfa_offset 8
 4400              		.cfi_offset 7, -8
 4401              		.cfi_offset 14, -4
 4402 0002 86B0     		sub	sp, sp, #24
 4403              		.cfi_def_cfa_offset 32
 4404 0004 00AF     		add	r7, sp, #0
 4405              		.cfi_def_cfa_register 7
 4406 0006 7860     		str	r0, [r7, #4]
 969:..\src/command_processing.c ****     int i;  // iterator
 970:..\src/command_processing.c ****     uint8 writeStatus;
 971:..\src/command_processing.c ****     int pages;
 972:..\src/command_processing.c ****     uint8 ret_val = 1;
 4407              		.loc 1 972 0
 4408 0008 0123     		movs	r3, #1
 4409 000a FB74     		strb	r3, [r7, #19]
 973:..\src/command_processing.c **** 
 974:..\src/command_processing.c ****     // Disable Interrupt
 975:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 4410              		.loc 1 975 0
 4411 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 976:..\src/command_processing.c **** 
 977:..\src/command_processing.c ****     // Stop motor
 978:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 979:..\src/command_processing.c **** 
 980:..\src/command_processing.c ****     // Update temperature information for better writing performance
 981:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 4412              		.loc 1 981 0
 4413 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 982:..\src/command_processing.c **** 
 983:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 4414              		.loc 1 983 0
 4415 0014 1C4A     		ldr	r2, .L230
 4416 0016 1D4B     		ldr	r3, .L230+4
 4417 0018 1046     		mov	r0, r2
 4418 001a 1946     		mov	r1, r3
 4419 001c 6023     		movs	r3, #96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 113


 4420 001e 1A46     		mov	r2, r3
 4421 0020 FFF7FEFF 		bl	memcpy
 984:..\src/command_processing.c **** 
 985:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 4422              		.loc 1 985 0
 4423 0024 0623     		movs	r3, #6
 4424 0026 FB60     		str	r3, [r7, #12]
 986:..\src/command_processing.c **** 
 987:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 4425              		.loc 1 987 0
 4426 0028 0023     		movs	r3, #0
 4427 002a 7B61     		str	r3, [r7, #20]
 4428 002c 18E0     		b	.L225
 4429              	.L228:
 988:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4430              		.loc 1 988 0
 4431 002e 7B69     		ldr	r3, [r7, #20]
 4432 0030 1B01     		lsls	r3, r3, #4
 4433 0032 1A46     		mov	r2, r3
 4434 0034 154B     		ldr	r3, .L230+4
 4435 0036 D018     		adds	r0, r2, r3
 4436 0038 7B69     		ldr	r3, [r7, #20]
 4437 003a DAB2     		uxtb	r2, r3
 4438 003c 7B68     		ldr	r3, [r7, #4]
 4439 003e DBB2     		uxtb	r3, r3
 4440 0040 1344     		add	r3, r3, r2
 4441 0042 DBB2     		uxtb	r3, r3
 4442 0044 1946     		mov	r1, r3
 4443 0046 FFF7FEFF 		bl	EEPROM_Write
 4444 004a 0346     		mov	r3, r0
 4445 004c FB72     		strb	r3, [r7, #11]
 989:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 4446              		.loc 1 989 0
 4447 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4448 0050 002B     		cmp	r3, #0
 4449 0052 02D0     		beq	.L226
 990:..\src/command_processing.c ****             ret_val = 0;
 4450              		.loc 1 990 0
 4451 0054 0023     		movs	r3, #0
 4452 0056 FB74     		strb	r3, [r7, #19]
 991:..\src/command_processing.c ****             break;
 4453              		.loc 1 991 0
 4454 0058 06E0     		b	.L227
 4455              	.L226:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4456              		.loc 1 987 0 discriminator 2
 4457 005a 7B69     		ldr	r3, [r7, #20]
 4458 005c 0133     		adds	r3, r3, #1
 4459 005e 7B61     		str	r3, [r7, #20]
 4460              	.L225:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4461              		.loc 1 987 0 is_stmt 0 discriminator 1
 4462 0060 7A69     		ldr	r2, [r7, #20]
 4463 0062 FB68     		ldr	r3, [r7, #12]
 4464 0064 9A42     		cmp	r2, r3
 4465 0066 E2DB     		blt	.L228
 4466              	.L227:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 114


 992:..\src/command_processing.c ****         }
 993:..\src/command_processing.c ****     }
 994:..\src/command_processing.c **** 
 995:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 4467              		.loc 1 995 0 is_stmt 1
 4468 0068 084A     		ldr	r2, .L230+4
 4469 006a 074B     		ldr	r3, .L230
 4470 006c 1046     		mov	r0, r2
 4471 006e 1946     		mov	r1, r3
 4472 0070 6023     		movs	r3, #96
 4473 0072 1A46     		mov	r2, r3
 4474 0074 FFF7FEFF 		bl	memcpy
 996:..\src/command_processing.c **** 
 997:..\src/command_processing.c ****     // Re-Enable Interrupt
 998:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 4475              		.loc 1 998 0
 4476 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 999:..\src/command_processing.c **** 
1000:..\src/command_processing.c ****     return ret_val;
 4477              		.loc 1 1000 0
 4478 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1001:..\src/command_processing.c **** }
 4479              		.loc 1 1001 0
 4480 007e 1846     		mov	r0, r3
 4481 0080 1837     		adds	r7, r7, #24
 4482              		.cfi_def_cfa_offset 8
 4483 0082 BD46     		mov	sp, r7
 4484              		.cfi_def_cfa_register 13
 4485              		@ sp needed
 4486 0084 80BD     		pop	{r7, pc}
 4487              	.L231:
 4488 0086 00BF     		.align	2
 4489              	.L230:
 4490 0088 00000000 		.word	c_mem
 4491 008c 00000000 		.word	g_mem
 4492              		.cfi_endproc
 4493              	.LFE87:
 4494              		.size	memStore, .-memStore
 4495              		.section	.text.memRecall,"ax",%progbits
 4496              		.align	2
 4497              		.global	memRecall
 4498              		.thumb
 4499              		.thumb_func
 4500              		.type	memRecall, %function
 4501              	memRecall:
 4502              	.LFB88:
1002:..\src/command_processing.c **** 
1003:..\src/command_processing.c **** 
1004:..\src/command_processing.c **** //==============================================================================
1005:..\src/command_processing.c **** //                                                                 RECALL MEMORY
1006:..\src/command_processing.c **** //==============================================================================
1007:..\src/command_processing.c **** 
1008:..\src/command_processing.c **** 
1009:..\src/command_processing.c **** void memRecall(void)
1010:..\src/command_processing.c **** {  
 4503              		.loc 1 1010 0
 4504              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 115


 4505              		@ args = 0, pretend = 0, frame = 8
 4506              		@ frame_needed = 1, uses_anonymous_args = 0
 4507 0000 80B5     		push	{r7, lr}
 4508              		.cfi_def_cfa_offset 8
 4509              		.cfi_offset 7, -8
 4510              		.cfi_offset 14, -4
 4511 0002 82B0     		sub	sp, sp, #8
 4512              		.cfi_def_cfa_offset 16
 4513 0004 00AF     		add	r7, sp, #0
 4514              		.cfi_def_cfa_register 7
1011:..\src/command_processing.c ****     uint16 i;
1012:..\src/command_processing.c **** 
1013:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4515              		.loc 1 1013 0
 4516 0006 0023     		movs	r3, #0
 4517 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4518 000a 0CE0     		b	.L233
 4519              	.L234:
1014:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4520              		.loc 1 1014 0 discriminator 3
 4521 000c FB88     		ldrh	r3, [r7, #6]
 4522 000e 114A     		ldr	r2, .L238
 4523 0010 1344     		add	r3, r3, r2
 4524 0012 114A     		ldr	r2, .L238+4
 4525 0014 1168     		ldr	r1, [r2]
 4526 0016 FA88     		ldrh	r2, [r7, #6]
 4527 0018 0A44     		add	r2, r2, r1
 4528 001a 1278     		ldrb	r2, [r2]
 4529 001c D2B2     		uxtb	r2, r2
 4530 001e 1A70     		strb	r2, [r3]
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4531              		.loc 1 1013 0 discriminator 3
 4532 0020 FB88     		ldrh	r3, [r7, #6]
 4533 0022 0133     		adds	r3, r3, #1
 4534 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 4535              	.L233:
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4536              		.loc 1 1013 0 is_stmt 0 discriminator 1
 4537 0026 FB88     		ldrh	r3, [r7, #6]
 4538 0028 5F2B     		cmp	r3, #95
 4539 002a EFD9     		bls	.L234
1015:..\src/command_processing.c ****     }
1016:..\src/command_processing.c ****        //check for initialization
1017:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4540              		.loc 1 1017 0 is_stmt 1
 4541 002c 094B     		ldr	r3, .L238
 4542 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4543 0030 002B     		cmp	r3, #0
 4544 0032 02D1     		bne	.L235
1018:..\src/command_processing.c ****         memRestore();
 4545              		.loc 1 1018 0
 4546 0034 FFF7FEFF 		bl	memRestore
1019:..\src/command_processing.c ****     } else {
1020:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
1021:..\src/command_processing.c ****     }   
1022:..\src/command_processing.c **** }
 4547              		.loc 1 1022 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 116


 4548 0038 07E0     		b	.L237
 4549              	.L235:
1020:..\src/command_processing.c ****     }   
 4550              		.loc 1 1020 0
 4551 003a 084A     		ldr	r2, .L238+8
 4552 003c 054B     		ldr	r3, .L238
 4553 003e 1046     		mov	r0, r2
 4554 0040 1946     		mov	r1, r3
 4555 0042 6023     		movs	r3, #96
 4556 0044 1A46     		mov	r2, r3
 4557 0046 FFF7FEFF 		bl	memcpy
 4558              	.L237:
 4559              		.loc 1 1022 0
 4560 004a 00BF     		nop
 4561 004c 0837     		adds	r7, r7, #8
 4562              		.cfi_def_cfa_offset 8
 4563 004e BD46     		mov	sp, r7
 4564              		.cfi_def_cfa_register 13
 4565              		@ sp needed
 4566 0050 80BD     		pop	{r7, pc}
 4567              	.L239:
 4568 0052 00BF     		.align	2
 4569              	.L238:
 4570 0054 00000000 		.word	g_mem
 4571 0058 00000000 		.word	EEPROM_ADDR
 4572 005c 00000000 		.word	c_mem
 4573              		.cfi_endproc
 4574              	.LFE88:
 4575              		.size	memRecall, .-memRecall
 4576              		.section	.text.memRestore,"ax",%progbits
 4577              		.align	2
 4578              		.global	memRestore
 4579              		.thumb
 4580              		.thumb_func
 4581              		.type	memRestore, %function
 4582              	memRestore:
 4583              	.LFB89:
1023:..\src/command_processing.c **** 
1024:..\src/command_processing.c **** 
1025:..\src/command_processing.c **** //==============================================================================
1026:..\src/command_processing.c **** //                                                                RESTORE MEMORY
1027:..\src/command_processing.c **** //==============================================================================
1028:..\src/command_processing.c **** 
1029:..\src/command_processing.c **** 
1030:..\src/command_processing.c **** uint8 memRestore(void) {
 4584              		.loc 1 1030 0
 4585              		.cfi_startproc
 4586              		@ args = 0, pretend = 0, frame = 8
 4587              		@ frame_needed = 1, uses_anonymous_args = 0
 4588 0000 80B5     		push	{r7, lr}
 4589              		.cfi_def_cfa_offset 8
 4590              		.cfi_offset 7, -8
 4591              		.cfi_offset 14, -4
 4592 0002 82B0     		sub	sp, sp, #8
 4593              		.cfi_def_cfa_offset 16
 4594 0004 00AF     		add	r7, sp, #0
 4595              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 117


1031:..\src/command_processing.c ****     uint16 i;
1032:..\src/command_processing.c **** 
1033:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4596              		.loc 1 1033 0
 4597 0006 0023     		movs	r3, #0
 4598 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4599 000a 0EE0     		b	.L241
 4600              	.L242:
1034:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4601              		.loc 1 1034 0 discriminator 3
 4602 000c FB88     		ldrh	r3, [r7, #6]
 4603 000e 104A     		ldr	r2, .L245
 4604 0010 1344     		add	r3, r3, r2
 4605 0012 104A     		ldr	r2, .L245+4
 4606 0014 1168     		ldr	r1, [r2]
 4607 0016 FA88     		ldrh	r2, [r7, #6]
 4608 0018 02F54872 		add	r2, r2, #800
 4609 001c 0A44     		add	r2, r2, r1
 4610 001e 1278     		ldrb	r2, [r2]
 4611 0020 D2B2     		uxtb	r2, r2
 4612 0022 1A70     		strb	r2, [r3]
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4613              		.loc 1 1033 0 discriminator 3
 4614 0024 FB88     		ldrh	r3, [r7, #6]
 4615 0026 0133     		adds	r3, r3, #1
 4616 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 4617              	.L241:
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4618              		.loc 1 1033 0 is_stmt 0 discriminator 1
 4619 002a FB88     		ldrh	r3, [r7, #6]
 4620 002c 5F2B     		cmp	r3, #95
 4621 002e EDD9     		bls	.L242
1035:..\src/command_processing.c ****     }
1036:..\src/command_processing.c **** 
1037:..\src/command_processing.c ****     //check for initialization
1038:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4622              		.loc 1 1038 0 is_stmt 1
 4623 0030 074B     		ldr	r3, .L245
 4624 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4625 0034 002B     		cmp	r3, #0
 4626 0036 03D1     		bne	.L243
1039:..\src/command_processing.c ****         return memInit();
 4627              		.loc 1 1039 0
 4628 0038 FFF7FEFF 		bl	memInit
 4629 003c 0346     		mov	r3, r0
 4630 003e 03E0     		b	.L244
 4631              	.L243:
1040:..\src/command_processing.c ****     } else {
1041:..\src/command_processing.c ****         return memStore(0);
 4632              		.loc 1 1041 0
 4633 0040 0020     		movs	r0, #0
 4634 0042 FFF7FEFF 		bl	memStore
 4635 0046 0346     		mov	r3, r0
 4636              	.L244:
1042:..\src/command_processing.c ****     }  
1043:..\src/command_processing.c **** }
 4637              		.loc 1 1043 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 118


 4638 0048 1846     		mov	r0, r3
 4639 004a 0837     		adds	r7, r7, #8
 4640              		.cfi_def_cfa_offset 8
 4641 004c BD46     		mov	sp, r7
 4642              		.cfi_def_cfa_register 13
 4643              		@ sp needed
 4644 004e 80BD     		pop	{r7, pc}
 4645              	.L246:
 4646              		.align	2
 4647              	.L245:
 4648 0050 00000000 		.word	g_mem
 4649 0054 00000000 		.word	EEPROM_ADDR
 4650              		.cfi_endproc
 4651              	.LFE89:
 4652              		.size	memRestore, .-memRestore
 4653              		.section	.text.memInit,"ax",%progbits
 4654              		.align	2
 4655              		.global	memInit
 4656              		.thumb
 4657              		.thumb_func
 4658              		.type	memInit, %function
 4659              	memInit:
 4660              	.LFB90:
1044:..\src/command_processing.c **** 
1045:..\src/command_processing.c **** //==============================================================================
1046:..\src/command_processing.c **** //                                                                   MEMORY INIT
1047:..\src/command_processing.c **** //==============================================================================
1048:..\src/command_processing.c **** 
1049:..\src/command_processing.c **** uint8 memInit(void)
1050:..\src/command_processing.c **** {
 4661              		.loc 1 1050 0
 4662              		.cfi_startproc
 4663              		@ args = 0, pretend = 0, frame = 0
 4664              		@ frame_needed = 1, uses_anonymous_args = 0
 4665 0000 80B5     		push	{r7, lr}
 4666              		.cfi_def_cfa_offset 8
 4667              		.cfi_offset 7, -8
 4668              		.cfi_offset 14, -4
 4669 0002 00AF     		add	r7, sp, #0
 4670              		.cfi_def_cfa_register 7
1051:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1052:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4671              		.loc 1 1052 0
 4672 0004 2F4B     		ldr	r3, .L251
 4673 0006 0122     		movs	r2, #1
 4674 0008 1A70     		strb	r2, [r3]
1053:..\src/command_processing.c ****     
1054:..\src/command_processing.c ****     // DEV STRUCT
1055:..\src/command_processing.c ****     g_mem.dev.id = 2;
 4675              		.loc 1 1055 0
 4676 000a 2E4B     		ldr	r3, .L251
 4677 000c 0222     		movs	r2, #2
 4678 000e 1A74     		strb	r2, [r3, #16]
1056:..\src/command_processing.c ****     
1057:..\src/command_processing.c ****     // SH STRUCT
1058:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 4679              		.loc 1 1058 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 119


 4680 0010 2C4B     		ldr	r3, .L251
 4681 0012 0022     		movs	r2, #0
 4682 0014 1A62     		str	r2, [r3, #32]
1059:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 4683              		.loc 1 1059 0
 4684 0016 2B4B     		ldr	r3, .L251
 4685 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 4686 001c 1A46     		mov	r2, r3
 4687 001e 4FF47A53 		mov	r3, #16000
 4688 0022 9340     		lsls	r3, r3, r2
 4689 0024 274A     		ldr	r2, .L251
 4690 0026 5362     		str	r3, [r2, #36]
1060:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 4691              		.loc 1 1060 0
 4692 0028 264B     		ldr	r3, .L251
 4693 002a 0422     		movs	r2, #4
 4694 002c 83F82820 		strb	r2, [r3, #40]
1061:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 4695              		.loc 1 1061 0
 4696 0030 244B     		ldr	r3, .L251
 4697 0032 0322     		movs	r2, #3
 4698 0034 83F82920 		strb	r2, [r3, #41]
1062:..\src/command_processing.c **** 
1063:..\src/command_processing.c ****     // EMG STRUCT     
1064:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4699              		.loc 1 1064 0
 4700 0038 224B     		ldr	r3, .L251
 4701 003a C822     		movs	r2, #200
 4702 003c 1A86     		strh	r2, [r3, #48]	@ movhi
1065:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4703              		.loc 1 1065 0
 4704 003e 214B     		ldr	r3, .L251
 4705 0040 C822     		movs	r2, #200
 4706 0042 5A86     		strh	r2, [r3, #50]	@ movhi
1066:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4707              		.loc 1 1066 0
 4708 0044 1F4B     		ldr	r3, .L251
 4709 0046 4FF48062 		mov	r2, #1024
 4710 004a 5A63     		str	r2, [r3, #52]
1067:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4711              		.loc 1 1067 0
 4712 004c 1D4B     		ldr	r3, .L251
 4713 004e 4FF48062 		mov	r2, #1024
 4714 0052 9A63     		str	r2, [r3, #56]
1068:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4715              		.loc 1 1068 0
 4716 0054 1B4B     		ldr	r3, .L251
 4717 0056 6422     		movs	r2, #100
 4718 0058 83F83C20 		strb	r2, [r3, #60]
1069:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4719              		.loc 1 1069 0
 4720 005c 194B     		ldr	r3, .L251
 4721 005e 6422     		movs	r2, #100
 4722 0060 83F83D20 		strb	r2, [r3, #61]
1070:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4723              		.loc 1 1070 0
 4724 0064 174B     		ldr	r3, .L251
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 120


 4725 0066 0022     		movs	r2, #0
 4726 0068 83F83E20 		strb	r2, [r3, #62]
1071:..\src/command_processing.c ****     
1072:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
1073:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4727              		.loc 1 1073 0
 4728 006c 154B     		ldr	r3, .L251
 4729 006e 0022     		movs	r2, #0
 4730 0070 83F84020 		strb	r2, [r3, #64]
1074:..\src/command_processing.c ****     
1075:..\src/command_processing.c ****     
1076:..\src/command_processing.c ****     //FEEDBACK STRUCT
1077:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4731              		.loc 1 1077 0
 4732 0074 134B     		ldr	r3, .L251
 4733 0076 4FF4E172 		mov	r2, #450
 4734 007a 1A65     		str	r2, [r3, #80]
1078:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4735              		.loc 1 1078 0
 4736 007c 114B     		ldr	r3, .L251
 4737 007e 124A     		ldr	r2, .L251+4
 4738 0080 5A65     		str	r2, [r3, #84]	@ float
1079:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 4739              		.loc 1 1079 0
 4740 0082 104B     		ldr	r3, .L251
 4741 0084 4FF07E52 		mov	r2, #1065353216
 4742 0088 9A65     		str	r2, [r3, #88]	@ float
1080:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 4743              		.loc 1 1080 0
 4744 008a 0E4B     		ldr	r3, .L251
 4745 008c 0022     		movs	r2, #0
 4746 008e 83F85C20 		strb	r2, [r3, #92]
1081:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 4747              		.loc 1 1081 0
 4748 0092 0C4B     		ldr	r3, .L251
 4749 0094 0022     		movs	r2, #0
 4750 0096 83F85D20 		strb	r2, [r3, #93]
1082:..\src/command_processing.c ****     
1083:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1084:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4751              		.loc 1 1084 0
 4752 009a 0A4B     		ldr	r3, .L251
 4753 009c 0122     		movs	r2, #1
 4754 009e 1A70     		strb	r2, [r3]
1085:..\src/command_processing.c ****     
1086:..\src/command_processing.c ****     //write that configuration to EEPROM
1087:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 4755              		.loc 1 1087 0
 4756 00a0 0020     		movs	r0, #0
 4757 00a2 FFF7FEFF 		bl	memStore
 4758 00a6 0346     		mov	r3, r0
 4759 00a8 002B     		cmp	r3, #0
 4760 00aa 07D0     		beq	.L248
 4761              		.loc 1 1087 0 is_stmt 0 discriminator 1
 4762 00ac 3220     		movs	r0, #50
 4763 00ae FFF7FEFF 		bl	memStore
 4764 00b2 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 121


 4765 00b4 002B     		cmp	r3, #0
 4766 00b6 01D0     		beq	.L248
 4767              		.loc 1 1087 0 discriminator 3
 4768 00b8 0123     		movs	r3, #1
 4769 00ba 00E0     		b	.L249
 4770              	.L248:
 4771              		.loc 1 1087 0 discriminator 4
 4772 00bc 0023     		movs	r3, #0
 4773              	.L249:
 4774              		.loc 1 1087 0 discriminator 6
 4775 00be DBB2     		uxtb	r3, r3
 4776 00c0 1846     		mov	r0, r3
 4777 00c2 80BD     		pop	{r7, pc}
 4778              	.L252:
 4779              		.align	2
 4780              	.L251:
 4781 00c4 00000000 		.word	g_mem
 4782 00c8 0000C841 		.word	1103626240
 4783              		.cfi_endproc
 4784              	.LFE90:
 4785              		.size	memInit, .-memInit
 4786              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 4787              		.align	2
 4788              		.global	memInit_SoftHandPro
 4789              		.thumb
 4790              		.thumb_func
 4791              		.type	memInit_SoftHandPro, %function
 4792              	memInit_SoftHandPro:
 4793              	.LFB91:
1088:..\src/command_processing.c **** 
1089:..\src/command_processing.c **** //==============================================================================
1090:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
1091:..\src/command_processing.c **** //==============================================================================
1092:..\src/command_processing.c **** void memInit_SoftHandPro(void)
1093:..\src/command_processing.c **** {
 4794              		.loc 1 1093 0 is_stmt 1
 4795              		.cfi_startproc
 4796              		@ args = 0, pretend = 0, frame = 0
 4797              		@ frame_needed = 1, uses_anonymous_args = 0
 4798              		@ link register save eliminated.
 4799 0000 80B4     		push	{r7}
 4800              		.cfi_def_cfa_offset 4
 4801              		.cfi_offset 7, -4
 4802 0002 00AF     		add	r7, sp, #0
 4803              		.cfi_def_cfa_register 7
1094:..\src/command_processing.c **** }
 4804              		.loc 1 1094 0
 4805 0004 00BF     		nop
 4806 0006 BD46     		mov	sp, r7
 4807              		.cfi_def_cfa_register 13
 4808              		@ sp needed
 4809 0008 80BC     		pop	{r7}
 4810              		.cfi_restore 7
 4811              		.cfi_def_cfa_offset 0
 4812 000a 7047     		bx	lr
 4813              		.cfi_endproc
 4814              	.LFE91:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 122


 4815              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 4816              		.section	.text.memInit_Master,"ax",%progbits
 4817              		.align	2
 4818              		.global	memInit_Master
 4819              		.thumb
 4820              		.thumb_func
 4821              		.type	memInit_Master, %function
 4822              	memInit_Master:
 4823              	.LFB92:
1095:..\src/command_processing.c **** 
1096:..\src/command_processing.c **** //==============================================================================
1097:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
1098:..\src/command_processing.c **** //==============================================================================
1099:..\src/command_processing.c **** void memInit_Master(void)
1100:..\src/command_processing.c **** {
 4824              		.loc 1 1100 0
 4825              		.cfi_startproc
 4826              		@ args = 0, pretend = 0, frame = 0
 4827              		@ frame_needed = 1, uses_anonymous_args = 0
 4828              		@ link register save eliminated.
 4829 0000 80B4     		push	{r7}
 4830              		.cfi_def_cfa_offset 4
 4831              		.cfi_offset 7, -4
 4832 0002 00AF     		add	r7, sp, #0
 4833              		.cfi_def_cfa_register 7
1101:..\src/command_processing.c **** }
 4834              		.loc 1 1101 0
 4835 0004 00BF     		nop
 4836 0006 BD46     		mov	sp, r7
 4837              		.cfi_def_cfa_register 13
 4838              		@ sp needed
 4839 0008 80BC     		pop	{r7}
 4840              		.cfi_restore 7
 4841              		.cfi_def_cfa_offset 0
 4842 000a 7047     		bx	lr
 4843              		.cfi_endproc
 4844              	.LFE92:
 4845              		.size	memInit_Master, .-memInit_Master
 4846              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 4847              		.align	2
 4848              		.global	memInit_AirChambers_Vibrotactile_Fb
 4849              		.thumb
 4850              		.thumb_func
 4851              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 4852              	memInit_AirChambers_Vibrotactile_Fb:
 4853              	.LFB93:
1102:..\src/command_processing.c **** 
1103:..\src/command_processing.c **** //==============================================================================
1104:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
1105:..\src/command_processing.c **** //==============================================================================
1106:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
1107:..\src/command_processing.c **** {
 4854              		.loc 1 1107 0
 4855              		.cfi_startproc
 4856              		@ args = 0, pretend = 0, frame = 0
 4857              		@ frame_needed = 1, uses_anonymous_args = 0
 4858              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 123


 4859 0000 80B4     		push	{r7}
 4860              		.cfi_def_cfa_offset 4
 4861              		.cfi_offset 7, -4
 4862 0002 00AF     		add	r7, sp, #0
 4863              		.cfi_def_cfa_register 7
1108:..\src/command_processing.c **** }
 4864              		.loc 1 1108 0
 4865 0004 00BF     		nop
 4866 0006 BD46     		mov	sp, r7
 4867              		.cfi_def_cfa_register 13
 4868              		@ sp needed
 4869 0008 80BC     		pop	{r7}
 4870              		.cfi_restore 7
 4871              		.cfi_def_cfa_offset 0
 4872 000a 7047     		bx	lr
 4873              		.cfi_endproc
 4874              	.LFE93:
 4875              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 4876              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 4877              		.align	2
 4878              		.global	memInit_OtbkActWristMs
 4879              		.thumb
 4880              		.thumb_func
 4881              		.type	memInit_OtbkActWristMs, %function
 4882              	memInit_OtbkActWristMs:
 4883              	.LFB94:
1109:..\src/command_processing.c **** 
1110:..\src/command_processing.c **** //==============================================================================
1111:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
1112:..\src/command_processing.c **** //==============================================================================
1113:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
1114:..\src/command_processing.c **** {
 4884              		.loc 1 1114 0
 4885              		.cfi_startproc
 4886              		@ args = 0, pretend = 0, frame = 0
 4887              		@ frame_needed = 1, uses_anonymous_args = 0
 4888              		@ link register save eliminated.
 4889 0000 80B4     		push	{r7}
 4890              		.cfi_def_cfa_offset 4
 4891              		.cfi_offset 7, -4
 4892 0002 00AF     		add	r7, sp, #0
 4893              		.cfi_def_cfa_register 7
1115:..\src/command_processing.c **** }
 4894              		.loc 1 1115 0
 4895 0004 00BF     		nop
 4896 0006 BD46     		mov	sp, r7
 4897              		.cfi_def_cfa_register 13
 4898              		@ sp needed
 4899 0008 80BC     		pop	{r7}
 4900              		.cfi_restore 7
 4901              		.cfi_def_cfa_offset 0
 4902 000a 7047     		bx	lr
 4903              		.cfi_endproc
 4904              	.LFE94:
 4905              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 4906              		.section	.text.cmd_get_measurements,"ax",%progbits
 4907              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 124


 4908              		.global	cmd_get_measurements
 4909              		.thumb
 4910              		.thumb_func
 4911              		.type	cmd_get_measurements, %function
 4912              	cmd_get_measurements:
 4913              	.LFB95:
1116:..\src/command_processing.c **** 
1117:..\src/command_processing.c **** //==============================================================================
1118:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
1119:..\src/command_processing.c **** //==============================================================================
1120:..\src/command_processing.c **** /**
1121:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1122:..\src/command_processing.c **** **/
1123:..\src/command_processing.c **** 
1124:..\src/command_processing.c **** void cmd_get_measurements(){
 4914              		.loc 1 1124 0
 4915              		.cfi_startproc
 4916              		@ args = 0, pretend = 0, frame = 0
 4917              		@ frame_needed = 1, uses_anonymous_args = 0
 4918              		@ link register save eliminated.
 4919 0000 80B4     		push	{r7}
 4920              		.cfi_def_cfa_offset 4
 4921              		.cfi_offset 7, -4
 4922 0002 00AF     		add	r7, sp, #0
 4923              		.cfi_def_cfa_register 7
1125:..\src/command_processing.c ****  
1126:..\src/command_processing.c ****    
1127:..\src/command_processing.c **** }
 4924              		.loc 1 1127 0
 4925 0004 00BF     		nop
 4926 0006 BD46     		mov	sp, r7
 4927              		.cfi_def_cfa_register 13
 4928              		@ sp needed
 4929 0008 80BC     		pop	{r7}
 4930              		.cfi_restore 7
 4931              		.cfi_def_cfa_offset 0
 4932 000a 7047     		bx	lr
 4933              		.cfi_endproc
 4934              	.LFE95:
 4935              		.size	cmd_get_measurements, .-cmd_get_measurements
 4936              		.section	.text.cmd_get_velocities,"ax",%progbits
 4937              		.align	2
 4938              		.global	cmd_get_velocities
 4939              		.thumb
 4940              		.thumb_func
 4941              		.type	cmd_get_velocities, %function
 4942              	cmd_get_velocities:
 4943              	.LFB96:
1128:..\src/command_processing.c **** 
1129:..\src/command_processing.c **** void cmd_get_velocities(){
 4944              		.loc 1 1129 0
 4945              		.cfi_startproc
 4946              		@ args = 0, pretend = 0, frame = 0
 4947              		@ frame_needed = 1, uses_anonymous_args = 0
 4948              		@ link register save eliminated.
 4949 0000 80B4     		push	{r7}
 4950              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 125


 4951              		.cfi_offset 7, -4
 4952 0002 00AF     		add	r7, sp, #0
 4953              		.cfi_def_cfa_register 7
1130:..\src/command_processing.c ****  
1131:..\src/command_processing.c **** }
 4954              		.loc 1 1131 0
 4955 0004 00BF     		nop
 4956 0006 BD46     		mov	sp, r7
 4957              		.cfi_def_cfa_register 13
 4958              		@ sp needed
 4959 0008 80BC     		pop	{r7}
 4960              		.cfi_restore 7
 4961              		.cfi_def_cfa_offset 0
 4962 000a 7047     		bx	lr
 4963              		.cfi_endproc
 4964              	.LFE96:
 4965              		.size	cmd_get_velocities, .-cmd_get_velocities
 4966              		.section	.text.cmd_get_accelerations,"ax",%progbits
 4967              		.align	2
 4968              		.global	cmd_get_accelerations
 4969              		.thumb
 4970              		.thumb_func
 4971              		.type	cmd_get_accelerations, %function
 4972              	cmd_get_accelerations:
 4973              	.LFB97:
1132:..\src/command_processing.c **** 
1133:..\src/command_processing.c **** void cmd_get_accelerations(){
 4974              		.loc 1 1133 0
 4975              		.cfi_startproc
 4976              		@ args = 0, pretend = 0, frame = 0
 4977              		@ frame_needed = 1, uses_anonymous_args = 0
 4978              		@ link register save eliminated.
 4979 0000 80B4     		push	{r7}
 4980              		.cfi_def_cfa_offset 4
 4981              		.cfi_offset 7, -4
 4982 0002 00AF     		add	r7, sp, #0
 4983              		.cfi_def_cfa_register 7
1134:..\src/command_processing.c ****  
1135:..\src/command_processing.c **** }
 4984              		.loc 1 1135 0
 4985 0004 00BF     		nop
 4986 0006 BD46     		mov	sp, r7
 4987              		.cfi_def_cfa_register 13
 4988              		@ sp needed
 4989 0008 80BC     		pop	{r7}
 4990              		.cfi_restore 7
 4991              		.cfi_def_cfa_offset 0
 4992 000a 7047     		bx	lr
 4993              		.cfi_endproc
 4994              	.LFE97:
 4995              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 4996              		.section	.text.cmd_get_joystick,"ax",%progbits
 4997              		.align	2
 4998              		.global	cmd_get_joystick
 4999              		.thumb
 5000              		.thumb_func
 5001              		.type	cmd_get_joystick, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 126


 5002              	cmd_get_joystick:
 5003              	.LFB98:
1136:..\src/command_processing.c **** 
1137:..\src/command_processing.c **** void cmd_get_joystick() {
 5004              		.loc 1 1137 0
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 0
 5007              		@ frame_needed = 1, uses_anonymous_args = 0
 5008              		@ link register save eliminated.
 5009 0000 80B4     		push	{r7}
 5010              		.cfi_def_cfa_offset 4
 5011              		.cfi_offset 7, -4
 5012 0002 00AF     		add	r7, sp, #0
 5013              		.cfi_def_cfa_register 7
1138:..\src/command_processing.c ****  
1139:..\src/command_processing.c **** }
 5014              		.loc 1 1139 0
 5015 0004 00BF     		nop
 5016 0006 BD46     		mov	sp, r7
 5017              		.cfi_def_cfa_register 13
 5018              		@ sp needed
 5019 0008 80BC     		pop	{r7}
 5020              		.cfi_restore 7
 5021              		.cfi_def_cfa_offset 0
 5022 000a 7047     		bx	lr
 5023              		.cfi_endproc
 5024              	.LFE98:
 5025              		.size	cmd_get_joystick, .-cmd_get_joystick
 5026              		.section	.text.cmd_set_inputs,"ax",%progbits
 5027              		.align	2
 5028              		.global	cmd_set_inputs
 5029              		.thumb
 5030              		.thumb_func
 5031              		.type	cmd_set_inputs, %function
 5032              	cmd_set_inputs:
 5033              	.LFB99:
1140:..\src/command_processing.c **** 
1141:..\src/command_processing.c **** void cmd_set_inputs(){
 5034              		.loc 1 1141 0
 5035              		.cfi_startproc
 5036              		@ args = 0, pretend = 0, frame = 8
 5037              		@ frame_needed = 1, uses_anonymous_args = 0
 5038              		@ link register save eliminated.
 5039 0000 80B4     		push	{r7}
 5040              		.cfi_def_cfa_offset 4
 5041              		.cfi_offset 7, -4
 5042 0002 83B0     		sub	sp, sp, #12
 5043              		.cfi_def_cfa_offset 16
 5044 0004 00AF     		add	r7, sp, #0
 5045              		.cfi_def_cfa_register 7
1142:..\src/command_processing.c ****      // Store position setted in right variables
1143:..\src/command_processing.c ****     int16 aux_int16[3];
1144:..\src/command_processing.c ****     static int16 last_aux_int16[3];
1145:..\src/command_processing.c ****     
1146:..\src/command_processing.c ****     aux_int16[0] = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 5046              		.loc 1 1146 0
 5047 0006 294B     		ldr	r3, .L268
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 127


 5048 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5049 000a 1B02     		lsls	r3, r3, #8
 5050 000c 1AB2     		sxth	r2, r3
 5051 000e 274B     		ldr	r3, .L268
 5052 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5053 0012 1BB2     		sxth	r3, r3
 5054 0014 1343     		orrs	r3, r3, r2
 5055 0016 1BB2     		sxth	r3, r3
 5056 0018 3B80     		strh	r3, [r7]	@ movhi
1147:..\src/command_processing.c ****     aux_int16[1] = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 5057              		.loc 1 1147 0
 5058 001a 244B     		ldr	r3, .L268
 5059 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5060 001e 1B02     		lsls	r3, r3, #8
 5061 0020 1AB2     		sxth	r2, r3
 5062 0022 224B     		ldr	r3, .L268
 5063 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5064 0026 1BB2     		sxth	r3, r3
 5065 0028 1343     		orrs	r3, r3, r2
 5066 002a 1BB2     		sxth	r3, r3
 5067 002c 7B80     		strh	r3, [r7, #2]	@ movhi
1148:..\src/command_processing.c ****     aux_int16[2] = (int16)(g_rx.buffer[5]<<8 | g_rx.buffer[6]);
 5068              		.loc 1 1148 0
 5069 002e 1F4B     		ldr	r3, .L268
 5070 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 5071 0032 1B02     		lsls	r3, r3, #8
 5072 0034 1AB2     		sxth	r2, r3
 5073 0036 1D4B     		ldr	r3, .L268
 5074 0038 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5075 003a 1BB2     		sxth	r3, r3
 5076 003c 1343     		orrs	r3, r3, r2
 5077 003e 1BB2     		sxth	r3, r3
 5078 0040 BB80     		strh	r3, [r7, #4]	@ movhi
 5079              	.LBB28:
1149:..\src/command_processing.c ****     // Check if last command received was the same as this 
1150:..\src/command_processing.c ****     //(Note: last command not last motor reference in g_ref)
1151:..\src/command_processing.c ****     for (uint8 i = 0; i < 3; i++) {
 5080              		.loc 1 1151 0
 5081 0042 0023     		movs	r3, #0
 5082 0044 FB71     		strb	r3, [r7, #7]
 5083 0046 06E0     		b	.L262
 5084              	.L263:
1152:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
1153:..\src/command_processing.c ****             change_ext_ref_flag[i] = TRUE;
 5085              		.loc 1 1153 0 discriminator 3
 5086 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5087 004a 194A     		ldr	r2, .L268+4
 5088 004c 0121     		movs	r1, #1
 5089 004e D154     		strb	r1, [r2, r3]
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5090              		.loc 1 1151 0 discriminator 3
 5091 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5092 0052 0133     		adds	r3, r3, #1
 5093 0054 FB71     		strb	r3, [r7, #7]
 5094              	.L262:
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5095              		.loc 1 1151 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 128


 5096 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5097 0058 022B     		cmp	r3, #2
 5098 005a F5D9     		bls	.L263
 5099              	.LBE28:
1154:..\src/command_processing.c ****        }
1155:..\src/command_processing.c ****         // Update last command
1156:..\src/command_processing.c ****       // last_aux_int16[i] = aux_int16[i];
1157:..\src/command_processing.c ****     
1158:..\src/command_processing.c ****     
1159:..\src/command_processing.c ****     // Update g_refNew in case a new command has been received
1160:..\src/command_processing.c ****     if (change_ext_ref_flag[0]) {
 5100              		.loc 1 1160 0 is_stmt 1
 5101 005c 144B     		ldr	r3, .L268+4
 5102 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5103 0060 002B     		cmp	r3, #0
 5104 0062 0BD0     		beq	.L264
1161:..\src/command_processing.c ****         Pump_refNew = aux_int16[0];
 5105              		.loc 1 1161 0
 5106 0064 B7F90030 		ldrsh	r3, [r7]
 5107 0068 DAB2     		uxtb	r2, r3
 5108 006a 124B     		ldr	r3, .L268+8
 5109 006c 1A70     		strb	r2, [r3]
1162:..\src/command_processing.c ****                 
1163:..\src/command_processing.c ****         // Check if the reference is nor higher or lower than the position limits
1164:..\src/command_processing.c ****         if (Pump_refNew < 0)
1165:..\src/command_processing.c ****             Pump_refNew = 0;
1166:..\src/command_processing.c ****                 
1167:..\src/command_processing.c ****         if (Pump_refNew > 100)
 5110              		.loc 1 1167 0
 5111 006e 114B     		ldr	r3, .L268+8
 5112 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5113 0072 642B     		cmp	r3, #100
 5114 0074 02D9     		bls	.L264
1168:..\src/command_processing.c ****             Pump_refNew = 100;       
 5115              		.loc 1 1168 0
 5116 0076 0F4B     		ldr	r3, .L268+8
 5117 0078 6422     		movs	r2, #100
 5118 007a 1A70     		strb	r2, [r3]
 5119              	.L264:
1169:..\src/command_processing.c ****     }
1170:..\src/command_processing.c ****     
1171:..\src/command_processing.c ****     if (change_ext_ref_flag[1]) 
 5120              		.loc 1 1171 0
 5121 007c 0C4B     		ldr	r3, .L268+4
 5122 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5123 0080 002B     		cmp	r3, #0
 5124 0082 04D0     		beq	.L265
1172:..\src/command_processing.c ****         VT_refNew[0] = aux_int16[1];
 5125              		.loc 1 1172 0
 5126 0084 B7F90230 		ldrsh	r3, [r7, #2]
 5127 0088 DAB2     		uxtb	r2, r3
 5128 008a 0B4B     		ldr	r3, .L268+12
 5129 008c 1A70     		strb	r2, [r3]
 5130              	.L265:
1173:..\src/command_processing.c ****     
1174:..\src/command_processing.c ****     if (change_ext_ref_flag[2]) 
 5131              		.loc 1 1174 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 129


 5132 008e 084B     		ldr	r3, .L268+4
 5133 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5134 0092 002B     		cmp	r3, #0
 5135 0094 04D0     		beq	.L267
1175:..\src/command_processing.c ****         VT_refNew[1] = aux_int16[2];
 5136              		.loc 1 1175 0
 5137 0096 B7F90430 		ldrsh	r3, [r7, #4]
 5138 009a DAB2     		uxtb	r2, r3
 5139 009c 064B     		ldr	r3, .L268+12
 5140 009e 5A70     		strb	r2, [r3, #1]
 5141              	.L267:
1176:..\src/command_processing.c ****                 
1177:..\src/command_processing.c ****    }
 5142              		.loc 1 1177 0
 5143 00a0 00BF     		nop
 5144 00a2 0C37     		adds	r7, r7, #12
 5145              		.cfi_def_cfa_offset 4
 5146 00a4 BD46     		mov	sp, r7
 5147              		.cfi_def_cfa_register 13
 5148              		@ sp needed
 5149 00a6 80BC     		pop	{r7}
 5150              		.cfi_restore 7
 5151              		.cfi_def_cfa_offset 0
 5152 00a8 7047     		bx	lr
 5153              	.L269:
 5154 00aa 00BF     		.align	2
 5155              	.L268:
 5156 00ac 00000000 		.word	g_rx
 5157 00b0 00000000 		.word	change_ext_ref_flag
 5158 00b4 00000000 		.word	Pump_refNew
 5159 00b8 00000000 		.word	VT_refNew
 5160              		.cfi_endproc
 5161              	.LFE99:
 5162              		.size	cmd_set_inputs, .-cmd_set_inputs
 5163              		.section	.text.cmd_activate,"ax",%progbits
 5164              		.align	2
 5165              		.global	cmd_activate
 5166              		.thumb
 5167              		.thumb_func
 5168              		.type	cmd_activate, %function
 5169              	cmd_activate:
 5170              	.LFB100:
1178:..\src/command_processing.c **** 
1179:..\src/command_processing.c **** void cmd_activate(){
 5171              		.loc 1 1179 0
 5172              		.cfi_startproc
 5173              		@ args = 0, pretend = 0, frame = 8
 5174              		@ frame_needed = 1, uses_anonymous_args = 0
 5175 0000 80B5     		push	{r7, lr}
 5176              		.cfi_def_cfa_offset 8
 5177              		.cfi_offset 7, -8
 5178              		.cfi_offset 14, -4
 5179 0002 82B0     		sub	sp, sp, #8
 5180              		.cfi_def_cfa_offset 16
 5181 0004 00AF     		add	r7, sp, #0
 5182              		.cfi_def_cfa_register 7
1180:..\src/command_processing.c ****  uint8 aux = g_rx.buffer[1];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 130


 5183              		.loc 1 1180 0
 5184 0006 084B     		ldr	r3, .L271
 5185 0008 5B78     		ldrb	r3, [r3, #1]
 5186 000a FB71     		strb	r3, [r7, #7]
1181:..\src/command_processing.c ****  VALVE_Write((aux >> 1) & 0x01);
 5187              		.loc 1 1181 0
 5188 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5189 000e 5B08     		lsrs	r3, r3, #1
 5190 0010 DBB2     		uxtb	r3, r3
 5191 0012 03F00103 		and	r3, r3, #1
 5192 0016 DBB2     		uxtb	r3, r3
 5193 0018 1846     		mov	r0, r3
 5194 001a FFF7FEFF 		bl	VALVE_Write
1182:..\src/command_processing.c ****  
1183:..\src/command_processing.c **** }
 5195              		.loc 1 1183 0
 5196 001e 00BF     		nop
 5197 0020 0837     		adds	r7, r7, #8
 5198              		.cfi_def_cfa_offset 8
 5199 0022 BD46     		mov	sp, r7
 5200              		.cfi_def_cfa_register 13
 5201              		@ sp needed
 5202 0024 80BD     		pop	{r7, pc}
 5203              	.L272:
 5204 0026 00BF     		.align	2
 5205              	.L271:
 5206 0028 00000000 		.word	g_rx
 5207              		.cfi_endproc
 5208              	.LFE100:
 5209              		.size	cmd_activate, .-cmd_activate
 5210              		.section	.text.cmd_get_activate,"ax",%progbits
 5211              		.align	2
 5212              		.global	cmd_get_activate
 5213              		.thumb
 5214              		.thumb_func
 5215              		.type	cmd_get_activate, %function
 5216              	cmd_get_activate:
 5217              	.LFB101:
1184:..\src/command_processing.c **** 
1185:..\src/command_processing.c **** void cmd_get_activate(){
 5218              		.loc 1 1185 0
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 0
 5221              		@ frame_needed = 1, uses_anonymous_args = 0
 5222              		@ link register save eliminated.
 5223 0000 80B4     		push	{r7}
 5224              		.cfi_def_cfa_offset 4
 5225              		.cfi_offset 7, -4
 5226 0002 00AF     		add	r7, sp, #0
 5227              		.cfi_def_cfa_register 7
1186:..\src/command_processing.c ****     
1187:..\src/command_processing.c **** }
 5228              		.loc 1 1187 0
 5229 0004 00BF     		nop
 5230 0006 BD46     		mov	sp, r7
 5231              		.cfi_def_cfa_register 13
 5232              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 131


 5233 0008 80BC     		pop	{r7}
 5234              		.cfi_restore 7
 5235              		.cfi_def_cfa_offset 0
 5236 000a 7047     		bx	lr
 5237              		.cfi_endproc
 5238              	.LFE101:
 5239              		.size	cmd_get_activate, .-cmd_get_activate
 5240              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 5241              		.align	2
 5242              		.global	cmd_get_curr_and_meas
 5243              		.thumb
 5244              		.thumb_func
 5245              		.type	cmd_get_curr_and_meas, %function
 5246              	cmd_get_curr_and_meas:
 5247              	.LFB102:
1188:..\src/command_processing.c **** 
1189:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 5248              		.loc 1 1189 0
 5249              		.cfi_startproc
 5250              		@ args = 0, pretend = 0, frame = 0
 5251              		@ frame_needed = 1, uses_anonymous_args = 0
 5252              		@ link register save eliminated.
 5253 0000 80B4     		push	{r7}
 5254              		.cfi_def_cfa_offset 4
 5255              		.cfi_offset 7, -4
 5256 0002 00AF     		add	r7, sp, #0
 5257              		.cfi_def_cfa_register 7
1190:..\src/command_processing.c ****    
1191:..\src/command_processing.c ****    
1192:..\src/command_processing.c **** }
 5258              		.loc 1 1192 0
 5259 0004 00BF     		nop
 5260 0006 BD46     		mov	sp, r7
 5261              		.cfi_def_cfa_register 13
 5262              		@ sp needed
 5263 0008 80BC     		pop	{r7}
 5264              		.cfi_restore 7
 5265              		.cfi_def_cfa_offset 0
 5266 000a 7047     		bx	lr
 5267              		.cfi_endproc
 5268              	.LFE102:
 5269              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 5270              		.section	.text.cmd_get_currents,"ax",%progbits
 5271              		.align	2
 5272              		.global	cmd_get_currents
 5273              		.thumb
 5274              		.thumb_func
 5275              		.type	cmd_get_currents, %function
 5276              	cmd_get_currents:
 5277              	.LFB103:
1193:..\src/command_processing.c **** 
1194:..\src/command_processing.c **** void cmd_get_currents(){
 5278              		.loc 1 1194 0
 5279              		.cfi_startproc
 5280              		@ args = 0, pretend = 0, frame = 16
 5281              		@ frame_needed = 1, uses_anonymous_args = 0
 5282 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 132


 5283              		.cfi_def_cfa_offset 8
 5284              		.cfi_offset 7, -8
 5285              		.cfi_offset 14, -4
 5286 0002 84B0     		sub	sp, sp, #16
 5287              		.cfi_def_cfa_offset 24
 5288 0004 00AF     		add	r7, sp, #0
 5289              		.cfi_def_cfa_register 7
1195:..\src/command_processing.c ****    
1196:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
1197:..\src/command_processing.c ****     
1198:..\src/command_processing.c ****     uint8 packet_data[6]; 
1199:..\src/command_processing.c ****     int16 aux_int16;
1200:..\src/command_processing.c ****     
1201:..\src/command_processing.c ****     //Header package
1202:..\src/command_processing.c **** 
1203:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
 5290              		.loc 1 1203 0
 5291 0006 8523     		movs	r3, #133
 5292 0008 3B72     		strb	r3, [r7, #8]
1204:..\src/command_processing.c **** 
1205:..\src/command_processing.c ****      // Send pressure times 100 here instead of current (Simulink use)
1206:..\src/command_processing.c ****     aux_int16 = (int16)(pressure_value * 1000); //Pressure
 5293              		.loc 1 1206 0
 5294 000a 1B4B     		ldr	r3, .L277
 5295 000c 1B68     		ldr	r3, [r3]
 5296 000e 9BB2     		uxth	r3, r3
 5297 0010 1A46     		mov	r2, r3	@ movhi
 5298 0012 5201     		lsls	r2, r2, #5
 5299 0014 D21A     		subs	r2, r2, r3
 5300 0016 9200     		lsls	r2, r2, #2
 5301 0018 1344     		add	r3, r3, r2
 5302 001a DB00     		lsls	r3, r3, #3
 5303 001c 9BB2     		uxth	r3, r3
 5304 001e 1BB2     		sxth	r3, r3
 5305 0020 FB80     		strh	r3, [r7, #6]	@ movhi
1207:..\src/command_processing.c ****     if (aux_int16 < 0) aux_int16 = 0;
 5306              		.loc 1 1207 0
 5307 0022 B7F90630 		ldrsh	r3, [r7, #6]
 5308 0026 002B     		cmp	r3, #0
 5309 0028 01DA     		bge	.L276
 5310              		.loc 1 1207 0 is_stmt 0 discriminator 1
 5311 002a 0023     		movs	r3, #0
 5312 002c FB80     		strh	r3, [r7, #6]	@ movhi
 5313              	.L276:
1208:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5314              		.loc 1 1208 0 is_stmt 1
 5315 002e BB1D     		adds	r3, r7, #6
 5316 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5317 0032 BB72     		strb	r3, [r7, #10]
1209:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5318              		.loc 1 1209 0
 5319 0034 BB1D     		adds	r3, r7, #6
 5320 0036 0133     		adds	r3, r3, #1
 5321 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5322 003a 7B72     		strb	r3, [r7, #9]
1210:..\src/command_processing.c ****     
1211:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 133


1212:..\src/command_processing.c ****     // aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated current
1213:..\src/command_processing.c ****     aux_int16 = (int16)(Battery_level_out);
 5323              		.loc 1 1213 0
 5324 003c 0F4B     		ldr	r3, .L277+4
 5325 003e 1B68     		ldr	r3, [r3]
 5326 0040 1BB2     		sxth	r3, r3
 5327 0042 FB80     		strh	r3, [r7, #6]	@ movhi
1214:..\src/command_processing.c ****     
1215:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5328              		.loc 1 1215 0
 5329 0044 BB1D     		adds	r3, r7, #6
 5330 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5331 0048 3B73     		strb	r3, [r7, #12]
1216:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5332              		.loc 1 1216 0
 5333 004a BB1D     		adds	r3, r7, #6
 5334 004c 0133     		adds	r3, r3, #1
 5335 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5336 0050 FB72     		strb	r3, [r7, #11]
1217:..\src/command_processing.c **** 
1218:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
1219:..\src/command_processing.c **** 
1220:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5337              		.loc 1 1220 0
 5338 0052 07F10803 		add	r3, r7, #8
 5339 0056 0521     		movs	r1, #5
 5340 0058 1846     		mov	r0, r3
 5341 005a FFF7FEFF 		bl	LCRChecksum
 5342 005e 0346     		mov	r3, r0
 5343 0060 7B73     		strb	r3, [r7, #13]
1221:..\src/command_processing.c ****     
1222:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5344              		.loc 1 1222 0
 5345 0062 07F10803 		add	r3, r7, #8
 5346 0066 0621     		movs	r1, #6
 5347 0068 1846     		mov	r0, r3
 5348 006a FFF7FEFF 		bl	commWrite
1223:..\src/command_processing.c **** 
1224:..\src/command_processing.c **** }
 5349              		.loc 1 1224 0
 5350 006e 00BF     		nop
 5351 0070 1037     		adds	r7, r7, #16
 5352              		.cfi_def_cfa_offset 8
 5353 0072 BD46     		mov	sp, r7
 5354              		.cfi_def_cfa_register 13
 5355              		@ sp needed
 5356 0074 80BD     		pop	{r7, pc}
 5357              	.L278:
 5358 0076 00BF     		.align	2
 5359              	.L277:
 5360 0078 00000000 		.word	pressure_value
 5361 007c 00000000 		.word	Battery_level_out
 5362              		.cfi_endproc
 5363              	.LFE103:
 5364              		.size	cmd_get_currents, .-cmd_get_currents
 5365              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 5366              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 134


 5367              		.global	cmd_get_currents_for_cuff
 5368              		.thumb
 5369              		.thumb_func
 5370              		.type	cmd_get_currents_for_cuff, %function
 5371              	cmd_get_currents_for_cuff:
 5372              	.LFB104:
1225:..\src/command_processing.c **** 
1226:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 5373              		.loc 1 1226 0
 5374              		.cfi_startproc
 5375              		@ args = 0, pretend = 0, frame = 0
 5376              		@ frame_needed = 1, uses_anonymous_args = 0
 5377              		@ link register save eliminated.
 5378 0000 80B4     		push	{r7}
 5379              		.cfi_def_cfa_offset 4
 5380              		.cfi_offset 7, -4
 5381 0002 00AF     		add	r7, sp, #0
 5382              		.cfi_def_cfa_register 7
1227:..\src/command_processing.c ****    
1228:..\src/command_processing.c **** }
 5383              		.loc 1 1228 0
 5384 0004 00BF     		nop
 5385 0006 BD46     		mov	sp, r7
 5386              		.cfi_def_cfa_register 13
 5387              		@ sp needed
 5388 0008 80BC     		pop	{r7}
 5389              		.cfi_restore 7
 5390              		.cfi_def_cfa_offset 0
 5391 000a 7047     		bx	lr
 5392              		.cfi_endproc
 5393              	.LFE104:
 5394              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 5395              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
 5396              		.align	2
 5397              		.global	cmd_get_vibrotactile_inputs
 5398              		.thumb
 5399              		.thumb_func
 5400              		.type	cmd_get_vibrotactile_inputs, %function
 5401              	cmd_get_vibrotactile_inputs:
 5402              	.LFB105:
1229:..\src/command_processing.c **** 
1230:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 5403              		.loc 1 1230 0
 5404              		.cfi_startproc
 5405              		@ args = 0, pretend = 0, frame = 0
 5406              		@ frame_needed = 1, uses_anonymous_args = 0
 5407              		@ link register save eliminated.
 5408 0000 80B4     		push	{r7}
 5409              		.cfi_def_cfa_offset 4
 5410              		.cfi_offset 7, -4
 5411 0002 00AF     		add	r7, sp, #0
 5412              		.cfi_def_cfa_register 7
1231:..\src/command_processing.c ****     
1232:..\src/command_processing.c **** }
 5413              		.loc 1 1232 0
 5414 0004 00BF     		nop
 5415 0006 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 135


 5416              		.cfi_def_cfa_register 13
 5417              		@ sp needed
 5418 0008 80BC     		pop	{r7}
 5419              		.cfi_restore 7
 5420              		.cfi_def_cfa_offset 0
 5421 000a 7047     		bx	lr
 5422              		.cfi_endproc
 5423              	.LFE105:
 5424              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
 5425              		.section	.text.commReadWriteSH,"ax",%progbits
 5426              		.align	2
 5427              		.global	commReadWriteSH
 5428              		.thumb
 5429              		.thumb_func
 5430              		.type	commReadWriteSH, %function
 5431              	commReadWriteSH:
 5432              	.LFB106:
1233:..\src/command_processing.c **** 
1234:..\src/command_processing.c **** void commReadWriteSH( uint8 slave_ID) {
 5433              		.loc 1 1234 0
 5434              		.cfi_startproc
 5435              		@ args = 0, pretend = 0, frame = 32
 5436              		@ frame_needed = 1, uses_anonymous_args = 0
 5437 0000 90B5     		push	{r4, r7, lr}
 5438              		.cfi_def_cfa_offset 12
 5439              		.cfi_offset 4, -12
 5440              		.cfi_offset 7, -8
 5441              		.cfi_offset 14, -4
 5442 0002 89B0     		sub	sp, sp, #36
 5443              		.cfi_def_cfa_offset 48
 5444 0004 00AF     		add	r7, sp, #0
 5445              		.cfi_def_cfa_register 7
 5446 0006 0346     		mov	r3, r0
 5447 0008 FB71     		strb	r3, [r7, #7]
1235:..\src/command_processing.c ****      
1236:..\src/command_processing.c ****     
1237:..\src/command_processing.c ****     
1238:..\src/command_processing.c ****       uint8 packet_data[6];
1239:..\src/command_processing.c ****     uint8 packet_length;
1240:..\src/command_processing.c ****     int16 aux_int16;
1241:..\src/command_processing.c **** uint32 t_start, t_end;
1242:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5448              		.loc 1 1242 0
 5449 000a 0123     		movs	r3, #1
 5450 000c FB77     		strb	r3, [r7, #31]
1243:..\src/command_processing.c ****        
1244:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
1245:..\src/command_processing.c ****  //   packet_data[0] = CMD_DRIVE_SLAVE;
1246:..\src/command_processing.c ****     
1247:..\src/command_processing.c ****  //aux_int16 = (int16) motor_idx;
1248:..\src/command_processing.c ****    aux_int16 = (int16) (SH_ref >> g_mem.SH_config.res);
 5451              		.loc 1 1248 0
 5452 000e 3B4B     		ldr	r3, .L286
 5453 0010 1B68     		ldr	r3, [r3]
 5454 0012 3B4A     		ldr	r2, .L286+4
 5455 0014 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 5456 0018 1341     		asrs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 136


 5457 001a 1BB2     		sxth	r3, r3
 5458 001c 7B81     		strh	r3, [r7, #10]	@ movhi
1249:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5459              		.loc 1 1249 0
 5460 001e 07F10A03 		add	r3, r7, #10
 5461 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5462 0024 BB73     		strb	r3, [r7, #14]
1250:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5463              		.loc 1 1250 0
 5464 0026 07F10A03 		add	r3, r7, #10
 5465 002a 0133     		adds	r3, r3, #1
 5466 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5467 002e 7B73     		strb	r3, [r7, #13]
1251:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
 5468              		.loc 1 1251 0
 5469 0030 07F10C03 		add	r3, r7, #12
 5470 0034 0333     		adds	r3, r3, #3
 5471 0036 0022     		movs	r2, #0
 5472 0038 1A80     		strh	r2, [r3]	@ movhi
1252:..\src/command_processing.c ****   //  packet_data[3] = (char*)0;
1253:..\src/command_processing.c ****    // packet_data[4] = (char*)0;
1254:..\src/command_processing.c ****     packet_length = 6;
 5473              		.loc 1 1254 0
 5474 003a 0623     		movs	r3, #6
 5475 003c BB77     		strb	r3, [r7, #30]
1255:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 5476              		.loc 1 1255 0
 5477 003e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5478 0040 5C1E     		subs	r4, r3, #1
 5479 0042 BB7F     		ldrb	r3, [r7, #30]
 5480 0044 013B     		subs	r3, r3, #1
 5481 0046 DAB2     		uxtb	r2, r3
 5482 0048 07F10C03 		add	r3, r7, #12
 5483 004c 1146     		mov	r1, r2
 5484 004e 1846     		mov	r0, r3
 5485 0050 FFF7FEFF 		bl	LCRChecksum
 5486 0054 0346     		mov	r3, r0
 5487 0056 1A46     		mov	r2, r3
 5488 0058 07F12003 		add	r3, r7, #32
 5489 005c 2344     		add	r3, r3, r4
 5490 005e 03F8142C 		strb	r2, [r3, #-20]
1256:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, slave_ID);
 5491              		.loc 1 1256 0
 5492 0062 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5493 0064 99B2     		uxth	r1, r3
 5494 0066 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5495 0068 07F10C03 		add	r3, r7, #12
 5496 006c 1846     		mov	r0, r3
 5497 006e FFF7FEFF 		bl	commWriteID
1257:..\src/command_processing.c **** 
1258:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5498              		.loc 1 1258 0
 5499 0072 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5500 0076 0346     		mov	r3, r0
 5501 0078 BB61     		str	r3, [r7, #24]
1259:..\src/command_processing.c ****   //  while(g_rx.buffer[0] != CMD_GET_FEEDBACK_INPUT) {
1260:..\src/command_processing.c ****        { if (interrupt_flag){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 137


 5502              		.loc 1 1260 0
 5503 007a 224B     		ldr	r3, .L286+8
 5504 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5505 007e 002B     		cmp	r3, #0
 5506 0080 04D0     		beq	.L282
1261:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5507              		.loc 1 1261 0
 5508 0082 204B     		ldr	r3, .L286+8
 5509 0084 0022     		movs	r2, #0
 5510 0086 1A70     		strb	r2, [r3]
1262:..\src/command_processing.c ****             interrupt_manager();
 5511              		.loc 1 1262 0
 5512 0088 FFF7FEFF 		bl	interrupt_manager
 5513              	.L282:
1263:..\src/command_processing.c ****         }
1264:..\src/command_processing.c **** 
1265:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5514              		.loc 1 1265 0
 5515 008c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5516 0090 0346     		mov	r3, r0
 5517 0092 7B61     		str	r3, [r7, #20]
1266:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5518              		.loc 1 1266 0
 5519 0094 BA69     		ldr	r2, [r7, #24]
 5520 0096 7B69     		ldr	r3, [r7, #20]
 5521 0098 D31A     		subs	r3, r2, r3
 5522 009a 1B4A     		ldr	r2, .L286+12
 5523 009c 9342     		cmp	r3, r2
 5524 009e 04D9     		bls	.L283
1267:..\src/command_processing.c ****             read_flag = FALSE;
 5525              		.loc 1 1267 0
 5526 00a0 0023     		movs	r3, #0
 5527 00a2 FB77     		strb	r3, [r7, #31]
1268:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5528              		.loc 1 1268 0
 5529 00a4 194B     		ldr	r3, .L286+16
 5530 00a6 0022     		movs	r2, #0
 5531 00a8 1A70     		strb	r2, [r3]
 5532              	.L283:
1269:..\src/command_processing.c ****           //  break;
1270:..\src/command_processing.c ****         }
1271:..\src/command_processing.c ****     }
1272:..\src/command_processing.c **** 
1273:..\src/command_processing.c ****         if (read_flag) {
 5533              		.loc 1 1273 0
 5534 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5535 00ac 002B     		cmp	r3, #0
 5536 00ae 20D0     		beq	.L285
1274:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5537              		.loc 1 1274 0
 5538 00b0 174B     		ldr	r3, .L286+20
 5539 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5540 00b4 1B02     		lsls	r3, r3, #8
 5541 00b6 1AB2     		sxth	r2, r3
 5542 00b8 154B     		ldr	r3, .L286+20
 5543 00ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5544 00bc 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 138


 5545 00be 1343     		orrs	r3, r3, r2
 5546 00c0 1AB2     		sxth	r2, r3
 5547 00c2 144B     		ldr	r3, .L286+24
 5548 00c4 1A80     		strh	r2, [r3]	@ movhi
1275:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5549              		.loc 1 1275 0
 5550 00c6 124B     		ldr	r3, .L286+20
 5551 00c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5552 00ca 1B02     		lsls	r3, r3, #8
 5553 00cc 1AB2     		sxth	r2, r3
 5554 00ce 104B     		ldr	r3, .L286+20
 5555 00d0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5556 00d2 1BB2     		sxth	r3, r3
 5557 00d4 1343     		orrs	r3, r3, r2
 5558 00d6 1AB2     		sxth	r2, r3
 5559 00d8 0F4B     		ldr	r3, .L286+28
 5560 00da 1A80     		strh	r2, [r3]	@ movhi
1276:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[5]<<8 | g_rx.buffer[6]);                        
 5561              		.loc 1 1276 0
 5562 00dc 0C4B     		ldr	r3, .L286+20
 5563 00de 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 5564 00e0 1B02     		lsls	r3, r3, #8
 5565 00e2 1AB2     		sxth	r2, r3
 5566 00e4 0A4B     		ldr	r3, .L286+20
 5567 00e6 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5568 00e8 1BB2     		sxth	r3, r3
 5569 00ea 1343     		orrs	r3, r3, r2
 5570 00ec 1AB2     		sxth	r2, r3
 5571 00ee 0B4B     		ldr	r3, .L286+32
 5572 00f0 1A80     		strh	r2, [r3]	@ movhi
 5573              	.L285:
1277:..\src/command_processing.c ****     }    
1278:..\src/command_processing.c ****     
1279:..\src/command_processing.c **** }
 5574              		.loc 1 1279 0
 5575 00f2 00BF     		nop
 5576 00f4 2437     		adds	r7, r7, #36
 5577              		.cfi_def_cfa_offset 12
 5578 00f6 BD46     		mov	sp, r7
 5579              		.cfi_def_cfa_register 13
 5580              		@ sp needed
 5581 00f8 90BD     		pop	{r4, r7, pc}
 5582              	.L287:
 5583 00fa 00BF     		.align	2
 5584              	.L286:
 5585 00fc 00000000 		.word	SH_ref
 5586 0100 00000000 		.word	g_mem
 5587 0104 00000000 		.word	interrupt_flag
 5588 0108 20AA4400 		.word	4500000
 5589 010c 00000000 		.word	master_mode
 5590 0110 00000000 		.word	g_rx
 5591 0114 00000000 		.word	PWM_IMU_1
 5592 0118 00000000 		.word	PWM_IMU_2
 5593 011c 00000000 		.word	curr_diff
 5594              		.cfi_endproc
 5595              	.LFE106:
 5596              		.size	commReadWriteSH, .-commReadWriteSH
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 139


 5597              		.section	.text.commReadIMUFromSH,"ax",%progbits
 5598              		.align	2
 5599              		.global	commReadIMUFromSH
 5600              		.thumb
 5601              		.thumb_func
 5602              		.type	commReadIMUFromSH, %function
 5603              	commReadIMUFromSH:
 5604              	.LFB107:
1280:..\src/command_processing.c **** 
1281:..\src/command_processing.c **** 
1282:..\src/command_processing.c **** //==============================================================================
1283:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1284:..\src/command_processing.c **** //==============================================================================
1285:..\src/command_processing.c **** void commReadIMUFromSH(){
 5605              		.loc 1 1285 0
 5606              		.cfi_startproc
 5607              		@ args = 0, pretend = 0, frame = 32
 5608              		@ frame_needed = 1, uses_anonymous_args = 0
 5609 0000 80B5     		push	{r7, lr}
 5610              		.cfi_def_cfa_offset 8
 5611              		.cfi_offset 7, -8
 5612              		.cfi_offset 14, -4
 5613 0002 88B0     		sub	sp, sp, #32
 5614              		.cfi_def_cfa_offset 40
 5615 0004 00AF     		add	r7, sp, #0
 5616              		.cfi_def_cfa_register 7
1286:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1287:..\src/command_processing.c ****     // resulted from the processed IMU values.
1288:..\src/command_processing.c ****     // This function use RS485 protocol to communicate with the second board. 
1289:..\src/command_processing.c ****     // Baude Rate is set to 2000000. 
1290:..\src/command_processing.c ****     // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1291:..\src/command_processing.c ****     // and an answer (: : ID pk_length CMD data1[0] data1[1] data2[0] data2[1] check) received --> 
1292:..\src/command_processing.c ****     // At least 64 us are requested for this communication 
1293:..\src/command_processing.c ****     
1294:..\src/command_processing.c ****     uint8 packet_data[16];
1295:..\src/command_processing.c ****     uint8 packet_length;
1296:..\src/command_processing.c ****    
1297:..\src/command_processing.c ****     uint32 t_start, t_end;
1298:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5617              		.loc 1 1298 0
 5618 0006 0123     		movs	r3, #1
 5619 0008 FB77     		strb	r3, [r7, #31]
1299:..\src/command_processing.c **** 
1300:..\src/command_processing.c ****     packet_length = 2;
 5620              		.loc 1 1300 0
 5621 000a 0223     		movs	r3, #2
 5622 000c BB77     		strb	r3, [r7, #30]
1301:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5623              		.loc 1 1301 0
 5624 000e FA23     		movs	r3, #250
 5625 0010 3B71     		strb	r3, [r7, #4]
1302:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5626              		.loc 1 1302 0
 5627 0012 FA23     		movs	r3, #250
 5628 0014 7B71     		strb	r3, [r7, #5]
1303:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5629              		.loc 1 1303 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 140


 5630 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5631 0018 99B2     		uxth	r1, r3
 5632 001a 234B     		ldr	r3, .L295
 5633 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5634 0020 3B1D     		adds	r3, r7, #4
 5635 0022 1846     		mov	r0, r3
 5636 0024 FFF7FEFF 		bl	commWriteID
1304:..\src/command_processing.c **** 
1305:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5637              		.loc 1 1305 0
 5638 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5639 002c 0346     		mov	r3, r0
 5640 002e BB61     		str	r3, [r7, #24]
1306:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5641              		.loc 1 1306 0
 5642 0030 18E0     		b	.L289
 5643              	.L292:
1307:..\src/command_processing.c ****         if (interrupt_flag){
 5644              		.loc 1 1307 0
 5645 0032 1E4B     		ldr	r3, .L295+4
 5646 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5647 0036 002B     		cmp	r3, #0
 5648 0038 04D0     		beq	.L290
1308:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5649              		.loc 1 1308 0
 5650 003a 1C4B     		ldr	r3, .L295+4
 5651 003c 0022     		movs	r2, #0
 5652 003e 1A70     		strb	r2, [r3]
1309:..\src/command_processing.c ****             interrupt_manager();
 5653              		.loc 1 1309 0
 5654 0040 FFF7FEFF 		bl	interrupt_manager
 5655              	.L290:
1310:..\src/command_processing.c ****         }
1311:..\src/command_processing.c **** 
1312:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5656              		.loc 1 1312 0
 5657 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5658 0048 0346     		mov	r3, r0
 5659 004a 7B61     		str	r3, [r7, #20]
1313:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5660              		.loc 1 1313 0
 5661 004c BA69     		ldr	r2, [r7, #24]
 5662 004e 7B69     		ldr	r3, [r7, #20]
 5663 0050 D31A     		subs	r3, r2, r3
 5664 0052 174A     		ldr	r2, .L295+8
 5665 0054 9342     		cmp	r3, r2
 5666 0056 05D9     		bls	.L289
1314:..\src/command_processing.c ****             read_flag = FALSE;
 5667              		.loc 1 1314 0
 5668 0058 0023     		movs	r3, #0
 5669 005a FB77     		strb	r3, [r7, #31]
1315:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5670              		.loc 1 1315 0
 5671 005c 154B     		ldr	r3, .L295+12
 5672 005e 0022     		movs	r2, #0
 5673 0060 1A70     		strb	r2, [r3]
1316:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 141


 5674              		.loc 1 1316 0
 5675 0062 03E0     		b	.L291
 5676              	.L289:
1306:..\src/command_processing.c ****         if (interrupt_flag){
 5677              		.loc 1 1306 0
 5678 0064 144B     		ldr	r3, .L295+16
 5679 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5680 0068 FB2B     		cmp	r3, #251
 5681 006a E2D1     		bne	.L292
 5682              	.L291:
1317:..\src/command_processing.c ****         }
1318:..\src/command_processing.c ****     }
1319:..\src/command_processing.c **** 
1320:..\src/command_processing.c ****         if (read_flag) {
 5683              		.loc 1 1320 0
 5684 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5685 006e 002B     		cmp	r3, #0
 5686 0070 15D0     		beq	.L294
1321:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5687              		.loc 1 1321 0
 5688 0072 114B     		ldr	r3, .L295+16
 5689 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5690 0076 1B02     		lsls	r3, r3, #8
 5691 0078 1AB2     		sxth	r2, r3
 5692 007a 0F4B     		ldr	r3, .L295+16
 5693 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5694 007e 1BB2     		sxth	r3, r3
 5695 0080 1343     		orrs	r3, r3, r2
 5696 0082 1AB2     		sxth	r2, r3
 5697 0084 0D4B     		ldr	r3, .L295+20
 5698 0086 1A80     		strh	r2, [r3]	@ movhi
1322:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5699              		.loc 1 1322 0
 5700 0088 0B4B     		ldr	r3, .L295+16
 5701 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5702 008c 1B02     		lsls	r3, r3, #8
 5703 008e 1AB2     		sxth	r2, r3
 5704 0090 094B     		ldr	r3, .L295+16
 5705 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5706 0094 1BB2     		sxth	r3, r3
 5707 0096 1343     		orrs	r3, r3, r2
 5708 0098 1AB2     		sxth	r2, r3
 5709 009a 094B     		ldr	r3, .L295+24
 5710 009c 1A80     		strh	r2, [r3]	@ movhi
 5711              	.L294:
1323:..\src/command_processing.c ****     }
1324:..\src/command_processing.c ****     
1325:..\src/command_processing.c **** }
 5712              		.loc 1 1325 0
 5713 009e 00BF     		nop
 5714 00a0 2037     		adds	r7, r7, #32
 5715              		.cfi_def_cfa_offset 8
 5716 00a2 BD46     		mov	sp, r7
 5717              		.cfi_def_cfa_register 13
 5718              		@ sp needed
 5719 00a4 80BD     		pop	{r7, pc}
 5720              	.L296:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 142


 5721 00a6 00BF     		.align	2
 5722              	.L295:
 5723 00a8 00000000 		.word	c_mem
 5724 00ac 00000000 		.word	interrupt_flag
 5725 00b0 20AA4400 		.word	4500000
 5726 00b4 00000000 		.word	master_mode
 5727 00b8 00000000 		.word	g_rx
 5728 00bc 00000000 		.word	PWM_IMU_1
 5729 00c0 00000000 		.word	PWM_IMU_2
 5730              		.cfi_endproc
 5731              	.LFE107:
 5732              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 5733              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 5734              		.align	2
 5735              		.global	commReadResCurrFromSH
 5736              		.thumb
 5737              		.thumb_func
 5738              		.type	commReadResCurrFromSH, %function
 5739              	commReadResCurrFromSH:
 5740              	.LFB108:
1326:..\src/command_processing.c **** 
1327:..\src/command_processing.c **** //==============================================================================
1328:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1329:..\src/command_processing.c **** //==============================================================================
1330:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1331:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1332:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1333:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1334:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1335:..\src/command_processing.c **** void commReadResCurrFromSH()
1336:..\src/command_processing.c **** {
 5741              		.loc 1 1336 0
 5742              		.cfi_startproc
 5743              		@ args = 0, pretend = 0, frame = 32
 5744              		@ frame_needed = 1, uses_anonymous_args = 0
 5745 0000 80B5     		push	{r7, lr}
 5746              		.cfi_def_cfa_offset 8
 5747              		.cfi_offset 7, -8
 5748              		.cfi_offset 14, -4
 5749 0002 88B0     		sub	sp, sp, #32
 5750              		.cfi_def_cfa_offset 40
 5751 0004 00AF     		add	r7, sp, #0
 5752              		.cfi_def_cfa_register 7
1337:..\src/command_processing.c ****     uint8 packet_data[16];
1338:..\src/command_processing.c ****     uint8 packet_length;
1339:..\src/command_processing.c ****     //int16 curr_diff = 0;
1340:..\src/command_processing.c ****     uint32 t_start, t_end;
1341:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5753              		.loc 1 1341 0
 5754 0006 0123     		movs	r3, #1
 5755 0008 FB77     		strb	r3, [r7, #31]
1342:..\src/command_processing.c **** 
1343:..\src/command_processing.c ****     packet_length = 2;
 5756              		.loc 1 1343 0
 5757 000a 0223     		movs	r3, #2
 5758 000c BB77     		strb	r3, [r7, #30]
1344:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 143


 5759              		.loc 1 1344 0
 5760 000e 8C23     		movs	r3, #140
 5761 0010 3B71     		strb	r3, [r7, #4]
1345:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 5762              		.loc 1 1345 0
 5763 0012 8C23     		movs	r3, #140
 5764 0014 7B71     		strb	r3, [r7, #5]
1346:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5765              		.loc 1 1346 0
 5766 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5767 0018 99B2     		uxth	r1, r3
 5768 001a 1D4B     		ldr	r3, .L304
 5769 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5770 0020 3B1D     		adds	r3, r7, #4
 5771 0022 1846     		mov	r0, r3
 5772 0024 FFF7FEFF 		bl	commWriteID
1347:..\src/command_processing.c **** 
1348:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5773              		.loc 1 1348 0
 5774 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5775 002c 0346     		mov	r3, r0
 5776 002e BB61     		str	r3, [r7, #24]
1349:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 5777              		.loc 1 1349 0
 5778 0030 18E0     		b	.L298
 5779              	.L301:
1350:..\src/command_processing.c ****         if (interrupt_flag){
 5780              		.loc 1 1350 0
 5781 0032 184B     		ldr	r3, .L304+4
 5782 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5783 0036 002B     		cmp	r3, #0
 5784 0038 04D0     		beq	.L299
1351:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5785              		.loc 1 1351 0
 5786 003a 164B     		ldr	r3, .L304+4
 5787 003c 0022     		movs	r2, #0
 5788 003e 1A70     		strb	r2, [r3]
1352:..\src/command_processing.c ****             interrupt_manager();
 5789              		.loc 1 1352 0
 5790 0040 FFF7FEFF 		bl	interrupt_manager
 5791              	.L299:
1353:..\src/command_processing.c ****         }
1354:..\src/command_processing.c **** 
1355:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5792              		.loc 1 1355 0
 5793 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5794 0048 0346     		mov	r3, r0
 5795 004a 7B61     		str	r3, [r7, #20]
1356:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5796              		.loc 1 1356 0
 5797 004c BA69     		ldr	r2, [r7, #24]
 5798 004e 7B69     		ldr	r3, [r7, #20]
 5799 0050 D31A     		subs	r3, r2, r3
 5800 0052 114A     		ldr	r2, .L304+8
 5801 0054 9342     		cmp	r3, r2
 5802 0056 05D9     		bls	.L298
1357:..\src/command_processing.c ****             read_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 144


 5803              		.loc 1 1357 0
 5804 0058 0023     		movs	r3, #0
 5805 005a FB77     		strb	r3, [r7, #31]
1358:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5806              		.loc 1 1358 0
 5807 005c 0F4B     		ldr	r3, .L304+12
 5808 005e 0022     		movs	r2, #0
 5809 0060 1A70     		strb	r2, [r3]
1359:..\src/command_processing.c ****             break;
 5810              		.loc 1 1359 0
 5811 0062 03E0     		b	.L300
 5812              	.L298:
1349:..\src/command_processing.c ****         if (interrupt_flag){
 5813              		.loc 1 1349 0
 5814 0064 0E4B     		ldr	r3, .L304+16
 5815 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5816 0068 8E2B     		cmp	r3, #142
 5817 006a E2D1     		bne	.L301
 5818              	.L300:
1360:..\src/command_processing.c ****         }
1361:..\src/command_processing.c ****     }
1362:..\src/command_processing.c **** 
1363:..\src/command_processing.c ****     if (read_flag) {
 5819              		.loc 1 1363 0
 5820 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5821 006e 002B     		cmp	r3, #0
 5822 0070 0AD0     		beq	.L303
1364:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 5823              		.loc 1 1364 0
 5824 0072 0B4B     		ldr	r3, .L304+16
 5825 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5826 0076 1B02     		lsls	r3, r3, #8
 5827 0078 1AB2     		sxth	r2, r3
 5828 007a 094B     		ldr	r3, .L304+16
 5829 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5830 007e 1BB2     		sxth	r3, r3
 5831 0080 1343     		orrs	r3, r3, r2
 5832 0082 1AB2     		sxth	r2, r3
 5833 0084 074B     		ldr	r3, .L304+20
 5834 0086 1A80     		strh	r2, [r3]	@ movhi
 5835              	.L303:
1365:..\src/command_processing.c ****     }
1366:..\src/command_processing.c ****     
1367:..\src/command_processing.c ****     //return curr_diff;
1368:..\src/command_processing.c **** }
 5836              		.loc 1 1368 0
 5837 0088 00BF     		nop
 5838 008a 2037     		adds	r7, r7, #32
 5839              		.cfi_def_cfa_offset 8
 5840 008c BD46     		mov	sp, r7
 5841              		.cfi_def_cfa_register 13
 5842              		@ sp needed
 5843 008e 80BD     		pop	{r7, pc}
 5844              	.L305:
 5845              		.align	2
 5846              	.L304:
 5847 0090 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 145


 5848 0094 00000000 		.word	interrupt_flag
 5849 0098 20AA4400 		.word	4500000
 5850 009c 00000000 		.word	master_mode
 5851 00a0 00000000 		.word	g_rx
 5852 00a4 00000000 		.word	curr_diff
 5853              		.cfi_endproc
 5854              	.LFE108:
 5855              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 5856              		.section	.text.cmd_set_baudrate,"ax",%progbits
 5857              		.align	2
 5858              		.global	cmd_set_baudrate
 5859              		.thumb
 5860              		.thumb_func
 5861              		.type	cmd_set_baudrate, %function
 5862              	cmd_set_baudrate:
 5863              	.LFB109:
1369:..\src/command_processing.c **** 
1370:..\src/command_processing.c **** 
1371:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1372:..\src/command_processing.c **** 
1373:..\src/command_processing.c **** void cmd_set_baudrate(){
 5864              		.loc 1 1373 0
 5865              		.cfi_startproc
 5866              		@ args = 0, pretend = 0, frame = 0
 5867              		@ frame_needed = 1, uses_anonymous_args = 0
 5868              		@ link register save eliminated.
 5869 0000 80B4     		push	{r7}
 5870              		.cfi_def_cfa_offset 4
 5871              		.cfi_offset 7, -4
 5872 0002 00AF     		add	r7, sp, #0
 5873              		.cfi_def_cfa_register 7
1374:..\src/command_processing.c ****     
1375:..\src/command_processing.c **** }
 5874              		.loc 1 1375 0
 5875 0004 00BF     		nop
 5876 0006 BD46     		mov	sp, r7
 5877              		.cfi_def_cfa_register 13
 5878              		@ sp needed
 5879 0008 80BC     		pop	{r7}
 5880              		.cfi_restore 7
 5881              		.cfi_def_cfa_offset 0
 5882 000a 7047     		bx	lr
 5883              		.cfi_endproc
 5884              	.LFE109:
 5885              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 5886              		.section	.text.cmd_ping,"ax",%progbits
 5887              		.align	2
 5888              		.global	cmd_ping
 5889              		.thumb
 5890              		.thumb_func
 5891              		.type	cmd_ping, %function
 5892              	cmd_ping:
 5893              	.LFB110:
1376:..\src/command_processing.c **** 
1377:..\src/command_processing.c **** void cmd_ping(){
 5894              		.loc 1 1377 0
 5895              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 146


 5896              		@ args = 0, pretend = 0, frame = 8
 5897              		@ frame_needed = 1, uses_anonymous_args = 0
 5898 0000 80B5     		push	{r7, lr}
 5899              		.cfi_def_cfa_offset 8
 5900              		.cfi_offset 7, -8
 5901              		.cfi_offset 14, -4
 5902 0002 82B0     		sub	sp, sp, #8
 5903              		.cfi_def_cfa_offset 16
 5904 0004 00AF     		add	r7, sp, #0
 5905              		.cfi_def_cfa_register 7
1378:..\src/command_processing.c **** 
1379:..\src/command_processing.c ****     uint8 packet_data[2];
1380:..\src/command_processing.c **** 
1381:..\src/command_processing.c ****     // Header
1382:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 5906              		.loc 1 1382 0
 5907 0006 0023     		movs	r3, #0
 5908 0008 3B71     		strb	r3, [r7, #4]
1383:..\src/command_processing.c ****     
1384:..\src/command_processing.c ****     // Load Payload
1385:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 5909              		.loc 1 1385 0
 5910 000a 0023     		movs	r3, #0
 5911 000c 7B71     		strb	r3, [r7, #5]
1386:..\src/command_processing.c **** 
1387:..\src/command_processing.c ****     // Send Package to uart
1388:..\src/command_processing.c ****     commWrite(packet_data, 2);
 5912              		.loc 1 1388 0
 5913 000e 3B1D     		adds	r3, r7, #4
 5914 0010 0221     		movs	r1, #2
 5915 0012 1846     		mov	r0, r3
 5916 0014 FFF7FEFF 		bl	commWrite
1389:..\src/command_processing.c **** }
 5917              		.loc 1 1389 0
 5918 0018 00BF     		nop
 5919 001a 0837     		adds	r7, r7, #8
 5920              		.cfi_def_cfa_offset 8
 5921 001c BD46     		mov	sp, r7
 5922              		.cfi_def_cfa_register 13
 5923              		@ sp needed
 5924 001e 80BD     		pop	{r7, pc}
 5925              		.cfi_endproc
 5926              	.LFE110:
 5927              		.size	cmd_ping, .-cmd_ping
 5928              		.section	.text.cmd_get_inputs,"ax",%progbits
 5929              		.align	2
 5930              		.global	cmd_get_inputs
 5931              		.thumb
 5932              		.thumb_func
 5933              		.type	cmd_get_inputs, %function
 5934              	cmd_get_inputs:
 5935              	.LFB111:
1390:..\src/command_processing.c **** 
1391:..\src/command_processing.c **** void cmd_get_inputs(){
 5936              		.loc 1 1391 0
 5937              		.cfi_startproc
 5938              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 147


 5939              		@ frame_needed = 1, uses_anonymous_args = 0
 5940              		@ link register save eliminated.
 5941 0000 80B4     		push	{r7}
 5942              		.cfi_def_cfa_offset 4
 5943              		.cfi_offset 7, -4
 5944 0002 00AF     		add	r7, sp, #0
 5945              		.cfi_def_cfa_register 7
1392:..\src/command_processing.c **** 
1393:..\src/command_processing.c **** }
 5946              		.loc 1 1393 0
 5947 0004 00BF     		nop
 5948 0006 BD46     		mov	sp, r7
 5949              		.cfi_def_cfa_register 13
 5950              		@ sp needed
 5951 0008 80BC     		pop	{r7}
 5952              		.cfi_restore 7
 5953              		.cfi_def_cfa_offset 0
 5954 000a 7047     		bx	lr
 5955              		.cfi_endproc
 5956              	.LFE111:
 5957              		.size	cmd_get_inputs, .-cmd_get_inputs
 5958              		.section	.text.cmd_store_params,"ax",%progbits
 5959              		.align	2
 5960              		.global	cmd_store_params
 5961              		.thumb
 5962              		.thumb_func
 5963              		.type	cmd_store_params, %function
 5964              	cmd_store_params:
 5965              	.LFB112:
1394:..\src/command_processing.c **** 
1395:..\src/command_processing.c **** void cmd_store_params(){
 5966              		.loc 1 1395 0
 5967              		.cfi_startproc
 5968              		@ args = 0, pretend = 0, frame = 8
 5969              		@ frame_needed = 1, uses_anonymous_args = 0
 5970 0000 80B5     		push	{r7, lr}
 5971              		.cfi_def_cfa_offset 8
 5972              		.cfi_offset 7, -8
 5973              		.cfi_offset 14, -4
 5974 0002 82B0     		sub	sp, sp, #8
 5975              		.cfi_def_cfa_offset 16
 5976 0004 00AF     		add	r7, sp, #0
 5977              		.cfi_def_cfa_register 7
1396:..\src/command_processing.c ****     
1397:..\src/command_processing.c ****     uint8 CYDATA packet_length = 2;
 5978              		.loc 1 1397 0
 5979 0006 0223     		movs	r3, #2
 5980 0008 FB71     		strb	r3, [r7, #7]
1398:..\src/command_processing.c ****     uint8 CYDATA packet_data[2];
1399:..\src/command_processing.c ****     uint8 CYDATA old_id;
1400:..\src/command_processing.c ****       
1401:..\src/command_processing.c ****     // Store params 
1402:..\src/command_processing.c **** 
1403:..\src/command_processing.c ****     if (c_mem.dev.id != g_mem.dev.id) {     //If a new id is going to be set we will lose communica
 5981              		.loc 1 1403 0
 5982 000a 1F4B     		ldr	r3, .L317
 5983 000c 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 148


 5984 000e 1F4B     		ldr	r3, .L317+4
 5985 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5986 0012 9A42     		cmp	r2, r3
 5987 0014 20D0     		beq	.L310
1404:..\src/command_processing.c ****         old_id = c_mem.dev.id;          //after the memstore(0) and the ACK won't be recognised
 5988              		.loc 1 1404 0
 5989 0016 1C4B     		ldr	r3, .L317
 5990 0018 1B7C     		ldrb	r3, [r3, #16]
 5991 001a BB71     		strb	r3, [r7, #6]
1405:..\src/command_processing.c ****         if(memStore(0)) {
 5992              		.loc 1 1405 0
 5993 001c 0020     		movs	r0, #0
 5994 001e FFF7FEFF 		bl	memStore
 5995 0022 0346     		mov	r3, r0
 5996 0024 002B     		cmp	r3, #0
 5997 0026 0BD0     		beq	.L311
1406:..\src/command_processing.c ****             packet_data[0] = ACK_OK;
 5998              		.loc 1 1406 0
 5999 0028 0123     		movs	r3, #1
 6000 002a 3B71     		strb	r3, [r7, #4]
1407:..\src/command_processing.c ****             packet_data[1] = ACK_OK;
 6001              		.loc 1 1407 0
 6002 002c 0123     		movs	r3, #1
 6003 002e 7B71     		strb	r3, [r7, #5]
1408:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 6004              		.loc 1 1408 0
 6005 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6006 0032 99B2     		uxth	r1, r3
 6007 0034 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6008 0036 3B1D     		adds	r3, r7, #4
 6009 0038 1846     		mov	r0, r3
 6010 003a FFF7FEFF 		bl	commWrite_old_id
 6011 003e 18E0     		b	.L313
 6012              	.L311:
1409:..\src/command_processing.c ****         }    
1410:..\src/command_processing.c ****         else{
1411:..\src/command_processing.c ****             packet_data[0] = ACK_ERROR;
 6013              		.loc 1 1411 0
 6014 0040 0023     		movs	r3, #0
 6015 0042 3B71     		strb	r3, [r7, #4]
1412:..\src/command_processing.c ****             packet_data[1] = ACK_ERROR;
 6016              		.loc 1 1412 0
 6017 0044 0023     		movs	r3, #0
 6018 0046 7B71     		strb	r3, [r7, #5]
1413:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 6019              		.loc 1 1413 0
 6020 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6021 004a 99B2     		uxth	r1, r3
 6022 004c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6023 004e 3B1D     		adds	r3, r7, #4
 6024 0050 1846     		mov	r0, r3
 6025 0052 FFF7FEFF 		bl	commWrite_old_id
 6026 0056 0CE0     		b	.L313
 6027              	.L310:
1414:..\src/command_processing.c ****         }
1415:..\src/command_processing.c ****     }    
1416:..\src/command_processing.c ****     else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 149


1417:..\src/command_processing.c ****         if(memStore(0))
 6028              		.loc 1 1417 0
 6029 0058 0020     		movs	r0, #0
 6030 005a FFF7FEFF 		bl	memStore
 6031 005e 0346     		mov	r3, r0
 6032 0060 002B     		cmp	r3, #0
 6033 0062 03D0     		beq	.L314
1418:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 6034              		.loc 1 1418 0
 6035 0064 0120     		movs	r0, #1
 6036 0066 FFF7FEFF 		bl	sendAcknowledgment
 6037 006a 02E0     		b	.L313
 6038              	.L314:
1419:..\src/command_processing.c ****         else
1420:..\src/command_processing.c ****             sendAcknowledgment(ACK_ERROR);
 6039              		.loc 1 1420 0
 6040 006c 0020     		movs	r0, #0
 6041 006e FFF7FEFF 		bl	sendAcknowledgment
 6042              	.L313:
1421:..\src/command_processing.c ****     }
1422:..\src/command_processing.c ****     
1423:..\src/command_processing.c ****     // FW reset (if necessary)
1424:..\src/command_processing.c ****     if (reset_PSoC_flag == TRUE) {
 6043              		.loc 1 1424 0
 6044 0072 074B     		ldr	r3, .L317+8
 6045 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6046 0076 012B     		cmp	r3, #1
 6047 0078 01D1     		bne	.L316
1425:..\src/command_processing.c ****         CySoftwareReset();
 6048              		.loc 1 1425 0
 6049 007a FFF7FEFF 		bl	CySoftwareReset
 6050              	.L316:
1426:..\src/command_processing.c ****     }
1427:..\src/command_processing.c **** }
 6051              		.loc 1 1427 0
 6052 007e 00BF     		nop
 6053 0080 0837     		adds	r7, r7, #8
 6054              		.cfi_def_cfa_offset 8
 6055 0082 BD46     		mov	sp, r7
 6056              		.cfi_def_cfa_register 13
 6057              		@ sp needed
 6058 0084 80BD     		pop	{r7, pc}
 6059              	.L318:
 6060 0086 00BF     		.align	2
 6061              	.L317:
 6062 0088 00000000 		.word	c_mem
 6063 008c 00000000 		.word	g_mem
 6064 0090 00000000 		.word	reset_PSoC_flag
 6065              		.cfi_endproc
 6066              	.LFE112:
 6067              		.size	cmd_store_params, .-cmd_store_params
 6068              		.section	.text.cmd_get_emg,"ax",%progbits
 6069              		.align	2
 6070              		.global	cmd_get_emg
 6071              		.thumb
 6072              		.thumb_func
 6073              		.type	cmd_get_emg, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 150


 6074              	cmd_get_emg:
 6075              	.LFB113:
1428:..\src/command_processing.c **** 
1429:..\src/command_processing.c **** void cmd_get_emg(){
 6076              		.loc 1 1429 0
 6077              		.cfi_startproc
 6078              		@ args = 0, pretend = 0, frame = 16
 6079              		@ frame_needed = 1, uses_anonymous_args = 0
 6080 0000 80B5     		push	{r7, lr}
 6081              		.cfi_def_cfa_offset 8
 6082              		.cfi_offset 7, -8
 6083              		.cfi_offset 14, -4
 6084 0002 84B0     		sub	sp, sp, #16
 6085              		.cfi_def_cfa_offset 24
 6086 0004 00AF     		add	r7, sp, #0
 6087              		.cfi_def_cfa_register 7
1430:..\src/command_processing.c ****     
1431:..\src/command_processing.c ****     uint8 packet_data[6];
1432:..\src/command_processing.c ****     int16 aux_int16;
1433:..\src/command_processing.c ****     
1434:..\src/command_processing.c ****     // Header        
1435:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 6088              		.loc 1 1435 0
 6089 0006 8823     		movs	r3, #136
 6090 0008 3B72     		strb	r3, [r7, #8]
1436:..\src/command_processing.c ****     
1437:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 6091              		.loc 1 1437 0
 6092 000a 144B     		ldr	r3, .L320
 6093 000c 1B68     		ldr	r3, [r3]
 6094 000e 1BB2     		sxth	r3, r3
 6095 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1438:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 6096              		.loc 1 1438 0
 6097 0012 BB1D     		adds	r3, r7, #6
 6098 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6099 0016 BB72     		strb	r3, [r7, #10]
1439:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 6100              		.loc 1 1439 0
 6101 0018 BB1D     		adds	r3, r7, #6
 6102 001a 0133     		adds	r3, r3, #1
 6103 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6104 001e 7B72     		strb	r3, [r7, #9]
1440:..\src/command_processing.c ****     
1441:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 6105              		.loc 1 1441 0
 6106 0020 0E4B     		ldr	r3, .L320
 6107 0022 5B68     		ldr	r3, [r3, #4]
 6108 0024 1BB2     		sxth	r3, r3
 6109 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1442:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 6110              		.loc 1 1442 0
 6111 0028 BB1D     		adds	r3, r7, #6
 6112 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6113 002c 3B73     		strb	r3, [r7, #12]
1443:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 6114              		.loc 1 1443 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 151


 6115 002e BB1D     		adds	r3, r7, #6
 6116 0030 0133     		adds	r3, r3, #1
 6117 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6118 0034 FB72     		strb	r3, [r7, #11]
1444:..\src/command_processing.c **** 
1445:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 6119              		.loc 1 1445 0
 6120 0036 07F10803 		add	r3, r7, #8
 6121 003a 0521     		movs	r1, #5
 6122 003c 1846     		mov	r0, r3
 6123 003e FFF7FEFF 		bl	LCRChecksum
 6124 0042 0346     		mov	r3, r0
 6125 0044 7B73     		strb	r3, [r7, #13]
1446:..\src/command_processing.c **** 
1447:..\src/command_processing.c ****     commWrite(packet_data, 6);
 6126              		.loc 1 1447 0
 6127 0046 07F10803 		add	r3, r7, #8
 6128 004a 0621     		movs	r1, #6
 6129 004c 1846     		mov	r0, r3
 6130 004e FFF7FEFF 		bl	commWrite
1448:..\src/command_processing.c **** 
1449:..\src/command_processing.c **** }
 6131              		.loc 1 1449 0
 6132 0052 00BF     		nop
 6133 0054 1037     		adds	r7, r7, #16
 6134              		.cfi_def_cfa_offset 8
 6135 0056 BD46     		mov	sp, r7
 6136              		.cfi_def_cfa_register 13
 6137              		@ sp needed
 6138 0058 80BD     		pop	{r7, pc}
 6139              	.L321:
 6140 005a 00BF     		.align	2
 6141              	.L320:
 6142 005c 00000000 		.word	g_adc_measOld
 6143              		.cfi_endproc
 6144              	.LFE113:
 6145              		.size	cmd_get_emg, .-cmd_get_emg
 6146              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 6147              		.align	2
 6148              		.global	cmd_get_imu_readings
 6149              		.thumb
 6150              		.thumb_func
 6151              		.type	cmd_get_imu_readings, %function
 6152              	cmd_get_imu_readings:
 6153              	.LFB114:
1450:..\src/command_processing.c **** 
1451:..\src/command_processing.c **** void cmd_get_imu_readings(){
 6154              		.loc 1 1451 0
 6155              		.cfi_startproc
 6156              		@ args = 0, pretend = 0, frame = 0
 6157              		@ frame_needed = 1, uses_anonymous_args = 0
 6158              		@ link register save eliminated.
 6159 0000 80B4     		push	{r7}
 6160              		.cfi_def_cfa_offset 4
 6161              		.cfi_offset 7, -4
 6162 0002 00AF     		add	r7, sp, #0
 6163              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 152


1452:..\src/command_processing.c ****  
1453:..\src/command_processing.c **** }
 6164              		.loc 1 1453 0
 6165 0004 00BF     		nop
 6166 0006 BD46     		mov	sp, r7
 6167              		.cfi_def_cfa_register 13
 6168              		@ sp needed
 6169 0008 80BC     		pop	{r7}
 6170              		.cfi_restore 7
 6171              		.cfi_def_cfa_offset 0
 6172 000a 7047     		bx	lr
 6173              		.cfi_endproc
 6174              	.LFE114:
 6175              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 6176              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 6177              		.align	2
 6178              		.global	cmd_get_encoder_map
 6179              		.thumb
 6180              		.thumb_func
 6181              		.type	cmd_get_encoder_map, %function
 6182              	cmd_get_encoder_map:
 6183              	.LFB115:
1454:..\src/command_processing.c **** 
1455:..\src/command_processing.c **** void cmd_get_encoder_map(){
 6184              		.loc 1 1455 0
 6185              		.cfi_startproc
 6186              		@ args = 0, pretend = 0, frame = 0
 6187              		@ frame_needed = 1, uses_anonymous_args = 0
 6188              		@ link register save eliminated.
 6189 0000 80B4     		push	{r7}
 6190              		.cfi_def_cfa_offset 4
 6191              		.cfi_offset 7, -4
 6192 0002 00AF     		add	r7, sp, #0
 6193              		.cfi_def_cfa_register 7
1456:..\src/command_processing.c ****    }
 6194              		.loc 1 1456 0
 6195 0004 00BF     		nop
 6196 0006 BD46     		mov	sp, r7
 6197              		.cfi_def_cfa_register 13
 6198              		@ sp needed
 6199 0008 80BC     		pop	{r7}
 6200              		.cfi_restore 7
 6201              		.cfi_def_cfa_offset 0
 6202 000a 7047     		bx	lr
 6203              		.cfi_endproc
 6204              	.LFE115:
 6205              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 6206              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 6207              		.align	2
 6208              		.global	cmd_get_encoder_raw
 6209              		.thumb
 6210              		.thumb_func
 6211              		.type	cmd_get_encoder_raw, %function
 6212              	cmd_get_encoder_raw:
 6213              	.LFB116:
1457:..\src/command_processing.c **** 
1458:..\src/command_processing.c **** void cmd_get_encoder_raw(){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 153


 6214              		.loc 1 1458 0
 6215              		.cfi_startproc
 6216              		@ args = 0, pretend = 0, frame = 0
 6217              		@ frame_needed = 1, uses_anonymous_args = 0
 6218              		@ link register save eliminated.
 6219 0000 80B4     		push	{r7}
 6220              		.cfi_def_cfa_offset 4
 6221              		.cfi_offset 7, -4
 6222 0002 00AF     		add	r7, sp, #0
 6223              		.cfi_def_cfa_register 7
1459:..\src/command_processing.c ****    }
 6224              		.loc 1 1459 0
 6225 0004 00BF     		nop
 6226 0006 BD46     		mov	sp, r7
 6227              		.cfi_def_cfa_register 13
 6228              		@ sp needed
 6229 0008 80BC     		pop	{r7}
 6230              		.cfi_restore 7
 6231              		.cfi_def_cfa_offset 0
 6232 000a 7047     		bx	lr
 6233              		.cfi_endproc
 6234              	.LFE116:
 6235              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 6236              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 6237              		.align	2
 6238              		.global	cmd_get_ADC_map
 6239              		.thumb
 6240              		.thumb_func
 6241              		.type	cmd_get_ADC_map, %function
 6242              	cmd_get_ADC_map:
 6243              	.LFB117:
1460:..\src/command_processing.c **** 
1461:..\src/command_processing.c **** void cmd_get_ADC_map(){
 6244              		.loc 1 1461 0
 6245              		.cfi_startproc
 6246              		@ args = 0, pretend = 0, frame = 0
 6247              		@ frame_needed = 1, uses_anonymous_args = 0
 6248              		@ link register save eliminated.
 6249 0000 80B4     		push	{r7}
 6250              		.cfi_def_cfa_offset 4
 6251              		.cfi_offset 7, -4
 6252 0002 00AF     		add	r7, sp, #0
 6253              		.cfi_def_cfa_register 7
1462:..\src/command_processing.c ****    }
 6254              		.loc 1 1462 0
 6255 0004 00BF     		nop
 6256 0006 BD46     		mov	sp, r7
 6257              		.cfi_def_cfa_register 13
 6258              		@ sp needed
 6259 0008 80BC     		pop	{r7}
 6260              		.cfi_restore 7
 6261              		.cfi_def_cfa_offset 0
 6262 000a 7047     		bx	lr
 6263              		.cfi_endproc
 6264              	.LFE117:
 6265              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 6266              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 154


 6267              		.align	2
 6268              		.global	cmd_get_ADC_raw
 6269              		.thumb
 6270              		.thumb_func
 6271              		.type	cmd_get_ADC_raw, %function
 6272              	cmd_get_ADC_raw:
 6273              	.LFB118:
1463:..\src/command_processing.c **** 
1464:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 6274              		.loc 1 1464 0
 6275              		.cfi_startproc
 6276              		@ args = 0, pretend = 0, frame = 0
 6277              		@ frame_needed = 1, uses_anonymous_args = 0
 6278              		@ link register save eliminated.
 6279 0000 80B4     		push	{r7}
 6280              		.cfi_def_cfa_offset 4
 6281              		.cfi_offset 7, -4
 6282 0002 00AF     		add	r7, sp, #0
 6283              		.cfi_def_cfa_register 7
1465:..\src/command_processing.c ****    
1466:..\src/command_processing.c **** }
 6284              		.loc 1 1466 0
 6285 0004 00BF     		nop
 6286 0006 BD46     		mov	sp, r7
 6287              		.cfi_def_cfa_register 13
 6288              		@ sp needed
 6289 0008 80BC     		pop	{r7}
 6290              		.cfi_restore 7
 6291              		.cfi_def_cfa_offset 0
 6292 000a 7047     		bx	lr
 6293              		.cfi_endproc
 6294              	.LFE118:
 6295              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 6296              		.section	.text.cmd_get_SD_file,"ax",%progbits
 6297              		.align	2
 6298              		.global	cmd_get_SD_file
 6299              		.thumb
 6300              		.thumb_func
 6301              		.type	cmd_get_SD_file, %function
 6302              	cmd_get_SD_file:
 6303              	.LFB119:
1467:..\src/command_processing.c **** 
1468:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 6304              		.loc 1 1468 0
 6305              		.cfi_startproc
 6306              		@ args = 0, pretend = 0, frame = 20064
 6307              		@ frame_needed = 1, uses_anonymous_args = 0
 6308 0000 80B5     		push	{r7, lr}
 6309              		.cfi_def_cfa_offset 8
 6310              		.cfi_offset 7, -8
 6311              		.cfi_offset 14, -4
 6312 0002 ADF59C4D 		sub	sp, sp, #19968
 6313              		.cfi_def_cfa_offset 19976
 6314 0006 98B0     		sub	sp, sp, #96
 6315              		.cfi_def_cfa_offset 20072
 6316 0008 00AF     		add	r7, sp, #0
 6317              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 155


 6318 000a 0246     		mov	r2, r0
 6319 000c 07F16003 		add	r3, r7, #96
 6320 0010 5A3B     		subs	r3, r3, #90
 6321 0012 1A80     		strh	r2, [r3]	@ movhi
1469:..\src/command_processing.c ****     
1470:..\src/command_processing.c ****     uint8 i = 0;
 6322              		.loc 1 1470 0
 6323 0014 0023     		movs	r3, #0
 6324 0016 07F59C42 		add	r2, r7, #19968
 6325 001a 02F15F02 		add	r2, r2, #95
 6326 001e 1370     		strb	r3, [r2]
1471:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 6327              		.loc 1 1471 0
 6328 0020 0023     		movs	r3, #0
 6329 0022 07F59C42 		add	r2, r7, #19968
 6330 0026 02F12C02 		add	r2, r2, #44
 6331 002a 1360     		str	r3, [r2]
 6332 002c 07F59C43 		add	r3, r7, #19968
 6333 0030 03F13003 		add	r3, r3, #48
 6334 0034 2E22     		movs	r2, #46
 6335 0036 0021     		movs	r1, #0
 6336 0038 1846     		mov	r0, r3
 6337 003a FFF7FEFF 		bl	memset
1472:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 6338              		.loc 1 1472 0
 6339 003e 07F16003 		add	r3, r7, #96
 6340 0042 543B     		subs	r3, r3, #84
 6341 0044 0022     		movs	r2, #0
 6342 0046 1A60     		str	r2, [r3]
 6343 0048 0433     		adds	r3, r3, #4
 6344 004a 44F61C62 		movw	r2, #19996
 6345 004e 0021     		movs	r1, #0
 6346 0050 1846     		mov	r0, r3
 6347 0052 FFF7FEFF 		bl	memset
1473:..\src/command_processing.c ****     strcpy(filename, "");
 6348              		.loc 1 1473 0
 6349 0056 3C4B     		ldr	r3, .L332
 6350 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6351 005a 07F59C42 		add	r2, r7, #19968
 6352 005e 02F12C02 		add	r2, r2, #44
 6353 0062 1370     		strb	r3, [r2]
1474:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 6354              		.loc 1 1474 0
 6355 0064 384B     		ldr	r3, .L332
 6356 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6357 0068 07F16003 		add	r3, r7, #96
 6358 006c 543B     		subs	r3, r3, #84
 6359 006e 1A70     		strb	r2, [r3]
1475:..\src/command_processing.c ****     
1476:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 6360              		.loc 1 1476 0
 6361 0070 0023     		movs	r3, #0
 6362 0072 07F59C42 		add	r2, r7, #19968
 6363 0076 02F15F02 		add	r2, r2, #95
 6364 007a 1370     		strb	r3, [r2]
 6365 007c 1DE0     		b	.L328
 6366              	.L329:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 156


1477:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6367              		.loc 1 1477 0 discriminator 3
 6368 007e 07F59C43 		add	r3, r7, #19968
 6369 0082 03F15F03 		add	r3, r3, #95
 6370 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6371 0088 07F59C42 		add	r2, r7, #19968
 6372 008c 02F12C02 		add	r2, r2, #44
 6373 0090 1344     		add	r3, r3, r2
 6374 0092 07F59C42 		add	r2, r7, #19968
 6375 0096 02F15F02 		add	r2, r2, #95
 6376 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6377 009c 0332     		adds	r2, r2, #3
 6378 009e 2B49     		ldr	r1, .L332+4
 6379 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 6380 00a2 1A70     		strb	r2, [r3]
1476:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6381              		.loc 1 1476 0 discriminator 3
 6382 00a4 07F59C43 		add	r3, r7, #19968
 6383 00a8 03F15F03 		add	r3, r3, #95
 6384 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6385 00ae 0133     		adds	r3, r3, #1
 6386 00b0 07F59C42 		add	r2, r7, #19968
 6387 00b4 02F15F02 		add	r2, r2, #95
 6388 00b8 1370     		strb	r3, [r2]
 6389              	.L328:
1476:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6390              		.loc 1 1476 0 is_stmt 0 discriminator 1
 6391 00ba 07F59C43 		add	r3, r7, #19968
 6392 00be 03F15F03 		add	r3, r3, #95
 6393 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6394 00c4 9AB2     		uxth	r2, r3
 6395 00c6 07F16003 		add	r3, r7, #96
 6396 00ca 5A3B     		subs	r3, r3, #90
 6397 00cc 1B88     		ldrh	r3, [r3]
 6398 00ce 9342     		cmp	r3, r2
 6399 00d0 D5D8     		bhi	.L329
1478:..\src/command_processing.c ****     }
1479:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 6400              		.loc 1 1479 0 is_stmt 1
 6401 00d2 07F59C43 		add	r3, r7, #19968
 6402 00d6 03F15F03 		add	r3, r3, #95
 6403 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6404 00dc 07F59C42 		add	r2, r7, #19968
 6405 00e0 02F12C02 		add	r2, r2, #44
 6406 00e4 1344     		add	r3, r3, r2
 6407 00e6 0022     		movs	r2, #0
 6408 00e8 1A70     		strb	r2, [r3]
1480:..\src/command_processing.c ****      
1481:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1482:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 6409              		.loc 1 1482 0
 6410 00ea 07F59C43 		add	r3, r7, #19968
 6411 00ee 03F12C03 		add	r3, r3, #44
 6412 00f2 1749     		ldr	r1, .L332+8
 6413 00f4 1846     		mov	r0, r3
 6414 00f6 FFF7FEFF 		bl	strcmp
 6415 00fa 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 157


 6416 00fc 002B     		cmp	r3, #0
 6417 00fe 0CD0     		beq	.L330
1483:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 6418              		.loc 1 1483 0
 6419 0100 07F16003 		add	r3, r7, #96
 6420 0104 543B     		subs	r3, r3, #84
 6421 0106 07F59C40 		add	r0, r7, #19968
 6422 010a 00F12C00 		add	r0, r0, #44
 6423 010e 44F62062 		movw	r2, #20000
 6424 0112 1946     		mov	r1, r3
 6425 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 6426 0118 07E0     		b	.L331
 6427              	.L330:
1484:..\src/command_processing.c ****     }
1485:..\src/command_processing.c ****     else {
1486:..\src/command_processing.c ****         //It is the currently open working file
1487:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 6428              		.loc 1 1487 0
 6429 011a 07F16003 		add	r3, r7, #96
 6430 011e 543B     		subs	r3, r3, #84
 6431 0120 44F62061 		movw	r1, #20000
 6432 0124 1846     		mov	r0, r3
 6433 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 6434              	.L331:
1488:..\src/command_processing.c ****     }
1489:..\src/command_processing.c **** 
1490:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
1491:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1492:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 6435              		.loc 1 1492 0
 6436 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1493:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 6437              		.loc 1 1493 0
 6438 012e 07F16003 		add	r3, r7, #96
 6439 0132 543B     		subs	r3, r3, #84
 6440 0134 1846     		mov	r0, r3
 6441 0136 FFF7FEFF 		bl	UART_RS485_PutString
1494:..\src/command_processing.c **** }
 6442              		.loc 1 1494 0
 6443 013a 00BF     		nop
 6444 013c 07F59C47 		add	r7, r7, #19968
 6445 0140 6037     		adds	r7, r7, #96
 6446              		.cfi_def_cfa_offset 8
 6447 0142 BD46     		mov	sp, r7
 6448              		.cfi_def_cfa_register 13
 6449              		@ sp needed
 6450 0144 80BD     		pop	{r7, pc}
 6451              	.L333:
 6452 0146 00BF     		.align	2
 6453              	.L332:
 6454 0148 00000000 		.word	.LC8
 6455 014c 00000000 		.word	g_rx
 6456 0150 00000000 		.word	sdFile
 6457              		.cfi_endproc
 6458              	.LFE119:
 6459              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 6460              		.section	.text.cmd_remove_SD_file,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 158


 6461              		.align	2
 6462              		.global	cmd_remove_SD_file
 6463              		.thumb
 6464              		.thumb_func
 6465              		.type	cmd_remove_SD_file, %function
 6466              	cmd_remove_SD_file:
 6467              	.LFB120:
1495:..\src/command_processing.c **** 
1496:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 6468              		.loc 1 1496 0
 6469              		.cfi_startproc
 6470              		@ args = 0, pretend = 0, frame = 8
 6471              		@ frame_needed = 1, uses_anonymous_args = 0
 6472              		@ link register save eliminated.
 6473 0000 80B4     		push	{r7}
 6474              		.cfi_def_cfa_offset 4
 6475              		.cfi_offset 7, -4
 6476 0002 83B0     		sub	sp, sp, #12
 6477              		.cfi_def_cfa_offset 16
 6478 0004 00AF     		add	r7, sp, #0
 6479              		.cfi_def_cfa_register 7
 6480 0006 0346     		mov	r3, r0
 6481 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1497:..\src/command_processing.c ****   
1498:..\src/command_processing.c **** }
 6482              		.loc 1 1498 0
 6483 000a 00BF     		nop
 6484 000c 0C37     		adds	r7, r7, #12
 6485              		.cfi_def_cfa_offset 4
 6486 000e BD46     		mov	sp, r7
 6487              		.cfi_def_cfa_register 13
 6488              		@ sp needed
 6489 0010 80BC     		pop	{r7}
 6490              		.cfi_restore 7
 6491              		.cfi_def_cfa_offset 0
 6492 0012 7047     		bx	lr
 6493              		.cfi_endproc
 6494              	.LFE120:
 6495              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 6496              		.global	__aeabi_i2f
 6497              		.global	__aeabi_ddiv
 6498              		.global	__aeabi_dmul
 6499              		.global	__aeabi_d2iz
 6500              		.section	.text.vibrotactile_control,"ax",%progbits
 6501              		.align	2
 6502              		.global	vibrotactile_control
 6503              		.thumb
 6504              		.thumb_func
 6505              		.type	vibrotactile_control, %function
 6506              	vibrotactile_control:
 6507              	.LFB121:
1499:..\src/command_processing.c **** 
1500:..\src/command_processing.c **** //==============================================================================
1501:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
1502:..\src/command_processing.c **** //==============================================================================
1503:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1504:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 159


1505:..\src/command_processing.c **** void vibrotactile_control() {
 6508              		.loc 1 1505 0
 6509              		.cfi_startproc
 6510              		@ args = 0, pretend = 0, frame = 8
 6511              		@ frame_needed = 1, uses_anonymous_args = 0
 6512 0000 90B5     		push	{r4, r7, lr}
 6513              		.cfi_def_cfa_offset 12
 6514              		.cfi_offset 4, -12
 6515              		.cfi_offset 7, -8
 6516              		.cfi_offset 14, -4
 6517 0002 83B0     		sub	sp, sp, #12
 6518              		.cfi_def_cfa_offset 24
 6519 0004 00AF     		add	r7, sp, #0
 6520              		.cfi_def_cfa_register 7
1506:..\src/command_processing.c ****     
1507:..\src/command_processing.c ****     uint8 i;
1508:..\src/command_processing.c ****     
1509:..\src/command_processing.c ****     commReadIMUFromSH();    
 6521              		.loc 1 1509 0
 6522 0006 FFF7FEFF 		bl	commReadIMUFromSH
1510:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1511:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1512:..\src/command_processing.c ****     
1513:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 6523              		.loc 1 1513 0
 6524 000a 4B4B     		ldr	r3, .L343
 6525 000c B3F90030 		ldrsh	r3, [r3]
 6526 0010 1846     		mov	r0, r3
 6527 0012 FFF7FEFF 		bl	__aeabi_i2f
 6528 0016 0346     		mov	r3, r0
 6529 0018 1846     		mov	r0, r3
 6530 001a FFF7FEFF 		bl	__aeabi_f2d
 6531 001e 4FF00002 		mov	r2, #0
 6532 0022 464B     		ldr	r3, .L343+4
 6533 0024 FFF7FEFF 		bl	__aeabi_ddiv
 6534 0028 0346     		mov	r3, r0
 6535 002a 0C46     		mov	r4, r1
 6536 002c 1846     		mov	r0, r3
 6537 002e 2146     		mov	r1, r4
 6538 0030 4FF00002 		mov	r2, #0
 6539 0034 424B     		ldr	r3, .L343+8
 6540 0036 FFF7FEFF 		bl	__aeabi_dmul
 6541 003a 0346     		mov	r3, r0
 6542 003c 0C46     		mov	r4, r1
 6543 003e 1846     		mov	r0, r3
 6544 0040 2146     		mov	r1, r4
 6545 0042 FFF7FEFF 		bl	__aeabi_d2iz
 6546 0046 0346     		mov	r3, r0
 6547 0048 1AB2     		sxth	r2, r3
 6548 004a 3B4B     		ldr	r3, .L343
 6549 004c 1A80     		strh	r2, [r3]	@ movhi
1514:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_VT_PWM) PWM_IMU_1 = MAX_VT_PWM;
 6550              		.loc 1 1514 0
 6551 004e 3A4B     		ldr	r3, .L343
 6552 0050 B3F90030 		ldrsh	r3, [r3]
 6553 0054 642B     		cmp	r3, #100
 6554 0056 02DD     		ble	.L336
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 160


 6555              		.loc 1 1514 0 is_stmt 0 discriminator 1
 6556 0058 374B     		ldr	r3, .L343
 6557 005a 6422     		movs	r2, #100
 6558 005c 1A80     		strh	r2, [r3]	@ movhi
 6559              	.L336:
1515:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_VT_PWM) PWM_IMU_1 = 0;
 6560              		.loc 1 1515 0 is_stmt 1
 6561 005e 364B     		ldr	r3, .L343
 6562 0060 B3F90030 		ldrsh	r3, [r3]
 6563 0064 092B     		cmp	r3, #9
 6564 0066 02DC     		bgt	.L337
 6565              		.loc 1 1515 0 is_stmt 0 discriminator 1
 6566 0068 334B     		ldr	r3, .L343
 6567 006a 0022     		movs	r2, #0
 6568 006c 1A80     		strh	r2, [r3]	@ movhi
 6569              	.L337:
1516:..\src/command_processing.c ****     
1517:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 6570              		.loc 1 1517 0 is_stmt 1
 6571 006e 354B     		ldr	r3, .L343+12
 6572 0070 B3F90030 		ldrsh	r3, [r3]
 6573 0074 1846     		mov	r0, r3
 6574 0076 FFF7FEFF 		bl	__aeabi_i2f
 6575 007a 0346     		mov	r3, r0
 6576 007c 1846     		mov	r0, r3
 6577 007e FFF7FEFF 		bl	__aeabi_f2d
 6578 0082 4FF00002 		mov	r2, #0
 6579 0086 2D4B     		ldr	r3, .L343+4
 6580 0088 FFF7FEFF 		bl	__aeabi_ddiv
 6581 008c 0346     		mov	r3, r0
 6582 008e 0C46     		mov	r4, r1
 6583 0090 1846     		mov	r0, r3
 6584 0092 2146     		mov	r1, r4
 6585 0094 4FF00002 		mov	r2, #0
 6586 0098 294B     		ldr	r3, .L343+8
 6587 009a FFF7FEFF 		bl	__aeabi_dmul
 6588 009e 0346     		mov	r3, r0
 6589 00a0 0C46     		mov	r4, r1
 6590 00a2 1846     		mov	r0, r3
 6591 00a4 2146     		mov	r1, r4
 6592 00a6 FFF7FEFF 		bl	__aeabi_d2iz
 6593 00aa 0346     		mov	r3, r0
 6594 00ac 1AB2     		sxth	r2, r3
 6595 00ae 254B     		ldr	r3, .L343+12
 6596 00b0 1A80     		strh	r2, [r3]	@ movhi
1518:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_VT_PWM) PWM_IMU_2 = MAX_VT_PWM;
 6597              		.loc 1 1518 0
 6598 00b2 244B     		ldr	r3, .L343+12
 6599 00b4 B3F90030 		ldrsh	r3, [r3]
 6600 00b8 642B     		cmp	r3, #100
 6601 00ba 02DD     		ble	.L338
 6602              		.loc 1 1518 0 is_stmt 0 discriminator 1
 6603 00bc 214B     		ldr	r3, .L343+12
 6604 00be 6422     		movs	r2, #100
 6605 00c0 1A80     		strh	r2, [r3]	@ movhi
 6606              	.L338:
1519:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_VT_PWM) PWM_IMU_2 = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 161


 6607              		.loc 1 1519 0 is_stmt 1
 6608 00c2 204B     		ldr	r3, .L343+12
 6609 00c4 B3F90030 		ldrsh	r3, [r3]
 6610 00c8 092B     		cmp	r3, #9
 6611 00ca 02DC     		bgt	.L339
 6612              		.loc 1 1519 0 is_stmt 0 discriminator 1
 6613 00cc 1D4B     		ldr	r3, .L343+12
 6614 00ce 0022     		movs	r2, #0
 6615 00d0 1A80     		strh	r2, [r3]	@ movhi
 6616              	.L339:
1520:..\src/command_processing.c ****     
1521:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6617              		.loc 1 1521 0 is_stmt 1
 6618 00d2 194B     		ldr	r3, .L343
 6619 00d4 B3F90030 		ldrsh	r3, [r3]
 6620 00d8 DAB2     		uxtb	r2, r3
 6621 00da 1B4B     		ldr	r3, .L343+16
 6622 00dc 1A70     		strb	r2, [r3]
1522:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6623              		.loc 1 1522 0
 6624 00de 194B     		ldr	r3, .L343+12
 6625 00e0 B3F90030 		ldrsh	r3, [r3]
 6626 00e4 DAB2     		uxtb	r2, r3
 6627 00e6 184B     		ldr	r3, .L343+16
 6628 00e8 5A70     		strb	r2, [r3, #1]
1523:..\src/command_processing.c ****     
1524:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6629              		.loc 1 1524 0
 6630 00ea 134B     		ldr	r3, .L343
 6631 00ec B3F90030 		ldrsh	r3, [r3]
 6632 00f0 DAB2     		uxtb	r2, r3
 6633 00f2 154B     		ldr	r3, .L343+16
 6634 00f4 1A70     		strb	r2, [r3]
1525:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6635              		.loc 1 1525 0
 6636 00f6 134B     		ldr	r3, .L343+12
 6637 00f8 B3F90030 		ldrsh	r3, [r3]
 6638 00fc DAB2     		uxtb	r2, r3
 6639 00fe 124B     		ldr	r3, .L343+16
 6640 0100 5A70     		strb	r2, [r3, #1]
1526:..\src/command_processing.c **** 
1527:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 6641              		.loc 1 1527 0
 6642 0102 0023     		movs	r3, #0
 6643 0104 FB71     		strb	r3, [r7, #7]
 6644 0106 0FE0     		b	.L340
 6645              	.L342:
1528:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6646              		.loc 1 1528 0
 6647 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6648 010a 1846     		mov	r0, r3
 6649 010c FFF7FEFF 		bl	vibrotactile_control_generic
1529:..\src/command_processing.c ****         
1530:..\src/command_processing.c ****         if (interrupt_flag){
 6650              		.loc 1 1530 0
 6651 0110 0E4B     		ldr	r3, .L343+20
 6652 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 162


 6653 0114 002B     		cmp	r3, #0
 6654 0116 04D0     		beq	.L341
1531:..\src/command_processing.c ****             interrupt_flag = FALSE;
 6655              		.loc 1 1531 0
 6656 0118 0C4B     		ldr	r3, .L343+20
 6657 011a 0022     		movs	r2, #0
 6658 011c 1A70     		strb	r2, [r3]
1532:..\src/command_processing.c ****             interrupt_manager();
 6659              		.loc 1 1532 0
 6660 011e FFF7FEFF 		bl	interrupt_manager
 6661              	.L341:
1527:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6662              		.loc 1 1527 0 discriminator 2
 6663 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6664 0124 0133     		adds	r3, r3, #1
 6665 0126 FB71     		strb	r3, [r7, #7]
 6666              	.L340:
1527:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6667              		.loc 1 1527 0 is_stmt 0 discriminator 1
 6668 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6669 012a 012B     		cmp	r3, #1
 6670 012c ECD9     		bls	.L342
1533:..\src/command_processing.c ****         }
1534:..\src/command_processing.c ****     } 
1535:..\src/command_processing.c **** }
 6671              		.loc 1 1535 0 is_stmt 1
 6672 012e 00BF     		nop
 6673 0130 0C37     		adds	r7, r7, #12
 6674              		.cfi_def_cfa_offset 12
 6675 0132 BD46     		mov	sp, r7
 6676              		.cfi_def_cfa_register 13
 6677              		@ sp needed
 6678 0134 90BD     		pop	{r4, r7, pc}
 6679              	.L344:
 6680 0136 00BF     		.align	2
 6681              	.L343:
 6682 0138 00000000 		.word	PWM_IMU_1
 6683 013c 00004940 		.word	1078525952
 6684 0140 00003E40 		.word	1077805056
 6685 0144 00000000 		.word	PWM_IMU_2
 6686 0148 00000000 		.word	VT_ref
 6687 014c 00000000 		.word	interrupt_flag
 6688              		.cfi_endproc
 6689              	.LFE121:
 6690              		.size	vibrotactile_control, .-vibrotactile_control
 6691              		.global	__aeabi_i2d
 6692              		.global	__aeabi_dsub
 6693              		.global	__aeabi_dadd
 6694              		.global	__aeabi_fcmpgt
 6695              		.global	__aeabi_f2iz
 6696              		.global	__aeabi_fmul
 6697              		.section	.text.air_chambers_control,"ax",%progbits
 6698              		.align	2
 6699              		.global	air_chambers_control
 6700              		.thumb
 6701              		.thumb_func
 6702              		.type	air_chambers_control, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 163


 6703              	air_chambers_control:
 6704              	.LFB122:
1536:..\src/command_processing.c **** 
1537:..\src/command_processing.c **** 
1538:..\src/command_processing.c **** //==============================================================================
1539:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1540:..\src/command_processing.c **** //==============================================================================
1541:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1542:..\src/command_processing.c **** 
1543:..\src/command_processing.c **** 
1544:..\src/command_processing.c **** void air_chambers_control() {
 6705              		.loc 1 1544 0
 6706              		.cfi_startproc
 6707              		@ args = 0, pretend = 0, frame = 16
 6708              		@ frame_needed = 1, uses_anonymous_args = 0
 6709 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 6710              		.cfi_def_cfa_offset 24
 6711              		.cfi_offset 4, -24
 6712              		.cfi_offset 5, -20
 6713              		.cfi_offset 7, -16
 6714              		.cfi_offset 8, -12
 6715              		.cfi_offset 9, -8
 6716              		.cfi_offset 14, -4
 6717 0004 84B0     		sub	sp, sp, #16
 6718              		.cfi_def_cfa_offset 40
 6719 0006 00AF     		add	r7, sp, #0
 6720              		.cfi_def_cfa_register 7
1545:..\src/command_processing.c **** 
1546:..\src/command_processing.c ****     int16 curr_diff;
1547:..\src/command_processing.c ****     int32 pressure_reference;
1548:..\src/command_processing.c ****     int32 err_pressure;
1549:..\src/command_processing.c ****     int32 valve_command;
1550:..\src/command_processing.c ****     int16 x_value;
1551:..\src/command_processing.c **** 
1552:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1553:..\src/command_processing.c ****     
1554:..\src/command_processing.c ****     commReadResCurrFromSH();
 6721              		.loc 1 1554 0
 6722 0008 FFF7FEFF 		bl	commReadResCurrFromSH
1555:..\src/command_processing.c **** 
1556:..\src/command_processing.c ****     // Compute pressure reference
1557:..\src/command_processing.c **** 
1558:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 6723              		.loc 1 1558 0
 6724 000c B7F90430 		ldrsh	r3, [r7, #4]
 6725 0010 1846     		mov	r0, r3
 6726 0012 FFF7FEFF 		bl	__aeabi_i2d
 6727 0016 4FF00002 		mov	r2, #0
 6728 001a 574B     		ldr	r3, .L355
 6729 001c FFF7FEFF 		bl	__aeabi_dsub
 6730 0020 0346     		mov	r3, r0
 6731 0022 0C46     		mov	r4, r1
 6732 0024 1846     		mov	r0, r3
 6733 0026 2146     		mov	r1, r4
 6734 0028 FFF7FEFF 		bl	__aeabi_d2iz
 6735 002c 0346     		mov	r3, r0
 6736 002e FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 164


1559:..\src/command_processing.c ****     if (x_value < 0)
 6737              		.loc 1 1559 0
 6738 0030 B7F90630 		ldrsh	r3, [r7, #6]
 6739 0034 002B     		cmp	r3, #0
 6740 0036 01DA     		bge	.L346
1560:..\src/command_processing.c ****         x_value = 0;
 6741              		.loc 1 1560 0
 6742 0038 0023     		movs	r3, #0
 6743 003a FB80     		strh	r3, [r7, #6]	@ movhi
 6744              	.L346:
1561:..\src/command_processing.c ****     
1562:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 6745              		.loc 1 1562 0
 6746 003c B7F90630 		ldrsh	r3, [r7, #6]
 6747 0040 1846     		mov	r0, r3
 6748 0042 FFF7FEFF 		bl	__aeabi_i2d
 6749 0046 4FF00002 		mov	r2, #0
 6750 004a 4C4B     		ldr	r3, .L355+4
 6751 004c FFF7FEFF 		bl	__aeabi_dmul
 6752 0050 0346     		mov	r3, r0
 6753 0052 0C46     		mov	r4, r1
 6754 0054 2546     		mov	r5, r4
 6755 0056 1C46     		mov	r4, r3
 6756 0058 B7F90630 		ldrsh	r3, [r7, #6]
 6757 005c 1846     		mov	r0, r3
 6758 005e FFF7FEFF 		bl	__aeabi_i2d
 6759 0062 0246     		mov	r2, r0
 6760 0064 0B46     		mov	r3, r1
 6761 0066 2046     		mov	r0, r4
 6762 0068 2946     		mov	r1, r5
 6763 006a FFF7FEFF 		bl	__aeabi_dmul
 6764 006e 0346     		mov	r3, r0
 6765 0070 0C46     		mov	r4, r1
 6766 0072 2546     		mov	r5, r4
 6767 0074 1C46     		mov	r4, r3
 6768 0076 424B     		ldr	r3, .L355+8
 6769 0078 1B6D     		ldr	r3, [r3, #80]
 6770 007a 1846     		mov	r0, r3
 6771 007c FFF7FEFF 		bl	__aeabi_i2d
 6772 0080 4FF00002 		mov	r2, #0
 6773 0084 3F4B     		ldr	r3, .L355+12
 6774 0086 FFF7FEFF 		bl	__aeabi_dmul
 6775 008a 0246     		mov	r2, r0
 6776 008c 0B46     		mov	r3, r1
 6777 008e 9046     		mov	r8, r2
 6778 0090 9946     		mov	r9, r3
 6779 0092 B7F90630 		ldrsh	r3, [r7, #6]
 6780 0096 1846     		mov	r0, r3
 6781 0098 FFF7FEFF 		bl	__aeabi_i2d
 6782 009c 0246     		mov	r2, r0
 6783 009e 0B46     		mov	r3, r1
 6784 00a0 4046     		mov	r0, r8
 6785 00a2 4946     		mov	r1, r9
 6786 00a4 FFF7FEFF 		bl	__aeabi_dmul
 6787 00a8 0246     		mov	r2, r0
 6788 00aa 0B46     		mov	r3, r1
 6789 00ac 2046     		mov	r0, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 165


 6790 00ae 2946     		mov	r1, r5
 6791 00b0 FFF7FEFF 		bl	__aeabi_dadd
 6792 00b4 0346     		mov	r3, r0
 6793 00b6 0C46     		mov	r4, r1
 6794 00b8 1846     		mov	r0, r3
 6795 00ba 2146     		mov	r1, r4
 6796 00bc FFF7FEFF 		bl	__aeabi_d2iz
 6797 00c0 0146     		mov	r1, r0
 6798 00c2 2F4B     		ldr	r3, .L355+8
 6799 00c4 1B6D     		ldr	r3, [r3, #80]
 6800 00c6 2E4A     		ldr	r2, .L355+8
 6801 00c8 126D     		ldr	r2, [r2, #80]
 6802 00ca 02FB03F3 		mul	r3, r2, r3
 6803 00ce 91FBF3F3 		sdiv	r3, r1, r3
 6804 00d2 FB60     		str	r3, [r7, #12]
1563:..\src/command_processing.c ****     if (pressure_reference < 0)
 6805              		.loc 1 1563 0
 6806 00d4 FB68     		ldr	r3, [r7, #12]
 6807 00d6 002B     		cmp	r3, #0
 6808 00d8 01DA     		bge	.L347
1564:..\src/command_processing.c ****         pressure_reference = 0;
 6809              		.loc 1 1564 0
 6810 00da 0023     		movs	r3, #0
 6811 00dc FB60     		str	r3, [r7, #12]
 6812              	.L347:
1565:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 6813              		.loc 1 1565 0
 6814 00de F868     		ldr	r0, [r7, #12]
 6815 00e0 FFF7FEFF 		bl	__aeabi_i2f
 6816 00e4 0246     		mov	r2, r0
 6817 00e6 264B     		ldr	r3, .L355+8
 6818 00e8 5B6D     		ldr	r3, [r3, #84]	@ float
 6819 00ea 1946     		mov	r1, r3
 6820 00ec 1046     		mov	r0, r2
 6821 00ee FFF7FEFF 		bl	__aeabi_fcmpgt
 6822 00f2 0346     		mov	r3, r0
 6823 00f4 002B     		cmp	r3, #0
 6824 00f6 06D0     		beq	.L348
1566:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 6825              		.loc 1 1566 0
 6826 00f8 214B     		ldr	r3, .L355+8
 6827 00fa 5B6D     		ldr	r3, [r3, #84]	@ float
 6828 00fc 1846     		mov	r0, r3
 6829 00fe FFF7FEFF 		bl	__aeabi_f2iz
 6830 0102 0346     		mov	r3, r0
 6831 0104 FB60     		str	r3, [r7, #12]
 6832              	.L348:
1567:..\src/command_processing.c ****     
1568:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 6833              		.loc 1 1568 0
 6834 0106 204B     		ldr	r3, .L355+16
 6835 0108 1B68     		ldr	r3, [r3]
 6836 010a FA68     		ldr	r2, [r7, #12]
 6837 010c D31A     		subs	r3, r2, r3
 6838 010e 3B60     		str	r3, [r7]
1569:..\src/command_processing.c **** 
1570:..\src/command_processing.c ****     if (x_value <= 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 166


 6839              		.loc 1 1570 0
 6840 0110 B7F90630 		ldrsh	r3, [r7, #6]
 6841 0114 002B     		cmp	r3, #0
 6842 0116 02DC     		bgt	.L350
1571:..\src/command_processing.c ****         //i.e the hand is opening
1572:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 6843              		.loc 1 1572 0
 6844 0118 0023     		movs	r3, #0
 6845 011a BB60     		str	r3, [r7, #8]
 6846 011c 01E0     		b	.L351
 6847              	.L350:
1573:..\src/command_processing.c ****     }
1574:..\src/command_processing.c ****     else {
1575:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1576:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1577:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1578:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
 6848              		.loc 1 1578 0
 6849 011e 0123     		movs	r3, #1
 6850 0120 BB60     		str	r3, [r7, #8]
 6851              	.L351:
1579:..\src/command_processing.c ****     }
1580:..\src/command_processing.c ****     
1581:..\src/command_processing.c ****     // Pump control*/
1582:..\src/command_processing.c ****    
1583:..\src/command_processing.c ****     Pump_refNew = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 6852              		.loc 1 1583 0
 6853 0122 174B     		ldr	r3, .L355+8
 6854 0124 9C6D     		ldr	r4, [r3, #88]	@ float
 6855 0126 3868     		ldr	r0, [r7]
 6856 0128 FFF7FEFF 		bl	__aeabi_i2f
 6857 012c 0346     		mov	r3, r0
 6858 012e 1946     		mov	r1, r3
 6859 0130 2046     		mov	r0, r4
 6860 0132 FFF7FEFF 		bl	__aeabi_fmul
 6861 0136 0346     		mov	r3, r0
 6862 0138 1846     		mov	r0, r3
 6863 013a FFF7FEFF 		bl	__aeabi_f2iz
 6864 013e 0346     		mov	r3, r0
 6865 0140 DAB2     		uxtb	r2, r3
 6866 0142 124B     		ldr	r3, .L355+20
 6867 0144 1A70     		strb	r2, [r3]
1584:..\src/command_processing.c **** 
1585:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1586:..\src/command_processing.c ****     
1587:..\src/command_processing.c ****     // Limit output voltage
1588:..\src/command_processing.c ****     if (Pump_refNew > MAX_PUMP_PWM) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 6868              		.loc 1 1588 0
 6869 0146 114B     		ldr	r3, .L355+20
 6870 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6871 014a 502B     		cmp	r3, #80
 6872 014c 02D9     		bls	.L352
1589:..\src/command_processing.c ****         Pump_refNew = MAX_PUMP_PWM; // 80
 6873              		.loc 1 1589 0
 6874 014e 0F4B     		ldr	r3, .L355+20
 6875 0150 5022     		movs	r2, #80
 6876 0152 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 167


 6877              	.L352:
1590:..\src/command_processing.c ****     if (Pump_refNew < MIN_PUMP_PWM)
 6878              		.loc 1 1590 0
 6879 0154 0D4B     		ldr	r3, .L355+20
 6880 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6881 0158 132B     		cmp	r3, #19
 6882 015a 02D8     		bhi	.L353
1591:..\src/command_processing.c ****         Pump_refNew = 0;
 6883              		.loc 1 1591 0
 6884 015c 0B4B     		ldr	r3, .L355+20
 6885 015e 0022     		movs	r2, #0
 6886 0160 1A70     		strb	r2, [r3]
 6887              	.L353:
1592:..\src/command_processing.c ****         
1593:..\src/command_processing.c ****     VALVE_Write(valve_command);
 6888              		.loc 1 1593 0
 6889 0162 BB68     		ldr	r3, [r7, #8]
 6890 0164 DBB2     		uxtb	r3, r3
 6891 0166 1846     		mov	r0, r3
 6892 0168 FFF7FEFF 		bl	VALVE_Write
1594:..\src/command_processing.c ****     
1595:..\src/command_processing.c ****     
1596:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1597:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1598:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1599:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1600:..\src/command_processing.c **** 
1601:..\src/command_processing.c **** }
 6893              		.loc 1 1601 0
 6894 016c 00BF     		nop
 6895 016e 1037     		adds	r7, r7, #16
 6896              		.cfi_def_cfa_offset 24
 6897 0170 BD46     		mov	sp, r7
 6898              		.cfi_def_cfa_register 13
 6899              		@ sp needed
 6900 0172 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 6901              	.L356:
 6902 0176 00BF     		.align	2
 6903              	.L355:
 6904 0178 00004940 		.word	1078525952
 6905 017c 00003EC0 		.word	-1069678592
 6906 0180 00000000 		.word	c_mem
 6907 0184 00804B40 		.word	1078689792
 6908 0188 00000000 		.word	pressure_value
 6909 018c 00000000 		.word	Pump_refNew
 6910              		.cfi_endproc
 6911              	.LFE122:
 6912              		.size	air_chambers_control, .-air_chambers_control
 6913              		.section	.text.pump_control,"ax",%progbits
 6914              		.align	2
 6915              		.global	pump_control
 6916              		.thumb
 6917              		.thumb_func
 6918              		.type	pump_control, %function
 6919              	pump_control:
 6920              	.LFB123:
1602:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 168


1603:..\src/command_processing.c **** void pump_control() {
 6921              		.loc 1 1603 0
 6922              		.cfi_startproc
 6923              		@ args = 0, pretend = 0, frame = 0
 6924              		@ frame_needed = 1, uses_anonymous_args = 0
 6925 0000 80B5     		push	{r7, lr}
 6926              		.cfi_def_cfa_offset 8
 6927              		.cfi_offset 7, -8
 6928              		.cfi_offset 14, -4
 6929 0002 00AF     		add	r7, sp, #0
 6930              		.cfi_def_cfa_register 7
1604:..\src/command_processing.c ****     if (Pump_ref > 100)
 6931              		.loc 1 1604 0
 6932 0004 064B     		ldr	r3, .L359
 6933 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6934 0008 642B     		cmp	r3, #100
 6935 000a 02D9     		bls	.L358
1605:..\src/command_processing.c ****         Pump_ref = 100;
 6936              		.loc 1 1605 0
 6937 000c 044B     		ldr	r3, .L359
 6938 000e 6422     		movs	r2, #100
 6939 0010 1A70     		strb	r2, [r3]
 6940              	.L358:
1606:..\src/command_processing.c ****     PWM_PUMP_WriteCompare(Pump_ref);
 6941              		.loc 1 1606 0
 6942 0012 034B     		ldr	r3, .L359
 6943 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6944 0016 1846     		mov	r0, r3
 6945 0018 FFF7FEFF 		bl	PWM_PUMP_WriteCompare
1607:..\src/command_processing.c **** }
 6946              		.loc 1 1607 0
 6947 001c 00BF     		nop
 6948 001e 80BD     		pop	{r7, pc}
 6949              	.L360:
 6950              		.align	2
 6951              	.L359:
 6952 0020 00000000 		.word	Pump_ref
 6953              		.cfi_endproc
 6954              	.LFE123:
 6955              		.size	pump_control, .-pump_control
 6956              		.section	.text.VT_control,"ax",%progbits
 6957              		.align	2
 6958              		.global	VT_control
 6959              		.thumb
 6960              		.thumb_func
 6961              		.type	VT_control, %function
 6962              	VT_control:
 6963              	.LFB124:
1608:..\src/command_processing.c **** 
1609:..\src/command_processing.c **** void VT_control() {
 6964              		.loc 1 1609 0
 6965              		.cfi_startproc
 6966              		@ args = 0, pretend = 0, frame = 0
 6967              		@ frame_needed = 1, uses_anonymous_args = 0
 6968 0000 80B5     		push	{r7, lr}
 6969              		.cfi_def_cfa_offset 8
 6970              		.cfi_offset 7, -8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 169


 6971              		.cfi_offset 14, -4
 6972 0002 00AF     		add	r7, sp, #0
 6973              		.cfi_def_cfa_register 7
1610:..\src/command_processing.c ****     if (VT_ref[0] > 100)
 6974              		.loc 1 1610 0
 6975 0004 0D4B     		ldr	r3, .L364
 6976 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6977 0008 642B     		cmp	r3, #100
 6978 000a 02D9     		bls	.L362
1611:..\src/command_processing.c ****         VT_ref[0] = 100;
 6979              		.loc 1 1611 0
 6980 000c 0B4B     		ldr	r3, .L364
 6981 000e 6422     		movs	r2, #100
 6982 0010 1A70     		strb	r2, [r3]
 6983              	.L362:
1612:..\src/command_processing.c ****     PWM_VT_WriteCompare1(VT_ref[0]);
 6984              		.loc 1 1612 0
 6985 0012 0A4B     		ldr	r3, .L364
 6986 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6987 0016 9BB2     		uxth	r3, r3
 6988 0018 1846     		mov	r0, r3
 6989 001a FFF7FEFF 		bl	PWM_VT_WriteCompare1
1613:..\src/command_processing.c ****     if (VT_ref[1] > 100)
 6990              		.loc 1 1613 0
 6991 001e 074B     		ldr	r3, .L364
 6992 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6993 0022 642B     		cmp	r3, #100
 6994 0024 02D9     		bls	.L363
1614:..\src/command_processing.c ****         VT_ref[1] = 100;
 6995              		.loc 1 1614 0
 6996 0026 054B     		ldr	r3, .L364
 6997 0028 6422     		movs	r2, #100
 6998 002a 5A70     		strb	r2, [r3, #1]
 6999              	.L363:
1615:..\src/command_processing.c ****     PWM_VT_WriteCompare2(VT_ref[1]);
 7000              		.loc 1 1615 0
 7001 002c 034B     		ldr	r3, .L364
 7002 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7003 0030 9BB2     		uxth	r3, r3
 7004 0032 1846     		mov	r0, r3
 7005 0034 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1616:..\src/command_processing.c **** }
 7006              		.loc 1 1616 0
 7007 0038 00BF     		nop
 7008 003a 80BD     		pop	{r7, pc}
 7009              	.L365:
 7010              		.align	2
 7011              	.L364:
 7012 003c 00000000 		.word	VT_ref
 7013              		.cfi_endproc
 7014              	.LFE124:
 7015              		.size	VT_control, .-VT_control
 7016              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 7017              		.align	2
 7018              		.global	emg_activation_velocity_fsm
 7019              		.thumb
 7020              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 170


 7021              		.type	emg_activation_velocity_fsm, %function
 7022              	emg_activation_velocity_fsm:
 7023              	.LFB125:
1617:..\src/command_processing.c **** //==============================================================================
1618:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1619:..\src/command_processing.c **** //==============================================================================
1620:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1621:..\src/command_processing.c **** 
1622:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 7024              		.loc 1 1622 0
 7025              		.cfi_startproc
 7026              		@ args = 0, pretend = 0, frame = 0
 7027              		@ frame_needed = 1, uses_anonymous_args = 0
 7028              		@ link register save eliminated.
 7029 0000 80B4     		push	{r7}
 7030              		.cfi_def_cfa_offset 4
 7031              		.cfi_offset 7, -4
 7032 0002 00AF     		add	r7, sp, #0
 7033              		.cfi_def_cfa_register 7
1623:..\src/command_processing.c ****     
1624:..\src/command_processing.c **** return 0;
 7034              		.loc 1 1624 0
 7035 0004 0023     		movs	r3, #0
1625:..\src/command_processing.c **** }
 7036              		.loc 1 1625 0
 7037 0006 1846     		mov	r0, r3
 7038 0008 BD46     		mov	sp, r7
 7039              		.cfi_def_cfa_register 13
 7040              		@ sp needed
 7041 000a 80BC     		pop	{r7}
 7042              		.cfi_restore 7
 7043              		.cfi_def_cfa_offset 0
 7044 000c 7047     		bx	lr
 7045              		.cfi_endproc
 7046              	.LFE125:
 7047              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 7048 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 7049              		.align	2
 7050              		.global	otbk_act_wrist_control
 7051              		.thumb
 7052              		.thumb_func
 7053              		.type	otbk_act_wrist_control, %function
 7054              	otbk_act_wrist_control:
 7055              	.LFB126:
1626:..\src/command_processing.c **** 
1627:..\src/command_processing.c **** //==============================================================================
1628:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1629:..\src/command_processing.c **** //==============================================================================
1630:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1631:..\src/command_processing.c **** 
1632:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 7056              		.loc 1 1632 0
 7057              		.cfi_startproc
 7058              		@ args = 0, pretend = 0, frame = 8
 7059              		@ frame_needed = 1, uses_anonymous_args = 0
 7060              		@ link register save eliminated.
 7061 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 171


 7062              		.cfi_def_cfa_offset 4
 7063              		.cfi_offset 7, -4
 7064 0002 83B0     		sub	sp, sp, #12
 7065              		.cfi_def_cfa_offset 16
 7066 0004 00AF     		add	r7, sp, #0
 7067              		.cfi_def_cfa_register 7
 7068 0006 7860     		str	r0, [r7, #4]
1633:..\src/command_processing.c ****     
1634:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1635:..\src/command_processing.c ****     
1636:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1637:..\src/command_processing.c ****         
1638:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
1639:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1640:..\src/command_processing.c ****     switch (fsm_state){
1641:..\src/command_processing.c ****         case RELAX_STATE:
1642:..\src/command_processing.c ****             
1643:..\src/command_processing.c ****             // Wrist stop
1644:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1645:..\src/command_processing.c ****             
1646:..\src/command_processing.c ****             // Softhand stop
1647:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1648:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1649:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1650:..\src/command_processing.c ****             
1651:..\src/command_processing.c ****             break;
1652:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1653:..\src/command_processing.c ****                 
1654:..\src/command_processing.c ****             break;
1655:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1656:..\src/command_processing.c ****             
1657:..\src/command_processing.c ****             // Wrist movement
1658:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1659:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1660:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1661:..\src/command_processing.c ****                 }
1662:..\src/command_processing.c ****                 else {
1663:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1664:..\src/command_processing.c ****                 }
1665:..\src/command_processing.c ****             }
1666:..\src/command_processing.c ****             else {
1667:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1668:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1669:..\src/command_processing.c ****                 }
1670:..\src/command_processing.c ****                 else {
1671:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1672:..\src/command_processing.c ****                 }
1673:..\src/command_processing.c ****             }
1674:..\src/command_processing.c ****             
1675:..\src/command_processing.c ****             // Softhand stop
1676:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1677:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1678:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1679:..\src/command_processing.c ****             
1680:..\src/command_processing.c ****             break;
1681:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1682:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 172


1683:..\src/command_processing.c ****             // Wrist stop
1684:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1685:..\src/command_processing.c ****             
1686:..\src/command_processing.c ****             // SoftHand movement
1687:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1688:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1689:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1690:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1691:..\src/command_processing.c ****             
1692:..\src/command_processing.c ****             break;
1693:..\src/command_processing.c ****     }
1694:..\src/command_processing.c ****         
1695:..\src/command_processing.c ****     // Limit output voltage
1696:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1697:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1698:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1699:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1700:..\src/command_processing.c ****     
1701:..\src/command_processing.c **** #endif
1702:..\src/command_processing.c **** }
 7069              		.loc 1 1702 0
 7070 0008 00BF     		nop
 7071 000a 0C37     		adds	r7, r7, #12
 7072              		.cfi_def_cfa_offset 4
 7073 000c BD46     		mov	sp, r7
 7074              		.cfi_def_cfa_register 13
 7075              		@ sp needed
 7076 000e 80BC     		pop	{r7}
 7077              		.cfi_restore 7
 7078              		.cfi_def_cfa_offset 0
 7079 0010 7047     		bx	lr
 7080              		.cfi_endproc
 7081              	.LFE126:
 7082              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 7083 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 7084              		.align	2
 7085              		.global	drive_slave
 7086              		.thumb
 7087              		.thumb_func
 7088              		.type	drive_slave, %function
 7089              	drive_slave:
 7090              	.LFB127:
1703:..\src/command_processing.c **** 
1704:..\src/command_processing.c **** //==============================================================================
1705:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1706:..\src/command_processing.c **** //==============================================================================
1707:..\src/command_processing.c ****  
1708:..\src/command_processing.c **** //==============================================================================
1709:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1710:..\src/command_processing.c **** //==============================================================================
1711:..\src/command_processing.c ****  
1712:..\src/command_processing.c ****  
1713:..\src/command_processing.c **** void drive_slave( uint8 slave_ID) {
 7091              		.loc 1 1713 0
 7092              		.cfi_startproc
 7093              		@ args = 0, pretend = 0, frame = 24
 7094              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 173


 7095 0000 90B5     		push	{r4, r7, lr}
 7096              		.cfi_def_cfa_offset 12
 7097              		.cfi_offset 4, -12
 7098              		.cfi_offset 7, -8
 7099              		.cfi_offset 14, -4
 7100 0002 87B0     		sub	sp, sp, #28
 7101              		.cfi_def_cfa_offset 40
 7102 0004 00AF     		add	r7, sp, #0
 7103              		.cfi_def_cfa_register 7
 7104 0006 0346     		mov	r3, r0
 7105 0008 FB71     		strb	r3, [r7, #7]
1714:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1715:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1716:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1717:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1718:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1719:..\src/command_processing.c **** 
1720:..\src/command_processing.c ****     uint8 packet_data[6];
1721:..\src/command_processing.c ****     uint8 packet_length;
1722:..\src/command_processing.c ****     int16 aux_int16;
1723:..\src/command_processing.c **** 
1724:..\src/command_processing.c ****        
1725:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
1726:..\src/command_processing.c ****     packet_data[0] = CMD_SET_INPUTS;
 7106              		.loc 1 1726 0
 7107 000a 8223     		movs	r3, #130
 7108 000c 3B74     		strb	r3, [r7, #16]
1727:..\src/command_processing.c ****     
1728:..\src/command_processing.c ****  //aux_int16 = (int16) motor_idx;
1729:..\src/command_processing.c ****    aux_int16 = (int16) (SH_ref >> g_mem.SH_config.res);
 7109              		.loc 1 1729 0
 7110 000e 1B4B     		ldr	r3, .L370
 7111 0010 1B68     		ldr	r3, [r3]
 7112 0012 1B4A     		ldr	r2, .L370+4
 7113 0014 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 7114 0018 1341     		asrs	r3, r3, r2
 7115 001a 1BB2     		sxth	r3, r3
 7116 001c FB81     		strh	r3, [r7, #14]	@ movhi
1730:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 7117              		.loc 1 1730 0
 7118 001e 07F10E03 		add	r3, r7, #14
 7119 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7120 0024 BB74     		strb	r3, [r7, #18]
1731:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 7121              		.loc 1 1731 0
 7122 0026 07F10E03 		add	r3, r7, #14
 7123 002a 0133     		adds	r3, r3, #1
 7124 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7125 002e 7B74     		strb	r3, [r7, #17]
1732:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
 7126              		.loc 1 1732 0
 7127 0030 07F11003 		add	r3, r7, #16
 7128 0034 0333     		adds	r3, r3, #3
 7129 0036 0022     		movs	r2, #0
 7130 0038 1A80     		strh	r2, [r3]	@ movhi
1733:..\src/command_processing.c ****   //  packet_data[3] = (char*)0;
1734:..\src/command_processing.c ****    // packet_data[4] = (char*)0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 174


1735:..\src/command_processing.c ****     packet_length = 6;
 7131              		.loc 1 1735 0
 7132 003a 0623     		movs	r3, #6
 7133 003c FB75     		strb	r3, [r7, #23]
1736:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 7134              		.loc 1 1736 0
 7135 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7136 0040 5C1E     		subs	r4, r3, #1
 7137 0042 FB7D     		ldrb	r3, [r7, #23]
 7138 0044 013B     		subs	r3, r3, #1
 7139 0046 DAB2     		uxtb	r2, r3
 7140 0048 07F11003 		add	r3, r7, #16
 7141 004c 1146     		mov	r1, r2
 7142 004e 1846     		mov	r0, r3
 7143 0050 FFF7FEFF 		bl	LCRChecksum
 7144 0054 0346     		mov	r3, r0
 7145 0056 1A46     		mov	r2, r3
 7146 0058 07F11803 		add	r3, r7, #24
 7147 005c 2344     		add	r3, r3, r4
 7148 005e 03F8082C 		strb	r2, [r3, #-8]
1737:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, slave_ID);
 7149              		.loc 1 1737 0
 7150 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7151 0064 99B2     		uxth	r1, r3
 7152 0066 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7153 0068 07F11003 		add	r3, r7, #16
 7154 006c 1846     		mov	r0, r3
 7155 006e FFF7FEFF 		bl	commWriteID
1738:..\src/command_processing.c **** 
1739:..\src/command_processing.c **** }
 7156              		.loc 1 1739 0
 7157 0072 00BF     		nop
 7158 0074 1C37     		adds	r7, r7, #28
 7159              		.cfi_def_cfa_offset 12
 7160 0076 BD46     		mov	sp, r7
 7161              		.cfi_def_cfa_register 13
 7162              		@ sp needed
 7163 0078 90BD     		pop	{r4, r7, pc}
 7164              	.L371:
 7165 007a 00BF     		.align	2
 7166              	.L370:
 7167 007c 00000000 		.word	SH_ref
 7168 0080 00000000 		.word	g_mem
 7169              		.cfi_endproc
 7170              	.LFE127:
 7171              		.size	drive_slave, .-drive_slave
 7172              		.section	.text.stop_master_device,"ax",%progbits
 7173              		.align	2
 7174              		.global	stop_master_device
 7175              		.thumb
 7176              		.thumb_func
 7177              		.type	stop_master_device, %function
 7178              	stop_master_device:
 7179              	.LFB128:
1740:..\src/command_processing.c **** //==============================================================================
1741:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1742:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 175


1743:..\src/command_processing.c ****  
1744:..\src/command_processing.c **** void stop_master_device() {
 7180              		.loc 1 1744 0
 7181              		.cfi_startproc
 7182              		@ args = 0, pretend = 0, frame = 0
 7183              		@ frame_needed = 1, uses_anonymous_args = 0
 7184 0000 80B5     		push	{r7, lr}
 7185              		.cfi_def_cfa_offset 8
 7186              		.cfi_offset 7, -8
 7187              		.cfi_offset 14, -4
 7188 0002 00AF     		add	r7, sp, #0
 7189              		.cfi_def_cfa_register 7
1745:..\src/command_processing.c ****     
1746:..\src/command_processing.c ****         // Stop pump and open valve
1747:..\src/command_processing.c ****         Pump_ref = 0;    
 7190              		.loc 1 1747 0
 7191 0004 074B     		ldr	r3, .L373
 7192 0006 0022     		movs	r2, #0
 7193 0008 1A70     		strb	r2, [r3]
1748:..\src/command_processing.c ****         VALVE_Write(OPEN);
 7194              		.loc 1 1748 0
 7195 000a 0020     		movs	r0, #0
 7196 000c FFF7FEFF 		bl	VALVE_Write
1749:..\src/command_processing.c ****         master_mode = 0; 
 7197              		.loc 1 1749 0
 7198 0010 054B     		ldr	r3, .L373+4
 7199 0012 0022     		movs	r2, #0
 7200 0014 1A70     		strb	r2, [r3]
1750:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 7201              		.loc 1 1750 0
 7202 0016 054B     		ldr	r3, .L373+8
 7203 0018 0022     		movs	r2, #0
 7204 001a 83F84020 		strb	r2, [r3, #64]
1751:..\src/command_processing.c **** 
1752:..\src/command_processing.c **** }
 7205              		.loc 1 1752 0
 7206 001e 00BF     		nop
 7207 0020 80BD     		pop	{r7, pc}
 7208              	.L374:
 7209 0022 00BF     		.align	2
 7210              	.L373:
 7211 0024 00000000 		.word	Pump_ref
 7212 0028 00000000 		.word	master_mode
 7213 002c 00000000 		.word	g_mem
 7214              		.cfi_endproc
 7215              	.LFE128:
 7216              		.size	stop_master_device, .-stop_master_device
 7217              		.section	.text.deactivate_slaves,"ax",%progbits
 7218              		.align	2
 7219              		.global	deactivate_slaves
 7220              		.thumb
 7221              		.thumb_func
 7222              		.type	deactivate_slaves, %function
 7223              	deactivate_slaves:
 7224              	.LFB129:
1753:..\src/command_processing.c **** 
1754:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 176


1755:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1756:..\src/command_processing.c **** //==============================================================================
1757:..\src/command_processing.c ****  
1758:..\src/command_processing.c **** void deactivate_slaves() {
 7225              		.loc 1 1758 0
 7226              		.cfi_startproc
 7227              		@ args = 0, pretend = 0, frame = 0
 7228              		@ frame_needed = 1, uses_anonymous_args = 0
 7229              		@ link register save eliminated.
 7230 0000 80B4     		push	{r7}
 7231              		.cfi_def_cfa_offset 4
 7232              		.cfi_offset 7, -4
 7233 0002 00AF     		add	r7, sp, #0
 7234              		.cfi_def_cfa_register 7
1759:..\src/command_processing.c ****    
1760:..\src/command_processing.c **** }
 7235              		.loc 1 1760 0
 7236 0004 00BF     		nop
 7237 0006 BD46     		mov	sp, r7
 7238              		.cfi_def_cfa_register 13
 7239              		@ sp needed
 7240 0008 80BC     		pop	{r7}
 7241              		.cfi_restore 7
 7242              		.cfi_def_cfa_offset 0
 7243 000a 7047     		bx	lr
 7244              		.cfi_endproc
 7245              	.LFE129:
 7246              		.size	deactivate_slaves, .-deactivate_slaves
 7247              		.bss
 7248              		.align	1
 7249              	i.10045:
 7250 0000 0000     		.space	2
 7251 0002 0000     		.align	2
 7252              	last_aux_int16.10115:
 7253 0004 00000000 		.space	6
 7253      0000
 7254              		.text
 7255              	.Letext0:
 7256              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7257              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7258              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 7259              		.file 6 "..\\src\\commands.h"
 7260              		.file 7 "..\\src\\globals.h"
 7261              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 7262              		.section	.debug_info,"",%progbits
 7263              	.Ldebug_info0:
 7264 0000 9D180000 		.4byte	0x189d
 7265 0004 0400     		.2byte	0x4
 7266 0006 00000000 		.4byte	.Ldebug_abbrev0
 7267 000a 04       		.byte	0x4
 7268 000b 01       		.uleb128 0x1
 7269 000c 50080000 		.4byte	.LASF305
 7270 0010 0C       		.byte	0xc
 7271 0011 F1100000 		.4byte	.LASF306
 7272 0015 54060000 		.4byte	.LASF307
 7273 0019 00000000 		.4byte	.Ldebug_ranges0+0
 7274 001d 00000000 		.4byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 177


 7275 0021 00000000 		.4byte	.Ldebug_line0
 7276 0025 02       		.uleb128 0x2
 7277 0026 01       		.byte	0x1
 7278 0027 06       		.byte	0x6
 7279 0028 60030000 		.4byte	.LASF0
 7280 002c 02       		.uleb128 0x2
 7281 002d 01       		.byte	0x1
 7282 002e 08       		.byte	0x8
 7283 002f CF030000 		.4byte	.LASF1
 7284 0033 02       		.uleb128 0x2
 7285 0034 02       		.byte	0x2
 7286 0035 05       		.byte	0x5
 7287 0036 C00E0000 		.4byte	.LASF2
 7288 003a 02       		.uleb128 0x2
 7289 003b 02       		.byte	0x2
 7290 003c 07       		.byte	0x7
 7291 003d 5A100000 		.4byte	.LASF3
 7292 0041 03       		.uleb128 0x3
 7293 0042 BD100000 		.4byte	.LASF5
 7294 0046 03       		.byte	0x3
 7295 0047 3F       		.byte	0x3f
 7296 0048 4C000000 		.4byte	0x4c
 7297 004c 02       		.uleb128 0x2
 7298 004d 04       		.byte	0x4
 7299 004e 05       		.byte	0x5
 7300 004f 55020000 		.4byte	.LASF4
 7301 0053 03       		.uleb128 0x3
 7302 0054 03090000 		.4byte	.LASF6
 7303 0058 03       		.byte	0x3
 7304 0059 41       		.byte	0x41
 7305 005a 5E000000 		.4byte	0x5e
 7306 005e 02       		.uleb128 0x2
 7307 005f 04       		.byte	0x4
 7308 0060 07       		.byte	0x7
 7309 0061 0D070000 		.4byte	.LASF7
 7310 0065 02       		.uleb128 0x2
 7311 0066 08       		.byte	0x8
 7312 0067 05       		.byte	0x5
 7313 0068 0E090000 		.4byte	.LASF8
 7314 006c 02       		.uleb128 0x2
 7315 006d 08       		.byte	0x8
 7316 006e 07       		.byte	0x7
 7317 006f 2E0C0000 		.4byte	.LASF9
 7318 0073 04       		.uleb128 0x4
 7319 0074 04       		.byte	0x4
 7320 0075 05       		.byte	0x5
 7321 0076 696E7400 		.ascii	"int\000"
 7322 007a 02       		.uleb128 0x2
 7323 007b 04       		.byte	0x4
 7324 007c 07       		.byte	0x7
 7325 007d 140A0000 		.4byte	.LASF10
 7326 0081 03       		.uleb128 0x3
 7327 0082 6C000000 		.4byte	.LASF11
 7328 0086 04       		.byte	0x4
 7329 0087 2C       		.byte	0x2c
 7330 0088 41000000 		.4byte	0x41
 7331 008c 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 178


 7332 008d BF0F0000 		.4byte	.LASF12
 7333 0091 04       		.byte	0x4
 7334 0092 30       		.byte	0x30
 7335 0093 53000000 		.4byte	0x53
 7336 0097 05       		.uleb128 0x5
 7337 0098 AE0E0000 		.4byte	.LASF13
 7338 009c 05       		.byte	0x5
 7339 009d E401     		.2byte	0x1e4
 7340 009f 2C000000 		.4byte	0x2c
 7341 00a3 05       		.uleb128 0x5
 7342 00a4 45110000 		.4byte	.LASF14
 7343 00a8 05       		.byte	0x5
 7344 00a9 E501     		.2byte	0x1e5
 7345 00ab 3A000000 		.4byte	0x3a
 7346 00af 05       		.uleb128 0x5
 7347 00b0 8D000000 		.4byte	.LASF15
 7348 00b4 05       		.byte	0x5
 7349 00b5 E601     		.2byte	0x1e6
 7350 00b7 5E000000 		.4byte	0x5e
 7351 00bb 05       		.uleb128 0x5
 7352 00bc 7B010000 		.4byte	.LASF16
 7353 00c0 05       		.byte	0x5
 7354 00c1 E701     		.2byte	0x1e7
 7355 00c3 25000000 		.4byte	0x25
 7356 00c7 05       		.uleb128 0x5
 7357 00c8 7B0F0000 		.4byte	.LASF17
 7358 00cc 05       		.byte	0x5
 7359 00cd E801     		.2byte	0x1e8
 7360 00cf 33000000 		.4byte	0x33
 7361 00d3 05       		.uleb128 0x5
 7362 00d4 A3100000 		.4byte	.LASF18
 7363 00d8 05       		.byte	0x5
 7364 00d9 E901     		.2byte	0x1e9
 7365 00db 4C000000 		.4byte	0x4c
 7366 00df 02       		.uleb128 0x2
 7367 00e0 04       		.byte	0x4
 7368 00e1 04       		.byte	0x4
 7369 00e2 B4090000 		.4byte	.LASF19
 7370 00e6 02       		.uleb128 0x2
 7371 00e7 08       		.byte	0x8
 7372 00e8 04       		.byte	0x4
 7373 00e9 74090000 		.4byte	.LASF20
 7374 00ed 02       		.uleb128 0x2
 7375 00ee 01       		.byte	0x1
 7376 00ef 08       		.byte	0x8
 7377 00f0 6C040000 		.4byte	.LASF21
 7378 00f4 05       		.uleb128 0x5
 7379 00f5 E60C0000 		.4byte	.LASF22
 7380 00f9 05       		.byte	0x5
 7381 00fa 8E02     		.2byte	0x28e
 7382 00fc 00010000 		.4byte	0x100
 7383 0100 06       		.uleb128 0x6
 7384 0101 97000000 		.4byte	0x97
 7385 0105 02       		.uleb128 0x2
 7386 0106 08       		.byte	0x8
 7387 0107 04       		.byte	0x4
 7388 0108 980B0000 		.4byte	.LASF23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 179


 7389 010c 02       		.uleb128 0x2
 7390 010d 04       		.byte	0x4
 7391 010e 07       		.byte	0x7
 7392 010f 20000000 		.4byte	.LASF24
 7393 0113 07       		.uleb128 0x7
 7394 0114 04       		.byte	0x4
 7395 0115 ED000000 		.4byte	0xed
 7396 0119 07       		.uleb128 0x7
 7397 011a 04       		.byte	0x4
 7398 011b 1F010000 		.4byte	0x11f
 7399 011f 08       		.uleb128 0x8
 7400 0120 ED000000 		.4byte	0xed
 7401 0124 09       		.uleb128 0x9
 7402 0125 16060000 		.4byte	.LASF43
 7403 0129 01       		.byte	0x1
 7404 012a 2C000000 		.4byte	0x2c
 7405 012e 06       		.byte	0x6
 7406 012f 43       		.byte	0x43
 7407 0130 A1010000 		.4byte	0x1a1
 7408 0134 0A       		.uleb128 0xa
 7409 0135 1B110000 		.4byte	.LASF25
 7410 0139 01       		.byte	0x1
 7411 013a 0A       		.uleb128 0xa
 7412 013b 2F0F0000 		.4byte	.LASF26
 7413 013f 02       		.byte	0x2
 7414 0140 0A       		.uleb128 0xa
 7415 0141 1F030000 		.4byte	.LASF27
 7416 0145 03       		.byte	0x3
 7417 0146 0A       		.uleb128 0xa
 7418 0147 9B0F0000 		.4byte	.LASF28
 7419 014b 04       		.byte	0x4
 7420 014c 0A       		.uleb128 0xa
 7421 014d EC010000 		.4byte	.LASF29
 7422 0151 05       		.byte	0x5
 7423 0152 0A       		.uleb128 0xa
 7424 0153 AC070000 		.4byte	.LASF30
 7425 0157 06       		.byte	0x6
 7426 0158 0A       		.uleb128 0xa
 7427 0159 CA0E0000 		.4byte	.LASF31
 7428 015d 07       		.byte	0x7
 7429 015e 0A       		.uleb128 0xa
 7430 015f 3B040000 		.4byte	.LASF32
 7431 0163 08       		.byte	0x8
 7432 0164 0A       		.uleb128 0xa
 7433 0165 FE000000 		.4byte	.LASF33
 7434 0169 09       		.byte	0x9
 7435 016a 0A       		.uleb128 0xa
 7436 016b BB040000 		.4byte	.LASF34
 7437 016f 0A       		.byte	0xa
 7438 0170 0A       		.uleb128 0xa
 7439 0171 8D0F0000 		.4byte	.LASF35
 7440 0175 0B       		.byte	0xb
 7441 0176 0A       		.uleb128 0xa
 7442 0177 F6020000 		.4byte	.LASF36
 7443 017b 0C       		.byte	0xc
 7444 017c 0A       		.uleb128 0xa
 7445 017d 5E020000 		.4byte	.LASF37
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 180


 7446 0181 0D       		.byte	0xd
 7447 0182 0A       		.uleb128 0xa
 7448 0183 5E0A0000 		.4byte	.LASF38
 7449 0187 0E       		.byte	0xe
 7450 0188 0A       		.uleb128 0xa
 7451 0189 B8010000 		.4byte	.LASF39
 7452 018d 0F       		.byte	0xf
 7453 018e 0A       		.uleb128 0xa
 7454 018f 0C0B0000 		.4byte	.LASF40
 7455 0193 10       		.byte	0x10
 7456 0194 0A       		.uleb128 0xa
 7457 0195 50030000 		.4byte	.LASF41
 7458 0199 11       		.byte	0x11
 7459 019a 0A       		.uleb128 0xa
 7460 019b 640B0000 		.4byte	.LASF42
 7461 019f 12       		.byte	0x12
 7462 01a0 00       		.byte	0
 7463 01a1 09       		.uleb128 0x9
 7464 01a2 4A050000 		.4byte	.LASF44
 7465 01a6 01       		.byte	0x1
 7466 01a7 2C000000 		.4byte	0x2c
 7467 01ab 06       		.byte	0x6
 7468 01ac 5A       		.byte	0x5a
 7469 01ad 00020000 		.4byte	0x200
 7470 01b1 0A       		.uleb128 0xa
 7471 01b2 560D0000 		.4byte	.LASF45
 7472 01b6 00       		.byte	0
 7473 01b7 0A       		.uleb128 0xa
 7474 01b8 4E000000 		.4byte	.LASF46
 7475 01bc 01       		.byte	0x1
 7476 01bd 0A       		.uleb128 0xa
 7477 01be C5030000 		.4byte	.LASF47
 7478 01c2 02       		.byte	0x2
 7479 01c3 0A       		.uleb128 0xa
 7480 01c4 09000000 		.4byte	.LASF48
 7481 01c8 03       		.byte	0x3
 7482 01c9 0A       		.uleb128 0xa
 7483 01ca 840A0000 		.4byte	.LASF49
 7484 01ce 04       		.byte	0x4
 7485 01cf 0A       		.uleb128 0xa
 7486 01d0 810F0000 		.4byte	.LASF50
 7487 01d4 05       		.byte	0x5
 7488 01d5 0A       		.uleb128 0xa
 7489 01d6 3C0D0000 		.4byte	.LASF51
 7490 01da 06       		.byte	0x6
 7491 01db 0A       		.uleb128 0xa
 7492 01dc 9A040000 		.4byte	.LASF52
 7493 01e0 07       		.byte	0x7
 7494 01e1 0A       		.uleb128 0xa
 7495 01e2 4C0C0000 		.4byte	.LASF53
 7496 01e6 08       		.byte	0x8
 7497 01e7 0A       		.uleb128 0xa
 7498 01e8 11080000 		.4byte	.LASF54
 7499 01ec 09       		.byte	0x9
 7500 01ed 0A       		.uleb128 0xa
 7501 01ee 54050000 		.4byte	.LASF55
 7502 01f2 0A       		.byte	0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 181


 7503 01f3 0A       		.uleb128 0xa
 7504 01f4 F30D0000 		.4byte	.LASF56
 7505 01f8 0B       		.byte	0xb
 7506 01f9 0A       		.uleb128 0xa
 7507 01fa 49060000 		.4byte	.LASF57
 7508 01fe 0C       		.byte	0xc
 7509 01ff 00       		.byte	0
 7510 0200 09       		.uleb128 0x9
 7511 0201 420A0000 		.4byte	.LASF58
 7512 0205 01       		.byte	0x1
 7513 0206 2C000000 		.4byte	0x2c
 7514 020a 06       		.byte	0x6
 7515 020b 69       		.byte	0x69
 7516 020c DD020000 		.4byte	0x2dd
 7517 0210 0A       		.uleb128 0xa
 7518 0211 5D110000 		.4byte	.LASF59
 7519 0215 00       		.byte	0
 7520 0216 0A       		.uleb128 0xa
 7521 0217 000F0000 		.4byte	.LASF60
 7522 021b 01       		.byte	0x1
 7523 021c 0A       		.uleb128 0xa
 7524 021d FC060000 		.4byte	.LASF61
 7525 0221 03       		.byte	0x3
 7526 0222 0A       		.uleb128 0xa
 7527 0223 22040000 		.4byte	.LASF62
 7528 0227 04       		.byte	0x4
 7529 0228 0A       		.uleb128 0xa
 7530 0229 290D0000 		.4byte	.LASF63
 7531 022d 05       		.byte	0x5
 7532 022e 0A       		.uleb128 0xa
 7533 022f EC070000 		.4byte	.LASF64
 7534 0233 06       		.byte	0x6
 7535 0234 0A       		.uleb128 0xa
 7536 0235 1F070000 		.4byte	.LASF65
 7537 0239 09       		.byte	0x9
 7538 023a 0A       		.uleb128 0xa
 7539 023b 29000000 		.4byte	.LASF66
 7540 023f 0A       		.byte	0xa
 7541 0240 0A       		.uleb128 0xa
 7542 0241 5D0F0000 		.4byte	.LASF67
 7543 0245 0C       		.byte	0xc
 7544 0246 0A       		.uleb128 0xa
 7545 0247 D00B0000 		.4byte	.LASF68
 7546 024b 0D       		.byte	0xd
 7547 024c 0A       		.uleb128 0xa
 7548 024d 15040000 		.4byte	.LASF69
 7549 0251 80       		.byte	0x80
 7550 0252 0A       		.uleb128 0xa
 7551 0253 5B040000 		.4byte	.LASF70
 7552 0257 81       		.byte	0x81
 7553 0258 0A       		.uleb128 0xa
 7554 0259 60050000 		.4byte	.LASF71
 7555 025d 82       		.byte	0x82
 7556 025e 0A       		.uleb128 0xa
 7557 025f E00E0000 		.4byte	.LASF72
 7558 0263 83       		.byte	0x83
 7559 0264 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 182


 7560 0265 5C0E0000 		.4byte	.LASF73
 7561 0269 84       		.byte	0x84
 7562 026a 0A       		.uleb128 0xa
 7563 026b B6020000 		.4byte	.LASF74
 7564 026f 85       		.byte	0x85
 7565 0270 0A       		.uleb128 0xa
 7566 0271 3A080000 		.4byte	.LASF75
 7567 0275 86       		.byte	0x86
 7568 0276 0A       		.uleb128 0xa
 7569 0277 C7070000 		.4byte	.LASF76
 7570 027b 88       		.byte	0x88
 7571 027c 0A       		.uleb128 0xa
 7572 027d 4A0F0000 		.4byte	.LASF77
 7573 0281 89       		.byte	0x89
 7574 0282 0A       		.uleb128 0xa
 7575 0283 800C0000 		.4byte	.LASF78
 7576 0287 8B       		.byte	0x8b
 7577 0288 0A       		.uleb128 0xa
 7578 0289 520B0000 		.4byte	.LASF79
 7579 028d 8C       		.byte	0x8c
 7580 028e 0A       		.uleb128 0xa
 7581 028f EF080000 		.4byte	.LASF80
 7582 0293 8E       		.byte	0x8e
 7583 0294 0A       		.uleb128 0xa
 7584 0295 DD030000 		.4byte	.LASF81
 7585 0299 FB       		.byte	0xfb
 7586 029a 0A       		.uleb128 0xa
 7587 029b F9030000 		.4byte	.LASF82
 7588 029f FA       		.byte	0xfa
 7589 02a0 0A       		.uleb128 0xa
 7590 02a1 C50C0000 		.4byte	.LASF83
 7591 02a5 90       		.byte	0x90
 7592 02a6 0A       		.uleb128 0xa
 7593 02a7 FB010000 		.4byte	.LASF84
 7594 02ab 92       		.byte	0x92
 7595 02ac 0A       		.uleb128 0xa
 7596 02ad 24100000 		.4byte	.LASF85
 7597 02b1 A1       		.byte	0xa1
 7598 02b2 0A       		.uleb128 0xa
 7599 02b3 2B0E0000 		.4byte	.LASF86
 7600 02b7 A2       		.byte	0xa2
 7601 02b8 0A       		.uleb128 0xa
 7602 02b9 B70A0000 		.4byte	.LASF87
 7603 02bd A3       		.byte	0xa3
 7604 02be 0A       		.uleb128 0xa
 7605 02bf 3D0E0000 		.4byte	.LASF88
 7606 02c3 A4       		.byte	0xa4
 7607 02c4 0A       		.uleb128 0xa
 7608 02c5 EF0E0000 		.4byte	.LASF89
 7609 02c9 A5       		.byte	0xa5
 7610 02ca 0A       		.uleb128 0xa
 7611 02cb FC0D0000 		.4byte	.LASF90
 7612 02cf A6       		.byte	0xa6
 7613 02d0 0A       		.uleb128 0xa
 7614 02d1 7B090000 		.4byte	.LASF91
 7615 02d5 A7       		.byte	0xa7
 7616 02d6 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 183


 7617 02d7 C3090000 		.4byte	.LASF92
 7618 02db A8       		.byte	0xa8
 7619 02dc 00       		.byte	0
 7620 02dd 09       		.uleb128 0x9
 7621 02de 0D110000 		.4byte	.LASF93
 7622 02e2 01       		.byte	0x1
 7623 02e3 2C000000 		.4byte	0x2c
 7624 02e7 06       		.byte	0x6
 7625 02e8 BB       		.byte	0xbb
 7626 02e9 1E030000 		.4byte	0x31e
 7627 02ed 0A       		.uleb128 0xa
 7628 02ee E7050000 		.4byte	.LASF94
 7629 02f2 00       		.byte	0
 7630 02f3 0A       		.uleb128 0xa
 7631 02f4 970A0000 		.4byte	.LASF95
 7632 02f8 01       		.byte	0x1
 7633 02f9 0A       		.uleb128 0xa
 7634 02fa 0C020000 		.4byte	.LASF96
 7635 02fe 02       		.byte	0x2
 7636 02ff 0A       		.uleb128 0xa
 7637 0300 53010000 		.4byte	.LASF97
 7638 0304 03       		.byte	0x3
 7639 0305 0A       		.uleb128 0xa
 7640 0306 11010000 		.4byte	.LASF98
 7641 030a 04       		.byte	0x4
 7642 030b 0A       		.uleb128 0xa
 7643 030c 36000000 		.4byte	.LASF99
 7644 0310 05       		.byte	0x5
 7645 0311 0A       		.uleb128 0xa
 7646 0312 3B070000 		.4byte	.LASF100
 7647 0316 06       		.byte	0x6
 7648 0317 0A       		.uleb128 0xa
 7649 0318 0C0E0000 		.4byte	.LASF101
 7650 031c 07       		.byte	0x7
 7651 031d 00       		.byte	0
 7652 031e 09       		.uleb128 0x9
 7653 031f F60B0000 		.4byte	.LASF102
 7654 0323 01       		.byte	0x1
 7655 0324 2C000000 		.4byte	0x2c
 7656 0328 06       		.byte	0x6
 7657 0329 DE       		.byte	0xde
 7658 032a 3B030000 		.4byte	0x33b
 7659 032e 0A       		.uleb128 0xa
 7660 032f DD050000 		.4byte	.LASF103
 7661 0333 00       		.byte	0
 7662 0334 0A       		.uleb128 0xa
 7663 0335 8D070000 		.4byte	.LASF104
 7664 0339 01       		.byte	0x1
 7665 033a 00       		.byte	0
 7666 033b 09       		.uleb128 0x9
 7667 033c 700F0000 		.4byte	.LASF105
 7668 0340 01       		.byte	0x1
 7669 0341 2C000000 		.4byte	0x2c
 7670 0345 06       		.byte	0x6
 7671 0346 E6       		.byte	0xe6
 7672 0347 88030000 		.4byte	0x388
 7673 034b 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 184


 7674 034c 94070000 		.4byte	.LASF106
 7675 0350 00       		.byte	0
 7676 0351 0A       		.uleb128 0xa
 7677 0352 2A110000 		.4byte	.LASF107
 7678 0356 01       		.byte	0x1
 7679 0357 0A       		.uleb128 0xa
 7680 0358 3A090000 		.4byte	.LASF108
 7681 035c 02       		.byte	0x2
 7682 035d 0A       		.uleb128 0xa
 7683 035e 2E0B0000 		.4byte	.LASF109
 7684 0362 03       		.byte	0x3
 7685 0363 0A       		.uleb128 0xa
 7686 0364 4D0A0000 		.4byte	.LASF110
 7687 0368 04       		.byte	0x4
 7688 0369 0A       		.uleb128 0xa
 7689 036a 560C0000 		.4byte	.LASF111
 7690 036e 05       		.byte	0x5
 7691 036f 0A       		.uleb128 0xa
 7692 0370 A40B0000 		.4byte	.LASF112
 7693 0374 06       		.byte	0x6
 7694 0375 0A       		.uleb128 0xa
 7695 0376 010B0000 		.4byte	.LASF113
 7696 037a 07       		.byte	0x7
 7697 037b 0A       		.uleb128 0xa
 7698 037c A3050000 		.4byte	.LASF114
 7699 0380 08       		.byte	0x8
 7700 0381 0A       		.uleb128 0xa
 7701 0382 F0060000 		.4byte	.LASF115
 7702 0386 09       		.byte	0x9
 7703 0387 00       		.byte	0
 7704 0388 0B       		.uleb128 0xb
 7705 0389 79000000 		.4byte	.LASF119
 7706 038d 86       		.byte	0x86
 7707 038e 07       		.byte	0x7
 7708 038f 9B       		.byte	0x9b
 7709 0390 C5030000 		.4byte	0x3c5
 7710 0394 0C       		.uleb128 0xc
 7711 0395 76050000 		.4byte	.LASF116
 7712 0399 07       		.byte	0x7
 7713 039a 9C       		.byte	0x9c
 7714 039b C5030000 		.4byte	0x3c5
 7715 039f 00       		.byte	0
 7716 03a0 0C       		.uleb128 0xc
 7717 03a1 6C0C0000 		.4byte	.LASF117
 7718 03a5 07       		.byte	0x7
 7719 03a6 9D       		.byte	0x9d
 7720 03a7 C7000000 		.4byte	0xc7
 7721 03ab 80       		.byte	0x80
 7722 03ac 0D       		.uleb128 0xd
 7723 03ad 696E6400 		.ascii	"ind\000"
 7724 03b1 07       		.byte	0x7
 7725 03b2 9E       		.byte	0x9e
 7726 03b3 C7000000 		.4byte	0xc7
 7727 03b7 82       		.byte	0x82
 7728 03b8 0C       		.uleb128 0xc
 7729 03b9 DD010000 		.4byte	.LASF118
 7730 03bd 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 185


 7731 03be 9F       		.byte	0x9f
 7732 03bf 97000000 		.4byte	0x97
 7733 03c3 84       		.byte	0x84
 7734 03c4 00       		.byte	0
 7735 03c5 0E       		.uleb128 0xe
 7736 03c6 97000000 		.4byte	0x97
 7737 03ca D5030000 		.4byte	0x3d5
 7738 03ce 0F       		.uleb128 0xf
 7739 03cf 0C010000 		.4byte	0x10c
 7740 03d3 7F       		.byte	0x7f
 7741 03d4 00       		.byte	0
 7742 03d5 0B       		.uleb128 0xb
 7743 03d6 16050000 		.4byte	.LASF120
 7744 03da 10       		.byte	0x10
 7745 03db 07       		.byte	0x7
 7746 03dc A9       		.byte	0xa9
 7747 03dd 05040000 		.4byte	0x405
 7748 03e1 0D       		.uleb128 0xd
 7749 03e2 696400   		.ascii	"id\000"
 7750 03e5 07       		.byte	0x7
 7751 03e6 AA       		.byte	0xaa
 7752 03e7 97000000 		.4byte	0x97
 7753 03eb 00       		.byte	0
 7754 03ec 0C       		.uleb128 0xc
 7755 03ed FA0F0000 		.4byte	.LASF121
 7756 03f1 07       		.byte	0x7
 7757 03f2 AB       		.byte	0xab
 7758 03f3 97000000 		.4byte	0x97
 7759 03f7 01       		.byte	0x1
 7760 03f8 0C       		.uleb128 0xc
 7761 03f9 89020000 		.4byte	.LASF122
 7762 03fd 07       		.byte	0x7
 7763 03fe AC       		.byte	0xac
 7764 03ff 05040000 		.4byte	0x405
 7765 0403 02       		.byte	0x2
 7766 0404 00       		.byte	0
 7767 0405 0E       		.uleb128 0xe
 7768 0406 97000000 		.4byte	0x97
 7769 040a 15040000 		.4byte	0x415
 7770 040e 0F       		.uleb128 0xf
 7771 040f 0C010000 		.4byte	0x10c
 7772 0413 0D       		.byte	0xd
 7773 0414 00       		.byte	0
 7774 0415 0B       		.uleb128 0xb
 7775 0416 1C090000 		.4byte	.LASF123
 7776 041a 10       		.byte	0x10
 7777 041b 07       		.byte	0x7
 7778 041c B3       		.byte	0xb3
 7779 041d 5E040000 		.4byte	0x45e
 7780 0421 0C       		.uleb128 0xc
 7781 0422 D9000000 		.4byte	.LASF124
 7782 0426 07       		.byte	0x7
 7783 0427 B5       		.byte	0xb5
 7784 0428 D3000000 		.4byte	0xd3
 7785 042c 00       		.byte	0
 7786 042d 0C       		.uleb128 0xc
 7787 042e DD040000 		.4byte	.LASF125
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 186


 7788 0432 07       		.byte	0x7
 7789 0433 B6       		.byte	0xb6
 7790 0434 D3000000 		.4byte	0xd3
 7791 0438 04       		.byte	0x4
 7792 0439 0C       		.uleb128 0xc
 7793 043a BC070000 		.4byte	.LASF126
 7794 043e 07       		.byte	0x7
 7795 043f B7       		.byte	0xb7
 7796 0440 97000000 		.4byte	0x97
 7797 0444 08       		.byte	0x8
 7798 0445 0D       		.uleb128 0xd
 7799 0446 72657300 		.ascii	"res\000"
 7800 044a 07       		.byte	0x7
 7801 044b B8       		.byte	0xb8
 7802 044c 97000000 		.4byte	0x97
 7803 0450 09       		.byte	0x9
 7804 0451 0C       		.uleb128 0xc
 7805 0452 89020000 		.4byte	.LASF122
 7806 0456 07       		.byte	0x7
 7807 0457 B9       		.byte	0xb9
 7808 0458 5E040000 		.4byte	0x45e
 7809 045c 0A       		.byte	0xa
 7810 045d 00       		.byte	0
 7811 045e 0E       		.uleb128 0xe
 7812 045f 97000000 		.4byte	0x97
 7813 0463 6E040000 		.4byte	0x46e
 7814 0467 0F       		.uleb128 0xf
 7815 0468 0C010000 		.4byte	0x10c
 7816 046c 05       		.byte	0x5
 7817 046d 00       		.byte	0
 7818 046e 0B       		.uleb128 0xb
 7819 046f B1010000 		.4byte	.LASF127
 7820 0473 10       		.byte	0x10
 7821 0474 07       		.byte	0x7
 7822 0475 C1       		.byte	0xc1
 7823 0476 B7040000 		.4byte	0x4b7
 7824 047a 0C       		.uleb128 0xc
 7825 047b 440B0000 		.4byte	.LASF128
 7826 047f 07       		.byte	0x7
 7827 0480 C2       		.byte	0xc2
 7828 0481 B7040000 		.4byte	0x4b7
 7829 0485 00       		.byte	0
 7830 0486 0C       		.uleb128 0xc
 7831 0487 D1100000 		.4byte	.LASF129
 7832 048b 07       		.byte	0x7
 7833 048c C3       		.byte	0xc3
 7834 048d C7040000 		.4byte	0x4c7
 7835 0491 04       		.byte	0x4
 7836 0492 0C       		.uleb128 0xc
 7837 0493 00050000 		.4byte	.LASF130
 7838 0497 07       		.byte	0x7
 7839 0498 C4       		.byte	0xc4
 7840 0499 D7040000 		.4byte	0x4d7
 7841 049d 0C       		.byte	0xc
 7842 049e 0C       		.uleb128 0xc
 7843 049f 91030000 		.4byte	.LASF131
 7844 04a3 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 187


 7845 04a4 C5       		.byte	0xc5
 7846 04a5 97000000 		.4byte	0x97
 7847 04a9 0E       		.byte	0xe
 7848 04aa 0C       		.uleb128 0xc
 7849 04ab 89020000 		.4byte	.LASF122
 7850 04af 07       		.byte	0x7
 7851 04b0 C6       		.byte	0xc6
 7852 04b1 E7040000 		.4byte	0x4e7
 7853 04b5 0F       		.byte	0xf
 7854 04b6 00       		.byte	0
 7855 04b7 0E       		.uleb128 0xe
 7856 04b8 A3000000 		.4byte	0xa3
 7857 04bc C7040000 		.4byte	0x4c7
 7858 04c0 0F       		.uleb128 0xf
 7859 04c1 0C010000 		.4byte	0x10c
 7860 04c5 01       		.byte	0x1
 7861 04c6 00       		.byte	0
 7862 04c7 0E       		.uleb128 0xe
 7863 04c8 AF000000 		.4byte	0xaf
 7864 04cc D7040000 		.4byte	0x4d7
 7865 04d0 0F       		.uleb128 0xf
 7866 04d1 0C010000 		.4byte	0x10c
 7867 04d5 01       		.byte	0x1
 7868 04d6 00       		.byte	0
 7869 04d7 0E       		.uleb128 0xe
 7870 04d8 97000000 		.4byte	0x97
 7871 04dc E7040000 		.4byte	0x4e7
 7872 04e0 0F       		.uleb128 0xf
 7873 04e1 0C010000 		.4byte	0x10c
 7874 04e5 01       		.byte	0x1
 7875 04e6 00       		.byte	0
 7876 04e7 0E       		.uleb128 0xe
 7877 04e8 97000000 		.4byte	0x97
 7878 04ec F7040000 		.4byte	0x4f7
 7879 04f0 0F       		.uleb128 0xf
 7880 04f1 0C010000 		.4byte	0x10c
 7881 04f5 00       		.byte	0
 7882 04f6 00       		.byte	0
 7883 04f7 0B       		.uleb128 0xb
 7884 04f8 3A010000 		.4byte	.LASF132
 7885 04fc 10       		.byte	0x10
 7886 04fd 07       		.byte	0x7
 7887 04fe CD       		.byte	0xcd
 7888 04ff 28050000 		.4byte	0x528
 7889 0503 0C       		.uleb128 0xc
 7890 0504 6C030000 		.4byte	.LASF133
 7891 0508 07       		.byte	0x7
 7892 0509 CE       		.byte	0xce
 7893 050a 97000000 		.4byte	0x97
 7894 050e 00       		.byte	0
 7895 050f 0C       		.uleb128 0xc
 7896 0510 84070000 		.4byte	.LASF134
 7897 0514 07       		.byte	0x7
 7898 0515 CF       		.byte	0xcf
 7899 0516 97000000 		.4byte	0x97
 7900 051a 01       		.byte	0x1
 7901 051b 0C       		.uleb128 0xc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 188


 7902 051c 89020000 		.4byte	.LASF122
 7903 0520 07       		.byte	0x7
 7904 0521 D0       		.byte	0xd0
 7905 0522 05040000 		.4byte	0x405
 7906 0526 02       		.byte	0x2
 7907 0527 00       		.byte	0
 7908 0528 0B       		.uleb128 0xb
 7909 0529 B00B0000 		.4byte	.LASF135
 7910 052d 10       		.byte	0x10
 7911 052e 07       		.byte	0x7
 7912 052f D7       		.byte	0xd7
 7913 0530 7D050000 		.4byte	0x57d
 7914 0534 0C       		.uleb128 0xc
 7915 0535 7E100000 		.4byte	.LASF136
 7916 0539 07       		.byte	0x7
 7917 053a D8       		.byte	0xd8
 7918 053b D3000000 		.4byte	0xd3
 7919 053f 00       		.byte	0
 7920 0540 0C       		.uleb128 0xc
 7921 0541 01060000 		.4byte	.LASF137
 7922 0545 07       		.byte	0x7
 7923 0546 D9       		.byte	0xd9
 7924 0547 DF000000 		.4byte	0xdf
 7925 054b 04       		.byte	0x4
 7926 054c 0C       		.uleb128 0xc
 7927 054d EB0C0000 		.4byte	.LASF138
 7928 0551 07       		.byte	0x7
 7929 0552 DA       		.byte	0xda
 7930 0553 DF000000 		.4byte	0xdf
 7931 0557 08       		.byte	0x8
 7932 0558 0C       		.uleb128 0xc
 7933 0559 1D080000 		.4byte	.LASF139
 7934 055d 07       		.byte	0x7
 7935 055e DB       		.byte	0xdb
 7936 055f 97000000 		.4byte	0x97
 7937 0563 0C       		.byte	0xc
 7938 0564 0C       		.uleb128 0xc
 7939 0565 710E0000 		.4byte	.LASF140
 7940 0569 07       		.byte	0x7
 7941 056a DC       		.byte	0xdc
 7942 056b 97000000 		.4byte	0x97
 7943 056f 0D       		.byte	0xd
 7944 0570 0C       		.uleb128 0xc
 7945 0571 89020000 		.4byte	.LASF122
 7946 0575 07       		.byte	0x7
 7947 0576 DD       		.byte	0xdd
 7948 0577 D7040000 		.4byte	0x4d7
 7949 057b 0E       		.byte	0xe
 7950 057c 00       		.byte	0
 7951 057d 0B       		.uleb128 0xb
 7952 057e 93100000 		.4byte	.LASF141
 7953 0582 60       		.byte	0x60
 7954 0583 07       		.byte	0x7
 7955 0584 E7       		.byte	0xe7
 7956 0585 DC050000 		.4byte	0x5dc
 7957 0589 0C       		.uleb128 0xc
 7958 058a 590A0000 		.4byte	.LASF142
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 189


 7959 058e 07       		.byte	0x7
 7960 058f E8       		.byte	0xe8
 7961 0590 97000000 		.4byte	0x97
 7962 0594 00       		.byte	0
 7963 0595 0C       		.uleb128 0xc
 7964 0596 89020000 		.4byte	.LASF122
 7965 059a 07       		.byte	0x7
 7966 059b E9       		.byte	0xe9
 7967 059c DC050000 		.4byte	0x5dc
 7968 05a0 01       		.byte	0x1
 7969 05a1 0D       		.uleb128 0xd
 7970 05a2 64657600 		.ascii	"dev\000"
 7971 05a6 07       		.byte	0x7
 7972 05a7 EA       		.byte	0xea
 7973 05a8 D5030000 		.4byte	0x3d5
 7974 05ac 10       		.byte	0x10
 7975 05ad 0C       		.uleb128 0xc
 7976 05ae 45090000 		.4byte	.LASF143
 7977 05b2 07       		.byte	0x7
 7978 05b3 EB       		.byte	0xeb
 7979 05b4 15040000 		.4byte	0x415
 7980 05b8 20       		.byte	0x20
 7981 05b9 0D       		.uleb128 0xd
 7982 05ba 656D6700 		.ascii	"emg\000"
 7983 05be 07       		.byte	0x7
 7984 05bf EC       		.byte	0xec
 7985 05c0 6E040000 		.4byte	0x46e
 7986 05c4 30       		.byte	0x30
 7987 05c5 0D       		.uleb128 0xd
 7988 05c6 4D5300   		.ascii	"MS\000"
 7989 05c9 07       		.byte	0x7
 7990 05ca ED       		.byte	0xed
 7991 05cb F7040000 		.4byte	0x4f7
 7992 05cf 40       		.byte	0x40
 7993 05d0 0D       		.uleb128 0xd
 7994 05d1 464200   		.ascii	"FB\000"
 7995 05d4 07       		.byte	0x7
 7996 05d5 EE       		.byte	0xee
 7997 05d6 28050000 		.4byte	0x528
 7998 05da 50       		.byte	0x50
 7999 05db 00       		.byte	0
 8000 05dc 0E       		.uleb128 0xe
 8001 05dd 97000000 		.4byte	0x97
 8002 05e1 EC050000 		.4byte	0x5ec
 8003 05e5 0F       		.uleb128 0xf
 8004 05e6 0C010000 		.4byte	0x10c
 8005 05ea 0E       		.byte	0xe
 8006 05eb 00       		.byte	0
 8007 05ec 10       		.uleb128 0x10
 8008 05ed 30020000 		.4byte	.LASF144
 8009 05f1 2C       		.byte	0x2c
 8010 05f2 07       		.byte	0x7
 8011 05f3 3901     		.2byte	0x139
 8012 05f5 21060000 		.4byte	0x621
 8013 05f9 11       		.uleb128 0x11
 8014 05fa 570E0000 		.4byte	.LASF145
 8015 05fe 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 190


 8016 05ff 3A01     		.2byte	0x13a
 8017 0601 97000000 		.4byte	0x97
 8018 0605 00       		.byte	0
 8019 0606 11       		.uleb128 0x11
 8020 0607 510E0000 		.4byte	.LASF146
 8021 060b 07       		.byte	0x7
 8022 060c 3B01     		.2byte	0x13b
 8023 060e 97000000 		.4byte	0x97
 8024 0612 01       		.byte	0x1
 8025 0613 11       		.uleb128 0x11
 8026 0614 EA000000 		.4byte	.LASF147
 8027 0618 07       		.byte	0x7
 8028 0619 3C01     		.2byte	0x13c
 8029 061b 21060000 		.4byte	0x621
 8030 061f 04       		.byte	0x4
 8031 0620 00       		.byte	0
 8032 0621 0E       		.uleb128 0xe
 8033 0622 19010000 		.4byte	0x119
 8034 0626 31060000 		.4byte	0x631
 8035 062a 0F       		.uleb128 0xf
 8036 062b 0C010000 		.4byte	0x10c
 8037 062f 09       		.byte	0x9
 8038 0630 00       		.byte	0
 8039 0631 10       		.uleb128 0x10
 8040 0632 A3040000 		.4byte	.LASF148
 8041 0636 10       		.byte	0x10
 8042 0637 07       		.byte	0x7
 8043 0638 3F01     		.2byte	0x13f
 8044 063a A7060000 		.4byte	0x6a7
 8045 063e 11       		.uleb128 0x11
 8046 063f BB0D0000 		.4byte	.LASF149
 8047 0643 07       		.byte	0x7
 8048 0644 4001     		.2byte	0x140
 8049 0646 A7060000 		.4byte	0x6a7
 8050 064a 00       		.byte	0
 8051 064b 11       		.uleb128 0x11
 8052 064c 9D100000 		.4byte	.LASF150
 8053 0650 07       		.byte	0x7
 8054 0651 4101     		.2byte	0x141
 8055 0653 97000000 		.4byte	0x97
 8056 0657 04       		.byte	0x4
 8057 0658 11       		.uleb128 0x11
 8058 0659 96020000 		.4byte	.LASF151
 8059 065d 07       		.byte	0x7
 8060 065e 4201     		.2byte	0x142
 8061 0660 97000000 		.4byte	0x97
 8062 0664 05       		.byte	0x5
 8063 0665 11       		.uleb128 0x11
 8064 0666 49010000 		.4byte	.LASF152
 8065 066a 07       		.byte	0x7
 8066 066b 4301     		.2byte	0x143
 8067 066d 19010000 		.4byte	0x119
 8068 0671 08       		.byte	0x8
 8069 0672 11       		.uleb128 0x11
 8070 0673 0C080000 		.4byte	.LASF153
 8071 0677 07       		.byte	0x7
 8072 0678 4401     		.2byte	0x144
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 191


 8073 067a 97000000 		.4byte	0x97
 8074 067e 0C       		.byte	0xc
 8075 067f 11       		.uleb128 0x11
 8076 0680 CC0A0000 		.4byte	.LASF154
 8077 0684 07       		.byte	0x7
 8078 0685 4501     		.2byte	0x145
 8079 0687 97000000 		.4byte	0x97
 8080 068b 0D       		.byte	0xd
 8081 068c 11       		.uleb128 0x11
 8082 068d 450C0000 		.4byte	.LASF155
 8083 0691 07       		.byte	0x7
 8084 0692 4601     		.2byte	0x146
 8085 0694 97000000 		.4byte	0x97
 8086 0698 0E       		.byte	0xe
 8087 0699 11       		.uleb128 0x11
 8088 069a E7070000 		.4byte	.LASF156
 8089 069e 07       		.byte	0x7
 8090 069f 4701     		.2byte	0x147
 8091 06a1 97000000 		.4byte	0x97
 8092 06a5 0F       		.byte	0xf
 8093 06a6 00       		.byte	0
 8094 06a7 07       		.uleb128 0x7
 8095 06a8 04       		.byte	0x4
 8096 06a9 97000000 		.4byte	0x97
 8097 06ad 10       		.uleb128 0x10
 8098 06ae F0090000 		.4byte	.LASF157
 8099 06b2 0C       		.byte	0xc
 8100 06b3 07       		.byte	0x7
 8101 06b4 5C01     		.2byte	0x15c
 8102 06b6 D5060000 		.4byte	0x6d5
 8103 06ba 12       		.uleb128 0x12
 8104 06bb 656D6700 		.ascii	"emg\000"
 8105 06bf 07       		.byte	0x7
 8106 06c0 5D01     		.2byte	0x15d
 8107 06c2 D5060000 		.4byte	0x6d5
 8108 06c6 00       		.byte	0
 8109 06c7 11       		.uleb128 0x11
 8110 06c8 52040000 		.4byte	.LASF158
 8111 06cc 07       		.byte	0x7
 8112 06cd 5E01     		.2byte	0x15e
 8113 06cf DF000000 		.4byte	0xdf
 8114 06d3 08       		.byte	0x8
 8115 06d4 00       		.byte	0
 8116 06d5 0E       		.uleb128 0xe
 8117 06d6 D3000000 		.4byte	0xd3
 8118 06da E5060000 		.4byte	0x6e5
 8119 06de 0F       		.uleb128 0xf
 8120 06df 0C010000 		.4byte	0x10c
 8121 06e3 01       		.byte	0x1
 8122 06e4 00       		.byte	0
 8123 06e5 13       		.uleb128 0x13
 8124 06e6 B30D0000 		.4byte	.LASF308
 8125 06ea 02       		.byte	0x2
 8126 06eb 1403     		.2byte	0x314
 8127 06ed 8C000000 		.4byte	0x8c
 8128 06f1 03       		.byte	0x3
 8129 06f2 0F070000 		.4byte	0x70f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 192


 8130 06f6 14       		.uleb128 0x14
 8131 06f7 4C040000 		.4byte	.LASF218
 8132 06fb 02       		.byte	0x2
 8133 06fc 1403     		.2byte	0x314
 8134 06fe 8C000000 		.4byte	0x8c
 8135 0702 15       		.uleb128 0x15
 8136 0703 D6010000 		.4byte	.LASF309
 8137 0707 02       		.byte	0x2
 8138 0708 1603     		.2byte	0x316
 8139 070a 8C000000 		.4byte	0x8c
 8140 070e 00       		.byte	0
 8141 070f 16       		.uleb128 0x16
 8142 0710 B40E0000 		.4byte	.LASF159
 8143 0714 01       		.byte	0x1
 8144 0715 3D       		.byte	0x3d
 8145 0716 00000000 		.4byte	.LFB64
 8146 071a BC050000 		.4byte	.LFE64-.LFB64
 8147 071e 01       		.uleb128 0x1
 8148 071f 9C       		.byte	0x9c
 8149 0720 17080000 		.4byte	0x817
 8150 0724 17       		.uleb128 0x17
 8151 0725 9C050000 		.4byte	.LASF161
 8152 0729 01       		.byte	0x1
 8153 072a 3F       		.byte	0x3f
 8154 072b 97000000 		.4byte	0x97
 8155 072f 02       		.uleb128 0x2
 8156 0730 91       		.byte	0x91
 8157 0731 77       		.sleb128 -9
 8158 0732 18       		.uleb128 0x18
 8159 0733 E5060000 		.4byte	0x6e5
 8160 0737 9A040000 		.4byte	.LBB12
 8161 073b 08000000 		.4byte	.LBE12-.LBB12
 8162 073f 01       		.byte	0x1
 8163 0740 A2       		.byte	0xa2
 8164 0741 60070000 		.4byte	0x760
 8165 0745 19       		.uleb128 0x19
 8166 0746 F6060000 		.4byte	0x6f6
 8167 074a 02       		.uleb128 0x2
 8168 074b 91       		.byte	0x91
 8169 074c 60       		.sleb128 -32
 8170 074d 1A       		.uleb128 0x1a
 8171 074e 9A040000 		.4byte	.LBB13
 8172 0752 08000000 		.4byte	.LBE13-.LBB13
 8173 0756 1B       		.uleb128 0x1b
 8174 0757 02070000 		.4byte	0x702
 8175 075b 02       		.uleb128 0x2
 8176 075c 91       		.byte	0x91
 8177 075d 5C       		.sleb128 -36
 8178 075e 00       		.byte	0
 8179 075f 00       		.byte	0
 8180 0760 18       		.uleb128 0x18
 8181 0761 E5060000 		.4byte	0x6e5
 8182 0765 B8040000 		.4byte	.LBB14
 8183 0769 08000000 		.4byte	.LBE14-.LBB14
 8184 076d 01       		.byte	0x1
 8185 076e AE       		.byte	0xae
 8186 076f 8E070000 		.4byte	0x78e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 193


 8187 0773 19       		.uleb128 0x19
 8188 0774 F6060000 		.4byte	0x6f6
 8189 0778 02       		.uleb128 0x2
 8190 0779 91       		.byte	0x91
 8191 077a 70       		.sleb128 -16
 8192 077b 1A       		.uleb128 0x1a
 8193 077c B8040000 		.4byte	.LBB15
 8194 0780 08000000 		.4byte	.LBE15-.LBB15
 8195 0784 1B       		.uleb128 0x1b
 8196 0785 02070000 		.4byte	0x702
 8197 0789 02       		.uleb128 0x2
 8198 078a 91       		.byte	0x91
 8199 078b 58       		.sleb128 -40
 8200 078c 00       		.byte	0
 8201 078d 00       		.byte	0
 8202 078e 18       		.uleb128 0x18
 8203 078f E5060000 		.4byte	0x6e5
 8204 0793 56050000 		.4byte	.LBB16
 8205 0797 08000000 		.4byte	.LBE16-.LBB16
 8206 079b 01       		.byte	0x1
 8207 079c F1       		.byte	0xf1
 8208 079d BC070000 		.4byte	0x7bc
 8209 07a1 19       		.uleb128 0x19
 8210 07a2 F6060000 		.4byte	0x6f6
 8211 07a6 02       		.uleb128 0x2
 8212 07a7 91       		.byte	0x91
 8213 07a8 6C       		.sleb128 -20
 8214 07a9 1A       		.uleb128 0x1a
 8215 07aa 56050000 		.4byte	.LBB17
 8216 07ae 08000000 		.4byte	.LBE17-.LBB17
 8217 07b2 1B       		.uleb128 0x1b
 8218 07b3 02070000 		.4byte	0x702
 8219 07b7 02       		.uleb128 0x2
 8220 07b8 91       		.byte	0x91
 8221 07b9 54       		.sleb128 -44
 8222 07ba 00       		.byte	0
 8223 07bb 00       		.byte	0
 8224 07bc 1C       		.uleb128 0x1c
 8225 07bd E5060000 		.4byte	0x6e5
 8226 07c1 86050000 		.4byte	.LBB18
 8227 07c5 08000000 		.4byte	.LBE18-.LBB18
 8228 07c9 01       		.byte	0x1
 8229 07ca 0F01     		.2byte	0x10f
 8230 07cc EB070000 		.4byte	0x7eb
 8231 07d0 19       		.uleb128 0x19
 8232 07d1 F6060000 		.4byte	0x6f6
 8233 07d5 02       		.uleb128 0x2
 8234 07d6 91       		.byte	0x91
 8235 07d7 68       		.sleb128 -24
 8236 07d8 1A       		.uleb128 0x1a
 8237 07d9 86050000 		.4byte	.LBB19
 8238 07dd 08000000 		.4byte	.LBE19-.LBB19
 8239 07e1 1B       		.uleb128 0x1b
 8240 07e2 02070000 		.4byte	0x702
 8241 07e6 02       		.uleb128 0x2
 8242 07e7 91       		.byte	0x91
 8243 07e8 50       		.sleb128 -48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 194


 8244 07e9 00       		.byte	0
 8245 07ea 00       		.byte	0
 8246 07eb 1D       		.uleb128 0x1d
 8247 07ec E5060000 		.4byte	0x6e5
 8248 07f0 9E050000 		.4byte	.LBB20
 8249 07f4 08000000 		.4byte	.LBE20-.LBB20
 8250 07f8 01       		.byte	0x1
 8251 07f9 1501     		.2byte	0x115
 8252 07fb 19       		.uleb128 0x19
 8253 07fc F6060000 		.4byte	0x6f6
 8254 0800 02       		.uleb128 0x2
 8255 0801 91       		.byte	0x91
 8256 0802 64       		.sleb128 -28
 8257 0803 1A       		.uleb128 0x1a
 8258 0804 9E050000 		.4byte	.LBB21
 8259 0808 08000000 		.4byte	.LBE21-.LBB21
 8260 080c 1B       		.uleb128 0x1b
 8261 080d 02070000 		.4byte	0x702
 8262 0811 02       		.uleb128 0x2
 8263 0812 91       		.byte	0x91
 8264 0813 4C       		.sleb128 -52
 8265 0814 00       		.byte	0
 8266 0815 00       		.byte	0
 8267 0816 00       		.byte	0
 8268 0817 1E       		.uleb128 0x1e
 8269 0818 00000000 		.4byte	.LASF160
 8270 081c 01       		.byte	0x1
 8271 081d 2301     		.2byte	0x123
 8272 081f 00000000 		.4byte	.LFB65
 8273 0823 22000000 		.4byte	.LFE65-.LFB65
 8274 0827 01       		.uleb128 0x1
 8275 0828 9C       		.byte	0x9c
 8276 0829 3E080000 		.4byte	0x83e
 8277 082d 1F       		.uleb128 0x1f
 8278 082e AD040000 		.4byte	.LASF162
 8279 0832 01       		.byte	0x1
 8280 0833 2401     		.2byte	0x124
 8281 0835 3E080000 		.4byte	0x83e
 8282 0839 03       		.uleb128 0x3
 8283 083a 91       		.byte	0x91
 8284 083b 9C74     		.sleb128 -1508
 8285 083d 00       		.byte	0
 8286 083e 0E       		.uleb128 0xe
 8287 083f ED000000 		.4byte	0xed
 8288 0843 4F080000 		.4byte	0x84f
 8289 0847 20       		.uleb128 0x20
 8290 0848 0C010000 		.4byte	0x10c
 8291 084c DB05     		.2byte	0x5db
 8292 084e 00       		.byte	0
 8293 084f 21       		.uleb128 0x21
 8294 0850 2E070000 		.4byte	.LASF212
 8295 0854 01       		.byte	0x1
 8296 0855 2D01     		.2byte	0x12d
 8297 0857 97000000 		.4byte	0x97
 8298 085b 00000000 		.4byte	.LFB66
 8299 085f 5E000000 		.4byte	.LFE66-.LFB66
 8300 0863 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 195


 8301 0864 9C       		.byte	0x9c
 8302 0865 88080000 		.4byte	0x888
 8303 0869 22       		.uleb128 0x22
 8304 086a E5000000 		.4byte	.LASF164
 8305 086e 01       		.byte	0x1
 8306 086f 2D01     		.2byte	0x12d
 8307 0871 97000000 		.4byte	0x97
 8308 0875 02       		.uleb128 0x2
 8309 0876 91       		.byte	0x91
 8310 0877 6F       		.sleb128 -17
 8311 0878 23       		.uleb128 0x23
 8312 0879 736F6400 		.ascii	"sod\000"
 8313 087d 01       		.byte	0x1
 8314 087e 2E01     		.2byte	0x12e
 8315 0880 97000000 		.4byte	0x97
 8316 0884 02       		.uleb128 0x2
 8317 0885 91       		.byte	0x91
 8318 0886 77       		.sleb128 -9
 8319 0887 00       		.byte	0
 8320 0888 1E       		.uleb128 0x1e
 8321 0889 A9100000 		.4byte	.LASF163
 8322 088d 01       		.byte	0x1
 8323 088e 3E01     		.2byte	0x13e
 8324 0890 00000000 		.4byte	.LFB67
 8325 0894 64010000 		.4byte	.LFE67-.LFB67
 8326 0898 01       		.uleb128 0x1
 8327 0899 9C       		.byte	0x9c
 8328 089a D1080000 		.4byte	0x8d1
 8329 089e 22       		.uleb128 0x22
 8330 089f E90D0000 		.4byte	.LASF165
 8331 08a3 01       		.byte	0x1
 8332 08a4 3E01     		.2byte	0x13e
 8333 08a6 A3000000 		.4byte	0xa3
 8334 08aa 04       		.uleb128 0x4
 8335 08ab 91       		.byte	0x91
 8336 08ac B6C47E   		.sleb128 -24010
 8337 08af 1F       		.uleb128 0x1f
 8338 08b0 AD040000 		.4byte	.LASF162
 8339 08b4 01       		.byte	0x1
 8340 08b5 3F01     		.2byte	0x13f
 8341 08b7 D1080000 		.4byte	0x8d1
 8342 08bb 03       		.uleb128 0x3
 8343 08bc 91       		.byte	0x91
 8344 08bd D860     		.sleb128 -4008
 8345 08bf 1F       		.uleb128 0x1f
 8346 08c0 78070000 		.4byte	.LASF166
 8347 08c4 01       		.byte	0x1
 8348 08c5 4001     		.2byte	0x140
 8349 08c7 E2080000 		.4byte	0x8e2
 8350 08cb 04       		.uleb128 0x4
 8351 08cc 91       		.byte	0x91
 8352 08cd B8C47E   		.sleb128 -24008
 8353 08d0 00       		.byte	0
 8354 08d1 0E       		.uleb128 0xe
 8355 08d2 ED000000 		.4byte	0xed
 8356 08d6 E2080000 		.4byte	0x8e2
 8357 08da 20       		.uleb128 0x20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 196


 8358 08db 0C010000 		.4byte	0x10c
 8359 08df 9F0F     		.2byte	0xf9f
 8360 08e1 00       		.byte	0
 8361 08e2 0E       		.uleb128 0xe
 8362 08e3 ED000000 		.4byte	0xed
 8363 08e7 F3080000 		.4byte	0x8f3
 8364 08eb 20       		.uleb128 0x20
 8365 08ec 0C010000 		.4byte	0x10c
 8366 08f0 1F4E     		.2byte	0x4e1f
 8367 08f2 00       		.byte	0
 8368 08f3 1E       		.uleb128 0x1e
 8369 08f4 80010000 		.4byte	.LASF167
 8370 08f8 01       		.byte	0x1
 8371 08f9 7001     		.2byte	0x170
 8372 08fb 00000000 		.4byte	.LFB68
 8373 08ff BC070000 		.4byte	.LFE68-.LFB68
 8374 0903 01       		.uleb128 0x1
 8375 0904 9C       		.byte	0x9c
 8376 0905 430A0000 		.4byte	0xa43
 8377 0909 22       		.uleb128 0x22
 8378 090a 230C0000 		.4byte	.LASF168
 8379 090e 01       		.byte	0x1
 8380 090f 7001     		.2byte	0x170
 8381 0911 97000000 		.4byte	0x97
 8382 0915 03       		.uleb128 0x3
 8383 0916 91       		.byte	0x91
 8384 0917 8F7B     		.sleb128 -625
 8385 0919 22       		.uleb128 0x22
 8386 091a 4C0D0000 		.4byte	.LASF169
 8387 091e 01       		.byte	0x1
 8388 091f 7001     		.2byte	0x170
 8389 0921 97000000 		.4byte	0x97
 8390 0925 03       		.uleb128 0x3
 8391 0926 91       		.byte	0x91
 8392 0927 8E7B     		.sleb128 -626
 8393 0929 22       		.uleb128 0x22
 8394 092a D20F0000 		.4byte	.LASF170
 8395 092e 01       		.byte	0x1
 8396 092f 7001     		.2byte	0x170
 8397 0931 430A0000 		.4byte	0xa43
 8398 0935 03       		.uleb128 0x3
 8399 0936 91       		.byte	0x91
 8400 0937 887B     		.sleb128 -632
 8401 0939 22       		.uleb128 0x22
 8402 093a 8D0A0000 		.4byte	.LASF171
 8403 093e 01       		.byte	0x1
 8404 093f 7001     		.2byte	0x170
 8405 0941 4E0A0000 		.4byte	0xa4e
 8406 0945 03       		.uleb128 0x3
 8407 0946 91       		.byte	0x91
 8408 0947 847B     		.sleb128 -636
 8409 0949 22       		.uleb128 0x22
 8410 094a 730C0000 		.4byte	.LASF172
 8411 094e 01       		.byte	0x1
 8412 094f 7001     		.2byte	0x170
 8413 0951 97000000 		.4byte	0x97
 8414 0955 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 197


 8415 0956 91       		.byte	0x91
 8416 0957 00       		.sleb128 0
 8417 0958 23       		.uleb128 0x23
 8418 0959 69647800 		.ascii	"idx\000"
 8419 095d 01       		.byte	0x1
 8420 095e 7201     		.2byte	0x172
 8421 0960 97000000 		.4byte	0x97
 8422 0964 02       		.uleb128 0x2
 8423 0965 91       		.byte	0x91
 8424 0966 5F       		.sleb128 -33
 8425 0967 1F       		.uleb128 0x1f
 8426 0968 FC090000 		.4byte	.LASF173
 8427 096c 01       		.byte	0x1
 8428 096d 7301     		.2byte	0x173
 8429 096f A7060000 		.4byte	0x6a7
 8430 0973 02       		.uleb128 0x2
 8431 0974 91       		.byte	0x91
 8432 0975 50       		.sleb128 -48
 8433 0976 1F       		.uleb128 0x1f
 8434 0977 12000000 		.4byte	.LASF174
 8435 097b 01       		.byte	0x1
 8436 097c 7401     		.2byte	0x174
 8437 097e 97000000 		.4byte	0x97
 8438 0982 02       		.uleb128 0x2
 8439 0983 91       		.byte	0x91
 8440 0984 5E       		.sleb128 -34
 8441 0985 1F       		.uleb128 0x1f
 8442 0986 55110000 		.4byte	.LASF175
 8443 098a 01       		.byte	0x1
 8444 098b 7501     		.2byte	0x175
 8445 098d 590A0000 		.4byte	0xa59
 8446 0991 03       		.uleb128 0x3
 8447 0992 91       		.byte	0x91
 8448 0993 C87D     		.sleb128 -312
 8449 0995 1F       		.uleb128 0x1f
 8450 0996 E3010000 		.4byte	.LASF176
 8451 099a 01       		.byte	0x1
 8452 099b 7601     		.2byte	0x176
 8453 099d 590A0000 		.4byte	0xa59
 8454 09a1 03       		.uleb128 0x3
 8455 09a2 91       		.byte	0x91
 8456 09a3 CC7B     		.sleb128 -564
 8457 09a5 1F       		.uleb128 0x1f
 8458 09a6 F00F0000 		.4byte	.LASF177
 8459 09aa 01       		.byte	0x1
 8460 09ab 7801     		.2byte	0x178
 8461 09ad D3000000 		.4byte	0xd3
 8462 09b1 03       		.uleb128 0x3
 8463 09b2 91       		.byte	0x91
 8464 09b3 C87B     		.sleb128 -568
 8465 09b5 23       		.uleb128 0x23
 8466 09b6 6900     		.ascii	"i\000"
 8467 09b8 01       		.byte	0x1
 8468 09b9 7901     		.2byte	0x179
 8469 09bb 97000000 		.4byte	0x97
 8470 09bf 02       		.uleb128 0x2
 8471 09c0 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 198


 8472 09c1 5D       		.sleb128 -35
 8473 09c2 23       		.uleb128 0x23
 8474 09c3 6A00     		.ascii	"j\000"
 8475 09c5 01       		.byte	0x1
 8476 09c6 7901     		.2byte	0x179
 8477 09c8 97000000 		.4byte	0x97
 8478 09cc 02       		.uleb128 0x2
 8479 09cd 91       		.byte	0x91
 8480 09ce 5C       		.sleb128 -36
 8481 09cf 1F       		.uleb128 0x1f
 8482 09d0 EA090000 		.4byte	.LASF178
 8483 09d4 01       		.byte	0x1
 8484 09d5 7A01     		.2byte	0x17a
 8485 09d7 97000000 		.4byte	0x97
 8486 09db 02       		.uleb128 0x2
 8487 09dc 91       		.byte	0x91
 8488 09dd 5B       		.sleb128 -37
 8489 09de 1F       		.uleb128 0x1f
 8490 09df BC0C0000 		.4byte	.LASF179
 8491 09e3 01       		.byte	0x1
 8492 09e4 7B01     		.2byte	0x17b
 8493 09e6 690A0000 		.4byte	0xa69
 8494 09ea 03       		.uleb128 0x3
 8495 09eb 91       		.byte	0x91
 8496 09ec 947B     		.sleb128 -620
 8497 09ee 1F       		.uleb128 0x1f
 8498 09ef 9E070000 		.4byte	.LASF180
 8499 09f3 01       		.byte	0x1
 8500 09f4 7D01     		.2byte	0x17d
 8501 09f6 A3000000 		.4byte	0xa3
 8502 09fa 02       		.uleb128 0x2
 8503 09fb 91       		.byte	0x91
 8504 09fc 4E       		.sleb128 -50
 8505 09fd 1F       		.uleb128 0x1f
 8506 09fe 0A050000 		.4byte	.LASF181
 8507 0a02 01       		.byte	0x1
 8508 0a03 7E01     		.2byte	0x17e
 8509 0a05 790A0000 		.4byte	0xa79
 8510 0a09 03       		.uleb128 0x3
 8511 0a0a 91       		.byte	0x91
 8512 0a0b 44       		.sleb128 -60
 8513 0a0c 06       		.byte	0x6
 8514 0a0d 24       		.uleb128 0x24
 8515 0a0e E4000000 		.4byte	.LBB22
 8516 0a12 2C000000 		.4byte	.LBE22-.LBB22
 8517 0a16 290A0000 		.4byte	0xa29
 8518 0a1a 23       		.uleb128 0x23
 8519 0a1b 696900   		.ascii	"ii\000"
 8520 0a1e 01       		.byte	0x1
 8521 0a1f 7F01     		.2byte	0x17f
 8522 0a21 73000000 		.4byte	0x73
 8523 0a25 02       		.uleb128 0x2
 8524 0a26 91       		.byte	0x91
 8525 0a27 54       		.sleb128 -44
 8526 0a28 00       		.byte	0
 8527 0a29 1A       		.uleb128 0x1a
 8528 0a2a 2C010000 		.4byte	.LBB23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 199


 8529 0a2e 80040000 		.4byte	.LBE23-.LBB23
 8530 0a32 23       		.uleb128 0x23
 8531 0a33 736F6400 		.ascii	"sod\000"
 8532 0a37 01       		.byte	0x1
 8533 0a38 8601     		.2byte	0x186
 8534 0a3a 97000000 		.4byte	0x97
 8535 0a3e 02       		.uleb128 0x2
 8536 0a3f 91       		.byte	0x91
 8537 0a40 43       		.sleb128 -61
 8538 0a41 00       		.byte	0
 8539 0a42 00       		.byte	0
 8540 0a43 07       		.uleb128 0x7
 8541 0a44 04       		.byte	0x4
 8542 0a45 490A0000 		.4byte	0xa49
 8543 0a49 08       		.uleb128 0x8
 8544 0a4a 31060000 		.4byte	0x631
 8545 0a4e 07       		.uleb128 0x7
 8546 0a4f 04       		.byte	0x4
 8547 0a50 540A0000 		.4byte	0xa54
 8548 0a54 08       		.uleb128 0x8
 8549 0a55 EC050000 		.4byte	0x5ec
 8550 0a59 0E       		.uleb128 0xe
 8551 0a5a ED000000 		.4byte	0xed
 8552 0a5e 690A0000 		.4byte	0xa69
 8553 0a62 0F       		.uleb128 0xf
 8554 0a63 0C010000 		.4byte	0x10c
 8555 0a67 F9       		.byte	0xf9
 8556 0a68 00       		.byte	0
 8557 0a69 0E       		.uleb128 0xe
 8558 0a6a ED000000 		.4byte	0xed
 8559 0a6e 790A0000 		.4byte	0xa79
 8560 0a72 0F       		.uleb128 0xf
 8561 0a73 0C010000 		.4byte	0x10c
 8562 0a77 31       		.byte	0x31
 8563 0a78 00       		.byte	0
 8564 0a79 0E       		.uleb128 0xe
 8565 0a7a 97000000 		.4byte	0x97
 8566 0a7e 8C0A0000 		.4byte	0xa8c
 8567 0a82 25       		.uleb128 0x25
 8568 0a83 0C010000 		.4byte	0x10c
 8569 0a87 03       		.uleb128 0x3
 8570 0a88 91       		.byte	0x91
 8571 0a89 48       		.sleb128 -56
 8572 0a8a 06       		.byte	0x6
 8573 0a8b 00       		.byte	0
 8574 0a8c 1E       		.uleb128 0x1e
 8575 0a8d 0D0D0000 		.4byte	.LASF182
 8576 0a91 01       		.byte	0x1
 8577 0a92 F101     		.2byte	0x1f1
 8578 0a94 00000000 		.4byte	.LFB69
 8579 0a98 34070000 		.4byte	.LFE69-.LFB69
 8580 0a9c 01       		.uleb128 0x1
 8581 0a9d 9C       		.byte	0x9c
 8582 0a9e 720B0000 		.4byte	0xb72
 8583 0aa2 22       		.uleb128 0x22
 8584 0aa3 FB050000 		.4byte	.LASF183
 8585 0aa7 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 200


 8586 0aa8 F101     		.2byte	0x1f1
 8587 0aaa A3000000 		.4byte	0xa3
 8588 0aae 03       		.uleb128 0x3
 8589 0aaf 91       		.byte	0x91
 8590 0ab0 AE7C     		.sleb128 -466
 8591 0ab2 22       		.uleb128 0x22
 8592 0ab3 730C0000 		.4byte	.LASF172
 8593 0ab7 01       		.byte	0x1
 8594 0ab8 F101     		.2byte	0x1f1
 8595 0aba 97000000 		.4byte	0x97
 8596 0abe 03       		.uleb128 0x3
 8597 0abf 91       		.byte	0x91
 8598 0ac0 AD7C     		.sleb128 -467
 8599 0ac2 23       		.uleb128 0x23
 8600 0ac3 6900     		.ascii	"i\000"
 8601 0ac5 01       		.byte	0x1
 8602 0ac6 F201     		.2byte	0x1f2
 8603 0ac8 97000000 		.4byte	0x97
 8604 0acc 02       		.uleb128 0x2
 8605 0acd 91       		.byte	0x91
 8606 0ace 6F       		.sleb128 -17
 8607 0acf 23       		.uleb128 0x23
 8608 0ad0 6A00     		.ascii	"j\000"
 8609 0ad2 01       		.byte	0x1
 8610 0ad3 F201     		.2byte	0x1f2
 8611 0ad5 97000000 		.4byte	0x97
 8612 0ad9 02       		.uleb128 0x2
 8613 0ada 91       		.byte	0x91
 8614 0adb 6E       		.sleb128 -18
 8615 0adc 1F       		.uleb128 0x1f
 8616 0add 71010000 		.4byte	.LASF184
 8617 0ae1 01       		.byte	0x1
 8618 0ae2 F401     		.2byte	0x1f4
 8619 0ae4 97000000 		.4byte	0x97
 8620 0ae8 02       		.uleb128 0x2
 8621 0ae9 91       		.byte	0x91
 8622 0aea 65       		.sleb128 -27
 8623 0aeb 1F       		.uleb128 0x1f
 8624 0aec A0020000 		.4byte	.LASF185
 8625 0af0 01       		.byte	0x1
 8626 0af1 F701     		.2byte	0x1f7
 8627 0af3 720B0000 		.4byte	0xb72
 8628 0af7 02       		.uleb128 0x2
 8629 0af8 91       		.byte	0x91
 8630 0af9 68       		.sleb128 -24
 8631 0afa 1F       		.uleb128 0x1f
 8632 0afb 4A050000 		.4byte	.LASF44
 8633 0aff 01       		.byte	0x1
 8634 0b00 FD01     		.2byte	0x1fd
 8635 0b02 EC050000 		.4byte	0x5ec
 8636 0b06 03       		.uleb128 0x3
 8637 0b07 91       		.byte	0x91
 8638 0b08 B87F     		.sleb128 -72
 8639 0b0a 1F       		.uleb128 0x1f
 8640 0b0b 8D0A0000 		.4byte	.LASF171
 8641 0b0f 01       		.byte	0x1
 8642 0b10 0002     		.2byte	0x200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 201


 8643 0b12 880B0000 		.4byte	0xb88
 8644 0b16 03       		.uleb128 0x3
 8645 0b17 91       		.byte	0x91
 8646 0b18 B47E     		.sleb128 -204
 8647 0b1a 1F       		.uleb128 0x1f
 8648 0b1b CF000000 		.4byte	.LASF186
 8649 0b1f 01       		.byte	0x1
 8650 0b20 0802     		.2byte	0x208
 8651 0b22 97000000 		.4byte	0x97
 8652 0b26 02       		.uleb128 0x2
 8653 0b27 91       		.byte	0x91
 8654 0b28 67       		.sleb128 -25
 8655 0b29 1F       		.uleb128 0x1f
 8656 0b2a 39100000 		.4byte	.LASF187
 8657 0b2e 01       		.byte	0x1
 8658 0b2f 0A02     		.2byte	0x20a
 8659 0b31 31060000 		.4byte	0x631
 8660 0b35 03       		.uleb128 0x3
 8661 0b36 91       		.byte	0x91
 8662 0b37 A47E     		.sleb128 -220
 8663 0b39 1F       		.uleb128 0x1f
 8664 0b3a D20F0000 		.4byte	.LASF170
 8665 0b3e 01       		.byte	0x1
 8666 0b3f 0C02     		.2byte	0x20c
 8667 0b41 9D0B0000 		.4byte	0xb9d
 8668 0b45 03       		.uleb128 0x3
 8669 0b46 91       		.byte	0x91
 8670 0b47 B47C     		.sleb128 -460
 8671 0b49 1F       		.uleb128 0x1f
 8672 0b4a 3F0F0000 		.4byte	.LASF188
 8673 0b4e 01       		.byte	0x1
 8674 0b4f 2302     		.2byte	0x223
 8675 0b51 97000000 		.4byte	0x97
 8676 0b55 02       		.uleb128 0x2
 8677 0b56 91       		.byte	0x91
 8678 0b57 66       		.sleb128 -26
 8679 0b58 1A       		.uleb128 0x1a
 8680 0b59 94050000 		.4byte	.LBB24
 8681 0b5d 7E010000 		.4byte	.LBE24-.LBB24
 8682 0b61 23       		.uleb128 0x23
 8683 0b62 736F6400 		.ascii	"sod\000"
 8684 0b66 01       		.byte	0x1
 8685 0b67 3402     		.2byte	0x234
 8686 0b69 97000000 		.4byte	0x97
 8687 0b6d 02       		.uleb128 0x2
 8688 0b6e 91       		.byte	0x91
 8689 0b6f 64       		.sleb128 -28
 8690 0b70 00       		.byte	0
 8691 0b71 00       		.byte	0
 8692 0b72 07       		.uleb128 0x7
 8693 0b73 04       		.byte	0x4
 8694 0b74 7D050000 		.4byte	0x57d
 8695 0b78 0E       		.uleb128 0xe
 8696 0b79 540A0000 		.4byte	0xa54
 8697 0b7d 880B0000 		.4byte	0xb88
 8698 0b81 0F       		.uleb128 0xf
 8699 0b82 0C010000 		.4byte	0x10c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 202


 8700 0b86 02       		.byte	0x2
 8701 0b87 00       		.byte	0
 8702 0b88 08       		.uleb128 0x8
 8703 0b89 780B0000 		.4byte	0xb78
 8704 0b8d 0E       		.uleb128 0xe
 8705 0b8e 490A0000 		.4byte	0xa49
 8706 0b92 9D0B0000 		.4byte	0xb9d
 8707 0b96 0F       		.uleb128 0xf
 8708 0b97 0C010000 		.4byte	0x10c
 8709 0b9b 0E       		.byte	0xe
 8710 0b9c 00       		.byte	0
 8711 0b9d 08       		.uleb128 0x8
 8712 0b9e 8D0B0000 		.4byte	0xb8d
 8713 0ba2 1E       		.uleb128 0x1e
 8714 0ba3 2C030000 		.4byte	.LASF189
 8715 0ba7 01       		.byte	0x1
 8716 0ba8 5502     		.2byte	0x255
 8717 0baa 00000000 		.4byte	.LFB70
 8718 0bae 34010000 		.4byte	.LFE70-.LFB70
 8719 0bb2 01       		.uleb128 0x1
 8720 0bb3 9C       		.byte	0x9c
 8721 0bb4 000C0000 		.4byte	0xc00
 8722 0bb8 22       		.uleb128 0x22
 8723 0bb9 FB050000 		.4byte	.LASF183
 8724 0bbd 01       		.byte	0x1
 8725 0bbe 5502     		.2byte	0x255
 8726 0bc0 A3000000 		.4byte	0xa3
 8727 0bc4 02       		.uleb128 0x2
 8728 0bc5 91       		.byte	0x91
 8729 0bc6 6E       		.sleb128 -18
 8730 0bc7 22       		.uleb128 0x22
 8731 0bc8 D20F0000 		.4byte	.LASF170
 8732 0bcc 01       		.byte	0x1
 8733 0bcd 5502     		.2byte	0x255
 8734 0bcf 430A0000 		.4byte	0xa43
 8735 0bd3 02       		.uleb128 0x2
 8736 0bd4 91       		.byte	0x91
 8737 0bd5 68       		.sleb128 -24
 8738 0bd6 23       		.uleb128 0x23
 8739 0bd7 736F6400 		.ascii	"sod\000"
 8740 0bdb 01       		.byte	0x1
 8741 0bdc 5602     		.2byte	0x256
 8742 0bde 97000000 		.4byte	0x97
 8743 0be2 02       		.uleb128 0x2
 8744 0be3 91       		.byte	0x91
 8745 0be4 75       		.sleb128 -11
 8746 0be5 23       		.uleb128 0x23
 8747 0be6 6900     		.ascii	"i\000"
 8748 0be8 01       		.byte	0x1
 8749 0be9 5802     		.2byte	0x258
 8750 0beb 97000000 		.4byte	0x97
 8751 0bef 02       		.uleb128 0x2
 8752 0bf0 91       		.byte	0x91
 8753 0bf1 77       		.sleb128 -9
 8754 0bf2 23       		.uleb128 0x23
 8755 0bf3 6A00     		.ascii	"j\000"
 8756 0bf5 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 203


 8757 0bf6 5802     		.2byte	0x258
 8758 0bf8 97000000 		.4byte	0x97
 8759 0bfc 02       		.uleb128 0x2
 8760 0bfd 91       		.byte	0x91
 8761 0bfe 76       		.sleb128 -10
 8762 0bff 00       		.byte	0
 8763 0c00 26       		.uleb128 0x26
 8764 0c01 F9070000 		.4byte	.LASF190
 8765 0c05 01       		.byte	0x1
 8766 0c06 7C02     		.2byte	0x27c
 8767 0c08 00000000 		.4byte	.LFB71
 8768 0c0c 14000000 		.4byte	.LFE71-.LFB71
 8769 0c10 01       		.uleb128 0x1
 8770 0c11 9C       		.byte	0x9c
 8771 0c12 260C0000 		.4byte	0xc26
 8772 0c16 22       		.uleb128 0x22
 8773 0c17 FB050000 		.4byte	.LASF183
 8774 0c1b 01       		.byte	0x1
 8775 0c1c 7C02     		.2byte	0x27c
 8776 0c1e A3000000 		.4byte	0xa3
 8777 0c22 02       		.uleb128 0x2
 8778 0c23 91       		.byte	0x91
 8779 0c24 76       		.sleb128 -10
 8780 0c25 00       		.byte	0
 8781 0c26 27       		.uleb128 0x27
 8782 0c27 80020000 		.4byte	.LASF228
 8783 0c2b 01       		.byte	0x1
 8784 0c2c 8402     		.2byte	0x284
 8785 0c2e 00000000 		.4byte	.LFB72
 8786 0c32 0C000000 		.4byte	.LFE72-.LFB72
 8787 0c36 01       		.uleb128 0x1
 8788 0c37 9C       		.byte	0x9c
 8789 0c38 1E       		.uleb128 0x1e
 8790 0c39 D60C0000 		.4byte	.LASF191
 8791 0c3d 01       		.byte	0x1
 8792 0c3e 8802     		.2byte	0x288
 8793 0c40 00000000 		.4byte	.LFB73
 8794 0c44 B8030000 		.4byte	.LFE73-.LFB73
 8795 0c48 01       		.uleb128 0x1
 8796 0c49 9C       		.byte	0x9c
 8797 0c4a 840D0000 		.4byte	0xd84
 8798 0c4e 22       		.uleb128 0x22
 8799 0c4f 230C0000 		.4byte	.LASF168
 8800 0c53 01       		.byte	0x1
 8801 0c54 8802     		.2byte	0x288
 8802 0c56 97000000 		.4byte	0x97
 8803 0c5a 03       		.uleb128 0x3
 8804 0c5b 91       		.byte	0x91
 8805 0c5c 976B     		.sleb128 -2665
 8806 0c5e 22       		.uleb128 0x22
 8807 0c5f 4C0D0000 		.4byte	.LASF169
 8808 0c63 01       		.byte	0x1
 8809 0c64 8802     		.2byte	0x288
 8810 0c66 97000000 		.4byte	0x97
 8811 0c6a 03       		.uleb128 0x3
 8812 0c6b 91       		.byte	0x91
 8813 0c6c 966B     		.sleb128 -2666
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 204


 8814 0c6e 22       		.uleb128 0x22
 8815 0c6f D20F0000 		.4byte	.LASF170
 8816 0c73 01       		.byte	0x1
 8817 0c74 8802     		.2byte	0x288
 8818 0c76 430A0000 		.4byte	0xa43
 8819 0c7a 03       		.uleb128 0x3
 8820 0c7b 91       		.byte	0x91
 8821 0c7c 906B     		.sleb128 -2672
 8822 0c7e 22       		.uleb128 0x22
 8823 0c7f 8D0A0000 		.4byte	.LASF171
 8824 0c83 01       		.byte	0x1
 8825 0c84 8802     		.2byte	0x288
 8826 0c86 4E0A0000 		.4byte	0xa4e
 8827 0c8a 03       		.uleb128 0x3
 8828 0c8b 91       		.byte	0x91
 8829 0c8c 8C6B     		.sleb128 -2676
 8830 0c8e 1F       		.uleb128 0x1f
 8831 0c8f 170C0000 		.4byte	.LASF192
 8832 0c93 01       		.byte	0x1
 8833 0c94 8A02     		.2byte	0x28a
 8834 0c96 840D0000 		.4byte	0xd84
 8835 0c9a 03       		.uleb128 0x3
 8836 0c9b 91       		.byte	0x91
 8837 0c9c 806C     		.sleb128 -2560
 8838 0c9e 23       		.uleb128 0x23
 8839 0c9f 6900     		.ascii	"i\000"
 8840 0ca1 01       		.byte	0x1
 8841 0ca2 8B02     		.2byte	0x28b
 8842 0ca4 73000000 		.4byte	0x73
 8843 0ca8 02       		.uleb128 0x2
 8844 0ca9 91       		.byte	0x91
 8845 0caa 6C       		.sleb128 -20
 8846 0cab 23       		.uleb128 0x23
 8847 0cac 69647800 		.ascii	"idx\000"
 8848 0cb0 01       		.byte	0x1
 8849 0cb1 8C02     		.2byte	0x28c
 8850 0cb3 73000000 		.4byte	0x73
 8851 0cb7 02       		.uleb128 0x2
 8852 0cb8 91       		.byte	0x91
 8853 0cb9 68       		.sleb128 -24
 8854 0cba 1F       		.uleb128 0x1f
 8855 0cbb F00F0000 		.4byte	.LASF177
 8856 0cbf 01       		.byte	0x1
 8857 0cc0 8D02     		.2byte	0x28d
 8858 0cc2 D3000000 		.4byte	0xd3
 8859 0cc6 02       		.uleb128 0x2
 8860 0cc7 91       		.byte	0x91
 8861 0cc8 48       		.sleb128 -56
 8862 0cc9 1F       		.uleb128 0x1f
 8863 0cca 610C0000 		.4byte	.LASF193
 8864 0cce 01       		.byte	0x1
 8865 0ccf 8E02     		.2byte	0x28e
 8866 0cd1 AF000000 		.4byte	0xaf
 8867 0cd5 02       		.uleb128 0x2
 8868 0cd6 91       		.byte	0x91
 8869 0cd7 4C       		.sleb128 -52
 8870 0cd8 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 205


 8871 0cd9 C80F0000 		.4byte	.LASF194
 8872 0cdd 01       		.byte	0x1
 8873 0cde 8F02     		.2byte	0x28f
 8874 0ce0 DF000000 		.4byte	0xdf
 8875 0ce4 02       		.uleb128 0x2
 8876 0ce5 91       		.byte	0x91
 8877 0ce6 44       		.sleb128 -60
 8878 0ce7 1F       		.uleb128 0x1f
 8879 0ce8 1F0D0000 		.4byte	.LASF195
 8880 0cec 01       		.byte	0x1
 8881 0ced 9002     		.2byte	0x290
 8882 0cef 97000000 		.4byte	0x97
 8883 0cf3 02       		.uleb128 0x2
 8884 0cf4 91       		.byte	0x91
 8885 0cf5 57       		.sleb128 -41
 8886 0cf6 1F       		.uleb128 0x1f
 8887 0cf7 BA090000 		.4byte	.LASF196
 8888 0cfb 01       		.byte	0x1
 8889 0cfc 9102     		.2byte	0x291
 8890 0cfe BB000000 		.4byte	0xbb
 8891 0d02 02       		.uleb128 0x2
 8892 0d03 91       		.byte	0x91
 8893 0d04 56       		.sleb128 -42
 8894 0d05 1F       		.uleb128 0x1f
 8895 0d06 0E0F0000 		.4byte	.LASF197
 8896 0d0a 01       		.byte	0x1
 8897 0d0b 9202     		.2byte	0x292
 8898 0d0d C7000000 		.4byte	0xc7
 8899 0d11 02       		.uleb128 0x2
 8900 0d12 91       		.byte	0x91
 8901 0d13 54       		.sleb128 -44
 8902 0d14 1F       		.uleb128 0x1f
 8903 0d15 390B0000 		.4byte	.LASF198
 8904 0d19 01       		.byte	0x1
 8905 0d1a 9302     		.2byte	0x293
 8906 0d1c A3000000 		.4byte	0xa3
 8907 0d20 02       		.uleb128 0x2
 8908 0d21 91       		.byte	0x91
 8909 0d22 52       		.sleb128 -46
 8910 0d23 1F       		.uleb128 0x1f
 8911 0d24 A0020000 		.4byte	.LASF185
 8912 0d28 01       		.byte	0x1
 8913 0d29 9402     		.2byte	0x294
 8914 0d2b 720B0000 		.4byte	0xb72
 8915 0d2f 02       		.uleb128 0x2
 8916 0d30 91       		.byte	0x91
 8917 0d31 64       		.sleb128 -28
 8918 0d32 1A       		.uleb128 0x1a
 8919 0d33 54000000 		.4byte	.LBB25
 8920 0d37 4A030000 		.4byte	.LBE25-.LBB25
 8921 0d3b 1F       		.uleb128 0x1f
 8922 0d3c FC090000 		.4byte	.LASF173
 8923 0d40 01       		.byte	0x1
 8924 0d41 9702     		.2byte	0x297
 8925 0d43 A7060000 		.4byte	0x6a7
 8926 0d47 02       		.uleb128 0x2
 8927 0d48 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 206


 8928 0d49 60       		.sleb128 -32
 8929 0d4a 1F       		.uleb128 0x1f
 8930 0d4b 6B010000 		.4byte	.LASF199
 8931 0d4f 01       		.byte	0x1
 8932 0d50 9802     		.2byte	0x298
 8933 0d52 A7060000 		.4byte	0x6a7
 8934 0d56 02       		.uleb128 0x2
 8935 0d57 91       		.byte	0x91
 8936 0d58 58       		.sleb128 -40
 8937 0d59 23       		.uleb128 0x23
 8938 0d5a 73747200 		.ascii	"str\000"
 8939 0d5e 01       		.byte	0x1
 8940 0d5f 9902     		.2byte	0x299
 8941 0d61 950D0000 		.4byte	0xd95
 8942 0d65 03       		.uleb128 0x3
 8943 0d66 91       		.byte	0x91
 8944 0d67 9C6B     		.sleb128 -2660
 8945 0d69 1A       		.uleb128 0x1a
 8946 0d6a 9A000000 		.4byte	.LBB26
 8947 0d6e DE020000 		.4byte	.LBE26-.LBB26
 8948 0d72 23       		.uleb128 0x23
 8949 0d73 736F6400 		.ascii	"sod\000"
 8950 0d77 01       		.byte	0x1
 8951 0d78 A202     		.2byte	0x2a2
 8952 0d7a 97000000 		.4byte	0x97
 8953 0d7e 02       		.uleb128 0x2
 8954 0d7f 91       		.byte	0x91
 8955 0d80 5F       		.sleb128 -33
 8956 0d81 00       		.byte	0
 8957 0d82 00       		.byte	0
 8958 0d83 00       		.byte	0
 8959 0d84 0E       		.uleb128 0xe
 8960 0d85 ED000000 		.4byte	0xed
 8961 0d89 950D0000 		.4byte	0xd95
 8962 0d8d 20       		.uleb128 0x20
 8963 0d8e 0C010000 		.4byte	0x10c
 8964 0d92 C309     		.2byte	0x9c3
 8965 0d94 00       		.byte	0
 8966 0d95 0E       		.uleb128 0xe
 8967 0d96 ED000000 		.4byte	0xed
 8968 0d9a A50D0000 		.4byte	0xda5
 8969 0d9e 0F       		.uleb128 0xf
 8970 0d9f 0C010000 		.4byte	0x10c
 8971 0da3 63       		.byte	0x63
 8972 0da4 00       		.byte	0
 8973 0da5 1E       		.uleb128 0x1e
 8974 0da6 BA000000 		.4byte	.LASF200
 8975 0daa 01       		.byte	0x1
 8976 0dab F002     		.2byte	0x2f0
 8977 0dad 00000000 		.4byte	.LFB74
 8978 0db1 14020000 		.4byte	.LFE74-.LFB74
 8979 0db5 01       		.uleb128 0x1
 8980 0db6 9C       		.byte	0x9c
 8981 0db7 020E0000 		.4byte	0xe02
 8982 0dbb 22       		.uleb128 0x22
 8983 0dbc 170C0000 		.4byte	.LASF192
 8984 0dc0 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 207


 8985 0dc1 F002     		.2byte	0x2f0
 8986 0dc3 13010000 		.4byte	0x113
 8987 0dc7 03       		.uleb128 0x3
 8988 0dc8 91       		.byte	0x91
 8989 0dc9 F47E     		.sleb128 -140
 8990 0dcb 23       		.uleb128 0x23
 8991 0dcc 6900     		.ascii	"i\000"
 8992 0dce 01       		.byte	0x1
 8993 0dcf F302     		.2byte	0x2f3
 8994 0dd1 73000000 		.4byte	0x73
 8995 0dd5 02       		.uleb128 0x2
 8996 0dd6 91       		.byte	0x91
 8997 0dd7 64       		.sleb128 -28
 8998 0dd8 1F       		.uleb128 0x1f
 8999 0dd9 A0020000 		.4byte	.LASF185
 9000 0ddd 01       		.byte	0x1
 9001 0dde F402     		.2byte	0x2f4
 9002 0de0 720B0000 		.4byte	0xb72
 9003 0de4 02       		.uleb128 0x2
 9004 0de5 91       		.byte	0x91
 9005 0de6 60       		.sleb128 -32
 9006 0de7 1A       		.uleb128 0x1a
 9007 0de8 20000000 		.4byte	.LBB27
 9008 0dec AC010000 		.4byte	.LBE27-.LBB27
 9009 0df0 23       		.uleb128 0x23
 9010 0df1 73747200 		.ascii	"str\000"
 9011 0df5 01       		.byte	0x1
 9012 0df6 F802     		.2byte	0x2f8
 9013 0df8 950D0000 		.4byte	0xd95
 9014 0dfc 03       		.uleb128 0x3
 9015 0dfd 91       		.byte	0x91
 9016 0dfe FC7E     		.sleb128 -132
 9017 0e00 00       		.byte	0
 9018 0e01 00       		.byte	0
 9019 0e02 26       		.uleb128 0x26
 9020 0e03 790D0000 		.4byte	.LASF201
 9021 0e07 01       		.byte	0x1
 9022 0e08 1903     		.2byte	0x319
 9023 0e0a 00000000 		.4byte	.LFB75
 9024 0e0e 12000000 		.4byte	.LFE75-.LFB75
 9025 0e12 01       		.uleb128 0x1
 9026 0e13 9C       		.byte	0x9c
 9027 0e14 280E0000 		.4byte	0xe28
 9028 0e18 22       		.uleb128 0x22
 9029 0e19 170C0000 		.4byte	.LASF192
 9030 0e1d 01       		.byte	0x1
 9031 0e1e 1903     		.2byte	0x319
 9032 0e20 13010000 		.4byte	0x113
 9033 0e24 02       		.uleb128 0x2
 9034 0e25 91       		.byte	0x91
 9035 0e26 74       		.sleb128 -12
 9036 0e27 00       		.byte	0
 9037 0e28 26       		.uleb128 0x26
 9038 0e29 1D0B0000 		.4byte	.LASF202
 9039 0e2d 01       		.byte	0x1
 9040 0e2e 2103     		.2byte	0x321
 9041 0e30 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 208


 9042 0e34 12000000 		.4byte	.LFE76-.LFB76
 9043 0e38 01       		.uleb128 0x1
 9044 0e39 9C       		.byte	0x9c
 9045 0e3a 4E0E0000 		.4byte	0xe4e
 9046 0e3e 22       		.uleb128 0x22
 9047 0e3f 170C0000 		.4byte	.LASF192
 9048 0e43 01       		.byte	0x1
 9049 0e44 2103     		.2byte	0x321
 9050 0e46 13010000 		.4byte	0x113
 9051 0e4a 02       		.uleb128 0x2
 9052 0e4b 91       		.byte	0x91
 9053 0e4c 74       		.sleb128 -12
 9054 0e4d 00       		.byte	0
 9055 0e4e 26       		.uleb128 0x26
 9056 0e4f 630D0000 		.4byte	.LASF203
 9057 0e53 01       		.byte	0x1
 9058 0e54 2903     		.2byte	0x329
 9059 0e56 00000000 		.4byte	.LFB77
 9060 0e5a 12000000 		.4byte	.LFE77-.LFB77
 9061 0e5e 01       		.uleb128 0x1
 9062 0e5f 9C       		.byte	0x9c
 9063 0e60 740E0000 		.4byte	0xe74
 9064 0e64 22       		.uleb128 0x22
 9065 0e65 170C0000 		.4byte	.LASF192
 9066 0e69 01       		.byte	0x1
 9067 0e6a 2903     		.2byte	0x329
 9068 0e6c 13010000 		.4byte	0x113
 9069 0e70 02       		.uleb128 0x2
 9070 0e71 91       		.byte	0x91
 9071 0e72 74       		.sleb128 -12
 9072 0e73 00       		.byte	0
 9073 0e74 26       		.uleb128 0x26
 9074 0e75 300A0000 		.4byte	.LASF204
 9075 0e79 01       		.byte	0x1
 9076 0e7a 3103     		.2byte	0x331
 9077 0e7c 00000000 		.4byte	.LFB78
 9078 0e80 12000000 		.4byte	.LFE78-.LFB78
 9079 0e84 01       		.uleb128 0x1
 9080 0e85 9C       		.byte	0x9c
 9081 0e86 9A0E0000 		.4byte	0xe9a
 9082 0e8a 22       		.uleb128 0x22
 9083 0e8b 170C0000 		.4byte	.LASF192
 9084 0e8f 01       		.byte	0x1
 9085 0e90 3103     		.2byte	0x331
 9086 0e92 13010000 		.4byte	0x113
 9087 0e96 02       		.uleb128 0x2
 9088 0e97 91       		.byte	0x91
 9089 0e98 74       		.sleb128 -12
 9090 0e99 00       		.byte	0
 9091 0e9a 26       		.uleb128 0x26
 9092 0e9b 8E0D0000 		.4byte	.LASF205
 9093 0e9f 01       		.byte	0x1
 9094 0ea0 3803     		.2byte	0x338
 9095 0ea2 00000000 		.4byte	.LFB79
 9096 0ea6 12000000 		.4byte	.LFE79-.LFB79
 9097 0eaa 01       		.uleb128 0x1
 9098 0eab 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 209


 9099 0eac C00E0000 		.4byte	0xec0
 9100 0eb0 22       		.uleb128 0x22
 9101 0eb1 170C0000 		.4byte	.LASF192
 9102 0eb5 01       		.byte	0x1
 9103 0eb6 3803     		.2byte	0x338
 9104 0eb8 13010000 		.4byte	0x113
 9105 0ebc 02       		.uleb128 0x2
 9106 0ebd 91       		.byte	0x91
 9107 0ebe 74       		.sleb128 -12
 9108 0ebf 00       		.byte	0
 9109 0ec0 26       		.uleb128 0x26
 9110 0ec1 C7020000 		.4byte	.LASF206
 9111 0ec5 01       		.byte	0x1
 9112 0ec6 4003     		.2byte	0x340
 9113 0ec8 00000000 		.4byte	.LFB80
 9114 0ecc 12000000 		.4byte	.LFE80-.LFB80
 9115 0ed0 01       		.uleb128 0x1
 9116 0ed1 9C       		.byte	0x9c
 9117 0ed2 E60E0000 		.4byte	0xee6
 9118 0ed6 22       		.uleb128 0x22
 9119 0ed7 170C0000 		.4byte	.LASF192
 9120 0edb 01       		.byte	0x1
 9121 0edc 4003     		.2byte	0x340
 9122 0ede 13010000 		.4byte	0x113
 9123 0ee2 02       		.uleb128 0x2
 9124 0ee3 91       		.byte	0x91
 9125 0ee4 74       		.sleb128 -12
 9126 0ee5 00       		.byte	0
 9127 0ee6 26       		.uleb128 0x26
 9128 0ee7 34110000 		.4byte	.LASF207
 9129 0eeb 01       		.byte	0x1
 9130 0eec 4903     		.2byte	0x349
 9131 0eee 00000000 		.4byte	.LFB81
 9132 0ef2 12000000 		.4byte	.LFE81-.LFB81
 9133 0ef6 01       		.uleb128 0x1
 9134 0ef7 9C       		.byte	0x9c
 9135 0ef8 0C0F0000 		.4byte	0xf0c
 9136 0efc 22       		.uleb128 0x22
 9137 0efd 170C0000 		.4byte	.LASF192
 9138 0f01 01       		.byte	0x1
 9139 0f02 4903     		.2byte	0x349
 9140 0f04 13010000 		.4byte	0x113
 9141 0f08 02       		.uleb128 0x2
 9142 0f09 91       		.byte	0x91
 9143 0f0a 74       		.sleb128 -12
 9144 0f0b 00       		.byte	0
 9145 0f0c 1E       		.uleb128 0x1e
 9146 0f0d FC0C0000 		.4byte	.LASF208
 9147 0f11 01       		.byte	0x1
 9148 0f12 5103     		.2byte	0x351
 9149 0f14 00000000 		.4byte	.LFB82
 9150 0f18 84000000 		.4byte	.LFE82-.LFB82
 9151 0f1c 01       		.uleb128 0x1
 9152 0f1d 9C       		.byte	0x9c
 9153 0f1e 5F0F0000 		.4byte	0xf5f
 9154 0f22 22       		.uleb128 0x22
 9155 0f23 0A050000 		.4byte	.LASF181
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 210


 9156 0f27 01       		.byte	0x1
 9157 0f28 5103     		.2byte	0x351
 9158 0f2a A7060000 		.4byte	0x6a7
 9159 0f2e 02       		.uleb128 0x2
 9160 0f2f 91       		.byte	0x91
 9161 0f30 6C       		.sleb128 -20
 9162 0f31 22       		.uleb128 0x22
 9163 0f32 9E070000 		.4byte	.LASF180
 9164 0f36 01       		.byte	0x1
 9165 0f37 5103     		.2byte	0x351
 9166 0f39 A3000000 		.4byte	0xa3
 9167 0f3d 02       		.uleb128 0x2
 9168 0f3e 91       		.byte	0x91
 9169 0f3f 6A       		.sleb128 -22
 9170 0f40 22       		.uleb128 0x22
 9171 0f41 AC0D0000 		.4byte	.LASF209
 9172 0f45 01       		.byte	0x1
 9173 0f46 5103     		.2byte	0x351
 9174 0f48 97000000 		.4byte	0x97
 9175 0f4c 02       		.uleb128 0x2
 9176 0f4d 91       		.byte	0x91
 9177 0f4e 69       		.sleb128 -23
 9178 0f4f 1F       		.uleb128 0x1f
 9179 0f50 FB050000 		.4byte	.LASF183
 9180 0f54 01       		.byte	0x1
 9181 0f55 5303     		.2byte	0x353
 9182 0f57 A3000000 		.4byte	0xa3
 9183 0f5b 02       		.uleb128 0x2
 9184 0f5c 91       		.byte	0x91
 9185 0f5d 76       		.sleb128 -10
 9186 0f5e 00       		.byte	0
 9187 0f5f 1E       		.uleb128 0x1e
 9188 0f60 20050000 		.4byte	.LASF210
 9189 0f64 01       		.byte	0x1
 9190 0f65 6D03     		.2byte	0x36d
 9191 0f67 00000000 		.4byte	.LFB83
 9192 0f6b 88000000 		.4byte	.LFE83-.LFB83
 9193 0f6f 01       		.uleb128 0x1
 9194 0f70 9C       		.byte	0x9c
 9195 0f71 A30F0000 		.4byte	0xfa3
 9196 0f75 22       		.uleb128 0x22
 9197 0f76 0A050000 		.4byte	.LASF181
 9198 0f7a 01       		.byte	0x1
 9199 0f7b 6D03     		.2byte	0x36d
 9200 0f7d A7060000 		.4byte	0x6a7
 9201 0f81 02       		.uleb128 0x2
 9202 0f82 91       		.byte	0x91
 9203 0f83 6C       		.sleb128 -20
 9204 0f84 22       		.uleb128 0x22
 9205 0f85 9E070000 		.4byte	.LASF180
 9206 0f89 01       		.byte	0x1
 9207 0f8a 6D03     		.2byte	0x36d
 9208 0f8c A3000000 		.4byte	0xa3
 9209 0f90 02       		.uleb128 0x2
 9210 0f91 91       		.byte	0x91
 9211 0f92 6A       		.sleb128 -22
 9212 0f93 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 211


 9213 0f94 FB050000 		.4byte	.LASF183
 9214 0f98 01       		.byte	0x1
 9215 0f99 6F03     		.2byte	0x36f
 9216 0f9b A3000000 		.4byte	0xa3
 9217 0f9f 02       		.uleb128 0x2
 9218 0fa0 91       		.byte	0x91
 9219 0fa1 76       		.sleb128 -10
 9220 0fa2 00       		.byte	0
 9221 0fa3 1E       		.uleb128 0x1e
 9222 0fa4 AB0A0000 		.4byte	.LASF211
 9223 0fa8 01       		.byte	0x1
 9224 0fa9 8A03     		.2byte	0x38a
 9225 0fab 00000000 		.4byte	.LFB84
 9226 0faf A0000000 		.4byte	.LFE84-.LFB84
 9227 0fb3 01       		.uleb128 0x1
 9228 0fb4 9C       		.byte	0x9c
 9229 0fb5 F60F0000 		.4byte	0xff6
 9230 0fb9 22       		.uleb128 0x22
 9231 0fba 0A050000 		.4byte	.LASF181
 9232 0fbe 01       		.byte	0x1
 9233 0fbf 8A03     		.2byte	0x38a
 9234 0fc1 A7060000 		.4byte	0x6a7
 9235 0fc5 02       		.uleb128 0x2
 9236 0fc6 91       		.byte	0x91
 9237 0fc7 74       		.sleb128 -12
 9238 0fc8 22       		.uleb128 0x22
 9239 0fc9 9E070000 		.4byte	.LASF180
 9240 0fcd 01       		.byte	0x1
 9241 0fce 8A03     		.2byte	0x38a
 9242 0fd0 A3000000 		.4byte	0xa3
 9243 0fd4 02       		.uleb128 0x2
 9244 0fd5 91       		.byte	0x91
 9245 0fd6 72       		.sleb128 -14
 9246 0fd7 28       		.uleb128 0x28
 9247 0fd8 696400   		.ascii	"id\000"
 9248 0fdb 01       		.byte	0x1
 9249 0fdc 8A03     		.2byte	0x38a
 9250 0fde 97000000 		.4byte	0x97
 9251 0fe2 02       		.uleb128 0x2
 9252 0fe3 91       		.byte	0x91
 9253 0fe4 71       		.sleb128 -15
 9254 0fe5 23       		.uleb128 0x23
 9255 0fe6 6900     		.ascii	"i\000"
 9256 0fe8 01       		.byte	0x1
 9257 0fe9 8C03     		.2byte	0x38c
 9258 0feb A3000000 		.4byte	0xa3
 9259 0fef 05       		.uleb128 0x5
 9260 0ff0 03       		.byte	0x3
 9261 0ff1 00000000 		.4byte	i.10045
 9262 0ff5 00       		.byte	0
 9263 0ff6 21       		.uleb128 0x21
 9264 0ff7 4E100000 		.4byte	.LASF213
 9265 0ffb 01       		.byte	0x1
 9266 0ffc A803     		.2byte	0x3a8
 9267 0ffe 97000000 		.4byte	0x97
 9268 1002 00000000 		.4byte	.LFB85
 9269 1006 3E000000 		.4byte	.LFE85-.LFB85
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 212


 9270 100a 01       		.uleb128 0x1
 9271 100b 9C       		.byte	0x9c
 9272 100c 4B100000 		.4byte	0x104b
 9273 1010 22       		.uleb128 0x22
 9274 1011 090A0000 		.4byte	.LASF214
 9275 1015 01       		.byte	0x1
 9276 1016 A803     		.2byte	0x3a8
 9277 1018 A7060000 		.4byte	0x6a7
 9278 101c 02       		.uleb128 0x2
 9279 101d 91       		.byte	0x91
 9280 101e 6C       		.sleb128 -20
 9281 101f 22       		.uleb128 0x22
 9282 1020 D1040000 		.4byte	.LASF215
 9283 1024 01       		.byte	0x1
 9284 1025 A803     		.2byte	0x3a8
 9285 1027 97000000 		.4byte	0x97
 9286 102b 02       		.uleb128 0x2
 9287 102c 91       		.byte	0x91
 9288 102d 6B       		.sleb128 -21
 9289 102e 23       		.uleb128 0x23
 9290 102f 6900     		.ascii	"i\000"
 9291 1031 01       		.byte	0x1
 9292 1032 AA03     		.2byte	0x3aa
 9293 1034 97000000 		.4byte	0x97
 9294 1038 02       		.uleb128 0x2
 9295 1039 91       		.byte	0x91
 9296 103a 77       		.sleb128 -9
 9297 103b 1F       		.uleb128 0x1f
 9298 103c BB0B0000 		.4byte	.LASF216
 9299 1040 01       		.byte	0x1
 9300 1041 AB03     		.2byte	0x3ab
 9301 1043 97000000 		.4byte	0x97
 9302 1047 02       		.uleb128 0x2
 9303 1048 91       		.byte	0x91
 9304 1049 76       		.sleb128 -10
 9305 104a 00       		.byte	0
 9306 104b 1E       		.uleb128 0x1e
 9307 104c DD0F0000 		.4byte	.LASF217
 9308 1050 01       		.byte	0x1
 9309 1051 B803     		.2byte	0x3b8
 9310 1053 00000000 		.4byte	.LFB86
 9311 1057 2E000000 		.4byte	.LFE86-.LFB86
 9312 105b 01       		.uleb128 0x1
 9313 105c 9C       		.byte	0x9c
 9314 105d 8F100000 		.4byte	0x108f
 9315 1061 22       		.uleb128 0x22
 9316 1062 4C040000 		.4byte	.LASF218
 9317 1066 01       		.byte	0x1
 9318 1067 B803     		.2byte	0x3b8
 9319 1069 97000000 		.4byte	0x97
 9320 106d 02       		.uleb128 0x2
 9321 106e 91       		.byte	0x91
 9322 106f 6F       		.sleb128 -17
 9323 1070 1F       		.uleb128 0x1f
 9324 1071 9E070000 		.4byte	.LASF180
 9325 1075 01       		.byte	0x1
 9326 1076 B903     		.2byte	0x3b9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 213


 9327 1078 73000000 		.4byte	0x73
 9328 107c 02       		.uleb128 0x2
 9329 107d 91       		.byte	0x91
 9330 107e 74       		.sleb128 -12
 9331 107f 1F       		.uleb128 0x1f
 9332 1080 0A050000 		.4byte	.LASF181
 9333 1084 01       		.byte	0x1
 9334 1085 BA03     		.2byte	0x3ba
 9335 1087 D7040000 		.4byte	0x4d7
 9336 108b 02       		.uleb128 0x2
 9337 108c 91       		.byte	0x91
 9338 108d 70       		.sleb128 -16
 9339 108e 00       		.byte	0
 9340 108f 29       		.uleb128 0x29
 9341 1090 7F030000 		.4byte	.LASF219
 9342 1094 01       		.byte	0x1
 9343 1095 C703     		.2byte	0x3c7
 9344 1097 97000000 		.4byte	0x97
 9345 109b 00000000 		.4byte	.LFB87
 9346 109f 90000000 		.4byte	.LFE87-.LFB87
 9347 10a3 01       		.uleb128 0x1
 9348 10a4 9C       		.byte	0x9c
 9349 10a5 F3100000 		.4byte	0x10f3
 9350 10a9 22       		.uleb128 0x22
 9351 10aa 4F070000 		.4byte	.LASF220
 9352 10ae 01       		.byte	0x1
 9353 10af C703     		.2byte	0x3c7
 9354 10b1 73000000 		.4byte	0x73
 9355 10b5 02       		.uleb128 0x2
 9356 10b6 91       		.byte	0x91
 9357 10b7 64       		.sleb128 -28
 9358 10b8 23       		.uleb128 0x23
 9359 10b9 6900     		.ascii	"i\000"
 9360 10bb 01       		.byte	0x1
 9361 10bc C903     		.2byte	0x3c9
 9362 10be 73000000 		.4byte	0x73
 9363 10c2 02       		.uleb128 0x2
 9364 10c3 91       		.byte	0x91
 9365 10c4 74       		.sleb128 -12
 9366 10c5 1F       		.uleb128 0x1f
 9367 10c6 81000000 		.4byte	.LASF221
 9368 10ca 01       		.byte	0x1
 9369 10cb CA03     		.2byte	0x3ca
 9370 10cd 97000000 		.4byte	0x97
 9371 10d1 02       		.uleb128 0x2
 9372 10d2 91       		.byte	0x91
 9373 10d3 6B       		.sleb128 -21
 9374 10d4 1F       		.uleb128 0x1f
 9375 10d5 3C050000 		.4byte	.LASF222
 9376 10d9 01       		.byte	0x1
 9377 10da CB03     		.2byte	0x3cb
 9378 10dc 73000000 		.4byte	0x73
 9379 10e0 02       		.uleb128 0x2
 9380 10e1 91       		.byte	0x91
 9381 10e2 6C       		.sleb128 -20
 9382 10e3 1F       		.uleb128 0x1f
 9383 10e4 92040000 		.4byte	.LASF223
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 214


 9384 10e8 01       		.byte	0x1
 9385 10e9 CC03     		.2byte	0x3cc
 9386 10eb 97000000 		.4byte	0x97
 9387 10ef 02       		.uleb128 0x2
 9388 10f0 91       		.byte	0x91
 9389 10f1 73       		.sleb128 -13
 9390 10f2 00       		.byte	0
 9391 10f3 1E       		.uleb128 0x1e
 9392 10f4 A10C0000 		.4byte	.LASF224
 9393 10f8 01       		.byte	0x1
 9394 10f9 F103     		.2byte	0x3f1
 9395 10fb 00000000 		.4byte	.LFB88
 9396 10ff 60000000 		.4byte	.LFE88-.LFB88
 9397 1103 01       		.uleb128 0x1
 9398 1104 9C       		.byte	0x9c
 9399 1105 17110000 		.4byte	0x1117
 9400 1109 23       		.uleb128 0x23
 9401 110a 6900     		.ascii	"i\000"
 9402 110c 01       		.byte	0x1
 9403 110d F303     		.2byte	0x3f3
 9404 110f A3000000 		.4byte	0xa3
 9405 1113 02       		.uleb128 0x2
 9406 1114 91       		.byte	0x91
 9407 1115 76       		.sleb128 -10
 9408 1116 00       		.byte	0
 9409 1117 29       		.uleb128 0x29
 9410 1118 0C0C0000 		.4byte	.LASF225
 9411 111c 01       		.byte	0x1
 9412 111d 0604     		.2byte	0x406
 9413 111f 97000000 		.4byte	0x97
 9414 1123 00000000 		.4byte	.LFB89
 9415 1127 58000000 		.4byte	.LFE89-.LFB89
 9416 112b 01       		.uleb128 0x1
 9417 112c 9C       		.byte	0x9c
 9418 112d 3F110000 		.4byte	0x113f
 9419 1131 23       		.uleb128 0x23
 9420 1132 6900     		.ascii	"i\000"
 9421 1134 01       		.byte	0x1
 9422 1135 0704     		.2byte	0x407
 9423 1137 A3000000 		.4byte	0xa3
 9424 113b 02       		.uleb128 0x2
 9425 113c 91       		.byte	0x91
 9426 113d 76       		.sleb128 -10
 9427 113e 00       		.byte	0
 9428 113f 2A       		.uleb128 0x2a
 9429 1140 42050000 		.4byte	.LASF310
 9430 1144 01       		.byte	0x1
 9431 1145 1904     		.2byte	0x419
 9432 1147 97000000 		.4byte	0x97
 9433 114b 00000000 		.4byte	.LFB90
 9434 114f CC000000 		.4byte	.LFE90-.LFB90
 9435 1153 01       		.uleb128 0x1
 9436 1154 9C       		.byte	0x9c
 9437 1155 2B       		.uleb128 0x2b
 9438 1156 D3070000 		.4byte	.LASF226
 9439 115a 01       		.byte	0x1
 9440 115b 4404     		.2byte	0x444
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 215


 9441 115d 00000000 		.4byte	.LFB91
 9442 1161 0C000000 		.4byte	.LFE91-.LFB91
 9443 1165 01       		.uleb128 0x1
 9444 1166 9C       		.byte	0x9c
 9445 1167 2B       		.uleb128 0x2b
 9446 1168 210A0000 		.4byte	.LASF227
 9447 116c 01       		.byte	0x1
 9448 116d 4B04     		.2byte	0x44b
 9449 116f 00000000 		.4byte	.LFB92
 9450 1173 0C000000 		.4byte	.LFE92-.LFB92
 9451 1177 01       		.uleb128 0x1
 9452 1178 9C       		.byte	0x9c
 9453 1179 27       		.uleb128 0x27
 9454 117a 740B0000 		.4byte	.LASF229
 9455 117e 01       		.byte	0x1
 9456 117f 5204     		.2byte	0x452
 9457 1181 00000000 		.4byte	.LFB93
 9458 1185 0C000000 		.4byte	.LFE93-.LFB93
 9459 1189 01       		.uleb128 0x1
 9460 118a 9C       		.byte	0x9c
 9461 118b 2B       		.uleb128 0x2b
 9462 118c E9040000 		.4byte	.LASF230
 9463 1190 01       		.byte	0x1
 9464 1191 5904     		.2byte	0x459
 9465 1193 00000000 		.4byte	.LFB94
 9466 1197 0C000000 		.4byte	.LFE94-.LFB94
 9467 119b 01       		.uleb128 0x1
 9468 119c 9C       		.byte	0x9c
 9469 119d 27       		.uleb128 0x27
 9470 119e 87050000 		.4byte	.LASF231
 9471 11a2 01       		.byte	0x1
 9472 11a3 6404     		.2byte	0x464
 9473 11a5 00000000 		.4byte	.LFB95
 9474 11a9 0C000000 		.4byte	.LFE95-.LFB95
 9475 11ad 01       		.uleb128 0x1
 9476 11ae 9C       		.byte	0x9c
 9477 11af 27       		.uleb128 0x27
 9478 11b0 8E0C0000 		.4byte	.LASF232
 9479 11b4 01       		.byte	0x1
 9480 11b5 6904     		.2byte	0x469
 9481 11b7 00000000 		.4byte	.LFB96
 9482 11bb 0C000000 		.4byte	.LFE96-.LFB96
 9483 11bf 01       		.uleb128 0x1
 9484 11c0 9C       		.byte	0x9c
 9485 11c1 27       		.uleb128 0x27
 9486 11c2 8F010000 		.4byte	.LASF233
 9487 11c6 01       		.byte	0x1
 9488 11c7 6D04     		.2byte	0x46d
 9489 11c9 00000000 		.4byte	.LFB97
 9490 11cd 0C000000 		.4byte	.LFE97-.LFB97
 9491 11d1 01       		.uleb128 0x1
 9492 11d2 9C       		.byte	0x9c
 9493 11d3 27       		.uleb128 0x27
 9494 11d4 DE080000 		.4byte	.LASF234
 9495 11d8 01       		.byte	0x1
 9496 11d9 7104     		.2byte	0x471
 9497 11db 00000000 		.4byte	.LFB98
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 216


 9498 11df 0C000000 		.4byte	.LFE98-.LFB98
 9499 11e3 01       		.uleb128 0x1
 9500 11e4 9C       		.byte	0x9c
 9501 11e5 2C       		.uleb128 0x2c
 9502 11e6 750A0000 		.4byte	.LASF236
 9503 11ea 01       		.byte	0x1
 9504 11eb 7504     		.2byte	0x475
 9505 11ed 00000000 		.4byte	.LFB99
 9506 11f1 BC000000 		.4byte	.LFE99-.LFB99
 9507 11f5 01       		.uleb128 0x1
 9508 11f6 9C       		.byte	0x9c
 9509 11f7 34120000 		.4byte	0x1234
 9510 11fb 1F       		.uleb128 0x1f
 9511 11fc 0E0F0000 		.4byte	.LASF197
 9512 1200 01       		.byte	0x1
 9513 1201 7704     		.2byte	0x477
 9514 1203 34120000 		.4byte	0x1234
 9515 1207 02       		.uleb128 0x2
 9516 1208 91       		.byte	0x91
 9517 1209 70       		.sleb128 -16
 9518 120a 1F       		.uleb128 0x1f
 9519 120b CE050000 		.4byte	.LASF235
 9520 120f 01       		.byte	0x1
 9521 1210 7804     		.2byte	0x478
 9522 1212 34120000 		.4byte	0x1234
 9523 1216 05       		.uleb128 0x5
 9524 1217 03       		.byte	0x3
 9525 1218 04000000 		.4byte	last_aux_int16.10115
 9526 121c 1A       		.uleb128 0x1a
 9527 121d 42000000 		.4byte	.LBB28
 9528 1221 1A000000 		.4byte	.LBE28-.LBB28
 9529 1225 23       		.uleb128 0x23
 9530 1226 6900     		.ascii	"i\000"
 9531 1228 01       		.byte	0x1
 9532 1229 7F04     		.2byte	0x47f
 9533 122b 97000000 		.4byte	0x97
 9534 122f 02       		.uleb128 0x2
 9535 1230 91       		.byte	0x91
 9536 1231 77       		.sleb128 -9
 9537 1232 00       		.byte	0
 9538 1233 00       		.byte	0
 9539 1234 0E       		.uleb128 0xe
 9540 1235 C7000000 		.4byte	0xc7
 9541 1239 44120000 		.4byte	0x1244
 9542 123d 0F       		.uleb128 0xf
 9543 123e 0C010000 		.4byte	0x10c
 9544 1242 02       		.byte	0x2
 9545 1243 00       		.byte	0
 9546 1244 2D       		.uleb128 0x2d
 9547 1245 66110000 		.4byte	.LASF237
 9548 1249 01       		.byte	0x1
 9549 124a 9B04     		.2byte	0x49b
 9550 124c 00000000 		.4byte	.LFB100
 9551 1250 2C000000 		.4byte	.LFE100-.LFB100
 9552 1254 01       		.uleb128 0x1
 9553 1255 9C       		.byte	0x9c
 9554 1256 6A120000 		.4byte	0x126a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 217


 9555 125a 23       		.uleb128 0x23
 9556 125b 61757800 		.ascii	"aux\000"
 9557 125f 01       		.byte	0x1
 9558 1260 9C04     		.2byte	0x49c
 9559 1262 97000000 		.4byte	0x97
 9560 1266 02       		.uleb128 0x2
 9561 1267 91       		.byte	0x91
 9562 1268 77       		.sleb128 -9
 9563 1269 00       		.byte	0
 9564 126a 27       		.uleb128 0x27
 9565 126b D40A0000 		.4byte	.LASF238
 9566 126f 01       		.byte	0x1
 9567 1270 A104     		.2byte	0x4a1
 9568 1272 00000000 		.4byte	.LFB101
 9569 1276 0C000000 		.4byte	.LFE101-.LFB101
 9570 127a 01       		.uleb128 0x1
 9571 127b 9C       		.byte	0x9c
 9572 127c 27       		.uleb128 0x27
 9573 127d D30D0000 		.4byte	.LASF239
 9574 1281 01       		.byte	0x1
 9575 1282 A504     		.2byte	0x4a5
 9576 1284 00000000 		.4byte	.LFB102
 9577 1288 0C000000 		.4byte	.LFE102-.LFB102
 9578 128c 01       		.uleb128 0x1
 9579 128d 9C       		.byte	0x9c
 9580 128e 2D       		.uleb128 0x2d
 9581 128f 4F090000 		.4byte	.LASF240
 9582 1293 01       		.byte	0x1
 9583 1294 AA04     		.2byte	0x4aa
 9584 1296 00000000 		.4byte	.LFB103
 9585 129a 80000000 		.4byte	.LFE103-.LFB103
 9586 129e 01       		.uleb128 0x1
 9587 129f 9C       		.byte	0x9c
 9588 12a0 C3120000 		.4byte	0x12c3
 9589 12a4 1F       		.uleb128 0x1f
 9590 12a5 0A050000 		.4byte	.LASF181
 9591 12a9 01       		.byte	0x1
 9592 12aa AE04     		.2byte	0x4ae
 9593 12ac 5E040000 		.4byte	0x45e
 9594 12b0 02       		.uleb128 0x2
 9595 12b1 91       		.byte	0x91
 9596 12b2 70       		.sleb128 -16
 9597 12b3 1F       		.uleb128 0x1f
 9598 12b4 0E0F0000 		.4byte	.LASF197
 9599 12b8 01       		.byte	0x1
 9600 12b9 AF04     		.2byte	0x4af
 9601 12bb C7000000 		.4byte	0xc7
 9602 12bf 02       		.uleb128 0x2
 9603 12c0 91       		.byte	0x91
 9604 12c1 6E       		.sleb128 -18
 9605 12c2 00       		.byte	0
 9606 12c3 27       		.uleb128 0x27
 9607 12c4 0A100000 		.4byte	.LASF241
 9608 12c8 01       		.byte	0x1
 9609 12c9 CA04     		.2byte	0x4ca
 9610 12cb 00000000 		.4byte	.LFB104
 9611 12cf 0C000000 		.4byte	.LFE104-.LFB104
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 218


 9612 12d3 01       		.uleb128 0x1
 9613 12d4 9C       		.byte	0x9c
 9614 12d5 27       		.uleb128 0x27
 9615 12d6 5C070000 		.4byte	.LASF242
 9616 12da 01       		.byte	0x1
 9617 12db CE04     		.2byte	0x4ce
 9618 12dd 00000000 		.4byte	.LFB105
 9619 12e1 0C000000 		.4byte	.LFE105-.LFB105
 9620 12e5 01       		.uleb128 0x1
 9621 12e6 9C       		.byte	0x9c
 9622 12e7 1E       		.uleb128 0x1e
 9623 12e8 A6030000 		.4byte	.LASF243
 9624 12ec 01       		.byte	0x1
 9625 12ed D204     		.2byte	0x4d2
 9626 12ef 00000000 		.4byte	.LFB106
 9627 12f3 20010000 		.4byte	.LFE106-.LFB106
 9628 12f7 01       		.uleb128 0x1
 9629 12f8 9C       		.byte	0x9c
 9630 12f9 67130000 		.4byte	0x1367
 9631 12fd 22       		.uleb128 0x22
 9632 12fe 84070000 		.4byte	.LASF134
 9633 1302 01       		.byte	0x1
 9634 1303 D204     		.2byte	0x4d2
 9635 1305 97000000 		.4byte	0x97
 9636 1309 02       		.uleb128 0x2
 9637 130a 91       		.byte	0x91
 9638 130b 57       		.sleb128 -41
 9639 130c 1F       		.uleb128 0x1f
 9640 130d 0A050000 		.4byte	.LASF181
 9641 1311 01       		.byte	0x1
 9642 1312 D604     		.2byte	0x4d6
 9643 1314 5E040000 		.4byte	0x45e
 9644 1318 02       		.uleb128 0x2
 9645 1319 91       		.byte	0x91
 9646 131a 5C       		.sleb128 -36
 9647 131b 1F       		.uleb128 0x1f
 9648 131c 9E070000 		.4byte	.LASF180
 9649 1320 01       		.byte	0x1
 9650 1321 D704     		.2byte	0x4d7
 9651 1323 97000000 		.4byte	0x97
 9652 1327 02       		.uleb128 0x2
 9653 1328 91       		.byte	0x91
 9654 1329 6E       		.sleb128 -18
 9655 132a 1F       		.uleb128 0x1f
 9656 132b 0E0F0000 		.4byte	.LASF197
 9657 132f 01       		.byte	0x1
 9658 1330 D804     		.2byte	0x4d8
 9659 1332 C7000000 		.4byte	0xc7
 9660 1336 02       		.uleb128 0x2
 9661 1337 91       		.byte	0x91
 9662 1338 5A       		.sleb128 -38
 9663 1339 1F       		.uleb128 0x1f
 9664 133a 28020000 		.4byte	.LASF244
 9665 133e 01       		.byte	0x1
 9666 133f D904     		.2byte	0x4d9
 9667 1341 AF000000 		.4byte	0xaf
 9668 1345 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 219


 9669 1346 91       		.byte	0x91
 9670 1347 68       		.sleb128 -24
 9671 1348 1F       		.uleb128 0x1f
 9672 1349 04100000 		.4byte	.LASF245
 9673 134d 01       		.byte	0x1
 9674 134e D904     		.2byte	0x4d9
 9675 1350 AF000000 		.4byte	0xaf
 9676 1354 02       		.uleb128 0x2
 9677 1355 91       		.byte	0x91
 9678 1356 64       		.sleb128 -28
 9679 1357 1F       		.uleb128 0x1f
 9680 1358 9C030000 		.4byte	.LASF246
 9681 135c 01       		.byte	0x1
 9682 135d DA04     		.2byte	0x4da
 9683 135f 97000000 		.4byte	0x97
 9684 1363 02       		.uleb128 0x2
 9685 1364 91       		.byte	0x91
 9686 1365 6F       		.sleb128 -17
 9687 1366 00       		.byte	0
 9688 1367 2D       		.uleb128 0x2d
 9689 1368 DF100000 		.4byte	.LASF247
 9690 136c 01       		.byte	0x1
 9691 136d 0505     		.2byte	0x505
 9692 136f 00000000 		.4byte	.LFB107
 9693 1373 C4000000 		.4byte	.LFE107-.LFB107
 9694 1377 01       		.uleb128 0x1
 9695 1378 9C       		.byte	0x9c
 9696 1379 C9130000 		.4byte	0x13c9
 9697 137d 1F       		.uleb128 0x1f
 9698 137e 0A050000 		.4byte	.LASF181
 9699 1382 01       		.byte	0x1
 9700 1383 0E05     		.2byte	0x50e
 9701 1385 C9130000 		.4byte	0x13c9
 9702 1389 02       		.uleb128 0x2
 9703 138a 91       		.byte	0x91
 9704 138b 5C       		.sleb128 -36
 9705 138c 1F       		.uleb128 0x1f
 9706 138d 9E070000 		.4byte	.LASF180
 9707 1391 01       		.byte	0x1
 9708 1392 0F05     		.2byte	0x50f
 9709 1394 97000000 		.4byte	0x97
 9710 1398 02       		.uleb128 0x2
 9711 1399 91       		.byte	0x91
 9712 139a 76       		.sleb128 -10
 9713 139b 1F       		.uleb128 0x1f
 9714 139c 28020000 		.4byte	.LASF244
 9715 13a0 01       		.byte	0x1
 9716 13a1 1105     		.2byte	0x511
 9717 13a3 AF000000 		.4byte	0xaf
 9718 13a7 02       		.uleb128 0x2
 9719 13a8 91       		.byte	0x91
 9720 13a9 70       		.sleb128 -16
 9721 13aa 1F       		.uleb128 0x1f
 9722 13ab 04100000 		.4byte	.LASF245
 9723 13af 01       		.byte	0x1
 9724 13b0 1105     		.2byte	0x511
 9725 13b2 AF000000 		.4byte	0xaf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 220


 9726 13b6 02       		.uleb128 0x2
 9727 13b7 91       		.byte	0x91
 9728 13b8 6C       		.sleb128 -20
 9729 13b9 1F       		.uleb128 0x1f
 9730 13ba 9C030000 		.4byte	.LASF246
 9731 13be 01       		.byte	0x1
 9732 13bf 1205     		.2byte	0x512
 9733 13c1 97000000 		.4byte	0x97
 9734 13c5 02       		.uleb128 0x2
 9735 13c6 91       		.byte	0x91
 9736 13c7 77       		.sleb128 -9
 9737 13c8 00       		.byte	0
 9738 13c9 0E       		.uleb128 0xe
 9739 13ca 97000000 		.4byte	0x97
 9740 13ce D9130000 		.4byte	0x13d9
 9741 13d2 0F       		.uleb128 0xf
 9742 13d3 0C010000 		.4byte	0x10c
 9743 13d7 0F       		.byte	0xf
 9744 13d8 00       		.byte	0
 9745 13d9 2D       		.uleb128 0x2d
 9746 13da 33060000 		.4byte	.LASF248
 9747 13de 01       		.byte	0x1
 9748 13df 3705     		.2byte	0x537
 9749 13e1 00000000 		.4byte	.LFB108
 9750 13e5 A8000000 		.4byte	.LFE108-.LFB108
 9751 13e9 01       		.uleb128 0x1
 9752 13ea 9C       		.byte	0x9c
 9753 13eb 3B140000 		.4byte	0x143b
 9754 13ef 1F       		.uleb128 0x1f
 9755 13f0 0A050000 		.4byte	.LASF181
 9756 13f4 01       		.byte	0x1
 9757 13f5 3905     		.2byte	0x539
 9758 13f7 C9130000 		.4byte	0x13c9
 9759 13fb 02       		.uleb128 0x2
 9760 13fc 91       		.byte	0x91
 9761 13fd 5C       		.sleb128 -36
 9762 13fe 1F       		.uleb128 0x1f
 9763 13ff 9E070000 		.4byte	.LASF180
 9764 1403 01       		.byte	0x1
 9765 1404 3A05     		.2byte	0x53a
 9766 1406 97000000 		.4byte	0x97
 9767 140a 02       		.uleb128 0x2
 9768 140b 91       		.byte	0x91
 9769 140c 76       		.sleb128 -10
 9770 140d 1F       		.uleb128 0x1f
 9771 140e 28020000 		.4byte	.LASF244
 9772 1412 01       		.byte	0x1
 9773 1413 3C05     		.2byte	0x53c
 9774 1415 AF000000 		.4byte	0xaf
 9775 1419 02       		.uleb128 0x2
 9776 141a 91       		.byte	0x91
 9777 141b 70       		.sleb128 -16
 9778 141c 1F       		.uleb128 0x1f
 9779 141d 04100000 		.4byte	.LASF245
 9780 1421 01       		.byte	0x1
 9781 1422 3C05     		.2byte	0x53c
 9782 1424 AF000000 		.4byte	0xaf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 221


 9783 1428 02       		.uleb128 0x2
 9784 1429 91       		.byte	0x91
 9785 142a 6C       		.sleb128 -20
 9786 142b 1F       		.uleb128 0x1f
 9787 142c 9C030000 		.4byte	.LASF246
 9788 1430 01       		.byte	0x1
 9789 1431 3D05     		.2byte	0x53d
 9790 1433 97000000 		.4byte	0x97
 9791 1437 02       		.uleb128 0x2
 9792 1438 91       		.byte	0x91
 9793 1439 77       		.sleb128 -9
 9794 143a 00       		.byte	0
 9795 143b 27       		.uleb128 0x27
 9796 143c 94000000 		.4byte	.LASF249
 9797 1440 01       		.byte	0x1
 9798 1441 5D05     		.2byte	0x55d
 9799 1443 00000000 		.4byte	.LFB109
 9800 1447 0C000000 		.4byte	.LFE109-.LFB109
 9801 144b 01       		.uleb128 0x1
 9802 144c 9C       		.byte	0x9c
 9803 144d 2D       		.uleb128 0x2d
 9804 144e 16030000 		.4byte	.LASF250
 9805 1452 01       		.byte	0x1
 9806 1453 6105     		.2byte	0x561
 9807 1455 00000000 		.4byte	.LFB110
 9808 1459 20000000 		.4byte	.LFE110-.LFB110
 9809 145d 01       		.uleb128 0x1
 9810 145e 9C       		.byte	0x9c
 9811 145f 73140000 		.4byte	0x1473
 9812 1463 1F       		.uleb128 0x1f
 9813 1464 0A050000 		.4byte	.LASF181
 9814 1468 01       		.byte	0x1
 9815 1469 6305     		.2byte	0x563
 9816 146b D7040000 		.4byte	0x4d7
 9817 146f 02       		.uleb128 0x2
 9818 1470 91       		.byte	0x91
 9819 1471 74       		.sleb128 -12
 9820 1472 00       		.byte	0
 9821 1473 27       		.uleb128 0x27
 9822 1474 BF050000 		.4byte	.LASF251
 9823 1478 01       		.byte	0x1
 9824 1479 6F05     		.2byte	0x56f
 9825 147b 00000000 		.4byte	.LFB111
 9826 147f 0C000000 		.4byte	.LFE111-.LFB111
 9827 1483 01       		.uleb128 0x1
 9828 1484 9C       		.byte	0x9c
 9829 1485 2D       		.uleb128 0x2d
 9830 1486 AB0C0000 		.4byte	.LASF252
 9831 148a 01       		.byte	0x1
 9832 148b 7305     		.2byte	0x573
 9833 148d 00000000 		.4byte	.LFB112
 9834 1491 94000000 		.4byte	.LFE112-.LFB112
 9835 1495 01       		.uleb128 0x1
 9836 1496 9C       		.byte	0x9c
 9837 1497 C9140000 		.4byte	0x14c9
 9838 149b 1F       		.uleb128 0x1f
 9839 149c 9E070000 		.4byte	.LASF180
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 222


 9840 14a0 01       		.byte	0x1
 9841 14a1 7505     		.2byte	0x575
 9842 14a3 97000000 		.4byte	0x97
 9843 14a7 02       		.uleb128 0x2
 9844 14a8 91       		.byte	0x91
 9845 14a9 77       		.sleb128 -9
 9846 14aa 1F       		.uleb128 0x1f
 9847 14ab 0A050000 		.4byte	.LASF181
 9848 14af 01       		.byte	0x1
 9849 14b0 7605     		.2byte	0x576
 9850 14b2 D7040000 		.4byte	0x4d7
 9851 14b6 02       		.uleb128 0x2
 9852 14b7 91       		.byte	0x91
 9853 14b8 74       		.sleb128 -12
 9854 14b9 1F       		.uleb128 0x1f
 9855 14ba AC0D0000 		.4byte	.LASF209
 9856 14be 01       		.byte	0x1
 9857 14bf 7705     		.2byte	0x577
 9858 14c1 97000000 		.4byte	0x97
 9859 14c5 02       		.uleb128 0x2
 9860 14c6 91       		.byte	0x91
 9861 14c7 76       		.sleb128 -10
 9862 14c8 00       		.byte	0
 9863 14c9 2D       		.uleb128 0x2d
 9864 14ca A5010000 		.4byte	.LASF253
 9865 14ce 01       		.byte	0x1
 9866 14cf 9505     		.2byte	0x595
 9867 14d1 00000000 		.4byte	.LFB113
 9868 14d5 60000000 		.4byte	.LFE113-.LFB113
 9869 14d9 01       		.uleb128 0x1
 9870 14da 9C       		.byte	0x9c
 9871 14db FE140000 		.4byte	0x14fe
 9872 14df 1F       		.uleb128 0x1f
 9873 14e0 0A050000 		.4byte	.LASF181
 9874 14e4 01       		.byte	0x1
 9875 14e5 9705     		.2byte	0x597
 9876 14e7 5E040000 		.4byte	0x45e
 9877 14eb 02       		.uleb128 0x2
 9878 14ec 91       		.byte	0x91
 9879 14ed 70       		.sleb128 -16
 9880 14ee 1F       		.uleb128 0x1f
 9881 14ef 0E0F0000 		.4byte	.LASF197
 9882 14f3 01       		.byte	0x1
 9883 14f4 9805     		.2byte	0x598
 9884 14f6 C7000000 		.4byte	0xc7
 9885 14fa 02       		.uleb128 0x2
 9886 14fb 91       		.byte	0x91
 9887 14fc 6E       		.sleb128 -18
 9888 14fd 00       		.byte	0
 9889 14fe 27       		.uleb128 0x27
 9890 14ff 25010000 		.4byte	.LASF254
 9891 1503 01       		.byte	0x1
 9892 1504 AB05     		.2byte	0x5ab
 9893 1506 00000000 		.4byte	.LFB114
 9894 150a 0C000000 		.4byte	.LFE114-.LFB114
 9895 150e 01       		.uleb128 0x1
 9896 150f 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 223


 9897 1510 27       		.uleb128 0x27
 9898 1511 AB0F0000 		.4byte	.LASF255
 9899 1515 01       		.byte	0x1
 9900 1516 AF05     		.2byte	0x5af
 9901 1518 00000000 		.4byte	.LFB115
 9902 151c 0C000000 		.4byte	.LFE115-.LFB115
 9903 1520 01       		.uleb128 0x1
 9904 1521 9C       		.byte	0x9c
 9905 1522 27       		.uleb128 0x27
 9906 1523 9A0E0000 		.4byte	.LASF256
 9907 1527 01       		.byte	0x1
 9908 1528 B205     		.2byte	0x5b2
 9909 152a 00000000 		.4byte	.LFB116
 9910 152e 0C000000 		.4byte	.LFE116-.LFB116
 9911 1532 01       		.uleb128 0x1
 9912 1533 9C       		.byte	0x9c
 9913 1534 27       		.uleb128 0x27
 9914 1535 A6020000 		.4byte	.LASF257
 9915 1539 01       		.byte	0x1
 9916 153a B505     		.2byte	0x5b5
 9917 153c 00000000 		.4byte	.LFB117
 9918 1540 0C000000 		.4byte	.LFE117-.LFB117
 9919 1544 01       		.uleb128 0x1
 9920 1545 9C       		.byte	0x9c
 9921 1546 27       		.uleb128 0x27
 9922 1547 DE020000 		.4byte	.LASF258
 9923 154b 01       		.byte	0x1
 9924 154c B805     		.2byte	0x5b8
 9925 154e 00000000 		.4byte	.LFB118
 9926 1552 0C000000 		.4byte	.LFE118-.LFB118
 9927 1556 01       		.uleb128 0x1
 9928 1557 9C       		.byte	0x9c
 9929 1558 1E       		.uleb128 0x1e
 9930 1559 70020000 		.4byte	.LASF259
 9931 155d 01       		.byte	0x1
 9932 155e BC05     		.2byte	0x5bc
 9933 1560 00000000 		.4byte	.LFB119
 9934 1564 54010000 		.4byte	.LFE119-.LFB119
 9935 1568 01       		.uleb128 0x1
 9936 1569 9C       		.byte	0x9c
 9937 156a AD150000 		.4byte	0x15ad
 9938 156e 22       		.uleb128 0x22
 9939 156f 23060000 		.4byte	.LASF260
 9940 1573 01       		.byte	0x1
 9941 1574 BC05     		.2byte	0x5bc
 9942 1576 A3000000 		.4byte	0xa3
 9943 157a 04       		.uleb128 0x4
 9944 157b 91       		.byte	0x91
 9945 157c 9EE37E   		.sleb128 -20066
 9946 157f 23       		.uleb128 0x23
 9947 1580 6900     		.ascii	"i\000"
 9948 1582 01       		.byte	0x1
 9949 1583 BE05     		.2byte	0x5be
 9950 1585 97000000 		.4byte	0x97
 9951 1589 02       		.uleb128 0x2
 9952 158a 91       		.byte	0x91
 9953 158b 77       		.sleb128 -9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 224


 9954 158c 1F       		.uleb128 0x1f
 9955 158d 88030000 		.4byte	.LASF261
 9956 1591 01       		.byte	0x1
 9957 1592 BF05     		.2byte	0x5bf
 9958 1594 690A0000 		.4byte	0xa69
 9959 1598 02       		.uleb128 0x2
 9960 1599 91       		.byte	0x91
 9961 159a 44       		.sleb128 -60
 9962 159b 1F       		.uleb128 0x1f
 9963 159c 78070000 		.4byte	.LASF166
 9964 15a0 01       		.byte	0x1
 9965 15a1 C005     		.2byte	0x5c0
 9966 15a3 E2080000 		.4byte	0x8e2
 9967 15a7 04       		.uleb128 0x4
 9968 15a8 91       		.byte	0x91
 9969 15a9 A4E37E   		.sleb128 -20060
 9970 15ac 00       		.byte	0
 9971 15ad 26       		.uleb128 0x26
 9972 15ae 3D030000 		.4byte	.LASF262
 9973 15b2 01       		.byte	0x1
 9974 15b3 D805     		.2byte	0x5d8
 9975 15b5 00000000 		.4byte	.LFB120
 9976 15b9 14000000 		.4byte	.LFE120-.LFB120
 9977 15bd 01       		.uleb128 0x1
 9978 15be 9C       		.byte	0x9c
 9979 15bf D3150000 		.4byte	0x15d3
 9980 15c3 22       		.uleb128 0x22
 9981 15c4 23060000 		.4byte	.LASF260
 9982 15c8 01       		.byte	0x1
 9983 15c9 D805     		.2byte	0x5d8
 9984 15cb A3000000 		.4byte	0xa3
 9985 15cf 02       		.uleb128 0x2
 9986 15d0 91       		.byte	0x91
 9987 15d1 76       		.sleb128 -10
 9988 15d2 00       		.byte	0
 9989 15d3 2D       		.uleb128 0x2d
 9990 15d4 25090000 		.4byte	.LASF263
 9991 15d8 01       		.byte	0x1
 9992 15d9 E105     		.2byte	0x5e1
 9993 15db 00000000 		.4byte	.LFB121
 9994 15df 50010000 		.4byte	.LFE121-.LFB121
 9995 15e3 01       		.uleb128 0x1
 9996 15e4 9C       		.byte	0x9c
 9997 15e5 F7150000 		.4byte	0x15f7
 9998 15e9 23       		.uleb128 0x23
 9999 15ea 6900     		.ascii	"i\000"
 10000 15ec 01       		.byte	0x1
 10001 15ed E305     		.2byte	0x5e3
 10002 15ef 97000000 		.4byte	0x97
 10003 15f3 02       		.uleb128 0x2
 10004 15f4 91       		.byte	0x91
 10005 15f5 6F       		.sleb128 -17
 10006 15f6 00       		.byte	0
 10007 15f7 2D       		.uleb128 0x2d
 10008 15f8 A5000000 		.4byte	.LASF264
 10009 15fc 01       		.byte	0x1
 10010 15fd 0806     		.2byte	0x608
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 225


 10011 15ff 00000000 		.4byte	.LFB122
 10012 1603 90010000 		.4byte	.LFE122-.LFB122
 10013 1607 01       		.uleb128 0x1
 10014 1608 9C       		.byte	0x9c
 10015 1609 59160000 		.4byte	0x1659
 10016 160d 1F       		.uleb128 0x1f
 10017 160e 7D050000 		.4byte	.LASF265
 10018 1612 01       		.byte	0x1
 10019 1613 0A06     		.2byte	0x60a
 10020 1615 C7000000 		.4byte	0xc7
 10021 1619 02       		.uleb128 0x2
 10022 161a 91       		.byte	0x91
 10023 161b 5C       		.sleb128 -36
 10024 161c 1F       		.uleb128 0x1f
 10025 161d 7F040000 		.4byte	.LASF266
 10026 1621 01       		.byte	0x1
 10027 1622 0B06     		.2byte	0x60b
 10028 1624 D3000000 		.4byte	0xd3
 10029 1628 02       		.uleb128 0x2
 10030 1629 91       		.byte	0x91
 10031 162a 64       		.sleb128 -28
 10032 162b 1F       		.uleb128 0x1f
 10033 162c DD090000 		.4byte	.LASF267
 10034 1630 01       		.byte	0x1
 10035 1631 0C06     		.2byte	0x60c
 10036 1633 D3000000 		.4byte	0xd3
 10037 1637 02       		.uleb128 0x2
 10038 1638 91       		.byte	0x91
 10039 1639 58       		.sleb128 -40
 10040 163a 1F       		.uleb128 0x1f
 10041 163b 71040000 		.4byte	.LASF268
 10042 163f 01       		.byte	0x1
 10043 1640 0D06     		.2byte	0x60d
 10044 1642 D3000000 		.4byte	0xd3
 10045 1646 02       		.uleb128 0x2
 10046 1647 91       		.byte	0x91
 10047 1648 60       		.sleb128 -32
 10048 1649 1F       		.uleb128 0x1f
 10049 164a 6D0A0000 		.4byte	.LASF269
 10050 164e 01       		.byte	0x1
 10051 164f 0E06     		.2byte	0x60e
 10052 1651 C7000000 		.4byte	0xc7
 10053 1655 02       		.uleb128 0x2
 10054 1656 91       		.byte	0x91
 10055 1657 5E       		.sleb128 -34
 10056 1658 00       		.byte	0
 10057 1659 2E       		.uleb128 0x2e
 10058 165a F1000000 		.4byte	.LASF270
 10059 165e 01       		.byte	0x1
 10060 165f 4306     		.2byte	0x643
 10061 1661 00000000 		.4byte	.LFB123
 10062 1665 24000000 		.4byte	.LFE123-.LFB123
 10063 1669 01       		.uleb128 0x1
 10064 166a 9C       		.byte	0x9c
 10065 166b 2E       		.uleb128 0x2e
 10066 166c A9090000 		.4byte	.LASF271
 10067 1670 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 226


 10068 1671 4906     		.2byte	0x649
 10069 1673 00000000 		.4byte	.LFB124
 10070 1677 40000000 		.4byte	.LFE124-.LFB124
 10071 167b 01       		.uleb128 0x1
 10072 167c 9C       		.byte	0x9c
 10073 167d 2F       		.uleb128 0x2f
 10074 167e E50A0000 		.4byte	.LASF272
 10075 1682 01       		.byte	0x1
 10076 1683 5606     		.2byte	0x656
 10077 1685 97000000 		.4byte	0x97
 10078 1689 00000000 		.4byte	.LFB125
 10079 168d 0E000000 		.4byte	.LFE125-.LFB125
 10080 1691 01       		.uleb128 0x1
 10081 1692 9C       		.byte	0x9c
 10082 1693 26       		.uleb128 0x26
 10083 1694 D9060000 		.4byte	.LASF273
 10084 1698 01       		.byte	0x1
 10085 1699 6006     		.2byte	0x660
 10086 169b 00000000 		.4byte	.LFB126
 10087 169f 12000000 		.4byte	.LFE126-.LFB126
 10088 16a3 01       		.uleb128 0x1
 10089 16a4 9C       		.byte	0x9c
 10090 16a5 B9160000 		.4byte	0x16b9
 10091 16a9 22       		.uleb128 0x22
 10092 16aa AF050000 		.4byte	.LASF274
 10093 16ae 01       		.byte	0x1
 10094 16af 6006     		.2byte	0x660
 10095 16b1 73000000 		.4byte	0x73
 10096 16b5 02       		.uleb128 0x2
 10097 16b6 91       		.byte	0x91
 10098 16b7 74       		.sleb128 -12
 10099 16b8 00       		.byte	0
 10100 16b9 1E       		.uleb128 0x1e
 10101 16ba EA0B0000 		.4byte	.LASF275
 10102 16be 01       		.byte	0x1
 10103 16bf B106     		.2byte	0x6b1
 10104 16c1 00000000 		.4byte	.LFB127
 10105 16c5 84000000 		.4byte	.LFE127-.LFB127
 10106 16c9 01       		.uleb128 0x1
 10107 16ca 9C       		.byte	0x9c
 10108 16cb 0C170000 		.4byte	0x170c
 10109 16cf 22       		.uleb128 0x22
 10110 16d0 84070000 		.4byte	.LASF134
 10111 16d4 01       		.byte	0x1
 10112 16d5 B106     		.2byte	0x6b1
 10113 16d7 97000000 		.4byte	0x97
 10114 16db 02       		.uleb128 0x2
 10115 16dc 91       		.byte	0x91
 10116 16dd 5F       		.sleb128 -33
 10117 16de 1F       		.uleb128 0x1f
 10118 16df 0A050000 		.4byte	.LASF181
 10119 16e3 01       		.byte	0x1
 10120 16e4 B806     		.2byte	0x6b8
 10121 16e6 5E040000 		.4byte	0x45e
 10122 16ea 02       		.uleb128 0x2
 10123 16eb 91       		.byte	0x91
 10124 16ec 68       		.sleb128 -24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 227


 10125 16ed 1F       		.uleb128 0x1f
 10126 16ee 9E070000 		.4byte	.LASF180
 10127 16f2 01       		.byte	0x1
 10128 16f3 B906     		.2byte	0x6b9
 10129 16f5 97000000 		.4byte	0x97
 10130 16f9 02       		.uleb128 0x2
 10131 16fa 91       		.byte	0x91
 10132 16fb 6F       		.sleb128 -17
 10133 16fc 1F       		.uleb128 0x1f
 10134 16fd 0E0F0000 		.4byte	.LASF197
 10135 1701 01       		.byte	0x1
 10136 1702 BA06     		.2byte	0x6ba
 10137 1704 C7000000 		.4byte	0xc7
 10138 1708 02       		.uleb128 0x2
 10139 1709 91       		.byte	0x91
 10140 170a 66       		.sleb128 -26
 10141 170b 00       		.byte	0
 10142 170c 2E       		.uleb128 0x2e
 10143 170d 59000000 		.4byte	.LASF276
 10144 1711 01       		.byte	0x1
 10145 1712 D006     		.2byte	0x6d0
 10146 1714 00000000 		.4byte	.LFB128
 10147 1718 30000000 		.4byte	.LFE128-.LFB128
 10148 171c 01       		.uleb128 0x1
 10149 171d 9C       		.byte	0x9c
 10150 171e 27       		.uleb128 0x27
 10151 171f 2A050000 		.4byte	.LASF277
 10152 1723 01       		.byte	0x1
 10153 1724 DE06     		.2byte	0x6de
 10154 1726 00000000 		.4byte	.LFB129
 10155 172a 0C000000 		.4byte	.LFE129-.LFB129
 10156 172e 01       		.uleb128 0x1
 10157 172f 9C       		.byte	0x9c
 10158 1730 30       		.uleb128 0x30
 10159 1731 9C090000 		.4byte	.LASF278
 10160 1735 08       		.byte	0x8
 10161 1736 1207     		.2byte	0x712
 10162 1738 3C170000 		.4byte	0x173c
 10163 173c 06       		.uleb128 0x6
 10164 173d 81000000 		.4byte	0x81
 10165 1741 30       		.uleb128 0x30
 10166 1742 73100000 		.4byte	.LASF279
 10167 1746 07       		.byte	0x7
 10168 1747 6D01     		.2byte	0x16d
 10169 1749 AD060000 		.4byte	0x6ad
 10170 174d 30       		.uleb128 0x30
 10171 174e 8C0E0000 		.4byte	.LASF280
 10172 1752 07       		.byte	0x7
 10173 1753 6D01     		.2byte	0x16d
 10174 1755 AD060000 		.4byte	0x6ad
 10175 1759 30       		.uleb128 0x30
 10176 175a 74000000 		.4byte	.LASF281
 10177 175e 07       		.byte	0x7
 10178 175f 6601     		.2byte	0x166
 10179 1761 88030000 		.4byte	0x388
 10180 1765 30       		.uleb128 0x30
 10181 1766 6D100000 		.4byte	.LASF282
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 228


 10182 176a 07       		.byte	0x7
 10183 176b 6C01     		.2byte	0x16c
 10184 176d 7D050000 		.4byte	0x57d
 10185 1771 30       		.uleb128 0x30
 10186 1772 030A0000 		.4byte	.LASF283
 10187 1776 07       		.byte	0x7
 10188 1777 6C01     		.2byte	0x16c
 10189 1779 7D050000 		.4byte	0x57d
 10190 177d 30       		.uleb128 0x30
 10191 177e 240F0000 		.4byte	.LASF284
 10192 1782 07       		.byte	0x7
 10193 1783 7001     		.2byte	0x170
 10194 1785 DF000000 		.4byte	0xdf
 10195 1789 30       		.uleb128 0x30
 10196 178a B6030000 		.4byte	.LASF285
 10197 178e 07       		.byte	0x7
 10198 178f 6701     		.2byte	0x167
 10199 1791 97000000 		.4byte	0x97
 10200 1795 0E       		.uleb128 0xe
 10201 1796 97000000 		.4byte	0x97
 10202 179a A5170000 		.4byte	0x17a5
 10203 179e 0F       		.uleb128 0xf
 10204 179f 0C010000 		.4byte	0x10c
 10205 17a3 02       		.byte	0x2
 10206 17a4 00       		.byte	0
 10207 17a5 30       		.uleb128 0x30
 10208 17a6 60090000 		.4byte	.LASF286
 10209 17aa 07       		.byte	0x7
 10210 17ab 2001     		.2byte	0x120
 10211 17ad 95170000 		.4byte	0x1795
 10212 17b1 30       		.uleb128 0x30
 10213 17b2 C9060000 		.4byte	.LASF287
 10214 17b6 07       		.byte	0x7
 10215 17b7 6801     		.2byte	0x168
 10216 17b9 97000000 		.4byte	0x97
 10217 17bd 30       		.uleb128 0x30
 10218 17be 450D0000 		.4byte	.LASF288
 10219 17c2 07       		.byte	0x7
 10220 17c3 2C01     		.2byte	0x12c
 10221 17c5 950D0000 		.4byte	0xd95
 10222 17c9 30       		.uleb128 0x30
 10223 17ca EE020000 		.4byte	.LASF289
 10224 17ce 07       		.byte	0x7
 10225 17cf 2D01     		.2byte	0x12d
 10226 17d1 950D0000 		.4byte	0xd95
 10227 17d5 30       		.uleb128 0x30
 10228 17d6 44100000 		.4byte	.LASF290
 10229 17da 07       		.byte	0x7
 10230 17db 3001     		.2byte	0x130
 10231 17dd 950D0000 		.4byte	0xd95
 10232 17e1 30       		.uleb128 0x30
 10233 17e2 B1100000 		.4byte	.LASF291
 10234 17e6 07       		.byte	0x7
 10235 17e7 6A01     		.2byte	0x16a
 10236 17e9 97000000 		.4byte	0x97
 10237 17ed 30       		.uleb128 0x30
 10238 17ee 6F050000 		.4byte	.LASF292
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 229


 10239 17f2 07       		.byte	0x7
 10240 17f3 5401     		.2byte	0x154
 10241 17f5 D3000000 		.4byte	0xd3
 10242 17f9 30       		.uleb128 0x30
 10243 17fa E30B0000 		.4byte	.LASF293
 10244 17fe 07       		.byte	0x7
 10245 17ff 5501     		.2byte	0x155
 10246 1801 D7040000 		.4byte	0x4d7
 10247 1805 30       		.uleb128 0x30
 10248 1806 C7100000 		.4byte	.LASF294
 10249 180a 07       		.byte	0x7
 10250 180b 5501     		.2byte	0x155
 10251 180d D7040000 		.4byte	0x4d7
 10252 1811 30       		.uleb128 0x30
 10253 1812 92090000 		.4byte	.LASF295
 10254 1816 07       		.byte	0x7
 10255 1817 5501     		.2byte	0x155
 10256 1819 D7040000 		.4byte	0x4d7
 10257 181d 30       		.uleb128 0x30
 10258 181e 4C110000 		.4byte	.LASF296
 10259 1822 07       		.byte	0x7
 10260 1823 5601     		.2byte	0x156
 10261 1825 97000000 		.4byte	0x97
 10262 1829 30       		.uleb128 0x30
 10263 182a 49020000 		.4byte	.LASF297
 10264 182e 07       		.byte	0x7
 10265 182f 5601     		.2byte	0x156
 10266 1831 97000000 		.4byte	0x97
 10267 1835 30       		.uleb128 0x30
 10268 1836 CA010000 		.4byte	.LASF298
 10269 183a 07       		.byte	0x7
 10270 183b 5601     		.2byte	0x156
 10271 183d 97000000 		.4byte	0x97
 10272 1841 30       		.uleb128 0x30
 10273 1842 35020000 		.4byte	.LASF299
 10274 1846 07       		.byte	0x7
 10275 1847 8101     		.2byte	0x181
 10276 1849 C7000000 		.4byte	0xc7
 10277 184d 30       		.uleb128 0x30
 10278 184e 3F020000 		.4byte	.LASF300
 10279 1852 07       		.byte	0x7
 10280 1853 8201     		.2byte	0x182
 10281 1855 C7000000 		.4byte	0xc7
 10282 1859 30       		.uleb128 0x30
 10283 185a 07030000 		.4byte	.LASF301
 10284 185e 07       		.byte	0x7
 10285 185f 6B01     		.2byte	0x16b
 10286 1861 D3000000 		.4byte	0xd3
 10287 1865 30       		.uleb128 0x30
 10288 1866 C10D0000 		.4byte	.LASF302
 10289 186a 07       		.byte	0x7
 10290 186b 6B01     		.2byte	0x16b
 10291 186d D3000000 		.4byte	0xd3
 10292 1871 30       		.uleb128 0x30
 10293 1872 7D050000 		.4byte	.LASF265
 10294 1876 07       		.byte	0x7
 10295 1877 8301     		.2byte	0x183
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 230


 10296 1879 C7000000 		.4byte	0xc7
 10297 187d 30       		.uleb128 0x30
 10298 187e C40B0000 		.4byte	.LASF303
 10299 1882 07       		.byte	0x7
 10300 1883 8401     		.2byte	0x184
 10301 1885 840D0000 		.4byte	0xd84
 10302 1889 31       		.uleb128 0x31
 10303 188a 180F0000 		.4byte	.LASF304
 10304 188e 01       		.byte	0x1
 10305 188f 33       		.byte	0x33
 10306 1890 9A180000 		.4byte	0x189a
 10307 1894 05       		.uleb128 0x5
 10308 1895 03       		.byte	0x3
 10309 1896 00000000 		.4byte	EEPROM_ADDR
 10310 189a 07       		.uleb128 0x7
 10311 189b 04       		.byte	0x4
 10312 189c F4000000 		.4byte	0xf4
 10313 18a0 00       		.byte	0
 10314              		.section	.debug_abbrev,"",%progbits
 10315              	.Ldebug_abbrev0:
 10316 0000 01       		.uleb128 0x1
 10317 0001 11       		.uleb128 0x11
 10318 0002 01       		.byte	0x1
 10319 0003 25       		.uleb128 0x25
 10320 0004 0E       		.uleb128 0xe
 10321 0005 13       		.uleb128 0x13
 10322 0006 0B       		.uleb128 0xb
 10323 0007 03       		.uleb128 0x3
 10324 0008 0E       		.uleb128 0xe
 10325 0009 1B       		.uleb128 0x1b
 10326 000a 0E       		.uleb128 0xe
 10327 000b 55       		.uleb128 0x55
 10328 000c 17       		.uleb128 0x17
 10329 000d 11       		.uleb128 0x11
 10330 000e 01       		.uleb128 0x1
 10331 000f 10       		.uleb128 0x10
 10332 0010 17       		.uleb128 0x17
 10333 0011 00       		.byte	0
 10334 0012 00       		.byte	0
 10335 0013 02       		.uleb128 0x2
 10336 0014 24       		.uleb128 0x24
 10337 0015 00       		.byte	0
 10338 0016 0B       		.uleb128 0xb
 10339 0017 0B       		.uleb128 0xb
 10340 0018 3E       		.uleb128 0x3e
 10341 0019 0B       		.uleb128 0xb
 10342 001a 03       		.uleb128 0x3
 10343 001b 0E       		.uleb128 0xe
 10344 001c 00       		.byte	0
 10345 001d 00       		.byte	0
 10346 001e 03       		.uleb128 0x3
 10347 001f 16       		.uleb128 0x16
 10348 0020 00       		.byte	0
 10349 0021 03       		.uleb128 0x3
 10350 0022 0E       		.uleb128 0xe
 10351 0023 3A       		.uleb128 0x3a
 10352 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 231


 10353 0025 3B       		.uleb128 0x3b
 10354 0026 0B       		.uleb128 0xb
 10355 0027 49       		.uleb128 0x49
 10356 0028 13       		.uleb128 0x13
 10357 0029 00       		.byte	0
 10358 002a 00       		.byte	0
 10359 002b 04       		.uleb128 0x4
 10360 002c 24       		.uleb128 0x24
 10361 002d 00       		.byte	0
 10362 002e 0B       		.uleb128 0xb
 10363 002f 0B       		.uleb128 0xb
 10364 0030 3E       		.uleb128 0x3e
 10365 0031 0B       		.uleb128 0xb
 10366 0032 03       		.uleb128 0x3
 10367 0033 08       		.uleb128 0x8
 10368 0034 00       		.byte	0
 10369 0035 00       		.byte	0
 10370 0036 05       		.uleb128 0x5
 10371 0037 16       		.uleb128 0x16
 10372 0038 00       		.byte	0
 10373 0039 03       		.uleb128 0x3
 10374 003a 0E       		.uleb128 0xe
 10375 003b 3A       		.uleb128 0x3a
 10376 003c 0B       		.uleb128 0xb
 10377 003d 3B       		.uleb128 0x3b
 10378 003e 05       		.uleb128 0x5
 10379 003f 49       		.uleb128 0x49
 10380 0040 13       		.uleb128 0x13
 10381 0041 00       		.byte	0
 10382 0042 00       		.byte	0
 10383 0043 06       		.uleb128 0x6
 10384 0044 35       		.uleb128 0x35
 10385 0045 00       		.byte	0
 10386 0046 49       		.uleb128 0x49
 10387 0047 13       		.uleb128 0x13
 10388 0048 00       		.byte	0
 10389 0049 00       		.byte	0
 10390 004a 07       		.uleb128 0x7
 10391 004b 0F       		.uleb128 0xf
 10392 004c 00       		.byte	0
 10393 004d 0B       		.uleb128 0xb
 10394 004e 0B       		.uleb128 0xb
 10395 004f 49       		.uleb128 0x49
 10396 0050 13       		.uleb128 0x13
 10397 0051 00       		.byte	0
 10398 0052 00       		.byte	0
 10399 0053 08       		.uleb128 0x8
 10400 0054 26       		.uleb128 0x26
 10401 0055 00       		.byte	0
 10402 0056 49       		.uleb128 0x49
 10403 0057 13       		.uleb128 0x13
 10404 0058 00       		.byte	0
 10405 0059 00       		.byte	0
 10406 005a 09       		.uleb128 0x9
 10407 005b 04       		.uleb128 0x4
 10408 005c 01       		.byte	0x1
 10409 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 232


 10410 005e 0E       		.uleb128 0xe
 10411 005f 0B       		.uleb128 0xb
 10412 0060 0B       		.uleb128 0xb
 10413 0061 49       		.uleb128 0x49
 10414 0062 13       		.uleb128 0x13
 10415 0063 3A       		.uleb128 0x3a
 10416 0064 0B       		.uleb128 0xb
 10417 0065 3B       		.uleb128 0x3b
 10418 0066 0B       		.uleb128 0xb
 10419 0067 01       		.uleb128 0x1
 10420 0068 13       		.uleb128 0x13
 10421 0069 00       		.byte	0
 10422 006a 00       		.byte	0
 10423 006b 0A       		.uleb128 0xa
 10424 006c 28       		.uleb128 0x28
 10425 006d 00       		.byte	0
 10426 006e 03       		.uleb128 0x3
 10427 006f 0E       		.uleb128 0xe
 10428 0070 1C       		.uleb128 0x1c
 10429 0071 0B       		.uleb128 0xb
 10430 0072 00       		.byte	0
 10431 0073 00       		.byte	0
 10432 0074 0B       		.uleb128 0xb
 10433 0075 13       		.uleb128 0x13
 10434 0076 01       		.byte	0x1
 10435 0077 03       		.uleb128 0x3
 10436 0078 0E       		.uleb128 0xe
 10437 0079 0B       		.uleb128 0xb
 10438 007a 0B       		.uleb128 0xb
 10439 007b 3A       		.uleb128 0x3a
 10440 007c 0B       		.uleb128 0xb
 10441 007d 3B       		.uleb128 0x3b
 10442 007e 0B       		.uleb128 0xb
 10443 007f 01       		.uleb128 0x1
 10444 0080 13       		.uleb128 0x13
 10445 0081 00       		.byte	0
 10446 0082 00       		.byte	0
 10447 0083 0C       		.uleb128 0xc
 10448 0084 0D       		.uleb128 0xd
 10449 0085 00       		.byte	0
 10450 0086 03       		.uleb128 0x3
 10451 0087 0E       		.uleb128 0xe
 10452 0088 3A       		.uleb128 0x3a
 10453 0089 0B       		.uleb128 0xb
 10454 008a 3B       		.uleb128 0x3b
 10455 008b 0B       		.uleb128 0xb
 10456 008c 49       		.uleb128 0x49
 10457 008d 13       		.uleb128 0x13
 10458 008e 38       		.uleb128 0x38
 10459 008f 0B       		.uleb128 0xb
 10460 0090 00       		.byte	0
 10461 0091 00       		.byte	0
 10462 0092 0D       		.uleb128 0xd
 10463 0093 0D       		.uleb128 0xd
 10464 0094 00       		.byte	0
 10465 0095 03       		.uleb128 0x3
 10466 0096 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 233


 10467 0097 3A       		.uleb128 0x3a
 10468 0098 0B       		.uleb128 0xb
 10469 0099 3B       		.uleb128 0x3b
 10470 009a 0B       		.uleb128 0xb
 10471 009b 49       		.uleb128 0x49
 10472 009c 13       		.uleb128 0x13
 10473 009d 38       		.uleb128 0x38
 10474 009e 0B       		.uleb128 0xb
 10475 009f 00       		.byte	0
 10476 00a0 00       		.byte	0
 10477 00a1 0E       		.uleb128 0xe
 10478 00a2 01       		.uleb128 0x1
 10479 00a3 01       		.byte	0x1
 10480 00a4 49       		.uleb128 0x49
 10481 00a5 13       		.uleb128 0x13
 10482 00a6 01       		.uleb128 0x1
 10483 00a7 13       		.uleb128 0x13
 10484 00a8 00       		.byte	0
 10485 00a9 00       		.byte	0
 10486 00aa 0F       		.uleb128 0xf
 10487 00ab 21       		.uleb128 0x21
 10488 00ac 00       		.byte	0
 10489 00ad 49       		.uleb128 0x49
 10490 00ae 13       		.uleb128 0x13
 10491 00af 2F       		.uleb128 0x2f
 10492 00b0 0B       		.uleb128 0xb
 10493 00b1 00       		.byte	0
 10494 00b2 00       		.byte	0
 10495 00b3 10       		.uleb128 0x10
 10496 00b4 13       		.uleb128 0x13
 10497 00b5 01       		.byte	0x1
 10498 00b6 03       		.uleb128 0x3
 10499 00b7 0E       		.uleb128 0xe
 10500 00b8 0B       		.uleb128 0xb
 10501 00b9 0B       		.uleb128 0xb
 10502 00ba 3A       		.uleb128 0x3a
 10503 00bb 0B       		.uleb128 0xb
 10504 00bc 3B       		.uleb128 0x3b
 10505 00bd 05       		.uleb128 0x5
 10506 00be 01       		.uleb128 0x1
 10507 00bf 13       		.uleb128 0x13
 10508 00c0 00       		.byte	0
 10509 00c1 00       		.byte	0
 10510 00c2 11       		.uleb128 0x11
 10511 00c3 0D       		.uleb128 0xd
 10512 00c4 00       		.byte	0
 10513 00c5 03       		.uleb128 0x3
 10514 00c6 0E       		.uleb128 0xe
 10515 00c7 3A       		.uleb128 0x3a
 10516 00c8 0B       		.uleb128 0xb
 10517 00c9 3B       		.uleb128 0x3b
 10518 00ca 05       		.uleb128 0x5
 10519 00cb 49       		.uleb128 0x49
 10520 00cc 13       		.uleb128 0x13
 10521 00cd 38       		.uleb128 0x38
 10522 00ce 0B       		.uleb128 0xb
 10523 00cf 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 234


 10524 00d0 00       		.byte	0
 10525 00d1 12       		.uleb128 0x12
 10526 00d2 0D       		.uleb128 0xd
 10527 00d3 00       		.byte	0
 10528 00d4 03       		.uleb128 0x3
 10529 00d5 08       		.uleb128 0x8
 10530 00d6 3A       		.uleb128 0x3a
 10531 00d7 0B       		.uleb128 0xb
 10532 00d8 3B       		.uleb128 0x3b
 10533 00d9 05       		.uleb128 0x5
 10534 00da 49       		.uleb128 0x49
 10535 00db 13       		.uleb128 0x13
 10536 00dc 38       		.uleb128 0x38
 10537 00dd 0B       		.uleb128 0xb
 10538 00de 00       		.byte	0
 10539 00df 00       		.byte	0
 10540 00e0 13       		.uleb128 0x13
 10541 00e1 2E       		.uleb128 0x2e
 10542 00e2 01       		.byte	0x1
 10543 00e3 03       		.uleb128 0x3
 10544 00e4 0E       		.uleb128 0xe
 10545 00e5 3A       		.uleb128 0x3a
 10546 00e6 0B       		.uleb128 0xb
 10547 00e7 3B       		.uleb128 0x3b
 10548 00e8 05       		.uleb128 0x5
 10549 00e9 27       		.uleb128 0x27
 10550 00ea 19       		.uleb128 0x19
 10551 00eb 49       		.uleb128 0x49
 10552 00ec 13       		.uleb128 0x13
 10553 00ed 20       		.uleb128 0x20
 10554 00ee 0B       		.uleb128 0xb
 10555 00ef 01       		.uleb128 0x1
 10556 00f0 13       		.uleb128 0x13
 10557 00f1 00       		.byte	0
 10558 00f2 00       		.byte	0
 10559 00f3 14       		.uleb128 0x14
 10560 00f4 05       		.uleb128 0x5
 10561 00f5 00       		.byte	0
 10562 00f6 03       		.uleb128 0x3
 10563 00f7 0E       		.uleb128 0xe
 10564 00f8 3A       		.uleb128 0x3a
 10565 00f9 0B       		.uleb128 0xb
 10566 00fa 3B       		.uleb128 0x3b
 10567 00fb 05       		.uleb128 0x5
 10568 00fc 49       		.uleb128 0x49
 10569 00fd 13       		.uleb128 0x13
 10570 00fe 00       		.byte	0
 10571 00ff 00       		.byte	0
 10572 0100 15       		.uleb128 0x15
 10573 0101 34       		.uleb128 0x34
 10574 0102 00       		.byte	0
 10575 0103 03       		.uleb128 0x3
 10576 0104 0E       		.uleb128 0xe
 10577 0105 3A       		.uleb128 0x3a
 10578 0106 0B       		.uleb128 0xb
 10579 0107 3B       		.uleb128 0x3b
 10580 0108 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 235


 10581 0109 49       		.uleb128 0x49
 10582 010a 13       		.uleb128 0x13
 10583 010b 00       		.byte	0
 10584 010c 00       		.byte	0
 10585 010d 16       		.uleb128 0x16
 10586 010e 2E       		.uleb128 0x2e
 10587 010f 01       		.byte	0x1
 10588 0110 3F       		.uleb128 0x3f
 10589 0111 19       		.uleb128 0x19
 10590 0112 03       		.uleb128 0x3
 10591 0113 0E       		.uleb128 0xe
 10592 0114 3A       		.uleb128 0x3a
 10593 0115 0B       		.uleb128 0xb
 10594 0116 3B       		.uleb128 0x3b
 10595 0117 0B       		.uleb128 0xb
 10596 0118 27       		.uleb128 0x27
 10597 0119 19       		.uleb128 0x19
 10598 011a 11       		.uleb128 0x11
 10599 011b 01       		.uleb128 0x1
 10600 011c 12       		.uleb128 0x12
 10601 011d 06       		.uleb128 0x6
 10602 011e 40       		.uleb128 0x40
 10603 011f 18       		.uleb128 0x18
 10604 0120 9642     		.uleb128 0x2116
 10605 0122 19       		.uleb128 0x19
 10606 0123 01       		.uleb128 0x1
 10607 0124 13       		.uleb128 0x13
 10608 0125 00       		.byte	0
 10609 0126 00       		.byte	0
 10610 0127 17       		.uleb128 0x17
 10611 0128 34       		.uleb128 0x34
 10612 0129 00       		.byte	0
 10613 012a 03       		.uleb128 0x3
 10614 012b 0E       		.uleb128 0xe
 10615 012c 3A       		.uleb128 0x3a
 10616 012d 0B       		.uleb128 0xb
 10617 012e 3B       		.uleb128 0x3b
 10618 012f 0B       		.uleb128 0xb
 10619 0130 49       		.uleb128 0x49
 10620 0131 13       		.uleb128 0x13
 10621 0132 02       		.uleb128 0x2
 10622 0133 18       		.uleb128 0x18
 10623 0134 00       		.byte	0
 10624 0135 00       		.byte	0
 10625 0136 18       		.uleb128 0x18
 10626 0137 1D       		.uleb128 0x1d
 10627 0138 01       		.byte	0x1
 10628 0139 31       		.uleb128 0x31
 10629 013a 13       		.uleb128 0x13
 10630 013b 11       		.uleb128 0x11
 10631 013c 01       		.uleb128 0x1
 10632 013d 12       		.uleb128 0x12
 10633 013e 06       		.uleb128 0x6
 10634 013f 58       		.uleb128 0x58
 10635 0140 0B       		.uleb128 0xb
 10636 0141 59       		.uleb128 0x59
 10637 0142 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 236


 10638 0143 01       		.uleb128 0x1
 10639 0144 13       		.uleb128 0x13
 10640 0145 00       		.byte	0
 10641 0146 00       		.byte	0
 10642 0147 19       		.uleb128 0x19
 10643 0148 05       		.uleb128 0x5
 10644 0149 00       		.byte	0
 10645 014a 31       		.uleb128 0x31
 10646 014b 13       		.uleb128 0x13
 10647 014c 02       		.uleb128 0x2
 10648 014d 18       		.uleb128 0x18
 10649 014e 00       		.byte	0
 10650 014f 00       		.byte	0
 10651 0150 1A       		.uleb128 0x1a
 10652 0151 0B       		.uleb128 0xb
 10653 0152 01       		.byte	0x1
 10654 0153 11       		.uleb128 0x11
 10655 0154 01       		.uleb128 0x1
 10656 0155 12       		.uleb128 0x12
 10657 0156 06       		.uleb128 0x6
 10658 0157 00       		.byte	0
 10659 0158 00       		.byte	0
 10660 0159 1B       		.uleb128 0x1b
 10661 015a 34       		.uleb128 0x34
 10662 015b 00       		.byte	0
 10663 015c 31       		.uleb128 0x31
 10664 015d 13       		.uleb128 0x13
 10665 015e 02       		.uleb128 0x2
 10666 015f 18       		.uleb128 0x18
 10667 0160 00       		.byte	0
 10668 0161 00       		.byte	0
 10669 0162 1C       		.uleb128 0x1c
 10670 0163 1D       		.uleb128 0x1d
 10671 0164 01       		.byte	0x1
 10672 0165 31       		.uleb128 0x31
 10673 0166 13       		.uleb128 0x13
 10674 0167 11       		.uleb128 0x11
 10675 0168 01       		.uleb128 0x1
 10676 0169 12       		.uleb128 0x12
 10677 016a 06       		.uleb128 0x6
 10678 016b 58       		.uleb128 0x58
 10679 016c 0B       		.uleb128 0xb
 10680 016d 59       		.uleb128 0x59
 10681 016e 05       		.uleb128 0x5
 10682 016f 01       		.uleb128 0x1
 10683 0170 13       		.uleb128 0x13
 10684 0171 00       		.byte	0
 10685 0172 00       		.byte	0
 10686 0173 1D       		.uleb128 0x1d
 10687 0174 1D       		.uleb128 0x1d
 10688 0175 01       		.byte	0x1
 10689 0176 31       		.uleb128 0x31
 10690 0177 13       		.uleb128 0x13
 10691 0178 11       		.uleb128 0x11
 10692 0179 01       		.uleb128 0x1
 10693 017a 12       		.uleb128 0x12
 10694 017b 06       		.uleb128 0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 237


 10695 017c 58       		.uleb128 0x58
 10696 017d 0B       		.uleb128 0xb
 10697 017e 59       		.uleb128 0x59
 10698 017f 05       		.uleb128 0x5
 10699 0180 00       		.byte	0
 10700 0181 00       		.byte	0
 10701 0182 1E       		.uleb128 0x1e
 10702 0183 2E       		.uleb128 0x2e
 10703 0184 01       		.byte	0x1
 10704 0185 3F       		.uleb128 0x3f
 10705 0186 19       		.uleb128 0x19
 10706 0187 03       		.uleb128 0x3
 10707 0188 0E       		.uleb128 0xe
 10708 0189 3A       		.uleb128 0x3a
 10709 018a 0B       		.uleb128 0xb
 10710 018b 3B       		.uleb128 0x3b
 10711 018c 05       		.uleb128 0x5
 10712 018d 27       		.uleb128 0x27
 10713 018e 19       		.uleb128 0x19
 10714 018f 11       		.uleb128 0x11
 10715 0190 01       		.uleb128 0x1
 10716 0191 12       		.uleb128 0x12
 10717 0192 06       		.uleb128 0x6
 10718 0193 40       		.uleb128 0x40
 10719 0194 18       		.uleb128 0x18
 10720 0195 9642     		.uleb128 0x2116
 10721 0197 19       		.uleb128 0x19
 10722 0198 01       		.uleb128 0x1
 10723 0199 13       		.uleb128 0x13
 10724 019a 00       		.byte	0
 10725 019b 00       		.byte	0
 10726 019c 1F       		.uleb128 0x1f
 10727 019d 34       		.uleb128 0x34
 10728 019e 00       		.byte	0
 10729 019f 03       		.uleb128 0x3
 10730 01a0 0E       		.uleb128 0xe
 10731 01a1 3A       		.uleb128 0x3a
 10732 01a2 0B       		.uleb128 0xb
 10733 01a3 3B       		.uleb128 0x3b
 10734 01a4 05       		.uleb128 0x5
 10735 01a5 49       		.uleb128 0x49
 10736 01a6 13       		.uleb128 0x13
 10737 01a7 02       		.uleb128 0x2
 10738 01a8 18       		.uleb128 0x18
 10739 01a9 00       		.byte	0
 10740 01aa 00       		.byte	0
 10741 01ab 20       		.uleb128 0x20
 10742 01ac 21       		.uleb128 0x21
 10743 01ad 00       		.byte	0
 10744 01ae 49       		.uleb128 0x49
 10745 01af 13       		.uleb128 0x13
 10746 01b0 2F       		.uleb128 0x2f
 10747 01b1 05       		.uleb128 0x5
 10748 01b2 00       		.byte	0
 10749 01b3 00       		.byte	0
 10750 01b4 21       		.uleb128 0x21
 10751 01b5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 238


 10752 01b6 01       		.byte	0x1
 10753 01b7 3F       		.uleb128 0x3f
 10754 01b8 19       		.uleb128 0x19
 10755 01b9 03       		.uleb128 0x3
 10756 01ba 0E       		.uleb128 0xe
 10757 01bb 3A       		.uleb128 0x3a
 10758 01bc 0B       		.uleb128 0xb
 10759 01bd 3B       		.uleb128 0x3b
 10760 01be 05       		.uleb128 0x5
 10761 01bf 27       		.uleb128 0x27
 10762 01c0 19       		.uleb128 0x19
 10763 01c1 49       		.uleb128 0x49
 10764 01c2 13       		.uleb128 0x13
 10765 01c3 11       		.uleb128 0x11
 10766 01c4 01       		.uleb128 0x1
 10767 01c5 12       		.uleb128 0x12
 10768 01c6 06       		.uleb128 0x6
 10769 01c7 40       		.uleb128 0x40
 10770 01c8 18       		.uleb128 0x18
 10771 01c9 9742     		.uleb128 0x2117
 10772 01cb 19       		.uleb128 0x19
 10773 01cc 01       		.uleb128 0x1
 10774 01cd 13       		.uleb128 0x13
 10775 01ce 00       		.byte	0
 10776 01cf 00       		.byte	0
 10777 01d0 22       		.uleb128 0x22
 10778 01d1 05       		.uleb128 0x5
 10779 01d2 00       		.byte	0
 10780 01d3 03       		.uleb128 0x3
 10781 01d4 0E       		.uleb128 0xe
 10782 01d5 3A       		.uleb128 0x3a
 10783 01d6 0B       		.uleb128 0xb
 10784 01d7 3B       		.uleb128 0x3b
 10785 01d8 05       		.uleb128 0x5
 10786 01d9 49       		.uleb128 0x49
 10787 01da 13       		.uleb128 0x13
 10788 01db 02       		.uleb128 0x2
 10789 01dc 18       		.uleb128 0x18
 10790 01dd 00       		.byte	0
 10791 01de 00       		.byte	0
 10792 01df 23       		.uleb128 0x23
 10793 01e0 34       		.uleb128 0x34
 10794 01e1 00       		.byte	0
 10795 01e2 03       		.uleb128 0x3
 10796 01e3 08       		.uleb128 0x8
 10797 01e4 3A       		.uleb128 0x3a
 10798 01e5 0B       		.uleb128 0xb
 10799 01e6 3B       		.uleb128 0x3b
 10800 01e7 05       		.uleb128 0x5
 10801 01e8 49       		.uleb128 0x49
 10802 01e9 13       		.uleb128 0x13
 10803 01ea 02       		.uleb128 0x2
 10804 01eb 18       		.uleb128 0x18
 10805 01ec 00       		.byte	0
 10806 01ed 00       		.byte	0
 10807 01ee 24       		.uleb128 0x24
 10808 01ef 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 239


 10809 01f0 01       		.byte	0x1
 10810 01f1 11       		.uleb128 0x11
 10811 01f2 01       		.uleb128 0x1
 10812 01f3 12       		.uleb128 0x12
 10813 01f4 06       		.uleb128 0x6
 10814 01f5 01       		.uleb128 0x1
 10815 01f6 13       		.uleb128 0x13
 10816 01f7 00       		.byte	0
 10817 01f8 00       		.byte	0
 10818 01f9 25       		.uleb128 0x25
 10819 01fa 21       		.uleb128 0x21
 10820 01fb 00       		.byte	0
 10821 01fc 49       		.uleb128 0x49
 10822 01fd 13       		.uleb128 0x13
 10823 01fe 2F       		.uleb128 0x2f
 10824 01ff 18       		.uleb128 0x18
 10825 0200 00       		.byte	0
 10826 0201 00       		.byte	0
 10827 0202 26       		.uleb128 0x26
 10828 0203 2E       		.uleb128 0x2e
 10829 0204 01       		.byte	0x1
 10830 0205 3F       		.uleb128 0x3f
 10831 0206 19       		.uleb128 0x19
 10832 0207 03       		.uleb128 0x3
 10833 0208 0E       		.uleb128 0xe
 10834 0209 3A       		.uleb128 0x3a
 10835 020a 0B       		.uleb128 0xb
 10836 020b 3B       		.uleb128 0x3b
 10837 020c 05       		.uleb128 0x5
 10838 020d 27       		.uleb128 0x27
 10839 020e 19       		.uleb128 0x19
 10840 020f 11       		.uleb128 0x11
 10841 0210 01       		.uleb128 0x1
 10842 0211 12       		.uleb128 0x12
 10843 0212 06       		.uleb128 0x6
 10844 0213 40       		.uleb128 0x40
 10845 0214 18       		.uleb128 0x18
 10846 0215 9742     		.uleb128 0x2117
 10847 0217 19       		.uleb128 0x19
 10848 0218 01       		.uleb128 0x1
 10849 0219 13       		.uleb128 0x13
 10850 021a 00       		.byte	0
 10851 021b 00       		.byte	0
 10852 021c 27       		.uleb128 0x27
 10853 021d 2E       		.uleb128 0x2e
 10854 021e 00       		.byte	0
 10855 021f 3F       		.uleb128 0x3f
 10856 0220 19       		.uleb128 0x19
 10857 0221 03       		.uleb128 0x3
 10858 0222 0E       		.uleb128 0xe
 10859 0223 3A       		.uleb128 0x3a
 10860 0224 0B       		.uleb128 0xb
 10861 0225 3B       		.uleb128 0x3b
 10862 0226 05       		.uleb128 0x5
 10863 0227 11       		.uleb128 0x11
 10864 0228 01       		.uleb128 0x1
 10865 0229 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 240


 10866 022a 06       		.uleb128 0x6
 10867 022b 40       		.uleb128 0x40
 10868 022c 18       		.uleb128 0x18
 10869 022d 9742     		.uleb128 0x2117
 10870 022f 19       		.uleb128 0x19
 10871 0230 00       		.byte	0
 10872 0231 00       		.byte	0
 10873 0232 28       		.uleb128 0x28
 10874 0233 05       		.uleb128 0x5
 10875 0234 00       		.byte	0
 10876 0235 03       		.uleb128 0x3
 10877 0236 08       		.uleb128 0x8
 10878 0237 3A       		.uleb128 0x3a
 10879 0238 0B       		.uleb128 0xb
 10880 0239 3B       		.uleb128 0x3b
 10881 023a 05       		.uleb128 0x5
 10882 023b 49       		.uleb128 0x49
 10883 023c 13       		.uleb128 0x13
 10884 023d 02       		.uleb128 0x2
 10885 023e 18       		.uleb128 0x18
 10886 023f 00       		.byte	0
 10887 0240 00       		.byte	0
 10888 0241 29       		.uleb128 0x29
 10889 0242 2E       		.uleb128 0x2e
 10890 0243 01       		.byte	0x1
 10891 0244 3F       		.uleb128 0x3f
 10892 0245 19       		.uleb128 0x19
 10893 0246 03       		.uleb128 0x3
 10894 0247 0E       		.uleb128 0xe
 10895 0248 3A       		.uleb128 0x3a
 10896 0249 0B       		.uleb128 0xb
 10897 024a 3B       		.uleb128 0x3b
 10898 024b 05       		.uleb128 0x5
 10899 024c 27       		.uleb128 0x27
 10900 024d 19       		.uleb128 0x19
 10901 024e 49       		.uleb128 0x49
 10902 024f 13       		.uleb128 0x13
 10903 0250 11       		.uleb128 0x11
 10904 0251 01       		.uleb128 0x1
 10905 0252 12       		.uleb128 0x12
 10906 0253 06       		.uleb128 0x6
 10907 0254 40       		.uleb128 0x40
 10908 0255 18       		.uleb128 0x18
 10909 0256 9642     		.uleb128 0x2116
 10910 0258 19       		.uleb128 0x19
 10911 0259 01       		.uleb128 0x1
 10912 025a 13       		.uleb128 0x13
 10913 025b 00       		.byte	0
 10914 025c 00       		.byte	0
 10915 025d 2A       		.uleb128 0x2a
 10916 025e 2E       		.uleb128 0x2e
 10917 025f 00       		.byte	0
 10918 0260 3F       		.uleb128 0x3f
 10919 0261 19       		.uleb128 0x19
 10920 0262 03       		.uleb128 0x3
 10921 0263 0E       		.uleb128 0xe
 10922 0264 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 241


 10923 0265 0B       		.uleb128 0xb
 10924 0266 3B       		.uleb128 0x3b
 10925 0267 05       		.uleb128 0x5
 10926 0268 27       		.uleb128 0x27
 10927 0269 19       		.uleb128 0x19
 10928 026a 49       		.uleb128 0x49
 10929 026b 13       		.uleb128 0x13
 10930 026c 11       		.uleb128 0x11
 10931 026d 01       		.uleb128 0x1
 10932 026e 12       		.uleb128 0x12
 10933 026f 06       		.uleb128 0x6
 10934 0270 40       		.uleb128 0x40
 10935 0271 18       		.uleb128 0x18
 10936 0272 9642     		.uleb128 0x2116
 10937 0274 19       		.uleb128 0x19
 10938 0275 00       		.byte	0
 10939 0276 00       		.byte	0
 10940 0277 2B       		.uleb128 0x2b
 10941 0278 2E       		.uleb128 0x2e
 10942 0279 00       		.byte	0
 10943 027a 3F       		.uleb128 0x3f
 10944 027b 19       		.uleb128 0x19
 10945 027c 03       		.uleb128 0x3
 10946 027d 0E       		.uleb128 0xe
 10947 027e 3A       		.uleb128 0x3a
 10948 027f 0B       		.uleb128 0xb
 10949 0280 3B       		.uleb128 0x3b
 10950 0281 05       		.uleb128 0x5
 10951 0282 27       		.uleb128 0x27
 10952 0283 19       		.uleb128 0x19
 10953 0284 11       		.uleb128 0x11
 10954 0285 01       		.uleb128 0x1
 10955 0286 12       		.uleb128 0x12
 10956 0287 06       		.uleb128 0x6
 10957 0288 40       		.uleb128 0x40
 10958 0289 18       		.uleb128 0x18
 10959 028a 9742     		.uleb128 0x2117
 10960 028c 19       		.uleb128 0x19
 10961 028d 00       		.byte	0
 10962 028e 00       		.byte	0
 10963 028f 2C       		.uleb128 0x2c
 10964 0290 2E       		.uleb128 0x2e
 10965 0291 01       		.byte	0x1
 10966 0292 3F       		.uleb128 0x3f
 10967 0293 19       		.uleb128 0x19
 10968 0294 03       		.uleb128 0x3
 10969 0295 0E       		.uleb128 0xe
 10970 0296 3A       		.uleb128 0x3a
 10971 0297 0B       		.uleb128 0xb
 10972 0298 3B       		.uleb128 0x3b
 10973 0299 05       		.uleb128 0x5
 10974 029a 11       		.uleb128 0x11
 10975 029b 01       		.uleb128 0x1
 10976 029c 12       		.uleb128 0x12
 10977 029d 06       		.uleb128 0x6
 10978 029e 40       		.uleb128 0x40
 10979 029f 18       		.uleb128 0x18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 242


 10980 02a0 9742     		.uleb128 0x2117
 10981 02a2 19       		.uleb128 0x19
 10982 02a3 01       		.uleb128 0x1
 10983 02a4 13       		.uleb128 0x13
 10984 02a5 00       		.byte	0
 10985 02a6 00       		.byte	0
 10986 02a7 2D       		.uleb128 0x2d
 10987 02a8 2E       		.uleb128 0x2e
 10988 02a9 01       		.byte	0x1
 10989 02aa 3F       		.uleb128 0x3f
 10990 02ab 19       		.uleb128 0x19
 10991 02ac 03       		.uleb128 0x3
 10992 02ad 0E       		.uleb128 0xe
 10993 02ae 3A       		.uleb128 0x3a
 10994 02af 0B       		.uleb128 0xb
 10995 02b0 3B       		.uleb128 0x3b
 10996 02b1 05       		.uleb128 0x5
 10997 02b2 11       		.uleb128 0x11
 10998 02b3 01       		.uleb128 0x1
 10999 02b4 12       		.uleb128 0x12
 11000 02b5 06       		.uleb128 0x6
 11001 02b6 40       		.uleb128 0x40
 11002 02b7 18       		.uleb128 0x18
 11003 02b8 9642     		.uleb128 0x2116
 11004 02ba 19       		.uleb128 0x19
 11005 02bb 01       		.uleb128 0x1
 11006 02bc 13       		.uleb128 0x13
 11007 02bd 00       		.byte	0
 11008 02be 00       		.byte	0
 11009 02bf 2E       		.uleb128 0x2e
 11010 02c0 2E       		.uleb128 0x2e
 11011 02c1 00       		.byte	0
 11012 02c2 3F       		.uleb128 0x3f
 11013 02c3 19       		.uleb128 0x19
 11014 02c4 03       		.uleb128 0x3
 11015 02c5 0E       		.uleb128 0xe
 11016 02c6 3A       		.uleb128 0x3a
 11017 02c7 0B       		.uleb128 0xb
 11018 02c8 3B       		.uleb128 0x3b
 11019 02c9 05       		.uleb128 0x5
 11020 02ca 11       		.uleb128 0x11
 11021 02cb 01       		.uleb128 0x1
 11022 02cc 12       		.uleb128 0x12
 11023 02cd 06       		.uleb128 0x6
 11024 02ce 40       		.uleb128 0x40
 11025 02cf 18       		.uleb128 0x18
 11026 02d0 9642     		.uleb128 0x2116
 11027 02d2 19       		.uleb128 0x19
 11028 02d3 00       		.byte	0
 11029 02d4 00       		.byte	0
 11030 02d5 2F       		.uleb128 0x2f
 11031 02d6 2E       		.uleb128 0x2e
 11032 02d7 00       		.byte	0
 11033 02d8 3F       		.uleb128 0x3f
 11034 02d9 19       		.uleb128 0x19
 11035 02da 03       		.uleb128 0x3
 11036 02db 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 243


 11037 02dc 3A       		.uleb128 0x3a
 11038 02dd 0B       		.uleb128 0xb
 11039 02de 3B       		.uleb128 0x3b
 11040 02df 05       		.uleb128 0x5
 11041 02e0 49       		.uleb128 0x49
 11042 02e1 13       		.uleb128 0x13
 11043 02e2 11       		.uleb128 0x11
 11044 02e3 01       		.uleb128 0x1
 11045 02e4 12       		.uleb128 0x12
 11046 02e5 06       		.uleb128 0x6
 11047 02e6 40       		.uleb128 0x40
 11048 02e7 18       		.uleb128 0x18
 11049 02e8 9742     		.uleb128 0x2117
 11050 02ea 19       		.uleb128 0x19
 11051 02eb 00       		.byte	0
 11052 02ec 00       		.byte	0
 11053 02ed 30       		.uleb128 0x30
 11054 02ee 34       		.uleb128 0x34
 11055 02ef 00       		.byte	0
 11056 02f0 03       		.uleb128 0x3
 11057 02f1 0E       		.uleb128 0xe
 11058 02f2 3A       		.uleb128 0x3a
 11059 02f3 0B       		.uleb128 0xb
 11060 02f4 3B       		.uleb128 0x3b
 11061 02f5 05       		.uleb128 0x5
 11062 02f6 49       		.uleb128 0x49
 11063 02f7 13       		.uleb128 0x13
 11064 02f8 3F       		.uleb128 0x3f
 11065 02f9 19       		.uleb128 0x19
 11066 02fa 3C       		.uleb128 0x3c
 11067 02fb 19       		.uleb128 0x19
 11068 02fc 00       		.byte	0
 11069 02fd 00       		.byte	0
 11070 02fe 31       		.uleb128 0x31
 11071 02ff 34       		.uleb128 0x34
 11072 0300 00       		.byte	0
 11073 0301 03       		.uleb128 0x3
 11074 0302 0E       		.uleb128 0xe
 11075 0303 3A       		.uleb128 0x3a
 11076 0304 0B       		.uleb128 0xb
 11077 0305 3B       		.uleb128 0x3b
 11078 0306 0B       		.uleb128 0xb
 11079 0307 49       		.uleb128 0x49
 11080 0308 13       		.uleb128 0x13
 11081 0309 3F       		.uleb128 0x3f
 11082 030a 19       		.uleb128 0x19
 11083 030b 02       		.uleb128 0x2
 11084 030c 18       		.uleb128 0x18
 11085 030d 00       		.byte	0
 11086 030e 00       		.byte	0
 11087 030f 00       		.byte	0
 11088              		.section	.debug_aranges,"",%progbits
 11089 0000 24020000 		.4byte	0x224
 11090 0004 0200     		.2byte	0x2
 11091 0006 00000000 		.4byte	.Ldebug_info0
 11092 000a 04       		.byte	0x4
 11093 000b 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 244


 11094 000c 0000     		.2byte	0
 11095 000e 0000     		.2byte	0
 11096 0010 00000000 		.4byte	.LFB64
 11097 0014 BC050000 		.4byte	.LFE64-.LFB64
 11098 0018 00000000 		.4byte	.LFB65
 11099 001c 22000000 		.4byte	.LFE65-.LFB65
 11100 0020 00000000 		.4byte	.LFB66
 11101 0024 5E000000 		.4byte	.LFE66-.LFB66
 11102 0028 00000000 		.4byte	.LFB67
 11103 002c 64010000 		.4byte	.LFE67-.LFB67
 11104 0030 00000000 		.4byte	.LFB68
 11105 0034 BC070000 		.4byte	.LFE68-.LFB68
 11106 0038 00000000 		.4byte	.LFB69
 11107 003c 34070000 		.4byte	.LFE69-.LFB69
 11108 0040 00000000 		.4byte	.LFB70
 11109 0044 34010000 		.4byte	.LFE70-.LFB70
 11110 0048 00000000 		.4byte	.LFB71
 11111 004c 14000000 		.4byte	.LFE71-.LFB71
 11112 0050 00000000 		.4byte	.LFB72
 11113 0054 0C000000 		.4byte	.LFE72-.LFB72
 11114 0058 00000000 		.4byte	.LFB73
 11115 005c B8030000 		.4byte	.LFE73-.LFB73
 11116 0060 00000000 		.4byte	.LFB74
 11117 0064 14020000 		.4byte	.LFE74-.LFB74
 11118 0068 00000000 		.4byte	.LFB75
 11119 006c 12000000 		.4byte	.LFE75-.LFB75
 11120 0070 00000000 		.4byte	.LFB76
 11121 0074 12000000 		.4byte	.LFE76-.LFB76
 11122 0078 00000000 		.4byte	.LFB77
 11123 007c 12000000 		.4byte	.LFE77-.LFB77
 11124 0080 00000000 		.4byte	.LFB78
 11125 0084 12000000 		.4byte	.LFE78-.LFB78
 11126 0088 00000000 		.4byte	.LFB79
 11127 008c 12000000 		.4byte	.LFE79-.LFB79
 11128 0090 00000000 		.4byte	.LFB80
 11129 0094 12000000 		.4byte	.LFE80-.LFB80
 11130 0098 00000000 		.4byte	.LFB81
 11131 009c 12000000 		.4byte	.LFE81-.LFB81
 11132 00a0 00000000 		.4byte	.LFB82
 11133 00a4 84000000 		.4byte	.LFE82-.LFB82
 11134 00a8 00000000 		.4byte	.LFB83
 11135 00ac 88000000 		.4byte	.LFE83-.LFB83
 11136 00b0 00000000 		.4byte	.LFB84
 11137 00b4 A0000000 		.4byte	.LFE84-.LFB84
 11138 00b8 00000000 		.4byte	.LFB85
 11139 00bc 3E000000 		.4byte	.LFE85-.LFB85
 11140 00c0 00000000 		.4byte	.LFB86
 11141 00c4 2E000000 		.4byte	.LFE86-.LFB86
 11142 00c8 00000000 		.4byte	.LFB87
 11143 00cc 90000000 		.4byte	.LFE87-.LFB87
 11144 00d0 00000000 		.4byte	.LFB88
 11145 00d4 60000000 		.4byte	.LFE88-.LFB88
 11146 00d8 00000000 		.4byte	.LFB89
 11147 00dc 58000000 		.4byte	.LFE89-.LFB89
 11148 00e0 00000000 		.4byte	.LFB90
 11149 00e4 CC000000 		.4byte	.LFE90-.LFB90
 11150 00e8 00000000 		.4byte	.LFB91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 245


 11151 00ec 0C000000 		.4byte	.LFE91-.LFB91
 11152 00f0 00000000 		.4byte	.LFB92
 11153 00f4 0C000000 		.4byte	.LFE92-.LFB92
 11154 00f8 00000000 		.4byte	.LFB93
 11155 00fc 0C000000 		.4byte	.LFE93-.LFB93
 11156 0100 00000000 		.4byte	.LFB94
 11157 0104 0C000000 		.4byte	.LFE94-.LFB94
 11158 0108 00000000 		.4byte	.LFB95
 11159 010c 0C000000 		.4byte	.LFE95-.LFB95
 11160 0110 00000000 		.4byte	.LFB96
 11161 0114 0C000000 		.4byte	.LFE96-.LFB96
 11162 0118 00000000 		.4byte	.LFB97
 11163 011c 0C000000 		.4byte	.LFE97-.LFB97
 11164 0120 00000000 		.4byte	.LFB98
 11165 0124 0C000000 		.4byte	.LFE98-.LFB98
 11166 0128 00000000 		.4byte	.LFB99
 11167 012c BC000000 		.4byte	.LFE99-.LFB99
 11168 0130 00000000 		.4byte	.LFB100
 11169 0134 2C000000 		.4byte	.LFE100-.LFB100
 11170 0138 00000000 		.4byte	.LFB101
 11171 013c 0C000000 		.4byte	.LFE101-.LFB101
 11172 0140 00000000 		.4byte	.LFB102
 11173 0144 0C000000 		.4byte	.LFE102-.LFB102
 11174 0148 00000000 		.4byte	.LFB103
 11175 014c 80000000 		.4byte	.LFE103-.LFB103
 11176 0150 00000000 		.4byte	.LFB104
 11177 0154 0C000000 		.4byte	.LFE104-.LFB104
 11178 0158 00000000 		.4byte	.LFB105
 11179 015c 0C000000 		.4byte	.LFE105-.LFB105
 11180 0160 00000000 		.4byte	.LFB106
 11181 0164 20010000 		.4byte	.LFE106-.LFB106
 11182 0168 00000000 		.4byte	.LFB107
 11183 016c C4000000 		.4byte	.LFE107-.LFB107
 11184 0170 00000000 		.4byte	.LFB108
 11185 0174 A8000000 		.4byte	.LFE108-.LFB108
 11186 0178 00000000 		.4byte	.LFB109
 11187 017c 0C000000 		.4byte	.LFE109-.LFB109
 11188 0180 00000000 		.4byte	.LFB110
 11189 0184 20000000 		.4byte	.LFE110-.LFB110
 11190 0188 00000000 		.4byte	.LFB111
 11191 018c 0C000000 		.4byte	.LFE111-.LFB111
 11192 0190 00000000 		.4byte	.LFB112
 11193 0194 94000000 		.4byte	.LFE112-.LFB112
 11194 0198 00000000 		.4byte	.LFB113
 11195 019c 60000000 		.4byte	.LFE113-.LFB113
 11196 01a0 00000000 		.4byte	.LFB114
 11197 01a4 0C000000 		.4byte	.LFE114-.LFB114
 11198 01a8 00000000 		.4byte	.LFB115
 11199 01ac 0C000000 		.4byte	.LFE115-.LFB115
 11200 01b0 00000000 		.4byte	.LFB116
 11201 01b4 0C000000 		.4byte	.LFE116-.LFB116
 11202 01b8 00000000 		.4byte	.LFB117
 11203 01bc 0C000000 		.4byte	.LFE117-.LFB117
 11204 01c0 00000000 		.4byte	.LFB118
 11205 01c4 0C000000 		.4byte	.LFE118-.LFB118
 11206 01c8 00000000 		.4byte	.LFB119
 11207 01cc 54010000 		.4byte	.LFE119-.LFB119
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 246


 11208 01d0 00000000 		.4byte	.LFB120
 11209 01d4 14000000 		.4byte	.LFE120-.LFB120
 11210 01d8 00000000 		.4byte	.LFB121
 11211 01dc 50010000 		.4byte	.LFE121-.LFB121
 11212 01e0 00000000 		.4byte	.LFB122
 11213 01e4 90010000 		.4byte	.LFE122-.LFB122
 11214 01e8 00000000 		.4byte	.LFB123
 11215 01ec 24000000 		.4byte	.LFE123-.LFB123
 11216 01f0 00000000 		.4byte	.LFB124
 11217 01f4 40000000 		.4byte	.LFE124-.LFB124
 11218 01f8 00000000 		.4byte	.LFB125
 11219 01fc 0E000000 		.4byte	.LFE125-.LFB125
 11220 0200 00000000 		.4byte	.LFB126
 11221 0204 12000000 		.4byte	.LFE126-.LFB126
 11222 0208 00000000 		.4byte	.LFB127
 11223 020c 84000000 		.4byte	.LFE127-.LFB127
 11224 0210 00000000 		.4byte	.LFB128
 11225 0214 30000000 		.4byte	.LFE128-.LFB128
 11226 0218 00000000 		.4byte	.LFB129
 11227 021c 0C000000 		.4byte	.LFE129-.LFB129
 11228 0220 00000000 		.4byte	0
 11229 0224 00000000 		.4byte	0
 11230              		.section	.debug_ranges,"",%progbits
 11231              	.Ldebug_ranges0:
 11232 0000 00000000 		.4byte	.LFB64
 11233 0004 BC050000 		.4byte	.LFE64
 11234 0008 00000000 		.4byte	.LFB65
 11235 000c 22000000 		.4byte	.LFE65
 11236 0010 00000000 		.4byte	.LFB66
 11237 0014 5E000000 		.4byte	.LFE66
 11238 0018 00000000 		.4byte	.LFB67
 11239 001c 64010000 		.4byte	.LFE67
 11240 0020 00000000 		.4byte	.LFB68
 11241 0024 BC070000 		.4byte	.LFE68
 11242 0028 00000000 		.4byte	.LFB69
 11243 002c 34070000 		.4byte	.LFE69
 11244 0030 00000000 		.4byte	.LFB70
 11245 0034 34010000 		.4byte	.LFE70
 11246 0038 00000000 		.4byte	.LFB71
 11247 003c 14000000 		.4byte	.LFE71
 11248 0040 00000000 		.4byte	.LFB72
 11249 0044 0C000000 		.4byte	.LFE72
 11250 0048 00000000 		.4byte	.LFB73
 11251 004c B8030000 		.4byte	.LFE73
 11252 0050 00000000 		.4byte	.LFB74
 11253 0054 14020000 		.4byte	.LFE74
 11254 0058 00000000 		.4byte	.LFB75
 11255 005c 12000000 		.4byte	.LFE75
 11256 0060 00000000 		.4byte	.LFB76
 11257 0064 12000000 		.4byte	.LFE76
 11258 0068 00000000 		.4byte	.LFB77
 11259 006c 12000000 		.4byte	.LFE77
 11260 0070 00000000 		.4byte	.LFB78
 11261 0074 12000000 		.4byte	.LFE78
 11262 0078 00000000 		.4byte	.LFB79
 11263 007c 12000000 		.4byte	.LFE79
 11264 0080 00000000 		.4byte	.LFB80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 247


 11265 0084 12000000 		.4byte	.LFE80
 11266 0088 00000000 		.4byte	.LFB81
 11267 008c 12000000 		.4byte	.LFE81
 11268 0090 00000000 		.4byte	.LFB82
 11269 0094 84000000 		.4byte	.LFE82
 11270 0098 00000000 		.4byte	.LFB83
 11271 009c 88000000 		.4byte	.LFE83
 11272 00a0 00000000 		.4byte	.LFB84
 11273 00a4 A0000000 		.4byte	.LFE84
 11274 00a8 00000000 		.4byte	.LFB85
 11275 00ac 3E000000 		.4byte	.LFE85
 11276 00b0 00000000 		.4byte	.LFB86
 11277 00b4 2E000000 		.4byte	.LFE86
 11278 00b8 00000000 		.4byte	.LFB87
 11279 00bc 90000000 		.4byte	.LFE87
 11280 00c0 00000000 		.4byte	.LFB88
 11281 00c4 60000000 		.4byte	.LFE88
 11282 00c8 00000000 		.4byte	.LFB89
 11283 00cc 58000000 		.4byte	.LFE89
 11284 00d0 00000000 		.4byte	.LFB90
 11285 00d4 CC000000 		.4byte	.LFE90
 11286 00d8 00000000 		.4byte	.LFB91
 11287 00dc 0C000000 		.4byte	.LFE91
 11288 00e0 00000000 		.4byte	.LFB92
 11289 00e4 0C000000 		.4byte	.LFE92
 11290 00e8 00000000 		.4byte	.LFB93
 11291 00ec 0C000000 		.4byte	.LFE93
 11292 00f0 00000000 		.4byte	.LFB94
 11293 00f4 0C000000 		.4byte	.LFE94
 11294 00f8 00000000 		.4byte	.LFB95
 11295 00fc 0C000000 		.4byte	.LFE95
 11296 0100 00000000 		.4byte	.LFB96
 11297 0104 0C000000 		.4byte	.LFE96
 11298 0108 00000000 		.4byte	.LFB97
 11299 010c 0C000000 		.4byte	.LFE97
 11300 0110 00000000 		.4byte	.LFB98
 11301 0114 0C000000 		.4byte	.LFE98
 11302 0118 00000000 		.4byte	.LFB99
 11303 011c BC000000 		.4byte	.LFE99
 11304 0120 00000000 		.4byte	.LFB100
 11305 0124 2C000000 		.4byte	.LFE100
 11306 0128 00000000 		.4byte	.LFB101
 11307 012c 0C000000 		.4byte	.LFE101
 11308 0130 00000000 		.4byte	.LFB102
 11309 0134 0C000000 		.4byte	.LFE102
 11310 0138 00000000 		.4byte	.LFB103
 11311 013c 80000000 		.4byte	.LFE103
 11312 0140 00000000 		.4byte	.LFB104
 11313 0144 0C000000 		.4byte	.LFE104
 11314 0148 00000000 		.4byte	.LFB105
 11315 014c 0C000000 		.4byte	.LFE105
 11316 0150 00000000 		.4byte	.LFB106
 11317 0154 20010000 		.4byte	.LFE106
 11318 0158 00000000 		.4byte	.LFB107
 11319 015c C4000000 		.4byte	.LFE107
 11320 0160 00000000 		.4byte	.LFB108
 11321 0164 A8000000 		.4byte	.LFE108
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 248


 11322 0168 00000000 		.4byte	.LFB109
 11323 016c 0C000000 		.4byte	.LFE109
 11324 0170 00000000 		.4byte	.LFB110
 11325 0174 20000000 		.4byte	.LFE110
 11326 0178 00000000 		.4byte	.LFB111
 11327 017c 0C000000 		.4byte	.LFE111
 11328 0180 00000000 		.4byte	.LFB112
 11329 0184 94000000 		.4byte	.LFE112
 11330 0188 00000000 		.4byte	.LFB113
 11331 018c 60000000 		.4byte	.LFE113
 11332 0190 00000000 		.4byte	.LFB114
 11333 0194 0C000000 		.4byte	.LFE114
 11334 0198 00000000 		.4byte	.LFB115
 11335 019c 0C000000 		.4byte	.LFE115
 11336 01a0 00000000 		.4byte	.LFB116
 11337 01a4 0C000000 		.4byte	.LFE116
 11338 01a8 00000000 		.4byte	.LFB117
 11339 01ac 0C000000 		.4byte	.LFE117
 11340 01b0 00000000 		.4byte	.LFB118
 11341 01b4 0C000000 		.4byte	.LFE118
 11342 01b8 00000000 		.4byte	.LFB119
 11343 01bc 54010000 		.4byte	.LFE119
 11344 01c0 00000000 		.4byte	.LFB120
 11345 01c4 14000000 		.4byte	.LFE120
 11346 01c8 00000000 		.4byte	.LFB121
 11347 01cc 50010000 		.4byte	.LFE121
 11348 01d0 00000000 		.4byte	.LFB122
 11349 01d4 90010000 		.4byte	.LFE122
 11350 01d8 00000000 		.4byte	.LFB123
 11351 01dc 24000000 		.4byte	.LFE123
 11352 01e0 00000000 		.4byte	.LFB124
 11353 01e4 40000000 		.4byte	.LFE124
 11354 01e8 00000000 		.4byte	.LFB125
 11355 01ec 0E000000 		.4byte	.LFE125
 11356 01f0 00000000 		.4byte	.LFB126
 11357 01f4 12000000 		.4byte	.LFE126
 11358 01f8 00000000 		.4byte	.LFB127
 11359 01fc 84000000 		.4byte	.LFE127
 11360 0200 00000000 		.4byte	.LFB128
 11361 0204 30000000 		.4byte	.LFE128
 11362 0208 00000000 		.4byte	.LFB129
 11363 020c 0C000000 		.4byte	.LFE129
 11364 0210 00000000 		.4byte	0
 11365 0214 00000000 		.4byte	0
 11366              		.section	.debug_line,"",%progbits
 11367              	.Ldebug_line0:
 11368 0000 610B0000 		.section	.debug_str,"MS",%progbits,1
 11368      02008B01 
 11368      00000201 
 11368      FB0E0D00 
 11368      01010101 
 11369              	.LASF160:
 11370 0000 696E666F 		.ascii	"infoSend\000"
 11370      53656E64 
 11370      00
 11371              	.LASF48:
 11372 0009 4D454E55 		.ascii	"MENU_Y_N\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 249


 11372      5F595F4E 
 11372      00
 11373              	.LASF174:
 11374 0012 73747269 		.ascii	"string_length\000"
 11374      6E675F6C 
 11374      656E6774 
 11374      6800
 11375              	.LASF24:
 11376 0020 73697A65 		.ascii	"sizetype\000"
 11376      74797065 
 11376      00
 11377              	.LASF66:
 11378 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 11378      494E4954 
 11378      5F4D454D 
 11378      00
 11379              	.LASF99:
 11380 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11380      545F4D4F 
 11380      44455F45 
 11380      4D475F46 
 11380      4346535F 
 11381              	.LASF46:
 11382 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 11382      5F494E50 
 11382      555400
 11383              	.LASF276:
 11384 0059 73746F70 		.ascii	"stop_master_device\000"
 11384      5F6D6173 
 11384      7465725F 
 11384      64657669 
 11384      636500
 11385              	.LASF11:
 11386 006c 696E7433 		.ascii	"int32_t\000"
 11386      325F7400 
 11387              	.LASF281:
 11388 0074 675F7278 		.ascii	"g_rx\000"
 11388      00
 11389              	.LASF119:
 11390 0079 73745F64 		.ascii	"st_data\000"
 11390      61746100 
 11391              	.LASF221:
 11392 0081 77726974 		.ascii	"writeStatus\000"
 11392      65537461 
 11392      74757300 
 11393              	.LASF15:
 11394 008d 75696E74 		.ascii	"uint32\000"
 11394      333200
 11395              	.LASF249:
 11396 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 11396      7365745F 
 11396      62617564 
 11396      72617465 
 11396      00
 11397              	.LASF264:
 11398 00a5 6169725F 		.ascii	"air_chambers_control\000"
 11398      6368616D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 250


 11398      62657273 
 11398      5F636F6E 
 11398      74726F6C 
 11399              	.LASF200:
 11400 00ba 70726570 		.ascii	"prepare_generic_info\000"
 11400      6172655F 
 11400      67656E65 
 11400      7269635F 
 11400      696E666F 
 11401              	.LASF186:
 11402 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 11402      4D454E55 
 11402      7300
 11403              	.LASF124:
 11404 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 11404      6C696D5F 
 11404      696E6600 
 11405              	.LASF164:
 11406 00e5 54595045 		.ascii	"TYPE\000"
 11406      00
 11407              	.LASF147:
 11408 00ea 63686F69 		.ascii	"choice\000"
 11408      636500
 11409              	.LASF270:
 11410 00f1 70756D70 		.ascii	"pump_control\000"
 11410      5F636F6E 
 11410      74726F6C 
 11410      00
 11411              	.LASF33:
 11412 00fe 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 11412      4F4D5F52 
 11412      45534554 
 11412      5F434F55 
 11412      4E5400
 11413              	.LASF98:
 11414 0111 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 11414      545F4D4F 
 11414      44455F45 
 11414      4D475F46 
 11414      43465300 
 11415              	.LASF254:
 11416 0125 636D645F 		.ascii	"cmd_get_imu_readings\000"
 11416      6765745F 
 11416      696D755F 
 11416      72656164 
 11416      696E6773 
 11417              	.LASF132:
 11418 013a 73745F4D 		.ascii	"st_MASTER_spec\000"
 11418      41535445 
 11418      525F7370 
 11418      656300
 11419              	.LASF152:
 11420 0149 50415241 		.ascii	"PARAM_STR\000"
 11420      4D5F5354 
 11420      5200
 11421              	.LASF97:
 11422 0153 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 251


 11422      545F4D4F 
 11422      44455F45 
 11422      4D475F49 
 11422      4E544547 
 11423              	.LASF199:
 11424 016b 6D5F746D 		.ascii	"m_tmp\000"
 11424      7000
 11425              	.LASF184:
 11426 0171 50415241 		.ascii	"PARAM_IDX\000"
 11426      4D5F4944 
 11426      5800
 11427              	.LASF16:
 11428 017b 696E7438 		.ascii	"int8\000"
 11428      00
 11429              	.LASF167:
 11430 0180 6765745F 		.ascii	"get_param_list\000"
 11430      70617261 
 11430      6D5F6C69 
 11430      737400
 11431              	.LASF233:
 11432 018f 636D645F 		.ascii	"cmd_get_accelerations\000"
 11432      6765745F 
 11432      61636365 
 11432      6C657261 
 11432      74696F6E 
 11433              	.LASF253:
 11434 01a5 636D645F 		.ascii	"cmd_get_emg\000"
 11434      6765745F 
 11434      656D6700 
 11435              	.LASF127:
 11436 01b1 73745F65 		.ascii	"st_emg\000"
 11436      6D6700
 11437              	.LASF39:
 11438 01b8 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 11438      4F4D5F4D 
 11438      4541535F 
 11438      4F46465F 
 11438      3200
 11439              	.LASF298:
 11440 01ca 50756D70 		.ascii	"Pump_refNew\000"
 11440      5F726566 
 11440      4E657700 
 11441              	.LASF309:
 11442 01d6 72657375 		.ascii	"result\000"
 11442      6C7400
 11443              	.LASF118:
 11444 01dd 72656164 		.ascii	"ready\000"
 11444      7900
 11445              	.LASF176:
 11446 01e3 6175785F 		.ascii	"aux_str1\000"
 11446      73747231 
 11446      00
 11447              	.LASF29:
 11448 01ec 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 11448      4F4D5F50 
 11448      4F535F4C 
 11448      494D00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 252


 11449              	.LASF84:
 11450 01fb 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 11450      4745545F 
 11450      4A4F5953 
 11450      5449434B 
 11450      00
 11451              	.LASF96:
 11452 020c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 11452      545F4D4F 
 11452      44455F45 
 11452      4D475F50 
 11452      524F504F 
 11453              	.LASF244:
 11454 0228 745F7374 		.ascii	"t_start\000"
 11454      61727400 
 11455              	.LASF144:
 11456 0230 6D656E75 		.ascii	"menu\000"
 11456      00
 11457              	.LASF299:
 11458 0235 50574D5F 		.ascii	"PWM_IMU_1\000"
 11458      494D555F 
 11458      3100
 11459              	.LASF300:
 11460 023f 50574D5F 		.ascii	"PWM_IMU_2\000"
 11460      494D555F 
 11460      3200
 11461              	.LASF297:
 11462 0249 50756D70 		.ascii	"Pump_refOld\000"
 11462      5F726566 
 11462      4F6C6400 
 11463              	.LASF4:
 11464 0255 6C6F6E67 		.ascii	"long int\000"
 11464      20696E74 
 11464      00
 11465              	.LASF37:
 11466 025e 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
 11466      4F4D5F43 
 11466      5552525F 
 11466      5049445F 
 11466      3200
 11467              	.LASF259:
 11468 0270 636D645F 		.ascii	"cmd_get_SD_file\000"
 11468      6765745F 
 11468      53445F66 
 11468      696C6500 
 11469              	.LASF228:
 11470 0280 7365745A 		.ascii	"setZeros\000"
 11470      65726F73 
 11470      00
 11471              	.LASF122:
 11472 0289 756E7573 		.ascii	"unused_bytes\000"
 11472      65645F62 
 11472      79746573 
 11472      00
 11473              	.LASF151:
 11474 0296 4E554D5F 		.ascii	"NUM_ITEMS\000"
 11474      4954454D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 253


 11474      5300
 11475              	.LASF185:
 11476 02a0 4D454D5F 		.ascii	"MEM_P\000"
 11476      5000
 11477              	.LASF257:
 11478 02a6 636D645F 		.ascii	"cmd_get_ADC_map\000"
 11478      6765745F 
 11478      4144435F 
 11478      6D617000 
 11479              	.LASF74:
 11480 02b6 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 11480      4745545F 
 11480      43555252 
 11480      454E5453 
 11480      00
 11481              	.LASF206:
 11482 02c7 70726570 		.ascii	"prepare_SD_EMG_history\000"
 11482      6172655F 
 11482      53445F45 
 11482      4D475F68 
 11482      6973746F 
 11483              	.LASF258:
 11484 02de 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 11484      6765745F 
 11484      4144435F 
 11484      72617700 
 11485              	.LASF289:
 11486 02ee 73645061 		.ascii	"sdParam\000"
 11486      72616D00 
 11487              	.LASF36:
 11488 02f6 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 11488      4F4D5F50 
 11488      4F535F50 
 11488      49445F32 
 11488      00
 11489              	.LASF301:
 11490 0307 70726573 		.ascii	"pressure_value\000"
 11490      73757265 
 11490      5F76616C 
 11490      756500
 11491              	.LASF250:
 11492 0316 636D645F 		.ascii	"cmd_ping\000"
 11492      70696E67 
 11492      00
 11493              	.LASF27:
 11494 031f 43555354 		.ascii	"CUSTOM_INPUT\000"
 11494      4F4D5F49 
 11494      4E505554 
 11494      00
 11495              	.LASF189:
 11496 032c 7365745F 		.ascii	"set_custom_param\000"
 11496      63757374 
 11496      6F6D5F70 
 11496      6172616D 
 11496      00
 11497              	.LASF262:
 11498 033d 636D645F 		.ascii	"cmd_remove_SD_file\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 254


 11498      72656D6F 
 11498      76655F53 
 11498      445F6669 
 11498      6C6500
 11499              	.LASF41:
 11500 0350 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 11500      4F4D5F44 
 11500      52495645 
 11500      525F3200 
 11501              	.LASF0:
 11502 0360 7369676E 		.ascii	"signed char\000"
 11502      65642063 
 11502      68617200 
 11503              	.LASF133:
 11504 036c 6D617374 		.ascii	"master_mode_active\000"
 11504      65725F6D 
 11504      6F64655F 
 11504      61637469 
 11504      766500
 11505              	.LASF219:
 11506 037f 6D656D53 		.ascii	"memStore\000"
 11506      746F7265 
 11506      00
 11507              	.LASF261:
 11508 0388 66696C65 		.ascii	"filename\000"
 11508      6E616D65 
 11508      00
 11509              	.LASF131:
 11510 0391 73776974 		.ascii	"switch_emg\000"
 11510      63685F65 
 11510      6D6700
 11511              	.LASF246:
 11512 039c 72656164 		.ascii	"read_flag\000"
 11512      5F666C61 
 11512      6700
 11513              	.LASF243:
 11514 03a6 636F6D6D 		.ascii	"commReadWriteSH\000"
 11514      52656164 
 11514      57726974 
 11514      65534800 
 11515              	.LASF285:
 11516 03b6 696E7465 		.ascii	"interrupt_flag\000"
 11516      72727570 
 11516      745F666C 
 11516      616700
 11517              	.LASF47:
 11518 03c5 4D454E55 		.ascii	"MENU_CTRL\000"
 11518      5F435452 
 11518      4C00
 11519              	.LASF1:
 11520 03cf 756E7369 		.ascii	"unsigned char\000"
 11520      676E6564 
 11520      20636861 
 11520      7200
 11521              	.LASF81:
 11522 03dd 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 11522      5345545F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 255


 11522      56494252 
 11522      4F544143 
 11522      54494C45 
 11523              	.LASF82:
 11524 03f9 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 11524      4745545F 
 11524      56494252 
 11524      4F544143 
 11524      54494C45 
 11525              	.LASF69:
 11526 0415 434D445F 		.ascii	"CMD_ACTIVATE\000"
 11526      41435449 
 11526      56415445 
 11526      00
 11527              	.LASF62:
 11528 0422 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 11528      53544F52 
 11528      455F4445 
 11528      4641554C 
 11528      545F5041 
 11529              	.LASF32:
 11530 043b 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 11530      4F4D5F48 
 11530      414E445F 
 11530      53494445 
 11530      00
 11531              	.LASF218:
 11532 044c 76616C75 		.ascii	"value\000"
 11532      6500
 11533              	.LASF158:
 11534 0452 70726573 		.ascii	"pressure\000"
 11534      73757265 
 11534      00
 11535              	.LASF70:
 11536 045b 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 11536      4745545F 
 11536      41435449 
 11536      56415445 
 11536      00
 11537              	.LASF21:
 11538 046c 63686172 		.ascii	"char\000"
 11538      00
 11539              	.LASF268:
 11540 0471 76616C76 		.ascii	"valve_command\000"
 11540      655F636F 
 11540      6D6D616E 
 11540      6400
 11541              	.LASF266:
 11542 047f 70726573 		.ascii	"pressure_reference\000"
 11542      73757265 
 11542      5F726566 
 11542      6572656E 
 11542      636500
 11543              	.LASF223:
 11544 0492 7265745F 		.ascii	"ret_val\000"
 11544      76616C00 
 11545              	.LASF52:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 256


 11546 049a 4D454E55 		.ascii	"MENU_SPI\000"
 11546      5F535049 
 11546      00
 11547              	.LASF148:
 11548 04a3 70617261 		.ascii	"parameter\000"
 11548      6D657465 
 11548      7200
 11549              	.LASF162:
 11550 04ad 7061636B 		.ascii	"packet_string\000"
 11550      65745F73 
 11550      7472696E 
 11550      6700
 11551              	.LASF34:
 11552 04bb 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 11552      4F4D5F4C 
 11552      4153545F 
 11552      43484543 
 11552      4B45445F 
 11553              	.LASF215:
 11554 04d1 64617461 		.ascii	"data_length\000"
 11554      5F6C656E 
 11554      67746800 
 11555              	.LASF125:
 11556 04dd 706F735F 		.ascii	"pos_lim_sup\000"
 11556      6C696D5F 
 11556      73757000 
 11557              	.LASF230:
 11558 04e9 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 11558      6E69745F 
 11558      4F74626B 
 11558      41637457 
 11558      72697374 
 11559              	.LASF130:
 11560 0500 656D675F 		.ascii	"emg_speed\000"
 11560      73706565 
 11560      6400
 11561              	.LASF181:
 11562 050a 7061636B 		.ascii	"packet_data\000"
 11562      65745F64 
 11562      61746100 
 11563              	.LASF120:
 11564 0516 73745F64 		.ascii	"st_device\000"
 11564      65766963 
 11564      6500
 11565              	.LASF210:
 11566 0520 636F6D6D 		.ascii	"commWrite\000"
 11566      57726974 
 11566      6500
 11567              	.LASF277:
 11568 052a 64656163 		.ascii	"deactivate_slaves\000"
 11568      74697661 
 11568      74655F73 
 11568      6C617665 
 11568      7300
 11569              	.LASF222:
 11570 053c 70616765 		.ascii	"pages\000"
 11570      7300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 257


 11571              	.LASF310:
 11572 0542 6D656D49 		.ascii	"memInit\000"
 11572      6E697400 
 11573              	.LASF44:
 11574 054a 6D656E75 		.ascii	"menu_type\000"
 11574      5F747970 
 11574      6500
 11575              	.LASF55:
 11576 0554 4D454E55 		.ascii	"MENU_DEVICE\000"
 11576      5F444556 
 11576      49434500 
 11577              	.LASF71:
 11578 0560 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 11578      5345545F 
 11578      494E5055 
 11578      545300
 11579              	.LASF292:
 11580 056f 53485F72 		.ascii	"SH_ref\000"
 11580      656600
 11581              	.LASF116:
 11582 0576 62756666 		.ascii	"buffer\000"
 11582      657200
 11583              	.LASF265:
 11584 057d 63757272 		.ascii	"curr_diff\000"
 11584      5F646966 
 11584      6600
 11585              	.LASF231:
 11586 0587 636D645F 		.ascii	"cmd_get_measurements\000"
 11586      6765745F 
 11586      6D656173 
 11586      7572656D 
 11586      656E7473 
 11587              	.LASF161:
 11588 059c 72785F63 		.ascii	"rx_cmd\000"
 11588      6D6400
 11589              	.LASF114:
 11590 05a3 54595045 		.ascii	"TYPE_DOUBLE\000"
 11590      5F444F55 
 11590      424C4500 
 11591              	.LASF274:
 11592 05af 736C6176 		.ascii	"slave_motor_idx\000"
 11592      655F6D6F 
 11592      746F725F 
 11592      69647800 
 11593              	.LASF251:
 11594 05bf 636D645F 		.ascii	"cmd_get_inputs\000"
 11594      6765745F 
 11594      696E7075 
 11594      747300
 11595              	.LASF235:
 11596 05ce 6C617374 		.ascii	"last_aux_int16\000"
 11596      5F617578 
 11596      5F696E74 
 11596      313600
 11597              	.LASF103:
 11598 05dd 41434B5F 		.ascii	"ACK_ERROR\000"
 11598      4552524F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 258


 11598      5200
 11599              	.LASF94:
 11600 05e7 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 11600      545F4D4F 
 11600      44455F45 
 11600      58544552 
 11600      4E414C00 
 11601              	.LASF183:
 11602 05fb 696E6465 		.ascii	"index\000"
 11602      7800
 11603              	.LASF137:
 11604 0601 6D617869 		.ascii	"maximum_pressure_kPa\000"
 11604      6D756D5F 
 11604      70726573 
 11604      73757265 
 11604      5F6B5061 
 11605              	.LASF43:
 11606 0616 63757374 		.ascii	"custom_param\000"
 11606      6F6D5F70 
 11606      6172616D 
 11606      00
 11607              	.LASF260:
 11608 0623 66696C65 		.ascii	"filename_length\000"
 11608      6E616D65 
 11608      5F6C656E 
 11608      67746800 
 11609              	.LASF248:
 11610 0633 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 11610      52656164 
 11610      52657343 
 11610      75727246 
 11610      726F6D53 
 11611              	.LASF57:
 11612 0649 4D454E55 		.ascii	"MENU_WRIST\000"
 11612      5F575249 
 11612      535400
 11613              	.LASF307:
 11614 0654 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 11614      73657273 
 11614      5C6D676E 
 11614      6F63636F 
 11614      5C446F63 
 11615 0681 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 11615      485F5649 
 11615      4245535C 
 11615      46575F57 
 11615      65617261 
 11616 06b2 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 11616      56494245 
 11616      535F536F 
 11616      636B6574 
 11616      2E637964 
 11617              	.LASF287:
 11618 06c9 72657365 		.ascii	"reset_PSoC_flag\000"
 11618      745F5053 
 11618      6F435F66 
 11618      6C616700 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 259


 11619              	.LASF273:
 11620 06d9 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 11620      5F616374 
 11620      5F777269 
 11620      73745F63 
 11620      6F6E7472 
 11621              	.LASF115:
 11622 06f0 54595045 		.ascii	"TYPE_STRING\000"
 11622      5F535452 
 11622      494E4700 
 11623              	.LASF61:
 11624 06fc 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 11624      53544F52 
 11624      455F5041 
 11624      52414D53 
 11624      00
 11625              	.LASF7:
 11626 070d 6C6F6E67 		.ascii	"long unsigned int\000"
 11626      20756E73 
 11626      69676E65 
 11626      6420696E 
 11626      7400
 11627              	.LASF65:
 11628 071f 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 11628      424F4F54 
 11628      4C4F4144 
 11628      455200
 11629              	.LASF212:
 11630 072e 6E756D5F 		.ascii	"num_of_bytes\000"
 11630      6F665F62 
 11630      79746573 
 11630      00
 11631              	.LASF100:
 11632 073b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 11632      545F4D4F 
 11632      44455F4A 
 11632      4F595354 
 11632      49434B00 
 11633              	.LASF220:
 11634 074f 64697370 		.ascii	"displacement\000"
 11634      6C616365 
 11634      6D656E74 
 11634      00
 11635              	.LASF242:
 11636 075c 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 11636      6765745F 
 11636      76696272 
 11636      6F746163 
 11636      74696C65 
 11637              	.LASF166:
 11638 0778 7374725F 		.ascii	"str_sd_data\000"
 11638      73645F64 
 11638      61746100 
 11639              	.LASF134:
 11640 0784 736C6176 		.ascii	"slave_ID\000"
 11640      655F4944 
 11640      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 260


 11641              	.LASF104:
 11642 078d 41434B5F 		.ascii	"ACK_OK\000"
 11642      4F4B00
 11643              	.LASF106:
 11644 0794 54595045 		.ascii	"TYPE_FLAG\000"
 11644      5F464C41 
 11644      4700
 11645              	.LASF180:
 11646 079e 7061636B 		.ascii	"packet_length\000"
 11646      65745F6C 
 11646      656E6774 
 11646      6800
 11647              	.LASF30:
 11648 07ac 43555354 		.ascii	"CUSTOM_REST_POS\000"
 11648      4F4D5F52 
 11648      4553545F 
 11648      504F5300 
 11649              	.LASF126:
 11650 07bc 696E7075 		.ascii	"input_mode\000"
 11650      745F6D6F 
 11650      646500
 11651              	.LASF76:
 11652 07c7 434D445F 		.ascii	"CMD_GET_EMG\000"
 11652      4745545F 
 11652      454D4700 
 11653              	.LASF226:
 11654 07d3 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 11654      6E69745F 
 11654      536F6674 
 11654      48616E64 
 11654      50726F00 
 11655              	.LASF156:
 11656 07e7 70696E67 		.ascii	"ping\000"
 11656      00
 11657              	.LASF64:
 11658 07ec 434D445F 		.ascii	"CMD_GET_INFO\000"
 11658      4745545F 
 11658      494E464F 
 11658      00
 11659              	.LASF190:
 11660 07f9 6765745F 		.ascii	"get_IMU_param_list\000"
 11660      494D555F 
 11660      70617261 
 11660      6D5F6C69 
 11660      737400
 11661              	.LASF153:
 11662 080c 4D454E55 		.ascii	"MENU\000"
 11662      00
 11663              	.LASF54:
 11664 0811 4D454E55 		.ascii	"MENU_DRIVER\000"
 11664      5F445249 
 11664      56455200 
 11665              	.LASF139:
 11666 081d 76696272 		.ascii	"vibrotactile_feedback_active\000"
 11666      6F746163 
 11666      74696C65 
 11666      5F666565 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 261


 11666      64626163 
 11667              	.LASF75:
 11668 083a 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 11668      4745545F 
 11668      43555252 
 11668      5F414E44 
 11668      5F4D4541 
 11669              	.LASF305:
 11670 0850 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11670      43313120 
 11670      352E342E 
 11670      31203230 
 11670      31363036 
 11671 0883 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11671      20726576 
 11671      6973696F 
 11671      6E203233 
 11671      37373135 
 11672 08b6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11672      66756E63 
 11672      74696F6E 
 11672      2D736563 
 11672      74696F6E 
 11673              	.LASF234:
 11674 08de 636D645F 		.ascii	"cmd_get_joystick\000"
 11674      6765745F 
 11674      6A6F7973 
 11674      7469636B 
 11674      00
 11675              	.LASF80:
 11676 08ef 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 11676      5345545F 
 11676      43554646 
 11676      5F494E50 
 11676      55545300 
 11677              	.LASF6:
 11678 0903 5F5F7569 		.ascii	"__uint32_t\000"
 11678      6E743332 
 11678      5F7400
 11679              	.LASF8:
 11680 090e 6C6F6E67 		.ascii	"long long int\000"
 11680      206C6F6E 
 11680      6720696E 
 11680      7400
 11681              	.LASF123:
 11682 091c 73745F73 		.ascii	"st_slave\000"
 11682      6C617665 
 11682      00
 11683              	.LASF263:
 11684 0925 76696272 		.ascii	"vibrotactile_control\000"
 11684      6F746163 
 11684      74696C65 
 11684      5F636F6E 
 11684      74726F6C 
 11685              	.LASF108:
 11686 093a 54595045 		.ascii	"TYPE_UINT8\000"
 11686      5F55494E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 262


 11686      543800
 11687              	.LASF143:
 11688 0945 53485F63 		.ascii	"SH_config\000"
 11688      6F6E6669 
 11688      6700
 11689              	.LASF240:
 11690 094f 636D645F 		.ascii	"cmd_get_currents\000"
 11690      6765745F 
 11690      63757272 
 11690      656E7473 
 11690      00
 11691              	.LASF286:
 11692 0960 6368616E 		.ascii	"change_ext_ref_flag\000"
 11692      67655F65 
 11692      78745F72 
 11692      65665F66 
 11692      6C616700 
 11693              	.LASF20:
 11694 0974 646F7562 		.ascii	"double\000"
 11694      6C6500
 11695              	.LASF91:
 11696 097b 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 11696      4745545F 
 11696      53445F53 
 11696      494E474C 
 11696      455F4649 
 11697              	.LASF295:
 11698 0992 56545F72 		.ascii	"VT_refNew\000"
 11698      65664E65 
 11698      7700
 11699              	.LASF278:
 11700 099c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11700      52784275 
 11700      66666572 
 11700      00
 11701              	.LASF271:
 11702 09a9 56545F63 		.ascii	"VT_control\000"
 11702      6F6E7472 
 11702      6F6C00
 11703              	.LASF19:
 11704 09b4 666C6F61 		.ascii	"float\000"
 11704      7400
 11705              	.LASF196:
 11706 09ba 6175785F 		.ascii	"aux_int8\000"
 11706      696E7438 
 11706      00
 11707              	.LASF92:
 11708 09c3 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 11708      52454D4F 
 11708      56455F53 
 11708      445F5349 
 11708      4E474C45 
 11709              	.LASF267:
 11710 09dd 6572725F 		.ascii	"err_pressure\000"
 11710      70726573 
 11710      73757265 
 11710      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 263


 11711              	.LASF178:
 11712 09ea 636F756E 		.ascii	"count\000"
 11712      7400
 11713              	.LASF157:
 11714 09f0 73745F61 		.ascii	"st_adc_meas\000"
 11714      64635F6D 
 11714      65617300 
 11715              	.LASF173:
 11716 09fc 6D5F6164 		.ascii	"m_addr\000"
 11716      647200
 11717              	.LASF283:
 11718 0a03 635F6D65 		.ascii	"c_mem\000"
 11718      6D00
 11719              	.LASF214:
 11720 0a09 64617461 		.ascii	"data_array\000"
 11720      5F617272 
 11720      617900
 11721              	.LASF10:
 11722 0a14 756E7369 		.ascii	"unsigned int\000"
 11722      676E6564 
 11722      20696E74 
 11722      00
 11723              	.LASF227:
 11724 0a21 6D656D49 		.ascii	"memInit_Master\000"
 11724      6E69745F 
 11724      4D617374 
 11724      657200
 11725              	.LASF204:
 11726 0a30 70726570 		.ascii	"prepare_SD_legend\000"
 11726      6172655F 
 11726      53445F6C 
 11726      6567656E 
 11726      6400
 11727              	.LASF58:
 11728 0a42 53485F63 		.ascii	"SH_command\000"
 11728      6F6D6D61 
 11728      6E6400
 11729              	.LASF110:
 11730 0a4d 54595045 		.ascii	"TYPE_UINT16\000"
 11730      5F55494E 
 11730      54313600 
 11731              	.LASF142:
 11732 0a59 666C6167 		.ascii	"flag\000"
 11732      00
 11733              	.LASF38:
 11734 0a5e 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 11734      4F4D5F49 
 11734      4E505554 
 11734      5F3200
 11735              	.LASF269:
 11736 0a6d 785F7661 		.ascii	"x_value\000"
 11736      6C756500 
 11737              	.LASF236:
 11738 0a75 636D645F 		.ascii	"cmd_set_inputs\000"
 11738      7365745F 
 11738      696E7075 
 11738      747300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 264


 11739              	.LASF49:
 11740 0a84 4D454E55 		.ascii	"MENU_R_L\000"
 11740      5F525F4C 
 11740      00
 11741              	.LASF171:
 11742 0a8d 4D454E55 		.ascii	"MENU_LIST\000"
 11742      5F4C4953 
 11742      5400
 11743              	.LASF95:
 11744 0a97 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 11744      545F4D4F 
 11744      44455F45 
 11744      4E434F44 
 11744      45523300 
 11745              	.LASF211:
 11746 0aab 636F6D6D 		.ascii	"commWriteID\000"
 11746      57726974 
 11746      65494400 
 11747              	.LASF87:
 11748 0ab7 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 11748      4745545F 
 11748      454E434F 
 11748      4445525F 
 11748      434F4E46 
 11749              	.LASF154:
 11750 0acc 4E554D5F 		.ascii	"NUM_STR\000"
 11750      53545200 
 11751              	.LASF238:
 11752 0ad4 636D645F 		.ascii	"cmd_get_activate\000"
 11752      6765745F 
 11752      61637469 
 11752      76617465 
 11752      00
 11753              	.LASF272:
 11754 0ae5 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 11754      61637469 
 11754      76617469 
 11754      6F6E5F76 
 11754      656C6F63 
 11755              	.LASF113:
 11756 0b01 54595045 		.ascii	"TYPE_FLOAT\000"
 11756      5F464C4F 
 11756      415400
 11757              	.LASF40:
 11758 0b0c 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 11758      4F4D5F50 
 11758      4F535F4C 
 11758      494D5F32 
 11758      00
 11759              	.LASF202:
 11760 0b1d 70726570 		.ascii	"prepare_R01_info\000"
 11760      6172655F 
 11760      5230315F 
 11760      696E666F 
 11760      00
 11761              	.LASF109:
 11762 0b2e 54595045 		.ascii	"TYPE_INT16\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 265


 11762      5F494E54 
 11762      313600
 11763              	.LASF198:
 11764 0b39 6175785F 		.ascii	"aux_uint16\000"
 11764      75696E74 
 11764      313600
 11765              	.LASF128:
 11766 0b44 656D675F 		.ascii	"emg_threshold\000"
 11766      74687265 
 11766      73686F6C 
 11766      6400
 11767              	.LASF79:
 11768 0b52 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 11768      4745545F 
 11768      43555252 
 11768      5F444946 
 11768      4600
 11769              	.LASF42:
 11770 0b64 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 11770      4F4D5F44 
 11770      45565F54 
 11770      59504500 
 11771              	.LASF229:
 11772 0b74 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 11772      6E69745F 
 11772      41697243 
 11772      68616D62 
 11772      6572735F 
 11773              	.LASF23:
 11774 0b98 6C6F6E67 		.ascii	"long double\000"
 11774      20646F75 
 11774      626C6500 
 11775              	.LASF112:
 11776 0ba4 54595045 		.ascii	"TYPE_UINT32\000"
 11776      5F55494E 
 11776      54333200 
 11777              	.LASF135:
 11778 0bb0 73745F46 		.ascii	"st_FB_spec\000"
 11778      425F7370 
 11778      656300
 11779              	.LASF216:
 11780 0bbb 63686563 		.ascii	"checksum\000"
 11780      6B73756D 
 11780      00
 11781              	.LASF303:
 11782 0bc4 73757065 		.ascii	"superstring\000"
 11782      72737472 
 11782      696E6700 
 11783              	.LASF68:
 11784 0bd0 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 11784      48414E44 
 11784      5F43414C 
 11784      49425241 
 11784      544500
 11785              	.LASF293:
 11786 0be3 56545F72 		.ascii	"VT_ref\000"
 11786      656600
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 266


 11787              	.LASF275:
 11788 0bea 64726976 		.ascii	"drive_slave\000"
 11788      655F736C 
 11788      61766500 
 11789              	.LASF102:
 11790 0bf6 61636B6E 		.ascii	"acknowledgment_values\000"
 11790      6F776C65 
 11790      64676D65 
 11790      6E745F76 
 11790      616C7565 
 11791              	.LASF225:
 11792 0c0c 6D656D52 		.ascii	"memRestore\000"
 11792      6573746F 
 11792      726500
 11793              	.LASF192:
 11794 0c17 696E666F 		.ascii	"info_string\000"
 11794      5F737472 
 11794      696E6700 
 11795              	.LASF168:
 11796 0c23 6E756D5F 		.ascii	"num_params\000"
 11796      70617261 
 11796      6D7300
 11797              	.LASF9:
 11798 0c2e 6C6F6E67 		.ascii	"long long unsigned int\000"
 11798      206C6F6E 
 11798      6720756E 
 11798      7369676E 
 11798      65642069 
 11799              	.LASF155:
 11800 0c45 63757374 		.ascii	"custom\000"
 11800      6F6D00
 11801              	.LASF53:
 11802 0c4c 4D454E55 		.ascii	"MENU_USER\000"
 11802      5F555345 
 11802      5200
 11803              	.LASF111:
 11804 0c56 54595045 		.ascii	"TYPE_INT32\000"
 11804      5F494E54 
 11804      333200
 11805              	.LASF193:
 11806 0c61 6175785F 		.ascii	"aux_uint32\000"
 11806      75696E74 
 11806      333200
 11807              	.LASF117:
 11808 0c6c 6C656E67 		.ascii	"length\000"
 11808      746800
 11809              	.LASF172:
 11810 0c73 73656E64 		.ascii	"sendToDevice\000"
 11810      546F4465 
 11810      76696365 
 11810      00
 11811              	.LASF78:
 11812 0c80 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 11812      4745545F 
 11812      41434345 
 11812      4C00
 11813              	.LASF232:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 267


 11814 0c8e 636D645F 		.ascii	"cmd_get_velocities\000"
 11814      6765745F 
 11814      76656C6F 
 11814      63697469 
 11814      657300
 11815              	.LASF224:
 11816 0ca1 6D656D52 		.ascii	"memRecall\000"
 11816      6563616C 
 11816      6C00
 11817              	.LASF252:
 11818 0cab 636D645F 		.ascii	"cmd_store_params\000"
 11818      73746F72 
 11818      655F7061 
 11818      72616D73 
 11818      00
 11819              	.LASF179:
 11820 0cbc 6175785F 		.ascii	"aux_char\000"
 11820      63686172 
 11820      00
 11821              	.LASF83:
 11822 0cc5 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 11822      5345545F 
 11822      42415544 
 11822      52415445 
 11822      00
 11823              	.LASF191:
 11824 0cd6 71626164 		.ascii	"qbadminp_string\000"
 11824      6D696E70 
 11824      5F737472 
 11824      696E6700 
 11825              	.LASF22:
 11826 0ce6 72656738 		.ascii	"reg8\000"
 11826      00
 11827              	.LASF138:
 11828 0ceb 70726F70 		.ascii	"prop_err_fb_gain\000"
 11828      5F657272 
 11828      5F66625F 
 11828      6761696E 
 11828      00
 11829              	.LASF208:
 11830 0cfc 636F6D6D 		.ascii	"commWrite_old_id\000"
 11830      57726974 
 11830      655F6F6C 
 11830      645F6964 
 11830      00
 11831              	.LASF182:
 11832 0d0d 6D616E61 		.ascii	"manage_param_list\000"
 11832      67655F70 
 11832      6172616D 
 11832      5F6C6973 
 11832      7400
 11833              	.LASF195:
 11834 0d1f 6175785F 		.ascii	"aux_uint8\000"
 11834      75696E74 
 11834      3800
 11835              	.LASF63:
 11836 0d29 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 268


 11836      52455354 
 11836      4F52455F 
 11836      50415241 
 11836      4D5300
 11837              	.LASF51:
 11838 0d3c 4D454E55 		.ascii	"MENU_EXP\000"
 11838      5F455850 
 11838      00
 11839              	.LASF288:
 11840 0d45 73644669 		.ascii	"sdFile\000"
 11840      6C6500
 11841              	.LASF169:
 11842 0d4c 6E756D5F 		.ascii	"num_menus\000"
 11842      6D656E75 
 11842      7300
 11843              	.LASF45:
 11844 0d56 4D454E55 		.ascii	"MENU_NO_MENU\000"
 11844      5F4E4F5F 
 11844      4D454E55 
 11844      00
 11845              	.LASF203:
 11846 0d63 70726570 		.ascii	"prepare_SD_param_info\000"
 11846      6172655F 
 11846      53445F70 
 11846      6172616D 
 11846      5F696E66 
 11847              	.LASF201:
 11848 0d79 70726570 		.ascii	"prepare_counter_info\000"
 11848      6172655F 
 11848      636F756E 
 11848      7465725F 
 11848      696E666F 
 11849              	.LASF205:
 11850 0d8e 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 11850      6172655F 
 11850      53445F45 
 11850      4D475F48 
 11850      6973746F 
 11851              	.LASF209:
 11852 0dac 6F6C645F 		.ascii	"old_id\000"
 11852      696400
 11853              	.LASF308:
 11854 0db3 5F5F5245 		.ascii	"__REV16\000"
 11854      56313600 
 11855              	.LASF149:
 11856 0dbb 5641525F 		.ascii	"VAR_P\000"
 11856      5000
 11857              	.LASF302:
 11858 0dc1 42617474 		.ascii	"Battery_level_out\000"
 11858      6572795F 
 11858      6C657665 
 11858      6C5F6F75 
 11858      7400
 11859              	.LASF239:
 11860 0dd3 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 11860      6765745F 
 11860      63757272 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 269


 11860      5F616E64 
 11860      5F6D6561 
 11861              	.LASF165:
 11862 0de9 696E666F 		.ascii	"info_type\000"
 11862      5F747970 
 11862      6500
 11863              	.LASF56:
 11864 0df3 4D454E55 		.ascii	"MENU_FSM\000"
 11864      5F46534D 
 11864      00
 11865              	.LASF90:
 11866 0dfc 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 11866      4745545F 
 11866      4144435F 
 11866      52415700 
 11867              	.LASF101:
 11868 0e0c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 11868      545F4D4F 
 11868      44455F45 
 11868      4D475F50 
 11868      524F504F 
 11869              	.LASF86:
 11870 0e2b 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 11870      4745545F 
 11870      494D555F 
 11870      50415241 
 11870      4D00
 11871              	.LASF88:
 11872 0e3d 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 11872      4745545F 
 11872      454E434F 
 11872      4445525F 
 11872      52415700 
 11873              	.LASF146:
 11874 0e51 72657365 		.ascii	"reset\000"
 11874      7400
 11875              	.LASF145:
 11876 0e57 6E616D65 		.ascii	"name\000"
 11876      00
 11877              	.LASF73:
 11878 0e5c 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 11878      4745545F 
 11878      4D454153 
 11878      5552454D 
 11878      454E5453 
 11879              	.LASF140:
 11880 0e71 61697263 		.ascii	"airchamber_feedback_active\000"
 11880      68616D62 
 11880      65725F66 
 11880      65656462 
 11880      61636B5F 
 11881              	.LASF280:
 11882 0e8c 675F6164 		.ascii	"g_adc_measOld\000"
 11882      635F6D65 
 11882      61734F6C 
 11882      6400
 11883              	.LASF256:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 270


 11884 0e9a 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 11884      6765745F 
 11884      656E636F 
 11884      6465725F 
 11884      72617700 
 11885              	.LASF13:
 11886 0eae 75696E74 		.ascii	"uint8\000"
 11886      3800
 11887              	.LASF159:
 11888 0eb4 636F6D6D 		.ascii	"commProcess\000"
 11888      50726F63 
 11888      65737300 
 11889              	.LASF2:
 11890 0ec0 73686F72 		.ascii	"short int\000"
 11890      7420696E 
 11890      7400
 11891              	.LASF31:
 11892 0eca 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 11892      4F4D5F52 
 11892      4553545F 
 11892      504F535F 
 11892      44454C41 
 11893              	.LASF72:
 11894 0ee0 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 11894      4745545F 
 11894      494E5055 
 11894      545300
 11895              	.LASF89:
 11896 0eef 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 11896      4745545F 
 11896      4144435F 
 11896      434F4E46 
 11896      00
 11897              	.LASF60:
 11898 0f00 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 11898      5345545F 
 11898      5A45524F 
 11898      5300
 11899              	.LASF197:
 11900 0f0e 6175785F 		.ascii	"aux_int16\000"
 11900      696E7431 
 11900      3600
 11901              	.LASF304:
 11902 0f18 45455052 		.ascii	"EEPROM_ADDR\000"
 11902      4F4D5F41 
 11902      44445200 
 11903              	.LASF284:
 11904 0f24 6379636C 		.ascii	"cycle_time\000"
 11904      655F7469 
 11904      6D6500
 11905              	.LASF26:
 11906 0f2f 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 11906      4F4D5F43 
 11906      5552525F 
 11906      50494400 
 11907              	.LASF188:
 11908 0f3f 4E554D5F 		.ascii	"NUM_PARAMs\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 271


 11908      50415241 
 11908      4D7300
 11909              	.LASF77:
 11910 0f4a 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 11910      4745545F 
 11910      56454C4F 
 11910      43495449 
 11910      455300
 11911              	.LASF67:
 11912 0f5d 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 11912      4745545F 
 11912      50415241 
 11912      4D5F4C49 
 11912      535400
 11913              	.LASF105:
 11914 0f70 64617461 		.ascii	"data_types\000"
 11914      5F747970 
 11914      657300
 11915              	.LASF17:
 11916 0f7b 696E7431 		.ascii	"int16\000"
 11916      3600
 11917              	.LASF50:
 11918 0f81 4D454E55 		.ascii	"MENU_ON_OFF\000"
 11918      5F4F4E5F 
 11918      4F464600 
 11919              	.LASF35:
 11920 0f8d 43555354 		.ascii	"CUSTOM_DRIVER\000"
 11920      4F4D5F44 
 11920      52495645 
 11920      5200
 11921              	.LASF28:
 11922 0f9b 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 11922      4F4D5F4D 
 11922      4541535F 
 11922      4F464600 
 11923              	.LASF255:
 11924 0fab 636D645F 		.ascii	"cmd_get_encoder_map\000"
 11924      6765745F 
 11924      656E636F 
 11924      6465725F 
 11924      6D617000 
 11925              	.LASF12:
 11926 0fbf 75696E74 		.ascii	"uint32_t\000"
 11926      33325F74 
 11926      00
 11927              	.LASF194:
 11928 0fc8 6175785F 		.ascii	"aux_float\000"
 11928      666C6F61 
 11928      7400
 11929              	.LASF170:
 11930 0fd2 50415241 		.ascii	"PARAM_LIST\000"
 11930      4D5F4C49 
 11930      535400
 11931              	.LASF217:
 11932 0fdd 73656E64 		.ascii	"sendAcknowledgment\000"
 11932      41636B6E 
 11932      6F776C65 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 272


 11932      64676D65 
 11932      6E7400
 11933              	.LASF177:
 11934 0ff0 6175785F 		.ascii	"aux_int32\000"
 11934      696E7433 
 11934      3200
 11935              	.LASF121:
 11936 0ffa 62617564 		.ascii	"baud_rate\000"
 11936      5F726174 
 11936      6500
 11937              	.LASF245:
 11938 1004 745F656E 		.ascii	"t_end\000"
 11938      6400
 11939              	.LASF241:
 11940 100a 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 11940      6765745F 
 11940      63757272 
 11940      656E7473 
 11940      5F666F72 
 11941              	.LASF85:
 11942 1024 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 11942      4745545F 
 11942      494D555F 
 11942      52454144 
 11942      494E4753 
 11943              	.LASF187:
 11944 1039 70617261 		.ascii	"param_type\000"
 11944      6D5F7479 
 11944      706500
 11945              	.LASF290:
 11946 1044 73645230 		.ascii	"sdR01File\000"
 11946      3146696C 
 11946      6500
 11947              	.LASF213:
 11948 104e 4C435243 		.ascii	"LCRChecksum\000"
 11948      6865636B 
 11948      73756D00 
 11949              	.LASF3:
 11950 105a 73686F72 		.ascii	"short unsigned int\000"
 11950      7420756E 
 11950      7369676E 
 11950      65642069 
 11950      6E7400
 11951              	.LASF282:
 11952 106d 675F6D65 		.ascii	"g_mem\000"
 11952      6D00
 11953              	.LASF279:
 11954 1073 675F6164 		.ascii	"g_adc_meas\000"
 11954      635F6D65 
 11954      617300
 11955              	.LASF136:
 11956 107e 6D61785F 		.ascii	"max_residual_current\000"
 11956      72657369 
 11956      6475616C 
 11956      5F637572 
 11956      72656E74 
 11957              	.LASF141:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 273


 11958 1093 73745F65 		.ascii	"st_eeprom\000"
 11958      6570726F 
 11958      6D00
 11959              	.LASF150:
 11960 109d 54595045 		.ascii	"TYPES\000"
 11960      5300
 11961              	.LASF18:
 11962 10a3 696E7433 		.ascii	"int32\000"
 11962      3200
 11963              	.LASF163:
 11964 10a9 696E666F 		.ascii	"infoGet\000"
 11964      47657400 
 11965              	.LASF291:
 11966 10b1 6D617374 		.ascii	"master_mode\000"
 11966      65725F6D 
 11966      6F646500 
 11967              	.LASF5:
 11968 10bd 5F5F696E 		.ascii	"__int32_t\000"
 11968      7433325F 
 11968      7400
 11969              	.LASF294:
 11970 10c7 56545F72 		.ascii	"VT_refOld\000"
 11970      65664F6C 
 11970      6400
 11971              	.LASF129:
 11972 10d1 656D675F 		.ascii	"emg_max_value\000"
 11972      6D61785F 
 11972      76616C75 
 11972      6500
 11973              	.LASF247:
 11974 10df 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 11974      52656164 
 11974      494D5546 
 11974      726F6D53 
 11974      4800
 11975              	.LASF306:
 11976 10f1 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 11976      72635C63 
 11976      6F6D6D61 
 11976      6E645F70 
 11976      726F6365 
 11977              	.LASF93:
 11978 110d 53485F69 		.ascii	"SH_input_mode\000"
 11978      6E707574 
 11978      5F6D6F64 
 11978      6500
 11979              	.LASF25:
 11980 111b 43555354 		.ascii	"CUSTOM_POS_PID\000"
 11980      4F4D5F50 
 11980      4F535F50 
 11980      494400
 11981              	.LASF107:
 11982 112a 54595045 		.ascii	"TYPE_INT8\000"
 11982      5F494E54 
 11982      3800
 11983              	.LASF207:
 11984 1134 494D555F 		.ascii	"IMU_reading_info\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccmZMGOK.s 			page 274


 11984      72656164 
 11984      696E675F 
 11984      696E666F 
 11984      00
 11985              	.LASF14:
 11986 1145 75696E74 		.ascii	"uint16\000"
 11986      313600
 11987              	.LASF296:
 11988 114c 50756D70 		.ascii	"Pump_ref\000"
 11988      5F726566 
 11988      00
 11989              	.LASF175:
 11990 1155 6175785F 		.ascii	"aux_str\000"
 11990      73747200 
 11991              	.LASF59:
 11992 115d 434D445F 		.ascii	"CMD_PING\000"
 11992      50494E47 
 11992      00
 11993              	.LASF237:
 11994 1166 636D645F 		.ascii	"cmd_activate\000"
 11994      61637469 
 11994      76617465 
 11994      00
 11995              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
