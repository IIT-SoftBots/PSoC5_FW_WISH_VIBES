ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L54
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L54
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L54
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L54
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L54
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L54
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e 07E3     		b	.L1
  75              	.L55:
  76              		.align	2
  77              	.L54:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F20083 		bhi	.L53
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c 4F060000 		.word	.L53+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 4F060000 		.word	.L53+1
  96 0074 4F060000 		.word	.L53+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 4F060000 		.word	.L53+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 4B050000 		.word	.L15+1
 102 008c 4F060000 		.word	.L53+1
 103 0090 4F060000 		.word	.L53+1
 104 0094 4F060000 		.word	.L53+1
 105 0098 4F060000 		.word	.L53+1
 106 009c 4F060000 		.word	.L53+1
 107 00a0 4F060000 		.word	.L53+1
 108 00a4 4F060000 		.word	.L53+1
 109 00a8 4F060000 		.word	.L53+1
 110 00ac 4F060000 		.word	.L53+1
 111 00b0 4F060000 		.word	.L53+1
 112 00b4 4F060000 		.word	.L53+1
 113 00b8 4F060000 		.word	.L53+1
 114 00bc 4F060000 		.word	.L53+1
 115 00c0 4F060000 		.word	.L53+1
 116 00c4 4F060000 		.word	.L53+1
 117 00c8 4F060000 		.word	.L53+1
 118 00cc 4F060000 		.word	.L53+1
 119 00d0 4F060000 		.word	.L53+1
 120 00d4 4F060000 		.word	.L53+1
 121 00d8 4F060000 		.word	.L53+1
 122 00dc 4F060000 		.word	.L53+1
 123 00e0 4F060000 		.word	.L53+1
 124 00e4 4F060000 		.word	.L53+1
 125 00e8 4F060000 		.word	.L53+1
 126 00ec 4F060000 		.word	.L53+1
 127 00f0 4F060000 		.word	.L53+1
 128 00f4 4F060000 		.word	.L53+1
 129 00f8 4F060000 		.word	.L53+1
 130 00fc 4F060000 		.word	.L53+1
 131 0100 4F060000 		.word	.L53+1
 132 0104 4F060000 		.word	.L53+1
 133 0108 4F060000 		.word	.L53+1
 134 010c 4F060000 		.word	.L53+1
 135 0110 4F060000 		.word	.L53+1
 136 0114 4F060000 		.word	.L53+1
 137 0118 4F060000 		.word	.L53+1
 138 011c 4F060000 		.word	.L53+1
 139 0120 4F060000 		.word	.L53+1
 140 0124 4F060000 		.word	.L53+1
 141 0128 4F060000 		.word	.L53+1
 142 012c 4F060000 		.word	.L53+1
 143 0130 4F060000 		.word	.L53+1
 144 0134 4F060000 		.word	.L53+1
 145 0138 4F060000 		.word	.L53+1
 146 013c 4F060000 		.word	.L53+1
 147 0140 4F060000 		.word	.L53+1
 148 0144 4F060000 		.word	.L53+1
 149 0148 4F060000 		.word	.L53+1
 150 014c 4F060000 		.word	.L53+1
 151 0150 4F060000 		.word	.L53+1
 152 0154 4F060000 		.word	.L53+1
 153 0158 4F060000 		.word	.L53+1
 154 015c 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 5


 155 0160 4F060000 		.word	.L53+1
 156 0164 4F060000 		.word	.L53+1
 157 0168 4F060000 		.word	.L53+1
 158 016c 4F060000 		.word	.L53+1
 159 0170 4F060000 		.word	.L53+1
 160 0174 4F060000 		.word	.L53+1
 161 0178 4F060000 		.word	.L53+1
 162 017c 4F060000 		.word	.L53+1
 163 0180 4F060000 		.word	.L53+1
 164 0184 4F060000 		.word	.L53+1
 165 0188 4F060000 		.word	.L53+1
 166 018c 4F060000 		.word	.L53+1
 167 0190 4F060000 		.word	.L53+1
 168 0194 4F060000 		.word	.L53+1
 169 0198 4F060000 		.word	.L53+1
 170 019c 4F060000 		.word	.L53+1
 171 01a0 4F060000 		.word	.L53+1
 172 01a4 4F060000 		.word	.L53+1
 173 01a8 4F060000 		.word	.L53+1
 174 01ac 4F060000 		.word	.L53+1
 175 01b0 4F060000 		.word	.L53+1
 176 01b4 4F060000 		.word	.L53+1
 177 01b8 4F060000 		.word	.L53+1
 178 01bc 4F060000 		.word	.L53+1
 179 01c0 4F060000 		.word	.L53+1
 180 01c4 4F060000 		.word	.L53+1
 181 01c8 4F060000 		.word	.L53+1
 182 01cc 4F060000 		.word	.L53+1
 183 01d0 4F060000 		.word	.L53+1
 184 01d4 4F060000 		.word	.L53+1
 185 01d8 4F060000 		.word	.L53+1
 186 01dc 4F060000 		.word	.L53+1
 187 01e0 4F060000 		.word	.L53+1
 188 01e4 4F060000 		.word	.L53+1
 189 01e8 4F060000 		.word	.L53+1
 190 01ec 4F060000 		.word	.L53+1
 191 01f0 4F060000 		.word	.L53+1
 192 01f4 4F060000 		.word	.L53+1
 193 01f8 4F060000 		.word	.L53+1
 194 01fc 4F060000 		.word	.L53+1
 195 0200 4F060000 		.word	.L53+1
 196 0204 4F060000 		.word	.L53+1
 197 0208 4F060000 		.word	.L53+1
 198 020c 4F060000 		.word	.L53+1
 199 0210 4F060000 		.word	.L53+1
 200 0214 4F060000 		.word	.L53+1
 201 0218 4F060000 		.word	.L53+1
 202 021c 4F060000 		.word	.L53+1
 203 0220 4F060000 		.word	.L53+1
 204 0224 4F060000 		.word	.L53+1
 205 0228 4F060000 		.word	.L53+1
 206 022c 4F060000 		.word	.L53+1
 207 0230 4F060000 		.word	.L53+1
 208 0234 4F060000 		.word	.L53+1
 209 0238 4F060000 		.word	.L53+1
 210 023c 4F060000 		.word	.L53+1
 211 0240 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 6


 212 0244 4F060000 		.word	.L53+1
 213 0248 4F060000 		.word	.L53+1
 214 024c 4F060000 		.word	.L53+1
 215 0250 4F060000 		.word	.L53+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 4F060000 		.word	.L53+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c 4F060000 		.word	.L53+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 4F060000 		.word	.L53+1
 230 028c 4F060000 		.word	.L53+1
 231 0290 4F060000 		.word	.L53+1
 232 0294 89040000 		.word	.L27+1
 233 0298 4F060000 		.word	.L53+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 4F060000 		.word	.L53+1
 236 02a4 4F060000 		.word	.L53+1
 237 02a8 4F060000 		.word	.L53+1
 238 02ac 4F060000 		.word	.L53+1
 239 02b0 4F060000 		.word	.L53+1
 240 02b4 4F060000 		.word	.L53+1
 241 02b8 4F060000 		.word	.L53+1
 242 02bc 4F060000 		.word	.L53+1
 243 02c0 4F060000 		.word	.L53+1
 244 02c4 4F060000 		.word	.L53+1
 245 02c8 4F060000 		.word	.L53+1
 246 02cc 4F060000 		.word	.L53+1
 247 02d0 4F060000 		.word	.L53+1
 248 02d4 4F060000 		.word	.L53+1
 249 02d8 E9050000 		.word	.L29+1
 250 02dc EF050000 		.word	.L30+1
 251 02e0 07060000 		.word	.L31+1
 252 02e4 0D060000 		.word	.L32+1
 253 02e8 13060000 		.word	.L33+1
 254 02ec 19060000 		.word	.L34+1
 255 02f0 1F060000 		.word	.L35+1
 256 02f4 37060000 		.word	.L36+1
 257 02f8 4F060000 		.word	.L53+1
 258 02fc 4F060000 		.word	.L53+1
 259 0300 4F060000 		.word	.L53+1
 260 0304 4F060000 		.word	.L53+1
 261 0308 4F060000 		.word	.L53+1
 262 030c 4F060000 		.word	.L53+1
 263 0310 4F060000 		.word	.L53+1
 264 0314 4F060000 		.word	.L53+1
 265 0318 4F060000 		.word	.L53+1
 266 031c 4F060000 		.word	.L53+1
 267 0320 4F060000 		.word	.L53+1
 268 0324 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 7


 269 0328 4F060000 		.word	.L53+1
 270 032c 4F060000 		.word	.L53+1
 271 0330 4F060000 		.word	.L53+1
 272 0334 4F060000 		.word	.L53+1
 273 0338 4F060000 		.word	.L53+1
 274 033c 4F060000 		.word	.L53+1
 275 0340 4F060000 		.word	.L53+1
 276 0344 4F060000 		.word	.L53+1
 277 0348 4F060000 		.word	.L53+1
 278 034c 4F060000 		.word	.L53+1
 279 0350 4F060000 		.word	.L53+1
 280 0354 4F060000 		.word	.L53+1
 281 0358 4F060000 		.word	.L53+1
 282 035c 4F060000 		.word	.L53+1
 283 0360 4F060000 		.word	.L53+1
 284 0364 4F060000 		.word	.L53+1
 285 0368 4F060000 		.word	.L53+1
 286 036c 4F060000 		.word	.L53+1
 287 0370 4F060000 		.word	.L53+1
 288 0374 4F060000 		.word	.L53+1
 289 0378 4F060000 		.word	.L53+1
 290 037c 4F060000 		.word	.L53+1
 291 0380 4F060000 		.word	.L53+1
 292 0384 4F060000 		.word	.L53+1
 293 0388 4F060000 		.word	.L53+1
 294 038c 4F060000 		.word	.L53+1
 295 0390 4F060000 		.word	.L53+1
 296 0394 4F060000 		.word	.L53+1
 297 0398 4F060000 		.word	.L53+1
 298 039c 4F060000 		.word	.L53+1
 299 03a0 4F060000 		.word	.L53+1
 300 03a4 4F060000 		.word	.L53+1
 301 03a8 4F060000 		.word	.L53+1
 302 03ac 4F060000 		.word	.L53+1
 303 03b0 4F060000 		.word	.L53+1
 304 03b4 4F060000 		.word	.L53+1
 305 03b8 4F060000 		.word	.L53+1
 306 03bc 4F060000 		.word	.L53+1
 307 03c0 4F060000 		.word	.L53+1
 308 03c4 4F060000 		.word	.L53+1
 309 03c8 4F060000 		.word	.L53+1
 310 03cc 4F060000 		.word	.L53+1
 311 03d0 4F060000 		.word	.L53+1
 312 03d4 4F060000 		.word	.L53+1
 313 03d8 4F060000 		.word	.L53+1
 314 03dc 4F060000 		.word	.L53+1
 315 03e0 4F060000 		.word	.L53+1
 316 03e4 4F060000 		.word	.L53+1
 317 03e8 4F060000 		.word	.L53+1
 318 03ec 4F060000 		.word	.L53+1
 319 03f0 4F060000 		.word	.L53+1
 320 03f4 4F060000 		.word	.L53+1
 321 03f8 4F060000 		.word	.L53+1
 322 03fc 4F060000 		.word	.L53+1
 323 0400 4F060000 		.word	.L53+1
 324 0404 4F060000 		.word	.L53+1
 325 0408 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 8


 326 040c 4F060000 		.word	.L53+1
 327 0410 4F060000 		.word	.L53+1
 328 0414 4F060000 		.word	.L53+1
 329 0418 4F060000 		.word	.L53+1
 330 041c 4F060000 		.word	.L53+1
 331 0420 4F060000 		.word	.L53+1
 332 0424 4F060000 		.word	.L53+1
 333 0428 4F060000 		.word	.L53+1
 334 042c 4F060000 		.word	.L53+1
 335 0430 4F060000 		.word	.L53+1
 336 0434 4F060000 		.word	.L53+1
 337 0438 4F060000 		.word	.L53+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 04E1     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a 01E1     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 FEE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 FBE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c F8E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 F5E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 F2E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e EFE0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 ECE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a E9E0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 E6E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 E3E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c E0E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 DDE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 704B     		ldr	r3, .L56
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa D1E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 CEE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),1 );
 443              		.loc 1 174 0
 444 04b2 694B     		ldr	r3, .L56
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca C1E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 BEE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 BBE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea B1E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 ADE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 A4E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c A0E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 97E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 28


 529              		.loc 1 214 0
 530 0526 93E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 82E0     		b	.L1
 548              	.L15:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:
 230:..\src/command_processing.c ****             calib.speed = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 549              		.loc 1 230 0
 550 054a 444B     		ldr	r3, .L56+4
 551 054c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 552 054e 1B02     		lsls	r3, r3, #8
 553 0550 1AB2     		sxth	r2, r3
 554 0552 424B     		ldr	r3, .L56+4
 555 0554 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 556 0556 1BB2     		sxth	r3, r3
 557 0558 1343     		orrs	r3, r3, r2
 558 055a 1AB2     		sxth	r2, r3
 559 055c 404B     		ldr	r3, .L56+8
 560 055e 5A80     		strh	r2, [r3, #2]	@ movhi
 231:..\src/command_processing.c ****             calib.repetitions = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 561              		.loc 1 231 0
 562 0560 3E4B     		ldr	r3, .L56+4
 563 0562 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 564 0564 1B02     		lsls	r3, r3, #8
 565 0566 1AB2     		sxth	r2, r3
 566 0568 3C4B     		ldr	r3, .L56+4
 567 056a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 568 056c 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 29


 569 056e 1343     		orrs	r3, r3, r2
 570 0570 1AB2     		sxth	r2, r3
 571 0572 3B4B     		ldr	r3, .L56+8
 572 0574 9A80     		strh	r2, [r3, #4]	@ movhi
 232:..\src/command_processing.c ****             
 233:..\src/command_processing.c ****             if(calib.speed == -1 && calib.repetitions == -1) {
 573              		.loc 1 233 0
 574 0576 3A4B     		ldr	r3, .L56+8
 575 0578 B3F90230 		ldrsh	r3, [r3, #2]
 576 057c B3F1FF3F 		cmp	r3, #-1
 577 0580 0FD1     		bne	.L46
 578              		.loc 1 233 0 is_stmt 0 discriminator 1
 579 0582 374B     		ldr	r3, .L56+8
 580 0584 B3F90430 		ldrsh	r3, [r3, #4]
 581 0588 B3F1FF3F 		cmp	r3, #-1
 582 058c 09D1     		bne	.L46
 234:..\src/command_processing.c ****                 calib.enabled = FALSE;
 583              		.loc 1 234 0 is_stmt 1
 584 058e 344B     		ldr	r3, .L56+8
 585 0590 0022     		movs	r2, #0
 586 0592 1A70     		strb	r2, [r3]
 235:..\src/command_processing.c ****                 calib.speed = 0;
 587              		.loc 1 235 0
 588 0594 324B     		ldr	r3, .L56+8
 589 0596 0022     		movs	r2, #0
 590 0598 5A80     		strh	r2, [r3, #2]	@ movhi
 236:..\src/command_processing.c ****                 calib.repetitions = 0;
 591              		.loc 1 236 0
 592 059a 314B     		ldr	r3, .L56+8
 593 059c 0022     		movs	r2, #0
 594 059e 9A80     		strh	r2, [r3, #4]	@ movhi
 237:..\src/command_processing.c ****                 break;
 595              		.loc 1 237 0
 596 05a0 56E0     		b	.L1
 597              	.L46:
 238:..\src/command_processing.c ****             }
 239:..\src/command_processing.c ****             // Speed & repetitions saturations
 240:..\src/command_processing.c ****             if (calib.speed < 0) {
 598              		.loc 1 240 0
 599 05a2 2F4B     		ldr	r3, .L56+8
 600 05a4 B3F90230 		ldrsh	r3, [r3, #2]
 601 05a8 002B     		cmp	r3, #0
 602 05aa 03DA     		bge	.L47
 241:..\src/command_processing.c ****                 calib.speed = 0;
 603              		.loc 1 241 0
 604 05ac 2C4B     		ldr	r3, .L56+8
 605 05ae 0022     		movs	r2, #0
 606 05b0 5A80     		strh	r2, [r3, #2]	@ movhi
 607 05b2 07E0     		b	.L48
 608              	.L47:
 242:..\src/command_processing.c ****             } else if (calib.speed > 200) {
 609              		.loc 1 242 0
 610 05b4 2A4B     		ldr	r3, .L56+8
 611 05b6 B3F90230 		ldrsh	r3, [r3, #2]
 612 05ba C82B     		cmp	r3, #200
 613 05bc 02DD     		ble	.L48
 243:..\src/command_processing.c ****                 calib.speed = 200;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 30


 614              		.loc 1 243 0
 615 05be 284B     		ldr	r3, .L56+8
 616 05c0 C822     		movs	r2, #200
 617 05c2 5A80     		strh	r2, [r3, #2]	@ movhi
 618              	.L48:
 244:..\src/command_processing.c ****             }
 245:..\src/command_processing.c ****             if (calib.repetitions < 0) {
 619              		.loc 1 245 0
 620 05c4 264B     		ldr	r3, .L56+8
 621 05c6 B3F90430 		ldrsh	r3, [r3, #4]
 622 05ca 002B     		cmp	r3, #0
 623 05cc 02DA     		bge	.L49
 246:..\src/command_processing.c ****                 calib.repetitions = 0;
 624              		.loc 1 246 0
 625 05ce 244B     		ldr	r3, .L56+8
 626 05d0 0022     		movs	r2, #0
 627 05d2 9A80     		strh	r2, [r3, #4]	@ movhi
 628              	.L49:
 247:..\src/command_processing.c ****             } else if (calib.repetitions > 32767) {
 248:..\src/command_processing.c ****                 calib.repetitions = 32767;
 249:..\src/command_processing.c ****             }
 250:..\src/command_processing.c ****             
 251:..\src/command_processing.c ****             g_refNew[0].pos = 0;                    // SoftHand is on motor 1
 629              		.loc 1 251 0
 630 05d4 234B     		ldr	r3, .L56+12
 631 05d6 0022     		movs	r2, #0
 632 05d8 1A60     		str	r2, [r3]
 252:..\src/command_processing.c ****             calib.enabled = TRUE;
 633              		.loc 1 252 0
 634 05da 214B     		ldr	r3, .L56+8
 635 05dc 0122     		movs	r2, #1
 636 05de 1A70     		strb	r2, [r3]
 253:..\src/command_processing.c ****          
 254:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 637              		.loc 1 254 0
 638 05e0 0120     		movs	r0, #1
 639 05e2 FFF7FEFF 		bl	sendAcknowledgment
 255:..\src/command_processing.c ****             break;
 640              		.loc 1 255 0
 641 05e6 33E0     		b	.L1
 642              	.L29:
 256:..\src/command_processing.c ****             
 257:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 258:..\src/command_processing.c **** 
 259:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 260:..\src/command_processing.c ****             cmd_get_imu_readings();
 643              		.loc 1 260 0
 644 05e8 FFF7FEFF 		bl	cmd_get_imu_readings
 261:..\src/command_processing.c ****             break; 
 645              		.loc 1 261 0
 646 05ec 30E0     		b	.L1
 647              	.L30:
 262:..\src/command_processing.c ****             
 263:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 264:..\src/command_processing.c **** 
 265:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 266:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 31


 648              		.loc 1 266 0
 649 05ee 1A4B     		ldr	r3, .L56
 650 05f0 1B88     		ldrh	r3, [r3]
 651 05f2 7B62     		str	r3, [r7, #36]
 652              	.LBB16:
 653              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 654              		.loc 2 792 0
 655 05f4 7B6A     		ldr	r3, [r7, #36]
 656              		.syntax unified
 657              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 658 05f6 5BBA     		rev16 r3, r3
 659              	@ 0 "" 2
 660              		.thumb
 661              		.syntax unified
 662 05f8 FB60     		str	r3, [r7, #12]
 663              		.loc 2 793 0
 664 05fa FB68     		ldr	r3, [r7, #12]
 665              	.LBE17:
 666              	.LBE16:
 667              		.loc 1 266 0
 668 05fc 9BB2     		uxth	r3, r3
 669 05fe 1846     		mov	r0, r3
 670 0600 FFF7FEFF 		bl	get_IMU_param_list
 267:..\src/command_processing.c ****             break;             
 671              		.loc 1 267 0
 672 0604 24E0     		b	.L1
 673              	.L31:
 268:..\src/command_processing.c ****             
 269:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 270:..\src/command_processing.c **** 
 271:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 272:..\src/command_processing.c ****             cmd_get_encoder_map();
 674              		.loc 1 272 0
 675 0606 FFF7FEFF 		bl	cmd_get_encoder_map
 273:..\src/command_processing.c ****             break; 
 676              		.loc 1 273 0
 677 060a 21E0     		b	.L1
 678              	.L32:
 274:..\src/command_processing.c **** 
 275:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 276:..\src/command_processing.c **** 
 277:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 278:..\src/command_processing.c ****             cmd_get_encoder_raw();
 679              		.loc 1 278 0
 680 060c FFF7FEFF 		bl	cmd_get_encoder_raw
 279:..\src/command_processing.c ****             break; 
 681              		.loc 1 279 0
 682 0610 1EE0     		b	.L1
 683              	.L33:
 280:..\src/command_processing.c **** 
 281:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 282:..\src/command_processing.c **** 
 283:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 284:..\src/command_processing.c ****             cmd_get_ADC_map();
 684              		.loc 1 284 0
 685 0612 FFF7FEFF 		bl	cmd_get_ADC_map
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 32


 285:..\src/command_processing.c ****             break; 
 686              		.loc 1 285 0
 687 0616 1BE0     		b	.L1
 688              	.L34:
 286:..\src/command_processing.c ****             
 287:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 288:..\src/command_processing.c **** 
 289:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 290:..\src/command_processing.c ****             cmd_get_ADC_raw();
 689              		.loc 1 290 0
 690 0618 FFF7FEFF 		bl	cmd_get_ADC_raw
 291:..\src/command_processing.c ****             break; 
 691              		.loc 1 291 0
 692 061c 18E0     		b	.L1
 693              	.L35:
 292:..\src/command_processing.c ****             
 293:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 294:..\src/command_processing.c **** 
 295:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 296:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 694              		.loc 1 296 0
 695 061e 0E4B     		ldr	r3, .L56
 696 0620 1B88     		ldrh	r3, [r3]
 697 0622 3B62     		str	r3, [r7, #32]
 698              	.LBB18:
 699              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 700              		.loc 2 792 0
 701 0624 3B6A     		ldr	r3, [r7, #32]
 702              		.syntax unified
 703              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 704 0626 5BBA     		rev16 r3, r3
 705              	@ 0 "" 2
 706              		.thumb
 707              		.syntax unified
 708 0628 BB60     		str	r3, [r7, #8]
 709              		.loc 2 793 0
 710 062a BB68     		ldr	r3, [r7, #8]
 711              	.LBE19:
 712              	.LBE18:
 713              		.loc 1 296 0
 714 062c 9BB2     		uxth	r3, r3
 715 062e 1846     		mov	r0, r3
 716 0630 FFF7FEFF 		bl	cmd_get_SD_file
 297:..\src/command_processing.c ****             break;   
 717              		.loc 1 297 0
 718 0634 0CE0     		b	.L1
 719              	.L36:
 298:..\src/command_processing.c ****             
 299:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 300:..\src/command_processing.c **** 
 301:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 302:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 720              		.loc 1 302 0
 721 0636 084B     		ldr	r3, .L56
 722 0638 1B88     		ldrh	r3, [r3]
 723 063a FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 33


 724              	.LBB20:
 725              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 726              		.loc 2 792 0
 727 063c FB69     		ldr	r3, [r7, #28]
 728              		.syntax unified
 729              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 730 063e 5BBA     		rev16 r3, r3
 731              	@ 0 "" 2
 732              		.thumb
 733              		.syntax unified
 734 0640 7B60     		str	r3, [r7, #4]
 735              		.loc 2 793 0
 736 0642 7B68     		ldr	r3, [r7, #4]
 737              	.LBE21:
 738              	.LBE20:
 739              		.loc 1 302 0
 740 0644 9BB2     		uxth	r3, r3
 741 0646 1846     		mov	r0, r3
 742 0648 FFF7FEFF 		bl	cmd_remove_SD_file
 303:..\src/command_processing.c ****             break;               
 743              		.loc 1 303 0
 744 064c 00E0     		b	.L1
 745              	.L53:
 304:..\src/command_processing.c ****             
 305:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 306:..\src/command_processing.c ****         default:
 307:..\src/command_processing.c ****             break;
 746              		.loc 1 307 0
 747 064e 00BF     		nop
 748              	.L1:
 308:..\src/command_processing.c **** 
 309:..\src/command_processing.c ****     }
 310:..\src/command_processing.c **** }  
 749              		.loc 1 310 0
 750 0650 3037     		adds	r7, r7, #48
 751              		.cfi_def_cfa_offset 8
 752 0652 BD46     		mov	sp, r7
 753              		.cfi_def_cfa_register 13
 754              		@ sp needed
 755 0654 80BD     		pop	{r7, pc}
 756              	.L57:
 757 0656 00BF     		.align	2
 758              	.L56:
 759 0658 01000000 		.word	g_rx+1
 760 065c 00000000 		.word	g_rx
 761 0660 00000000 		.word	calib
 762 0664 00000000 		.word	g_refNew
 763              		.cfi_endproc
 764              	.LFE64:
 765              		.size	commProcess, .-commProcess
 766              		.section	.text.infoSend,"ax",%progbits
 767              		.align	2
 768              		.global	infoSend
 769              		.thumb
 770              		.thumb_func
 771              		.type	infoSend, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 34


 772              	infoSend:
 773              	.LFB65:
 311:..\src/command_processing.c **** 
 312:..\src/command_processing.c **** //==============================================================================
 313:..\src/command_processing.c **** //                                                                     INFO SEND
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** 
 316:..\src/command_processing.c **** void infoSend(void){
 774              		.loc 1 316 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 1504
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778 0000 80B5     		push	{r7, lr}
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 ADF5BC6D 		sub	sp, sp, #1504
 783              		.cfi_def_cfa_offset 1512
 784 0006 00AF     		add	r7, sp, #0
 785              		.cfi_def_cfa_register 7
 317:..\src/command_processing.c ****     char packet_string[1500];
 318:..\src/command_processing.c ****     
 319:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 786              		.loc 1 319 0
 787 0008 3B1D     		adds	r3, r7, #4
 788 000a 1846     		mov	r0, r3
 789 000c FFF7FEFF 		bl	prepare_generic_info
 320:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 790              		.loc 1 320 0
 791 0010 3B1D     		adds	r3, r7, #4
 792 0012 1846     		mov	r0, r3
 793 0014 FFF7FEFF 		bl	UART_RS485_PutString
 321:..\src/command_processing.c **** }
 794              		.loc 1 321 0
 795 0018 00BF     		nop
 796 001a 07F5BC67 		add	r7, r7, #1504
 797              		.cfi_def_cfa_offset 8
 798 001e BD46     		mov	sp, r7
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 0020 80BD     		pop	{r7, pc}
 802              		.cfi_endproc
 803              	.LFE65:
 804              		.size	infoSend, .-infoSend
 805 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 806              		.align	2
 807              		.global	num_of_bytes
 808              		.thumb
 809              		.thumb_func
 810              		.type	num_of_bytes, %function
 811              	num_of_bytes:
 812              	.LFB66:
 322:..\src/command_processing.c **** //==============================================================================
 323:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 324:..\src/command_processing.c **** //==============================================================================
 325:..\src/command_processing.c ****                     
 326:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 35


 813              		.loc 1 326 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 16
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818 0000 80B4     		push	{r7}
 819              		.cfi_def_cfa_offset 4
 820              		.cfi_offset 7, -4
 821 0002 85B0     		sub	sp, sp, #20
 822              		.cfi_def_cfa_offset 24
 823 0004 00AF     		add	r7, sp, #0
 824              		.cfi_def_cfa_register 7
 825 0006 0346     		mov	r3, r0
 826 0008 FB71     		strb	r3, [r7, #7]
 327:..\src/command_processing.c ****     uint8 sod;
 328:..\src/command_processing.c ****     switch (TYPE) {
 827              		.loc 1 328 0
 828 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 829 000c 092B     		cmp	r3, #9
 830 000e 20D8     		bhi	.L60
 831 0010 01A2     		adr	r2, .L62
 832 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 833 0016 00BF     		.p2align 2
 834              	.L62:
 835 0018 41000000 		.word	.L61+1
 836 001c 41000000 		.word	.L61+1
 837 0020 41000000 		.word	.L61+1
 838 0024 47000000 		.word	.L63+1
 839 0028 47000000 		.word	.L63+1
 840 002c 4D000000 		.word	.L64+1
 841 0030 4D000000 		.word	.L64+1
 842 0034 4D000000 		.word	.L64+1
 843 0038 53000000 		.word	.L60+1
 844 003c 41000000 		.word	.L61+1
 845              		.p2align 1
 846              	.L61:
 329:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 330:..\src/command_processing.c ****                 sod = 1; break;
 847              		.loc 1 330 0
 848 0040 0123     		movs	r3, #1
 849 0042 FB73     		strb	r3, [r7, #15]
 850 0044 05E0     		b	.L60
 851              	.L63:
 331:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 332:..\src/command_processing.c ****                 sod = 2; break;
 852              		.loc 1 332 0
 853 0046 0223     		movs	r3, #2
 854 0048 FB73     		strb	r3, [r7, #15]
 855 004a 02E0     		b	.L60
 856              	.L64:
 333:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 334:..\src/command_processing.c ****                 sod = 4; break;
 857              		.loc 1 334 0
 858 004c 0423     		movs	r3, #4
 859 004e FB73     		strb	r3, [r7, #15]
 860 0050 00BF     		nop
 861              	.L60:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 36


 335:..\src/command_processing.c ****     }  
 336:..\src/command_processing.c ****     return sod;
 862              		.loc 1 336 0
 863 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 337:..\src/command_processing.c **** }
 864              		.loc 1 337 0
 865 0054 1846     		mov	r0, r3
 866 0056 1437     		adds	r7, r7, #20
 867              		.cfi_def_cfa_offset 4
 868 0058 BD46     		mov	sp, r7
 869              		.cfi_def_cfa_register 13
 870              		@ sp needed
 871 005a 80BC     		pop	{r7}
 872              		.cfi_restore 7
 873              		.cfi_def_cfa_offset 0
 874 005c 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE66:
 877              		.size	num_of_bytes, .-num_of_bytes
 878 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 879              		.align	2
 880              		.global	infoGet
 881              		.thumb
 882              		.thumb_func
 883              		.type	infoGet, %function
 884              	infoGet:
 885              	.LFB67:
 338:..\src/command_processing.c **** 
 339:..\src/command_processing.c **** //==============================================================================
 340:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 341:..\src/command_processing.c **** //==============================================================================
 342:..\src/command_processing.c **** 
 343:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 886              		.loc 1 343 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 24008
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890 0000 80B5     		push	{r7, lr}
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 ADF5BB4D 		sub	sp, sp, #23936
 895              		.cfi_def_cfa_offset 23944
 896 0006 92B0     		sub	sp, sp, #72
 897              		.cfi_def_cfa_offset 24016
 898 0008 00AF     		add	r7, sp, #0
 899              		.cfi_def_cfa_register 7
 900 000a 0246     		mov	r2, r0
 901 000c 07F14803 		add	r3, r7, #72
 902 0010 423B     		subs	r3, r3, #66
 903 0012 1A80     		strh	r2, [r3]	@ movhi
 344:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 904              		.loc 1 344 0
 905 0014 07F59C43 		add	r3, r7, #19968
 906 0018 03F12803 		add	r3, r3, #40
 907 001c 0022     		movs	r2, #0
 908 001e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 37


 909 0020 0433     		adds	r3, r3, #4
 910 0022 40F69C72 		movw	r2, #3996
 911 0026 0021     		movs	r1, #0
 912 0028 1846     		mov	r0, r3
 913 002a FFF7FEFF 		bl	memset
 345:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 914              		.loc 1 345 0
 915 002e 07F14803 		add	r3, r7, #72
 916 0032 403B     		subs	r3, r3, #64
 917 0034 0022     		movs	r2, #0
 918 0036 1A60     		str	r2, [r3]
 919 0038 0433     		adds	r3, r3, #4
 920 003a 44F61C62 		movw	r2, #19996
 921 003e 0021     		movs	r1, #0
 922 0040 1846     		mov	r0, r3
 923 0042 FFF7FEFF 		bl	memset
 346:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 347:..\src/command_processing.c **** 
 348:..\src/command_processing.c ****     switch (info_type) {
 924              		.loc 1 348 0
 925 0046 07F14803 		add	r3, r7, #72
 926 004a 423B     		subs	r3, r3, #66
 927 004c 1B88     		ldrh	r3, [r3]
 928 004e 062B     		cmp	r3, #6
 929 0050 7DD8     		bhi	.L77
 930 0052 01A2     		adr	r2, .L69
 931 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 932              		.p2align 2
 933              	.L69:
 934 0058 75000000 		.word	.L68+1
 935 005c 97000000 		.word	.L70+1
 936 0060 B9000000 		.word	.L71+1
 937 0064 E1000000 		.word	.L72+1
 938 0068 03010000 		.word	.L73+1
 939 006c 21010000 		.word	.L74+1
 940 0070 27010000 		.word	.L75+1
 941              		.p2align 1
 942              	.L68:
 349:..\src/command_processing.c ****         case INFO_ALL:
 350:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 943              		.loc 1 350 0
 944 0074 07F59C43 		add	r3, r7, #19968
 945 0078 03F12803 		add	r3, r3, #40
 946 007c 1846     		mov	r0, r3
 947 007e FFF7FEFF 		bl	prepare_generic_info
 351:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 948              		.loc 1 351 0
 949 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 352:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 950              		.loc 1 352 0
 951 0086 07F59C43 		add	r3, r7, #19968
 952 008a 03F12803 		add	r3, r3, #40
 953 008e 1846     		mov	r0, r3
 954 0090 FFF7FEFF 		bl	UART_RS485_PutString
 353:..\src/command_processing.c ****             break;
 955              		.loc 1 353 0
 956 0094 5CE0     		b	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 38


 957              	.L70:
 354:..\src/command_processing.c ****         case CYCLES_INFO:
 355:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 958              		.loc 1 355 0
 959 0096 07F59C43 		add	r3, r7, #19968
 960 009a 03F12803 		add	r3, r3, #40
 961 009e 1846     		mov	r0, r3
 962 00a0 FFF7FEFF 		bl	prepare_counter_info
 356:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 963              		.loc 1 356 0
 964 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 357:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 965              		.loc 1 357 0
 966 00a8 07F59C43 		add	r3, r7, #19968
 967 00ac 03F12803 		add	r3, r3, #40
 968 00b0 1846     		mov	r0, r3
 969 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 358:..\src/command_processing.c ****             break;
 970              		.loc 1 358 0
 971 00b6 4BE0     		b	.L76
 972              	.L71:
 359:..\src/command_processing.c ****         case GET_SD_PARAM:
 360:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 973              		.loc 1 360 0
 974 00b8 07F59C43 		add	r3, r7, #19968
 975 00bc 03F12803 		add	r3, r3, #40
 976 00c0 4FF47A62 		mov	r2, #4000
 977 00c4 1946     		mov	r1, r3
 978 00c6 2548     		ldr	r0, .L78
 979 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 361:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 980              		.loc 1 361 0
 981 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 362:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 982              		.loc 1 362 0
 983 00d0 07F59C43 		add	r3, r7, #19968
 984 00d4 03F12803 		add	r3, r3, #40
 985 00d8 1846     		mov	r0, r3
 986 00da FFF7FEFF 		bl	UART_RS485_PutString
 363:..\src/command_processing.c ****             break;
 987              		.loc 1 363 0
 988 00de 37E0     		b	.L76
 989              	.L72:
 364:..\src/command_processing.c ****         case GET_SD_DATA:
 365:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 990              		.loc 1 365 0
 991 00e0 07F14803 		add	r3, r7, #72
 992 00e4 403B     		subs	r3, r3, #64
 993 00e6 44F62061 		movw	r1, #20000
 994 00ea 1846     		mov	r0, r3
 995 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 366:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 996              		.loc 1 366 0
 997 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 367:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 998              		.loc 1 367 0
 999 00f4 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 39


 1000 00f8 403B     		subs	r3, r3, #64
 1001 00fa 1846     		mov	r0, r3
 1002 00fc FFF7FEFF 		bl	UART_RS485_PutString
 368:..\src/command_processing.c ****             break;
 1003              		.loc 1 368 0
 1004 0100 26E0     		b	.L76
 1005              	.L73:
 369:..\src/command_processing.c ****         case GET_SD_FS_TREE:
 370:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 1006              		.loc 1 370 0
 1007 0102 07F14803 		add	r3, r7, #72
 1008 0106 403B     		subs	r3, r3, #64
 1009 0108 1846     		mov	r0, r3
 1010 010a FFF7FEFF 		bl	Get_SD_FS
 371:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 1011              		.loc 1 371 0
 1012 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 372:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 1013              		.loc 1 372 0
 1014 0112 07F14803 		add	r3, r7, #72
 1015 0116 403B     		subs	r3, r3, #64
 1016 0118 1846     		mov	r0, r3
 1017 011a FFF7FEFF 		bl	UART_RS485_PutString
 373:..\src/command_processing.c ****             break;
 1018              		.loc 1 373 0
 1019 011e 17E0     		b	.L76
 1020              	.L74:
 374:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 375:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 376:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 1021              		.loc 1 376 0
 1022 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 377:..\src/command_processing.c ****             break;
 1023              		.loc 1 377 0
 1024 0124 14E0     		b	.L76
 1025              	.L75:
 378:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 379:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 1026              		.loc 1 379 0
 1027 0126 07F59C43 		add	r3, r7, #19968
 1028 012a 03F12803 		add	r3, r3, #40
 1029 012e 4FF47A62 		mov	r2, #4000
 1030 0132 1946     		mov	r1, r3
 1031 0134 0A48     		ldr	r0, .L78+4
 1032 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 380:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 1033              		.loc 1 380 0
 1034 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 381:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 1035              		.loc 1 381 0
 1036 013e 07F59C43 		add	r3, r7, #19968
 1037 0142 03F12803 		add	r3, r3, #40
 1038 0146 1846     		mov	r0, r3
 1039 0148 FFF7FEFF 		bl	UART_RS485_PutString
 382:..\src/command_processing.c ****             break;            
 1040              		.loc 1 382 0
 1041 014c 00E0     		b	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 40


 1042              	.L77:
 383:..\src/command_processing.c ****         default:
 384:..\src/command_processing.c ****             break;
 1043              		.loc 1 384 0
 1044 014e 00BF     		nop
 1045              	.L76:
 385:..\src/command_processing.c ****     }
 386:..\src/command_processing.c **** }
 1046              		.loc 1 386 0 discriminator 1
 1047 0150 00BF     		nop
 1048 0152 07F5BB47 		add	r7, r7, #23936
 1049 0156 4837     		adds	r7, r7, #72
 1050              		.cfi_def_cfa_offset 8
 1051 0158 BD46     		mov	sp, r7
 1052              		.cfi_def_cfa_register 13
 1053              		@ sp needed
 1054 015a 80BD     		pop	{r7, pc}
 1055              	.L79:
 1056              		.align	2
 1057              	.L78:
 1058 015c 00000000 		.word	sdParam
 1059 0160 00000000 		.word	sdR01File
 1060              		.cfi_endproc
 1061              	.LFE67:
 1062              		.size	infoGet, .-infoGet
 1063              		.section	.rodata
 1064              		.align	2
 1065              	.LC8:
 1066 0000 00       		.ascii	"\000"
 1067 0001 000000   		.align	2
 1068              	.LC14:
 1069 0004 202D2000 		.ascii	" - \000"
 1070              		.align	2
 1071              	.LC15:
 1072 0008 54686520 		.ascii	"The board will reset\012\000"
 1072      626F6172 
 1072      64207769 
 1072      6C6C2072 
 1072      65736574 
 1073 001e 0000     		.align	2
 1074              	.LC16:
 1075 0020 202D3E20 		.ascii	" -> \000"
 1075      00
 1076 0025 000000   		.align	2
 1077              	.LC17:
 1078 0028 0A00     		.ascii	"\012\000"
 1079              		.section	.text.get_param_list,"ax",%progbits
 1080              		.align	2
 1081              		.global	get_param_list
 1082              		.thumb
 1083              		.thumb_func
 1084              		.type	get_param_list, %function
 1085              	get_param_list:
 1086              	.LFB68:
 387:..\src/command_processing.c **** 
 388:..\src/command_processing.c **** 
 389:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 41


 390:..\src/command_processing.c **** //                                                                GET PARAM LIST
 391:..\src/command_processing.c **** //==============================================================================
 392:..\src/command_processing.c **** 
 393:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 1087              		.loc 1 393 0
 1088              		.cfi_startproc
 1089              		@ args = 4, pretend = 0, frame = 608
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
 1091 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1092              		.cfi_def_cfa_offset 28
 1093              		.cfi_offset 4, -28
 1094              		.cfi_offset 5, -24
 1095              		.cfi_offset 6, -20
 1096              		.cfi_offset 7, -16
 1097              		.cfi_offset 8, -12
 1098              		.cfi_offset 9, -8
 1099              		.cfi_offset 14, -4
 1100 0004 ADF5197D 		sub	sp, sp, #612
 1101              		.cfi_def_cfa_offset 640
 1102 0008 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 000a 0646     		mov	r6, r0
 1105 000c 0846     		mov	r0, r1
 1106 000e 07F10801 		add	r1, r7, #8
 1107 0012 0A60     		str	r2, [r1]
 1108 0014 3A1D     		adds	r2, r7, #4
 1109 0016 1360     		str	r3, [r2]
 1110 0018 07F10F03 		add	r3, r7, #15
 1111 001c 3246     		mov	r2, r6
 1112 001e 1A70     		strb	r2, [r3]
 1113 0020 07F10E03 		add	r3, r7, #14
 1114 0024 0246     		mov	r2, r0
 1115 0026 1A70     		strb	r2, [r3]
 1116              		.loc 1 393 0
 1117 0028 6B46     		mov	r3, sp
 1118 002a 1E46     		mov	r6, r3
 394:..\src/command_processing.c ****     //Auxiliary variables
 395:..\src/command_processing.c ****     uint8 CYDATA idx = 0;       //Parameter number
 1119              		.loc 1 395 0
 1120 002c 0023     		movs	r3, #0
 1121 002e 87F85F32 		strb	r3, [r7, #607]
 396:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1122              		.loc 1 396 0
 1123 0032 07F10803 		add	r3, r7, #8
 1124 0036 1B68     		ldr	r3, [r3]
 1125 0038 1B68     		ldr	r3, [r3]
 1126 003a C7F85032 		str	r3, [r7, #592]
 397:..\src/command_processing.c ****     uint8 CYDATA string_length;
 398:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1127              		.loc 1 398 0
 1128 003e 07F5A473 		add	r3, r7, #328
 1129 0042 0022     		movs	r2, #0
 1130 0044 1A60     		str	r2, [r3]
 1131 0046 0433     		adds	r3, r3, #4
 1132 0048 F622     		movs	r2, #246
 1133 004a 0021     		movs	r1, #0
 1134 004c 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 42


 1135 004e FFF7FEFF 		bl	memset
 399:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1136              		.loc 1 399 0
 1137 0052 07F14C03 		add	r3, r7, #76
 1138 0056 0022     		movs	r2, #0
 1139 0058 1A60     		str	r2, [r3]
 1140 005a 0433     		adds	r3, r3, #4
 1141 005c F622     		movs	r2, #246
 1142 005e 0021     		movs	r1, #0
 1143 0060 1846     		mov	r0, r3
 1144 0062 FFF7FEFF 		bl	memset
 400:..\src/command_processing.c ****     
 401:..\src/command_processing.c ****     
 402:..\src/command_processing.c ****     int32 aux_int32;
 403:..\src/command_processing.c ****     uint8 i, j;
 404:..\src/command_processing.c ****     uint8 count;
 405:..\src/command_processing.c ****     char aux_char[50];
 406:..\src/command_processing.c ****     
 407:..\src/command_processing.c ****     
 408:..\src/command_processing.c ****     
 409:..\src/command_processing.c **** 
 410:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1145              		.loc 1 410 0
 1146 0066 07F10F03 		add	r3, r7, #15
 1147 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1148 006c 9BB2     		uxth	r3, r3
 1149 006e 1A46     		mov	r2, r3	@ movhi
 1150 0070 9200     		lsls	r2, r2, #2
 1151 0072 1344     		add	r3, r3, r2
 1152 0074 1A46     		mov	r2, r3	@ movhi
 1153 0076 9100     		lsls	r1, r2, #2
 1154 0078 1A46     		mov	r2, r3	@ movhi
 1155 007a 0B46     		mov	r3, r1	@ movhi
 1156 007c 1344     		add	r3, r3, r2
 1157 007e 5B00     		lsls	r3, r3, #1
 1158 0080 9AB2     		uxth	r2, r3
 1159 0082 07F10E03 		add	r3, r7, #14
 1160 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1161 0088 9BB2     		uxth	r3, r3
 1162 008a 1946     		mov	r1, r3	@ movhi
 1163 008c 8900     		lsls	r1, r1, #2
 1164 008e 0B44     		add	r3, r3, r1
 1165 0090 1946     		mov	r1, r3	@ movhi
 1166 0092 0901     		lsls	r1, r1, #4
 1167 0094 CB1A     		subs	r3, r1, r3
 1168 0096 5B00     		lsls	r3, r3, #1
 1169 0098 9BB2     		uxth	r3, r3
 1170 009a 1344     		add	r3, r3, r2
 1171 009c 9BB2     		uxth	r3, r3
 1172 009e 3233     		adds	r3, r3, #50
 1173 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 411:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1174              		.loc 1 411 0
 1175 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1176 00a8 0B46     		mov	r3, r1
 1177 00aa 013B     		subs	r3, r3, #1
 1178 00ac C7F84832 		str	r3, [r7, #584]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 43


 1179 00b0 8AB2     		uxth	r2, r1
 1180 00b2 4FF00003 		mov	r3, #0
 1181 00b6 4FEAC309 		lsl	r9, r3, #3
 1182 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1183 00be 4FEAC208 		lsl	r8, r2, #3
 1184 00c2 8AB2     		uxth	r2, r1
 1185 00c4 4FF00003 		mov	r3, #0
 1186 00c8 DD00     		lsls	r5, r3, #3
 1187 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1188 00ce D400     		lsls	r4, r2, #3
 1189 00d0 0B46     		mov	r3, r1
 1190 00d2 0733     		adds	r3, r3, #7
 1191 00d4 DB08     		lsrs	r3, r3, #3
 1192 00d6 DB00     		lsls	r3, r3, #3
 1193 00d8 ADEB030D 		sub	sp, sp, r3
 1194 00dc 6B46     		mov	r3, sp
 1195 00de 0033     		adds	r3, r3, #0
 1196 00e0 C7F84432 		str	r3, [r7, #580]
 1197              	.LBB22:
 412:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1198              		.loc 1 412 0
 1199 00e4 0023     		movs	r3, #0
 1200 00e6 C7F85432 		str	r3, [r7, #596]
 1201 00ea 0BE0     		b	.L81
 1202              	.L82:
 1203              		.loc 1 412 0 is_stmt 0 discriminator 3
 1204 00ec D7F84422 		ldr	r2, [r7, #580]
 1205 00f0 D7F85432 		ldr	r3, [r7, #596]
 1206 00f4 1344     		add	r3, r3, r2
 1207 00f6 0022     		movs	r2, #0
 1208 00f8 1A70     		strb	r2, [r3]
 1209 00fa D7F85432 		ldr	r3, [r7, #596]
 1210 00fe 0133     		adds	r3, r3, #1
 1211 0100 C7F85432 		str	r3, [r7, #596]
 1212              	.L81:
 1213              		.loc 1 412 0 discriminator 1
 1214 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1215 0108 D7F85432 		ldr	r3, [r7, #596]
 1216 010c 9A42     		cmp	r2, r3
 1217 010e EDDC     		bgt	.L82
 1218              	.LBE22:
 413:..\src/command_processing.c **** 
 414:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1219              		.loc 1 414 0 is_stmt 1
 1220 0110 D7F84432 		ldr	r3, [r7, #580]
 1221 0114 0C22     		movs	r2, #12
 1222 0116 1A70     		strb	r2, [r3]
 415:..\src/command_processing.c ****     packet_data[1] = num_params;
 1223              		.loc 1 415 0
 1224 0118 D7F84432 		ldr	r3, [r7, #580]
 1225 011c 07F10F02 		add	r2, r7, #15
 1226 0120 1278     		ldrb	r2, [r2]
 1227 0122 5A70     		strb	r2, [r3, #1]
 416:..\src/command_processing.c ****     
 417:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1228              		.loc 1 417 0
 1229 0124 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 44


 1230 0126 87F85F32 		strb	r3, [r7, #607]
 1231 012a 44E2     		b	.L83
 1232              	.L106:
 1233              	.LBB23:
 418:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1234              		.loc 1 418 0
 1235 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1236 0130 1B01     		lsls	r3, r3, #4
 1237 0132 07F10802 		add	r2, r7, #8
 1238 0136 1268     		ldr	r2, [r2]
 1239 0138 1344     		add	r3, r3, r2
 1240 013a 1B68     		ldr	r3, [r3]
 1241 013c C7F85032 		str	r3, [r7, #592]
 419:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1242              		.loc 1 419 0
 1243 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1244 0144 1B01     		lsls	r3, r3, #4
 1245 0146 07F10802 		add	r2, r7, #8
 1246 014a 1268     		ldr	r2, [r2]
 1247 014c 1344     		add	r3, r3, r2
 1248 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1249 0150 1846     		mov	r0, r3
 1250 0152 FFF7FEFF 		bl	num_of_bytes
 1251 0156 0346     		mov	r3, r0
 1252 0158 87F84332 		strb	r3, [r7, #579]
 420:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1253              		.loc 1 420 0
 1254 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1255 0160 3222     		movs	r2, #50
 1256 0162 02FB03F3 		mul	r3, r2, r3
 1257 0166 0233     		adds	r3, r3, #2
 1258 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1259 016c 1201     		lsls	r2, r2, #4
 1260 016e 07F10801 		add	r1, r7, #8
 1261 0172 0968     		ldr	r1, [r1]
 1262 0174 0A44     		add	r2, r2, r1
 1263 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1264 0178 D7F84422 		ldr	r2, [r7, #580]
 1265 017c D154     		strb	r1, [r2, r3]
 421:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1266              		.loc 1 421 0
 1267 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1268 0182 3222     		movs	r2, #50
 1269 0184 02FB03F3 		mul	r3, r2, r3
 1270 0188 0333     		adds	r3, r3, #3
 1271 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1272 018e 1201     		lsls	r2, r2, #4
 1273 0190 07F10801 		add	r1, r7, #8
 1274 0194 0968     		ldr	r1, [r1]
 1275 0196 0A44     		add	r2, r2, r1
 1276 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1277 019a D7F84422 		ldr	r2, [r7, #580]
 1278 019e D154     		strb	r1, [r2, r3]
 422:..\src/command_processing.c **** 
 423:..\src/command_processing.c **** 
 424:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1279              		.loc 1 424 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 45


 1280 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1281 01a4 1B01     		lsls	r3, r3, #4
 1282 01a6 07F10802 		add	r2, r7, #8
 1283 01aa 1268     		ldr	r2, [r2]
 1284 01ac 1344     		add	r3, r3, r2
 1285 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1286 01b0 052B     		cmp	r3, #5
 1287 01b2 61D1     		bne	.L117
 425:..\src/command_processing.c **** 
 426:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 427:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1288              		.loc 1 427 0
 1289 01b4 B74B     		ldr	r3, .L118
 1290 01b6 1B6A     		ldr	r3, [r3, #32]
 1291 01b8 B64A     		ldr	r2, .L118
 1292 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1293 01be 43FA02F2 		asr	r2, r3, r2
 1294 01c2 07F14803 		add	r3, r7, #72
 1295 01c6 1A60     		str	r2, [r3]
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1296              		.loc 1 428 0
 1297 01c8 0023     		movs	r3, #0
 1298 01ca 87F85C32 		strb	r3, [r7, #604]
 1299 01ce 1AE0     		b	.L86
 1300              	.L87:
 429:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1301              		.loc 1 429 0 discriminator 3
 1302 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1303 01d4 3222     		movs	r2, #50
 1304 01d6 02FB03F3 		mul	r3, r2, r3
 1305 01da 1A1D     		adds	r2, r3, #4
 1306 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1307 01e0 1A44     		add	r2, r2, r3
 1308 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1309 01e6 D31A     		subs	r3, r2, r3
 1310 01e8 013B     		subs	r3, r3, #1
 1311 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 01ee 07F14801 		add	r1, r7, #72
 1313 01f2 0A44     		add	r2, r2, r1
 1314 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1315 01f6 D7F84422 		ldr	r2, [r7, #580]
 1316 01fa D154     		strb	r1, [r2, r3]
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1317              		.loc 1 428 0 discriminator 3
 1318 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1319 0200 0133     		adds	r3, r3, #1
 1320 0202 87F85C32 		strb	r3, [r7, #604]
 1321              	.L86:
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1322              		.loc 1 428 0 is_stmt 0 discriminator 1
 1323 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1324 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1325 020e 9A42     		cmp	r2, r3
 1326 0210 DED3     		bcc	.L87
 430:..\src/command_processing.c ****             }
 431:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1327              		.loc 1 431 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 46


 1328 0212 A04B     		ldr	r3, .L118
 1329 0214 5B6A     		ldr	r3, [r3, #36]
 1330 0216 9F4A     		ldr	r2, .L118
 1331 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1332 021c 43FA02F2 		asr	r2, r3, r2
 1333 0220 07F14803 		add	r3, r7, #72
 1334 0224 1A60     		str	r2, [r3]
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1335              		.loc 1 432 0
 1336 0226 0023     		movs	r3, #0
 1337 0228 87F85C32 		strb	r3, [r7, #604]
 1338 022c 1DE0     		b	.L88
 1339              	.L89:
 433:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1340              		.loc 1 433 0 discriminator 3
 1341 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1342 0232 3222     		movs	r2, #50
 1343 0234 02FB03F3 		mul	r3, r2, r3
 1344 0238 1A1D     		adds	r2, r3, #4
 1345 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1346 023e 1A44     		add	r2, r2, r3
 1347 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1348 0244 1A44     		add	r2, r2, r3
 1349 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1350 024a D31A     		subs	r3, r2, r3
 1351 024c 013B     		subs	r3, r3, #1
 1352 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1353 0252 07F14801 		add	r1, r7, #72
 1354 0256 0A44     		add	r2, r2, r1
 1355 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1356 025a D7F84422 		ldr	r2, [r7, #580]
 1357 025e D154     		strb	r1, [r2, r3]
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1358              		.loc 1 432 0 discriminator 3
 1359 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1360 0264 0133     		adds	r3, r3, #1
 1361 0266 87F85C32 		strb	r3, [r7, #604]
 1362              	.L88:
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1363              		.loc 1 432 0 is_stmt 0 discriminator 1
 1364 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1365 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1366 0272 9A42     		cmp	r2, r3
 1367 0274 DBD3     		bcc	.L89
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****             break;            
 1368              		.loc 1 435 0 is_stmt 1
 1369 0276 48E0     		b	.L90
 1370              	.L117:
 436:..\src/command_processing.c ****             
 437:..\src/command_processing.c **** 
 438:..\src/command_processing.c ****         case 0:  // Not custom parameter
 439:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 440:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1371              		.loc 1 440 0
 1372 0278 0023     		movs	r3, #0
 1373 027a 87F85D32 		strb	r3, [r7, #605]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 47


 1374 027e 32E0     		b	.L91
 1375              	.L94:
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1376              		.loc 1 441 0
 1377 0280 0023     		movs	r3, #0
 1378 0282 87F85C32 		strb	r3, [r7, #604]
 1379 0286 21E0     		b	.L92
 1380              	.L93:
 442:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1381              		.loc 1 442 0 discriminator 3
 1382 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1383 028c 3222     		movs	r2, #50
 1384 028e 02FB03F3 		mul	r3, r2, r3
 1385 0292 1A1D     		adds	r2, r3, #4
 1386 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1387 0298 1A44     		add	r2, r2, r3
 1388 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1389 029e 1A44     		add	r2, r2, r3
 1390 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1391 02a4 D31A     		subs	r3, r2, r3
 1392 02a6 013B     		subs	r3, r3, #1
 1393 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1394 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1395 02b0 0A44     		add	r2, r2, r1
 1396 02b2 1146     		mov	r1, r2
 1397 02b4 D7F85022 		ldr	r2, [r7, #592]
 1398 02b8 0A44     		add	r2, r2, r1
 1399 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1400 02bc D7F84422 		ldr	r2, [r7, #580]
 1401 02c0 D154     		strb	r1, [r2, r3]
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1402              		.loc 1 441 0 discriminator 3
 1403 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1404 02c6 0133     		adds	r3, r3, #1
 1405 02c8 87F85C32 		strb	r3, [r7, #604]
 1406              	.L92:
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1407              		.loc 1 441 0 is_stmt 0 discriminator 1
 1408 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1409 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1410 02d4 9A42     		cmp	r2, r3
 1411 02d6 D7D3     		bcc	.L93
 440:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1412              		.loc 1 440 0 is_stmt 1 discriminator 2
 1413 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1414 02dc 97F84332 		ldrb	r3, [r7, #579]
 1415 02e0 1344     		add	r3, r3, r2
 1416 02e2 87F85D32 		strb	r3, [r7, #605]
 1417              	.L91:
 440:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1418              		.loc 1 440 0 is_stmt 0 discriminator 1
 1419 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1420 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1421 02ee 1B01     		lsls	r3, r3, #4
 1422 02f0 07F10801 		add	r1, r7, #8
 1423 02f4 0968     		ldr	r1, [r1]
 1424 02f6 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 48


 1425 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1426 02fa 1946     		mov	r1, r3
 1427 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1428 0300 03FB01F3 		mul	r3, r3, r1
 1429 0304 9A42     		cmp	r2, r3
 1430 0306 BBDB     		blt	.L94
 443:..\src/command_processing.c ****                 }
 444:..\src/command_processing.c ****             }
 445:..\src/command_processing.c ****             break;
 1431              		.loc 1 445 0 is_stmt 1
 1432 0308 00BF     		nop
 1433              	.L90:
 446:..\src/command_processing.c ****     }
 447:..\src/command_processing.c ****        
 448:..\src/command_processing.c ****         sprintf(aux_str,"");
 1434              		.loc 1 448 0
 1435 030a 634B     		ldr	r3, .L118+4
 1436 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1437 030e 07F5A473 		add	r3, r7, #328
 1438 0312 1A70     		strb	r2, [r3]
 449:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1439              		.loc 1 449 0
 1440 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1441 0318 0133     		adds	r3, r3, #1
 1442 031a 07F11401 		add	r1, r7, #20
 1443 031e 0A22     		movs	r2, #10
 1444 0320 1846     		mov	r0, r3
 1445 0322 FFF7FEFF 		bl	itoa
 450:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1446              		.loc 1 450 0
 1447 0326 07F11402 		add	r2, r7, #20
 1448 032a 07F5A473 		add	r3, r7, #328
 1449 032e 1146     		mov	r1, r2
 1450 0330 1846     		mov	r0, r3
 1451 0332 FFF7FEFF 		bl	strcat
 451:..\src/command_processing.c ****         strcat(aux_str," - ");
 1452              		.loc 1 451 0
 1453 0336 07F5A473 		add	r3, r7, #328
 1454 033a 1846     		mov	r0, r3
 1455 033c FFF7FEFF 		bl	strlen
 1456 0340 0346     		mov	r3, r0
 1457 0342 1A46     		mov	r2, r3
 1458 0344 07F5A473 		add	r3, r7, #328
 1459 0348 1344     		add	r3, r3, r2
 1460 034a 544A     		ldr	r2, .L118+8
 1461 034c 1068     		ldr	r0, [r2]	@ unaligned
 1462 034e 1860     		str	r0, [r3]	@ unaligned
 452:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1463              		.loc 1 452 0
 1464 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1465 0354 1B01     		lsls	r3, r3, #4
 1466 0356 07F10802 		add	r2, r7, #8
 1467 035a 1268     		ldr	r2, [r2]
 1468 035c 1344     		add	r3, r3, r2
 1469 035e 9A68     		ldr	r2, [r3, #8]
 1470 0360 07F5A473 		add	r3, r7, #328
 1471 0364 1146     		mov	r1, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 49


 1472 0366 1846     		mov	r0, r3
 1473 0368 FFF7FEFF 		bl	strcat
 453:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1474              		.loc 1 453 0
 1475 036c 07F5A473 		add	r3, r7, #328
 1476 0370 1846     		mov	r0, r3
 1477 0372 FFF7FEFF 		bl	strlen
 1478 0376 0346     		mov	r3, r0
 1479 0378 87F85E32 		strb	r3, [r7, #606]
 454:..\src/command_processing.c ****         
 455:..\src/command_processing.c ****         // Parameters with a menu
 456:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
 1480              		.loc 1 456 0
 1481 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1482 0380 1B01     		lsls	r3, r3, #4
 1483 0382 07F10802 		add	r2, r7, #8
 1484 0386 1268     		ldr	r2, [r2]
 1485 0388 1344     		add	r3, r3, r2
 1486 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1487 038c 002B     		cmp	r3, #0
 1488 038e 40D0     		beq	.L95
 457:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1489              		.loc 1 457 0
 1490 0390 0023     		movs	r3, #0
 1491 0392 87F85D32 		strb	r3, [r7, #605]
 1492 0396 35E0     		b	.L96
 1493              	.L98:
 458:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1494              		.loc 1 458 0
 1495 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1496 039c 2C22     		movs	r2, #44
 1497 039e 02FB03F3 		mul	r3, r2, r3
 1498 03a2 3A1D     		adds	r2, r7, #4
 1499 03a4 1268     		ldr	r2, [r2]
 1500 03a6 1344     		add	r3, r3, r2
 1501 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1502 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1503 03ae 1B01     		lsls	r3, r3, #4
 1504 03b0 07F10801 		add	r1, r7, #8
 1505 03b4 0968     		ldr	r1, [r1]
 1506 03b6 0B44     		add	r3, r3, r1
 1507 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1508 03ba 9A42     		cmp	r2, r3
 1509 03bc 13D1     		bne	.L97
 459:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1510              		.loc 1 459 0
 1511 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1512 03c2 2C22     		movs	r2, #44
 1513 03c4 02FB03F3 		mul	r3, r2, r3
 1514 03c8 3A1D     		adds	r2, r7, #4
 1515 03ca 1268     		ldr	r2, [r2]
 1516 03cc 1A44     		add	r2, r2, r3
 1517 03ce D7F85032 		ldr	r3, [r7, #592]
 1518 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1519 03d4 9B00     		lsls	r3, r3, #2
 1520 03d6 1344     		add	r3, r3, r2
 1521 03d8 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 50


 1522 03da 07F5A473 		add	r3, r7, #328
 1523 03de 1146     		mov	r1, r2
 1524 03e0 1846     		mov	r0, r3
 1525 03e2 FFF7FEFF 		bl	strcat
 1526              	.L97:
 460:..\src/command_processing.c ****                 }              
 461:..\src/command_processing.c ****             //Recomputes string length
 462:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1527              		.loc 1 462 0 discriminator 2
 1528 03e6 07F5A473 		add	r3, r7, #328
 1529 03ea 1846     		mov	r0, r3
 1530 03ec FFF7FEFF 		bl	strlen
 1531 03f0 0346     		mov	r3, r0
 1532 03f2 DBB2     		uxtb	r3, r3
 1533 03f4 0133     		adds	r3, r3, #1
 1534 03f6 87F85E32 		strb	r3, [r7, #606]
 457:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1535              		.loc 1 457 0 discriminator 2
 1536 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1537 03fe 0133     		adds	r3, r3, #1
 1538 0400 87F85D32 		strb	r3, [r7, #605]
 1539              	.L96:
 457:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1540              		.loc 1 457 0 is_stmt 0 discriminator 1
 1541 0404 07F10E03 		add	r3, r7, #14
 1542 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1543 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1544 040e 9A42     		cmp	r2, r3
 1545 0410 C2D3     		bcc	.L98
 1546              	.L95:
 463:..\src/command_processing.c ****             }
 464:..\src/command_processing.c ****         }
 465:..\src/command_processing.c **** 
 466:..\src/command_processing.c ****         // Add parameter string to packet
 467:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1547              		.loc 1 467 0 is_stmt 1
 1548 0412 97F85E32 		ldrb	r3, [r7, #606]
 1549 0416 87F85D32 		strb	r3, [r7, #605]
 1550 041a 28E0     		b	.L99
 1551              	.L100:
 468:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1552              		.loc 1 468 0 discriminator 3
 1553 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1554 0420 3222     		movs	r2, #50
 1555 0422 02FB03F3 		mul	r3, r2, r3
 1556 0426 1A1D     		adds	r2, r3, #4
 1557 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1558 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1559 0430 0901     		lsls	r1, r1, #4
 1560 0432 07F10800 		add	r0, r7, #8
 1561 0436 0068     		ldr	r0, [r0]
 1562 0438 0144     		add	r1, r1, r0
 1563 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1564 043c 01FB03F3 		mul	r3, r1, r3
 1565 0440 1A44     		add	r2, r2, r3
 1566 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1567 0446 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 51


 1568 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1569 044c D31A     		subs	r3, r2, r3
 1570 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1571 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1572 0456 8A1A     		subs	r2, r1, r2
 1573 0458 07F5A471 		add	r1, r7, #328
 1574 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1575 045e D7F84422 		ldr	r2, [r7, #580]
 1576 0462 D154     		strb	r1, [r2, r3]
 467:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1577              		.loc 1 467 0 discriminator 3
 1578 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1579 0468 013B     		subs	r3, r3, #1
 1580 046a 87F85D32 		strb	r3, [r7, #605]
 1581              	.L99:
 467:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1582              		.loc 1 467 0 is_stmt 0 discriminator 1
 1583 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1584 0472 002B     		cmp	r3, #0
 1585 0474 D2D1     		bne	.L100
 469:..\src/command_processing.c ****         
 470:..\src/command_processing.c ****         
 471:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1586              		.loc 1 471 0 is_stmt 1
 1587 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1588 047a 1B01     		lsls	r3, r3, #4
 1589 047c 07F10802 		add	r2, r7, #8
 1590 0480 1268     		ldr	r2, [r2]
 1591 0482 1344     		add	r3, r3, r2
 1592 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1593 0486 002B     		cmp	r3, #0
 1594 0488 6ED1     		bne	.L101
 472:..\src/command_processing.c ****             //Send the number of menus          
 473:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1595              		.loc 1 473 0
 1596 048a 0023     		movs	r3, #0
 1597 048c 87F85D32 		strb	r3, [r7, #605]
 1598 0490 40E0     		b	.L102
 1599              	.L119:
 1600 0492 00BF     		.align	2
 1601              	.L118:
 1602 0494 00000000 		.word	c_mem
 1603 0498 00000000 		.word	.LC8
 1604 049c 04000000 		.word	.LC14
 1605              	.L104:
 474:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1606              		.loc 1 474 0
 1607 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1608 04a4 2C22     		movs	r2, #44
 1609 04a6 02FB03F3 		mul	r3, r2, r3
 1610 04aa 3A1D     		adds	r2, r7, #4
 1611 04ac 1268     		ldr	r2, [r2]
 1612 04ae 1344     		add	r3, r3, r2
 1613 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1614 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1615 04b6 1B01     		lsls	r3, r3, #4
 1616 04b8 07F10801 		add	r1, r7, #8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 52


 1617 04bc 0968     		ldr	r1, [r1]
 1618 04be 0B44     		add	r3, r3, r1
 1619 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1620 04c2 9A42     		cmp	r2, r3
 1621 04c4 21D1     		bne	.L103
 475:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1622              		.loc 1 475 0
 1623 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1624 04ca 3222     		movs	r2, #50
 1625 04cc 02FB03F3 		mul	r3, r2, r3
 1626 04d0 1A1D     		adds	r2, r3, #4
 1627 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1628 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1629 04da 0901     		lsls	r1, r1, #4
 1630 04dc 07F10800 		add	r0, r7, #8
 1631 04e0 0068     		ldr	r0, [r0]
 1632 04e2 0144     		add	r1, r1, r0
 1633 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1634 04e6 01FB03F3 		mul	r3, r1, r3
 1635 04ea 1A44     		add	r2, r2, r3
 1636 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1637 04f0 1344     		add	r3, r3, r2
 1638 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1639 04f6 0132     		adds	r2, r2, #1
 1640 04f8 D1B2     		uxtb	r1, r2
 1641 04fa D7F84422 		ldr	r2, [r7, #580]
 1642 04fe D154     		strb	r1, [r2, r3]
 476:..\src/command_processing.c ****                 i = num_menus;}              
 1643              		.loc 1 476 0
 1644 0500 07F10E03 		add	r3, r7, #14
 1645 0504 1B78     		ldrb	r3, [r3]
 1646 0506 87F85D32 		strb	r3, [r7, #605]
 1647              	.L103:
 473:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1648              		.loc 1 473 0 discriminator 2
 1649 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1650 050e 0133     		adds	r3, r3, #1
 1651 0510 87F85D32 		strb	r3, [r7, #605]
 1652              	.L102:
 473:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1653              		.loc 1 473 0 is_stmt 0 discriminator 1
 1654 0514 07F10E03 		add	r3, r7, #14
 1655 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1656 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1657 051e 9A42     		cmp	r2, r3
 1658 0520 BED3     		bcc	.L104
 477:..\src/command_processing.c ****             }
 478:..\src/command_processing.c ****             // Add empty bit + struct number
 479:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 480:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1659              		.loc 1 480 0 is_stmt 1
 1660 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1661 0526 3222     		movs	r2, #50
 1662 0528 02FB03F3 		mul	r3, r2, r3
 1663 052c 1A1D     		adds	r2, r3, #4
 1664 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1665 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 53


 1666 0536 0901     		lsls	r1, r1, #4
 1667 0538 07F10800 		add	r0, r7, #8
 1668 053c 0068     		ldr	r0, [r0]
 1669 053e 0144     		add	r1, r1, r0
 1670 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1671 0542 01FB03F3 		mul	r3, r1, r3
 1672 0546 1A44     		add	r2, r2, r3
 1673 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1674 054c 1344     		add	r3, r3, r2
 1675 054e 0233     		adds	r3, r3, #2
 1676 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1677 0554 1201     		lsls	r2, r2, #4
 1678 0556 07F10801 		add	r1, r7, #8
 1679 055a 0968     		ldr	r1, [r1]
 1680 055c 0A44     		add	r2, r2, r1
 1681 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1682 0560 D7F84422 		ldr	r2, [r7, #580]
 1683 0564 D154     		strb	r1, [r2, r3]
 1684 0566 21E0     		b	.L105
 1685              	.L101:
 481:..\src/command_processing.c ****         }
 482:..\src/command_processing.c ****         else {
 483:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1686              		.loc 1 483 0
 1687 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1688 056c 3222     		movs	r2, #50
 1689 056e 02FB03F3 		mul	r3, r2, r3
 1690 0572 1A1D     		adds	r2, r3, #4
 1691 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1692 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1693 057c 0901     		lsls	r1, r1, #4
 1694 057e 07F10800 		add	r0, r7, #8
 1695 0582 0068     		ldr	r0, [r0]
 1696 0584 0144     		add	r1, r1, r0
 1697 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1698 0588 01FB03F3 		mul	r3, r1, r3
 1699 058c 1A44     		add	r2, r2, r3
 1700 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1701 0592 1344     		add	r3, r3, r2
 1702 0594 0133     		adds	r3, r3, #1
 1703 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1704 059a 1201     		lsls	r2, r2, #4
 1705 059c 07F10801 		add	r1, r7, #8
 1706 05a0 0968     		ldr	r1, [r1]
 1707 05a2 0A44     		add	r2, r2, r1
 1708 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1709 05a6 D7F84422 		ldr	r2, [r7, #580]
 1710 05aa D154     		strb	r1, [r2, r3]
 1711              	.L105:
 1712              	.LBE23:
 417:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1713              		.loc 1 417 0 discriminator 2
 1714 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1715 05b0 0133     		adds	r3, r3, #1
 1716 05b2 87F85F32 		strb	r3, [r7, #607]
 1717              	.L83:
 417:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 54


 1718              		.loc 1 417 0 is_stmt 0 discriminator 1
 1719 05b6 07F10F03 		add	r3, r7, #15
 1720 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1721 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1722 05c0 9A42     		cmp	r2, r3
 1723 05c2 FFF4B3AD 		bcc	.L106
 484:..\src/command_processing.c ****         }
 485:..\src/command_processing.c ****     }
 486:..\src/command_processing.c ****     
 487:..\src/command_processing.c ****     // Add menu
 488:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1724              		.loc 1 488 0 is_stmt 1
 1725 05c6 0023     		movs	r3, #0
 1726 05c8 87F85C32 		strb	r3, [r7, #604]
 1727 05cc C0E0     		b	.L107
 1728              	.L115:
 489:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1729              		.loc 1 489 0
 1730 05ce 774B     		ldr	r3, .L120
 1731 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1732 05d2 07F14C03 		add	r3, r7, #76
 1733 05d6 1A70     		strb	r2, [r3]
 490:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1734              		.loc 1 490 0
 1735 05d8 0023     		movs	r3, #0
 1736 05da 87F85B32 		strb	r3, [r7, #603]
 1737 05de 7AE0     		b	.L108
 1738              	.L112:
 491:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1739              		.loc 1 491 0
 1740 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1741 05e4 2C22     		movs	r2, #44
 1742 05e6 02FB03F3 		mul	r3, r2, r3
 1743 05ea 3A1D     		adds	r2, r7, #4
 1744 05ec 1268     		ldr	r2, [r2]
 1745 05ee 1A44     		add	r2, r2, r3
 1746 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1747 05f4 9B00     		lsls	r3, r3, #2
 1748 05f6 1344     		add	r3, r3, r2
 1749 05f8 5B68     		ldr	r3, [r3, #4]
 1750 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1751 05fc 002B     		cmp	r3, #0
 1752 05fe 24D1     		bne	.L109
 492:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1753              		.loc 1 492 0
 1754 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1755 0604 2C22     		movs	r2, #44
 1756 0606 02FB03F3 		mul	r3, r2, r3
 1757 060a 3A1D     		adds	r2, r7, #4
 1758 060c 1268     		ldr	r2, [r2]
 1759 060e 1344     		add	r3, r3, r2
 1760 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1761 0612 012B     		cmp	r3, #1
 1762 0614 15D1     		bne	.L110
 493:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1763              		.loc 1 493 0
 1764 0616 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 55


 1765 061a 1846     		mov	r0, r3
 1766 061c FFF7FEFF 		bl	strlen
 1767 0620 0346     		mov	r3, r0
 1768 0622 1A46     		mov	r2, r3
 1769 0624 07F14C03 		add	r3, r7, #76
 1770 0628 1344     		add	r3, r3, r2
 1771 062a 614A     		ldr	r2, .L120+4
 1772 062c 1D46     		mov	r5, r3
 1773 062e 1446     		mov	r4, r2
 1774 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1775 0632 2860     		str	r0, [r5]	@ unaligned
 1776 0634 6960     		str	r1, [r5, #4]	@ unaligned
 1777 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1778 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1779 063a 2068     		ldr	r0, [r4]	@ unaligned
 1780 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1781 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1782 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1783              	.L110:
 494:..\src/command_processing.c ****                 }
 495:..\src/command_processing.c ****                 count = 10;
 1784              		.loc 1 495 0
 1785 0642 0A23     		movs	r3, #10
 1786 0644 87F85B32 		strb	r3, [r7, #603]
 1787 0648 40E0     		b	.L111
 1788              	.L109:
 496:..\src/command_processing.c ****             }            
 497:..\src/command_processing.c ****             else {
 498:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1789              		.loc 1 498 0
 1790 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1791 064e 07F11401 		add	r1, r7, #20
 1792 0652 0A22     		movs	r2, #10
 1793 0654 1846     		mov	r0, r3
 1794 0656 FFF7FEFF 		bl	itoa
 499:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1795              		.loc 1 499 0
 1796 065a 07F11402 		add	r2, r7, #20
 1797 065e 07F14C03 		add	r3, r7, #76
 1798 0662 1146     		mov	r1, r2
 1799 0664 1846     		mov	r0, r3
 1800 0666 FFF7FEFF 		bl	strcat
 500:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1801              		.loc 1 500 0
 1802 066a 07F14C03 		add	r3, r7, #76
 1803 066e 1846     		mov	r0, r3
 1804 0670 FFF7FEFF 		bl	strlen
 1805 0674 0346     		mov	r3, r0
 1806 0676 1A46     		mov	r2, r3
 1807 0678 07F14C03 		add	r3, r7, #76
 1808 067c 1344     		add	r3, r3, r2
 1809 067e 4D4A     		ldr	r2, .L120+8
 1810 0680 1068     		ldr	r0, [r2]	@ unaligned
 1811 0682 1860     		str	r0, [r3]	@ unaligned
 1812 0684 1279     		ldrb	r2, [r2, #4]
 1813 0686 1A71     		strb	r2, [r3, #4]
 501:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 56


 1814              		.loc 1 501 0
 1815 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1816 068c 2C22     		movs	r2, #44
 1817 068e 02FB03F3 		mul	r3, r2, r3
 1818 0692 3A1D     		adds	r2, r7, #4
 1819 0694 1268     		ldr	r2, [r2]
 1820 0696 1A44     		add	r2, r2, r3
 1821 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1822 069c 9B00     		lsls	r3, r3, #2
 1823 069e 1344     		add	r3, r3, r2
 1824 06a0 5A68     		ldr	r2, [r3, #4]
 1825 06a2 07F14C03 		add	r3, r7, #76
 1826 06a6 1146     		mov	r1, r2
 1827 06a8 1846     		mov	r0, r3
 1828 06aa FFF7FEFF 		bl	strcat
 502:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1829              		.loc 1 502 0
 1830 06ae 07F14C03 		add	r3, r7, #76
 1831 06b2 1846     		mov	r0, r3
 1832 06b4 FFF7FEFF 		bl	strlen
 1833 06b8 0346     		mov	r3, r0
 1834 06ba 1A46     		mov	r2, r3
 1835 06bc 07F14C03 		add	r3, r7, #76
 1836 06c0 1344     		add	r3, r3, r2
 1837 06c2 3D49     		ldr	r1, .L120+12
 1838 06c4 1A46     		mov	r2, r3
 1839 06c6 0B46     		mov	r3, r1
 1840 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1841 06ca 1380     		strh	r3, [r2]	@ unaligned
 1842              	.L111:
 490:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1843              		.loc 1 490 0 discriminator 2
 1844 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1845 06d0 0133     		adds	r3, r3, #1
 1846 06d2 87F85B32 		strb	r3, [r7, #603]
 1847              	.L108:
 490:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1848              		.loc 1 490 0 is_stmt 0 discriminator 1
 1849 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1850 06da 092B     		cmp	r3, #9
 1851 06dc 80D9     		bls	.L112
 503:..\src/command_processing.c ****             }    
 504:..\src/command_processing.c ****         }
 505:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1852              		.loc 1 505 0 is_stmt 1
 1853 06de 07F14C03 		add	r3, r7, #76
 1854 06e2 1846     		mov	r0, r3
 1855 06e4 FFF7FEFF 		bl	strlen
 1856 06e8 0346     		mov	r3, r0
 1857 06ea 87F85E32 		strb	r3, [r7, #606]
 506:..\src/command_processing.c ****         
 507:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1858              		.loc 1 507 0
 1859 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1860 06f2 87F85D32 		strb	r3, [r7, #605]
 1861 06f6 22E0     		b	.L113
 1862              	.L114:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 57


 508:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1863              		.loc 1 508 0 discriminator 3
 1864 06f8 07F10F03 		add	r3, r7, #15
 1865 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1866 06fe 3222     		movs	r2, #50
 1867 0700 02FB03F3 		mul	r3, r2, r3
 1868 0704 9A1C     		adds	r2, r3, #2
 1869 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1870 070a 9621     		movs	r1, #150
 1871 070c 01FB03F3 		mul	r3, r1, r3
 1872 0710 1A44     		add	r2, r2, r3
 1873 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1874 0716 1A44     		add	r2, r2, r3
 1875 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1876 071c D31A     		subs	r3, r2, r3
 1877 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1878 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1879 0726 8A1A     		subs	r2, r1, r2
 1880 0728 07F14C01 		add	r1, r7, #76
 1881 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1882 072e D7F84422 		ldr	r2, [r7, #580]
 1883 0732 D154     		strb	r1, [r2, r3]
 507:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1884              		.loc 1 507 0 discriminator 3
 1885 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1886 0738 013B     		subs	r3, r3, #1
 1887 073a 87F85D32 		strb	r3, [r7, #605]
 1888              	.L113:
 507:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1889              		.loc 1 507 0 is_stmt 0 discriminator 1
 1890 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1891 0742 002B     		cmp	r3, #0
 1892 0744 D8D1     		bne	.L114
 488:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1893              		.loc 1 488 0 is_stmt 1 discriminator 2
 1894 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1895 074a 0133     		adds	r3, r3, #1
 1896 074c 87F85C32 		strb	r3, [r7, #604]
 1897              	.L107:
 488:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1898              		.loc 1 488 0 is_stmt 0 discriminator 1
 1899 0750 07F10E03 		add	r3, r7, #14
 1900 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1901 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 075a 9A42     		cmp	r2, r3
 1903 075c FFF437AF 		bcc	.L115
 509:..\src/command_processing.c ****     }
 510:..\src/command_processing.c ****         
 511:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1904              		.loc 1 511 0 is_stmt 1
 1905 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1906 0764 5C1E     		subs	r4, r3, #1
 1907 0766 D7F84422 		ldr	r2, [r7, #580]
 1908 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1909 076e DBB2     		uxtb	r3, r3
 1910 0770 013B     		subs	r3, r3, #1
 1911 0772 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 58


 1912 0774 1946     		mov	r1, r3
 1913 0776 1046     		mov	r0, r2
 1914 0778 FFF7FEFF 		bl	LCRChecksum
 1915 077c 0346     		mov	r3, r0
 1916 077e 1A46     		mov	r2, r3
 1917 0780 D7F84432 		ldr	r3, [r7, #580]
 1918 0784 1A55     		strb	r2, [r3, r4]
 512:..\src/command_processing.c ****     
 513:..\src/command_processing.c ****     if (sendToDevice)
 1919              		.loc 1 513 0
 1920 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1921 078a 002B     		cmp	r3, #0
 1922 078c 07D0     		beq	.L116
 514:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1923              		.loc 1 514 0
 1924 078e D7F84432 		ldr	r3, [r7, #580]
 1925 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1926 0796 1146     		mov	r1, r2
 1927 0798 1846     		mov	r0, r3
 1928 079a FFF7FEFF 		bl	commWrite
 1929              	.L116:
 1930 079e B546     		mov	sp, r6
 515:..\src/command_processing.c ****     }
 516:..\src/command_processing.c ****     else {
 517:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 518:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 519:..\src/command_processing.c ****       // longPkgSize = packet_length;
 520:..\src/command_processing.c ****     }
 521:..\src/command_processing.c **** }
 1931              		.loc 1 521 0
 1932 07a0 00BF     		nop
 1933 07a2 07F51977 		add	r7, r7, #612
 1934              		.cfi_def_cfa_offset 28
 1935 07a6 BD46     		mov	sp, r7
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1939              	.L121:
 1940              		.align	2
 1941              	.L120:
 1942 07ac 00000000 		.word	.LC8
 1943 07b0 08000000 		.word	.LC15
 1944 07b4 20000000 		.word	.LC16
 1945 07b8 28000000 		.word	.LC17
 1946              		.cfi_endproc
 1947              	.LFE68:
 1948              		.size	get_param_list, .-get_param_list
 1949              		.section	.rodata
 1950 002a 0000     		.align	2
 1951              	.LC19:
 1952 002c 44657669 		.ascii	"Device ID:\000"
 1952      63652049 
 1952      443A00
 1953 0037 00       		.align	2
 1954              	.LC20:
 1955 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1955      74687265 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 59


 1955      73686F6C 
 1955      64733A00 
 1956              		.align	2
 1957              	.LC21:
 1958 0048 454D4720 		.ascii	"EMG max values:\000"
 1958      6D617820 
 1958      76616C75 
 1958      65733A00 
 1959              		.align	2
 1960              	.LC22:
 1961 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1961      6D617820 
 1961      73706565 
 1961      64733A00 
 1962              		.align	2
 1963              	.LC23:
 1964 0068 454D4720 		.ascii	"EMG inversion:\000"
 1964      696E7665 
 1964      7273696F 
 1964      6E3A00
 1965 0077 00       		.align	2
 1966              	.LC24:
 1967 0078 4D617374 		.ascii	"Master Mode:\000"
 1967      6572204D 
 1967      6F64653A 
 1967      00
 1968 0085 000000   		.align	2
 1969              	.LC25:
 1970 0088 536C6176 		.ascii	"Slave ID:\000"
 1970      65204944 
 1970      3A00
 1971 0092 0000     		.align	2
 1972              	.LC26:
 1973 0094 536C6176 		.ascii	"Slave resolution:\000"
 1973      65207265 
 1973      736F6C75 
 1973      74696F6E 
 1973      3A00
 1974 00a6 0000     		.align	2
 1975              	.LC27:
 1976 00a8 496E7075 		.ascii	"Input mode:\000"
 1976      74206D6F 
 1976      64653A00 
 1977              		.align	2
 1978              	.LC28:
 1979 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1979      206C696D 
 1979      69747320 
 1979      5B696E66 
 1979      2C207375 
 1980              		.align	2
 1981              	.LC29:
 1982 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1982      6F746163 
 1982      74696C65 
 1982      20466565 
 1982      64626163 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 60


 1983 00e3 00       		.align	2
 1984              	.LC30:
 1985 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1985      4368616D 
 1985      62657220 
 1985      46656564 
 1985      6261636B 
 1986 00fa 0000     		.align	2
 1987              	.LC31:
 1988 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1988      6D756D20 
 1988      736C6176 
 1988      65207265 
 1988      73696475 
 1989              		.align	2
 1990              	.LC32:
 1991 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1991      6D756D20 
 1991      70726573 
 1991      73757265 
 1991      20666565 
 1992 013d 000000   		.align	2
 1993              	.LC33:
 1994 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1994      6F727469 
 1994      6F6E616C 
 1994      20707265 
 1994      73737572 
 1995 0162 0000     		.align	2
 1996              	.LC0:
 1997 0164 20557362 		.ascii	" Usb\000"
 1997      00
 1998 0169 000000   		.align	2
 1999              	.LC1:
 2000 016c 2048616E 		.ascii	" Handle\000"
 2000      646C6500 
 2001              		.align	2
 2002              	.LC2:
 2003 0174 20454D47 		.ascii	" EMG proportional\000"
 2003      2070726F 
 2003      706F7274 
 2003      696F6E61 
 2003      6C00
 2004 0186 0000     		.align	2
 2005              	.LC3:
 2006 0188 20454D47 		.ascii	" EMG Integral\000"
 2006      20496E74 
 2006      65677261 
 2006      6C00
 2007 0196 0000     		.align	2
 2008              	.LC4:
 2009 0198 20454D47 		.ascii	" EMG FCFS\000"
 2009      20464346 
 2009      5300
 2010 01a2 0000     		.align	2
 2011              	.LC5:
 2012 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 61


 2012      20464346 
 2012      53204164 
 2012      76616E63 
 2012      656400
 2013 01b7 00       		.align	2
 2014              	.LC6:
 2015 01b8 204A6F79 		.ascii	" Joystick\000"
 2015      73746963 
 2015      6B00
 2016 01c2 0000     		.align	2
 2017              	.LC7:
 2018 01c4 20454D47 		.ascii	" EMG proportional NC\000"
 2018      2070726F 
 2018      706F7274 
 2018      696F6E61 
 2018      6C204E43 
 2019 01d9 000000   		.align	2
 2020              	.LC9:
 2021 01dc 204E4F00 		.ascii	" NO\000"
 2022              		.align	2
 2023              	.LC10:
 2024 01e0 20594553 		.ascii	" YES\000"
 2024      00
 2025 01e5 000000   		.align	2
 2026              	.LC11:
 2027 01e8 204F4646 		.ascii	" OFF\000"
 2027      00
 2028 01ed 000000   		.align	2
 2029              	.LC12:
 2030 01f0 204F4E00 		.ascii	" ON\000"
 2031              		.align	2
 2032              	.LC18:
 2033 01f4 01       		.byte	1
 2034 01f5 00       		.byte	0
 2035 01f6 0000     		.space	2
 2036 01f8 64010000 		.word	.LC0
 2037 01fc 6C010000 		.word	.LC1
 2038 0200 74010000 		.word	.LC2
 2039 0204 88010000 		.word	.LC3
 2040 0208 98010000 		.word	.LC4
 2041 020c A4010000 		.word	.LC5
 2042 0210 B8010000 		.word	.LC6
 2043 0214 C4010000 		.word	.LC7
 2044 0218 00000000 		.word	.LC8
 2045 021c 00000000 		.word	.LC8
 2046 0220 03       		.byte	3
 2047 0221 00       		.byte	0
 2048 0222 0000     		.space	2
 2049 0224 DC010000 		.word	.LC9
 2050 0228 E0010000 		.word	.LC10
 2051 022c 00000000 		.word	.LC8
 2052 0230 00000000 		.word	.LC8
 2053 0234 00000000 		.word	.LC8
 2054 0238 00000000 		.word	.LC8
 2055 023c 00000000 		.word	.LC8
 2056 0240 00000000 		.word	.LC8
 2057 0244 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 62


 2058 0248 00000000 		.word	.LC8
 2059 024c 05       		.byte	5
 2060 024d 01       		.byte	1
 2061 024e 0000     		.space	2
 2062 0250 E8010000 		.word	.LC11
 2063 0254 F0010000 		.word	.LC12
 2064 0258 00000000 		.word	.LC8
 2065 025c 00000000 		.word	.LC8
 2066 0260 00000000 		.word	.LC8
 2067 0264 00000000 		.word	.LC8
 2068 0268 00000000 		.word	.LC8
 2069 026c 00000000 		.word	.LC8
 2070 0270 00000000 		.word	.LC8
 2071 0274 00000000 		.word	.LC8
 2072              		.section	.text.manage_param_list,"ax",%progbits
 2073              		.align	2
 2074              		.global	manage_param_list
 2075              		.thumb
 2076              		.thumb_func
 2077              		.type	manage_param_list, %function
 2078              	manage_param_list:
 2079              	.LFB69:
 522:..\src/command_processing.c **** 
 523:..\src/command_processing.c **** //==============================================================================
 524:..\src/command_processing.c **** // MANAGE PARAM LIST
 525:..\src/command_processing.c **** //==============================================================================
 526:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 2080              		.loc 1 526 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 456
 2083              		@ frame_needed = 1, uses_anonymous_args = 0
 2084 0000 90B5     		push	{r4, r7, lr}
 2085              		.cfi_def_cfa_offset 12
 2086              		.cfi_offset 4, -12
 2087              		.cfi_offset 7, -8
 2088              		.cfi_offset 14, -4
 2089 0002 F5B0     		sub	sp, sp, #468
 2090              		.cfi_def_cfa_offset 480
 2091 0004 02AF     		add	r7, sp, #8
 2092              		.cfi_def_cfa 7, 472
 2093 0006 0246     		mov	r2, r0
 2094 0008 BB1D     		adds	r3, r7, #6
 2095 000a 1A80     		strh	r2, [r3]	@ movhi
 2096 000c 7B1D     		adds	r3, r7, #5
 2097 000e 0A46     		mov	r2, r1
 2098 0010 1A70     		strb	r2, [r3]
 527:..\src/command_processing.c ****     uint8 CYDATA i, j;
 528:..\src/command_processing.c ****     
 529:..\src/command_processing.c ****     uint8 PARAM_IDX;
 530:..\src/command_processing.c ****          
 531:..\src/command_processing.c ****     // Arrays
 532:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2099              		.loc 1 532 0
 2100 0012 ED4B     		ldr	r3, .L137
 2101 0014 C7F8C031 		str	r3, [r7, #448]
 533:..\src/command_processing.c ****     
 534:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 63


 2102              		.loc 1 534 0
 2103 0018 BB1D     		adds	r3, r7, #6
 2104 001a 1B88     		ldrh	r3, [r3]
 2105 001c 002B     		cmp	r3, #0
 2106 001e 02D0     		beq	.L123
 535:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2107              		.loc 1 535 0
 2108 0020 EA4B     		ldr	r3, .L137+4
 2109 0022 C7F8C031 		str	r3, [r7, #448]
 2110              	.L123:
 536:..\src/command_processing.c ****     }
 537:..\src/command_processing.c **** 
 538:..\src/command_processing.c ****     struct menu menu_type;
 539:..\src/command_processing.c ****     
 540:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 541:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2111              		.loc 1 541 0
 2112 0026 EA4A     		ldr	r2, .L137+8
 2113 0028 07F58673 		add	r3, r7, #268
 2114 002c 1146     		mov	r1, r2
 2115 002e 8422     		movs	r2, #132
 2116 0030 1846     		mov	r0, r3
 2117 0032 FFF7FEFF 		bl	memcpy
 542:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 543:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 544:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 545:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 546:..\src/command_processing.c ****        };
 547:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 548:..\src/command_processing.c ****         
 549:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2118              		.loc 1 549 0
 2119 0036 0323     		movs	r3, #3
 2120 0038 87F8BF31 		strb	r3, [r7, #447]
 550:..\src/command_processing.c ****     
 551:..\src/command_processing.c ****     struct parameter param_type;
 552:..\src/command_processing.c ****     
 553:..\src/command_processing.c ****     const struct parameter PARAM_LIST[]=
 554:..\src/command_processing.c ****     {
 555:..\src/command_processing.c ****     //  {VAR_P                                              , TYPES           , NUM_ITEMS , PARAM_S
 556:..\src/command_processing.c ****         {(uint8*)&(MEM_P->dev.id)                         , TYPE_UINT8      , 1         , "Device I
 2121              		.loc 1 556 0
 2122 003c D7F8C031 		ldr	r3, [r7, #448]
 2123 0040 03F11002 		add	r2, r3, #16
 553:..\src/command_processing.c ****     {
 2124              		.loc 1 553 0
 2125 0044 07F10C03 		add	r3, r7, #12
 2126 0048 1A60     		str	r2, [r3]
 2127 004a 07F10C03 		add	r3, r7, #12
 2128 004e 0222     		movs	r2, #2
 2129 0050 1A71     		strb	r2, [r3, #4]
 2130 0052 07F10C03 		add	r3, r7, #12
 2131 0056 0122     		movs	r2, #1
 2132 0058 5A71     		strb	r2, [r3, #5]
 2133 005a 07F10C03 		add	r3, r7, #12
 2134 005e DD4A     		ldr	r2, .L137+12
 2135 0060 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 64


 2136 0062 07F10C03 		add	r3, r7, #12
 2137 0066 0022     		movs	r2, #0
 2138 0068 1A73     		strb	r2, [r3, #12]
 2139 006a 07F10C03 		add	r3, r7, #12
 2140 006e 0022     		movs	r2, #0
 2141 0070 5A73     		strb	r2, [r3, #13]
 2142 0072 07F10C03 		add	r3, r7, #12
 2143 0076 0022     		movs	r2, #0
 2144 0078 9A73     		strb	r2, [r3, #14]
 557:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , "EMG th
 2145              		.loc 1 557 0
 2146 007a D7F8C031 		ldr	r3, [r7, #448]
 2147 007e 03F13002 		add	r2, r3, #48
 553:..\src/command_processing.c ****     {
 2148              		.loc 1 553 0
 2149 0082 07F10C03 		add	r3, r7, #12
 2150 0086 1A61     		str	r2, [r3, #16]
 2151 0088 07F10C03 		add	r3, r7, #12
 2152 008c 0422     		movs	r2, #4
 2153 008e 1A75     		strb	r2, [r3, #20]
 2154 0090 07F10C03 		add	r3, r7, #12
 2155 0094 0222     		movs	r2, #2
 2156 0096 5A75     		strb	r2, [r3, #21]
 2157 0098 07F10C03 		add	r3, r7, #12
 2158 009c CE4A     		ldr	r2, .L137+16
 2159 009e 9A61     		str	r2, [r3, #24]
 2160 00a0 07F10C03 		add	r3, r7, #12
 2161 00a4 0022     		movs	r2, #0
 2162 00a6 1A77     		strb	r2, [r3, #28]
 2163 00a8 07F10C03 		add	r3, r7, #12
 2164 00ac 1E22     		movs	r2, #30
 2165 00ae 5A77     		strb	r2, [r3, #29]
 2166 00b0 07F10C03 		add	r3, r7, #12
 2167 00b4 0022     		movs	r2, #0
 2168 00b6 9A77     		strb	r2, [r3, #30]
 558:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , "EMG ma
 2169              		.loc 1 558 0
 2170 00b8 D7F8C031 		ldr	r3, [r7, #448]
 2171 00bc 03F13402 		add	r2, r3, #52
 553:..\src/command_processing.c ****     {
 2172              		.loc 1 553 0
 2173 00c0 07F10C03 		add	r3, r7, #12
 2174 00c4 1A62     		str	r2, [r3, #32]
 2175 00c6 07F10C03 		add	r3, r7, #12
 2176 00ca 0622     		movs	r2, #6
 2177 00cc 83F82420 		strb	r2, [r3, #36]
 2178 00d0 07F10C03 		add	r3, r7, #12
 2179 00d4 0222     		movs	r2, #2
 2180 00d6 83F82520 		strb	r2, [r3, #37]
 2181 00da 07F10C03 		add	r3, r7, #12
 2182 00de BF4A     		ldr	r2, .L137+20
 2183 00e0 9A62     		str	r2, [r3, #40]
 2184 00e2 07F10C03 		add	r3, r7, #12
 2185 00e6 0022     		movs	r2, #0
 2186 00e8 83F82C20 		strb	r2, [r3, #44]
 2187 00ec 07F10C03 		add	r3, r7, #12
 2188 00f0 1E22     		movs	r2, #30
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 65


 2189 00f2 83F82D20 		strb	r2, [r3, #45]
 2190 00f6 07F10C03 		add	r3, r7, #12
 2191 00fa 0022     		movs	r2, #0
 2192 00fc 83F82E20 		strb	r2, [r3, #46]
 559:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , "EMG ma
 2193              		.loc 1 559 0
 2194 0100 D7F8C031 		ldr	r3, [r7, #448]
 2195 0104 03F13C02 		add	r2, r3, #60
 553:..\src/command_processing.c ****     {
 2196              		.loc 1 553 0
 2197 0108 07F10C03 		add	r3, r7, #12
 2198 010c 1A63     		str	r2, [r3, #48]
 2199 010e 07F10C03 		add	r3, r7, #12
 2200 0112 0222     		movs	r2, #2
 2201 0114 83F83420 		strb	r2, [r3, #52]
 2202 0118 07F10C03 		add	r3, r7, #12
 2203 011c 0222     		movs	r2, #2
 2204 011e 83F83520 		strb	r2, [r3, #53]
 2205 0122 07F10C03 		add	r3, r7, #12
 2206 0126 AE4A     		ldr	r2, .L137+24
 2207 0128 9A63     		str	r2, [r3, #56]
 2208 012a 07F10C03 		add	r3, r7, #12
 2209 012e 0022     		movs	r2, #0
 2210 0130 83F83C20 		strb	r2, [r3, #60]
 2211 0134 07F10C03 		add	r3, r7, #12
 2212 0138 1E22     		movs	r2, #30
 2213 013a 83F83D20 		strb	r2, [r3, #61]
 2214 013e 07F10C03 		add	r3, r7, #12
 2215 0142 0022     		movs	r2, #0
 2216 0144 83F83E20 		strb	r2, [r3, #62]
 560:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , "EMG in
 2217              		.loc 1 560 0
 2218 0148 D7F8C031 		ldr	r3, [r7, #448]
 2219 014c 03F13E02 		add	r2, r3, #62
 553:..\src/command_processing.c ****     {
 2220              		.loc 1 553 0
 2221 0150 07F10C03 		add	r3, r7, #12
 2222 0154 1A64     		str	r2, [r3, #64]
 2223 0156 07F10C03 		add	r3, r7, #12
 2224 015a 0022     		movs	r2, #0
 2225 015c 83F84420 		strb	r2, [r3, #68]
 2226 0160 07F10C03 		add	r3, r7, #12
 2227 0164 0122     		movs	r2, #1
 2228 0166 83F84520 		strb	r2, [r3, #69]
 2229 016a 07F10C03 		add	r3, r7, #12
 2230 016e 9D4A     		ldr	r2, .L137+28
 2231 0170 9A64     		str	r2, [r3, #72]
 2232 0172 07F10C03 		add	r3, r7, #12
 2233 0176 0322     		movs	r2, #3
 2234 0178 83F84C20 		strb	r2, [r3, #76]
 2235 017c 07F10C03 		add	r3, r7, #12
 2236 0180 1E22     		movs	r2, #30
 2237 0182 83F84D20 		strb	r2, [r3, #77]
 2238 0186 07F10C03 		add	r3, r7, #12
 2239 018a 0022     		movs	r2, #0
 2240 018c 83F84E20 		strb	r2, [r3, #78]
 561:..\src/command_processing.c ****         {(uint8*)&(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , "Master
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 66


 2241              		.loc 1 561 0
 2242 0190 D7F8C031 		ldr	r3, [r7, #448]
 2243 0194 03F14002 		add	r2, r3, #64
 553:..\src/command_processing.c ****     {
 2244              		.loc 1 553 0
 2245 0198 07F10C03 		add	r3, r7, #12
 2246 019c 1A65     		str	r2, [r3, #80]
 2247 019e 07F10C03 		add	r3, r7, #12
 2248 01a2 0022     		movs	r2, #0
 2249 01a4 83F85420 		strb	r2, [r3, #84]
 2250 01a8 07F10C03 		add	r3, r7, #12
 2251 01ac 0122     		movs	r2, #1
 2252 01ae 83F85520 		strb	r2, [r3, #85]
 2253 01b2 07F10C03 		add	r3, r7, #12
 2254 01b6 8C4A     		ldr	r2, .L137+32
 2255 01b8 9A65     		str	r2, [r3, #88]
 2256 01ba 07F10C03 		add	r3, r7, #12
 2257 01be 0522     		movs	r2, #5
 2258 01c0 83F85C20 		strb	r2, [r3, #92]
 2259 01c4 07F10C03 		add	r3, r7, #12
 2260 01c8 5022     		movs	r2, #80
 2261 01ca 83F85D20 		strb	r2, [r3, #93]
 2262 01ce 07F10C03 		add	r3, r7, #12
 2263 01d2 0022     		movs	r2, #0
 2264 01d4 83F85E20 		strb	r2, [r3, #94]
 562:..\src/command_processing.c ****         {(uint8*)&(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , "Slave 
 2265              		.loc 1 562 0
 2266 01d8 D7F8C031 		ldr	r3, [r7, #448]
 2267 01dc 03F14102 		add	r2, r3, #65
 553:..\src/command_processing.c ****     {
 2268              		.loc 1 553 0
 2269 01e0 07F10C03 		add	r3, r7, #12
 2270 01e4 1A66     		str	r2, [r3, #96]
 2271 01e6 07F10C03 		add	r3, r7, #12
 2272 01ea 0222     		movs	r2, #2
 2273 01ec 83F86420 		strb	r2, [r3, #100]
 2274 01f0 07F10C03 		add	r3, r7, #12
 2275 01f4 0122     		movs	r2, #1
 2276 01f6 83F86520 		strb	r2, [r3, #101]
 2277 01fa 07F10C03 		add	r3, r7, #12
 2278 01fe 7B4A     		ldr	r2, .L137+36
 2279 0200 9A66     		str	r2, [r3, #104]
 2280 0202 07F10C03 		add	r3, r7, #12
 2281 0206 0022     		movs	r2, #0
 2282 0208 83F86C20 		strb	r2, [r3, #108]
 2283 020c 07F10C03 		add	r3, r7, #12
 2284 0210 5022     		movs	r2, #80
 2285 0212 83F86D20 		strb	r2, [r3, #109]
 2286 0216 07F10C03 		add	r3, r7, #12
 2287 021a 0022     		movs	r2, #0
 2288 021c 83F86E20 		strb	r2, [r3, #110]
 563:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , "Slave 
 2289              		.loc 1 563 0
 2290 0220 D7F8C031 		ldr	r3, [r7, #448]
 2291 0224 03F12902 		add	r2, r3, #41
 553:..\src/command_processing.c ****     {
 2292              		.loc 1 553 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 67


 2293 0228 07F10C03 		add	r3, r7, #12
 2294 022c 1A67     		str	r2, [r3, #112]
 2295 022e 07F10C03 		add	r3, r7, #12
 2296 0232 0222     		movs	r2, #2
 2297 0234 83F87420 		strb	r2, [r3, #116]
 2298 0238 07F10C03 		add	r3, r7, #12
 2299 023c 0122     		movs	r2, #1
 2300 023e 83F87520 		strb	r2, [r3, #117]
 2301 0242 07F10C03 		add	r3, r7, #12
 2302 0246 6A4A     		ldr	r2, .L137+40
 2303 0248 9A67     		str	r2, [r3, #120]
 2304 024a 07F10C03 		add	r3, r7, #12
 2305 024e 0022     		movs	r2, #0
 2306 0250 83F87C20 		strb	r2, [r3, #124]
 2307 0254 07F10C03 		add	r3, r7, #12
 2308 0258 5022     		movs	r2, #80
 2309 025a 83F87D20 		strb	r2, [r3, #125]
 2310 025e 07F10C03 		add	r3, r7, #12
 2311 0262 0022     		movs	r2, #0
 2312 0264 83F87E20 		strb	r2, [r3, #126]
 564:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , "Input 
 2313              		.loc 1 564 0
 2314 0268 D7F8C031 		ldr	r3, [r7, #448]
 2315 026c 03F12802 		add	r2, r3, #40
 553:..\src/command_processing.c ****     {
 2316              		.loc 1 553 0
 2317 0270 07F10C03 		add	r3, r7, #12
 2318 0274 C3F88020 		str	r2, [r3, #128]
 2319 0278 07F10C03 		add	r3, r7, #12
 2320 027c 0022     		movs	r2, #0
 2321 027e 83F88420 		strb	r2, [r3, #132]
 2322 0282 07F10C03 		add	r3, r7, #12
 2323 0286 0122     		movs	r2, #1
 2324 0288 83F88520 		strb	r2, [r3, #133]
 2325 028c 07F10C03 		add	r3, r7, #12
 2326 0290 584A     		ldr	r2, .L137+44
 2327 0292 C3F88820 		str	r2, [r3, #136]
 2328 0296 07F10C03 		add	r3, r7, #12
 2329 029a 0122     		movs	r2, #1
 2330 029c 83F88C20 		strb	r2, [r3, #140]
 2331 02a0 07F10C03 		add	r3, r7, #12
 2332 02a4 5022     		movs	r2, #80
 2333 02a6 83F88D20 		strb	r2, [r3, #141]
 2334 02aa 07F10C03 		add	r3, r7, #12
 2335 02ae 0322     		movs	r2, #3
 2336 02b0 83F88E20 		strb	r2, [r3, #142]
 565:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , "Pos. l
 2337              		.loc 1 565 0
 2338 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2339 02b8 03F12002 		add	r2, r3, #32
 553:..\src/command_processing.c ****     {
 2340              		.loc 1 553 0
 2341 02bc 07F10C03 		add	r3, r7, #12
 2342 02c0 C3F89020 		str	r2, [r3, #144]
 2343 02c4 07F10C03 		add	r3, r7, #12
 2344 02c8 0522     		movs	r2, #5
 2345 02ca 83F89420 		strb	r2, [r3, #148]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 68


 2346 02ce 07F10C03 		add	r3, r7, #12
 2347 02d2 0222     		movs	r2, #2
 2348 02d4 83F89520 		strb	r2, [r3, #149]
 2349 02d8 07F10C03 		add	r3, r7, #12
 2350 02dc 464A     		ldr	r2, .L137+48
 2351 02de C3F89820 		str	r2, [r3, #152]
 2352 02e2 07F10C03 		add	r3, r7, #12
 2353 02e6 0022     		movs	r2, #0
 2354 02e8 83F89C20 		strb	r2, [r3, #156]
 2355 02ec 07F10C03 		add	r3, r7, #12
 2356 02f0 5022     		movs	r2, #80
 2357 02f2 83F89D20 		strb	r2, [r3, #157]
 2358 02f6 07F10C03 		add	r3, r7, #12
 2359 02fa 0522     		movs	r2, #5
 2360 02fc 83F89E20 		strb	r2, [r3, #158]
 566:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , "Vibrot
 2361              		.loc 1 566 0
 2362 0300 D7F8C031 		ldr	r3, [r7, #448]
 2363 0304 03F15C02 		add	r2, r3, #92
 553:..\src/command_processing.c ****     {
 2364              		.loc 1 553 0
 2365 0308 07F10C03 		add	r3, r7, #12
 2366 030c C3F8A020 		str	r2, [r3, #160]
 2367 0310 07F10C03 		add	r3, r7, #12
 2368 0314 0022     		movs	r2, #0
 2369 0316 83F8A420 		strb	r2, [r3, #164]
 2370 031a 07F10C03 		add	r3, r7, #12
 2371 031e 0122     		movs	r2, #1
 2372 0320 83F8A520 		strb	r2, [r3, #165]
 2373 0324 07F10C03 		add	r3, r7, #12
 2374 0328 344A     		ldr	r2, .L137+52
 2375 032a C3F8A820 		str	r2, [r3, #168]
 2376 032e 07F10C03 		add	r3, r7, #12
 2377 0332 0522     		movs	r2, #5
 2378 0334 83F8AC20 		strb	r2, [r3, #172]
 2379 0338 07F10C03 		add	r3, r7, #12
 2380 033c 5022     		movs	r2, #80
 2381 033e 83F8AD20 		strb	r2, [r3, #173]
 2382 0342 07F10C03 		add	r3, r7, #12
 2383 0346 0022     		movs	r2, #0
 2384 0348 83F8AE20 		strb	r2, [r3, #174]
 567:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , "Air Ch
 2385              		.loc 1 567 0
 2386 034c D7F8C031 		ldr	r3, [r7, #448]
 2387 0350 03F15D02 		add	r2, r3, #93
 553:..\src/command_processing.c ****     {
 2388              		.loc 1 553 0
 2389 0354 07F10C03 		add	r3, r7, #12
 2390 0358 C3F8B020 		str	r2, [r3, #176]
 2391 035c 07F10C03 		add	r3, r7, #12
 2392 0360 0022     		movs	r2, #0
 2393 0362 83F8B420 		strb	r2, [r3, #180]
 2394 0366 07F10C03 		add	r3, r7, #12
 2395 036a 0122     		movs	r2, #1
 2396 036c 83F8B520 		strb	r2, [r3, #181]
 2397 0370 07F10C03 		add	r3, r7, #12
 2398 0374 224A     		ldr	r2, .L137+56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 69


 2399 0376 C3F8B820 		str	r2, [r3, #184]
 2400 037a 07F10C03 		add	r3, r7, #12
 2401 037e 0522     		movs	r2, #5
 2402 0380 83F8BC20 		strb	r2, [r3, #188]
 2403 0384 07F10C03 		add	r3, r7, #12
 2404 0388 5022     		movs	r2, #80
 2405 038a 83F8BD20 		strb	r2, [r3, #189]
 2406 038e 07F10C03 		add	r3, r7, #12
 2407 0392 0022     		movs	r2, #0
 2408 0394 83F8BE20 		strb	r2, [r3, #190]
 568:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , "Maximu
 2409              		.loc 1 568 0
 2410 0398 D7F8C031 		ldr	r3, [r7, #448]
 2411 039c 03F15002 		add	r2, r3, #80
 553:..\src/command_processing.c ****     {
 2412              		.loc 1 553 0
 2413 03a0 07F10C03 		add	r3, r7, #12
 2414 03a4 C3F8C020 		str	r2, [r3, #192]
 2415 03a8 07F10C03 		add	r3, r7, #12
 2416 03ac 0522     		movs	r2, #5
 2417 03ae 83F8C420 		strb	r2, [r3, #196]
 2418 03b2 07F10C03 		add	r3, r7, #12
 2419 03b6 0122     		movs	r2, #1
 2420 03b8 83F8C520 		strb	r2, [r3, #197]
 2421 03bc 07F10C03 		add	r3, r7, #12
 2422 03c0 104A     		ldr	r2, .L137+60
 2423 03c2 C3F8C820 		str	r2, [r3, #200]
 2424 03c6 1FE0     		b	.L138
 2425              	.L139:
 2426              		.align	2
 2427              	.L137:
 2428 03c8 00000000 		.word	c_mem
 2429 03cc 00000000 		.word	g_mem
 2430 03d0 F4010000 		.word	.LC18
 2431 03d4 2C000000 		.word	.LC19
 2432 03d8 38000000 		.word	.LC20
 2433 03dc 48000000 		.word	.LC21
 2434 03e0 58000000 		.word	.LC22
 2435 03e4 68000000 		.word	.LC23
 2436 03e8 78000000 		.word	.LC24
 2437 03ec 88000000 		.word	.LC25
 2438 03f0 94000000 		.word	.LC26
 2439 03f4 A8000000 		.word	.LC27
 2440 03f8 B4000000 		.word	.LC28
 2441 03fc CC000000 		.word	.LC29
 2442 0400 E4000000 		.word	.LC30
 2443 0404 FC000000 		.word	.LC31
 2444              	.L138:
 2445 0408 07F10C03 		add	r3, r7, #12
 2446 040c 0022     		movs	r2, #0
 2447 040e 83F8CC20 		strb	r2, [r3, #204]
 2448 0412 07F10C03 		add	r3, r7, #12
 2449 0416 5022     		movs	r2, #80
 2450 0418 83F8CD20 		strb	r2, [r3, #205]
 2451 041c 07F10C03 		add	r3, r7, #12
 2452 0420 0022     		movs	r2, #0
 2453 0422 83F8CE20 		strb	r2, [r3, #206]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 70


 569:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , "Maximu
 2454              		.loc 1 569 0
 2455 0426 D7F8C031 		ldr	r3, [r7, #448]
 2456 042a 03F15402 		add	r2, r3, #84
 553:..\src/command_processing.c ****     {
 2457              		.loc 1 553 0
 2458 042e 07F10C03 		add	r3, r7, #12
 2459 0432 C3F8D020 		str	r2, [r3, #208]
 2460 0436 07F10C03 		add	r3, r7, #12
 2461 043a 0722     		movs	r2, #7
 2462 043c 83F8D420 		strb	r2, [r3, #212]
 2463 0440 07F10C03 		add	r3, r7, #12
 2464 0444 0122     		movs	r2, #1
 2465 0446 83F8D520 		strb	r2, [r3, #213]
 2466 044a 07F10C03 		add	r3, r7, #12
 2467 044e 894A     		ldr	r2, .L140
 2468 0450 C3F8D820 		str	r2, [r3, #216]
 2469 0454 07F10C03 		add	r3, r7, #12
 2470 0458 0022     		movs	r2, #0
 2471 045a 83F8DC20 		strb	r2, [r3, #220]
 2472 045e 07F10C03 		add	r3, r7, #12
 2473 0462 5022     		movs	r2, #80
 2474 0464 83F8DD20 		strb	r2, [r3, #221]
 2475 0468 07F10C03 		add	r3, r7, #12
 2476 046c 0022     		movs	r2, #0
 2477 046e 83F8DE20 		strb	r2, [r3, #222]
 570:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , "Propor
 2478              		.loc 1 570 0
 2479 0472 D7F8C031 		ldr	r3, [r7, #448]
 2480 0476 03F15802 		add	r2, r3, #88
 553:..\src/command_processing.c ****     {
 2481              		.loc 1 553 0
 2482 047a 07F10C03 		add	r3, r7, #12
 2483 047e C3F8E020 		str	r2, [r3, #224]
 2484 0482 07F10C03 		add	r3, r7, #12
 2485 0486 0722     		movs	r2, #7
 2486 0488 83F8E420 		strb	r2, [r3, #228]
 2487 048c 07F10C03 		add	r3, r7, #12
 2488 0490 0122     		movs	r2, #1
 2489 0492 83F8E520 		strb	r2, [r3, #229]
 2490 0496 07F10C03 		add	r3, r7, #12
 2491 049a 774A     		ldr	r2, .L140+4
 2492 049c C3F8E820 		str	r2, [r3, #232]
 2493 04a0 07F10C03 		add	r3, r7, #12
 2494 04a4 0022     		movs	r2, #0
 2495 04a6 83F8EC20 		strb	r2, [r3, #236]
 2496 04aa 07F10C03 		add	r3, r7, #12
 2497 04ae 5022     		movs	r2, #80
 2498 04b0 83F8ED20 		strb	r2, [r3, #237]
 2499 04b4 07F10C03 		add	r3, r7, #12
 2500 04b8 0022     		movs	r2, #0
 2501 04ba 83F8EE20 		strb	r2, [r3, #238]
 571:..\src/command_processing.c ****     };
 572:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);    
 2502              		.loc 1 572 0
 2503 04be 0F23     		movs	r3, #15
 2504 04c0 87F8BE31 		strb	r3, [r7, #446]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 71


 573:..\src/command_processing.c **** 
 574:..\src/command_processing.c ****     if (!index) {
 2505              		.loc 1 574 0
 2506 04c4 BB1D     		adds	r3, r7, #6
 2507 04c6 1B88     		ldrh	r3, [r3]
 2508 04c8 002B     		cmp	r3, #0
 2509 04ca 0ED1     		bne	.L124
 575:..\src/command_processing.c ****         // Get parameters list with relative types
 576:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2510              		.loc 1 576 0
 2511 04cc 07F58674 		add	r4, r7, #268
 2512 04d0 07F10C02 		add	r2, r7, #12
 2513 04d4 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2514 04d8 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2515 04dc 7B1D     		adds	r3, r7, #5
 2516 04de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2517 04e0 0093     		str	r3, [sp]
 2518 04e2 2346     		mov	r3, r4
 2519 04e4 FFF7FEFF 		bl	get_param_list
 577:..\src/command_processing.c ****     }
 578:..\src/command_processing.c ****     else {
 579:..\src/command_processing.c ****          // Set specific parameter        
 580:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****         // Find size of data
 583:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 584:..\src/command_processing.c ****    
 585:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 586:..\src/command_processing.c ****             // Use default specifications for param setting
 587:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 588:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 589:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 590:..\src/command_processing.c ****                 }
 591:..\src/command_processing.c ****             } 
 592:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 593:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 594:..\src/command_processing.c ****         }
 595:..\src/command_processing.c ****         
 596:..\src/command_processing.c ****         else {  
 597:..\src/command_processing.c ****             // Use custom specifications for param setting
 598:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 599:..\src/command_processing.c ****         }
 600:..\src/command_processing.c ****         
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****         // Perform chip reset if needed
 603:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 604:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 605:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 606:..\src/command_processing.c ****             }   
 607:..\src/command_processing.c ****         }
 608:..\src/command_processing.c ****     }
 609:..\src/command_processing.c **** } 
 2520              		.loc 1 609 0
 2521 04e8 BEE0     		b	.L136
 2522              	.L124:
 2523              	.LBB24:
 580:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 72


 2524              		.loc 1 580 0
 2525 04ea BB1D     		adds	r3, r7, #6
 2526 04ec 1B88     		ldrh	r3, [r3]	@ movhi
 2527 04ee DBB2     		uxtb	r3, r3
 2528 04f0 013B     		subs	r3, r3, #1
 2529 04f2 87F8BD31 		strb	r3, [r7, #445]
 583:..\src/command_processing.c ****    
 2530              		.loc 1 583 0
 2531 04f6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2532 04fa 07F10C02 		add	r2, r7, #12
 2533 04fe 1B01     		lsls	r3, r3, #4
 2534 0500 1344     		add	r3, r3, r2
 2535 0502 0433     		adds	r3, r3, #4
 2536 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2537 0506 1846     		mov	r0, r3
 2538 0508 FFF7FEFF 		bl	num_of_bytes
 2539 050c 0346     		mov	r3, r0
 2540 050e 87F8BC31 		strb	r3, [r7, #444]
 585:..\src/command_processing.c ****             // Use default specifications for param setting
 2541              		.loc 1 585 0
 2542 0512 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2543 0516 07F10C02 		add	r2, r7, #12
 2544 051a 1B01     		lsls	r3, r3, #4
 2545 051c 1344     		add	r3, r3, r2
 2546 051e 0E33     		adds	r3, r3, #14
 2547 0520 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2548 0522 002B     		cmp	r3, #0
 2549 0524 5BD1     		bne	.L126
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 587 0
 2551 0526 0023     		movs	r3, #0
 2552 0528 87F8C731 		strb	r3, [r7, #455]
 2553 052c 2FE0     		b	.L127
 2554              	.L130:
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2555              		.loc 1 588 0
 2556 052e 0023     		movs	r3, #0
 2557 0530 87F8C631 		strb	r3, [r7, #454]
 2558 0534 1EE0     		b	.L128
 2559              	.L129:
 589:..\src/command_processing.c ****                 }
 2560              		.loc 1 589 0 discriminator 3
 2561 0536 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2562 053a 07F10C02 		add	r2, r7, #12
 2563 053e 1B01     		lsls	r3, r3, #4
 2564 0540 1344     		add	r3, r3, r2
 2565 0542 1A68     		ldr	r2, [r3]
 2566 0544 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2567 0548 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2568 054c 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2569 0550 411A     		subs	r1, r0, r1
 2570 0552 0B44     		add	r3, r3, r1
 2571 0554 013B     		subs	r3, r3, #1
 2572 0556 1344     		add	r3, r3, r2
 2573 0558 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2574 055c D11C     		adds	r1, r2, #3
 2575 055e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 73


 2576 0562 0A44     		add	r2, r2, r1
 2577 0564 4549     		ldr	r1, .L140+8
 2578 0566 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2579 0568 1A70     		strb	r2, [r3]
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2580              		.loc 1 588 0 discriminator 3
 2581 056a 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2582 056e 0133     		adds	r3, r3, #1
 2583 0570 87F8C631 		strb	r3, [r7, #454]
 2584              	.L128:
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2585              		.loc 1 588 0 is_stmt 0 discriminator 1
 2586 0574 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2587 0578 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2588 057c 9A42     		cmp	r2, r3
 2589 057e DAD3     		bcc	.L129
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2590              		.loc 1 587 0 is_stmt 1 discriminator 2
 2591 0580 97F8C721 		ldrb	r2, [r7, #455]
 2592 0584 97F8BC31 		ldrb	r3, [r7, #444]
 2593 0588 1344     		add	r3, r3, r2
 2594 058a 87F8C731 		strb	r3, [r7, #455]
 2595              	.L127:
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2596              		.loc 1 587 0 is_stmt 0 discriminator 1
 2597 058e 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2598 0592 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2599 0596 07F10C01 		add	r1, r7, #12
 2600 059a 1B01     		lsls	r3, r3, #4
 2601 059c 0B44     		add	r3, r3, r1
 2602 059e 0533     		adds	r3, r3, #5
 2603 05a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2604 05a2 1946     		mov	r1, r3
 2605 05a4 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2606 05a8 03FB01F3 		mul	r3, r3, r1
 2607 05ac 9A42     		cmp	r2, r3
 2608 05ae BEDB     		blt	.L130
 592:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2609              		.loc 1 592 0 is_stmt 1
 2610 05b0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2611 05b4 07F10C02 		add	r2, r7, #12
 2612 05b8 1B01     		lsls	r3, r3, #4
 2613 05ba 1344     		add	r3, r3, r2
 2614 05bc 0433     		adds	r3, r3, #4
 2615 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2616 05c0 092B     		cmp	r3, #9
 2617 05c2 15D1     		bne	.L132
 593:..\src/command_processing.c ****         }
 2618              		.loc 1 593 0
 2619 05c4 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2620 05c8 07F10C02 		add	r2, r7, #12
 2621 05cc 1B01     		lsls	r3, r3, #4
 2622 05ce 1344     		add	r3, r3, r2
 2623 05d0 1A68     		ldr	r2, [r3]
 2624 05d2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2625 05d6 1344     		add	r3, r3, r2
 2626 05d8 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 74


 2627 05da 1A70     		strb	r2, [r3]
 2628 05dc 08E0     		b	.L132
 2629              	.L126:
 598:..\src/command_processing.c ****         }
 2630              		.loc 1 598 0
 2631 05de 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2632 05e2 9BB2     		uxth	r3, r3
 2633 05e4 07F10C02 		add	r2, r7, #12
 2634 05e8 1146     		mov	r1, r2
 2635 05ea 1846     		mov	r0, r3
 2636 05ec FFF7FEFF 		bl	set_custom_param
 2637              	.L132:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2638              		.loc 1 603 0
 2639 05f0 0023     		movs	r3, #0
 2640 05f2 87F8C731 		strb	r3, [r7, #455]
 2641 05f6 31E0     		b	.L133
 2642              	.L135:
 604:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2643              		.loc 1 604 0
 2644 05f8 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 05fc 2C22     		movs	r2, #44
 2646 05fe 02FB03F3 		mul	r3, r2, r3
 2647 0602 07F5E472 		add	r2, r7, #456
 2648 0606 1344     		add	r3, r3, r2
 2649 0608 BC3B     		subs	r3, r3, #188
 2650 060a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2651 060c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2652 0610 07F10C01 		add	r1, r7, #12
 2653 0614 1B01     		lsls	r3, r3, #4
 2654 0616 0B44     		add	r3, r3, r1
 2655 0618 0C33     		adds	r3, r3, #12
 2656 061a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2657 061c 9A42     		cmp	r2, r3
 2658 061e 0CBF     		ite	eq
 2659 0620 0123     		moveq	r3, #1
 2660 0622 0023     		movne	r3, #0
 2661 0624 DAB2     		uxtb	r2, r3
 2662 0626 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2663 062a 2C21     		movs	r1, #44
 2664 062c 01FB03F3 		mul	r3, r1, r3
 2665 0630 07F5E471 		add	r1, r7, #456
 2666 0634 0B44     		add	r3, r3, r1
 2667 0636 BB3B     		subs	r3, r3, #187
 2668 0638 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2669 063a 012B     		cmp	r3, #1
 2670 063c 0CBF     		ite	eq
 2671 063e 0123     		moveq	r3, #1
 2672 0640 0023     		movne	r3, #0
 2673 0642 DBB2     		uxtb	r3, r3
 2674 0644 1340     		ands	r3, r3, r2
 2675 0646 DBB2     		uxtb	r3, r3
 2676 0648 002B     		cmp	r3, #0
 2677 064a 02D0     		beq	.L134
 605:..\src/command_processing.c ****             }   
 2678              		.loc 1 605 0
 2679 064c 0C4B     		ldr	r3, .L140+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 75


 2680 064e 0122     		movs	r2, #1
 2681 0650 1A70     		strb	r2, [r3]
 2682              	.L134:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2683              		.loc 1 603 0 discriminator 2
 2684 0652 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2685 0656 0133     		adds	r3, r3, #1
 2686 0658 87F8C731 		strb	r3, [r7, #455]
 2687              	.L133:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2688              		.loc 1 603 0 is_stmt 0 discriminator 1
 2689 065c 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2690 0660 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2691 0664 9A42     		cmp	r2, r3
 2692 0666 C7D3     		bcc	.L135
 2693              	.L136:
 2694              	.LBE24:
 2695              		.loc 1 609 0 is_stmt 1
 2696 0668 00BF     		nop
 2697 066a 07F5E677 		add	r7, r7, #460
 2698              		.cfi_def_cfa_offset 12
 2699 066e BD46     		mov	sp, r7
 2700              		.cfi_def_cfa_register 13
 2701              		@ sp needed
 2702 0670 90BD     		pop	{r4, r7, pc}
 2703              	.L141:
 2704 0672 00BF     		.align	2
 2705              	.L140:
 2706 0674 1C010000 		.word	.LC32
 2707 0678 40010000 		.word	.LC33
 2708 067c 00000000 		.word	g_rx
 2709 0680 00000000 		.word	reset_PSoC_flag
 2710              		.cfi_endproc
 2711              	.LFE69:
 2712              		.size	manage_param_list, .-manage_param_list
 2713              		.section	.text.set_custom_param,"ax",%progbits
 2714              		.align	2
 2715              		.global	set_custom_param
 2716              		.thumb
 2717              		.thumb_func
 2718              		.type	set_custom_param, %function
 2719              	set_custom_param:
 2720              	.LFB70:
 610:..\src/command_processing.c **** 
 611:..\src/command_processing.c **** 
 612:..\src/command_processing.c **** //==============================================================================
 613:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 614:..\src/command_processing.c **** //==============================================================================
 615:..\src/command_processing.c **** 
 616:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2721              		.loc 1 616 0
 2722              		.cfi_startproc
 2723              		@ args = 0, pretend = 0, frame = 16
 2724              		@ frame_needed = 1, uses_anonymous_args = 0
 2725 0000 80B5     		push	{r7, lr}
 2726              		.cfi_def_cfa_offset 8
 2727              		.cfi_offset 7, -8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 76


 2728              		.cfi_offset 14, -4
 2729 0002 84B0     		sub	sp, sp, #16
 2730              		.cfi_def_cfa_offset 24
 2731 0004 00AF     		add	r7, sp, #0
 2732              		.cfi_def_cfa_register 7
 2733 0006 0346     		mov	r3, r0
 2734 0008 3960     		str	r1, [r7]
 2735 000a FB80     		strh	r3, [r7, #6]	@ movhi
 617:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2736              		.loc 1 617 0
 2737 000c FB88     		ldrh	r3, [r7, #6]
 2738 000e 1B01     		lsls	r3, r3, #4
 2739 0010 3A68     		ldr	r2, [r7]
 2740 0012 1344     		add	r3, r3, r2
 2741 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2742 0016 1846     		mov	r0, r3
 2743 0018 FFF7FEFF 		bl	num_of_bytes
 2744 001c 0346     		mov	r3, r0
 2745 001e 7B73     		strb	r3, [r7, #13]
 618:..\src/command_processing.c **** 
 619:..\src/command_processing.c ****     uint8 CYDATA i, j;
 620:..\src/command_processing.c ****         
 621:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2746              		.loc 1 621 0
 2747 0020 FB88     		ldrh	r3, [r7, #6]
 2748 0022 1B01     		lsls	r3, r3, #4
 2749 0024 3A68     		ldr	r2, [r7]
 2750 0026 1344     		add	r3, r3, r2
 2751 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2752 002a 032B     		cmp	r3, #3
 2753 002c 02D0     		beq	.L144
 2754 002e 052B     		cmp	r3, #5
 2755 0030 06D0     		beq	.L145
 2756 0032 36E0     		b	.L152
 2757              	.L144:
 622:..\src/command_processing.c ****         
 623:..\src/command_processing.c ****             
 624:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 625:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2758              		.loc 1 625 0
 2759 0034 3D4B     		ldr	r3, .L154
 2760 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2761 0038 3D4B     		ldr	r3, .L154+4
 2762 003a 83F82820 		strb	r2, [r3, #40]
 626:..\src/command_processing.c ****             break;   
 2763              		.loc 1 626 0
 2764 003e 71E0     		b	.L146
 2765              	.L145:
 627:..\src/command_processing.c **** 
 628:..\src/command_processing.c ****         
 629:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 630:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2766              		.loc 1 630 0
 2767 0040 3A4B     		ldr	r3, .L154
 2768 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2769 0044 1A06     		lsls	r2, r3, #24
 2770 0046 394B     		ldr	r3, .L154
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 77


 2771 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2772 004a 1B04     		lsls	r3, r3, #16
 2773 004c 1A43     		orrs	r2, r2, r3
 2774 004e 374B     		ldr	r3, .L154
 2775 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2776 0052 1B02     		lsls	r3, r3, #8
 2777 0054 1343     		orrs	r3, r3, r2
 2778 0056 354A     		ldr	r2, .L154
 2779 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2780 005a 1343     		orrs	r3, r3, r2
 2781 005c 344A     		ldr	r2, .L154+4
 2782 005e 1362     		str	r3, [r2, #32]
 631:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2783              		.loc 1 631 0
 2784 0060 324B     		ldr	r3, .L154
 2785 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2786 0064 1A06     		lsls	r2, r3, #24
 2787 0066 314B     		ldr	r3, .L154
 2788 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2789 006a 1B04     		lsls	r3, r3, #16
 2790 006c 1A43     		orrs	r2, r2, r3
 2791 006e 2F4B     		ldr	r3, .L154
 2792 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2793 0072 1B02     		lsls	r3, r3, #8
 2794 0074 1343     		orrs	r3, r3, r2
 2795 0076 2D4A     		ldr	r2, .L154
 2796 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2797 007a 1343     		orrs	r3, r3, r2
 2798 007c 2C4A     		ldr	r2, .L154+4
 2799 007e 5362     		str	r3, [r2, #36]
 632:..\src/command_processing.c **** 
 633:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2800              		.loc 1 633 0
 2801 0080 2B4B     		ldr	r3, .L154+4
 2802 0082 1B6A     		ldr	r3, [r3, #32]
 2803 0084 2A4A     		ldr	r2, .L154+4
 2804 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2805 008a 9340     		lsls	r3, r3, r2
 2806 008c 284A     		ldr	r2, .L154+4
 2807 008e 1362     		str	r3, [r2, #32]
 634:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2808              		.loc 1 634 0
 2809 0090 274B     		ldr	r3, .L154+4
 2810 0092 5B6A     		ldr	r3, [r3, #36]
 2811 0094 264A     		ldr	r2, .L154+4
 2812 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2813 009a 9340     		lsls	r3, r3, r2
 2814 009c 244A     		ldr	r2, .L154+4
 2815 009e 5362     		str	r3, [r2, #36]
 635:..\src/command_processing.c ****             break;            
 2816              		.loc 1 635 0
 2817 00a0 40E0     		b	.L146
 2818              	.L152:
 636:..\src/command_processing.c ****             default:
 637:..\src/command_processing.c **** 
 638:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2819              		.loc 1 638 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 78


 2820 00a2 0023     		movs	r3, #0
 2821 00a4 FB73     		strb	r3, [r7, #15]
 2822 00a6 20E0     		b	.L147
 2823              	.L150:
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2824              		.loc 1 639 0
 2825 00a8 0023     		movs	r3, #0
 2826 00aa BB73     		strb	r3, [r7, #14]
 2827 00ac 15E0     		b	.L148
 2828              	.L149:
 640:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2829              		.loc 1 640 0 discriminator 3
 2830 00ae FB88     		ldrh	r3, [r7, #6]
 2831 00b0 1B01     		lsls	r3, r3, #4
 2832 00b2 3A68     		ldr	r2, [r7]
 2833 00b4 1344     		add	r3, r3, r2
 2834 00b6 1A68     		ldr	r2, [r3]
 2835 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2836 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2837 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2838 00be 411A     		subs	r1, r0, r1
 2839 00c0 0B44     		add	r3, r3, r1
 2840 00c2 013B     		subs	r3, r3, #1
 2841 00c4 1344     		add	r3, r3, r2
 2842 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2843 00c8 D11C     		adds	r1, r2, #3
 2844 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2845 00cc 0A44     		add	r2, r2, r1
 2846 00ce 1749     		ldr	r1, .L154
 2847 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2848 00d2 1A70     		strb	r2, [r3]
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2849              		.loc 1 639 0 discriminator 3
 2850 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2851 00d6 0133     		adds	r3, r3, #1
 2852 00d8 BB73     		strb	r3, [r7, #14]
 2853              	.L148:
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2854              		.loc 1 639 0 is_stmt 0 discriminator 1
 2855 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2856 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2857 00de 9A42     		cmp	r2, r3
 2858 00e0 E5D3     		bcc	.L149
 638:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2859              		.loc 1 638 0 is_stmt 1 discriminator 2
 2860 00e2 FA7B     		ldrb	r2, [r7, #15]
 2861 00e4 7B7B     		ldrb	r3, [r7, #13]
 2862 00e6 1344     		add	r3, r3, r2
 2863 00e8 FB73     		strb	r3, [r7, #15]
 2864              	.L147:
 638:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2865              		.loc 1 638 0 is_stmt 0 discriminator 1
 2866 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2867 00ec FB88     		ldrh	r3, [r7, #6]
 2868 00ee 1B01     		lsls	r3, r3, #4
 2869 00f0 3968     		ldr	r1, [r7]
 2870 00f2 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 79


 2871 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2872 00f6 1946     		mov	r1, r3
 2873 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2874 00fa 03FB01F3 		mul	r3, r3, r1
 2875 00fe 9A42     		cmp	r2, r3
 2876 0100 D2DB     		blt	.L150
 641:..\src/command_processing.c ****                     }
 642:..\src/command_processing.c ****                 } 
 643:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2877              		.loc 1 643 0 is_stmt 1
 2878 0102 FB88     		ldrh	r3, [r7, #6]
 2879 0104 1B01     		lsls	r3, r3, #4
 2880 0106 3A68     		ldr	r2, [r7]
 2881 0108 1344     		add	r3, r3, r2
 2882 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2883 010c 092B     		cmp	r3, #9
 2884 010e 08D1     		bne	.L153
 644:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2885              		.loc 1 644 0
 2886 0110 FB88     		ldrh	r3, [r7, #6]
 2887 0112 1B01     		lsls	r3, r3, #4
 2888 0114 3A68     		ldr	r2, [r7]
 2889 0116 1344     		add	r3, r3, r2
 2890 0118 1A68     		ldr	r2, [r3]
 2891 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2892 011c 1344     		add	r3, r3, r2
 2893 011e 0022     		movs	r2, #0
 2894 0120 1A70     		strb	r2, [r3]
 2895              	.L153:
 645:..\src/command_processing.c ****             break;
 2896              		.loc 1 645 0
 2897 0122 00BF     		nop
 2898              	.L146:
 646:..\src/command_processing.c ****     }
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c ****       
 649:..\src/command_processing.c **** }
 2899              		.loc 1 649 0
 2900 0124 00BF     		nop
 2901 0126 1037     		adds	r7, r7, #16
 2902              		.cfi_def_cfa_offset 8
 2903 0128 BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 012a 80BD     		pop	{r7, pc}
 2907              	.L155:
 2908              		.align	2
 2909              	.L154:
 2910 012c 00000000 		.word	g_rx
 2911 0130 00000000 		.word	g_mem
 2912              		.cfi_endproc
 2913              	.LFE70:
 2914              		.size	set_custom_param, .-set_custom_param
 2915              		.section	.text.get_IMU_param_list,"ax",%progbits
 2916              		.align	2
 2917              		.global	get_IMU_param_list
 2918              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 80


 2919              		.thumb_func
 2920              		.type	get_IMU_param_list, %function
 2921              	get_IMU_param_list:
 2922              	.LFB71:
 650:..\src/command_processing.c **** 
 651:..\src/command_processing.c **** //==============================================================================
 652:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 653:..\src/command_processing.c **** //==============================================================================
 654:..\src/command_processing.c **** 
 655:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 656:..\src/command_processing.c **** {
 2923              		.loc 1 656 0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 8
 2926              		@ frame_needed = 1, uses_anonymous_args = 0
 2927              		@ link register save eliminated.
 2928 0000 80B4     		push	{r7}
 2929              		.cfi_def_cfa_offset 4
 2930              		.cfi_offset 7, -4
 2931 0002 83B0     		sub	sp, sp, #12
 2932              		.cfi_def_cfa_offset 16
 2933 0004 00AF     		add	r7, sp, #0
 2934              		.cfi_def_cfa_register 7
 2935 0006 0346     		mov	r3, r0
 2936 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 657:..\src/command_processing.c **** }
 2937              		.loc 1 657 0
 2938 000a 00BF     		nop
 2939 000c 0C37     		adds	r7, r7, #12
 2940              		.cfi_def_cfa_offset 4
 2941 000e BD46     		mov	sp, r7
 2942              		.cfi_def_cfa_register 13
 2943              		@ sp needed
 2944 0010 80BC     		pop	{r7}
 2945              		.cfi_restore 7
 2946              		.cfi_def_cfa_offset 0
 2947 0012 7047     		bx	lr
 2948              		.cfi_endproc
 2949              	.LFE71:
 2950              		.size	get_IMU_param_list, .-get_IMU_param_list
 2951              		.section	.text.setZeros,"ax",%progbits
 2952              		.align	2
 2953              		.global	setZeros
 2954              		.thumb
 2955              		.thumb_func
 2956              		.type	setZeros, %function
 2957              	setZeros:
 2958              	.LFB72:
 658:..\src/command_processing.c **** 
 659:..\src/command_processing.c **** //==============================================================================
 660:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 661:..\src/command_processing.c **** //==============================================================================
 662:..\src/command_processing.c **** 
 663:..\src/command_processing.c **** void setZeros()
 664:..\src/command_processing.c **** {
 2959              		.loc 1 664 0
 2960              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 81


 2961              		@ args = 0, pretend = 0, frame = 0
 2962              		@ frame_needed = 1, uses_anonymous_args = 0
 2963              		@ link register save eliminated.
 2964 0000 80B4     		push	{r7}
 2965              		.cfi_def_cfa_offset 4
 2966              		.cfi_offset 7, -4
 2967 0002 00AF     		add	r7, sp, #0
 2968              		.cfi_def_cfa_register 7
 665:..\src/command_processing.c **** }
 2969              		.loc 1 665 0
 2970 0004 00BF     		nop
 2971 0006 BD46     		mov	sp, r7
 2972              		.cfi_def_cfa_register 13
 2973              		@ sp needed
 2974 0008 80BC     		pop	{r7}
 2975              		.cfi_restore 7
 2976              		.cfi_def_cfa_offset 0
 2977 000a 7047     		bx	lr
 2978              		.cfi_endproc
 2979              	.LFE72:
 2980              		.size	setZeros, .-setZeros
 2981              		.section	.text.prepare_generic_info,"ax",%progbits
 2982              		.align	2
 2983              		.global	prepare_generic_info
 2984              		.thumb
 2985              		.thumb_func
 2986              		.type	prepare_generic_info, %function
 2987              	prepare_generic_info:
 2988              	.LFB73:
 666:..\src/command_processing.c **** 
 667:..\src/command_processing.c **** //==============================================================================
 668:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 669:..\src/command_processing.c **** //==============================================================================
 670:..\src/command_processing.c **** 
 671:..\src/command_processing.c **** void prepare_generic_info(char *info_string)
 672:..\src/command_processing.c **** {
 2989              		.loc 1 672 0
 2990              		.cfi_startproc
 2991              		@ args = 0, pretend = 0, frame = 8
 2992              		@ frame_needed = 1, uses_anonymous_args = 0
 2993              		@ link register save eliminated.
 2994 0000 80B4     		push	{r7}
 2995              		.cfi_def_cfa_offset 4
 2996              		.cfi_offset 7, -4
 2997 0002 83B0     		sub	sp, sp, #12
 2998              		.cfi_def_cfa_offset 16
 2999 0004 00AF     		add	r7, sp, #0
 3000              		.cfi_def_cfa_register 7
 3001 0006 7860     		str	r0, [r7, #4]
 673:..\src/command_processing.c **** }
 3002              		.loc 1 673 0
 3003 0008 00BF     		nop
 3004 000a 0C37     		adds	r7, r7, #12
 3005              		.cfi_def_cfa_offset 4
 3006 000c BD46     		mov	sp, r7
 3007              		.cfi_def_cfa_register 13
 3008              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 82


 3009 000e 80BC     		pop	{r7}
 3010              		.cfi_restore 7
 3011              		.cfi_def_cfa_offset 0
 3012 0010 7047     		bx	lr
 3013              		.cfi_endproc
 3014              	.LFE73:
 3015              		.size	prepare_generic_info, .-prepare_generic_info
 3016 0012 00BF     		.section	.text.prepare_counter_info,"ax",%progbits
 3017              		.align	2
 3018              		.global	prepare_counter_info
 3019              		.thumb
 3020              		.thumb_func
 3021              		.type	prepare_counter_info, %function
 3022              	prepare_counter_info:
 3023              	.LFB74:
 674:..\src/command_processing.c **** 
 675:..\src/command_processing.c **** //==============================================================================
 676:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 677:..\src/command_processing.c **** //==============================================================================
 678:..\src/command_processing.c **** 
 679:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 680:..\src/command_processing.c **** {
 3024              		.loc 1 680 0
 3025              		.cfi_startproc
 3026              		@ args = 0, pretend = 0, frame = 8
 3027              		@ frame_needed = 1, uses_anonymous_args = 0
 3028              		@ link register save eliminated.
 3029 0000 80B4     		push	{r7}
 3030              		.cfi_def_cfa_offset 4
 3031              		.cfi_offset 7, -4
 3032 0002 83B0     		sub	sp, sp, #12
 3033              		.cfi_def_cfa_offset 16
 3034 0004 00AF     		add	r7, sp, #0
 3035              		.cfi_def_cfa_register 7
 3036 0006 7860     		str	r0, [r7, #4]
 681:..\src/command_processing.c **** }
 3037              		.loc 1 681 0
 3038 0008 00BF     		nop
 3039 000a 0C37     		adds	r7, r7, #12
 3040              		.cfi_def_cfa_offset 4
 3041 000c BD46     		mov	sp, r7
 3042              		.cfi_def_cfa_register 13
 3043              		@ sp needed
 3044 000e 80BC     		pop	{r7}
 3045              		.cfi_restore 7
 3046              		.cfi_def_cfa_offset 0
 3047 0010 7047     		bx	lr
 3048              		.cfi_endproc
 3049              	.LFE74:
 3050              		.size	prepare_counter_info, .-prepare_counter_info
 3051 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 3052              		.align	2
 3053              		.global	prepare_R01_info
 3054              		.thumb
 3055              		.thumb_func
 3056              		.type	prepare_R01_info, %function
 3057              	prepare_R01_info:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 83


 3058              	.LFB75:
 682:..\src/command_processing.c **** 
 683:..\src/command_processing.c **** //==============================================================================
 684:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 685:..\src/command_processing.c **** //==============================================================================
 686:..\src/command_processing.c **** 
 687:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
 688:..\src/command_processing.c **** {
 3059              		.loc 1 688 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 8
 3062              		@ frame_needed = 1, uses_anonymous_args = 0
 3063              		@ link register save eliminated.
 3064 0000 80B4     		push	{r7}
 3065              		.cfi_def_cfa_offset 4
 3066              		.cfi_offset 7, -4
 3067 0002 83B0     		sub	sp, sp, #12
 3068              		.cfi_def_cfa_offset 16
 3069 0004 00AF     		add	r7, sp, #0
 3070              		.cfi_def_cfa_register 7
 3071 0006 7860     		str	r0, [r7, #4]
 689:..\src/command_processing.c **** }
 3072              		.loc 1 689 0
 3073 0008 00BF     		nop
 3074 000a 0C37     		adds	r7, r7, #12
 3075              		.cfi_def_cfa_offset 4
 3076 000c BD46     		mov	sp, r7
 3077              		.cfi_def_cfa_register 13
 3078              		@ sp needed
 3079 000e 80BC     		pop	{r7}
 3080              		.cfi_restore 7
 3081              		.cfi_def_cfa_offset 0
 3082 0010 7047     		bx	lr
 3083              		.cfi_endproc
 3084              	.LFE75:
 3085              		.size	prepare_R01_info, .-prepare_R01_info
 3086 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 3087              		.align	2
 3088              		.global	prepare_SD_param_info
 3089              		.thumb
 3090              		.thumb_func
 3091              		.type	prepare_SD_param_info, %function
 3092              	prepare_SD_param_info:
 3093              	.LFB76:
 690:..\src/command_processing.c **** 
 691:..\src/command_processing.c **** //==============================================================================
 692:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 693:..\src/command_processing.c **** //==============================================================================
 694:..\src/command_processing.c **** 
 695:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 696:..\src/command_processing.c **** {
 3094              		.loc 1 696 0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 8
 3097              		@ frame_needed = 1, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
 3099 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 84


 3100              		.cfi_def_cfa_offset 4
 3101              		.cfi_offset 7, -4
 3102 0002 83B0     		sub	sp, sp, #12
 3103              		.cfi_def_cfa_offset 16
 3104 0004 00AF     		add	r7, sp, #0
 3105              		.cfi_def_cfa_register 7
 3106 0006 7860     		str	r0, [r7, #4]
 697:..\src/command_processing.c **** }
 3107              		.loc 1 697 0
 3108 0008 00BF     		nop
 3109 000a 0C37     		adds	r7, r7, #12
 3110              		.cfi_def_cfa_offset 4
 3111 000c BD46     		mov	sp, r7
 3112              		.cfi_def_cfa_register 13
 3113              		@ sp needed
 3114 000e 80BC     		pop	{r7}
 3115              		.cfi_restore 7
 3116              		.cfi_def_cfa_offset 0
 3117 0010 7047     		bx	lr
 3118              		.cfi_endproc
 3119              	.LFE76:
 3120              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 3121 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 3122              		.align	2
 3123              		.global	prepare_SD_legend
 3124              		.thumb
 3125              		.thumb_func
 3126              		.type	prepare_SD_legend, %function
 3127              	prepare_SD_legend:
 3128              	.LFB77:
 698:..\src/command_processing.c **** 
 699:..\src/command_processing.c **** 
 700:..\src/command_processing.c **** //==============================================================================
 701:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 702:..\src/command_processing.c **** //==============================================================================
 703:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 704:..\src/command_processing.c **** {
 3129              		.loc 1 704 0
 3130              		.cfi_startproc
 3131              		@ args = 0, pretend = 0, frame = 8
 3132              		@ frame_needed = 1, uses_anonymous_args = 0
 3133              		@ link register save eliminated.
 3134 0000 80B4     		push	{r7}
 3135              		.cfi_def_cfa_offset 4
 3136              		.cfi_offset 7, -4
 3137 0002 83B0     		sub	sp, sp, #12
 3138              		.cfi_def_cfa_offset 16
 3139 0004 00AF     		add	r7, sp, #0
 3140              		.cfi_def_cfa_register 7
 3141 0006 7860     		str	r0, [r7, #4]
 705:..\src/command_processing.c **** }
 3142              		.loc 1 705 0
 3143 0008 00BF     		nop
 3144 000a 0C37     		adds	r7, r7, #12
 3145              		.cfi_def_cfa_offset 4
 3146 000c BD46     		mov	sp, r7
 3147              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 85


 3148              		@ sp needed
 3149 000e 80BC     		pop	{r7}
 3150              		.cfi_restore 7
 3151              		.cfi_def_cfa_offset 0
 3152 0010 7047     		bx	lr
 3153              		.cfi_endproc
 3154              	.LFE77:
 3155              		.size	prepare_SD_legend, .-prepare_SD_legend
 3156 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 3157              		.align	2
 3158              		.global	prepare_SD_EMG_History_legend
 3159              		.thumb
 3160              		.thumb_func
 3161              		.type	prepare_SD_EMG_History_legend, %function
 3162              	prepare_SD_EMG_History_legend:
 3163              	.LFB78:
 706:..\src/command_processing.c **** 
 707:..\src/command_processing.c **** //==============================================================================
 708:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 709:..\src/command_processing.c **** //==============================================================================
 710:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 711:..\src/command_processing.c **** {
 3164              		.loc 1 711 0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 8
 3167              		@ frame_needed = 1, uses_anonymous_args = 0
 3168              		@ link register save eliminated.
 3169 0000 80B4     		push	{r7}
 3170              		.cfi_def_cfa_offset 4
 3171              		.cfi_offset 7, -4
 3172 0002 83B0     		sub	sp, sp, #12
 3173              		.cfi_def_cfa_offset 16
 3174 0004 00AF     		add	r7, sp, #0
 3175              		.cfi_def_cfa_register 7
 3176 0006 7860     		str	r0, [r7, #4]
 712:..\src/command_processing.c ****     
 713:..\src/command_processing.c **** }
 3177              		.loc 1 713 0
 3178 0008 00BF     		nop
 3179 000a 0C37     		adds	r7, r7, #12
 3180              		.cfi_def_cfa_offset 4
 3181 000c BD46     		mov	sp, r7
 3182              		.cfi_def_cfa_register 13
 3183              		@ sp needed
 3184 000e 80BC     		pop	{r7}
 3185              		.cfi_restore 7
 3186              		.cfi_def_cfa_offset 0
 3187 0010 7047     		bx	lr
 3188              		.cfi_endproc
 3189              	.LFE78:
 3190              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 3191 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 3192              		.align	2
 3193              		.global	prepare_SD_EMG_history
 3194              		.thumb
 3195              		.thumb_func
 3196              		.type	prepare_SD_EMG_history, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 86


 3197              	prepare_SD_EMG_history:
 3198              	.LFB79:
 714:..\src/command_processing.c **** 
 715:..\src/command_processing.c **** //==============================================================================
 716:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 717:..\src/command_processing.c **** //==============================================================================
 718:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
 719:..\src/command_processing.c **** {
 3199              		.loc 1 719 0
 3200              		.cfi_startproc
 3201              		@ args = 0, pretend = 0, frame = 8
 3202              		@ frame_needed = 1, uses_anonymous_args = 0
 3203              		@ link register save eliminated.
 3204 0000 80B4     		push	{r7}
 3205              		.cfi_def_cfa_offset 4
 3206              		.cfi_offset 7, -4
 3207 0002 83B0     		sub	sp, sp, #12
 3208              		.cfi_def_cfa_offset 16
 3209 0004 00AF     		add	r7, sp, #0
 3210              		.cfi_def_cfa_register 7
 3211 0006 7860     		str	r0, [r7, #4]
 720:..\src/command_processing.c ****         
 721:..\src/command_processing.c **** }
 3212              		.loc 1 721 0
 3213 0008 00BF     		nop
 3214 000a 0C37     		adds	r7, r7, #12
 3215              		.cfi_def_cfa_offset 4
 3216 000c BD46     		mov	sp, r7
 3217              		.cfi_def_cfa_register 13
 3218              		@ sp needed
 3219 000e 80BC     		pop	{r7}
 3220              		.cfi_restore 7
 3221              		.cfi_def_cfa_offset 0
 3222 0010 7047     		bx	lr
 3223              		.cfi_endproc
 3224              	.LFE79:
 3225              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 3226 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 3227              		.align	2
 3228              		.global	IMU_reading_info
 3229              		.thumb
 3230              		.thumb_func
 3231              		.type	IMU_reading_info, %function
 3232              	IMU_reading_info:
 3233              	.LFB80:
 722:..\src/command_processing.c **** 
 723:..\src/command_processing.c **** //==============================================================================
 724:..\src/command_processing.c **** //                                                              IMU READING INFO
 725:..\src/command_processing.c **** //==============================================================================
 726:..\src/command_processing.c **** 
 727:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 728:..\src/command_processing.c **** {
 3234              		.loc 1 728 0
 3235              		.cfi_startproc
 3236              		@ args = 0, pretend = 0, frame = 8
 3237              		@ frame_needed = 1, uses_anonymous_args = 0
 3238              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 87


 3239 0000 80B4     		push	{r7}
 3240              		.cfi_def_cfa_offset 4
 3241              		.cfi_offset 7, -4
 3242 0002 83B0     		sub	sp, sp, #12
 3243              		.cfi_def_cfa_offset 16
 3244 0004 00AF     		add	r7, sp, #0
 3245              		.cfi_def_cfa_register 7
 3246 0006 7860     		str	r0, [r7, #4]
 729:..\src/command_processing.c **** }
 3247              		.loc 1 729 0
 3248 0008 00BF     		nop
 3249 000a 0C37     		adds	r7, r7, #12
 3250              		.cfi_def_cfa_offset 4
 3251 000c BD46     		mov	sp, r7
 3252              		.cfi_def_cfa_register 13
 3253              		@ sp needed
 3254 000e 80BC     		pop	{r7}
 3255              		.cfi_restore 7
 3256              		.cfi_def_cfa_offset 0
 3257 0010 7047     		bx	lr
 3258              		.cfi_endproc
 3259              	.LFE80:
 3260              		.size	IMU_reading_info, .-IMU_reading_info
 3261 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 3262              		.align	2
 3263              		.global	commWrite_old_id
 3264              		.thumb
 3265              		.thumb_func
 3266              		.type	commWrite_old_id, %function
 3267              	commWrite_old_id:
 3268              	.LFB81:
 730:..\src/command_processing.c **** 
 731:..\src/command_processing.c **** //==============================================================================
 732:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 733:..\src/command_processing.c **** //==============================================================================
 734:..\src/command_processing.c **** 
 735:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 736:..\src/command_processing.c **** {
 3269              		.loc 1 736 0
 3270              		.cfi_startproc
 3271              		@ args = 0, pretend = 0, frame = 16
 3272              		@ frame_needed = 1, uses_anonymous_args = 0
 3273 0000 80B5     		push	{r7, lr}
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 7, -8
 3276              		.cfi_offset 14, -4
 3277 0002 84B0     		sub	sp, sp, #16
 3278              		.cfi_def_cfa_offset 24
 3279 0004 00AF     		add	r7, sp, #0
 3280              		.cfi_def_cfa_register 7
 3281 0006 7860     		str	r0, [r7, #4]
 3282 0008 0B46     		mov	r3, r1
 3283 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3284 000c 1346     		mov	r3, r2
 3285 000e 7B70     		strb	r3, [r7, #1]
 737:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 738:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 88


 739:..\src/command_processing.c ****     // frame - start
 740:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3286              		.loc 1 740 0
 3287 0010 3A20     		movs	r0, #58
 3288 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 741:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3289              		.loc 1 741 0
 3290 0016 3A20     		movs	r0, #58
 3291 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 742:..\src/command_processing.c ****     // frame - ID
 743:..\src/command_processing.c ****     //if(old_id)
 744:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 3292              		.loc 1 744 0
 3293 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3294 001e 1846     		mov	r0, r3
 3295 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 745:..\src/command_processing.c ****     //else
 746:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 747:..\src/command_processing.c ****         
 748:..\src/command_processing.c ****     // frame - length
 749:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3296              		.loc 1 749 0
 3297 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3298 0026 DBB2     		uxtb	r3, r3
 3299 0028 1846     		mov	r0, r3
 3300 002a FFF7FEFF 		bl	UART_RS485_PutChar
 750:..\src/command_processing.c ****     // frame - packet data
 751:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 3301              		.loc 1 751 0
 3302 002e 0023     		movs	r3, #0
 3303 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 3304 0032 09E0     		b	.L167
 3305              	.L168:
 752:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3306              		.loc 1 752 0 discriminator 3
 3307 0034 FB89     		ldrh	r3, [r7, #14]
 3308 0036 7A68     		ldr	r2, [r7, #4]
 3309 0038 1344     		add	r3, r3, r2
 3310 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3311 003c 1846     		mov	r0, r3
 3312 003e FFF7FEFF 		bl	UART_RS485_PutChar
 751:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3313              		.loc 1 751 0 discriminator 3
 3314 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3315 0044 0133     		adds	r3, r3, #1
 3316 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 3317              	.L167:
 751:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3318              		.loc 1 751 0 is_stmt 0 discriminator 1
 3319 0048 FA89     		ldrh	r2, [r7, #14]
 3320 004a 7B88     		ldrh	r3, [r7, #2]
 3321 004c 9A42     		cmp	r2, r3
 3322 004e F1D3     		bcc	.L168
 753:..\src/command_processing.c ****     }
 754:..\src/command_processing.c **** 
 755:..\src/command_processing.c ****     index = 0;
 3323              		.loc 1 755 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 89


 3324 0050 0023     		movs	r3, #0
 3325 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 756:..\src/command_processing.c **** 
 757:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 3326              		.loc 1 757 0
 3327 0054 00BF     		nop
 3328              	.L170:
 3329              		.loc 1 757 0 is_stmt 0 discriminator 2
 3330 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 3331 005a 0346     		mov	r3, r0
 3332 005c 03F00103 		and	r3, r3, #1
 3333 0060 002B     		cmp	r3, #0
 3334 0062 05D1     		bne	.L169
 3335              		.loc 1 757 0 discriminator 1
 3336 0064 FB89     		ldrh	r3, [r7, #14]
 3337 0066 5A1C     		adds	r2, r3, #1
 3338 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 3339 006a B3F57A7F 		cmp	r3, #1000
 3340 006e F2D9     		bls	.L170
 3341              	.L169:
 758:..\src/command_processing.c **** 
 759:..\src/command_processing.c ****     RS485_CTS_Write(1);
 3342              		.loc 1 759 0 is_stmt 1
 3343 0070 0120     		movs	r0, #1
 3344 0072 FFF7FEFF 		bl	RS485_CTS_Write
 760:..\src/command_processing.c ****     RS485_CTS_Write(0);
 3345              		.loc 1 760 0
 3346 0076 0020     		movs	r0, #0
 3347 0078 FFF7FEFF 		bl	RS485_CTS_Write
 761:..\src/command_processing.c **** }
 3348              		.loc 1 761 0
 3349 007c 00BF     		nop
 3350 007e 1037     		adds	r7, r7, #16
 3351              		.cfi_def_cfa_offset 8
 3352 0080 BD46     		mov	sp, r7
 3353              		.cfi_def_cfa_register 13
 3354              		@ sp needed
 3355 0082 80BD     		pop	{r7, pc}
 3356              		.cfi_endproc
 3357              	.LFE81:
 3358              		.size	commWrite_old_id, .-commWrite_old_id
 3359              		.section	.text.commWrite,"ax",%progbits
 3360              		.align	2
 3361              		.global	commWrite
 3362              		.thumb
 3363              		.thumb_func
 3364              		.type	commWrite, %function
 3365              	commWrite:
 3366              	.LFB82:
 762:..\src/command_processing.c **** 
 763:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 764:..\src/command_processing.c **** {
 3367              		.loc 1 764 0
 3368              		.cfi_startproc
 3369              		@ args = 0, pretend = 0, frame = 16
 3370              		@ frame_needed = 1, uses_anonymous_args = 0
 3371 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 90


 3372              		.cfi_def_cfa_offset 8
 3373              		.cfi_offset 7, -8
 3374              		.cfi_offset 14, -4
 3375 0002 84B0     		sub	sp, sp, #16
 3376              		.cfi_def_cfa_offset 24
 3377 0004 00AF     		add	r7, sp, #0
 3378              		.cfi_def_cfa_register 7
 3379 0006 7860     		str	r0, [r7, #4]
 3380 0008 0B46     		mov	r3, r1
 3381 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 765:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 766:..\src/command_processing.c **** 
 767:..\src/command_processing.c ****     // frame - start
 768:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3382              		.loc 1 768 0
 3383 000c 3A20     		movs	r0, #58
 3384 000e FFF7FEFF 		bl	UART_RS485_PutChar
 769:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3385              		.loc 1 769 0
 3386 0012 3A20     		movs	r0, #58
 3387 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 770:..\src/command_processing.c ****     // frame - ID
 771:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 3388              		.loc 1 771 0
 3389 0018 1A4B     		ldr	r3, .L176
 3390 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3391 001c 1846     		mov	r0, r3
 3392 001e FFF7FEFF 		bl	UART_RS485_PutChar
 772:..\src/command_processing.c ****     // frame - length
 773:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3393              		.loc 1 773 0
 3394 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3395 0024 DBB2     		uxtb	r3, r3
 3396 0026 1846     		mov	r0, r3
 3397 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 774:..\src/command_processing.c ****     // frame - packet data
 775:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 3398              		.loc 1 775 0
 3399 002c 0023     		movs	r3, #0
 3400 002e FB81     		strh	r3, [r7, #14]	@ movhi
 3401 0030 09E0     		b	.L172
 3402              	.L173:
 776:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3403              		.loc 1 776 0 discriminator 3
 3404 0032 FB89     		ldrh	r3, [r7, #14]
 3405 0034 7A68     		ldr	r2, [r7, #4]
 3406 0036 1344     		add	r3, r3, r2
 3407 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3408 003a 1846     		mov	r0, r3
 3409 003c FFF7FEFF 		bl	UART_RS485_PutChar
 775:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3410              		.loc 1 775 0 discriminator 3
 3411 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3412 0042 0133     		adds	r3, r3, #1
 3413 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 3414              	.L172:
 775:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 91


 3415              		.loc 1 775 0 is_stmt 0 discriminator 1
 3416 0046 FA89     		ldrh	r2, [r7, #14]
 3417 0048 7B88     		ldrh	r3, [r7, #2]
 3418 004a 9A42     		cmp	r2, r3
 3419 004c F1D3     		bcc	.L173
 777:..\src/command_processing.c ****     }
 778:..\src/command_processing.c **** 
 779:..\src/command_processing.c ****     index = 0;
 3420              		.loc 1 779 0 is_stmt 1
 3421 004e 0023     		movs	r3, #0
 3422 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 780:..\src/command_processing.c **** 
 781:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 3423              		.loc 1 781 0
 3424 0052 00BF     		nop
 3425              	.L175:
 3426              		.loc 1 781 0 is_stmt 0 discriminator 2
 3427 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 3428 0058 0346     		mov	r3, r0
 3429 005a 03F00103 		and	r3, r3, #1
 3430 005e 002B     		cmp	r3, #0
 3431 0060 05D1     		bne	.L174
 3432              		.loc 1 781 0 discriminator 1
 3433 0062 FB89     		ldrh	r3, [r7, #14]
 3434 0064 5A1C     		adds	r2, r3, #1
 3435 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 3436 0068 B3F57A7F 		cmp	r3, #1000
 3437 006c F2D9     		bls	.L175
 3438              	.L174:
 782:..\src/command_processing.c **** 
 783:..\src/command_processing.c ****     RS485_CTS_Write(1);
 3439              		.loc 1 783 0 is_stmt 1
 3440 006e 0120     		movs	r0, #1
 3441 0070 FFF7FEFF 		bl	RS485_CTS_Write
 784:..\src/command_processing.c ****     RS485_CTS_Write(0);
 3442              		.loc 1 784 0
 3443 0074 0020     		movs	r0, #0
 3444 0076 FFF7FEFF 		bl	RS485_CTS_Write
 785:..\src/command_processing.c **** }
 3445              		.loc 1 785 0
 3446 007a 00BF     		nop
 3447 007c 1037     		adds	r7, r7, #16
 3448              		.cfi_def_cfa_offset 8
 3449 007e BD46     		mov	sp, r7
 3450              		.cfi_def_cfa_register 13
 3451              		@ sp needed
 3452 0080 80BD     		pop	{r7, pc}
 3453              	.L177:
 3454 0082 00BF     		.align	2
 3455              	.L176:
 3456 0084 00000000 		.word	g_mem
 3457              		.cfi_endproc
 3458              	.LFE82:
 3459              		.size	commWrite, .-commWrite
 3460              		.section	.text.commWriteID,"ax",%progbits
 3461              		.align	2
 3462              		.global	commWriteID
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 92


 3463              		.thumb
 3464              		.thumb_func
 3465              		.type	commWriteID, %function
 3466              	commWriteID:
 3467              	.LFB83:
 786:..\src/command_processing.c **** 
 787:..\src/command_processing.c **** 
 788:..\src/command_processing.c **** //==============================================================================
 789:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 790:..\src/command_processing.c **** //==============================================================================
 791:..\src/command_processing.c **** 
 792:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 793:..\src/command_processing.c **** {
 3468              		.loc 1 793 0
 3469              		.cfi_startproc
 3470              		@ args = 0, pretend = 0, frame = 8
 3471              		@ frame_needed = 1, uses_anonymous_args = 0
 3472 0000 80B5     		push	{r7, lr}
 3473              		.cfi_def_cfa_offset 8
 3474              		.cfi_offset 7, -8
 3475              		.cfi_offset 14, -4
 3476 0002 82B0     		sub	sp, sp, #8
 3477              		.cfi_def_cfa_offset 16
 3478 0004 00AF     		add	r7, sp, #0
 3479              		.cfi_def_cfa_register 7
 3480 0006 7860     		str	r0, [r7, #4]
 3481 0008 0B46     		mov	r3, r1
 3482 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3483 000c 1346     		mov	r3, r2
 3484 000e 7B70     		strb	r3, [r7, #1]
 794:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 795:..\src/command_processing.c **** 
 796:..\src/command_processing.c ****     // frame - start
 797:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3485              		.loc 1 797 0
 3486 0010 3A20     		movs	r0, #58
 3487 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 798:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3488              		.loc 1 798 0
 3489 0016 3A20     		movs	r0, #58
 3490 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 799:..\src/command_processing.c ****     // frame - ID
 800:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 3491              		.loc 1 800 0
 3492 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3493 001e 1846     		mov	r0, r3
 3494 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 801:..\src/command_processing.c ****     // frame - length
 802:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3495              		.loc 1 802 0
 3496 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3497 0026 DBB2     		uxtb	r3, r3
 3498 0028 1846     		mov	r0, r3
 3499 002a FFF7FEFF 		bl	UART_RS485_PutChar
 803:..\src/command_processing.c ****     // frame - packet data
 804:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 3500              		.loc 1 804 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 93


 3501 002e 1B4B     		ldr	r3, .L183
 3502 0030 0022     		movs	r2, #0
 3503 0032 1A80     		strh	r2, [r3]	@ movhi
 3504 0034 0EE0     		b	.L179
 3505              	.L180:
 805:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 3506              		.loc 1 805 0 discriminator 3
 3507 0036 194B     		ldr	r3, .L183
 3508 0038 1B88     		ldrh	r3, [r3]
 3509 003a 1A46     		mov	r2, r3
 3510 003c 7B68     		ldr	r3, [r7, #4]
 3511 003e 1344     		add	r3, r3, r2
 3512 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3513 0042 1846     		mov	r0, r3
 3514 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 804:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 3515              		.loc 1 804 0 discriminator 3
 3516 0048 144B     		ldr	r3, .L183
 3517 004a 1B88     		ldrh	r3, [r3]
 3518 004c 0133     		adds	r3, r3, #1
 3519 004e 9AB2     		uxth	r2, r3
 3520 0050 124B     		ldr	r3, .L183
 3521 0052 1A80     		strh	r2, [r3]	@ movhi
 3522              	.L179:
 804:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 3523              		.loc 1 804 0 is_stmt 0 discriminator 1
 3524 0054 114B     		ldr	r3, .L183
 3525 0056 1B88     		ldrh	r3, [r3]
 3526 0058 7A88     		ldrh	r2, [r7, #2]
 3527 005a 9A42     		cmp	r2, r3
 3528 005c EBD8     		bhi	.L180
 806:..\src/command_processing.c ****     }
 807:..\src/command_processing.c **** 
 808:..\src/command_processing.c ****     i = 0;
 3529              		.loc 1 808 0 is_stmt 1
 3530 005e 0F4B     		ldr	r3, .L183
 3531 0060 0022     		movs	r2, #0
 3532 0062 1A80     		strh	r2, [r3]	@ movhi
 809:..\src/command_processing.c **** 
 810:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 3533              		.loc 1 810 0
 3534 0064 00BF     		nop
 3535              	.L182:
 3536              		.loc 1 810 0 is_stmt 0 discriminator 2
 3537 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 3538 006a 0346     		mov	r3, r0
 3539 006c 03F00103 		and	r3, r3, #1
 3540 0070 002B     		cmp	r3, #0
 3541 0072 08D1     		bne	.L181
 3542              		.loc 1 810 0 discriminator 1
 3543 0074 094B     		ldr	r3, .L183
 3544 0076 1B88     		ldrh	r3, [r3]
 3545 0078 5A1C     		adds	r2, r3, #1
 3546 007a 91B2     		uxth	r1, r2
 3547 007c 074A     		ldr	r2, .L183
 3548 007e 1180     		strh	r1, [r2]	@ movhi
 3549 0080 B3F57A7F 		cmp	r3, #1000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 94


 3550 0084 EFD9     		bls	.L182
 3551              	.L181:
 811:..\src/command_processing.c ****     
 812:..\src/command_processing.c ****     RS485_CTS_Write(1);
 3552              		.loc 1 812 0 is_stmt 1
 3553 0086 0120     		movs	r0, #1
 3554 0088 FFF7FEFF 		bl	RS485_CTS_Write
 813:..\src/command_processing.c ****     RS485_CTS_Write(0);
 3555              		.loc 1 813 0
 3556 008c 0020     		movs	r0, #0
 3557 008e FFF7FEFF 		bl	RS485_CTS_Write
 814:..\src/command_processing.c **** }
 3558              		.loc 1 814 0
 3559 0092 00BF     		nop
 3560 0094 0837     		adds	r7, r7, #8
 3561              		.cfi_def_cfa_offset 8
 3562 0096 BD46     		mov	sp, r7
 3563              		.cfi_def_cfa_register 13
 3564              		@ sp needed
 3565 0098 80BD     		pop	{r7, pc}
 3566              	.L184:
 3567 009a 00BF     		.align	2
 3568              	.L183:
 3569 009c 00000000 		.word	i.10055
 3570              		.cfi_endproc
 3571              	.LFE83:
 3572              		.size	commWriteID, .-commWriteID
 3573              		.section	.text.LCRChecksum,"ax",%progbits
 3574              		.align	2
 3575              		.global	LCRChecksum
 3576              		.thumb
 3577              		.thumb_func
 3578              		.type	LCRChecksum, %function
 3579              	LCRChecksum:
 3580              	.LFB84:
 815:..\src/command_processing.c **** 
 816:..\src/command_processing.c **** //==============================================================================
 817:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 818:..\src/command_processing.c **** //==============================================================================
 819:..\src/command_processing.c **** 
 820:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 821:..\src/command_processing.c **** 
 822:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 3581              		.loc 1 822 0
 3582              		.cfi_startproc
 3583              		@ args = 0, pretend = 0, frame = 16
 3584              		@ frame_needed = 1, uses_anonymous_args = 0
 3585              		@ link register save eliminated.
 3586 0000 80B4     		push	{r7}
 3587              		.cfi_def_cfa_offset 4
 3588              		.cfi_offset 7, -4
 3589 0002 85B0     		sub	sp, sp, #20
 3590              		.cfi_def_cfa_offset 24
 3591 0004 00AF     		add	r7, sp, #0
 3592              		.cfi_def_cfa_register 7
 3593 0006 7860     		str	r0, [r7, #4]
 3594 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 95


 3595 000a FB70     		strb	r3, [r7, #3]
 823:..\src/command_processing.c ****     
 824:..\src/command_processing.c ****     uint8 CYDATA i;
 825:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
 3596              		.loc 1 825 0
 3597 000c 0023     		movs	r3, #0
 3598 000e BB73     		strb	r3, [r7, #14]
 826:..\src/command_processing.c ****     
 827:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 3599              		.loc 1 827 0
 3600 0010 0023     		movs	r3, #0
 3601 0012 FB73     		strb	r3, [r7, #15]
 3602 0014 09E0     		b	.L186
 3603              	.L187:
 828:..\src/command_processing.c ****        checksum ^= data_array[i];
 3604              		.loc 1 828 0 discriminator 3
 3605 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3606 0018 7A68     		ldr	r2, [r7, #4]
 3607 001a 1344     		add	r3, r3, r2
 3608 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3609 001e BB7B     		ldrb	r3, [r7, #14]
 3610 0020 5340     		eors	r3, r3, r2
 3611 0022 BB73     		strb	r3, [r7, #14]
 827:..\src/command_processing.c ****        checksum ^= data_array[i];
 3612              		.loc 1 827 0 discriminator 3
 3613 0024 FB7B     		ldrb	r3, [r7, #15]
 3614 0026 0133     		adds	r3, r3, #1
 3615 0028 FB73     		strb	r3, [r7, #15]
 3616              	.L186:
 827:..\src/command_processing.c ****        checksum ^= data_array[i];
 3617              		.loc 1 827 0 is_stmt 0 discriminator 1
 3618 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3619 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3620 002e 9A42     		cmp	r2, r3
 3621 0030 F1D3     		bcc	.L187
 829:..\src/command_processing.c ****   
 830:..\src/command_processing.c ****     return checksum;
 3622              		.loc 1 830 0 is_stmt 1
 3623 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 831:..\src/command_processing.c **** }
 3624              		.loc 1 831 0
 3625 0034 1846     		mov	r0, r3
 3626 0036 1437     		adds	r7, r7, #20
 3627              		.cfi_def_cfa_offset 4
 3628 0038 BD46     		mov	sp, r7
 3629              		.cfi_def_cfa_register 13
 3630              		@ sp needed
 3631 003a 80BC     		pop	{r7}
 3632              		.cfi_restore 7
 3633              		.cfi_def_cfa_offset 0
 3634 003c 7047     		bx	lr
 3635              		.cfi_endproc
 3636              	.LFE84:
 3637              		.size	LCRChecksum, .-LCRChecksum
 3638 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 3639              		.align	2
 3640              		.global	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 96


 3641              		.thumb
 3642              		.thumb_func
 3643              		.type	sendAcknowledgment, %function
 3644              	sendAcknowledgment:
 3645              	.LFB85:
 832:..\src/command_processing.c **** 
 833:..\src/command_processing.c **** 
 834:..\src/command_processing.c **** //==============================================================================
 835:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 836:..\src/command_processing.c **** //==============================================================================
 837:..\src/command_processing.c **** 
 838:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 3646              		.loc 1 838 0
 3647              		.cfi_startproc
 3648              		@ args = 0, pretend = 0, frame = 16
 3649              		@ frame_needed = 1, uses_anonymous_args = 0
 3650 0000 80B5     		push	{r7, lr}
 3651              		.cfi_def_cfa_offset 8
 3652              		.cfi_offset 7, -8
 3653              		.cfi_offset 14, -4
 3654 0002 84B0     		sub	sp, sp, #16
 3655              		.cfi_def_cfa_offset 24
 3656 0004 00AF     		add	r7, sp, #0
 3657              		.cfi_def_cfa_register 7
 3658 0006 0346     		mov	r3, r0
 3659 0008 FB71     		strb	r3, [r7, #7]
 839:..\src/command_processing.c ****     int packet_length = 2;
 3660              		.loc 1 839 0
 3661 000a 0223     		movs	r3, #2
 3662 000c FB60     		str	r3, [r7, #12]
 840:..\src/command_processing.c ****     uint8 packet_data[2];
 841:..\src/command_processing.c **** 
 842:..\src/command_processing.c ****     packet_data[0] = value;
 3663              		.loc 1 842 0
 3664 000e FB79     		ldrb	r3, [r7, #7]
 3665 0010 3B72     		strb	r3, [r7, #8]
 843:..\src/command_processing.c ****     packet_data[1] = value;
 3666              		.loc 1 843 0
 3667 0012 FB79     		ldrb	r3, [r7, #7]
 3668 0014 7B72     		strb	r3, [r7, #9]
 844:..\src/command_processing.c **** 
 845:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 3669              		.loc 1 845 0
 3670 0016 FB68     		ldr	r3, [r7, #12]
 3671 0018 9AB2     		uxth	r2, r3
 3672 001a 07F10803 		add	r3, r7, #8
 3673 001e 1146     		mov	r1, r2
 3674 0020 1846     		mov	r0, r3
 3675 0022 FFF7FEFF 		bl	commWrite
 846:..\src/command_processing.c **** }
 3676              		.loc 1 846 0
 3677 0026 00BF     		nop
 3678 0028 1037     		adds	r7, r7, #16
 3679              		.cfi_def_cfa_offset 8
 3680 002a BD46     		mov	sp, r7
 3681              		.cfi_def_cfa_register 13
 3682              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 97


 3683 002c 80BD     		pop	{r7, pc}
 3684              		.cfi_endproc
 3685              	.LFE85:
 3686              		.size	sendAcknowledgment, .-sendAcknowledgment
 3687 002e 00BF     		.section	.text.memStore,"ax",%progbits
 3688              		.align	2
 3689              		.global	memStore
 3690              		.thumb
 3691              		.thumb_func
 3692              		.type	memStore, %function
 3693              	memStore:
 3694              	.LFB86:
 847:..\src/command_processing.c **** 
 848:..\src/command_processing.c **** //==============================================================================
 849:..\src/command_processing.c **** //                                                                  STORE MEMORY
 850:..\src/command_processing.c **** //==============================================================================
 851:..\src/command_processing.c **** 
 852:..\src/command_processing.c **** 
 853:..\src/command_processing.c **** uint8 memStore(int displacement)
 854:..\src/command_processing.c **** {
 3695              		.loc 1 854 0
 3696              		.cfi_startproc
 3697              		@ args = 0, pretend = 0, frame = 24
 3698              		@ frame_needed = 1, uses_anonymous_args = 0
 3699 0000 80B5     		push	{r7, lr}
 3700              		.cfi_def_cfa_offset 8
 3701              		.cfi_offset 7, -8
 3702              		.cfi_offset 14, -4
 3703 0002 86B0     		sub	sp, sp, #24
 3704              		.cfi_def_cfa_offset 32
 3705 0004 00AF     		add	r7, sp, #0
 3706              		.cfi_def_cfa_register 7
 3707 0006 7860     		str	r0, [r7, #4]
 855:..\src/command_processing.c ****     int i;  // iterator
 856:..\src/command_processing.c ****     uint8 writeStatus;
 857:..\src/command_processing.c ****     int pages;
 858:..\src/command_processing.c ****     uint8 ret_val = 1;
 3708              		.loc 1 858 0
 3709 0008 0123     		movs	r3, #1
 3710 000a FB74     		strb	r3, [r7, #19]
 859:..\src/command_processing.c **** 
 860:..\src/command_processing.c ****     // Disable Interrupt
 861:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 3711              		.loc 1 861 0
 3712 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 862:..\src/command_processing.c **** 
 863:..\src/command_processing.c ****     // Stop motor
 864:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 865:..\src/command_processing.c **** 
 866:..\src/command_processing.c ****     // Update temperature information for better writing performance
 867:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 3713              		.loc 1 867 0
 3714 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 3715              		.loc 1 869 0
 3716 0014 1C4A     		ldr	r2, .L196
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 98


 3717 0016 1D4B     		ldr	r3, .L196+4
 3718 0018 1046     		mov	r0, r2
 3719 001a 1946     		mov	r1, r3
 3720 001c 6023     		movs	r3, #96
 3721 001e 1A46     		mov	r2, r3
 3722 0020 FFF7FEFF 		bl	memcpy
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 3723              		.loc 1 871 0
 3724 0024 0623     		movs	r3, #6
 3725 0026 FB60     		str	r3, [r7, #12]
 872:..\src/command_processing.c **** 
 873:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 3726              		.loc 1 873 0
 3727 0028 0023     		movs	r3, #0
 3728 002a 7B61     		str	r3, [r7, #20]
 3729 002c 18E0     		b	.L191
 3730              	.L194:
 874:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 3731              		.loc 1 874 0
 3732 002e 7B69     		ldr	r3, [r7, #20]
 3733 0030 1B01     		lsls	r3, r3, #4
 3734 0032 1A46     		mov	r2, r3
 3735 0034 154B     		ldr	r3, .L196+4
 3736 0036 D018     		adds	r0, r2, r3
 3737 0038 7B69     		ldr	r3, [r7, #20]
 3738 003a DAB2     		uxtb	r2, r3
 3739 003c 7B68     		ldr	r3, [r7, #4]
 3740 003e DBB2     		uxtb	r3, r3
 3741 0040 1344     		add	r3, r3, r2
 3742 0042 DBB2     		uxtb	r3, r3
 3743 0044 1946     		mov	r1, r3
 3744 0046 FFF7FEFF 		bl	EEPROM_Write
 3745 004a 0346     		mov	r3, r0
 3746 004c FB72     		strb	r3, [r7, #11]
 875:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 3747              		.loc 1 875 0
 3748 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3749 0050 002B     		cmp	r3, #0
 3750 0052 02D0     		beq	.L192
 876:..\src/command_processing.c ****             ret_val = 0;
 3751              		.loc 1 876 0
 3752 0054 0023     		movs	r3, #0
 3753 0056 FB74     		strb	r3, [r7, #19]
 877:..\src/command_processing.c ****             break;
 3754              		.loc 1 877 0
 3755 0058 06E0     		b	.L193
 3756              	.L192:
 873:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 3757              		.loc 1 873 0 discriminator 2
 3758 005a 7B69     		ldr	r3, [r7, #20]
 3759 005c 0133     		adds	r3, r3, #1
 3760 005e 7B61     		str	r3, [r7, #20]
 3761              	.L191:
 873:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 3762              		.loc 1 873 0 is_stmt 0 discriminator 1
 3763 0060 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 99


 3764 0062 FB68     		ldr	r3, [r7, #12]
 3765 0064 9A42     		cmp	r2, r3
 3766 0066 E2DB     		blt	.L194
 3767              	.L193:
 878:..\src/command_processing.c ****         }
 879:..\src/command_processing.c ****     }
 880:..\src/command_processing.c **** 
 881:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 3768              		.loc 1 881 0 is_stmt 1
 3769 0068 084A     		ldr	r2, .L196+4
 3770 006a 074B     		ldr	r3, .L196
 3771 006c 1046     		mov	r0, r2
 3772 006e 1946     		mov	r1, r3
 3773 0070 6023     		movs	r3, #96
 3774 0072 1A46     		mov	r2, r3
 3775 0074 FFF7FEFF 		bl	memcpy
 882:..\src/command_processing.c **** 
 883:..\src/command_processing.c ****     // Re-Enable Interrupt
 884:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 3776              		.loc 1 884 0
 3777 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 885:..\src/command_processing.c **** 
 886:..\src/command_processing.c ****     return ret_val;
 3778              		.loc 1 886 0
 3779 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 887:..\src/command_processing.c **** }
 3780              		.loc 1 887 0
 3781 007e 1846     		mov	r0, r3
 3782 0080 1837     		adds	r7, r7, #24
 3783              		.cfi_def_cfa_offset 8
 3784 0082 BD46     		mov	sp, r7
 3785              		.cfi_def_cfa_register 13
 3786              		@ sp needed
 3787 0084 80BD     		pop	{r7, pc}
 3788              	.L197:
 3789 0086 00BF     		.align	2
 3790              	.L196:
 3791 0088 00000000 		.word	c_mem
 3792 008c 00000000 		.word	g_mem
 3793              		.cfi_endproc
 3794              	.LFE86:
 3795              		.size	memStore, .-memStore
 3796              		.section	.text.memRecall,"ax",%progbits
 3797              		.align	2
 3798              		.global	memRecall
 3799              		.thumb
 3800              		.thumb_func
 3801              		.type	memRecall, %function
 3802              	memRecall:
 3803              	.LFB87:
 888:..\src/command_processing.c **** 
 889:..\src/command_processing.c **** 
 890:..\src/command_processing.c **** //==============================================================================
 891:..\src/command_processing.c **** //                                                                 RECALL MEMORY
 892:..\src/command_processing.c **** //==============================================================================
 893:..\src/command_processing.c **** 
 894:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 100


 895:..\src/command_processing.c **** void memRecall(void)
 896:..\src/command_processing.c **** {  
 3804              		.loc 1 896 0
 3805              		.cfi_startproc
 3806              		@ args = 0, pretend = 0, frame = 8
 3807              		@ frame_needed = 1, uses_anonymous_args = 0
 3808 0000 80B5     		push	{r7, lr}
 3809              		.cfi_def_cfa_offset 8
 3810              		.cfi_offset 7, -8
 3811              		.cfi_offset 14, -4
 3812 0002 82B0     		sub	sp, sp, #8
 3813              		.cfi_def_cfa_offset 16
 3814 0004 00AF     		add	r7, sp, #0
 3815              		.cfi_def_cfa_register 7
 897:..\src/command_processing.c ****     uint16 i;
 898:..\src/command_processing.c **** 
 899:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 3816              		.loc 1 899 0
 3817 0006 0023     		movs	r3, #0
 3818 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 3819 000a 0CE0     		b	.L199
 3820              	.L200:
 900:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 3821              		.loc 1 900 0 discriminator 3
 3822 000c FB88     		ldrh	r3, [r7, #6]
 3823 000e 114A     		ldr	r2, .L204
 3824 0010 1344     		add	r3, r3, r2
 3825 0012 114A     		ldr	r2, .L204+4
 3826 0014 1168     		ldr	r1, [r2]
 3827 0016 FA88     		ldrh	r2, [r7, #6]
 3828 0018 0A44     		add	r2, r2, r1
 3829 001a 1278     		ldrb	r2, [r2]
 3830 001c D2B2     		uxtb	r2, r2
 3831 001e 1A70     		strb	r2, [r3]
 899:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 3832              		.loc 1 899 0 discriminator 3
 3833 0020 FB88     		ldrh	r3, [r7, #6]
 3834 0022 0133     		adds	r3, r3, #1
 3835 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 3836              	.L199:
 899:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 3837              		.loc 1 899 0 is_stmt 0 discriminator 1
 3838 0026 FB88     		ldrh	r3, [r7, #6]
 3839 0028 5F2B     		cmp	r3, #95
 3840 002a EFD9     		bls	.L200
 901:..\src/command_processing.c ****     }
 902:..\src/command_processing.c ****        //check for initialization
 903:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 3841              		.loc 1 903 0 is_stmt 1
 3842 002c 094B     		ldr	r3, .L204
 3843 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3844 0030 002B     		cmp	r3, #0
 3845 0032 02D1     		bne	.L201
 904:..\src/command_processing.c ****         memRestore();
 3846              		.loc 1 904 0
 3847 0034 FFF7FEFF 		bl	memRestore
 905:..\src/command_processing.c ****     } else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 101


 906:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 907:..\src/command_processing.c ****     }   
 908:..\src/command_processing.c **** }
 3848              		.loc 1 908 0
 3849 0038 07E0     		b	.L203
 3850              	.L201:
 906:..\src/command_processing.c ****     }   
 3851              		.loc 1 906 0
 3852 003a 084A     		ldr	r2, .L204+8
 3853 003c 054B     		ldr	r3, .L204
 3854 003e 1046     		mov	r0, r2
 3855 0040 1946     		mov	r1, r3
 3856 0042 6023     		movs	r3, #96
 3857 0044 1A46     		mov	r2, r3
 3858 0046 FFF7FEFF 		bl	memcpy
 3859              	.L203:
 3860              		.loc 1 908 0
 3861 004a 00BF     		nop
 3862 004c 0837     		adds	r7, r7, #8
 3863              		.cfi_def_cfa_offset 8
 3864 004e BD46     		mov	sp, r7
 3865              		.cfi_def_cfa_register 13
 3866              		@ sp needed
 3867 0050 80BD     		pop	{r7, pc}
 3868              	.L205:
 3869 0052 00BF     		.align	2
 3870              	.L204:
 3871 0054 00000000 		.word	g_mem
 3872 0058 00000000 		.word	EEPROM_ADDR
 3873 005c 00000000 		.word	c_mem
 3874              		.cfi_endproc
 3875              	.LFE87:
 3876              		.size	memRecall, .-memRecall
 3877              		.section	.text.memRestore,"ax",%progbits
 3878              		.align	2
 3879              		.global	memRestore
 3880              		.thumb
 3881              		.thumb_func
 3882              		.type	memRestore, %function
 3883              	memRestore:
 3884              	.LFB88:
 909:..\src/command_processing.c **** 
 910:..\src/command_processing.c **** 
 911:..\src/command_processing.c **** //==============================================================================
 912:..\src/command_processing.c **** //                                                                RESTORE MEMORY
 913:..\src/command_processing.c **** //==============================================================================
 914:..\src/command_processing.c **** 
 915:..\src/command_processing.c **** 
 916:..\src/command_processing.c **** uint8 memRestore(void) {
 3885              		.loc 1 916 0
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 8
 3888              		@ frame_needed = 1, uses_anonymous_args = 0
 3889 0000 80B5     		push	{r7, lr}
 3890              		.cfi_def_cfa_offset 8
 3891              		.cfi_offset 7, -8
 3892              		.cfi_offset 14, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 102


 3893 0002 82B0     		sub	sp, sp, #8
 3894              		.cfi_def_cfa_offset 16
 3895 0004 00AF     		add	r7, sp, #0
 3896              		.cfi_def_cfa_register 7
 917:..\src/command_processing.c ****     uint16 i;
 918:..\src/command_processing.c **** 
 919:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 3897              		.loc 1 919 0
 3898 0006 0023     		movs	r3, #0
 3899 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 3900 000a 0EE0     		b	.L207
 3901              	.L208:
 920:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 3902              		.loc 1 920 0 discriminator 3
 3903 000c FB88     		ldrh	r3, [r7, #6]
 3904 000e 104A     		ldr	r2, .L211
 3905 0010 1344     		add	r3, r3, r2
 3906 0012 104A     		ldr	r2, .L211+4
 3907 0014 1168     		ldr	r1, [r2]
 3908 0016 FA88     		ldrh	r2, [r7, #6]
 3909 0018 02F54872 		add	r2, r2, #800
 3910 001c 0A44     		add	r2, r2, r1
 3911 001e 1278     		ldrb	r2, [r2]
 3912 0020 D2B2     		uxtb	r2, r2
 3913 0022 1A70     		strb	r2, [r3]
 919:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 3914              		.loc 1 919 0 discriminator 3
 3915 0024 FB88     		ldrh	r3, [r7, #6]
 3916 0026 0133     		adds	r3, r3, #1
 3917 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 3918              	.L207:
 919:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 3919              		.loc 1 919 0 is_stmt 0 discriminator 1
 3920 002a FB88     		ldrh	r3, [r7, #6]
 3921 002c 5F2B     		cmp	r3, #95
 3922 002e EDD9     		bls	.L208
 921:..\src/command_processing.c ****     }
 922:..\src/command_processing.c **** 
 923:..\src/command_processing.c ****     //check for initialization
 924:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 3923              		.loc 1 924 0 is_stmt 1
 3924 0030 074B     		ldr	r3, .L211
 3925 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3926 0034 002B     		cmp	r3, #0
 3927 0036 03D1     		bne	.L209
 925:..\src/command_processing.c ****         return memInit();
 3928              		.loc 1 925 0
 3929 0038 FFF7FEFF 		bl	memInit
 3930 003c 0346     		mov	r3, r0
 3931 003e 03E0     		b	.L210
 3932              	.L209:
 926:..\src/command_processing.c ****     } else {
 927:..\src/command_processing.c ****         return memStore(0);
 3933              		.loc 1 927 0
 3934 0040 0020     		movs	r0, #0
 3935 0042 FFF7FEFF 		bl	memStore
 3936 0046 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 103


 3937              	.L210:
 928:..\src/command_processing.c ****     }  
 929:..\src/command_processing.c **** }
 3938              		.loc 1 929 0
 3939 0048 1846     		mov	r0, r3
 3940 004a 0837     		adds	r7, r7, #8
 3941              		.cfi_def_cfa_offset 8
 3942 004c BD46     		mov	sp, r7
 3943              		.cfi_def_cfa_register 13
 3944              		@ sp needed
 3945 004e 80BD     		pop	{r7, pc}
 3946              	.L212:
 3947              		.align	2
 3948              	.L211:
 3949 0050 00000000 		.word	g_mem
 3950 0054 00000000 		.word	EEPROM_ADDR
 3951              		.cfi_endproc
 3952              	.LFE88:
 3953              		.size	memRestore, .-memRestore
 3954              		.section	.text.memInit,"ax",%progbits
 3955              		.align	2
 3956              		.global	memInit
 3957              		.thumb
 3958              		.thumb_func
 3959              		.type	memInit, %function
 3960              	memInit:
 3961              	.LFB89:
 930:..\src/command_processing.c **** 
 931:..\src/command_processing.c **** //==============================================================================
 932:..\src/command_processing.c **** //                                                                   MEMORY INIT
 933:..\src/command_processing.c **** //==============================================================================
 934:..\src/command_processing.c **** 
 935:..\src/command_processing.c **** uint8 memInit(void)
 936:..\src/command_processing.c **** {
 3962              		.loc 1 936 0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 1, uses_anonymous_args = 0
 3966 0000 80B5     		push	{r7, lr}
 3967              		.cfi_def_cfa_offset 8
 3968              		.cfi_offset 7, -8
 3969              		.cfi_offset 14, -4
 3970 0002 00AF     		add	r7, sp, #0
 3971              		.cfi_def_cfa_register 7
 937:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
 938:..\src/command_processing.c ****     g_mem.flag = TRUE;
 3972              		.loc 1 938 0
 3973 0004 304B     		ldr	r3, .L217
 3974 0006 0122     		movs	r2, #1
 3975 0008 1A70     		strb	r2, [r3]
 939:..\src/command_processing.c ****     
 940:..\src/command_processing.c ****     // DEV STRUCT
 941:..\src/command_processing.c ****     g_mem.dev.id = 2;
 3976              		.loc 1 941 0
 3977 000a 2F4B     		ldr	r3, .L217
 3978 000c 0222     		movs	r2, #2
 3979 000e 1A74     		strb	r2, [r3, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 104


 942:..\src/command_processing.c ****     
 943:..\src/command_processing.c ****     // SH STRUCT
 944:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 3980              		.loc 1 944 0
 3981 0010 2D4B     		ldr	r3, .L217
 3982 0012 0022     		movs	r2, #0
 3983 0014 1A62     		str	r2, [r3, #32]
 945:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 3984              		.loc 1 945 0
 3985 0016 2C4B     		ldr	r3, .L217
 3986 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 3987 001c 1A46     		mov	r2, r3
 3988 001e 4FF47A53 		mov	r3, #16000
 3989 0022 9340     		lsls	r3, r3, r2
 3990 0024 284A     		ldr	r2, .L217
 3991 0026 5362     		str	r3, [r2, #36]
 946:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 3992              		.loc 1 946 0
 3993 0028 274B     		ldr	r3, .L217
 3994 002a 0422     		movs	r2, #4
 3995 002c 83F82820 		strb	r2, [r3, #40]
 947:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 3996              		.loc 1 947 0
 3997 0030 254B     		ldr	r3, .L217
 3998 0032 0322     		movs	r2, #3
 3999 0034 83F82920 		strb	r2, [r3, #41]
 948:..\src/command_processing.c **** 
 949:..\src/command_processing.c ****     // EMG STRUCT     
 950:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4000              		.loc 1 950 0
 4001 0038 234B     		ldr	r3, .L217
 4002 003a C822     		movs	r2, #200
 4003 003c 1A86     		strh	r2, [r3, #48]	@ movhi
 951:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4004              		.loc 1 951 0
 4005 003e 224B     		ldr	r3, .L217
 4006 0040 C822     		movs	r2, #200
 4007 0042 5A86     		strh	r2, [r3, #50]	@ movhi
 952:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4008              		.loc 1 952 0
 4009 0044 204B     		ldr	r3, .L217
 4010 0046 4FF48062 		mov	r2, #1024
 4011 004a 5A63     		str	r2, [r3, #52]
 953:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4012              		.loc 1 953 0
 4013 004c 1E4B     		ldr	r3, .L217
 4014 004e 4FF48062 		mov	r2, #1024
 4015 0052 9A63     		str	r2, [r3, #56]
 954:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4016              		.loc 1 954 0
 4017 0054 1C4B     		ldr	r3, .L217
 4018 0056 6422     		movs	r2, #100
 4019 0058 83F83C20 		strb	r2, [r3, #60]
 955:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4020              		.loc 1 955 0
 4021 005c 1A4B     		ldr	r3, .L217
 4022 005e 6422     		movs	r2, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 105


 4023 0060 83F83D20 		strb	r2, [r3, #61]
 956:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4024              		.loc 1 956 0
 4025 0064 184B     		ldr	r3, .L217
 4026 0066 0022     		movs	r2, #0
 4027 0068 83F83E20 		strb	r2, [r3, #62]
 957:..\src/command_processing.c ****     
 958:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
 959:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4028              		.loc 1 959 0
 4029 006c 164B     		ldr	r3, .L217
 4030 006e 0022     		movs	r2, #0
 4031 0070 83F84020 		strb	r2, [r3, #64]
 960:..\src/command_processing.c ****     g_mem.MS.master_mode_active = 1;
 4032              		.loc 1 960 0
 4033 0074 144B     		ldr	r3, .L217
 4034 0076 0122     		movs	r2, #1
 4035 0078 83F84020 		strb	r2, [r3, #64]
 961:..\src/command_processing.c ****     
 962:..\src/command_processing.c ****     //FEEDBACK STRUCT
 963:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4036              		.loc 1 963 0
 4037 007c 124B     		ldr	r3, .L217
 4038 007e 4FF4E172 		mov	r2, #450
 4039 0082 1A65     		str	r2, [r3, #80]
 964:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4040              		.loc 1 964 0
 4041 0084 104B     		ldr	r3, .L217
 4042 0086 114A     		ldr	r2, .L217+4
 4043 0088 5A65     		str	r2, [r3, #84]	@ float
 965:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 4044              		.loc 1 965 0
 4045 008a 0F4B     		ldr	r3, .L217
 4046 008c 4FF07E52 		mov	r2, #1065353216
 4047 0090 9A65     		str	r2, [r3, #88]	@ float
 966:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 4048              		.loc 1 966 0
 4049 0092 0D4B     		ldr	r3, .L217
 4050 0094 0022     		movs	r2, #0
 4051 0096 83F85C20 		strb	r2, [r3, #92]
 967:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 4052              		.loc 1 967 0
 4053 009a 0B4B     		ldr	r3, .L217
 4054 009c 0022     		movs	r2, #0
 4055 009e 83F85D20 		strb	r2, [r3, #93]
 968:..\src/command_processing.c ****     
 969:..\src/command_processing.c ****     //write that configuration to EEPROM
 970:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 4056              		.loc 1 970 0
 4057 00a2 0020     		movs	r0, #0
 4058 00a4 FFF7FEFF 		bl	memStore
 4059 00a8 0346     		mov	r3, r0
 4060 00aa 002B     		cmp	r3, #0
 4061 00ac 07D0     		beq	.L214
 4062              		.loc 1 970 0 is_stmt 0 discriminator 1
 4063 00ae 3220     		movs	r0, #50
 4064 00b0 FFF7FEFF 		bl	memStore
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 106


 4065 00b4 0346     		mov	r3, r0
 4066 00b6 002B     		cmp	r3, #0
 4067 00b8 01D0     		beq	.L214
 4068              		.loc 1 970 0 discriminator 3
 4069 00ba 0123     		movs	r3, #1
 4070 00bc 00E0     		b	.L215
 4071              	.L214:
 4072              		.loc 1 970 0 discriminator 4
 4073 00be 0023     		movs	r3, #0
 4074              	.L215:
 4075              		.loc 1 970 0 discriminator 6
 4076 00c0 DBB2     		uxtb	r3, r3
 4077 00c2 1846     		mov	r0, r3
 4078 00c4 80BD     		pop	{r7, pc}
 4079              	.L218:
 4080 00c6 00BF     		.align	2
 4081              	.L217:
 4082 00c8 00000000 		.word	g_mem
 4083 00cc 0000C841 		.word	1103626240
 4084              		.cfi_endproc
 4085              	.LFE89:
 4086              		.size	memInit, .-memInit
 4087              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 4088              		.align	2
 4089              		.global	memInit_SoftHandPro
 4090              		.thumb
 4091              		.thumb_func
 4092              		.type	memInit_SoftHandPro, %function
 4093              	memInit_SoftHandPro:
 4094              	.LFB90:
 971:..\src/command_processing.c **** 
 972:..\src/command_processing.c **** //==============================================================================
 973:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
 974:..\src/command_processing.c **** //==============================================================================
 975:..\src/command_processing.c **** void memInit_SoftHandPro(void)
 976:..\src/command_processing.c **** {
 4095              		.loc 1 976 0 is_stmt 1
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 0
 4098              		@ frame_needed = 1, uses_anonymous_args = 0
 4099              		@ link register save eliminated.
 4100 0000 80B4     		push	{r7}
 4101              		.cfi_def_cfa_offset 4
 4102              		.cfi_offset 7, -4
 4103 0002 00AF     		add	r7, sp, #0
 4104              		.cfi_def_cfa_register 7
 977:..\src/command_processing.c **** }
 4105              		.loc 1 977 0
 4106 0004 00BF     		nop
 4107 0006 BD46     		mov	sp, r7
 4108              		.cfi_def_cfa_register 13
 4109              		@ sp needed
 4110 0008 80BC     		pop	{r7}
 4111              		.cfi_restore 7
 4112              		.cfi_def_cfa_offset 0
 4113 000a 7047     		bx	lr
 4114              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 107


 4115              	.LFE90:
 4116              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 4117              		.section	.text.memInit_Master,"ax",%progbits
 4118              		.align	2
 4119              		.global	memInit_Master
 4120              		.thumb
 4121              		.thumb_func
 4122              		.type	memInit_Master, %function
 4123              	memInit_Master:
 4124              	.LFB91:
 978:..\src/command_processing.c **** 
 979:..\src/command_processing.c **** //==============================================================================
 980:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
 981:..\src/command_processing.c **** //==============================================================================
 982:..\src/command_processing.c **** void memInit_Master(void)
 983:..\src/command_processing.c **** {
 4125              		.loc 1 983 0
 4126              		.cfi_startproc
 4127              		@ args = 0, pretend = 0, frame = 0
 4128              		@ frame_needed = 1, uses_anonymous_args = 0
 4129              		@ link register save eliminated.
 4130 0000 80B4     		push	{r7}
 4131              		.cfi_def_cfa_offset 4
 4132              		.cfi_offset 7, -4
 4133 0002 00AF     		add	r7, sp, #0
 4134              		.cfi_def_cfa_register 7
 984:..\src/command_processing.c **** }
 4135              		.loc 1 984 0
 4136 0004 00BF     		nop
 4137 0006 BD46     		mov	sp, r7
 4138              		.cfi_def_cfa_register 13
 4139              		@ sp needed
 4140 0008 80BC     		pop	{r7}
 4141              		.cfi_restore 7
 4142              		.cfi_def_cfa_offset 0
 4143 000a 7047     		bx	lr
 4144              		.cfi_endproc
 4145              	.LFE91:
 4146              		.size	memInit_Master, .-memInit_Master
 4147              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 4148              		.align	2
 4149              		.global	memInit_AirChambers_Vibrotactile_Fb
 4150              		.thumb
 4151              		.thumb_func
 4152              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 4153              	memInit_AirChambers_Vibrotactile_Fb:
 4154              	.LFB92:
 985:..\src/command_processing.c **** 
 986:..\src/command_processing.c **** //==============================================================================
 987:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
 988:..\src/command_processing.c **** //==============================================================================
 989:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
 990:..\src/command_processing.c **** {
 4155              		.loc 1 990 0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 0
 4158              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 108


 4159              		@ link register save eliminated.
 4160 0000 80B4     		push	{r7}
 4161              		.cfi_def_cfa_offset 4
 4162              		.cfi_offset 7, -4
 4163 0002 00AF     		add	r7, sp, #0
 4164              		.cfi_def_cfa_register 7
 991:..\src/command_processing.c **** }
 4165              		.loc 1 991 0
 4166 0004 00BF     		nop
 4167 0006 BD46     		mov	sp, r7
 4168              		.cfi_def_cfa_register 13
 4169              		@ sp needed
 4170 0008 80BC     		pop	{r7}
 4171              		.cfi_restore 7
 4172              		.cfi_def_cfa_offset 0
 4173 000a 7047     		bx	lr
 4174              		.cfi_endproc
 4175              	.LFE92:
 4176              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 4177              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 4178              		.align	2
 4179              		.global	memInit_OtbkActWristMs
 4180              		.thumb
 4181              		.thumb_func
 4182              		.type	memInit_OtbkActWristMs, %function
 4183              	memInit_OtbkActWristMs:
 4184              	.LFB93:
 992:..\src/command_processing.c **** 
 993:..\src/command_processing.c **** //==============================================================================
 994:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
 995:..\src/command_processing.c **** //==============================================================================
 996:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
 997:..\src/command_processing.c **** {
 4185              		.loc 1 997 0
 4186              		.cfi_startproc
 4187              		@ args = 0, pretend = 0, frame = 0
 4188              		@ frame_needed = 1, uses_anonymous_args = 0
 4189              		@ link register save eliminated.
 4190 0000 80B4     		push	{r7}
 4191              		.cfi_def_cfa_offset 4
 4192              		.cfi_offset 7, -4
 4193 0002 00AF     		add	r7, sp, #0
 4194              		.cfi_def_cfa_register 7
 998:..\src/command_processing.c **** }
 4195              		.loc 1 998 0
 4196 0004 00BF     		nop
 4197 0006 BD46     		mov	sp, r7
 4198              		.cfi_def_cfa_register 13
 4199              		@ sp needed
 4200 0008 80BC     		pop	{r7}
 4201              		.cfi_restore 7
 4202              		.cfi_def_cfa_offset 0
 4203 000a 7047     		bx	lr
 4204              		.cfi_endproc
 4205              	.LFE93:
 4206              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 4207              		.section	.text.cmd_get_measurements,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 109


 4208              		.align	2
 4209              		.global	cmd_get_measurements
 4210              		.thumb
 4211              		.thumb_func
 4212              		.type	cmd_get_measurements, %function
 4213              	cmd_get_measurements:
 4214              	.LFB94:
 999:..\src/command_processing.c **** 
1000:..\src/command_processing.c **** //==============================================================================
1001:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
1002:..\src/command_processing.c **** //==============================================================================
1003:..\src/command_processing.c **** /**
1004:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1005:..\src/command_processing.c **** **/
1006:..\src/command_processing.c **** 
1007:..\src/command_processing.c **** void cmd_get_measurements(){
 4215              		.loc 1 1007 0
 4216              		.cfi_startproc
 4217              		@ args = 0, pretend = 0, frame = 0
 4218              		@ frame_needed = 1, uses_anonymous_args = 0
 4219              		@ link register save eliminated.
 4220 0000 80B4     		push	{r7}
 4221              		.cfi_def_cfa_offset 4
 4222              		.cfi_offset 7, -4
 4223 0002 00AF     		add	r7, sp, #0
 4224              		.cfi_def_cfa_register 7
1008:..\src/command_processing.c ****  
1009:..\src/command_processing.c ****    
1010:..\src/command_processing.c **** }
 4225              		.loc 1 1010 0
 4226 0004 00BF     		nop
 4227 0006 BD46     		mov	sp, r7
 4228              		.cfi_def_cfa_register 13
 4229              		@ sp needed
 4230 0008 80BC     		pop	{r7}
 4231              		.cfi_restore 7
 4232              		.cfi_def_cfa_offset 0
 4233 000a 7047     		bx	lr
 4234              		.cfi_endproc
 4235              	.LFE94:
 4236              		.size	cmd_get_measurements, .-cmd_get_measurements
 4237              		.section	.text.cmd_get_velocities,"ax",%progbits
 4238              		.align	2
 4239              		.global	cmd_get_velocities
 4240              		.thumb
 4241              		.thumb_func
 4242              		.type	cmd_get_velocities, %function
 4243              	cmd_get_velocities:
 4244              	.LFB95:
1011:..\src/command_processing.c **** 
1012:..\src/command_processing.c **** void cmd_get_velocities(){
 4245              		.loc 1 1012 0
 4246              		.cfi_startproc
 4247              		@ args = 0, pretend = 0, frame = 0
 4248              		@ frame_needed = 1, uses_anonymous_args = 0
 4249              		@ link register save eliminated.
 4250 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 110


 4251              		.cfi_def_cfa_offset 4
 4252              		.cfi_offset 7, -4
 4253 0002 00AF     		add	r7, sp, #0
 4254              		.cfi_def_cfa_register 7
1013:..\src/command_processing.c ****  
1014:..\src/command_processing.c **** }
 4255              		.loc 1 1014 0
 4256 0004 00BF     		nop
 4257 0006 BD46     		mov	sp, r7
 4258              		.cfi_def_cfa_register 13
 4259              		@ sp needed
 4260 0008 80BC     		pop	{r7}
 4261              		.cfi_restore 7
 4262              		.cfi_def_cfa_offset 0
 4263 000a 7047     		bx	lr
 4264              		.cfi_endproc
 4265              	.LFE95:
 4266              		.size	cmd_get_velocities, .-cmd_get_velocities
 4267              		.section	.text.cmd_get_accelerations,"ax",%progbits
 4268              		.align	2
 4269              		.global	cmd_get_accelerations
 4270              		.thumb
 4271              		.thumb_func
 4272              		.type	cmd_get_accelerations, %function
 4273              	cmd_get_accelerations:
 4274              	.LFB96:
1015:..\src/command_processing.c **** 
1016:..\src/command_processing.c **** void cmd_get_accelerations(){
 4275              		.loc 1 1016 0
 4276              		.cfi_startproc
 4277              		@ args = 0, pretend = 0, frame = 0
 4278              		@ frame_needed = 1, uses_anonymous_args = 0
 4279              		@ link register save eliminated.
 4280 0000 80B4     		push	{r7}
 4281              		.cfi_def_cfa_offset 4
 4282              		.cfi_offset 7, -4
 4283 0002 00AF     		add	r7, sp, #0
 4284              		.cfi_def_cfa_register 7
1017:..\src/command_processing.c ****  
1018:..\src/command_processing.c **** }
 4285              		.loc 1 1018 0
 4286 0004 00BF     		nop
 4287 0006 BD46     		mov	sp, r7
 4288              		.cfi_def_cfa_register 13
 4289              		@ sp needed
 4290 0008 80BC     		pop	{r7}
 4291              		.cfi_restore 7
 4292              		.cfi_def_cfa_offset 0
 4293 000a 7047     		bx	lr
 4294              		.cfi_endproc
 4295              	.LFE96:
 4296              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 4297              		.section	.text.cmd_get_joystick,"ax",%progbits
 4298              		.align	2
 4299              		.global	cmd_get_joystick
 4300              		.thumb
 4301              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 111


 4302              		.type	cmd_get_joystick, %function
 4303              	cmd_get_joystick:
 4304              	.LFB97:
1019:..\src/command_processing.c **** 
1020:..\src/command_processing.c **** void cmd_get_joystick() {
 4305              		.loc 1 1020 0
 4306              		.cfi_startproc
 4307              		@ args = 0, pretend = 0, frame = 0
 4308              		@ frame_needed = 1, uses_anonymous_args = 0
 4309              		@ link register save eliminated.
 4310 0000 80B4     		push	{r7}
 4311              		.cfi_def_cfa_offset 4
 4312              		.cfi_offset 7, -4
 4313 0002 00AF     		add	r7, sp, #0
 4314              		.cfi_def_cfa_register 7
1021:..\src/command_processing.c ****  
1022:..\src/command_processing.c **** }
 4315              		.loc 1 1022 0
 4316 0004 00BF     		nop
 4317 0006 BD46     		mov	sp, r7
 4318              		.cfi_def_cfa_register 13
 4319              		@ sp needed
 4320 0008 80BC     		pop	{r7}
 4321              		.cfi_restore 7
 4322              		.cfi_def_cfa_offset 0
 4323 000a 7047     		bx	lr
 4324              		.cfi_endproc
 4325              	.LFE97:
 4326              		.size	cmd_get_joystick, .-cmd_get_joystick
 4327              		.section	.text.cmd_set_inputs,"ax",%progbits
 4328              		.align	2
 4329              		.global	cmd_set_inputs
 4330              		.thumb
 4331              		.thumb_func
 4332              		.type	cmd_set_inputs, %function
 4333              	cmd_set_inputs:
 4334              	.LFB98:
1023:..\src/command_processing.c **** 
1024:..\src/command_processing.c **** void cmd_set_inputs(){
 4335              		.loc 1 1024 0
 4336              		.cfi_startproc
 4337              		@ args = 0, pretend = 0, frame = 0
 4338              		@ frame_needed = 1, uses_anonymous_args = 0
 4339              		@ link register save eliminated.
 4340 0000 80B4     		push	{r7}
 4341              		.cfi_def_cfa_offset 4
 4342              		.cfi_offset 7, -4
 4343 0002 00AF     		add	r7, sp, #0
 4344              		.cfi_def_cfa_register 7
1025:..\src/command_processing.c ****     
1026:..\src/command_processing.c **** }
 4345              		.loc 1 1026 0
 4346 0004 00BF     		nop
 4347 0006 BD46     		mov	sp, r7
 4348              		.cfi_def_cfa_register 13
 4349              		@ sp needed
 4350 0008 80BC     		pop	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 112


 4351              		.cfi_restore 7
 4352              		.cfi_def_cfa_offset 0
 4353 000a 7047     		bx	lr
 4354              		.cfi_endproc
 4355              	.LFE98:
 4356              		.size	cmd_set_inputs, .-cmd_set_inputs
 4357              		.section	.text.cmd_activate,"ax",%progbits
 4358              		.align	2
 4359              		.global	cmd_activate
 4360              		.thumb
 4361              		.thumb_func
 4362              		.type	cmd_activate, %function
 4363              	cmd_activate:
 4364              	.LFB99:
1027:..\src/command_processing.c **** 
1028:..\src/command_processing.c **** void cmd_activate(){
 4365              		.loc 1 1028 0
 4366              		.cfi_startproc
 4367              		@ args = 0, pretend = 0, frame = 0
 4368              		@ frame_needed = 1, uses_anonymous_args = 0
 4369              		@ link register save eliminated.
 4370 0000 80B4     		push	{r7}
 4371              		.cfi_def_cfa_offset 4
 4372              		.cfi_offset 7, -4
 4373 0002 00AF     		add	r7, sp, #0
 4374              		.cfi_def_cfa_register 7
1029:..\src/command_processing.c ****     
1030:..\src/command_processing.c **** }
 4375              		.loc 1 1030 0
 4376 0004 00BF     		nop
 4377 0006 BD46     		mov	sp, r7
 4378              		.cfi_def_cfa_register 13
 4379              		@ sp needed
 4380 0008 80BC     		pop	{r7}
 4381              		.cfi_restore 7
 4382              		.cfi_def_cfa_offset 0
 4383 000a 7047     		bx	lr
 4384              		.cfi_endproc
 4385              	.LFE99:
 4386              		.size	cmd_activate, .-cmd_activate
 4387              		.section	.text.cmd_get_activate,"ax",%progbits
 4388              		.align	2
 4389              		.global	cmd_get_activate
 4390              		.thumb
 4391              		.thumb_func
 4392              		.type	cmd_get_activate, %function
 4393              	cmd_get_activate:
 4394              	.LFB100:
1031:..\src/command_processing.c **** 
1032:..\src/command_processing.c **** void cmd_get_activate(){
 4395              		.loc 1 1032 0
 4396              		.cfi_startproc
 4397              		@ args = 0, pretend = 0, frame = 0
 4398              		@ frame_needed = 1, uses_anonymous_args = 0
 4399              		@ link register save eliminated.
 4400 0000 80B4     		push	{r7}
 4401              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 113


 4402              		.cfi_offset 7, -4
 4403 0002 00AF     		add	r7, sp, #0
 4404              		.cfi_def_cfa_register 7
1033:..\src/command_processing.c ****     
1034:..\src/command_processing.c **** }
 4405              		.loc 1 1034 0
 4406 0004 00BF     		nop
 4407 0006 BD46     		mov	sp, r7
 4408              		.cfi_def_cfa_register 13
 4409              		@ sp needed
 4410 0008 80BC     		pop	{r7}
 4411              		.cfi_restore 7
 4412              		.cfi_def_cfa_offset 0
 4413 000a 7047     		bx	lr
 4414              		.cfi_endproc
 4415              	.LFE100:
 4416              		.size	cmd_get_activate, .-cmd_get_activate
 4417              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 4418              		.align	2
 4419              		.global	cmd_get_curr_and_meas
 4420              		.thumb
 4421              		.thumb_func
 4422              		.type	cmd_get_curr_and_meas, %function
 4423              	cmd_get_curr_and_meas:
 4424              	.LFB101:
1035:..\src/command_processing.c **** 
1036:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 4425              		.loc 1 1036 0
 4426              		.cfi_startproc
 4427              		@ args = 0, pretend = 0, frame = 0
 4428              		@ frame_needed = 1, uses_anonymous_args = 0
 4429              		@ link register save eliminated.
 4430 0000 80B4     		push	{r7}
 4431              		.cfi_def_cfa_offset 4
 4432              		.cfi_offset 7, -4
 4433 0002 00AF     		add	r7, sp, #0
 4434              		.cfi_def_cfa_register 7
1037:..\src/command_processing.c ****    
1038:..\src/command_processing.c ****    
1039:..\src/command_processing.c **** }
 4435              		.loc 1 1039 0
 4436 0004 00BF     		nop
 4437 0006 BD46     		mov	sp, r7
 4438              		.cfi_def_cfa_register 13
 4439              		@ sp needed
 4440 0008 80BC     		pop	{r7}
 4441              		.cfi_restore 7
 4442              		.cfi_def_cfa_offset 0
 4443 000a 7047     		bx	lr
 4444              		.cfi_endproc
 4445              	.LFE101:
 4446              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 4447              		.section	.text.cmd_get_currents,"ax",%progbits
 4448              		.align	2
 4449              		.global	cmd_get_currents
 4450              		.thumb
 4451              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 114


 4452              		.type	cmd_get_currents, %function
 4453              	cmd_get_currents:
 4454              	.LFB102:
1040:..\src/command_processing.c **** 
1041:..\src/command_processing.c **** void cmd_get_currents(){
 4455              		.loc 1 1041 0
 4456              		.cfi_startproc
 4457              		@ args = 0, pretend = 0, frame = 0
 4458              		@ frame_needed = 1, uses_anonymous_args = 0
 4459              		@ link register save eliminated.
 4460 0000 80B4     		push	{r7}
 4461              		.cfi_def_cfa_offset 4
 4462              		.cfi_offset 7, -4
 4463 0002 00AF     		add	r7, sp, #0
 4464              		.cfi_def_cfa_register 7
1042:..\src/command_processing.c ****    
1043:..\src/command_processing.c **** }
 4465              		.loc 1 1043 0
 4466 0004 00BF     		nop
 4467 0006 BD46     		mov	sp, r7
 4468              		.cfi_def_cfa_register 13
 4469              		@ sp needed
 4470 0008 80BC     		pop	{r7}
 4471              		.cfi_restore 7
 4472              		.cfi_def_cfa_offset 0
 4473 000a 7047     		bx	lr
 4474              		.cfi_endproc
 4475              	.LFE102:
 4476              		.size	cmd_get_currents, .-cmd_get_currents
 4477              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 4478              		.align	2
 4479              		.global	cmd_get_currents_for_cuff
 4480              		.thumb
 4481              		.thumb_func
 4482              		.type	cmd_get_currents_for_cuff, %function
 4483              	cmd_get_currents_for_cuff:
 4484              	.LFB103:
1044:..\src/command_processing.c **** 
1045:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 4485              		.loc 1 1045 0
 4486              		.cfi_startproc
 4487              		@ args = 0, pretend = 0, frame = 0
 4488              		@ frame_needed = 1, uses_anonymous_args = 0
 4489              		@ link register save eliminated.
 4490 0000 80B4     		push	{r7}
 4491              		.cfi_def_cfa_offset 4
 4492              		.cfi_offset 7, -4
 4493 0002 00AF     		add	r7, sp, #0
 4494              		.cfi_def_cfa_register 7
1046:..\src/command_processing.c ****    
1047:..\src/command_processing.c **** }
 4495              		.loc 1 1047 0
 4496 0004 00BF     		nop
 4497 0006 BD46     		mov	sp, r7
 4498              		.cfi_def_cfa_register 13
 4499              		@ sp needed
 4500 0008 80BC     		pop	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 115


 4501              		.cfi_restore 7
 4502              		.cfi_def_cfa_offset 0
 4503 000a 7047     		bx	lr
 4504              		.cfi_endproc
 4505              	.LFE103:
 4506              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 4507              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
 4508              		.align	2
 4509              		.global	cmd_get_vibrotactile_inputs
 4510              		.thumb
 4511              		.thumb_func
 4512              		.type	cmd_get_vibrotactile_inputs, %function
 4513              	cmd_get_vibrotactile_inputs:
 4514              	.LFB104:
1048:..\src/command_processing.c **** 
1049:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 4515              		.loc 1 1049 0
 4516              		.cfi_startproc
 4517              		@ args = 0, pretend = 0, frame = 0
 4518              		@ frame_needed = 1, uses_anonymous_args = 0
 4519              		@ link register save eliminated.
 4520 0000 80B4     		push	{r7}
 4521              		.cfi_def_cfa_offset 4
 4522              		.cfi_offset 7, -4
 4523 0002 00AF     		add	r7, sp, #0
 4524              		.cfi_def_cfa_register 7
1050:..\src/command_processing.c ****     
1051:..\src/command_processing.c **** }
 4525              		.loc 1 1051 0
 4526 0004 00BF     		nop
 4527 0006 BD46     		mov	sp, r7
 4528              		.cfi_def_cfa_register 13
 4529              		@ sp needed
 4530 0008 80BC     		pop	{r7}
 4531              		.cfi_restore 7
 4532              		.cfi_def_cfa_offset 0
 4533 000a 7047     		bx	lr
 4534              		.cfi_endproc
 4535              	.LFE104:
 4536              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
 4537              		.section	.text.commReadIMUFromSH,"ax",%progbits
 4538              		.align	2
 4539              		.global	commReadIMUFromSH
 4540              		.thumb
 4541              		.thumb_func
 4542              		.type	commReadIMUFromSH, %function
 4543              	commReadIMUFromSH:
 4544              	.LFB105:
1052:..\src/command_processing.c **** 
1053:..\src/command_processing.c **** //==============================================================================
1054:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1055:..\src/command_processing.c **** //==============================================================================
1056:..\src/command_processing.c **** void commReadIMUFromSH(){
 4545              		.loc 1 1056 0
 4546              		.cfi_startproc
 4547              		@ args = 0, pretend = 0, frame = 32
 4548              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 116


 4549 0000 80B5     		push	{r7, lr}
 4550              		.cfi_def_cfa_offset 8
 4551              		.cfi_offset 7, -8
 4552              		.cfi_offset 14, -4
 4553 0002 88B0     		sub	sp, sp, #32
 4554              		.cfi_def_cfa_offset 40
 4555 0004 00AF     		add	r7, sp, #0
 4556              		.cfi_def_cfa_register 7
1057:..\src/command_processing.c **** 
1058:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1059:..\src/command_processing.c ****     // resulted from the processed IMU values.
1060:..\src/command_processing.c ****     
1061:..\src/command_processing.c ****     uint8 packet_data[16];
1062:..\src/command_processing.c ****     uint8 packet_length;
1063:..\src/command_processing.c ****    
1064:..\src/command_processing.c ****     uint32 t_start, t_end;
1065:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 4557              		.loc 1 1065 0
 4558 0006 0123     		movs	r3, #1
 4559 0008 FB77     		strb	r3, [r7, #31]
1066:..\src/command_processing.c **** 
1067:..\src/command_processing.c ****     packet_length = 2;
 4560              		.loc 1 1067 0
 4561 000a 0223     		movs	r3, #2
 4562 000c BB77     		strb	r3, [r7, #30]
1068:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 4563              		.loc 1 1068 0
 4564 000e FA23     		movs	r3, #250
 4565 0010 3B71     		strb	r3, [r7, #4]
1069:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 4566              		.loc 1 1069 0
 4567 0012 FA23     		movs	r3, #250
 4568 0014 7B71     		strb	r3, [r7, #5]
1070:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 4569              		.loc 1 1070 0
 4570 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 4571 0018 99B2     		uxth	r1, r3
 4572 001a 234B     		ldr	r3, .L241
 4573 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 4574 0020 3B1D     		adds	r3, r7, #4
 4575 0022 1846     		mov	r0, r3
 4576 0024 FFF7FEFF 		bl	commWriteID
1071:..\src/command_processing.c **** 
1072:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 4577              		.loc 1 1072 0
 4578 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 4579 002c 0346     		mov	r3, r0
 4580 002e BB61     		str	r3, [r7, #24]
1073:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 4581              		.loc 1 1073 0
 4582 0030 18E0     		b	.L235
 4583              	.L238:
1074:..\src/command_processing.c ****         if (interrupt_flag){
 4584              		.loc 1 1074 0
 4585 0032 1E4B     		ldr	r3, .L241+4
 4586 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4587 0036 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 117


 4588 0038 04D0     		beq	.L236
1075:..\src/command_processing.c ****             interrupt_flag = FALSE;
 4589              		.loc 1 1075 0
 4590 003a 1C4B     		ldr	r3, .L241+4
 4591 003c 0022     		movs	r2, #0
 4592 003e 1A70     		strb	r2, [r3]
1076:..\src/command_processing.c ****             interrupt_manager();
 4593              		.loc 1 1076 0
 4594 0040 FFF7FEFF 		bl	interrupt_manager
 4595              	.L236:
1077:..\src/command_processing.c ****         }
1078:..\src/command_processing.c **** 
1079:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 4596              		.loc 1 1079 0
 4597 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 4598 0048 0346     		mov	r3, r0
 4599 004a 7B61     		str	r3, [r7, #20]
1080:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 4600              		.loc 1 1080 0
 4601 004c BA69     		ldr	r2, [r7, #24]
 4602 004e 7B69     		ldr	r3, [r7, #20]
 4603 0050 D31A     		subs	r3, r2, r3
 4604 0052 174A     		ldr	r2, .L241+8
 4605 0054 9342     		cmp	r3, r2
 4606 0056 05D9     		bls	.L235
1081:..\src/command_processing.c ****             read_flag = FALSE;
 4607              		.loc 1 1081 0
 4608 0058 0023     		movs	r3, #0
 4609 005a FB77     		strb	r3, [r7, #31]
1082:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 4610              		.loc 1 1082 0
 4611 005c 154B     		ldr	r3, .L241+12
 4612 005e 0022     		movs	r2, #0
 4613 0060 1A70     		strb	r2, [r3]
1083:..\src/command_processing.c ****             break;
 4614              		.loc 1 1083 0
 4615 0062 03E0     		b	.L237
 4616              	.L235:
1073:..\src/command_processing.c ****         if (interrupt_flag){
 4617              		.loc 1 1073 0
 4618 0064 144B     		ldr	r3, .L241+16
 4619 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4620 0068 FB2B     		cmp	r3, #251
 4621 006a E2D1     		bne	.L238
 4622              	.L237:
1084:..\src/command_processing.c ****         }
1085:..\src/command_processing.c ****     }
1086:..\src/command_processing.c **** 
1087:..\src/command_processing.c ****         if (read_flag) {
 4623              		.loc 1 1087 0
 4624 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4625 006e 002B     		cmp	r3, #0
 4626 0070 15D0     		beq	.L240
1088:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 4627              		.loc 1 1088 0
 4628 0072 114B     		ldr	r3, .L241+16
 4629 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 118


 4630 0076 1B02     		lsls	r3, r3, #8
 4631 0078 1AB2     		sxth	r2, r3
 4632 007a 0F4B     		ldr	r3, .L241+16
 4633 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4634 007e 1BB2     		sxth	r3, r3
 4635 0080 1343     		orrs	r3, r3, r2
 4636 0082 1AB2     		sxth	r2, r3
 4637 0084 0D4B     		ldr	r3, .L241+20
 4638 0086 1A80     		strh	r2, [r3]	@ movhi
1089:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 4639              		.loc 1 1089 0
 4640 0088 0B4B     		ldr	r3, .L241+16
 4641 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4642 008c 1B02     		lsls	r3, r3, #8
 4643 008e 1AB2     		sxth	r2, r3
 4644 0090 094B     		ldr	r3, .L241+16
 4645 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4646 0094 1BB2     		sxth	r3, r3
 4647 0096 1343     		orrs	r3, r3, r2
 4648 0098 1AB2     		sxth	r2, r3
 4649 009a 094B     		ldr	r3, .L241+24
 4650 009c 1A80     		strh	r2, [r3]	@ movhi
 4651              	.L240:
1090:..\src/command_processing.c ****     }
1091:..\src/command_processing.c ****     
1092:..\src/command_processing.c **** }
 4652              		.loc 1 1092 0
 4653 009e 00BF     		nop
 4654 00a0 2037     		adds	r7, r7, #32
 4655              		.cfi_def_cfa_offset 8
 4656 00a2 BD46     		mov	sp, r7
 4657              		.cfi_def_cfa_register 13
 4658              		@ sp needed
 4659 00a4 80BD     		pop	{r7, pc}
 4660              	.L242:
 4661 00a6 00BF     		.align	2
 4662              	.L241:
 4663 00a8 00000000 		.word	c_mem
 4664 00ac 00000000 		.word	interrupt_flag
 4665 00b0 20AA4400 		.word	4500000
 4666 00b4 00000000 		.word	master_mode
 4667 00b8 00000000 		.word	g_rx
 4668 00bc 00000000 		.word	PWM_IMU_1
 4669 00c0 00000000 		.word	PWM_IMU_2
 4670              		.cfi_endproc
 4671              	.LFE105:
 4672              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 4673              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 4674              		.align	2
 4675              		.global	commReadResCurrFromSH
 4676              		.thumb
 4677              		.thumb_func
 4678              		.type	commReadResCurrFromSH, %function
 4679              	commReadResCurrFromSH:
 4680              	.LFB106:
1093:..\src/command_processing.c **** 
1094:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 119


1095:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1096:..\src/command_processing.c **** //==============================================================================
1097:..\src/command_processing.c **** 
1098:..\src/command_processing.c **** int16 commReadResCurrFromSH()
1099:..\src/command_processing.c **** {
 4681              		.loc 1 1099 0
 4682              		.cfi_startproc
 4683              		@ args = 0, pretend = 0, frame = 32
 4684              		@ frame_needed = 1, uses_anonymous_args = 0
 4685 0000 80B5     		push	{r7, lr}
 4686              		.cfi_def_cfa_offset 8
 4687              		.cfi_offset 7, -8
 4688              		.cfi_offset 14, -4
 4689 0002 88B0     		sub	sp, sp, #32
 4690              		.cfi_def_cfa_offset 40
 4691 0004 00AF     		add	r7, sp, #0
 4692              		.cfi_def_cfa_register 7
1100:..\src/command_processing.c ****     uint8 packet_data[16];
1101:..\src/command_processing.c ****     uint8 packet_length;
1102:..\src/command_processing.c ****     int16 curr_diff = 0;
 4693              		.loc 1 1102 0
 4694 0006 0023     		movs	r3, #0
 4695 0008 FB83     		strh	r3, [r7, #30]	@ movhi
1103:..\src/command_processing.c ****     uint32 t_start, t_end;
1104:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 4696              		.loc 1 1104 0
 4697 000a 0123     		movs	r3, #1
 4698 000c 7B77     		strb	r3, [r7, #29]
1105:..\src/command_processing.c **** 
1106:..\src/command_processing.c ****     packet_length = 2;
 4699              		.loc 1 1106 0
 4700 000e 0223     		movs	r3, #2
 4701 0010 3B77     		strb	r3, [r7, #28]
1107:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 4702              		.loc 1 1107 0
 4703 0012 8C23     		movs	r3, #140
 4704 0014 3B71     		strb	r3, [r7, #4]
1108:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 4705              		.loc 1 1108 0
 4706 0016 8C23     		movs	r3, #140
 4707 0018 7B71     		strb	r3, [r7, #5]
1109:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 4708              		.loc 1 1109 0
 4709 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 4710 001c 99B2     		uxth	r1, r3
 4711 001e 1D4B     		ldr	r3, .L250
 4712 0020 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 4713 0024 3B1D     		adds	r3, r7, #4
 4714 0026 1846     		mov	r0, r3
 4715 0028 FFF7FEFF 		bl	commWriteID
1110:..\src/command_processing.c **** 
1111:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 4716              		.loc 1 1111 0
 4717 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 4718 0030 0346     		mov	r3, r0
 4719 0032 BB61     		str	r3, [r7, #24]
1112:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 120


 4720              		.loc 1 1112 0
 4721 0034 18E0     		b	.L244
 4722              	.L247:
1113:..\src/command_processing.c ****         if (interrupt_flag){
 4723              		.loc 1 1113 0
 4724 0036 184B     		ldr	r3, .L250+4
 4725 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4726 003a 002B     		cmp	r3, #0
 4727 003c 04D0     		beq	.L245
1114:..\src/command_processing.c ****             interrupt_flag = FALSE;
 4728              		.loc 1 1114 0
 4729 003e 164B     		ldr	r3, .L250+4
 4730 0040 0022     		movs	r2, #0
 4731 0042 1A70     		strb	r2, [r3]
1115:..\src/command_processing.c ****             interrupt_manager();
 4732              		.loc 1 1115 0
 4733 0044 FFF7FEFF 		bl	interrupt_manager
 4734              	.L245:
1116:..\src/command_processing.c ****         }
1117:..\src/command_processing.c **** 
1118:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 4735              		.loc 1 1118 0
 4736 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 4737 004c 0346     		mov	r3, r0
 4738 004e 7B61     		str	r3, [r7, #20]
1119:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 4739              		.loc 1 1119 0
 4740 0050 BA69     		ldr	r2, [r7, #24]
 4741 0052 7B69     		ldr	r3, [r7, #20]
 4742 0054 D31A     		subs	r3, r2, r3
 4743 0056 114A     		ldr	r2, .L250+8
 4744 0058 9342     		cmp	r3, r2
 4745 005a 05D9     		bls	.L244
1120:..\src/command_processing.c ****             read_flag = FALSE;
 4746              		.loc 1 1120 0
 4747 005c 0023     		movs	r3, #0
 4748 005e 7B77     		strb	r3, [r7, #29]
1121:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 4749              		.loc 1 1121 0
 4750 0060 0F4B     		ldr	r3, .L250+12
 4751 0062 0022     		movs	r2, #0
 4752 0064 1A70     		strb	r2, [r3]
1122:..\src/command_processing.c ****             break;
 4753              		.loc 1 1122 0
 4754 0066 03E0     		b	.L246
 4755              	.L244:
1112:..\src/command_processing.c ****         if (interrupt_flag){
 4756              		.loc 1 1112 0
 4757 0068 0E4B     		ldr	r3, .L250+16
 4758 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4759 006c 8E2B     		cmp	r3, #142
 4760 006e E2D1     		bne	.L247
 4761              	.L246:
1123:..\src/command_processing.c ****         }
1124:..\src/command_processing.c ****     }
1125:..\src/command_processing.c **** 
1126:..\src/command_processing.c ****     if (read_flag) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 121


 4762              		.loc 1 1126 0
 4763 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 4764 0072 002B     		cmp	r3, #0
 4765 0074 08D0     		beq	.L248
1127:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 4766              		.loc 1 1127 0
 4767 0076 0B4B     		ldr	r3, .L250+16
 4768 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4769 007a 1B02     		lsls	r3, r3, #8
 4770 007c 1AB2     		sxth	r2, r3
 4771 007e 094B     		ldr	r3, .L250+16
 4772 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4773 0082 1BB2     		sxth	r3, r3
 4774 0084 1343     		orrs	r3, r3, r2
 4775 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 4776              	.L248:
1128:..\src/command_processing.c ****     }
1129:..\src/command_processing.c ****     
1130:..\src/command_processing.c ****     return curr_diff;
 4777              		.loc 1 1130 0
 4778 0088 B7F91E30 		ldrsh	r3, [r7, #30]
1131:..\src/command_processing.c **** }
 4779              		.loc 1 1131 0
 4780 008c 1846     		mov	r0, r3
 4781 008e 2037     		adds	r7, r7, #32
 4782              		.cfi_def_cfa_offset 8
 4783 0090 BD46     		mov	sp, r7
 4784              		.cfi_def_cfa_register 13
 4785              		@ sp needed
 4786 0092 80BD     		pop	{r7, pc}
 4787              	.L251:
 4788              		.align	2
 4789              	.L250:
 4790 0094 00000000 		.word	c_mem
 4791 0098 00000000 		.word	interrupt_flag
 4792 009c 20AA4400 		.word	4500000
 4793 00a0 00000000 		.word	master_mode
 4794 00a4 00000000 		.word	g_rx
 4795              		.cfi_endproc
 4796              	.LFE106:
 4797              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 4798              		.section	.text.cmd_set_baudrate,"ax",%progbits
 4799              		.align	2
 4800              		.global	cmd_set_baudrate
 4801              		.thumb
 4802              		.thumb_func
 4803              		.type	cmd_set_baudrate, %function
 4804              	cmd_set_baudrate:
 4805              	.LFB107:
1132:..\src/command_processing.c **** 
1133:..\src/command_processing.c **** 
1134:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1135:..\src/command_processing.c **** 
1136:..\src/command_processing.c **** void cmd_set_baudrate(){
 4806              		.loc 1 1136 0
 4807              		.cfi_startproc
 4808              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 122


 4809              		@ frame_needed = 1, uses_anonymous_args = 0
 4810              		@ link register save eliminated.
 4811 0000 80B4     		push	{r7}
 4812              		.cfi_def_cfa_offset 4
 4813              		.cfi_offset 7, -4
 4814 0002 00AF     		add	r7, sp, #0
 4815              		.cfi_def_cfa_register 7
1137:..\src/command_processing.c ****     
1138:..\src/command_processing.c **** }
 4816              		.loc 1 1138 0
 4817 0004 00BF     		nop
 4818 0006 BD46     		mov	sp, r7
 4819              		.cfi_def_cfa_register 13
 4820              		@ sp needed
 4821 0008 80BC     		pop	{r7}
 4822              		.cfi_restore 7
 4823              		.cfi_def_cfa_offset 0
 4824 000a 7047     		bx	lr
 4825              		.cfi_endproc
 4826              	.LFE107:
 4827              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 4828              		.section	.text.cmd_ping,"ax",%progbits
 4829              		.align	2
 4830              		.global	cmd_ping
 4831              		.thumb
 4832              		.thumb_func
 4833              		.type	cmd_ping, %function
 4834              	cmd_ping:
 4835              	.LFB108:
1139:..\src/command_processing.c **** 
1140:..\src/command_processing.c **** void cmd_ping(){
 4836              		.loc 1 1140 0
 4837              		.cfi_startproc
 4838              		@ args = 0, pretend = 0, frame = 8
 4839              		@ frame_needed = 1, uses_anonymous_args = 0
 4840 0000 80B5     		push	{r7, lr}
 4841              		.cfi_def_cfa_offset 8
 4842              		.cfi_offset 7, -8
 4843              		.cfi_offset 14, -4
 4844 0002 82B0     		sub	sp, sp, #8
 4845              		.cfi_def_cfa_offset 16
 4846 0004 00AF     		add	r7, sp, #0
 4847              		.cfi_def_cfa_register 7
1141:..\src/command_processing.c **** 
1142:..\src/command_processing.c ****     uint8 packet_data[2];
1143:..\src/command_processing.c **** 
1144:..\src/command_processing.c ****     // Header
1145:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 4848              		.loc 1 1145 0
 4849 0006 0023     		movs	r3, #0
 4850 0008 3B71     		strb	r3, [r7, #4]
1146:..\src/command_processing.c ****     
1147:..\src/command_processing.c ****     // Load Payload
1148:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 4851              		.loc 1 1148 0
 4852 000a 0023     		movs	r3, #0
 4853 000c 7B71     		strb	r3, [r7, #5]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 123


1149:..\src/command_processing.c **** 
1150:..\src/command_processing.c ****     // Send Package to uart
1151:..\src/command_processing.c ****     commWrite(packet_data, 2);
 4854              		.loc 1 1151 0
 4855 000e 3B1D     		adds	r3, r7, #4
 4856 0010 0221     		movs	r1, #2
 4857 0012 1846     		mov	r0, r3
 4858 0014 FFF7FEFF 		bl	commWrite
1152:..\src/command_processing.c **** }
 4859              		.loc 1 1152 0
 4860 0018 00BF     		nop
 4861 001a 0837     		adds	r7, r7, #8
 4862              		.cfi_def_cfa_offset 8
 4863 001c BD46     		mov	sp, r7
 4864              		.cfi_def_cfa_register 13
 4865              		@ sp needed
 4866 001e 80BD     		pop	{r7, pc}
 4867              		.cfi_endproc
 4868              	.LFE108:
 4869              		.size	cmd_ping, .-cmd_ping
 4870              		.section	.text.cmd_get_inputs,"ax",%progbits
 4871              		.align	2
 4872              		.global	cmd_get_inputs
 4873              		.thumb
 4874              		.thumb_func
 4875              		.type	cmd_get_inputs, %function
 4876              	cmd_get_inputs:
 4877              	.LFB109:
1153:..\src/command_processing.c **** 
1154:..\src/command_processing.c **** void cmd_get_inputs(){
 4878              		.loc 1 1154 0
 4879              		.cfi_startproc
 4880              		@ args = 0, pretend = 0, frame = 0
 4881              		@ frame_needed = 1, uses_anonymous_args = 0
 4882              		@ link register save eliminated.
 4883 0000 80B4     		push	{r7}
 4884              		.cfi_def_cfa_offset 4
 4885              		.cfi_offset 7, -4
 4886 0002 00AF     		add	r7, sp, #0
 4887              		.cfi_def_cfa_register 7
1155:..\src/command_processing.c **** 
1156:..\src/command_processing.c **** }
 4888              		.loc 1 1156 0
 4889 0004 00BF     		nop
 4890 0006 BD46     		mov	sp, r7
 4891              		.cfi_def_cfa_register 13
 4892              		@ sp needed
 4893 0008 80BC     		pop	{r7}
 4894              		.cfi_restore 7
 4895              		.cfi_def_cfa_offset 0
 4896 000a 7047     		bx	lr
 4897              		.cfi_endproc
 4898              	.LFE109:
 4899              		.size	cmd_get_inputs, .-cmd_get_inputs
 4900              		.section	.text.cmd_store_params,"ax",%progbits
 4901              		.align	2
 4902              		.global	cmd_store_params
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 124


 4903              		.thumb
 4904              		.thumb_func
 4905              		.type	cmd_store_params, %function
 4906              	cmd_store_params:
 4907              	.LFB110:
1157:..\src/command_processing.c **** 
1158:..\src/command_processing.c **** void cmd_store_params(){
 4908              		.loc 1 1158 0
 4909              		.cfi_startproc
 4910              		@ args = 0, pretend = 0, frame = 0
 4911              		@ frame_needed = 1, uses_anonymous_args = 0
 4912              		@ link register save eliminated.
 4913 0000 80B4     		push	{r7}
 4914              		.cfi_def_cfa_offset 4
 4915              		.cfi_offset 7, -4
 4916 0002 00AF     		add	r7, sp, #0
 4917              		.cfi_def_cfa_register 7
1159:..\src/command_processing.c ****   
1160:..\src/command_processing.c **** }
 4918              		.loc 1 1160 0
 4919 0004 00BF     		nop
 4920 0006 BD46     		mov	sp, r7
 4921              		.cfi_def_cfa_register 13
 4922              		@ sp needed
 4923 0008 80BC     		pop	{r7}
 4924              		.cfi_restore 7
 4925              		.cfi_def_cfa_offset 0
 4926 000a 7047     		bx	lr
 4927              		.cfi_endproc
 4928              	.LFE110:
 4929              		.size	cmd_store_params, .-cmd_store_params
 4930              		.section	.text.cmd_get_emg,"ax",%progbits
 4931              		.align	2
 4932              		.global	cmd_get_emg
 4933              		.thumb
 4934              		.thumb_func
 4935              		.type	cmd_get_emg, %function
 4936              	cmd_get_emg:
 4937              	.LFB111:
1161:..\src/command_processing.c **** 
1162:..\src/command_processing.c **** void cmd_get_emg(){
 4938              		.loc 1 1162 0
 4939              		.cfi_startproc
 4940              		@ args = 0, pretend = 0, frame = 16
 4941              		@ frame_needed = 1, uses_anonymous_args = 0
 4942 0000 80B5     		push	{r7, lr}
 4943              		.cfi_def_cfa_offset 8
 4944              		.cfi_offset 7, -8
 4945              		.cfi_offset 14, -4
 4946 0002 84B0     		sub	sp, sp, #16
 4947              		.cfi_def_cfa_offset 24
 4948 0004 00AF     		add	r7, sp, #0
 4949              		.cfi_def_cfa_register 7
1163:..\src/command_processing.c ****     
1164:..\src/command_processing.c ****     uint8 packet_data[6];
1165:..\src/command_processing.c ****     int16 aux_int16;
1166:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 125


1167:..\src/command_processing.c ****     // Header        
1168:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 4950              		.loc 1 1168 0
 4951 0006 8823     		movs	r3, #136
 4952 0008 3B72     		strb	r3, [r7, #8]
1169:..\src/command_processing.c ****     
1170:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 4953              		.loc 1 1170 0
 4954 000a 144B     		ldr	r3, .L257
 4955 000c 1B68     		ldr	r3, [r3]
 4956 000e 1BB2     		sxth	r3, r3
 4957 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1171:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 4958              		.loc 1 1171 0
 4959 0012 BB1D     		adds	r3, r7, #6
 4960 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4961 0016 BB72     		strb	r3, [r7, #10]
1172:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 4962              		.loc 1 1172 0
 4963 0018 BB1D     		adds	r3, r7, #6
 4964 001a 0133     		adds	r3, r3, #1
 4965 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4966 001e 7B72     		strb	r3, [r7, #9]
1173:..\src/command_processing.c ****     
1174:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 4967              		.loc 1 1174 0
 4968 0020 0E4B     		ldr	r3, .L257
 4969 0022 5B68     		ldr	r3, [r3, #4]
 4970 0024 1BB2     		sxth	r3, r3
 4971 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1175:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 4972              		.loc 1 1175 0
 4973 0028 BB1D     		adds	r3, r7, #6
 4974 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4975 002c 3B73     		strb	r3, [r7, #12]
1176:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 4976              		.loc 1 1176 0
 4977 002e BB1D     		adds	r3, r7, #6
 4978 0030 0133     		adds	r3, r3, #1
 4979 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4980 0034 FB72     		strb	r3, [r7, #11]
1177:..\src/command_processing.c **** 
1178:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 4981              		.loc 1 1178 0
 4982 0036 07F10803 		add	r3, r7, #8
 4983 003a 0521     		movs	r1, #5
 4984 003c 1846     		mov	r0, r3
 4985 003e FFF7FEFF 		bl	LCRChecksum
 4986 0042 0346     		mov	r3, r0
 4987 0044 7B73     		strb	r3, [r7, #13]
1179:..\src/command_processing.c **** 
1180:..\src/command_processing.c ****     commWrite(packet_data, 6);
 4988              		.loc 1 1180 0
 4989 0046 07F10803 		add	r3, r7, #8
 4990 004a 0621     		movs	r1, #6
 4991 004c 1846     		mov	r0, r3
 4992 004e FFF7FEFF 		bl	commWrite
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 126


1181:..\src/command_processing.c **** 
1182:..\src/command_processing.c **** }
 4993              		.loc 1 1182 0
 4994 0052 00BF     		nop
 4995 0054 1037     		adds	r7, r7, #16
 4996              		.cfi_def_cfa_offset 8
 4997 0056 BD46     		mov	sp, r7
 4998              		.cfi_def_cfa_register 13
 4999              		@ sp needed
 5000 0058 80BD     		pop	{r7, pc}
 5001              	.L258:
 5002 005a 00BF     		.align	2
 5003              	.L257:
 5004 005c 00000000 		.word	g_adc_measOld
 5005              		.cfi_endproc
 5006              	.LFE111:
 5007              		.size	cmd_get_emg, .-cmd_get_emg
 5008              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 5009              		.align	2
 5010              		.global	cmd_get_imu_readings
 5011              		.thumb
 5012              		.thumb_func
 5013              		.type	cmd_get_imu_readings, %function
 5014              	cmd_get_imu_readings:
 5015              	.LFB112:
1183:..\src/command_processing.c **** 
1184:..\src/command_processing.c **** void cmd_get_imu_readings(){
 5016              		.loc 1 1184 0
 5017              		.cfi_startproc
 5018              		@ args = 0, pretend = 0, frame = 0
 5019              		@ frame_needed = 1, uses_anonymous_args = 0
 5020              		@ link register save eliminated.
 5021 0000 80B4     		push	{r7}
 5022              		.cfi_def_cfa_offset 4
 5023              		.cfi_offset 7, -4
 5024 0002 00AF     		add	r7, sp, #0
 5025              		.cfi_def_cfa_register 7
1185:..\src/command_processing.c ****  
1186:..\src/command_processing.c **** }
 5026              		.loc 1 1186 0
 5027 0004 00BF     		nop
 5028 0006 BD46     		mov	sp, r7
 5029              		.cfi_def_cfa_register 13
 5030              		@ sp needed
 5031 0008 80BC     		pop	{r7}
 5032              		.cfi_restore 7
 5033              		.cfi_def_cfa_offset 0
 5034 000a 7047     		bx	lr
 5035              		.cfi_endproc
 5036              	.LFE112:
 5037              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 5038              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 5039              		.align	2
 5040              		.global	cmd_get_encoder_map
 5041              		.thumb
 5042              		.thumb_func
 5043              		.type	cmd_get_encoder_map, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 127


 5044              	cmd_get_encoder_map:
 5045              	.LFB113:
1187:..\src/command_processing.c **** 
1188:..\src/command_processing.c **** void cmd_get_encoder_map(){
 5046              		.loc 1 1188 0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 0
 5049              		@ frame_needed = 1, uses_anonymous_args = 0
 5050              		@ link register save eliminated.
 5051 0000 80B4     		push	{r7}
 5052              		.cfi_def_cfa_offset 4
 5053              		.cfi_offset 7, -4
 5054 0002 00AF     		add	r7, sp, #0
 5055              		.cfi_def_cfa_register 7
1189:..\src/command_processing.c ****    }
 5056              		.loc 1 1189 0
 5057 0004 00BF     		nop
 5058 0006 BD46     		mov	sp, r7
 5059              		.cfi_def_cfa_register 13
 5060              		@ sp needed
 5061 0008 80BC     		pop	{r7}
 5062              		.cfi_restore 7
 5063              		.cfi_def_cfa_offset 0
 5064 000a 7047     		bx	lr
 5065              		.cfi_endproc
 5066              	.LFE113:
 5067              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 5068              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 5069              		.align	2
 5070              		.global	cmd_get_encoder_raw
 5071              		.thumb
 5072              		.thumb_func
 5073              		.type	cmd_get_encoder_raw, %function
 5074              	cmd_get_encoder_raw:
 5075              	.LFB114:
1190:..\src/command_processing.c **** 
1191:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 5076              		.loc 1 1191 0
 5077              		.cfi_startproc
 5078              		@ args = 0, pretend = 0, frame = 0
 5079              		@ frame_needed = 1, uses_anonymous_args = 0
 5080              		@ link register save eliminated.
 5081 0000 80B4     		push	{r7}
 5082              		.cfi_def_cfa_offset 4
 5083              		.cfi_offset 7, -4
 5084 0002 00AF     		add	r7, sp, #0
 5085              		.cfi_def_cfa_register 7
1192:..\src/command_processing.c ****    }
 5086              		.loc 1 1192 0
 5087 0004 00BF     		nop
 5088 0006 BD46     		mov	sp, r7
 5089              		.cfi_def_cfa_register 13
 5090              		@ sp needed
 5091 0008 80BC     		pop	{r7}
 5092              		.cfi_restore 7
 5093              		.cfi_def_cfa_offset 0
 5094 000a 7047     		bx	lr
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 128


 5095              		.cfi_endproc
 5096              	.LFE114:
 5097              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 5098              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 5099              		.align	2
 5100              		.global	cmd_get_ADC_map
 5101              		.thumb
 5102              		.thumb_func
 5103              		.type	cmd_get_ADC_map, %function
 5104              	cmd_get_ADC_map:
 5105              	.LFB115:
1193:..\src/command_processing.c **** 
1194:..\src/command_processing.c **** void cmd_get_ADC_map(){
 5106              		.loc 1 1194 0
 5107              		.cfi_startproc
 5108              		@ args = 0, pretend = 0, frame = 0
 5109              		@ frame_needed = 1, uses_anonymous_args = 0
 5110              		@ link register save eliminated.
 5111 0000 80B4     		push	{r7}
 5112              		.cfi_def_cfa_offset 4
 5113              		.cfi_offset 7, -4
 5114 0002 00AF     		add	r7, sp, #0
 5115              		.cfi_def_cfa_register 7
1195:..\src/command_processing.c ****    }
 5116              		.loc 1 1195 0
 5117 0004 00BF     		nop
 5118 0006 BD46     		mov	sp, r7
 5119              		.cfi_def_cfa_register 13
 5120              		@ sp needed
 5121 0008 80BC     		pop	{r7}
 5122              		.cfi_restore 7
 5123              		.cfi_def_cfa_offset 0
 5124 000a 7047     		bx	lr
 5125              		.cfi_endproc
 5126              	.LFE115:
 5127              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 5128              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 5129              		.align	2
 5130              		.global	cmd_get_ADC_raw
 5131              		.thumb
 5132              		.thumb_func
 5133              		.type	cmd_get_ADC_raw, %function
 5134              	cmd_get_ADC_raw:
 5135              	.LFB116:
1196:..\src/command_processing.c **** 
1197:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 5136              		.loc 1 1197 0
 5137              		.cfi_startproc
 5138              		@ args = 0, pretend = 0, frame = 0
 5139              		@ frame_needed = 1, uses_anonymous_args = 0
 5140              		@ link register save eliminated.
 5141 0000 80B4     		push	{r7}
 5142              		.cfi_def_cfa_offset 4
 5143              		.cfi_offset 7, -4
 5144 0002 00AF     		add	r7, sp, #0
 5145              		.cfi_def_cfa_register 7
1198:..\src/command_processing.c ****    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 129


1199:..\src/command_processing.c **** }
 5146              		.loc 1 1199 0
 5147 0004 00BF     		nop
 5148 0006 BD46     		mov	sp, r7
 5149              		.cfi_def_cfa_register 13
 5150              		@ sp needed
 5151 0008 80BC     		pop	{r7}
 5152              		.cfi_restore 7
 5153              		.cfi_def_cfa_offset 0
 5154 000a 7047     		bx	lr
 5155              		.cfi_endproc
 5156              	.LFE116:
 5157              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 5158              		.section	.text.cmd_get_SD_file,"ax",%progbits
 5159              		.align	2
 5160              		.global	cmd_get_SD_file
 5161              		.thumb
 5162              		.thumb_func
 5163              		.type	cmd_get_SD_file, %function
 5164              	cmd_get_SD_file:
 5165              	.LFB117:
1200:..\src/command_processing.c **** 
1201:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 5166              		.loc 1 1201 0
 5167              		.cfi_startproc
 5168              		@ args = 0, pretend = 0, frame = 20064
 5169              		@ frame_needed = 1, uses_anonymous_args = 0
 5170 0000 80B5     		push	{r7, lr}
 5171              		.cfi_def_cfa_offset 8
 5172              		.cfi_offset 7, -8
 5173              		.cfi_offset 14, -4
 5174 0002 ADF59C4D 		sub	sp, sp, #19968
 5175              		.cfi_def_cfa_offset 19976
 5176 0006 98B0     		sub	sp, sp, #96
 5177              		.cfi_def_cfa_offset 20072
 5178 0008 00AF     		add	r7, sp, #0
 5179              		.cfi_def_cfa_register 7
 5180 000a 0246     		mov	r2, r0
 5181 000c 07F16003 		add	r3, r7, #96
 5182 0010 5A3B     		subs	r3, r3, #90
 5183 0012 1A80     		strh	r2, [r3]	@ movhi
1202:..\src/command_processing.c ****     
1203:..\src/command_processing.c ****     uint8 i = 0;
 5184              		.loc 1 1203 0
 5185 0014 0023     		movs	r3, #0
 5186 0016 07F59C42 		add	r2, r7, #19968
 5187 001a 02F15F02 		add	r2, r2, #95
 5188 001e 1370     		strb	r3, [r2]
1204:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 5189              		.loc 1 1204 0
 5190 0020 0023     		movs	r3, #0
 5191 0022 07F59C42 		add	r2, r7, #19968
 5192 0026 02F12C02 		add	r2, r2, #44
 5193 002a 1360     		str	r3, [r2]
 5194 002c 07F59C43 		add	r3, r7, #19968
 5195 0030 03F13003 		add	r3, r3, #48
 5196 0034 2E22     		movs	r2, #46
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 130


 5197 0036 0021     		movs	r1, #0
 5198 0038 1846     		mov	r0, r3
 5199 003a FFF7FEFF 		bl	memset
1205:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 5200              		.loc 1 1205 0
 5201 003e 07F16003 		add	r3, r7, #96
 5202 0042 543B     		subs	r3, r3, #84
 5203 0044 0022     		movs	r2, #0
 5204 0046 1A60     		str	r2, [r3]
 5205 0048 0433     		adds	r3, r3, #4
 5206 004a 44F61C62 		movw	r2, #19996
 5207 004e 0021     		movs	r1, #0
 5208 0050 1846     		mov	r0, r3
 5209 0052 FFF7FEFF 		bl	memset
1206:..\src/command_processing.c ****     strcpy(filename, "");
 5210              		.loc 1 1206 0
 5211 0056 3C4B     		ldr	r3, .L269
 5212 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5213 005a 07F59C42 		add	r2, r7, #19968
 5214 005e 02F12C02 		add	r2, r2, #44
 5215 0062 1370     		strb	r3, [r2]
1207:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 5216              		.loc 1 1207 0
 5217 0064 384B     		ldr	r3, .L269
 5218 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5219 0068 07F16003 		add	r3, r7, #96
 5220 006c 543B     		subs	r3, r3, #84
 5221 006e 1A70     		strb	r2, [r3]
1208:..\src/command_processing.c ****     
1209:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 5222              		.loc 1 1209 0
 5223 0070 0023     		movs	r3, #0
 5224 0072 07F59C42 		add	r2, r7, #19968
 5225 0076 02F15F02 		add	r2, r2, #95
 5226 007a 1370     		strb	r3, [r2]
 5227 007c 1DE0     		b	.L265
 5228              	.L266:
1210:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 5229              		.loc 1 1210 0 discriminator 3
 5230 007e 07F59C43 		add	r3, r7, #19968
 5231 0082 03F15F03 		add	r3, r3, #95
 5232 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5233 0088 07F59C42 		add	r2, r7, #19968
 5234 008c 02F12C02 		add	r2, r2, #44
 5235 0090 1344     		add	r3, r3, r2
 5236 0092 07F59C42 		add	r2, r7, #19968
 5237 0096 02F15F02 		add	r2, r2, #95
 5238 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5239 009c 0332     		adds	r2, r2, #3
 5240 009e 2B49     		ldr	r1, .L269+4
 5241 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5242 00a2 1A70     		strb	r2, [r3]
1209:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 5243              		.loc 1 1209 0 discriminator 3
 5244 00a4 07F59C43 		add	r3, r7, #19968
 5245 00a8 03F15F03 		add	r3, r3, #95
 5246 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 131


 5247 00ae 0133     		adds	r3, r3, #1
 5248 00b0 07F59C42 		add	r2, r7, #19968
 5249 00b4 02F15F02 		add	r2, r2, #95
 5250 00b8 1370     		strb	r3, [r2]
 5251              	.L265:
1209:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 5252              		.loc 1 1209 0 is_stmt 0 discriminator 1
 5253 00ba 07F59C43 		add	r3, r7, #19968
 5254 00be 03F15F03 		add	r3, r3, #95
 5255 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5256 00c4 9AB2     		uxth	r2, r3
 5257 00c6 07F16003 		add	r3, r7, #96
 5258 00ca 5A3B     		subs	r3, r3, #90
 5259 00cc 1B88     		ldrh	r3, [r3]
 5260 00ce 9342     		cmp	r3, r2
 5261 00d0 D5D8     		bhi	.L266
1211:..\src/command_processing.c ****     }
1212:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 5262              		.loc 1 1212 0 is_stmt 1
 5263 00d2 07F59C43 		add	r3, r7, #19968
 5264 00d6 03F15F03 		add	r3, r3, #95
 5265 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5266 00dc 07F59C42 		add	r2, r7, #19968
 5267 00e0 02F12C02 		add	r2, r2, #44
 5268 00e4 1344     		add	r3, r3, r2
 5269 00e6 0022     		movs	r2, #0
 5270 00e8 1A70     		strb	r2, [r3]
1213:..\src/command_processing.c ****      
1214:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1215:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 5271              		.loc 1 1215 0
 5272 00ea 07F59C43 		add	r3, r7, #19968
 5273 00ee 03F12C03 		add	r3, r3, #44
 5274 00f2 1749     		ldr	r1, .L269+8
 5275 00f4 1846     		mov	r0, r3
 5276 00f6 FFF7FEFF 		bl	strcmp
 5277 00fa 0346     		mov	r3, r0
 5278 00fc 002B     		cmp	r3, #0
 5279 00fe 0CD0     		beq	.L267
1216:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 5280              		.loc 1 1216 0
 5281 0100 07F16003 		add	r3, r7, #96
 5282 0104 543B     		subs	r3, r3, #84
 5283 0106 07F59C40 		add	r0, r7, #19968
 5284 010a 00F12C00 		add	r0, r0, #44
 5285 010e 44F62062 		movw	r2, #20000
 5286 0112 1946     		mov	r1, r3
 5287 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 5288 0118 07E0     		b	.L268
 5289              	.L267:
1217:..\src/command_processing.c ****     }
1218:..\src/command_processing.c ****     else {
1219:..\src/command_processing.c ****         //It is the currently open working file
1220:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 5290              		.loc 1 1220 0
 5291 011a 07F16003 		add	r3, r7, #96
 5292 011e 543B     		subs	r3, r3, #84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 132


 5293 0120 44F62061 		movw	r1, #20000
 5294 0124 1846     		mov	r0, r3
 5295 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 5296              	.L268:
1221:..\src/command_processing.c ****     }
1222:..\src/command_processing.c **** 
1223:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
1224:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1225:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 5297              		.loc 1 1225 0
 5298 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1226:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 5299              		.loc 1 1226 0
 5300 012e 07F16003 		add	r3, r7, #96
 5301 0132 543B     		subs	r3, r3, #84
 5302 0134 1846     		mov	r0, r3
 5303 0136 FFF7FEFF 		bl	UART_RS485_PutString
1227:..\src/command_processing.c **** }
 5304              		.loc 1 1227 0
 5305 013a 00BF     		nop
 5306 013c 07F59C47 		add	r7, r7, #19968
 5307 0140 6037     		adds	r7, r7, #96
 5308              		.cfi_def_cfa_offset 8
 5309 0142 BD46     		mov	sp, r7
 5310              		.cfi_def_cfa_register 13
 5311              		@ sp needed
 5312 0144 80BD     		pop	{r7, pc}
 5313              	.L270:
 5314 0146 00BF     		.align	2
 5315              	.L269:
 5316 0148 00000000 		.word	.LC8
 5317 014c 00000000 		.word	g_rx
 5318 0150 00000000 		.word	sdFile
 5319              		.cfi_endproc
 5320              	.LFE117:
 5321              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 5322              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 5323              		.align	2
 5324              		.global	cmd_remove_SD_file
 5325              		.thumb
 5326              		.thumb_func
 5327              		.type	cmd_remove_SD_file, %function
 5328              	cmd_remove_SD_file:
 5329              	.LFB118:
1228:..\src/command_processing.c **** 
1229:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 5330              		.loc 1 1229 0
 5331              		.cfi_startproc
 5332              		@ args = 0, pretend = 0, frame = 8
 5333              		@ frame_needed = 1, uses_anonymous_args = 0
 5334              		@ link register save eliminated.
 5335 0000 80B4     		push	{r7}
 5336              		.cfi_def_cfa_offset 4
 5337              		.cfi_offset 7, -4
 5338 0002 83B0     		sub	sp, sp, #12
 5339              		.cfi_def_cfa_offset 16
 5340 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 133


 5341              		.cfi_def_cfa_register 7
 5342 0006 0346     		mov	r3, r0
 5343 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1230:..\src/command_processing.c ****   
1231:..\src/command_processing.c **** }
 5344              		.loc 1 1231 0
 5345 000a 00BF     		nop
 5346 000c 0C37     		adds	r7, r7, #12
 5347              		.cfi_def_cfa_offset 4
 5348 000e BD46     		mov	sp, r7
 5349              		.cfi_def_cfa_register 13
 5350              		@ sp needed
 5351 0010 80BC     		pop	{r7}
 5352              		.cfi_restore 7
 5353              		.cfi_def_cfa_offset 0
 5354 0012 7047     		bx	lr
 5355              		.cfi_endproc
 5356              	.LFE118:
 5357              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 5358              		.global	__aeabi_i2f
 5359              		.global	__aeabi_f2d
 5360              		.global	__aeabi_ddiv
 5361              		.global	__aeabi_dmul
 5362              		.global	__aeabi_d2iz
 5363              		.section	.text.vibrotactile_control,"ax",%progbits
 5364              		.align	2
 5365              		.global	vibrotactile_control
 5366              		.thumb
 5367              		.thumb_func
 5368              		.type	vibrotactile_control, %function
 5369              	vibrotactile_control:
 5370              	.LFB119:
1232:..\src/command_processing.c **** 
1233:..\src/command_processing.c **** //==============================================================================
1234:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
1235:..\src/command_processing.c **** //==============================================================================
1236:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1237:..\src/command_processing.c **** 
1238:..\src/command_processing.c **** void vibrotactile_control() {
 5371              		.loc 1 1238 0
 5372              		.cfi_startproc
 5373              		@ args = 0, pretend = 0, frame = 8
 5374              		@ frame_needed = 1, uses_anonymous_args = 0
 5375 0000 90B5     		push	{r4, r7, lr}
 5376              		.cfi_def_cfa_offset 12
 5377              		.cfi_offset 4, -12
 5378              		.cfi_offset 7, -8
 5379              		.cfi_offset 14, -4
 5380 0002 83B0     		sub	sp, sp, #12
 5381              		.cfi_def_cfa_offset 24
 5382 0004 00AF     		add	r7, sp, #0
 5383              		.cfi_def_cfa_register 7
1239:..\src/command_processing.c ****     
1240:..\src/command_processing.c ****     uint8 i;
1241:..\src/command_processing.c ****     
1242:..\src/command_processing.c ****     commReadIMUFromSH();    
 5384              		.loc 1 1242 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 134


 5385 0006 FFF7FEFF 		bl	commReadIMUFromSH
1243:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1244:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1245:..\src/command_processing.c ****     
1246:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 5386              		.loc 1 1246 0
 5387 000a 4B4B     		ldr	r3, .L280
 5388 000c B3F90030 		ldrsh	r3, [r3]
 5389 0010 1846     		mov	r0, r3
 5390 0012 FFF7FEFF 		bl	__aeabi_i2f
 5391 0016 0346     		mov	r3, r0
 5392 0018 1846     		mov	r0, r3
 5393 001a FFF7FEFF 		bl	__aeabi_f2d
 5394 001e 4FF00002 		mov	r2, #0
 5395 0022 464B     		ldr	r3, .L280+4
 5396 0024 FFF7FEFF 		bl	__aeabi_ddiv
 5397 0028 0346     		mov	r3, r0
 5398 002a 0C46     		mov	r4, r1
 5399 002c 1846     		mov	r0, r3
 5400 002e 2146     		mov	r1, r4
 5401 0030 4FF00002 		mov	r2, #0
 5402 0034 424B     		ldr	r3, .L280+8
 5403 0036 FFF7FEFF 		bl	__aeabi_dmul
 5404 003a 0346     		mov	r3, r0
 5405 003c 0C46     		mov	r4, r1
 5406 003e 1846     		mov	r0, r3
 5407 0040 2146     		mov	r1, r4
 5408 0042 FFF7FEFF 		bl	__aeabi_d2iz
 5409 0046 0346     		mov	r3, r0
 5410 0048 1AB2     		sxth	r2, r3
 5411 004a 3B4B     		ldr	r3, .L280
 5412 004c 1A80     		strh	r2, [r3]	@ movhi
1247:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_INPUT_PWM) PWM_IMU_1 = MAX_INPUT_PWM;
 5413              		.loc 1 1247 0
 5414 004e 3A4B     		ldr	r3, .L280
 5415 0050 B3F90030 		ldrsh	r3, [r3]
 5416 0054 642B     		cmp	r3, #100
 5417 0056 02DD     		ble	.L273
 5418              		.loc 1 1247 0 is_stmt 0 discriminator 1
 5419 0058 374B     		ldr	r3, .L280
 5420 005a 6422     		movs	r2, #100
 5421 005c 1A80     		strh	r2, [r3]	@ movhi
 5422              	.L273:
1248:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_INPUT_PWM) PWM_IMU_1 = 0;
 5423              		.loc 1 1248 0 is_stmt 1
 5424 005e 364B     		ldr	r3, .L280
 5425 0060 B3F90030 		ldrsh	r3, [r3]
 5426 0064 092B     		cmp	r3, #9
 5427 0066 02DC     		bgt	.L274
 5428              		.loc 1 1248 0 is_stmt 0 discriminator 1
 5429 0068 334B     		ldr	r3, .L280
 5430 006a 0022     		movs	r2, #0
 5431 006c 1A80     		strh	r2, [r3]	@ movhi
 5432              	.L274:
1249:..\src/command_processing.c ****     
1250:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 5433              		.loc 1 1250 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 135


 5434 006e 354B     		ldr	r3, .L280+12
 5435 0070 B3F90030 		ldrsh	r3, [r3]
 5436 0074 1846     		mov	r0, r3
 5437 0076 FFF7FEFF 		bl	__aeabi_i2f
 5438 007a 0346     		mov	r3, r0
 5439 007c 1846     		mov	r0, r3
 5440 007e FFF7FEFF 		bl	__aeabi_f2d
 5441 0082 4FF00002 		mov	r2, #0
 5442 0086 2D4B     		ldr	r3, .L280+4
 5443 0088 FFF7FEFF 		bl	__aeabi_ddiv
 5444 008c 0346     		mov	r3, r0
 5445 008e 0C46     		mov	r4, r1
 5446 0090 1846     		mov	r0, r3
 5447 0092 2146     		mov	r1, r4
 5448 0094 4FF00002 		mov	r2, #0
 5449 0098 294B     		ldr	r3, .L280+8
 5450 009a FFF7FEFF 		bl	__aeabi_dmul
 5451 009e 0346     		mov	r3, r0
 5452 00a0 0C46     		mov	r4, r1
 5453 00a2 1846     		mov	r0, r3
 5454 00a4 2146     		mov	r1, r4
 5455 00a6 FFF7FEFF 		bl	__aeabi_d2iz
 5456 00aa 0346     		mov	r3, r0
 5457 00ac 1AB2     		sxth	r2, r3
 5458 00ae 254B     		ldr	r3, .L280+12
 5459 00b0 1A80     		strh	r2, [r3]	@ movhi
1251:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_INPUT_PWM) PWM_IMU_2 = MAX_INPUT_PWM;
 5460              		.loc 1 1251 0
 5461 00b2 244B     		ldr	r3, .L280+12
 5462 00b4 B3F90030 		ldrsh	r3, [r3]
 5463 00b8 642B     		cmp	r3, #100
 5464 00ba 02DD     		ble	.L275
 5465              		.loc 1 1251 0 is_stmt 0 discriminator 1
 5466 00bc 214B     		ldr	r3, .L280+12
 5467 00be 6422     		movs	r2, #100
 5468 00c0 1A80     		strh	r2, [r3]	@ movhi
 5469              	.L275:
1252:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_INPUT_PWM) PWM_IMU_2 = 0;
 5470              		.loc 1 1252 0 is_stmt 1
 5471 00c2 204B     		ldr	r3, .L280+12
 5472 00c4 B3F90030 		ldrsh	r3, [r3]
 5473 00c8 092B     		cmp	r3, #9
 5474 00ca 02DC     		bgt	.L276
 5475              		.loc 1 1252 0 is_stmt 0 discriminator 1
 5476 00cc 1D4B     		ldr	r3, .L280+12
 5477 00ce 0022     		movs	r2, #0
 5478 00d0 1A80     		strh	r2, [r3]	@ movhi
 5479              	.L276:
1253:..\src/command_processing.c ****     
1254:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 5480              		.loc 1 1254 0 is_stmt 1
 5481 00d2 194B     		ldr	r3, .L280
 5482 00d4 B3F90030 		ldrsh	r3, [r3]
 5483 00d8 DAB2     		uxtb	r2, r3
 5484 00da 1B4B     		ldr	r3, .L280+16
 5485 00dc 1A70     		strb	r2, [r3]
1255:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 136


 5486              		.loc 1 1255 0
 5487 00de 194B     		ldr	r3, .L280+12
 5488 00e0 B3F90030 		ldrsh	r3, [r3]
 5489 00e4 DAB2     		uxtb	r2, r3
 5490 00e6 184B     		ldr	r3, .L280+16
 5491 00e8 5A70     		strb	r2, [r3, #1]
1256:..\src/command_processing.c ****     
1257:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 5492              		.loc 1 1257 0
 5493 00ea 134B     		ldr	r3, .L280
 5494 00ec B3F90030 		ldrsh	r3, [r3]
 5495 00f0 DAB2     		uxtb	r2, r3
 5496 00f2 154B     		ldr	r3, .L280+16
 5497 00f4 1A70     		strb	r2, [r3]
1258:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 5498              		.loc 1 1258 0
 5499 00f6 134B     		ldr	r3, .L280+12
 5500 00f8 B3F90030 		ldrsh	r3, [r3]
 5501 00fc DAB2     		uxtb	r2, r3
 5502 00fe 124B     		ldr	r3, .L280+16
 5503 0100 5A70     		strb	r2, [r3, #1]
1259:..\src/command_processing.c **** 
1260:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 5504              		.loc 1 1260 0
 5505 0102 0023     		movs	r3, #0
 5506 0104 FB71     		strb	r3, [r7, #7]
 5507 0106 0FE0     		b	.L277
 5508              	.L279:
1261:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 5509              		.loc 1 1261 0
 5510 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5511 010a 1846     		mov	r0, r3
 5512 010c FFF7FEFF 		bl	vibrotactile_control_generic
1262:..\src/command_processing.c ****         
1263:..\src/command_processing.c ****         if (interrupt_flag){
 5513              		.loc 1 1263 0
 5514 0110 0E4B     		ldr	r3, .L280+20
 5515 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5516 0114 002B     		cmp	r3, #0
 5517 0116 04D0     		beq	.L278
1264:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5518              		.loc 1 1264 0
 5519 0118 0C4B     		ldr	r3, .L280+20
 5520 011a 0022     		movs	r2, #0
 5521 011c 1A70     		strb	r2, [r3]
1265:..\src/command_processing.c ****             interrupt_manager();
 5522              		.loc 1 1265 0
 5523 011e FFF7FEFF 		bl	interrupt_manager
 5524              	.L278:
1260:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 5525              		.loc 1 1260 0 discriminator 2
 5526 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5527 0124 0133     		adds	r3, r3, #1
 5528 0126 FB71     		strb	r3, [r7, #7]
 5529              	.L277:
1260:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 5530              		.loc 1 1260 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 137


 5531 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5532 012a 012B     		cmp	r3, #1
 5533 012c ECD9     		bls	.L279
1266:..\src/command_processing.c ****         }
1267:..\src/command_processing.c ****     } 
1268:..\src/command_processing.c **** }
 5534              		.loc 1 1268 0 is_stmt 1
 5535 012e 00BF     		nop
 5536 0130 0C37     		adds	r7, r7, #12
 5537              		.cfi_def_cfa_offset 12
 5538 0132 BD46     		mov	sp, r7
 5539              		.cfi_def_cfa_register 13
 5540              		@ sp needed
 5541 0134 90BD     		pop	{r4, r7, pc}
 5542              	.L281:
 5543 0136 00BF     		.align	2
 5544              	.L280:
 5545 0138 00000000 		.word	PWM_IMU_1
 5546 013c 00004940 		.word	1078525952
 5547 0140 00003E40 		.word	1077805056
 5548 0144 00000000 		.word	PWM_IMU_2
 5549 0148 00000000 		.word	VT_ref
 5550 014c 00000000 		.word	interrupt_flag
 5551              		.cfi_endproc
 5552              	.LFE119:
 5553              		.size	vibrotactile_control, .-vibrotactile_control
 5554              		.global	__aeabi_i2d
 5555              		.global	__aeabi_dsub
 5556              		.global	__aeabi_dadd
 5557              		.global	__aeabi_fcmpgt
 5558              		.global	__aeabi_f2iz
 5559              		.global	__aeabi_fmul
 5560              		.section	.text.air_chambers_control,"ax",%progbits
 5561              		.align	2
 5562              		.global	air_chambers_control
 5563              		.thumb
 5564              		.thumb_func
 5565              		.type	air_chambers_control, %function
 5566              	air_chambers_control:
 5567              	.LFB120:
1269:..\src/command_processing.c **** 
1270:..\src/command_processing.c **** 
1271:..\src/command_processing.c **** //==============================================================================
1272:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1273:..\src/command_processing.c **** //==============================================================================
1274:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1275:..\src/command_processing.c **** 
1276:..\src/command_processing.c **** 
1277:..\src/command_processing.c **** void air_chambers_control() {
 5568              		.loc 1 1277 0
 5569              		.cfi_startproc
 5570              		@ args = 0, pretend = 0, frame = 24
 5571              		@ frame_needed = 1, uses_anonymous_args = 0
 5572 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 5573              		.cfi_def_cfa_offset 24
 5574              		.cfi_offset 4, -24
 5575              		.cfi_offset 5, -20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 138


 5576              		.cfi_offset 7, -16
 5577              		.cfi_offset 8, -12
 5578              		.cfi_offset 9, -8
 5579              		.cfi_offset 14, -4
 5580 0004 86B0     		sub	sp, sp, #24
 5581              		.cfi_def_cfa_offset 48
 5582 0006 00AF     		add	r7, sp, #0
 5583              		.cfi_def_cfa_register 7
1278:..\src/command_processing.c **** 
1279:..\src/command_processing.c ****     int16 curr_diff;
1280:..\src/command_processing.c ****     int32 pressure_reference;
1281:..\src/command_processing.c ****     int32 err_pressure, pressure_value;
1282:..\src/command_processing.c ****     int32 valve_command;
1283:..\src/command_processing.c ****     int16 x_value;
1284:..\src/command_processing.c **** 
1285:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1286:..\src/command_processing.c ****     
1287:..\src/command_processing.c ****     curr_diff = (int16)commReadResCurrFromSH();
 5584              		.loc 1 1287 0
 5585 0008 FFF7FEFF 		bl	commReadResCurrFromSH
 5586 000c 0346     		mov	r3, r0
 5587 000e BB81     		strh	r3, [r7, #12]	@ movhi
1288:..\src/command_processing.c **** 
1289:..\src/command_processing.c ****     // Compute pressure reference
1290:..\src/command_processing.c **** 
1291:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 5588              		.loc 1 1291 0
 5589 0010 B7F90C30 		ldrsh	r3, [r7, #12]
 5590 0014 1846     		mov	r0, r3
 5591 0016 FFF7FEFF 		bl	__aeabi_i2d
 5592 001a 4FF00002 		mov	r2, #0
 5593 001e 594B     		ldr	r3, .L292
 5594 0020 FFF7FEFF 		bl	__aeabi_dsub
 5595 0024 0346     		mov	r3, r0
 5596 0026 0C46     		mov	r4, r1
 5597 0028 1846     		mov	r0, r3
 5598 002a 2146     		mov	r1, r4
 5599 002c FFF7FEFF 		bl	__aeabi_d2iz
 5600 0030 0346     		mov	r3, r0
 5601 0032 FB81     		strh	r3, [r7, #14]	@ movhi
1292:..\src/command_processing.c ****     if (x_value < 0)
 5602              		.loc 1 1292 0
 5603 0034 B7F90E30 		ldrsh	r3, [r7, #14]
 5604 0038 002B     		cmp	r3, #0
 5605 003a 01DA     		bge	.L283
1293:..\src/command_processing.c ****         x_value = 0;
 5606              		.loc 1 1293 0
 5607 003c 0023     		movs	r3, #0
 5608 003e FB81     		strh	r3, [r7, #14]	@ movhi
 5609              	.L283:
1294:..\src/command_processing.c ****     
1295:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 5610              		.loc 1 1295 0
 5611 0040 B7F90E30 		ldrsh	r3, [r7, #14]
 5612 0044 1846     		mov	r0, r3
 5613 0046 FFF7FEFF 		bl	__aeabi_i2d
 5614 004a 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 139


 5615 004e 4E4B     		ldr	r3, .L292+4
 5616 0050 FFF7FEFF 		bl	__aeabi_dmul
 5617 0054 0346     		mov	r3, r0
 5618 0056 0C46     		mov	r4, r1
 5619 0058 2546     		mov	r5, r4
 5620 005a 1C46     		mov	r4, r3
 5621 005c B7F90E30 		ldrsh	r3, [r7, #14]
 5622 0060 1846     		mov	r0, r3
 5623 0062 FFF7FEFF 		bl	__aeabi_i2d
 5624 0066 0246     		mov	r2, r0
 5625 0068 0B46     		mov	r3, r1
 5626 006a 2046     		mov	r0, r4
 5627 006c 2946     		mov	r1, r5
 5628 006e FFF7FEFF 		bl	__aeabi_dmul
 5629 0072 0346     		mov	r3, r0
 5630 0074 0C46     		mov	r4, r1
 5631 0076 2546     		mov	r5, r4
 5632 0078 1C46     		mov	r4, r3
 5633 007a 444B     		ldr	r3, .L292+8
 5634 007c 1B6D     		ldr	r3, [r3, #80]
 5635 007e 1846     		mov	r0, r3
 5636 0080 FFF7FEFF 		bl	__aeabi_i2d
 5637 0084 4FF00002 		mov	r2, #0
 5638 0088 414B     		ldr	r3, .L292+12
 5639 008a FFF7FEFF 		bl	__aeabi_dmul
 5640 008e 0246     		mov	r2, r0
 5641 0090 0B46     		mov	r3, r1
 5642 0092 9046     		mov	r8, r2
 5643 0094 9946     		mov	r9, r3
 5644 0096 B7F90E30 		ldrsh	r3, [r7, #14]
 5645 009a 1846     		mov	r0, r3
 5646 009c FFF7FEFF 		bl	__aeabi_i2d
 5647 00a0 0246     		mov	r2, r0
 5648 00a2 0B46     		mov	r3, r1
 5649 00a4 4046     		mov	r0, r8
 5650 00a6 4946     		mov	r1, r9
 5651 00a8 FFF7FEFF 		bl	__aeabi_dmul
 5652 00ac 0246     		mov	r2, r0
 5653 00ae 0B46     		mov	r3, r1
 5654 00b0 2046     		mov	r0, r4
 5655 00b2 2946     		mov	r1, r5
 5656 00b4 FFF7FEFF 		bl	__aeabi_dadd
 5657 00b8 0346     		mov	r3, r0
 5658 00ba 0C46     		mov	r4, r1
 5659 00bc 1846     		mov	r0, r3
 5660 00be 2146     		mov	r1, r4
 5661 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 5662 00c4 0146     		mov	r1, r0
 5663 00c6 314B     		ldr	r3, .L292+8
 5664 00c8 1B6D     		ldr	r3, [r3, #80]
 5665 00ca 304A     		ldr	r2, .L292+8
 5666 00cc 126D     		ldr	r2, [r2, #80]
 5667 00ce 02FB03F3 		mul	r3, r2, r3
 5668 00d2 91FBF3F3 		sdiv	r3, r1, r3
 5669 00d6 7B61     		str	r3, [r7, #20]
1296:..\src/command_processing.c ****     if (pressure_reference < 0)
 5670              		.loc 1 1296 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 140


 5671 00d8 7B69     		ldr	r3, [r7, #20]
 5672 00da 002B     		cmp	r3, #0
 5673 00dc 01DA     		bge	.L284
1297:..\src/command_processing.c ****         pressure_reference = 0;
 5674              		.loc 1 1297 0
 5675 00de 0023     		movs	r3, #0
 5676 00e0 7B61     		str	r3, [r7, #20]
 5677              	.L284:
1298:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 5678              		.loc 1 1298 0
 5679 00e2 7869     		ldr	r0, [r7, #20]
 5680 00e4 FFF7FEFF 		bl	__aeabi_i2f
 5681 00e8 0246     		mov	r2, r0
 5682 00ea 284B     		ldr	r3, .L292+8
 5683 00ec 5B6D     		ldr	r3, [r3, #84]	@ float
 5684 00ee 1946     		mov	r1, r3
 5685 00f0 1046     		mov	r0, r2
 5686 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 5687 00f6 0346     		mov	r3, r0
 5688 00f8 002B     		cmp	r3, #0
 5689 00fa 06D0     		beq	.L285
1299:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 5690              		.loc 1 1299 0
 5691 00fc 234B     		ldr	r3, .L292+8
 5692 00fe 5B6D     		ldr	r3, [r3, #84]	@ float
 5693 0100 1846     		mov	r0, r3
 5694 0102 FFF7FEFF 		bl	__aeabi_f2iz
 5695 0106 0346     		mov	r3, r0
 5696 0108 7B61     		str	r3, [r7, #20]
 5697              	.L285:
1300:..\src/command_processing.c ****     
1301:..\src/command_processing.c ****     pressure_value = (int32)g_fb_meas.pressure;
 5698              		.loc 1 1301 0
 5699 010a 224B     		ldr	r3, .L292+16
 5700 010c 1B68     		ldr	r3, [r3]	@ float
 5701 010e 1846     		mov	r0, r3
 5702 0110 FFF7FEFF 		bl	__aeabi_f2iz
 5703 0114 0346     		mov	r3, r0
 5704 0116 BB60     		str	r3, [r7, #8]
1302:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 5705              		.loc 1 1302 0
 5706 0118 7A69     		ldr	r2, [r7, #20]
 5707 011a BB68     		ldr	r3, [r7, #8]
 5708 011c D31A     		subs	r3, r2, r3
 5709 011e 7B60     		str	r3, [r7, #4]
1303:..\src/command_processing.c **** 
1304:..\src/command_processing.c ****     if (x_value <= 0){
 5710              		.loc 1 1304 0
 5711 0120 B7F90E30 		ldrsh	r3, [r7, #14]
 5712 0124 002B     		cmp	r3, #0
 5713 0126 02DC     		bgt	.L287
1305:..\src/command_processing.c ****         //i.e the hand is opening
1306:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 5714              		.loc 1 1306 0
 5715 0128 0023     		movs	r3, #0
 5716 012a 3B61     		str	r3, [r7, #16]
 5717 012c 01E0     		b	.L288
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 141


 5718              	.L287:
1307:..\src/command_processing.c ****     }
1308:..\src/command_processing.c ****     else {
1309:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1310:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1311:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1312:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
 5719              		.loc 1 1312 0
 5720 012e 0123     		movs	r3, #1
 5721 0130 3B61     		str	r3, [r7, #16]
 5722              	.L288:
1313:..\src/command_processing.c ****     }
1314:..\src/command_processing.c ****     
1315:..\src/command_processing.c ****     // Pump control*/
1316:..\src/command_processing.c ****    
1317:..\src/command_processing.c ****     g_refNew[0].pwm = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 5723              		.loc 1 1317 0
 5724 0132 164B     		ldr	r3, .L292+8
 5725 0134 9C6D     		ldr	r4, [r3, #88]	@ float
 5726 0136 7868     		ldr	r0, [r7, #4]
 5727 0138 FFF7FEFF 		bl	__aeabi_i2f
 5728 013c 0346     		mov	r3, r0
 5729 013e 1946     		mov	r1, r3
 5730 0140 2046     		mov	r0, r4
 5731 0142 FFF7FEFF 		bl	__aeabi_fmul
 5732 0146 0346     		mov	r3, r0
 5733 0148 1846     		mov	r0, r3
 5734 014a FFF7FEFF 		bl	__aeabi_f2iz
 5735 014e 0246     		mov	r2, r0
 5736 0150 114B     		ldr	r3, .L292+20
 5737 0152 9A60     		str	r2, [r3, #8]
1318:..\src/command_processing.c **** 
1319:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1320:..\src/command_processing.c ****     
1321:..\src/command_processing.c ****     // Limit output voltage
1322:..\src/command_processing.c ****     if (g_refNew[0].pwm > 80) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 5738              		.loc 1 1322 0
 5739 0154 104B     		ldr	r3, .L292+20
 5740 0156 9B68     		ldr	r3, [r3, #8]
 5741 0158 502B     		cmp	r3, #80
 5742 015a 02DD     		ble	.L289
1323:..\src/command_processing.c ****         g_refNew[0].pwm = 80; // 80
 5743              		.loc 1 1323 0
 5744 015c 0E4B     		ldr	r3, .L292+20
 5745 015e 5022     		movs	r2, #80
 5746 0160 9A60     		str	r2, [r3, #8]
 5747              	.L289:
1324:..\src/command_processing.c ****     if (g_refNew[0].pwm < 20)
 5748              		.loc 1 1324 0
 5749 0162 0D4B     		ldr	r3, .L292+20
 5750 0164 9B68     		ldr	r3, [r3, #8]
 5751 0166 132B     		cmp	r3, #19
 5752 0168 02DC     		bgt	.L290
1325:..\src/command_processing.c ****         g_refNew[0].pwm = 0;
 5753              		.loc 1 1325 0
 5754 016a 0B4B     		ldr	r3, .L292+20
 5755 016c 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 142


 5756 016e 9A60     		str	r2, [r3, #8]
 5757              	.L290:
1326:..\src/command_processing.c ****         
1327:..\src/command_processing.c ****     VALVE_Write(valve_command);
 5758              		.loc 1 1327 0
 5759 0170 3B69     		ldr	r3, [r7, #16]
 5760 0172 DBB2     		uxtb	r3, r3
 5761 0174 1846     		mov	r0, r3
 5762 0176 FFF7FEFF 		bl	VALVE_Write
1328:..\src/command_processing.c ****     
1329:..\src/command_processing.c ****     
1330:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1331:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1332:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1333:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1334:..\src/command_processing.c **** 
1335:..\src/command_processing.c **** }
 5763              		.loc 1 1335 0
 5764 017a 00BF     		nop
 5765 017c 1837     		adds	r7, r7, #24
 5766              		.cfi_def_cfa_offset 24
 5767 017e BD46     		mov	sp, r7
 5768              		.cfi_def_cfa_register 13
 5769              		@ sp needed
 5770 0180 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 5771              	.L293:
 5772              		.align	2
 5773              	.L292:
 5774 0184 00004940 		.word	1078525952
 5775 0188 00003EC0 		.word	-1069678592
 5776 018c 00000000 		.word	c_mem
 5777 0190 00804B40 		.word	1078689792
 5778 0194 00000000 		.word	g_fb_meas
 5779 0198 00000000 		.word	g_refNew
 5780              		.cfi_endproc
 5781              	.LFE120:
 5782              		.size	air_chambers_control, .-air_chambers_control
 5783              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 5784              		.align	2
 5785              		.global	emg_activation_velocity_fsm
 5786              		.thumb
 5787              		.thumb_func
 5788              		.type	emg_activation_velocity_fsm, %function
 5789              	emg_activation_velocity_fsm:
 5790              	.LFB121:
1336:..\src/command_processing.c **** 
1337:..\src/command_processing.c **** 
1338:..\src/command_processing.c **** //==============================================================================
1339:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1340:..\src/command_processing.c **** //==============================================================================
1341:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1342:..\src/command_processing.c **** 
1343:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 5791              		.loc 1 1343 0
 5792              		.cfi_startproc
 5793              		@ args = 0, pretend = 0, frame = 0
 5794              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 143


 5795              		@ link register save eliminated.
 5796 0000 80B4     		push	{r7}
 5797              		.cfi_def_cfa_offset 4
 5798              		.cfi_offset 7, -4
 5799 0002 00AF     		add	r7, sp, #0
 5800              		.cfi_def_cfa_register 7
1344:..\src/command_processing.c ****     
1345:..\src/command_processing.c **** return 0;
 5801              		.loc 1 1345 0
 5802 0004 0023     		movs	r3, #0
1346:..\src/command_processing.c **** }
 5803              		.loc 1 1346 0
 5804 0006 1846     		mov	r0, r3
 5805 0008 BD46     		mov	sp, r7
 5806              		.cfi_def_cfa_register 13
 5807              		@ sp needed
 5808 000a 80BC     		pop	{r7}
 5809              		.cfi_restore 7
 5810              		.cfi_def_cfa_offset 0
 5811 000c 7047     		bx	lr
 5812              		.cfi_endproc
 5813              	.LFE121:
 5814              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 5815 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 5816              		.align	2
 5817              		.global	otbk_act_wrist_control
 5818              		.thumb
 5819              		.thumb_func
 5820              		.type	otbk_act_wrist_control, %function
 5821              	otbk_act_wrist_control:
 5822              	.LFB122:
1347:..\src/command_processing.c **** 
1348:..\src/command_processing.c **** //==============================================================================
1349:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1350:..\src/command_processing.c **** //==============================================================================
1351:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1352:..\src/command_processing.c **** 
1353:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 5823              		.loc 1 1353 0
 5824              		.cfi_startproc
 5825              		@ args = 0, pretend = 0, frame = 8
 5826              		@ frame_needed = 1, uses_anonymous_args = 0
 5827              		@ link register save eliminated.
 5828 0000 80B4     		push	{r7}
 5829              		.cfi_def_cfa_offset 4
 5830              		.cfi_offset 7, -4
 5831 0002 83B0     		sub	sp, sp, #12
 5832              		.cfi_def_cfa_offset 16
 5833 0004 00AF     		add	r7, sp, #0
 5834              		.cfi_def_cfa_register 7
 5835 0006 7860     		str	r0, [r7, #4]
1354:..\src/command_processing.c ****     
1355:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1356:..\src/command_processing.c ****     
1357:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1358:..\src/command_processing.c ****         
1359:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 144


1360:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1361:..\src/command_processing.c ****     switch (fsm_state){
1362:..\src/command_processing.c ****         case RELAX_STATE:
1363:..\src/command_processing.c ****             
1364:..\src/command_processing.c ****             // Wrist stop
1365:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1366:..\src/command_processing.c ****             
1367:..\src/command_processing.c ****             // Softhand stop
1368:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1369:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1370:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1371:..\src/command_processing.c ****             
1372:..\src/command_processing.c ****             break;
1373:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1374:..\src/command_processing.c ****                 
1375:..\src/command_processing.c ****             break;
1376:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1377:..\src/command_processing.c ****             
1378:..\src/command_processing.c ****             // Wrist movement
1379:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1380:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1381:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1382:..\src/command_processing.c ****                 }
1383:..\src/command_processing.c ****                 else {
1384:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1385:..\src/command_processing.c ****                 }
1386:..\src/command_processing.c ****             }
1387:..\src/command_processing.c ****             else {
1388:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1389:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1390:..\src/command_processing.c ****                 }
1391:..\src/command_processing.c ****                 else {
1392:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1393:..\src/command_processing.c ****                 }
1394:..\src/command_processing.c ****             }
1395:..\src/command_processing.c ****             
1396:..\src/command_processing.c ****             // Softhand stop
1397:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1398:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1399:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1400:..\src/command_processing.c ****             
1401:..\src/command_processing.c ****             break;
1402:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1403:..\src/command_processing.c ****             
1404:..\src/command_processing.c ****             // Wrist stop
1405:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1406:..\src/command_processing.c ****             
1407:..\src/command_processing.c ****             // SoftHand movement
1408:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1409:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1410:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1411:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1412:..\src/command_processing.c ****             
1413:..\src/command_processing.c ****             break;
1414:..\src/command_processing.c ****     }
1415:..\src/command_processing.c ****         
1416:..\src/command_processing.c ****     // Limit output voltage
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 145


1417:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1418:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1419:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1420:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1421:..\src/command_processing.c ****     
1422:..\src/command_processing.c **** #endif
1423:..\src/command_processing.c **** }
 5836              		.loc 1 1423 0
 5837 0008 00BF     		nop
 5838 000a 0C37     		adds	r7, r7, #12
 5839              		.cfi_def_cfa_offset 4
 5840 000c BD46     		mov	sp, r7
 5841              		.cfi_def_cfa_register 13
 5842              		@ sp needed
 5843 000e 80BC     		pop	{r7}
 5844              		.cfi_restore 7
 5845              		.cfi_def_cfa_offset 0
 5846 0010 7047     		bx	lr
 5847              		.cfi_endproc
 5848              	.LFE122:
 5849              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 5850 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 5851              		.align	2
 5852              		.global	drive_slave
 5853              		.thumb
 5854              		.thumb_func
 5855              		.type	drive_slave, %function
 5856              	drive_slave:
 5857              	.LFB123:
1424:..\src/command_processing.c **** 
1425:..\src/command_processing.c **** //==============================================================================
1426:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1427:..\src/command_processing.c **** //==============================================================================
1428:..\src/command_processing.c ****  
1429:..\src/command_processing.c ****  
1430:..\src/command_processing.c **** void drive_slave(uint8 slave_motor_idx, uint8 slave_ID) {
 5858              		.loc 1 1430 0
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 8
 5861              		@ frame_needed = 1, uses_anonymous_args = 0
 5862              		@ link register save eliminated.
 5863 0000 80B4     		push	{r7}
 5864              		.cfi_def_cfa_offset 4
 5865              		.cfi_offset 7, -4
 5866 0002 83B0     		sub	sp, sp, #12
 5867              		.cfi_def_cfa_offset 16
 5868 0004 00AF     		add	r7, sp, #0
 5869              		.cfi_def_cfa_register 7
 5870 0006 0346     		mov	r3, r0
 5871 0008 0A46     		mov	r2, r1
 5872 000a FB71     		strb	r3, [r7, #7]
 5873 000c 1346     		mov	r3, r2
 5874 000e BB71     		strb	r3, [r7, #6]
1431:..\src/command_processing.c **** 
1432:..\src/command_processing.c **** 
1433:..\src/command_processing.c **** }
 5875              		.loc 1 1433 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 146


 5876 0010 00BF     		nop
 5877 0012 0C37     		adds	r7, r7, #12
 5878              		.cfi_def_cfa_offset 4
 5879 0014 BD46     		mov	sp, r7
 5880              		.cfi_def_cfa_register 13
 5881              		@ sp needed
 5882 0016 80BC     		pop	{r7}
 5883              		.cfi_restore 7
 5884              		.cfi_def_cfa_offset 0
 5885 0018 7047     		bx	lr
 5886              		.cfi_endproc
 5887              	.LFE123:
 5888              		.size	drive_slave, .-drive_slave
 5889 001a 00BF     		.section	.text.stop_master_device,"ax",%progbits
 5890              		.align	2
 5891              		.global	stop_master_device
 5892              		.thumb
 5893              		.thumb_func
 5894              		.type	stop_master_device, %function
 5895              	stop_master_device:
 5896              	.LFB124:
1434:..\src/command_processing.c **** 
1435:..\src/command_processing.c **** //==============================================================================
1436:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1437:..\src/command_processing.c **** //==============================================================================
1438:..\src/command_processing.c ****  
1439:..\src/command_processing.c **** void stop_master_device() {
 5897              		.loc 1 1439 0
 5898              		.cfi_startproc
 5899              		@ args = 0, pretend = 0, frame = 0
 5900              		@ frame_needed = 1, uses_anonymous_args = 0
 5901 0000 80B5     		push	{r7, lr}
 5902              		.cfi_def_cfa_offset 8
 5903              		.cfi_offset 7, -8
 5904              		.cfi_offset 14, -4
 5905 0002 00AF     		add	r7, sp, #0
 5906              		.cfi_def_cfa_register 7
1440:..\src/command_processing.c ****     
1441:..\src/command_processing.c ****         // Stop pump and open valve
1442:..\src/command_processing.c ****         g_refNew[0].pwm = 0;    
 5907              		.loc 1 1442 0
 5908 0004 074B     		ldr	r3, .L299
 5909 0006 0022     		movs	r2, #0
 5910 0008 9A60     		str	r2, [r3, #8]
1443:..\src/command_processing.c ****         VALVE_Write(OPEN);
 5911              		.loc 1 1443 0
 5912 000a 0020     		movs	r0, #0
 5913 000c FFF7FEFF 		bl	VALVE_Write
1444:..\src/command_processing.c ****         master_mode = 0; 
 5914              		.loc 1 1444 0
 5915 0010 054B     		ldr	r3, .L299+4
 5916 0012 0022     		movs	r2, #0
 5917 0014 1A70     		strb	r2, [r3]
1445:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 5918              		.loc 1 1445 0
 5919 0016 054B     		ldr	r3, .L299+8
 5920 0018 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 147


 5921 001a 83F84020 		strb	r2, [r3, #64]
1446:..\src/command_processing.c **** 
1447:..\src/command_processing.c **** }
 5922              		.loc 1 1447 0
 5923 001e 00BF     		nop
 5924 0020 80BD     		pop	{r7, pc}
 5925              	.L300:
 5926 0022 00BF     		.align	2
 5927              	.L299:
 5928 0024 00000000 		.word	g_refNew
 5929 0028 00000000 		.word	master_mode
 5930 002c 00000000 		.word	g_mem
 5931              		.cfi_endproc
 5932              	.LFE124:
 5933              		.size	stop_master_device, .-stop_master_device
 5934              		.section	.text.deactivate_slaves,"ax",%progbits
 5935              		.align	2
 5936              		.global	deactivate_slaves
 5937              		.thumb
 5938              		.thumb_func
 5939              		.type	deactivate_slaves, %function
 5940              	deactivate_slaves:
 5941              	.LFB125:
1448:..\src/command_processing.c **** 
1449:..\src/command_processing.c **** //==============================================================================
1450:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1451:..\src/command_processing.c **** //==============================================================================
1452:..\src/command_processing.c ****  
1453:..\src/command_processing.c **** void deactivate_slaves() {
 5942              		.loc 1 1453 0
 5943              		.cfi_startproc
 5944              		@ args = 0, pretend = 0, frame = 0
 5945              		@ frame_needed = 1, uses_anonymous_args = 0
 5946              		@ link register save eliminated.
 5947 0000 80B4     		push	{r7}
 5948              		.cfi_def_cfa_offset 4
 5949              		.cfi_offset 7, -4
 5950 0002 00AF     		add	r7, sp, #0
 5951              		.cfi_def_cfa_register 7
1454:..\src/command_processing.c ****    
1455:..\src/command_processing.c **** }
 5952              		.loc 1 1455 0
 5953 0004 00BF     		nop
 5954 0006 BD46     		mov	sp, r7
 5955              		.cfi_def_cfa_register 13
 5956              		@ sp needed
 5957 0008 80BC     		pop	{r7}
 5958              		.cfi_restore 7
 5959              		.cfi_def_cfa_offset 0
 5960 000a 7047     		bx	lr
 5961              		.cfi_endproc
 5962              	.LFE125:
 5963              		.size	deactivate_slaves, .-deactivate_slaves
 5964              		.bss
 5965              		.align	1
 5966              	i.10055:
 5967 0000 0000     		.space	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 148


 5968              		.text
 5969              	.Letext0:
 5970              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5971              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5972              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 5973              		.file 6 "..\\src\\commands.h"
 5974              		.file 7 "..\\src\\globals.h"
 5975              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 5976              		.section	.debug_info,"",%progbits
 5977              	.Ldebug_info0:
 5978 0000 DF150000 		.4byte	0x15df
 5979 0004 0400     		.2byte	0x4
 5980 0006 00000000 		.4byte	.Ldebug_abbrev0
 5981 000a 04       		.byte	0x4
 5982 000b 01       		.uleb128 0x1
 5983 000c 2F080000 		.4byte	.LASF292
 5984 0010 0C       		.byte	0xc
 5985 0011 42100000 		.4byte	.LASF293
 5986 0015 33060000 		.4byte	.LASF294
 5987 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5988 001d 00000000 		.4byte	0
 5989 0021 00000000 		.4byte	.Ldebug_line0
 5990 0025 02       		.uleb128 0x2
 5991 0026 01       		.byte	0x1
 5992 0027 06       		.byte	0x6
 5993 0028 3A030000 		.4byte	.LASF0
 5994 002c 02       		.uleb128 0x2
 5995 002d 01       		.byte	0x1
 5996 002e 08       		.byte	0x8
 5997 002f A2030000 		.4byte	.LASF1
 5998 0033 02       		.uleb128 0x2
 5999 0034 02       		.byte	0x2
 6000 0035 05       		.byte	0x5
 6001 0036 3B0E0000 		.4byte	.LASF2
 6002 003a 02       		.uleb128 0x2
 6003 003b 02       		.byte	0x2
 6004 003c 07       		.byte	0x7
 6005 003d C00F0000 		.4byte	.LASF3
 6006 0041 03       		.uleb128 0x3
 6007 0042 18100000 		.4byte	.LASF5
 6008 0046 03       		.byte	0x3
 6009 0047 3F       		.byte	0x3f
 6010 0048 4C000000 		.4byte	0x4c
 6011 004c 02       		.uleb128 0x2
 6012 004d 04       		.byte	0x4
 6013 004e 05       		.byte	0x5
 6014 004f 2F020000 		.4byte	.LASF4
 6015 0053 03       		.uleb128 0x3
 6016 0054 EF080000 		.4byte	.LASF6
 6017 0058 03       		.byte	0x3
 6018 0059 41       		.byte	0x41
 6019 005a 5E000000 		.4byte	0x5e
 6020 005e 02       		.uleb128 0x2
 6021 005f 04       		.byte	0x4
 6022 0060 07       		.byte	0x7
 6023 0061 EC060000 		.4byte	.LASF7
 6024 0065 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 149


 6025 0066 08       		.byte	0x8
 6026 0067 05       		.byte	0x5
 6027 0068 FA080000 		.4byte	.LASF8
 6028 006c 02       		.uleb128 0x2
 6029 006d 08       		.byte	0x8
 6030 006e 07       		.byte	0x7
 6031 006f DD0B0000 		.4byte	.LASF9
 6032 0073 04       		.uleb128 0x4
 6033 0074 04       		.byte	0x4
 6034 0075 05       		.byte	0x5
 6035 0076 696E7400 		.ascii	"int\000"
 6036 007a 02       		.uleb128 0x2
 6037 007b 04       		.byte	0x4
 6038 007c 07       		.byte	0x7
 6039 007d DA090000 		.4byte	.LASF10
 6040 0081 03       		.uleb128 0x3
 6041 0082 6C000000 		.4byte	.LASF11
 6042 0086 04       		.byte	0x4
 6043 0087 2C       		.byte	0x2c
 6044 0088 41000000 		.4byte	0x41
 6045 008c 03       		.uleb128 0x3
 6046 008d 2F0F0000 		.4byte	.LASF12
 6047 0091 04       		.byte	0x4
 6048 0092 30       		.byte	0x30
 6049 0093 53000000 		.4byte	0x53
 6050 0097 05       		.uleb128 0x5
 6051 0098 290E0000 		.4byte	.LASF13
 6052 009c 05       		.byte	0x5
 6053 009d E401     		.2byte	0x1e4
 6054 009f 2C000000 		.4byte	0x2c
 6055 00a3 05       		.uleb128 0x5
 6056 00a4 96100000 		.4byte	.LASF14
 6057 00a8 05       		.byte	0x5
 6058 00a9 E501     		.2byte	0x1e5
 6059 00ab 3A000000 		.4byte	0x3a
 6060 00af 05       		.uleb128 0x5
 6061 00b0 8D000000 		.4byte	.LASF15
 6062 00b4 05       		.byte	0x5
 6063 00b5 E601     		.2byte	0x1e6
 6064 00b7 5E000000 		.4byte	0x5e
 6065 00bb 05       		.uleb128 0x5
 6066 00bc EB0E0000 		.4byte	.LASF16
 6067 00c0 05       		.byte	0x5
 6068 00c1 E801     		.2byte	0x1e8
 6069 00c3 33000000 		.4byte	0x33
 6070 00c7 05       		.uleb128 0x5
 6071 00c8 FE0F0000 		.4byte	.LASF17
 6072 00cc 05       		.byte	0x5
 6073 00cd E901     		.2byte	0x1e9
 6074 00cf 4C000000 		.4byte	0x4c
 6075 00d3 02       		.uleb128 0x2
 6076 00d4 04       		.byte	0x4
 6077 00d5 04       		.byte	0x4
 6078 00d6 83090000 		.4byte	.LASF18
 6079 00da 02       		.uleb128 0x2
 6080 00db 08       		.byte	0x8
 6081 00dc 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 150


 6082 00dd 4C090000 		.4byte	.LASF19
 6083 00e1 02       		.uleb128 0x2
 6084 00e2 01       		.byte	0x1
 6085 00e3 08       		.byte	0x8
 6086 00e4 48040000 		.4byte	.LASF20
 6087 00e8 05       		.uleb128 0x5
 6088 00e9 800C0000 		.4byte	.LASF21
 6089 00ed 05       		.byte	0x5
 6090 00ee 8E02     		.2byte	0x28e
 6091 00f0 F4000000 		.4byte	0xf4
 6092 00f4 06       		.uleb128 0x6
 6093 00f5 97000000 		.4byte	0x97
 6094 00f9 02       		.uleb128 0x2
 6095 00fa 08       		.byte	0x8
 6096 00fb 04       		.byte	0x4
 6097 00fc 530B0000 		.4byte	.LASF22
 6098 0100 02       		.uleb128 0x2
 6099 0101 04       		.byte	0x4
 6100 0102 07       		.byte	0x7
 6101 0103 20000000 		.4byte	.LASF23
 6102 0107 07       		.uleb128 0x7
 6103 0108 04       		.byte	0x4
 6104 0109 E1000000 		.4byte	0xe1
 6105 010d 07       		.uleb128 0x7
 6106 010e 04       		.byte	0x4
 6107 010f 13010000 		.4byte	0x113
 6108 0113 08       		.uleb128 0x8
 6109 0114 E1000000 		.4byte	0xe1
 6110 0118 09       		.uleb128 0x9
 6111 0119 ED050000 		.4byte	.LASF42
 6112 011d 01       		.byte	0x1
 6113 011e 2C000000 		.4byte	0x2c
 6114 0122 06       		.byte	0x6
 6115 0123 43       		.byte	0x43
 6116 0124 95010000 		.4byte	0x195
 6117 0128 0A       		.uleb128 0xa
 6118 0129 6C100000 		.4byte	.LASF24
 6119 012d 01       		.byte	0x1
 6120 012e 0A       		.uleb128 0xa
 6121 012f 9F0E0000 		.4byte	.LASF25
 6122 0133 02       		.byte	0x2
 6123 0134 0A       		.uleb128 0xa
 6124 0135 F9020000 		.4byte	.LASF26
 6125 0139 03       		.byte	0x3
 6126 013a 0A       		.uleb128 0xa
 6127 013b 0B0F0000 		.4byte	.LASF27
 6128 013f 04       		.byte	0x4
 6129 0140 0A       		.uleb128 0xa
 6130 0141 D2010000 		.4byte	.LASF28
 6131 0145 05       		.byte	0x5
 6132 0146 0A       		.uleb128 0xa
 6133 0147 8B070000 		.4byte	.LASF29
 6134 014b 06       		.byte	0x6
 6135 014c 0A       		.uleb128 0xa
 6136 014d 450E0000 		.4byte	.LASF30
 6137 0151 07       		.byte	0x7
 6138 0152 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 151


 6139 0153 17040000 		.4byte	.LASF31
 6140 0157 08       		.byte	0x8
 6141 0158 0A       		.uleb128 0xa
 6142 0159 F1000000 		.4byte	.LASF32
 6143 015d 09       		.byte	0x9
 6144 015e 0A       		.uleb128 0xa
 6145 015f A2040000 		.4byte	.LASF33
 6146 0163 0A       		.byte	0xa
 6147 0164 0A       		.uleb128 0xa
 6148 0165 FD0E0000 		.4byte	.LASF34
 6149 0169 0B       		.byte	0xb
 6150 016a 0A       		.uleb128 0xa
 6151 016b D0020000 		.4byte	.LASF35
 6152 016f 0C       		.byte	0xc
 6153 0170 0A       		.uleb128 0xa
 6154 0171 38020000 		.4byte	.LASF36
 6155 0175 0D       		.byte	0xd
 6156 0176 0A       		.uleb128 0xa
 6157 0177 240A0000 		.4byte	.LASF37
 6158 017b 0E       		.byte	0xe
 6159 017c 0A       		.uleb128 0xa
 6160 017d AA010000 		.4byte	.LASF38
 6161 0181 0F       		.byte	0xf
 6162 0182 0A       		.uleb128 0xa
 6163 0183 D20A0000 		.4byte	.LASF39
 6164 0187 10       		.byte	0x10
 6165 0188 0A       		.uleb128 0xa
 6166 0189 2A030000 		.4byte	.LASF40
 6167 018d 11       		.byte	0x11
 6168 018e 0A       		.uleb128 0xa
 6169 018f 1F0B0000 		.4byte	.LASF41
 6170 0193 12       		.byte	0x12
 6171 0194 00       		.byte	0
 6172 0195 09       		.uleb128 0x9
 6173 0196 31050000 		.4byte	.LASF43
 6174 019a 01       		.byte	0x1
 6175 019b 2C000000 		.4byte	0x2c
 6176 019f 06       		.byte	0x6
 6177 01a0 5A       		.byte	0x5a
 6178 01a1 EE010000 		.4byte	0x1ee
 6179 01a5 0A       		.uleb128 0xa
 6180 01a6 4E000000 		.4byte	.LASF44
 6181 01aa 01       		.byte	0x1
 6182 01ab 0A       		.uleb128 0xa
 6183 01ac 98030000 		.4byte	.LASF45
 6184 01b0 02       		.byte	0x2
 6185 01b1 0A       		.uleb128 0xa
 6186 01b2 09000000 		.4byte	.LASF46
 6187 01b6 03       		.byte	0x3
 6188 01b7 0A       		.uleb128 0xa
 6189 01b8 4A0A0000 		.4byte	.LASF47
 6190 01bc 04       		.byte	0x4
 6191 01bd 0A       		.uleb128 0xa
 6192 01be F10E0000 		.4byte	.LASF48
 6193 01c2 05       		.byte	0x5
 6194 01c3 0A       		.uleb128 0xa
 6195 01c4 CC0C0000 		.4byte	.LASF49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 152


 6196 01c8 06       		.byte	0x6
 6197 01c9 0A       		.uleb128 0xa
 6198 01ca 76040000 		.4byte	.LASF50
 6199 01ce 07       		.byte	0x7
 6200 01cf 0A       		.uleb128 0xa
 6201 01d0 FB0B0000 		.4byte	.LASF51
 6202 01d4 08       		.byte	0x8
 6203 01d5 0A       		.uleb128 0xa
 6204 01d6 F0070000 		.4byte	.LASF52
 6205 01da 09       		.byte	0x9
 6206 01db 0A       		.uleb128 0xa
 6207 01dc 3B050000 		.4byte	.LASF53
 6208 01e0 0A       		.byte	0xa
 6209 01e1 0A       		.uleb128 0xa
 6210 01e2 640D0000 		.4byte	.LASF54
 6211 01e6 0B       		.byte	0xb
 6212 01e7 0A       		.uleb128 0xa
 6213 01e8 28060000 		.4byte	.LASF55
 6214 01ec 0C       		.byte	0xc
 6215 01ed 00       		.byte	0
 6216 01ee 09       		.uleb128 0x9
 6217 01ef 080A0000 		.4byte	.LASF56
 6218 01f3 01       		.byte	0x1
 6219 01f4 2C000000 		.4byte	0x2c
 6220 01f8 06       		.byte	0x6
 6221 01f9 68       		.byte	0x68
 6222 01fa CB020000 		.4byte	0x2cb
 6223 01fe 0A       		.uleb128 0xa
 6224 01ff A5100000 		.4byte	.LASF57
 6225 0203 00       		.byte	0
 6226 0204 0A       		.uleb128 0xa
 6227 0205 7B0E0000 		.4byte	.LASF58
 6228 0209 01       		.byte	0x1
 6229 020a 0A       		.uleb128 0xa
 6230 020b DB060000 		.4byte	.LASF59
 6231 020f 03       		.byte	0x3
 6232 0210 0A       		.uleb128 0xa
 6233 0211 FE030000 		.4byte	.LASF60
 6234 0215 04       		.byte	0x4
 6235 0216 0A       		.uleb128 0xa
 6236 0217 B90C0000 		.4byte	.LASF61
 6237 021b 05       		.byte	0x5
 6238 021c 0A       		.uleb128 0xa
 6239 021d CB070000 		.4byte	.LASF62
 6240 0221 06       		.byte	0x6
 6241 0222 0A       		.uleb128 0xa
 6242 0223 FE060000 		.4byte	.LASF63
 6243 0227 09       		.byte	0x9
 6244 0228 0A       		.uleb128 0xa
 6245 0229 29000000 		.4byte	.LASF64
 6246 022d 0A       		.byte	0xa
 6247 022e 0A       		.uleb128 0xa
 6248 022f CD0E0000 		.4byte	.LASF65
 6249 0233 0C       		.byte	0xc
 6250 0234 0A       		.uleb128 0xa
 6251 0235 7F0B0000 		.4byte	.LASF66
 6252 0239 0D       		.byte	0xd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 153


 6253 023a 0A       		.uleb128 0xa
 6254 023b E8030000 		.4byte	.LASF67
 6255 023f 80       		.byte	0x80
 6256 0240 0A       		.uleb128 0xa
 6257 0241 37040000 		.4byte	.LASF68
 6258 0245 81       		.byte	0x81
 6259 0246 0A       		.uleb128 0xa
 6260 0247 47050000 		.4byte	.LASF69
 6261 024b 82       		.byte	0x82
 6262 024c 0A       		.uleb128 0xa
 6263 024d 5B0E0000 		.4byte	.LASF70
 6264 0251 83       		.byte	0x83
 6265 0252 0A       		.uleb128 0xa
 6266 0253 D70D0000 		.4byte	.LASF71
 6267 0257 84       		.byte	0x84
 6268 0258 0A       		.uleb128 0xa
 6269 0259 90020000 		.4byte	.LASF72
 6270 025d 85       		.byte	0x85
 6271 025e 0A       		.uleb128 0xa
 6272 025f 19080000 		.4byte	.LASF73
 6273 0263 86       		.byte	0x86
 6274 0264 0A       		.uleb128 0xa
 6275 0265 AB070000 		.4byte	.LASF74
 6276 0269 88       		.byte	0x88
 6277 026a 0A       		.uleb128 0xa
 6278 026b BA0E0000 		.4byte	.LASF75
 6279 026f 89       		.byte	0x89
 6280 0270 0A       		.uleb128 0xa
 6281 0271 2A0C0000 		.4byte	.LASF76
 6282 0275 8B       		.byte	0x8b
 6283 0276 0A       		.uleb128 0xa
 6284 0277 0D0B0000 		.4byte	.LASF77
 6285 027b 8C       		.byte	0x8c
 6286 027c 0A       		.uleb128 0xa
 6287 027d D5080000 		.4byte	.LASF78
 6288 0281 8E       		.byte	0x8e
 6289 0282 0A       		.uleb128 0xa
 6290 0283 B0030000 		.4byte	.LASF79
 6291 0287 FB       		.byte	0xfb
 6292 0288 0A       		.uleb128 0xa
 6293 0289 CC030000 		.4byte	.LASF80
 6294 028d FA       		.byte	0xfa
 6295 028e 0A       		.uleb128 0xa
 6296 028f 6F0C0000 		.4byte	.LASF81
 6297 0293 90       		.byte	0x90
 6298 0294 0A       		.uleb128 0xa
 6299 0295 E1010000 		.4byte	.LASF82
 6300 0299 92       		.byte	0x92
 6301 029a 0A       		.uleb128 0xa
 6302 029b 8A0F0000 		.4byte	.LASF83
 6303 029f A1       		.byte	0xa1
 6304 02a0 0A       		.uleb128 0xa
 6305 02a1 9C0D0000 		.4byte	.LASF84
 6306 02a5 A2       		.byte	0xa2
 6307 02a6 0A       		.uleb128 0xa
 6308 02a7 7D0A0000 		.4byte	.LASF85
 6309 02ab A3       		.byte	0xa3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 154


 6310 02ac 0A       		.uleb128 0xa
 6311 02ad B80D0000 		.4byte	.LASF86
 6312 02b1 A4       		.byte	0xa4
 6313 02b2 0A       		.uleb128 0xa
 6314 02b3 6A0E0000 		.4byte	.LASF87
 6315 02b7 A5       		.byte	0xa5
 6316 02b8 0A       		.uleb128 0xa
 6317 02b9 6D0D0000 		.4byte	.LASF88
 6318 02bd A6       		.byte	0xa6
 6319 02be 0A       		.uleb128 0xa
 6320 02bf 53090000 		.4byte	.LASF89
 6321 02c3 A7       		.byte	0xa7
 6322 02c4 0A       		.uleb128 0xa
 6323 02c5 89090000 		.4byte	.LASF90
 6324 02c9 A8       		.byte	0xa8
 6325 02ca 00       		.byte	0
 6326 02cb 09       		.uleb128 0x9
 6327 02cc 5E100000 		.4byte	.LASF91
 6328 02d0 01       		.byte	0x1
 6329 02d1 2C000000 		.4byte	0x2c
 6330 02d5 06       		.byte	0x6
 6331 02d6 BA       		.byte	0xba
 6332 02d7 0C030000 		.4byte	0x30c
 6333 02db 0A       		.uleb128 0xa
 6334 02dc BE050000 		.4byte	.LASF92
 6335 02e0 00       		.byte	0
 6336 02e1 0A       		.uleb128 0xa
 6337 02e2 5D0A0000 		.4byte	.LASF93
 6338 02e6 01       		.byte	0x1
 6339 02e7 0A       		.uleb128 0xa
 6340 02e8 F2010000 		.4byte	.LASF94
 6341 02ec 02       		.byte	0x2
 6342 02ed 0A       		.uleb128 0xa
 6343 02ee 50010000 		.4byte	.LASF95
 6344 02f2 03       		.byte	0x3
 6345 02f3 0A       		.uleb128 0xa
 6346 02f4 04010000 		.4byte	.LASF96
 6347 02f8 04       		.byte	0x4
 6348 02f9 0A       		.uleb128 0xa
 6349 02fa 36000000 		.4byte	.LASF97
 6350 02fe 05       		.byte	0x5
 6351 02ff 0A       		.uleb128 0xa
 6352 0300 1A070000 		.4byte	.LASF98
 6353 0304 06       		.byte	0x6
 6354 0305 0A       		.uleb128 0xa
 6355 0306 7D0D0000 		.4byte	.LASF99
 6356 030a 07       		.byte	0x7
 6357 030b 00       		.byte	0
 6358 030c 09       		.uleb128 0x9
 6359 030d A50B0000 		.4byte	.LASF100
 6360 0311 01       		.byte	0x1
 6361 0312 2C000000 		.4byte	0x2c
 6362 0316 06       		.byte	0x6
 6363 0317 DD       		.byte	0xdd
 6364 0318 29030000 		.4byte	0x329
 6365 031c 0A       		.uleb128 0xa
 6366 031d B4050000 		.4byte	.LASF101
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 155


 6367 0321 00       		.byte	0
 6368 0322 0A       		.uleb128 0xa
 6369 0323 6C070000 		.4byte	.LASF102
 6370 0327 01       		.byte	0x1
 6371 0328 00       		.byte	0
 6372 0329 09       		.uleb128 0x9
 6373 032a E00E0000 		.4byte	.LASF103
 6374 032e 01       		.byte	0x1
 6375 032f 2C000000 		.4byte	0x2c
 6376 0333 06       		.byte	0x6
 6377 0334 E5       		.byte	0xe5
 6378 0335 76030000 		.4byte	0x376
 6379 0339 0A       		.uleb128 0xa
 6380 033a 73070000 		.4byte	.LASF104
 6381 033e 00       		.byte	0
 6382 033f 0A       		.uleb128 0xa
 6383 0340 7B100000 		.4byte	.LASF105
 6384 0344 01       		.byte	0x1
 6385 0345 0A       		.uleb128 0xa
 6386 0346 26090000 		.4byte	.LASF106
 6387 034a 02       		.byte	0x2
 6388 034b 0A       		.uleb128 0xa
 6389 034c F40A0000 		.4byte	.LASF107
 6390 0350 03       		.byte	0x3
 6391 0351 0A       		.uleb128 0xa
 6392 0352 130A0000 		.4byte	.LASF108
 6393 0356 04       		.byte	0x4
 6394 0357 0A       		.uleb128 0xa
 6395 0358 050C0000 		.4byte	.LASF109
 6396 035c 05       		.byte	0x5
 6397 035d 0A       		.uleb128 0xa
 6398 035e 5F0B0000 		.4byte	.LASF110
 6399 0362 06       		.byte	0x6
 6400 0363 0A       		.uleb128 0xa
 6401 0364 C70A0000 		.4byte	.LASF111
 6402 0368 07       		.byte	0x7
 6403 0369 0A       		.uleb128 0xa
 6404 036a 89050000 		.4byte	.LASF112
 6405 036e 08       		.byte	0x8
 6406 036f 0A       		.uleb128 0xa
 6407 0370 CF060000 		.4byte	.LASF113
 6408 0374 09       		.byte	0x9
 6409 0375 00       		.byte	0
 6410 0376 0B       		.uleb128 0xb
 6411 0377 BD080000 		.4byte	.LASF116
 6412 037b 10       		.byte	0x10
 6413 037c 07       		.byte	0x7
 6414 037d F8       		.byte	0xf8
 6415 037e B3030000 		.4byte	0x3b3
 6416 0382 0C       		.uleb128 0xc
 6417 0383 706F7300 		.ascii	"pos\000"
 6418 0387 07       		.byte	0x7
 6419 0388 F9       		.byte	0xf9
 6420 0389 C7000000 		.4byte	0xc7
 6421 038d 00       		.byte	0
 6422 038e 0D       		.uleb128 0xd
 6423 038f 9B070000 		.4byte	.LASF114
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 156


 6424 0393 07       		.byte	0x7
 6425 0394 FA       		.byte	0xfa
 6426 0395 C7000000 		.4byte	0xc7
 6427 0399 04       		.byte	0x4
 6428 039a 0C       		.uleb128 0xc
 6429 039b 70776D00 		.ascii	"pwm\000"
 6430 039f 07       		.byte	0x7
 6431 03a0 FB       		.byte	0xfb
 6432 03a1 C7000000 		.4byte	0xc7
 6433 03a5 08       		.byte	0x8
 6434 03a6 0D       		.uleb128 0xd
 6435 03a7 240C0000 		.4byte	.LASF115
 6436 03ab 07       		.byte	0x7
 6437 03ac FC       		.byte	0xfc
 6438 03ad 97000000 		.4byte	0x97
 6439 03b1 0C       		.byte	0xc
 6440 03b2 00       		.byte	0
 6441 03b3 0E       		.uleb128 0xe
 6442 03b4 89040000 		.4byte	.LASF117
 6443 03b8 04       		.byte	0x4
 6444 03b9 07       		.byte	0x7
 6445 03ba 0E01     		.2byte	0x10e
 6446 03bc CE030000 		.4byte	0x3ce
 6447 03c0 0F       		.uleb128 0xf
 6448 03c1 2E040000 		.4byte	.LASF118
 6449 03c5 07       		.byte	0x7
 6450 03c6 0F01     		.2byte	0x10f
 6451 03c8 D3000000 		.4byte	0xd3
 6452 03cc 00       		.byte	0
 6453 03cd 00       		.byte	0
 6454 03ce 0E       		.uleb128 0xe
 6455 03cf 79000000 		.4byte	.LASF119
 6456 03d3 86       		.byte	0x86
 6457 03d4 07       		.byte	0x7
 6458 03d5 1601     		.2byte	0x116
 6459 03d7 10040000 		.4byte	0x410
 6460 03db 0F       		.uleb128 0xf
 6461 03dc 56050000 		.4byte	.LASF120
 6462 03e0 07       		.byte	0x7
 6463 03e1 1701     		.2byte	0x117
 6464 03e3 10040000 		.4byte	0x410
 6465 03e7 00       		.byte	0
 6466 03e8 0F       		.uleb128 0xf
 6467 03e9 100C0000 		.4byte	.LASF121
 6468 03ed 07       		.byte	0x7
 6469 03ee 1801     		.2byte	0x118
 6470 03f0 BB000000 		.4byte	0xbb
 6471 03f4 80       		.byte	0x80
 6472 03f5 10       		.uleb128 0x10
 6473 03f6 696E6400 		.ascii	"ind\000"
 6474 03fa 07       		.byte	0x7
 6475 03fb 1901     		.2byte	0x119
 6476 03fd BB000000 		.4byte	0xbb
 6477 0401 82       		.byte	0x82
 6478 0402 0F       		.uleb128 0xf
 6479 0403 C3010000 		.4byte	.LASF122
 6480 0407 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 157


 6481 0408 1A01     		.2byte	0x11a
 6482 040a 97000000 		.4byte	0x97
 6483 040e 84       		.byte	0x84
 6484 040f 00       		.byte	0
 6485 0410 11       		.uleb128 0x11
 6486 0411 97000000 		.4byte	0x97
 6487 0415 20040000 		.4byte	0x420
 6488 0419 12       		.uleb128 0x12
 6489 041a 00010000 		.4byte	0x100
 6490 041e 7F       		.byte	0x7f
 6491 041f 00       		.byte	0
 6492 0420 0E       		.uleb128 0xe
 6493 0421 FD040000 		.4byte	.LASF123
 6494 0425 10       		.byte	0x10
 6495 0426 07       		.byte	0x7
 6496 0427 2801     		.2byte	0x128
 6497 0429 54040000 		.4byte	0x454
 6498 042d 10       		.uleb128 0x10
 6499 042e 696400   		.ascii	"id\000"
 6500 0431 07       		.byte	0x7
 6501 0432 2901     		.2byte	0x129
 6502 0434 97000000 		.4byte	0x97
 6503 0438 00       		.byte	0
 6504 0439 0F       		.uleb128 0xf
 6505 043a 600F0000 		.4byte	.LASF124
 6506 043e 07       		.byte	0x7
 6507 043f 2A01     		.2byte	0x12a
 6508 0441 97000000 		.4byte	0x97
 6509 0445 01       		.byte	0x1
 6510 0446 0F       		.uleb128 0xf
 6511 0447 63020000 		.4byte	.LASF125
 6512 044b 07       		.byte	0x7
 6513 044c 2B01     		.2byte	0x12b
 6514 044e 54040000 		.4byte	0x454
 6515 0452 02       		.byte	0x2
 6516 0453 00       		.byte	0
 6517 0454 11       		.uleb128 0x11
 6518 0455 97000000 		.4byte	0x97
 6519 0459 64040000 		.4byte	0x464
 6520 045d 12       		.uleb128 0x12
 6521 045e 00010000 		.4byte	0x100
 6522 0462 0D       		.byte	0xd
 6523 0463 00       		.byte	0
 6524 0464 0E       		.uleb128 0xe
 6525 0465 08090000 		.4byte	.LASF126
 6526 0469 10       		.byte	0x10
 6527 046a 07       		.byte	0x7
 6528 046b 3201     		.2byte	0x132
 6529 046d B3040000 		.4byte	0x4b3
 6530 0471 0F       		.uleb128 0xf
 6531 0472 D9000000 		.4byte	.LASF127
 6532 0476 07       		.byte	0x7
 6533 0477 3401     		.2byte	0x134
 6534 0479 C7000000 		.4byte	0xc7
 6535 047d 00       		.byte	0
 6536 047e 0F       		.uleb128 0xf
 6537 047f C4040000 		.4byte	.LASF128
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 158


 6538 0483 07       		.byte	0x7
 6539 0484 3501     		.2byte	0x135
 6540 0486 C7000000 		.4byte	0xc7
 6541 048a 04       		.byte	0x4
 6542 048b 0F       		.uleb128 0xf
 6543 048c A0070000 		.4byte	.LASF129
 6544 0490 07       		.byte	0x7
 6545 0491 3601     		.2byte	0x136
 6546 0493 97000000 		.4byte	0x97
 6547 0497 08       		.byte	0x8
 6548 0498 10       		.uleb128 0x10
 6549 0499 72657300 		.ascii	"res\000"
 6550 049d 07       		.byte	0x7
 6551 049e 3701     		.2byte	0x137
 6552 04a0 97000000 		.4byte	0x97
 6553 04a4 09       		.byte	0x9
 6554 04a5 0F       		.uleb128 0xf
 6555 04a6 63020000 		.4byte	.LASF125
 6556 04aa 07       		.byte	0x7
 6557 04ab 3801     		.2byte	0x138
 6558 04ad B3040000 		.4byte	0x4b3
 6559 04b1 0A       		.byte	0xa
 6560 04b2 00       		.byte	0
 6561 04b3 11       		.uleb128 0x11
 6562 04b4 97000000 		.4byte	0x97
 6563 04b8 C3040000 		.4byte	0x4c3
 6564 04bc 12       		.uleb128 0x12
 6565 04bd 00010000 		.4byte	0x100
 6566 04c1 05       		.byte	0x5
 6567 04c2 00       		.byte	0
 6568 04c3 0E       		.uleb128 0xe
 6569 04c4 A3010000 		.4byte	.LASF130
 6570 04c8 10       		.byte	0x10
 6571 04c9 07       		.byte	0x7
 6572 04ca 4001     		.2byte	0x140
 6573 04cc 12050000 		.4byte	0x512
 6574 04d0 0F       		.uleb128 0xf
 6575 04d1 FF0A0000 		.4byte	.LASF131
 6576 04d5 07       		.byte	0x7
 6577 04d6 4101     		.2byte	0x141
 6578 04d8 12050000 		.4byte	0x512
 6579 04dc 00       		.byte	0
 6580 04dd 0F       		.uleb128 0xf
 6581 04de 22100000 		.4byte	.LASF132
 6582 04e2 07       		.byte	0x7
 6583 04e3 4201     		.2byte	0x142
 6584 04e5 22050000 		.4byte	0x522
 6585 04e9 04       		.byte	0x4
 6586 04ea 0F       		.uleb128 0xf
 6587 04eb E7040000 		.4byte	.LASF133
 6588 04ef 07       		.byte	0x7
 6589 04f0 4301     		.2byte	0x143
 6590 04f2 32050000 		.4byte	0x532
 6591 04f6 0C       		.byte	0xc
 6592 04f7 0F       		.uleb128 0xf
 6593 04f8 74030000 		.4byte	.LASF134
 6594 04fc 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 159


 6595 04fd 4401     		.2byte	0x144
 6596 04ff 97000000 		.4byte	0x97
 6597 0503 0E       		.byte	0xe
 6598 0504 0F       		.uleb128 0xf
 6599 0505 63020000 		.4byte	.LASF125
 6600 0509 07       		.byte	0x7
 6601 050a 4501     		.2byte	0x145
 6602 050c 42050000 		.4byte	0x542
 6603 0510 0F       		.byte	0xf
 6604 0511 00       		.byte	0
 6605 0512 11       		.uleb128 0x11
 6606 0513 A3000000 		.4byte	0xa3
 6607 0517 22050000 		.4byte	0x522
 6608 051b 12       		.uleb128 0x12
 6609 051c 00010000 		.4byte	0x100
 6610 0520 01       		.byte	0x1
 6611 0521 00       		.byte	0
 6612 0522 11       		.uleb128 0x11
 6613 0523 AF000000 		.4byte	0xaf
 6614 0527 32050000 		.4byte	0x532
 6615 052b 12       		.uleb128 0x12
 6616 052c 00010000 		.4byte	0x100
 6617 0530 01       		.byte	0x1
 6618 0531 00       		.byte	0
 6619 0532 11       		.uleb128 0x11
 6620 0533 97000000 		.4byte	0x97
 6621 0537 42050000 		.4byte	0x542
 6622 053b 12       		.uleb128 0x12
 6623 053c 00010000 		.4byte	0x100
 6624 0540 01       		.byte	0x1
 6625 0541 00       		.byte	0
 6626 0542 11       		.uleb128 0x11
 6627 0543 97000000 		.4byte	0x97
 6628 0547 52050000 		.4byte	0x552
 6629 054b 12       		.uleb128 0x12
 6630 054c 00010000 		.4byte	0x100
 6631 0550 00       		.byte	0
 6632 0551 00       		.byte	0
 6633 0552 0E       		.uleb128 0xe
 6634 0553 37010000 		.4byte	.LASF135
 6635 0557 10       		.byte	0x10
 6636 0558 07       		.byte	0x7
 6637 0559 4C01     		.2byte	0x14c
 6638 055b 87050000 		.4byte	0x587
 6639 055f 0F       		.uleb128 0xf
 6640 0560 46030000 		.4byte	.LASF136
 6641 0564 07       		.byte	0x7
 6642 0565 4D01     		.2byte	0x14d
 6643 0567 97000000 		.4byte	0x97
 6644 056b 00       		.byte	0
 6645 056c 0F       		.uleb128 0xf
 6646 056d 63070000 		.4byte	.LASF137
 6647 0571 07       		.byte	0x7
 6648 0572 4E01     		.2byte	0x14e
 6649 0574 97000000 		.4byte	0x97
 6650 0578 01       		.byte	0x1
 6651 0579 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 160


 6652 057a 63020000 		.4byte	.LASF125
 6653 057e 07       		.byte	0x7
 6654 057f 4F01     		.2byte	0x14f
 6655 0581 54040000 		.4byte	0x454
 6656 0585 02       		.byte	0x2
 6657 0586 00       		.byte	0
 6658 0587 0E       		.uleb128 0xe
 6659 0588 6B0B0000 		.4byte	.LASF138
 6660 058c 10       		.byte	0x10
 6661 058d 07       		.byte	0x7
 6662 058e 5601     		.2byte	0x156
 6663 0590 E3050000 		.4byte	0x5e3
 6664 0594 0F       		.uleb128 0xf
 6665 0595 D90F0000 		.4byte	.LASF139
 6666 0599 07       		.byte	0x7
 6667 059a 5701     		.2byte	0x157
 6668 059c C7000000 		.4byte	0xc7
 6669 05a0 00       		.byte	0
 6670 05a1 0F       		.uleb128 0xf
 6671 05a2 D8050000 		.4byte	.LASF140
 6672 05a6 07       		.byte	0x7
 6673 05a7 5801     		.2byte	0x158
 6674 05a9 D3000000 		.4byte	0xd3
 6675 05ad 04       		.byte	0x4
 6676 05ae 0F       		.uleb128 0xf
 6677 05af 850C0000 		.4byte	.LASF141
 6678 05b3 07       		.byte	0x7
 6679 05b4 5901     		.2byte	0x159
 6680 05b6 D3000000 		.4byte	0xd3
 6681 05ba 08       		.byte	0x8
 6682 05bb 0F       		.uleb128 0xf
 6683 05bc FC070000 		.4byte	.LASF142
 6684 05c0 07       		.byte	0x7
 6685 05c1 5A01     		.2byte	0x15a
 6686 05c3 97000000 		.4byte	0x97
 6687 05c7 0C       		.byte	0xc
 6688 05c8 0F       		.uleb128 0xf
 6689 05c9 EC0D0000 		.4byte	.LASF143
 6690 05cd 07       		.byte	0x7
 6691 05ce 5B01     		.2byte	0x15b
 6692 05d0 97000000 		.4byte	0x97
 6693 05d4 0D       		.byte	0xd
 6694 05d5 0F       		.uleb128 0xf
 6695 05d6 63020000 		.4byte	.LASF125
 6696 05da 07       		.byte	0x7
 6697 05db 5C01     		.2byte	0x15c
 6698 05dd 32050000 		.4byte	0x532
 6699 05e1 0E       		.byte	0xe
 6700 05e2 00       		.byte	0
 6701 05e3 0E       		.uleb128 0xe
 6702 05e4 EE0F0000 		.4byte	.LASF144
 6703 05e8 60       		.byte	0x60
 6704 05e9 07       		.byte	0x7
 6705 05ea 6601     		.2byte	0x166
 6706 05ec 4A060000 		.4byte	0x64a
 6707 05f0 0F       		.uleb128 0xf
 6708 05f1 1F0A0000 		.4byte	.LASF145
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 161


 6709 05f5 07       		.byte	0x7
 6710 05f6 6701     		.2byte	0x167
 6711 05f8 97000000 		.4byte	0x97
 6712 05fc 00       		.byte	0
 6713 05fd 0F       		.uleb128 0xf
 6714 05fe 63020000 		.4byte	.LASF125
 6715 0602 07       		.byte	0x7
 6716 0603 6801     		.2byte	0x168
 6717 0605 4A060000 		.4byte	0x64a
 6718 0609 01       		.byte	0x1
 6719 060a 10       		.uleb128 0x10
 6720 060b 64657600 		.ascii	"dev\000"
 6721 060f 07       		.byte	0x7
 6722 0610 6901     		.2byte	0x169
 6723 0612 20040000 		.4byte	0x420
 6724 0616 10       		.byte	0x10
 6725 0617 0F       		.uleb128 0xf
 6726 0618 31090000 		.4byte	.LASF146
 6727 061c 07       		.byte	0x7
 6728 061d 6A01     		.2byte	0x16a
 6729 061f 64040000 		.4byte	0x464
 6730 0623 20       		.byte	0x20
 6731 0624 10       		.uleb128 0x10
 6732 0625 656D6700 		.ascii	"emg\000"
 6733 0629 07       		.byte	0x7
 6734 062a 6B01     		.2byte	0x16b
 6735 062c C3040000 		.4byte	0x4c3
 6736 0630 30       		.byte	0x30
 6737 0631 10       		.uleb128 0x10
 6738 0632 4D5300   		.ascii	"MS\000"
 6739 0635 07       		.byte	0x7
 6740 0636 6C01     		.2byte	0x16c
 6741 0638 52050000 		.4byte	0x552
 6742 063c 40       		.byte	0x40
 6743 063d 10       		.uleb128 0x10
 6744 063e 464200   		.ascii	"FB\000"
 6745 0641 07       		.byte	0x7
 6746 0642 6D01     		.2byte	0x16d
 6747 0644 87050000 		.4byte	0x587
 6748 0648 50       		.byte	0x50
 6749 0649 00       		.byte	0
 6750 064a 11       		.uleb128 0x11
 6751 064b 97000000 		.4byte	0x97
 6752 064f 5A060000 		.4byte	0x65a
 6753 0653 12       		.uleb128 0x12
 6754 0654 00010000 		.4byte	0x100
 6755 0658 0E       		.byte	0xe
 6756 0659 00       		.byte	0
 6757 065a 0E       		.uleb128 0xe
 6758 065b 59030000 		.4byte	.LASF147
 6759 065f 06       		.byte	0x6
 6760 0660 07       		.byte	0x7
 6761 0661 8A01     		.2byte	0x18a
 6762 0663 9C060000 		.4byte	0x69c
 6763 0667 0F       		.uleb128 0xf
 6764 0668 0A060000 		.4byte	.LASF148
 6765 066c 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 162


 6766 066d 8B01     		.2byte	0x18b
 6767 066f 97000000 		.4byte	0x97
 6768 0673 00       		.byte	0
 6769 0674 0F       		.uleb128 0xf
 6770 0675 18010000 		.4byte	.LASF149
 6771 0679 07       		.byte	0x7
 6772 067a 8C01     		.2byte	0x18c
 6773 067c 97000000 		.4byte	0x97
 6774 0680 01       		.byte	0x1
 6775 0681 0F       		.uleb128 0xf
 6776 0682 7C050000 		.4byte	.LASF150
 6777 0686 07       		.byte	0x7
 6778 0687 8D01     		.2byte	0x18d
 6779 0689 BB000000 		.4byte	0xbb
 6780 068d 02       		.byte	0x2
 6781 068e 0F       		.uleb128 0xf
 6782 068f 6A090000 		.4byte	.LASF151
 6783 0693 07       		.byte	0x7
 6784 0694 8E01     		.2byte	0x18e
 6785 0696 BB000000 		.4byte	0xbb
 6786 069a 04       		.byte	0x4
 6787 069b 00       		.byte	0
 6788 069c 0E       		.uleb128 0xe
 6789 069d 16020000 		.4byte	.LASF152
 6790 06a1 2C       		.byte	0x2c
 6791 06a2 07       		.byte	0x7
 6792 06a3 0002     		.2byte	0x200
 6793 06a5 D1060000 		.4byte	0x6d1
 6794 06a9 0F       		.uleb128 0xf
 6795 06aa D20D0000 		.4byte	.LASF153
 6796 06ae 07       		.byte	0x7
 6797 06af 0102     		.2byte	0x201
 6798 06b1 97000000 		.4byte	0x97
 6799 06b5 00       		.byte	0
 6800 06b6 0F       		.uleb128 0xf
 6801 06b7 CC0D0000 		.4byte	.LASF154
 6802 06bb 07       		.byte	0x7
 6803 06bc 0202     		.2byte	0x202
 6804 06be 97000000 		.4byte	0x97
 6805 06c2 01       		.byte	0x1
 6806 06c3 0F       		.uleb128 0xf
 6807 06c4 EA000000 		.4byte	.LASF155
 6808 06c8 07       		.byte	0x7
 6809 06c9 0302     		.2byte	0x203
 6810 06cb D1060000 		.4byte	0x6d1
 6811 06cf 04       		.byte	0x4
 6812 06d0 00       		.byte	0
 6813 06d1 11       		.uleb128 0x11
 6814 06d2 0D010000 		.4byte	0x10d
 6815 06d6 E1060000 		.4byte	0x6e1
 6816 06da 12       		.uleb128 0x12
 6817 06db 00010000 		.4byte	0x100
 6818 06df 09       		.byte	0x9
 6819 06e0 00       		.byte	0
 6820 06e1 0E       		.uleb128 0xe
 6821 06e2 7F040000 		.4byte	.LASF156
 6822 06e6 10       		.byte	0x10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 163


 6823 06e7 07       		.byte	0x7
 6824 06e8 0602     		.2byte	0x206
 6825 06ea 4A070000 		.4byte	0x74a
 6826 06ee 0F       		.uleb128 0xf
 6827 06ef 3E0D0000 		.4byte	.LASF157
 6828 06f3 07       		.byte	0x7
 6829 06f4 0702     		.2byte	0x207
 6830 06f6 4A070000 		.4byte	0x74a
 6831 06fa 00       		.byte	0
 6832 06fb 0F       		.uleb128 0xf
 6833 06fc F80F0000 		.4byte	.LASF158
 6834 0700 07       		.byte	0x7
 6835 0701 0802     		.2byte	0x208
 6836 0703 97000000 		.4byte	0x97
 6837 0707 04       		.byte	0x4
 6838 0708 0F       		.uleb128 0xf
 6839 0709 70020000 		.4byte	.LASF159
 6840 070d 07       		.byte	0x7
 6841 070e 0902     		.2byte	0x209
 6842 0710 97000000 		.4byte	0x97
 6843 0714 05       		.byte	0x5
 6844 0715 0F       		.uleb128 0xf
 6845 0716 46010000 		.4byte	.LASF160
 6846 071a 07       		.byte	0x7
 6847 071b 0A02     		.2byte	0x20a
 6848 071d 0D010000 		.4byte	0x10d
 6849 0721 08       		.byte	0x8
 6850 0722 0F       		.uleb128 0xf
 6851 0723 EB070000 		.4byte	.LASF161
 6852 0727 07       		.byte	0x7
 6853 0728 0B02     		.2byte	0x20b
 6854 072a 97000000 		.4byte	0x97
 6855 072e 0C       		.byte	0xc
 6856 072f 0F       		.uleb128 0xf
 6857 0730 920A0000 		.4byte	.LASF162
 6858 0734 07       		.byte	0x7
 6859 0735 0C02     		.2byte	0x20c
 6860 0737 97000000 		.4byte	0x97
 6861 073b 0D       		.byte	0xd
 6862 073c 0F       		.uleb128 0xf
 6863 073d F40B0000 		.4byte	.LASF163
 6864 0741 07       		.byte	0x7
 6865 0742 0D02     		.2byte	0x20d
 6866 0744 97000000 		.4byte	0x97
 6867 0748 0E       		.byte	0xe
 6868 0749 00       		.byte	0
 6869 074a 07       		.uleb128 0x7
 6870 074b 04       		.byte	0x4
 6871 074c 97000000 		.4byte	0x97
 6872 0750 0E       		.uleb128 0xe
 6873 0751 B6090000 		.4byte	.LASF164
 6874 0755 0C       		.byte	0xc
 6875 0756 07       		.byte	0x7
 6876 0757 2202     		.2byte	0x222
 6877 0759 78070000 		.4byte	0x778
 6878 075d 10       		.uleb128 0x10
 6879 075e 656D6700 		.ascii	"emg\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 164


 6880 0762 07       		.byte	0x7
 6881 0763 2302     		.2byte	0x223
 6882 0765 78070000 		.4byte	0x778
 6883 0769 00       		.byte	0
 6884 076a 0F       		.uleb128 0xf
 6885 076b 2E040000 		.4byte	.LASF118
 6886 076f 07       		.byte	0x7
 6887 0770 2402     		.2byte	0x224
 6888 0772 D3000000 		.4byte	0xd3
 6889 0776 08       		.byte	0x8
 6890 0777 00       		.byte	0
 6891 0778 11       		.uleb128 0x11
 6892 0779 C7000000 		.4byte	0xc7
 6893 077d 88070000 		.4byte	0x788
 6894 0781 12       		.uleb128 0x12
 6895 0782 00010000 		.4byte	0x100
 6896 0786 01       		.byte	0x1
 6897 0787 00       		.byte	0
 6898 0788 13       		.uleb128 0x13
 6899 0789 360D0000 		.4byte	.LASF295
 6900 078d 02       		.byte	0x2
 6901 078e 1403     		.2byte	0x314
 6902 0790 8C000000 		.4byte	0x8c
 6903 0794 03       		.byte	0x3
 6904 0795 B2070000 		.4byte	0x7b2
 6905 0799 14       		.uleb128 0x14
 6906 079a 28040000 		.4byte	.LASF216
 6907 079e 02       		.byte	0x2
 6908 079f 1403     		.2byte	0x314
 6909 07a1 8C000000 		.4byte	0x8c
 6910 07a5 15       		.uleb128 0x15
 6911 07a6 BC010000 		.4byte	.LASF296
 6912 07aa 02       		.byte	0x2
 6913 07ab 1603     		.2byte	0x316
 6914 07ad 8C000000 		.4byte	0x8c
 6915 07b1 00       		.byte	0
 6916 07b2 16       		.uleb128 0x16
 6917 07b3 2F0E0000 		.4byte	.LASF165
 6918 07b7 01       		.byte	0x1
 6919 07b8 3D       		.byte	0x3d
 6920 07b9 00000000 		.4byte	.LFB64
 6921 07bd 68060000 		.4byte	.LFE64-.LFB64
 6922 07c1 01       		.uleb128 0x1
 6923 07c2 9C       		.byte	0x9c
 6924 07c3 BB080000 		.4byte	0x8bb
 6925 07c7 17       		.uleb128 0x17
 6926 07c8 82050000 		.4byte	.LASF167
 6927 07cc 01       		.byte	0x1
 6928 07cd 3F       		.byte	0x3f
 6929 07ce 97000000 		.4byte	0x97
 6930 07d2 02       		.uleb128 0x2
 6931 07d3 91       		.byte	0x91
 6932 07d4 77       		.sleb128 -9
 6933 07d5 18       		.uleb128 0x18
 6934 07d6 88070000 		.4byte	0x788
 6935 07da 9A040000 		.4byte	.LBB12
 6936 07de 08000000 		.4byte	.LBE12-.LBB12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 165


 6937 07e2 01       		.byte	0x1
 6938 07e3 A2       		.byte	0xa2
 6939 07e4 03080000 		.4byte	0x803
 6940 07e8 19       		.uleb128 0x19
 6941 07e9 99070000 		.4byte	0x799
 6942 07ed 02       		.uleb128 0x2
 6943 07ee 91       		.byte	0x91
 6944 07ef 60       		.sleb128 -32
 6945 07f0 1A       		.uleb128 0x1a
 6946 07f1 9A040000 		.4byte	.LBB13
 6947 07f5 08000000 		.4byte	.LBE13-.LBB13
 6948 07f9 1B       		.uleb128 0x1b
 6949 07fa A5070000 		.4byte	0x7a5
 6950 07fe 02       		.uleb128 0x2
 6951 07ff 91       		.byte	0x91
 6952 0800 5C       		.sleb128 -36
 6953 0801 00       		.byte	0
 6954 0802 00       		.byte	0
 6955 0803 18       		.uleb128 0x18
 6956 0804 88070000 		.4byte	0x788
 6957 0808 B8040000 		.4byte	.LBB14
 6958 080c 08000000 		.4byte	.LBE14-.LBB14
 6959 0810 01       		.byte	0x1
 6960 0811 AE       		.byte	0xae
 6961 0812 31080000 		.4byte	0x831
 6962 0816 19       		.uleb128 0x19
 6963 0817 99070000 		.4byte	0x799
 6964 081b 02       		.uleb128 0x2
 6965 081c 91       		.byte	0x91
 6966 081d 70       		.sleb128 -16
 6967 081e 1A       		.uleb128 0x1a
 6968 081f B8040000 		.4byte	.LBB15
 6969 0823 08000000 		.4byte	.LBE15-.LBB15
 6970 0827 1B       		.uleb128 0x1b
 6971 0828 A5070000 		.4byte	0x7a5
 6972 082c 02       		.uleb128 0x2
 6973 082d 91       		.byte	0x91
 6974 082e 58       		.sleb128 -40
 6975 082f 00       		.byte	0
 6976 0830 00       		.byte	0
 6977 0831 1C       		.uleb128 0x1c
 6978 0832 88070000 		.4byte	0x788
 6979 0836 F4050000 		.4byte	.LBB16
 6980 083a 08000000 		.4byte	.LBE16-.LBB16
 6981 083e 01       		.byte	0x1
 6982 083f 0A01     		.2byte	0x10a
 6983 0841 60080000 		.4byte	0x860
 6984 0845 19       		.uleb128 0x19
 6985 0846 99070000 		.4byte	0x799
 6986 084a 02       		.uleb128 0x2
 6987 084b 91       		.byte	0x91
 6988 084c 6C       		.sleb128 -20
 6989 084d 1A       		.uleb128 0x1a
 6990 084e F4050000 		.4byte	.LBB17
 6991 0852 08000000 		.4byte	.LBE17-.LBB17
 6992 0856 1B       		.uleb128 0x1b
 6993 0857 A5070000 		.4byte	0x7a5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 166


 6994 085b 02       		.uleb128 0x2
 6995 085c 91       		.byte	0x91
 6996 085d 54       		.sleb128 -44
 6997 085e 00       		.byte	0
 6998 085f 00       		.byte	0
 6999 0860 1C       		.uleb128 0x1c
 7000 0861 88070000 		.4byte	0x788
 7001 0865 24060000 		.4byte	.LBB18
 7002 0869 08000000 		.4byte	.LBE18-.LBB18
 7003 086d 01       		.byte	0x1
 7004 086e 2801     		.2byte	0x128
 7005 0870 8F080000 		.4byte	0x88f
 7006 0874 19       		.uleb128 0x19
 7007 0875 99070000 		.4byte	0x799
 7008 0879 02       		.uleb128 0x2
 7009 087a 91       		.byte	0x91
 7010 087b 68       		.sleb128 -24
 7011 087c 1A       		.uleb128 0x1a
 7012 087d 24060000 		.4byte	.LBB19
 7013 0881 08000000 		.4byte	.LBE19-.LBB19
 7014 0885 1B       		.uleb128 0x1b
 7015 0886 A5070000 		.4byte	0x7a5
 7016 088a 02       		.uleb128 0x2
 7017 088b 91       		.byte	0x91
 7018 088c 50       		.sleb128 -48
 7019 088d 00       		.byte	0
 7020 088e 00       		.byte	0
 7021 088f 1D       		.uleb128 0x1d
 7022 0890 88070000 		.4byte	0x788
 7023 0894 3C060000 		.4byte	.LBB20
 7024 0898 08000000 		.4byte	.LBE20-.LBB20
 7025 089c 01       		.byte	0x1
 7026 089d 2E01     		.2byte	0x12e
 7027 089f 19       		.uleb128 0x19
 7028 08a0 99070000 		.4byte	0x799
 7029 08a4 02       		.uleb128 0x2
 7030 08a5 91       		.byte	0x91
 7031 08a6 64       		.sleb128 -28
 7032 08a7 1A       		.uleb128 0x1a
 7033 08a8 3C060000 		.4byte	.LBB21
 7034 08ac 08000000 		.4byte	.LBE21-.LBB21
 7035 08b0 1B       		.uleb128 0x1b
 7036 08b1 A5070000 		.4byte	0x7a5
 7037 08b5 02       		.uleb128 0x2
 7038 08b6 91       		.byte	0x91
 7039 08b7 4C       		.sleb128 -52
 7040 08b8 00       		.byte	0
 7041 08b9 00       		.byte	0
 7042 08ba 00       		.byte	0
 7043 08bb 1E       		.uleb128 0x1e
 7044 08bc 00000000 		.4byte	.LASF166
 7045 08c0 01       		.byte	0x1
 7046 08c1 3C01     		.2byte	0x13c
 7047 08c3 00000000 		.4byte	.LFB65
 7048 08c7 22000000 		.4byte	.LFE65-.LFB65
 7049 08cb 01       		.uleb128 0x1
 7050 08cc 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 167


 7051 08cd E2080000 		.4byte	0x8e2
 7052 08d1 1F       		.uleb128 0x1f
 7053 08d2 94040000 		.4byte	.LASF168
 7054 08d6 01       		.byte	0x1
 7055 08d7 3D01     		.2byte	0x13d
 7056 08d9 E2080000 		.4byte	0x8e2
 7057 08dd 03       		.uleb128 0x3
 7058 08de 91       		.byte	0x91
 7059 08df 9C74     		.sleb128 -1508
 7060 08e1 00       		.byte	0
 7061 08e2 11       		.uleb128 0x11
 7062 08e3 E1000000 		.4byte	0xe1
 7063 08e7 F3080000 		.4byte	0x8f3
 7064 08eb 20       		.uleb128 0x20
 7065 08ec 00010000 		.4byte	0x100
 7066 08f0 DB05     		.2byte	0x5db
 7067 08f2 00       		.byte	0
 7068 08f3 21       		.uleb128 0x21
 7069 08f4 0D070000 		.4byte	.LASF210
 7070 08f8 01       		.byte	0x1
 7071 08f9 4601     		.2byte	0x146
 7072 08fb 97000000 		.4byte	0x97
 7073 08ff 00000000 		.4byte	.LFB66
 7074 0903 5E000000 		.4byte	.LFE66-.LFB66
 7075 0907 01       		.uleb128 0x1
 7076 0908 9C       		.byte	0x9c
 7077 0909 2C090000 		.4byte	0x92c
 7078 090d 22       		.uleb128 0x22
 7079 090e E5000000 		.4byte	.LASF170
 7080 0912 01       		.byte	0x1
 7081 0913 4601     		.2byte	0x146
 7082 0915 97000000 		.4byte	0x97
 7083 0919 02       		.uleb128 0x2
 7084 091a 91       		.byte	0x91
 7085 091b 6F       		.sleb128 -17
 7086 091c 23       		.uleb128 0x23
 7087 091d 736F6400 		.ascii	"sod\000"
 7088 0921 01       		.byte	0x1
 7089 0922 4701     		.2byte	0x147
 7090 0924 97000000 		.4byte	0x97
 7091 0928 02       		.uleb128 0x2
 7092 0929 91       		.byte	0x91
 7093 092a 77       		.sleb128 -9
 7094 092b 00       		.byte	0
 7095 092c 1E       		.uleb128 0x1e
 7096 092d 04100000 		.4byte	.LASF169
 7097 0931 01       		.byte	0x1
 7098 0932 5701     		.2byte	0x157
 7099 0934 00000000 		.4byte	.LFB67
 7100 0938 64010000 		.4byte	.LFE67-.LFB67
 7101 093c 01       		.uleb128 0x1
 7102 093d 9C       		.byte	0x9c
 7103 093e 75090000 		.4byte	0x975
 7104 0942 22       		.uleb128 0x22
 7105 0943 5A0D0000 		.4byte	.LASF171
 7106 0947 01       		.byte	0x1
 7107 0948 5701     		.2byte	0x157
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 168


 7108 094a A3000000 		.4byte	0xa3
 7109 094e 04       		.uleb128 0x4
 7110 094f 91       		.byte	0x91
 7111 0950 B6C47E   		.sleb128 -24010
 7112 0953 1F       		.uleb128 0x1f
 7113 0954 94040000 		.4byte	.LASF168
 7114 0958 01       		.byte	0x1
 7115 0959 5801     		.2byte	0x158
 7116 095b 75090000 		.4byte	0x975
 7117 095f 03       		.uleb128 0x3
 7118 0960 91       		.byte	0x91
 7119 0961 D860     		.sleb128 -4008
 7120 0963 1F       		.uleb128 0x1f
 7121 0964 57070000 		.4byte	.LASF172
 7122 0968 01       		.byte	0x1
 7123 0969 5901     		.2byte	0x159
 7124 096b 86090000 		.4byte	0x986
 7125 096f 04       		.uleb128 0x4
 7126 0970 91       		.byte	0x91
 7127 0971 B8C47E   		.sleb128 -24008
 7128 0974 00       		.byte	0
 7129 0975 11       		.uleb128 0x11
 7130 0976 E1000000 		.4byte	0xe1
 7131 097a 86090000 		.4byte	0x986
 7132 097e 20       		.uleb128 0x20
 7133 097f 00010000 		.4byte	0x100
 7134 0983 9F0F     		.2byte	0xf9f
 7135 0985 00       		.byte	0
 7136 0986 11       		.uleb128 0x11
 7137 0987 E1000000 		.4byte	0xe1
 7138 098b 97090000 		.4byte	0x997
 7139 098f 20       		.uleb128 0x20
 7140 0990 00010000 		.4byte	0x100
 7141 0994 1F4E     		.2byte	0x4e1f
 7142 0996 00       		.byte	0
 7143 0997 1E       		.uleb128 0x1e
 7144 0998 72010000 		.4byte	.LASF173
 7145 099c 01       		.byte	0x1
 7146 099d 8901     		.2byte	0x189
 7147 099f 00000000 		.4byte	.LFB68
 7148 09a3 BC070000 		.4byte	.LFE68-.LFB68
 7149 09a7 01       		.uleb128 0x1
 7150 09a8 9C       		.byte	0x9c
 7151 09a9 E70A0000 		.4byte	0xae7
 7152 09ad 22       		.uleb128 0x22
 7153 09ae D20B0000 		.4byte	.LASF174
 7154 09b2 01       		.byte	0x1
 7155 09b3 8901     		.2byte	0x189
 7156 09b5 97000000 		.4byte	0x97
 7157 09b9 03       		.uleb128 0x3
 7158 09ba 91       		.byte	0x91
 7159 09bb 8F7B     		.sleb128 -625
 7160 09bd 22       		.uleb128 0x22
 7161 09be DC0C0000 		.4byte	.LASF175
 7162 09c2 01       		.byte	0x1
 7163 09c3 8901     		.2byte	0x189
 7164 09c5 97000000 		.4byte	0x97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 169


 7165 09c9 03       		.uleb128 0x3
 7166 09ca 91       		.byte	0x91
 7167 09cb 8E7B     		.sleb128 -626
 7168 09cd 22       		.uleb128 0x22
 7169 09ce 380F0000 		.4byte	.LASF176
 7170 09d2 01       		.byte	0x1
 7171 09d3 8901     		.2byte	0x189
 7172 09d5 E70A0000 		.4byte	0xae7
 7173 09d9 03       		.uleb128 0x3
 7174 09da 91       		.byte	0x91
 7175 09db 887B     		.sleb128 -632
 7176 09dd 22       		.uleb128 0x22
 7177 09de 530A0000 		.4byte	.LASF177
 7178 09e2 01       		.byte	0x1
 7179 09e3 8901     		.2byte	0x189
 7180 09e5 F20A0000 		.4byte	0xaf2
 7181 09e9 03       		.uleb128 0x3
 7182 09ea 91       		.byte	0x91
 7183 09eb 847B     		.sleb128 -636
 7184 09ed 22       		.uleb128 0x22
 7185 09ee 170C0000 		.4byte	.LASF178
 7186 09f2 01       		.byte	0x1
 7187 09f3 8901     		.2byte	0x189
 7188 09f5 97000000 		.4byte	0x97
 7189 09f9 02       		.uleb128 0x2
 7190 09fa 91       		.byte	0x91
 7191 09fb 00       		.sleb128 0
 7192 09fc 23       		.uleb128 0x23
 7193 09fd 69647800 		.ascii	"idx\000"
 7194 0a01 01       		.byte	0x1
 7195 0a02 8B01     		.2byte	0x18b
 7196 0a04 97000000 		.4byte	0x97
 7197 0a08 02       		.uleb128 0x2
 7198 0a09 91       		.byte	0x91
 7199 0a0a 5F       		.sleb128 -33
 7200 0a0b 1F       		.uleb128 0x1f
 7201 0a0c C2090000 		.4byte	.LASF179
 7202 0a10 01       		.byte	0x1
 7203 0a11 8C01     		.2byte	0x18c
 7204 0a13 4A070000 		.4byte	0x74a
 7205 0a17 02       		.uleb128 0x2
 7206 0a18 91       		.byte	0x91
 7207 0a19 50       		.sleb128 -48
 7208 0a1a 1F       		.uleb128 0x1f
 7209 0a1b 12000000 		.4byte	.LASF180
 7210 0a1f 01       		.byte	0x1
 7211 0a20 8D01     		.2byte	0x18d
 7212 0a22 97000000 		.4byte	0x97
 7213 0a26 02       		.uleb128 0x2
 7214 0a27 91       		.byte	0x91
 7215 0a28 5E       		.sleb128 -34
 7216 0a29 1F       		.uleb128 0x1f
 7217 0a2a 9D100000 		.4byte	.LASF181
 7218 0a2e 01       		.byte	0x1
 7219 0a2f 8E01     		.2byte	0x18e
 7220 0a31 FD0A0000 		.4byte	0xafd
 7221 0a35 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 170


 7222 0a36 91       		.byte	0x91
 7223 0a37 C87D     		.sleb128 -312
 7224 0a39 1F       		.uleb128 0x1f
 7225 0a3a C9010000 		.4byte	.LASF182
 7226 0a3e 01       		.byte	0x1
 7227 0a3f 8F01     		.2byte	0x18f
 7228 0a41 FD0A0000 		.4byte	0xafd
 7229 0a45 03       		.uleb128 0x3
 7230 0a46 91       		.byte	0x91
 7231 0a47 CC7B     		.sleb128 -564
 7232 0a49 1F       		.uleb128 0x1f
 7233 0a4a 560F0000 		.4byte	.LASF183
 7234 0a4e 01       		.byte	0x1
 7235 0a4f 9201     		.2byte	0x192
 7236 0a51 C7000000 		.4byte	0xc7
 7237 0a55 03       		.uleb128 0x3
 7238 0a56 91       		.byte	0x91
 7239 0a57 C87B     		.sleb128 -568
 7240 0a59 23       		.uleb128 0x23
 7241 0a5a 6900     		.ascii	"i\000"
 7242 0a5c 01       		.byte	0x1
 7243 0a5d 9301     		.2byte	0x193
 7244 0a5f 97000000 		.4byte	0x97
 7245 0a63 02       		.uleb128 0x2
 7246 0a64 91       		.byte	0x91
 7247 0a65 5D       		.sleb128 -35
 7248 0a66 23       		.uleb128 0x23
 7249 0a67 6A00     		.ascii	"j\000"
 7250 0a69 01       		.byte	0x1
 7251 0a6a 9301     		.2byte	0x193
 7252 0a6c 97000000 		.4byte	0x97
 7253 0a70 02       		.uleb128 0x2
 7254 0a71 91       		.byte	0x91
 7255 0a72 5C       		.sleb128 -36
 7256 0a73 1F       		.uleb128 0x1f
 7257 0a74 B0090000 		.4byte	.LASF184
 7258 0a78 01       		.byte	0x1
 7259 0a79 9401     		.2byte	0x194
 7260 0a7b 97000000 		.4byte	0x97
 7261 0a7f 02       		.uleb128 0x2
 7262 0a80 91       		.byte	0x91
 7263 0a81 5B       		.sleb128 -37
 7264 0a82 1F       		.uleb128 0x1f
 7265 0a83 660C0000 		.4byte	.LASF185
 7266 0a87 01       		.byte	0x1
 7267 0a88 9501     		.2byte	0x195
 7268 0a8a 0D0B0000 		.4byte	0xb0d
 7269 0a8e 03       		.uleb128 0x3
 7270 0a8f 91       		.byte	0x91
 7271 0a90 947B     		.sleb128 -620
 7272 0a92 1F       		.uleb128 0x1f
 7273 0a93 7D070000 		.4byte	.LASF186
 7274 0a97 01       		.byte	0x1
 7275 0a98 9A01     		.2byte	0x19a
 7276 0a9a A3000000 		.4byte	0xa3
 7277 0a9e 02       		.uleb128 0x2
 7278 0a9f 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 171


 7279 0aa0 4E       		.sleb128 -50
 7280 0aa1 1F       		.uleb128 0x1f
 7281 0aa2 F1040000 		.4byte	.LASF187
 7282 0aa6 01       		.byte	0x1
 7283 0aa7 9B01     		.2byte	0x19b
 7284 0aa9 1D0B0000 		.4byte	0xb1d
 7285 0aad 03       		.uleb128 0x3
 7286 0aae 91       		.byte	0x91
 7287 0aaf 44       		.sleb128 -60
 7288 0ab0 06       		.byte	0x6
 7289 0ab1 24       		.uleb128 0x24
 7290 0ab2 E4000000 		.4byte	.LBB22
 7291 0ab6 2C000000 		.4byte	.LBE22-.LBB22
 7292 0aba CD0A0000 		.4byte	0xacd
 7293 0abe 23       		.uleb128 0x23
 7294 0abf 696900   		.ascii	"ii\000"
 7295 0ac2 01       		.byte	0x1
 7296 0ac3 9C01     		.2byte	0x19c
 7297 0ac5 73000000 		.4byte	0x73
 7298 0ac9 02       		.uleb128 0x2
 7299 0aca 91       		.byte	0x91
 7300 0acb 54       		.sleb128 -44
 7301 0acc 00       		.byte	0
 7302 0acd 1A       		.uleb128 0x1a
 7303 0ace 2C010000 		.4byte	.LBB23
 7304 0ad2 80040000 		.4byte	.LBE23-.LBB23
 7305 0ad6 23       		.uleb128 0x23
 7306 0ad7 736F6400 		.ascii	"sod\000"
 7307 0adb 01       		.byte	0x1
 7308 0adc A301     		.2byte	0x1a3
 7309 0ade 97000000 		.4byte	0x97
 7310 0ae2 02       		.uleb128 0x2
 7311 0ae3 91       		.byte	0x91
 7312 0ae4 43       		.sleb128 -61
 7313 0ae5 00       		.byte	0
 7314 0ae6 00       		.byte	0
 7315 0ae7 07       		.uleb128 0x7
 7316 0ae8 04       		.byte	0x4
 7317 0ae9 ED0A0000 		.4byte	0xaed
 7318 0aed 08       		.uleb128 0x8
 7319 0aee E1060000 		.4byte	0x6e1
 7320 0af2 07       		.uleb128 0x7
 7321 0af3 04       		.byte	0x4
 7322 0af4 F80A0000 		.4byte	0xaf8
 7323 0af8 08       		.uleb128 0x8
 7324 0af9 9C060000 		.4byte	0x69c
 7325 0afd 11       		.uleb128 0x11
 7326 0afe E1000000 		.4byte	0xe1
 7327 0b02 0D0B0000 		.4byte	0xb0d
 7328 0b06 12       		.uleb128 0x12
 7329 0b07 00010000 		.4byte	0x100
 7330 0b0b F9       		.byte	0xf9
 7331 0b0c 00       		.byte	0
 7332 0b0d 11       		.uleb128 0x11
 7333 0b0e E1000000 		.4byte	0xe1
 7334 0b12 1D0B0000 		.4byte	0xb1d
 7335 0b16 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 172


 7336 0b17 00010000 		.4byte	0x100
 7337 0b1b 31       		.byte	0x31
 7338 0b1c 00       		.byte	0
 7339 0b1d 11       		.uleb128 0x11
 7340 0b1e 97000000 		.4byte	0x97
 7341 0b22 300B0000 		.4byte	0xb30
 7342 0b26 25       		.uleb128 0x25
 7343 0b27 00010000 		.4byte	0x100
 7344 0b2b 03       		.uleb128 0x3
 7345 0b2c 91       		.byte	0x91
 7346 0b2d 48       		.sleb128 -56
 7347 0b2e 06       		.byte	0x6
 7348 0b2f 00       		.byte	0
 7349 0b30 1E       		.uleb128 0x1e
 7350 0b31 A70C0000 		.4byte	.LASF188
 7351 0b35 01       		.byte	0x1
 7352 0b36 0E02     		.2byte	0x20e
 7353 0b38 00000000 		.4byte	.LFB69
 7354 0b3c 84060000 		.4byte	.LFE69-.LFB69
 7355 0b40 01       		.uleb128 0x1
 7356 0b41 9C       		.byte	0x9c
 7357 0b42 160C0000 		.4byte	0xc16
 7358 0b46 22       		.uleb128 0x22
 7359 0b47 D2050000 		.4byte	.LASF189
 7360 0b4b 01       		.byte	0x1
 7361 0b4c 0E02     		.2byte	0x20e
 7362 0b4e A3000000 		.4byte	0xa3
 7363 0b52 03       		.uleb128 0x3
 7364 0b53 91       		.byte	0x91
 7365 0b54 AE7C     		.sleb128 -466
 7366 0b56 22       		.uleb128 0x22
 7367 0b57 170C0000 		.4byte	.LASF178
 7368 0b5b 01       		.byte	0x1
 7369 0b5c 0E02     		.2byte	0x20e
 7370 0b5e 97000000 		.4byte	0x97
 7371 0b62 03       		.uleb128 0x3
 7372 0b63 91       		.byte	0x91
 7373 0b64 AD7C     		.sleb128 -467
 7374 0b66 23       		.uleb128 0x23
 7375 0b67 6900     		.ascii	"i\000"
 7376 0b69 01       		.byte	0x1
 7377 0b6a 0F02     		.2byte	0x20f
 7378 0b6c 97000000 		.4byte	0x97
 7379 0b70 02       		.uleb128 0x2
 7380 0b71 91       		.byte	0x91
 7381 0b72 6F       		.sleb128 -17
 7382 0b73 23       		.uleb128 0x23
 7383 0b74 6A00     		.ascii	"j\000"
 7384 0b76 01       		.byte	0x1
 7385 0b77 0F02     		.2byte	0x20f
 7386 0b79 97000000 		.4byte	0x97
 7387 0b7d 02       		.uleb128 0x2
 7388 0b7e 91       		.byte	0x91
 7389 0b7f 6E       		.sleb128 -18
 7390 0b80 1F       		.uleb128 0x1f
 7391 0b81 68010000 		.4byte	.LASF190
 7392 0b85 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 173


 7393 0b86 1102     		.2byte	0x211
 7394 0b88 97000000 		.4byte	0x97
 7395 0b8c 02       		.uleb128 0x2
 7396 0b8d 91       		.byte	0x91
 7397 0b8e 65       		.sleb128 -27
 7398 0b8f 1F       		.uleb128 0x1f
 7399 0b90 7A020000 		.4byte	.LASF191
 7400 0b94 01       		.byte	0x1
 7401 0b95 1402     		.2byte	0x214
 7402 0b97 160C0000 		.4byte	0xc16
 7403 0b9b 02       		.uleb128 0x2
 7404 0b9c 91       		.byte	0x91
 7405 0b9d 68       		.sleb128 -24
 7406 0b9e 1F       		.uleb128 0x1f
 7407 0b9f 31050000 		.4byte	.LASF43
 7408 0ba3 01       		.byte	0x1
 7409 0ba4 1A02     		.2byte	0x21a
 7410 0ba6 9C060000 		.4byte	0x69c
 7411 0baa 03       		.uleb128 0x3
 7412 0bab 91       		.byte	0x91
 7413 0bac B87F     		.sleb128 -72
 7414 0bae 1F       		.uleb128 0x1f
 7415 0baf 530A0000 		.4byte	.LASF177
 7416 0bb3 01       		.byte	0x1
 7417 0bb4 1D02     		.2byte	0x21d
 7418 0bb6 2C0C0000 		.4byte	0xc2c
 7419 0bba 03       		.uleb128 0x3
 7420 0bbb 91       		.byte	0x91
 7421 0bbc B47E     		.sleb128 -204
 7422 0bbe 1F       		.uleb128 0x1f
 7423 0bbf CF000000 		.4byte	.LASF192
 7424 0bc3 01       		.byte	0x1
 7425 0bc4 2502     		.2byte	0x225
 7426 0bc6 97000000 		.4byte	0x97
 7427 0bca 02       		.uleb128 0x2
 7428 0bcb 91       		.byte	0x91
 7429 0bcc 67       		.sleb128 -25
 7430 0bcd 1F       		.uleb128 0x1f
 7431 0bce 9F0F0000 		.4byte	.LASF193
 7432 0bd2 01       		.byte	0x1
 7433 0bd3 2702     		.2byte	0x227
 7434 0bd5 E1060000 		.4byte	0x6e1
 7435 0bd9 03       		.uleb128 0x3
 7436 0bda 91       		.byte	0x91
 7437 0bdb A47E     		.sleb128 -220
 7438 0bdd 1F       		.uleb128 0x1f
 7439 0bde 380F0000 		.4byte	.LASF176
 7440 0be2 01       		.byte	0x1
 7441 0be3 2902     		.2byte	0x229
 7442 0be5 410C0000 		.4byte	0xc41
 7443 0be9 03       		.uleb128 0x3
 7444 0bea 91       		.byte	0x91
 7445 0beb B47C     		.sleb128 -460
 7446 0bed 1F       		.uleb128 0x1f
 7447 0bee AF0E0000 		.4byte	.LASF194
 7448 0bf2 01       		.byte	0x1
 7449 0bf3 3C02     		.2byte	0x23c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 174


 7450 0bf5 97000000 		.4byte	0x97
 7451 0bf9 02       		.uleb128 0x2
 7452 0bfa 91       		.byte	0x91
 7453 0bfb 66       		.sleb128 -26
 7454 0bfc 1A       		.uleb128 0x1a
 7455 0bfd EA040000 		.4byte	.LBB24
 7456 0c01 7E010000 		.4byte	.LBE24-.LBB24
 7457 0c05 23       		.uleb128 0x23
 7458 0c06 736F6400 		.ascii	"sod\000"
 7459 0c0a 01       		.byte	0x1
 7460 0c0b 4702     		.2byte	0x247
 7461 0c0d 97000000 		.4byte	0x97
 7462 0c11 02       		.uleb128 0x2
 7463 0c12 91       		.byte	0x91
 7464 0c13 64       		.sleb128 -28
 7465 0c14 00       		.byte	0
 7466 0c15 00       		.byte	0
 7467 0c16 07       		.uleb128 0x7
 7468 0c17 04       		.byte	0x4
 7469 0c18 E3050000 		.4byte	0x5e3
 7470 0c1c 11       		.uleb128 0x11
 7471 0c1d F80A0000 		.4byte	0xaf8
 7472 0c21 2C0C0000 		.4byte	0xc2c
 7473 0c25 12       		.uleb128 0x12
 7474 0c26 00010000 		.4byte	0x100
 7475 0c2a 02       		.byte	0x2
 7476 0c2b 00       		.byte	0
 7477 0c2c 08       		.uleb128 0x8
 7478 0c2d 1C0C0000 		.4byte	0xc1c
 7479 0c31 11       		.uleb128 0x11
 7480 0c32 ED0A0000 		.4byte	0xaed
 7481 0c36 410C0000 		.4byte	0xc41
 7482 0c3a 12       		.uleb128 0x12
 7483 0c3b 00010000 		.4byte	0x100
 7484 0c3f 0E       		.byte	0xe
 7485 0c40 00       		.byte	0
 7486 0c41 08       		.uleb128 0x8
 7487 0c42 310C0000 		.4byte	0xc31
 7488 0c46 1E       		.uleb128 0x1e
 7489 0c47 06030000 		.4byte	.LASF195
 7490 0c4b 01       		.byte	0x1
 7491 0c4c 6802     		.2byte	0x268
 7492 0c4e 00000000 		.4byte	.LFB70
 7493 0c52 34010000 		.4byte	.LFE70-.LFB70
 7494 0c56 01       		.uleb128 0x1
 7495 0c57 9C       		.byte	0x9c
 7496 0c58 A40C0000 		.4byte	0xca4
 7497 0c5c 22       		.uleb128 0x22
 7498 0c5d D2050000 		.4byte	.LASF189
 7499 0c61 01       		.byte	0x1
 7500 0c62 6802     		.2byte	0x268
 7501 0c64 A3000000 		.4byte	0xa3
 7502 0c68 02       		.uleb128 0x2
 7503 0c69 91       		.byte	0x91
 7504 0c6a 6E       		.sleb128 -18
 7505 0c6b 22       		.uleb128 0x22
 7506 0c6c 380F0000 		.4byte	.LASF176
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 175


 7507 0c70 01       		.byte	0x1
 7508 0c71 6802     		.2byte	0x268
 7509 0c73 E70A0000 		.4byte	0xae7
 7510 0c77 02       		.uleb128 0x2
 7511 0c78 91       		.byte	0x91
 7512 0c79 68       		.sleb128 -24
 7513 0c7a 23       		.uleb128 0x23
 7514 0c7b 736F6400 		.ascii	"sod\000"
 7515 0c7f 01       		.byte	0x1
 7516 0c80 6902     		.2byte	0x269
 7517 0c82 97000000 		.4byte	0x97
 7518 0c86 02       		.uleb128 0x2
 7519 0c87 91       		.byte	0x91
 7520 0c88 75       		.sleb128 -11
 7521 0c89 23       		.uleb128 0x23
 7522 0c8a 6900     		.ascii	"i\000"
 7523 0c8c 01       		.byte	0x1
 7524 0c8d 6B02     		.2byte	0x26b
 7525 0c8f 97000000 		.4byte	0x97
 7526 0c93 02       		.uleb128 0x2
 7527 0c94 91       		.byte	0x91
 7528 0c95 77       		.sleb128 -9
 7529 0c96 23       		.uleb128 0x23
 7530 0c97 6A00     		.ascii	"j\000"
 7531 0c99 01       		.byte	0x1
 7532 0c9a 6B02     		.2byte	0x26b
 7533 0c9c 97000000 		.4byte	0x97
 7534 0ca0 02       		.uleb128 0x2
 7535 0ca1 91       		.byte	0x91
 7536 0ca2 76       		.sleb128 -10
 7537 0ca3 00       		.byte	0
 7538 0ca4 26       		.uleb128 0x26
 7539 0ca5 D8070000 		.4byte	.LASF196
 7540 0ca9 01       		.byte	0x1
 7541 0caa 8F02     		.2byte	0x28f
 7542 0cac 00000000 		.4byte	.LFB71
 7543 0cb0 14000000 		.4byte	.LFE71-.LFB71
 7544 0cb4 01       		.uleb128 0x1
 7545 0cb5 9C       		.byte	0x9c
 7546 0cb6 CA0C0000 		.4byte	0xcca
 7547 0cba 22       		.uleb128 0x22
 7548 0cbb D2050000 		.4byte	.LASF189
 7549 0cbf 01       		.byte	0x1
 7550 0cc0 8F02     		.2byte	0x28f
 7551 0cc2 A3000000 		.4byte	0xa3
 7552 0cc6 02       		.uleb128 0x2
 7553 0cc7 91       		.byte	0x91
 7554 0cc8 76       		.sleb128 -10
 7555 0cc9 00       		.byte	0
 7556 0cca 27       		.uleb128 0x27
 7557 0ccb 5A020000 		.4byte	.LASF226
 7558 0ccf 01       		.byte	0x1
 7559 0cd0 9702     		.2byte	0x297
 7560 0cd2 00000000 		.4byte	.LFB72
 7561 0cd6 0C000000 		.4byte	.LFE72-.LFB72
 7562 0cda 01       		.uleb128 0x1
 7563 0cdb 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 176


 7564 0cdc 26       		.uleb128 0x26
 7565 0cdd BA000000 		.4byte	.LASF197
 7566 0ce1 01       		.byte	0x1
 7567 0ce2 9F02     		.2byte	0x29f
 7568 0ce4 00000000 		.4byte	.LFB73
 7569 0ce8 12000000 		.4byte	.LFE73-.LFB73
 7570 0cec 01       		.uleb128 0x1
 7571 0ced 9C       		.byte	0x9c
 7572 0cee 020D0000 		.4byte	0xd02
 7573 0cf2 22       		.uleb128 0x22
 7574 0cf3 C60B0000 		.4byte	.LASF198
 7575 0cf7 01       		.byte	0x1
 7576 0cf8 9F02     		.2byte	0x29f
 7577 0cfa 07010000 		.4byte	0x107
 7578 0cfe 02       		.uleb128 0x2
 7579 0cff 91       		.byte	0x91
 7580 0d00 74       		.sleb128 -12
 7581 0d01 00       		.byte	0
 7582 0d02 26       		.uleb128 0x26
 7583 0d03 FC0C0000 		.4byte	.LASF199
 7584 0d07 01       		.byte	0x1
 7585 0d08 A702     		.2byte	0x2a7
 7586 0d0a 00000000 		.4byte	.LFB74
 7587 0d0e 12000000 		.4byte	.LFE74-.LFB74
 7588 0d12 01       		.uleb128 0x1
 7589 0d13 9C       		.byte	0x9c
 7590 0d14 280D0000 		.4byte	0xd28
 7591 0d18 22       		.uleb128 0x22
 7592 0d19 C60B0000 		.4byte	.LASF198
 7593 0d1d 01       		.byte	0x1
 7594 0d1e A702     		.2byte	0x2a7
 7595 0d20 07010000 		.4byte	0x107
 7596 0d24 02       		.uleb128 0x2
 7597 0d25 91       		.byte	0x91
 7598 0d26 74       		.sleb128 -12
 7599 0d27 00       		.byte	0
 7600 0d28 26       		.uleb128 0x26
 7601 0d29 E30A0000 		.4byte	.LASF200
 7602 0d2d 01       		.byte	0x1
 7603 0d2e AF02     		.2byte	0x2af
 7604 0d30 00000000 		.4byte	.LFB75
 7605 0d34 12000000 		.4byte	.LFE75-.LFB75
 7606 0d38 01       		.uleb128 0x1
 7607 0d39 9C       		.byte	0x9c
 7608 0d3a 4E0D0000 		.4byte	0xd4e
 7609 0d3e 22       		.uleb128 0x22
 7610 0d3f C60B0000 		.4byte	.LASF198
 7611 0d43 01       		.byte	0x1
 7612 0d44 AF02     		.2byte	0x2af
 7613 0d46 07010000 		.4byte	0x107
 7614 0d4a 02       		.uleb128 0x2
 7615 0d4b 91       		.byte	0x91
 7616 0d4c 74       		.sleb128 -12
 7617 0d4d 00       		.byte	0
 7618 0d4e 26       		.uleb128 0x26
 7619 0d4f E60C0000 		.4byte	.LASF201
 7620 0d53 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 177


 7621 0d54 B702     		.2byte	0x2b7
 7622 0d56 00000000 		.4byte	.LFB76
 7623 0d5a 12000000 		.4byte	.LFE76-.LFB76
 7624 0d5e 01       		.uleb128 0x1
 7625 0d5f 9C       		.byte	0x9c
 7626 0d60 740D0000 		.4byte	0xd74
 7627 0d64 22       		.uleb128 0x22
 7628 0d65 C60B0000 		.4byte	.LASF198
 7629 0d69 01       		.byte	0x1
 7630 0d6a B702     		.2byte	0x2b7
 7631 0d6c 07010000 		.4byte	0x107
 7632 0d70 02       		.uleb128 0x2
 7633 0d71 91       		.byte	0x91
 7634 0d72 74       		.sleb128 -12
 7635 0d73 00       		.byte	0
 7636 0d74 26       		.uleb128 0x26
 7637 0d75 F6090000 		.4byte	.LASF202
 7638 0d79 01       		.byte	0x1
 7639 0d7a BF02     		.2byte	0x2bf
 7640 0d7c 00000000 		.4byte	.LFB77
 7641 0d80 12000000 		.4byte	.LFE77-.LFB77
 7642 0d84 01       		.uleb128 0x1
 7643 0d85 9C       		.byte	0x9c
 7644 0d86 9A0D0000 		.4byte	0xd9a
 7645 0d8a 22       		.uleb128 0x22
 7646 0d8b C60B0000 		.4byte	.LASF198
 7647 0d8f 01       		.byte	0x1
 7648 0d90 BF02     		.2byte	0x2bf
 7649 0d92 07010000 		.4byte	0x107
 7650 0d96 02       		.uleb128 0x2
 7651 0d97 91       		.byte	0x91
 7652 0d98 74       		.sleb128 -12
 7653 0d99 00       		.byte	0
 7654 0d9a 26       		.uleb128 0x26
 7655 0d9b 110D0000 		.4byte	.LASF203
 7656 0d9f 01       		.byte	0x1
 7657 0da0 C602     		.2byte	0x2c6
 7658 0da2 00000000 		.4byte	.LFB78
 7659 0da6 12000000 		.4byte	.LFE78-.LFB78
 7660 0daa 01       		.uleb128 0x1
 7661 0dab 9C       		.byte	0x9c
 7662 0dac C00D0000 		.4byte	0xdc0
 7663 0db0 22       		.uleb128 0x22
 7664 0db1 C60B0000 		.4byte	.LASF198
 7665 0db5 01       		.byte	0x1
 7666 0db6 C602     		.2byte	0x2c6
 7667 0db8 07010000 		.4byte	0x107
 7668 0dbc 02       		.uleb128 0x2
 7669 0dbd 91       		.byte	0x91
 7670 0dbe 74       		.sleb128 -12
 7671 0dbf 00       		.byte	0
 7672 0dc0 26       		.uleb128 0x26
 7673 0dc1 A1020000 		.4byte	.LASF204
 7674 0dc5 01       		.byte	0x1
 7675 0dc6 CE02     		.2byte	0x2ce
 7676 0dc8 00000000 		.4byte	.LFB79
 7677 0dcc 12000000 		.4byte	.LFE79-.LFB79
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 178


 7678 0dd0 01       		.uleb128 0x1
 7679 0dd1 9C       		.byte	0x9c
 7680 0dd2 E60D0000 		.4byte	0xde6
 7681 0dd6 22       		.uleb128 0x22
 7682 0dd7 C60B0000 		.4byte	.LASF198
 7683 0ddb 01       		.byte	0x1
 7684 0ddc CE02     		.2byte	0x2ce
 7685 0dde 07010000 		.4byte	0x107
 7686 0de2 02       		.uleb128 0x2
 7687 0de3 91       		.byte	0x91
 7688 0de4 74       		.sleb128 -12
 7689 0de5 00       		.byte	0
 7690 0de6 26       		.uleb128 0x26
 7691 0de7 85100000 		.4byte	.LASF205
 7692 0deb 01       		.byte	0x1
 7693 0dec D702     		.2byte	0x2d7
 7694 0dee 00000000 		.4byte	.LFB80
 7695 0df2 12000000 		.4byte	.LFE80-.LFB80
 7696 0df6 01       		.uleb128 0x1
 7697 0df7 9C       		.byte	0x9c
 7698 0df8 0C0E0000 		.4byte	0xe0c
 7699 0dfc 22       		.uleb128 0x22
 7700 0dfd C60B0000 		.4byte	.LASF198
 7701 0e01 01       		.byte	0x1
 7702 0e02 D702     		.2byte	0x2d7
 7703 0e04 07010000 		.4byte	0x107
 7704 0e08 02       		.uleb128 0x2
 7705 0e09 91       		.byte	0x91
 7706 0e0a 74       		.sleb128 -12
 7707 0e0b 00       		.byte	0
 7708 0e0c 1E       		.uleb128 0x1e
 7709 0e0d 960C0000 		.4byte	.LASF206
 7710 0e11 01       		.byte	0x1
 7711 0e12 DF02     		.2byte	0x2df
 7712 0e14 00000000 		.4byte	.LFB81
 7713 0e18 84000000 		.4byte	.LFE81-.LFB81
 7714 0e1c 01       		.uleb128 0x1
 7715 0e1d 9C       		.byte	0x9c
 7716 0e1e 5F0E0000 		.4byte	0xe5f
 7717 0e22 22       		.uleb128 0x22
 7718 0e23 F1040000 		.4byte	.LASF187
 7719 0e27 01       		.byte	0x1
 7720 0e28 DF02     		.2byte	0x2df
 7721 0e2a 4A070000 		.4byte	0x74a
 7722 0e2e 02       		.uleb128 0x2
 7723 0e2f 91       		.byte	0x91
 7724 0e30 6C       		.sleb128 -20
 7725 0e31 22       		.uleb128 0x22
 7726 0e32 7D070000 		.4byte	.LASF186
 7727 0e36 01       		.byte	0x1
 7728 0e37 DF02     		.2byte	0x2df
 7729 0e39 A3000000 		.4byte	0xa3
 7730 0e3d 02       		.uleb128 0x2
 7731 0e3e 91       		.byte	0x91
 7732 0e3f 6A       		.sleb128 -22
 7733 0e40 22       		.uleb128 0x22
 7734 0e41 2F0D0000 		.4byte	.LASF207
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 179


 7735 0e45 01       		.byte	0x1
 7736 0e46 DF02     		.2byte	0x2df
 7737 0e48 97000000 		.4byte	0x97
 7738 0e4c 02       		.uleb128 0x2
 7739 0e4d 91       		.byte	0x91
 7740 0e4e 69       		.sleb128 -23
 7741 0e4f 1F       		.uleb128 0x1f
 7742 0e50 D2050000 		.4byte	.LASF189
 7743 0e54 01       		.byte	0x1
 7744 0e55 E102     		.2byte	0x2e1
 7745 0e57 A3000000 		.4byte	0xa3
 7746 0e5b 02       		.uleb128 0x2
 7747 0e5c 91       		.byte	0x91
 7748 0e5d 76       		.sleb128 -10
 7749 0e5e 00       		.byte	0
 7750 0e5f 1E       		.uleb128 0x1e
 7751 0e60 07050000 		.4byte	.LASF208
 7752 0e64 01       		.byte	0x1
 7753 0e65 FB02     		.2byte	0x2fb
 7754 0e67 00000000 		.4byte	.LFB82
 7755 0e6b 88000000 		.4byte	.LFE82-.LFB82
 7756 0e6f 01       		.uleb128 0x1
 7757 0e70 9C       		.byte	0x9c
 7758 0e71 A30E0000 		.4byte	0xea3
 7759 0e75 22       		.uleb128 0x22
 7760 0e76 F1040000 		.4byte	.LASF187
 7761 0e7a 01       		.byte	0x1
 7762 0e7b FB02     		.2byte	0x2fb
 7763 0e7d 4A070000 		.4byte	0x74a
 7764 0e81 02       		.uleb128 0x2
 7765 0e82 91       		.byte	0x91
 7766 0e83 6C       		.sleb128 -20
 7767 0e84 22       		.uleb128 0x22
 7768 0e85 7D070000 		.4byte	.LASF186
 7769 0e89 01       		.byte	0x1
 7770 0e8a FB02     		.2byte	0x2fb
 7771 0e8c A3000000 		.4byte	0xa3
 7772 0e90 02       		.uleb128 0x2
 7773 0e91 91       		.byte	0x91
 7774 0e92 6A       		.sleb128 -22
 7775 0e93 1F       		.uleb128 0x1f
 7776 0e94 D2050000 		.4byte	.LASF189
 7777 0e98 01       		.byte	0x1
 7778 0e99 FD02     		.2byte	0x2fd
 7779 0e9b A3000000 		.4byte	0xa3
 7780 0e9f 02       		.uleb128 0x2
 7781 0ea0 91       		.byte	0x91
 7782 0ea1 76       		.sleb128 -10
 7783 0ea2 00       		.byte	0
 7784 0ea3 1E       		.uleb128 0x1e
 7785 0ea4 710A0000 		.4byte	.LASF209
 7786 0ea8 01       		.byte	0x1
 7787 0ea9 1803     		.2byte	0x318
 7788 0eab 00000000 		.4byte	.LFB83
 7789 0eaf A0000000 		.4byte	.LFE83-.LFB83
 7790 0eb3 01       		.uleb128 0x1
 7791 0eb4 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 180


 7792 0eb5 F60E0000 		.4byte	0xef6
 7793 0eb9 22       		.uleb128 0x22
 7794 0eba F1040000 		.4byte	.LASF187
 7795 0ebe 01       		.byte	0x1
 7796 0ebf 1803     		.2byte	0x318
 7797 0ec1 4A070000 		.4byte	0x74a
 7798 0ec5 02       		.uleb128 0x2
 7799 0ec6 91       		.byte	0x91
 7800 0ec7 74       		.sleb128 -12
 7801 0ec8 22       		.uleb128 0x22
 7802 0ec9 7D070000 		.4byte	.LASF186
 7803 0ecd 01       		.byte	0x1
 7804 0ece 1803     		.2byte	0x318
 7805 0ed0 A3000000 		.4byte	0xa3
 7806 0ed4 02       		.uleb128 0x2
 7807 0ed5 91       		.byte	0x91
 7808 0ed6 72       		.sleb128 -14
 7809 0ed7 28       		.uleb128 0x28
 7810 0ed8 696400   		.ascii	"id\000"
 7811 0edb 01       		.byte	0x1
 7812 0edc 1803     		.2byte	0x318
 7813 0ede 97000000 		.4byte	0x97
 7814 0ee2 02       		.uleb128 0x2
 7815 0ee3 91       		.byte	0x91
 7816 0ee4 71       		.sleb128 -15
 7817 0ee5 23       		.uleb128 0x23
 7818 0ee6 6900     		.ascii	"i\000"
 7819 0ee8 01       		.byte	0x1
 7820 0ee9 1A03     		.2byte	0x31a
 7821 0eeb A3000000 		.4byte	0xa3
 7822 0eef 05       		.uleb128 0x5
 7823 0ef0 03       		.byte	0x3
 7824 0ef1 00000000 		.4byte	i.10055
 7825 0ef5 00       		.byte	0
 7826 0ef6 21       		.uleb128 0x21
 7827 0ef7 B40F0000 		.4byte	.LASF211
 7828 0efb 01       		.byte	0x1
 7829 0efc 3603     		.2byte	0x336
 7830 0efe 97000000 		.4byte	0x97
 7831 0f02 00000000 		.4byte	.LFB84
 7832 0f06 3E000000 		.4byte	.LFE84-.LFB84
 7833 0f0a 01       		.uleb128 0x1
 7834 0f0b 9C       		.byte	0x9c
 7835 0f0c 4B0F0000 		.4byte	0xf4b
 7836 0f10 22       		.uleb128 0x22
 7837 0f11 CF090000 		.4byte	.LASF212
 7838 0f15 01       		.byte	0x1
 7839 0f16 3603     		.2byte	0x336
 7840 0f18 4A070000 		.4byte	0x74a
 7841 0f1c 02       		.uleb128 0x2
 7842 0f1d 91       		.byte	0x91
 7843 0f1e 6C       		.sleb128 -20
 7844 0f1f 22       		.uleb128 0x22
 7845 0f20 B8040000 		.4byte	.LASF213
 7846 0f24 01       		.byte	0x1
 7847 0f25 3603     		.2byte	0x336
 7848 0f27 97000000 		.4byte	0x97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 181


 7849 0f2b 02       		.uleb128 0x2
 7850 0f2c 91       		.byte	0x91
 7851 0f2d 6B       		.sleb128 -21
 7852 0f2e 23       		.uleb128 0x23
 7853 0f2f 6900     		.ascii	"i\000"
 7854 0f31 01       		.byte	0x1
 7855 0f32 3803     		.2byte	0x338
 7856 0f34 97000000 		.4byte	0x97
 7857 0f38 02       		.uleb128 0x2
 7858 0f39 91       		.byte	0x91
 7859 0f3a 77       		.sleb128 -9
 7860 0f3b 1F       		.uleb128 0x1f
 7861 0f3c 760B0000 		.4byte	.LASF214
 7862 0f40 01       		.byte	0x1
 7863 0f41 3903     		.2byte	0x339
 7864 0f43 97000000 		.4byte	0x97
 7865 0f47 02       		.uleb128 0x2
 7866 0f48 91       		.byte	0x91
 7867 0f49 76       		.sleb128 -10
 7868 0f4a 00       		.byte	0
 7869 0f4b 1E       		.uleb128 0x1e
 7870 0f4c 430F0000 		.4byte	.LASF215
 7871 0f50 01       		.byte	0x1
 7872 0f51 4603     		.2byte	0x346
 7873 0f53 00000000 		.4byte	.LFB85
 7874 0f57 2E000000 		.4byte	.LFE85-.LFB85
 7875 0f5b 01       		.uleb128 0x1
 7876 0f5c 9C       		.byte	0x9c
 7877 0f5d 8F0F0000 		.4byte	0xf8f
 7878 0f61 22       		.uleb128 0x22
 7879 0f62 28040000 		.4byte	.LASF216
 7880 0f66 01       		.byte	0x1
 7881 0f67 4603     		.2byte	0x346
 7882 0f69 97000000 		.4byte	0x97
 7883 0f6d 02       		.uleb128 0x2
 7884 0f6e 91       		.byte	0x91
 7885 0f6f 6F       		.sleb128 -17
 7886 0f70 1F       		.uleb128 0x1f
 7887 0f71 7D070000 		.4byte	.LASF186
 7888 0f75 01       		.byte	0x1
 7889 0f76 4703     		.2byte	0x347
 7890 0f78 73000000 		.4byte	0x73
 7891 0f7c 02       		.uleb128 0x2
 7892 0f7d 91       		.byte	0x91
 7893 0f7e 74       		.sleb128 -12
 7894 0f7f 1F       		.uleb128 0x1f
 7895 0f80 F1040000 		.4byte	.LASF187
 7896 0f84 01       		.byte	0x1
 7897 0f85 4803     		.2byte	0x348
 7898 0f87 32050000 		.4byte	0x532
 7899 0f8b 02       		.uleb128 0x2
 7900 0f8c 91       		.byte	0x91
 7901 0f8d 70       		.sleb128 -16
 7902 0f8e 00       		.byte	0
 7903 0f8f 29       		.uleb128 0x29
 7904 0f90 62030000 		.4byte	.LASF217
 7905 0f94 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 182


 7906 0f95 5503     		.2byte	0x355
 7907 0f97 97000000 		.4byte	0x97
 7908 0f9b 00000000 		.4byte	.LFB86
 7909 0f9f 90000000 		.4byte	.LFE86-.LFB86
 7910 0fa3 01       		.uleb128 0x1
 7911 0fa4 9C       		.byte	0x9c
 7912 0fa5 F30F0000 		.4byte	0xff3
 7913 0fa9 22       		.uleb128 0x22
 7914 0faa 2E070000 		.4byte	.LASF218
 7915 0fae 01       		.byte	0x1
 7916 0faf 5503     		.2byte	0x355
 7917 0fb1 73000000 		.4byte	0x73
 7918 0fb5 02       		.uleb128 0x2
 7919 0fb6 91       		.byte	0x91
 7920 0fb7 64       		.sleb128 -28
 7921 0fb8 23       		.uleb128 0x23
 7922 0fb9 6900     		.ascii	"i\000"
 7923 0fbb 01       		.byte	0x1
 7924 0fbc 5703     		.2byte	0x357
 7925 0fbe 73000000 		.4byte	0x73
 7926 0fc2 02       		.uleb128 0x2
 7927 0fc3 91       		.byte	0x91
 7928 0fc4 74       		.sleb128 -12
 7929 0fc5 1F       		.uleb128 0x1f
 7930 0fc6 81000000 		.4byte	.LASF219
 7931 0fca 01       		.byte	0x1
 7932 0fcb 5803     		.2byte	0x358
 7933 0fcd 97000000 		.4byte	0x97
 7934 0fd1 02       		.uleb128 0x2
 7935 0fd2 91       		.byte	0x91
 7936 0fd3 6B       		.sleb128 -21
 7937 0fd4 1F       		.uleb128 0x1f
 7938 0fd5 23050000 		.4byte	.LASF220
 7939 0fd9 01       		.byte	0x1
 7940 0fda 5903     		.2byte	0x359
 7941 0fdc 73000000 		.4byte	0x73
 7942 0fe0 02       		.uleb128 0x2
 7943 0fe1 91       		.byte	0x91
 7944 0fe2 6C       		.sleb128 -20
 7945 0fe3 1F       		.uleb128 0x1f
 7946 0fe4 6E040000 		.4byte	.LASF221
 7947 0fe8 01       		.byte	0x1
 7948 0fe9 5A03     		.2byte	0x35a
 7949 0feb 97000000 		.4byte	0x97
 7950 0fef 02       		.uleb128 0x2
 7951 0ff0 91       		.byte	0x91
 7952 0ff1 73       		.sleb128 -13
 7953 0ff2 00       		.byte	0
 7954 0ff3 1E       		.uleb128 0x1e
 7955 0ff4 4B0C0000 		.4byte	.LASF222
 7956 0ff8 01       		.byte	0x1
 7957 0ff9 7F03     		.2byte	0x37f
 7958 0ffb 00000000 		.4byte	.LFB87
 7959 0fff 60000000 		.4byte	.LFE87-.LFB87
 7960 1003 01       		.uleb128 0x1
 7961 1004 9C       		.byte	0x9c
 7962 1005 17100000 		.4byte	0x1017
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 183


 7963 1009 23       		.uleb128 0x23
 7964 100a 6900     		.ascii	"i\000"
 7965 100c 01       		.byte	0x1
 7966 100d 8103     		.2byte	0x381
 7967 100f A3000000 		.4byte	0xa3
 7968 1013 02       		.uleb128 0x2
 7969 1014 91       		.byte	0x91
 7970 1015 76       		.sleb128 -10
 7971 1016 00       		.byte	0
 7972 1017 29       		.uleb128 0x29
 7973 1018 BB0B0000 		.4byte	.LASF223
 7974 101c 01       		.byte	0x1
 7975 101d 9403     		.2byte	0x394
 7976 101f 97000000 		.4byte	0x97
 7977 1023 00000000 		.4byte	.LFB88
 7978 1027 58000000 		.4byte	.LFE88-.LFB88
 7979 102b 01       		.uleb128 0x1
 7980 102c 9C       		.byte	0x9c
 7981 102d 3F100000 		.4byte	0x103f
 7982 1031 23       		.uleb128 0x23
 7983 1032 6900     		.ascii	"i\000"
 7984 1034 01       		.byte	0x1
 7985 1035 9503     		.2byte	0x395
 7986 1037 A3000000 		.4byte	0xa3
 7987 103b 02       		.uleb128 0x2
 7988 103c 91       		.byte	0x91
 7989 103d 76       		.sleb128 -10
 7990 103e 00       		.byte	0
 7991 103f 2A       		.uleb128 0x2a
 7992 1040 29050000 		.4byte	.LASF297
 7993 1044 01       		.byte	0x1
 7994 1045 A703     		.2byte	0x3a7
 7995 1047 97000000 		.4byte	0x97
 7996 104b 00000000 		.4byte	.LFB89
 7997 104f D0000000 		.4byte	.LFE89-.LFB89
 7998 1053 01       		.uleb128 0x1
 7999 1054 9C       		.byte	0x9c
 8000 1055 2B       		.uleb128 0x2b
 8001 1056 B7070000 		.4byte	.LASF224
 8002 105a 01       		.byte	0x1
 8003 105b CF03     		.2byte	0x3cf
 8004 105d 00000000 		.4byte	.LFB90
 8005 1061 0C000000 		.4byte	.LFE90-.LFB90
 8006 1065 01       		.uleb128 0x1
 8007 1066 9C       		.byte	0x9c
 8008 1067 2B       		.uleb128 0x2b
 8009 1068 E7090000 		.4byte	.LASF225
 8010 106c 01       		.byte	0x1
 8011 106d D603     		.2byte	0x3d6
 8012 106f 00000000 		.4byte	.LFB91
 8013 1073 0C000000 		.4byte	.LFE91-.LFB91
 8014 1077 01       		.uleb128 0x1
 8015 1078 9C       		.byte	0x9c
 8016 1079 27       		.uleb128 0x27
 8017 107a 2F0B0000 		.4byte	.LASF227
 8018 107e 01       		.byte	0x1
 8019 107f DD03     		.2byte	0x3dd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 184


 8020 1081 00000000 		.4byte	.LFB92
 8021 1085 0C000000 		.4byte	.LFE92-.LFB92
 8022 1089 01       		.uleb128 0x1
 8023 108a 9C       		.byte	0x9c
 8024 108b 2B       		.uleb128 0x2b
 8025 108c D0040000 		.4byte	.LASF228
 8026 1090 01       		.byte	0x1
 8027 1091 E403     		.2byte	0x3e4
 8028 1093 00000000 		.4byte	.LFB93
 8029 1097 0C000000 		.4byte	.LFE93-.LFB93
 8030 109b 01       		.uleb128 0x1
 8031 109c 9C       		.byte	0x9c
 8032 109d 27       		.uleb128 0x27
 8033 109e 67050000 		.4byte	.LASF229
 8034 10a2 01       		.byte	0x1
 8035 10a3 EF03     		.2byte	0x3ef
 8036 10a5 00000000 		.4byte	.LFB94
 8037 10a9 0C000000 		.4byte	.LFE94-.LFB94
 8038 10ad 01       		.uleb128 0x1
 8039 10ae 9C       		.byte	0x9c
 8040 10af 27       		.uleb128 0x27
 8041 10b0 380C0000 		.4byte	.LASF230
 8042 10b4 01       		.byte	0x1
 8043 10b5 F403     		.2byte	0x3f4
 8044 10b7 00000000 		.4byte	.LFB95
 8045 10bb 0C000000 		.4byte	.LFE95-.LFB95
 8046 10bf 01       		.uleb128 0x1
 8047 10c0 9C       		.byte	0x9c
 8048 10c1 27       		.uleb128 0x27
 8049 10c2 81010000 		.4byte	.LASF231
 8050 10c6 01       		.byte	0x1
 8051 10c7 F803     		.2byte	0x3f8
 8052 10c9 00000000 		.4byte	.LFB96
 8053 10cd 0C000000 		.4byte	.LFE96-.LFB96
 8054 10d1 01       		.uleb128 0x1
 8055 10d2 9C       		.byte	0x9c
 8056 10d3 27       		.uleb128 0x27
 8057 10d4 C4080000 		.4byte	.LASF232
 8058 10d8 01       		.byte	0x1
 8059 10d9 FC03     		.2byte	0x3fc
 8060 10db 00000000 		.4byte	.LFB97
 8061 10df 0C000000 		.4byte	.LFE97-.LFB97
 8062 10e3 01       		.uleb128 0x1
 8063 10e4 9C       		.byte	0x9c
 8064 10e5 27       		.uleb128 0x27
 8065 10e6 3B0A0000 		.4byte	.LASF233
 8066 10ea 01       		.byte	0x1
 8067 10eb 0004     		.2byte	0x400
 8068 10ed 00000000 		.4byte	.LFB98
 8069 10f1 0C000000 		.4byte	.LFE98-.LFB98
 8070 10f5 01       		.uleb128 0x1
 8071 10f6 9C       		.byte	0x9c
 8072 10f7 27       		.uleb128 0x27
 8073 10f8 AE100000 		.4byte	.LASF234
 8074 10fc 01       		.byte	0x1
 8075 10fd 0404     		.2byte	0x404
 8076 10ff 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 185


 8077 1103 0C000000 		.4byte	.LFE99-.LFB99
 8078 1107 01       		.uleb128 0x1
 8079 1108 9C       		.byte	0x9c
 8080 1109 27       		.uleb128 0x27
 8081 110a 9A0A0000 		.4byte	.LASF235
 8082 110e 01       		.byte	0x1
 8083 110f 0804     		.2byte	0x408
 8084 1111 00000000 		.4byte	.LFB100
 8085 1115 0C000000 		.4byte	.LFE100-.LFB100
 8086 1119 01       		.uleb128 0x1
 8087 111a 9C       		.byte	0x9c
 8088 111b 27       		.uleb128 0x27
 8089 111c 440D0000 		.4byte	.LASF236
 8090 1120 01       		.byte	0x1
 8091 1121 0C04     		.2byte	0x40c
 8092 1123 00000000 		.4byte	.LFB101
 8093 1127 0C000000 		.4byte	.LFE101-.LFB101
 8094 112b 01       		.uleb128 0x1
 8095 112c 9C       		.byte	0x9c
 8096 112d 27       		.uleb128 0x27
 8097 112e 3B090000 		.4byte	.LASF237
 8098 1132 01       		.byte	0x1
 8099 1133 1104     		.2byte	0x411
 8100 1135 00000000 		.4byte	.LFB102
 8101 1139 0C000000 		.4byte	.LFE102-.LFB102
 8102 113d 01       		.uleb128 0x1
 8103 113e 9C       		.byte	0x9c
 8104 113f 27       		.uleb128 0x27
 8105 1140 700F0000 		.4byte	.LASF238
 8106 1144 01       		.byte	0x1
 8107 1145 1504     		.2byte	0x415
 8108 1147 00000000 		.4byte	.LFB103
 8109 114b 0C000000 		.4byte	.LFE103-.LFB103
 8110 114f 01       		.uleb128 0x1
 8111 1150 9C       		.byte	0x9c
 8112 1151 27       		.uleb128 0x27
 8113 1152 3B070000 		.4byte	.LASF239
 8114 1156 01       		.byte	0x1
 8115 1157 1904     		.2byte	0x419
 8116 1159 00000000 		.4byte	.LFB104
 8117 115d 0C000000 		.4byte	.LFE104-.LFB104
 8118 1161 01       		.uleb128 0x1
 8119 1162 9C       		.byte	0x9c
 8120 1163 2C       		.uleb128 0x2c
 8121 1164 30100000 		.4byte	.LASF246
 8122 1168 01       		.byte	0x1
 8123 1169 2004     		.2byte	0x420
 8124 116b 00000000 		.4byte	.LFB105
 8125 116f C4000000 		.4byte	.LFE105-.LFB105
 8126 1173 01       		.uleb128 0x1
 8127 1174 9C       		.byte	0x9c
 8128 1175 C5110000 		.4byte	0x11c5
 8129 1179 1F       		.uleb128 0x1f
 8130 117a F1040000 		.4byte	.LASF187
 8131 117e 01       		.byte	0x1
 8132 117f 2504     		.2byte	0x425
 8133 1181 C5110000 		.4byte	0x11c5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 186


 8134 1185 02       		.uleb128 0x2
 8135 1186 91       		.byte	0x91
 8136 1187 5C       		.sleb128 -36
 8137 1188 1F       		.uleb128 0x1f
 8138 1189 7D070000 		.4byte	.LASF186
 8139 118d 01       		.byte	0x1
 8140 118e 2604     		.2byte	0x426
 8141 1190 97000000 		.4byte	0x97
 8142 1194 02       		.uleb128 0x2
 8143 1195 91       		.byte	0x91
 8144 1196 76       		.sleb128 -10
 8145 1197 1F       		.uleb128 0x1f
 8146 1198 0E020000 		.4byte	.LASF240
 8147 119c 01       		.byte	0x1
 8148 119d 2804     		.2byte	0x428
 8149 119f AF000000 		.4byte	0xaf
 8150 11a3 02       		.uleb128 0x2
 8151 11a4 91       		.byte	0x91
 8152 11a5 70       		.sleb128 -16
 8153 11a6 1F       		.uleb128 0x1f
 8154 11a7 6A0F0000 		.4byte	.LASF241
 8155 11ab 01       		.byte	0x1
 8156 11ac 2804     		.2byte	0x428
 8157 11ae AF000000 		.4byte	0xaf
 8158 11b2 02       		.uleb128 0x2
 8159 11b3 91       		.byte	0x91
 8160 11b4 6C       		.sleb128 -20
 8161 11b5 1F       		.uleb128 0x1f
 8162 11b6 7F030000 		.4byte	.LASF242
 8163 11ba 01       		.byte	0x1
 8164 11bb 2904     		.2byte	0x429
 8165 11bd 97000000 		.4byte	0x97
 8166 11c1 02       		.uleb128 0x2
 8167 11c2 91       		.byte	0x91
 8168 11c3 77       		.sleb128 -9
 8169 11c4 00       		.byte	0
 8170 11c5 11       		.uleb128 0x11
 8171 11c6 97000000 		.4byte	0x97
 8172 11ca D5110000 		.4byte	0x11d5
 8173 11ce 12       		.uleb128 0x12
 8174 11cf 00010000 		.4byte	0x100
 8175 11d3 0F       		.byte	0xf
 8176 11d4 00       		.byte	0
 8177 11d5 2D       		.uleb128 0x2d
 8178 11d6 12060000 		.4byte	.LASF243
 8179 11da 01       		.byte	0x1
 8180 11db 4A04     		.2byte	0x44a
 8181 11dd BB000000 		.4byte	0xbb
 8182 11e1 00000000 		.4byte	.LFB106
 8183 11e5 A8000000 		.4byte	.LFE106-.LFB106
 8184 11e9 01       		.uleb128 0x1
 8185 11ea 9C       		.byte	0x9c
 8186 11eb 4A120000 		.4byte	0x124a
 8187 11ef 1F       		.uleb128 0x1f
 8188 11f0 F1040000 		.4byte	.LASF187
 8189 11f4 01       		.byte	0x1
 8190 11f5 4C04     		.2byte	0x44c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 187


 8191 11f7 C5110000 		.4byte	0x11c5
 8192 11fb 02       		.uleb128 0x2
 8193 11fc 91       		.byte	0x91
 8194 11fd 5C       		.sleb128 -36
 8195 11fe 1F       		.uleb128 0x1f
 8196 11ff 7D070000 		.4byte	.LASF186
 8197 1203 01       		.byte	0x1
 8198 1204 4D04     		.2byte	0x44d
 8199 1206 97000000 		.4byte	0x97
 8200 120a 02       		.uleb128 0x2
 8201 120b 91       		.byte	0x91
 8202 120c 74       		.sleb128 -12
 8203 120d 1F       		.uleb128 0x1f
 8204 120e 5D050000 		.4byte	.LASF244
 8205 1212 01       		.byte	0x1
 8206 1213 4E04     		.2byte	0x44e
 8207 1215 BB000000 		.4byte	0xbb
 8208 1219 02       		.uleb128 0x2
 8209 121a 91       		.byte	0x91
 8210 121b 76       		.sleb128 -10
 8211 121c 1F       		.uleb128 0x1f
 8212 121d 0E020000 		.4byte	.LASF240
 8213 1221 01       		.byte	0x1
 8214 1222 4F04     		.2byte	0x44f
 8215 1224 AF000000 		.4byte	0xaf
 8216 1228 02       		.uleb128 0x2
 8217 1229 91       		.byte	0x91
 8218 122a 70       		.sleb128 -16
 8219 122b 1F       		.uleb128 0x1f
 8220 122c 6A0F0000 		.4byte	.LASF241
 8221 1230 01       		.byte	0x1
 8222 1231 4F04     		.2byte	0x44f
 8223 1233 AF000000 		.4byte	0xaf
 8224 1237 02       		.uleb128 0x2
 8225 1238 91       		.byte	0x91
 8226 1239 6C       		.sleb128 -20
 8227 123a 1F       		.uleb128 0x1f
 8228 123b 7F030000 		.4byte	.LASF242
 8229 123f 01       		.byte	0x1
 8230 1240 5004     		.2byte	0x450
 8231 1242 97000000 		.4byte	0x97
 8232 1246 02       		.uleb128 0x2
 8233 1247 91       		.byte	0x91
 8234 1248 75       		.sleb128 -11
 8235 1249 00       		.byte	0
 8236 124a 27       		.uleb128 0x27
 8237 124b 94000000 		.4byte	.LASF245
 8238 124f 01       		.byte	0x1
 8239 1250 7004     		.2byte	0x470
 8240 1252 00000000 		.4byte	.LFB107
 8241 1256 0C000000 		.4byte	.LFE107-.LFB107
 8242 125a 01       		.uleb128 0x1
 8243 125b 9C       		.byte	0x9c
 8244 125c 2C       		.uleb128 0x2c
 8245 125d F0020000 		.4byte	.LASF247
 8246 1261 01       		.byte	0x1
 8247 1262 7404     		.2byte	0x474
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 188


 8248 1264 00000000 		.4byte	.LFB108
 8249 1268 20000000 		.4byte	.LFE108-.LFB108
 8250 126c 01       		.uleb128 0x1
 8251 126d 9C       		.byte	0x9c
 8252 126e 82120000 		.4byte	0x1282
 8253 1272 1F       		.uleb128 0x1f
 8254 1273 F1040000 		.4byte	.LASF187
 8255 1277 01       		.byte	0x1
 8256 1278 7604     		.2byte	0x476
 8257 127a 32050000 		.4byte	0x532
 8258 127e 02       		.uleb128 0x2
 8259 127f 91       		.byte	0x91
 8260 1280 74       		.sleb128 -12
 8261 1281 00       		.byte	0
 8262 1282 27       		.uleb128 0x27
 8263 1283 A5050000 		.4byte	.LASF248
 8264 1287 01       		.byte	0x1
 8265 1288 8204     		.2byte	0x482
 8266 128a 00000000 		.4byte	.LFB109
 8267 128e 0C000000 		.4byte	.LFE109-.LFB109
 8268 1292 01       		.uleb128 0x1
 8269 1293 9C       		.byte	0x9c
 8270 1294 27       		.uleb128 0x27
 8271 1295 550C0000 		.4byte	.LASF249
 8272 1299 01       		.byte	0x1
 8273 129a 8604     		.2byte	0x486
 8274 129c 00000000 		.4byte	.LFB110
 8275 12a0 0C000000 		.4byte	.LFE110-.LFB110
 8276 12a4 01       		.uleb128 0x1
 8277 12a5 9C       		.byte	0x9c
 8278 12a6 2C       		.uleb128 0x2c
 8279 12a7 97010000 		.4byte	.LASF250
 8280 12ab 01       		.byte	0x1
 8281 12ac 8A04     		.2byte	0x48a
 8282 12ae 00000000 		.4byte	.LFB111
 8283 12b2 60000000 		.4byte	.LFE111-.LFB111
 8284 12b6 01       		.uleb128 0x1
 8285 12b7 9C       		.byte	0x9c
 8286 12b8 DB120000 		.4byte	0x12db
 8287 12bc 1F       		.uleb128 0x1f
 8288 12bd F1040000 		.4byte	.LASF187
 8289 12c1 01       		.byte	0x1
 8290 12c2 8C04     		.2byte	0x48c
 8291 12c4 B3040000 		.4byte	0x4b3
 8292 12c8 02       		.uleb128 0x2
 8293 12c9 91       		.byte	0x91
 8294 12ca 70       		.sleb128 -16
 8295 12cb 1F       		.uleb128 0x1f
 8296 12cc 890E0000 		.4byte	.LASF251
 8297 12d0 01       		.byte	0x1
 8298 12d1 8D04     		.2byte	0x48d
 8299 12d3 BB000000 		.4byte	0xbb
 8300 12d7 02       		.uleb128 0x2
 8301 12d8 91       		.byte	0x91
 8302 12d9 6E       		.sleb128 -18
 8303 12da 00       		.byte	0
 8304 12db 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 189


 8305 12dc 22010000 		.4byte	.LASF252
 8306 12e0 01       		.byte	0x1
 8307 12e1 A004     		.2byte	0x4a0
 8308 12e3 00000000 		.4byte	.LFB112
 8309 12e7 0C000000 		.4byte	.LFE112-.LFB112
 8310 12eb 01       		.uleb128 0x1
 8311 12ec 9C       		.byte	0x9c
 8312 12ed 27       		.uleb128 0x27
 8313 12ee 1B0F0000 		.4byte	.LASF253
 8314 12f2 01       		.byte	0x1
 8315 12f3 A404     		.2byte	0x4a4
 8316 12f5 00000000 		.4byte	.LFB113
 8317 12f9 0C000000 		.4byte	.LFE113-.LFB113
 8318 12fd 01       		.uleb128 0x1
 8319 12fe 9C       		.byte	0x9c
 8320 12ff 27       		.uleb128 0x27
 8321 1300 150E0000 		.4byte	.LASF254
 8322 1304 01       		.byte	0x1
 8323 1305 A704     		.2byte	0x4a7
 8324 1307 00000000 		.4byte	.LFB114
 8325 130b 0C000000 		.4byte	.LFE114-.LFB114
 8326 130f 01       		.uleb128 0x1
 8327 1310 9C       		.byte	0x9c
 8328 1311 27       		.uleb128 0x27
 8329 1312 80020000 		.4byte	.LASF255
 8330 1316 01       		.byte	0x1
 8331 1317 AA04     		.2byte	0x4aa
 8332 1319 00000000 		.4byte	.LFB115
 8333 131d 0C000000 		.4byte	.LFE115-.LFB115
 8334 1321 01       		.uleb128 0x1
 8335 1322 9C       		.byte	0x9c
 8336 1323 27       		.uleb128 0x27
 8337 1324 B8020000 		.4byte	.LASF256
 8338 1328 01       		.byte	0x1
 8339 1329 AD04     		.2byte	0x4ad
 8340 132b 00000000 		.4byte	.LFB116
 8341 132f 0C000000 		.4byte	.LFE116-.LFB116
 8342 1333 01       		.uleb128 0x1
 8343 1334 9C       		.byte	0x9c
 8344 1335 1E       		.uleb128 0x1e
 8345 1336 4A020000 		.4byte	.LASF257
 8346 133a 01       		.byte	0x1
 8347 133b B104     		.2byte	0x4b1
 8348 133d 00000000 		.4byte	.LFB117
 8349 1341 54010000 		.4byte	.LFE117-.LFB117
 8350 1345 01       		.uleb128 0x1
 8351 1346 9C       		.byte	0x9c
 8352 1347 8A130000 		.4byte	0x138a
 8353 134b 22       		.uleb128 0x22
 8354 134c FA050000 		.4byte	.LASF258
 8355 1350 01       		.byte	0x1
 8356 1351 B104     		.2byte	0x4b1
 8357 1353 A3000000 		.4byte	0xa3
 8358 1357 04       		.uleb128 0x4
 8359 1358 91       		.byte	0x91
 8360 1359 9EE37E   		.sleb128 -20066
 8361 135c 23       		.uleb128 0x23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 190


 8362 135d 6900     		.ascii	"i\000"
 8363 135f 01       		.byte	0x1
 8364 1360 B304     		.2byte	0x4b3
 8365 1362 97000000 		.4byte	0x97
 8366 1366 02       		.uleb128 0x2
 8367 1367 91       		.byte	0x91
 8368 1368 77       		.sleb128 -9
 8369 1369 1F       		.uleb128 0x1f
 8370 136a 6B030000 		.4byte	.LASF259
 8371 136e 01       		.byte	0x1
 8372 136f B404     		.2byte	0x4b4
 8373 1371 0D0B0000 		.4byte	0xb0d
 8374 1375 02       		.uleb128 0x2
 8375 1376 91       		.byte	0x91
 8376 1377 44       		.sleb128 -60
 8377 1378 1F       		.uleb128 0x1f
 8378 1379 57070000 		.4byte	.LASF172
 8379 137d 01       		.byte	0x1
 8380 137e B504     		.2byte	0x4b5
 8381 1380 86090000 		.4byte	0x986
 8382 1384 04       		.uleb128 0x4
 8383 1385 91       		.byte	0x91
 8384 1386 A4E37E   		.sleb128 -20060
 8385 1389 00       		.byte	0
 8386 138a 26       		.uleb128 0x26
 8387 138b 17030000 		.4byte	.LASF260
 8388 138f 01       		.byte	0x1
 8389 1390 CD04     		.2byte	0x4cd
 8390 1392 00000000 		.4byte	.LFB118
 8391 1396 14000000 		.4byte	.LFE118-.LFB118
 8392 139a 01       		.uleb128 0x1
 8393 139b 9C       		.byte	0x9c
 8394 139c B0130000 		.4byte	0x13b0
 8395 13a0 22       		.uleb128 0x22
 8396 13a1 FA050000 		.4byte	.LASF258
 8397 13a5 01       		.byte	0x1
 8398 13a6 CD04     		.2byte	0x4cd
 8399 13a8 A3000000 		.4byte	0xa3
 8400 13ac 02       		.uleb128 0x2
 8401 13ad 91       		.byte	0x91
 8402 13ae 76       		.sleb128 -10
 8403 13af 00       		.byte	0
 8404 13b0 2C       		.uleb128 0x2c
 8405 13b1 11090000 		.4byte	.LASF261
 8406 13b5 01       		.byte	0x1
 8407 13b6 D604     		.2byte	0x4d6
 8408 13b8 00000000 		.4byte	.LFB119
 8409 13bc 50010000 		.4byte	.LFE119-.LFB119
 8410 13c0 01       		.uleb128 0x1
 8411 13c1 9C       		.byte	0x9c
 8412 13c2 D4130000 		.4byte	0x13d4
 8413 13c6 23       		.uleb128 0x23
 8414 13c7 6900     		.ascii	"i\000"
 8415 13c9 01       		.byte	0x1
 8416 13ca D804     		.2byte	0x4d8
 8417 13cc 97000000 		.4byte	0x97
 8418 13d0 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 191


 8419 13d1 91       		.byte	0x91
 8420 13d2 6F       		.sleb128 -17
 8421 13d3 00       		.byte	0
 8422 13d4 2C       		.uleb128 0x2c
 8423 13d5 A5000000 		.4byte	.LASF262
 8424 13d9 01       		.byte	0x1
 8425 13da FD04     		.2byte	0x4fd
 8426 13dc 00000000 		.4byte	.LFB120
 8427 13e0 9C010000 		.4byte	.LFE120-.LFB120
 8428 13e4 01       		.uleb128 0x1
 8429 13e5 9C       		.byte	0x9c
 8430 13e6 45140000 		.4byte	0x1445
 8431 13ea 1F       		.uleb128 0x1f
 8432 13eb 5D050000 		.4byte	.LASF244
 8433 13ef 01       		.byte	0x1
 8434 13f0 FF04     		.2byte	0x4ff
 8435 13f2 BB000000 		.4byte	0xbb
 8436 13f6 02       		.uleb128 0x2
 8437 13f7 91       		.byte	0x91
 8438 13f8 5C       		.sleb128 -36
 8439 13f9 1F       		.uleb128 0x1f
 8440 13fa 5B040000 		.4byte	.LASF263
 8441 13fe 01       		.byte	0x1
 8442 13ff 0005     		.2byte	0x500
 8443 1401 C7000000 		.4byte	0xc7
 8444 1405 02       		.uleb128 0x2
 8445 1406 91       		.byte	0x91
 8446 1407 64       		.sleb128 -28
 8447 1408 1F       		.uleb128 0x1f
 8448 1409 A3090000 		.4byte	.LASF264
 8449 140d 01       		.byte	0x1
 8450 140e 0105     		.2byte	0x501
 8451 1410 C7000000 		.4byte	0xc7
 8452 1414 02       		.uleb128 0x2
 8453 1415 91       		.byte	0x91
 8454 1416 54       		.sleb128 -44
 8455 1417 1F       		.uleb128 0x1f
 8456 1418 E1020000 		.4byte	.LASF265
 8457 141c 01       		.byte	0x1
 8458 141d 0105     		.2byte	0x501
 8459 141f C7000000 		.4byte	0xc7
 8460 1423 02       		.uleb128 0x2
 8461 1424 91       		.byte	0x91
 8462 1425 58       		.sleb128 -40
 8463 1426 1F       		.uleb128 0x1f
 8464 1427 4D040000 		.4byte	.LASF266
 8465 142b 01       		.byte	0x1
 8466 142c 0205     		.2byte	0x502
 8467 142e C7000000 		.4byte	0xc7
 8468 1432 02       		.uleb128 0x2
 8469 1433 91       		.byte	0x91
 8470 1434 60       		.sleb128 -32
 8471 1435 1F       		.uleb128 0x1f
 8472 1436 330A0000 		.4byte	.LASF267
 8473 143a 01       		.byte	0x1
 8474 143b 0305     		.2byte	0x503
 8475 143d BB000000 		.4byte	0xbb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 192


 8476 1441 02       		.uleb128 0x2
 8477 1442 91       		.byte	0x91
 8478 1443 5E       		.sleb128 -34
 8479 1444 00       		.byte	0
 8480 1445 2E       		.uleb128 0x2e
 8481 1446 AB0A0000 		.4byte	.LASF268
 8482 144a 01       		.byte	0x1
 8483 144b 3F05     		.2byte	0x53f
 8484 144d 97000000 		.4byte	0x97
 8485 1451 00000000 		.4byte	.LFB121
 8486 1455 0E000000 		.4byte	.LFE121-.LFB121
 8487 1459 01       		.uleb128 0x1
 8488 145a 9C       		.byte	0x9c
 8489 145b 26       		.uleb128 0x26
 8490 145c B8060000 		.4byte	.LASF269
 8491 1460 01       		.byte	0x1
 8492 1461 4905     		.2byte	0x549
 8493 1463 00000000 		.4byte	.LFB122
 8494 1467 12000000 		.4byte	.LFE122-.LFB122
 8495 146b 01       		.uleb128 0x1
 8496 146c 9C       		.byte	0x9c
 8497 146d 81140000 		.4byte	0x1481
 8498 1471 22       		.uleb128 0x22
 8499 1472 95050000 		.4byte	.LASF270
 8500 1476 01       		.byte	0x1
 8501 1477 4905     		.2byte	0x549
 8502 1479 73000000 		.4byte	0x73
 8503 147d 02       		.uleb128 0x2
 8504 147e 91       		.byte	0x91
 8505 147f 74       		.sleb128 -12
 8506 1480 00       		.byte	0
 8507 1481 26       		.uleb128 0x26
 8508 1482 990B0000 		.4byte	.LASF271
 8509 1486 01       		.byte	0x1
 8510 1487 9605     		.2byte	0x596
 8511 1489 00000000 		.4byte	.LFB123
 8512 148d 1A000000 		.4byte	.LFE123-.LFB123
 8513 1491 01       		.uleb128 0x1
 8514 1492 9C       		.byte	0x9c
 8515 1493 B6140000 		.4byte	0x14b6
 8516 1497 22       		.uleb128 0x22
 8517 1498 95050000 		.4byte	.LASF270
 8518 149c 01       		.byte	0x1
 8519 149d 9605     		.2byte	0x596
 8520 149f 97000000 		.4byte	0x97
 8521 14a3 02       		.uleb128 0x2
 8522 14a4 91       		.byte	0x91
 8523 14a5 77       		.sleb128 -9
 8524 14a6 22       		.uleb128 0x22
 8525 14a7 63070000 		.4byte	.LASF137
 8526 14ab 01       		.byte	0x1
 8527 14ac 9605     		.2byte	0x596
 8528 14ae 97000000 		.4byte	0x97
 8529 14b2 02       		.uleb128 0x2
 8530 14b3 91       		.byte	0x91
 8531 14b4 76       		.sleb128 -10
 8532 14b5 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 193


 8533 14b6 2F       		.uleb128 0x2f
 8534 14b7 59000000 		.4byte	.LASF272
 8535 14bb 01       		.byte	0x1
 8536 14bc 9F05     		.2byte	0x59f
 8537 14be 00000000 		.4byte	.LFB124
 8538 14c2 30000000 		.4byte	.LFE124-.LFB124
 8539 14c6 01       		.uleb128 0x1
 8540 14c7 9C       		.byte	0x9c
 8541 14c8 27       		.uleb128 0x27
 8542 14c9 11050000 		.4byte	.LASF273
 8543 14cd 01       		.byte	0x1
 8544 14ce AD05     		.2byte	0x5ad
 8545 14d0 00000000 		.4byte	.LFB125
 8546 14d4 0C000000 		.4byte	.LFE125-.LFB125
 8547 14d8 01       		.uleb128 0x1
 8548 14d9 9C       		.byte	0x9c
 8549 14da 30       		.uleb128 0x30
 8550 14db 76090000 		.4byte	.LASF274
 8551 14df 08       		.byte	0x8
 8552 14e0 1207     		.2byte	0x712
 8553 14e2 E6140000 		.4byte	0x14e6
 8554 14e6 06       		.uleb128 0x6
 8555 14e7 81000000 		.4byte	0x81
 8556 14eb 11       		.uleb128 0x11
 8557 14ec 76030000 		.4byte	0x376
 8558 14f0 FB140000 		.4byte	0x14fb
 8559 14f4 12       		.uleb128 0x12
 8560 14f5 00010000 		.4byte	0x100
 8561 14f9 01       		.byte	0x1
 8562 14fa 00       		.byte	0
 8563 14fb 30       		.uleb128 0x30
 8564 14fc F5030000 		.4byte	.LASF275
 8565 1500 07       		.byte	0x7
 8566 1501 A801     		.2byte	0x1a8
 8567 1503 EB140000 		.4byte	0x14eb
 8568 1507 30       		.uleb128 0x30
 8569 1508 070E0000 		.4byte	.LASF276
 8570 150c 07       		.byte	0x7
 8571 150d 3A02     		.2byte	0x23a
 8572 150f 50070000 		.4byte	0x750
 8573 1513 30       		.uleb128 0x30
 8574 1514 AE0D0000 		.4byte	.LASF277
 8575 1518 07       		.byte	0x7
 8576 1519 AB01     		.2byte	0x1ab
 8577 151b B3030000 		.4byte	0x3b3
 8578 151f 30       		.uleb128 0x30
 8579 1520 74000000 		.4byte	.LASF278
 8580 1524 07       		.byte	0x7
 8581 1525 3302     		.2byte	0x233
 8582 1527 CE030000 		.4byte	0x3ce
 8583 152b 30       		.uleb128 0x30
 8584 152c D30F0000 		.4byte	.LASF279
 8585 1530 07       		.byte	0x7
 8586 1531 3902     		.2byte	0x239
 8587 1533 E3050000 		.4byte	0x5e3
 8588 1537 30       		.uleb128 0x30
 8589 1538 C9090000 		.4byte	.LASF280
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 194


 8590 153c 07       		.byte	0x7
 8591 153d 3902     		.2byte	0x239
 8592 153f E3050000 		.4byte	0x5e3
 8593 1543 30       		.uleb128 0x30
 8594 1544 E9080000 		.4byte	.LASF281
 8595 1548 07       		.byte	0x7
 8596 1549 AE01     		.2byte	0x1ae
 8597 154b 5A060000 		.4byte	0x65a
 8598 154f 30       		.uleb128 0x30
 8599 1550 89030000 		.4byte	.LASF282
 8600 1554 07       		.byte	0x7
 8601 1555 3402     		.2byte	0x234
 8602 1557 97000000 		.4byte	0x97
 8603 155b 30       		.uleb128 0x30
 8604 155c A8060000 		.4byte	.LASF283
 8605 1560 07       		.byte	0x7
 8606 1561 3502     		.2byte	0x235
 8607 1563 97000000 		.4byte	0x97
 8608 1567 11       		.uleb128 0x11
 8609 1568 E1000000 		.4byte	0xe1
 8610 156c 77150000 		.4byte	0x1577
 8611 1570 12       		.uleb128 0x12
 8612 1571 00010000 		.4byte	0x100
 8613 1575 63       		.byte	0x63
 8614 1576 00       		.byte	0
 8615 1577 30       		.uleb128 0x30
 8616 1578 D50C0000 		.4byte	.LASF284
 8617 157c 07       		.byte	0x7
 8618 157d E601     		.2byte	0x1e6
 8619 157f 67150000 		.4byte	0x1567
 8620 1583 30       		.uleb128 0x30
 8621 1584 C8020000 		.4byte	.LASF285
 8622 1588 07       		.byte	0x7
 8623 1589 E701     		.2byte	0x1e7
 8624 158b 67150000 		.4byte	0x1567
 8625 158f 30       		.uleb128 0x30
 8626 1590 AA0F0000 		.4byte	.LASF286
 8627 1594 07       		.byte	0x7
 8628 1595 EA01     		.2byte	0x1ea
 8629 1597 67150000 		.4byte	0x1567
 8630 159b 30       		.uleb128 0x30
 8631 159c 0C100000 		.4byte	.LASF287
 8632 15a0 07       		.byte	0x7
 8633 15a1 3702     		.2byte	0x237
 8634 15a3 97000000 		.4byte	0x97
 8635 15a7 30       		.uleb128 0x30
 8636 15a8 920B0000 		.4byte	.LASF288
 8637 15ac 07       		.byte	0x7
 8638 15ad 2F02     		.2byte	0x22f
 8639 15af 32050000 		.4byte	0x532
 8640 15b3 30       		.uleb128 0x30
 8641 15b4 1B020000 		.4byte	.LASF289
 8642 15b8 07       		.byte	0x7
 8643 15b9 4E02     		.2byte	0x24e
 8644 15bb BB000000 		.4byte	0xbb
 8645 15bf 30       		.uleb128 0x30
 8646 15c0 25020000 		.4byte	.LASF290
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 195


 8647 15c4 07       		.byte	0x7
 8648 15c5 4F02     		.2byte	0x24f
 8649 15c7 BB000000 		.4byte	0xbb
 8650 15cb 31       		.uleb128 0x31
 8651 15cc 930E0000 		.4byte	.LASF291
 8652 15d0 01       		.byte	0x1
 8653 15d1 33       		.byte	0x33
 8654 15d2 DC150000 		.4byte	0x15dc
 8655 15d6 05       		.uleb128 0x5
 8656 15d7 03       		.byte	0x3
 8657 15d8 00000000 		.4byte	EEPROM_ADDR
 8658 15dc 07       		.uleb128 0x7
 8659 15dd 04       		.byte	0x4
 8660 15de E8000000 		.4byte	0xe8
 8661 15e2 00       		.byte	0
 8662              		.section	.debug_abbrev,"",%progbits
 8663              	.Ldebug_abbrev0:
 8664 0000 01       		.uleb128 0x1
 8665 0001 11       		.uleb128 0x11
 8666 0002 01       		.byte	0x1
 8667 0003 25       		.uleb128 0x25
 8668 0004 0E       		.uleb128 0xe
 8669 0005 13       		.uleb128 0x13
 8670 0006 0B       		.uleb128 0xb
 8671 0007 03       		.uleb128 0x3
 8672 0008 0E       		.uleb128 0xe
 8673 0009 1B       		.uleb128 0x1b
 8674 000a 0E       		.uleb128 0xe
 8675 000b 55       		.uleb128 0x55
 8676 000c 17       		.uleb128 0x17
 8677 000d 11       		.uleb128 0x11
 8678 000e 01       		.uleb128 0x1
 8679 000f 10       		.uleb128 0x10
 8680 0010 17       		.uleb128 0x17
 8681 0011 00       		.byte	0
 8682 0012 00       		.byte	0
 8683 0013 02       		.uleb128 0x2
 8684 0014 24       		.uleb128 0x24
 8685 0015 00       		.byte	0
 8686 0016 0B       		.uleb128 0xb
 8687 0017 0B       		.uleb128 0xb
 8688 0018 3E       		.uleb128 0x3e
 8689 0019 0B       		.uleb128 0xb
 8690 001a 03       		.uleb128 0x3
 8691 001b 0E       		.uleb128 0xe
 8692 001c 00       		.byte	0
 8693 001d 00       		.byte	0
 8694 001e 03       		.uleb128 0x3
 8695 001f 16       		.uleb128 0x16
 8696 0020 00       		.byte	0
 8697 0021 03       		.uleb128 0x3
 8698 0022 0E       		.uleb128 0xe
 8699 0023 3A       		.uleb128 0x3a
 8700 0024 0B       		.uleb128 0xb
 8701 0025 3B       		.uleb128 0x3b
 8702 0026 0B       		.uleb128 0xb
 8703 0027 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 196


 8704 0028 13       		.uleb128 0x13
 8705 0029 00       		.byte	0
 8706 002a 00       		.byte	0
 8707 002b 04       		.uleb128 0x4
 8708 002c 24       		.uleb128 0x24
 8709 002d 00       		.byte	0
 8710 002e 0B       		.uleb128 0xb
 8711 002f 0B       		.uleb128 0xb
 8712 0030 3E       		.uleb128 0x3e
 8713 0031 0B       		.uleb128 0xb
 8714 0032 03       		.uleb128 0x3
 8715 0033 08       		.uleb128 0x8
 8716 0034 00       		.byte	0
 8717 0035 00       		.byte	0
 8718 0036 05       		.uleb128 0x5
 8719 0037 16       		.uleb128 0x16
 8720 0038 00       		.byte	0
 8721 0039 03       		.uleb128 0x3
 8722 003a 0E       		.uleb128 0xe
 8723 003b 3A       		.uleb128 0x3a
 8724 003c 0B       		.uleb128 0xb
 8725 003d 3B       		.uleb128 0x3b
 8726 003e 05       		.uleb128 0x5
 8727 003f 49       		.uleb128 0x49
 8728 0040 13       		.uleb128 0x13
 8729 0041 00       		.byte	0
 8730 0042 00       		.byte	0
 8731 0043 06       		.uleb128 0x6
 8732 0044 35       		.uleb128 0x35
 8733 0045 00       		.byte	0
 8734 0046 49       		.uleb128 0x49
 8735 0047 13       		.uleb128 0x13
 8736 0048 00       		.byte	0
 8737 0049 00       		.byte	0
 8738 004a 07       		.uleb128 0x7
 8739 004b 0F       		.uleb128 0xf
 8740 004c 00       		.byte	0
 8741 004d 0B       		.uleb128 0xb
 8742 004e 0B       		.uleb128 0xb
 8743 004f 49       		.uleb128 0x49
 8744 0050 13       		.uleb128 0x13
 8745 0051 00       		.byte	0
 8746 0052 00       		.byte	0
 8747 0053 08       		.uleb128 0x8
 8748 0054 26       		.uleb128 0x26
 8749 0055 00       		.byte	0
 8750 0056 49       		.uleb128 0x49
 8751 0057 13       		.uleb128 0x13
 8752 0058 00       		.byte	0
 8753 0059 00       		.byte	0
 8754 005a 09       		.uleb128 0x9
 8755 005b 04       		.uleb128 0x4
 8756 005c 01       		.byte	0x1
 8757 005d 03       		.uleb128 0x3
 8758 005e 0E       		.uleb128 0xe
 8759 005f 0B       		.uleb128 0xb
 8760 0060 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 197


 8761 0061 49       		.uleb128 0x49
 8762 0062 13       		.uleb128 0x13
 8763 0063 3A       		.uleb128 0x3a
 8764 0064 0B       		.uleb128 0xb
 8765 0065 3B       		.uleb128 0x3b
 8766 0066 0B       		.uleb128 0xb
 8767 0067 01       		.uleb128 0x1
 8768 0068 13       		.uleb128 0x13
 8769 0069 00       		.byte	0
 8770 006a 00       		.byte	0
 8771 006b 0A       		.uleb128 0xa
 8772 006c 28       		.uleb128 0x28
 8773 006d 00       		.byte	0
 8774 006e 03       		.uleb128 0x3
 8775 006f 0E       		.uleb128 0xe
 8776 0070 1C       		.uleb128 0x1c
 8777 0071 0B       		.uleb128 0xb
 8778 0072 00       		.byte	0
 8779 0073 00       		.byte	0
 8780 0074 0B       		.uleb128 0xb
 8781 0075 13       		.uleb128 0x13
 8782 0076 01       		.byte	0x1
 8783 0077 03       		.uleb128 0x3
 8784 0078 0E       		.uleb128 0xe
 8785 0079 0B       		.uleb128 0xb
 8786 007a 0B       		.uleb128 0xb
 8787 007b 3A       		.uleb128 0x3a
 8788 007c 0B       		.uleb128 0xb
 8789 007d 3B       		.uleb128 0x3b
 8790 007e 0B       		.uleb128 0xb
 8791 007f 01       		.uleb128 0x1
 8792 0080 13       		.uleb128 0x13
 8793 0081 00       		.byte	0
 8794 0082 00       		.byte	0
 8795 0083 0C       		.uleb128 0xc
 8796 0084 0D       		.uleb128 0xd
 8797 0085 00       		.byte	0
 8798 0086 03       		.uleb128 0x3
 8799 0087 08       		.uleb128 0x8
 8800 0088 3A       		.uleb128 0x3a
 8801 0089 0B       		.uleb128 0xb
 8802 008a 3B       		.uleb128 0x3b
 8803 008b 0B       		.uleb128 0xb
 8804 008c 49       		.uleb128 0x49
 8805 008d 13       		.uleb128 0x13
 8806 008e 38       		.uleb128 0x38
 8807 008f 0B       		.uleb128 0xb
 8808 0090 00       		.byte	0
 8809 0091 00       		.byte	0
 8810 0092 0D       		.uleb128 0xd
 8811 0093 0D       		.uleb128 0xd
 8812 0094 00       		.byte	0
 8813 0095 03       		.uleb128 0x3
 8814 0096 0E       		.uleb128 0xe
 8815 0097 3A       		.uleb128 0x3a
 8816 0098 0B       		.uleb128 0xb
 8817 0099 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 198


 8818 009a 0B       		.uleb128 0xb
 8819 009b 49       		.uleb128 0x49
 8820 009c 13       		.uleb128 0x13
 8821 009d 38       		.uleb128 0x38
 8822 009e 0B       		.uleb128 0xb
 8823 009f 00       		.byte	0
 8824 00a0 00       		.byte	0
 8825 00a1 0E       		.uleb128 0xe
 8826 00a2 13       		.uleb128 0x13
 8827 00a3 01       		.byte	0x1
 8828 00a4 03       		.uleb128 0x3
 8829 00a5 0E       		.uleb128 0xe
 8830 00a6 0B       		.uleb128 0xb
 8831 00a7 0B       		.uleb128 0xb
 8832 00a8 3A       		.uleb128 0x3a
 8833 00a9 0B       		.uleb128 0xb
 8834 00aa 3B       		.uleb128 0x3b
 8835 00ab 05       		.uleb128 0x5
 8836 00ac 01       		.uleb128 0x1
 8837 00ad 13       		.uleb128 0x13
 8838 00ae 00       		.byte	0
 8839 00af 00       		.byte	0
 8840 00b0 0F       		.uleb128 0xf
 8841 00b1 0D       		.uleb128 0xd
 8842 00b2 00       		.byte	0
 8843 00b3 03       		.uleb128 0x3
 8844 00b4 0E       		.uleb128 0xe
 8845 00b5 3A       		.uleb128 0x3a
 8846 00b6 0B       		.uleb128 0xb
 8847 00b7 3B       		.uleb128 0x3b
 8848 00b8 05       		.uleb128 0x5
 8849 00b9 49       		.uleb128 0x49
 8850 00ba 13       		.uleb128 0x13
 8851 00bb 38       		.uleb128 0x38
 8852 00bc 0B       		.uleb128 0xb
 8853 00bd 00       		.byte	0
 8854 00be 00       		.byte	0
 8855 00bf 10       		.uleb128 0x10
 8856 00c0 0D       		.uleb128 0xd
 8857 00c1 00       		.byte	0
 8858 00c2 03       		.uleb128 0x3
 8859 00c3 08       		.uleb128 0x8
 8860 00c4 3A       		.uleb128 0x3a
 8861 00c5 0B       		.uleb128 0xb
 8862 00c6 3B       		.uleb128 0x3b
 8863 00c7 05       		.uleb128 0x5
 8864 00c8 49       		.uleb128 0x49
 8865 00c9 13       		.uleb128 0x13
 8866 00ca 38       		.uleb128 0x38
 8867 00cb 0B       		.uleb128 0xb
 8868 00cc 00       		.byte	0
 8869 00cd 00       		.byte	0
 8870 00ce 11       		.uleb128 0x11
 8871 00cf 01       		.uleb128 0x1
 8872 00d0 01       		.byte	0x1
 8873 00d1 49       		.uleb128 0x49
 8874 00d2 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 199


 8875 00d3 01       		.uleb128 0x1
 8876 00d4 13       		.uleb128 0x13
 8877 00d5 00       		.byte	0
 8878 00d6 00       		.byte	0
 8879 00d7 12       		.uleb128 0x12
 8880 00d8 21       		.uleb128 0x21
 8881 00d9 00       		.byte	0
 8882 00da 49       		.uleb128 0x49
 8883 00db 13       		.uleb128 0x13
 8884 00dc 2F       		.uleb128 0x2f
 8885 00dd 0B       		.uleb128 0xb
 8886 00de 00       		.byte	0
 8887 00df 00       		.byte	0
 8888 00e0 13       		.uleb128 0x13
 8889 00e1 2E       		.uleb128 0x2e
 8890 00e2 01       		.byte	0x1
 8891 00e3 03       		.uleb128 0x3
 8892 00e4 0E       		.uleb128 0xe
 8893 00e5 3A       		.uleb128 0x3a
 8894 00e6 0B       		.uleb128 0xb
 8895 00e7 3B       		.uleb128 0x3b
 8896 00e8 05       		.uleb128 0x5
 8897 00e9 27       		.uleb128 0x27
 8898 00ea 19       		.uleb128 0x19
 8899 00eb 49       		.uleb128 0x49
 8900 00ec 13       		.uleb128 0x13
 8901 00ed 20       		.uleb128 0x20
 8902 00ee 0B       		.uleb128 0xb
 8903 00ef 01       		.uleb128 0x1
 8904 00f0 13       		.uleb128 0x13
 8905 00f1 00       		.byte	0
 8906 00f2 00       		.byte	0
 8907 00f3 14       		.uleb128 0x14
 8908 00f4 05       		.uleb128 0x5
 8909 00f5 00       		.byte	0
 8910 00f6 03       		.uleb128 0x3
 8911 00f7 0E       		.uleb128 0xe
 8912 00f8 3A       		.uleb128 0x3a
 8913 00f9 0B       		.uleb128 0xb
 8914 00fa 3B       		.uleb128 0x3b
 8915 00fb 05       		.uleb128 0x5
 8916 00fc 49       		.uleb128 0x49
 8917 00fd 13       		.uleb128 0x13
 8918 00fe 00       		.byte	0
 8919 00ff 00       		.byte	0
 8920 0100 15       		.uleb128 0x15
 8921 0101 34       		.uleb128 0x34
 8922 0102 00       		.byte	0
 8923 0103 03       		.uleb128 0x3
 8924 0104 0E       		.uleb128 0xe
 8925 0105 3A       		.uleb128 0x3a
 8926 0106 0B       		.uleb128 0xb
 8927 0107 3B       		.uleb128 0x3b
 8928 0108 05       		.uleb128 0x5
 8929 0109 49       		.uleb128 0x49
 8930 010a 13       		.uleb128 0x13
 8931 010b 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 200


 8932 010c 00       		.byte	0
 8933 010d 16       		.uleb128 0x16
 8934 010e 2E       		.uleb128 0x2e
 8935 010f 01       		.byte	0x1
 8936 0110 3F       		.uleb128 0x3f
 8937 0111 19       		.uleb128 0x19
 8938 0112 03       		.uleb128 0x3
 8939 0113 0E       		.uleb128 0xe
 8940 0114 3A       		.uleb128 0x3a
 8941 0115 0B       		.uleb128 0xb
 8942 0116 3B       		.uleb128 0x3b
 8943 0117 0B       		.uleb128 0xb
 8944 0118 27       		.uleb128 0x27
 8945 0119 19       		.uleb128 0x19
 8946 011a 11       		.uleb128 0x11
 8947 011b 01       		.uleb128 0x1
 8948 011c 12       		.uleb128 0x12
 8949 011d 06       		.uleb128 0x6
 8950 011e 40       		.uleb128 0x40
 8951 011f 18       		.uleb128 0x18
 8952 0120 9642     		.uleb128 0x2116
 8953 0122 19       		.uleb128 0x19
 8954 0123 01       		.uleb128 0x1
 8955 0124 13       		.uleb128 0x13
 8956 0125 00       		.byte	0
 8957 0126 00       		.byte	0
 8958 0127 17       		.uleb128 0x17
 8959 0128 34       		.uleb128 0x34
 8960 0129 00       		.byte	0
 8961 012a 03       		.uleb128 0x3
 8962 012b 0E       		.uleb128 0xe
 8963 012c 3A       		.uleb128 0x3a
 8964 012d 0B       		.uleb128 0xb
 8965 012e 3B       		.uleb128 0x3b
 8966 012f 0B       		.uleb128 0xb
 8967 0130 49       		.uleb128 0x49
 8968 0131 13       		.uleb128 0x13
 8969 0132 02       		.uleb128 0x2
 8970 0133 18       		.uleb128 0x18
 8971 0134 00       		.byte	0
 8972 0135 00       		.byte	0
 8973 0136 18       		.uleb128 0x18
 8974 0137 1D       		.uleb128 0x1d
 8975 0138 01       		.byte	0x1
 8976 0139 31       		.uleb128 0x31
 8977 013a 13       		.uleb128 0x13
 8978 013b 11       		.uleb128 0x11
 8979 013c 01       		.uleb128 0x1
 8980 013d 12       		.uleb128 0x12
 8981 013e 06       		.uleb128 0x6
 8982 013f 58       		.uleb128 0x58
 8983 0140 0B       		.uleb128 0xb
 8984 0141 59       		.uleb128 0x59
 8985 0142 0B       		.uleb128 0xb
 8986 0143 01       		.uleb128 0x1
 8987 0144 13       		.uleb128 0x13
 8988 0145 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 201


 8989 0146 00       		.byte	0
 8990 0147 19       		.uleb128 0x19
 8991 0148 05       		.uleb128 0x5
 8992 0149 00       		.byte	0
 8993 014a 31       		.uleb128 0x31
 8994 014b 13       		.uleb128 0x13
 8995 014c 02       		.uleb128 0x2
 8996 014d 18       		.uleb128 0x18
 8997 014e 00       		.byte	0
 8998 014f 00       		.byte	0
 8999 0150 1A       		.uleb128 0x1a
 9000 0151 0B       		.uleb128 0xb
 9001 0152 01       		.byte	0x1
 9002 0153 11       		.uleb128 0x11
 9003 0154 01       		.uleb128 0x1
 9004 0155 12       		.uleb128 0x12
 9005 0156 06       		.uleb128 0x6
 9006 0157 00       		.byte	0
 9007 0158 00       		.byte	0
 9008 0159 1B       		.uleb128 0x1b
 9009 015a 34       		.uleb128 0x34
 9010 015b 00       		.byte	0
 9011 015c 31       		.uleb128 0x31
 9012 015d 13       		.uleb128 0x13
 9013 015e 02       		.uleb128 0x2
 9014 015f 18       		.uleb128 0x18
 9015 0160 00       		.byte	0
 9016 0161 00       		.byte	0
 9017 0162 1C       		.uleb128 0x1c
 9018 0163 1D       		.uleb128 0x1d
 9019 0164 01       		.byte	0x1
 9020 0165 31       		.uleb128 0x31
 9021 0166 13       		.uleb128 0x13
 9022 0167 11       		.uleb128 0x11
 9023 0168 01       		.uleb128 0x1
 9024 0169 12       		.uleb128 0x12
 9025 016a 06       		.uleb128 0x6
 9026 016b 58       		.uleb128 0x58
 9027 016c 0B       		.uleb128 0xb
 9028 016d 59       		.uleb128 0x59
 9029 016e 05       		.uleb128 0x5
 9030 016f 01       		.uleb128 0x1
 9031 0170 13       		.uleb128 0x13
 9032 0171 00       		.byte	0
 9033 0172 00       		.byte	0
 9034 0173 1D       		.uleb128 0x1d
 9035 0174 1D       		.uleb128 0x1d
 9036 0175 01       		.byte	0x1
 9037 0176 31       		.uleb128 0x31
 9038 0177 13       		.uleb128 0x13
 9039 0178 11       		.uleb128 0x11
 9040 0179 01       		.uleb128 0x1
 9041 017a 12       		.uleb128 0x12
 9042 017b 06       		.uleb128 0x6
 9043 017c 58       		.uleb128 0x58
 9044 017d 0B       		.uleb128 0xb
 9045 017e 59       		.uleb128 0x59
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 202


 9046 017f 05       		.uleb128 0x5
 9047 0180 00       		.byte	0
 9048 0181 00       		.byte	0
 9049 0182 1E       		.uleb128 0x1e
 9050 0183 2E       		.uleb128 0x2e
 9051 0184 01       		.byte	0x1
 9052 0185 3F       		.uleb128 0x3f
 9053 0186 19       		.uleb128 0x19
 9054 0187 03       		.uleb128 0x3
 9055 0188 0E       		.uleb128 0xe
 9056 0189 3A       		.uleb128 0x3a
 9057 018a 0B       		.uleb128 0xb
 9058 018b 3B       		.uleb128 0x3b
 9059 018c 05       		.uleb128 0x5
 9060 018d 27       		.uleb128 0x27
 9061 018e 19       		.uleb128 0x19
 9062 018f 11       		.uleb128 0x11
 9063 0190 01       		.uleb128 0x1
 9064 0191 12       		.uleb128 0x12
 9065 0192 06       		.uleb128 0x6
 9066 0193 40       		.uleb128 0x40
 9067 0194 18       		.uleb128 0x18
 9068 0195 9642     		.uleb128 0x2116
 9069 0197 19       		.uleb128 0x19
 9070 0198 01       		.uleb128 0x1
 9071 0199 13       		.uleb128 0x13
 9072 019a 00       		.byte	0
 9073 019b 00       		.byte	0
 9074 019c 1F       		.uleb128 0x1f
 9075 019d 34       		.uleb128 0x34
 9076 019e 00       		.byte	0
 9077 019f 03       		.uleb128 0x3
 9078 01a0 0E       		.uleb128 0xe
 9079 01a1 3A       		.uleb128 0x3a
 9080 01a2 0B       		.uleb128 0xb
 9081 01a3 3B       		.uleb128 0x3b
 9082 01a4 05       		.uleb128 0x5
 9083 01a5 49       		.uleb128 0x49
 9084 01a6 13       		.uleb128 0x13
 9085 01a7 02       		.uleb128 0x2
 9086 01a8 18       		.uleb128 0x18
 9087 01a9 00       		.byte	0
 9088 01aa 00       		.byte	0
 9089 01ab 20       		.uleb128 0x20
 9090 01ac 21       		.uleb128 0x21
 9091 01ad 00       		.byte	0
 9092 01ae 49       		.uleb128 0x49
 9093 01af 13       		.uleb128 0x13
 9094 01b0 2F       		.uleb128 0x2f
 9095 01b1 05       		.uleb128 0x5
 9096 01b2 00       		.byte	0
 9097 01b3 00       		.byte	0
 9098 01b4 21       		.uleb128 0x21
 9099 01b5 2E       		.uleb128 0x2e
 9100 01b6 01       		.byte	0x1
 9101 01b7 3F       		.uleb128 0x3f
 9102 01b8 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 203


 9103 01b9 03       		.uleb128 0x3
 9104 01ba 0E       		.uleb128 0xe
 9105 01bb 3A       		.uleb128 0x3a
 9106 01bc 0B       		.uleb128 0xb
 9107 01bd 3B       		.uleb128 0x3b
 9108 01be 05       		.uleb128 0x5
 9109 01bf 27       		.uleb128 0x27
 9110 01c0 19       		.uleb128 0x19
 9111 01c1 49       		.uleb128 0x49
 9112 01c2 13       		.uleb128 0x13
 9113 01c3 11       		.uleb128 0x11
 9114 01c4 01       		.uleb128 0x1
 9115 01c5 12       		.uleb128 0x12
 9116 01c6 06       		.uleb128 0x6
 9117 01c7 40       		.uleb128 0x40
 9118 01c8 18       		.uleb128 0x18
 9119 01c9 9742     		.uleb128 0x2117
 9120 01cb 19       		.uleb128 0x19
 9121 01cc 01       		.uleb128 0x1
 9122 01cd 13       		.uleb128 0x13
 9123 01ce 00       		.byte	0
 9124 01cf 00       		.byte	0
 9125 01d0 22       		.uleb128 0x22
 9126 01d1 05       		.uleb128 0x5
 9127 01d2 00       		.byte	0
 9128 01d3 03       		.uleb128 0x3
 9129 01d4 0E       		.uleb128 0xe
 9130 01d5 3A       		.uleb128 0x3a
 9131 01d6 0B       		.uleb128 0xb
 9132 01d7 3B       		.uleb128 0x3b
 9133 01d8 05       		.uleb128 0x5
 9134 01d9 49       		.uleb128 0x49
 9135 01da 13       		.uleb128 0x13
 9136 01db 02       		.uleb128 0x2
 9137 01dc 18       		.uleb128 0x18
 9138 01dd 00       		.byte	0
 9139 01de 00       		.byte	0
 9140 01df 23       		.uleb128 0x23
 9141 01e0 34       		.uleb128 0x34
 9142 01e1 00       		.byte	0
 9143 01e2 03       		.uleb128 0x3
 9144 01e3 08       		.uleb128 0x8
 9145 01e4 3A       		.uleb128 0x3a
 9146 01e5 0B       		.uleb128 0xb
 9147 01e6 3B       		.uleb128 0x3b
 9148 01e7 05       		.uleb128 0x5
 9149 01e8 49       		.uleb128 0x49
 9150 01e9 13       		.uleb128 0x13
 9151 01ea 02       		.uleb128 0x2
 9152 01eb 18       		.uleb128 0x18
 9153 01ec 00       		.byte	0
 9154 01ed 00       		.byte	0
 9155 01ee 24       		.uleb128 0x24
 9156 01ef 0B       		.uleb128 0xb
 9157 01f0 01       		.byte	0x1
 9158 01f1 11       		.uleb128 0x11
 9159 01f2 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 204


 9160 01f3 12       		.uleb128 0x12
 9161 01f4 06       		.uleb128 0x6
 9162 01f5 01       		.uleb128 0x1
 9163 01f6 13       		.uleb128 0x13
 9164 01f7 00       		.byte	0
 9165 01f8 00       		.byte	0
 9166 01f9 25       		.uleb128 0x25
 9167 01fa 21       		.uleb128 0x21
 9168 01fb 00       		.byte	0
 9169 01fc 49       		.uleb128 0x49
 9170 01fd 13       		.uleb128 0x13
 9171 01fe 2F       		.uleb128 0x2f
 9172 01ff 18       		.uleb128 0x18
 9173 0200 00       		.byte	0
 9174 0201 00       		.byte	0
 9175 0202 26       		.uleb128 0x26
 9176 0203 2E       		.uleb128 0x2e
 9177 0204 01       		.byte	0x1
 9178 0205 3F       		.uleb128 0x3f
 9179 0206 19       		.uleb128 0x19
 9180 0207 03       		.uleb128 0x3
 9181 0208 0E       		.uleb128 0xe
 9182 0209 3A       		.uleb128 0x3a
 9183 020a 0B       		.uleb128 0xb
 9184 020b 3B       		.uleb128 0x3b
 9185 020c 05       		.uleb128 0x5
 9186 020d 27       		.uleb128 0x27
 9187 020e 19       		.uleb128 0x19
 9188 020f 11       		.uleb128 0x11
 9189 0210 01       		.uleb128 0x1
 9190 0211 12       		.uleb128 0x12
 9191 0212 06       		.uleb128 0x6
 9192 0213 40       		.uleb128 0x40
 9193 0214 18       		.uleb128 0x18
 9194 0215 9742     		.uleb128 0x2117
 9195 0217 19       		.uleb128 0x19
 9196 0218 01       		.uleb128 0x1
 9197 0219 13       		.uleb128 0x13
 9198 021a 00       		.byte	0
 9199 021b 00       		.byte	0
 9200 021c 27       		.uleb128 0x27
 9201 021d 2E       		.uleb128 0x2e
 9202 021e 00       		.byte	0
 9203 021f 3F       		.uleb128 0x3f
 9204 0220 19       		.uleb128 0x19
 9205 0221 03       		.uleb128 0x3
 9206 0222 0E       		.uleb128 0xe
 9207 0223 3A       		.uleb128 0x3a
 9208 0224 0B       		.uleb128 0xb
 9209 0225 3B       		.uleb128 0x3b
 9210 0226 05       		.uleb128 0x5
 9211 0227 11       		.uleb128 0x11
 9212 0228 01       		.uleb128 0x1
 9213 0229 12       		.uleb128 0x12
 9214 022a 06       		.uleb128 0x6
 9215 022b 40       		.uleb128 0x40
 9216 022c 18       		.uleb128 0x18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 205


 9217 022d 9742     		.uleb128 0x2117
 9218 022f 19       		.uleb128 0x19
 9219 0230 00       		.byte	0
 9220 0231 00       		.byte	0
 9221 0232 28       		.uleb128 0x28
 9222 0233 05       		.uleb128 0x5
 9223 0234 00       		.byte	0
 9224 0235 03       		.uleb128 0x3
 9225 0236 08       		.uleb128 0x8
 9226 0237 3A       		.uleb128 0x3a
 9227 0238 0B       		.uleb128 0xb
 9228 0239 3B       		.uleb128 0x3b
 9229 023a 05       		.uleb128 0x5
 9230 023b 49       		.uleb128 0x49
 9231 023c 13       		.uleb128 0x13
 9232 023d 02       		.uleb128 0x2
 9233 023e 18       		.uleb128 0x18
 9234 023f 00       		.byte	0
 9235 0240 00       		.byte	0
 9236 0241 29       		.uleb128 0x29
 9237 0242 2E       		.uleb128 0x2e
 9238 0243 01       		.byte	0x1
 9239 0244 3F       		.uleb128 0x3f
 9240 0245 19       		.uleb128 0x19
 9241 0246 03       		.uleb128 0x3
 9242 0247 0E       		.uleb128 0xe
 9243 0248 3A       		.uleb128 0x3a
 9244 0249 0B       		.uleb128 0xb
 9245 024a 3B       		.uleb128 0x3b
 9246 024b 05       		.uleb128 0x5
 9247 024c 27       		.uleb128 0x27
 9248 024d 19       		.uleb128 0x19
 9249 024e 49       		.uleb128 0x49
 9250 024f 13       		.uleb128 0x13
 9251 0250 11       		.uleb128 0x11
 9252 0251 01       		.uleb128 0x1
 9253 0252 12       		.uleb128 0x12
 9254 0253 06       		.uleb128 0x6
 9255 0254 40       		.uleb128 0x40
 9256 0255 18       		.uleb128 0x18
 9257 0256 9642     		.uleb128 0x2116
 9258 0258 19       		.uleb128 0x19
 9259 0259 01       		.uleb128 0x1
 9260 025a 13       		.uleb128 0x13
 9261 025b 00       		.byte	0
 9262 025c 00       		.byte	0
 9263 025d 2A       		.uleb128 0x2a
 9264 025e 2E       		.uleb128 0x2e
 9265 025f 00       		.byte	0
 9266 0260 3F       		.uleb128 0x3f
 9267 0261 19       		.uleb128 0x19
 9268 0262 03       		.uleb128 0x3
 9269 0263 0E       		.uleb128 0xe
 9270 0264 3A       		.uleb128 0x3a
 9271 0265 0B       		.uleb128 0xb
 9272 0266 3B       		.uleb128 0x3b
 9273 0267 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 206


 9274 0268 27       		.uleb128 0x27
 9275 0269 19       		.uleb128 0x19
 9276 026a 49       		.uleb128 0x49
 9277 026b 13       		.uleb128 0x13
 9278 026c 11       		.uleb128 0x11
 9279 026d 01       		.uleb128 0x1
 9280 026e 12       		.uleb128 0x12
 9281 026f 06       		.uleb128 0x6
 9282 0270 40       		.uleb128 0x40
 9283 0271 18       		.uleb128 0x18
 9284 0272 9642     		.uleb128 0x2116
 9285 0274 19       		.uleb128 0x19
 9286 0275 00       		.byte	0
 9287 0276 00       		.byte	0
 9288 0277 2B       		.uleb128 0x2b
 9289 0278 2E       		.uleb128 0x2e
 9290 0279 00       		.byte	0
 9291 027a 3F       		.uleb128 0x3f
 9292 027b 19       		.uleb128 0x19
 9293 027c 03       		.uleb128 0x3
 9294 027d 0E       		.uleb128 0xe
 9295 027e 3A       		.uleb128 0x3a
 9296 027f 0B       		.uleb128 0xb
 9297 0280 3B       		.uleb128 0x3b
 9298 0281 05       		.uleb128 0x5
 9299 0282 27       		.uleb128 0x27
 9300 0283 19       		.uleb128 0x19
 9301 0284 11       		.uleb128 0x11
 9302 0285 01       		.uleb128 0x1
 9303 0286 12       		.uleb128 0x12
 9304 0287 06       		.uleb128 0x6
 9305 0288 40       		.uleb128 0x40
 9306 0289 18       		.uleb128 0x18
 9307 028a 9742     		.uleb128 0x2117
 9308 028c 19       		.uleb128 0x19
 9309 028d 00       		.byte	0
 9310 028e 00       		.byte	0
 9311 028f 2C       		.uleb128 0x2c
 9312 0290 2E       		.uleb128 0x2e
 9313 0291 01       		.byte	0x1
 9314 0292 3F       		.uleb128 0x3f
 9315 0293 19       		.uleb128 0x19
 9316 0294 03       		.uleb128 0x3
 9317 0295 0E       		.uleb128 0xe
 9318 0296 3A       		.uleb128 0x3a
 9319 0297 0B       		.uleb128 0xb
 9320 0298 3B       		.uleb128 0x3b
 9321 0299 05       		.uleb128 0x5
 9322 029a 11       		.uleb128 0x11
 9323 029b 01       		.uleb128 0x1
 9324 029c 12       		.uleb128 0x12
 9325 029d 06       		.uleb128 0x6
 9326 029e 40       		.uleb128 0x40
 9327 029f 18       		.uleb128 0x18
 9328 02a0 9642     		.uleb128 0x2116
 9329 02a2 19       		.uleb128 0x19
 9330 02a3 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 207


 9331 02a4 13       		.uleb128 0x13
 9332 02a5 00       		.byte	0
 9333 02a6 00       		.byte	0
 9334 02a7 2D       		.uleb128 0x2d
 9335 02a8 2E       		.uleb128 0x2e
 9336 02a9 01       		.byte	0x1
 9337 02aa 3F       		.uleb128 0x3f
 9338 02ab 19       		.uleb128 0x19
 9339 02ac 03       		.uleb128 0x3
 9340 02ad 0E       		.uleb128 0xe
 9341 02ae 3A       		.uleb128 0x3a
 9342 02af 0B       		.uleb128 0xb
 9343 02b0 3B       		.uleb128 0x3b
 9344 02b1 05       		.uleb128 0x5
 9345 02b2 49       		.uleb128 0x49
 9346 02b3 13       		.uleb128 0x13
 9347 02b4 11       		.uleb128 0x11
 9348 02b5 01       		.uleb128 0x1
 9349 02b6 12       		.uleb128 0x12
 9350 02b7 06       		.uleb128 0x6
 9351 02b8 40       		.uleb128 0x40
 9352 02b9 18       		.uleb128 0x18
 9353 02ba 9642     		.uleb128 0x2116
 9354 02bc 19       		.uleb128 0x19
 9355 02bd 01       		.uleb128 0x1
 9356 02be 13       		.uleb128 0x13
 9357 02bf 00       		.byte	0
 9358 02c0 00       		.byte	0
 9359 02c1 2E       		.uleb128 0x2e
 9360 02c2 2E       		.uleb128 0x2e
 9361 02c3 00       		.byte	0
 9362 02c4 3F       		.uleb128 0x3f
 9363 02c5 19       		.uleb128 0x19
 9364 02c6 03       		.uleb128 0x3
 9365 02c7 0E       		.uleb128 0xe
 9366 02c8 3A       		.uleb128 0x3a
 9367 02c9 0B       		.uleb128 0xb
 9368 02ca 3B       		.uleb128 0x3b
 9369 02cb 05       		.uleb128 0x5
 9370 02cc 49       		.uleb128 0x49
 9371 02cd 13       		.uleb128 0x13
 9372 02ce 11       		.uleb128 0x11
 9373 02cf 01       		.uleb128 0x1
 9374 02d0 12       		.uleb128 0x12
 9375 02d1 06       		.uleb128 0x6
 9376 02d2 40       		.uleb128 0x40
 9377 02d3 18       		.uleb128 0x18
 9378 02d4 9742     		.uleb128 0x2117
 9379 02d6 19       		.uleb128 0x19
 9380 02d7 00       		.byte	0
 9381 02d8 00       		.byte	0
 9382 02d9 2F       		.uleb128 0x2f
 9383 02da 2E       		.uleb128 0x2e
 9384 02db 00       		.byte	0
 9385 02dc 3F       		.uleb128 0x3f
 9386 02dd 19       		.uleb128 0x19
 9387 02de 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 208


 9388 02df 0E       		.uleb128 0xe
 9389 02e0 3A       		.uleb128 0x3a
 9390 02e1 0B       		.uleb128 0xb
 9391 02e2 3B       		.uleb128 0x3b
 9392 02e3 05       		.uleb128 0x5
 9393 02e4 11       		.uleb128 0x11
 9394 02e5 01       		.uleb128 0x1
 9395 02e6 12       		.uleb128 0x12
 9396 02e7 06       		.uleb128 0x6
 9397 02e8 40       		.uleb128 0x40
 9398 02e9 18       		.uleb128 0x18
 9399 02ea 9642     		.uleb128 0x2116
 9400 02ec 19       		.uleb128 0x19
 9401 02ed 00       		.byte	0
 9402 02ee 00       		.byte	0
 9403 02ef 30       		.uleb128 0x30
 9404 02f0 34       		.uleb128 0x34
 9405 02f1 00       		.byte	0
 9406 02f2 03       		.uleb128 0x3
 9407 02f3 0E       		.uleb128 0xe
 9408 02f4 3A       		.uleb128 0x3a
 9409 02f5 0B       		.uleb128 0xb
 9410 02f6 3B       		.uleb128 0x3b
 9411 02f7 05       		.uleb128 0x5
 9412 02f8 49       		.uleb128 0x49
 9413 02f9 13       		.uleb128 0x13
 9414 02fa 3F       		.uleb128 0x3f
 9415 02fb 19       		.uleb128 0x19
 9416 02fc 3C       		.uleb128 0x3c
 9417 02fd 19       		.uleb128 0x19
 9418 02fe 00       		.byte	0
 9419 02ff 00       		.byte	0
 9420 0300 31       		.uleb128 0x31
 9421 0301 34       		.uleb128 0x34
 9422 0302 00       		.byte	0
 9423 0303 03       		.uleb128 0x3
 9424 0304 0E       		.uleb128 0xe
 9425 0305 3A       		.uleb128 0x3a
 9426 0306 0B       		.uleb128 0xb
 9427 0307 3B       		.uleb128 0x3b
 9428 0308 0B       		.uleb128 0xb
 9429 0309 49       		.uleb128 0x49
 9430 030a 13       		.uleb128 0x13
 9431 030b 3F       		.uleb128 0x3f
 9432 030c 19       		.uleb128 0x19
 9433 030d 02       		.uleb128 0x2
 9434 030e 18       		.uleb128 0x18
 9435 030f 00       		.byte	0
 9436 0310 00       		.byte	0
 9437 0311 00       		.byte	0
 9438              		.section	.debug_aranges,"",%progbits
 9439 0000 04020000 		.4byte	0x204
 9440 0004 0200     		.2byte	0x2
 9441 0006 00000000 		.4byte	.Ldebug_info0
 9442 000a 04       		.byte	0x4
 9443 000b 00       		.byte	0
 9444 000c 0000     		.2byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 209


 9445 000e 0000     		.2byte	0
 9446 0010 00000000 		.4byte	.LFB64
 9447 0014 68060000 		.4byte	.LFE64-.LFB64
 9448 0018 00000000 		.4byte	.LFB65
 9449 001c 22000000 		.4byte	.LFE65-.LFB65
 9450 0020 00000000 		.4byte	.LFB66
 9451 0024 5E000000 		.4byte	.LFE66-.LFB66
 9452 0028 00000000 		.4byte	.LFB67
 9453 002c 64010000 		.4byte	.LFE67-.LFB67
 9454 0030 00000000 		.4byte	.LFB68
 9455 0034 BC070000 		.4byte	.LFE68-.LFB68
 9456 0038 00000000 		.4byte	.LFB69
 9457 003c 84060000 		.4byte	.LFE69-.LFB69
 9458 0040 00000000 		.4byte	.LFB70
 9459 0044 34010000 		.4byte	.LFE70-.LFB70
 9460 0048 00000000 		.4byte	.LFB71
 9461 004c 14000000 		.4byte	.LFE71-.LFB71
 9462 0050 00000000 		.4byte	.LFB72
 9463 0054 0C000000 		.4byte	.LFE72-.LFB72
 9464 0058 00000000 		.4byte	.LFB73
 9465 005c 12000000 		.4byte	.LFE73-.LFB73
 9466 0060 00000000 		.4byte	.LFB74
 9467 0064 12000000 		.4byte	.LFE74-.LFB74
 9468 0068 00000000 		.4byte	.LFB75
 9469 006c 12000000 		.4byte	.LFE75-.LFB75
 9470 0070 00000000 		.4byte	.LFB76
 9471 0074 12000000 		.4byte	.LFE76-.LFB76
 9472 0078 00000000 		.4byte	.LFB77
 9473 007c 12000000 		.4byte	.LFE77-.LFB77
 9474 0080 00000000 		.4byte	.LFB78
 9475 0084 12000000 		.4byte	.LFE78-.LFB78
 9476 0088 00000000 		.4byte	.LFB79
 9477 008c 12000000 		.4byte	.LFE79-.LFB79
 9478 0090 00000000 		.4byte	.LFB80
 9479 0094 12000000 		.4byte	.LFE80-.LFB80
 9480 0098 00000000 		.4byte	.LFB81
 9481 009c 84000000 		.4byte	.LFE81-.LFB81
 9482 00a0 00000000 		.4byte	.LFB82
 9483 00a4 88000000 		.4byte	.LFE82-.LFB82
 9484 00a8 00000000 		.4byte	.LFB83
 9485 00ac A0000000 		.4byte	.LFE83-.LFB83
 9486 00b0 00000000 		.4byte	.LFB84
 9487 00b4 3E000000 		.4byte	.LFE84-.LFB84
 9488 00b8 00000000 		.4byte	.LFB85
 9489 00bc 2E000000 		.4byte	.LFE85-.LFB85
 9490 00c0 00000000 		.4byte	.LFB86
 9491 00c4 90000000 		.4byte	.LFE86-.LFB86
 9492 00c8 00000000 		.4byte	.LFB87
 9493 00cc 60000000 		.4byte	.LFE87-.LFB87
 9494 00d0 00000000 		.4byte	.LFB88
 9495 00d4 58000000 		.4byte	.LFE88-.LFB88
 9496 00d8 00000000 		.4byte	.LFB89
 9497 00dc D0000000 		.4byte	.LFE89-.LFB89
 9498 00e0 00000000 		.4byte	.LFB90
 9499 00e4 0C000000 		.4byte	.LFE90-.LFB90
 9500 00e8 00000000 		.4byte	.LFB91
 9501 00ec 0C000000 		.4byte	.LFE91-.LFB91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 210


 9502 00f0 00000000 		.4byte	.LFB92
 9503 00f4 0C000000 		.4byte	.LFE92-.LFB92
 9504 00f8 00000000 		.4byte	.LFB93
 9505 00fc 0C000000 		.4byte	.LFE93-.LFB93
 9506 0100 00000000 		.4byte	.LFB94
 9507 0104 0C000000 		.4byte	.LFE94-.LFB94
 9508 0108 00000000 		.4byte	.LFB95
 9509 010c 0C000000 		.4byte	.LFE95-.LFB95
 9510 0110 00000000 		.4byte	.LFB96
 9511 0114 0C000000 		.4byte	.LFE96-.LFB96
 9512 0118 00000000 		.4byte	.LFB97
 9513 011c 0C000000 		.4byte	.LFE97-.LFB97
 9514 0120 00000000 		.4byte	.LFB98
 9515 0124 0C000000 		.4byte	.LFE98-.LFB98
 9516 0128 00000000 		.4byte	.LFB99
 9517 012c 0C000000 		.4byte	.LFE99-.LFB99
 9518 0130 00000000 		.4byte	.LFB100
 9519 0134 0C000000 		.4byte	.LFE100-.LFB100
 9520 0138 00000000 		.4byte	.LFB101
 9521 013c 0C000000 		.4byte	.LFE101-.LFB101
 9522 0140 00000000 		.4byte	.LFB102
 9523 0144 0C000000 		.4byte	.LFE102-.LFB102
 9524 0148 00000000 		.4byte	.LFB103
 9525 014c 0C000000 		.4byte	.LFE103-.LFB103
 9526 0150 00000000 		.4byte	.LFB104
 9527 0154 0C000000 		.4byte	.LFE104-.LFB104
 9528 0158 00000000 		.4byte	.LFB105
 9529 015c C4000000 		.4byte	.LFE105-.LFB105
 9530 0160 00000000 		.4byte	.LFB106
 9531 0164 A8000000 		.4byte	.LFE106-.LFB106
 9532 0168 00000000 		.4byte	.LFB107
 9533 016c 0C000000 		.4byte	.LFE107-.LFB107
 9534 0170 00000000 		.4byte	.LFB108
 9535 0174 20000000 		.4byte	.LFE108-.LFB108
 9536 0178 00000000 		.4byte	.LFB109
 9537 017c 0C000000 		.4byte	.LFE109-.LFB109
 9538 0180 00000000 		.4byte	.LFB110
 9539 0184 0C000000 		.4byte	.LFE110-.LFB110
 9540 0188 00000000 		.4byte	.LFB111
 9541 018c 60000000 		.4byte	.LFE111-.LFB111
 9542 0190 00000000 		.4byte	.LFB112
 9543 0194 0C000000 		.4byte	.LFE112-.LFB112
 9544 0198 00000000 		.4byte	.LFB113
 9545 019c 0C000000 		.4byte	.LFE113-.LFB113
 9546 01a0 00000000 		.4byte	.LFB114
 9547 01a4 0C000000 		.4byte	.LFE114-.LFB114
 9548 01a8 00000000 		.4byte	.LFB115
 9549 01ac 0C000000 		.4byte	.LFE115-.LFB115
 9550 01b0 00000000 		.4byte	.LFB116
 9551 01b4 0C000000 		.4byte	.LFE116-.LFB116
 9552 01b8 00000000 		.4byte	.LFB117
 9553 01bc 54010000 		.4byte	.LFE117-.LFB117
 9554 01c0 00000000 		.4byte	.LFB118
 9555 01c4 14000000 		.4byte	.LFE118-.LFB118
 9556 01c8 00000000 		.4byte	.LFB119
 9557 01cc 50010000 		.4byte	.LFE119-.LFB119
 9558 01d0 00000000 		.4byte	.LFB120
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 211


 9559 01d4 9C010000 		.4byte	.LFE120-.LFB120
 9560 01d8 00000000 		.4byte	.LFB121
 9561 01dc 0E000000 		.4byte	.LFE121-.LFB121
 9562 01e0 00000000 		.4byte	.LFB122
 9563 01e4 12000000 		.4byte	.LFE122-.LFB122
 9564 01e8 00000000 		.4byte	.LFB123
 9565 01ec 1A000000 		.4byte	.LFE123-.LFB123
 9566 01f0 00000000 		.4byte	.LFB124
 9567 01f4 30000000 		.4byte	.LFE124-.LFB124
 9568 01f8 00000000 		.4byte	.LFB125
 9569 01fc 0C000000 		.4byte	.LFE125-.LFB125
 9570 0200 00000000 		.4byte	0
 9571 0204 00000000 		.4byte	0
 9572              		.section	.debug_ranges,"",%progbits
 9573              	.Ldebug_ranges0:
 9574 0000 00000000 		.4byte	.LFB64
 9575 0004 68060000 		.4byte	.LFE64
 9576 0008 00000000 		.4byte	.LFB65
 9577 000c 22000000 		.4byte	.LFE65
 9578 0010 00000000 		.4byte	.LFB66
 9579 0014 5E000000 		.4byte	.LFE66
 9580 0018 00000000 		.4byte	.LFB67
 9581 001c 64010000 		.4byte	.LFE67
 9582 0020 00000000 		.4byte	.LFB68
 9583 0024 BC070000 		.4byte	.LFE68
 9584 0028 00000000 		.4byte	.LFB69
 9585 002c 84060000 		.4byte	.LFE69
 9586 0030 00000000 		.4byte	.LFB70
 9587 0034 34010000 		.4byte	.LFE70
 9588 0038 00000000 		.4byte	.LFB71
 9589 003c 14000000 		.4byte	.LFE71
 9590 0040 00000000 		.4byte	.LFB72
 9591 0044 0C000000 		.4byte	.LFE72
 9592 0048 00000000 		.4byte	.LFB73
 9593 004c 12000000 		.4byte	.LFE73
 9594 0050 00000000 		.4byte	.LFB74
 9595 0054 12000000 		.4byte	.LFE74
 9596 0058 00000000 		.4byte	.LFB75
 9597 005c 12000000 		.4byte	.LFE75
 9598 0060 00000000 		.4byte	.LFB76
 9599 0064 12000000 		.4byte	.LFE76
 9600 0068 00000000 		.4byte	.LFB77
 9601 006c 12000000 		.4byte	.LFE77
 9602 0070 00000000 		.4byte	.LFB78
 9603 0074 12000000 		.4byte	.LFE78
 9604 0078 00000000 		.4byte	.LFB79
 9605 007c 12000000 		.4byte	.LFE79
 9606 0080 00000000 		.4byte	.LFB80
 9607 0084 12000000 		.4byte	.LFE80
 9608 0088 00000000 		.4byte	.LFB81
 9609 008c 84000000 		.4byte	.LFE81
 9610 0090 00000000 		.4byte	.LFB82
 9611 0094 88000000 		.4byte	.LFE82
 9612 0098 00000000 		.4byte	.LFB83
 9613 009c A0000000 		.4byte	.LFE83
 9614 00a0 00000000 		.4byte	.LFB84
 9615 00a4 3E000000 		.4byte	.LFE84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 212


 9616 00a8 00000000 		.4byte	.LFB85
 9617 00ac 2E000000 		.4byte	.LFE85
 9618 00b0 00000000 		.4byte	.LFB86
 9619 00b4 90000000 		.4byte	.LFE86
 9620 00b8 00000000 		.4byte	.LFB87
 9621 00bc 60000000 		.4byte	.LFE87
 9622 00c0 00000000 		.4byte	.LFB88
 9623 00c4 58000000 		.4byte	.LFE88
 9624 00c8 00000000 		.4byte	.LFB89
 9625 00cc D0000000 		.4byte	.LFE89
 9626 00d0 00000000 		.4byte	.LFB90
 9627 00d4 0C000000 		.4byte	.LFE90
 9628 00d8 00000000 		.4byte	.LFB91
 9629 00dc 0C000000 		.4byte	.LFE91
 9630 00e0 00000000 		.4byte	.LFB92
 9631 00e4 0C000000 		.4byte	.LFE92
 9632 00e8 00000000 		.4byte	.LFB93
 9633 00ec 0C000000 		.4byte	.LFE93
 9634 00f0 00000000 		.4byte	.LFB94
 9635 00f4 0C000000 		.4byte	.LFE94
 9636 00f8 00000000 		.4byte	.LFB95
 9637 00fc 0C000000 		.4byte	.LFE95
 9638 0100 00000000 		.4byte	.LFB96
 9639 0104 0C000000 		.4byte	.LFE96
 9640 0108 00000000 		.4byte	.LFB97
 9641 010c 0C000000 		.4byte	.LFE97
 9642 0110 00000000 		.4byte	.LFB98
 9643 0114 0C000000 		.4byte	.LFE98
 9644 0118 00000000 		.4byte	.LFB99
 9645 011c 0C000000 		.4byte	.LFE99
 9646 0120 00000000 		.4byte	.LFB100
 9647 0124 0C000000 		.4byte	.LFE100
 9648 0128 00000000 		.4byte	.LFB101
 9649 012c 0C000000 		.4byte	.LFE101
 9650 0130 00000000 		.4byte	.LFB102
 9651 0134 0C000000 		.4byte	.LFE102
 9652 0138 00000000 		.4byte	.LFB103
 9653 013c 0C000000 		.4byte	.LFE103
 9654 0140 00000000 		.4byte	.LFB104
 9655 0144 0C000000 		.4byte	.LFE104
 9656 0148 00000000 		.4byte	.LFB105
 9657 014c C4000000 		.4byte	.LFE105
 9658 0150 00000000 		.4byte	.LFB106
 9659 0154 A8000000 		.4byte	.LFE106
 9660 0158 00000000 		.4byte	.LFB107
 9661 015c 0C000000 		.4byte	.LFE107
 9662 0160 00000000 		.4byte	.LFB108
 9663 0164 20000000 		.4byte	.LFE108
 9664 0168 00000000 		.4byte	.LFB109
 9665 016c 0C000000 		.4byte	.LFE109
 9666 0170 00000000 		.4byte	.LFB110
 9667 0174 0C000000 		.4byte	.LFE110
 9668 0178 00000000 		.4byte	.LFB111
 9669 017c 60000000 		.4byte	.LFE111
 9670 0180 00000000 		.4byte	.LFB112
 9671 0184 0C000000 		.4byte	.LFE112
 9672 0188 00000000 		.4byte	.LFB113
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 213


 9673 018c 0C000000 		.4byte	.LFE113
 9674 0190 00000000 		.4byte	.LFB114
 9675 0194 0C000000 		.4byte	.LFE114
 9676 0198 00000000 		.4byte	.LFB115
 9677 019c 0C000000 		.4byte	.LFE115
 9678 01a0 00000000 		.4byte	.LFB116
 9679 01a4 0C000000 		.4byte	.LFE116
 9680 01a8 00000000 		.4byte	.LFB117
 9681 01ac 54010000 		.4byte	.LFE117
 9682 01b0 00000000 		.4byte	.LFB118
 9683 01b4 14000000 		.4byte	.LFE118
 9684 01b8 00000000 		.4byte	.LFB119
 9685 01bc 50010000 		.4byte	.LFE119
 9686 01c0 00000000 		.4byte	.LFB120
 9687 01c4 9C010000 		.4byte	.LFE120
 9688 01c8 00000000 		.4byte	.LFB121
 9689 01cc 0E000000 		.4byte	.LFE121
 9690 01d0 00000000 		.4byte	.LFB122
 9691 01d4 12000000 		.4byte	.LFE122
 9692 01d8 00000000 		.4byte	.LFB123
 9693 01dc 1A000000 		.4byte	.LFE123
 9694 01e0 00000000 		.4byte	.LFB124
 9695 01e4 30000000 		.4byte	.LFE124
 9696 01e8 00000000 		.4byte	.LFB125
 9697 01ec 0C000000 		.4byte	.LFE125
 9698 01f0 00000000 		.4byte	0
 9699 01f4 00000000 		.4byte	0
 9700              		.section	.debug_line,"",%progbits
 9701              	.Ldebug_line0:
 9702 0000 180A0000 		.section	.debug_str,"MS",%progbits,1
 9702      02008B01 
 9702      00000201 
 9702      FB0E0D00 
 9702      01010101 
 9703              	.LASF166:
 9704 0000 696E666F 		.ascii	"infoSend\000"
 9704      53656E64 
 9704      00
 9705              	.LASF46:
 9706 0009 4D454E55 		.ascii	"MENU_Y_N\000"
 9706      5F595F4E 
 9706      00
 9707              	.LASF180:
 9708 0012 73747269 		.ascii	"string_length\000"
 9708      6E675F6C 
 9708      656E6774 
 9708      6800
 9709              	.LASF23:
 9710 0020 73697A65 		.ascii	"sizetype\000"
 9710      74797065 
 9710      00
 9711              	.LASF64:
 9712 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 9712      494E4954 
 9712      5F4D454D 
 9712      00
 9713              	.LASF97:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 214


 9714 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 9714      545F4D4F 
 9714      44455F45 
 9714      4D475F46 
 9714      4346535F 
 9715              	.LASF44:
 9716 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 9716      5F494E50 
 9716      555400
 9717              	.LASF272:
 9718 0059 73746F70 		.ascii	"stop_master_device\000"
 9718      5F6D6173 
 9718      7465725F 
 9718      64657669 
 9718      636500
 9719              	.LASF11:
 9720 006c 696E7433 		.ascii	"int32_t\000"
 9720      325F7400 
 9721              	.LASF278:
 9722 0074 675F7278 		.ascii	"g_rx\000"
 9722      00
 9723              	.LASF119:
 9724 0079 73745F64 		.ascii	"st_data\000"
 9724      61746100 
 9725              	.LASF219:
 9726 0081 77726974 		.ascii	"writeStatus\000"
 9726      65537461 
 9726      74757300 
 9727              	.LASF15:
 9728 008d 75696E74 		.ascii	"uint32\000"
 9728      333200
 9729              	.LASF245:
 9730 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 9730      7365745F 
 9730      62617564 
 9730      72617465 
 9730      00
 9731              	.LASF262:
 9732 00a5 6169725F 		.ascii	"air_chambers_control\000"
 9732      6368616D 
 9732      62657273 
 9732      5F636F6E 
 9732      74726F6C 
 9733              	.LASF197:
 9734 00ba 70726570 		.ascii	"prepare_generic_info\000"
 9734      6172655F 
 9734      67656E65 
 9734      7269635F 
 9734      696E666F 
 9735              	.LASF192:
 9736 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 9736      4D454E55 
 9736      7300
 9737              	.LASF127:
 9738 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 9738      6C696D5F 
 9738      696E6600 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 215


 9739              	.LASF170:
 9740 00e5 54595045 		.ascii	"TYPE\000"
 9740      00
 9741              	.LASF155:
 9742 00ea 63686F69 		.ascii	"choice\000"
 9742      636500
 9743              	.LASF32:
 9744 00f1 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 9744      4F4D5F52 
 9744      45534554 
 9744      5F434F55 
 9744      4E5400
 9745              	.LASF96:
 9746 0104 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 9746      545F4D4F 
 9746      44455F45 
 9746      4D475F46 
 9746      43465300 
 9747              	.LASF149:
 9748 0118 64697265 		.ascii	"direction\000"
 9748      6374696F 
 9748      6E00
 9749              	.LASF252:
 9750 0122 636D645F 		.ascii	"cmd_get_imu_readings\000"
 9750      6765745F 
 9750      696D755F 
 9750      72656164 
 9750      696E6773 
 9751              	.LASF135:
 9752 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 9752      41535445 
 9752      525F7370 
 9752      656300
 9753              	.LASF160:
 9754 0146 50415241 		.ascii	"PARAM_STR\000"
 9754      4D5F5354 
 9754      5200
 9755              	.LASF95:
 9756 0150 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 9756      545F4D4F 
 9756      44455F45 
 9756      4D475F49 
 9756      4E544547 
 9757              	.LASF190:
 9758 0168 50415241 		.ascii	"PARAM_IDX\000"
 9758      4D5F4944 
 9758      5800
 9759              	.LASF173:
 9760 0172 6765745F 		.ascii	"get_param_list\000"
 9760      70617261 
 9760      6D5F6C69 
 9760      737400
 9761              	.LASF231:
 9762 0181 636D645F 		.ascii	"cmd_get_accelerations\000"
 9762      6765745F 
 9762      61636365 
 9762      6C657261 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 216


 9762      74696F6E 
 9763              	.LASF250:
 9764 0197 636D645F 		.ascii	"cmd_get_emg\000"
 9764      6765745F 
 9764      656D6700 
 9765              	.LASF130:
 9766 01a3 73745F65 		.ascii	"st_emg\000"
 9766      6D6700
 9767              	.LASF38:
 9768 01aa 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 9768      4F4D5F4D 
 9768      4541535F 
 9768      4F46465F 
 9768      3200
 9769              	.LASF296:
 9770 01bc 72657375 		.ascii	"result\000"
 9770      6C7400
 9771              	.LASF122:
 9772 01c3 72656164 		.ascii	"ready\000"
 9772      7900
 9773              	.LASF182:
 9774 01c9 6175785F 		.ascii	"aux_str1\000"
 9774      73747231 
 9774      00
 9775              	.LASF28:
 9776 01d2 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 9776      4F4D5F50 
 9776      4F535F4C 
 9776      494D00
 9777              	.LASF82:
 9778 01e1 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 9778      4745545F 
 9778      4A4F5953 
 9778      5449434B 
 9778      00
 9779              	.LASF94:
 9780 01f2 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 9780      545F4D4F 
 9780      44455F45 
 9780      4D475F50 
 9780      524F504F 
 9781              	.LASF240:
 9782 020e 745F7374 		.ascii	"t_start\000"
 9782      61727400 
 9783              	.LASF152:
 9784 0216 6D656E75 		.ascii	"menu\000"
 9784      00
 9785              	.LASF289:
 9786 021b 50574D5F 		.ascii	"PWM_IMU_1\000"
 9786      494D555F 
 9786      3100
 9787              	.LASF290:
 9788 0225 50574D5F 		.ascii	"PWM_IMU_2\000"
 9788      494D555F 
 9788      3200
 9789              	.LASF4:
 9790 022f 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 217


 9790      20696E74 
 9790      00
 9791              	.LASF36:
 9792 0238 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
 9792      4F4D5F43 
 9792      5552525F 
 9792      5049445F 
 9792      3200
 9793              	.LASF257:
 9794 024a 636D645F 		.ascii	"cmd_get_SD_file\000"
 9794      6765745F 
 9794      53445F66 
 9794      696C6500 
 9795              	.LASF226:
 9796 025a 7365745A 		.ascii	"setZeros\000"
 9796      65726F73 
 9796      00
 9797              	.LASF125:
 9798 0263 756E7573 		.ascii	"unused_bytes\000"
 9798      65645F62 
 9798      79746573 
 9798      00
 9799              	.LASF159:
 9800 0270 4E554D5F 		.ascii	"NUM_ITEMS\000"
 9800      4954454D 
 9800      5300
 9801              	.LASF191:
 9802 027a 4D454D5F 		.ascii	"MEM_P\000"
 9802      5000
 9803              	.LASF255:
 9804 0280 636D645F 		.ascii	"cmd_get_ADC_map\000"
 9804      6765745F 
 9804      4144435F 
 9804      6D617000 
 9805              	.LASF72:
 9806 0290 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 9806      4745545F 
 9806      43555252 
 9806      454E5453 
 9806      00
 9807              	.LASF204:
 9808 02a1 70726570 		.ascii	"prepare_SD_EMG_history\000"
 9808      6172655F 
 9808      53445F45 
 9808      4D475F68 
 9808      6973746F 
 9809              	.LASF256:
 9810 02b8 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 9810      6765745F 
 9810      4144435F 
 9810      72617700 
 9811              	.LASF285:
 9812 02c8 73645061 		.ascii	"sdParam\000"
 9812      72616D00 
 9813              	.LASF35:
 9814 02d0 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 9814      4F4D5F50 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 218


 9814      4F535F50 
 9814      49445F32 
 9814      00
 9815              	.LASF265:
 9816 02e1 70726573 		.ascii	"pressure_value\000"
 9816      73757265 
 9816      5F76616C 
 9816      756500
 9817              	.LASF247:
 9818 02f0 636D645F 		.ascii	"cmd_ping\000"
 9818      70696E67 
 9818      00
 9819              	.LASF26:
 9820 02f9 43555354 		.ascii	"CUSTOM_INPUT\000"
 9820      4F4D5F49 
 9820      4E505554 
 9820      00
 9821              	.LASF195:
 9822 0306 7365745F 		.ascii	"set_custom_param\000"
 9822      63757374 
 9822      6F6D5F70 
 9822      6172616D 
 9822      00
 9823              	.LASF260:
 9824 0317 636D645F 		.ascii	"cmd_remove_SD_file\000"
 9824      72656D6F 
 9824      76655F53 
 9824      445F6669 
 9824      6C6500
 9825              	.LASF40:
 9826 032a 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 9826      4F4D5F44 
 9826      52495645 
 9826      525F3200 
 9827              	.LASF0:
 9828 033a 7369676E 		.ascii	"signed char\000"
 9828      65642063 
 9828      68617200 
 9829              	.LASF136:
 9830 0346 6D617374 		.ascii	"master_mode_active\000"
 9830      65725F6D 
 9830      6F64655F 
 9830      61637469 
 9830      766500
 9831              	.LASF147:
 9832 0359 73745F63 		.ascii	"st_calib\000"
 9832      616C6962 
 9832      00
 9833              	.LASF217:
 9834 0362 6D656D53 		.ascii	"memStore\000"
 9834      746F7265 
 9834      00
 9835              	.LASF259:
 9836 036b 66696C65 		.ascii	"filename\000"
 9836      6E616D65 
 9836      00
 9837              	.LASF134:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 219


 9838 0374 73776974 		.ascii	"switch_emg\000"
 9838      63685F65 
 9838      6D6700
 9839              	.LASF242:
 9840 037f 72656164 		.ascii	"read_flag\000"
 9840      5F666C61 
 9840      6700
 9841              	.LASF282:
 9842 0389 696E7465 		.ascii	"interrupt_flag\000"
 9842      72727570 
 9842      745F666C 
 9842      616700
 9843              	.LASF45:
 9844 0398 4D454E55 		.ascii	"MENU_CTRL\000"
 9844      5F435452 
 9844      4C00
 9845              	.LASF1:
 9846 03a2 756E7369 		.ascii	"unsigned char\000"
 9846      676E6564 
 9846      20636861 
 9846      7200
 9847              	.LASF79:
 9848 03b0 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 9848      5345545F 
 9848      56494252 
 9848      4F544143 
 9848      54494C45 
 9849              	.LASF80:
 9850 03cc 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 9850      4745545F 
 9850      56494252 
 9850      4F544143 
 9850      54494C45 
 9851              	.LASF67:
 9852 03e8 434D445F 		.ascii	"CMD_ACTIVATE\000"
 9852      41435449 
 9852      56415445 
 9852      00
 9853              	.LASF275:
 9854 03f5 675F7265 		.ascii	"g_refNew\000"
 9854      664E6577 
 9854      00
 9855              	.LASF60:
 9856 03fe 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 9856      53544F52 
 9856      455F4445 
 9856      4641554C 
 9856      545F5041 
 9857              	.LASF31:
 9858 0417 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 9858      4F4D5F48 
 9858      414E445F 
 9858      53494445 
 9858      00
 9859              	.LASF216:
 9860 0428 76616C75 		.ascii	"value\000"
 9860      6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 220


 9861              	.LASF118:
 9862 042e 70726573 		.ascii	"pressure\000"
 9862      73757265 
 9862      00
 9863              	.LASF68:
 9864 0437 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 9864      4745545F 
 9864      41435449 
 9864      56415445 
 9864      00
 9865              	.LASF20:
 9866 0448 63686172 		.ascii	"char\000"
 9866      00
 9867              	.LASF266:
 9868 044d 76616C76 		.ascii	"valve_command\000"
 9868      655F636F 
 9868      6D6D616E 
 9868      6400
 9869              	.LASF263:
 9870 045b 70726573 		.ascii	"pressure_reference\000"
 9870      73757265 
 9870      5F726566 
 9870      6572656E 
 9870      636500
 9871              	.LASF221:
 9872 046e 7265745F 		.ascii	"ret_val\000"
 9872      76616C00 
 9873              	.LASF50:
 9874 0476 4D454E55 		.ascii	"MENU_SPI\000"
 9874      5F535049 
 9874      00
 9875              	.LASF156:
 9876 047f 70617261 		.ascii	"parameter\000"
 9876      6D657465 
 9876      7200
 9877              	.LASF117:
 9878 0489 73745F66 		.ascii	"st_fb_meas\000"
 9878      625F6D65 
 9878      617300
 9879              	.LASF168:
 9880 0494 7061636B 		.ascii	"packet_string\000"
 9880      65745F73 
 9880      7472696E 
 9880      6700
 9881              	.LASF33:
 9882 04a2 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 9882      4F4D5F4C 
 9882      4153545F 
 9882      43484543 
 9882      4B45445F 
 9883              	.LASF213:
 9884 04b8 64617461 		.ascii	"data_length\000"
 9884      5F6C656E 
 9884      67746800 
 9885              	.LASF128:
 9886 04c4 706F735F 		.ascii	"pos_lim_sup\000"
 9886      6C696D5F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 221


 9886      73757000 
 9887              	.LASF228:
 9888 04d0 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 9888      6E69745F 
 9888      4F74626B 
 9888      41637457 
 9888      72697374 
 9889              	.LASF133:
 9890 04e7 656D675F 		.ascii	"emg_speed\000"
 9890      73706565 
 9890      6400
 9891              	.LASF187:
 9892 04f1 7061636B 		.ascii	"packet_data\000"
 9892      65745F64 
 9892      61746100 
 9893              	.LASF123:
 9894 04fd 73745F64 		.ascii	"st_device\000"
 9894      65766963 
 9894      6500
 9895              	.LASF208:
 9896 0507 636F6D6D 		.ascii	"commWrite\000"
 9896      57726974 
 9896      6500
 9897              	.LASF273:
 9898 0511 64656163 		.ascii	"deactivate_slaves\000"
 9898      74697661 
 9898      74655F73 
 9898      6C617665 
 9898      7300
 9899              	.LASF220:
 9900 0523 70616765 		.ascii	"pages\000"
 9900      7300
 9901              	.LASF297:
 9902 0529 6D656D49 		.ascii	"memInit\000"
 9902      6E697400 
 9903              	.LASF43:
 9904 0531 6D656E75 		.ascii	"menu_type\000"
 9904      5F747970 
 9904      6500
 9905              	.LASF53:
 9906 053b 4D454E55 		.ascii	"MENU_DEVICE\000"
 9906      5F444556 
 9906      49434500 
 9907              	.LASF69:
 9908 0547 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 9908      5345545F 
 9908      494E5055 
 9908      545300
 9909              	.LASF120:
 9910 0556 62756666 		.ascii	"buffer\000"
 9910      657200
 9911              	.LASF244:
 9912 055d 63757272 		.ascii	"curr_diff\000"
 9912      5F646966 
 9912      6600
 9913              	.LASF229:
 9914 0567 636D645F 		.ascii	"cmd_get_measurements\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 222


 9914      6765745F 
 9914      6D656173 
 9914      7572656D 
 9914      656E7473 
 9915              	.LASF150:
 9916 057c 73706565 		.ascii	"speed\000"
 9916      6400
 9917              	.LASF167:
 9918 0582 72785F63 		.ascii	"rx_cmd\000"
 9918      6D6400
 9919              	.LASF112:
 9920 0589 54595045 		.ascii	"TYPE_DOUBLE\000"
 9920      5F444F55 
 9920      424C4500 
 9921              	.LASF270:
 9922 0595 736C6176 		.ascii	"slave_motor_idx\000"
 9922      655F6D6F 
 9922      746F725F 
 9922      69647800 
 9923              	.LASF248:
 9924 05a5 636D645F 		.ascii	"cmd_get_inputs\000"
 9924      6765745F 
 9924      696E7075 
 9924      747300
 9925              	.LASF101:
 9926 05b4 41434B5F 		.ascii	"ACK_ERROR\000"
 9926      4552524F 
 9926      5200
 9927              	.LASF92:
 9928 05be 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 9928      545F4D4F 
 9928      44455F45 
 9928      58544552 
 9928      4E414C00 
 9929              	.LASF189:
 9930 05d2 696E6465 		.ascii	"index\000"
 9930      7800
 9931              	.LASF140:
 9932 05d8 6D617869 		.ascii	"maximum_pressure_kPa\000"
 9932      6D756D5F 
 9932      70726573 
 9932      73757265 
 9932      5F6B5061 
 9933              	.LASF42:
 9934 05ed 63757374 		.ascii	"custom_param\000"
 9934      6F6D5F70 
 9934      6172616D 
 9934      00
 9935              	.LASF258:
 9936 05fa 66696C65 		.ascii	"filename_length\000"
 9936      6E616D65 
 9936      5F6C656E 
 9936      67746800 
 9937              	.LASF148:
 9938 060a 656E6162 		.ascii	"enabled\000"
 9938      6C656400 
 9939              	.LASF243:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 223


 9940 0612 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 9940      52656164 
 9940      52657343 
 9940      75727246 
 9940      726F6D53 
 9941              	.LASF55:
 9942 0628 4D454E55 		.ascii	"MENU_WRIST\000"
 9942      5F575249 
 9942      535400
 9943              	.LASF294:
 9944 0633 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 9944      73657273 
 9944      5C6D676E 
 9944      6F63636F 
 9944      5C446F63 
 9945 0660 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 9945      485F5649 
 9945      4245535C 
 9945      46575F57 
 9945      65617261 
 9946 0691 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 9946      56494245 
 9946      535F536F 
 9946      636B6574 
 9946      2E637964 
 9947              	.LASF283:
 9948 06a8 72657365 		.ascii	"reset_PSoC_flag\000"
 9948      745F5053 
 9948      6F435F66 
 9948      6C616700 
 9949              	.LASF269:
 9950 06b8 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 9950      5F616374 
 9950      5F777269 
 9950      73745F63 
 9950      6F6E7472 
 9951              	.LASF113:
 9952 06cf 54595045 		.ascii	"TYPE_STRING\000"
 9952      5F535452 
 9952      494E4700 
 9953              	.LASF59:
 9954 06db 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 9954      53544F52 
 9954      455F5041 
 9954      52414D53 
 9954      00
 9955              	.LASF7:
 9956 06ec 6C6F6E67 		.ascii	"long unsigned int\000"
 9956      20756E73 
 9956      69676E65 
 9956      6420696E 
 9956      7400
 9957              	.LASF63:
 9958 06fe 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 9958      424F4F54 
 9958      4C4F4144 
 9958      455200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 224


 9959              	.LASF210:
 9960 070d 6E756D5F 		.ascii	"num_of_bytes\000"
 9960      6F665F62 
 9960      79746573 
 9960      00
 9961              	.LASF98:
 9962 071a 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 9962      545F4D4F 
 9962      44455F4A 
 9962      4F595354 
 9962      49434B00 
 9963              	.LASF218:
 9964 072e 64697370 		.ascii	"displacement\000"
 9964      6C616365 
 9964      6D656E74 
 9964      00
 9965              	.LASF239:
 9966 073b 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 9966      6765745F 
 9966      76696272 
 9966      6F746163 
 9966      74696C65 
 9967              	.LASF172:
 9968 0757 7374725F 		.ascii	"str_sd_data\000"
 9968      73645F64 
 9968      61746100 
 9969              	.LASF137:
 9970 0763 736C6176 		.ascii	"slave_ID\000"
 9970      655F4944 
 9970      00
 9971              	.LASF102:
 9972 076c 41434B5F 		.ascii	"ACK_OK\000"
 9972      4F4B00
 9973              	.LASF104:
 9974 0773 54595045 		.ascii	"TYPE_FLAG\000"
 9974      5F464C41 
 9974      4700
 9975              	.LASF186:
 9976 077d 7061636B 		.ascii	"packet_length\000"
 9976      65745F6C 
 9976      656E6774 
 9976      6800
 9977              	.LASF29:
 9978 078b 43555354 		.ascii	"CUSTOM_REST_POS\000"
 9978      4F4D5F52 
 9978      4553545F 
 9978      504F5300 
 9979              	.LASF114:
 9980 079b 63757272 		.ascii	"curr\000"
 9980      00
 9981              	.LASF129:
 9982 07a0 696E7075 		.ascii	"input_mode\000"
 9982      745F6D6F 
 9982      646500
 9983              	.LASF74:
 9984 07ab 434D445F 		.ascii	"CMD_GET_EMG\000"
 9984      4745545F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 225


 9984      454D4700 
 9985              	.LASF224:
 9986 07b7 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 9986      6E69745F 
 9986      536F6674 
 9986      48616E64 
 9986      50726F00 
 9987              	.LASF62:
 9988 07cb 434D445F 		.ascii	"CMD_GET_INFO\000"
 9988      4745545F 
 9988      494E464F 
 9988      00
 9989              	.LASF196:
 9990 07d8 6765745F 		.ascii	"get_IMU_param_list\000"
 9990      494D555F 
 9990      70617261 
 9990      6D5F6C69 
 9990      737400
 9991              	.LASF161:
 9992 07eb 4D454E55 		.ascii	"MENU\000"
 9992      00
 9993              	.LASF52:
 9994 07f0 4D454E55 		.ascii	"MENU_DRIVER\000"
 9994      5F445249 
 9994      56455200 
 9995              	.LASF142:
 9996 07fc 76696272 		.ascii	"vibrotactile_feedback_active\000"
 9996      6F746163 
 9996      74696C65 
 9996      5F666565 
 9996      64626163 
 9997              	.LASF73:
 9998 0819 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 9998      4745545F 
 9998      43555252 
 9998      5F414E44 
 9998      5F4D4541 
 9999              	.LASF292:
 10000 082f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 10000      43313120 
 10000      352E342E 
 10000      31203230 
 10000      31363036 
 10001 0862 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 10001      20726576 
 10001      6973696F 
 10001      6E203233 
 10001      37373135 
 10002 0895 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 10002      66756E63 
 10002      74696F6E 
 10002      2D736563 
 10002      74696F6E 
 10003              	.LASF116:
 10004 08bd 73745F72 		.ascii	"st_ref\000"
 10004      656600
 10005              	.LASF232:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 226


 10006 08c4 636D645F 		.ascii	"cmd_get_joystick\000"
 10006      6765745F 
 10006      6A6F7973 
 10006      7469636B 
 10006      00
 10007              	.LASF78:
 10008 08d5 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 10008      5345545F 
 10008      43554646 
 10008      5F494E50 
 10008      55545300 
 10009              	.LASF281:
 10010 08e9 63616C69 		.ascii	"calib\000"
 10010      6200
 10011              	.LASF6:
 10012 08ef 5F5F7569 		.ascii	"__uint32_t\000"
 10012      6E743332 
 10012      5F7400
 10013              	.LASF8:
 10014 08fa 6C6F6E67 		.ascii	"long long int\000"
 10014      206C6F6E 
 10014      6720696E 
 10014      7400
 10015              	.LASF126:
 10016 0908 73745F73 		.ascii	"st_slave\000"
 10016      6C617665 
 10016      00
 10017              	.LASF261:
 10018 0911 76696272 		.ascii	"vibrotactile_control\000"
 10018      6F746163 
 10018      74696C65 
 10018      5F636F6E 
 10018      74726F6C 
 10019              	.LASF106:
 10020 0926 54595045 		.ascii	"TYPE_UINT8\000"
 10020      5F55494E 
 10020      543800
 10021              	.LASF146:
 10022 0931 53485F63 		.ascii	"SH_config\000"
 10022      6F6E6669 
 10022      6700
 10023              	.LASF237:
 10024 093b 636D645F 		.ascii	"cmd_get_currents\000"
 10024      6765745F 
 10024      63757272 
 10024      656E7473 
 10024      00
 10025              	.LASF19:
 10026 094c 646F7562 		.ascii	"double\000"
 10026      6C6500
 10027              	.LASF89:
 10028 0953 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 10028      4745545F 
 10028      53445F53 
 10028      494E474C 
 10028      455F4649 
 10029              	.LASF151:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 227


 10030 096a 72657065 		.ascii	"repetitions\000"
 10030      74697469 
 10030      6F6E7300 
 10031              	.LASF274:
 10032 0976 49544D5F 		.ascii	"ITM_RxBuffer\000"
 10032      52784275 
 10032      66666572 
 10032      00
 10033              	.LASF18:
 10034 0983 666C6F61 		.ascii	"float\000"
 10034      7400
 10035              	.LASF90:
 10036 0989 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 10036      52454D4F 
 10036      56455F53 
 10036      445F5349 
 10036      4E474C45 
 10037              	.LASF264:
 10038 09a3 6572725F 		.ascii	"err_pressure\000"
 10038      70726573 
 10038      73757265 
 10038      00
 10039              	.LASF184:
 10040 09b0 636F756E 		.ascii	"count\000"
 10040      7400
 10041              	.LASF164:
 10042 09b6 73745F61 		.ascii	"st_adc_meas\000"
 10042      64635F6D 
 10042      65617300 
 10043              	.LASF179:
 10044 09c2 6D5F6164 		.ascii	"m_addr\000"
 10044      647200
 10045              	.LASF280:
 10046 09c9 635F6D65 		.ascii	"c_mem\000"
 10046      6D00
 10047              	.LASF212:
 10048 09cf 64617461 		.ascii	"data_array\000"
 10048      5F617272 
 10048      617900
 10049              	.LASF10:
 10050 09da 756E7369 		.ascii	"unsigned int\000"
 10050      676E6564 
 10050      20696E74 
 10050      00
 10051              	.LASF225:
 10052 09e7 6D656D49 		.ascii	"memInit_Master\000"
 10052      6E69745F 
 10052      4D617374 
 10052      657200
 10053              	.LASF202:
 10054 09f6 70726570 		.ascii	"prepare_SD_legend\000"
 10054      6172655F 
 10054      53445F6C 
 10054      6567656E 
 10054      6400
 10055              	.LASF56:
 10056 0a08 53485F63 		.ascii	"SH_command\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 228


 10056      6F6D6D61 
 10056      6E6400
 10057              	.LASF108:
 10058 0a13 54595045 		.ascii	"TYPE_UINT16\000"
 10058      5F55494E 
 10058      54313600 
 10059              	.LASF145:
 10060 0a1f 666C6167 		.ascii	"flag\000"
 10060      00
 10061              	.LASF37:
 10062 0a24 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 10062      4F4D5F49 
 10062      4E505554 
 10062      5F3200
 10063              	.LASF267:
 10064 0a33 785F7661 		.ascii	"x_value\000"
 10064      6C756500 
 10065              	.LASF233:
 10066 0a3b 636D645F 		.ascii	"cmd_set_inputs\000"
 10066      7365745F 
 10066      696E7075 
 10066      747300
 10067              	.LASF47:
 10068 0a4a 4D454E55 		.ascii	"MENU_R_L\000"
 10068      5F525F4C 
 10068      00
 10069              	.LASF177:
 10070 0a53 4D454E55 		.ascii	"MENU_LIST\000"
 10070      5F4C4953 
 10070      5400
 10071              	.LASF93:
 10072 0a5d 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 10072      545F4D4F 
 10072      44455F45 
 10072      4E434F44 
 10072      45523300 
 10073              	.LASF209:
 10074 0a71 636F6D6D 		.ascii	"commWriteID\000"
 10074      57726974 
 10074      65494400 
 10075              	.LASF85:
 10076 0a7d 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 10076      4745545F 
 10076      454E434F 
 10076      4445525F 
 10076      434F4E46 
 10077              	.LASF162:
 10078 0a92 4E554D5F 		.ascii	"NUM_STR\000"
 10078      53545200 
 10079              	.LASF235:
 10080 0a9a 636D645F 		.ascii	"cmd_get_activate\000"
 10080      6765745F 
 10080      61637469 
 10080      76617465 
 10080      00
 10081              	.LASF268:
 10082 0aab 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 229


 10082      61637469 
 10082      76617469 
 10082      6F6E5F76 
 10082      656C6F63 
 10083              	.LASF111:
 10084 0ac7 54595045 		.ascii	"TYPE_FLOAT\000"
 10084      5F464C4F 
 10084      415400
 10085              	.LASF39:
 10086 0ad2 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 10086      4F4D5F50 
 10086      4F535F4C 
 10086      494D5F32 
 10086      00
 10087              	.LASF200:
 10088 0ae3 70726570 		.ascii	"prepare_R01_info\000"
 10088      6172655F 
 10088      5230315F 
 10088      696E666F 
 10088      00
 10089              	.LASF107:
 10090 0af4 54595045 		.ascii	"TYPE_INT16\000"
 10090      5F494E54 
 10090      313600
 10091              	.LASF131:
 10092 0aff 656D675F 		.ascii	"emg_threshold\000"
 10092      74687265 
 10092      73686F6C 
 10092      6400
 10093              	.LASF77:
 10094 0b0d 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 10094      4745545F 
 10094      43555252 
 10094      5F444946 
 10094      4600
 10095              	.LASF41:
 10096 0b1f 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 10096      4F4D5F44 
 10096      45565F54 
 10096      59504500 
 10097              	.LASF227:
 10098 0b2f 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 10098      6E69745F 
 10098      41697243 
 10098      68616D62 
 10098      6572735F 
 10099              	.LASF22:
 10100 0b53 6C6F6E67 		.ascii	"long double\000"
 10100      20646F75 
 10100      626C6500 
 10101              	.LASF110:
 10102 0b5f 54595045 		.ascii	"TYPE_UINT32\000"
 10102      5F55494E 
 10102      54333200 
 10103              	.LASF138:
 10104 0b6b 73745F46 		.ascii	"st_FB_spec\000"
 10104      425F7370 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 230


 10104      656300
 10105              	.LASF214:
 10106 0b76 63686563 		.ascii	"checksum\000"
 10106      6B73756D 
 10106      00
 10107              	.LASF66:
 10108 0b7f 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 10108      48414E44 
 10108      5F43414C 
 10108      49425241 
 10108      544500
 10109              	.LASF288:
 10110 0b92 56545F72 		.ascii	"VT_ref\000"
 10110      656600
 10111              	.LASF271:
 10112 0b99 64726976 		.ascii	"drive_slave\000"
 10112      655F736C 
 10112      61766500 
 10113              	.LASF100:
 10114 0ba5 61636B6E 		.ascii	"acknowledgment_values\000"
 10114      6F776C65 
 10114      64676D65 
 10114      6E745F76 
 10114      616C7565 
 10115              	.LASF223:
 10116 0bbb 6D656D52 		.ascii	"memRestore\000"
 10116      6573746F 
 10116      726500
 10117              	.LASF198:
 10118 0bc6 696E666F 		.ascii	"info_string\000"
 10118      5F737472 
 10118      696E6700 
 10119              	.LASF174:
 10120 0bd2 6E756D5F 		.ascii	"num_params\000"
 10120      70617261 
 10120      6D7300
 10121              	.LASF9:
 10122 0bdd 6C6F6E67 		.ascii	"long long unsigned int\000"
 10122      206C6F6E 
 10122      6720756E 
 10122      7369676E 
 10122      65642069 
 10123              	.LASF163:
 10124 0bf4 63757374 		.ascii	"custom\000"
 10124      6F6D00
 10125              	.LASF51:
 10126 0bfb 4D454E55 		.ascii	"MENU_USER\000"
 10126      5F555345 
 10126      5200
 10127              	.LASF109:
 10128 0c05 54595045 		.ascii	"TYPE_INT32\000"
 10128      5F494E54 
 10128      333200
 10129              	.LASF121:
 10130 0c10 6C656E67 		.ascii	"length\000"
 10130      746800
 10131              	.LASF178:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 231


 10132 0c17 73656E64 		.ascii	"sendToDevice\000"
 10132      546F4465 
 10132      76696365 
 10132      00
 10133              	.LASF115:
 10134 0c24 6F6E6F66 		.ascii	"onoff\000"
 10134      6600
 10135              	.LASF76:
 10136 0c2a 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 10136      4745545F 
 10136      41434345 
 10136      4C00
 10137              	.LASF230:
 10138 0c38 636D645F 		.ascii	"cmd_get_velocities\000"
 10138      6765745F 
 10138      76656C6F 
 10138      63697469 
 10138      657300
 10139              	.LASF222:
 10140 0c4b 6D656D52 		.ascii	"memRecall\000"
 10140      6563616C 
 10140      6C00
 10141              	.LASF249:
 10142 0c55 636D645F 		.ascii	"cmd_store_params\000"
 10142      73746F72 
 10142      655F7061 
 10142      72616D73 
 10142      00
 10143              	.LASF185:
 10144 0c66 6175785F 		.ascii	"aux_char\000"
 10144      63686172 
 10144      00
 10145              	.LASF81:
 10146 0c6f 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 10146      5345545F 
 10146      42415544 
 10146      52415445 
 10146      00
 10147              	.LASF21:
 10148 0c80 72656738 		.ascii	"reg8\000"
 10148      00
 10149              	.LASF141:
 10150 0c85 70726F70 		.ascii	"prop_err_fb_gain\000"
 10150      5F657272 
 10150      5F66625F 
 10150      6761696E 
 10150      00
 10151              	.LASF206:
 10152 0c96 636F6D6D 		.ascii	"commWrite_old_id\000"
 10152      57726974 
 10152      655F6F6C 
 10152      645F6964 
 10152      00
 10153              	.LASF188:
 10154 0ca7 6D616E61 		.ascii	"manage_param_list\000"
 10154      67655F70 
 10154      6172616D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 232


 10154      5F6C6973 
 10154      7400
 10155              	.LASF61:
 10156 0cb9 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 10156      52455354 
 10156      4F52455F 
 10156      50415241 
 10156      4D5300
 10157              	.LASF49:
 10158 0ccc 4D454E55 		.ascii	"MENU_EXP\000"
 10158      5F455850 
 10158      00
 10159              	.LASF284:
 10160 0cd5 73644669 		.ascii	"sdFile\000"
 10160      6C6500
 10161              	.LASF175:
 10162 0cdc 6E756D5F 		.ascii	"num_menus\000"
 10162      6D656E75 
 10162      7300
 10163              	.LASF201:
 10164 0ce6 70726570 		.ascii	"prepare_SD_param_info\000"
 10164      6172655F 
 10164      53445F70 
 10164      6172616D 
 10164      5F696E66 
 10165              	.LASF199:
 10166 0cfc 70726570 		.ascii	"prepare_counter_info\000"
 10166      6172655F 
 10166      636F756E 
 10166      7465725F 
 10166      696E666F 
 10167              	.LASF203:
 10168 0d11 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 10168      6172655F 
 10168      53445F45 
 10168      4D475F48 
 10168      6973746F 
 10169              	.LASF207:
 10170 0d2f 6F6C645F 		.ascii	"old_id\000"
 10170      696400
 10171              	.LASF295:
 10172 0d36 5F5F5245 		.ascii	"__REV16\000"
 10172      56313600 
 10173              	.LASF157:
 10174 0d3e 5641525F 		.ascii	"VAR_P\000"
 10174      5000
 10175              	.LASF236:
 10176 0d44 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 10176      6765745F 
 10176      63757272 
 10176      5F616E64 
 10176      5F6D6561 
 10177              	.LASF171:
 10178 0d5a 696E666F 		.ascii	"info_type\000"
 10178      5F747970 
 10178      6500
 10179              	.LASF54:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 233


 10180 0d64 4D454E55 		.ascii	"MENU_FSM\000"
 10180      5F46534D 
 10180      00
 10181              	.LASF88:
 10182 0d6d 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 10182      4745545F 
 10182      4144435F 
 10182      52415700 
 10183              	.LASF99:
 10184 0d7d 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 10184      545F4D4F 
 10184      44455F45 
 10184      4D475F50 
 10184      524F504F 
 10185              	.LASF84:
 10186 0d9c 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 10186      4745545F 
 10186      494D555F 
 10186      50415241 
 10186      4D00
 10187              	.LASF277:
 10188 0dae 675F6662 		.ascii	"g_fb_meas\000"
 10188      5F6D6561 
 10188      7300
 10189              	.LASF86:
 10190 0db8 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 10190      4745545F 
 10190      454E434F 
 10190      4445525F 
 10190      52415700 
 10191              	.LASF154:
 10192 0dcc 72657365 		.ascii	"reset\000"
 10192      7400
 10193              	.LASF153:
 10194 0dd2 6E616D65 		.ascii	"name\000"
 10194      00
 10195              	.LASF71:
 10196 0dd7 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 10196      4745545F 
 10196      4D454153 
 10196      5552454D 
 10196      454E5453 
 10197              	.LASF143:
 10198 0dec 61697263 		.ascii	"airchamber_feedback_active\000"
 10198      68616D62 
 10198      65725F66 
 10198      65656462 
 10198      61636B5F 
 10199              	.LASF276:
 10200 0e07 675F6164 		.ascii	"g_adc_measOld\000"
 10200      635F6D65 
 10200      61734F6C 
 10200      6400
 10201              	.LASF254:
 10202 0e15 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 10202      6765745F 
 10202      656E636F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 234


 10202      6465725F 
 10202      72617700 
 10203              	.LASF13:
 10204 0e29 75696E74 		.ascii	"uint8\000"
 10204      3800
 10205              	.LASF165:
 10206 0e2f 636F6D6D 		.ascii	"commProcess\000"
 10206      50726F63 
 10206      65737300 
 10207              	.LASF2:
 10208 0e3b 73686F72 		.ascii	"short int\000"
 10208      7420696E 
 10208      7400
 10209              	.LASF30:
 10210 0e45 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 10210      4F4D5F52 
 10210      4553545F 
 10210      504F535F 
 10210      44454C41 
 10211              	.LASF70:
 10212 0e5b 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 10212      4745545F 
 10212      494E5055 
 10212      545300
 10213              	.LASF87:
 10214 0e6a 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 10214      4745545F 
 10214      4144435F 
 10214      434F4E46 
 10214      00
 10215              	.LASF58:
 10216 0e7b 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 10216      5345545F 
 10216      5A45524F 
 10216      5300
 10217              	.LASF251:
 10218 0e89 6175785F 		.ascii	"aux_int16\000"
 10218      696E7431 
 10218      3600
 10219              	.LASF291:
 10220 0e93 45455052 		.ascii	"EEPROM_ADDR\000"
 10220      4F4D5F41 
 10220      44445200 
 10221              	.LASF25:
 10222 0e9f 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 10222      4F4D5F43 
 10222      5552525F 
 10222      50494400 
 10223              	.LASF194:
 10224 0eaf 4E554D5F 		.ascii	"NUM_PARAMs\000"
 10224      50415241 
 10224      4D7300
 10225              	.LASF75:
 10226 0eba 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 10226      4745545F 
 10226      56454C4F 
 10226      43495449 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 235


 10226      455300
 10227              	.LASF65:
 10228 0ecd 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 10228      4745545F 
 10228      50415241 
 10228      4D5F4C49 
 10228      535400
 10229              	.LASF103:
 10230 0ee0 64617461 		.ascii	"data_types\000"
 10230      5F747970 
 10230      657300
 10231              	.LASF16:
 10232 0eeb 696E7431 		.ascii	"int16\000"
 10232      3600
 10233              	.LASF48:
 10234 0ef1 4D454E55 		.ascii	"MENU_ON_OFF\000"
 10234      5F4F4E5F 
 10234      4F464600 
 10235              	.LASF34:
 10236 0efd 43555354 		.ascii	"CUSTOM_DRIVER\000"
 10236      4F4D5F44 
 10236      52495645 
 10236      5200
 10237              	.LASF27:
 10238 0f0b 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 10238      4F4D5F4D 
 10238      4541535F 
 10238      4F464600 
 10239              	.LASF253:
 10240 0f1b 636D645F 		.ascii	"cmd_get_encoder_map\000"
 10240      6765745F 
 10240      656E636F 
 10240      6465725F 
 10240      6D617000 
 10241              	.LASF12:
 10242 0f2f 75696E74 		.ascii	"uint32_t\000"
 10242      33325F74 
 10242      00
 10243              	.LASF176:
 10244 0f38 50415241 		.ascii	"PARAM_LIST\000"
 10244      4D5F4C49 
 10244      535400
 10245              	.LASF215:
 10246 0f43 73656E64 		.ascii	"sendAcknowledgment\000"
 10246      41636B6E 
 10246      6F776C65 
 10246      64676D65 
 10246      6E7400
 10247              	.LASF183:
 10248 0f56 6175785F 		.ascii	"aux_int32\000"
 10248      696E7433 
 10248      3200
 10249              	.LASF124:
 10250 0f60 62617564 		.ascii	"baud_rate\000"
 10250      5F726174 
 10250      6500
 10251              	.LASF241:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 236


 10252 0f6a 745F656E 		.ascii	"t_end\000"
 10252      6400
 10253              	.LASF238:
 10254 0f70 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 10254      6765745F 
 10254      63757272 
 10254      656E7473 
 10254      5F666F72 
 10255              	.LASF83:
 10256 0f8a 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 10256      4745545F 
 10256      494D555F 
 10256      52454144 
 10256      494E4753 
 10257              	.LASF193:
 10258 0f9f 70617261 		.ascii	"param_type\000"
 10258      6D5F7479 
 10258      706500
 10259              	.LASF286:
 10260 0faa 73645230 		.ascii	"sdR01File\000"
 10260      3146696C 
 10260      6500
 10261              	.LASF211:
 10262 0fb4 4C435243 		.ascii	"LCRChecksum\000"
 10262      6865636B 
 10262      73756D00 
 10263              	.LASF3:
 10264 0fc0 73686F72 		.ascii	"short unsigned int\000"
 10264      7420756E 
 10264      7369676E 
 10264      65642069 
 10264      6E7400
 10265              	.LASF279:
 10266 0fd3 675F6D65 		.ascii	"g_mem\000"
 10266      6D00
 10267              	.LASF139:
 10268 0fd9 6D61785F 		.ascii	"max_residual_current\000"
 10268      72657369 
 10268      6475616C 
 10268      5F637572 
 10268      72656E74 
 10269              	.LASF144:
 10270 0fee 73745F65 		.ascii	"st_eeprom\000"
 10270      6570726F 
 10270      6D00
 10271              	.LASF158:
 10272 0ff8 54595045 		.ascii	"TYPES\000"
 10272      5300
 10273              	.LASF17:
 10274 0ffe 696E7433 		.ascii	"int32\000"
 10274      3200
 10275              	.LASF169:
 10276 1004 696E666F 		.ascii	"infoGet\000"
 10276      47657400 
 10277              	.LASF287:
 10278 100c 6D617374 		.ascii	"master_mode\000"
 10278      65725F6D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 237


 10278      6F646500 
 10279              	.LASF5:
 10280 1018 5F5F696E 		.ascii	"__int32_t\000"
 10280      7433325F 
 10280      7400
 10281              	.LASF132:
 10282 1022 656D675F 		.ascii	"emg_max_value\000"
 10282      6D61785F 
 10282      76616C75 
 10282      6500
 10283              	.LASF246:
 10284 1030 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 10284      52656164 
 10284      494D5546 
 10284      726F6D53 
 10284      4800
 10285              	.LASF293:
 10286 1042 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 10286      72635C63 
 10286      6F6D6D61 
 10286      6E645F70 
 10286      726F6365 
 10287              	.LASF91:
 10288 105e 53485F69 		.ascii	"SH_input_mode\000"
 10288      6E707574 
 10288      5F6D6F64 
 10288      6500
 10289              	.LASF24:
 10290 106c 43555354 		.ascii	"CUSTOM_POS_PID\000"
 10290      4F4D5F50 
 10290      4F535F50 
 10290      494400
 10291              	.LASF105:
 10292 107b 54595045 		.ascii	"TYPE_INT8\000"
 10292      5F494E54 
 10292      3800
 10293              	.LASF205:
 10294 1085 494D555F 		.ascii	"IMU_reading_info\000"
 10294      72656164 
 10294      696E675F 
 10294      696E666F 
 10294      00
 10295              	.LASF14:
 10296 1096 75696E74 		.ascii	"uint16\000"
 10296      313600
 10297              	.LASF181:
 10298 109d 6175785F 		.ascii	"aux_str\000"
 10298      73747200 
 10299              	.LASF57:
 10300 10a5 434D445F 		.ascii	"CMD_PING\000"
 10300      50494E47 
 10300      00
 10301              	.LASF234:
 10302 10ae 636D645F 		.ascii	"cmd_activate\000"
 10302      61637469 
 10302      76617465 
 10302      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZLFasc.s 			page 238


 10303              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
