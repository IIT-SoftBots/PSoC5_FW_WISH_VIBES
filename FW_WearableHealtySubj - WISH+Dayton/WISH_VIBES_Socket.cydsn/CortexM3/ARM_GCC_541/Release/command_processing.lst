ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L50
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L50
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L50
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L50
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L50
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L50
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e B8E2     		b	.L1
  75              	.L51:
  76              		.align	2
  77              	.L50:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F2B182 		bhi	.L49
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c B1050000 		.word	.L49+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 B1050000 		.word	.L49+1
  96 0074 B1050000 		.word	.L49+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 B1050000 		.word	.L49+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 B1050000 		.word	.L49+1
 102 008c B1050000 		.word	.L49+1
 103 0090 B1050000 		.word	.L49+1
 104 0094 B1050000 		.word	.L49+1
 105 0098 B1050000 		.word	.L49+1
 106 009c B1050000 		.word	.L49+1
 107 00a0 B1050000 		.word	.L49+1
 108 00a4 B1050000 		.word	.L49+1
 109 00a8 B1050000 		.word	.L49+1
 110 00ac B1050000 		.word	.L49+1
 111 00b0 B1050000 		.word	.L49+1
 112 00b4 B1050000 		.word	.L49+1
 113 00b8 B1050000 		.word	.L49+1
 114 00bc B1050000 		.word	.L49+1
 115 00c0 B1050000 		.word	.L49+1
 116 00c4 B1050000 		.word	.L49+1
 117 00c8 B1050000 		.word	.L49+1
 118 00cc B1050000 		.word	.L49+1
 119 00d0 B1050000 		.word	.L49+1
 120 00d4 B1050000 		.word	.L49+1
 121 00d8 B1050000 		.word	.L49+1
 122 00dc B1050000 		.word	.L49+1
 123 00e0 B1050000 		.word	.L49+1
 124 00e4 B1050000 		.word	.L49+1
 125 00e8 B1050000 		.word	.L49+1
 126 00ec B1050000 		.word	.L49+1
 127 00f0 B1050000 		.word	.L49+1
 128 00f4 B1050000 		.word	.L49+1
 129 00f8 B1050000 		.word	.L49+1
 130 00fc B1050000 		.word	.L49+1
 131 0100 B1050000 		.word	.L49+1
 132 0104 B1050000 		.word	.L49+1
 133 0108 B1050000 		.word	.L49+1
 134 010c B1050000 		.word	.L49+1
 135 0110 B1050000 		.word	.L49+1
 136 0114 B1050000 		.word	.L49+1
 137 0118 B1050000 		.word	.L49+1
 138 011c B1050000 		.word	.L49+1
 139 0120 B1050000 		.word	.L49+1
 140 0124 B1050000 		.word	.L49+1
 141 0128 B1050000 		.word	.L49+1
 142 012c B1050000 		.word	.L49+1
 143 0130 B1050000 		.word	.L49+1
 144 0134 B1050000 		.word	.L49+1
 145 0138 B1050000 		.word	.L49+1
 146 013c B1050000 		.word	.L49+1
 147 0140 B1050000 		.word	.L49+1
 148 0144 B1050000 		.word	.L49+1
 149 0148 B1050000 		.word	.L49+1
 150 014c B1050000 		.word	.L49+1
 151 0150 B1050000 		.word	.L49+1
 152 0154 B1050000 		.word	.L49+1
 153 0158 B1050000 		.word	.L49+1
 154 015c B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 5


 155 0160 B1050000 		.word	.L49+1
 156 0164 B1050000 		.word	.L49+1
 157 0168 B1050000 		.word	.L49+1
 158 016c B1050000 		.word	.L49+1
 159 0170 B1050000 		.word	.L49+1
 160 0174 B1050000 		.word	.L49+1
 161 0178 B1050000 		.word	.L49+1
 162 017c B1050000 		.word	.L49+1
 163 0180 B1050000 		.word	.L49+1
 164 0184 B1050000 		.word	.L49+1
 165 0188 B1050000 		.word	.L49+1
 166 018c B1050000 		.word	.L49+1
 167 0190 B1050000 		.word	.L49+1
 168 0194 B1050000 		.word	.L49+1
 169 0198 B1050000 		.word	.L49+1
 170 019c B1050000 		.word	.L49+1
 171 01a0 B1050000 		.word	.L49+1
 172 01a4 B1050000 		.word	.L49+1
 173 01a8 B1050000 		.word	.L49+1
 174 01ac B1050000 		.word	.L49+1
 175 01b0 B1050000 		.word	.L49+1
 176 01b4 B1050000 		.word	.L49+1
 177 01b8 B1050000 		.word	.L49+1
 178 01bc B1050000 		.word	.L49+1
 179 01c0 B1050000 		.word	.L49+1
 180 01c4 B1050000 		.word	.L49+1
 181 01c8 B1050000 		.word	.L49+1
 182 01cc B1050000 		.word	.L49+1
 183 01d0 B1050000 		.word	.L49+1
 184 01d4 B1050000 		.word	.L49+1
 185 01d8 B1050000 		.word	.L49+1
 186 01dc B1050000 		.word	.L49+1
 187 01e0 B1050000 		.word	.L49+1
 188 01e4 B1050000 		.word	.L49+1
 189 01e8 B1050000 		.word	.L49+1
 190 01ec B1050000 		.word	.L49+1
 191 01f0 B1050000 		.word	.L49+1
 192 01f4 B1050000 		.word	.L49+1
 193 01f8 B1050000 		.word	.L49+1
 194 01fc B1050000 		.word	.L49+1
 195 0200 B1050000 		.word	.L49+1
 196 0204 B1050000 		.word	.L49+1
 197 0208 B1050000 		.word	.L49+1
 198 020c B1050000 		.word	.L49+1
 199 0210 B1050000 		.word	.L49+1
 200 0214 B1050000 		.word	.L49+1
 201 0218 B1050000 		.word	.L49+1
 202 021c B1050000 		.word	.L49+1
 203 0220 B1050000 		.word	.L49+1
 204 0224 B1050000 		.word	.L49+1
 205 0228 B1050000 		.word	.L49+1
 206 022c B1050000 		.word	.L49+1
 207 0230 B1050000 		.word	.L49+1
 208 0234 B1050000 		.word	.L49+1
 209 0238 B1050000 		.word	.L49+1
 210 023c B1050000 		.word	.L49+1
 211 0240 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 6


 212 0244 B1050000 		.word	.L49+1
 213 0248 B1050000 		.word	.L49+1
 214 024c B1050000 		.word	.L49+1
 215 0250 B1050000 		.word	.L49+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 B1050000 		.word	.L49+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c B1050000 		.word	.L49+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 B1050000 		.word	.L49+1
 230 028c B1050000 		.word	.L49+1
 231 0290 B1050000 		.word	.L49+1
 232 0294 89040000 		.word	.L27+1
 233 0298 B1050000 		.word	.L49+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 B1050000 		.word	.L49+1
 236 02a4 B1050000 		.word	.L49+1
 237 02a8 B1050000 		.word	.L49+1
 238 02ac B1050000 		.word	.L49+1
 239 02b0 B1050000 		.word	.L49+1
 240 02b4 B1050000 		.word	.L49+1
 241 02b8 B1050000 		.word	.L49+1
 242 02bc B1050000 		.word	.L49+1
 243 02c0 B1050000 		.word	.L49+1
 244 02c4 B1050000 		.word	.L49+1
 245 02c8 B1050000 		.word	.L49+1
 246 02cc B1050000 		.word	.L49+1
 247 02d0 B1050000 		.word	.L49+1
 248 02d4 B1050000 		.word	.L49+1
 249 02d8 4B050000 		.word	.L29+1
 250 02dc 51050000 		.word	.L30+1
 251 02e0 69050000 		.word	.L31+1
 252 02e4 6F050000 		.word	.L32+1
 253 02e8 75050000 		.word	.L33+1
 254 02ec 7B050000 		.word	.L34+1
 255 02f0 81050000 		.word	.L35+1
 256 02f4 99050000 		.word	.L36+1
 257 02f8 B1050000 		.word	.L49+1
 258 02fc B1050000 		.word	.L49+1
 259 0300 B1050000 		.word	.L49+1
 260 0304 B1050000 		.word	.L49+1
 261 0308 B1050000 		.word	.L49+1
 262 030c B1050000 		.word	.L49+1
 263 0310 B1050000 		.word	.L49+1
 264 0314 B1050000 		.word	.L49+1
 265 0318 B1050000 		.word	.L49+1
 266 031c B1050000 		.word	.L49+1
 267 0320 B1050000 		.word	.L49+1
 268 0324 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 7


 269 0328 B1050000 		.word	.L49+1
 270 032c B1050000 		.word	.L49+1
 271 0330 B1050000 		.word	.L49+1
 272 0334 B1050000 		.word	.L49+1
 273 0338 B1050000 		.word	.L49+1
 274 033c B1050000 		.word	.L49+1
 275 0340 B1050000 		.word	.L49+1
 276 0344 B1050000 		.word	.L49+1
 277 0348 B1050000 		.word	.L49+1
 278 034c B1050000 		.word	.L49+1
 279 0350 B1050000 		.word	.L49+1
 280 0354 B1050000 		.word	.L49+1
 281 0358 B1050000 		.word	.L49+1
 282 035c B1050000 		.word	.L49+1
 283 0360 B1050000 		.word	.L49+1
 284 0364 B1050000 		.word	.L49+1
 285 0368 B1050000 		.word	.L49+1
 286 036c B1050000 		.word	.L49+1
 287 0370 B1050000 		.word	.L49+1
 288 0374 B1050000 		.word	.L49+1
 289 0378 B1050000 		.word	.L49+1
 290 037c B1050000 		.word	.L49+1
 291 0380 B1050000 		.word	.L49+1
 292 0384 B1050000 		.word	.L49+1
 293 0388 B1050000 		.word	.L49+1
 294 038c B1050000 		.word	.L49+1
 295 0390 B1050000 		.word	.L49+1
 296 0394 B1050000 		.word	.L49+1
 297 0398 B1050000 		.word	.L49+1
 298 039c B1050000 		.word	.L49+1
 299 03a0 B1050000 		.word	.L49+1
 300 03a4 B1050000 		.word	.L49+1
 301 03a8 B1050000 		.word	.L49+1
 302 03ac B1050000 		.word	.L49+1
 303 03b0 B1050000 		.word	.L49+1
 304 03b4 B1050000 		.word	.L49+1
 305 03b8 B1050000 		.word	.L49+1
 306 03bc B1050000 		.word	.L49+1
 307 03c0 B1050000 		.word	.L49+1
 308 03c4 B1050000 		.word	.L49+1
 309 03c8 B1050000 		.word	.L49+1
 310 03cc B1050000 		.word	.L49+1
 311 03d0 B1050000 		.word	.L49+1
 312 03d4 B1050000 		.word	.L49+1
 313 03d8 B1050000 		.word	.L49+1
 314 03dc B1050000 		.word	.L49+1
 315 03e0 B1050000 		.word	.L49+1
 316 03e4 B1050000 		.word	.L49+1
 317 03e8 B1050000 		.word	.L49+1
 318 03ec B1050000 		.word	.L49+1
 319 03f0 B1050000 		.word	.L49+1
 320 03f4 B1050000 		.word	.L49+1
 321 03f8 B1050000 		.word	.L49+1
 322 03fc B1050000 		.word	.L49+1
 323 0400 B1050000 		.word	.L49+1
 324 0404 B1050000 		.word	.L49+1
 325 0408 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 8


 326 040c B1050000 		.word	.L49+1
 327 0410 B1050000 		.word	.L49+1
 328 0414 B1050000 		.word	.L49+1
 329 0418 B1050000 		.word	.L49+1
 330 041c B1050000 		.word	.L49+1
 331 0420 B1050000 		.word	.L49+1
 332 0424 B1050000 		.word	.L49+1
 333 0428 B1050000 		.word	.L49+1
 334 042c B1050000 		.word	.L49+1
 335 0430 B1050000 		.word	.L49+1
 336 0434 B1050000 		.word	.L49+1
 337 0438 B1050000 		.word	.L49+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 B5E0     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a B2E0     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 AFE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 ACE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c A9E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 A6E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 A3E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e A0E0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 9DE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a 9AE0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 97E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 94E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c 91E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 8EE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 484B     		ldr	r3, .L52
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa 82E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 7FE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),TRUE );
 443              		.loc 1 174 0
 444 04b2 414B     		ldr	r3, .L52
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca 72E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 6FE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 6CE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea 62E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 5EE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 55E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c 51E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 48E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 28


 529              		.loc 1 214 0
 530 0526 44E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 33E0     		b	.L1
 548              	.L29:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:           
 230:..\src/command_processing.c ****             break;
 231:..\src/command_processing.c ****             
 232:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 233:..\src/command_processing.c **** 
 234:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 235:..\src/command_processing.c ****             cmd_get_imu_readings();
 549              		.loc 1 235 0
 550 054a FFF7FEFF 		bl	cmd_get_imu_readings
 236:..\src/command_processing.c ****             break; 
 551              		.loc 1 236 0
 552 054e 30E0     		b	.L1
 553              	.L30:
 237:..\src/command_processing.c ****             
 238:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 239:..\src/command_processing.c **** 
 240:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 241:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 554              		.loc 1 241 0
 555 0550 194B     		ldr	r3, .L52
 556 0552 1B88     		ldrh	r3, [r3]
 557 0554 7B62     		str	r3, [r7, #36]
 558              	.LBB16:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 29


 559              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 560              		.loc 2 792 0
 561 0556 7B6A     		ldr	r3, [r7, #36]
 562              		.syntax unified
 563              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 564 0558 5BBA     		rev16 r3, r3
 565              	@ 0 "" 2
 566              		.thumb
 567              		.syntax unified
 568 055a FB60     		str	r3, [r7, #12]
 569              		.loc 2 793 0
 570 055c FB68     		ldr	r3, [r7, #12]
 571              	.LBE17:
 572              	.LBE16:
 573              		.loc 1 241 0
 574 055e 9BB2     		uxth	r3, r3
 575 0560 1846     		mov	r0, r3
 576 0562 FFF7FEFF 		bl	get_IMU_param_list
 242:..\src/command_processing.c ****             break;             
 577              		.loc 1 242 0
 578 0566 24E0     		b	.L1
 579              	.L31:
 243:..\src/command_processing.c ****             
 244:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 245:..\src/command_processing.c **** 
 246:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 247:..\src/command_processing.c ****             cmd_get_encoder_map();
 580              		.loc 1 247 0
 581 0568 FFF7FEFF 		bl	cmd_get_encoder_map
 248:..\src/command_processing.c ****             break; 
 582              		.loc 1 248 0
 583 056c 21E0     		b	.L1
 584              	.L32:
 249:..\src/command_processing.c **** 
 250:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 251:..\src/command_processing.c **** 
 252:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 253:..\src/command_processing.c ****             cmd_get_encoder_raw();
 585              		.loc 1 253 0
 586 056e FFF7FEFF 		bl	cmd_get_encoder_raw
 254:..\src/command_processing.c ****             break; 
 587              		.loc 1 254 0
 588 0572 1EE0     		b	.L1
 589              	.L33:
 255:..\src/command_processing.c **** 
 256:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 257:..\src/command_processing.c **** 
 258:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 259:..\src/command_processing.c ****             cmd_get_ADC_map();
 590              		.loc 1 259 0
 591 0574 FFF7FEFF 		bl	cmd_get_ADC_map
 260:..\src/command_processing.c ****             break; 
 592              		.loc 1 260 0
 593 0578 1BE0     		b	.L1
 594              	.L34:
 261:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 30


 262:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 263:..\src/command_processing.c **** 
 264:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 265:..\src/command_processing.c ****             cmd_get_ADC_raw();
 595              		.loc 1 265 0
 596 057a FFF7FEFF 		bl	cmd_get_ADC_raw
 266:..\src/command_processing.c ****             break; 
 597              		.loc 1 266 0
 598 057e 18E0     		b	.L1
 599              	.L35:
 267:..\src/command_processing.c ****             
 268:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 269:..\src/command_processing.c **** 
 270:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 271:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 600              		.loc 1 271 0
 601 0580 0D4B     		ldr	r3, .L52
 602 0582 1B88     		ldrh	r3, [r3]
 603 0584 3B62     		str	r3, [r7, #32]
 604              	.LBB18:
 605              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 606              		.loc 2 792 0
 607 0586 3B6A     		ldr	r3, [r7, #32]
 608              		.syntax unified
 609              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 610 0588 5BBA     		rev16 r3, r3
 611              	@ 0 "" 2
 612              		.thumb
 613              		.syntax unified
 614 058a BB60     		str	r3, [r7, #8]
 615              		.loc 2 793 0
 616 058c BB68     		ldr	r3, [r7, #8]
 617              	.LBE19:
 618              	.LBE18:
 619              		.loc 1 271 0
 620 058e 9BB2     		uxth	r3, r3
 621 0590 1846     		mov	r0, r3
 622 0592 FFF7FEFF 		bl	cmd_get_SD_file
 272:..\src/command_processing.c ****             break;   
 623              		.loc 1 272 0
 624 0596 0CE0     		b	.L1
 625              	.L36:
 273:..\src/command_processing.c ****             
 274:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 275:..\src/command_processing.c **** 
 276:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 277:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 626              		.loc 1 277 0
 627 0598 074B     		ldr	r3, .L52
 628 059a 1B88     		ldrh	r3, [r3]
 629 059c FB61     		str	r3, [r7, #28]
 630              	.LBB20:
 631              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 632              		.loc 2 792 0
 633 059e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 31


 634              		.syntax unified
 635              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 636 05a0 5BBA     		rev16 r3, r3
 637              	@ 0 "" 2
 638              		.thumb
 639              		.syntax unified
 640 05a2 7B60     		str	r3, [r7, #4]
 641              		.loc 2 793 0
 642 05a4 7B68     		ldr	r3, [r7, #4]
 643              	.LBE21:
 644              	.LBE20:
 645              		.loc 1 277 0
 646 05a6 9BB2     		uxth	r3, r3
 647 05a8 1846     		mov	r0, r3
 648 05aa FFF7FEFF 		bl	cmd_remove_SD_file
 278:..\src/command_processing.c ****             break;               
 649              		.loc 1 278 0
 650 05ae 00E0     		b	.L1
 651              	.L49:
 279:..\src/command_processing.c ****             
 280:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 281:..\src/command_processing.c ****         default:
 282:..\src/command_processing.c ****             break;
 652              		.loc 1 282 0
 653 05b0 00BF     		nop
 654              	.L1:
 283:..\src/command_processing.c **** 
 284:..\src/command_processing.c ****     }
 285:..\src/command_processing.c **** }  
 655              		.loc 1 285 0
 656 05b2 3037     		adds	r7, r7, #48
 657              		.cfi_def_cfa_offset 8
 658 05b4 BD46     		mov	sp, r7
 659              		.cfi_def_cfa_register 13
 660              		@ sp needed
 661 05b6 80BD     		pop	{r7, pc}
 662              	.L53:
 663              		.align	2
 664              	.L52:
 665 05b8 01000000 		.word	g_rx+1
 666              		.cfi_endproc
 667              	.LFE64:
 668              		.size	commProcess, .-commProcess
 669              		.section	.text.infoSend,"ax",%progbits
 670              		.align	2
 671              		.global	infoSend
 672              		.thumb
 673              		.thumb_func
 674              		.type	infoSend, %function
 675              	infoSend:
 676              	.LFB65:
 286:..\src/command_processing.c **** 
 287:..\src/command_processing.c **** //==============================================================================
 288:..\src/command_processing.c **** //                                                                     INFO SEND
 289:..\src/command_processing.c **** //==============================================================================
 290:..\src/command_processing.c **** 
 291:..\src/command_processing.c **** void infoSend(void){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 32


 677              		.loc 1 291 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 1504
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 ADF5BC6D 		sub	sp, sp, #1504
 686              		.cfi_def_cfa_offset 1512
 687 0006 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 292:..\src/command_processing.c ****     char packet_string[1500];
 293:..\src/command_processing.c ****     
 294:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 689              		.loc 1 294 0
 690 0008 3B1D     		adds	r3, r7, #4
 691 000a 1846     		mov	r0, r3
 692 000c FFF7FEFF 		bl	prepare_generic_info
 295:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 693              		.loc 1 295 0
 694 0010 3B1D     		adds	r3, r7, #4
 695 0012 1846     		mov	r0, r3
 696 0014 FFF7FEFF 		bl	UART_RS485_PutString
 296:..\src/command_processing.c **** }
 697              		.loc 1 296 0
 698 0018 00BF     		nop
 699 001a 07F5BC67 		add	r7, r7, #1504
 700              		.cfi_def_cfa_offset 8
 701 001e BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0020 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE65:
 707              		.size	infoSend, .-infoSend
 708 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 709              		.align	2
 710              		.global	num_of_bytes
 711              		.thumb
 712              		.thumb_func
 713              		.type	num_of_bytes, %function
 714              	num_of_bytes:
 715              	.LFB66:
 297:..\src/command_processing.c **** //==============================================================================
 298:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 299:..\src/command_processing.c **** //==============================================================================
 300:..\src/command_processing.c ****                     
 301:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
 716              		.loc 1 301 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 33


 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 302:..\src/command_processing.c ****     uint8 sod;
 303:..\src/command_processing.c ****     switch (TYPE) {
 730              		.loc 1 303 0
 731 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 000c 092B     		cmp	r3, #9
 733 000e 20D8     		bhi	.L56
 734 0010 01A2     		adr	r2, .L58
 735 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 736 0016 00BF     		.p2align 2
 737              	.L58:
 738 0018 41000000 		.word	.L57+1
 739 001c 41000000 		.word	.L57+1
 740 0020 41000000 		.word	.L57+1
 741 0024 47000000 		.word	.L59+1
 742 0028 47000000 		.word	.L59+1
 743 002c 4D000000 		.word	.L60+1
 744 0030 4D000000 		.word	.L60+1
 745 0034 4D000000 		.word	.L60+1
 746 0038 53000000 		.word	.L56+1
 747 003c 41000000 		.word	.L57+1
 748              		.p2align 1
 749              	.L57:
 304:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 305:..\src/command_processing.c ****                 sod = 1; break;
 750              		.loc 1 305 0
 751 0040 0123     		movs	r3, #1
 752 0042 FB73     		strb	r3, [r7, #15]
 753 0044 05E0     		b	.L56
 754              	.L59:
 306:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 307:..\src/command_processing.c ****                 sod = 2; break;
 755              		.loc 1 307 0
 756 0046 0223     		movs	r3, #2
 757 0048 FB73     		strb	r3, [r7, #15]
 758 004a 02E0     		b	.L56
 759              	.L60:
 308:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 309:..\src/command_processing.c ****                 sod = 4; break;
 760              		.loc 1 309 0
 761 004c 0423     		movs	r3, #4
 762 004e FB73     		strb	r3, [r7, #15]
 763 0050 00BF     		nop
 764              	.L56:
 310:..\src/command_processing.c ****     }  
 311:..\src/command_processing.c ****     return sod;
 765              		.loc 1 311 0
 766 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 312:..\src/command_processing.c **** }
 767              		.loc 1 312 0
 768 0054 1846     		mov	r0, r3
 769 0056 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 34


 770              		.cfi_def_cfa_offset 4
 771 0058 BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 005a 80BC     		pop	{r7}
 775              		.cfi_restore 7
 776              		.cfi_def_cfa_offset 0
 777 005c 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE66:
 780              		.size	num_of_bytes, .-num_of_bytes
 781 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 782              		.align	2
 783              		.global	infoGet
 784              		.thumb
 785              		.thumb_func
 786              		.type	infoGet, %function
 787              	infoGet:
 788              	.LFB67:
 313:..\src/command_processing.c **** 
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 316:..\src/command_processing.c **** //==============================================================================
 317:..\src/command_processing.c **** 
 318:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 789              		.loc 1 318 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 24008
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 ADF5BB4D 		sub	sp, sp, #23936
 798              		.cfi_def_cfa_offset 23944
 799 0006 92B0     		sub	sp, sp, #72
 800              		.cfi_def_cfa_offset 24016
 801 0008 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 000a 0246     		mov	r2, r0
 804 000c 07F14803 		add	r3, r7, #72
 805 0010 423B     		subs	r3, r3, #66
 806 0012 1A80     		strh	r2, [r3]	@ movhi
 319:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 807              		.loc 1 319 0
 808 0014 07F59C43 		add	r3, r7, #19968
 809 0018 03F12803 		add	r3, r3, #40
 810 001c 0022     		movs	r2, #0
 811 001e 1A60     		str	r2, [r3]
 812 0020 0433     		adds	r3, r3, #4
 813 0022 40F69C72 		movw	r2, #3996
 814 0026 0021     		movs	r1, #0
 815 0028 1846     		mov	r0, r3
 816 002a FFF7FEFF 		bl	memset
 320:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 817              		.loc 1 320 0
 818 002e 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 35


 819 0032 403B     		subs	r3, r3, #64
 820 0034 0022     		movs	r2, #0
 821 0036 1A60     		str	r2, [r3]
 822 0038 0433     		adds	r3, r3, #4
 823 003a 44F61C62 		movw	r2, #19996
 824 003e 0021     		movs	r1, #0
 825 0040 1846     		mov	r0, r3
 826 0042 FFF7FEFF 		bl	memset
 321:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 322:..\src/command_processing.c **** 
 323:..\src/command_processing.c ****     switch (info_type) {
 827              		.loc 1 323 0
 828 0046 07F14803 		add	r3, r7, #72
 829 004a 423B     		subs	r3, r3, #66
 830 004c 1B88     		ldrh	r3, [r3]
 831 004e 062B     		cmp	r3, #6
 832 0050 7DD8     		bhi	.L73
 833 0052 01A2     		adr	r2, .L65
 834 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 835              		.p2align 2
 836              	.L65:
 837 0058 75000000 		.word	.L64+1
 838 005c 97000000 		.word	.L66+1
 839 0060 B9000000 		.word	.L67+1
 840 0064 E1000000 		.word	.L68+1
 841 0068 03010000 		.word	.L69+1
 842 006c 21010000 		.word	.L70+1
 843 0070 27010000 		.word	.L71+1
 844              		.p2align 1
 845              	.L64:
 324:..\src/command_processing.c ****         case INFO_ALL:
 325:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 846              		.loc 1 325 0
 847 0074 07F59C43 		add	r3, r7, #19968
 848 0078 03F12803 		add	r3, r3, #40
 849 007c 1846     		mov	r0, r3
 850 007e FFF7FEFF 		bl	prepare_generic_info
 326:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 851              		.loc 1 326 0
 852 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 327:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 853              		.loc 1 327 0
 854 0086 07F59C43 		add	r3, r7, #19968
 855 008a 03F12803 		add	r3, r3, #40
 856 008e 1846     		mov	r0, r3
 857 0090 FFF7FEFF 		bl	UART_RS485_PutString
 328:..\src/command_processing.c ****             break;
 858              		.loc 1 328 0
 859 0094 5CE0     		b	.L72
 860              	.L66:
 329:..\src/command_processing.c ****         case CYCLES_INFO:
 330:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 861              		.loc 1 330 0
 862 0096 07F59C43 		add	r3, r7, #19968
 863 009a 03F12803 		add	r3, r3, #40
 864 009e 1846     		mov	r0, r3
 865 00a0 FFF7FEFF 		bl	prepare_counter_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 36


 331:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 866              		.loc 1 331 0
 867 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 332:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 868              		.loc 1 332 0
 869 00a8 07F59C43 		add	r3, r7, #19968
 870 00ac 03F12803 		add	r3, r3, #40
 871 00b0 1846     		mov	r0, r3
 872 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 333:..\src/command_processing.c ****             break;
 873              		.loc 1 333 0
 874 00b6 4BE0     		b	.L72
 875              	.L67:
 334:..\src/command_processing.c ****         case GET_SD_PARAM:
 335:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 876              		.loc 1 335 0
 877 00b8 07F59C43 		add	r3, r7, #19968
 878 00bc 03F12803 		add	r3, r3, #40
 879 00c0 4FF47A62 		mov	r2, #4000
 880 00c4 1946     		mov	r1, r3
 881 00c6 2548     		ldr	r0, .L74
 882 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 336:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 883              		.loc 1 336 0
 884 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 337:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 885              		.loc 1 337 0
 886 00d0 07F59C43 		add	r3, r7, #19968
 887 00d4 03F12803 		add	r3, r3, #40
 888 00d8 1846     		mov	r0, r3
 889 00da FFF7FEFF 		bl	UART_RS485_PutString
 338:..\src/command_processing.c ****             break;
 890              		.loc 1 338 0
 891 00de 37E0     		b	.L72
 892              	.L68:
 339:..\src/command_processing.c ****         case GET_SD_DATA:
 340:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 893              		.loc 1 340 0
 894 00e0 07F14803 		add	r3, r7, #72
 895 00e4 403B     		subs	r3, r3, #64
 896 00e6 44F62061 		movw	r1, #20000
 897 00ea 1846     		mov	r0, r3
 898 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 341:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 899              		.loc 1 341 0
 900 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 342:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 901              		.loc 1 342 0
 902 00f4 07F14803 		add	r3, r7, #72
 903 00f8 403B     		subs	r3, r3, #64
 904 00fa 1846     		mov	r0, r3
 905 00fc FFF7FEFF 		bl	UART_RS485_PutString
 343:..\src/command_processing.c ****             break;
 906              		.loc 1 343 0
 907 0100 26E0     		b	.L72
 908              	.L69:
 344:..\src/command_processing.c ****         case GET_SD_FS_TREE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 37


 345:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 909              		.loc 1 345 0
 910 0102 07F14803 		add	r3, r7, #72
 911 0106 403B     		subs	r3, r3, #64
 912 0108 1846     		mov	r0, r3
 913 010a FFF7FEFF 		bl	Get_SD_FS
 346:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 914              		.loc 1 346 0
 915 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 347:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 916              		.loc 1 347 0
 917 0112 07F14803 		add	r3, r7, #72
 918 0116 403B     		subs	r3, r3, #64
 919 0118 1846     		mov	r0, r3
 920 011a FFF7FEFF 		bl	UART_RS485_PutString
 348:..\src/command_processing.c ****             break;
 921              		.loc 1 348 0
 922 011e 17E0     		b	.L72
 923              	.L70:
 349:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 350:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 351:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 924              		.loc 1 351 0
 925 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 352:..\src/command_processing.c ****             break;
 926              		.loc 1 352 0
 927 0124 14E0     		b	.L72
 928              	.L71:
 353:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 354:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 929              		.loc 1 354 0
 930 0126 07F59C43 		add	r3, r7, #19968
 931 012a 03F12803 		add	r3, r3, #40
 932 012e 4FF47A62 		mov	r2, #4000
 933 0132 1946     		mov	r1, r3
 934 0134 0A48     		ldr	r0, .L74+4
 935 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 355:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 936              		.loc 1 355 0
 937 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 356:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 938              		.loc 1 356 0
 939 013e 07F59C43 		add	r3, r7, #19968
 940 0142 03F12803 		add	r3, r3, #40
 941 0146 1846     		mov	r0, r3
 942 0148 FFF7FEFF 		bl	UART_RS485_PutString
 357:..\src/command_processing.c ****             break;            
 943              		.loc 1 357 0
 944 014c 00E0     		b	.L72
 945              	.L73:
 358:..\src/command_processing.c ****         default:
 359:..\src/command_processing.c ****             break;
 946              		.loc 1 359 0
 947 014e 00BF     		nop
 948              	.L72:
 360:..\src/command_processing.c ****     }
 361:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 38


 949              		.loc 1 361 0 discriminator 1
 950 0150 00BF     		nop
 951 0152 07F5BB47 		add	r7, r7, #23936
 952 0156 4837     		adds	r7, r7, #72
 953              		.cfi_def_cfa_offset 8
 954 0158 BD46     		mov	sp, r7
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 015a 80BD     		pop	{r7, pc}
 958              	.L75:
 959              		.align	2
 960              	.L74:
 961 015c 00000000 		.word	sdParam
 962 0160 00000000 		.word	sdR01File
 963              		.cfi_endproc
 964              	.LFE67:
 965              		.size	infoGet, .-infoGet
 966              		.section	.rodata
 967              		.align	2
 968              	.LC8:
 969 0000 00       		.ascii	"\000"
 970 0001 000000   		.align	2
 971              	.LC14:
 972 0004 202D2000 		.ascii	" - \000"
 973              		.align	2
 974              	.LC15:
 975 0008 54686520 		.ascii	"The board will reset\012\000"
 975      626F6172 
 975      64207769 
 975      6C6C2072 
 975      65736574 
 976 001e 0000     		.align	2
 977              	.LC16:
 978 0020 202D3E20 		.ascii	" -> \000"
 978      00
 979 0025 000000   		.align	2
 980              	.LC17:
 981 0028 0A00     		.ascii	"\012\000"
 982              		.section	.text.get_param_list,"ax",%progbits
 983              		.align	2
 984              		.global	get_param_list
 985              		.thumb
 986              		.thumb_func
 987              		.type	get_param_list, %function
 988              	get_param_list:
 989              	.LFB68:
 362:..\src/command_processing.c **** 
 363:..\src/command_processing.c **** 
 364:..\src/command_processing.c **** //==============================================================================
 365:..\src/command_processing.c **** //                                                                GET PARAM LIST
 366:..\src/command_processing.c **** //==============================================================================
 367:..\src/command_processing.c **** 
 368:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 990              		.loc 1 368 0
 991              		.cfi_startproc
 992              		@ args = 4, pretend = 0, frame = 608
 993              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 39


 994 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 995              		.cfi_def_cfa_offset 28
 996              		.cfi_offset 4, -28
 997              		.cfi_offset 5, -24
 998              		.cfi_offset 6, -20
 999              		.cfi_offset 7, -16
 1000              		.cfi_offset 8, -12
 1001              		.cfi_offset 9, -8
 1002              		.cfi_offset 14, -4
 1003 0004 ADF5197D 		sub	sp, sp, #612
 1004              		.cfi_def_cfa_offset 640
 1005 0008 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 000a 0646     		mov	r6, r0
 1008 000c 0846     		mov	r0, r1
 1009 000e 07F10801 		add	r1, r7, #8
 1010 0012 0A60     		str	r2, [r1]
 1011 0014 3A1D     		adds	r2, r7, #4
 1012 0016 1360     		str	r3, [r2]
 1013 0018 07F10F03 		add	r3, r7, #15
 1014 001c 3246     		mov	r2, r6
 1015 001e 1A70     		strb	r2, [r3]
 1016 0020 07F10E03 		add	r3, r7, #14
 1017 0024 0246     		mov	r2, r0
 1018 0026 1A70     		strb	r2, [r3]
 1019              		.loc 1 368 0
 1020 0028 6B46     		mov	r3, sp
 1021 002a 1E46     		mov	r6, r3
 369:..\src/command_processing.c ****     
 370:..\src/command_processing.c ****     uint8 CYDATA idx = 0;      
 1022              		.loc 1 370 0
 1023 002c 0023     		movs	r3, #0
 1024 002e 87F85F32 		strb	r3, [r7, #607]
 371:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1025              		.loc 1 371 0
 1026 0032 07F10803 		add	r3, r7, #8
 1027 0036 1B68     		ldr	r3, [r3]
 1028 0038 1B68     		ldr	r3, [r3]
 1029 003a C7F85032 		str	r3, [r7, #592]
 372:..\src/command_processing.c ****     uint8 CYDATA string_length;
 373:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1030              		.loc 1 373 0
 1031 003e 07F5A473 		add	r3, r7, #328
 1032 0042 0022     		movs	r2, #0
 1033 0044 1A60     		str	r2, [r3]
 1034 0046 0433     		adds	r3, r3, #4
 1035 0048 F622     		movs	r2, #246
 1036 004a 0021     		movs	r1, #0
 1037 004c 1846     		mov	r0, r3
 1038 004e FFF7FEFF 		bl	memset
 374:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1039              		.loc 1 374 0
 1040 0052 07F14C03 		add	r3, r7, #76
 1041 0056 0022     		movs	r2, #0
 1042 0058 1A60     		str	r2, [r3]
 1043 005a 0433     		adds	r3, r3, #4
 1044 005c F622     		movs	r2, #246
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 40


 1045 005e 0021     		movs	r1, #0
 1046 0060 1846     		mov	r0, r3
 1047 0062 FFF7FEFF 		bl	memset
 375:..\src/command_processing.c ****     
 376:..\src/command_processing.c ****     int32 aux_int32;
 377:..\src/command_processing.c ****     uint8 i, j;
 378:..\src/command_processing.c ****     uint8 count;
 379:..\src/command_processing.c ****     char aux_char[50];
 380:..\src/command_processing.c ****     
 381:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1048              		.loc 1 381 0
 1049 0066 07F10F03 		add	r3, r7, #15
 1050 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 006c 9BB2     		uxth	r3, r3
 1052 006e 1A46     		mov	r2, r3	@ movhi
 1053 0070 9200     		lsls	r2, r2, #2
 1054 0072 1344     		add	r3, r3, r2
 1055 0074 1A46     		mov	r2, r3	@ movhi
 1056 0076 9100     		lsls	r1, r2, #2
 1057 0078 1A46     		mov	r2, r3	@ movhi
 1058 007a 0B46     		mov	r3, r1	@ movhi
 1059 007c 1344     		add	r3, r3, r2
 1060 007e 5B00     		lsls	r3, r3, #1
 1061 0080 9AB2     		uxth	r2, r3
 1062 0082 07F10E03 		add	r3, r7, #14
 1063 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 0088 9BB2     		uxth	r3, r3
 1065 008a 1946     		mov	r1, r3	@ movhi
 1066 008c 8900     		lsls	r1, r1, #2
 1067 008e 0B44     		add	r3, r3, r1
 1068 0090 1946     		mov	r1, r3	@ movhi
 1069 0092 0901     		lsls	r1, r1, #4
 1070 0094 CB1A     		subs	r3, r1, r3
 1071 0096 5B00     		lsls	r3, r3, #1
 1072 0098 9BB2     		uxth	r3, r3
 1073 009a 1344     		add	r3, r3, r2
 1074 009c 9BB2     		uxth	r3, r3
 1075 009e 3233     		adds	r3, r3, #50
 1076 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 382:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1077              		.loc 1 382 0
 1078 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1079 00a8 0B46     		mov	r3, r1
 1080 00aa 013B     		subs	r3, r3, #1
 1081 00ac C7F84832 		str	r3, [r7, #584]
 1082 00b0 8AB2     		uxth	r2, r1
 1083 00b2 4FF00003 		mov	r3, #0
 1084 00b6 4FEAC309 		lsl	r9, r3, #3
 1085 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1086 00be 4FEAC208 		lsl	r8, r2, #3
 1087 00c2 8AB2     		uxth	r2, r1
 1088 00c4 4FF00003 		mov	r3, #0
 1089 00c8 DD00     		lsls	r5, r3, #3
 1090 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1091 00ce D400     		lsls	r4, r2, #3
 1092 00d0 0B46     		mov	r3, r1
 1093 00d2 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 41


 1094 00d4 DB08     		lsrs	r3, r3, #3
 1095 00d6 DB00     		lsls	r3, r3, #3
 1096 00d8 ADEB030D 		sub	sp, sp, r3
 1097 00dc 6B46     		mov	r3, sp
 1098 00de 0033     		adds	r3, r3, #0
 1099 00e0 C7F84432 		str	r3, [r7, #580]
 1100              	.LBB22:
 383:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1101              		.loc 1 383 0
 1102 00e4 0023     		movs	r3, #0
 1103 00e6 C7F85432 		str	r3, [r7, #596]
 1104 00ea 0BE0     		b	.L77
 1105              	.L78:
 1106              		.loc 1 383 0 is_stmt 0 discriminator 3
 1107 00ec D7F84422 		ldr	r2, [r7, #580]
 1108 00f0 D7F85432 		ldr	r3, [r7, #596]
 1109 00f4 1344     		add	r3, r3, r2
 1110 00f6 0022     		movs	r2, #0
 1111 00f8 1A70     		strb	r2, [r3]
 1112 00fa D7F85432 		ldr	r3, [r7, #596]
 1113 00fe 0133     		adds	r3, r3, #1
 1114 0100 C7F85432 		str	r3, [r7, #596]
 1115              	.L77:
 1116              		.loc 1 383 0 discriminator 1
 1117 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1118 0108 D7F85432 		ldr	r3, [r7, #596]
 1119 010c 9A42     		cmp	r2, r3
 1120 010e EDDC     		bgt	.L78
 1121              	.LBE22:
 384:..\src/command_processing.c **** 
 385:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1122              		.loc 1 385 0 is_stmt 1
 1123 0110 D7F84432 		ldr	r3, [r7, #580]
 1124 0114 0C22     		movs	r2, #12
 1125 0116 1A70     		strb	r2, [r3]
 386:..\src/command_processing.c ****     packet_data[1] = num_params;
 1126              		.loc 1 386 0
 1127 0118 D7F84432 		ldr	r3, [r7, #580]
 1128 011c 07F10F02 		add	r2, r7, #15
 1129 0120 1278     		ldrb	r2, [r2]
 1130 0122 5A70     		strb	r2, [r3, #1]
 387:..\src/command_processing.c ****     
 388:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1131              		.loc 1 388 0
 1132 0124 0023     		movs	r3, #0
 1133 0126 87F85F32 		strb	r3, [r7, #607]
 1134 012a 44E2     		b	.L79
 1135              	.L102:
 1136              	.LBB23:
 389:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1137              		.loc 1 389 0
 1138 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1139 0130 1B01     		lsls	r3, r3, #4
 1140 0132 07F10802 		add	r2, r7, #8
 1141 0136 1268     		ldr	r2, [r2]
 1142 0138 1344     		add	r3, r3, r2
 1143 013a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 42


 1144 013c C7F85032 		str	r3, [r7, #592]
 390:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1145              		.loc 1 390 0
 1146 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1147 0144 1B01     		lsls	r3, r3, #4
 1148 0146 07F10802 		add	r2, r7, #8
 1149 014a 1268     		ldr	r2, [r2]
 1150 014c 1344     		add	r3, r3, r2
 1151 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1152 0150 1846     		mov	r0, r3
 1153 0152 FFF7FEFF 		bl	num_of_bytes
 1154 0156 0346     		mov	r3, r0
 1155 0158 87F84332 		strb	r3, [r7, #579]
 391:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1156              		.loc 1 391 0
 1157 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1158 0160 3222     		movs	r2, #50
 1159 0162 02FB03F3 		mul	r3, r2, r3
 1160 0166 0233     		adds	r3, r3, #2
 1161 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1162 016c 1201     		lsls	r2, r2, #4
 1163 016e 07F10801 		add	r1, r7, #8
 1164 0172 0968     		ldr	r1, [r1]
 1165 0174 0A44     		add	r2, r2, r1
 1166 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1167 0178 D7F84422 		ldr	r2, [r7, #580]
 1168 017c D154     		strb	r1, [r2, r3]
 392:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1169              		.loc 1 392 0
 1170 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1171 0182 3222     		movs	r2, #50
 1172 0184 02FB03F3 		mul	r3, r2, r3
 1173 0188 0333     		adds	r3, r3, #3
 1174 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1175 018e 1201     		lsls	r2, r2, #4
 1176 0190 07F10801 		add	r1, r7, #8
 1177 0194 0968     		ldr	r1, [r1]
 1178 0196 0A44     		add	r2, r2, r1
 1179 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1180 019a D7F84422 		ldr	r2, [r7, #580]
 1181 019e D154     		strb	r1, [r2, r3]
 393:..\src/command_processing.c **** 
 394:..\src/command_processing.c **** 
 395:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1182              		.loc 1 395 0
 1183 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1184 01a4 1B01     		lsls	r3, r3, #4
 1185 01a6 07F10802 		add	r2, r7, #8
 1186 01aa 1268     		ldr	r2, [r2]
 1187 01ac 1344     		add	r3, r3, r2
 1188 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1189 01b0 052B     		cmp	r3, #5
 1190 01b2 61D1     		bne	.L113
 396:..\src/command_processing.c **** 
 397:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 398:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1191              		.loc 1 398 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 43


 1192 01b4 B74B     		ldr	r3, .L114
 1193 01b6 1B6A     		ldr	r3, [r3, #32]
 1194 01b8 B64A     		ldr	r2, .L114
 1195 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1196 01be 43FA02F2 		asr	r2, r3, r2
 1197 01c2 07F14803 		add	r3, r7, #72
 1198 01c6 1A60     		str	r2, [r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1199              		.loc 1 399 0
 1200 01c8 0023     		movs	r3, #0
 1201 01ca 87F85C32 		strb	r3, [r7, #604]
 1202 01ce 1AE0     		b	.L82
 1203              	.L83:
 400:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1204              		.loc 1 400 0 discriminator 3
 1205 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1206 01d4 3222     		movs	r2, #50
 1207 01d6 02FB03F3 		mul	r3, r2, r3
 1208 01da 1A1D     		adds	r2, r3, #4
 1209 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1210 01e0 1A44     		add	r2, r2, r3
 1211 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1212 01e6 D31A     		subs	r3, r2, r3
 1213 01e8 013B     		subs	r3, r3, #1
 1214 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1215 01ee 07F14801 		add	r1, r7, #72
 1216 01f2 0A44     		add	r2, r2, r1
 1217 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1218 01f6 D7F84422 		ldr	r2, [r7, #580]
 1219 01fa D154     		strb	r1, [r2, r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1220              		.loc 1 399 0 discriminator 3
 1221 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1222 0200 0133     		adds	r3, r3, #1
 1223 0202 87F85C32 		strb	r3, [r7, #604]
 1224              	.L82:
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1225              		.loc 1 399 0 is_stmt 0 discriminator 1
 1226 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1227 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1228 020e 9A42     		cmp	r2, r3
 1229 0210 DED3     		bcc	.L83
 401:..\src/command_processing.c ****             }
 402:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1230              		.loc 1 402 0 is_stmt 1
 1231 0212 A04B     		ldr	r3, .L114
 1232 0214 5B6A     		ldr	r3, [r3, #36]
 1233 0216 9F4A     		ldr	r2, .L114
 1234 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1235 021c 43FA02F2 		asr	r2, r3, r2
 1236 0220 07F14803 		add	r3, r7, #72
 1237 0224 1A60     		str	r2, [r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1238              		.loc 1 403 0
 1239 0226 0023     		movs	r3, #0
 1240 0228 87F85C32 		strb	r3, [r7, #604]
 1241 022c 1DE0     		b	.L84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 44


 1242              	.L85:
 404:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1243              		.loc 1 404 0 discriminator 3
 1244 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1245 0232 3222     		movs	r2, #50
 1246 0234 02FB03F3 		mul	r3, r2, r3
 1247 0238 1A1D     		adds	r2, r3, #4
 1248 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1249 023e 1A44     		add	r2, r2, r3
 1250 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1251 0244 1A44     		add	r2, r2, r3
 1252 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1253 024a D31A     		subs	r3, r2, r3
 1254 024c 013B     		subs	r3, r3, #1
 1255 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1256 0252 07F14801 		add	r1, r7, #72
 1257 0256 0A44     		add	r2, r2, r1
 1258 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1259 025a D7F84422 		ldr	r2, [r7, #580]
 1260 025e D154     		strb	r1, [r2, r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1261              		.loc 1 403 0 discriminator 3
 1262 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1263 0264 0133     		adds	r3, r3, #1
 1264 0266 87F85C32 		strb	r3, [r7, #604]
 1265              	.L84:
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1266              		.loc 1 403 0 is_stmt 0 discriminator 1
 1267 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1268 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1269 0272 9A42     		cmp	r2, r3
 1270 0274 DBD3     		bcc	.L85
 405:..\src/command_processing.c ****             }
 406:..\src/command_processing.c ****             break;            
 1271              		.loc 1 406 0 is_stmt 1
 1272 0276 48E0     		b	.L86
 1273              	.L113:
 407:..\src/command_processing.c ****             
 408:..\src/command_processing.c **** 
 409:..\src/command_processing.c ****         case 0:  // Not custom parameter
 410:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 411:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1274              		.loc 1 411 0
 1275 0278 0023     		movs	r3, #0
 1276 027a 87F85D32 		strb	r3, [r7, #605]
 1277 027e 32E0     		b	.L87
 1278              	.L90:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1279              		.loc 1 412 0
 1280 0280 0023     		movs	r3, #0
 1281 0282 87F85C32 		strb	r3, [r7, #604]
 1282 0286 21E0     		b	.L88
 1283              	.L89:
 413:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1284              		.loc 1 413 0 discriminator 3
 1285 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1286 028c 3222     		movs	r2, #50
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 45


 1287 028e 02FB03F3 		mul	r3, r2, r3
 1288 0292 1A1D     		adds	r2, r3, #4
 1289 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1290 0298 1A44     		add	r2, r2, r3
 1291 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1292 029e 1A44     		add	r2, r2, r3
 1293 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1294 02a4 D31A     		subs	r3, r2, r3
 1295 02a6 013B     		subs	r3, r3, #1
 1296 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1297 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1298 02b0 0A44     		add	r2, r2, r1
 1299 02b2 1146     		mov	r1, r2
 1300 02b4 D7F85022 		ldr	r2, [r7, #592]
 1301 02b8 0A44     		add	r2, r2, r1
 1302 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1303 02bc D7F84422 		ldr	r2, [r7, #580]
 1304 02c0 D154     		strb	r1, [r2, r3]
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1305              		.loc 1 412 0 discriminator 3
 1306 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1307 02c6 0133     		adds	r3, r3, #1
 1308 02c8 87F85C32 		strb	r3, [r7, #604]
 1309              	.L88:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1310              		.loc 1 412 0 is_stmt 0 discriminator 1
 1311 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1313 02d4 9A42     		cmp	r2, r3
 1314 02d6 D7D3     		bcc	.L89
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1315              		.loc 1 411 0 is_stmt 1 discriminator 2
 1316 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1317 02dc 97F84332 		ldrb	r3, [r7, #579]
 1318 02e0 1344     		add	r3, r3, r2
 1319 02e2 87F85D32 		strb	r3, [r7, #605]
 1320              	.L87:
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1321              		.loc 1 411 0 is_stmt 0 discriminator 1
 1322 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1323 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1324 02ee 1B01     		lsls	r3, r3, #4
 1325 02f0 07F10801 		add	r1, r7, #8
 1326 02f4 0968     		ldr	r1, [r1]
 1327 02f6 0B44     		add	r3, r3, r1
 1328 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1329 02fa 1946     		mov	r1, r3
 1330 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1331 0300 03FB01F3 		mul	r3, r3, r1
 1332 0304 9A42     		cmp	r2, r3
 1333 0306 BBDB     		blt	.L90
 414:..\src/command_processing.c ****                 }
 415:..\src/command_processing.c ****             }
 416:..\src/command_processing.c ****             break;
 1334              		.loc 1 416 0 is_stmt 1
 1335 0308 00BF     		nop
 1336              	.L86:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 46


 417:..\src/command_processing.c ****     }
 418:..\src/command_processing.c ****        
 419:..\src/command_processing.c ****         sprintf(aux_str,"");
 1337              		.loc 1 419 0
 1338 030a 634B     		ldr	r3, .L114+4
 1339 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1340 030e 07F5A473 		add	r3, r7, #328
 1341 0312 1A70     		strb	r2, [r3]
 420:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1342              		.loc 1 420 0
 1343 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1344 0318 0133     		adds	r3, r3, #1
 1345 031a 07F11401 		add	r1, r7, #20
 1346 031e 0A22     		movs	r2, #10
 1347 0320 1846     		mov	r0, r3
 1348 0322 FFF7FEFF 		bl	itoa
 421:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1349              		.loc 1 421 0
 1350 0326 07F11402 		add	r2, r7, #20
 1351 032a 07F5A473 		add	r3, r7, #328
 1352 032e 1146     		mov	r1, r2
 1353 0330 1846     		mov	r0, r3
 1354 0332 FFF7FEFF 		bl	strcat
 422:..\src/command_processing.c ****         strcat(aux_str," - ");
 1355              		.loc 1 422 0
 1356 0336 07F5A473 		add	r3, r7, #328
 1357 033a 1846     		mov	r0, r3
 1358 033c FFF7FEFF 		bl	strlen
 1359 0340 0346     		mov	r3, r0
 1360 0342 1A46     		mov	r2, r3
 1361 0344 07F5A473 		add	r3, r7, #328
 1362 0348 1344     		add	r3, r3, r2
 1363 034a 544A     		ldr	r2, .L114+8
 1364 034c 1068     		ldr	r0, [r2]	@ unaligned
 1365 034e 1860     		str	r0, [r3]	@ unaligned
 423:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1366              		.loc 1 423 0
 1367 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1368 0354 1B01     		lsls	r3, r3, #4
 1369 0356 07F10802 		add	r2, r7, #8
 1370 035a 1268     		ldr	r2, [r2]
 1371 035c 1344     		add	r3, r3, r2
 1372 035e 9A68     		ldr	r2, [r3, #8]
 1373 0360 07F5A473 		add	r3, r7, #328
 1374 0364 1146     		mov	r1, r2
 1375 0366 1846     		mov	r0, r3
 1376 0368 FFF7FEFF 		bl	strcat
 424:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1377              		.loc 1 424 0
 1378 036c 07F5A473 		add	r3, r7, #328
 1379 0370 1846     		mov	r0, r3
 1380 0372 FFF7FEFF 		bl	strlen
 1381 0376 0346     		mov	r3, r0
 1382 0378 87F85E32 		strb	r3, [r7, #606]
 425:..\src/command_processing.c ****         
 426:..\src/command_processing.c ****         // Parameters with a menu
 427:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 47


 1383              		.loc 1 427 0
 1384 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1385 0380 1B01     		lsls	r3, r3, #4
 1386 0382 07F10802 		add	r2, r7, #8
 1387 0386 1268     		ldr	r2, [r2]
 1388 0388 1344     		add	r3, r3, r2
 1389 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1390 038c 002B     		cmp	r3, #0
 1391 038e 40D0     		beq	.L91
 428:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1392              		.loc 1 428 0
 1393 0390 0023     		movs	r3, #0
 1394 0392 87F85D32 		strb	r3, [r7, #605]
 1395 0396 35E0     		b	.L92
 1396              	.L94:
 429:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1397              		.loc 1 429 0
 1398 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1399 039c 2C22     		movs	r2, #44
 1400 039e 02FB03F3 		mul	r3, r2, r3
 1401 03a2 3A1D     		adds	r2, r7, #4
 1402 03a4 1268     		ldr	r2, [r2]
 1403 03a6 1344     		add	r3, r3, r2
 1404 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1405 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1406 03ae 1B01     		lsls	r3, r3, #4
 1407 03b0 07F10801 		add	r1, r7, #8
 1408 03b4 0968     		ldr	r1, [r1]
 1409 03b6 0B44     		add	r3, r3, r1
 1410 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1411 03ba 9A42     		cmp	r2, r3
 1412 03bc 13D1     		bne	.L93
 430:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1413              		.loc 1 430 0
 1414 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1415 03c2 2C22     		movs	r2, #44
 1416 03c4 02FB03F3 		mul	r3, r2, r3
 1417 03c8 3A1D     		adds	r2, r7, #4
 1418 03ca 1268     		ldr	r2, [r2]
 1419 03cc 1A44     		add	r2, r2, r3
 1420 03ce D7F85032 		ldr	r3, [r7, #592]
 1421 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1422 03d4 9B00     		lsls	r3, r3, #2
 1423 03d6 1344     		add	r3, r3, r2
 1424 03d8 5A68     		ldr	r2, [r3, #4]
 1425 03da 07F5A473 		add	r3, r7, #328
 1426 03de 1146     		mov	r1, r2
 1427 03e0 1846     		mov	r0, r3
 1428 03e2 FFF7FEFF 		bl	strcat
 1429              	.L93:
 431:..\src/command_processing.c ****                 }              
 432:..\src/command_processing.c ****             //Recomputes string length
 433:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1430              		.loc 1 433 0 discriminator 2
 1431 03e6 07F5A473 		add	r3, r7, #328
 1432 03ea 1846     		mov	r0, r3
 1433 03ec FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 48


 1434 03f0 0346     		mov	r3, r0
 1435 03f2 DBB2     		uxtb	r3, r3
 1436 03f4 0133     		adds	r3, r3, #1
 1437 03f6 87F85E32 		strb	r3, [r7, #606]
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1438              		.loc 1 428 0 discriminator 2
 1439 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1440 03fe 0133     		adds	r3, r3, #1
 1441 0400 87F85D32 		strb	r3, [r7, #605]
 1442              	.L92:
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1443              		.loc 1 428 0 is_stmt 0 discriminator 1
 1444 0404 07F10E03 		add	r3, r7, #14
 1445 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1446 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1447 040e 9A42     		cmp	r2, r3
 1448 0410 C2D3     		bcc	.L94
 1449              	.L91:
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****         }
 436:..\src/command_processing.c **** 
 437:..\src/command_processing.c ****         // Add parameter string to packet
 438:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1450              		.loc 1 438 0 is_stmt 1
 1451 0412 97F85E32 		ldrb	r3, [r7, #606]
 1452 0416 87F85D32 		strb	r3, [r7, #605]
 1453 041a 28E0     		b	.L95
 1454              	.L96:
 439:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1455              		.loc 1 439 0 discriminator 3
 1456 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1457 0420 3222     		movs	r2, #50
 1458 0422 02FB03F3 		mul	r3, r2, r3
 1459 0426 1A1D     		adds	r2, r3, #4
 1460 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1461 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1462 0430 0901     		lsls	r1, r1, #4
 1463 0432 07F10800 		add	r0, r7, #8
 1464 0436 0068     		ldr	r0, [r0]
 1465 0438 0144     		add	r1, r1, r0
 1466 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1467 043c 01FB03F3 		mul	r3, r1, r3
 1468 0440 1A44     		add	r2, r2, r3
 1469 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1470 0446 1A44     		add	r2, r2, r3
 1471 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1472 044c D31A     		subs	r3, r2, r3
 1473 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1474 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1475 0456 8A1A     		subs	r2, r1, r2
 1476 0458 07F5A471 		add	r1, r7, #328
 1477 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1478 045e D7F84422 		ldr	r2, [r7, #580]
 1479 0462 D154     		strb	r1, [r2, r3]
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1480              		.loc 1 438 0 discriminator 3
 1481 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 49


 1482 0468 013B     		subs	r3, r3, #1
 1483 046a 87F85D32 		strb	r3, [r7, #605]
 1484              	.L95:
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1485              		.loc 1 438 0 is_stmt 0 discriminator 1
 1486 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1487 0472 002B     		cmp	r3, #0
 1488 0474 D2D1     		bne	.L96
 440:..\src/command_processing.c ****         
 441:..\src/command_processing.c ****         
 442:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1489              		.loc 1 442 0 is_stmt 1
 1490 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1491 047a 1B01     		lsls	r3, r3, #4
 1492 047c 07F10802 		add	r2, r7, #8
 1493 0480 1268     		ldr	r2, [r2]
 1494 0482 1344     		add	r3, r3, r2
 1495 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1496 0486 002B     		cmp	r3, #0
 1497 0488 6ED1     		bne	.L97
 443:..\src/command_processing.c ****             //Send the number of menus          
 444:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1498              		.loc 1 444 0
 1499 048a 0023     		movs	r3, #0
 1500 048c 87F85D32 		strb	r3, [r7, #605]
 1501 0490 40E0     		b	.L98
 1502              	.L115:
 1503 0492 00BF     		.align	2
 1504              	.L114:
 1505 0494 00000000 		.word	c_mem
 1506 0498 00000000 		.word	.LC8
 1507 049c 04000000 		.word	.LC14
 1508              	.L100:
 445:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1509              		.loc 1 445 0
 1510 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1511 04a4 2C22     		movs	r2, #44
 1512 04a6 02FB03F3 		mul	r3, r2, r3
 1513 04aa 3A1D     		adds	r2, r7, #4
 1514 04ac 1268     		ldr	r2, [r2]
 1515 04ae 1344     		add	r3, r3, r2
 1516 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1517 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1518 04b6 1B01     		lsls	r3, r3, #4
 1519 04b8 07F10801 		add	r1, r7, #8
 1520 04bc 0968     		ldr	r1, [r1]
 1521 04be 0B44     		add	r3, r3, r1
 1522 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1523 04c2 9A42     		cmp	r2, r3
 1524 04c4 21D1     		bne	.L99
 446:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1525              		.loc 1 446 0
 1526 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1527 04ca 3222     		movs	r2, #50
 1528 04cc 02FB03F3 		mul	r3, r2, r3
 1529 04d0 1A1D     		adds	r2, r3, #4
 1530 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 50


 1531 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1532 04da 0901     		lsls	r1, r1, #4
 1533 04dc 07F10800 		add	r0, r7, #8
 1534 04e0 0068     		ldr	r0, [r0]
 1535 04e2 0144     		add	r1, r1, r0
 1536 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1537 04e6 01FB03F3 		mul	r3, r1, r3
 1538 04ea 1A44     		add	r2, r2, r3
 1539 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1540 04f0 1344     		add	r3, r3, r2
 1541 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1542 04f6 0132     		adds	r2, r2, #1
 1543 04f8 D1B2     		uxtb	r1, r2
 1544 04fa D7F84422 		ldr	r2, [r7, #580]
 1545 04fe D154     		strb	r1, [r2, r3]
 447:..\src/command_processing.c ****                 i = num_menus;}              
 1546              		.loc 1 447 0
 1547 0500 07F10E03 		add	r3, r7, #14
 1548 0504 1B78     		ldrb	r3, [r3]
 1549 0506 87F85D32 		strb	r3, [r7, #605]
 1550              	.L99:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1551              		.loc 1 444 0 discriminator 2
 1552 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1553 050e 0133     		adds	r3, r3, #1
 1554 0510 87F85D32 		strb	r3, [r7, #605]
 1555              	.L98:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1556              		.loc 1 444 0 is_stmt 0 discriminator 1
 1557 0514 07F10E03 		add	r3, r7, #14
 1558 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1559 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1560 051e 9A42     		cmp	r2, r3
 1561 0520 BED3     		bcc	.L100
 448:..\src/command_processing.c ****             }
 449:..\src/command_processing.c ****             // Add empty bit + struct number
 450:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 451:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1562              		.loc 1 451 0 is_stmt 1
 1563 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1564 0526 3222     		movs	r2, #50
 1565 0528 02FB03F3 		mul	r3, r2, r3
 1566 052c 1A1D     		adds	r2, r3, #4
 1567 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1568 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1569 0536 0901     		lsls	r1, r1, #4
 1570 0538 07F10800 		add	r0, r7, #8
 1571 053c 0068     		ldr	r0, [r0]
 1572 053e 0144     		add	r1, r1, r0
 1573 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1574 0542 01FB03F3 		mul	r3, r1, r3
 1575 0546 1A44     		add	r2, r2, r3
 1576 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1577 054c 1344     		add	r3, r3, r2
 1578 054e 0233     		adds	r3, r3, #2
 1579 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1580 0554 1201     		lsls	r2, r2, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 51


 1581 0556 07F10801 		add	r1, r7, #8
 1582 055a 0968     		ldr	r1, [r1]
 1583 055c 0A44     		add	r2, r2, r1
 1584 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1585 0560 D7F84422 		ldr	r2, [r7, #580]
 1586 0564 D154     		strb	r1, [r2, r3]
 1587 0566 21E0     		b	.L101
 1588              	.L97:
 452:..\src/command_processing.c ****         }
 453:..\src/command_processing.c ****         else {
 454:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1589              		.loc 1 454 0
 1590 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1591 056c 3222     		movs	r2, #50
 1592 056e 02FB03F3 		mul	r3, r2, r3
 1593 0572 1A1D     		adds	r2, r3, #4
 1594 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1595 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1596 057c 0901     		lsls	r1, r1, #4
 1597 057e 07F10800 		add	r0, r7, #8
 1598 0582 0068     		ldr	r0, [r0]
 1599 0584 0144     		add	r1, r1, r0
 1600 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1601 0588 01FB03F3 		mul	r3, r1, r3
 1602 058c 1A44     		add	r2, r2, r3
 1603 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1604 0592 1344     		add	r3, r3, r2
 1605 0594 0133     		adds	r3, r3, #1
 1606 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1607 059a 1201     		lsls	r2, r2, #4
 1608 059c 07F10801 		add	r1, r7, #8
 1609 05a0 0968     		ldr	r1, [r1]
 1610 05a2 0A44     		add	r2, r2, r1
 1611 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1612 05a6 D7F84422 		ldr	r2, [r7, #580]
 1613 05aa D154     		strb	r1, [r2, r3]
 1614              	.L101:
 1615              	.LBE23:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1616              		.loc 1 388 0 discriminator 2
 1617 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1618 05b0 0133     		adds	r3, r3, #1
 1619 05b2 87F85F32 		strb	r3, [r7, #607]
 1620              	.L79:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1621              		.loc 1 388 0 is_stmt 0 discriminator 1
 1622 05b6 07F10F03 		add	r3, r7, #15
 1623 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1624 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 05c0 9A42     		cmp	r2, r3
 1626 05c2 FFF4B3AD 		bcc	.L102
 455:..\src/command_processing.c ****         }
 456:..\src/command_processing.c ****     }
 457:..\src/command_processing.c ****     
 458:..\src/command_processing.c ****     // Add menu
 459:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1627              		.loc 1 459 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 52


 1628 05c6 0023     		movs	r3, #0
 1629 05c8 87F85C32 		strb	r3, [r7, #604]
 1630 05cc C0E0     		b	.L103
 1631              	.L111:
 460:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1632              		.loc 1 460 0
 1633 05ce 774B     		ldr	r3, .L116
 1634 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 05d2 07F14C03 		add	r3, r7, #76
 1636 05d6 1A70     		strb	r2, [r3]
 461:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1637              		.loc 1 461 0
 1638 05d8 0023     		movs	r3, #0
 1639 05da 87F85B32 		strb	r3, [r7, #603]
 1640 05de 7AE0     		b	.L104
 1641              	.L108:
 462:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1642              		.loc 1 462 0
 1643 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1644 05e4 2C22     		movs	r2, #44
 1645 05e6 02FB03F3 		mul	r3, r2, r3
 1646 05ea 3A1D     		adds	r2, r7, #4
 1647 05ec 1268     		ldr	r2, [r2]
 1648 05ee 1A44     		add	r2, r2, r3
 1649 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1650 05f4 9B00     		lsls	r3, r3, #2
 1651 05f6 1344     		add	r3, r3, r2
 1652 05f8 5B68     		ldr	r3, [r3, #4]
 1653 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1654 05fc 002B     		cmp	r3, #0
 1655 05fe 24D1     		bne	.L105
 463:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1656              		.loc 1 463 0
 1657 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1658 0604 2C22     		movs	r2, #44
 1659 0606 02FB03F3 		mul	r3, r2, r3
 1660 060a 3A1D     		adds	r2, r7, #4
 1661 060c 1268     		ldr	r2, [r2]
 1662 060e 1344     		add	r3, r3, r2
 1663 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1664 0612 012B     		cmp	r3, #1
 1665 0614 15D1     		bne	.L106
 464:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1666              		.loc 1 464 0
 1667 0616 07F14C03 		add	r3, r7, #76
 1668 061a 1846     		mov	r0, r3
 1669 061c FFF7FEFF 		bl	strlen
 1670 0620 0346     		mov	r3, r0
 1671 0622 1A46     		mov	r2, r3
 1672 0624 07F14C03 		add	r3, r7, #76
 1673 0628 1344     		add	r3, r3, r2
 1674 062a 614A     		ldr	r2, .L116+4
 1675 062c 1D46     		mov	r5, r3
 1676 062e 1446     		mov	r4, r2
 1677 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1678 0632 2860     		str	r0, [r5]	@ unaligned
 1679 0634 6960     		str	r1, [r5, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 53


 1680 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1681 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1682 063a 2068     		ldr	r0, [r4]	@ unaligned
 1683 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1684 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1685 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1686              	.L106:
 465:..\src/command_processing.c ****                 }
 466:..\src/command_processing.c ****                 count = 10;
 1687              		.loc 1 466 0
 1688 0642 0A23     		movs	r3, #10
 1689 0644 87F85B32 		strb	r3, [r7, #603]
 1690 0648 40E0     		b	.L107
 1691              	.L105:
 467:..\src/command_processing.c ****             }            
 468:..\src/command_processing.c ****             else {
 469:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1692              		.loc 1 469 0
 1693 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1694 064e 07F11401 		add	r1, r7, #20
 1695 0652 0A22     		movs	r2, #10
 1696 0654 1846     		mov	r0, r3
 1697 0656 FFF7FEFF 		bl	itoa
 470:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1698              		.loc 1 470 0
 1699 065a 07F11402 		add	r2, r7, #20
 1700 065e 07F14C03 		add	r3, r7, #76
 1701 0662 1146     		mov	r1, r2
 1702 0664 1846     		mov	r0, r3
 1703 0666 FFF7FEFF 		bl	strcat
 471:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1704              		.loc 1 471 0
 1705 066a 07F14C03 		add	r3, r7, #76
 1706 066e 1846     		mov	r0, r3
 1707 0670 FFF7FEFF 		bl	strlen
 1708 0674 0346     		mov	r3, r0
 1709 0676 1A46     		mov	r2, r3
 1710 0678 07F14C03 		add	r3, r7, #76
 1711 067c 1344     		add	r3, r3, r2
 1712 067e 4D4A     		ldr	r2, .L116+8
 1713 0680 1068     		ldr	r0, [r2]	@ unaligned
 1714 0682 1860     		str	r0, [r3]	@ unaligned
 1715 0684 1279     		ldrb	r2, [r2, #4]
 1716 0686 1A71     		strb	r2, [r3, #4]
 472:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
 1717              		.loc 1 472 0
 1718 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1719 068c 2C22     		movs	r2, #44
 1720 068e 02FB03F3 		mul	r3, r2, r3
 1721 0692 3A1D     		adds	r2, r7, #4
 1722 0694 1268     		ldr	r2, [r2]
 1723 0696 1A44     		add	r2, r2, r3
 1724 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1725 069c 9B00     		lsls	r3, r3, #2
 1726 069e 1344     		add	r3, r3, r2
 1727 06a0 5A68     		ldr	r2, [r3, #4]
 1728 06a2 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 54


 1729 06a6 1146     		mov	r1, r2
 1730 06a8 1846     		mov	r0, r3
 1731 06aa FFF7FEFF 		bl	strcat
 473:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1732              		.loc 1 473 0
 1733 06ae 07F14C03 		add	r3, r7, #76
 1734 06b2 1846     		mov	r0, r3
 1735 06b4 FFF7FEFF 		bl	strlen
 1736 06b8 0346     		mov	r3, r0
 1737 06ba 1A46     		mov	r2, r3
 1738 06bc 07F14C03 		add	r3, r7, #76
 1739 06c0 1344     		add	r3, r3, r2
 1740 06c2 3D49     		ldr	r1, .L116+12
 1741 06c4 1A46     		mov	r2, r3
 1742 06c6 0B46     		mov	r3, r1
 1743 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1744 06ca 1380     		strh	r3, [r2]	@ unaligned
 1745              	.L107:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1746              		.loc 1 461 0 discriminator 2
 1747 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1748 06d0 0133     		adds	r3, r3, #1
 1749 06d2 87F85B32 		strb	r3, [r7, #603]
 1750              	.L104:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1751              		.loc 1 461 0 is_stmt 0 discriminator 1
 1752 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1753 06da 092B     		cmp	r3, #9
 1754 06dc 80D9     		bls	.L108
 474:..\src/command_processing.c ****             }    
 475:..\src/command_processing.c ****         }
 476:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1755              		.loc 1 476 0 is_stmt 1
 1756 06de 07F14C03 		add	r3, r7, #76
 1757 06e2 1846     		mov	r0, r3
 1758 06e4 FFF7FEFF 		bl	strlen
 1759 06e8 0346     		mov	r3, r0
 1760 06ea 87F85E32 		strb	r3, [r7, #606]
 477:..\src/command_processing.c ****         
 478:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1761              		.loc 1 478 0
 1762 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1763 06f2 87F85D32 		strb	r3, [r7, #605]
 1764 06f6 22E0     		b	.L109
 1765              	.L110:
 479:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1766              		.loc 1 479 0 discriminator 3
 1767 06f8 07F10F03 		add	r3, r7, #15
 1768 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1769 06fe 3222     		movs	r2, #50
 1770 0700 02FB03F3 		mul	r3, r2, r3
 1771 0704 9A1C     		adds	r2, r3, #2
 1772 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1773 070a 9621     		movs	r1, #150
 1774 070c 01FB03F3 		mul	r3, r1, r3
 1775 0710 1A44     		add	r2, r2, r3
 1776 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 55


 1777 0716 1A44     		add	r2, r2, r3
 1778 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1779 071c D31A     		subs	r3, r2, r3
 1780 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1781 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1782 0726 8A1A     		subs	r2, r1, r2
 1783 0728 07F14C01 		add	r1, r7, #76
 1784 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1785 072e D7F84422 		ldr	r2, [r7, #580]
 1786 0732 D154     		strb	r1, [r2, r3]
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1787              		.loc 1 478 0 discriminator 3
 1788 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1789 0738 013B     		subs	r3, r3, #1
 1790 073a 87F85D32 		strb	r3, [r7, #605]
 1791              	.L109:
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1792              		.loc 1 478 0 is_stmt 0 discriminator 1
 1793 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1794 0742 002B     		cmp	r3, #0
 1795 0744 D8D1     		bne	.L110
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1796              		.loc 1 459 0 is_stmt 1 discriminator 2
 1797 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1798 074a 0133     		adds	r3, r3, #1
 1799 074c 87F85C32 		strb	r3, [r7, #604]
 1800              	.L103:
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1801              		.loc 1 459 0 is_stmt 0 discriminator 1
 1802 0750 07F10E03 		add	r3, r7, #14
 1803 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1804 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1805 075a 9A42     		cmp	r2, r3
 1806 075c FFF437AF 		bcc	.L111
 480:..\src/command_processing.c ****     }
 481:..\src/command_processing.c ****         
 482:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1807              		.loc 1 482 0 is_stmt 1
 1808 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1809 0764 5C1E     		subs	r4, r3, #1
 1810 0766 D7F84422 		ldr	r2, [r7, #580]
 1811 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1812 076e DBB2     		uxtb	r3, r3
 1813 0770 013B     		subs	r3, r3, #1
 1814 0772 DBB2     		uxtb	r3, r3
 1815 0774 1946     		mov	r1, r3
 1816 0776 1046     		mov	r0, r2
 1817 0778 FFF7FEFF 		bl	LCRChecksum
 1818 077c 0346     		mov	r3, r0
 1819 077e 1A46     		mov	r2, r3
 1820 0780 D7F84432 		ldr	r3, [r7, #580]
 1821 0784 1A55     		strb	r2, [r3, r4]
 483:..\src/command_processing.c ****     
 484:..\src/command_processing.c ****     if (sendToDevice)
 1822              		.loc 1 484 0
 1823 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1824 078a 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 56


 1825 078c 07D0     		beq	.L112
 485:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1826              		.loc 1 485 0
 1827 078e D7F84432 		ldr	r3, [r7, #580]
 1828 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1829 0796 1146     		mov	r1, r2
 1830 0798 1846     		mov	r0, r3
 1831 079a FFF7FEFF 		bl	commWrite
 1832              	.L112:
 1833 079e B546     		mov	sp, r6
 486:..\src/command_processing.c ****     }
 487:..\src/command_processing.c ****     else {
 488:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 489:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 490:..\src/command_processing.c ****       // longPkgSize = packet_length;
 491:..\src/command_processing.c ****     }
 492:..\src/command_processing.c **** }
 1834              		.loc 1 492 0
 1835 07a0 00BF     		nop
 1836 07a2 07F51977 		add	r7, r7, #612
 1837              		.cfi_def_cfa_offset 28
 1838 07a6 BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1842              	.L117:
 1843              		.align	2
 1844              	.L116:
 1845 07ac 00000000 		.word	.LC8
 1846 07b0 08000000 		.word	.LC15
 1847 07b4 20000000 		.word	.LC16
 1848 07b8 28000000 		.word	.LC17
 1849              		.cfi_endproc
 1850              	.LFE68:
 1851              		.size	get_param_list, .-get_param_list
 1852              		.section	.rodata
 1853 002a 0000     		.align	2
 1854              	.LC19:
 1855 002c 44657669 		.ascii	"Device ID:\000"
 1855      63652049 
 1855      443A00
 1856 0037 00       		.align	2
 1857              	.LC20:
 1858 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1858      74687265 
 1858      73686F6C 
 1858      64733A00 
 1859              		.align	2
 1860              	.LC21:
 1861 0048 454D4720 		.ascii	"EMG max values:\000"
 1861      6D617820 
 1861      76616C75 
 1861      65733A00 
 1862              		.align	2
 1863              	.LC22:
 1864 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1864      6D617820 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 57


 1864      73706565 
 1864      64733A00 
 1865              		.align	2
 1866              	.LC23:
 1867 0068 454D4720 		.ascii	"EMG inversion:\000"
 1867      696E7665 
 1867      7273696F 
 1867      6E3A00
 1868 0077 00       		.align	2
 1869              	.LC24:
 1870 0078 4D617374 		.ascii	"Master Mode:\000"
 1870      6572204D 
 1870      6F64653A 
 1870      00
 1871 0085 000000   		.align	2
 1872              	.LC25:
 1873 0088 536C6176 		.ascii	"Slave ID:\000"
 1873      65204944 
 1873      3A00
 1874 0092 0000     		.align	2
 1875              	.LC26:
 1876 0094 536C6176 		.ascii	"Slave resolution:\000"
 1876      65207265 
 1876      736F6C75 
 1876      74696F6E 
 1876      3A00
 1877 00a6 0000     		.align	2
 1878              	.LC27:
 1879 00a8 496E7075 		.ascii	"Input mode:\000"
 1879      74206D6F 
 1879      64653A00 
 1880              		.align	2
 1881              	.LC28:
 1882 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1882      206C696D 
 1882      69747320 
 1882      5B696E66 
 1882      2C207375 
 1883              		.align	2
 1884              	.LC29:
 1885 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1885      6F746163 
 1885      74696C65 
 1885      20466565 
 1885      64626163 
 1886 00e3 00       		.align	2
 1887              	.LC30:
 1888 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1888      4368616D 
 1888      62657220 
 1888      46656564 
 1888      6261636B 
 1889 00fa 0000     		.align	2
 1890              	.LC31:
 1891 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1891      6D756D20 
 1891      736C6176 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 58


 1891      65207265 
 1891      73696475 
 1892              		.align	2
 1893              	.LC32:
 1894 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1894      6D756D20 
 1894      70726573 
 1894      73757265 
 1894      20666565 
 1895 013d 000000   		.align	2
 1896              	.LC33:
 1897 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1897      6F727469 
 1897      6F6E616C 
 1897      20707265 
 1897      73737572 
 1898 0162 0000     		.align	2
 1899              	.LC0:
 1900 0164 20557362 		.ascii	" Usb\000"
 1900      00
 1901 0169 000000   		.align	2
 1902              	.LC1:
 1903 016c 2048616E 		.ascii	" Handle\000"
 1903      646C6500 
 1904              		.align	2
 1905              	.LC2:
 1906 0174 20454D47 		.ascii	" EMG proportional\000"
 1906      2070726F 
 1906      706F7274 
 1906      696F6E61 
 1906      6C00
 1907 0186 0000     		.align	2
 1908              	.LC3:
 1909 0188 20454D47 		.ascii	" EMG Integral\000"
 1909      20496E74 
 1909      65677261 
 1909      6C00
 1910 0196 0000     		.align	2
 1911              	.LC4:
 1912 0198 20454D47 		.ascii	" EMG FCFS\000"
 1912      20464346 
 1912      5300
 1913 01a2 0000     		.align	2
 1914              	.LC5:
 1915 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
 1915      20464346 
 1915      53204164 
 1915      76616E63 
 1915      656400
 1916 01b7 00       		.align	2
 1917              	.LC6:
 1918 01b8 204A6F79 		.ascii	" Joystick\000"
 1918      73746963 
 1918      6B00
 1919 01c2 0000     		.align	2
 1920              	.LC7:
 1921 01c4 20454D47 		.ascii	" EMG proportional NC\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 59


 1921      2070726F 
 1921      706F7274 
 1921      696F6E61 
 1921      6C204E43 
 1922 01d9 000000   		.align	2
 1923              	.LC9:
 1924 01dc 204E4F00 		.ascii	" NO\000"
 1925              		.align	2
 1926              	.LC10:
 1927 01e0 20594553 		.ascii	" YES\000"
 1927      00
 1928 01e5 000000   		.align	2
 1929              	.LC11:
 1930 01e8 204F4646 		.ascii	" OFF\000"
 1930      00
 1931 01ed 000000   		.align	2
 1932              	.LC12:
 1933 01f0 204F4E00 		.ascii	" ON\000"
 1934              		.align	2
 1935              	.LC18:
 1936 01f4 01       		.byte	1
 1937 01f5 00       		.byte	0
 1938 01f6 0000     		.space	2
 1939 01f8 64010000 		.word	.LC0
 1940 01fc 6C010000 		.word	.LC1
 1941 0200 74010000 		.word	.LC2
 1942 0204 88010000 		.word	.LC3
 1943 0208 98010000 		.word	.LC4
 1944 020c A4010000 		.word	.LC5
 1945 0210 B8010000 		.word	.LC6
 1946 0214 C4010000 		.word	.LC7
 1947 0218 00000000 		.word	.LC8
 1948 021c 00000000 		.word	.LC8
 1949 0220 03       		.byte	3
 1950 0221 00       		.byte	0
 1951 0222 0000     		.space	2
 1952 0224 DC010000 		.word	.LC9
 1953 0228 E0010000 		.word	.LC10
 1954 022c 00000000 		.word	.LC8
 1955 0230 00000000 		.word	.LC8
 1956 0234 00000000 		.word	.LC8
 1957 0238 00000000 		.word	.LC8
 1958 023c 00000000 		.word	.LC8
 1959 0240 00000000 		.word	.LC8
 1960 0244 00000000 		.word	.LC8
 1961 0248 00000000 		.word	.LC8
 1962 024c 05       		.byte	5
 1963 024d 01       		.byte	1
 1964 024e 0000     		.space	2
 1965 0250 E8010000 		.word	.LC11
 1966 0254 F0010000 		.word	.LC12
 1967 0258 00000000 		.word	.LC8
 1968 025c 00000000 		.word	.LC8
 1969 0260 00000000 		.word	.LC8
 1970 0264 00000000 		.word	.LC8
 1971 0268 00000000 		.word	.LC8
 1972 026c 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 60


 1973 0270 00000000 		.word	.LC8
 1974 0274 00000000 		.word	.LC8
 1975              		.section	.text.manage_param_list,"ax",%progbits
 1976              		.align	2
 1977              		.global	manage_param_list
 1978              		.thumb
 1979              		.thumb_func
 1980              		.type	manage_param_list, %function
 1981              	manage_param_list:
 1982              	.LFB69:
 493:..\src/command_processing.c **** 
 494:..\src/command_processing.c **** //==============================================================================
 495:..\src/command_processing.c **** // MANAGE PARAM LIST
 496:..\src/command_processing.c **** //==============================================================================
 497:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 1983              		.loc 1 497 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 456
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 90B5     		push	{r4, r7, lr}
 1988              		.cfi_def_cfa_offset 12
 1989              		.cfi_offset 4, -12
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 F5B0     		sub	sp, sp, #468
 1993              		.cfi_def_cfa_offset 480
 1994 0004 02AF     		add	r7, sp, #8
 1995              		.cfi_def_cfa 7, 472
 1996 0006 0246     		mov	r2, r0
 1997 0008 BB1D     		adds	r3, r7, #6
 1998 000a 1A80     		strh	r2, [r3]	@ movhi
 1999 000c 7B1D     		adds	r3, r7, #5
 2000 000e 0A46     		mov	r2, r1
 2001 0010 1A70     		strb	r2, [r3]
 498:..\src/command_processing.c ****     uint8 CYDATA i, j;
 499:..\src/command_processing.c ****     
 500:..\src/command_processing.c ****     uint8 PARAM_IDX;
 501:..\src/command_processing.c ****          
 502:..\src/command_processing.c ****     // Arrays
 503:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2002              		.loc 1 503 0
 2003 0012 EE4B     		ldr	r3, .L134
 2004 0014 C7F8C031 		str	r3, [r7, #448]
 504:..\src/command_processing.c ****     
 505:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
 2005              		.loc 1 505 0
 2006 0018 BB1D     		adds	r3, r7, #6
 2007 001a 1B88     		ldrh	r3, [r3]
 2008 001c 002B     		cmp	r3, #0
 2009 001e 02D0     		beq	.L119
 506:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2010              		.loc 1 506 0
 2011 0020 EB4B     		ldr	r3, .L134+4
 2012 0022 C7F8C031 		str	r3, [r7, #448]
 2013              	.L119:
 507:..\src/command_processing.c ****     }
 508:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 61


 509:..\src/command_processing.c ****     struct menu menu_type;
 510:..\src/command_processing.c ****     
 511:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 512:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2014              		.loc 1 512 0
 2015 0026 EB4A     		ldr	r2, .L134+8
 2016 0028 07F58673 		add	r3, r7, #268
 2017 002c 1146     		mov	r1, r2
 2018 002e 8422     		movs	r2, #132
 2019 0030 1846     		mov	r0, r3
 2020 0032 FFF7FEFF 		bl	memcpy
 513:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 514:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 515:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 516:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 517:..\src/command_processing.c ****        };
 518:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 519:..\src/command_processing.c ****         
 520:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2021              		.loc 1 520 0
 2022 0036 0323     		movs	r3, #3
 2023 0038 87F8BF31 		strb	r3, [r7, #447]
 521:..\src/command_processing.c ****     
 522:..\src/command_processing.c ****     struct parameter param_type;   
 523:..\src/command_processing.c ****     
 524:..\src/command_processing.c ****     const struct parameter PARAM_LIST[] = {
 525:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 526:..\src/command_processing.c ****         //DEVICE_PARAMETERS    
 527:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->dev.id)                           , TYPE_UINT8      , 1         , 
 2024              		.loc 1 527 0
 2025 003c D7F8C031 		ldr	r3, [r7, #448]
 2026 0040 03F11002 		add	r2, r3, #16
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2027              		.loc 1 524 0
 2028 0044 07F10C03 		add	r3, r7, #12
 2029 0048 1A60     		str	r2, [r3]
 2030 004a 07F10C03 		add	r3, r7, #12
 2031 004e 0222     		movs	r2, #2
 2032 0050 1A71     		strb	r2, [r3, #4]
 2033 0052 07F10C03 		add	r3, r7, #12
 2034 0056 0122     		movs	r2, #1
 2035 0058 5A71     		strb	r2, [r3, #5]
 2036 005a 07F10C03 		add	r3, r7, #12
 2037 005e DE4A     		ldr	r2, .L134+12
 2038 0060 9A60     		str	r2, [r3, #8]
 2039 0062 07F10C03 		add	r3, r7, #12
 2040 0066 0022     		movs	r2, #0
 2041 0068 1A73     		strb	r2, [r3, #12]
 2042 006a 07F10C03 		add	r3, r7, #12
 2043 006e 0022     		movs	r2, #0
 2044 0070 5A73     		strb	r2, [r3, #13]
 2045 0072 07F10C03 		add	r3, r7, #12
 2046 0076 0022     		movs	r2, #0
 2047 0078 9A73     		strb	r2, [r3, #14]
 2048 007a 07F10C03 		add	r3, r7, #12
 2049 007e 0122     		movs	r2, #1
 2050 0080 DA73     		strb	r2, [r3, #15]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 62


 528:..\src/command_processing.c ****         
 529:..\src/command_processing.c ****         //EMG_PARAMETERS    
 530:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , 
 2051              		.loc 1 530 0
 2052 0082 D7F8C031 		ldr	r3, [r7, #448]
 2053 0086 03F13002 		add	r2, r3, #48
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2054              		.loc 1 524 0
 2055 008a 07F10C03 		add	r3, r7, #12
 2056 008e 1A61     		str	r2, [r3, #16]
 2057 0090 07F10C03 		add	r3, r7, #12
 2058 0094 0422     		movs	r2, #4
 2059 0096 1A75     		strb	r2, [r3, #20]
 2060 0098 07F10C03 		add	r3, r7, #12
 2061 009c 0222     		movs	r2, #2
 2062 009e 5A75     		strb	r2, [r3, #21]
 2063 00a0 07F10C03 		add	r3, r7, #12
 2064 00a4 CD4A     		ldr	r2, .L134+16
 2065 00a6 9A61     		str	r2, [r3, #24]
 2066 00a8 07F10C03 		add	r3, r7, #12
 2067 00ac 0022     		movs	r2, #0
 2068 00ae 1A77     		strb	r2, [r3, #28]
 2069 00b0 07F10C03 		add	r3, r7, #12
 2070 00b4 1E22     		movs	r2, #30
 2071 00b6 5A77     		strb	r2, [r3, #29]
 2072 00b8 07F10C03 		add	r3, r7, #12
 2073 00bc 0022     		movs	r2, #0
 2074 00be 9A77     		strb	r2, [r3, #30]
 2075 00c0 07F10C03 		add	r3, r7, #12
 2076 00c4 0122     		movs	r2, #1
 2077 00c6 DA77     		strb	r2, [r3, #31]
 531:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , 
 2078              		.loc 1 531 0
 2079 00c8 D7F8C031 		ldr	r3, [r7, #448]
 2080 00cc 03F13402 		add	r2, r3, #52
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2081              		.loc 1 524 0
 2082 00d0 07F10C03 		add	r3, r7, #12
 2083 00d4 1A62     		str	r2, [r3, #32]
 2084 00d6 07F10C03 		add	r3, r7, #12
 2085 00da 0622     		movs	r2, #6
 2086 00dc 83F82420 		strb	r2, [r3, #36]
 2087 00e0 07F10C03 		add	r3, r7, #12
 2088 00e4 0222     		movs	r2, #2
 2089 00e6 83F82520 		strb	r2, [r3, #37]
 2090 00ea 07F10C03 		add	r3, r7, #12
 2091 00ee BC4A     		ldr	r2, .L134+20
 2092 00f0 9A62     		str	r2, [r3, #40]
 2093 00f2 07F10C03 		add	r3, r7, #12
 2094 00f6 0022     		movs	r2, #0
 2095 00f8 83F82C20 		strb	r2, [r3, #44]
 2096 00fc 07F10C03 		add	r3, r7, #12
 2097 0100 1E22     		movs	r2, #30
 2098 0102 83F82D20 		strb	r2, [r3, #45]
 2099 0106 07F10C03 		add	r3, r7, #12
 2100 010a 0022     		movs	r2, #0
 2101 010c 83F82E20 		strb	r2, [r3, #46]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 63


 2102 0110 07F10C03 		add	r3, r7, #12
 2103 0114 0122     		movs	r2, #1
 2104 0116 83F82F20 		strb	r2, [r3, #47]
 532:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , 
 2105              		.loc 1 532 0
 2106 011a D7F8C031 		ldr	r3, [r7, #448]
 2107 011e 03F13C02 		add	r2, r3, #60
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2108              		.loc 1 524 0
 2109 0122 07F10C03 		add	r3, r7, #12
 2110 0126 1A63     		str	r2, [r3, #48]
 2111 0128 07F10C03 		add	r3, r7, #12
 2112 012c 0222     		movs	r2, #2
 2113 012e 83F83420 		strb	r2, [r3, #52]
 2114 0132 07F10C03 		add	r3, r7, #12
 2115 0136 0222     		movs	r2, #2
 2116 0138 83F83520 		strb	r2, [r3, #53]
 2117 013c 07F10C03 		add	r3, r7, #12
 2118 0140 A84A     		ldr	r2, .L134+24
 2119 0142 9A63     		str	r2, [r3, #56]
 2120 0144 07F10C03 		add	r3, r7, #12
 2121 0148 0022     		movs	r2, #0
 2122 014a 83F83C20 		strb	r2, [r3, #60]
 2123 014e 07F10C03 		add	r3, r7, #12
 2124 0152 1E22     		movs	r2, #30
 2125 0154 83F83D20 		strb	r2, [r3, #61]
 2126 0158 07F10C03 		add	r3, r7, #12
 2127 015c 0022     		movs	r2, #0
 2128 015e 83F83E20 		strb	r2, [r3, #62]
 2129 0162 07F10C03 		add	r3, r7, #12
 2130 0166 0122     		movs	r2, #1
 2131 0168 83F83F20 		strb	r2, [r3, #63]
 533:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , 
 2132              		.loc 1 533 0
 2133 016c D7F8C031 		ldr	r3, [r7, #448]
 2134 0170 03F13E02 		add	r2, r3, #62
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2135              		.loc 1 524 0
 2136 0174 07F10C03 		add	r3, r7, #12
 2137 0178 1A64     		str	r2, [r3, #64]
 2138 017a 07F10C03 		add	r3, r7, #12
 2139 017e 0022     		movs	r2, #0
 2140 0180 83F84420 		strb	r2, [r3, #68]
 2141 0184 07F10C03 		add	r3, r7, #12
 2142 0188 0122     		movs	r2, #1
 2143 018a 83F84520 		strb	r2, [r3, #69]
 2144 018e 07F10C03 		add	r3, r7, #12
 2145 0192 954A     		ldr	r2, .L134+28
 2146 0194 9A64     		str	r2, [r3, #72]
 2147 0196 07F10C03 		add	r3, r7, #12
 2148 019a 0322     		movs	r2, #3
 2149 019c 83F84C20 		strb	r2, [r3, #76]
 2150 01a0 07F10C03 		add	r3, r7, #12
 2151 01a4 1E22     		movs	r2, #30
 2152 01a6 83F84D20 		strb	r2, [r3, #77]
 2153 01aa 07F10C03 		add	r3, r7, #12
 2154 01ae 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 64


 2155 01b0 83F84E20 		strb	r2, [r3, #78]
 2156 01b4 07F10C03 		add	r3, r7, #12
 2157 01b8 0122     		movs	r2, #1
 2158 01ba 83F84F20 		strb	r2, [r3, #79]
 534:..\src/command_processing.c ****         
 535:..\src/command_processing.c ****         //MASTER MODE PARAMETERS
 536:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , 
 2159              		.loc 1 536 0
 2160 01be D7F8C031 		ldr	r3, [r7, #448]
 2161 01c2 03F14002 		add	r2, r3, #64
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2162              		.loc 1 524 0
 2163 01c6 07F10C03 		add	r3, r7, #12
 2164 01ca 1A65     		str	r2, [r3, #80]
 2165 01cc 07F10C03 		add	r3, r7, #12
 2166 01d0 0022     		movs	r2, #0
 2167 01d2 83F85420 		strb	r2, [r3, #84]
 2168 01d6 07F10C03 		add	r3, r7, #12
 2169 01da 0122     		movs	r2, #1
 2170 01dc 83F85520 		strb	r2, [r3, #85]
 2171 01e0 07F10C03 		add	r3, r7, #12
 2172 01e4 814A     		ldr	r2, .L134+32
 2173 01e6 9A65     		str	r2, [r3, #88]
 2174 01e8 07F10C03 		add	r3, r7, #12
 2175 01ec 0522     		movs	r2, #5
 2176 01ee 83F85C20 		strb	r2, [r3, #92]
 2177 01f2 07F10C03 		add	r3, r7, #12
 2178 01f6 5022     		movs	r2, #80
 2179 01f8 83F85D20 		strb	r2, [r3, #93]
 2180 01fc 07F10C03 		add	r3, r7, #12
 2181 0200 0022     		movs	r2, #0
 2182 0202 83F85E20 		strb	r2, [r3, #94]
 2183 0206 07F10C03 		add	r3, r7, #12
 2184 020a 0122     		movs	r2, #1
 2185 020c 83F85F20 		strb	r2, [r3, #95]
 537:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , 
 2186              		.loc 1 537 0
 2187 0210 D7F8C031 		ldr	r3, [r7, #448]
 2188 0214 03F14102 		add	r2, r3, #65
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2189              		.loc 1 524 0
 2190 0218 07F10C03 		add	r3, r7, #12
 2191 021c 1A66     		str	r2, [r3, #96]
 2192 021e 07F10C03 		add	r3, r7, #12
 2193 0222 0222     		movs	r2, #2
 2194 0224 83F86420 		strb	r2, [r3, #100]
 2195 0228 07F10C03 		add	r3, r7, #12
 2196 022c 0122     		movs	r2, #1
 2197 022e 83F86520 		strb	r2, [r3, #101]
 2198 0232 07F10C03 		add	r3, r7, #12
 2199 0236 6E4A     		ldr	r2, .L134+36
 2200 0238 9A66     		str	r2, [r3, #104]
 2201 023a 07F10C03 		add	r3, r7, #12
 2202 023e 0022     		movs	r2, #0
 2203 0240 83F86C20 		strb	r2, [r3, #108]
 2204 0244 07F10C03 		add	r3, r7, #12
 2205 0248 5022     		movs	r2, #80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 65


 2206 024a 83F86D20 		strb	r2, [r3, #109]
 2207 024e 07F10C03 		add	r3, r7, #12
 2208 0252 0022     		movs	r2, #0
 2209 0254 83F86E20 		strb	r2, [r3, #110]
 2210 0258 07F10C03 		add	r3, r7, #12
 2211 025c 0122     		movs	r2, #1
 2212 025e 83F86F20 		strb	r2, [r3, #111]
 538:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , 
 2213              		.loc 1 538 0
 2214 0262 D7F8C031 		ldr	r3, [r7, #448]
 2215 0266 03F12902 		add	r2, r3, #41
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2216              		.loc 1 524 0
 2217 026a 07F10C03 		add	r3, r7, #12
 2218 026e 1A67     		str	r2, [r3, #112]
 2219 0270 07F10C03 		add	r3, r7, #12
 2220 0274 0222     		movs	r2, #2
 2221 0276 83F87420 		strb	r2, [r3, #116]
 2222 027a 07F10C03 		add	r3, r7, #12
 2223 027e 0122     		movs	r2, #1
 2224 0280 83F87520 		strb	r2, [r3, #117]
 2225 0284 07F10C03 		add	r3, r7, #12
 2226 0288 5A4A     		ldr	r2, .L134+40
 2227 028a 9A67     		str	r2, [r3, #120]
 2228 028c 07F10C03 		add	r3, r7, #12
 2229 0290 0022     		movs	r2, #0
 2230 0292 83F87C20 		strb	r2, [r3, #124]
 2231 0296 07F10C03 		add	r3, r7, #12
 2232 029a 5022     		movs	r2, #80
 2233 029c 83F87D20 		strb	r2, [r3, #125]
 2234 02a0 07F10C03 		add	r3, r7, #12
 2235 02a4 0022     		movs	r2, #0
 2236 02a6 83F87E20 		strb	r2, [r3, #126]
 2237 02aa 07F10C03 		add	r3, r7, #12
 2238 02ae 0122     		movs	r2, #1
 2239 02b0 83F87F20 		strb	r2, [r3, #127]
 539:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , 
 2240              		.loc 1 539 0
 2241 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2242 02b8 03F12802 		add	r2, r3, #40
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2243              		.loc 1 524 0
 2244 02bc 07F10C03 		add	r3, r7, #12
 2245 02c0 C3F88020 		str	r2, [r3, #128]
 2246 02c4 07F10C03 		add	r3, r7, #12
 2247 02c8 0022     		movs	r2, #0
 2248 02ca 83F88420 		strb	r2, [r3, #132]
 2249 02ce 07F10C03 		add	r3, r7, #12
 2250 02d2 0122     		movs	r2, #1
 2251 02d4 83F88520 		strb	r2, [r3, #133]
 2252 02d8 07F10C03 		add	r3, r7, #12
 2253 02dc 464A     		ldr	r2, .L134+44
 2254 02de C3F88820 		str	r2, [r3, #136]
 2255 02e2 07F10C03 		add	r3, r7, #12
 2256 02e6 0122     		movs	r2, #1
 2257 02e8 83F88C20 		strb	r2, [r3, #140]
 2258 02ec 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 66


 2259 02f0 5022     		movs	r2, #80
 2260 02f2 83F88D20 		strb	r2, [r3, #141]
 2261 02f6 07F10C03 		add	r3, r7, #12
 2262 02fa 0322     		movs	r2, #3
 2263 02fc 83F88E20 		strb	r2, [r3, #142]
 2264 0300 07F10C03 		add	r3, r7, #12
 2265 0304 0122     		movs	r2, #1
 2266 0306 83F88F20 		strb	r2, [r3, #143]
 540:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , 
 2267              		.loc 1 540 0
 2268 030a D7F8C031 		ldr	r3, [r7, #448]
 2269 030e 03F12002 		add	r2, r3, #32
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2270              		.loc 1 524 0
 2271 0312 07F10C03 		add	r3, r7, #12
 2272 0316 C3F89020 		str	r2, [r3, #144]
 2273 031a 07F10C03 		add	r3, r7, #12
 2274 031e 0522     		movs	r2, #5
 2275 0320 83F89420 		strb	r2, [r3, #148]
 2276 0324 07F10C03 		add	r3, r7, #12
 2277 0328 0222     		movs	r2, #2
 2278 032a 83F89520 		strb	r2, [r3, #149]
 2279 032e 07F10C03 		add	r3, r7, #12
 2280 0332 324A     		ldr	r2, .L134+48
 2281 0334 C3F89820 		str	r2, [r3, #152]
 2282 0338 07F10C03 		add	r3, r7, #12
 2283 033c 0022     		movs	r2, #0
 2284 033e 83F89C20 		strb	r2, [r3, #156]
 2285 0342 07F10C03 		add	r3, r7, #12
 2286 0346 5022     		movs	r2, #80
 2287 0348 83F89D20 		strb	r2, [r3, #157]
 2288 034c 07F10C03 		add	r3, r7, #12
 2289 0350 0522     		movs	r2, #5
 2290 0352 83F89E20 		strb	r2, [r3, #158]
 2291 0356 07F10C03 		add	r3, r7, #12
 2292 035a 0122     		movs	r2, #1
 2293 035c 83F89F20 		strb	r2, [r3, #159]
 541:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , 
 2294              		.loc 1 541 0
 2295 0360 D7F8C031 		ldr	r3, [r7, #448]
 2296 0364 03F15C02 		add	r2, r3, #92
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2297              		.loc 1 524 0
 2298 0368 07F10C03 		add	r3, r7, #12
 2299 036c C3F8A020 		str	r2, [r3, #160]
 2300 0370 07F10C03 		add	r3, r7, #12
 2301 0374 0022     		movs	r2, #0
 2302 0376 83F8A420 		strb	r2, [r3, #164]
 2303 037a 07F10C03 		add	r3, r7, #12
 2304 037e 0122     		movs	r2, #1
 2305 0380 83F8A520 		strb	r2, [r3, #165]
 2306 0384 07F10C03 		add	r3, r7, #12
 2307 0388 1D4A     		ldr	r2, .L134+52
 2308 038a C3F8A820 		str	r2, [r3, #168]
 2309 038e 07F10C03 		add	r3, r7, #12
 2310 0392 0522     		movs	r2, #5
 2311 0394 83F8AC20 		strb	r2, [r3, #172]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 67


 2312 0398 07F10C03 		add	r3, r7, #12
 2313 039c 5022     		movs	r2, #80
 2314 039e 83F8AD20 		strb	r2, [r3, #173]
 2315 03a2 07F10C03 		add	r3, r7, #12
 2316 03a6 0022     		movs	r2, #0
 2317 03a8 83F8AE20 		strb	r2, [r3, #174]
 2318 03ac 07F10C03 		add	r3, r7, #12
 2319 03b0 0122     		movs	r2, #1
 2320 03b2 83F8AF20 		strb	r2, [r3, #175]
 542:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , 
 2321              		.loc 1 542 0
 2322 03b6 D7F8C031 		ldr	r3, [r7, #448]
 2323 03ba 03F15D02 		add	r2, r3, #93
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2324              		.loc 1 524 0
 2325 03be 07F10C03 		add	r3, r7, #12
 2326 03c2 C3F8B020 		str	r2, [r3, #176]
 2327 03c6 07F10C03 		add	r3, r7, #12
 2328 03ca 1BE0     		b	.L135
 2329              	.L136:
 2330              		.align	2
 2331              	.L134:
 2332 03cc 00000000 		.word	c_mem
 2333 03d0 00000000 		.word	g_mem
 2334 03d4 F4010000 		.word	.LC18
 2335 03d8 2C000000 		.word	.LC19
 2336 03dc 38000000 		.word	.LC20
 2337 03e0 48000000 		.word	.LC21
 2338 03e4 58000000 		.word	.LC22
 2339 03e8 68000000 		.word	.LC23
 2340 03ec 78000000 		.word	.LC24
 2341 03f0 88000000 		.word	.LC25
 2342 03f4 94000000 		.word	.LC26
 2343 03f8 A8000000 		.word	.LC27
 2344 03fc B4000000 		.word	.LC28
 2345 0400 CC000000 		.word	.LC29
 2346              	.L135:
 2347 0404 0022     		movs	r2, #0
 2348 0406 83F8B420 		strb	r2, [r3, #180]
 2349 040a 07F10C03 		add	r3, r7, #12
 2350 040e 0122     		movs	r2, #1
 2351 0410 83F8B520 		strb	r2, [r3, #181]
 2352 0414 07F10C03 		add	r3, r7, #12
 2353 0418 C04A     		ldr	r2, .L137
 2354 041a C3F8B820 		str	r2, [r3, #184]
 2355 041e 07F10C03 		add	r3, r7, #12
 2356 0422 0522     		movs	r2, #5
 2357 0424 83F8BC20 		strb	r2, [r3, #188]
 2358 0428 07F10C03 		add	r3, r7, #12
 2359 042c 5022     		movs	r2, #80
 2360 042e 83F8BD20 		strb	r2, [r3, #189]
 2361 0432 07F10C03 		add	r3, r7, #12
 2362 0436 0022     		movs	r2, #0
 2363 0438 83F8BE20 		strb	r2, [r3, #190]
 2364 043c 07F10C03 		add	r3, r7, #12
 2365 0440 0122     		movs	r2, #1
 2366 0442 83F8BF20 		strb	r2, [r3, #191]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 68


 543:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , 
 2367              		.loc 1 543 0
 2368 0446 D7F8C031 		ldr	r3, [r7, #448]
 2369 044a 03F15002 		add	r2, r3, #80
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2370              		.loc 1 524 0
 2371 044e 07F10C03 		add	r3, r7, #12
 2372 0452 C3F8C020 		str	r2, [r3, #192]
 2373 0456 07F10C03 		add	r3, r7, #12
 2374 045a 0522     		movs	r2, #5
 2375 045c 83F8C420 		strb	r2, [r3, #196]
 2376 0460 07F10C03 		add	r3, r7, #12
 2377 0464 0122     		movs	r2, #1
 2378 0466 83F8C520 		strb	r2, [r3, #197]
 2379 046a 07F10C03 		add	r3, r7, #12
 2380 046e AC4A     		ldr	r2, .L137+4
 2381 0470 C3F8C820 		str	r2, [r3, #200]
 2382 0474 07F10C03 		add	r3, r7, #12
 2383 0478 0022     		movs	r2, #0
 2384 047a 83F8CC20 		strb	r2, [r3, #204]
 2385 047e 07F10C03 		add	r3, r7, #12
 2386 0482 5022     		movs	r2, #80
 2387 0484 83F8CD20 		strb	r2, [r3, #205]
 2388 0488 07F10C03 		add	r3, r7, #12
 2389 048c 0022     		movs	r2, #0
 2390 048e 83F8CE20 		strb	r2, [r3, #206]
 2391 0492 07F10C03 		add	r3, r7, #12
 2392 0496 0122     		movs	r2, #1
 2393 0498 83F8CF20 		strb	r2, [r3, #207]
 544:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , 
 2394              		.loc 1 544 0
 2395 049c D7F8C031 		ldr	r3, [r7, #448]
 2396 04a0 03F15402 		add	r2, r3, #84
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2397              		.loc 1 524 0
 2398 04a4 07F10C03 		add	r3, r7, #12
 2399 04a8 C3F8D020 		str	r2, [r3, #208]
 2400 04ac 07F10C03 		add	r3, r7, #12
 2401 04b0 0722     		movs	r2, #7
 2402 04b2 83F8D420 		strb	r2, [r3, #212]
 2403 04b6 07F10C03 		add	r3, r7, #12
 2404 04ba 0122     		movs	r2, #1
 2405 04bc 83F8D520 		strb	r2, [r3, #213]
 2406 04c0 07F10C03 		add	r3, r7, #12
 2407 04c4 974A     		ldr	r2, .L137+8
 2408 04c6 C3F8D820 		str	r2, [r3, #216]
 2409 04ca 07F10C03 		add	r3, r7, #12
 2410 04ce 0022     		movs	r2, #0
 2411 04d0 83F8DC20 		strb	r2, [r3, #220]
 2412 04d4 07F10C03 		add	r3, r7, #12
 2413 04d8 5022     		movs	r2, #80
 2414 04da 83F8DD20 		strb	r2, [r3, #221]
 2415 04de 07F10C03 		add	r3, r7, #12
 2416 04e2 0022     		movs	r2, #0
 2417 04e4 83F8DE20 		strb	r2, [r3, #222]
 2418 04e8 07F10C03 		add	r3, r7, #12
 2419 04ec 0122     		movs	r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 69


 2420 04ee 83F8DF20 		strb	r2, [r3, #223]
 545:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , 
 2421              		.loc 1 545 0
 2422 04f2 D7F8C031 		ldr	r3, [r7, #448]
 2423 04f6 03F15802 		add	r2, r3, #88
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2424              		.loc 1 524 0
 2425 04fa 07F10C03 		add	r3, r7, #12
 2426 04fe C3F8E020 		str	r2, [r3, #224]
 2427 0502 07F10C03 		add	r3, r7, #12
 2428 0506 0722     		movs	r2, #7
 2429 0508 83F8E420 		strb	r2, [r3, #228]
 2430 050c 07F10C03 		add	r3, r7, #12
 2431 0510 0122     		movs	r2, #1
 2432 0512 83F8E520 		strb	r2, [r3, #229]
 2433 0516 07F10C03 		add	r3, r7, #12
 2434 051a 834A     		ldr	r2, .L137+12
 2435 051c C3F8E820 		str	r2, [r3, #232]
 2436 0520 07F10C03 		add	r3, r7, #12
 2437 0524 0022     		movs	r2, #0
 2438 0526 83F8EC20 		strb	r2, [r3, #236]
 2439 052a 07F10C03 		add	r3, r7, #12
 2440 052e 5022     		movs	r2, #80
 2441 0530 83F8ED20 		strb	r2, [r3, #237]
 2442 0534 07F10C03 		add	r3, r7, #12
 2443 0538 0022     		movs	r2, #0
 2444 053a 83F8EE20 		strb	r2, [r3, #238]
 2445 053e 07F10C03 		add	r3, r7, #12
 2446 0542 0122     		movs	r2, #1
 2447 0544 83F8EF20 		strb	r2, [r3, #239]
 546:..\src/command_processing.c ****     };
 547:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);  
 2448              		.loc 1 547 0
 2449 0548 0F23     		movs	r3, #15
 2450 054a 87F8BE31 		strb	r3, [r7, #446]
 548:..\src/command_processing.c ****     
 549:..\src/command_processing.c **** 
 550:..\src/command_processing.c ****     if (!index) {
 2451              		.loc 1 550 0
 2452 054e BB1D     		adds	r3, r7, #6
 2453 0550 1B88     		ldrh	r3, [r3]
 2454 0552 002B     		cmp	r3, #0
 2455 0554 0ED1     		bne	.L120
 551:..\src/command_processing.c ****         // Get parameters list with relative types
 552:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2456              		.loc 1 552 0
 2457 0556 07F58674 		add	r4, r7, #268
 2458 055a 07F10C02 		add	r2, r7, #12
 2459 055e 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2460 0562 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2461 0566 7B1D     		adds	r3, r7, #5
 2462 0568 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2463 056a 0093     		str	r3, [sp]
 2464 056c 2346     		mov	r3, r4
 2465 056e FFF7FEFF 		bl	get_param_list
 553:..\src/command_processing.c ****     }   
 554:..\src/command_processing.c ****     else if  (index == 300) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 70


 555:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 556:..\src/command_processing.c ****         qbadminp_string(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST);
 557:..\src/command_processing.c ****     }
 558:..\src/command_processing.c **** 
 559:..\src/command_processing.c ****     else {
 560:..\src/command_processing.c ****          // Set specific parameter        
 561:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 562:..\src/command_processing.c ****         
 563:..\src/command_processing.c ****         // Find size of data
 564:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 565:..\src/command_processing.c ****    
 566:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 567:..\src/command_processing.c ****             // Use default specifications for param setting
 568:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 569:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 570:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 571:..\src/command_processing.c ****                 }
 572:..\src/command_processing.c ****             } 
 573:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 574:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 575:..\src/command_processing.c ****         }
 576:..\src/command_processing.c ****         
 577:..\src/command_processing.c ****         else {  
 578:..\src/command_processing.c ****             // Use custom specifications for param setting
 579:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 580:..\src/command_processing.c ****         }
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****        
 583:..\src/command_processing.c ****         // Perform chip reset if needed
 584:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 585:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 586:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 587:..\src/command_processing.c ****             }   
 588:..\src/command_processing.c ****         }
 589:..\src/command_processing.c ****     }
 590:..\src/command_processing.c **** } 
 2466              		.loc 1 590 0
 2467 0572 CEE0     		b	.L133
 2468              	.L120:
 554:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 2469              		.loc 1 554 0
 2470 0574 BB1D     		adds	r3, r7, #6
 2471 0576 1B88     		ldrh	r3, [r3]
 2472 0578 B3F5967F 		cmp	r3, #300
 2473 057c 0AD1     		bne	.L122
 556:..\src/command_processing.c ****     }
 2474              		.loc 1 556 0
 2475 057e 07F58673 		add	r3, r7, #268
 2476 0582 07F10C02 		add	r2, r7, #12
 2477 0586 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2478 058a 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2479 058e FFF7FEFF 		bl	qbadminp_string
 2480              		.loc 1 590 0
 2481 0592 BEE0     		b	.L133
 2482              	.L122:
 2483              	.LBB24:
 561:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 71


 2484              		.loc 1 561 0
 2485 0594 BB1D     		adds	r3, r7, #6
 2486 0596 1B88     		ldrh	r3, [r3]	@ movhi
 2487 0598 DBB2     		uxtb	r3, r3
 2488 059a 013B     		subs	r3, r3, #1
 2489 059c 87F8BD31 		strb	r3, [r7, #445]
 564:..\src/command_processing.c ****    
 2490              		.loc 1 564 0
 2491 05a0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2492 05a4 07F10C02 		add	r2, r7, #12
 2493 05a8 1B01     		lsls	r3, r3, #4
 2494 05aa 1344     		add	r3, r3, r2
 2495 05ac 0433     		adds	r3, r3, #4
 2496 05ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2497 05b0 1846     		mov	r0, r3
 2498 05b2 FFF7FEFF 		bl	num_of_bytes
 2499 05b6 0346     		mov	r3, r0
 2500 05b8 87F8BC31 		strb	r3, [r7, #444]
 566:..\src/command_processing.c ****             // Use default specifications for param setting
 2501              		.loc 1 566 0
 2502 05bc 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2503 05c0 07F10C02 		add	r2, r7, #12
 2504 05c4 1B01     		lsls	r3, r3, #4
 2505 05c6 1344     		add	r3, r3, r2
 2506 05c8 0E33     		adds	r3, r3, #14
 2507 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2508 05cc 002B     		cmp	r3, #0
 2509 05ce 5BD1     		bne	.L123
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2510              		.loc 1 568 0
 2511 05d0 0023     		movs	r3, #0
 2512 05d2 87F8C731 		strb	r3, [r7, #455]
 2513 05d6 2FE0     		b	.L124
 2514              	.L127:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2515              		.loc 1 569 0
 2516 05d8 0023     		movs	r3, #0
 2517 05da 87F8C631 		strb	r3, [r7, #454]
 2518 05de 1EE0     		b	.L125
 2519              	.L126:
 570:..\src/command_processing.c ****                 }
 2520              		.loc 1 570 0 discriminator 3
 2521 05e0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2522 05e4 07F10C02 		add	r2, r7, #12
 2523 05e8 1B01     		lsls	r3, r3, #4
 2524 05ea 1344     		add	r3, r3, r2
 2525 05ec 1A68     		ldr	r2, [r3]
 2526 05ee 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2527 05f2 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2528 05f6 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2529 05fa 411A     		subs	r1, r0, r1
 2530 05fc 0B44     		add	r3, r3, r1
 2531 05fe 013B     		subs	r3, r3, #1
 2532 0600 1344     		add	r3, r3, r2
 2533 0602 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2534 0606 D11C     		adds	r1, r2, #3
 2535 0608 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 72


 2536 060c 0A44     		add	r2, r2, r1
 2537 060e 4749     		ldr	r1, .L137+16
 2538 0610 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2539 0612 1A70     		strb	r2, [r3]
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2540              		.loc 1 569 0 discriminator 3
 2541 0614 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2542 0618 0133     		adds	r3, r3, #1
 2543 061a 87F8C631 		strb	r3, [r7, #454]
 2544              	.L125:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2545              		.loc 1 569 0 is_stmt 0 discriminator 1
 2546 061e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2547 0622 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2548 0626 9A42     		cmp	r2, r3
 2549 0628 DAD3     		bcc	.L126
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 568 0 is_stmt 1 discriminator 2
 2551 062a 97F8C721 		ldrb	r2, [r7, #455]
 2552 062e 97F8BC31 		ldrb	r3, [r7, #444]
 2553 0632 1344     		add	r3, r3, r2
 2554 0634 87F8C731 		strb	r3, [r7, #455]
 2555              	.L124:
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2556              		.loc 1 568 0 is_stmt 0 discriminator 1
 2557 0638 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2558 063c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2559 0640 07F10C01 		add	r1, r7, #12
 2560 0644 1B01     		lsls	r3, r3, #4
 2561 0646 0B44     		add	r3, r3, r1
 2562 0648 0533     		adds	r3, r3, #5
 2563 064a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 064c 1946     		mov	r1, r3
 2565 064e 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2566 0652 03FB01F3 		mul	r3, r3, r1
 2567 0656 9A42     		cmp	r2, r3
 2568 0658 BEDB     		blt	.L127
 573:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2569              		.loc 1 573 0 is_stmt 1
 2570 065a 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2571 065e 07F10C02 		add	r2, r7, #12
 2572 0662 1B01     		lsls	r3, r3, #4
 2573 0664 1344     		add	r3, r3, r2
 2574 0666 0433     		adds	r3, r3, #4
 2575 0668 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2576 066a 092B     		cmp	r3, #9
 2577 066c 15D1     		bne	.L129
 574:..\src/command_processing.c ****         }
 2578              		.loc 1 574 0
 2579 066e 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2580 0672 07F10C02 		add	r2, r7, #12
 2581 0676 1B01     		lsls	r3, r3, #4
 2582 0678 1344     		add	r3, r3, r2
 2583 067a 1A68     		ldr	r2, [r3]
 2584 067c 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2585 0680 1344     		add	r3, r3, r2
 2586 0682 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 73


 2587 0684 1A70     		strb	r2, [r3]
 2588 0686 08E0     		b	.L129
 2589              	.L123:
 579:..\src/command_processing.c ****         }
 2590              		.loc 1 579 0
 2591 0688 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2592 068c 9BB2     		uxth	r3, r3
 2593 068e 07F10C02 		add	r2, r7, #12
 2594 0692 1146     		mov	r1, r2
 2595 0694 1846     		mov	r0, r3
 2596 0696 FFF7FEFF 		bl	set_custom_param
 2597              	.L129:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2598              		.loc 1 584 0
 2599 069a 0023     		movs	r3, #0
 2600 069c 87F8C731 		strb	r3, [r7, #455]
 2601 06a0 31E0     		b	.L130
 2602              	.L132:
 585:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2603              		.loc 1 585 0
 2604 06a2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2605 06a6 2C22     		movs	r2, #44
 2606 06a8 02FB03F3 		mul	r3, r2, r3
 2607 06ac 07F5E472 		add	r2, r7, #456
 2608 06b0 1344     		add	r3, r3, r2
 2609 06b2 BC3B     		subs	r3, r3, #188
 2610 06b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2611 06b6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2612 06ba 07F10C01 		add	r1, r7, #12
 2613 06be 1B01     		lsls	r3, r3, #4
 2614 06c0 0B44     		add	r3, r3, r1
 2615 06c2 0C33     		adds	r3, r3, #12
 2616 06c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 06c6 9A42     		cmp	r2, r3
 2618 06c8 0CBF     		ite	eq
 2619 06ca 0123     		moveq	r3, #1
 2620 06cc 0023     		movne	r3, #0
 2621 06ce DAB2     		uxtb	r2, r3
 2622 06d0 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2623 06d4 2C21     		movs	r1, #44
 2624 06d6 01FB03F3 		mul	r3, r1, r3
 2625 06da 07F5E471 		add	r1, r7, #456
 2626 06de 0B44     		add	r3, r3, r1
 2627 06e0 BB3B     		subs	r3, r3, #187
 2628 06e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 06e4 012B     		cmp	r3, #1
 2630 06e6 0CBF     		ite	eq
 2631 06e8 0123     		moveq	r3, #1
 2632 06ea 0023     		movne	r3, #0
 2633 06ec DBB2     		uxtb	r3, r3
 2634 06ee 1340     		ands	r3, r3, r2
 2635 06f0 DBB2     		uxtb	r3, r3
 2636 06f2 002B     		cmp	r3, #0
 2637 06f4 02D0     		beq	.L131
 586:..\src/command_processing.c ****             }   
 2638              		.loc 1 586 0
 2639 06f6 0E4B     		ldr	r3, .L137+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 74


 2640 06f8 0122     		movs	r2, #1
 2641 06fa 1A70     		strb	r2, [r3]
 2642              	.L131:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2643              		.loc 1 584 0 discriminator 2
 2644 06fc 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 0700 0133     		adds	r3, r3, #1
 2646 0702 87F8C731 		strb	r3, [r7, #455]
 2647              	.L130:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2648              		.loc 1 584 0 is_stmt 0 discriminator 1
 2649 0706 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2650 070a 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2651 070e 9A42     		cmp	r2, r3
 2652 0710 C7D3     		bcc	.L132
 2653              	.L133:
 2654              	.LBE24:
 2655              		.loc 1 590 0 is_stmt 1
 2656 0712 00BF     		nop
 2657 0714 07F5E677 		add	r7, r7, #460
 2658              		.cfi_def_cfa_offset 12
 2659 0718 BD46     		mov	sp, r7
 2660              		.cfi_def_cfa_register 13
 2661              		@ sp needed
 2662 071a 90BD     		pop	{r4, r7, pc}
 2663              	.L138:
 2664              		.align	2
 2665              	.L137:
 2666 071c E4000000 		.word	.LC30
 2667 0720 FC000000 		.word	.LC31
 2668 0724 1C010000 		.word	.LC32
 2669 0728 40010000 		.word	.LC33
 2670 072c 00000000 		.word	g_rx
 2671 0730 00000000 		.word	reset_PSoC_flag
 2672              		.cfi_endproc
 2673              	.LFE69:
 2674              		.size	manage_param_list, .-manage_param_list
 2675              		.section	.text.set_custom_param,"ax",%progbits
 2676              		.align	2
 2677              		.global	set_custom_param
 2678              		.thumb
 2679              		.thumb_func
 2680              		.type	set_custom_param, %function
 2681              	set_custom_param:
 2682              	.LFB70:
 591:..\src/command_processing.c **** 
 592:..\src/command_processing.c **** 
 593:..\src/command_processing.c **** //==============================================================================
 594:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 595:..\src/command_processing.c **** //==============================================================================
 596:..\src/command_processing.c **** 
 597:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2683              		.loc 1 597 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 16
 2686              		@ frame_needed = 1, uses_anonymous_args = 0
 2687 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 75


 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 7, -8
 2690              		.cfi_offset 14, -4
 2691 0002 84B0     		sub	sp, sp, #16
 2692              		.cfi_def_cfa_offset 24
 2693 0004 00AF     		add	r7, sp, #0
 2694              		.cfi_def_cfa_register 7
 2695 0006 0346     		mov	r3, r0
 2696 0008 3960     		str	r1, [r7]
 2697 000a FB80     		strh	r3, [r7, #6]	@ movhi
 598:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2698              		.loc 1 598 0
 2699 000c FB88     		ldrh	r3, [r7, #6]
 2700 000e 1B01     		lsls	r3, r3, #4
 2701 0010 3A68     		ldr	r2, [r7]
 2702 0012 1344     		add	r3, r3, r2
 2703 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2704 0016 1846     		mov	r0, r3
 2705 0018 FFF7FEFF 		bl	num_of_bytes
 2706 001c 0346     		mov	r3, r0
 2707 001e 7B73     		strb	r3, [r7, #13]
 599:..\src/command_processing.c **** 
 600:..\src/command_processing.c ****     uint8 CYDATA i, j;
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2708              		.loc 1 602 0
 2709 0020 FB88     		ldrh	r3, [r7, #6]
 2710 0022 1B01     		lsls	r3, r3, #4
 2711 0024 3A68     		ldr	r2, [r7]
 2712 0026 1344     		add	r3, r3, r2
 2713 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2714 002a 032B     		cmp	r3, #3
 2715 002c 02D0     		beq	.L141
 2716 002e 052B     		cmp	r3, #5
 2717 0030 06D0     		beq	.L142
 2718 0032 36E0     		b	.L149
 2719              	.L141:
 603:..\src/command_processing.c ****         
 604:..\src/command_processing.c ****             
 605:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 606:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2720              		.loc 1 606 0
 2721 0034 3D4B     		ldr	r3, .L151
 2722 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2723 0038 3D4B     		ldr	r3, .L151+4
 2724 003a 83F82820 		strb	r2, [r3, #40]
 607:..\src/command_processing.c ****             break;   
 2725              		.loc 1 607 0
 2726 003e 71E0     		b	.L143
 2727              	.L142:
 608:..\src/command_processing.c **** 
 609:..\src/command_processing.c ****         
 610:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 611:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2728              		.loc 1 611 0
 2729 0040 3A4B     		ldr	r3, .L151
 2730 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 76


 2731 0044 1A06     		lsls	r2, r3, #24
 2732 0046 394B     		ldr	r3, .L151
 2733 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2734 004a 1B04     		lsls	r3, r3, #16
 2735 004c 1A43     		orrs	r2, r2, r3
 2736 004e 374B     		ldr	r3, .L151
 2737 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2738 0052 1B02     		lsls	r3, r3, #8
 2739 0054 1343     		orrs	r3, r3, r2
 2740 0056 354A     		ldr	r2, .L151
 2741 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2742 005a 1343     		orrs	r3, r3, r2
 2743 005c 344A     		ldr	r2, .L151+4
 2744 005e 1362     		str	r3, [r2, #32]
 612:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2745              		.loc 1 612 0
 2746 0060 324B     		ldr	r3, .L151
 2747 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2748 0064 1A06     		lsls	r2, r3, #24
 2749 0066 314B     		ldr	r3, .L151
 2750 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2751 006a 1B04     		lsls	r3, r3, #16
 2752 006c 1A43     		orrs	r2, r2, r3
 2753 006e 2F4B     		ldr	r3, .L151
 2754 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2755 0072 1B02     		lsls	r3, r3, #8
 2756 0074 1343     		orrs	r3, r3, r2
 2757 0076 2D4A     		ldr	r2, .L151
 2758 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2759 007a 1343     		orrs	r3, r3, r2
 2760 007c 2C4A     		ldr	r2, .L151+4
 2761 007e 5362     		str	r3, [r2, #36]
 613:..\src/command_processing.c **** 
 614:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2762              		.loc 1 614 0
 2763 0080 2B4B     		ldr	r3, .L151+4
 2764 0082 1B6A     		ldr	r3, [r3, #32]
 2765 0084 2A4A     		ldr	r2, .L151+4
 2766 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2767 008a 9340     		lsls	r3, r3, r2
 2768 008c 284A     		ldr	r2, .L151+4
 2769 008e 1362     		str	r3, [r2, #32]
 615:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2770              		.loc 1 615 0
 2771 0090 274B     		ldr	r3, .L151+4
 2772 0092 5B6A     		ldr	r3, [r3, #36]
 2773 0094 264A     		ldr	r2, .L151+4
 2774 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2775 009a 9340     		lsls	r3, r3, r2
 2776 009c 244A     		ldr	r2, .L151+4
 2777 009e 5362     		str	r3, [r2, #36]
 616:..\src/command_processing.c ****             break;            
 2778              		.loc 1 616 0
 2779 00a0 40E0     		b	.L143
 2780              	.L149:
 617:..\src/command_processing.c ****             default:
 618:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 77


 619:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2781              		.loc 1 619 0
 2782 00a2 0023     		movs	r3, #0
 2783 00a4 FB73     		strb	r3, [r7, #15]
 2784 00a6 20E0     		b	.L144
 2785              	.L147:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2786              		.loc 1 620 0
 2787 00a8 0023     		movs	r3, #0
 2788 00aa BB73     		strb	r3, [r7, #14]
 2789 00ac 15E0     		b	.L145
 2790              	.L146:
 621:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2791              		.loc 1 621 0 discriminator 3
 2792 00ae FB88     		ldrh	r3, [r7, #6]
 2793 00b0 1B01     		lsls	r3, r3, #4
 2794 00b2 3A68     		ldr	r2, [r7]
 2795 00b4 1344     		add	r3, r3, r2
 2796 00b6 1A68     		ldr	r2, [r3]
 2797 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2798 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2799 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2800 00be 411A     		subs	r1, r0, r1
 2801 00c0 0B44     		add	r3, r3, r1
 2802 00c2 013B     		subs	r3, r3, #1
 2803 00c4 1344     		add	r3, r3, r2
 2804 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2805 00c8 D11C     		adds	r1, r2, #3
 2806 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2807 00cc 0A44     		add	r2, r2, r1
 2808 00ce 1749     		ldr	r1, .L151
 2809 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2810 00d2 1A70     		strb	r2, [r3]
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2811              		.loc 1 620 0 discriminator 3
 2812 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2813 00d6 0133     		adds	r3, r3, #1
 2814 00d8 BB73     		strb	r3, [r7, #14]
 2815              	.L145:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2816              		.loc 1 620 0 is_stmt 0 discriminator 1
 2817 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2818 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2819 00de 9A42     		cmp	r2, r3
 2820 00e0 E5D3     		bcc	.L146
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2821              		.loc 1 619 0 is_stmt 1 discriminator 2
 2822 00e2 FA7B     		ldrb	r2, [r7, #15]
 2823 00e4 7B7B     		ldrb	r3, [r7, #13]
 2824 00e6 1344     		add	r3, r3, r2
 2825 00e8 FB73     		strb	r3, [r7, #15]
 2826              	.L144:
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2827              		.loc 1 619 0 is_stmt 0 discriminator 1
 2828 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2829 00ec FB88     		ldrh	r3, [r7, #6]
 2830 00ee 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 78


 2831 00f0 3968     		ldr	r1, [r7]
 2832 00f2 0B44     		add	r3, r3, r1
 2833 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2834 00f6 1946     		mov	r1, r3
 2835 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2836 00fa 03FB01F3 		mul	r3, r3, r1
 2837 00fe 9A42     		cmp	r2, r3
 2838 0100 D2DB     		blt	.L147
 622:..\src/command_processing.c ****                     }
 623:..\src/command_processing.c ****                 } 
 624:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2839              		.loc 1 624 0 is_stmt 1
 2840 0102 FB88     		ldrh	r3, [r7, #6]
 2841 0104 1B01     		lsls	r3, r3, #4
 2842 0106 3A68     		ldr	r2, [r7]
 2843 0108 1344     		add	r3, r3, r2
 2844 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2845 010c 092B     		cmp	r3, #9
 2846 010e 08D1     		bne	.L150
 625:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2847              		.loc 1 625 0
 2848 0110 FB88     		ldrh	r3, [r7, #6]
 2849 0112 1B01     		lsls	r3, r3, #4
 2850 0114 3A68     		ldr	r2, [r7]
 2851 0116 1344     		add	r3, r3, r2
 2852 0118 1A68     		ldr	r2, [r3]
 2853 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2854 011c 1344     		add	r3, r3, r2
 2855 011e 0022     		movs	r2, #0
 2856 0120 1A70     		strb	r2, [r3]
 2857              	.L150:
 626:..\src/command_processing.c ****             break;
 2858              		.loc 1 626 0
 2859 0122 00BF     		nop
 2860              	.L143:
 627:..\src/command_processing.c ****     }
 628:..\src/command_processing.c **** 
 629:..\src/command_processing.c ****       
 630:..\src/command_processing.c **** }
 2861              		.loc 1 630 0
 2862 0124 00BF     		nop
 2863 0126 1037     		adds	r7, r7, #16
 2864              		.cfi_def_cfa_offset 8
 2865 0128 BD46     		mov	sp, r7
 2866              		.cfi_def_cfa_register 13
 2867              		@ sp needed
 2868 012a 80BD     		pop	{r7, pc}
 2869              	.L152:
 2870              		.align	2
 2871              	.L151:
 2872 012c 00000000 		.word	g_rx
 2873 0130 00000000 		.word	g_mem
 2874              		.cfi_endproc
 2875              	.LFE70:
 2876              		.size	set_custom_param, .-set_custom_param
 2877              		.section	.text.get_IMU_param_list,"ax",%progbits
 2878              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 79


 2879              		.global	get_IMU_param_list
 2880              		.thumb
 2881              		.thumb_func
 2882              		.type	get_IMU_param_list, %function
 2883              	get_IMU_param_list:
 2884              	.LFB71:
 631:..\src/command_processing.c **** 
 632:..\src/command_processing.c **** //==============================================================================
 633:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 634:..\src/command_processing.c **** //==============================================================================
 635:..\src/command_processing.c **** 
 636:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 637:..\src/command_processing.c **** {
 2885              		.loc 1 637 0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 8
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889              		@ link register save eliminated.
 2890 0000 80B4     		push	{r7}
 2891              		.cfi_def_cfa_offset 4
 2892              		.cfi_offset 7, -4
 2893 0002 83B0     		sub	sp, sp, #12
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              		.cfi_def_cfa_register 7
 2897 0006 0346     		mov	r3, r0
 2898 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 638:..\src/command_processing.c **** }
 2899              		.loc 1 638 0
 2900 000a 00BF     		nop
 2901 000c 0C37     		adds	r7, r7, #12
 2902              		.cfi_def_cfa_offset 4
 2903 000e BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 0010 80BC     		pop	{r7}
 2907              		.cfi_restore 7
 2908              		.cfi_def_cfa_offset 0
 2909 0012 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE71:
 2912              		.size	get_IMU_param_list, .-get_IMU_param_list
 2913              		.section	.text.setZeros,"ax",%progbits
 2914              		.align	2
 2915              		.global	setZeros
 2916              		.thumb
 2917              		.thumb_func
 2918              		.type	setZeros, %function
 2919              	setZeros:
 2920              	.LFB72:
 639:..\src/command_processing.c **** 
 640:..\src/command_processing.c **** //==============================================================================
 641:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 642:..\src/command_processing.c **** //==============================================================================
 643:..\src/command_processing.c **** 
 644:..\src/command_processing.c **** void setZeros()
 645:..\src/command_processing.c **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 80


 2921              		.loc 1 645 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 1, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926 0000 80B4     		push	{r7}
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 00AF     		add	r7, sp, #0
 2930              		.cfi_def_cfa_register 7
 646:..\src/command_processing.c **** }
 2931              		.loc 1 646 0
 2932 0004 00BF     		nop
 2933 0006 BD46     		mov	sp, r7
 2934              		.cfi_def_cfa_register 13
 2935              		@ sp needed
 2936 0008 80BC     		pop	{r7}
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 000a 7047     		bx	lr
 2940              		.cfi_endproc
 2941              	.LFE72:
 2942              		.size	setZeros, .-setZeros
 2943              		.section	.rodata
 2944              		.align	2
 2945              	.LC34:
 2946 0278 20256400 		.ascii	" %d\000"
 2947              		.align	2
 2948              	.LC35:
 2949 027c 20256C64 		.ascii	" %ld\000"
 2949      00
 2950              		.global	__aeabi_f2d
 2951 0281 000000   		.align	2
 2952              	.LC36:
 2953 0284 20256600 		.ascii	" %f\000"
 2954              		.section	.text.qbadminp_string,"ax",%progbits
 2955              		.align	2
 2956              		.global	qbadminp_string
 2957              		.thumb
 2958              		.thumb_func
 2959              		.type	qbadminp_string, %function
 2960              	qbadminp_string:
 2961              	.LFB73:
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c **** void  qbadminp_string ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], con
 2962              		.loc 1 648 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 2664
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 90B5     		push	{r4, r7, lr}
 2967              		.cfi_def_cfa_offset 12
 2968              		.cfi_offset 4, -12
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 ADF66C2D 		subw	sp, sp, #2668
 2972              		.cfi_def_cfa_offset 2680
 2973 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 81


 2974              		.cfi_def_cfa_register 7
 2975 0008 0446     		mov	r4, r0
 2976 000a 0846     		mov	r0, r1
 2977 000c 07F10801 		add	r1, r7, #8
 2978 0010 0A60     		str	r2, [r1]
 2979 0012 3A1D     		adds	r2, r7, #4
 2980 0014 1360     		str	r3, [r2]
 2981 0016 07F10F03 		add	r3, r7, #15
 2982 001a 2246     		mov	r2, r4
 2983 001c 1A70     		strb	r2, [r3]
 2984 001e 07F10E03 		add	r3, r7, #14
 2985 0022 0246     		mov	r2, r0
 2986 0024 1A70     		strb	r2, [r3]
 649:..\src/command_processing.c ****     strcpy(superstring, "");
 2987              		.loc 1 649 0
 2988 0026 AD4B     		ldr	r3, .L181
 2989 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2990 002a AD4B     		ldr	r3, .L181+4
 2991 002c 1A70     		strb	r2, [r3]
 650:..\src/command_processing.c ****     char info_string[2500] = "";
 2992              		.loc 1 650 0
 2993 002e 07F17803 		add	r3, r7, #120
 2994 0032 0022     		movs	r2, #0
 2995 0034 1A60     		str	r2, [r3]
 2996 0036 0433     		adds	r3, r3, #4
 2997 0038 4FF41C62 		mov	r2, #2496
 2998 003c 0021     		movs	r1, #0
 2999 003e 1846     		mov	r0, r3
 3000 0040 FFF7FEFF 		bl	memset
 651:..\src/command_processing.c ****     int i;
 652:..\src/command_processing.c ****     int idx;
 653:..\src/command_processing.c ****     int32 aux_int32;
 654:..\src/command_processing.c ****     uint32 aux_uint32;
 655:..\src/command_processing.c ****     float aux_float;
 656:..\src/command_processing.c ****     uint8 aux_uint8;
 657:..\src/command_processing.c ****     int8 aux_int8;
 658:..\src/command_processing.c ****     int16 aux_int16;
 659:..\src/command_processing.c ****     uint16 aux_uint16;
 660:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3001              		.loc 1 660 0
 3002 0044 A74B     		ldr	r3, .L181+8
 3003 0046 C7F85C3A 		str	r3, [r7, #2652]
 661:..\src/command_processing.c ****     
 662:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3004              		.loc 1 662 0
 3005 004a A64B     		ldr	r3, .L181+8
 3006 004c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3007 004e FA2B     		cmp	r3, #250
 3008 0050 00F0A581 		beq	.L179
 3009              	.LBB25:
 663:..\src/command_processing.c ****         uint8* m_addr;
 664:..\src/command_processing.c ****         uint8* m_tmp;
 665:..\src/command_processing.c ****         char str[100];
 666:..\src/command_processing.c ****         strcpy(info_string, "");
 3010              		.loc 1 666 0
 3011 0054 A14B     		ldr	r3, .L181
 3012 0056 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 82


 3013 0058 07F17803 		add	r3, r7, #120
 3014 005c 1A70     		strb	r2, [r3]
 667:..\src/command_processing.c ****         strcat(info_string, "\n");
 3015              		.loc 1 667 0
 3016 005e 07F17803 		add	r3, r7, #120
 3017 0062 1846     		mov	r0, r3
 3018 0064 FFF7FEFF 		bl	strlen
 3019 0068 0346     		mov	r3, r0
 3020 006a 1A46     		mov	r2, r3
 3021 006c 07F17803 		add	r3, r7, #120
 3022 0070 1344     		add	r3, r3, r2
 3023 0072 9D49     		ldr	r1, .L181+12
 3024 0074 1A46     		mov	r2, r3
 3025 0076 0B46     		mov	r3, r1
 3026 0078 1B88     		ldrh	r3, [r3]	@ unaligned
 3027 007a 1380     		strh	r3, [r2]	@ unaligned
 668:..\src/command_processing.c ****         
 669:..\src/command_processing.c ****         
 670:..\src/command_processing.c ****         for (idx = 0; idx < num_params; idx ++) {
 3028              		.loc 1 670 0
 3029 007c 0023     		movs	r3, #0
 3030 007e C7F8603A 		str	r3, [r7, #2656]
 3031 0082 7EE1     		b	.L157
 3032              	.L178:
 671:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3033              		.loc 1 671 0
 3034 0084 D7F8603A 		ldr	r3, [r7, #2656]
 3035 0088 1B01     		lsls	r3, r3, #4
 3036 008a 07F10802 		add	r2, r7, #8
 3037 008e 1268     		ldr	r2, [r2]
 3038 0090 1344     		add	r3, r3, r2
 3039 0092 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3040 0094 002B     		cmp	r3, #0
 3041 0096 00F06F81 		beq	.L158
 3042              	.LBB26:
 672:..\src/command_processing.c ****                 strcat(info_string, PARAM_LIST[idx].PARAM_STR );
 3043              		.loc 1 672 0
 3044 009a D7F8603A 		ldr	r3, [r7, #2656]
 3045 009e 1B01     		lsls	r3, r3, #4
 3046 00a0 07F10802 		add	r2, r7, #8
 3047 00a4 1268     		ldr	r2, [r2]
 3048 00a6 1344     		add	r3, r3, r2
 3049 00a8 9A68     		ldr	r2, [r3, #8]
 3050 00aa 07F17803 		add	r3, r7, #120
 3051 00ae 1146     		mov	r1, r2
 3052 00b0 1846     		mov	r0, r3
 3053 00b2 FFF7FEFF 		bl	strcat
 673:..\src/command_processing.c ****                 m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 3054              		.loc 1 673 0
 3055 00b6 D7F8603A 		ldr	r3, [r7, #2656]
 3056 00ba 1B01     		lsls	r3, r3, #4
 3057 00bc 07F10802 		add	r2, r7, #8
 3058 00c0 1268     		ldr	r2, [r2]
 3059 00c2 1344     		add	r3, r3, r2
 3060 00c4 1B68     		ldr	r3, [r3]
 3061 00c6 C7F8583A 		str	r3, [r7, #2648]
 674:..\src/command_processing.c ****                 uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 83


 3062              		.loc 1 674 0
 3063 00ca D7F8603A 		ldr	r3, [r7, #2656]
 3064 00ce 1B01     		lsls	r3, r3, #4
 3065 00d0 07F10802 		add	r2, r7, #8
 3066 00d4 1268     		ldr	r2, [r2]
 3067 00d6 1344     		add	r3, r3, r2
 3068 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3069 00da 1846     		mov	r0, r3
 3070 00dc FFF7FEFF 		bl	num_of_bytes
 3071 00e0 0346     		mov	r3, r0
 3072 00e2 87F8573A 		strb	r3, [r7, #2647]
 675:..\src/command_processing.c ****                 switch(PARAM_LIST[idx].custom){
 3073              		.loc 1 675 0
 3074 00e6 D7F8603A 		ldr	r3, [r7, #2656]
 3075 00ea 1B01     		lsls	r3, r3, #4
 3076 00ec 07F10802 		add	r2, r7, #8
 3077 00f0 1268     		ldr	r2, [r2]
 3078 00f2 1344     		add	r3, r3, r2
 3079 00f4 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3080 00f6 052B     		cmp	r3, #5
 3081 00f8 00F0FE80 		beq	.L160
 676:..\src/command_processing.c ****                 case 0:   default:    
 677:..\src/command_processing.c ****                     for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS; i++){
 3082              		.loc 1 677 0
 3083 00fc 0023     		movs	r3, #0
 3084 00fe C7F8643A 		str	r3, [r7, #2660]
 3085 0102 DCE0     		b	.L161
 3086              	.L176:
 678:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3087              		.loc 1 678 0
 3088 0104 97F8573A 		ldrb	r3, [r7, #2647]	@ zero_extendqisi2
 3089 0108 D7F8642A 		ldr	r2, [r7, #2660]
 3090 010c 02FB03F3 		mul	r3, r2, r3
 3091 0110 1A46     		mov	r2, r3
 3092 0112 D7F8583A 		ldr	r3, [r7, #2648]
 3093 0116 1344     		add	r3, r3, r2
 3094 0118 C7F8503A 		str	r3, [r7, #2640]
 679:..\src/command_processing.c ****                         switch (PARAM_LIST[idx].TYPES){
 3095              		.loc 1 679 0
 3096 011c D7F8603A 		ldr	r3, [r7, #2656]
 3097 0120 1B01     		lsls	r3, r3, #4
 3098 0122 07F10802 		add	r2, r7, #8
 3099 0126 1268     		ldr	r2, [r2]
 3100 0128 1344     		add	r3, r3, r2
 3101 012a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3102 012c 072B     		cmp	r3, #7
 3103 012e 00F2B980 		bhi	.L162
 3104 0132 01A2     		adr	r2, .L164
 3105 0134 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3106              		.p2align 2
 3107              	.L164:
 3108 0138 27020000 		.word	.L163+1
 3109 013c 75010000 		.word	.L165+1
 3110 0140 59010000 		.word	.L166+1
 3111 0144 91010000 		.word	.L167+1
 3112 0148 AD010000 		.word	.L168+1
 3113 014c E5010000 		.word	.L169+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 84


 3114 0150 C9010000 		.word	.L170+1
 3115 0154 01020000 		.word	.L171+1
 3116              		.p2align 1
 3117              	.L166:
 680:..\src/command_processing.c ****                             case TYPE_UINT8:
 681:..\src/command_processing.c ****                                 aux_uint8 = *((uint8*)m_tmp);
 3118              		.loc 1 681 0
 3119 0158 D7F8503A 		ldr	r3, [r7, #2640]
 3120 015c 1B78     		ldrb	r3, [r3]
 3121 015e 87F84F3A 		strb	r3, [r7, #2639]
 682:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint8);
 3122              		.loc 1 682 0
 3123 0162 97F84F2A 		ldrb	r2, [r7, #2639]	@ zero_extendqisi2
 3124 0166 07F11403 		add	r3, r7, #20
 3125 016a 6049     		ldr	r1, .L181+16
 3126 016c 1846     		mov	r0, r3
 3127 016e FFF7FEFF 		bl	sprintf
 683:..\src/command_processing.c ****                                 break;
 3128              		.loc 1 683 0
 3129 0172 97E0     		b	.L162
 3130              	.L165:
 684:..\src/command_processing.c ****                             case TYPE_INT8:
 685:..\src/command_processing.c ****                                 aux_int8 = *((int8*)m_tmp);
 3131              		.loc 1 685 0
 3132 0174 D7F8503A 		ldr	r3, [r7, #2640]
 3133 0178 1B78     		ldrb	r3, [r3]
 3134 017a 87F84E3A 		strb	r3, [r7, #2638]
 686:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int8);
 3135              		.loc 1 686 0
 3136 017e 97F94E2A 		ldrsb	r2, [r7, #2638]
 3137 0182 07F11403 		add	r3, r7, #20
 3138 0186 5949     		ldr	r1, .L181+16
 3139 0188 1846     		mov	r0, r3
 3140 018a FFF7FEFF 		bl	sprintf
 687:..\src/command_processing.c ****                                 break;
 3141              		.loc 1 687 0
 3142 018e 89E0     		b	.L162
 3143              	.L167:
 688:..\src/command_processing.c ****                             case TYPE_INT16:   
 689:..\src/command_processing.c ****                                 aux_int16 = *((int16*)m_tmp);
 3144              		.loc 1 689 0
 3145 0190 D7F8503A 		ldr	r3, [r7, #2640]
 3146 0194 1B88     		ldrh	r3, [r3]	@ movhi
 3147 0196 A7F84C3A 		strh	r3, [r7, #2636]	@ movhi
 690:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int16);
 3148              		.loc 1 690 0
 3149 019a B7F94C2A 		ldrsh	r2, [r7, #2636]
 3150 019e 07F11403 		add	r3, r7, #20
 3151 01a2 5249     		ldr	r1, .L181+16
 3152 01a4 1846     		mov	r0, r3
 3153 01a6 FFF7FEFF 		bl	sprintf
 691:..\src/command_processing.c ****                                 break;
 3154              		.loc 1 691 0
 3155 01aa 7BE0     		b	.L162
 3156              	.L168:
 692:..\src/command_processing.c ****                             
 693:..\src/command_processing.c ****                             case TYPE_UINT16: 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 85


 694:..\src/command_processing.c ****                                 aux_uint16 = *((uint16*)m_tmp);
 3157              		.loc 1 694 0
 3158 01ac D7F8503A 		ldr	r3, [r7, #2640]
 3159 01b0 1B88     		ldrh	r3, [r3]	@ movhi
 3160 01b2 A7F84A3A 		strh	r3, [r7, #2634]	@ movhi
 695:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint16);
 3161              		.loc 1 695 0
 3162 01b6 B7F84A2A 		ldrh	r2, [r7, #2634]
 3163 01ba 07F11403 		add	r3, r7, #20
 3164 01be 4B49     		ldr	r1, .L181+16
 3165 01c0 1846     		mov	r0, r3
 3166 01c2 FFF7FEFF 		bl	sprintf
 696:..\src/command_processing.c ****                                 break;
 3167              		.loc 1 696 0
 3168 01c6 6DE0     		b	.L162
 3169              	.L170:
 697:..\src/command_processing.c ****                             
 698:..\src/command_processing.c ****                             case TYPE_UINT32:
 699:..\src/command_processing.c ****                                 aux_uint32 = *((uint32*)m_tmp);
 3170              		.loc 1 699 0
 3171 01c8 D7F8503A 		ldr	r3, [r7, #2640]
 3172 01cc 1B68     		ldr	r3, [r3]
 3173 01ce C7F8443A 		str	r3, [r7, #2628]
 700:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_uint32);
 3174              		.loc 1 700 0
 3175 01d2 07F11403 		add	r3, r7, #20
 3176 01d6 D7F8442A 		ldr	r2, [r7, #2628]
 3177 01da 4549     		ldr	r1, .L181+20
 3178 01dc 1846     		mov	r0, r3
 3179 01de FFF7FEFF 		bl	sprintf
 701:..\src/command_processing.c ****                                 break;
 3180              		.loc 1 701 0
 3181 01e2 5FE0     		b	.L162
 3182              	.L169:
 702:..\src/command_processing.c ****                                 
 703:..\src/command_processing.c ****                             case TYPE_INT32:
 704:..\src/command_processing.c ****                                 aux_int32 = *((int32*)m_tmp);
 3183              		.loc 1 704 0
 3184 01e4 D7F8503A 		ldr	r3, [r7, #2640]
 3185 01e8 1B68     		ldr	r3, [r3]
 3186 01ea C7F8403A 		str	r3, [r7, #2624]
 705:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_int32);
 3187              		.loc 1 705 0
 3188 01ee 07F11403 		add	r3, r7, #20
 3189 01f2 D7F8402A 		ldr	r2, [r7, #2624]
 3190 01f6 3E49     		ldr	r1, .L181+20
 3191 01f8 1846     		mov	r0, r3
 3192 01fa FFF7FEFF 		bl	sprintf
 706:..\src/command_processing.c ****                                 break;
 3193              		.loc 1 706 0
 3194 01fe 51E0     		b	.L162
 3195              	.L171:
 707:..\src/command_processing.c ****                                 
 708:..\src/command_processing.c ****                             case TYPE_FLOAT:
 709:..\src/command_processing.c ****                                 aux_float = *((float*)m_tmp);
 3196              		.loc 1 709 0
 3197 0200 D7F8503A 		ldr	r3, [r7, #2640]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 86


 3198 0204 1B68     		ldr	r3, [r3]	@ float
 3199 0206 C7F83C3A 		str	r3, [r7, #2620]	@ float
 710:..\src/command_processing.c ****                                 sprintf(str, " %f", aux_float);
 3200              		.loc 1 710 0
 3201 020a D7F83C0A 		ldr	r0, [r7, #2620]	@ float
 3202 020e FFF7FEFF 		bl	__aeabi_f2d
 3203 0212 0346     		mov	r3, r0
 3204 0214 0C46     		mov	r4, r1
 3205 0216 07F11400 		add	r0, r7, #20
 3206 021a 1A46     		mov	r2, r3
 3207 021c 2346     		mov	r3, r4
 3208 021e 3549     		ldr	r1, .L181+24
 3209 0220 FFF7FEFF 		bl	sprintf
 711:..\src/command_processing.c ****                                 break;
 3210              		.loc 1 711 0
 3211 0224 3EE0     		b	.L162
 3212              	.L163:
 712:..\src/command_processing.c ****                                 
 713:..\src/command_processing.c ****                             case TYPE_FLAG:
 714:..\src/command_processing.c ****                                 for (i = 0; i < num_menus; i++){
 3213              		.loc 1 714 0
 3214 0226 0023     		movs	r3, #0
 3215 0228 C7F8643A 		str	r3, [r7, #2660]
 3216 022c 32E0     		b	.L172
 3217              	.L175:
 715:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3218              		.loc 1 715 0
 3219 022e D7F8643A 		ldr	r3, [r7, #2660]
 3220 0232 2C22     		movs	r2, #44
 3221 0234 02FB03F3 		mul	r3, r2, r3
 3222 0238 3A1D     		adds	r2, r7, #4
 3223 023a 1268     		ldr	r2, [r2]
 3224 023c 1344     		add	r3, r3, r2
 3225 023e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3226 0240 D7F8603A 		ldr	r3, [r7, #2656]
 3227 0244 1B01     		lsls	r3, r3, #4
 3228 0246 07F10801 		add	r1, r7, #8
 3229 024a 0968     		ldr	r1, [r1]
 3230 024c 0B44     		add	r3, r3, r1
 3231 024e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3232 0250 9A42     		cmp	r2, r3
 3233 0252 1AD1     		bne	.L173
 716:..\src/command_processing.c ****                                         strcpy(str, "");
 3234              		.loc 1 716 0
 3235 0254 214B     		ldr	r3, .L181
 3236 0256 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3237 0258 07F11403 		add	r3, r7, #20
 3238 025c 1A70     		strb	r2, [r3]
 717:..\src/command_processing.c ****                                         strcat(str, MENU_LIST[i].choice[*m_addr]);
 3239              		.loc 1 717 0
 3240 025e D7F8643A 		ldr	r3, [r7, #2660]
 3241 0262 2C22     		movs	r2, #44
 3242 0264 02FB03F3 		mul	r3, r2, r3
 3243 0268 3A1D     		adds	r2, r7, #4
 3244 026a 1268     		ldr	r2, [r2]
 3245 026c 1A44     		add	r2, r2, r3
 3246 026e D7F8583A 		ldr	r3, [r7, #2648]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 87


 3247 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3248 0274 9B00     		lsls	r3, r3, #2
 3249 0276 1344     		add	r3, r3, r2
 3250 0278 5A68     		ldr	r2, [r3, #4]
 3251 027a 07F11403 		add	r3, r7, #20
 3252 027e 1146     		mov	r1, r2
 3253 0280 1846     		mov	r0, r3
 3254 0282 FFF7FEFF 		bl	strcat
 718:..\src/command_processing.c ****                                         break;
 3255              		.loc 1 718 0
 3256 0286 00BF     		nop
 719:..\src/command_processing.c ****                                     }
 720:..\src/command_processing.c ****                                 }
 721:..\src/command_processing.c ****                                 break;
 3257              		.loc 1 721 0
 3258 0288 0BE0     		b	.L180
 3259              	.L173:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3260              		.loc 1 714 0 discriminator 2
 3261 028a D7F8643A 		ldr	r3, [r7, #2660]
 3262 028e 0133     		adds	r3, r3, #1
 3263 0290 C7F8643A 		str	r3, [r7, #2660]
 3264              	.L172:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3265              		.loc 1 714 0 is_stmt 0 discriminator 1
 3266 0294 07F10E03 		add	r3, r7, #14
 3267 0298 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3268 029a D7F8643A 		ldr	r3, [r7, #2660]
 3269 029e 9A42     		cmp	r2, r3
 3270 02a0 C5DC     		bgt	.L175
 3271              	.L180:
 3272              		.loc 1 721 0 is_stmt 1
 3273 02a2 00BF     		nop
 3274              	.L162:
 722:..\src/command_processing.c ****                         } 
 723:..\src/command_processing.c ****                         strcat(info_string, str);
 3275              		.loc 1 723 0 discriminator 2
 3276 02a4 07F11402 		add	r2, r7, #20
 3277 02a8 07F17803 		add	r3, r7, #120
 3278 02ac 1146     		mov	r1, r2
 3279 02ae 1846     		mov	r0, r3
 3280 02b0 FFF7FEFF 		bl	strcat
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3281              		.loc 1 677 0 discriminator 2
 3282 02b4 D7F8643A 		ldr	r3, [r7, #2660]
 3283 02b8 0133     		adds	r3, r3, #1
 3284 02ba C7F8643A 		str	r3, [r7, #2660]
 3285              	.L161:
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3286              		.loc 1 677 0 is_stmt 0 discriminator 1
 3287 02be D7F8603A 		ldr	r3, [r7, #2656]
 3288 02c2 1B01     		lsls	r3, r3, #4
 3289 02c4 07F10802 		add	r2, r7, #8
 3290 02c8 1268     		ldr	r2, [r2]
 3291 02ca 1344     		add	r3, r3, r2
 3292 02cc 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3293 02ce 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 88


 3294 02d0 D7F8643A 		ldr	r3, [r7, #2660]
 3295 02d4 9A42     		cmp	r2, r3
 3296 02d6 3FF715AF 		bgt	.L176
 724:..\src/command_processing.c ****                     }
 725:..\src/command_processing.c ****                     break;
 3297              		.loc 1 725 0 is_stmt 1
 3298 02da 3EE0     		b	.L177
 3299              	.L182:
 3300              		.align	2
 3301              	.L181:
 3302 02dc 00000000 		.word	.LC8
 3303 02e0 00000000 		.word	superstring
 3304 02e4 00000000 		.word	c_mem
 3305 02e8 28000000 		.word	.LC17
 3306 02ec 78020000 		.word	.LC34
 3307 02f0 7C020000 		.word	.LC35
 3308 02f4 84020000 		.word	.LC36
 3309              	.L160:
 726:..\src/command_processing.c ****                     
 727:..\src/command_processing.c ****                     
 728:..\src/command_processing.c ****                 case CUSTOM_POS_LIM:        
 729:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 3310              		.loc 1 729 0
 3311 02f8 2B4B     		ldr	r3, .L183
 3312 02fa 1B6A     		ldr	r3, [r3, #32]
 3313 02fc 2A4A     		ldr	r2, .L183
 3314 02fe 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3315 0302 1341     		asrs	r3, r3, r2
 3316 0304 C7F8403A 		str	r3, [r7, #2624]
 730:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3317              		.loc 1 730 0
 3318 0308 07F11403 		add	r3, r7, #20
 3319 030c D7F8402A 		ldr	r2, [r7, #2624]
 3320 0310 2649     		ldr	r1, .L183+4
 3321 0312 1846     		mov	r0, r3
 3322 0314 FFF7FEFF 		bl	sprintf
 731:..\src/command_processing.c ****                     strcat(info_string, str);
 3323              		.loc 1 731 0
 3324 0318 07F11402 		add	r2, r7, #20
 3325 031c 07F17803 		add	r3, r7, #120
 3326 0320 1146     		mov	r1, r2
 3327 0322 1846     		mov	r0, r3
 3328 0324 FFF7FEFF 		bl	strcat
 732:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 3329              		.loc 1 732 0
 3330 0328 1F4B     		ldr	r3, .L183
 3331 032a 5B6A     		ldr	r3, [r3, #36]
 3332 032c 1E4A     		ldr	r2, .L183
 3333 032e 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3334 0332 1341     		asrs	r3, r3, r2
 3335 0334 C7F8403A 		str	r3, [r7, #2624]
 733:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3336              		.loc 1 733 0
 3337 0338 07F11403 		add	r3, r7, #20
 3338 033c D7F8402A 		ldr	r2, [r7, #2624]
 3339 0340 1A49     		ldr	r1, .L183+4
 3340 0342 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 89


 3341 0344 FFF7FEFF 		bl	sprintf
 734:..\src/command_processing.c ****                     strcat(info_string, str);
 3342              		.loc 1 734 0
 3343 0348 07F11402 		add	r2, r7, #20
 3344 034c 07F17803 		add	r3, r7, #120
 3345 0350 1146     		mov	r1, r2
 3346 0352 1846     		mov	r0, r3
 3347 0354 FFF7FEFF 		bl	strcat
 735:..\src/command_processing.c ****                     break;
 3348              		.loc 1 735 0
 3349 0358 00BF     		nop
 3350              	.L177:
 736:..\src/command_processing.c ****                 }
 737:..\src/command_processing.c ****                 
 738:..\src/command_processing.c ****                 strcat(info_string, "\n");
 3351              		.loc 1 738 0
 3352 035a 07F17803 		add	r3, r7, #120
 3353 035e 1846     		mov	r0, r3
 3354 0360 FFF7FEFF 		bl	strlen
 3355 0364 0346     		mov	r3, r0
 3356 0366 1A46     		mov	r2, r3
 3357 0368 07F17803 		add	r3, r7, #120
 3358 036c 1344     		add	r3, r3, r2
 3359 036e 1049     		ldr	r1, .L183+8
 3360 0370 1A46     		mov	r2, r3
 3361 0372 0B46     		mov	r3, r1
 3362 0374 1B88     		ldrh	r3, [r3]	@ unaligned
 3363 0376 1380     		strh	r3, [r2]	@ unaligned
 3364              	.L158:
 3365              	.LBE26:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3366              		.loc 1 670 0 discriminator 2
 3367 0378 D7F8603A 		ldr	r3, [r7, #2656]
 3368 037c 0133     		adds	r3, r3, #1
 3369 037e C7F8603A 		str	r3, [r7, #2656]
 3370              	.L157:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3371              		.loc 1 670 0 is_stmt 0 discriminator 1
 3372 0382 07F10F03 		add	r3, r7, #15
 3373 0386 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3374 0388 D7F8603A 		ldr	r3, [r7, #2656]
 3375 038c 9A42     		cmp	r2, r3
 3376 038e 3FF779AE 		bgt	.L178
 739:..\src/command_processing.c ****                 
 740:..\src/command_processing.c ****             }
 741:..\src/command_processing.c ****             
 742:..\src/command_processing.c ****         }
 743:..\src/command_processing.c ****               
 744:..\src/command_processing.c ****       
 745:..\src/command_processing.c ****     strcat(superstring,info_string);
 3377              		.loc 1 745 0 is_stmt 1
 3378 0392 07F17803 		add	r3, r7, #120
 3379 0396 1946     		mov	r1, r3
 3380 0398 0648     		ldr	r0, .L183+12
 3381 039a FFF7FEFF 		bl	strcat
 3382              	.L179:
 3383              	.LBE25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 90


 746:..\src/command_processing.c ****     
 747:..\src/command_processing.c **** }}
 3384              		.loc 1 747 0
 3385 039e 00BF     		nop
 3386 03a0 07F66C27 		addw	r7, r7, #2668
 3387              		.cfi_def_cfa_offset 12
 3388 03a4 BD46     		mov	sp, r7
 3389              		.cfi_def_cfa_register 13
 3390              		@ sp needed
 3391 03a6 90BD     		pop	{r4, r7, pc}
 3392              	.L184:
 3393              		.align	2
 3394              	.L183:
 3395 03a8 00000000 		.word	c_mem
 3396 03ac 7C020000 		.word	.LC35
 3397 03b0 28000000 		.word	.LC17
 3398 03b4 00000000 		.word	superstring
 3399              		.cfi_endproc
 3400              	.LFE73:
 3401              		.size	qbadminp_string, .-qbadminp_string
 3402              		.section	.rodata
 3403              		.align	2
 3404              	.LC37:
 3405 0288 0D0A00   		.ascii	"\015\012\000"
 3406 028b 00       		.align	2
 3407              	.LC38:
 3408 028c 4669726D 		.ascii	"Firmware version: \000"
 3408      77617265 
 3408      20766572 
 3408      73696F6E 
 3408      3A2000
 3409 029f 00       		.align	2
 3410              	.LC39:
 3411 02a0 50554C53 		.ascii	"PULSE FW - updated 28.05.24\000"
 3411      45204657 
 3411      202D2075 
 3411      70646174 
 3411      65642032 
 3412              		.align	2
 3413              	.LC40:
 3414 02bc 2E0D0A0D 		.ascii	".\015\012\015\012\000"
 3414      0A00
 3415 02c2 0000     		.align	2
 3416              	.LC41:
 3417 02c4 44455649 		.ascii	"DEVICE INFO\015\012\000"
 3417      43452049 
 3417      4E464F0D 
 3417      0A00
 3418 02d2 0000     		.align	2
 3419              	.LC42:
 3420 02d4 44657669 		.ascii	"Device: PULSE\015\012\000"
 3420      63653A20 
 3420      50554C53 
 3420      450D0A00 
 3421              		.align	2
 3422              	.LC43:
 3423 02e4 454D4720 		.ascii	"EMG input %d -> %d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 91


 3423      696E7075 
 3423      74202564 
 3423      202D3E20 
 3423      256400
 3424 02f7 00       		.align	2
 3425              	.LC44:
 3426 02f8 41637475 		.ascii	"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \015"
 3426      61746F72 
 3426      7320696E 
 3426      7075743A 
 3426      2050756D 
 3427 0328 0A00     		.ascii	"\012\000"
 3428              		.global	__aeabi_f2uiz
 3429 032a 0000     		.align	2
 3430              	.LC45:
 3431 032c 4C617374 		.ascii	"Last FW cycle time: %u us\015\012\000"
 3431      20465720 
 3431      6379636C 
 3431      65207469 
 3431      6D653A20 
 3432              		.align	2
 3433              	.LC46:
 3434 0348 0D0A0000 		.ascii	"\015\012\000\000"
 3435              		.section	.text.prepare_generic_info,"ax",%progbits
 3436              		.align	2
 3437              		.global	prepare_generic_info
 3438              		.thumb
 3439              		.thumb_func
 3440              		.type	prepare_generic_info, %function
 3441              	prepare_generic_info:
 3442              	.LFB74:
 748:..\src/command_processing.c **** //==============================================================================
 749:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 750:..\src/command_processing.c **** //==============================================================================
 751:..\src/command_processing.c **** 
 752:..\src/command_processing.c **** void prepare_generic_info(char *info_string){   
 3443              		.loc 1 752 0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 120
 3446              		@ frame_needed = 1, uses_anonymous_args = 0
 3447 0000 B0B5     		push	{r4, r5, r7, lr}
 3448              		.cfi_def_cfa_offset 16
 3449              		.cfi_offset 4, -16
 3450              		.cfi_offset 5, -12
 3451              		.cfi_offset 7, -8
 3452              		.cfi_offset 14, -4
 3453 0002 A0B0     		sub	sp, sp, #128
 3454              		.cfi_def_cfa_offset 144
 3455 0004 02AF     		add	r7, sp, #8
 3456              		.cfi_def_cfa 7, 136
 3457 0006 7860     		str	r0, [r7, #4]
 753:..\src/command_processing.c ****     
 754:..\src/command_processing.c ****      manage_param_list(300,0);
 3458              		.loc 1 754 0
 3459 0008 0021     		movs	r1, #0
 3460 000a 4FF49670 		mov	r0, #300
 3461 000e FFF7FEFF 		bl	manage_param_list
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 92


 755:..\src/command_processing.c ****     int i;
 756:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3462              		.loc 1 756 0
 3463 0012 6C4B     		ldr	r3, .L190
 3464 0014 3B67     		str	r3, [r7, #112]
 757:..\src/command_processing.c ****     
 758:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3465              		.loc 1 758 0
 3466 0016 6B4B     		ldr	r3, .L190
 3467 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3468 001a FA2B     		cmp	r3, #250
 3469 001c 00F0CD80 		beq	.L189
 3470              	.LBB27:
 759:..\src/command_processing.c ****         
 760:..\src/command_processing.c ****         char str[100];
 761:..\src/command_processing.c ****         strcpy(info_string, "");
 3471              		.loc 1 761 0
 3472 0020 7B68     		ldr	r3, [r7, #4]
 3473 0022 0022     		movs	r2, #0
 3474 0024 1A70     		strb	r2, [r3]
 762:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3475              		.loc 1 762 0
 3476 0026 7868     		ldr	r0, [r7, #4]
 3477 0028 FFF7FEFF 		bl	strlen
 3478 002c 0346     		mov	r3, r0
 3479 002e 1A46     		mov	r2, r3
 3480 0030 7B68     		ldr	r3, [r7, #4]
 3481 0032 1344     		add	r3, r3, r2
 3482 0034 644A     		ldr	r2, .L190+4
 3483 0036 1188     		ldrh	r1, [r2]	@ unaligned
 3484 0038 9278     		ldrb	r2, [r2, #2]
 3485 003a 1980     		strh	r1, [r3]	@ unaligned
 3486 003c 9A70     		strb	r2, [r3, #2]
 763:..\src/command_processing.c ****         strcat(info_string, "Firmware version: ");
 3487              		.loc 1 763 0
 3488 003e 7868     		ldr	r0, [r7, #4]
 3489 0040 FFF7FEFF 		bl	strlen
 3490 0044 0346     		mov	r3, r0
 3491 0046 1A46     		mov	r2, r3
 3492 0048 7B68     		ldr	r3, [r7, #4]
 3493 004a 1344     		add	r3, r3, r2
 3494 004c 5F4A     		ldr	r2, .L190+8
 3495 004e 1D46     		mov	r5, r3
 3496 0050 1446     		mov	r4, r2
 3497 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3498 0054 2860     		str	r0, [r5]	@ unaligned
 3499 0056 6960     		str	r1, [r5, #4]	@ unaligned
 3500 0058 AA60     		str	r2, [r5, #8]	@ unaligned
 3501 005a EB60     		str	r3, [r5, #12]	@ unaligned
 3502 005c 2388     		ldrh	r3, [r4]	@ unaligned
 3503 005e A278     		ldrb	r2, [r4, #2]
 3504 0060 2B82     		strh	r3, [r5, #16]	@ unaligned
 3505 0062 1346     		mov	r3, r2
 3506 0064 AB74     		strb	r3, [r5, #18]
 764:..\src/command_processing.c ****         strcat(info_string, VERSION);
 3507              		.loc 1 764 0
 3508 0066 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 93


 3509 0068 FFF7FEFF 		bl	strlen
 3510 006c 0346     		mov	r3, r0
 3511 006e 1A46     		mov	r2, r3
 3512 0070 7B68     		ldr	r3, [r7, #4]
 3513 0072 1344     		add	r3, r3, r2
 3514 0074 564A     		ldr	r2, .L190+12
 3515 0076 1D46     		mov	r5, r3
 3516 0078 1446     		mov	r4, r2
 3517 007a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3518 007c 2860     		str	r0, [r5]	@ unaligned
 3519 007e 6960     		str	r1, [r5, #4]	@ unaligned
 3520 0080 AA60     		str	r2, [r5, #8]	@ unaligned
 3521 0082 EB60     		str	r3, [r5, #12]	@ unaligned
 3522 0084 07CC     		ldmia	r4!, {r0, r1, r2}
 3523 0086 2861     		str	r0, [r5, #16]	@ unaligned
 3524 0088 6961     		str	r1, [r5, #20]	@ unaligned
 3525 008a AA61     		str	r2, [r5, #24]	@ unaligned
 765:..\src/command_processing.c ****         strcat(info_string, ".\r\n\r\n");      
 3526              		.loc 1 765 0
 3527 008c 7868     		ldr	r0, [r7, #4]
 3528 008e FFF7FEFF 		bl	strlen
 3529 0092 0346     		mov	r3, r0
 3530 0094 1A46     		mov	r2, r3
 3531 0096 7B68     		ldr	r3, [r7, #4]
 3532 0098 1344     		add	r3, r3, r2
 3533 009a 4E4A     		ldr	r2, .L190+16
 3534 009c 1068     		ldr	r0, [r2]	@ unaligned
 3535 009e 1860     		str	r0, [r3]	@ unaligned
 3536 00a0 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3537 00a2 9A80     		strh	r2, [r3, #4]	@ unaligned
 766:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 3538              		.loc 1 766 0
 3539 00a4 7868     		ldr	r0, [r7, #4]
 3540 00a6 FFF7FEFF 		bl	strlen
 3541 00aa 0346     		mov	r3, r0
 3542 00ac 1A46     		mov	r2, r3
 3543 00ae 7B68     		ldr	r3, [r7, #4]
 3544 00b0 1344     		add	r3, r3, r2
 3545 00b2 494A     		ldr	r2, .L190+20
 3546 00b4 1C46     		mov	r4, r3
 3547 00b6 1346     		mov	r3, r2
 3548 00b8 07CB     		ldmia	r3!, {r0, r1, r2}
 3549 00ba 2060     		str	r0, [r4]	@ unaligned
 3550 00bc 6160     		str	r1, [r4, #4]	@ unaligned
 3551 00be A260     		str	r2, [r4, #8]	@ unaligned
 3552 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 3553 00c2 A381     		strh	r3, [r4, #12]	@ unaligned
 767:..\src/command_processing.c ****         strcat(info_string, "Device: PULSE\r\n");
 3554              		.loc 1 767 0
 3555 00c4 7868     		ldr	r0, [r7, #4]
 3556 00c6 FFF7FEFF 		bl	strlen
 3557 00ca 0346     		mov	r3, r0
 3558 00cc 1A46     		mov	r2, r3
 3559 00ce 7B68     		ldr	r3, [r7, #4]
 3560 00d0 1344     		add	r3, r3, r2
 3561 00d2 424A     		ldr	r2, .L190+24
 3562 00d4 1C46     		mov	r4, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 94


 3563 00d6 1546     		mov	r5, r2
 3564 00d8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3565 00da 2060     		str	r0, [r4]	@ unaligned
 3566 00dc 6160     		str	r1, [r4, #4]	@ unaligned
 3567 00de A260     		str	r2, [r4, #8]	@ unaligned
 3568 00e0 E360     		str	r3, [r4, #12]	@ unaligned
 768:..\src/command_processing.c ****         strcat(info_string, superstring);
 3569              		.loc 1 768 0
 3570 00e2 3F49     		ldr	r1, .L190+28
 3571 00e4 7868     		ldr	r0, [r7, #4]
 3572 00e6 FFF7FEFF 		bl	strcat
 769:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3573              		.loc 1 769 0
 3574 00ea 7868     		ldr	r0, [r7, #4]
 3575 00ec FFF7FEFF 		bl	strlen
 3576 00f0 0346     		mov	r3, r0
 3577 00f2 1A46     		mov	r2, r3
 3578 00f4 7B68     		ldr	r3, [r7, #4]
 3579 00f6 1344     		add	r3, r3, r2
 3580 00f8 334A     		ldr	r2, .L190+4
 3581 00fa 1188     		ldrh	r1, [r2]	@ unaligned
 3582 00fc 9278     		ldrb	r2, [r2, #2]
 3583 00fe 1980     		strh	r1, [r3]	@ unaligned
 3584 0100 9A70     		strb	r2, [r3, #2]
 770:..\src/command_processing.c **** 
 771:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 3585              		.loc 1 771 0
 3586 0102 0023     		movs	r3, #0
 3587 0104 7B67     		str	r3, [r7, #116]
 3588 0106 20E0     		b	.L187
 3589              	.L188:
 772:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3590              		.loc 1 772 0 discriminator 3
 3591 0108 7B6F     		ldr	r3, [r7, #116]
 3592 010a 591C     		adds	r1, r3, #1
 3593 010c 354A     		ldr	r2, .L190+32
 3594 010e 7B6F     		ldr	r3, [r7, #116]
 3595 0110 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3596 0114 07F10C00 		add	r0, r7, #12
 3597 0118 0A46     		mov	r2, r1
 3598 011a 3349     		ldr	r1, .L190+36
 3599 011c FFF7FEFF 		bl	sprintf
 773:..\src/command_processing.c ****                 strcat(info_string, str);
 3600              		.loc 1 773 0 discriminator 3
 3601 0120 07F10C03 		add	r3, r7, #12
 3602 0124 1946     		mov	r1, r3
 3603 0126 7868     		ldr	r0, [r7, #4]
 3604 0128 FFF7FEFF 		bl	strcat
 774:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 3605              		.loc 1 774 0 discriminator 3
 3606 012c 7868     		ldr	r0, [r7, #4]
 3607 012e FFF7FEFF 		bl	strlen
 3608 0132 0346     		mov	r3, r0
 3609 0134 1A46     		mov	r2, r3
 3610 0136 7B68     		ldr	r3, [r7, #4]
 3611 0138 1344     		add	r3, r3, r2
 3612 013a 234A     		ldr	r2, .L190+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 95


 3613 013c 1188     		ldrh	r1, [r2]	@ unaligned
 3614 013e 9278     		ldrb	r2, [r2, #2]
 3615 0140 1980     		strh	r1, [r3]	@ unaligned
 3616 0142 9A70     		strb	r2, [r3, #2]
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3617              		.loc 1 771 0 discriminator 3
 3618 0144 7B6F     		ldr	r3, [r7, #116]
 3619 0146 0133     		adds	r3, r3, #1
 3620 0148 7B67     		str	r3, [r7, #116]
 3621              	.L187:
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3622              		.loc 1 771 0 is_stmt 0 discriminator 1
 3623 014a 7B6F     		ldr	r3, [r7, #116]
 3624 014c 012B     		cmp	r3, #1
 3625 014e DBDD     		ble	.L188
 775:..\src/command_processing.c ****             }
 776:..\src/command_processing.c ****             
 777:..\src/command_processing.c ****             
 778:..\src/command_processing.c ****         sprintf(str,"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \r\n",(int) Pump_refOld, (int)V
 3626              		.loc 1 778 0 is_stmt 1
 3627 0150 264B     		ldr	r3, .L190+40
 3628 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3629 0154 1A46     		mov	r2, r3
 3630 0156 264B     		ldr	r3, .L190+44
 3631 0158 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3632 015a 1946     		mov	r1, r3
 3633 015c 244B     		ldr	r3, .L190+44
 3634 015e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3635 0160 07F10C00 		add	r0, r7, #12
 3636 0164 0093     		str	r3, [sp]
 3637 0166 0B46     		mov	r3, r1
 3638 0168 2249     		ldr	r1, .L190+48
 3639 016a FFF7FEFF 		bl	sprintf
 779:..\src/command_processing.c ****         strcat(info_string, str);
 3640              		.loc 1 779 0
 3641 016e 07F10C03 		add	r3, r7, #12
 3642 0172 1946     		mov	r1, r3
 3643 0174 7868     		ldr	r0, [r7, #4]
 3644 0176 FFF7FEFF 		bl	strcat
 780:..\src/command_processing.c ****         //sprintf(str, "Last FW cycle time: %d us\r\n", (uint16_t)cycle_time);
 781:..\src/command_processing.c ****         sprintf(str, "Last FW cycle time: %u us\r\n", (uint16)cycle_time);
 3645              		.loc 1 781 0
 3646 017a 1F4B     		ldr	r3, .L190+52
 3647 017c 1B68     		ldr	r3, [r3]	@ float
 3648 017e 1846     		mov	r0, r3
 3649 0180 FFF7FEFF 		bl	__aeabi_f2uiz
 3650 0184 0346     		mov	r3, r0
 3651 0186 9BB2     		uxth	r3, r3
 3652 0188 1A46     		mov	r2, r3
 3653 018a 07F10C03 		add	r3, r7, #12
 3654 018e 1B49     		ldr	r1, .L190+56
 3655 0190 1846     		mov	r0, r3
 3656 0192 FFF7FEFF 		bl	sprintf
 782:..\src/command_processing.c ****         strcat(info_string, str);
 3657              		.loc 1 782 0
 3658 0196 07F10C03 		add	r3, r7, #12
 3659 019a 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 96


 3660 019c 7868     		ldr	r0, [r7, #4]
 3661 019e FFF7FEFF 		bl	strcat
 783:..\src/command_processing.c **** 
 784:..\src/command_processing.c ****                
 785:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 3662              		.loc 1 785 0
 3663 01a2 7868     		ldr	r0, [r7, #4]
 3664 01a4 FFF7FEFF 		bl	strlen
 3665 01a8 0346     		mov	r3, r0
 3666 01aa 1A46     		mov	r2, r3
 3667 01ac 7B68     		ldr	r3, [r7, #4]
 3668 01ae 1344     		add	r3, r3, r2
 3669 01b0 134A     		ldr	r2, .L190+60
 3670 01b2 1188     		ldrh	r1, [r2]	@ unaligned
 3671 01b4 9278     		ldrb	r2, [r2, #2]
 3672 01b6 1980     		strh	r1, [r3]	@ unaligned
 3673 01b8 9A70     		strb	r2, [r3, #2]
 3674              	.L189:
 3675              	.LBE27:
 786:..\src/command_processing.c ****     }
 787:..\src/command_processing.c **** }
 3676              		.loc 1 787 0
 3677 01ba 00BF     		nop
 3678 01bc 7837     		adds	r7, r7, #120
 3679              		.cfi_def_cfa_offset 16
 3680 01be BD46     		mov	sp, r7
 3681              		.cfi_def_cfa_register 13
 3682              		@ sp needed
 3683 01c0 B0BD     		pop	{r4, r5, r7, pc}
 3684              	.L191:
 3685 01c2 00BF     		.align	2
 3686              	.L190:
 3687 01c4 00000000 		.word	c_mem
 3688 01c8 88020000 		.word	.LC37
 3689 01cc 8C020000 		.word	.LC38
 3690 01d0 A0020000 		.word	.LC39
 3691 01d4 BC020000 		.word	.LC40
 3692 01d8 C4020000 		.word	.LC41
 3693 01dc D4020000 		.word	.LC42
 3694 01e0 00000000 		.word	superstring
 3695 01e4 00000000 		.word	g_adc_meas
 3696 01e8 E4020000 		.word	.LC43
 3697 01ec 00000000 		.word	Pump_refOld
 3698 01f0 00000000 		.word	VT_refOld
 3699 01f4 F8020000 		.word	.LC44
 3700 01f8 00000000 		.word	cycle_time
 3701 01fc 2C030000 		.word	.LC45
 3702 0200 48030000 		.word	.LC46
 3703              		.cfi_endproc
 3704              	.LFE74:
 3705              		.size	prepare_generic_info, .-prepare_generic_info
 3706              		.section	.text.prepare_counter_info,"ax",%progbits
 3707              		.align	2
 3708              		.global	prepare_counter_info
 3709              		.thumb
 3710              		.thumb_func
 3711              		.type	prepare_counter_info, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 97


 3712              	prepare_counter_info:
 3713              	.LFB75:
 788:..\src/command_processing.c **** 
 789:..\src/command_processing.c **** //==============================================================================
 790:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 791:..\src/command_processing.c **** //==============================================================================
 792:..\src/command_processing.c **** 
 793:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 794:..\src/command_processing.c **** {
 3714              		.loc 1 794 0
 3715              		.cfi_startproc
 3716              		@ args = 0, pretend = 0, frame = 8
 3717              		@ frame_needed = 1, uses_anonymous_args = 0
 3718              		@ link register save eliminated.
 3719 0000 80B4     		push	{r7}
 3720              		.cfi_def_cfa_offset 4
 3721              		.cfi_offset 7, -4
 3722 0002 83B0     		sub	sp, sp, #12
 3723              		.cfi_def_cfa_offset 16
 3724 0004 00AF     		add	r7, sp, #0
 3725              		.cfi_def_cfa_register 7
 3726 0006 7860     		str	r0, [r7, #4]
 795:..\src/command_processing.c **** }
 3727              		.loc 1 795 0
 3728 0008 00BF     		nop
 3729 000a 0C37     		adds	r7, r7, #12
 3730              		.cfi_def_cfa_offset 4
 3731 000c BD46     		mov	sp, r7
 3732              		.cfi_def_cfa_register 13
 3733              		@ sp needed
 3734 000e 80BC     		pop	{r7}
 3735              		.cfi_restore 7
 3736              		.cfi_def_cfa_offset 0
 3737 0010 7047     		bx	lr
 3738              		.cfi_endproc
 3739              	.LFE75:
 3740              		.size	prepare_counter_info, .-prepare_counter_info
 3741 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 3742              		.align	2
 3743              		.global	prepare_R01_info
 3744              		.thumb
 3745              		.thumb_func
 3746              		.type	prepare_R01_info, %function
 3747              	prepare_R01_info:
 3748              	.LFB76:
 796:..\src/command_processing.c **** 
 797:..\src/command_processing.c **** //==============================================================================
 798:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 799:..\src/command_processing.c **** //==============================================================================
 800:..\src/command_processing.c **** 
 801:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
 802:..\src/command_processing.c **** {
 3749              		.loc 1 802 0
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 8
 3752              		@ frame_needed = 1, uses_anonymous_args = 0
 3753              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 98


 3754 0000 80B4     		push	{r7}
 3755              		.cfi_def_cfa_offset 4
 3756              		.cfi_offset 7, -4
 3757 0002 83B0     		sub	sp, sp, #12
 3758              		.cfi_def_cfa_offset 16
 3759 0004 00AF     		add	r7, sp, #0
 3760              		.cfi_def_cfa_register 7
 3761 0006 7860     		str	r0, [r7, #4]
 803:..\src/command_processing.c **** }
 3762              		.loc 1 803 0
 3763 0008 00BF     		nop
 3764 000a 0C37     		adds	r7, r7, #12
 3765              		.cfi_def_cfa_offset 4
 3766 000c BD46     		mov	sp, r7
 3767              		.cfi_def_cfa_register 13
 3768              		@ sp needed
 3769 000e 80BC     		pop	{r7}
 3770              		.cfi_restore 7
 3771              		.cfi_def_cfa_offset 0
 3772 0010 7047     		bx	lr
 3773              		.cfi_endproc
 3774              	.LFE76:
 3775              		.size	prepare_R01_info, .-prepare_R01_info
 3776 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 3777              		.align	2
 3778              		.global	prepare_SD_param_info
 3779              		.thumb
 3780              		.thumb_func
 3781              		.type	prepare_SD_param_info, %function
 3782              	prepare_SD_param_info:
 3783              	.LFB77:
 804:..\src/command_processing.c **** 
 805:..\src/command_processing.c **** //==============================================================================
 806:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 807:..\src/command_processing.c **** //==============================================================================
 808:..\src/command_processing.c **** 
 809:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 810:..\src/command_processing.c **** {
 3784              		.loc 1 810 0
 3785              		.cfi_startproc
 3786              		@ args = 0, pretend = 0, frame = 8
 3787              		@ frame_needed = 1, uses_anonymous_args = 0
 3788              		@ link register save eliminated.
 3789 0000 80B4     		push	{r7}
 3790              		.cfi_def_cfa_offset 4
 3791              		.cfi_offset 7, -4
 3792 0002 83B0     		sub	sp, sp, #12
 3793              		.cfi_def_cfa_offset 16
 3794 0004 00AF     		add	r7, sp, #0
 3795              		.cfi_def_cfa_register 7
 3796 0006 7860     		str	r0, [r7, #4]
 811:..\src/command_processing.c **** }
 3797              		.loc 1 811 0
 3798 0008 00BF     		nop
 3799 000a 0C37     		adds	r7, r7, #12
 3800              		.cfi_def_cfa_offset 4
 3801 000c BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 99


 3802              		.cfi_def_cfa_register 13
 3803              		@ sp needed
 3804 000e 80BC     		pop	{r7}
 3805              		.cfi_restore 7
 3806              		.cfi_def_cfa_offset 0
 3807 0010 7047     		bx	lr
 3808              		.cfi_endproc
 3809              	.LFE77:
 3810              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 3811 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 3812              		.align	2
 3813              		.global	prepare_SD_legend
 3814              		.thumb
 3815              		.thumb_func
 3816              		.type	prepare_SD_legend, %function
 3817              	prepare_SD_legend:
 3818              	.LFB78:
 812:..\src/command_processing.c **** 
 813:..\src/command_processing.c **** 
 814:..\src/command_processing.c **** //==============================================================================
 815:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 816:..\src/command_processing.c **** //==============================================================================
 817:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 818:..\src/command_processing.c **** {
 3819              		.loc 1 818 0
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 8
 3822              		@ frame_needed = 1, uses_anonymous_args = 0
 3823              		@ link register save eliminated.
 3824 0000 80B4     		push	{r7}
 3825              		.cfi_def_cfa_offset 4
 3826              		.cfi_offset 7, -4
 3827 0002 83B0     		sub	sp, sp, #12
 3828              		.cfi_def_cfa_offset 16
 3829 0004 00AF     		add	r7, sp, #0
 3830              		.cfi_def_cfa_register 7
 3831 0006 7860     		str	r0, [r7, #4]
 819:..\src/command_processing.c **** }
 3832              		.loc 1 819 0
 3833 0008 00BF     		nop
 3834 000a 0C37     		adds	r7, r7, #12
 3835              		.cfi_def_cfa_offset 4
 3836 000c BD46     		mov	sp, r7
 3837              		.cfi_def_cfa_register 13
 3838              		@ sp needed
 3839 000e 80BC     		pop	{r7}
 3840              		.cfi_restore 7
 3841              		.cfi_def_cfa_offset 0
 3842 0010 7047     		bx	lr
 3843              		.cfi_endproc
 3844              	.LFE78:
 3845              		.size	prepare_SD_legend, .-prepare_SD_legend
 3846 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 3847              		.align	2
 3848              		.global	prepare_SD_EMG_History_legend
 3849              		.thumb
 3850              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 100


 3851              		.type	prepare_SD_EMG_History_legend, %function
 3852              	prepare_SD_EMG_History_legend:
 3853              	.LFB79:
 820:..\src/command_processing.c **** 
 821:..\src/command_processing.c **** //==============================================================================
 822:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 823:..\src/command_processing.c **** //==============================================================================
 824:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 825:..\src/command_processing.c **** {
 3854              		.loc 1 825 0
 3855              		.cfi_startproc
 3856              		@ args = 0, pretend = 0, frame = 8
 3857              		@ frame_needed = 1, uses_anonymous_args = 0
 3858              		@ link register save eliminated.
 3859 0000 80B4     		push	{r7}
 3860              		.cfi_def_cfa_offset 4
 3861              		.cfi_offset 7, -4
 3862 0002 83B0     		sub	sp, sp, #12
 3863              		.cfi_def_cfa_offset 16
 3864 0004 00AF     		add	r7, sp, #0
 3865              		.cfi_def_cfa_register 7
 3866 0006 7860     		str	r0, [r7, #4]
 826:..\src/command_processing.c ****     
 827:..\src/command_processing.c **** }
 3867              		.loc 1 827 0
 3868 0008 00BF     		nop
 3869 000a 0C37     		adds	r7, r7, #12
 3870              		.cfi_def_cfa_offset 4
 3871 000c BD46     		mov	sp, r7
 3872              		.cfi_def_cfa_register 13
 3873              		@ sp needed
 3874 000e 80BC     		pop	{r7}
 3875              		.cfi_restore 7
 3876              		.cfi_def_cfa_offset 0
 3877 0010 7047     		bx	lr
 3878              		.cfi_endproc
 3879              	.LFE79:
 3880              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 3881 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 3882              		.align	2
 3883              		.global	prepare_SD_EMG_history
 3884              		.thumb
 3885              		.thumb_func
 3886              		.type	prepare_SD_EMG_history, %function
 3887              	prepare_SD_EMG_history:
 3888              	.LFB80:
 828:..\src/command_processing.c **** 
 829:..\src/command_processing.c **** //==============================================================================
 830:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 831:..\src/command_processing.c **** //==============================================================================
 832:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
 833:..\src/command_processing.c **** {
 3889              		.loc 1 833 0
 3890              		.cfi_startproc
 3891              		@ args = 0, pretend = 0, frame = 8
 3892              		@ frame_needed = 1, uses_anonymous_args = 0
 3893              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 101


 3894 0000 80B4     		push	{r7}
 3895              		.cfi_def_cfa_offset 4
 3896              		.cfi_offset 7, -4
 3897 0002 83B0     		sub	sp, sp, #12
 3898              		.cfi_def_cfa_offset 16
 3899 0004 00AF     		add	r7, sp, #0
 3900              		.cfi_def_cfa_register 7
 3901 0006 7860     		str	r0, [r7, #4]
 834:..\src/command_processing.c ****         
 835:..\src/command_processing.c **** }
 3902              		.loc 1 835 0
 3903 0008 00BF     		nop
 3904 000a 0C37     		adds	r7, r7, #12
 3905              		.cfi_def_cfa_offset 4
 3906 000c BD46     		mov	sp, r7
 3907              		.cfi_def_cfa_register 13
 3908              		@ sp needed
 3909 000e 80BC     		pop	{r7}
 3910              		.cfi_restore 7
 3911              		.cfi_def_cfa_offset 0
 3912 0010 7047     		bx	lr
 3913              		.cfi_endproc
 3914              	.LFE80:
 3915              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 3916 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 3917              		.align	2
 3918              		.global	IMU_reading_info
 3919              		.thumb
 3920              		.thumb_func
 3921              		.type	IMU_reading_info, %function
 3922              	IMU_reading_info:
 3923              	.LFB81:
 836:..\src/command_processing.c **** 
 837:..\src/command_processing.c **** //==============================================================================
 838:..\src/command_processing.c **** //                                                              IMU READING INFO
 839:..\src/command_processing.c **** //==============================================================================
 840:..\src/command_processing.c **** 
 841:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 842:..\src/command_processing.c **** {
 3924              		.loc 1 842 0
 3925              		.cfi_startproc
 3926              		@ args = 0, pretend = 0, frame = 8
 3927              		@ frame_needed = 1, uses_anonymous_args = 0
 3928              		@ link register save eliminated.
 3929 0000 80B4     		push	{r7}
 3930              		.cfi_def_cfa_offset 4
 3931              		.cfi_offset 7, -4
 3932 0002 83B0     		sub	sp, sp, #12
 3933              		.cfi_def_cfa_offset 16
 3934 0004 00AF     		add	r7, sp, #0
 3935              		.cfi_def_cfa_register 7
 3936 0006 7860     		str	r0, [r7, #4]
 843:..\src/command_processing.c **** }
 3937              		.loc 1 843 0
 3938 0008 00BF     		nop
 3939 000a 0C37     		adds	r7, r7, #12
 3940              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 102


 3941 000c BD46     		mov	sp, r7
 3942              		.cfi_def_cfa_register 13
 3943              		@ sp needed
 3944 000e 80BC     		pop	{r7}
 3945              		.cfi_restore 7
 3946              		.cfi_def_cfa_offset 0
 3947 0010 7047     		bx	lr
 3948              		.cfi_endproc
 3949              	.LFE81:
 3950              		.size	IMU_reading_info, .-IMU_reading_info
 3951 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 3952              		.align	2
 3953              		.global	commWrite_old_id
 3954              		.thumb
 3955              		.thumb_func
 3956              		.type	commWrite_old_id, %function
 3957              	commWrite_old_id:
 3958              	.LFB82:
 844:..\src/command_processing.c **** 
 845:..\src/command_processing.c **** //==============================================================================
 846:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 847:..\src/command_processing.c **** //==============================================================================
 848:..\src/command_processing.c **** 
 849:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 850:..\src/command_processing.c **** {
 3959              		.loc 1 850 0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 16
 3962              		@ frame_needed = 1, uses_anonymous_args = 0
 3963 0000 80B5     		push	{r7, lr}
 3964              		.cfi_def_cfa_offset 8
 3965              		.cfi_offset 7, -8
 3966              		.cfi_offset 14, -4
 3967 0002 84B0     		sub	sp, sp, #16
 3968              		.cfi_def_cfa_offset 24
 3969 0004 00AF     		add	r7, sp, #0
 3970              		.cfi_def_cfa_register 7
 3971 0006 7860     		str	r0, [r7, #4]
 3972 0008 0B46     		mov	r3, r1
 3973 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3974 000c 1346     		mov	r3, r2
 3975 000e 7B70     		strb	r3, [r7, #1]
 851:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 852:..\src/command_processing.c **** 
 853:..\src/command_processing.c ****     // frame - start
 854:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3976              		.loc 1 854 0
 3977 0010 3A20     		movs	r0, #58
 3978 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 855:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3979              		.loc 1 855 0
 3980 0016 3A20     		movs	r0, #58
 3981 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 856:..\src/command_processing.c ****     // frame - ID
 857:..\src/command_processing.c ****     //if(old_id)
 858:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 3982              		.loc 1 858 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 103


 3983 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3984 001e 1846     		mov	r0, r3
 3985 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 859:..\src/command_processing.c ****     //else
 860:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 861:..\src/command_processing.c ****         
 862:..\src/command_processing.c ****     // frame - length
 863:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3986              		.loc 1 863 0
 3987 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3988 0026 DBB2     		uxtb	r3, r3
 3989 0028 1846     		mov	r0, r3
 3990 002a FFF7FEFF 		bl	UART_RS485_PutChar
 864:..\src/command_processing.c ****     // frame - packet data
 865:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 3991              		.loc 1 865 0
 3992 002e 0023     		movs	r3, #0
 3993 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 3994 0032 09E0     		b	.L200
 3995              	.L201:
 866:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 3996              		.loc 1 866 0 discriminator 3
 3997 0034 FB89     		ldrh	r3, [r7, #14]
 3998 0036 7A68     		ldr	r2, [r7, #4]
 3999 0038 1344     		add	r3, r3, r2
 4000 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4001 003c 1846     		mov	r0, r3
 4002 003e FFF7FEFF 		bl	UART_RS485_PutChar
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4003              		.loc 1 865 0 discriminator 3
 4004 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4005 0044 0133     		adds	r3, r3, #1
 4006 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4007              	.L200:
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4008              		.loc 1 865 0 is_stmt 0 discriminator 1
 4009 0048 FA89     		ldrh	r2, [r7, #14]
 4010 004a 7B88     		ldrh	r3, [r7, #2]
 4011 004c 9A42     		cmp	r2, r3
 4012 004e F1D3     		bcc	.L201
 867:..\src/command_processing.c ****     }
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     index = 0;
 4013              		.loc 1 869 0 is_stmt 1
 4014 0050 0023     		movs	r3, #0
 4015 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4016              		.loc 1 871 0
 4017 0054 00BF     		nop
 4018              	.L203:
 4019              		.loc 1 871 0 is_stmt 0 discriminator 2
 4020 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4021 005a 0346     		mov	r3, r0
 4022 005c 03F00103 		and	r3, r3, #1
 4023 0060 002B     		cmp	r3, #0
 4024 0062 05D1     		bne	.L202
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 104


 4025              		.loc 1 871 0 discriminator 1
 4026 0064 FB89     		ldrh	r3, [r7, #14]
 4027 0066 5A1C     		adds	r2, r3, #1
 4028 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 4029 006a B3F57A7F 		cmp	r3, #1000
 4030 006e F2D9     		bls	.L203
 4031              	.L202:
 872:..\src/command_processing.c **** 
 873:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4032              		.loc 1 873 0 is_stmt 1
 4033 0070 0120     		movs	r0, #1
 4034 0072 FFF7FEFF 		bl	RS485_CTS_Write
 874:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4035              		.loc 1 874 0
 4036 0076 0020     		movs	r0, #0
 4037 0078 FFF7FEFF 		bl	RS485_CTS_Write
 875:..\src/command_processing.c **** }
 4038              		.loc 1 875 0
 4039 007c 00BF     		nop
 4040 007e 1037     		adds	r7, r7, #16
 4041              		.cfi_def_cfa_offset 8
 4042 0080 BD46     		mov	sp, r7
 4043              		.cfi_def_cfa_register 13
 4044              		@ sp needed
 4045 0082 80BD     		pop	{r7, pc}
 4046              		.cfi_endproc
 4047              	.LFE82:
 4048              		.size	commWrite_old_id, .-commWrite_old_id
 4049              		.section	.text.commWrite,"ax",%progbits
 4050              		.align	2
 4051              		.global	commWrite
 4052              		.thumb
 4053              		.thumb_func
 4054              		.type	commWrite, %function
 4055              	commWrite:
 4056              	.LFB83:
 876:..\src/command_processing.c **** 
 877:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 878:..\src/command_processing.c **** {
 4057              		.loc 1 878 0
 4058              		.cfi_startproc
 4059              		@ args = 0, pretend = 0, frame = 16
 4060              		@ frame_needed = 1, uses_anonymous_args = 0
 4061 0000 80B5     		push	{r7, lr}
 4062              		.cfi_def_cfa_offset 8
 4063              		.cfi_offset 7, -8
 4064              		.cfi_offset 14, -4
 4065 0002 84B0     		sub	sp, sp, #16
 4066              		.cfi_def_cfa_offset 24
 4067 0004 00AF     		add	r7, sp, #0
 4068              		.cfi_def_cfa_register 7
 4069 0006 7860     		str	r0, [r7, #4]
 4070 0008 0B46     		mov	r3, r1
 4071 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 879:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 880:..\src/command_processing.c **** 
 881:..\src/command_processing.c ****     // frame - start
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 105


 882:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4072              		.loc 1 882 0
 4073 000c 3A20     		movs	r0, #58
 4074 000e FFF7FEFF 		bl	UART_RS485_PutChar
 883:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4075              		.loc 1 883 0
 4076 0012 3A20     		movs	r0, #58
 4077 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 884:..\src/command_processing.c ****     // frame - ID
 885:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 4078              		.loc 1 885 0
 4079 0018 1A4B     		ldr	r3, .L209
 4080 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 4081 001c 1846     		mov	r0, r3
 4082 001e FFF7FEFF 		bl	UART_RS485_PutChar
 886:..\src/command_processing.c ****     // frame - length
 887:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4083              		.loc 1 887 0
 4084 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4085 0024 DBB2     		uxtb	r3, r3
 4086 0026 1846     		mov	r0, r3
 4087 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 888:..\src/command_processing.c ****     // frame - packet data
 889:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4088              		.loc 1 889 0
 4089 002c 0023     		movs	r3, #0
 4090 002e FB81     		strh	r3, [r7, #14]	@ movhi
 4091 0030 09E0     		b	.L205
 4092              	.L206:
 890:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4093              		.loc 1 890 0 discriminator 3
 4094 0032 FB89     		ldrh	r3, [r7, #14]
 4095 0034 7A68     		ldr	r2, [r7, #4]
 4096 0036 1344     		add	r3, r3, r2
 4097 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4098 003a 1846     		mov	r0, r3
 4099 003c FFF7FEFF 		bl	UART_RS485_PutChar
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4100              		.loc 1 889 0 discriminator 3
 4101 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4102 0042 0133     		adds	r3, r3, #1
 4103 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 4104              	.L205:
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4105              		.loc 1 889 0 is_stmt 0 discriminator 1
 4106 0046 FA89     		ldrh	r2, [r7, #14]
 4107 0048 7B88     		ldrh	r3, [r7, #2]
 4108 004a 9A42     		cmp	r2, r3
 4109 004c F1D3     		bcc	.L206
 891:..\src/command_processing.c ****     }
 892:..\src/command_processing.c **** 
 893:..\src/command_processing.c ****     index = 0;
 4110              		.loc 1 893 0 is_stmt 1
 4111 004e 0023     		movs	r3, #0
 4112 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 894:..\src/command_processing.c **** 
 895:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 106


 4113              		.loc 1 895 0
 4114 0052 00BF     		nop
 4115              	.L208:
 4116              		.loc 1 895 0 is_stmt 0 discriminator 2
 4117 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4118 0058 0346     		mov	r3, r0
 4119 005a 03F00103 		and	r3, r3, #1
 4120 005e 002B     		cmp	r3, #0
 4121 0060 05D1     		bne	.L207
 4122              		.loc 1 895 0 discriminator 1
 4123 0062 FB89     		ldrh	r3, [r7, #14]
 4124 0064 5A1C     		adds	r2, r3, #1
 4125 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 4126 0068 B3F57A7F 		cmp	r3, #1000
 4127 006c F2D9     		bls	.L208
 4128              	.L207:
 896:..\src/command_processing.c **** 
 897:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4129              		.loc 1 897 0 is_stmt 1
 4130 006e 0120     		movs	r0, #1
 4131 0070 FFF7FEFF 		bl	RS485_CTS_Write
 898:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4132              		.loc 1 898 0
 4133 0074 0020     		movs	r0, #0
 4134 0076 FFF7FEFF 		bl	RS485_CTS_Write
 899:..\src/command_processing.c **** }
 4135              		.loc 1 899 0
 4136 007a 00BF     		nop
 4137 007c 1037     		adds	r7, r7, #16
 4138              		.cfi_def_cfa_offset 8
 4139 007e BD46     		mov	sp, r7
 4140              		.cfi_def_cfa_register 13
 4141              		@ sp needed
 4142 0080 80BD     		pop	{r7, pc}
 4143              	.L210:
 4144 0082 00BF     		.align	2
 4145              	.L209:
 4146 0084 00000000 		.word	g_mem
 4147              		.cfi_endproc
 4148              	.LFE83:
 4149              		.size	commWrite, .-commWrite
 4150              		.section	.text.commWriteID,"ax",%progbits
 4151              		.align	2
 4152              		.global	commWriteID
 4153              		.thumb
 4154              		.thumb_func
 4155              		.type	commWriteID, %function
 4156              	commWriteID:
 4157              	.LFB84:
 900:..\src/command_processing.c **** 
 901:..\src/command_processing.c **** 
 902:..\src/command_processing.c **** //==============================================================================
 903:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 904:..\src/command_processing.c **** //==============================================================================
 905:..\src/command_processing.c **** 
 906:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 907:..\src/command_processing.c **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 107


 4158              		.loc 1 907 0
 4159              		.cfi_startproc
 4160              		@ args = 0, pretend = 0, frame = 8
 4161              		@ frame_needed = 1, uses_anonymous_args = 0
 4162 0000 80B5     		push	{r7, lr}
 4163              		.cfi_def_cfa_offset 8
 4164              		.cfi_offset 7, -8
 4165              		.cfi_offset 14, -4
 4166 0002 82B0     		sub	sp, sp, #8
 4167              		.cfi_def_cfa_offset 16
 4168 0004 00AF     		add	r7, sp, #0
 4169              		.cfi_def_cfa_register 7
 4170 0006 7860     		str	r0, [r7, #4]
 4171 0008 0B46     		mov	r3, r1
 4172 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4173 000c 1346     		mov	r3, r2
 4174 000e 7B70     		strb	r3, [r7, #1]
 908:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 909:..\src/command_processing.c **** 
 910:..\src/command_processing.c ****     // frame - start
 911:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4175              		.loc 1 911 0
 4176 0010 3A20     		movs	r0, #58
 4177 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 912:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4178              		.loc 1 912 0
 4179 0016 3A20     		movs	r0, #58
 4180 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 913:..\src/command_processing.c ****     // frame - ID
 914:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 4181              		.loc 1 914 0
 4182 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4183 001e 1846     		mov	r0, r3
 4184 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 915:..\src/command_processing.c ****     // frame - length
 916:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4185              		.loc 1 916 0
 4186 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4187 0026 DBB2     		uxtb	r3, r3
 4188 0028 1846     		mov	r0, r3
 4189 002a FFF7FEFF 		bl	UART_RS485_PutChar
 917:..\src/command_processing.c ****     // frame - packet data
 918:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 4190              		.loc 1 918 0
 4191 002e 1B4B     		ldr	r3, .L216
 4192 0030 0022     		movs	r2, #0
 4193 0032 1A80     		strh	r2, [r3]	@ movhi
 4194 0034 0EE0     		b	.L212
 4195              	.L213:
 919:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4196              		.loc 1 919 0 discriminator 3
 4197 0036 194B     		ldr	r3, .L216
 4198 0038 1B88     		ldrh	r3, [r3]
 4199 003a 1A46     		mov	r2, r3
 4200 003c 7B68     		ldr	r3, [r7, #4]
 4201 003e 1344     		add	r3, r3, r2
 4202 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 108


 4203 0042 1846     		mov	r0, r3
 4204 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4205              		.loc 1 918 0 discriminator 3
 4206 0048 144B     		ldr	r3, .L216
 4207 004a 1B88     		ldrh	r3, [r3]
 4208 004c 0133     		adds	r3, r3, #1
 4209 004e 9AB2     		uxth	r2, r3
 4210 0050 124B     		ldr	r3, .L216
 4211 0052 1A80     		strh	r2, [r3]	@ movhi
 4212              	.L212:
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4213              		.loc 1 918 0 is_stmt 0 discriminator 1
 4214 0054 114B     		ldr	r3, .L216
 4215 0056 1B88     		ldrh	r3, [r3]
 4216 0058 7A88     		ldrh	r2, [r7, #2]
 4217 005a 9A42     		cmp	r2, r3
 4218 005c EBD8     		bhi	.L213
 920:..\src/command_processing.c ****     }
 921:..\src/command_processing.c **** 
 922:..\src/command_processing.c ****     i = 0;
 4219              		.loc 1 922 0 is_stmt 1
 4220 005e 0F4B     		ldr	r3, .L216
 4221 0060 0022     		movs	r2, #0
 4222 0062 1A80     		strh	r2, [r3]	@ movhi
 923:..\src/command_processing.c **** 
 924:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 4223              		.loc 1 924 0
 4224 0064 00BF     		nop
 4225              	.L215:
 4226              		.loc 1 924 0 is_stmt 0 discriminator 2
 4227 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4228 006a 0346     		mov	r3, r0
 4229 006c 03F00103 		and	r3, r3, #1
 4230 0070 002B     		cmp	r3, #0
 4231 0072 08D1     		bne	.L214
 4232              		.loc 1 924 0 discriminator 1
 4233 0074 094B     		ldr	r3, .L216
 4234 0076 1B88     		ldrh	r3, [r3]
 4235 0078 5A1C     		adds	r2, r3, #1
 4236 007a 91B2     		uxth	r1, r2
 4237 007c 074A     		ldr	r2, .L216
 4238 007e 1180     		strh	r1, [r2]	@ movhi
 4239 0080 B3F57A7F 		cmp	r3, #1000
 4240 0084 EFD9     		bls	.L215
 4241              	.L214:
 925:..\src/command_processing.c ****     
 926:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4242              		.loc 1 926 0 is_stmt 1
 4243 0086 0120     		movs	r0, #1
 4244 0088 FFF7FEFF 		bl	RS485_CTS_Write
 927:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4245              		.loc 1 927 0
 4246 008c 0020     		movs	r0, #0
 4247 008e FFF7FEFF 		bl	RS485_CTS_Write
 928:..\src/command_processing.c **** }
 4248              		.loc 1 928 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 109


 4249 0092 00BF     		nop
 4250 0094 0837     		adds	r7, r7, #8
 4251              		.cfi_def_cfa_offset 8
 4252 0096 BD46     		mov	sp, r7
 4253              		.cfi_def_cfa_register 13
 4254              		@ sp needed
 4255 0098 80BD     		pop	{r7, pc}
 4256              	.L217:
 4257 009a 00BF     		.align	2
 4258              	.L216:
 4259 009c 00000000 		.word	i.10044
 4260              		.cfi_endproc
 4261              	.LFE84:
 4262              		.size	commWriteID, .-commWriteID
 4263              		.section	.text.LCRChecksum,"ax",%progbits
 4264              		.align	2
 4265              		.global	LCRChecksum
 4266              		.thumb
 4267              		.thumb_func
 4268              		.type	LCRChecksum, %function
 4269              	LCRChecksum:
 4270              	.LFB85:
 929:..\src/command_processing.c **** 
 930:..\src/command_processing.c **** //==============================================================================
 931:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 932:..\src/command_processing.c **** //==============================================================================
 933:..\src/command_processing.c **** 
 934:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 935:..\src/command_processing.c **** 
 936:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 4271              		.loc 1 936 0
 4272              		.cfi_startproc
 4273              		@ args = 0, pretend = 0, frame = 16
 4274              		@ frame_needed = 1, uses_anonymous_args = 0
 4275              		@ link register save eliminated.
 4276 0000 80B4     		push	{r7}
 4277              		.cfi_def_cfa_offset 4
 4278              		.cfi_offset 7, -4
 4279 0002 85B0     		sub	sp, sp, #20
 4280              		.cfi_def_cfa_offset 24
 4281 0004 00AF     		add	r7, sp, #0
 4282              		.cfi_def_cfa_register 7
 4283 0006 7860     		str	r0, [r7, #4]
 4284 0008 0B46     		mov	r3, r1
 4285 000a FB70     		strb	r3, [r7, #3]
 937:..\src/command_processing.c ****     
 938:..\src/command_processing.c ****     uint8 CYDATA i;
 939:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
 4286              		.loc 1 939 0
 4287 000c 0023     		movs	r3, #0
 4288 000e BB73     		strb	r3, [r7, #14]
 940:..\src/command_processing.c ****     
 941:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 4289              		.loc 1 941 0
 4290 0010 0023     		movs	r3, #0
 4291 0012 FB73     		strb	r3, [r7, #15]
 4292 0014 09E0     		b	.L219
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 110


 4293              	.L220:
 942:..\src/command_processing.c ****        checksum ^= data_array[i];
 4294              		.loc 1 942 0 discriminator 3
 4295 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4296 0018 7A68     		ldr	r2, [r7, #4]
 4297 001a 1344     		add	r3, r3, r2
 4298 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4299 001e BB7B     		ldrb	r3, [r7, #14]
 4300 0020 5340     		eors	r3, r3, r2
 4301 0022 BB73     		strb	r3, [r7, #14]
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4302              		.loc 1 941 0 discriminator 3
 4303 0024 FB7B     		ldrb	r3, [r7, #15]
 4304 0026 0133     		adds	r3, r3, #1
 4305 0028 FB73     		strb	r3, [r7, #15]
 4306              	.L219:
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4307              		.loc 1 941 0 is_stmt 0 discriminator 1
 4308 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4309 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4310 002e 9A42     		cmp	r2, r3
 4311 0030 F1D3     		bcc	.L220
 943:..\src/command_processing.c ****   
 944:..\src/command_processing.c ****     return checksum;
 4312              		.loc 1 944 0 is_stmt 1
 4313 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 945:..\src/command_processing.c **** }
 4314              		.loc 1 945 0
 4315 0034 1846     		mov	r0, r3
 4316 0036 1437     		adds	r7, r7, #20
 4317              		.cfi_def_cfa_offset 4
 4318 0038 BD46     		mov	sp, r7
 4319              		.cfi_def_cfa_register 13
 4320              		@ sp needed
 4321 003a 80BC     		pop	{r7}
 4322              		.cfi_restore 7
 4323              		.cfi_def_cfa_offset 0
 4324 003c 7047     		bx	lr
 4325              		.cfi_endproc
 4326              	.LFE85:
 4327              		.size	LCRChecksum, .-LCRChecksum
 4328 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 4329              		.align	2
 4330              		.global	sendAcknowledgment
 4331              		.thumb
 4332              		.thumb_func
 4333              		.type	sendAcknowledgment, %function
 4334              	sendAcknowledgment:
 4335              	.LFB86:
 946:..\src/command_processing.c **** 
 947:..\src/command_processing.c **** 
 948:..\src/command_processing.c **** //==============================================================================
 949:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 950:..\src/command_processing.c **** //==============================================================================
 951:..\src/command_processing.c **** 
 952:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 4336              		.loc 1 952 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 111


 4337              		.cfi_startproc
 4338              		@ args = 0, pretend = 0, frame = 16
 4339              		@ frame_needed = 1, uses_anonymous_args = 0
 4340 0000 80B5     		push	{r7, lr}
 4341              		.cfi_def_cfa_offset 8
 4342              		.cfi_offset 7, -8
 4343              		.cfi_offset 14, -4
 4344 0002 84B0     		sub	sp, sp, #16
 4345              		.cfi_def_cfa_offset 24
 4346 0004 00AF     		add	r7, sp, #0
 4347              		.cfi_def_cfa_register 7
 4348 0006 0346     		mov	r3, r0
 4349 0008 FB71     		strb	r3, [r7, #7]
 953:..\src/command_processing.c ****     int packet_length = 2;
 4350              		.loc 1 953 0
 4351 000a 0223     		movs	r3, #2
 4352 000c FB60     		str	r3, [r7, #12]
 954:..\src/command_processing.c ****     uint8 packet_data[2];
 955:..\src/command_processing.c **** 
 956:..\src/command_processing.c ****     packet_data[0] = value;
 4353              		.loc 1 956 0
 4354 000e FB79     		ldrb	r3, [r7, #7]
 4355 0010 3B72     		strb	r3, [r7, #8]
 957:..\src/command_processing.c ****     packet_data[1] = value;
 4356              		.loc 1 957 0
 4357 0012 FB79     		ldrb	r3, [r7, #7]
 4358 0014 7B72     		strb	r3, [r7, #9]
 958:..\src/command_processing.c **** 
 959:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 4359              		.loc 1 959 0
 4360 0016 FB68     		ldr	r3, [r7, #12]
 4361 0018 9AB2     		uxth	r2, r3
 4362 001a 07F10803 		add	r3, r7, #8
 4363 001e 1146     		mov	r1, r2
 4364 0020 1846     		mov	r0, r3
 4365 0022 FFF7FEFF 		bl	commWrite
 960:..\src/command_processing.c **** }
 4366              		.loc 1 960 0
 4367 0026 00BF     		nop
 4368 0028 1037     		adds	r7, r7, #16
 4369              		.cfi_def_cfa_offset 8
 4370 002a BD46     		mov	sp, r7
 4371              		.cfi_def_cfa_register 13
 4372              		@ sp needed
 4373 002c 80BD     		pop	{r7, pc}
 4374              		.cfi_endproc
 4375              	.LFE86:
 4376              		.size	sendAcknowledgment, .-sendAcknowledgment
 4377 002e 00BF     		.section	.text.memStore,"ax",%progbits
 4378              		.align	2
 4379              		.global	memStore
 4380              		.thumb
 4381              		.thumb_func
 4382              		.type	memStore, %function
 4383              	memStore:
 4384              	.LFB87:
 961:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 112


 962:..\src/command_processing.c **** //==============================================================================
 963:..\src/command_processing.c **** //                                                                  STORE MEMORY
 964:..\src/command_processing.c **** //==============================================================================
 965:..\src/command_processing.c **** 
 966:..\src/command_processing.c **** 
 967:..\src/command_processing.c **** uint8 memStore(int displacement)
 968:..\src/command_processing.c **** {
 4385              		.loc 1 968 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 24
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389 0000 80B5     		push	{r7, lr}
 4390              		.cfi_def_cfa_offset 8
 4391              		.cfi_offset 7, -8
 4392              		.cfi_offset 14, -4
 4393 0002 86B0     		sub	sp, sp, #24
 4394              		.cfi_def_cfa_offset 32
 4395 0004 00AF     		add	r7, sp, #0
 4396              		.cfi_def_cfa_register 7
 4397 0006 7860     		str	r0, [r7, #4]
 969:..\src/command_processing.c ****     int i;  // iterator
 970:..\src/command_processing.c ****     uint8 writeStatus;
 971:..\src/command_processing.c ****     int pages;
 972:..\src/command_processing.c ****     uint8 ret_val = 1;
 4398              		.loc 1 972 0
 4399 0008 0123     		movs	r3, #1
 4400 000a FB74     		strb	r3, [r7, #19]
 973:..\src/command_processing.c **** 
 974:..\src/command_processing.c ****     // Disable Interrupt
 975:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 4401              		.loc 1 975 0
 4402 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 976:..\src/command_processing.c **** 
 977:..\src/command_processing.c ****     // Stop motor
 978:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 979:..\src/command_processing.c **** 
 980:..\src/command_processing.c ****     // Update temperature information for better writing performance
 981:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 4403              		.loc 1 981 0
 4404 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 982:..\src/command_processing.c **** 
 983:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 4405              		.loc 1 983 0
 4406 0014 1C4A     		ldr	r2, .L229
 4407 0016 1D4B     		ldr	r3, .L229+4
 4408 0018 1046     		mov	r0, r2
 4409 001a 1946     		mov	r1, r3
 4410 001c 6023     		movs	r3, #96
 4411 001e 1A46     		mov	r2, r3
 4412 0020 FFF7FEFF 		bl	memcpy
 984:..\src/command_processing.c **** 
 985:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 4413              		.loc 1 985 0
 4414 0024 0623     		movs	r3, #6
 4415 0026 FB60     		str	r3, [r7, #12]
 986:..\src/command_processing.c **** 
 987:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 113


 4416              		.loc 1 987 0
 4417 0028 0023     		movs	r3, #0
 4418 002a 7B61     		str	r3, [r7, #20]
 4419 002c 18E0     		b	.L224
 4420              	.L227:
 988:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4421              		.loc 1 988 0
 4422 002e 7B69     		ldr	r3, [r7, #20]
 4423 0030 1B01     		lsls	r3, r3, #4
 4424 0032 1A46     		mov	r2, r3
 4425 0034 154B     		ldr	r3, .L229+4
 4426 0036 D018     		adds	r0, r2, r3
 4427 0038 7B69     		ldr	r3, [r7, #20]
 4428 003a DAB2     		uxtb	r2, r3
 4429 003c 7B68     		ldr	r3, [r7, #4]
 4430 003e DBB2     		uxtb	r3, r3
 4431 0040 1344     		add	r3, r3, r2
 4432 0042 DBB2     		uxtb	r3, r3
 4433 0044 1946     		mov	r1, r3
 4434 0046 FFF7FEFF 		bl	EEPROM_Write
 4435 004a 0346     		mov	r3, r0
 4436 004c FB72     		strb	r3, [r7, #11]
 989:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 4437              		.loc 1 989 0
 4438 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4439 0050 002B     		cmp	r3, #0
 4440 0052 02D0     		beq	.L225
 990:..\src/command_processing.c ****             ret_val = 0;
 4441              		.loc 1 990 0
 4442 0054 0023     		movs	r3, #0
 4443 0056 FB74     		strb	r3, [r7, #19]
 991:..\src/command_processing.c ****             break;
 4444              		.loc 1 991 0
 4445 0058 06E0     		b	.L226
 4446              	.L225:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4447              		.loc 1 987 0 discriminator 2
 4448 005a 7B69     		ldr	r3, [r7, #20]
 4449 005c 0133     		adds	r3, r3, #1
 4450 005e 7B61     		str	r3, [r7, #20]
 4451              	.L224:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4452              		.loc 1 987 0 is_stmt 0 discriminator 1
 4453 0060 7A69     		ldr	r2, [r7, #20]
 4454 0062 FB68     		ldr	r3, [r7, #12]
 4455 0064 9A42     		cmp	r2, r3
 4456 0066 E2DB     		blt	.L227
 4457              	.L226:
 992:..\src/command_processing.c ****         }
 993:..\src/command_processing.c ****     }
 994:..\src/command_processing.c **** 
 995:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 4458              		.loc 1 995 0 is_stmt 1
 4459 0068 084A     		ldr	r2, .L229+4
 4460 006a 074B     		ldr	r3, .L229
 4461 006c 1046     		mov	r0, r2
 4462 006e 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 114


 4463 0070 6023     		movs	r3, #96
 4464 0072 1A46     		mov	r2, r3
 4465 0074 FFF7FEFF 		bl	memcpy
 996:..\src/command_processing.c **** 
 997:..\src/command_processing.c ****     // Re-Enable Interrupt
 998:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 4466              		.loc 1 998 0
 4467 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 999:..\src/command_processing.c **** 
1000:..\src/command_processing.c ****     return ret_val;
 4468              		.loc 1 1000 0
 4469 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1001:..\src/command_processing.c **** }
 4470              		.loc 1 1001 0
 4471 007e 1846     		mov	r0, r3
 4472 0080 1837     		adds	r7, r7, #24
 4473              		.cfi_def_cfa_offset 8
 4474 0082 BD46     		mov	sp, r7
 4475              		.cfi_def_cfa_register 13
 4476              		@ sp needed
 4477 0084 80BD     		pop	{r7, pc}
 4478              	.L230:
 4479 0086 00BF     		.align	2
 4480              	.L229:
 4481 0088 00000000 		.word	c_mem
 4482 008c 00000000 		.word	g_mem
 4483              		.cfi_endproc
 4484              	.LFE87:
 4485              		.size	memStore, .-memStore
 4486              		.section	.text.memRecall,"ax",%progbits
 4487              		.align	2
 4488              		.global	memRecall
 4489              		.thumb
 4490              		.thumb_func
 4491              		.type	memRecall, %function
 4492              	memRecall:
 4493              	.LFB88:
1002:..\src/command_processing.c **** 
1003:..\src/command_processing.c **** 
1004:..\src/command_processing.c **** //==============================================================================
1005:..\src/command_processing.c **** //                                                                 RECALL MEMORY
1006:..\src/command_processing.c **** //==============================================================================
1007:..\src/command_processing.c **** 
1008:..\src/command_processing.c **** 
1009:..\src/command_processing.c **** void memRecall(void)
1010:..\src/command_processing.c **** {  
 4494              		.loc 1 1010 0
 4495              		.cfi_startproc
 4496              		@ args = 0, pretend = 0, frame = 8
 4497              		@ frame_needed = 1, uses_anonymous_args = 0
 4498 0000 80B5     		push	{r7, lr}
 4499              		.cfi_def_cfa_offset 8
 4500              		.cfi_offset 7, -8
 4501              		.cfi_offset 14, -4
 4502 0002 82B0     		sub	sp, sp, #8
 4503              		.cfi_def_cfa_offset 16
 4504 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 115


 4505              		.cfi_def_cfa_register 7
1011:..\src/command_processing.c ****     uint16 i;
1012:..\src/command_processing.c **** 
1013:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4506              		.loc 1 1013 0
 4507 0006 0023     		movs	r3, #0
 4508 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4509 000a 0CE0     		b	.L232
 4510              	.L233:
1014:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4511              		.loc 1 1014 0 discriminator 3
 4512 000c FB88     		ldrh	r3, [r7, #6]
 4513 000e 114A     		ldr	r2, .L237
 4514 0010 1344     		add	r3, r3, r2
 4515 0012 114A     		ldr	r2, .L237+4
 4516 0014 1168     		ldr	r1, [r2]
 4517 0016 FA88     		ldrh	r2, [r7, #6]
 4518 0018 0A44     		add	r2, r2, r1
 4519 001a 1278     		ldrb	r2, [r2]
 4520 001c D2B2     		uxtb	r2, r2
 4521 001e 1A70     		strb	r2, [r3]
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4522              		.loc 1 1013 0 discriminator 3
 4523 0020 FB88     		ldrh	r3, [r7, #6]
 4524 0022 0133     		adds	r3, r3, #1
 4525 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 4526              	.L232:
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4527              		.loc 1 1013 0 is_stmt 0 discriminator 1
 4528 0026 FB88     		ldrh	r3, [r7, #6]
 4529 0028 5F2B     		cmp	r3, #95
 4530 002a EFD9     		bls	.L233
1015:..\src/command_processing.c ****     }
1016:..\src/command_processing.c ****        //check for initialization
1017:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4531              		.loc 1 1017 0 is_stmt 1
 4532 002c 094B     		ldr	r3, .L237
 4533 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4534 0030 002B     		cmp	r3, #0
 4535 0032 02D1     		bne	.L234
1018:..\src/command_processing.c ****         memRestore();
 4536              		.loc 1 1018 0
 4537 0034 FFF7FEFF 		bl	memRestore
1019:..\src/command_processing.c ****     } else {
1020:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
1021:..\src/command_processing.c ****     }   
1022:..\src/command_processing.c **** }
 4538              		.loc 1 1022 0
 4539 0038 07E0     		b	.L236
 4540              	.L234:
1020:..\src/command_processing.c ****     }   
 4541              		.loc 1 1020 0
 4542 003a 084A     		ldr	r2, .L237+8
 4543 003c 054B     		ldr	r3, .L237
 4544 003e 1046     		mov	r0, r2
 4545 0040 1946     		mov	r1, r3
 4546 0042 6023     		movs	r3, #96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 116


 4547 0044 1A46     		mov	r2, r3
 4548 0046 FFF7FEFF 		bl	memcpy
 4549              	.L236:
 4550              		.loc 1 1022 0
 4551 004a 00BF     		nop
 4552 004c 0837     		adds	r7, r7, #8
 4553              		.cfi_def_cfa_offset 8
 4554 004e BD46     		mov	sp, r7
 4555              		.cfi_def_cfa_register 13
 4556              		@ sp needed
 4557 0050 80BD     		pop	{r7, pc}
 4558              	.L238:
 4559 0052 00BF     		.align	2
 4560              	.L237:
 4561 0054 00000000 		.word	g_mem
 4562 0058 00000000 		.word	EEPROM_ADDR
 4563 005c 00000000 		.word	c_mem
 4564              		.cfi_endproc
 4565              	.LFE88:
 4566              		.size	memRecall, .-memRecall
 4567              		.section	.text.memRestore,"ax",%progbits
 4568              		.align	2
 4569              		.global	memRestore
 4570              		.thumb
 4571              		.thumb_func
 4572              		.type	memRestore, %function
 4573              	memRestore:
 4574              	.LFB89:
1023:..\src/command_processing.c **** 
1024:..\src/command_processing.c **** 
1025:..\src/command_processing.c **** //==============================================================================
1026:..\src/command_processing.c **** //                                                                RESTORE MEMORY
1027:..\src/command_processing.c **** //==============================================================================
1028:..\src/command_processing.c **** 
1029:..\src/command_processing.c **** 
1030:..\src/command_processing.c **** uint8 memRestore(void) {
 4575              		.loc 1 1030 0
 4576              		.cfi_startproc
 4577              		@ args = 0, pretend = 0, frame = 8
 4578              		@ frame_needed = 1, uses_anonymous_args = 0
 4579 0000 80B5     		push	{r7, lr}
 4580              		.cfi_def_cfa_offset 8
 4581              		.cfi_offset 7, -8
 4582              		.cfi_offset 14, -4
 4583 0002 82B0     		sub	sp, sp, #8
 4584              		.cfi_def_cfa_offset 16
 4585 0004 00AF     		add	r7, sp, #0
 4586              		.cfi_def_cfa_register 7
1031:..\src/command_processing.c ****     uint16 i;
1032:..\src/command_processing.c **** 
1033:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4587              		.loc 1 1033 0
 4588 0006 0023     		movs	r3, #0
 4589 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4590 000a 0EE0     		b	.L240
 4591              	.L241:
1034:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 117


 4592              		.loc 1 1034 0 discriminator 3
 4593 000c FB88     		ldrh	r3, [r7, #6]
 4594 000e 104A     		ldr	r2, .L244
 4595 0010 1344     		add	r3, r3, r2
 4596 0012 104A     		ldr	r2, .L244+4
 4597 0014 1168     		ldr	r1, [r2]
 4598 0016 FA88     		ldrh	r2, [r7, #6]
 4599 0018 02F54872 		add	r2, r2, #800
 4600 001c 0A44     		add	r2, r2, r1
 4601 001e 1278     		ldrb	r2, [r2]
 4602 0020 D2B2     		uxtb	r2, r2
 4603 0022 1A70     		strb	r2, [r3]
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4604              		.loc 1 1033 0 discriminator 3
 4605 0024 FB88     		ldrh	r3, [r7, #6]
 4606 0026 0133     		adds	r3, r3, #1
 4607 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 4608              	.L240:
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4609              		.loc 1 1033 0 is_stmt 0 discriminator 1
 4610 002a FB88     		ldrh	r3, [r7, #6]
 4611 002c 5F2B     		cmp	r3, #95
 4612 002e EDD9     		bls	.L241
1035:..\src/command_processing.c ****     }
1036:..\src/command_processing.c **** 
1037:..\src/command_processing.c ****     //check for initialization
1038:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4613              		.loc 1 1038 0 is_stmt 1
 4614 0030 074B     		ldr	r3, .L244
 4615 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4616 0034 002B     		cmp	r3, #0
 4617 0036 03D1     		bne	.L242
1039:..\src/command_processing.c ****         return memInit();
 4618              		.loc 1 1039 0
 4619 0038 FFF7FEFF 		bl	memInit
 4620 003c 0346     		mov	r3, r0
 4621 003e 03E0     		b	.L243
 4622              	.L242:
1040:..\src/command_processing.c ****     } else {
1041:..\src/command_processing.c ****         return memStore(0);
 4623              		.loc 1 1041 0
 4624 0040 0020     		movs	r0, #0
 4625 0042 FFF7FEFF 		bl	memStore
 4626 0046 0346     		mov	r3, r0
 4627              	.L243:
1042:..\src/command_processing.c ****     }  
1043:..\src/command_processing.c **** }
 4628              		.loc 1 1043 0
 4629 0048 1846     		mov	r0, r3
 4630 004a 0837     		adds	r7, r7, #8
 4631              		.cfi_def_cfa_offset 8
 4632 004c BD46     		mov	sp, r7
 4633              		.cfi_def_cfa_register 13
 4634              		@ sp needed
 4635 004e 80BD     		pop	{r7, pc}
 4636              	.L245:
 4637              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 118


 4638              	.L244:
 4639 0050 00000000 		.word	g_mem
 4640 0054 00000000 		.word	EEPROM_ADDR
 4641              		.cfi_endproc
 4642              	.LFE89:
 4643              		.size	memRestore, .-memRestore
 4644              		.section	.text.memInit,"ax",%progbits
 4645              		.align	2
 4646              		.global	memInit
 4647              		.thumb
 4648              		.thumb_func
 4649              		.type	memInit, %function
 4650              	memInit:
 4651              	.LFB90:
1044:..\src/command_processing.c **** 
1045:..\src/command_processing.c **** //==============================================================================
1046:..\src/command_processing.c **** //                                                                   MEMORY INIT
1047:..\src/command_processing.c **** //==============================================================================
1048:..\src/command_processing.c **** 
1049:..\src/command_processing.c **** uint8 memInit(void)
1050:..\src/command_processing.c **** {
 4652              		.loc 1 1050 0
 4653              		.cfi_startproc
 4654              		@ args = 0, pretend = 0, frame = 0
 4655              		@ frame_needed = 1, uses_anonymous_args = 0
 4656 0000 80B5     		push	{r7, lr}
 4657              		.cfi_def_cfa_offset 8
 4658              		.cfi_offset 7, -8
 4659              		.cfi_offset 14, -4
 4660 0002 00AF     		add	r7, sp, #0
 4661              		.cfi_def_cfa_register 7
1051:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1052:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4662              		.loc 1 1052 0
 4663 0004 2F4B     		ldr	r3, .L250
 4664 0006 0122     		movs	r2, #1
 4665 0008 1A70     		strb	r2, [r3]
1053:..\src/command_processing.c ****     
1054:..\src/command_processing.c ****     // DEV STRUCT
1055:..\src/command_processing.c ****     g_mem.dev.id = 2;
 4666              		.loc 1 1055 0
 4667 000a 2E4B     		ldr	r3, .L250
 4668 000c 0222     		movs	r2, #2
 4669 000e 1A74     		strb	r2, [r3, #16]
1056:..\src/command_processing.c ****     
1057:..\src/command_processing.c ****     // SH STRUCT
1058:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 4670              		.loc 1 1058 0
 4671 0010 2C4B     		ldr	r3, .L250
 4672 0012 0022     		movs	r2, #0
 4673 0014 1A62     		str	r2, [r3, #32]
1059:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 4674              		.loc 1 1059 0
 4675 0016 2B4B     		ldr	r3, .L250
 4676 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 4677 001c 1A46     		mov	r2, r3
 4678 001e 4FF47A53 		mov	r3, #16000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 119


 4679 0022 9340     		lsls	r3, r3, r2
 4680 0024 274A     		ldr	r2, .L250
 4681 0026 5362     		str	r3, [r2, #36]
1060:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 4682              		.loc 1 1060 0
 4683 0028 264B     		ldr	r3, .L250
 4684 002a 0422     		movs	r2, #4
 4685 002c 83F82820 		strb	r2, [r3, #40]
1061:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 4686              		.loc 1 1061 0
 4687 0030 244B     		ldr	r3, .L250
 4688 0032 0322     		movs	r2, #3
 4689 0034 83F82920 		strb	r2, [r3, #41]
1062:..\src/command_processing.c **** 
1063:..\src/command_processing.c ****     // EMG STRUCT     
1064:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4690              		.loc 1 1064 0
 4691 0038 224B     		ldr	r3, .L250
 4692 003a C822     		movs	r2, #200
 4693 003c 1A86     		strh	r2, [r3, #48]	@ movhi
1065:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4694              		.loc 1 1065 0
 4695 003e 214B     		ldr	r3, .L250
 4696 0040 C822     		movs	r2, #200
 4697 0042 5A86     		strh	r2, [r3, #50]	@ movhi
1066:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4698              		.loc 1 1066 0
 4699 0044 1F4B     		ldr	r3, .L250
 4700 0046 4FF48062 		mov	r2, #1024
 4701 004a 5A63     		str	r2, [r3, #52]
1067:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4702              		.loc 1 1067 0
 4703 004c 1D4B     		ldr	r3, .L250
 4704 004e 4FF48062 		mov	r2, #1024
 4705 0052 9A63     		str	r2, [r3, #56]
1068:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4706              		.loc 1 1068 0
 4707 0054 1B4B     		ldr	r3, .L250
 4708 0056 6422     		movs	r2, #100
 4709 0058 83F83C20 		strb	r2, [r3, #60]
1069:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4710              		.loc 1 1069 0
 4711 005c 194B     		ldr	r3, .L250
 4712 005e 6422     		movs	r2, #100
 4713 0060 83F83D20 		strb	r2, [r3, #61]
1070:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4714              		.loc 1 1070 0
 4715 0064 174B     		ldr	r3, .L250
 4716 0066 0022     		movs	r2, #0
 4717 0068 83F83E20 		strb	r2, [r3, #62]
1071:..\src/command_processing.c ****     
1072:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
1073:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4718              		.loc 1 1073 0
 4719 006c 154B     		ldr	r3, .L250
 4720 006e 0022     		movs	r2, #0
 4721 0070 83F84020 		strb	r2, [r3, #64]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 120


1074:..\src/command_processing.c ****     
1075:..\src/command_processing.c ****     
1076:..\src/command_processing.c ****     //FEEDBACK STRUCT
1077:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4722              		.loc 1 1077 0
 4723 0074 134B     		ldr	r3, .L250
 4724 0076 4FF4E172 		mov	r2, #450
 4725 007a 1A65     		str	r2, [r3, #80]
1078:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4726              		.loc 1 1078 0
 4727 007c 114B     		ldr	r3, .L250
 4728 007e 124A     		ldr	r2, .L250+4
 4729 0080 5A65     		str	r2, [r3, #84]	@ float
1079:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 4730              		.loc 1 1079 0
 4731 0082 104B     		ldr	r3, .L250
 4732 0084 4FF07E52 		mov	r2, #1065353216
 4733 0088 9A65     		str	r2, [r3, #88]	@ float
1080:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 4734              		.loc 1 1080 0
 4735 008a 0E4B     		ldr	r3, .L250
 4736 008c 0022     		movs	r2, #0
 4737 008e 83F85C20 		strb	r2, [r3, #92]
1081:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 4738              		.loc 1 1081 0
 4739 0092 0C4B     		ldr	r3, .L250
 4740 0094 0022     		movs	r2, #0
 4741 0096 83F85D20 		strb	r2, [r3, #93]
1082:..\src/command_processing.c ****     
1083:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1084:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4742              		.loc 1 1084 0
 4743 009a 0A4B     		ldr	r3, .L250
 4744 009c 0122     		movs	r2, #1
 4745 009e 1A70     		strb	r2, [r3]
1085:..\src/command_processing.c ****     
1086:..\src/command_processing.c ****     //write that configuration to EEPROM
1087:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 4746              		.loc 1 1087 0
 4747 00a0 0020     		movs	r0, #0
 4748 00a2 FFF7FEFF 		bl	memStore
 4749 00a6 0346     		mov	r3, r0
 4750 00a8 002B     		cmp	r3, #0
 4751 00aa 07D0     		beq	.L247
 4752              		.loc 1 1087 0 is_stmt 0 discriminator 1
 4753 00ac 3220     		movs	r0, #50
 4754 00ae FFF7FEFF 		bl	memStore
 4755 00b2 0346     		mov	r3, r0
 4756 00b4 002B     		cmp	r3, #0
 4757 00b6 01D0     		beq	.L247
 4758              		.loc 1 1087 0 discriminator 3
 4759 00b8 0123     		movs	r3, #1
 4760 00ba 00E0     		b	.L248
 4761              	.L247:
 4762              		.loc 1 1087 0 discriminator 4
 4763 00bc 0023     		movs	r3, #0
 4764              	.L248:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 121


 4765              		.loc 1 1087 0 discriminator 6
 4766 00be DBB2     		uxtb	r3, r3
 4767 00c0 1846     		mov	r0, r3
 4768 00c2 80BD     		pop	{r7, pc}
 4769              	.L251:
 4770              		.align	2
 4771              	.L250:
 4772 00c4 00000000 		.word	g_mem
 4773 00c8 0000C841 		.word	1103626240
 4774              		.cfi_endproc
 4775              	.LFE90:
 4776              		.size	memInit, .-memInit
 4777              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 4778              		.align	2
 4779              		.global	memInit_SoftHandPro
 4780              		.thumb
 4781              		.thumb_func
 4782              		.type	memInit_SoftHandPro, %function
 4783              	memInit_SoftHandPro:
 4784              	.LFB91:
1088:..\src/command_processing.c **** 
1089:..\src/command_processing.c **** //==============================================================================
1090:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
1091:..\src/command_processing.c **** //==============================================================================
1092:..\src/command_processing.c **** void memInit_SoftHandPro(void)
1093:..\src/command_processing.c **** {
 4785              		.loc 1 1093 0 is_stmt 1
 4786              		.cfi_startproc
 4787              		@ args = 0, pretend = 0, frame = 0
 4788              		@ frame_needed = 1, uses_anonymous_args = 0
 4789              		@ link register save eliminated.
 4790 0000 80B4     		push	{r7}
 4791              		.cfi_def_cfa_offset 4
 4792              		.cfi_offset 7, -4
 4793 0002 00AF     		add	r7, sp, #0
 4794              		.cfi_def_cfa_register 7
1094:..\src/command_processing.c **** }
 4795              		.loc 1 1094 0
 4796 0004 00BF     		nop
 4797 0006 BD46     		mov	sp, r7
 4798              		.cfi_def_cfa_register 13
 4799              		@ sp needed
 4800 0008 80BC     		pop	{r7}
 4801              		.cfi_restore 7
 4802              		.cfi_def_cfa_offset 0
 4803 000a 7047     		bx	lr
 4804              		.cfi_endproc
 4805              	.LFE91:
 4806              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 4807              		.section	.text.memInit_Master,"ax",%progbits
 4808              		.align	2
 4809              		.global	memInit_Master
 4810              		.thumb
 4811              		.thumb_func
 4812              		.type	memInit_Master, %function
 4813              	memInit_Master:
 4814              	.LFB92:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 122


1095:..\src/command_processing.c **** 
1096:..\src/command_processing.c **** //==============================================================================
1097:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
1098:..\src/command_processing.c **** //==============================================================================
1099:..\src/command_processing.c **** void memInit_Master(void)
1100:..\src/command_processing.c **** {
 4815              		.loc 1 1100 0
 4816              		.cfi_startproc
 4817              		@ args = 0, pretend = 0, frame = 0
 4818              		@ frame_needed = 1, uses_anonymous_args = 0
 4819              		@ link register save eliminated.
 4820 0000 80B4     		push	{r7}
 4821              		.cfi_def_cfa_offset 4
 4822              		.cfi_offset 7, -4
 4823 0002 00AF     		add	r7, sp, #0
 4824              		.cfi_def_cfa_register 7
1101:..\src/command_processing.c **** }
 4825              		.loc 1 1101 0
 4826 0004 00BF     		nop
 4827 0006 BD46     		mov	sp, r7
 4828              		.cfi_def_cfa_register 13
 4829              		@ sp needed
 4830 0008 80BC     		pop	{r7}
 4831              		.cfi_restore 7
 4832              		.cfi_def_cfa_offset 0
 4833 000a 7047     		bx	lr
 4834              		.cfi_endproc
 4835              	.LFE92:
 4836              		.size	memInit_Master, .-memInit_Master
 4837              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 4838              		.align	2
 4839              		.global	memInit_AirChambers_Vibrotactile_Fb
 4840              		.thumb
 4841              		.thumb_func
 4842              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 4843              	memInit_AirChambers_Vibrotactile_Fb:
 4844              	.LFB93:
1102:..\src/command_processing.c **** 
1103:..\src/command_processing.c **** //==============================================================================
1104:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
1105:..\src/command_processing.c **** //==============================================================================
1106:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
1107:..\src/command_processing.c **** {
 4845              		.loc 1 1107 0
 4846              		.cfi_startproc
 4847              		@ args = 0, pretend = 0, frame = 0
 4848              		@ frame_needed = 1, uses_anonymous_args = 0
 4849              		@ link register save eliminated.
 4850 0000 80B4     		push	{r7}
 4851              		.cfi_def_cfa_offset 4
 4852              		.cfi_offset 7, -4
 4853 0002 00AF     		add	r7, sp, #0
 4854              		.cfi_def_cfa_register 7
1108:..\src/command_processing.c **** }
 4855              		.loc 1 1108 0
 4856 0004 00BF     		nop
 4857 0006 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 123


 4858              		.cfi_def_cfa_register 13
 4859              		@ sp needed
 4860 0008 80BC     		pop	{r7}
 4861              		.cfi_restore 7
 4862              		.cfi_def_cfa_offset 0
 4863 000a 7047     		bx	lr
 4864              		.cfi_endproc
 4865              	.LFE93:
 4866              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 4867              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 4868              		.align	2
 4869              		.global	memInit_OtbkActWristMs
 4870              		.thumb
 4871              		.thumb_func
 4872              		.type	memInit_OtbkActWristMs, %function
 4873              	memInit_OtbkActWristMs:
 4874              	.LFB94:
1109:..\src/command_processing.c **** 
1110:..\src/command_processing.c **** //==============================================================================
1111:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
1112:..\src/command_processing.c **** //==============================================================================
1113:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
1114:..\src/command_processing.c **** {
 4875              		.loc 1 1114 0
 4876              		.cfi_startproc
 4877              		@ args = 0, pretend = 0, frame = 0
 4878              		@ frame_needed = 1, uses_anonymous_args = 0
 4879              		@ link register save eliminated.
 4880 0000 80B4     		push	{r7}
 4881              		.cfi_def_cfa_offset 4
 4882              		.cfi_offset 7, -4
 4883 0002 00AF     		add	r7, sp, #0
 4884              		.cfi_def_cfa_register 7
1115:..\src/command_processing.c **** }
 4885              		.loc 1 1115 0
 4886 0004 00BF     		nop
 4887 0006 BD46     		mov	sp, r7
 4888              		.cfi_def_cfa_register 13
 4889              		@ sp needed
 4890 0008 80BC     		pop	{r7}
 4891              		.cfi_restore 7
 4892              		.cfi_def_cfa_offset 0
 4893 000a 7047     		bx	lr
 4894              		.cfi_endproc
 4895              	.LFE94:
 4896              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 4897              		.section	.text.cmd_get_measurements,"ax",%progbits
 4898              		.align	2
 4899              		.global	cmd_get_measurements
 4900              		.thumb
 4901              		.thumb_func
 4902              		.type	cmd_get_measurements, %function
 4903              	cmd_get_measurements:
 4904              	.LFB95:
1116:..\src/command_processing.c **** 
1117:..\src/command_processing.c **** //==============================================================================
1118:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 124


1119:..\src/command_processing.c **** //==============================================================================
1120:..\src/command_processing.c **** /**
1121:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1122:..\src/command_processing.c **** **/
1123:..\src/command_processing.c **** 
1124:..\src/command_processing.c **** void cmd_get_measurements(){
 4905              		.loc 1 1124 0
 4906              		.cfi_startproc
 4907              		@ args = 0, pretend = 0, frame = 0
 4908              		@ frame_needed = 1, uses_anonymous_args = 0
 4909              		@ link register save eliminated.
 4910 0000 80B4     		push	{r7}
 4911              		.cfi_def_cfa_offset 4
 4912              		.cfi_offset 7, -4
 4913 0002 00AF     		add	r7, sp, #0
 4914              		.cfi_def_cfa_register 7
1125:..\src/command_processing.c ****  
1126:..\src/command_processing.c ****    
1127:..\src/command_processing.c **** }
 4915              		.loc 1 1127 0
 4916 0004 00BF     		nop
 4917 0006 BD46     		mov	sp, r7
 4918              		.cfi_def_cfa_register 13
 4919              		@ sp needed
 4920 0008 80BC     		pop	{r7}
 4921              		.cfi_restore 7
 4922              		.cfi_def_cfa_offset 0
 4923 000a 7047     		bx	lr
 4924              		.cfi_endproc
 4925              	.LFE95:
 4926              		.size	cmd_get_measurements, .-cmd_get_measurements
 4927              		.section	.text.cmd_get_velocities,"ax",%progbits
 4928              		.align	2
 4929              		.global	cmd_get_velocities
 4930              		.thumb
 4931              		.thumb_func
 4932              		.type	cmd_get_velocities, %function
 4933              	cmd_get_velocities:
 4934              	.LFB96:
1128:..\src/command_processing.c **** 
1129:..\src/command_processing.c **** void cmd_get_velocities(){
 4935              		.loc 1 1129 0
 4936              		.cfi_startproc
 4937              		@ args = 0, pretend = 0, frame = 0
 4938              		@ frame_needed = 1, uses_anonymous_args = 0
 4939              		@ link register save eliminated.
 4940 0000 80B4     		push	{r7}
 4941              		.cfi_def_cfa_offset 4
 4942              		.cfi_offset 7, -4
 4943 0002 00AF     		add	r7, sp, #0
 4944              		.cfi_def_cfa_register 7
1130:..\src/command_processing.c ****  
1131:..\src/command_processing.c **** }
 4945              		.loc 1 1131 0
 4946 0004 00BF     		nop
 4947 0006 BD46     		mov	sp, r7
 4948              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 125


 4949              		@ sp needed
 4950 0008 80BC     		pop	{r7}
 4951              		.cfi_restore 7
 4952              		.cfi_def_cfa_offset 0
 4953 000a 7047     		bx	lr
 4954              		.cfi_endproc
 4955              	.LFE96:
 4956              		.size	cmd_get_velocities, .-cmd_get_velocities
 4957              		.section	.text.cmd_get_accelerations,"ax",%progbits
 4958              		.align	2
 4959              		.global	cmd_get_accelerations
 4960              		.thumb
 4961              		.thumb_func
 4962              		.type	cmd_get_accelerations, %function
 4963              	cmd_get_accelerations:
 4964              	.LFB97:
1132:..\src/command_processing.c **** 
1133:..\src/command_processing.c **** void cmd_get_accelerations(){
 4965              		.loc 1 1133 0
 4966              		.cfi_startproc
 4967              		@ args = 0, pretend = 0, frame = 0
 4968              		@ frame_needed = 1, uses_anonymous_args = 0
 4969              		@ link register save eliminated.
 4970 0000 80B4     		push	{r7}
 4971              		.cfi_def_cfa_offset 4
 4972              		.cfi_offset 7, -4
 4973 0002 00AF     		add	r7, sp, #0
 4974              		.cfi_def_cfa_register 7
1134:..\src/command_processing.c ****  
1135:..\src/command_processing.c **** }
 4975              		.loc 1 1135 0
 4976 0004 00BF     		nop
 4977 0006 BD46     		mov	sp, r7
 4978              		.cfi_def_cfa_register 13
 4979              		@ sp needed
 4980 0008 80BC     		pop	{r7}
 4981              		.cfi_restore 7
 4982              		.cfi_def_cfa_offset 0
 4983 000a 7047     		bx	lr
 4984              		.cfi_endproc
 4985              	.LFE97:
 4986              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 4987              		.section	.text.cmd_get_joystick,"ax",%progbits
 4988              		.align	2
 4989              		.global	cmd_get_joystick
 4990              		.thumb
 4991              		.thumb_func
 4992              		.type	cmd_get_joystick, %function
 4993              	cmd_get_joystick:
 4994              	.LFB98:
1136:..\src/command_processing.c **** 
1137:..\src/command_processing.c **** void cmd_get_joystick() {
 4995              		.loc 1 1137 0
 4996              		.cfi_startproc
 4997              		@ args = 0, pretend = 0, frame = 0
 4998              		@ frame_needed = 1, uses_anonymous_args = 0
 4999              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 126


 5000 0000 80B4     		push	{r7}
 5001              		.cfi_def_cfa_offset 4
 5002              		.cfi_offset 7, -4
 5003 0002 00AF     		add	r7, sp, #0
 5004              		.cfi_def_cfa_register 7
1138:..\src/command_processing.c ****  
1139:..\src/command_processing.c **** }
 5005              		.loc 1 1139 0
 5006 0004 00BF     		nop
 5007 0006 BD46     		mov	sp, r7
 5008              		.cfi_def_cfa_register 13
 5009              		@ sp needed
 5010 0008 80BC     		pop	{r7}
 5011              		.cfi_restore 7
 5012              		.cfi_def_cfa_offset 0
 5013 000a 7047     		bx	lr
 5014              		.cfi_endproc
 5015              	.LFE98:
 5016              		.size	cmd_get_joystick, .-cmd_get_joystick
 5017              		.section	.text.cmd_set_inputs,"ax",%progbits
 5018              		.align	2
 5019              		.global	cmd_set_inputs
 5020              		.thumb
 5021              		.thumb_func
 5022              		.type	cmd_set_inputs, %function
 5023              	cmd_set_inputs:
 5024              	.LFB99:
1140:..\src/command_processing.c **** 
1141:..\src/command_processing.c **** void cmd_set_inputs(){
 5025              		.loc 1 1141 0
 5026              		.cfi_startproc
 5027              		@ args = 0, pretend = 0, frame = 8
 5028              		@ frame_needed = 1, uses_anonymous_args = 0
 5029              		@ link register save eliminated.
 5030 0000 80B4     		push	{r7}
 5031              		.cfi_def_cfa_offset 4
 5032              		.cfi_offset 7, -4
 5033 0002 83B0     		sub	sp, sp, #12
 5034              		.cfi_def_cfa_offset 16
 5035 0004 00AF     		add	r7, sp, #0
 5036              		.cfi_def_cfa_register 7
1142:..\src/command_processing.c ****      // Store position setted in right variables
1143:..\src/command_processing.c ****     int16 aux_int16[3];
1144:..\src/command_processing.c ****     static int16 last_aux_int16[3];
1145:..\src/command_processing.c ****     
1146:..\src/command_processing.c ****     aux_int16[0] = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 5037              		.loc 1 1146 0
 5038 0006 294B     		ldr	r3, .L267
 5039 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5040 000a 1B02     		lsls	r3, r3, #8
 5041 000c 1AB2     		sxth	r2, r3
 5042 000e 274B     		ldr	r3, .L267
 5043 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5044 0012 1BB2     		sxth	r3, r3
 5045 0014 1343     		orrs	r3, r3, r2
 5046 0016 1BB2     		sxth	r3, r3
 5047 0018 3B80     		strh	r3, [r7]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 127


1147:..\src/command_processing.c ****     aux_int16[1] = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 5048              		.loc 1 1147 0
 5049 001a 244B     		ldr	r3, .L267
 5050 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5051 001e 1B02     		lsls	r3, r3, #8
 5052 0020 1AB2     		sxth	r2, r3
 5053 0022 224B     		ldr	r3, .L267
 5054 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5055 0026 1BB2     		sxth	r3, r3
 5056 0028 1343     		orrs	r3, r3, r2
 5057 002a 1BB2     		sxth	r3, r3
 5058 002c 7B80     		strh	r3, [r7, #2]	@ movhi
1148:..\src/command_processing.c ****     aux_int16[2] = (int16)(g_rx.buffer[5]<<8 | g_rx.buffer[6]);
 5059              		.loc 1 1148 0
 5060 002e 1F4B     		ldr	r3, .L267
 5061 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 5062 0032 1B02     		lsls	r3, r3, #8
 5063 0034 1AB2     		sxth	r2, r3
 5064 0036 1D4B     		ldr	r3, .L267
 5065 0038 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5066 003a 1BB2     		sxth	r3, r3
 5067 003c 1343     		orrs	r3, r3, r2
 5068 003e 1BB2     		sxth	r3, r3
 5069 0040 BB80     		strh	r3, [r7, #4]	@ movhi
 5070              	.LBB28:
1149:..\src/command_processing.c ****     // Check if last command received was the same as this 
1150:..\src/command_processing.c ****     //(Note: last command not last motor reference in g_ref)
1151:..\src/command_processing.c ****     for (uint8 i = 0; i < 3; i++) {
 5071              		.loc 1 1151 0
 5072 0042 0023     		movs	r3, #0
 5073 0044 FB71     		strb	r3, [r7, #7]
 5074 0046 06E0     		b	.L261
 5075              	.L262:
1152:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
1153:..\src/command_processing.c ****             change_ext_ref_flag[i] = TRUE;
 5076              		.loc 1 1153 0 discriminator 3
 5077 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5078 004a 194A     		ldr	r2, .L267+4
 5079 004c 0121     		movs	r1, #1
 5080 004e D154     		strb	r1, [r2, r3]
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5081              		.loc 1 1151 0 discriminator 3
 5082 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5083 0052 0133     		adds	r3, r3, #1
 5084 0054 FB71     		strb	r3, [r7, #7]
 5085              	.L261:
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5086              		.loc 1 1151 0 is_stmt 0 discriminator 1
 5087 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5088 0058 022B     		cmp	r3, #2
 5089 005a F5D9     		bls	.L262
 5090              	.LBE28:
1154:..\src/command_processing.c ****        }
1155:..\src/command_processing.c ****         // Update last command
1156:..\src/command_processing.c ****       // last_aux_int16[i] = aux_int16[i];
1157:..\src/command_processing.c ****     
1158:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 128


1159:..\src/command_processing.c ****     // Update g_refNew in case a new command has been received
1160:..\src/command_processing.c ****     if (change_ext_ref_flag[0]) {
 5091              		.loc 1 1160 0 is_stmt 1
 5092 005c 144B     		ldr	r3, .L267+4
 5093 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5094 0060 002B     		cmp	r3, #0
 5095 0062 0BD0     		beq	.L263
1161:..\src/command_processing.c ****         Pump_refNew = aux_int16[0];
 5096              		.loc 1 1161 0
 5097 0064 B7F90030 		ldrsh	r3, [r7]
 5098 0068 DAB2     		uxtb	r2, r3
 5099 006a 124B     		ldr	r3, .L267+8
 5100 006c 1A70     		strb	r2, [r3]
1162:..\src/command_processing.c ****                 
1163:..\src/command_processing.c ****         // Check if the reference is nor higher or lower than the position limits
1164:..\src/command_processing.c ****         if (Pump_refNew < 0)
1165:..\src/command_processing.c ****             Pump_refNew = 0;
1166:..\src/command_processing.c ****                 
1167:..\src/command_processing.c ****         if (Pump_refNew > 100)
 5101              		.loc 1 1167 0
 5102 006e 114B     		ldr	r3, .L267+8
 5103 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5104 0072 642B     		cmp	r3, #100
 5105 0074 02D9     		bls	.L263
1168:..\src/command_processing.c ****             Pump_refNew = 100;       
 5106              		.loc 1 1168 0
 5107 0076 0F4B     		ldr	r3, .L267+8
 5108 0078 6422     		movs	r2, #100
 5109 007a 1A70     		strb	r2, [r3]
 5110              	.L263:
1169:..\src/command_processing.c ****     }
1170:..\src/command_processing.c ****     
1171:..\src/command_processing.c ****     if (change_ext_ref_flag[1]) 
 5111              		.loc 1 1171 0
 5112 007c 0C4B     		ldr	r3, .L267+4
 5113 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5114 0080 002B     		cmp	r3, #0
 5115 0082 04D0     		beq	.L264
1172:..\src/command_processing.c ****         VT_refNew[0] = aux_int16[1];
 5116              		.loc 1 1172 0
 5117 0084 B7F90230 		ldrsh	r3, [r7, #2]
 5118 0088 DAB2     		uxtb	r2, r3
 5119 008a 0B4B     		ldr	r3, .L267+12
 5120 008c 1A70     		strb	r2, [r3]
 5121              	.L264:
1173:..\src/command_processing.c ****     
1174:..\src/command_processing.c ****     if (change_ext_ref_flag[2]) 
 5122              		.loc 1 1174 0
 5123 008e 084B     		ldr	r3, .L267+4
 5124 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5125 0092 002B     		cmp	r3, #0
 5126 0094 04D0     		beq	.L266
1175:..\src/command_processing.c ****         VT_refNew[1] = aux_int16[2];
 5127              		.loc 1 1175 0
 5128 0096 B7F90430 		ldrsh	r3, [r7, #4]
 5129 009a DAB2     		uxtb	r2, r3
 5130 009c 064B     		ldr	r3, .L267+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 129


 5131 009e 5A70     		strb	r2, [r3, #1]
 5132              	.L266:
1176:..\src/command_processing.c ****                 
1177:..\src/command_processing.c ****    }
 5133              		.loc 1 1177 0
 5134 00a0 00BF     		nop
 5135 00a2 0C37     		adds	r7, r7, #12
 5136              		.cfi_def_cfa_offset 4
 5137 00a4 BD46     		mov	sp, r7
 5138              		.cfi_def_cfa_register 13
 5139              		@ sp needed
 5140 00a6 80BC     		pop	{r7}
 5141              		.cfi_restore 7
 5142              		.cfi_def_cfa_offset 0
 5143 00a8 7047     		bx	lr
 5144              	.L268:
 5145 00aa 00BF     		.align	2
 5146              	.L267:
 5147 00ac 00000000 		.word	g_rx
 5148 00b0 00000000 		.word	change_ext_ref_flag
 5149 00b4 00000000 		.word	Pump_refNew
 5150 00b8 00000000 		.word	VT_refNew
 5151              		.cfi_endproc
 5152              	.LFE99:
 5153              		.size	cmd_set_inputs, .-cmd_set_inputs
 5154              		.section	.text.cmd_activate,"ax",%progbits
 5155              		.align	2
 5156              		.global	cmd_activate
 5157              		.thumb
 5158              		.thumb_func
 5159              		.type	cmd_activate, %function
 5160              	cmd_activate:
 5161              	.LFB100:
1178:..\src/command_processing.c **** 
1179:..\src/command_processing.c **** void cmd_activate(){
 5162              		.loc 1 1179 0
 5163              		.cfi_startproc
 5164              		@ args = 0, pretend = 0, frame = 8
 5165              		@ frame_needed = 1, uses_anonymous_args = 0
 5166 0000 80B5     		push	{r7, lr}
 5167              		.cfi_def_cfa_offset 8
 5168              		.cfi_offset 7, -8
 5169              		.cfi_offset 14, -4
 5170 0002 82B0     		sub	sp, sp, #8
 5171              		.cfi_def_cfa_offset 16
 5172 0004 00AF     		add	r7, sp, #0
 5173              		.cfi_def_cfa_register 7
1180:..\src/command_processing.c ****  uint8 aux = g_rx.buffer[1];
 5174              		.loc 1 1180 0
 5175 0006 084B     		ldr	r3, .L270
 5176 0008 5B78     		ldrb	r3, [r3, #1]
 5177 000a FB71     		strb	r3, [r7, #7]
1181:..\src/command_processing.c ****  VALVE_Write((aux >> 1) & 0x01);
 5178              		.loc 1 1181 0
 5179 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5180 000e 5B08     		lsrs	r3, r3, #1
 5181 0010 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 130


 5182 0012 03F00103 		and	r3, r3, #1
 5183 0016 DBB2     		uxtb	r3, r3
 5184 0018 1846     		mov	r0, r3
 5185 001a FFF7FEFF 		bl	VALVE_Write
1182:..\src/command_processing.c ****  
1183:..\src/command_processing.c **** }
 5186              		.loc 1 1183 0
 5187 001e 00BF     		nop
 5188 0020 0837     		adds	r7, r7, #8
 5189              		.cfi_def_cfa_offset 8
 5190 0022 BD46     		mov	sp, r7
 5191              		.cfi_def_cfa_register 13
 5192              		@ sp needed
 5193 0024 80BD     		pop	{r7, pc}
 5194              	.L271:
 5195 0026 00BF     		.align	2
 5196              	.L270:
 5197 0028 00000000 		.word	g_rx
 5198              		.cfi_endproc
 5199              	.LFE100:
 5200              		.size	cmd_activate, .-cmd_activate
 5201              		.section	.text.cmd_get_activate,"ax",%progbits
 5202              		.align	2
 5203              		.global	cmd_get_activate
 5204              		.thumb
 5205              		.thumb_func
 5206              		.type	cmd_get_activate, %function
 5207              	cmd_get_activate:
 5208              	.LFB101:
1184:..\src/command_processing.c **** 
1185:..\src/command_processing.c **** void cmd_get_activate(){
 5209              		.loc 1 1185 0
 5210              		.cfi_startproc
 5211              		@ args = 0, pretend = 0, frame = 0
 5212              		@ frame_needed = 1, uses_anonymous_args = 0
 5213              		@ link register save eliminated.
 5214 0000 80B4     		push	{r7}
 5215              		.cfi_def_cfa_offset 4
 5216              		.cfi_offset 7, -4
 5217 0002 00AF     		add	r7, sp, #0
 5218              		.cfi_def_cfa_register 7
1186:..\src/command_processing.c ****     
1187:..\src/command_processing.c **** }
 5219              		.loc 1 1187 0
 5220 0004 00BF     		nop
 5221 0006 BD46     		mov	sp, r7
 5222              		.cfi_def_cfa_register 13
 5223              		@ sp needed
 5224 0008 80BC     		pop	{r7}
 5225              		.cfi_restore 7
 5226              		.cfi_def_cfa_offset 0
 5227 000a 7047     		bx	lr
 5228              		.cfi_endproc
 5229              	.LFE101:
 5230              		.size	cmd_get_activate, .-cmd_get_activate
 5231              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 5232              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 131


 5233              		.global	cmd_get_curr_and_meas
 5234              		.thumb
 5235              		.thumb_func
 5236              		.type	cmd_get_curr_and_meas, %function
 5237              	cmd_get_curr_and_meas:
 5238              	.LFB102:
1188:..\src/command_processing.c **** 
1189:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 5239              		.loc 1 1189 0
 5240              		.cfi_startproc
 5241              		@ args = 0, pretend = 0, frame = 0
 5242              		@ frame_needed = 1, uses_anonymous_args = 0
 5243              		@ link register save eliminated.
 5244 0000 80B4     		push	{r7}
 5245              		.cfi_def_cfa_offset 4
 5246              		.cfi_offset 7, -4
 5247 0002 00AF     		add	r7, sp, #0
 5248              		.cfi_def_cfa_register 7
1190:..\src/command_processing.c ****    
1191:..\src/command_processing.c ****    
1192:..\src/command_processing.c **** }
 5249              		.loc 1 1192 0
 5250 0004 00BF     		nop
 5251 0006 BD46     		mov	sp, r7
 5252              		.cfi_def_cfa_register 13
 5253              		@ sp needed
 5254 0008 80BC     		pop	{r7}
 5255              		.cfi_restore 7
 5256              		.cfi_def_cfa_offset 0
 5257 000a 7047     		bx	lr
 5258              		.cfi_endproc
 5259              	.LFE102:
 5260              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 5261              		.section	.text.cmd_get_currents,"ax",%progbits
 5262              		.align	2
 5263              		.global	cmd_get_currents
 5264              		.thumb
 5265              		.thumb_func
 5266              		.type	cmd_get_currents, %function
 5267              	cmd_get_currents:
 5268              	.LFB103:
1193:..\src/command_processing.c **** 
1194:..\src/command_processing.c **** void cmd_get_currents(){
 5269              		.loc 1 1194 0
 5270              		.cfi_startproc
 5271              		@ args = 0, pretend = 0, frame = 16
 5272              		@ frame_needed = 1, uses_anonymous_args = 0
 5273 0000 80B5     		push	{r7, lr}
 5274              		.cfi_def_cfa_offset 8
 5275              		.cfi_offset 7, -8
 5276              		.cfi_offset 14, -4
 5277 0002 84B0     		sub	sp, sp, #16
 5278              		.cfi_def_cfa_offset 24
 5279 0004 00AF     		add	r7, sp, #0
 5280              		.cfi_def_cfa_register 7
1195:..\src/command_processing.c ****    
1196:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 132


1197:..\src/command_processing.c ****     
1198:..\src/command_processing.c ****     uint8 packet_data[6]; 
1199:..\src/command_processing.c ****     int16 aux_int16;
1200:..\src/command_processing.c ****     
1201:..\src/command_processing.c ****     //Header package
1202:..\src/command_processing.c **** 
1203:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
 5281              		.loc 1 1203 0
 5282 0006 8523     		movs	r3, #133
 5283 0008 3B72     		strb	r3, [r7, #8]
1204:..\src/command_processing.c **** 
1205:..\src/command_processing.c ****      // Send pressure times 100 here instead of current (Simulink use)
1206:..\src/command_processing.c ****     aux_int16 = (int16)(pressure_value * 1000); //Pressure
 5284              		.loc 1 1206 0
 5285 000a 1B4B     		ldr	r3, .L276
 5286 000c 1B68     		ldr	r3, [r3]
 5287 000e 9BB2     		uxth	r3, r3
 5288 0010 1A46     		mov	r2, r3	@ movhi
 5289 0012 5201     		lsls	r2, r2, #5
 5290 0014 D21A     		subs	r2, r2, r3
 5291 0016 9200     		lsls	r2, r2, #2
 5292 0018 1344     		add	r3, r3, r2
 5293 001a DB00     		lsls	r3, r3, #3
 5294 001c 9BB2     		uxth	r3, r3
 5295 001e 1BB2     		sxth	r3, r3
 5296 0020 FB80     		strh	r3, [r7, #6]	@ movhi
1207:..\src/command_processing.c ****     if (aux_int16 < 0) aux_int16 = 0;
 5297              		.loc 1 1207 0
 5298 0022 B7F90630 		ldrsh	r3, [r7, #6]
 5299 0026 002B     		cmp	r3, #0
 5300 0028 01DA     		bge	.L275
 5301              		.loc 1 1207 0 is_stmt 0 discriminator 1
 5302 002a 0023     		movs	r3, #0
 5303 002c FB80     		strh	r3, [r7, #6]	@ movhi
 5304              	.L275:
1208:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5305              		.loc 1 1208 0 is_stmt 1
 5306 002e BB1D     		adds	r3, r7, #6
 5307 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5308 0032 BB72     		strb	r3, [r7, #10]
1209:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5309              		.loc 1 1209 0
 5310 0034 BB1D     		adds	r3, r7, #6
 5311 0036 0133     		adds	r3, r3, #1
 5312 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5313 003a 7B72     		strb	r3, [r7, #9]
1210:..\src/command_processing.c ****     
1211:..\src/command_processing.c ****     
1212:..\src/command_processing.c ****     // aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated current
1213:..\src/command_processing.c ****     aux_int16 = (int16)(Battery_level_out);
 5314              		.loc 1 1213 0
 5315 003c 0F4B     		ldr	r3, .L276+4
 5316 003e 1B68     		ldr	r3, [r3]
 5317 0040 1BB2     		sxth	r3, r3
 5318 0042 FB80     		strh	r3, [r7, #6]	@ movhi
1214:..\src/command_processing.c ****     
1215:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 133


 5319              		.loc 1 1215 0
 5320 0044 BB1D     		adds	r3, r7, #6
 5321 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5322 0048 3B73     		strb	r3, [r7, #12]
1216:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5323              		.loc 1 1216 0
 5324 004a BB1D     		adds	r3, r7, #6
 5325 004c 0133     		adds	r3, r3, #1
 5326 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5327 0050 FB72     		strb	r3, [r7, #11]
1217:..\src/command_processing.c **** 
1218:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
1219:..\src/command_processing.c **** 
1220:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5328              		.loc 1 1220 0
 5329 0052 07F10803 		add	r3, r7, #8
 5330 0056 0521     		movs	r1, #5
 5331 0058 1846     		mov	r0, r3
 5332 005a FFF7FEFF 		bl	LCRChecksum
 5333 005e 0346     		mov	r3, r0
 5334 0060 7B73     		strb	r3, [r7, #13]
1221:..\src/command_processing.c ****     
1222:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5335              		.loc 1 1222 0
 5336 0062 07F10803 		add	r3, r7, #8
 5337 0066 0621     		movs	r1, #6
 5338 0068 1846     		mov	r0, r3
 5339 006a FFF7FEFF 		bl	commWrite
1223:..\src/command_processing.c **** 
1224:..\src/command_processing.c **** }
 5340              		.loc 1 1224 0
 5341 006e 00BF     		nop
 5342 0070 1037     		adds	r7, r7, #16
 5343              		.cfi_def_cfa_offset 8
 5344 0072 BD46     		mov	sp, r7
 5345              		.cfi_def_cfa_register 13
 5346              		@ sp needed
 5347 0074 80BD     		pop	{r7, pc}
 5348              	.L277:
 5349 0076 00BF     		.align	2
 5350              	.L276:
 5351 0078 00000000 		.word	pressure_value
 5352 007c 00000000 		.word	Battery_level_out
 5353              		.cfi_endproc
 5354              	.LFE103:
 5355              		.size	cmd_get_currents, .-cmd_get_currents
 5356              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 5357              		.align	2
 5358              		.global	cmd_get_currents_for_cuff
 5359              		.thumb
 5360              		.thumb_func
 5361              		.type	cmd_get_currents_for_cuff, %function
 5362              	cmd_get_currents_for_cuff:
 5363              	.LFB104:
1225:..\src/command_processing.c **** 
1226:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 5364              		.loc 1 1226 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 134


 5365              		.cfi_startproc
 5366              		@ args = 0, pretend = 0, frame = 0
 5367              		@ frame_needed = 1, uses_anonymous_args = 0
 5368              		@ link register save eliminated.
 5369 0000 80B4     		push	{r7}
 5370              		.cfi_def_cfa_offset 4
 5371              		.cfi_offset 7, -4
 5372 0002 00AF     		add	r7, sp, #0
 5373              		.cfi_def_cfa_register 7
1227:..\src/command_processing.c ****    
1228:..\src/command_processing.c **** }
 5374              		.loc 1 1228 0
 5375 0004 00BF     		nop
 5376 0006 BD46     		mov	sp, r7
 5377              		.cfi_def_cfa_register 13
 5378              		@ sp needed
 5379 0008 80BC     		pop	{r7}
 5380              		.cfi_restore 7
 5381              		.cfi_def_cfa_offset 0
 5382 000a 7047     		bx	lr
 5383              		.cfi_endproc
 5384              	.LFE104:
 5385              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 5386              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
 5387              		.align	2
 5388              		.global	cmd_get_vibrotactile_inputs
 5389              		.thumb
 5390              		.thumb_func
 5391              		.type	cmd_get_vibrotactile_inputs, %function
 5392              	cmd_get_vibrotactile_inputs:
 5393              	.LFB105:
1229:..\src/command_processing.c **** 
1230:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 5394              		.loc 1 1230 0
 5395              		.cfi_startproc
 5396              		@ args = 0, pretend = 0, frame = 0
 5397              		@ frame_needed = 1, uses_anonymous_args = 0
 5398              		@ link register save eliminated.
 5399 0000 80B4     		push	{r7}
 5400              		.cfi_def_cfa_offset 4
 5401              		.cfi_offset 7, -4
 5402 0002 00AF     		add	r7, sp, #0
 5403              		.cfi_def_cfa_register 7
1231:..\src/command_processing.c ****     
1232:..\src/command_processing.c **** }
 5404              		.loc 1 1232 0
 5405 0004 00BF     		nop
 5406 0006 BD46     		mov	sp, r7
 5407              		.cfi_def_cfa_register 13
 5408              		@ sp needed
 5409 0008 80BC     		pop	{r7}
 5410              		.cfi_restore 7
 5411              		.cfi_def_cfa_offset 0
 5412 000a 7047     		bx	lr
 5413              		.cfi_endproc
 5414              	.LFE105:
 5415              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 135


 5416              		.section	.text.commReadIMUFromSH,"ax",%progbits
 5417              		.align	2
 5418              		.global	commReadIMUFromSH
 5419              		.thumb
 5420              		.thumb_func
 5421              		.type	commReadIMUFromSH, %function
 5422              	commReadIMUFromSH:
 5423              	.LFB106:
1233:..\src/command_processing.c **** 
1234:..\src/command_processing.c **** 
1235:..\src/command_processing.c **** 
1236:..\src/command_processing.c **** //==============================================================================
1237:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1238:..\src/command_processing.c **** //==============================================================================
1239:..\src/command_processing.c **** void commReadIMUFromSH(){
 5424              		.loc 1 1239 0
 5425              		.cfi_startproc
 5426              		@ args = 0, pretend = 0, frame = 32
 5427              		@ frame_needed = 1, uses_anonymous_args = 0
 5428 0000 80B5     		push	{r7, lr}
 5429              		.cfi_def_cfa_offset 8
 5430              		.cfi_offset 7, -8
 5431              		.cfi_offset 14, -4
 5432 0002 88B0     		sub	sp, sp, #32
 5433              		.cfi_def_cfa_offset 40
 5434 0004 00AF     		add	r7, sp, #0
 5435              		.cfi_def_cfa_register 7
1240:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1241:..\src/command_processing.c ****     // resulted from the processed IMU values.
1242:..\src/command_processing.c ****     // This function use RS485 protocol to communicate with the second board. 
1243:..\src/command_processing.c ****     // Baude Rate is set to 2000000. 
1244:..\src/command_processing.c ****     // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1245:..\src/command_processing.c ****     // and an answer (: : ID pk_length CMD data1[0] data1[1] data2[0] data2[1] check) received --> 
1246:..\src/command_processing.c ****     // At least 64 us are requested for this communication 
1247:..\src/command_processing.c ****     
1248:..\src/command_processing.c ****     uint8 packet_data[16];
1249:..\src/command_processing.c ****     uint8 packet_length;
1250:..\src/command_processing.c ****    
1251:..\src/command_processing.c ****     uint32 t_start, t_end;
1252:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5436              		.loc 1 1252 0
 5437 0006 0123     		movs	r3, #1
 5438 0008 FB77     		strb	r3, [r7, #31]
1253:..\src/command_processing.c **** 
1254:..\src/command_processing.c ****     packet_length = 2;
 5439              		.loc 1 1254 0
 5440 000a 0223     		movs	r3, #2
 5441 000c BB77     		strb	r3, [r7, #30]
1255:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5442              		.loc 1 1255 0
 5443 000e FA23     		movs	r3, #250
 5444 0010 3B71     		strb	r3, [r7, #4]
1256:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5445              		.loc 1 1256 0
 5446 0012 FA23     		movs	r3, #250
 5447 0014 7B71     		strb	r3, [r7, #5]
1257:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 136


 5448              		.loc 1 1257 0
 5449 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5450 0018 99B2     		uxth	r1, r3
 5451 001a 234B     		ldr	r3, .L287
 5452 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5453 0020 3B1D     		adds	r3, r7, #4
 5454 0022 1846     		mov	r0, r3
 5455 0024 FFF7FEFF 		bl	commWriteID
1258:..\src/command_processing.c **** 
1259:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5456              		.loc 1 1259 0
 5457 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5458 002c 0346     		mov	r3, r0
 5459 002e BB61     		str	r3, [r7, #24]
1260:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5460              		.loc 1 1260 0
 5461 0030 18E0     		b	.L281
 5462              	.L284:
1261:..\src/command_processing.c ****         if (interrupt_flag){
 5463              		.loc 1 1261 0
 5464 0032 1E4B     		ldr	r3, .L287+4
 5465 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5466 0036 002B     		cmp	r3, #0
 5467 0038 04D0     		beq	.L282
1262:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5468              		.loc 1 1262 0
 5469 003a 1C4B     		ldr	r3, .L287+4
 5470 003c 0022     		movs	r2, #0
 5471 003e 1A70     		strb	r2, [r3]
1263:..\src/command_processing.c ****             interrupt_manager();
 5472              		.loc 1 1263 0
 5473 0040 FFF7FEFF 		bl	interrupt_manager
 5474              	.L282:
1264:..\src/command_processing.c ****         }
1265:..\src/command_processing.c **** 
1266:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5475              		.loc 1 1266 0
 5476 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5477 0048 0346     		mov	r3, r0
 5478 004a 7B61     		str	r3, [r7, #20]
1267:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5479              		.loc 1 1267 0
 5480 004c BA69     		ldr	r2, [r7, #24]
 5481 004e 7B69     		ldr	r3, [r7, #20]
 5482 0050 D31A     		subs	r3, r2, r3
 5483 0052 174A     		ldr	r2, .L287+8
 5484 0054 9342     		cmp	r3, r2
 5485 0056 05D9     		bls	.L281
1268:..\src/command_processing.c ****             read_flag = FALSE;
 5486              		.loc 1 1268 0
 5487 0058 0023     		movs	r3, #0
 5488 005a FB77     		strb	r3, [r7, #31]
1269:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5489              		.loc 1 1269 0
 5490 005c 154B     		ldr	r3, .L287+12
 5491 005e 0022     		movs	r2, #0
 5492 0060 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 137


1270:..\src/command_processing.c ****             break;
 5493              		.loc 1 1270 0
 5494 0062 03E0     		b	.L283
 5495              	.L281:
1260:..\src/command_processing.c ****         if (interrupt_flag){
 5496              		.loc 1 1260 0
 5497 0064 144B     		ldr	r3, .L287+16
 5498 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5499 0068 FB2B     		cmp	r3, #251
 5500 006a E2D1     		bne	.L284
 5501              	.L283:
1271:..\src/command_processing.c ****         }
1272:..\src/command_processing.c ****     }
1273:..\src/command_processing.c **** 
1274:..\src/command_processing.c ****         if (read_flag) {
 5502              		.loc 1 1274 0
 5503 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5504 006e 002B     		cmp	r3, #0
 5505 0070 15D0     		beq	.L286
1275:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5506              		.loc 1 1275 0
 5507 0072 114B     		ldr	r3, .L287+16
 5508 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5509 0076 1B02     		lsls	r3, r3, #8
 5510 0078 1AB2     		sxth	r2, r3
 5511 007a 0F4B     		ldr	r3, .L287+16
 5512 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5513 007e 1BB2     		sxth	r3, r3
 5514 0080 1343     		orrs	r3, r3, r2
 5515 0082 1AB2     		sxth	r2, r3
 5516 0084 0D4B     		ldr	r3, .L287+20
 5517 0086 1A80     		strh	r2, [r3]	@ movhi
1276:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5518              		.loc 1 1276 0
 5519 0088 0B4B     		ldr	r3, .L287+16
 5520 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5521 008c 1B02     		lsls	r3, r3, #8
 5522 008e 1AB2     		sxth	r2, r3
 5523 0090 094B     		ldr	r3, .L287+16
 5524 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5525 0094 1BB2     		sxth	r3, r3
 5526 0096 1343     		orrs	r3, r3, r2
 5527 0098 1AB2     		sxth	r2, r3
 5528 009a 094B     		ldr	r3, .L287+24
 5529 009c 1A80     		strh	r2, [r3]	@ movhi
 5530              	.L286:
1277:..\src/command_processing.c ****     }
1278:..\src/command_processing.c ****     
1279:..\src/command_processing.c **** }
 5531              		.loc 1 1279 0
 5532 009e 00BF     		nop
 5533 00a0 2037     		adds	r7, r7, #32
 5534              		.cfi_def_cfa_offset 8
 5535 00a2 BD46     		mov	sp, r7
 5536              		.cfi_def_cfa_register 13
 5537              		@ sp needed
 5538 00a4 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 138


 5539              	.L288:
 5540 00a6 00BF     		.align	2
 5541              	.L287:
 5542 00a8 00000000 		.word	c_mem
 5543 00ac 00000000 		.word	interrupt_flag
 5544 00b0 20AA4400 		.word	4500000
 5545 00b4 00000000 		.word	master_mode
 5546 00b8 00000000 		.word	g_rx
 5547 00bc 00000000 		.word	PWM_IMU_1
 5548 00c0 00000000 		.word	PWM_IMU_2
 5549              		.cfi_endproc
 5550              	.LFE106:
 5551              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 5552              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 5553              		.align	2
 5554              		.global	commReadResCurrFromSH
 5555              		.thumb
 5556              		.thumb_func
 5557              		.type	commReadResCurrFromSH, %function
 5558              	commReadResCurrFromSH:
 5559              	.LFB107:
1280:..\src/command_processing.c **** 
1281:..\src/command_processing.c **** //==============================================================================
1282:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1283:..\src/command_processing.c **** //==============================================================================
1284:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1285:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1286:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1287:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1288:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1289:..\src/command_processing.c **** int16  commReadResCurrFromSH()
1290:..\src/command_processing.c **** {
 5560              		.loc 1 1290 0
 5561              		.cfi_startproc
 5562              		@ args = 0, pretend = 0, frame = 32
 5563              		@ frame_needed = 1, uses_anonymous_args = 0
 5564 0000 80B5     		push	{r7, lr}
 5565              		.cfi_def_cfa_offset 8
 5566              		.cfi_offset 7, -8
 5567              		.cfi_offset 14, -4
 5568 0002 88B0     		sub	sp, sp, #32
 5569              		.cfi_def_cfa_offset 40
 5570 0004 00AF     		add	r7, sp, #0
 5571              		.cfi_def_cfa_register 7
1291:..\src/command_processing.c ****     uint8 packet_data[16];
1292:..\src/command_processing.c ****     uint8 packet_length;
1293:..\src/command_processing.c ****     int16 curr_diff = 0;
 5572              		.loc 1 1293 0
 5573 0006 0023     		movs	r3, #0
 5574 0008 FB83     		strh	r3, [r7, #30]	@ movhi
1294:..\src/command_processing.c ****     uint32 t_start, t_end;
1295:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5575              		.loc 1 1295 0
 5576 000a 0123     		movs	r3, #1
 5577 000c 7B77     		strb	r3, [r7, #29]
1296:..\src/command_processing.c **** 
1297:..\src/command_processing.c ****     packet_length = 2;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 139


 5578              		.loc 1 1297 0
 5579 000e 0223     		movs	r3, #2
 5580 0010 3B77     		strb	r3, [r7, #28]
1298:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 5581              		.loc 1 1298 0
 5582 0012 8C23     		movs	r3, #140
 5583 0014 3B71     		strb	r3, [r7, #4]
1299:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 5584              		.loc 1 1299 0
 5585 0016 8C23     		movs	r3, #140
 5586 0018 7B71     		strb	r3, [r7, #5]
1300:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5587              		.loc 1 1300 0
 5588 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 5589 001c 99B2     		uxth	r1, r3
 5590 001e 1D4B     		ldr	r3, .L296
 5591 0020 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5592 0024 3B1D     		adds	r3, r7, #4
 5593 0026 1846     		mov	r0, r3
 5594 0028 FFF7FEFF 		bl	commWriteID
1301:..\src/command_processing.c **** 
1302:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5595              		.loc 1 1302 0
 5596 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5597 0030 0346     		mov	r3, r0
 5598 0032 BB61     		str	r3, [r7, #24]
1303:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 5599              		.loc 1 1303 0
 5600 0034 18E0     		b	.L290
 5601              	.L293:
1304:..\src/command_processing.c ****         if (interrupt_flag){
 5602              		.loc 1 1304 0
 5603 0036 184B     		ldr	r3, .L296+4
 5604 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5605 003a 002B     		cmp	r3, #0
 5606 003c 04D0     		beq	.L291
1305:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5607              		.loc 1 1305 0
 5608 003e 164B     		ldr	r3, .L296+4
 5609 0040 0022     		movs	r2, #0
 5610 0042 1A70     		strb	r2, [r3]
1306:..\src/command_processing.c ****             interrupt_manager();
 5611              		.loc 1 1306 0
 5612 0044 FFF7FEFF 		bl	interrupt_manager
 5613              	.L291:
1307:..\src/command_processing.c ****         }
1308:..\src/command_processing.c **** 
1309:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5614              		.loc 1 1309 0
 5615 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5616 004c 0346     		mov	r3, r0
 5617 004e 7B61     		str	r3, [r7, #20]
1310:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5618              		.loc 1 1310 0
 5619 0050 BA69     		ldr	r2, [r7, #24]
 5620 0052 7B69     		ldr	r3, [r7, #20]
 5621 0054 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 140


 5622 0056 114A     		ldr	r2, .L296+8
 5623 0058 9342     		cmp	r3, r2
 5624 005a 05D9     		bls	.L290
1311:..\src/command_processing.c ****             read_flag = FALSE;
 5625              		.loc 1 1311 0
 5626 005c 0023     		movs	r3, #0
 5627 005e 7B77     		strb	r3, [r7, #29]
1312:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5628              		.loc 1 1312 0
 5629 0060 0F4B     		ldr	r3, .L296+12
 5630 0062 0022     		movs	r2, #0
 5631 0064 1A70     		strb	r2, [r3]
1313:..\src/command_processing.c ****             break;
 5632              		.loc 1 1313 0
 5633 0066 03E0     		b	.L292
 5634              	.L290:
1303:..\src/command_processing.c ****         if (interrupt_flag){
 5635              		.loc 1 1303 0
 5636 0068 0E4B     		ldr	r3, .L296+16
 5637 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5638 006c 8E2B     		cmp	r3, #142
 5639 006e E2D1     		bne	.L293
 5640              	.L292:
1314:..\src/command_processing.c ****         }
1315:..\src/command_processing.c ****     }
1316:..\src/command_processing.c **** 
1317:..\src/command_processing.c ****     if (read_flag) {
 5641              		.loc 1 1317 0
 5642 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 5643 0072 002B     		cmp	r3, #0
 5644 0074 08D0     		beq	.L294
1318:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 5645              		.loc 1 1318 0
 5646 0076 0B4B     		ldr	r3, .L296+16
 5647 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5648 007a 1B02     		lsls	r3, r3, #8
 5649 007c 1AB2     		sxth	r2, r3
 5650 007e 094B     		ldr	r3, .L296+16
 5651 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5652 0082 1BB2     		sxth	r3, r3
 5653 0084 1343     		orrs	r3, r3, r2
 5654 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 5655              	.L294:
1319:..\src/command_processing.c ****     }
1320:..\src/command_processing.c ****     
1321:..\src/command_processing.c ****     return curr_diff;
 5656              		.loc 1 1321 0
 5657 0088 B7F91E30 		ldrsh	r3, [r7, #30]
1322:..\src/command_processing.c **** }
 5658              		.loc 1 1322 0
 5659 008c 1846     		mov	r0, r3
 5660 008e 2037     		adds	r7, r7, #32
 5661              		.cfi_def_cfa_offset 8
 5662 0090 BD46     		mov	sp, r7
 5663              		.cfi_def_cfa_register 13
 5664              		@ sp needed
 5665 0092 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 141


 5666              	.L297:
 5667              		.align	2
 5668              	.L296:
 5669 0094 00000000 		.word	c_mem
 5670 0098 00000000 		.word	interrupt_flag
 5671 009c 20AA4400 		.word	4500000
 5672 00a0 00000000 		.word	master_mode
 5673 00a4 00000000 		.word	g_rx
 5674              		.cfi_endproc
 5675              	.LFE107:
 5676              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 5677              		.section	.text.cmd_set_baudrate,"ax",%progbits
 5678              		.align	2
 5679              		.global	cmd_set_baudrate
 5680              		.thumb
 5681              		.thumb_func
 5682              		.type	cmd_set_baudrate, %function
 5683              	cmd_set_baudrate:
 5684              	.LFB108:
1323:..\src/command_processing.c **** 
1324:..\src/command_processing.c **** 
1325:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1326:..\src/command_processing.c **** 
1327:..\src/command_processing.c **** void cmd_set_baudrate(){
 5685              		.loc 1 1327 0
 5686              		.cfi_startproc
 5687              		@ args = 0, pretend = 0, frame = 0
 5688              		@ frame_needed = 1, uses_anonymous_args = 0
 5689              		@ link register save eliminated.
 5690 0000 80B4     		push	{r7}
 5691              		.cfi_def_cfa_offset 4
 5692              		.cfi_offset 7, -4
 5693 0002 00AF     		add	r7, sp, #0
 5694              		.cfi_def_cfa_register 7
1328:..\src/command_processing.c ****     
1329:..\src/command_processing.c **** }
 5695              		.loc 1 1329 0
 5696 0004 00BF     		nop
 5697 0006 BD46     		mov	sp, r7
 5698              		.cfi_def_cfa_register 13
 5699              		@ sp needed
 5700 0008 80BC     		pop	{r7}
 5701              		.cfi_restore 7
 5702              		.cfi_def_cfa_offset 0
 5703 000a 7047     		bx	lr
 5704              		.cfi_endproc
 5705              	.LFE108:
 5706              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 5707              		.section	.text.cmd_ping,"ax",%progbits
 5708              		.align	2
 5709              		.global	cmd_ping
 5710              		.thumb
 5711              		.thumb_func
 5712              		.type	cmd_ping, %function
 5713              	cmd_ping:
 5714              	.LFB109:
1330:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 142


1331:..\src/command_processing.c **** void cmd_ping(){
 5715              		.loc 1 1331 0
 5716              		.cfi_startproc
 5717              		@ args = 0, pretend = 0, frame = 8
 5718              		@ frame_needed = 1, uses_anonymous_args = 0
 5719 0000 80B5     		push	{r7, lr}
 5720              		.cfi_def_cfa_offset 8
 5721              		.cfi_offset 7, -8
 5722              		.cfi_offset 14, -4
 5723 0002 82B0     		sub	sp, sp, #8
 5724              		.cfi_def_cfa_offset 16
 5725 0004 00AF     		add	r7, sp, #0
 5726              		.cfi_def_cfa_register 7
1332:..\src/command_processing.c **** 
1333:..\src/command_processing.c ****     uint8 packet_data[2];
1334:..\src/command_processing.c **** 
1335:..\src/command_processing.c ****     // Header
1336:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 5727              		.loc 1 1336 0
 5728 0006 0023     		movs	r3, #0
 5729 0008 3B71     		strb	r3, [r7, #4]
1337:..\src/command_processing.c ****     
1338:..\src/command_processing.c ****     // Load Payload
1339:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 5730              		.loc 1 1339 0
 5731 000a 0023     		movs	r3, #0
 5732 000c 7B71     		strb	r3, [r7, #5]
1340:..\src/command_processing.c **** 
1341:..\src/command_processing.c ****     // Send Package to uart
1342:..\src/command_processing.c ****     commWrite(packet_data, 2);
 5733              		.loc 1 1342 0
 5734 000e 3B1D     		adds	r3, r7, #4
 5735 0010 0221     		movs	r1, #2
 5736 0012 1846     		mov	r0, r3
 5737 0014 FFF7FEFF 		bl	commWrite
1343:..\src/command_processing.c **** }
 5738              		.loc 1 1343 0
 5739 0018 00BF     		nop
 5740 001a 0837     		adds	r7, r7, #8
 5741              		.cfi_def_cfa_offset 8
 5742 001c BD46     		mov	sp, r7
 5743              		.cfi_def_cfa_register 13
 5744              		@ sp needed
 5745 001e 80BD     		pop	{r7, pc}
 5746              		.cfi_endproc
 5747              	.LFE109:
 5748              		.size	cmd_ping, .-cmd_ping
 5749              		.section	.text.cmd_get_inputs,"ax",%progbits
 5750              		.align	2
 5751              		.global	cmd_get_inputs
 5752              		.thumb
 5753              		.thumb_func
 5754              		.type	cmd_get_inputs, %function
 5755              	cmd_get_inputs:
 5756              	.LFB110:
1344:..\src/command_processing.c **** 
1345:..\src/command_processing.c **** void cmd_get_inputs(){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 143


 5757              		.loc 1 1345 0
 5758              		.cfi_startproc
 5759              		@ args = 0, pretend = 0, frame = 0
 5760              		@ frame_needed = 1, uses_anonymous_args = 0
 5761              		@ link register save eliminated.
 5762 0000 80B4     		push	{r7}
 5763              		.cfi_def_cfa_offset 4
 5764              		.cfi_offset 7, -4
 5765 0002 00AF     		add	r7, sp, #0
 5766              		.cfi_def_cfa_register 7
1346:..\src/command_processing.c **** 
1347:..\src/command_processing.c **** }
 5767              		.loc 1 1347 0
 5768 0004 00BF     		nop
 5769 0006 BD46     		mov	sp, r7
 5770              		.cfi_def_cfa_register 13
 5771              		@ sp needed
 5772 0008 80BC     		pop	{r7}
 5773              		.cfi_restore 7
 5774              		.cfi_def_cfa_offset 0
 5775 000a 7047     		bx	lr
 5776              		.cfi_endproc
 5777              	.LFE110:
 5778              		.size	cmd_get_inputs, .-cmd_get_inputs
 5779              		.section	.text.cmd_store_params,"ax",%progbits
 5780              		.align	2
 5781              		.global	cmd_store_params
 5782              		.thumb
 5783              		.thumb_func
 5784              		.type	cmd_store_params, %function
 5785              	cmd_store_params:
 5786              	.LFB111:
1348:..\src/command_processing.c **** 
1349:..\src/command_processing.c **** void cmd_store_params(){
 5787              		.loc 1 1349 0
 5788              		.cfi_startproc
 5789              		@ args = 0, pretend = 0, frame = 8
 5790              		@ frame_needed = 1, uses_anonymous_args = 0
 5791 0000 80B5     		push	{r7, lr}
 5792              		.cfi_def_cfa_offset 8
 5793              		.cfi_offset 7, -8
 5794              		.cfi_offset 14, -4
 5795 0002 82B0     		sub	sp, sp, #8
 5796              		.cfi_def_cfa_offset 16
 5797 0004 00AF     		add	r7, sp, #0
 5798              		.cfi_def_cfa_register 7
1350:..\src/command_processing.c ****     
1351:..\src/command_processing.c ****     uint8 CYDATA packet_length = 2;
 5799              		.loc 1 1351 0
 5800 0006 0223     		movs	r3, #2
 5801 0008 FB71     		strb	r3, [r7, #7]
1352:..\src/command_processing.c ****     uint8 CYDATA packet_data[2];
1353:..\src/command_processing.c ****     uint8 CYDATA old_id;
1354:..\src/command_processing.c ****       
1355:..\src/command_processing.c ****     // Store params 
1356:..\src/command_processing.c **** 
1357:..\src/command_processing.c ****     if (c_mem.dev.id != g_mem.dev.id) {     //If a new id is going to be set we will lose communica
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 144


 5802              		.loc 1 1357 0
 5803 000a 1F4B     		ldr	r3, .L309
 5804 000c 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 5805 000e 1F4B     		ldr	r3, .L309+4
 5806 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5807 0012 9A42     		cmp	r2, r3
 5808 0014 20D0     		beq	.L302
1358:..\src/command_processing.c ****         old_id = c_mem.dev.id;          //after the memstore(0) and the ACK won't be recognised
 5809              		.loc 1 1358 0
 5810 0016 1C4B     		ldr	r3, .L309
 5811 0018 1B7C     		ldrb	r3, [r3, #16]
 5812 001a BB71     		strb	r3, [r7, #6]
1359:..\src/command_processing.c ****         if(memStore(0)) {
 5813              		.loc 1 1359 0
 5814 001c 0020     		movs	r0, #0
 5815 001e FFF7FEFF 		bl	memStore
 5816 0022 0346     		mov	r3, r0
 5817 0024 002B     		cmp	r3, #0
 5818 0026 0BD0     		beq	.L303
1360:..\src/command_processing.c ****             packet_data[0] = ACK_OK;
 5819              		.loc 1 1360 0
 5820 0028 0123     		movs	r3, #1
 5821 002a 3B71     		strb	r3, [r7, #4]
1361:..\src/command_processing.c ****             packet_data[1] = ACK_OK;
 5822              		.loc 1 1361 0
 5823 002c 0123     		movs	r3, #1
 5824 002e 7B71     		strb	r3, [r7, #5]
1362:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5825              		.loc 1 1362 0
 5826 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5827 0032 99B2     		uxth	r1, r3
 5828 0034 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5829 0036 3B1D     		adds	r3, r7, #4
 5830 0038 1846     		mov	r0, r3
 5831 003a FFF7FEFF 		bl	commWrite_old_id
 5832 003e 18E0     		b	.L305
 5833              	.L303:
1363:..\src/command_processing.c ****         }    
1364:..\src/command_processing.c ****         else{
1365:..\src/command_processing.c ****             packet_data[0] = ACK_ERROR;
 5834              		.loc 1 1365 0
 5835 0040 0023     		movs	r3, #0
 5836 0042 3B71     		strb	r3, [r7, #4]
1366:..\src/command_processing.c ****             packet_data[1] = ACK_ERROR;
 5837              		.loc 1 1366 0
 5838 0044 0023     		movs	r3, #0
 5839 0046 7B71     		strb	r3, [r7, #5]
1367:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5840              		.loc 1 1367 0
 5841 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5842 004a 99B2     		uxth	r1, r3
 5843 004c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5844 004e 3B1D     		adds	r3, r7, #4
 5845 0050 1846     		mov	r0, r3
 5846 0052 FFF7FEFF 		bl	commWrite_old_id
 5847 0056 0CE0     		b	.L305
 5848              	.L302:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 145


1368:..\src/command_processing.c ****         }
1369:..\src/command_processing.c ****     }    
1370:..\src/command_processing.c ****     else {
1371:..\src/command_processing.c ****         if(memStore(0))
 5849              		.loc 1 1371 0
 5850 0058 0020     		movs	r0, #0
 5851 005a FFF7FEFF 		bl	memStore
 5852 005e 0346     		mov	r3, r0
 5853 0060 002B     		cmp	r3, #0
 5854 0062 03D0     		beq	.L306
1372:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 5855              		.loc 1 1372 0
 5856 0064 0120     		movs	r0, #1
 5857 0066 FFF7FEFF 		bl	sendAcknowledgment
 5858 006a 02E0     		b	.L305
 5859              	.L306:
1373:..\src/command_processing.c ****         else
1374:..\src/command_processing.c ****             sendAcknowledgment(ACK_ERROR);
 5860              		.loc 1 1374 0
 5861 006c 0020     		movs	r0, #0
 5862 006e FFF7FEFF 		bl	sendAcknowledgment
 5863              	.L305:
1375:..\src/command_processing.c ****     }
1376:..\src/command_processing.c ****     
1377:..\src/command_processing.c ****     // FW reset (if necessary)
1378:..\src/command_processing.c ****     if (reset_PSoC_flag == TRUE) {
 5864              		.loc 1 1378 0
 5865 0072 074B     		ldr	r3, .L309+8
 5866 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5867 0076 012B     		cmp	r3, #1
 5868 0078 01D1     		bne	.L308
1379:..\src/command_processing.c ****         CySoftwareReset();
 5869              		.loc 1 1379 0
 5870 007a FFF7FEFF 		bl	CySoftwareReset
 5871              	.L308:
1380:..\src/command_processing.c ****     }
1381:..\src/command_processing.c **** }
 5872              		.loc 1 1381 0
 5873 007e 00BF     		nop
 5874 0080 0837     		adds	r7, r7, #8
 5875              		.cfi_def_cfa_offset 8
 5876 0082 BD46     		mov	sp, r7
 5877              		.cfi_def_cfa_register 13
 5878              		@ sp needed
 5879 0084 80BD     		pop	{r7, pc}
 5880              	.L310:
 5881 0086 00BF     		.align	2
 5882              	.L309:
 5883 0088 00000000 		.word	c_mem
 5884 008c 00000000 		.word	g_mem
 5885 0090 00000000 		.word	reset_PSoC_flag
 5886              		.cfi_endproc
 5887              	.LFE111:
 5888              		.size	cmd_store_params, .-cmd_store_params
 5889              		.section	.text.cmd_get_emg,"ax",%progbits
 5890              		.align	2
 5891              		.global	cmd_get_emg
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 146


 5892              		.thumb
 5893              		.thumb_func
 5894              		.type	cmd_get_emg, %function
 5895              	cmd_get_emg:
 5896              	.LFB112:
1382:..\src/command_processing.c **** 
1383:..\src/command_processing.c **** void cmd_get_emg(){
 5897              		.loc 1 1383 0
 5898              		.cfi_startproc
 5899              		@ args = 0, pretend = 0, frame = 16
 5900              		@ frame_needed = 1, uses_anonymous_args = 0
 5901 0000 80B5     		push	{r7, lr}
 5902              		.cfi_def_cfa_offset 8
 5903              		.cfi_offset 7, -8
 5904              		.cfi_offset 14, -4
 5905 0002 84B0     		sub	sp, sp, #16
 5906              		.cfi_def_cfa_offset 24
 5907 0004 00AF     		add	r7, sp, #0
 5908              		.cfi_def_cfa_register 7
1384:..\src/command_processing.c ****     
1385:..\src/command_processing.c ****     uint8 packet_data[6];
1386:..\src/command_processing.c ****     int16 aux_int16;
1387:..\src/command_processing.c ****     
1388:..\src/command_processing.c ****     // Header        
1389:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 5909              		.loc 1 1389 0
 5910 0006 8823     		movs	r3, #136
 5911 0008 3B72     		strb	r3, [r7, #8]
1390:..\src/command_processing.c ****     
1391:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 5912              		.loc 1 1391 0
 5913 000a 144B     		ldr	r3, .L312
 5914 000c 1B68     		ldr	r3, [r3]
 5915 000e 1BB2     		sxth	r3, r3
 5916 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1392:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5917              		.loc 1 1392 0
 5918 0012 BB1D     		adds	r3, r7, #6
 5919 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5920 0016 BB72     		strb	r3, [r7, #10]
1393:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5921              		.loc 1 1393 0
 5922 0018 BB1D     		adds	r3, r7, #6
 5923 001a 0133     		adds	r3, r3, #1
 5924 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5925 001e 7B72     		strb	r3, [r7, #9]
1394:..\src/command_processing.c ****     
1395:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 5926              		.loc 1 1395 0
 5927 0020 0E4B     		ldr	r3, .L312
 5928 0022 5B68     		ldr	r3, [r3, #4]
 5929 0024 1BB2     		sxth	r3, r3
 5930 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1396:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5931              		.loc 1 1396 0
 5932 0028 BB1D     		adds	r3, r7, #6
 5933 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 147


 5934 002c 3B73     		strb	r3, [r7, #12]
1397:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5935              		.loc 1 1397 0
 5936 002e BB1D     		adds	r3, r7, #6
 5937 0030 0133     		adds	r3, r3, #1
 5938 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5939 0034 FB72     		strb	r3, [r7, #11]
1398:..\src/command_processing.c **** 
1399:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5940              		.loc 1 1399 0
 5941 0036 07F10803 		add	r3, r7, #8
 5942 003a 0521     		movs	r1, #5
 5943 003c 1846     		mov	r0, r3
 5944 003e FFF7FEFF 		bl	LCRChecksum
 5945 0042 0346     		mov	r3, r0
 5946 0044 7B73     		strb	r3, [r7, #13]
1400:..\src/command_processing.c **** 
1401:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5947              		.loc 1 1401 0
 5948 0046 07F10803 		add	r3, r7, #8
 5949 004a 0621     		movs	r1, #6
 5950 004c 1846     		mov	r0, r3
 5951 004e FFF7FEFF 		bl	commWrite
1402:..\src/command_processing.c **** 
1403:..\src/command_processing.c **** }
 5952              		.loc 1 1403 0
 5953 0052 00BF     		nop
 5954 0054 1037     		adds	r7, r7, #16
 5955              		.cfi_def_cfa_offset 8
 5956 0056 BD46     		mov	sp, r7
 5957              		.cfi_def_cfa_register 13
 5958              		@ sp needed
 5959 0058 80BD     		pop	{r7, pc}
 5960              	.L313:
 5961 005a 00BF     		.align	2
 5962              	.L312:
 5963 005c 00000000 		.word	g_adc_measOld
 5964              		.cfi_endproc
 5965              	.LFE112:
 5966              		.size	cmd_get_emg, .-cmd_get_emg
 5967              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 5968              		.align	2
 5969              		.global	cmd_get_imu_readings
 5970              		.thumb
 5971              		.thumb_func
 5972              		.type	cmd_get_imu_readings, %function
 5973              	cmd_get_imu_readings:
 5974              	.LFB113:
1404:..\src/command_processing.c **** 
1405:..\src/command_processing.c **** void cmd_get_imu_readings(){
 5975              		.loc 1 1405 0
 5976              		.cfi_startproc
 5977              		@ args = 0, pretend = 0, frame = 0
 5978              		@ frame_needed = 1, uses_anonymous_args = 0
 5979              		@ link register save eliminated.
 5980 0000 80B4     		push	{r7}
 5981              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 148


 5982              		.cfi_offset 7, -4
 5983 0002 00AF     		add	r7, sp, #0
 5984              		.cfi_def_cfa_register 7
1406:..\src/command_processing.c ****  
1407:..\src/command_processing.c **** }
 5985              		.loc 1 1407 0
 5986 0004 00BF     		nop
 5987 0006 BD46     		mov	sp, r7
 5988              		.cfi_def_cfa_register 13
 5989              		@ sp needed
 5990 0008 80BC     		pop	{r7}
 5991              		.cfi_restore 7
 5992              		.cfi_def_cfa_offset 0
 5993 000a 7047     		bx	lr
 5994              		.cfi_endproc
 5995              	.LFE113:
 5996              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 5997              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 5998              		.align	2
 5999              		.global	cmd_get_encoder_map
 6000              		.thumb
 6001              		.thumb_func
 6002              		.type	cmd_get_encoder_map, %function
 6003              	cmd_get_encoder_map:
 6004              	.LFB114:
1408:..\src/command_processing.c **** 
1409:..\src/command_processing.c **** void cmd_get_encoder_map(){
 6005              		.loc 1 1409 0
 6006              		.cfi_startproc
 6007              		@ args = 0, pretend = 0, frame = 0
 6008              		@ frame_needed = 1, uses_anonymous_args = 0
 6009              		@ link register save eliminated.
 6010 0000 80B4     		push	{r7}
 6011              		.cfi_def_cfa_offset 4
 6012              		.cfi_offset 7, -4
 6013 0002 00AF     		add	r7, sp, #0
 6014              		.cfi_def_cfa_register 7
1410:..\src/command_processing.c ****    }
 6015              		.loc 1 1410 0
 6016 0004 00BF     		nop
 6017 0006 BD46     		mov	sp, r7
 6018              		.cfi_def_cfa_register 13
 6019              		@ sp needed
 6020 0008 80BC     		pop	{r7}
 6021              		.cfi_restore 7
 6022              		.cfi_def_cfa_offset 0
 6023 000a 7047     		bx	lr
 6024              		.cfi_endproc
 6025              	.LFE114:
 6026              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 6027              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 6028              		.align	2
 6029              		.global	cmd_get_encoder_raw
 6030              		.thumb
 6031              		.thumb_func
 6032              		.type	cmd_get_encoder_raw, %function
 6033              	cmd_get_encoder_raw:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 149


 6034              	.LFB115:
1411:..\src/command_processing.c **** 
1412:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 6035              		.loc 1 1412 0
 6036              		.cfi_startproc
 6037              		@ args = 0, pretend = 0, frame = 0
 6038              		@ frame_needed = 1, uses_anonymous_args = 0
 6039              		@ link register save eliminated.
 6040 0000 80B4     		push	{r7}
 6041              		.cfi_def_cfa_offset 4
 6042              		.cfi_offset 7, -4
 6043 0002 00AF     		add	r7, sp, #0
 6044              		.cfi_def_cfa_register 7
1413:..\src/command_processing.c ****    }
 6045              		.loc 1 1413 0
 6046 0004 00BF     		nop
 6047 0006 BD46     		mov	sp, r7
 6048              		.cfi_def_cfa_register 13
 6049              		@ sp needed
 6050 0008 80BC     		pop	{r7}
 6051              		.cfi_restore 7
 6052              		.cfi_def_cfa_offset 0
 6053 000a 7047     		bx	lr
 6054              		.cfi_endproc
 6055              	.LFE115:
 6056              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 6057              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 6058              		.align	2
 6059              		.global	cmd_get_ADC_map
 6060              		.thumb
 6061              		.thumb_func
 6062              		.type	cmd_get_ADC_map, %function
 6063              	cmd_get_ADC_map:
 6064              	.LFB116:
1414:..\src/command_processing.c **** 
1415:..\src/command_processing.c **** void cmd_get_ADC_map(){
 6065              		.loc 1 1415 0
 6066              		.cfi_startproc
 6067              		@ args = 0, pretend = 0, frame = 0
 6068              		@ frame_needed = 1, uses_anonymous_args = 0
 6069              		@ link register save eliminated.
 6070 0000 80B4     		push	{r7}
 6071              		.cfi_def_cfa_offset 4
 6072              		.cfi_offset 7, -4
 6073 0002 00AF     		add	r7, sp, #0
 6074              		.cfi_def_cfa_register 7
1416:..\src/command_processing.c ****    }
 6075              		.loc 1 1416 0
 6076 0004 00BF     		nop
 6077 0006 BD46     		mov	sp, r7
 6078              		.cfi_def_cfa_register 13
 6079              		@ sp needed
 6080 0008 80BC     		pop	{r7}
 6081              		.cfi_restore 7
 6082              		.cfi_def_cfa_offset 0
 6083 000a 7047     		bx	lr
 6084              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 150


 6085              	.LFE116:
 6086              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 6087              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 6088              		.align	2
 6089              		.global	cmd_get_ADC_raw
 6090              		.thumb
 6091              		.thumb_func
 6092              		.type	cmd_get_ADC_raw, %function
 6093              	cmd_get_ADC_raw:
 6094              	.LFB117:
1417:..\src/command_processing.c **** 
1418:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 6095              		.loc 1 1418 0
 6096              		.cfi_startproc
 6097              		@ args = 0, pretend = 0, frame = 0
 6098              		@ frame_needed = 1, uses_anonymous_args = 0
 6099              		@ link register save eliminated.
 6100 0000 80B4     		push	{r7}
 6101              		.cfi_def_cfa_offset 4
 6102              		.cfi_offset 7, -4
 6103 0002 00AF     		add	r7, sp, #0
 6104              		.cfi_def_cfa_register 7
1419:..\src/command_processing.c ****    
1420:..\src/command_processing.c **** }
 6105              		.loc 1 1420 0
 6106 0004 00BF     		nop
 6107 0006 BD46     		mov	sp, r7
 6108              		.cfi_def_cfa_register 13
 6109              		@ sp needed
 6110 0008 80BC     		pop	{r7}
 6111              		.cfi_restore 7
 6112              		.cfi_def_cfa_offset 0
 6113 000a 7047     		bx	lr
 6114              		.cfi_endproc
 6115              	.LFE117:
 6116              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 6117              		.section	.text.cmd_get_SD_file,"ax",%progbits
 6118              		.align	2
 6119              		.global	cmd_get_SD_file
 6120              		.thumb
 6121              		.thumb_func
 6122              		.type	cmd_get_SD_file, %function
 6123              	cmd_get_SD_file:
 6124              	.LFB118:
1421:..\src/command_processing.c **** 
1422:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 6125              		.loc 1 1422 0
 6126              		.cfi_startproc
 6127              		@ args = 0, pretend = 0, frame = 20064
 6128              		@ frame_needed = 1, uses_anonymous_args = 0
 6129 0000 80B5     		push	{r7, lr}
 6130              		.cfi_def_cfa_offset 8
 6131              		.cfi_offset 7, -8
 6132              		.cfi_offset 14, -4
 6133 0002 ADF59C4D 		sub	sp, sp, #19968
 6134              		.cfi_def_cfa_offset 19976
 6135 0006 98B0     		sub	sp, sp, #96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 151


 6136              		.cfi_def_cfa_offset 20072
 6137 0008 00AF     		add	r7, sp, #0
 6138              		.cfi_def_cfa_register 7
 6139 000a 0246     		mov	r2, r0
 6140 000c 07F16003 		add	r3, r7, #96
 6141 0010 5A3B     		subs	r3, r3, #90
 6142 0012 1A80     		strh	r2, [r3]	@ movhi
1423:..\src/command_processing.c ****     
1424:..\src/command_processing.c ****     uint8 i = 0;
 6143              		.loc 1 1424 0
 6144 0014 0023     		movs	r3, #0
 6145 0016 07F59C42 		add	r2, r7, #19968
 6146 001a 02F15F02 		add	r2, r2, #95
 6147 001e 1370     		strb	r3, [r2]
1425:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 6148              		.loc 1 1425 0
 6149 0020 0023     		movs	r3, #0
 6150 0022 07F59C42 		add	r2, r7, #19968
 6151 0026 02F12C02 		add	r2, r2, #44
 6152 002a 1360     		str	r3, [r2]
 6153 002c 07F59C43 		add	r3, r7, #19968
 6154 0030 03F13003 		add	r3, r3, #48
 6155 0034 2E22     		movs	r2, #46
 6156 0036 0021     		movs	r1, #0
 6157 0038 1846     		mov	r0, r3
 6158 003a FFF7FEFF 		bl	memset
1426:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 6159              		.loc 1 1426 0
 6160 003e 07F16003 		add	r3, r7, #96
 6161 0042 543B     		subs	r3, r3, #84
 6162 0044 0022     		movs	r2, #0
 6163 0046 1A60     		str	r2, [r3]
 6164 0048 0433     		adds	r3, r3, #4
 6165 004a 44F61C62 		movw	r2, #19996
 6166 004e 0021     		movs	r1, #0
 6167 0050 1846     		mov	r0, r3
 6168 0052 FFF7FEFF 		bl	memset
1427:..\src/command_processing.c ****     strcpy(filename, "");
 6169              		.loc 1 1427 0
 6170 0056 3C4B     		ldr	r3, .L324
 6171 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6172 005a 07F59C42 		add	r2, r7, #19968
 6173 005e 02F12C02 		add	r2, r2, #44
 6174 0062 1370     		strb	r3, [r2]
1428:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 6175              		.loc 1 1428 0
 6176 0064 384B     		ldr	r3, .L324
 6177 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6178 0068 07F16003 		add	r3, r7, #96
 6179 006c 543B     		subs	r3, r3, #84
 6180 006e 1A70     		strb	r2, [r3]
1429:..\src/command_processing.c ****     
1430:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 6181              		.loc 1 1430 0
 6182 0070 0023     		movs	r3, #0
 6183 0072 07F59C42 		add	r2, r7, #19968
 6184 0076 02F15F02 		add	r2, r2, #95
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 152


 6185 007a 1370     		strb	r3, [r2]
 6186 007c 1DE0     		b	.L320
 6187              	.L321:
1431:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6188              		.loc 1 1431 0 discriminator 3
 6189 007e 07F59C43 		add	r3, r7, #19968
 6190 0082 03F15F03 		add	r3, r3, #95
 6191 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6192 0088 07F59C42 		add	r2, r7, #19968
 6193 008c 02F12C02 		add	r2, r2, #44
 6194 0090 1344     		add	r3, r3, r2
 6195 0092 07F59C42 		add	r2, r7, #19968
 6196 0096 02F15F02 		add	r2, r2, #95
 6197 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6198 009c 0332     		adds	r2, r2, #3
 6199 009e 2B49     		ldr	r1, .L324+4
 6200 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 6201 00a2 1A70     		strb	r2, [r3]
1430:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6202              		.loc 1 1430 0 discriminator 3
 6203 00a4 07F59C43 		add	r3, r7, #19968
 6204 00a8 03F15F03 		add	r3, r3, #95
 6205 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6206 00ae 0133     		adds	r3, r3, #1
 6207 00b0 07F59C42 		add	r2, r7, #19968
 6208 00b4 02F15F02 		add	r2, r2, #95
 6209 00b8 1370     		strb	r3, [r2]
 6210              	.L320:
1430:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6211              		.loc 1 1430 0 is_stmt 0 discriminator 1
 6212 00ba 07F59C43 		add	r3, r7, #19968
 6213 00be 03F15F03 		add	r3, r3, #95
 6214 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6215 00c4 9AB2     		uxth	r2, r3
 6216 00c6 07F16003 		add	r3, r7, #96
 6217 00ca 5A3B     		subs	r3, r3, #90
 6218 00cc 1B88     		ldrh	r3, [r3]
 6219 00ce 9342     		cmp	r3, r2
 6220 00d0 D5D8     		bhi	.L321
1432:..\src/command_processing.c ****     }
1433:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 6221              		.loc 1 1433 0 is_stmt 1
 6222 00d2 07F59C43 		add	r3, r7, #19968
 6223 00d6 03F15F03 		add	r3, r3, #95
 6224 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6225 00dc 07F59C42 		add	r2, r7, #19968
 6226 00e0 02F12C02 		add	r2, r2, #44
 6227 00e4 1344     		add	r3, r3, r2
 6228 00e6 0022     		movs	r2, #0
 6229 00e8 1A70     		strb	r2, [r3]
1434:..\src/command_processing.c ****      
1435:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1436:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 6230              		.loc 1 1436 0
 6231 00ea 07F59C43 		add	r3, r7, #19968
 6232 00ee 03F12C03 		add	r3, r3, #44
 6233 00f2 1749     		ldr	r1, .L324+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 153


 6234 00f4 1846     		mov	r0, r3
 6235 00f6 FFF7FEFF 		bl	strcmp
 6236 00fa 0346     		mov	r3, r0
 6237 00fc 002B     		cmp	r3, #0
 6238 00fe 0CD0     		beq	.L322
1437:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 6239              		.loc 1 1437 0
 6240 0100 07F16003 		add	r3, r7, #96
 6241 0104 543B     		subs	r3, r3, #84
 6242 0106 07F59C40 		add	r0, r7, #19968
 6243 010a 00F12C00 		add	r0, r0, #44
 6244 010e 44F62062 		movw	r2, #20000
 6245 0112 1946     		mov	r1, r3
 6246 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 6247 0118 07E0     		b	.L323
 6248              	.L322:
1438:..\src/command_processing.c ****     }
1439:..\src/command_processing.c ****     else {
1440:..\src/command_processing.c ****         //It is the currently open working file
1441:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 6249              		.loc 1 1441 0
 6250 011a 07F16003 		add	r3, r7, #96
 6251 011e 543B     		subs	r3, r3, #84
 6252 0120 44F62061 		movw	r1, #20000
 6253 0124 1846     		mov	r0, r3
 6254 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 6255              	.L323:
1442:..\src/command_processing.c ****     }
1443:..\src/command_processing.c **** 
1444:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
1445:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1446:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 6256              		.loc 1 1446 0
 6257 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1447:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 6258              		.loc 1 1447 0
 6259 012e 07F16003 		add	r3, r7, #96
 6260 0132 543B     		subs	r3, r3, #84
 6261 0134 1846     		mov	r0, r3
 6262 0136 FFF7FEFF 		bl	UART_RS485_PutString
1448:..\src/command_processing.c **** }
 6263              		.loc 1 1448 0
 6264 013a 00BF     		nop
 6265 013c 07F59C47 		add	r7, r7, #19968
 6266 0140 6037     		adds	r7, r7, #96
 6267              		.cfi_def_cfa_offset 8
 6268 0142 BD46     		mov	sp, r7
 6269              		.cfi_def_cfa_register 13
 6270              		@ sp needed
 6271 0144 80BD     		pop	{r7, pc}
 6272              	.L325:
 6273 0146 00BF     		.align	2
 6274              	.L324:
 6275 0148 00000000 		.word	.LC8
 6276 014c 00000000 		.word	g_rx
 6277 0150 00000000 		.word	sdFile
 6278              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 154


 6279              	.LFE118:
 6280              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 6281              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 6282              		.align	2
 6283              		.global	cmd_remove_SD_file
 6284              		.thumb
 6285              		.thumb_func
 6286              		.type	cmd_remove_SD_file, %function
 6287              	cmd_remove_SD_file:
 6288              	.LFB119:
1449:..\src/command_processing.c **** 
1450:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 6289              		.loc 1 1450 0
 6290              		.cfi_startproc
 6291              		@ args = 0, pretend = 0, frame = 8
 6292              		@ frame_needed = 1, uses_anonymous_args = 0
 6293              		@ link register save eliminated.
 6294 0000 80B4     		push	{r7}
 6295              		.cfi_def_cfa_offset 4
 6296              		.cfi_offset 7, -4
 6297 0002 83B0     		sub	sp, sp, #12
 6298              		.cfi_def_cfa_offset 16
 6299 0004 00AF     		add	r7, sp, #0
 6300              		.cfi_def_cfa_register 7
 6301 0006 0346     		mov	r3, r0
 6302 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1451:..\src/command_processing.c ****   
1452:..\src/command_processing.c **** }
 6303              		.loc 1 1452 0
 6304 000a 00BF     		nop
 6305 000c 0C37     		adds	r7, r7, #12
 6306              		.cfi_def_cfa_offset 4
 6307 000e BD46     		mov	sp, r7
 6308              		.cfi_def_cfa_register 13
 6309              		@ sp needed
 6310 0010 80BC     		pop	{r7}
 6311              		.cfi_restore 7
 6312              		.cfi_def_cfa_offset 0
 6313 0012 7047     		bx	lr
 6314              		.cfi_endproc
 6315              	.LFE119:
 6316              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 6317              		.global	__aeabi_i2f
 6318              		.global	__aeabi_ddiv
 6319              		.global	__aeabi_dmul
 6320              		.global	__aeabi_d2iz
 6321              		.section	.text.vibrotactile_control,"ax",%progbits
 6322              		.align	2
 6323              		.global	vibrotactile_control
 6324              		.thumb
 6325              		.thumb_func
 6326              		.type	vibrotactile_control, %function
 6327              	vibrotactile_control:
 6328              	.LFB120:
1453:..\src/command_processing.c **** 
1454:..\src/command_processing.c **** //==============================================================================
1455:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 155


1456:..\src/command_processing.c **** //==============================================================================
1457:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1458:..\src/command_processing.c **** 
1459:..\src/command_processing.c **** void vibrotactile_control() {
 6329              		.loc 1 1459 0
 6330              		.cfi_startproc
 6331              		@ args = 0, pretend = 0, frame = 8
 6332              		@ frame_needed = 1, uses_anonymous_args = 0
 6333 0000 90B5     		push	{r4, r7, lr}
 6334              		.cfi_def_cfa_offset 12
 6335              		.cfi_offset 4, -12
 6336              		.cfi_offset 7, -8
 6337              		.cfi_offset 14, -4
 6338 0002 83B0     		sub	sp, sp, #12
 6339              		.cfi_def_cfa_offset 24
 6340 0004 00AF     		add	r7, sp, #0
 6341              		.cfi_def_cfa_register 7
1460:..\src/command_processing.c ****     
1461:..\src/command_processing.c ****     uint8 i;
1462:..\src/command_processing.c ****     
1463:..\src/command_processing.c ****     commReadIMUFromSH();    
 6342              		.loc 1 1463 0
 6343 0006 FFF7FEFF 		bl	commReadIMUFromSH
1464:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1465:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1466:..\src/command_processing.c ****     
1467:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 6344              		.loc 1 1467 0
 6345 000a 4B4B     		ldr	r3, .L335
 6346 000c B3F90030 		ldrsh	r3, [r3]
 6347 0010 1846     		mov	r0, r3
 6348 0012 FFF7FEFF 		bl	__aeabi_i2f
 6349 0016 0346     		mov	r3, r0
 6350 0018 1846     		mov	r0, r3
 6351 001a FFF7FEFF 		bl	__aeabi_f2d
 6352 001e 4FF00002 		mov	r2, #0
 6353 0022 464B     		ldr	r3, .L335+4
 6354 0024 FFF7FEFF 		bl	__aeabi_ddiv
 6355 0028 0346     		mov	r3, r0
 6356 002a 0C46     		mov	r4, r1
 6357 002c 1846     		mov	r0, r3
 6358 002e 2146     		mov	r1, r4
 6359 0030 4FF00002 		mov	r2, #0
 6360 0034 424B     		ldr	r3, .L335+8
 6361 0036 FFF7FEFF 		bl	__aeabi_dmul
 6362 003a 0346     		mov	r3, r0
 6363 003c 0C46     		mov	r4, r1
 6364 003e 1846     		mov	r0, r3
 6365 0040 2146     		mov	r1, r4
 6366 0042 FFF7FEFF 		bl	__aeabi_d2iz
 6367 0046 0346     		mov	r3, r0
 6368 0048 1AB2     		sxth	r2, r3
 6369 004a 3B4B     		ldr	r3, .L335
 6370 004c 1A80     		strh	r2, [r3]	@ movhi
1468:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_VT_PWM) PWM_IMU_1 = MAX_VT_PWM;
 6371              		.loc 1 1468 0
 6372 004e 3A4B     		ldr	r3, .L335
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 156


 6373 0050 B3F90030 		ldrsh	r3, [r3]
 6374 0054 642B     		cmp	r3, #100
 6375 0056 02DD     		ble	.L328
 6376              		.loc 1 1468 0 is_stmt 0 discriminator 1
 6377 0058 374B     		ldr	r3, .L335
 6378 005a 6422     		movs	r2, #100
 6379 005c 1A80     		strh	r2, [r3]	@ movhi
 6380              	.L328:
1469:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_VT_PWM) PWM_IMU_1 = 0;
 6381              		.loc 1 1469 0 is_stmt 1
 6382 005e 364B     		ldr	r3, .L335
 6383 0060 B3F90030 		ldrsh	r3, [r3]
 6384 0064 092B     		cmp	r3, #9
 6385 0066 02DC     		bgt	.L329
 6386              		.loc 1 1469 0 is_stmt 0 discriminator 1
 6387 0068 334B     		ldr	r3, .L335
 6388 006a 0022     		movs	r2, #0
 6389 006c 1A80     		strh	r2, [r3]	@ movhi
 6390              	.L329:
1470:..\src/command_processing.c ****     
1471:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 6391              		.loc 1 1471 0 is_stmt 1
 6392 006e 354B     		ldr	r3, .L335+12
 6393 0070 B3F90030 		ldrsh	r3, [r3]
 6394 0074 1846     		mov	r0, r3
 6395 0076 FFF7FEFF 		bl	__aeabi_i2f
 6396 007a 0346     		mov	r3, r0
 6397 007c 1846     		mov	r0, r3
 6398 007e FFF7FEFF 		bl	__aeabi_f2d
 6399 0082 4FF00002 		mov	r2, #0
 6400 0086 2D4B     		ldr	r3, .L335+4
 6401 0088 FFF7FEFF 		bl	__aeabi_ddiv
 6402 008c 0346     		mov	r3, r0
 6403 008e 0C46     		mov	r4, r1
 6404 0090 1846     		mov	r0, r3
 6405 0092 2146     		mov	r1, r4
 6406 0094 4FF00002 		mov	r2, #0
 6407 0098 294B     		ldr	r3, .L335+8
 6408 009a FFF7FEFF 		bl	__aeabi_dmul
 6409 009e 0346     		mov	r3, r0
 6410 00a0 0C46     		mov	r4, r1
 6411 00a2 1846     		mov	r0, r3
 6412 00a4 2146     		mov	r1, r4
 6413 00a6 FFF7FEFF 		bl	__aeabi_d2iz
 6414 00aa 0346     		mov	r3, r0
 6415 00ac 1AB2     		sxth	r2, r3
 6416 00ae 254B     		ldr	r3, .L335+12
 6417 00b0 1A80     		strh	r2, [r3]	@ movhi
1472:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_VT_PWM) PWM_IMU_2 = MAX_VT_PWM;
 6418              		.loc 1 1472 0
 6419 00b2 244B     		ldr	r3, .L335+12
 6420 00b4 B3F90030 		ldrsh	r3, [r3]
 6421 00b8 642B     		cmp	r3, #100
 6422 00ba 02DD     		ble	.L330
 6423              		.loc 1 1472 0 is_stmt 0 discriminator 1
 6424 00bc 214B     		ldr	r3, .L335+12
 6425 00be 6422     		movs	r2, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 157


 6426 00c0 1A80     		strh	r2, [r3]	@ movhi
 6427              	.L330:
1473:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_VT_PWM) PWM_IMU_2 = 0;
 6428              		.loc 1 1473 0 is_stmt 1
 6429 00c2 204B     		ldr	r3, .L335+12
 6430 00c4 B3F90030 		ldrsh	r3, [r3]
 6431 00c8 092B     		cmp	r3, #9
 6432 00ca 02DC     		bgt	.L331
 6433              		.loc 1 1473 0 is_stmt 0 discriminator 1
 6434 00cc 1D4B     		ldr	r3, .L335+12
 6435 00ce 0022     		movs	r2, #0
 6436 00d0 1A80     		strh	r2, [r3]	@ movhi
 6437              	.L331:
1474:..\src/command_processing.c ****     
1475:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6438              		.loc 1 1475 0 is_stmt 1
 6439 00d2 194B     		ldr	r3, .L335
 6440 00d4 B3F90030 		ldrsh	r3, [r3]
 6441 00d8 DAB2     		uxtb	r2, r3
 6442 00da 1B4B     		ldr	r3, .L335+16
 6443 00dc 1A70     		strb	r2, [r3]
1476:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6444              		.loc 1 1476 0
 6445 00de 194B     		ldr	r3, .L335+12
 6446 00e0 B3F90030 		ldrsh	r3, [r3]
 6447 00e4 DAB2     		uxtb	r2, r3
 6448 00e6 184B     		ldr	r3, .L335+16
 6449 00e8 5A70     		strb	r2, [r3, #1]
1477:..\src/command_processing.c ****     
1478:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6450              		.loc 1 1478 0
 6451 00ea 134B     		ldr	r3, .L335
 6452 00ec B3F90030 		ldrsh	r3, [r3]
 6453 00f0 DAB2     		uxtb	r2, r3
 6454 00f2 154B     		ldr	r3, .L335+16
 6455 00f4 1A70     		strb	r2, [r3]
1479:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6456              		.loc 1 1479 0
 6457 00f6 134B     		ldr	r3, .L335+12
 6458 00f8 B3F90030 		ldrsh	r3, [r3]
 6459 00fc DAB2     		uxtb	r2, r3
 6460 00fe 124B     		ldr	r3, .L335+16
 6461 0100 5A70     		strb	r2, [r3, #1]
1480:..\src/command_processing.c **** 
1481:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 6462              		.loc 1 1481 0
 6463 0102 0023     		movs	r3, #0
 6464 0104 FB71     		strb	r3, [r7, #7]
 6465 0106 0FE0     		b	.L332
 6466              	.L334:
1482:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6467              		.loc 1 1482 0
 6468 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6469 010a 1846     		mov	r0, r3
 6470 010c FFF7FEFF 		bl	vibrotactile_control_generic
1483:..\src/command_processing.c ****         
1484:..\src/command_processing.c ****         if (interrupt_flag){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 158


 6471              		.loc 1 1484 0
 6472 0110 0E4B     		ldr	r3, .L335+20
 6473 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6474 0114 002B     		cmp	r3, #0
 6475 0116 04D0     		beq	.L333
1485:..\src/command_processing.c ****             interrupt_flag = FALSE;
 6476              		.loc 1 1485 0
 6477 0118 0C4B     		ldr	r3, .L335+20
 6478 011a 0022     		movs	r2, #0
 6479 011c 1A70     		strb	r2, [r3]
1486:..\src/command_processing.c ****             interrupt_manager();
 6480              		.loc 1 1486 0
 6481 011e FFF7FEFF 		bl	interrupt_manager
 6482              	.L333:
1481:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6483              		.loc 1 1481 0 discriminator 2
 6484 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6485 0124 0133     		adds	r3, r3, #1
 6486 0126 FB71     		strb	r3, [r7, #7]
 6487              	.L332:
1481:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6488              		.loc 1 1481 0 is_stmt 0 discriminator 1
 6489 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6490 012a 012B     		cmp	r3, #1
 6491 012c ECD9     		bls	.L334
1487:..\src/command_processing.c ****         }
1488:..\src/command_processing.c ****     } 
1489:..\src/command_processing.c **** }
 6492              		.loc 1 1489 0 is_stmt 1
 6493 012e 00BF     		nop
 6494 0130 0C37     		adds	r7, r7, #12
 6495              		.cfi_def_cfa_offset 12
 6496 0132 BD46     		mov	sp, r7
 6497              		.cfi_def_cfa_register 13
 6498              		@ sp needed
 6499 0134 90BD     		pop	{r4, r7, pc}
 6500              	.L336:
 6501 0136 00BF     		.align	2
 6502              	.L335:
 6503 0138 00000000 		.word	PWM_IMU_1
 6504 013c 00004940 		.word	1078525952
 6505 0140 00003E40 		.word	1077805056
 6506 0144 00000000 		.word	PWM_IMU_2
 6507 0148 00000000 		.word	VT_ref
 6508 014c 00000000 		.word	interrupt_flag
 6509              		.cfi_endproc
 6510              	.LFE120:
 6511              		.size	vibrotactile_control, .-vibrotactile_control
 6512              		.global	__aeabi_i2d
 6513              		.global	__aeabi_dsub
 6514              		.global	__aeabi_dadd
 6515              		.global	__aeabi_fcmpgt
 6516              		.global	__aeabi_f2iz
 6517              		.global	__aeabi_fmul
 6518              		.section	.text.air_chambers_control,"ax",%progbits
 6519              		.align	2
 6520              		.global	air_chambers_control
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 159


 6521              		.thumb
 6522              		.thumb_func
 6523              		.type	air_chambers_control, %function
 6524              	air_chambers_control:
 6525              	.LFB121:
1490:..\src/command_processing.c **** 
1491:..\src/command_processing.c **** 
1492:..\src/command_processing.c **** //==============================================================================
1493:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1494:..\src/command_processing.c **** //==============================================================================
1495:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1496:..\src/command_processing.c **** 
1497:..\src/command_processing.c **** 
1498:..\src/command_processing.c **** void air_chambers_control() {
 6526              		.loc 1 1498 0
 6527              		.cfi_startproc
 6528              		@ args = 0, pretend = 0, frame = 16
 6529              		@ frame_needed = 1, uses_anonymous_args = 0
 6530 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 6531              		.cfi_def_cfa_offset 24
 6532              		.cfi_offset 4, -24
 6533              		.cfi_offset 5, -20
 6534              		.cfi_offset 7, -16
 6535              		.cfi_offset 8, -12
 6536              		.cfi_offset 9, -8
 6537              		.cfi_offset 14, -4
 6538 0004 84B0     		sub	sp, sp, #16
 6539              		.cfi_def_cfa_offset 40
 6540 0006 00AF     		add	r7, sp, #0
 6541              		.cfi_def_cfa_register 7
1499:..\src/command_processing.c **** 
1500:..\src/command_processing.c ****     int16 curr_diff;
1501:..\src/command_processing.c ****     int32 pressure_reference;
1502:..\src/command_processing.c ****     int32 err_pressure;
1503:..\src/command_processing.c ****     int32 valve_command;
1504:..\src/command_processing.c ****     int16 x_value;
1505:..\src/command_processing.c **** 
1506:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1507:..\src/command_processing.c ****     
1508:..\src/command_processing.c ****     curr_diff = commReadResCurrFromSH();
 6542              		.loc 1 1508 0
 6543 0008 FFF7FEFF 		bl	commReadResCurrFromSH
 6544 000c 0346     		mov	r3, r0
 6545 000e BB80     		strh	r3, [r7, #4]	@ movhi
1509:..\src/command_processing.c **** 
1510:..\src/command_processing.c ****     // Compute pressure reference
1511:..\src/command_processing.c **** 
1512:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 6546              		.loc 1 1512 0
 6547 0010 B7F90430 		ldrsh	r3, [r7, #4]
 6548 0014 1846     		mov	r0, r3
 6549 0016 FFF7FEFF 		bl	__aeabi_i2d
 6550 001a 4FF00002 		mov	r2, #0
 6551 001e 574B     		ldr	r3, .L347
 6552 0020 FFF7FEFF 		bl	__aeabi_dsub
 6553 0024 0346     		mov	r3, r0
 6554 0026 0C46     		mov	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 160


 6555 0028 1846     		mov	r0, r3
 6556 002a 2146     		mov	r1, r4
 6557 002c FFF7FEFF 		bl	__aeabi_d2iz
 6558 0030 0346     		mov	r3, r0
 6559 0032 FB80     		strh	r3, [r7, #6]	@ movhi
1513:..\src/command_processing.c ****     if (x_value < 0)
 6560              		.loc 1 1513 0
 6561 0034 B7F90630 		ldrsh	r3, [r7, #6]
 6562 0038 002B     		cmp	r3, #0
 6563 003a 01DA     		bge	.L338
1514:..\src/command_processing.c ****         x_value = 0;
 6564              		.loc 1 1514 0
 6565 003c 0023     		movs	r3, #0
 6566 003e FB80     		strh	r3, [r7, #6]	@ movhi
 6567              	.L338:
1515:..\src/command_processing.c ****     
1516:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 6568              		.loc 1 1516 0
 6569 0040 B7F90630 		ldrsh	r3, [r7, #6]
 6570 0044 1846     		mov	r0, r3
 6571 0046 FFF7FEFF 		bl	__aeabi_i2d
 6572 004a 4FF00002 		mov	r2, #0
 6573 004e 4C4B     		ldr	r3, .L347+4
 6574 0050 FFF7FEFF 		bl	__aeabi_dmul
 6575 0054 0346     		mov	r3, r0
 6576 0056 0C46     		mov	r4, r1
 6577 0058 2546     		mov	r5, r4
 6578 005a 1C46     		mov	r4, r3
 6579 005c B7F90630 		ldrsh	r3, [r7, #6]
 6580 0060 1846     		mov	r0, r3
 6581 0062 FFF7FEFF 		bl	__aeabi_i2d
 6582 0066 0246     		mov	r2, r0
 6583 0068 0B46     		mov	r3, r1
 6584 006a 2046     		mov	r0, r4
 6585 006c 2946     		mov	r1, r5
 6586 006e FFF7FEFF 		bl	__aeabi_dmul
 6587 0072 0346     		mov	r3, r0
 6588 0074 0C46     		mov	r4, r1
 6589 0076 2546     		mov	r5, r4
 6590 0078 1C46     		mov	r4, r3
 6591 007a 424B     		ldr	r3, .L347+8
 6592 007c 1B6D     		ldr	r3, [r3, #80]
 6593 007e 1846     		mov	r0, r3
 6594 0080 FFF7FEFF 		bl	__aeabi_i2d
 6595 0084 4FF00002 		mov	r2, #0
 6596 0088 3F4B     		ldr	r3, .L347+12
 6597 008a FFF7FEFF 		bl	__aeabi_dmul
 6598 008e 0246     		mov	r2, r0
 6599 0090 0B46     		mov	r3, r1
 6600 0092 9046     		mov	r8, r2
 6601 0094 9946     		mov	r9, r3
 6602 0096 B7F90630 		ldrsh	r3, [r7, #6]
 6603 009a 1846     		mov	r0, r3
 6604 009c FFF7FEFF 		bl	__aeabi_i2d
 6605 00a0 0246     		mov	r2, r0
 6606 00a2 0B46     		mov	r3, r1
 6607 00a4 4046     		mov	r0, r8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 161


 6608 00a6 4946     		mov	r1, r9
 6609 00a8 FFF7FEFF 		bl	__aeabi_dmul
 6610 00ac 0246     		mov	r2, r0
 6611 00ae 0B46     		mov	r3, r1
 6612 00b0 2046     		mov	r0, r4
 6613 00b2 2946     		mov	r1, r5
 6614 00b4 FFF7FEFF 		bl	__aeabi_dadd
 6615 00b8 0346     		mov	r3, r0
 6616 00ba 0C46     		mov	r4, r1
 6617 00bc 1846     		mov	r0, r3
 6618 00be 2146     		mov	r1, r4
 6619 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 6620 00c4 0146     		mov	r1, r0
 6621 00c6 2F4B     		ldr	r3, .L347+8
 6622 00c8 1B6D     		ldr	r3, [r3, #80]
 6623 00ca 2E4A     		ldr	r2, .L347+8
 6624 00cc 126D     		ldr	r2, [r2, #80]
 6625 00ce 02FB03F3 		mul	r3, r2, r3
 6626 00d2 91FBF3F3 		sdiv	r3, r1, r3
 6627 00d6 FB60     		str	r3, [r7, #12]
1517:..\src/command_processing.c ****     if (pressure_reference < 0)
 6628              		.loc 1 1517 0
 6629 00d8 FB68     		ldr	r3, [r7, #12]
 6630 00da 002B     		cmp	r3, #0
 6631 00dc 01DA     		bge	.L339
1518:..\src/command_processing.c ****         pressure_reference = 0;
 6632              		.loc 1 1518 0
 6633 00de 0023     		movs	r3, #0
 6634 00e0 FB60     		str	r3, [r7, #12]
 6635              	.L339:
1519:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 6636              		.loc 1 1519 0
 6637 00e2 F868     		ldr	r0, [r7, #12]
 6638 00e4 FFF7FEFF 		bl	__aeabi_i2f
 6639 00e8 0246     		mov	r2, r0
 6640 00ea 264B     		ldr	r3, .L347+8
 6641 00ec 5B6D     		ldr	r3, [r3, #84]	@ float
 6642 00ee 1946     		mov	r1, r3
 6643 00f0 1046     		mov	r0, r2
 6644 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 6645 00f6 0346     		mov	r3, r0
 6646 00f8 002B     		cmp	r3, #0
 6647 00fa 06D0     		beq	.L340
1520:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 6648              		.loc 1 1520 0
 6649 00fc 214B     		ldr	r3, .L347+8
 6650 00fe 5B6D     		ldr	r3, [r3, #84]	@ float
 6651 0100 1846     		mov	r0, r3
 6652 0102 FFF7FEFF 		bl	__aeabi_f2iz
 6653 0106 0346     		mov	r3, r0
 6654 0108 FB60     		str	r3, [r7, #12]
 6655              	.L340:
1521:..\src/command_processing.c ****     
1522:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 6656              		.loc 1 1522 0
 6657 010a 204B     		ldr	r3, .L347+16
 6658 010c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 162


 6659 010e FA68     		ldr	r2, [r7, #12]
 6660 0110 D31A     		subs	r3, r2, r3
 6661 0112 3B60     		str	r3, [r7]
1523:..\src/command_processing.c **** 
1524:..\src/command_processing.c ****     if (x_value <= 0){
 6662              		.loc 1 1524 0
 6663 0114 B7F90630 		ldrsh	r3, [r7, #6]
 6664 0118 002B     		cmp	r3, #0
 6665 011a 02DC     		bgt	.L342
1525:..\src/command_processing.c ****         //i.e the hand is opening
1526:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 6666              		.loc 1 1526 0
 6667 011c 0023     		movs	r3, #0
 6668 011e BB60     		str	r3, [r7, #8]
 6669 0120 01E0     		b	.L343
 6670              	.L342:
1527:..\src/command_processing.c ****     }
1528:..\src/command_processing.c ****     else {
1529:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1530:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1531:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1532:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
 6671              		.loc 1 1532 0
 6672 0122 0123     		movs	r3, #1
 6673 0124 BB60     		str	r3, [r7, #8]
 6674              	.L343:
1533:..\src/command_processing.c ****     }
1534:..\src/command_processing.c ****     
1535:..\src/command_processing.c ****     // Pump control*/
1536:..\src/command_processing.c ****    
1537:..\src/command_processing.c ****     Pump_refNew = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 6675              		.loc 1 1537 0
 6676 0126 174B     		ldr	r3, .L347+8
 6677 0128 9C6D     		ldr	r4, [r3, #88]	@ float
 6678 012a 3868     		ldr	r0, [r7]
 6679 012c FFF7FEFF 		bl	__aeabi_i2f
 6680 0130 0346     		mov	r3, r0
 6681 0132 1946     		mov	r1, r3
 6682 0134 2046     		mov	r0, r4
 6683 0136 FFF7FEFF 		bl	__aeabi_fmul
 6684 013a 0346     		mov	r3, r0
 6685 013c 1846     		mov	r0, r3
 6686 013e FFF7FEFF 		bl	__aeabi_f2iz
 6687 0142 0346     		mov	r3, r0
 6688 0144 DAB2     		uxtb	r2, r3
 6689 0146 124B     		ldr	r3, .L347+20
 6690 0148 1A70     		strb	r2, [r3]
1538:..\src/command_processing.c **** 
1539:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1540:..\src/command_processing.c ****     
1541:..\src/command_processing.c ****     // Limit output voltage
1542:..\src/command_processing.c ****     if (Pump_refNew > MAX_PUMP_PWM) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 6691              		.loc 1 1542 0
 6692 014a 114B     		ldr	r3, .L347+20
 6693 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6694 014e 502B     		cmp	r3, #80
 6695 0150 02D9     		bls	.L344
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 163


1543:..\src/command_processing.c ****         Pump_refNew = MAX_PUMP_PWM; // 80
 6696              		.loc 1 1543 0
 6697 0152 0F4B     		ldr	r3, .L347+20
 6698 0154 5022     		movs	r2, #80
 6699 0156 1A70     		strb	r2, [r3]
 6700              	.L344:
1544:..\src/command_processing.c ****     if (Pump_refNew < MIN_PUMP_PWM)
 6701              		.loc 1 1544 0
 6702 0158 0D4B     		ldr	r3, .L347+20
 6703 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6704 015c 132B     		cmp	r3, #19
 6705 015e 02D8     		bhi	.L345
1545:..\src/command_processing.c ****         Pump_refNew = 0;
 6706              		.loc 1 1545 0
 6707 0160 0B4B     		ldr	r3, .L347+20
 6708 0162 0022     		movs	r2, #0
 6709 0164 1A70     		strb	r2, [r3]
 6710              	.L345:
1546:..\src/command_processing.c ****         
1547:..\src/command_processing.c ****     VALVE_Write(valve_command);
 6711              		.loc 1 1547 0
 6712 0166 BB68     		ldr	r3, [r7, #8]
 6713 0168 DBB2     		uxtb	r3, r3
 6714 016a 1846     		mov	r0, r3
 6715 016c FFF7FEFF 		bl	VALVE_Write
1548:..\src/command_processing.c ****     
1549:..\src/command_processing.c ****     
1550:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1551:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1552:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1553:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1554:..\src/command_processing.c **** 
1555:..\src/command_processing.c **** }
 6716              		.loc 1 1555 0
 6717 0170 00BF     		nop
 6718 0172 1037     		adds	r7, r7, #16
 6719              		.cfi_def_cfa_offset 24
 6720 0174 BD46     		mov	sp, r7
 6721              		.cfi_def_cfa_register 13
 6722              		@ sp needed
 6723 0176 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 6724              	.L348:
 6725 017a 00BF     		.align	2
 6726              	.L347:
 6727 017c 00004940 		.word	1078525952
 6728 0180 00003EC0 		.word	-1069678592
 6729 0184 00000000 		.word	c_mem
 6730 0188 00804B40 		.word	1078689792
 6731 018c 00000000 		.word	pressure_value
 6732 0190 00000000 		.word	Pump_refNew
 6733              		.cfi_endproc
 6734              	.LFE121:
 6735              		.size	air_chambers_control, .-air_chambers_control
 6736              		.section	.text.pump_control,"ax",%progbits
 6737              		.align	2
 6738              		.global	pump_control
 6739              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 164


 6740              		.thumb_func
 6741              		.type	pump_control, %function
 6742              	pump_control:
 6743              	.LFB122:
1556:..\src/command_processing.c **** 
1557:..\src/command_processing.c **** void pump_control() {
 6744              		.loc 1 1557 0
 6745              		.cfi_startproc
 6746              		@ args = 0, pretend = 0, frame = 0
 6747              		@ frame_needed = 1, uses_anonymous_args = 0
 6748 0000 80B5     		push	{r7, lr}
 6749              		.cfi_def_cfa_offset 8
 6750              		.cfi_offset 7, -8
 6751              		.cfi_offset 14, -4
 6752 0002 00AF     		add	r7, sp, #0
 6753              		.cfi_def_cfa_register 7
1558:..\src/command_processing.c ****     if (Pump_ref > 100)
 6754              		.loc 1 1558 0
 6755 0004 064B     		ldr	r3, .L351
 6756 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6757 0008 642B     		cmp	r3, #100
 6758 000a 02D9     		bls	.L350
1559:..\src/command_processing.c ****         Pump_ref = 100;
 6759              		.loc 1 1559 0
 6760 000c 044B     		ldr	r3, .L351
 6761 000e 6422     		movs	r2, #100
 6762 0010 1A70     		strb	r2, [r3]
 6763              	.L350:
1560:..\src/command_processing.c ****     PWM_PUMP_WriteCompare(Pump_ref);
 6764              		.loc 1 1560 0
 6765 0012 034B     		ldr	r3, .L351
 6766 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6767 0016 1846     		mov	r0, r3
 6768 0018 FFF7FEFF 		bl	PWM_PUMP_WriteCompare
1561:..\src/command_processing.c **** }
 6769              		.loc 1 1561 0
 6770 001c 00BF     		nop
 6771 001e 80BD     		pop	{r7, pc}
 6772              	.L352:
 6773              		.align	2
 6774              	.L351:
 6775 0020 00000000 		.word	Pump_ref
 6776              		.cfi_endproc
 6777              	.LFE122:
 6778              		.size	pump_control, .-pump_control
 6779              		.section	.text.VT_control,"ax",%progbits
 6780              		.align	2
 6781              		.global	VT_control
 6782              		.thumb
 6783              		.thumb_func
 6784              		.type	VT_control, %function
 6785              	VT_control:
 6786              	.LFB123:
1562:..\src/command_processing.c **** 
1563:..\src/command_processing.c **** void VT_control() {
 6787              		.loc 1 1563 0
 6788              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 165


 6789              		@ args = 0, pretend = 0, frame = 0
 6790              		@ frame_needed = 1, uses_anonymous_args = 0
 6791 0000 80B5     		push	{r7, lr}
 6792              		.cfi_def_cfa_offset 8
 6793              		.cfi_offset 7, -8
 6794              		.cfi_offset 14, -4
 6795 0002 00AF     		add	r7, sp, #0
 6796              		.cfi_def_cfa_register 7
1564:..\src/command_processing.c ****     if (VT_ref[0] > 100)
 6797              		.loc 1 1564 0
 6798 0004 0D4B     		ldr	r3, .L356
 6799 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6800 0008 642B     		cmp	r3, #100
 6801 000a 02D9     		bls	.L354
1565:..\src/command_processing.c ****         VT_ref[0] = 100;
 6802              		.loc 1 1565 0
 6803 000c 0B4B     		ldr	r3, .L356
 6804 000e 6422     		movs	r2, #100
 6805 0010 1A70     		strb	r2, [r3]
 6806              	.L354:
1566:..\src/command_processing.c ****     PWM_VT_WriteCompare1(VT_ref[0]);
 6807              		.loc 1 1566 0
 6808 0012 0A4B     		ldr	r3, .L356
 6809 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6810 0016 9BB2     		uxth	r3, r3
 6811 0018 1846     		mov	r0, r3
 6812 001a FFF7FEFF 		bl	PWM_VT_WriteCompare1
1567:..\src/command_processing.c ****     if (VT_ref[1] > 100)
 6813              		.loc 1 1567 0
 6814 001e 074B     		ldr	r3, .L356
 6815 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6816 0022 642B     		cmp	r3, #100
 6817 0024 02D9     		bls	.L355
1568:..\src/command_processing.c ****         VT_ref[1] = 100;
 6818              		.loc 1 1568 0
 6819 0026 054B     		ldr	r3, .L356
 6820 0028 6422     		movs	r2, #100
 6821 002a 5A70     		strb	r2, [r3, #1]
 6822              	.L355:
1569:..\src/command_processing.c ****     PWM_VT_WriteCompare2(VT_ref[1]);
 6823              		.loc 1 1569 0
 6824 002c 034B     		ldr	r3, .L356
 6825 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6826 0030 9BB2     		uxth	r3, r3
 6827 0032 1846     		mov	r0, r3
 6828 0034 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1570:..\src/command_processing.c **** }
 6829              		.loc 1 1570 0
 6830 0038 00BF     		nop
 6831 003a 80BD     		pop	{r7, pc}
 6832              	.L357:
 6833              		.align	2
 6834              	.L356:
 6835 003c 00000000 		.word	VT_ref
 6836              		.cfi_endproc
 6837              	.LFE123:
 6838              		.size	VT_control, .-VT_control
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 166


 6839              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 6840              		.align	2
 6841              		.global	emg_activation_velocity_fsm
 6842              		.thumb
 6843              		.thumb_func
 6844              		.type	emg_activation_velocity_fsm, %function
 6845              	emg_activation_velocity_fsm:
 6846              	.LFB124:
1571:..\src/command_processing.c **** //==============================================================================
1572:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1573:..\src/command_processing.c **** //==============================================================================
1574:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1575:..\src/command_processing.c **** 
1576:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 6847              		.loc 1 1576 0
 6848              		.cfi_startproc
 6849              		@ args = 0, pretend = 0, frame = 0
 6850              		@ frame_needed = 1, uses_anonymous_args = 0
 6851              		@ link register save eliminated.
 6852 0000 80B4     		push	{r7}
 6853              		.cfi_def_cfa_offset 4
 6854              		.cfi_offset 7, -4
 6855 0002 00AF     		add	r7, sp, #0
 6856              		.cfi_def_cfa_register 7
1577:..\src/command_processing.c ****     
1578:..\src/command_processing.c **** return 0;
 6857              		.loc 1 1578 0
 6858 0004 0023     		movs	r3, #0
1579:..\src/command_processing.c **** }
 6859              		.loc 1 1579 0
 6860 0006 1846     		mov	r0, r3
 6861 0008 BD46     		mov	sp, r7
 6862              		.cfi_def_cfa_register 13
 6863              		@ sp needed
 6864 000a 80BC     		pop	{r7}
 6865              		.cfi_restore 7
 6866              		.cfi_def_cfa_offset 0
 6867 000c 7047     		bx	lr
 6868              		.cfi_endproc
 6869              	.LFE124:
 6870              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 6871 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 6872              		.align	2
 6873              		.global	otbk_act_wrist_control
 6874              		.thumb
 6875              		.thumb_func
 6876              		.type	otbk_act_wrist_control, %function
 6877              	otbk_act_wrist_control:
 6878              	.LFB125:
1580:..\src/command_processing.c **** 
1581:..\src/command_processing.c **** //==============================================================================
1582:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1583:..\src/command_processing.c **** //==============================================================================
1584:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1585:..\src/command_processing.c **** 
1586:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 6879              		.loc 1 1586 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 167


 6880              		.cfi_startproc
 6881              		@ args = 0, pretend = 0, frame = 8
 6882              		@ frame_needed = 1, uses_anonymous_args = 0
 6883              		@ link register save eliminated.
 6884 0000 80B4     		push	{r7}
 6885              		.cfi_def_cfa_offset 4
 6886              		.cfi_offset 7, -4
 6887 0002 83B0     		sub	sp, sp, #12
 6888              		.cfi_def_cfa_offset 16
 6889 0004 00AF     		add	r7, sp, #0
 6890              		.cfi_def_cfa_register 7
 6891 0006 7860     		str	r0, [r7, #4]
1587:..\src/command_processing.c ****     
1588:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1589:..\src/command_processing.c ****     
1590:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1591:..\src/command_processing.c ****         
1592:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
1593:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1594:..\src/command_processing.c ****     switch (fsm_state){
1595:..\src/command_processing.c ****         case RELAX_STATE:
1596:..\src/command_processing.c ****             
1597:..\src/command_processing.c ****             // Wrist stop
1598:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1599:..\src/command_processing.c ****             
1600:..\src/command_processing.c ****             // Softhand stop
1601:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1602:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1603:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1604:..\src/command_processing.c ****             
1605:..\src/command_processing.c ****             break;
1606:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1607:..\src/command_processing.c ****                 
1608:..\src/command_processing.c ****             break;
1609:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1610:..\src/command_processing.c ****             
1611:..\src/command_processing.c ****             // Wrist movement
1612:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1613:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1614:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1615:..\src/command_processing.c ****                 }
1616:..\src/command_processing.c ****                 else {
1617:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1618:..\src/command_processing.c ****                 }
1619:..\src/command_processing.c ****             }
1620:..\src/command_processing.c ****             else {
1621:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1622:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1623:..\src/command_processing.c ****                 }
1624:..\src/command_processing.c ****                 else {
1625:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1626:..\src/command_processing.c ****                 }
1627:..\src/command_processing.c ****             }
1628:..\src/command_processing.c ****             
1629:..\src/command_processing.c ****             // Softhand stop
1630:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1631:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 168


1632:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1633:..\src/command_processing.c ****             
1634:..\src/command_processing.c ****             break;
1635:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1636:..\src/command_processing.c ****             
1637:..\src/command_processing.c ****             // Wrist stop
1638:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1639:..\src/command_processing.c ****             
1640:..\src/command_processing.c ****             // SoftHand movement
1641:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1642:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1643:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1644:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1645:..\src/command_processing.c ****             
1646:..\src/command_processing.c ****             break;
1647:..\src/command_processing.c ****     }
1648:..\src/command_processing.c ****         
1649:..\src/command_processing.c ****     // Limit output voltage
1650:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1651:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1652:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1653:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1654:..\src/command_processing.c ****     
1655:..\src/command_processing.c **** #endif
1656:..\src/command_processing.c **** }
 6892              		.loc 1 1656 0
 6893 0008 00BF     		nop
 6894 000a 0C37     		adds	r7, r7, #12
 6895              		.cfi_def_cfa_offset 4
 6896 000c BD46     		mov	sp, r7
 6897              		.cfi_def_cfa_register 13
 6898              		@ sp needed
 6899 000e 80BC     		pop	{r7}
 6900              		.cfi_restore 7
 6901              		.cfi_def_cfa_offset 0
 6902 0010 7047     		bx	lr
 6903              		.cfi_endproc
 6904              	.LFE125:
 6905              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 6906 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 6907              		.align	2
 6908              		.global	drive_slave
 6909              		.thumb
 6910              		.thumb_func
 6911              		.type	drive_slave, %function
 6912              	drive_slave:
 6913              	.LFB126:
1657:..\src/command_processing.c **** 
1658:..\src/command_processing.c **** //==============================================================================
1659:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1660:..\src/command_processing.c **** //==============================================================================
1661:..\src/command_processing.c ****  
1662:..\src/command_processing.c **** //==============================================================================
1663:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1664:..\src/command_processing.c **** //==============================================================================
1665:..\src/command_processing.c ****  
1666:..\src/command_processing.c ****  
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 169


1667:..\src/command_processing.c **** void drive_slave( uint8 slave_ID) {
 6914              		.loc 1 1667 0
 6915              		.cfi_startproc
 6916              		@ args = 0, pretend = 0, frame = 24
 6917              		@ frame_needed = 1, uses_anonymous_args = 0
 6918 0000 90B5     		push	{r4, r7, lr}
 6919              		.cfi_def_cfa_offset 12
 6920              		.cfi_offset 4, -12
 6921              		.cfi_offset 7, -8
 6922              		.cfi_offset 14, -4
 6923 0002 87B0     		sub	sp, sp, #28
 6924              		.cfi_def_cfa_offset 40
 6925 0004 00AF     		add	r7, sp, #0
 6926              		.cfi_def_cfa_register 7
 6927 0006 0346     		mov	r3, r0
 6928 0008 FB71     		strb	r3, [r7, #7]
1668:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1669:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1670:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1671:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1672:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1673:..\src/command_processing.c **** 
1674:..\src/command_processing.c ****     uint8 packet_data[6];
1675:..\src/command_processing.c ****     uint8 packet_length;
1676:..\src/command_processing.c ****     int16 aux_int16;
1677:..\src/command_processing.c **** 
1678:..\src/command_processing.c ****        
1679:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
1680:..\src/command_processing.c ****     packet_data[0] = CMD_SET_INPUTS;
 6929              		.loc 1 1680 0
 6930 000a 8223     		movs	r3, #130
 6931 000c 3B74     		strb	r3, [r7, #16]
1681:..\src/command_processing.c ****     
1682:..\src/command_processing.c ****  //aux_int16 = (int16) motor_idx;
1683:..\src/command_processing.c ****    aux_int16 = (int16) (SH_ref >> g_mem.SH_config.res);
 6932              		.loc 1 1683 0
 6933 000e 1B4B     		ldr	r3, .L362
 6934 0010 1B68     		ldr	r3, [r3]
 6935 0012 1B4A     		ldr	r2, .L362+4
 6936 0014 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 6937 0018 1341     		asrs	r3, r3, r2
 6938 001a 1BB2     		sxth	r3, r3
 6939 001c FB81     		strh	r3, [r7, #14]	@ movhi
1684:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 6940              		.loc 1 1684 0
 6941 001e 07F10E03 		add	r3, r7, #14
 6942 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6943 0024 BB74     		strb	r3, [r7, #18]
1685:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 6944              		.loc 1 1685 0
 6945 0026 07F10E03 		add	r3, r7, #14
 6946 002a 0133     		adds	r3, r3, #1
 6947 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6948 002e 7B74     		strb	r3, [r7, #17]
1686:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
 6949              		.loc 1 1686 0
 6950 0030 07F11003 		add	r3, r7, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 170


 6951 0034 0333     		adds	r3, r3, #3
 6952 0036 0022     		movs	r2, #0
 6953 0038 1A80     		strh	r2, [r3]	@ movhi
1687:..\src/command_processing.c ****   //  packet_data[3] = (char*)0;
1688:..\src/command_processing.c ****    // packet_data[4] = (char*)0;
1689:..\src/command_processing.c ****     packet_length = 6;
 6954              		.loc 1 1689 0
 6955 003a 0623     		movs	r3, #6
 6956 003c FB75     		strb	r3, [r7, #23]
1690:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 6957              		.loc 1 1690 0
 6958 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6959 0040 5C1E     		subs	r4, r3, #1
 6960 0042 FB7D     		ldrb	r3, [r7, #23]
 6961 0044 013B     		subs	r3, r3, #1
 6962 0046 DAB2     		uxtb	r2, r3
 6963 0048 07F11003 		add	r3, r7, #16
 6964 004c 1146     		mov	r1, r2
 6965 004e 1846     		mov	r0, r3
 6966 0050 FFF7FEFF 		bl	LCRChecksum
 6967 0054 0346     		mov	r3, r0
 6968 0056 1A46     		mov	r2, r3
 6969 0058 07F11803 		add	r3, r7, #24
 6970 005c 2344     		add	r3, r3, r4
 6971 005e 03F8082C 		strb	r2, [r3, #-8]
1691:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, slave_ID);
 6972              		.loc 1 1691 0
 6973 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6974 0064 99B2     		uxth	r1, r3
 6975 0066 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6976 0068 07F11003 		add	r3, r7, #16
 6977 006c 1846     		mov	r0, r3
 6978 006e FFF7FEFF 		bl	commWriteID
1692:..\src/command_processing.c **** 
1693:..\src/command_processing.c **** }
 6979              		.loc 1 1693 0
 6980 0072 00BF     		nop
 6981 0074 1C37     		adds	r7, r7, #28
 6982              		.cfi_def_cfa_offset 12
 6983 0076 BD46     		mov	sp, r7
 6984              		.cfi_def_cfa_register 13
 6985              		@ sp needed
 6986 0078 90BD     		pop	{r4, r7, pc}
 6987              	.L363:
 6988 007a 00BF     		.align	2
 6989              	.L362:
 6990 007c 00000000 		.word	SH_ref
 6991 0080 00000000 		.word	g_mem
 6992              		.cfi_endproc
 6993              	.LFE126:
 6994              		.size	drive_slave, .-drive_slave
 6995              		.section	.text.stop_master_device,"ax",%progbits
 6996              		.align	2
 6997              		.global	stop_master_device
 6998              		.thumb
 6999              		.thumb_func
 7000              		.type	stop_master_device, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 171


 7001              	stop_master_device:
 7002              	.LFB127:
1694:..\src/command_processing.c **** //==============================================================================
1695:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1696:..\src/command_processing.c **** //==============================================================================
1697:..\src/command_processing.c ****  
1698:..\src/command_processing.c **** void stop_master_device() {
 7003              		.loc 1 1698 0
 7004              		.cfi_startproc
 7005              		@ args = 0, pretend = 0, frame = 0
 7006              		@ frame_needed = 1, uses_anonymous_args = 0
 7007 0000 80B5     		push	{r7, lr}
 7008              		.cfi_def_cfa_offset 8
 7009              		.cfi_offset 7, -8
 7010              		.cfi_offset 14, -4
 7011 0002 00AF     		add	r7, sp, #0
 7012              		.cfi_def_cfa_register 7
1699:..\src/command_processing.c ****     
1700:..\src/command_processing.c ****         // Stop pump and open valve
1701:..\src/command_processing.c ****         Pump_ref = 0;    
 7013              		.loc 1 1701 0
 7014 0004 074B     		ldr	r3, .L365
 7015 0006 0022     		movs	r2, #0
 7016 0008 1A70     		strb	r2, [r3]
1702:..\src/command_processing.c ****         VALVE_Write(OPEN);
 7017              		.loc 1 1702 0
 7018 000a 0020     		movs	r0, #0
 7019 000c FFF7FEFF 		bl	VALVE_Write
1703:..\src/command_processing.c ****         master_mode = 0; 
 7020              		.loc 1 1703 0
 7021 0010 054B     		ldr	r3, .L365+4
 7022 0012 0022     		movs	r2, #0
 7023 0014 1A70     		strb	r2, [r3]
1704:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 7024              		.loc 1 1704 0
 7025 0016 054B     		ldr	r3, .L365+8
 7026 0018 0022     		movs	r2, #0
 7027 001a 83F84020 		strb	r2, [r3, #64]
1705:..\src/command_processing.c **** 
1706:..\src/command_processing.c **** }
 7028              		.loc 1 1706 0
 7029 001e 00BF     		nop
 7030 0020 80BD     		pop	{r7, pc}
 7031              	.L366:
 7032 0022 00BF     		.align	2
 7033              	.L365:
 7034 0024 00000000 		.word	Pump_ref
 7035 0028 00000000 		.word	master_mode
 7036 002c 00000000 		.word	g_mem
 7037              		.cfi_endproc
 7038              	.LFE127:
 7039              		.size	stop_master_device, .-stop_master_device
 7040              		.section	.text.deactivate_slaves,"ax",%progbits
 7041              		.align	2
 7042              		.global	deactivate_slaves
 7043              		.thumb
 7044              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 172


 7045              		.type	deactivate_slaves, %function
 7046              	deactivate_slaves:
 7047              	.LFB128:
1707:..\src/command_processing.c **** 
1708:..\src/command_processing.c **** //==============================================================================
1709:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1710:..\src/command_processing.c **** //==============================================================================
1711:..\src/command_processing.c ****  
1712:..\src/command_processing.c **** void deactivate_slaves() {
 7048              		.loc 1 1712 0
 7049              		.cfi_startproc
 7050              		@ args = 0, pretend = 0, frame = 0
 7051              		@ frame_needed = 1, uses_anonymous_args = 0
 7052              		@ link register save eliminated.
 7053 0000 80B4     		push	{r7}
 7054              		.cfi_def_cfa_offset 4
 7055              		.cfi_offset 7, -4
 7056 0002 00AF     		add	r7, sp, #0
 7057              		.cfi_def_cfa_register 7
1713:..\src/command_processing.c ****    
1714:..\src/command_processing.c **** }
 7058              		.loc 1 1714 0
 7059 0004 00BF     		nop
 7060 0006 BD46     		mov	sp, r7
 7061              		.cfi_def_cfa_register 13
 7062              		@ sp needed
 7063 0008 80BC     		pop	{r7}
 7064              		.cfi_restore 7
 7065              		.cfi_def_cfa_offset 0
 7066 000a 7047     		bx	lr
 7067              		.cfi_endproc
 7068              	.LFE128:
 7069              		.size	deactivate_slaves, .-deactivate_slaves
 7070              		.bss
 7071              		.align	1
 7072              	i.10044:
 7073 0000 0000     		.space	2
 7074 0002 0000     		.align	2
 7075              	last_aux_int16.10114:
 7076 0004 00000000 		.space	6
 7076      0000
 7077              		.text
 7078              	.Letext0:
 7079              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7080              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7081              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 7082              		.file 6 "..\\src\\commands.h"
 7083              		.file 7 "..\\src\\globals.h"
 7084              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 7085              		.section	.debug_info,"",%progbits
 7086              	.Ldebug_info0:
 7087 0000 24180000 		.4byte	0x1824
 7088 0004 0400     		.2byte	0x4
 7089 0006 00000000 		.4byte	.Ldebug_abbrev0
 7090 000a 04       		.byte	0x4
 7091 000b 01       		.uleb128 0x1
 7092 000c 40080000 		.4byte	.LASF304
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 173


 7093 0010 0C       		.byte	0xc
 7094 0011 E1100000 		.4byte	.LASF305
 7095 0015 44060000 		.4byte	.LASF306
 7096 0019 00000000 		.4byte	.Ldebug_ranges0+0
 7097 001d 00000000 		.4byte	0
 7098 0021 00000000 		.4byte	.Ldebug_line0
 7099 0025 02       		.uleb128 0x2
 7100 0026 01       		.byte	0x1
 7101 0027 06       		.byte	0x6
 7102 0028 60030000 		.4byte	.LASF0
 7103 002c 02       		.uleb128 0x2
 7104 002d 01       		.byte	0x1
 7105 002e 08       		.byte	0x8
 7106 002f BF030000 		.4byte	.LASF1
 7107 0033 02       		.uleb128 0x2
 7108 0034 02       		.byte	0x2
 7109 0035 05       		.byte	0x5
 7110 0036 B00E0000 		.4byte	.LASF2
 7111 003a 02       		.uleb128 0x2
 7112 003b 02       		.byte	0x2
 7113 003c 07       		.byte	0x7
 7114 003d 4A100000 		.4byte	.LASF3
 7115 0041 03       		.uleb128 0x3
 7116 0042 AD100000 		.4byte	.LASF5
 7117 0046 03       		.byte	0x3
 7118 0047 3F       		.byte	0x3f
 7119 0048 4C000000 		.4byte	0x4c
 7120 004c 02       		.uleb128 0x2
 7121 004d 04       		.byte	0x4
 7122 004e 05       		.byte	0x5
 7123 004f 55020000 		.4byte	.LASF4
 7124 0053 03       		.uleb128 0x3
 7125 0054 F3080000 		.4byte	.LASF6
 7126 0058 03       		.byte	0x3
 7127 0059 41       		.byte	0x41
 7128 005a 5E000000 		.4byte	0x5e
 7129 005e 02       		.uleb128 0x2
 7130 005f 04       		.byte	0x4
 7131 0060 07       		.byte	0x7
 7132 0061 FD060000 		.4byte	.LASF7
 7133 0065 02       		.uleb128 0x2
 7134 0066 08       		.byte	0x8
 7135 0067 05       		.byte	0x5
 7136 0068 FE080000 		.4byte	.LASF8
 7137 006c 02       		.uleb128 0x2
 7138 006d 08       		.byte	0x8
 7139 006e 07       		.byte	0x7
 7140 006f 1E0C0000 		.4byte	.LASF9
 7141 0073 04       		.uleb128 0x4
 7142 0074 04       		.byte	0x4
 7143 0075 05       		.byte	0x5
 7144 0076 696E7400 		.ascii	"int\000"
 7145 007a 02       		.uleb128 0x2
 7146 007b 04       		.byte	0x4
 7147 007c 07       		.byte	0x7
 7148 007d 040A0000 		.4byte	.LASF10
 7149 0081 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 174


 7150 0082 6C000000 		.4byte	.LASF11
 7151 0086 04       		.byte	0x4
 7152 0087 2C       		.byte	0x2c
 7153 0088 41000000 		.4byte	0x41
 7154 008c 03       		.uleb128 0x3
 7155 008d AF0F0000 		.4byte	.LASF12
 7156 0091 04       		.byte	0x4
 7157 0092 30       		.byte	0x30
 7158 0093 53000000 		.4byte	0x53
 7159 0097 05       		.uleb128 0x5
 7160 0098 9E0E0000 		.4byte	.LASF13
 7161 009c 05       		.byte	0x5
 7162 009d E401     		.2byte	0x1e4
 7163 009f 2C000000 		.4byte	0x2c
 7164 00a3 05       		.uleb128 0x5
 7165 00a4 35110000 		.4byte	.LASF14
 7166 00a8 05       		.byte	0x5
 7167 00a9 E501     		.2byte	0x1e5
 7168 00ab 3A000000 		.4byte	0x3a
 7169 00af 05       		.uleb128 0x5
 7170 00b0 8D000000 		.4byte	.LASF15
 7171 00b4 05       		.byte	0x5
 7172 00b5 E601     		.2byte	0x1e6
 7173 00b7 5E000000 		.4byte	0x5e
 7174 00bb 05       		.uleb128 0x5
 7175 00bc 7B010000 		.4byte	.LASF16
 7176 00c0 05       		.byte	0x5
 7177 00c1 E701     		.2byte	0x1e7
 7178 00c3 25000000 		.4byte	0x25
 7179 00c7 05       		.uleb128 0x5
 7180 00c8 6B0F0000 		.4byte	.LASF17
 7181 00cc 05       		.byte	0x5
 7182 00cd E801     		.2byte	0x1e8
 7183 00cf 33000000 		.4byte	0x33
 7184 00d3 05       		.uleb128 0x5
 7185 00d4 93100000 		.4byte	.LASF18
 7186 00d8 05       		.byte	0x5
 7187 00d9 E901     		.2byte	0x1e9
 7188 00db 4C000000 		.4byte	0x4c
 7189 00df 02       		.uleb128 0x2
 7190 00e0 04       		.byte	0x4
 7191 00e1 04       		.byte	0x4
 7192 00e2 A4090000 		.4byte	.LASF19
 7193 00e6 02       		.uleb128 0x2
 7194 00e7 08       		.byte	0x8
 7195 00e8 04       		.byte	0x4
 7196 00e9 64090000 		.4byte	.LASF20
 7197 00ed 02       		.uleb128 0x2
 7198 00ee 01       		.byte	0x1
 7199 00ef 08       		.byte	0x8
 7200 00f0 5C040000 		.4byte	.LASF21
 7201 00f4 05       		.uleb128 0x5
 7202 00f5 D60C0000 		.4byte	.LASF22
 7203 00f9 05       		.byte	0x5
 7204 00fa 8E02     		.2byte	0x28e
 7205 00fc 00010000 		.4byte	0x100
 7206 0100 06       		.uleb128 0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 175


 7207 0101 97000000 		.4byte	0x97
 7208 0105 02       		.uleb128 0x2
 7209 0106 08       		.byte	0x8
 7210 0107 04       		.byte	0x4
 7211 0108 880B0000 		.4byte	.LASF23
 7212 010c 02       		.uleb128 0x2
 7213 010d 04       		.byte	0x4
 7214 010e 07       		.byte	0x7
 7215 010f 20000000 		.4byte	.LASF24
 7216 0113 07       		.uleb128 0x7
 7217 0114 04       		.byte	0x4
 7218 0115 ED000000 		.4byte	0xed
 7219 0119 07       		.uleb128 0x7
 7220 011a 04       		.byte	0x4
 7221 011b 1F010000 		.4byte	0x11f
 7222 011f 08       		.uleb128 0x8
 7223 0120 ED000000 		.4byte	0xed
 7224 0124 09       		.uleb128 0x9
 7225 0125 06060000 		.4byte	.LASF43
 7226 0129 01       		.byte	0x1
 7227 012a 2C000000 		.4byte	0x2c
 7228 012e 06       		.byte	0x6
 7229 012f 43       		.byte	0x43
 7230 0130 A1010000 		.4byte	0x1a1
 7231 0134 0A       		.uleb128 0xa
 7232 0135 0B110000 		.4byte	.LASF25
 7233 0139 01       		.byte	0x1
 7234 013a 0A       		.uleb128 0xa
 7235 013b 1F0F0000 		.4byte	.LASF26
 7236 013f 02       		.byte	0x2
 7237 0140 0A       		.uleb128 0xa
 7238 0141 1F030000 		.4byte	.LASF27
 7239 0145 03       		.byte	0x3
 7240 0146 0A       		.uleb128 0xa
 7241 0147 8B0F0000 		.4byte	.LASF28
 7242 014b 04       		.byte	0x4
 7243 014c 0A       		.uleb128 0xa
 7244 014d EC010000 		.4byte	.LASF29
 7245 0151 05       		.byte	0x5
 7246 0152 0A       		.uleb128 0xa
 7247 0153 9C070000 		.4byte	.LASF30
 7248 0157 06       		.byte	0x6
 7249 0158 0A       		.uleb128 0xa
 7250 0159 BA0E0000 		.4byte	.LASF31
 7251 015d 07       		.byte	0x7
 7252 015e 0A       		.uleb128 0xa
 7253 015f 2B040000 		.4byte	.LASF32
 7254 0163 08       		.byte	0x8
 7255 0164 0A       		.uleb128 0xa
 7256 0165 FE000000 		.4byte	.LASF33
 7257 0169 09       		.byte	0x9
 7258 016a 0A       		.uleb128 0xa
 7259 016b AB040000 		.4byte	.LASF34
 7260 016f 0A       		.byte	0xa
 7261 0170 0A       		.uleb128 0xa
 7262 0171 7D0F0000 		.4byte	.LASF35
 7263 0175 0B       		.byte	0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 176


 7264 0176 0A       		.uleb128 0xa
 7265 0177 F6020000 		.4byte	.LASF36
 7266 017b 0C       		.byte	0xc
 7267 017c 0A       		.uleb128 0xa
 7268 017d 5E020000 		.4byte	.LASF37
 7269 0181 0D       		.byte	0xd
 7270 0182 0A       		.uleb128 0xa
 7271 0183 4E0A0000 		.4byte	.LASF38
 7272 0187 0E       		.byte	0xe
 7273 0188 0A       		.uleb128 0xa
 7274 0189 B8010000 		.4byte	.LASF39
 7275 018d 0F       		.byte	0xf
 7276 018e 0A       		.uleb128 0xa
 7277 018f FC0A0000 		.4byte	.LASF40
 7278 0193 10       		.byte	0x10
 7279 0194 0A       		.uleb128 0xa
 7280 0195 50030000 		.4byte	.LASF41
 7281 0199 11       		.byte	0x11
 7282 019a 0A       		.uleb128 0xa
 7283 019b 540B0000 		.4byte	.LASF42
 7284 019f 12       		.byte	0x12
 7285 01a0 00       		.byte	0
 7286 01a1 09       		.uleb128 0x9
 7287 01a2 3A050000 		.4byte	.LASF44
 7288 01a6 01       		.byte	0x1
 7289 01a7 2C000000 		.4byte	0x2c
 7290 01ab 06       		.byte	0x6
 7291 01ac 5A       		.byte	0x5a
 7292 01ad 00020000 		.4byte	0x200
 7293 01b1 0A       		.uleb128 0xa
 7294 01b2 460D0000 		.4byte	.LASF45
 7295 01b6 00       		.byte	0
 7296 01b7 0A       		.uleb128 0xa
 7297 01b8 4E000000 		.4byte	.LASF46
 7298 01bc 01       		.byte	0x1
 7299 01bd 0A       		.uleb128 0xa
 7300 01be B5030000 		.4byte	.LASF47
 7301 01c2 02       		.byte	0x2
 7302 01c3 0A       		.uleb128 0xa
 7303 01c4 09000000 		.4byte	.LASF48
 7304 01c8 03       		.byte	0x3
 7305 01c9 0A       		.uleb128 0xa
 7306 01ca 740A0000 		.4byte	.LASF49
 7307 01ce 04       		.byte	0x4
 7308 01cf 0A       		.uleb128 0xa
 7309 01d0 710F0000 		.4byte	.LASF50
 7310 01d4 05       		.byte	0x5
 7311 01d5 0A       		.uleb128 0xa
 7312 01d6 2C0D0000 		.4byte	.LASF51
 7313 01da 06       		.byte	0x6
 7314 01db 0A       		.uleb128 0xa
 7315 01dc 8A040000 		.4byte	.LASF52
 7316 01e0 07       		.byte	0x7
 7317 01e1 0A       		.uleb128 0xa
 7318 01e2 3C0C0000 		.4byte	.LASF53
 7319 01e6 08       		.byte	0x8
 7320 01e7 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 177


 7321 01e8 01080000 		.4byte	.LASF54
 7322 01ec 09       		.byte	0x9
 7323 01ed 0A       		.uleb128 0xa
 7324 01ee 44050000 		.4byte	.LASF55
 7325 01f2 0A       		.byte	0xa
 7326 01f3 0A       		.uleb128 0xa
 7327 01f4 E30D0000 		.4byte	.LASF56
 7328 01f8 0B       		.byte	0xb
 7329 01f9 0A       		.uleb128 0xa
 7330 01fa 39060000 		.4byte	.LASF57
 7331 01fe 0C       		.byte	0xc
 7332 01ff 00       		.byte	0
 7333 0200 09       		.uleb128 0x9
 7334 0201 320A0000 		.4byte	.LASF58
 7335 0205 01       		.byte	0x1
 7336 0206 2C000000 		.4byte	0x2c
 7337 020a 06       		.byte	0x6
 7338 020b 69       		.byte	0x69
 7339 020c DD020000 		.4byte	0x2dd
 7340 0210 0A       		.uleb128 0xa
 7341 0211 4D110000 		.4byte	.LASF59
 7342 0215 00       		.byte	0
 7343 0216 0A       		.uleb128 0xa
 7344 0217 F00E0000 		.4byte	.LASF60
 7345 021b 01       		.byte	0x1
 7346 021c 0A       		.uleb128 0xa
 7347 021d EC060000 		.4byte	.LASF61
 7348 0221 03       		.byte	0x3
 7349 0222 0A       		.uleb128 0xa
 7350 0223 12040000 		.4byte	.LASF62
 7351 0227 04       		.byte	0x4
 7352 0228 0A       		.uleb128 0xa
 7353 0229 190D0000 		.4byte	.LASF63
 7354 022d 05       		.byte	0x5
 7355 022e 0A       		.uleb128 0xa
 7356 022f DC070000 		.4byte	.LASF64
 7357 0233 06       		.byte	0x6
 7358 0234 0A       		.uleb128 0xa
 7359 0235 0F070000 		.4byte	.LASF65
 7360 0239 09       		.byte	0x9
 7361 023a 0A       		.uleb128 0xa
 7362 023b 29000000 		.4byte	.LASF66
 7363 023f 0A       		.byte	0xa
 7364 0240 0A       		.uleb128 0xa
 7365 0241 4D0F0000 		.4byte	.LASF67
 7366 0245 0C       		.byte	0xc
 7367 0246 0A       		.uleb128 0xa
 7368 0247 C00B0000 		.4byte	.LASF68
 7369 024b 0D       		.byte	0xd
 7370 024c 0A       		.uleb128 0xa
 7371 024d 05040000 		.4byte	.LASF69
 7372 0251 80       		.byte	0x80
 7373 0252 0A       		.uleb128 0xa
 7374 0253 4B040000 		.4byte	.LASF70
 7375 0257 81       		.byte	0x81
 7376 0258 0A       		.uleb128 0xa
 7377 0259 50050000 		.4byte	.LASF71
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 178


 7378 025d 82       		.byte	0x82
 7379 025e 0A       		.uleb128 0xa
 7380 025f D00E0000 		.4byte	.LASF72
 7381 0263 83       		.byte	0x83
 7382 0264 0A       		.uleb128 0xa
 7383 0265 4C0E0000 		.4byte	.LASF73
 7384 0269 84       		.byte	0x84
 7385 026a 0A       		.uleb128 0xa
 7386 026b B6020000 		.4byte	.LASF74
 7387 026f 85       		.byte	0x85
 7388 0270 0A       		.uleb128 0xa
 7389 0271 2A080000 		.4byte	.LASF75
 7390 0275 86       		.byte	0x86
 7391 0276 0A       		.uleb128 0xa
 7392 0277 B7070000 		.4byte	.LASF76
 7393 027b 88       		.byte	0x88
 7394 027c 0A       		.uleb128 0xa
 7395 027d 3A0F0000 		.4byte	.LASF77
 7396 0281 89       		.byte	0x89
 7397 0282 0A       		.uleb128 0xa
 7398 0283 700C0000 		.4byte	.LASF78
 7399 0287 8B       		.byte	0x8b
 7400 0288 0A       		.uleb128 0xa
 7401 0289 420B0000 		.4byte	.LASF79
 7402 028d 8C       		.byte	0x8c
 7403 028e 0A       		.uleb128 0xa
 7404 028f DF080000 		.4byte	.LASF80
 7405 0293 8E       		.byte	0x8e
 7406 0294 0A       		.uleb128 0xa
 7407 0295 CD030000 		.4byte	.LASF81
 7408 0299 FB       		.byte	0xfb
 7409 029a 0A       		.uleb128 0xa
 7410 029b E9030000 		.4byte	.LASF82
 7411 029f FA       		.byte	0xfa
 7412 02a0 0A       		.uleb128 0xa
 7413 02a1 B50C0000 		.4byte	.LASF83
 7414 02a5 90       		.byte	0x90
 7415 02a6 0A       		.uleb128 0xa
 7416 02a7 FB010000 		.4byte	.LASF84
 7417 02ab 92       		.byte	0x92
 7418 02ac 0A       		.uleb128 0xa
 7419 02ad 14100000 		.4byte	.LASF85
 7420 02b1 A1       		.byte	0xa1
 7421 02b2 0A       		.uleb128 0xa
 7422 02b3 1B0E0000 		.4byte	.LASF86
 7423 02b7 A2       		.byte	0xa2
 7424 02b8 0A       		.uleb128 0xa
 7425 02b9 A70A0000 		.4byte	.LASF87
 7426 02bd A3       		.byte	0xa3
 7427 02be 0A       		.uleb128 0xa
 7428 02bf 2D0E0000 		.4byte	.LASF88
 7429 02c3 A4       		.byte	0xa4
 7430 02c4 0A       		.uleb128 0xa
 7431 02c5 DF0E0000 		.4byte	.LASF89
 7432 02c9 A5       		.byte	0xa5
 7433 02ca 0A       		.uleb128 0xa
 7434 02cb EC0D0000 		.4byte	.LASF90
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 179


 7435 02cf A6       		.byte	0xa6
 7436 02d0 0A       		.uleb128 0xa
 7437 02d1 6B090000 		.4byte	.LASF91
 7438 02d5 A7       		.byte	0xa7
 7439 02d6 0A       		.uleb128 0xa
 7440 02d7 B3090000 		.4byte	.LASF92
 7441 02db A8       		.byte	0xa8
 7442 02dc 00       		.byte	0
 7443 02dd 09       		.uleb128 0x9
 7444 02de FD100000 		.4byte	.LASF93
 7445 02e2 01       		.byte	0x1
 7446 02e3 2C000000 		.4byte	0x2c
 7447 02e7 06       		.byte	0x6
 7448 02e8 BB       		.byte	0xbb
 7449 02e9 1E030000 		.4byte	0x31e
 7450 02ed 0A       		.uleb128 0xa
 7451 02ee D7050000 		.4byte	.LASF94
 7452 02f2 00       		.byte	0
 7453 02f3 0A       		.uleb128 0xa
 7454 02f4 870A0000 		.4byte	.LASF95
 7455 02f8 01       		.byte	0x1
 7456 02f9 0A       		.uleb128 0xa
 7457 02fa 0C020000 		.4byte	.LASF96
 7458 02fe 02       		.byte	0x2
 7459 02ff 0A       		.uleb128 0xa
 7460 0300 53010000 		.4byte	.LASF97
 7461 0304 03       		.byte	0x3
 7462 0305 0A       		.uleb128 0xa
 7463 0306 11010000 		.4byte	.LASF98
 7464 030a 04       		.byte	0x4
 7465 030b 0A       		.uleb128 0xa
 7466 030c 36000000 		.4byte	.LASF99
 7467 0310 05       		.byte	0x5
 7468 0311 0A       		.uleb128 0xa
 7469 0312 2B070000 		.4byte	.LASF100
 7470 0316 06       		.byte	0x6
 7471 0317 0A       		.uleb128 0xa
 7472 0318 FC0D0000 		.4byte	.LASF101
 7473 031c 07       		.byte	0x7
 7474 031d 00       		.byte	0
 7475 031e 09       		.uleb128 0x9
 7476 031f E60B0000 		.4byte	.LASF102
 7477 0323 01       		.byte	0x1
 7478 0324 2C000000 		.4byte	0x2c
 7479 0328 06       		.byte	0x6
 7480 0329 DE       		.byte	0xde
 7481 032a 3B030000 		.4byte	0x33b
 7482 032e 0A       		.uleb128 0xa
 7483 032f CD050000 		.4byte	.LASF103
 7484 0333 00       		.byte	0
 7485 0334 0A       		.uleb128 0xa
 7486 0335 7D070000 		.4byte	.LASF104
 7487 0339 01       		.byte	0x1
 7488 033a 00       		.byte	0
 7489 033b 09       		.uleb128 0x9
 7490 033c 600F0000 		.4byte	.LASF105
 7491 0340 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 180


 7492 0341 2C000000 		.4byte	0x2c
 7493 0345 06       		.byte	0x6
 7494 0346 E6       		.byte	0xe6
 7495 0347 88030000 		.4byte	0x388
 7496 034b 0A       		.uleb128 0xa
 7497 034c 84070000 		.4byte	.LASF106
 7498 0350 00       		.byte	0
 7499 0351 0A       		.uleb128 0xa
 7500 0352 1A110000 		.4byte	.LASF107
 7501 0356 01       		.byte	0x1
 7502 0357 0A       		.uleb128 0xa
 7503 0358 2A090000 		.4byte	.LASF108
 7504 035c 02       		.byte	0x2
 7505 035d 0A       		.uleb128 0xa
 7506 035e 1E0B0000 		.4byte	.LASF109
 7507 0362 03       		.byte	0x3
 7508 0363 0A       		.uleb128 0xa
 7509 0364 3D0A0000 		.4byte	.LASF110
 7510 0368 04       		.byte	0x4
 7511 0369 0A       		.uleb128 0xa
 7512 036a 460C0000 		.4byte	.LASF111
 7513 036e 05       		.byte	0x5
 7514 036f 0A       		.uleb128 0xa
 7515 0370 940B0000 		.4byte	.LASF112
 7516 0374 06       		.byte	0x6
 7517 0375 0A       		.uleb128 0xa
 7518 0376 F10A0000 		.4byte	.LASF113
 7519 037a 07       		.byte	0x7
 7520 037b 0A       		.uleb128 0xa
 7521 037c 93050000 		.4byte	.LASF114
 7522 0380 08       		.byte	0x8
 7523 0381 0A       		.uleb128 0xa
 7524 0382 E0060000 		.4byte	.LASF115
 7525 0386 09       		.byte	0x9
 7526 0387 00       		.byte	0
 7527 0388 0B       		.uleb128 0xb
 7528 0389 79000000 		.4byte	.LASF119
 7529 038d 86       		.byte	0x86
 7530 038e 07       		.byte	0x7
 7531 038f 9B       		.byte	0x9b
 7532 0390 C5030000 		.4byte	0x3c5
 7533 0394 0C       		.uleb128 0xc
 7534 0395 66050000 		.4byte	.LASF116
 7535 0399 07       		.byte	0x7
 7536 039a 9C       		.byte	0x9c
 7537 039b C5030000 		.4byte	0x3c5
 7538 039f 00       		.byte	0
 7539 03a0 0C       		.uleb128 0xc
 7540 03a1 5C0C0000 		.4byte	.LASF117
 7541 03a5 07       		.byte	0x7
 7542 03a6 9D       		.byte	0x9d
 7543 03a7 C7000000 		.4byte	0xc7
 7544 03ab 80       		.byte	0x80
 7545 03ac 0D       		.uleb128 0xd
 7546 03ad 696E6400 		.ascii	"ind\000"
 7547 03b1 07       		.byte	0x7
 7548 03b2 9E       		.byte	0x9e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 181


 7549 03b3 C7000000 		.4byte	0xc7
 7550 03b7 82       		.byte	0x82
 7551 03b8 0C       		.uleb128 0xc
 7552 03b9 DD010000 		.4byte	.LASF118
 7553 03bd 07       		.byte	0x7
 7554 03be 9F       		.byte	0x9f
 7555 03bf 97000000 		.4byte	0x97
 7556 03c3 84       		.byte	0x84
 7557 03c4 00       		.byte	0
 7558 03c5 0E       		.uleb128 0xe
 7559 03c6 97000000 		.4byte	0x97
 7560 03ca D5030000 		.4byte	0x3d5
 7561 03ce 0F       		.uleb128 0xf
 7562 03cf 0C010000 		.4byte	0x10c
 7563 03d3 7F       		.byte	0x7f
 7564 03d4 00       		.byte	0
 7565 03d5 0B       		.uleb128 0xb
 7566 03d6 06050000 		.4byte	.LASF120
 7567 03da 10       		.byte	0x10
 7568 03db 07       		.byte	0x7
 7569 03dc A9       		.byte	0xa9
 7570 03dd 05040000 		.4byte	0x405
 7571 03e1 0D       		.uleb128 0xd
 7572 03e2 696400   		.ascii	"id\000"
 7573 03e5 07       		.byte	0x7
 7574 03e6 AA       		.byte	0xaa
 7575 03e7 97000000 		.4byte	0x97
 7576 03eb 00       		.byte	0
 7577 03ec 0C       		.uleb128 0xc
 7578 03ed EA0F0000 		.4byte	.LASF121
 7579 03f1 07       		.byte	0x7
 7580 03f2 AB       		.byte	0xab
 7581 03f3 97000000 		.4byte	0x97
 7582 03f7 01       		.byte	0x1
 7583 03f8 0C       		.uleb128 0xc
 7584 03f9 89020000 		.4byte	.LASF122
 7585 03fd 07       		.byte	0x7
 7586 03fe AC       		.byte	0xac
 7587 03ff 05040000 		.4byte	0x405
 7588 0403 02       		.byte	0x2
 7589 0404 00       		.byte	0
 7590 0405 0E       		.uleb128 0xe
 7591 0406 97000000 		.4byte	0x97
 7592 040a 15040000 		.4byte	0x415
 7593 040e 0F       		.uleb128 0xf
 7594 040f 0C010000 		.4byte	0x10c
 7595 0413 0D       		.byte	0xd
 7596 0414 00       		.byte	0
 7597 0415 0B       		.uleb128 0xb
 7598 0416 0C090000 		.4byte	.LASF123
 7599 041a 10       		.byte	0x10
 7600 041b 07       		.byte	0x7
 7601 041c B3       		.byte	0xb3
 7602 041d 5E040000 		.4byte	0x45e
 7603 0421 0C       		.uleb128 0xc
 7604 0422 D9000000 		.4byte	.LASF124
 7605 0426 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 182


 7606 0427 B5       		.byte	0xb5
 7607 0428 D3000000 		.4byte	0xd3
 7608 042c 00       		.byte	0
 7609 042d 0C       		.uleb128 0xc
 7610 042e CD040000 		.4byte	.LASF125
 7611 0432 07       		.byte	0x7
 7612 0433 B6       		.byte	0xb6
 7613 0434 D3000000 		.4byte	0xd3
 7614 0438 04       		.byte	0x4
 7615 0439 0C       		.uleb128 0xc
 7616 043a AC070000 		.4byte	.LASF126
 7617 043e 07       		.byte	0x7
 7618 043f B7       		.byte	0xb7
 7619 0440 97000000 		.4byte	0x97
 7620 0444 08       		.byte	0x8
 7621 0445 0D       		.uleb128 0xd
 7622 0446 72657300 		.ascii	"res\000"
 7623 044a 07       		.byte	0x7
 7624 044b B8       		.byte	0xb8
 7625 044c 97000000 		.4byte	0x97
 7626 0450 09       		.byte	0x9
 7627 0451 0C       		.uleb128 0xc
 7628 0452 89020000 		.4byte	.LASF122
 7629 0456 07       		.byte	0x7
 7630 0457 B9       		.byte	0xb9
 7631 0458 5E040000 		.4byte	0x45e
 7632 045c 0A       		.byte	0xa
 7633 045d 00       		.byte	0
 7634 045e 0E       		.uleb128 0xe
 7635 045f 97000000 		.4byte	0x97
 7636 0463 6E040000 		.4byte	0x46e
 7637 0467 0F       		.uleb128 0xf
 7638 0468 0C010000 		.4byte	0x10c
 7639 046c 05       		.byte	0x5
 7640 046d 00       		.byte	0
 7641 046e 0B       		.uleb128 0xb
 7642 046f B1010000 		.4byte	.LASF127
 7643 0473 10       		.byte	0x10
 7644 0474 07       		.byte	0x7
 7645 0475 C1       		.byte	0xc1
 7646 0476 B7040000 		.4byte	0x4b7
 7647 047a 0C       		.uleb128 0xc
 7648 047b 340B0000 		.4byte	.LASF128
 7649 047f 07       		.byte	0x7
 7650 0480 C2       		.byte	0xc2
 7651 0481 B7040000 		.4byte	0x4b7
 7652 0485 00       		.byte	0
 7653 0486 0C       		.uleb128 0xc
 7654 0487 C1100000 		.4byte	.LASF129
 7655 048b 07       		.byte	0x7
 7656 048c C3       		.byte	0xc3
 7657 048d C7040000 		.4byte	0x4c7
 7658 0491 04       		.byte	0x4
 7659 0492 0C       		.uleb128 0xc
 7660 0493 F0040000 		.4byte	.LASF130
 7661 0497 07       		.byte	0x7
 7662 0498 C4       		.byte	0xc4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 183


 7663 0499 D7040000 		.4byte	0x4d7
 7664 049d 0C       		.byte	0xc
 7665 049e 0C       		.uleb128 0xc
 7666 049f 91030000 		.4byte	.LASF131
 7667 04a3 07       		.byte	0x7
 7668 04a4 C5       		.byte	0xc5
 7669 04a5 97000000 		.4byte	0x97
 7670 04a9 0E       		.byte	0xe
 7671 04aa 0C       		.uleb128 0xc
 7672 04ab 89020000 		.4byte	.LASF122
 7673 04af 07       		.byte	0x7
 7674 04b0 C6       		.byte	0xc6
 7675 04b1 E7040000 		.4byte	0x4e7
 7676 04b5 0F       		.byte	0xf
 7677 04b6 00       		.byte	0
 7678 04b7 0E       		.uleb128 0xe
 7679 04b8 A3000000 		.4byte	0xa3
 7680 04bc C7040000 		.4byte	0x4c7
 7681 04c0 0F       		.uleb128 0xf
 7682 04c1 0C010000 		.4byte	0x10c
 7683 04c5 01       		.byte	0x1
 7684 04c6 00       		.byte	0
 7685 04c7 0E       		.uleb128 0xe
 7686 04c8 AF000000 		.4byte	0xaf
 7687 04cc D7040000 		.4byte	0x4d7
 7688 04d0 0F       		.uleb128 0xf
 7689 04d1 0C010000 		.4byte	0x10c
 7690 04d5 01       		.byte	0x1
 7691 04d6 00       		.byte	0
 7692 04d7 0E       		.uleb128 0xe
 7693 04d8 97000000 		.4byte	0x97
 7694 04dc E7040000 		.4byte	0x4e7
 7695 04e0 0F       		.uleb128 0xf
 7696 04e1 0C010000 		.4byte	0x10c
 7697 04e5 01       		.byte	0x1
 7698 04e6 00       		.byte	0
 7699 04e7 0E       		.uleb128 0xe
 7700 04e8 97000000 		.4byte	0x97
 7701 04ec F7040000 		.4byte	0x4f7
 7702 04f0 0F       		.uleb128 0xf
 7703 04f1 0C010000 		.4byte	0x10c
 7704 04f5 00       		.byte	0
 7705 04f6 00       		.byte	0
 7706 04f7 0B       		.uleb128 0xb
 7707 04f8 3A010000 		.4byte	.LASF132
 7708 04fc 10       		.byte	0x10
 7709 04fd 07       		.byte	0x7
 7710 04fe CD       		.byte	0xcd
 7711 04ff 28050000 		.4byte	0x528
 7712 0503 0C       		.uleb128 0xc
 7713 0504 6C030000 		.4byte	.LASF133
 7714 0508 07       		.byte	0x7
 7715 0509 CE       		.byte	0xce
 7716 050a 97000000 		.4byte	0x97
 7717 050e 00       		.byte	0
 7718 050f 0C       		.uleb128 0xc
 7719 0510 74070000 		.4byte	.LASF134
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 184


 7720 0514 07       		.byte	0x7
 7721 0515 CF       		.byte	0xcf
 7722 0516 97000000 		.4byte	0x97
 7723 051a 01       		.byte	0x1
 7724 051b 0C       		.uleb128 0xc
 7725 051c 89020000 		.4byte	.LASF122
 7726 0520 07       		.byte	0x7
 7727 0521 D0       		.byte	0xd0
 7728 0522 05040000 		.4byte	0x405
 7729 0526 02       		.byte	0x2
 7730 0527 00       		.byte	0
 7731 0528 0B       		.uleb128 0xb
 7732 0529 A00B0000 		.4byte	.LASF135
 7733 052d 10       		.byte	0x10
 7734 052e 07       		.byte	0x7
 7735 052f D7       		.byte	0xd7
 7736 0530 7D050000 		.4byte	0x57d
 7737 0534 0C       		.uleb128 0xc
 7738 0535 6E100000 		.4byte	.LASF136
 7739 0539 07       		.byte	0x7
 7740 053a D8       		.byte	0xd8
 7741 053b D3000000 		.4byte	0xd3
 7742 053f 00       		.byte	0
 7743 0540 0C       		.uleb128 0xc
 7744 0541 F1050000 		.4byte	.LASF137
 7745 0545 07       		.byte	0x7
 7746 0546 D9       		.byte	0xd9
 7747 0547 DF000000 		.4byte	0xdf
 7748 054b 04       		.byte	0x4
 7749 054c 0C       		.uleb128 0xc
 7750 054d DB0C0000 		.4byte	.LASF138
 7751 0551 07       		.byte	0x7
 7752 0552 DA       		.byte	0xda
 7753 0553 DF000000 		.4byte	0xdf
 7754 0557 08       		.byte	0x8
 7755 0558 0C       		.uleb128 0xc
 7756 0559 0D080000 		.4byte	.LASF139
 7757 055d 07       		.byte	0x7
 7758 055e DB       		.byte	0xdb
 7759 055f 97000000 		.4byte	0x97
 7760 0563 0C       		.byte	0xc
 7761 0564 0C       		.uleb128 0xc
 7762 0565 610E0000 		.4byte	.LASF140
 7763 0569 07       		.byte	0x7
 7764 056a DC       		.byte	0xdc
 7765 056b 97000000 		.4byte	0x97
 7766 056f 0D       		.byte	0xd
 7767 0570 0C       		.uleb128 0xc
 7768 0571 89020000 		.4byte	.LASF122
 7769 0575 07       		.byte	0x7
 7770 0576 DD       		.byte	0xdd
 7771 0577 D7040000 		.4byte	0x4d7
 7772 057b 0E       		.byte	0xe
 7773 057c 00       		.byte	0
 7774 057d 0B       		.uleb128 0xb
 7775 057e 83100000 		.4byte	.LASF141
 7776 0582 60       		.byte	0x60
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 185


 7777 0583 07       		.byte	0x7
 7778 0584 E7       		.byte	0xe7
 7779 0585 DC050000 		.4byte	0x5dc
 7780 0589 0C       		.uleb128 0xc
 7781 058a 490A0000 		.4byte	.LASF142
 7782 058e 07       		.byte	0x7
 7783 058f E8       		.byte	0xe8
 7784 0590 97000000 		.4byte	0x97
 7785 0594 00       		.byte	0
 7786 0595 0C       		.uleb128 0xc
 7787 0596 89020000 		.4byte	.LASF122
 7788 059a 07       		.byte	0x7
 7789 059b E9       		.byte	0xe9
 7790 059c DC050000 		.4byte	0x5dc
 7791 05a0 01       		.byte	0x1
 7792 05a1 0D       		.uleb128 0xd
 7793 05a2 64657600 		.ascii	"dev\000"
 7794 05a6 07       		.byte	0x7
 7795 05a7 EA       		.byte	0xea
 7796 05a8 D5030000 		.4byte	0x3d5
 7797 05ac 10       		.byte	0x10
 7798 05ad 0C       		.uleb128 0xc
 7799 05ae 35090000 		.4byte	.LASF143
 7800 05b2 07       		.byte	0x7
 7801 05b3 EB       		.byte	0xeb
 7802 05b4 15040000 		.4byte	0x415
 7803 05b8 20       		.byte	0x20
 7804 05b9 0D       		.uleb128 0xd
 7805 05ba 656D6700 		.ascii	"emg\000"
 7806 05be 07       		.byte	0x7
 7807 05bf EC       		.byte	0xec
 7808 05c0 6E040000 		.4byte	0x46e
 7809 05c4 30       		.byte	0x30
 7810 05c5 0D       		.uleb128 0xd
 7811 05c6 4D5300   		.ascii	"MS\000"
 7812 05c9 07       		.byte	0x7
 7813 05ca ED       		.byte	0xed
 7814 05cb F7040000 		.4byte	0x4f7
 7815 05cf 40       		.byte	0x40
 7816 05d0 0D       		.uleb128 0xd
 7817 05d1 464200   		.ascii	"FB\000"
 7818 05d4 07       		.byte	0x7
 7819 05d5 EE       		.byte	0xee
 7820 05d6 28050000 		.4byte	0x528
 7821 05da 50       		.byte	0x50
 7822 05db 00       		.byte	0
 7823 05dc 0E       		.uleb128 0xe
 7824 05dd 97000000 		.4byte	0x97
 7825 05e1 EC050000 		.4byte	0x5ec
 7826 05e5 0F       		.uleb128 0xf
 7827 05e6 0C010000 		.4byte	0x10c
 7828 05ea 0E       		.byte	0xe
 7829 05eb 00       		.byte	0
 7830 05ec 10       		.uleb128 0x10
 7831 05ed 30020000 		.4byte	.LASF144
 7832 05f1 2C       		.byte	0x2c
 7833 05f2 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 186


 7834 05f3 3901     		.2byte	0x139
 7835 05f5 21060000 		.4byte	0x621
 7836 05f9 11       		.uleb128 0x11
 7837 05fa 470E0000 		.4byte	.LASF145
 7838 05fe 07       		.byte	0x7
 7839 05ff 3A01     		.2byte	0x13a
 7840 0601 97000000 		.4byte	0x97
 7841 0605 00       		.byte	0
 7842 0606 11       		.uleb128 0x11
 7843 0607 410E0000 		.4byte	.LASF146
 7844 060b 07       		.byte	0x7
 7845 060c 3B01     		.2byte	0x13b
 7846 060e 97000000 		.4byte	0x97
 7847 0612 01       		.byte	0x1
 7848 0613 11       		.uleb128 0x11
 7849 0614 EA000000 		.4byte	.LASF147
 7850 0618 07       		.byte	0x7
 7851 0619 3C01     		.2byte	0x13c
 7852 061b 21060000 		.4byte	0x621
 7853 061f 04       		.byte	0x4
 7854 0620 00       		.byte	0
 7855 0621 0E       		.uleb128 0xe
 7856 0622 19010000 		.4byte	0x119
 7857 0626 31060000 		.4byte	0x631
 7858 062a 0F       		.uleb128 0xf
 7859 062b 0C010000 		.4byte	0x10c
 7860 062f 09       		.byte	0x9
 7861 0630 00       		.byte	0
 7862 0631 10       		.uleb128 0x10
 7863 0632 93040000 		.4byte	.LASF148
 7864 0636 10       		.byte	0x10
 7865 0637 07       		.byte	0x7
 7866 0638 3F01     		.2byte	0x13f
 7867 063a A7060000 		.4byte	0x6a7
 7868 063e 11       		.uleb128 0x11
 7869 063f AB0D0000 		.4byte	.LASF149
 7870 0643 07       		.byte	0x7
 7871 0644 4001     		.2byte	0x140
 7872 0646 A7060000 		.4byte	0x6a7
 7873 064a 00       		.byte	0
 7874 064b 11       		.uleb128 0x11
 7875 064c 8D100000 		.4byte	.LASF150
 7876 0650 07       		.byte	0x7
 7877 0651 4101     		.2byte	0x141
 7878 0653 97000000 		.4byte	0x97
 7879 0657 04       		.byte	0x4
 7880 0658 11       		.uleb128 0x11
 7881 0659 96020000 		.4byte	.LASF151
 7882 065d 07       		.byte	0x7
 7883 065e 4201     		.2byte	0x142
 7884 0660 97000000 		.4byte	0x97
 7885 0664 05       		.byte	0x5
 7886 0665 11       		.uleb128 0x11
 7887 0666 49010000 		.4byte	.LASF152
 7888 066a 07       		.byte	0x7
 7889 066b 4301     		.2byte	0x143
 7890 066d 19010000 		.4byte	0x119
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 187


 7891 0671 08       		.byte	0x8
 7892 0672 11       		.uleb128 0x11
 7893 0673 FC070000 		.4byte	.LASF153
 7894 0677 07       		.byte	0x7
 7895 0678 4401     		.2byte	0x144
 7896 067a 97000000 		.4byte	0x97
 7897 067e 0C       		.byte	0xc
 7898 067f 11       		.uleb128 0x11
 7899 0680 BC0A0000 		.4byte	.LASF154
 7900 0684 07       		.byte	0x7
 7901 0685 4501     		.2byte	0x145
 7902 0687 97000000 		.4byte	0x97
 7903 068b 0D       		.byte	0xd
 7904 068c 11       		.uleb128 0x11
 7905 068d 350C0000 		.4byte	.LASF155
 7906 0691 07       		.byte	0x7
 7907 0692 4601     		.2byte	0x146
 7908 0694 97000000 		.4byte	0x97
 7909 0698 0E       		.byte	0xe
 7910 0699 11       		.uleb128 0x11
 7911 069a D7070000 		.4byte	.LASF156
 7912 069e 07       		.byte	0x7
 7913 069f 4701     		.2byte	0x147
 7914 06a1 97000000 		.4byte	0x97
 7915 06a5 0F       		.byte	0xf
 7916 06a6 00       		.byte	0
 7917 06a7 07       		.uleb128 0x7
 7918 06a8 04       		.byte	0x4
 7919 06a9 97000000 		.4byte	0x97
 7920 06ad 10       		.uleb128 0x10
 7921 06ae E0090000 		.4byte	.LASF157
 7922 06b2 0C       		.byte	0xc
 7923 06b3 07       		.byte	0x7
 7924 06b4 5C01     		.2byte	0x15c
 7925 06b6 D5060000 		.4byte	0x6d5
 7926 06ba 12       		.uleb128 0x12
 7927 06bb 656D6700 		.ascii	"emg\000"
 7928 06bf 07       		.byte	0x7
 7929 06c0 5D01     		.2byte	0x15d
 7930 06c2 D5060000 		.4byte	0x6d5
 7931 06c6 00       		.byte	0
 7932 06c7 11       		.uleb128 0x11
 7933 06c8 42040000 		.4byte	.LASF158
 7934 06cc 07       		.byte	0x7
 7935 06cd 5E01     		.2byte	0x15e
 7936 06cf DF000000 		.4byte	0xdf
 7937 06d3 08       		.byte	0x8
 7938 06d4 00       		.byte	0
 7939 06d5 0E       		.uleb128 0xe
 7940 06d6 D3000000 		.4byte	0xd3
 7941 06da E5060000 		.4byte	0x6e5
 7942 06de 0F       		.uleb128 0xf
 7943 06df 0C010000 		.4byte	0x10c
 7944 06e3 01       		.byte	0x1
 7945 06e4 00       		.byte	0
 7946 06e5 13       		.uleb128 0x13
 7947 06e6 A30D0000 		.4byte	.LASF307
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 188


 7948 06ea 02       		.byte	0x2
 7949 06eb 1403     		.2byte	0x314
 7950 06ed 8C000000 		.4byte	0x8c
 7951 06f1 03       		.byte	0x3
 7952 06f2 0F070000 		.4byte	0x70f
 7953 06f6 14       		.uleb128 0x14
 7954 06f7 3C040000 		.4byte	.LASF218
 7955 06fb 02       		.byte	0x2
 7956 06fc 1403     		.2byte	0x314
 7957 06fe 8C000000 		.4byte	0x8c
 7958 0702 15       		.uleb128 0x15
 7959 0703 D6010000 		.4byte	.LASF308
 7960 0707 02       		.byte	0x2
 7961 0708 1603     		.2byte	0x316
 7962 070a 8C000000 		.4byte	0x8c
 7963 070e 00       		.byte	0
 7964 070f 16       		.uleb128 0x16
 7965 0710 A40E0000 		.4byte	.LASF159
 7966 0714 01       		.byte	0x1
 7967 0715 3D       		.byte	0x3d
 7968 0716 00000000 		.4byte	.LFB64
 7969 071a BC050000 		.4byte	.LFE64-.LFB64
 7970 071e 01       		.uleb128 0x1
 7971 071f 9C       		.byte	0x9c
 7972 0720 17080000 		.4byte	0x817
 7973 0724 17       		.uleb128 0x17
 7974 0725 8C050000 		.4byte	.LASF161
 7975 0729 01       		.byte	0x1
 7976 072a 3F       		.byte	0x3f
 7977 072b 97000000 		.4byte	0x97
 7978 072f 02       		.uleb128 0x2
 7979 0730 91       		.byte	0x91
 7980 0731 77       		.sleb128 -9
 7981 0732 18       		.uleb128 0x18
 7982 0733 E5060000 		.4byte	0x6e5
 7983 0737 9A040000 		.4byte	.LBB12
 7984 073b 08000000 		.4byte	.LBE12-.LBB12
 7985 073f 01       		.byte	0x1
 7986 0740 A2       		.byte	0xa2
 7987 0741 60070000 		.4byte	0x760
 7988 0745 19       		.uleb128 0x19
 7989 0746 F6060000 		.4byte	0x6f6
 7990 074a 02       		.uleb128 0x2
 7991 074b 91       		.byte	0x91
 7992 074c 60       		.sleb128 -32
 7993 074d 1A       		.uleb128 0x1a
 7994 074e 9A040000 		.4byte	.LBB13
 7995 0752 08000000 		.4byte	.LBE13-.LBB13
 7996 0756 1B       		.uleb128 0x1b
 7997 0757 02070000 		.4byte	0x702
 7998 075b 02       		.uleb128 0x2
 7999 075c 91       		.byte	0x91
 8000 075d 5C       		.sleb128 -36
 8001 075e 00       		.byte	0
 8002 075f 00       		.byte	0
 8003 0760 18       		.uleb128 0x18
 8004 0761 E5060000 		.4byte	0x6e5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 189


 8005 0765 B8040000 		.4byte	.LBB14
 8006 0769 08000000 		.4byte	.LBE14-.LBB14
 8007 076d 01       		.byte	0x1
 8008 076e AE       		.byte	0xae
 8009 076f 8E070000 		.4byte	0x78e
 8010 0773 19       		.uleb128 0x19
 8011 0774 F6060000 		.4byte	0x6f6
 8012 0778 02       		.uleb128 0x2
 8013 0779 91       		.byte	0x91
 8014 077a 70       		.sleb128 -16
 8015 077b 1A       		.uleb128 0x1a
 8016 077c B8040000 		.4byte	.LBB15
 8017 0780 08000000 		.4byte	.LBE15-.LBB15
 8018 0784 1B       		.uleb128 0x1b
 8019 0785 02070000 		.4byte	0x702
 8020 0789 02       		.uleb128 0x2
 8021 078a 91       		.byte	0x91
 8022 078b 58       		.sleb128 -40
 8023 078c 00       		.byte	0
 8024 078d 00       		.byte	0
 8025 078e 18       		.uleb128 0x18
 8026 078f E5060000 		.4byte	0x6e5
 8027 0793 56050000 		.4byte	.LBB16
 8028 0797 08000000 		.4byte	.LBE16-.LBB16
 8029 079b 01       		.byte	0x1
 8030 079c F1       		.byte	0xf1
 8031 079d BC070000 		.4byte	0x7bc
 8032 07a1 19       		.uleb128 0x19
 8033 07a2 F6060000 		.4byte	0x6f6
 8034 07a6 02       		.uleb128 0x2
 8035 07a7 91       		.byte	0x91
 8036 07a8 6C       		.sleb128 -20
 8037 07a9 1A       		.uleb128 0x1a
 8038 07aa 56050000 		.4byte	.LBB17
 8039 07ae 08000000 		.4byte	.LBE17-.LBB17
 8040 07b2 1B       		.uleb128 0x1b
 8041 07b3 02070000 		.4byte	0x702
 8042 07b7 02       		.uleb128 0x2
 8043 07b8 91       		.byte	0x91
 8044 07b9 54       		.sleb128 -44
 8045 07ba 00       		.byte	0
 8046 07bb 00       		.byte	0
 8047 07bc 1C       		.uleb128 0x1c
 8048 07bd E5060000 		.4byte	0x6e5
 8049 07c1 86050000 		.4byte	.LBB18
 8050 07c5 08000000 		.4byte	.LBE18-.LBB18
 8051 07c9 01       		.byte	0x1
 8052 07ca 0F01     		.2byte	0x10f
 8053 07cc EB070000 		.4byte	0x7eb
 8054 07d0 19       		.uleb128 0x19
 8055 07d1 F6060000 		.4byte	0x6f6
 8056 07d5 02       		.uleb128 0x2
 8057 07d6 91       		.byte	0x91
 8058 07d7 68       		.sleb128 -24
 8059 07d8 1A       		.uleb128 0x1a
 8060 07d9 86050000 		.4byte	.LBB19
 8061 07dd 08000000 		.4byte	.LBE19-.LBB19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 190


 8062 07e1 1B       		.uleb128 0x1b
 8063 07e2 02070000 		.4byte	0x702
 8064 07e6 02       		.uleb128 0x2
 8065 07e7 91       		.byte	0x91
 8066 07e8 50       		.sleb128 -48
 8067 07e9 00       		.byte	0
 8068 07ea 00       		.byte	0
 8069 07eb 1D       		.uleb128 0x1d
 8070 07ec E5060000 		.4byte	0x6e5
 8071 07f0 9E050000 		.4byte	.LBB20
 8072 07f4 08000000 		.4byte	.LBE20-.LBB20
 8073 07f8 01       		.byte	0x1
 8074 07f9 1501     		.2byte	0x115
 8075 07fb 19       		.uleb128 0x19
 8076 07fc F6060000 		.4byte	0x6f6
 8077 0800 02       		.uleb128 0x2
 8078 0801 91       		.byte	0x91
 8079 0802 64       		.sleb128 -28
 8080 0803 1A       		.uleb128 0x1a
 8081 0804 9E050000 		.4byte	.LBB21
 8082 0808 08000000 		.4byte	.LBE21-.LBB21
 8083 080c 1B       		.uleb128 0x1b
 8084 080d 02070000 		.4byte	0x702
 8085 0811 02       		.uleb128 0x2
 8086 0812 91       		.byte	0x91
 8087 0813 4C       		.sleb128 -52
 8088 0814 00       		.byte	0
 8089 0815 00       		.byte	0
 8090 0816 00       		.byte	0
 8091 0817 1E       		.uleb128 0x1e
 8092 0818 00000000 		.4byte	.LASF160
 8093 081c 01       		.byte	0x1
 8094 081d 2301     		.2byte	0x123
 8095 081f 00000000 		.4byte	.LFB65
 8096 0823 22000000 		.4byte	.LFE65-.LFB65
 8097 0827 01       		.uleb128 0x1
 8098 0828 9C       		.byte	0x9c
 8099 0829 3E080000 		.4byte	0x83e
 8100 082d 1F       		.uleb128 0x1f
 8101 082e 9D040000 		.4byte	.LASF162
 8102 0832 01       		.byte	0x1
 8103 0833 2401     		.2byte	0x124
 8104 0835 3E080000 		.4byte	0x83e
 8105 0839 03       		.uleb128 0x3
 8106 083a 91       		.byte	0x91
 8107 083b 9C74     		.sleb128 -1508
 8108 083d 00       		.byte	0
 8109 083e 0E       		.uleb128 0xe
 8110 083f ED000000 		.4byte	0xed
 8111 0843 4F080000 		.4byte	0x84f
 8112 0847 20       		.uleb128 0x20
 8113 0848 0C010000 		.4byte	0x10c
 8114 084c DB05     		.2byte	0x5db
 8115 084e 00       		.byte	0
 8116 084f 21       		.uleb128 0x21
 8117 0850 1E070000 		.4byte	.LASF212
 8118 0854 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 191


 8119 0855 2D01     		.2byte	0x12d
 8120 0857 97000000 		.4byte	0x97
 8121 085b 00000000 		.4byte	.LFB66
 8122 085f 5E000000 		.4byte	.LFE66-.LFB66
 8123 0863 01       		.uleb128 0x1
 8124 0864 9C       		.byte	0x9c
 8125 0865 88080000 		.4byte	0x888
 8126 0869 22       		.uleb128 0x22
 8127 086a E5000000 		.4byte	.LASF164
 8128 086e 01       		.byte	0x1
 8129 086f 2D01     		.2byte	0x12d
 8130 0871 97000000 		.4byte	0x97
 8131 0875 02       		.uleb128 0x2
 8132 0876 91       		.byte	0x91
 8133 0877 6F       		.sleb128 -17
 8134 0878 23       		.uleb128 0x23
 8135 0879 736F6400 		.ascii	"sod\000"
 8136 087d 01       		.byte	0x1
 8137 087e 2E01     		.2byte	0x12e
 8138 0880 97000000 		.4byte	0x97
 8139 0884 02       		.uleb128 0x2
 8140 0885 91       		.byte	0x91
 8141 0886 77       		.sleb128 -9
 8142 0887 00       		.byte	0
 8143 0888 1E       		.uleb128 0x1e
 8144 0889 99100000 		.4byte	.LASF163
 8145 088d 01       		.byte	0x1
 8146 088e 3E01     		.2byte	0x13e
 8147 0890 00000000 		.4byte	.LFB67
 8148 0894 64010000 		.4byte	.LFE67-.LFB67
 8149 0898 01       		.uleb128 0x1
 8150 0899 9C       		.byte	0x9c
 8151 089a D1080000 		.4byte	0x8d1
 8152 089e 22       		.uleb128 0x22
 8153 089f D90D0000 		.4byte	.LASF165
 8154 08a3 01       		.byte	0x1
 8155 08a4 3E01     		.2byte	0x13e
 8156 08a6 A3000000 		.4byte	0xa3
 8157 08aa 04       		.uleb128 0x4
 8158 08ab 91       		.byte	0x91
 8159 08ac B6C47E   		.sleb128 -24010
 8160 08af 1F       		.uleb128 0x1f
 8161 08b0 9D040000 		.4byte	.LASF162
 8162 08b4 01       		.byte	0x1
 8163 08b5 3F01     		.2byte	0x13f
 8164 08b7 D1080000 		.4byte	0x8d1
 8165 08bb 03       		.uleb128 0x3
 8166 08bc 91       		.byte	0x91
 8167 08bd D860     		.sleb128 -4008
 8168 08bf 1F       		.uleb128 0x1f
 8169 08c0 68070000 		.4byte	.LASF166
 8170 08c4 01       		.byte	0x1
 8171 08c5 4001     		.2byte	0x140
 8172 08c7 E2080000 		.4byte	0x8e2
 8173 08cb 04       		.uleb128 0x4
 8174 08cc 91       		.byte	0x91
 8175 08cd B8C47E   		.sleb128 -24008
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 192


 8176 08d0 00       		.byte	0
 8177 08d1 0E       		.uleb128 0xe
 8178 08d2 ED000000 		.4byte	0xed
 8179 08d6 E2080000 		.4byte	0x8e2
 8180 08da 20       		.uleb128 0x20
 8181 08db 0C010000 		.4byte	0x10c
 8182 08df 9F0F     		.2byte	0xf9f
 8183 08e1 00       		.byte	0
 8184 08e2 0E       		.uleb128 0xe
 8185 08e3 ED000000 		.4byte	0xed
 8186 08e7 F3080000 		.4byte	0x8f3
 8187 08eb 20       		.uleb128 0x20
 8188 08ec 0C010000 		.4byte	0x10c
 8189 08f0 1F4E     		.2byte	0x4e1f
 8190 08f2 00       		.byte	0
 8191 08f3 1E       		.uleb128 0x1e
 8192 08f4 80010000 		.4byte	.LASF167
 8193 08f8 01       		.byte	0x1
 8194 08f9 7001     		.2byte	0x170
 8195 08fb 00000000 		.4byte	.LFB68
 8196 08ff BC070000 		.4byte	.LFE68-.LFB68
 8197 0903 01       		.uleb128 0x1
 8198 0904 9C       		.byte	0x9c
 8199 0905 430A0000 		.4byte	0xa43
 8200 0909 22       		.uleb128 0x22
 8201 090a 130C0000 		.4byte	.LASF168
 8202 090e 01       		.byte	0x1
 8203 090f 7001     		.2byte	0x170
 8204 0911 97000000 		.4byte	0x97
 8205 0915 03       		.uleb128 0x3
 8206 0916 91       		.byte	0x91
 8207 0917 8F7B     		.sleb128 -625
 8208 0919 22       		.uleb128 0x22
 8209 091a 3C0D0000 		.4byte	.LASF169
 8210 091e 01       		.byte	0x1
 8211 091f 7001     		.2byte	0x170
 8212 0921 97000000 		.4byte	0x97
 8213 0925 03       		.uleb128 0x3
 8214 0926 91       		.byte	0x91
 8215 0927 8E7B     		.sleb128 -626
 8216 0929 22       		.uleb128 0x22
 8217 092a C20F0000 		.4byte	.LASF170
 8218 092e 01       		.byte	0x1
 8219 092f 7001     		.2byte	0x170
 8220 0931 430A0000 		.4byte	0xa43
 8221 0935 03       		.uleb128 0x3
 8222 0936 91       		.byte	0x91
 8223 0937 887B     		.sleb128 -632
 8224 0939 22       		.uleb128 0x22
 8225 093a 7D0A0000 		.4byte	.LASF171
 8226 093e 01       		.byte	0x1
 8227 093f 7001     		.2byte	0x170
 8228 0941 4E0A0000 		.4byte	0xa4e
 8229 0945 03       		.uleb128 0x3
 8230 0946 91       		.byte	0x91
 8231 0947 847B     		.sleb128 -636
 8232 0949 22       		.uleb128 0x22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 193


 8233 094a 630C0000 		.4byte	.LASF172
 8234 094e 01       		.byte	0x1
 8235 094f 7001     		.2byte	0x170
 8236 0951 97000000 		.4byte	0x97
 8237 0955 02       		.uleb128 0x2
 8238 0956 91       		.byte	0x91
 8239 0957 00       		.sleb128 0
 8240 0958 23       		.uleb128 0x23
 8241 0959 69647800 		.ascii	"idx\000"
 8242 095d 01       		.byte	0x1
 8243 095e 7201     		.2byte	0x172
 8244 0960 97000000 		.4byte	0x97
 8245 0964 02       		.uleb128 0x2
 8246 0965 91       		.byte	0x91
 8247 0966 5F       		.sleb128 -33
 8248 0967 1F       		.uleb128 0x1f
 8249 0968 EC090000 		.4byte	.LASF173
 8250 096c 01       		.byte	0x1
 8251 096d 7301     		.2byte	0x173
 8252 096f A7060000 		.4byte	0x6a7
 8253 0973 02       		.uleb128 0x2
 8254 0974 91       		.byte	0x91
 8255 0975 50       		.sleb128 -48
 8256 0976 1F       		.uleb128 0x1f
 8257 0977 12000000 		.4byte	.LASF174
 8258 097b 01       		.byte	0x1
 8259 097c 7401     		.2byte	0x174
 8260 097e 97000000 		.4byte	0x97
 8261 0982 02       		.uleb128 0x2
 8262 0983 91       		.byte	0x91
 8263 0984 5E       		.sleb128 -34
 8264 0985 1F       		.uleb128 0x1f
 8265 0986 45110000 		.4byte	.LASF175
 8266 098a 01       		.byte	0x1
 8267 098b 7501     		.2byte	0x175
 8268 098d 590A0000 		.4byte	0xa59
 8269 0991 03       		.uleb128 0x3
 8270 0992 91       		.byte	0x91
 8271 0993 C87D     		.sleb128 -312
 8272 0995 1F       		.uleb128 0x1f
 8273 0996 E3010000 		.4byte	.LASF176
 8274 099a 01       		.byte	0x1
 8275 099b 7601     		.2byte	0x176
 8276 099d 590A0000 		.4byte	0xa59
 8277 09a1 03       		.uleb128 0x3
 8278 09a2 91       		.byte	0x91
 8279 09a3 CC7B     		.sleb128 -564
 8280 09a5 1F       		.uleb128 0x1f
 8281 09a6 E00F0000 		.4byte	.LASF177
 8282 09aa 01       		.byte	0x1
 8283 09ab 7801     		.2byte	0x178
 8284 09ad D3000000 		.4byte	0xd3
 8285 09b1 03       		.uleb128 0x3
 8286 09b2 91       		.byte	0x91
 8287 09b3 C87B     		.sleb128 -568
 8288 09b5 23       		.uleb128 0x23
 8289 09b6 6900     		.ascii	"i\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 194


 8290 09b8 01       		.byte	0x1
 8291 09b9 7901     		.2byte	0x179
 8292 09bb 97000000 		.4byte	0x97
 8293 09bf 02       		.uleb128 0x2
 8294 09c0 91       		.byte	0x91
 8295 09c1 5D       		.sleb128 -35
 8296 09c2 23       		.uleb128 0x23
 8297 09c3 6A00     		.ascii	"j\000"
 8298 09c5 01       		.byte	0x1
 8299 09c6 7901     		.2byte	0x179
 8300 09c8 97000000 		.4byte	0x97
 8301 09cc 02       		.uleb128 0x2
 8302 09cd 91       		.byte	0x91
 8303 09ce 5C       		.sleb128 -36
 8304 09cf 1F       		.uleb128 0x1f
 8305 09d0 DA090000 		.4byte	.LASF178
 8306 09d4 01       		.byte	0x1
 8307 09d5 7A01     		.2byte	0x17a
 8308 09d7 97000000 		.4byte	0x97
 8309 09db 02       		.uleb128 0x2
 8310 09dc 91       		.byte	0x91
 8311 09dd 5B       		.sleb128 -37
 8312 09de 1F       		.uleb128 0x1f
 8313 09df AC0C0000 		.4byte	.LASF179
 8314 09e3 01       		.byte	0x1
 8315 09e4 7B01     		.2byte	0x17b
 8316 09e6 690A0000 		.4byte	0xa69
 8317 09ea 03       		.uleb128 0x3
 8318 09eb 91       		.byte	0x91
 8319 09ec 947B     		.sleb128 -620
 8320 09ee 1F       		.uleb128 0x1f
 8321 09ef 8E070000 		.4byte	.LASF180
 8322 09f3 01       		.byte	0x1
 8323 09f4 7D01     		.2byte	0x17d
 8324 09f6 A3000000 		.4byte	0xa3
 8325 09fa 02       		.uleb128 0x2
 8326 09fb 91       		.byte	0x91
 8327 09fc 4E       		.sleb128 -50
 8328 09fd 1F       		.uleb128 0x1f
 8329 09fe FA040000 		.4byte	.LASF181
 8330 0a02 01       		.byte	0x1
 8331 0a03 7E01     		.2byte	0x17e
 8332 0a05 790A0000 		.4byte	0xa79
 8333 0a09 03       		.uleb128 0x3
 8334 0a0a 91       		.byte	0x91
 8335 0a0b 44       		.sleb128 -60
 8336 0a0c 06       		.byte	0x6
 8337 0a0d 24       		.uleb128 0x24
 8338 0a0e E4000000 		.4byte	.LBB22
 8339 0a12 2C000000 		.4byte	.LBE22-.LBB22
 8340 0a16 290A0000 		.4byte	0xa29
 8341 0a1a 23       		.uleb128 0x23
 8342 0a1b 696900   		.ascii	"ii\000"
 8343 0a1e 01       		.byte	0x1
 8344 0a1f 7F01     		.2byte	0x17f
 8345 0a21 73000000 		.4byte	0x73
 8346 0a25 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 195


 8347 0a26 91       		.byte	0x91
 8348 0a27 54       		.sleb128 -44
 8349 0a28 00       		.byte	0
 8350 0a29 1A       		.uleb128 0x1a
 8351 0a2a 2C010000 		.4byte	.LBB23
 8352 0a2e 80040000 		.4byte	.LBE23-.LBB23
 8353 0a32 23       		.uleb128 0x23
 8354 0a33 736F6400 		.ascii	"sod\000"
 8355 0a37 01       		.byte	0x1
 8356 0a38 8601     		.2byte	0x186
 8357 0a3a 97000000 		.4byte	0x97
 8358 0a3e 02       		.uleb128 0x2
 8359 0a3f 91       		.byte	0x91
 8360 0a40 43       		.sleb128 -61
 8361 0a41 00       		.byte	0
 8362 0a42 00       		.byte	0
 8363 0a43 07       		.uleb128 0x7
 8364 0a44 04       		.byte	0x4
 8365 0a45 490A0000 		.4byte	0xa49
 8366 0a49 08       		.uleb128 0x8
 8367 0a4a 31060000 		.4byte	0x631
 8368 0a4e 07       		.uleb128 0x7
 8369 0a4f 04       		.byte	0x4
 8370 0a50 540A0000 		.4byte	0xa54
 8371 0a54 08       		.uleb128 0x8
 8372 0a55 EC050000 		.4byte	0x5ec
 8373 0a59 0E       		.uleb128 0xe
 8374 0a5a ED000000 		.4byte	0xed
 8375 0a5e 690A0000 		.4byte	0xa69
 8376 0a62 0F       		.uleb128 0xf
 8377 0a63 0C010000 		.4byte	0x10c
 8378 0a67 F9       		.byte	0xf9
 8379 0a68 00       		.byte	0
 8380 0a69 0E       		.uleb128 0xe
 8381 0a6a ED000000 		.4byte	0xed
 8382 0a6e 790A0000 		.4byte	0xa79
 8383 0a72 0F       		.uleb128 0xf
 8384 0a73 0C010000 		.4byte	0x10c
 8385 0a77 31       		.byte	0x31
 8386 0a78 00       		.byte	0
 8387 0a79 0E       		.uleb128 0xe
 8388 0a7a 97000000 		.4byte	0x97
 8389 0a7e 8C0A0000 		.4byte	0xa8c
 8390 0a82 25       		.uleb128 0x25
 8391 0a83 0C010000 		.4byte	0x10c
 8392 0a87 03       		.uleb128 0x3
 8393 0a88 91       		.byte	0x91
 8394 0a89 48       		.sleb128 -56
 8395 0a8a 06       		.byte	0x6
 8396 0a8b 00       		.byte	0
 8397 0a8c 1E       		.uleb128 0x1e
 8398 0a8d FD0C0000 		.4byte	.LASF182
 8399 0a91 01       		.byte	0x1
 8400 0a92 F101     		.2byte	0x1f1
 8401 0a94 00000000 		.4byte	.LFB69
 8402 0a98 34070000 		.4byte	.LFE69-.LFB69
 8403 0a9c 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 196


 8404 0a9d 9C       		.byte	0x9c
 8405 0a9e 720B0000 		.4byte	0xb72
 8406 0aa2 22       		.uleb128 0x22
 8407 0aa3 EB050000 		.4byte	.LASF183
 8408 0aa7 01       		.byte	0x1
 8409 0aa8 F101     		.2byte	0x1f1
 8410 0aaa A3000000 		.4byte	0xa3
 8411 0aae 03       		.uleb128 0x3
 8412 0aaf 91       		.byte	0x91
 8413 0ab0 AE7C     		.sleb128 -466
 8414 0ab2 22       		.uleb128 0x22
 8415 0ab3 630C0000 		.4byte	.LASF172
 8416 0ab7 01       		.byte	0x1
 8417 0ab8 F101     		.2byte	0x1f1
 8418 0aba 97000000 		.4byte	0x97
 8419 0abe 03       		.uleb128 0x3
 8420 0abf 91       		.byte	0x91
 8421 0ac0 AD7C     		.sleb128 -467
 8422 0ac2 23       		.uleb128 0x23
 8423 0ac3 6900     		.ascii	"i\000"
 8424 0ac5 01       		.byte	0x1
 8425 0ac6 F201     		.2byte	0x1f2
 8426 0ac8 97000000 		.4byte	0x97
 8427 0acc 02       		.uleb128 0x2
 8428 0acd 91       		.byte	0x91
 8429 0ace 6F       		.sleb128 -17
 8430 0acf 23       		.uleb128 0x23
 8431 0ad0 6A00     		.ascii	"j\000"
 8432 0ad2 01       		.byte	0x1
 8433 0ad3 F201     		.2byte	0x1f2
 8434 0ad5 97000000 		.4byte	0x97
 8435 0ad9 02       		.uleb128 0x2
 8436 0ada 91       		.byte	0x91
 8437 0adb 6E       		.sleb128 -18
 8438 0adc 1F       		.uleb128 0x1f
 8439 0add 71010000 		.4byte	.LASF184
 8440 0ae1 01       		.byte	0x1
 8441 0ae2 F401     		.2byte	0x1f4
 8442 0ae4 97000000 		.4byte	0x97
 8443 0ae8 02       		.uleb128 0x2
 8444 0ae9 91       		.byte	0x91
 8445 0aea 65       		.sleb128 -27
 8446 0aeb 1F       		.uleb128 0x1f
 8447 0aec A0020000 		.4byte	.LASF185
 8448 0af0 01       		.byte	0x1
 8449 0af1 F701     		.2byte	0x1f7
 8450 0af3 720B0000 		.4byte	0xb72
 8451 0af7 02       		.uleb128 0x2
 8452 0af8 91       		.byte	0x91
 8453 0af9 68       		.sleb128 -24
 8454 0afa 1F       		.uleb128 0x1f
 8455 0afb 3A050000 		.4byte	.LASF44
 8456 0aff 01       		.byte	0x1
 8457 0b00 FD01     		.2byte	0x1fd
 8458 0b02 EC050000 		.4byte	0x5ec
 8459 0b06 03       		.uleb128 0x3
 8460 0b07 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 197


 8461 0b08 B87F     		.sleb128 -72
 8462 0b0a 1F       		.uleb128 0x1f
 8463 0b0b 7D0A0000 		.4byte	.LASF171
 8464 0b0f 01       		.byte	0x1
 8465 0b10 0002     		.2byte	0x200
 8466 0b12 880B0000 		.4byte	0xb88
 8467 0b16 03       		.uleb128 0x3
 8468 0b17 91       		.byte	0x91
 8469 0b18 B47E     		.sleb128 -204
 8470 0b1a 1F       		.uleb128 0x1f
 8471 0b1b CF000000 		.4byte	.LASF186
 8472 0b1f 01       		.byte	0x1
 8473 0b20 0802     		.2byte	0x208
 8474 0b22 97000000 		.4byte	0x97
 8475 0b26 02       		.uleb128 0x2
 8476 0b27 91       		.byte	0x91
 8477 0b28 67       		.sleb128 -25
 8478 0b29 1F       		.uleb128 0x1f
 8479 0b2a 29100000 		.4byte	.LASF187
 8480 0b2e 01       		.byte	0x1
 8481 0b2f 0A02     		.2byte	0x20a
 8482 0b31 31060000 		.4byte	0x631
 8483 0b35 03       		.uleb128 0x3
 8484 0b36 91       		.byte	0x91
 8485 0b37 A47E     		.sleb128 -220
 8486 0b39 1F       		.uleb128 0x1f
 8487 0b3a C20F0000 		.4byte	.LASF170
 8488 0b3e 01       		.byte	0x1
 8489 0b3f 0C02     		.2byte	0x20c
 8490 0b41 9D0B0000 		.4byte	0xb9d
 8491 0b45 03       		.uleb128 0x3
 8492 0b46 91       		.byte	0x91
 8493 0b47 B47C     		.sleb128 -460
 8494 0b49 1F       		.uleb128 0x1f
 8495 0b4a 2F0F0000 		.4byte	.LASF188
 8496 0b4e 01       		.byte	0x1
 8497 0b4f 2302     		.2byte	0x223
 8498 0b51 97000000 		.4byte	0x97
 8499 0b55 02       		.uleb128 0x2
 8500 0b56 91       		.byte	0x91
 8501 0b57 66       		.sleb128 -26
 8502 0b58 1A       		.uleb128 0x1a
 8503 0b59 94050000 		.4byte	.LBB24
 8504 0b5d 7E010000 		.4byte	.LBE24-.LBB24
 8505 0b61 23       		.uleb128 0x23
 8506 0b62 736F6400 		.ascii	"sod\000"
 8507 0b66 01       		.byte	0x1
 8508 0b67 3402     		.2byte	0x234
 8509 0b69 97000000 		.4byte	0x97
 8510 0b6d 02       		.uleb128 0x2
 8511 0b6e 91       		.byte	0x91
 8512 0b6f 64       		.sleb128 -28
 8513 0b70 00       		.byte	0
 8514 0b71 00       		.byte	0
 8515 0b72 07       		.uleb128 0x7
 8516 0b73 04       		.byte	0x4
 8517 0b74 7D050000 		.4byte	0x57d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 198


 8518 0b78 0E       		.uleb128 0xe
 8519 0b79 540A0000 		.4byte	0xa54
 8520 0b7d 880B0000 		.4byte	0xb88
 8521 0b81 0F       		.uleb128 0xf
 8522 0b82 0C010000 		.4byte	0x10c
 8523 0b86 02       		.byte	0x2
 8524 0b87 00       		.byte	0
 8525 0b88 08       		.uleb128 0x8
 8526 0b89 780B0000 		.4byte	0xb78
 8527 0b8d 0E       		.uleb128 0xe
 8528 0b8e 490A0000 		.4byte	0xa49
 8529 0b92 9D0B0000 		.4byte	0xb9d
 8530 0b96 0F       		.uleb128 0xf
 8531 0b97 0C010000 		.4byte	0x10c
 8532 0b9b 0E       		.byte	0xe
 8533 0b9c 00       		.byte	0
 8534 0b9d 08       		.uleb128 0x8
 8535 0b9e 8D0B0000 		.4byte	0xb8d
 8536 0ba2 1E       		.uleb128 0x1e
 8537 0ba3 2C030000 		.4byte	.LASF189
 8538 0ba7 01       		.byte	0x1
 8539 0ba8 5502     		.2byte	0x255
 8540 0baa 00000000 		.4byte	.LFB70
 8541 0bae 34010000 		.4byte	.LFE70-.LFB70
 8542 0bb2 01       		.uleb128 0x1
 8543 0bb3 9C       		.byte	0x9c
 8544 0bb4 000C0000 		.4byte	0xc00
 8545 0bb8 22       		.uleb128 0x22
 8546 0bb9 EB050000 		.4byte	.LASF183
 8547 0bbd 01       		.byte	0x1
 8548 0bbe 5502     		.2byte	0x255
 8549 0bc0 A3000000 		.4byte	0xa3
 8550 0bc4 02       		.uleb128 0x2
 8551 0bc5 91       		.byte	0x91
 8552 0bc6 6E       		.sleb128 -18
 8553 0bc7 22       		.uleb128 0x22
 8554 0bc8 C20F0000 		.4byte	.LASF170
 8555 0bcc 01       		.byte	0x1
 8556 0bcd 5502     		.2byte	0x255
 8557 0bcf 430A0000 		.4byte	0xa43
 8558 0bd3 02       		.uleb128 0x2
 8559 0bd4 91       		.byte	0x91
 8560 0bd5 68       		.sleb128 -24
 8561 0bd6 23       		.uleb128 0x23
 8562 0bd7 736F6400 		.ascii	"sod\000"
 8563 0bdb 01       		.byte	0x1
 8564 0bdc 5602     		.2byte	0x256
 8565 0bde 97000000 		.4byte	0x97
 8566 0be2 02       		.uleb128 0x2
 8567 0be3 91       		.byte	0x91
 8568 0be4 75       		.sleb128 -11
 8569 0be5 23       		.uleb128 0x23
 8570 0be6 6900     		.ascii	"i\000"
 8571 0be8 01       		.byte	0x1
 8572 0be9 5802     		.2byte	0x258
 8573 0beb 97000000 		.4byte	0x97
 8574 0bef 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 199


 8575 0bf0 91       		.byte	0x91
 8576 0bf1 77       		.sleb128 -9
 8577 0bf2 23       		.uleb128 0x23
 8578 0bf3 6A00     		.ascii	"j\000"
 8579 0bf5 01       		.byte	0x1
 8580 0bf6 5802     		.2byte	0x258
 8581 0bf8 97000000 		.4byte	0x97
 8582 0bfc 02       		.uleb128 0x2
 8583 0bfd 91       		.byte	0x91
 8584 0bfe 76       		.sleb128 -10
 8585 0bff 00       		.byte	0
 8586 0c00 26       		.uleb128 0x26
 8587 0c01 E9070000 		.4byte	.LASF190
 8588 0c05 01       		.byte	0x1
 8589 0c06 7C02     		.2byte	0x27c
 8590 0c08 00000000 		.4byte	.LFB71
 8591 0c0c 14000000 		.4byte	.LFE71-.LFB71
 8592 0c10 01       		.uleb128 0x1
 8593 0c11 9C       		.byte	0x9c
 8594 0c12 260C0000 		.4byte	0xc26
 8595 0c16 22       		.uleb128 0x22
 8596 0c17 EB050000 		.4byte	.LASF183
 8597 0c1b 01       		.byte	0x1
 8598 0c1c 7C02     		.2byte	0x27c
 8599 0c1e A3000000 		.4byte	0xa3
 8600 0c22 02       		.uleb128 0x2
 8601 0c23 91       		.byte	0x91
 8602 0c24 76       		.sleb128 -10
 8603 0c25 00       		.byte	0
 8604 0c26 27       		.uleb128 0x27
 8605 0c27 80020000 		.4byte	.LASF228
 8606 0c2b 01       		.byte	0x1
 8607 0c2c 8402     		.2byte	0x284
 8608 0c2e 00000000 		.4byte	.LFB72
 8609 0c32 0C000000 		.4byte	.LFE72-.LFB72
 8610 0c36 01       		.uleb128 0x1
 8611 0c37 9C       		.byte	0x9c
 8612 0c38 1E       		.uleb128 0x1e
 8613 0c39 C60C0000 		.4byte	.LASF191
 8614 0c3d 01       		.byte	0x1
 8615 0c3e 8802     		.2byte	0x288
 8616 0c40 00000000 		.4byte	.LFB73
 8617 0c44 B8030000 		.4byte	.LFE73-.LFB73
 8618 0c48 01       		.uleb128 0x1
 8619 0c49 9C       		.byte	0x9c
 8620 0c4a 840D0000 		.4byte	0xd84
 8621 0c4e 22       		.uleb128 0x22
 8622 0c4f 130C0000 		.4byte	.LASF168
 8623 0c53 01       		.byte	0x1
 8624 0c54 8802     		.2byte	0x288
 8625 0c56 97000000 		.4byte	0x97
 8626 0c5a 03       		.uleb128 0x3
 8627 0c5b 91       		.byte	0x91
 8628 0c5c 976B     		.sleb128 -2665
 8629 0c5e 22       		.uleb128 0x22
 8630 0c5f 3C0D0000 		.4byte	.LASF169
 8631 0c63 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 200


 8632 0c64 8802     		.2byte	0x288
 8633 0c66 97000000 		.4byte	0x97
 8634 0c6a 03       		.uleb128 0x3
 8635 0c6b 91       		.byte	0x91
 8636 0c6c 966B     		.sleb128 -2666
 8637 0c6e 22       		.uleb128 0x22
 8638 0c6f C20F0000 		.4byte	.LASF170
 8639 0c73 01       		.byte	0x1
 8640 0c74 8802     		.2byte	0x288
 8641 0c76 430A0000 		.4byte	0xa43
 8642 0c7a 03       		.uleb128 0x3
 8643 0c7b 91       		.byte	0x91
 8644 0c7c 906B     		.sleb128 -2672
 8645 0c7e 22       		.uleb128 0x22
 8646 0c7f 7D0A0000 		.4byte	.LASF171
 8647 0c83 01       		.byte	0x1
 8648 0c84 8802     		.2byte	0x288
 8649 0c86 4E0A0000 		.4byte	0xa4e
 8650 0c8a 03       		.uleb128 0x3
 8651 0c8b 91       		.byte	0x91
 8652 0c8c 8C6B     		.sleb128 -2676
 8653 0c8e 1F       		.uleb128 0x1f
 8654 0c8f 070C0000 		.4byte	.LASF192
 8655 0c93 01       		.byte	0x1
 8656 0c94 8A02     		.2byte	0x28a
 8657 0c96 840D0000 		.4byte	0xd84
 8658 0c9a 03       		.uleb128 0x3
 8659 0c9b 91       		.byte	0x91
 8660 0c9c 806C     		.sleb128 -2560
 8661 0c9e 23       		.uleb128 0x23
 8662 0c9f 6900     		.ascii	"i\000"
 8663 0ca1 01       		.byte	0x1
 8664 0ca2 8B02     		.2byte	0x28b
 8665 0ca4 73000000 		.4byte	0x73
 8666 0ca8 02       		.uleb128 0x2
 8667 0ca9 91       		.byte	0x91
 8668 0caa 6C       		.sleb128 -20
 8669 0cab 23       		.uleb128 0x23
 8670 0cac 69647800 		.ascii	"idx\000"
 8671 0cb0 01       		.byte	0x1
 8672 0cb1 8C02     		.2byte	0x28c
 8673 0cb3 73000000 		.4byte	0x73
 8674 0cb7 02       		.uleb128 0x2
 8675 0cb8 91       		.byte	0x91
 8676 0cb9 68       		.sleb128 -24
 8677 0cba 1F       		.uleb128 0x1f
 8678 0cbb E00F0000 		.4byte	.LASF177
 8679 0cbf 01       		.byte	0x1
 8680 0cc0 8D02     		.2byte	0x28d
 8681 0cc2 D3000000 		.4byte	0xd3
 8682 0cc6 02       		.uleb128 0x2
 8683 0cc7 91       		.byte	0x91
 8684 0cc8 48       		.sleb128 -56
 8685 0cc9 1F       		.uleb128 0x1f
 8686 0cca 510C0000 		.4byte	.LASF193
 8687 0cce 01       		.byte	0x1
 8688 0ccf 8E02     		.2byte	0x28e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 201


 8689 0cd1 AF000000 		.4byte	0xaf
 8690 0cd5 02       		.uleb128 0x2
 8691 0cd6 91       		.byte	0x91
 8692 0cd7 4C       		.sleb128 -52
 8693 0cd8 1F       		.uleb128 0x1f
 8694 0cd9 B80F0000 		.4byte	.LASF194
 8695 0cdd 01       		.byte	0x1
 8696 0cde 8F02     		.2byte	0x28f
 8697 0ce0 DF000000 		.4byte	0xdf
 8698 0ce4 02       		.uleb128 0x2
 8699 0ce5 91       		.byte	0x91
 8700 0ce6 44       		.sleb128 -60
 8701 0ce7 1F       		.uleb128 0x1f
 8702 0ce8 0F0D0000 		.4byte	.LASF195
 8703 0cec 01       		.byte	0x1
 8704 0ced 9002     		.2byte	0x290
 8705 0cef 97000000 		.4byte	0x97
 8706 0cf3 02       		.uleb128 0x2
 8707 0cf4 91       		.byte	0x91
 8708 0cf5 57       		.sleb128 -41
 8709 0cf6 1F       		.uleb128 0x1f
 8710 0cf7 AA090000 		.4byte	.LASF196
 8711 0cfb 01       		.byte	0x1
 8712 0cfc 9102     		.2byte	0x291
 8713 0cfe BB000000 		.4byte	0xbb
 8714 0d02 02       		.uleb128 0x2
 8715 0d03 91       		.byte	0x91
 8716 0d04 56       		.sleb128 -42
 8717 0d05 1F       		.uleb128 0x1f
 8718 0d06 FE0E0000 		.4byte	.LASF197
 8719 0d0a 01       		.byte	0x1
 8720 0d0b 9202     		.2byte	0x292
 8721 0d0d C7000000 		.4byte	0xc7
 8722 0d11 02       		.uleb128 0x2
 8723 0d12 91       		.byte	0x91
 8724 0d13 54       		.sleb128 -44
 8725 0d14 1F       		.uleb128 0x1f
 8726 0d15 290B0000 		.4byte	.LASF198
 8727 0d19 01       		.byte	0x1
 8728 0d1a 9302     		.2byte	0x293
 8729 0d1c A3000000 		.4byte	0xa3
 8730 0d20 02       		.uleb128 0x2
 8731 0d21 91       		.byte	0x91
 8732 0d22 52       		.sleb128 -46
 8733 0d23 1F       		.uleb128 0x1f
 8734 0d24 A0020000 		.4byte	.LASF185
 8735 0d28 01       		.byte	0x1
 8736 0d29 9402     		.2byte	0x294
 8737 0d2b 720B0000 		.4byte	0xb72
 8738 0d2f 02       		.uleb128 0x2
 8739 0d30 91       		.byte	0x91
 8740 0d31 64       		.sleb128 -28
 8741 0d32 1A       		.uleb128 0x1a
 8742 0d33 54000000 		.4byte	.LBB25
 8743 0d37 4A030000 		.4byte	.LBE25-.LBB25
 8744 0d3b 1F       		.uleb128 0x1f
 8745 0d3c EC090000 		.4byte	.LASF173
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 202


 8746 0d40 01       		.byte	0x1
 8747 0d41 9702     		.2byte	0x297
 8748 0d43 A7060000 		.4byte	0x6a7
 8749 0d47 02       		.uleb128 0x2
 8750 0d48 91       		.byte	0x91
 8751 0d49 60       		.sleb128 -32
 8752 0d4a 1F       		.uleb128 0x1f
 8753 0d4b 6B010000 		.4byte	.LASF199
 8754 0d4f 01       		.byte	0x1
 8755 0d50 9802     		.2byte	0x298
 8756 0d52 A7060000 		.4byte	0x6a7
 8757 0d56 02       		.uleb128 0x2
 8758 0d57 91       		.byte	0x91
 8759 0d58 58       		.sleb128 -40
 8760 0d59 23       		.uleb128 0x23
 8761 0d5a 73747200 		.ascii	"str\000"
 8762 0d5e 01       		.byte	0x1
 8763 0d5f 9902     		.2byte	0x299
 8764 0d61 950D0000 		.4byte	0xd95
 8765 0d65 03       		.uleb128 0x3
 8766 0d66 91       		.byte	0x91
 8767 0d67 9C6B     		.sleb128 -2660
 8768 0d69 1A       		.uleb128 0x1a
 8769 0d6a 9A000000 		.4byte	.LBB26
 8770 0d6e DE020000 		.4byte	.LBE26-.LBB26
 8771 0d72 23       		.uleb128 0x23
 8772 0d73 736F6400 		.ascii	"sod\000"
 8773 0d77 01       		.byte	0x1
 8774 0d78 A202     		.2byte	0x2a2
 8775 0d7a 97000000 		.4byte	0x97
 8776 0d7e 02       		.uleb128 0x2
 8777 0d7f 91       		.byte	0x91
 8778 0d80 5F       		.sleb128 -33
 8779 0d81 00       		.byte	0
 8780 0d82 00       		.byte	0
 8781 0d83 00       		.byte	0
 8782 0d84 0E       		.uleb128 0xe
 8783 0d85 ED000000 		.4byte	0xed
 8784 0d89 950D0000 		.4byte	0xd95
 8785 0d8d 20       		.uleb128 0x20
 8786 0d8e 0C010000 		.4byte	0x10c
 8787 0d92 C309     		.2byte	0x9c3
 8788 0d94 00       		.byte	0
 8789 0d95 0E       		.uleb128 0xe
 8790 0d96 ED000000 		.4byte	0xed
 8791 0d9a A50D0000 		.4byte	0xda5
 8792 0d9e 0F       		.uleb128 0xf
 8793 0d9f 0C010000 		.4byte	0x10c
 8794 0da3 63       		.byte	0x63
 8795 0da4 00       		.byte	0
 8796 0da5 1E       		.uleb128 0x1e
 8797 0da6 BA000000 		.4byte	.LASF200
 8798 0daa 01       		.byte	0x1
 8799 0dab F002     		.2byte	0x2f0
 8800 0dad 00000000 		.4byte	.LFB74
 8801 0db1 04020000 		.4byte	.LFE74-.LFB74
 8802 0db5 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 203


 8803 0db6 9C       		.byte	0x9c
 8804 0db7 020E0000 		.4byte	0xe02
 8805 0dbb 22       		.uleb128 0x22
 8806 0dbc 070C0000 		.4byte	.LASF192
 8807 0dc0 01       		.byte	0x1
 8808 0dc1 F002     		.2byte	0x2f0
 8809 0dc3 13010000 		.4byte	0x113
 8810 0dc7 03       		.uleb128 0x3
 8811 0dc8 91       		.byte	0x91
 8812 0dc9 FC7E     		.sleb128 -132
 8813 0dcb 23       		.uleb128 0x23
 8814 0dcc 6900     		.ascii	"i\000"
 8815 0dce 01       		.byte	0x1
 8816 0dcf F302     		.2byte	0x2f3
 8817 0dd1 73000000 		.4byte	0x73
 8818 0dd5 02       		.uleb128 0x2
 8819 0dd6 91       		.byte	0x91
 8820 0dd7 6C       		.sleb128 -20
 8821 0dd8 1F       		.uleb128 0x1f
 8822 0dd9 A0020000 		.4byte	.LASF185
 8823 0ddd 01       		.byte	0x1
 8824 0dde F402     		.2byte	0x2f4
 8825 0de0 720B0000 		.4byte	0xb72
 8826 0de4 02       		.uleb128 0x2
 8827 0de5 91       		.byte	0x91
 8828 0de6 68       		.sleb128 -24
 8829 0de7 1A       		.uleb128 0x1a
 8830 0de8 20000000 		.4byte	.LBB27
 8831 0dec 9A010000 		.4byte	.LBE27-.LBB27
 8832 0df0 23       		.uleb128 0x23
 8833 0df1 73747200 		.ascii	"str\000"
 8834 0df5 01       		.byte	0x1
 8835 0df6 F802     		.2byte	0x2f8
 8836 0df8 950D0000 		.4byte	0xd95
 8837 0dfc 03       		.uleb128 0x3
 8838 0dfd 91       		.byte	0x91
 8839 0dfe 847F     		.sleb128 -124
 8840 0e00 00       		.byte	0
 8841 0e01 00       		.byte	0
 8842 0e02 26       		.uleb128 0x26
 8843 0e03 690D0000 		.4byte	.LASF201
 8844 0e07 01       		.byte	0x1
 8845 0e08 1903     		.2byte	0x319
 8846 0e0a 00000000 		.4byte	.LFB75
 8847 0e0e 12000000 		.4byte	.LFE75-.LFB75
 8848 0e12 01       		.uleb128 0x1
 8849 0e13 9C       		.byte	0x9c
 8850 0e14 280E0000 		.4byte	0xe28
 8851 0e18 22       		.uleb128 0x22
 8852 0e19 070C0000 		.4byte	.LASF192
 8853 0e1d 01       		.byte	0x1
 8854 0e1e 1903     		.2byte	0x319
 8855 0e20 13010000 		.4byte	0x113
 8856 0e24 02       		.uleb128 0x2
 8857 0e25 91       		.byte	0x91
 8858 0e26 74       		.sleb128 -12
 8859 0e27 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 204


 8860 0e28 26       		.uleb128 0x26
 8861 0e29 0D0B0000 		.4byte	.LASF202
 8862 0e2d 01       		.byte	0x1
 8863 0e2e 2103     		.2byte	0x321
 8864 0e30 00000000 		.4byte	.LFB76
 8865 0e34 12000000 		.4byte	.LFE76-.LFB76
 8866 0e38 01       		.uleb128 0x1
 8867 0e39 9C       		.byte	0x9c
 8868 0e3a 4E0E0000 		.4byte	0xe4e
 8869 0e3e 22       		.uleb128 0x22
 8870 0e3f 070C0000 		.4byte	.LASF192
 8871 0e43 01       		.byte	0x1
 8872 0e44 2103     		.2byte	0x321
 8873 0e46 13010000 		.4byte	0x113
 8874 0e4a 02       		.uleb128 0x2
 8875 0e4b 91       		.byte	0x91
 8876 0e4c 74       		.sleb128 -12
 8877 0e4d 00       		.byte	0
 8878 0e4e 26       		.uleb128 0x26
 8879 0e4f 530D0000 		.4byte	.LASF203
 8880 0e53 01       		.byte	0x1
 8881 0e54 2903     		.2byte	0x329
 8882 0e56 00000000 		.4byte	.LFB77
 8883 0e5a 12000000 		.4byte	.LFE77-.LFB77
 8884 0e5e 01       		.uleb128 0x1
 8885 0e5f 9C       		.byte	0x9c
 8886 0e60 740E0000 		.4byte	0xe74
 8887 0e64 22       		.uleb128 0x22
 8888 0e65 070C0000 		.4byte	.LASF192
 8889 0e69 01       		.byte	0x1
 8890 0e6a 2903     		.2byte	0x329
 8891 0e6c 13010000 		.4byte	0x113
 8892 0e70 02       		.uleb128 0x2
 8893 0e71 91       		.byte	0x91
 8894 0e72 74       		.sleb128 -12
 8895 0e73 00       		.byte	0
 8896 0e74 26       		.uleb128 0x26
 8897 0e75 200A0000 		.4byte	.LASF204
 8898 0e79 01       		.byte	0x1
 8899 0e7a 3103     		.2byte	0x331
 8900 0e7c 00000000 		.4byte	.LFB78
 8901 0e80 12000000 		.4byte	.LFE78-.LFB78
 8902 0e84 01       		.uleb128 0x1
 8903 0e85 9C       		.byte	0x9c
 8904 0e86 9A0E0000 		.4byte	0xe9a
 8905 0e8a 22       		.uleb128 0x22
 8906 0e8b 070C0000 		.4byte	.LASF192
 8907 0e8f 01       		.byte	0x1
 8908 0e90 3103     		.2byte	0x331
 8909 0e92 13010000 		.4byte	0x113
 8910 0e96 02       		.uleb128 0x2
 8911 0e97 91       		.byte	0x91
 8912 0e98 74       		.sleb128 -12
 8913 0e99 00       		.byte	0
 8914 0e9a 26       		.uleb128 0x26
 8915 0e9b 7E0D0000 		.4byte	.LASF205
 8916 0e9f 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 205


 8917 0ea0 3803     		.2byte	0x338
 8918 0ea2 00000000 		.4byte	.LFB79
 8919 0ea6 12000000 		.4byte	.LFE79-.LFB79
 8920 0eaa 01       		.uleb128 0x1
 8921 0eab 9C       		.byte	0x9c
 8922 0eac C00E0000 		.4byte	0xec0
 8923 0eb0 22       		.uleb128 0x22
 8924 0eb1 070C0000 		.4byte	.LASF192
 8925 0eb5 01       		.byte	0x1
 8926 0eb6 3803     		.2byte	0x338
 8927 0eb8 13010000 		.4byte	0x113
 8928 0ebc 02       		.uleb128 0x2
 8929 0ebd 91       		.byte	0x91
 8930 0ebe 74       		.sleb128 -12
 8931 0ebf 00       		.byte	0
 8932 0ec0 26       		.uleb128 0x26
 8933 0ec1 C7020000 		.4byte	.LASF206
 8934 0ec5 01       		.byte	0x1
 8935 0ec6 4003     		.2byte	0x340
 8936 0ec8 00000000 		.4byte	.LFB80
 8937 0ecc 12000000 		.4byte	.LFE80-.LFB80
 8938 0ed0 01       		.uleb128 0x1
 8939 0ed1 9C       		.byte	0x9c
 8940 0ed2 E60E0000 		.4byte	0xee6
 8941 0ed6 22       		.uleb128 0x22
 8942 0ed7 070C0000 		.4byte	.LASF192
 8943 0edb 01       		.byte	0x1
 8944 0edc 4003     		.2byte	0x340
 8945 0ede 13010000 		.4byte	0x113
 8946 0ee2 02       		.uleb128 0x2
 8947 0ee3 91       		.byte	0x91
 8948 0ee4 74       		.sleb128 -12
 8949 0ee5 00       		.byte	0
 8950 0ee6 26       		.uleb128 0x26
 8951 0ee7 24110000 		.4byte	.LASF207
 8952 0eeb 01       		.byte	0x1
 8953 0eec 4903     		.2byte	0x349
 8954 0eee 00000000 		.4byte	.LFB81
 8955 0ef2 12000000 		.4byte	.LFE81-.LFB81
 8956 0ef6 01       		.uleb128 0x1
 8957 0ef7 9C       		.byte	0x9c
 8958 0ef8 0C0F0000 		.4byte	0xf0c
 8959 0efc 22       		.uleb128 0x22
 8960 0efd 070C0000 		.4byte	.LASF192
 8961 0f01 01       		.byte	0x1
 8962 0f02 4903     		.2byte	0x349
 8963 0f04 13010000 		.4byte	0x113
 8964 0f08 02       		.uleb128 0x2
 8965 0f09 91       		.byte	0x91
 8966 0f0a 74       		.sleb128 -12
 8967 0f0b 00       		.byte	0
 8968 0f0c 1E       		.uleb128 0x1e
 8969 0f0d EC0C0000 		.4byte	.LASF208
 8970 0f11 01       		.byte	0x1
 8971 0f12 5103     		.2byte	0x351
 8972 0f14 00000000 		.4byte	.LFB82
 8973 0f18 84000000 		.4byte	.LFE82-.LFB82
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 206


 8974 0f1c 01       		.uleb128 0x1
 8975 0f1d 9C       		.byte	0x9c
 8976 0f1e 5F0F0000 		.4byte	0xf5f
 8977 0f22 22       		.uleb128 0x22
 8978 0f23 FA040000 		.4byte	.LASF181
 8979 0f27 01       		.byte	0x1
 8980 0f28 5103     		.2byte	0x351
 8981 0f2a A7060000 		.4byte	0x6a7
 8982 0f2e 02       		.uleb128 0x2
 8983 0f2f 91       		.byte	0x91
 8984 0f30 6C       		.sleb128 -20
 8985 0f31 22       		.uleb128 0x22
 8986 0f32 8E070000 		.4byte	.LASF180
 8987 0f36 01       		.byte	0x1
 8988 0f37 5103     		.2byte	0x351
 8989 0f39 A3000000 		.4byte	0xa3
 8990 0f3d 02       		.uleb128 0x2
 8991 0f3e 91       		.byte	0x91
 8992 0f3f 6A       		.sleb128 -22
 8993 0f40 22       		.uleb128 0x22
 8994 0f41 9C0D0000 		.4byte	.LASF209
 8995 0f45 01       		.byte	0x1
 8996 0f46 5103     		.2byte	0x351
 8997 0f48 97000000 		.4byte	0x97
 8998 0f4c 02       		.uleb128 0x2
 8999 0f4d 91       		.byte	0x91
 9000 0f4e 69       		.sleb128 -23
 9001 0f4f 1F       		.uleb128 0x1f
 9002 0f50 EB050000 		.4byte	.LASF183
 9003 0f54 01       		.byte	0x1
 9004 0f55 5303     		.2byte	0x353
 9005 0f57 A3000000 		.4byte	0xa3
 9006 0f5b 02       		.uleb128 0x2
 9007 0f5c 91       		.byte	0x91
 9008 0f5d 76       		.sleb128 -10
 9009 0f5e 00       		.byte	0
 9010 0f5f 1E       		.uleb128 0x1e
 9011 0f60 10050000 		.4byte	.LASF210
 9012 0f64 01       		.byte	0x1
 9013 0f65 6D03     		.2byte	0x36d
 9014 0f67 00000000 		.4byte	.LFB83
 9015 0f6b 88000000 		.4byte	.LFE83-.LFB83
 9016 0f6f 01       		.uleb128 0x1
 9017 0f70 9C       		.byte	0x9c
 9018 0f71 A30F0000 		.4byte	0xfa3
 9019 0f75 22       		.uleb128 0x22
 9020 0f76 FA040000 		.4byte	.LASF181
 9021 0f7a 01       		.byte	0x1
 9022 0f7b 6D03     		.2byte	0x36d
 9023 0f7d A7060000 		.4byte	0x6a7
 9024 0f81 02       		.uleb128 0x2
 9025 0f82 91       		.byte	0x91
 9026 0f83 6C       		.sleb128 -20
 9027 0f84 22       		.uleb128 0x22
 9028 0f85 8E070000 		.4byte	.LASF180
 9029 0f89 01       		.byte	0x1
 9030 0f8a 6D03     		.2byte	0x36d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 207


 9031 0f8c A3000000 		.4byte	0xa3
 9032 0f90 02       		.uleb128 0x2
 9033 0f91 91       		.byte	0x91
 9034 0f92 6A       		.sleb128 -22
 9035 0f93 1F       		.uleb128 0x1f
 9036 0f94 EB050000 		.4byte	.LASF183
 9037 0f98 01       		.byte	0x1
 9038 0f99 6F03     		.2byte	0x36f
 9039 0f9b A3000000 		.4byte	0xa3
 9040 0f9f 02       		.uleb128 0x2
 9041 0fa0 91       		.byte	0x91
 9042 0fa1 76       		.sleb128 -10
 9043 0fa2 00       		.byte	0
 9044 0fa3 1E       		.uleb128 0x1e
 9045 0fa4 9B0A0000 		.4byte	.LASF211
 9046 0fa8 01       		.byte	0x1
 9047 0fa9 8A03     		.2byte	0x38a
 9048 0fab 00000000 		.4byte	.LFB84
 9049 0faf A0000000 		.4byte	.LFE84-.LFB84
 9050 0fb3 01       		.uleb128 0x1
 9051 0fb4 9C       		.byte	0x9c
 9052 0fb5 F60F0000 		.4byte	0xff6
 9053 0fb9 22       		.uleb128 0x22
 9054 0fba FA040000 		.4byte	.LASF181
 9055 0fbe 01       		.byte	0x1
 9056 0fbf 8A03     		.2byte	0x38a
 9057 0fc1 A7060000 		.4byte	0x6a7
 9058 0fc5 02       		.uleb128 0x2
 9059 0fc6 91       		.byte	0x91
 9060 0fc7 74       		.sleb128 -12
 9061 0fc8 22       		.uleb128 0x22
 9062 0fc9 8E070000 		.4byte	.LASF180
 9063 0fcd 01       		.byte	0x1
 9064 0fce 8A03     		.2byte	0x38a
 9065 0fd0 A3000000 		.4byte	0xa3
 9066 0fd4 02       		.uleb128 0x2
 9067 0fd5 91       		.byte	0x91
 9068 0fd6 72       		.sleb128 -14
 9069 0fd7 28       		.uleb128 0x28
 9070 0fd8 696400   		.ascii	"id\000"
 9071 0fdb 01       		.byte	0x1
 9072 0fdc 8A03     		.2byte	0x38a
 9073 0fde 97000000 		.4byte	0x97
 9074 0fe2 02       		.uleb128 0x2
 9075 0fe3 91       		.byte	0x91
 9076 0fe4 71       		.sleb128 -15
 9077 0fe5 23       		.uleb128 0x23
 9078 0fe6 6900     		.ascii	"i\000"
 9079 0fe8 01       		.byte	0x1
 9080 0fe9 8C03     		.2byte	0x38c
 9081 0feb A3000000 		.4byte	0xa3
 9082 0fef 05       		.uleb128 0x5
 9083 0ff0 03       		.byte	0x3
 9084 0ff1 00000000 		.4byte	i.10044
 9085 0ff5 00       		.byte	0
 9086 0ff6 21       		.uleb128 0x21
 9087 0ff7 3E100000 		.4byte	.LASF213
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 208


 9088 0ffb 01       		.byte	0x1
 9089 0ffc A803     		.2byte	0x3a8
 9090 0ffe 97000000 		.4byte	0x97
 9091 1002 00000000 		.4byte	.LFB85
 9092 1006 3E000000 		.4byte	.LFE85-.LFB85
 9093 100a 01       		.uleb128 0x1
 9094 100b 9C       		.byte	0x9c
 9095 100c 4B100000 		.4byte	0x104b
 9096 1010 22       		.uleb128 0x22
 9097 1011 F9090000 		.4byte	.LASF214
 9098 1015 01       		.byte	0x1
 9099 1016 A803     		.2byte	0x3a8
 9100 1018 A7060000 		.4byte	0x6a7
 9101 101c 02       		.uleb128 0x2
 9102 101d 91       		.byte	0x91
 9103 101e 6C       		.sleb128 -20
 9104 101f 22       		.uleb128 0x22
 9105 1020 C1040000 		.4byte	.LASF215
 9106 1024 01       		.byte	0x1
 9107 1025 A803     		.2byte	0x3a8
 9108 1027 97000000 		.4byte	0x97
 9109 102b 02       		.uleb128 0x2
 9110 102c 91       		.byte	0x91
 9111 102d 6B       		.sleb128 -21
 9112 102e 23       		.uleb128 0x23
 9113 102f 6900     		.ascii	"i\000"
 9114 1031 01       		.byte	0x1
 9115 1032 AA03     		.2byte	0x3aa
 9116 1034 97000000 		.4byte	0x97
 9117 1038 02       		.uleb128 0x2
 9118 1039 91       		.byte	0x91
 9119 103a 77       		.sleb128 -9
 9120 103b 1F       		.uleb128 0x1f
 9121 103c AB0B0000 		.4byte	.LASF216
 9122 1040 01       		.byte	0x1
 9123 1041 AB03     		.2byte	0x3ab
 9124 1043 97000000 		.4byte	0x97
 9125 1047 02       		.uleb128 0x2
 9126 1048 91       		.byte	0x91
 9127 1049 76       		.sleb128 -10
 9128 104a 00       		.byte	0
 9129 104b 1E       		.uleb128 0x1e
 9130 104c CD0F0000 		.4byte	.LASF217
 9131 1050 01       		.byte	0x1
 9132 1051 B803     		.2byte	0x3b8
 9133 1053 00000000 		.4byte	.LFB86
 9134 1057 2E000000 		.4byte	.LFE86-.LFB86
 9135 105b 01       		.uleb128 0x1
 9136 105c 9C       		.byte	0x9c
 9137 105d 8F100000 		.4byte	0x108f
 9138 1061 22       		.uleb128 0x22
 9139 1062 3C040000 		.4byte	.LASF218
 9140 1066 01       		.byte	0x1
 9141 1067 B803     		.2byte	0x3b8
 9142 1069 97000000 		.4byte	0x97
 9143 106d 02       		.uleb128 0x2
 9144 106e 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 209


 9145 106f 6F       		.sleb128 -17
 9146 1070 1F       		.uleb128 0x1f
 9147 1071 8E070000 		.4byte	.LASF180
 9148 1075 01       		.byte	0x1
 9149 1076 B903     		.2byte	0x3b9
 9150 1078 73000000 		.4byte	0x73
 9151 107c 02       		.uleb128 0x2
 9152 107d 91       		.byte	0x91
 9153 107e 74       		.sleb128 -12
 9154 107f 1F       		.uleb128 0x1f
 9155 1080 FA040000 		.4byte	.LASF181
 9156 1084 01       		.byte	0x1
 9157 1085 BA03     		.2byte	0x3ba
 9158 1087 D7040000 		.4byte	0x4d7
 9159 108b 02       		.uleb128 0x2
 9160 108c 91       		.byte	0x91
 9161 108d 70       		.sleb128 -16
 9162 108e 00       		.byte	0
 9163 108f 29       		.uleb128 0x29
 9164 1090 7F030000 		.4byte	.LASF219
 9165 1094 01       		.byte	0x1
 9166 1095 C703     		.2byte	0x3c7
 9167 1097 97000000 		.4byte	0x97
 9168 109b 00000000 		.4byte	.LFB87
 9169 109f 90000000 		.4byte	.LFE87-.LFB87
 9170 10a3 01       		.uleb128 0x1
 9171 10a4 9C       		.byte	0x9c
 9172 10a5 F3100000 		.4byte	0x10f3
 9173 10a9 22       		.uleb128 0x22
 9174 10aa 3F070000 		.4byte	.LASF220
 9175 10ae 01       		.byte	0x1
 9176 10af C703     		.2byte	0x3c7
 9177 10b1 73000000 		.4byte	0x73
 9178 10b5 02       		.uleb128 0x2
 9179 10b6 91       		.byte	0x91
 9180 10b7 64       		.sleb128 -28
 9181 10b8 23       		.uleb128 0x23
 9182 10b9 6900     		.ascii	"i\000"
 9183 10bb 01       		.byte	0x1
 9184 10bc C903     		.2byte	0x3c9
 9185 10be 73000000 		.4byte	0x73
 9186 10c2 02       		.uleb128 0x2
 9187 10c3 91       		.byte	0x91
 9188 10c4 74       		.sleb128 -12
 9189 10c5 1F       		.uleb128 0x1f
 9190 10c6 81000000 		.4byte	.LASF221
 9191 10ca 01       		.byte	0x1
 9192 10cb CA03     		.2byte	0x3ca
 9193 10cd 97000000 		.4byte	0x97
 9194 10d1 02       		.uleb128 0x2
 9195 10d2 91       		.byte	0x91
 9196 10d3 6B       		.sleb128 -21
 9197 10d4 1F       		.uleb128 0x1f
 9198 10d5 2C050000 		.4byte	.LASF222
 9199 10d9 01       		.byte	0x1
 9200 10da CB03     		.2byte	0x3cb
 9201 10dc 73000000 		.4byte	0x73
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 210


 9202 10e0 02       		.uleb128 0x2
 9203 10e1 91       		.byte	0x91
 9204 10e2 6C       		.sleb128 -20
 9205 10e3 1F       		.uleb128 0x1f
 9206 10e4 82040000 		.4byte	.LASF223
 9207 10e8 01       		.byte	0x1
 9208 10e9 CC03     		.2byte	0x3cc
 9209 10eb 97000000 		.4byte	0x97
 9210 10ef 02       		.uleb128 0x2
 9211 10f0 91       		.byte	0x91
 9212 10f1 73       		.sleb128 -13
 9213 10f2 00       		.byte	0
 9214 10f3 1E       		.uleb128 0x1e
 9215 10f4 910C0000 		.4byte	.LASF224
 9216 10f8 01       		.byte	0x1
 9217 10f9 F103     		.2byte	0x3f1
 9218 10fb 00000000 		.4byte	.LFB88
 9219 10ff 60000000 		.4byte	.LFE88-.LFB88
 9220 1103 01       		.uleb128 0x1
 9221 1104 9C       		.byte	0x9c
 9222 1105 17110000 		.4byte	0x1117
 9223 1109 23       		.uleb128 0x23
 9224 110a 6900     		.ascii	"i\000"
 9225 110c 01       		.byte	0x1
 9226 110d F303     		.2byte	0x3f3
 9227 110f A3000000 		.4byte	0xa3
 9228 1113 02       		.uleb128 0x2
 9229 1114 91       		.byte	0x91
 9230 1115 76       		.sleb128 -10
 9231 1116 00       		.byte	0
 9232 1117 29       		.uleb128 0x29
 9233 1118 FC0B0000 		.4byte	.LASF225
 9234 111c 01       		.byte	0x1
 9235 111d 0604     		.2byte	0x406
 9236 111f 97000000 		.4byte	0x97
 9237 1123 00000000 		.4byte	.LFB89
 9238 1127 58000000 		.4byte	.LFE89-.LFB89
 9239 112b 01       		.uleb128 0x1
 9240 112c 9C       		.byte	0x9c
 9241 112d 3F110000 		.4byte	0x113f
 9242 1131 23       		.uleb128 0x23
 9243 1132 6900     		.ascii	"i\000"
 9244 1134 01       		.byte	0x1
 9245 1135 0704     		.2byte	0x407
 9246 1137 A3000000 		.4byte	0xa3
 9247 113b 02       		.uleb128 0x2
 9248 113c 91       		.byte	0x91
 9249 113d 76       		.sleb128 -10
 9250 113e 00       		.byte	0
 9251 113f 2A       		.uleb128 0x2a
 9252 1140 32050000 		.4byte	.LASF309
 9253 1144 01       		.byte	0x1
 9254 1145 1904     		.2byte	0x419
 9255 1147 97000000 		.4byte	0x97
 9256 114b 00000000 		.4byte	.LFB90
 9257 114f CC000000 		.4byte	.LFE90-.LFB90
 9258 1153 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 211


 9259 1154 9C       		.byte	0x9c
 9260 1155 2B       		.uleb128 0x2b
 9261 1156 C3070000 		.4byte	.LASF226
 9262 115a 01       		.byte	0x1
 9263 115b 4404     		.2byte	0x444
 9264 115d 00000000 		.4byte	.LFB91
 9265 1161 0C000000 		.4byte	.LFE91-.LFB91
 9266 1165 01       		.uleb128 0x1
 9267 1166 9C       		.byte	0x9c
 9268 1167 2B       		.uleb128 0x2b
 9269 1168 110A0000 		.4byte	.LASF227
 9270 116c 01       		.byte	0x1
 9271 116d 4B04     		.2byte	0x44b
 9272 116f 00000000 		.4byte	.LFB92
 9273 1173 0C000000 		.4byte	.LFE92-.LFB92
 9274 1177 01       		.uleb128 0x1
 9275 1178 9C       		.byte	0x9c
 9276 1179 27       		.uleb128 0x27
 9277 117a 640B0000 		.4byte	.LASF229
 9278 117e 01       		.byte	0x1
 9279 117f 5204     		.2byte	0x452
 9280 1181 00000000 		.4byte	.LFB93
 9281 1185 0C000000 		.4byte	.LFE93-.LFB93
 9282 1189 01       		.uleb128 0x1
 9283 118a 9C       		.byte	0x9c
 9284 118b 2B       		.uleb128 0x2b
 9285 118c D9040000 		.4byte	.LASF230
 9286 1190 01       		.byte	0x1
 9287 1191 5904     		.2byte	0x459
 9288 1193 00000000 		.4byte	.LFB94
 9289 1197 0C000000 		.4byte	.LFE94-.LFB94
 9290 119b 01       		.uleb128 0x1
 9291 119c 9C       		.byte	0x9c
 9292 119d 27       		.uleb128 0x27
 9293 119e 77050000 		.4byte	.LASF231
 9294 11a2 01       		.byte	0x1
 9295 11a3 6404     		.2byte	0x464
 9296 11a5 00000000 		.4byte	.LFB95
 9297 11a9 0C000000 		.4byte	.LFE95-.LFB95
 9298 11ad 01       		.uleb128 0x1
 9299 11ae 9C       		.byte	0x9c
 9300 11af 27       		.uleb128 0x27
 9301 11b0 7E0C0000 		.4byte	.LASF232
 9302 11b4 01       		.byte	0x1
 9303 11b5 6904     		.2byte	0x469
 9304 11b7 00000000 		.4byte	.LFB96
 9305 11bb 0C000000 		.4byte	.LFE96-.LFB96
 9306 11bf 01       		.uleb128 0x1
 9307 11c0 9C       		.byte	0x9c
 9308 11c1 27       		.uleb128 0x27
 9309 11c2 8F010000 		.4byte	.LASF233
 9310 11c6 01       		.byte	0x1
 9311 11c7 6D04     		.2byte	0x46d
 9312 11c9 00000000 		.4byte	.LFB97
 9313 11cd 0C000000 		.4byte	.LFE97-.LFB97
 9314 11d1 01       		.uleb128 0x1
 9315 11d2 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 212


 9316 11d3 27       		.uleb128 0x27
 9317 11d4 CE080000 		.4byte	.LASF234
 9318 11d8 01       		.byte	0x1
 9319 11d9 7104     		.2byte	0x471
 9320 11db 00000000 		.4byte	.LFB98
 9321 11df 0C000000 		.4byte	.LFE98-.LFB98
 9322 11e3 01       		.uleb128 0x1
 9323 11e4 9C       		.byte	0x9c
 9324 11e5 2C       		.uleb128 0x2c
 9325 11e6 650A0000 		.4byte	.LASF236
 9326 11ea 01       		.byte	0x1
 9327 11eb 7504     		.2byte	0x475
 9328 11ed 00000000 		.4byte	.LFB99
 9329 11f1 BC000000 		.4byte	.LFE99-.LFB99
 9330 11f5 01       		.uleb128 0x1
 9331 11f6 9C       		.byte	0x9c
 9332 11f7 34120000 		.4byte	0x1234
 9333 11fb 1F       		.uleb128 0x1f
 9334 11fc FE0E0000 		.4byte	.LASF197
 9335 1200 01       		.byte	0x1
 9336 1201 7704     		.2byte	0x477
 9337 1203 34120000 		.4byte	0x1234
 9338 1207 02       		.uleb128 0x2
 9339 1208 91       		.byte	0x91
 9340 1209 70       		.sleb128 -16
 9341 120a 1F       		.uleb128 0x1f
 9342 120b BE050000 		.4byte	.LASF235
 9343 120f 01       		.byte	0x1
 9344 1210 7804     		.2byte	0x478
 9345 1212 34120000 		.4byte	0x1234
 9346 1216 05       		.uleb128 0x5
 9347 1217 03       		.byte	0x3
 9348 1218 04000000 		.4byte	last_aux_int16.10114
 9349 121c 1A       		.uleb128 0x1a
 9350 121d 42000000 		.4byte	.LBB28
 9351 1221 1A000000 		.4byte	.LBE28-.LBB28
 9352 1225 23       		.uleb128 0x23
 9353 1226 6900     		.ascii	"i\000"
 9354 1228 01       		.byte	0x1
 9355 1229 7F04     		.2byte	0x47f
 9356 122b 97000000 		.4byte	0x97
 9357 122f 02       		.uleb128 0x2
 9358 1230 91       		.byte	0x91
 9359 1231 77       		.sleb128 -9
 9360 1232 00       		.byte	0
 9361 1233 00       		.byte	0
 9362 1234 0E       		.uleb128 0xe
 9363 1235 C7000000 		.4byte	0xc7
 9364 1239 44120000 		.4byte	0x1244
 9365 123d 0F       		.uleb128 0xf
 9366 123e 0C010000 		.4byte	0x10c
 9367 1242 02       		.byte	0x2
 9368 1243 00       		.byte	0
 9369 1244 2D       		.uleb128 0x2d
 9370 1245 56110000 		.4byte	.LASF237
 9371 1249 01       		.byte	0x1
 9372 124a 9B04     		.2byte	0x49b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 213


 9373 124c 00000000 		.4byte	.LFB100
 9374 1250 2C000000 		.4byte	.LFE100-.LFB100
 9375 1254 01       		.uleb128 0x1
 9376 1255 9C       		.byte	0x9c
 9377 1256 6A120000 		.4byte	0x126a
 9378 125a 23       		.uleb128 0x23
 9379 125b 61757800 		.ascii	"aux\000"
 9380 125f 01       		.byte	0x1
 9381 1260 9C04     		.2byte	0x49c
 9382 1262 97000000 		.4byte	0x97
 9383 1266 02       		.uleb128 0x2
 9384 1267 91       		.byte	0x91
 9385 1268 77       		.sleb128 -9
 9386 1269 00       		.byte	0
 9387 126a 27       		.uleb128 0x27
 9388 126b C40A0000 		.4byte	.LASF238
 9389 126f 01       		.byte	0x1
 9390 1270 A104     		.2byte	0x4a1
 9391 1272 00000000 		.4byte	.LFB101
 9392 1276 0C000000 		.4byte	.LFE101-.LFB101
 9393 127a 01       		.uleb128 0x1
 9394 127b 9C       		.byte	0x9c
 9395 127c 27       		.uleb128 0x27
 9396 127d C30D0000 		.4byte	.LASF239
 9397 1281 01       		.byte	0x1
 9398 1282 A504     		.2byte	0x4a5
 9399 1284 00000000 		.4byte	.LFB102
 9400 1288 0C000000 		.4byte	.LFE102-.LFB102
 9401 128c 01       		.uleb128 0x1
 9402 128d 9C       		.byte	0x9c
 9403 128e 2D       		.uleb128 0x2d
 9404 128f 3F090000 		.4byte	.LASF240
 9405 1293 01       		.byte	0x1
 9406 1294 AA04     		.2byte	0x4aa
 9407 1296 00000000 		.4byte	.LFB103
 9408 129a 80000000 		.4byte	.LFE103-.LFB103
 9409 129e 01       		.uleb128 0x1
 9410 129f 9C       		.byte	0x9c
 9411 12a0 C3120000 		.4byte	0x12c3
 9412 12a4 1F       		.uleb128 0x1f
 9413 12a5 FA040000 		.4byte	.LASF181
 9414 12a9 01       		.byte	0x1
 9415 12aa AE04     		.2byte	0x4ae
 9416 12ac 5E040000 		.4byte	0x45e
 9417 12b0 02       		.uleb128 0x2
 9418 12b1 91       		.byte	0x91
 9419 12b2 70       		.sleb128 -16
 9420 12b3 1F       		.uleb128 0x1f
 9421 12b4 FE0E0000 		.4byte	.LASF197
 9422 12b8 01       		.byte	0x1
 9423 12b9 AF04     		.2byte	0x4af
 9424 12bb C7000000 		.4byte	0xc7
 9425 12bf 02       		.uleb128 0x2
 9426 12c0 91       		.byte	0x91
 9427 12c1 6E       		.sleb128 -18
 9428 12c2 00       		.byte	0
 9429 12c3 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 214


 9430 12c4 FA0F0000 		.4byte	.LASF241
 9431 12c8 01       		.byte	0x1
 9432 12c9 CA04     		.2byte	0x4ca
 9433 12cb 00000000 		.4byte	.LFB104
 9434 12cf 0C000000 		.4byte	.LFE104-.LFB104
 9435 12d3 01       		.uleb128 0x1
 9436 12d4 9C       		.byte	0x9c
 9437 12d5 27       		.uleb128 0x27
 9438 12d6 4C070000 		.4byte	.LASF242
 9439 12da 01       		.byte	0x1
 9440 12db CE04     		.2byte	0x4ce
 9441 12dd 00000000 		.4byte	.LFB105
 9442 12e1 0C000000 		.4byte	.LFE105-.LFB105
 9443 12e5 01       		.uleb128 0x1
 9444 12e6 9C       		.byte	0x9c
 9445 12e7 2D       		.uleb128 0x2d
 9446 12e8 CF100000 		.4byte	.LASF243
 9447 12ec 01       		.byte	0x1
 9448 12ed D704     		.2byte	0x4d7
 9449 12ef 00000000 		.4byte	.LFB106
 9450 12f3 C4000000 		.4byte	.LFE106-.LFB106
 9451 12f7 01       		.uleb128 0x1
 9452 12f8 9C       		.byte	0x9c
 9453 12f9 49130000 		.4byte	0x1349
 9454 12fd 1F       		.uleb128 0x1f
 9455 12fe FA040000 		.4byte	.LASF181
 9456 1302 01       		.byte	0x1
 9457 1303 E004     		.2byte	0x4e0
 9458 1305 49130000 		.4byte	0x1349
 9459 1309 02       		.uleb128 0x2
 9460 130a 91       		.byte	0x91
 9461 130b 5C       		.sleb128 -36
 9462 130c 1F       		.uleb128 0x1f
 9463 130d 8E070000 		.4byte	.LASF180
 9464 1311 01       		.byte	0x1
 9465 1312 E104     		.2byte	0x4e1
 9466 1314 97000000 		.4byte	0x97
 9467 1318 02       		.uleb128 0x2
 9468 1319 91       		.byte	0x91
 9469 131a 76       		.sleb128 -10
 9470 131b 1F       		.uleb128 0x1f
 9471 131c 28020000 		.4byte	.LASF244
 9472 1320 01       		.byte	0x1
 9473 1321 E304     		.2byte	0x4e3
 9474 1323 AF000000 		.4byte	0xaf
 9475 1327 02       		.uleb128 0x2
 9476 1328 91       		.byte	0x91
 9477 1329 70       		.sleb128 -16
 9478 132a 1F       		.uleb128 0x1f
 9479 132b F40F0000 		.4byte	.LASF245
 9480 132f 01       		.byte	0x1
 9481 1330 E304     		.2byte	0x4e3
 9482 1332 AF000000 		.4byte	0xaf
 9483 1336 02       		.uleb128 0x2
 9484 1337 91       		.byte	0x91
 9485 1338 6C       		.sleb128 -20
 9486 1339 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 215


 9487 133a 9C030000 		.4byte	.LASF246
 9488 133e 01       		.byte	0x1
 9489 133f E404     		.2byte	0x4e4
 9490 1341 97000000 		.4byte	0x97
 9491 1345 02       		.uleb128 0x2
 9492 1346 91       		.byte	0x91
 9493 1347 77       		.sleb128 -9
 9494 1348 00       		.byte	0
 9495 1349 0E       		.uleb128 0xe
 9496 134a 97000000 		.4byte	0x97
 9497 134e 59130000 		.4byte	0x1359
 9498 1352 0F       		.uleb128 0xf
 9499 1353 0C010000 		.4byte	0x10c
 9500 1357 0F       		.byte	0xf
 9501 1358 00       		.byte	0
 9502 1359 2E       		.uleb128 0x2e
 9503 135a 23060000 		.4byte	.LASF247
 9504 135e 01       		.byte	0x1
 9505 135f 0905     		.2byte	0x509
 9506 1361 C7000000 		.4byte	0xc7
 9507 1365 00000000 		.4byte	.LFB107
 9508 1369 A8000000 		.4byte	.LFE107-.LFB107
 9509 136d 01       		.uleb128 0x1
 9510 136e 9C       		.byte	0x9c
 9511 136f CE130000 		.4byte	0x13ce
 9512 1373 1F       		.uleb128 0x1f
 9513 1374 FA040000 		.4byte	.LASF181
 9514 1378 01       		.byte	0x1
 9515 1379 0B05     		.2byte	0x50b
 9516 137b 49130000 		.4byte	0x1349
 9517 137f 02       		.uleb128 0x2
 9518 1380 91       		.byte	0x91
 9519 1381 5C       		.sleb128 -36
 9520 1382 1F       		.uleb128 0x1f
 9521 1383 8E070000 		.4byte	.LASF180
 9522 1387 01       		.byte	0x1
 9523 1388 0C05     		.2byte	0x50c
 9524 138a 97000000 		.4byte	0x97
 9525 138e 02       		.uleb128 0x2
 9526 138f 91       		.byte	0x91
 9527 1390 74       		.sleb128 -12
 9528 1391 1F       		.uleb128 0x1f
 9529 1392 6D050000 		.4byte	.LASF248
 9530 1396 01       		.byte	0x1
 9531 1397 0D05     		.2byte	0x50d
 9532 1399 C7000000 		.4byte	0xc7
 9533 139d 02       		.uleb128 0x2
 9534 139e 91       		.byte	0x91
 9535 139f 76       		.sleb128 -10
 9536 13a0 1F       		.uleb128 0x1f
 9537 13a1 28020000 		.4byte	.LASF244
 9538 13a5 01       		.byte	0x1
 9539 13a6 0E05     		.2byte	0x50e
 9540 13a8 AF000000 		.4byte	0xaf
 9541 13ac 02       		.uleb128 0x2
 9542 13ad 91       		.byte	0x91
 9543 13ae 70       		.sleb128 -16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 216


 9544 13af 1F       		.uleb128 0x1f
 9545 13b0 F40F0000 		.4byte	.LASF245
 9546 13b4 01       		.byte	0x1
 9547 13b5 0E05     		.2byte	0x50e
 9548 13b7 AF000000 		.4byte	0xaf
 9549 13bb 02       		.uleb128 0x2
 9550 13bc 91       		.byte	0x91
 9551 13bd 6C       		.sleb128 -20
 9552 13be 1F       		.uleb128 0x1f
 9553 13bf 9C030000 		.4byte	.LASF246
 9554 13c3 01       		.byte	0x1
 9555 13c4 0F05     		.2byte	0x50f
 9556 13c6 97000000 		.4byte	0x97
 9557 13ca 02       		.uleb128 0x2
 9558 13cb 91       		.byte	0x91
 9559 13cc 75       		.sleb128 -11
 9560 13cd 00       		.byte	0
 9561 13ce 27       		.uleb128 0x27
 9562 13cf 94000000 		.4byte	.LASF249
 9563 13d3 01       		.byte	0x1
 9564 13d4 2F05     		.2byte	0x52f
 9565 13d6 00000000 		.4byte	.LFB108
 9566 13da 0C000000 		.4byte	.LFE108-.LFB108
 9567 13de 01       		.uleb128 0x1
 9568 13df 9C       		.byte	0x9c
 9569 13e0 2D       		.uleb128 0x2d
 9570 13e1 16030000 		.4byte	.LASF250
 9571 13e5 01       		.byte	0x1
 9572 13e6 3305     		.2byte	0x533
 9573 13e8 00000000 		.4byte	.LFB109
 9574 13ec 20000000 		.4byte	.LFE109-.LFB109
 9575 13f0 01       		.uleb128 0x1
 9576 13f1 9C       		.byte	0x9c
 9577 13f2 06140000 		.4byte	0x1406
 9578 13f6 1F       		.uleb128 0x1f
 9579 13f7 FA040000 		.4byte	.LASF181
 9580 13fb 01       		.byte	0x1
 9581 13fc 3505     		.2byte	0x535
 9582 13fe D7040000 		.4byte	0x4d7
 9583 1402 02       		.uleb128 0x2
 9584 1403 91       		.byte	0x91
 9585 1404 74       		.sleb128 -12
 9586 1405 00       		.byte	0
 9587 1406 27       		.uleb128 0x27
 9588 1407 AF050000 		.4byte	.LASF251
 9589 140b 01       		.byte	0x1
 9590 140c 4105     		.2byte	0x541
 9591 140e 00000000 		.4byte	.LFB110
 9592 1412 0C000000 		.4byte	.LFE110-.LFB110
 9593 1416 01       		.uleb128 0x1
 9594 1417 9C       		.byte	0x9c
 9595 1418 2D       		.uleb128 0x2d
 9596 1419 9B0C0000 		.4byte	.LASF252
 9597 141d 01       		.byte	0x1
 9598 141e 4505     		.2byte	0x545
 9599 1420 00000000 		.4byte	.LFB111
 9600 1424 94000000 		.4byte	.LFE111-.LFB111
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 217


 9601 1428 01       		.uleb128 0x1
 9602 1429 9C       		.byte	0x9c
 9603 142a 5C140000 		.4byte	0x145c
 9604 142e 1F       		.uleb128 0x1f
 9605 142f 8E070000 		.4byte	.LASF180
 9606 1433 01       		.byte	0x1
 9607 1434 4705     		.2byte	0x547
 9608 1436 97000000 		.4byte	0x97
 9609 143a 02       		.uleb128 0x2
 9610 143b 91       		.byte	0x91
 9611 143c 77       		.sleb128 -9
 9612 143d 1F       		.uleb128 0x1f
 9613 143e FA040000 		.4byte	.LASF181
 9614 1442 01       		.byte	0x1
 9615 1443 4805     		.2byte	0x548
 9616 1445 D7040000 		.4byte	0x4d7
 9617 1449 02       		.uleb128 0x2
 9618 144a 91       		.byte	0x91
 9619 144b 74       		.sleb128 -12
 9620 144c 1F       		.uleb128 0x1f
 9621 144d 9C0D0000 		.4byte	.LASF209
 9622 1451 01       		.byte	0x1
 9623 1452 4905     		.2byte	0x549
 9624 1454 97000000 		.4byte	0x97
 9625 1458 02       		.uleb128 0x2
 9626 1459 91       		.byte	0x91
 9627 145a 76       		.sleb128 -10
 9628 145b 00       		.byte	0
 9629 145c 2D       		.uleb128 0x2d
 9630 145d A5010000 		.4byte	.LASF253
 9631 1461 01       		.byte	0x1
 9632 1462 6705     		.2byte	0x567
 9633 1464 00000000 		.4byte	.LFB112
 9634 1468 60000000 		.4byte	.LFE112-.LFB112
 9635 146c 01       		.uleb128 0x1
 9636 146d 9C       		.byte	0x9c
 9637 146e 91140000 		.4byte	0x1491
 9638 1472 1F       		.uleb128 0x1f
 9639 1473 FA040000 		.4byte	.LASF181
 9640 1477 01       		.byte	0x1
 9641 1478 6905     		.2byte	0x569
 9642 147a 5E040000 		.4byte	0x45e
 9643 147e 02       		.uleb128 0x2
 9644 147f 91       		.byte	0x91
 9645 1480 70       		.sleb128 -16
 9646 1481 1F       		.uleb128 0x1f
 9647 1482 FE0E0000 		.4byte	.LASF197
 9648 1486 01       		.byte	0x1
 9649 1487 6A05     		.2byte	0x56a
 9650 1489 C7000000 		.4byte	0xc7
 9651 148d 02       		.uleb128 0x2
 9652 148e 91       		.byte	0x91
 9653 148f 6E       		.sleb128 -18
 9654 1490 00       		.byte	0
 9655 1491 27       		.uleb128 0x27
 9656 1492 25010000 		.4byte	.LASF254
 9657 1496 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 218


 9658 1497 7D05     		.2byte	0x57d
 9659 1499 00000000 		.4byte	.LFB113
 9660 149d 0C000000 		.4byte	.LFE113-.LFB113
 9661 14a1 01       		.uleb128 0x1
 9662 14a2 9C       		.byte	0x9c
 9663 14a3 27       		.uleb128 0x27
 9664 14a4 9B0F0000 		.4byte	.LASF255
 9665 14a8 01       		.byte	0x1
 9666 14a9 8105     		.2byte	0x581
 9667 14ab 00000000 		.4byte	.LFB114
 9668 14af 0C000000 		.4byte	.LFE114-.LFB114
 9669 14b3 01       		.uleb128 0x1
 9670 14b4 9C       		.byte	0x9c
 9671 14b5 27       		.uleb128 0x27
 9672 14b6 8A0E0000 		.4byte	.LASF256
 9673 14ba 01       		.byte	0x1
 9674 14bb 8405     		.2byte	0x584
 9675 14bd 00000000 		.4byte	.LFB115
 9676 14c1 0C000000 		.4byte	.LFE115-.LFB115
 9677 14c5 01       		.uleb128 0x1
 9678 14c6 9C       		.byte	0x9c
 9679 14c7 27       		.uleb128 0x27
 9680 14c8 A6020000 		.4byte	.LASF257
 9681 14cc 01       		.byte	0x1
 9682 14cd 8705     		.2byte	0x587
 9683 14cf 00000000 		.4byte	.LFB116
 9684 14d3 0C000000 		.4byte	.LFE116-.LFB116
 9685 14d7 01       		.uleb128 0x1
 9686 14d8 9C       		.byte	0x9c
 9687 14d9 27       		.uleb128 0x27
 9688 14da DE020000 		.4byte	.LASF258
 9689 14de 01       		.byte	0x1
 9690 14df 8A05     		.2byte	0x58a
 9691 14e1 00000000 		.4byte	.LFB117
 9692 14e5 0C000000 		.4byte	.LFE117-.LFB117
 9693 14e9 01       		.uleb128 0x1
 9694 14ea 9C       		.byte	0x9c
 9695 14eb 1E       		.uleb128 0x1e
 9696 14ec 70020000 		.4byte	.LASF259
 9697 14f0 01       		.byte	0x1
 9698 14f1 8E05     		.2byte	0x58e
 9699 14f3 00000000 		.4byte	.LFB118
 9700 14f7 54010000 		.4byte	.LFE118-.LFB118
 9701 14fb 01       		.uleb128 0x1
 9702 14fc 9C       		.byte	0x9c
 9703 14fd 40150000 		.4byte	0x1540
 9704 1501 22       		.uleb128 0x22
 9705 1502 13060000 		.4byte	.LASF260
 9706 1506 01       		.byte	0x1
 9707 1507 8E05     		.2byte	0x58e
 9708 1509 A3000000 		.4byte	0xa3
 9709 150d 04       		.uleb128 0x4
 9710 150e 91       		.byte	0x91
 9711 150f 9EE37E   		.sleb128 -20066
 9712 1512 23       		.uleb128 0x23
 9713 1513 6900     		.ascii	"i\000"
 9714 1515 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 219


 9715 1516 9005     		.2byte	0x590
 9716 1518 97000000 		.4byte	0x97
 9717 151c 02       		.uleb128 0x2
 9718 151d 91       		.byte	0x91
 9719 151e 77       		.sleb128 -9
 9720 151f 1F       		.uleb128 0x1f
 9721 1520 88030000 		.4byte	.LASF261
 9722 1524 01       		.byte	0x1
 9723 1525 9105     		.2byte	0x591
 9724 1527 690A0000 		.4byte	0xa69
 9725 152b 02       		.uleb128 0x2
 9726 152c 91       		.byte	0x91
 9727 152d 44       		.sleb128 -60
 9728 152e 1F       		.uleb128 0x1f
 9729 152f 68070000 		.4byte	.LASF166
 9730 1533 01       		.byte	0x1
 9731 1534 9205     		.2byte	0x592
 9732 1536 E2080000 		.4byte	0x8e2
 9733 153a 04       		.uleb128 0x4
 9734 153b 91       		.byte	0x91
 9735 153c A4E37E   		.sleb128 -20060
 9736 153f 00       		.byte	0
 9737 1540 26       		.uleb128 0x26
 9738 1541 3D030000 		.4byte	.LASF262
 9739 1545 01       		.byte	0x1
 9740 1546 AA05     		.2byte	0x5aa
 9741 1548 00000000 		.4byte	.LFB119
 9742 154c 14000000 		.4byte	.LFE119-.LFB119
 9743 1550 01       		.uleb128 0x1
 9744 1551 9C       		.byte	0x9c
 9745 1552 66150000 		.4byte	0x1566
 9746 1556 22       		.uleb128 0x22
 9747 1557 13060000 		.4byte	.LASF260
 9748 155b 01       		.byte	0x1
 9749 155c AA05     		.2byte	0x5aa
 9750 155e A3000000 		.4byte	0xa3
 9751 1562 02       		.uleb128 0x2
 9752 1563 91       		.byte	0x91
 9753 1564 76       		.sleb128 -10
 9754 1565 00       		.byte	0
 9755 1566 2D       		.uleb128 0x2d
 9756 1567 15090000 		.4byte	.LASF263
 9757 156b 01       		.byte	0x1
 9758 156c B305     		.2byte	0x5b3
 9759 156e 00000000 		.4byte	.LFB120
 9760 1572 50010000 		.4byte	.LFE120-.LFB120
 9761 1576 01       		.uleb128 0x1
 9762 1577 9C       		.byte	0x9c
 9763 1578 8A150000 		.4byte	0x158a
 9764 157c 23       		.uleb128 0x23
 9765 157d 6900     		.ascii	"i\000"
 9766 157f 01       		.byte	0x1
 9767 1580 B505     		.2byte	0x5b5
 9768 1582 97000000 		.4byte	0x97
 9769 1586 02       		.uleb128 0x2
 9770 1587 91       		.byte	0x91
 9771 1588 6F       		.sleb128 -17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 220


 9772 1589 00       		.byte	0
 9773 158a 2D       		.uleb128 0x2d
 9774 158b A5000000 		.4byte	.LASF264
 9775 158f 01       		.byte	0x1
 9776 1590 DA05     		.2byte	0x5da
 9777 1592 00000000 		.4byte	.LFB121
 9778 1596 94010000 		.4byte	.LFE121-.LFB121
 9779 159a 01       		.uleb128 0x1
 9780 159b 9C       		.byte	0x9c
 9781 159c EC150000 		.4byte	0x15ec
 9782 15a0 1F       		.uleb128 0x1f
 9783 15a1 6D050000 		.4byte	.LASF248
 9784 15a5 01       		.byte	0x1
 9785 15a6 DC05     		.2byte	0x5dc
 9786 15a8 C7000000 		.4byte	0xc7
 9787 15ac 02       		.uleb128 0x2
 9788 15ad 91       		.byte	0x91
 9789 15ae 5C       		.sleb128 -36
 9790 15af 1F       		.uleb128 0x1f
 9791 15b0 6F040000 		.4byte	.LASF265
 9792 15b4 01       		.byte	0x1
 9793 15b5 DD05     		.2byte	0x5dd
 9794 15b7 D3000000 		.4byte	0xd3
 9795 15bb 02       		.uleb128 0x2
 9796 15bc 91       		.byte	0x91
 9797 15bd 64       		.sleb128 -28
 9798 15be 1F       		.uleb128 0x1f
 9799 15bf CD090000 		.4byte	.LASF266
 9800 15c3 01       		.byte	0x1
 9801 15c4 DE05     		.2byte	0x5de
 9802 15c6 D3000000 		.4byte	0xd3
 9803 15ca 02       		.uleb128 0x2
 9804 15cb 91       		.byte	0x91
 9805 15cc 58       		.sleb128 -40
 9806 15cd 1F       		.uleb128 0x1f
 9807 15ce 61040000 		.4byte	.LASF267
 9808 15d2 01       		.byte	0x1
 9809 15d3 DF05     		.2byte	0x5df
 9810 15d5 D3000000 		.4byte	0xd3
 9811 15d9 02       		.uleb128 0x2
 9812 15da 91       		.byte	0x91
 9813 15db 60       		.sleb128 -32
 9814 15dc 1F       		.uleb128 0x1f
 9815 15dd 5D0A0000 		.4byte	.LASF268
 9816 15e1 01       		.byte	0x1
 9817 15e2 E005     		.2byte	0x5e0
 9818 15e4 C7000000 		.4byte	0xc7
 9819 15e8 02       		.uleb128 0x2
 9820 15e9 91       		.byte	0x91
 9821 15ea 5E       		.sleb128 -34
 9822 15eb 00       		.byte	0
 9823 15ec 2F       		.uleb128 0x2f
 9824 15ed F1000000 		.4byte	.LASF269
 9825 15f1 01       		.byte	0x1
 9826 15f2 1506     		.2byte	0x615
 9827 15f4 00000000 		.4byte	.LFB122
 9828 15f8 24000000 		.4byte	.LFE122-.LFB122
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 221


 9829 15fc 01       		.uleb128 0x1
 9830 15fd 9C       		.byte	0x9c
 9831 15fe 2F       		.uleb128 0x2f
 9832 15ff 99090000 		.4byte	.LASF270
 9833 1603 01       		.byte	0x1
 9834 1604 1B06     		.2byte	0x61b
 9835 1606 00000000 		.4byte	.LFB123
 9836 160a 40000000 		.4byte	.LFE123-.LFB123
 9837 160e 01       		.uleb128 0x1
 9838 160f 9C       		.byte	0x9c
 9839 1610 30       		.uleb128 0x30
 9840 1611 D50A0000 		.4byte	.LASF271
 9841 1615 01       		.byte	0x1
 9842 1616 2806     		.2byte	0x628
 9843 1618 97000000 		.4byte	0x97
 9844 161c 00000000 		.4byte	.LFB124
 9845 1620 0E000000 		.4byte	.LFE124-.LFB124
 9846 1624 01       		.uleb128 0x1
 9847 1625 9C       		.byte	0x9c
 9848 1626 26       		.uleb128 0x26
 9849 1627 C9060000 		.4byte	.LASF272
 9850 162b 01       		.byte	0x1
 9851 162c 3206     		.2byte	0x632
 9852 162e 00000000 		.4byte	.LFB125
 9853 1632 12000000 		.4byte	.LFE125-.LFB125
 9854 1636 01       		.uleb128 0x1
 9855 1637 9C       		.byte	0x9c
 9856 1638 4C160000 		.4byte	0x164c
 9857 163c 22       		.uleb128 0x22
 9858 163d 9F050000 		.4byte	.LASF273
 9859 1641 01       		.byte	0x1
 9860 1642 3206     		.2byte	0x632
 9861 1644 73000000 		.4byte	0x73
 9862 1648 02       		.uleb128 0x2
 9863 1649 91       		.byte	0x91
 9864 164a 74       		.sleb128 -12
 9865 164b 00       		.byte	0
 9866 164c 1E       		.uleb128 0x1e
 9867 164d DA0B0000 		.4byte	.LASF274
 9868 1651 01       		.byte	0x1
 9869 1652 8306     		.2byte	0x683
 9870 1654 00000000 		.4byte	.LFB126
 9871 1658 84000000 		.4byte	.LFE126-.LFB126
 9872 165c 01       		.uleb128 0x1
 9873 165d 9C       		.byte	0x9c
 9874 165e 9F160000 		.4byte	0x169f
 9875 1662 22       		.uleb128 0x22
 9876 1663 74070000 		.4byte	.LASF134
 9877 1667 01       		.byte	0x1
 9878 1668 8306     		.2byte	0x683
 9879 166a 97000000 		.4byte	0x97
 9880 166e 02       		.uleb128 0x2
 9881 166f 91       		.byte	0x91
 9882 1670 5F       		.sleb128 -33
 9883 1671 1F       		.uleb128 0x1f
 9884 1672 FA040000 		.4byte	.LASF181
 9885 1676 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 222


 9886 1677 8A06     		.2byte	0x68a
 9887 1679 5E040000 		.4byte	0x45e
 9888 167d 02       		.uleb128 0x2
 9889 167e 91       		.byte	0x91
 9890 167f 68       		.sleb128 -24
 9891 1680 1F       		.uleb128 0x1f
 9892 1681 8E070000 		.4byte	.LASF180
 9893 1685 01       		.byte	0x1
 9894 1686 8B06     		.2byte	0x68b
 9895 1688 97000000 		.4byte	0x97
 9896 168c 02       		.uleb128 0x2
 9897 168d 91       		.byte	0x91
 9898 168e 6F       		.sleb128 -17
 9899 168f 1F       		.uleb128 0x1f
 9900 1690 FE0E0000 		.4byte	.LASF197
 9901 1694 01       		.byte	0x1
 9902 1695 8C06     		.2byte	0x68c
 9903 1697 C7000000 		.4byte	0xc7
 9904 169b 02       		.uleb128 0x2
 9905 169c 91       		.byte	0x91
 9906 169d 66       		.sleb128 -26
 9907 169e 00       		.byte	0
 9908 169f 2F       		.uleb128 0x2f
 9909 16a0 59000000 		.4byte	.LASF275
 9910 16a4 01       		.byte	0x1
 9911 16a5 A206     		.2byte	0x6a2
 9912 16a7 00000000 		.4byte	.LFB127
 9913 16ab 30000000 		.4byte	.LFE127-.LFB127
 9914 16af 01       		.uleb128 0x1
 9915 16b0 9C       		.byte	0x9c
 9916 16b1 27       		.uleb128 0x27
 9917 16b2 1A050000 		.4byte	.LASF276
 9918 16b6 01       		.byte	0x1
 9919 16b7 B006     		.2byte	0x6b0
 9920 16b9 00000000 		.4byte	.LFB128
 9921 16bd 0C000000 		.4byte	.LFE128-.LFB128
 9922 16c1 01       		.uleb128 0x1
 9923 16c2 9C       		.byte	0x9c
 9924 16c3 31       		.uleb128 0x31
 9925 16c4 8C090000 		.4byte	.LASF277
 9926 16c8 08       		.byte	0x8
 9927 16c9 1207     		.2byte	0x712
 9928 16cb CF160000 		.4byte	0x16cf
 9929 16cf 06       		.uleb128 0x6
 9930 16d0 81000000 		.4byte	0x81
 9931 16d4 31       		.uleb128 0x31
 9932 16d5 63100000 		.4byte	.LASF278
 9933 16d9 07       		.byte	0x7
 9934 16da 6D01     		.2byte	0x16d
 9935 16dc AD060000 		.4byte	0x6ad
 9936 16e0 31       		.uleb128 0x31
 9937 16e1 7C0E0000 		.4byte	.LASF279
 9938 16e5 07       		.byte	0x7
 9939 16e6 6D01     		.2byte	0x16d
 9940 16e8 AD060000 		.4byte	0x6ad
 9941 16ec 31       		.uleb128 0x31
 9942 16ed 74000000 		.4byte	.LASF280
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 223


 9943 16f1 07       		.byte	0x7
 9944 16f2 6601     		.2byte	0x166
 9945 16f4 88030000 		.4byte	0x388
 9946 16f8 31       		.uleb128 0x31
 9947 16f9 5D100000 		.4byte	.LASF281
 9948 16fd 07       		.byte	0x7
 9949 16fe 6C01     		.2byte	0x16c
 9950 1700 7D050000 		.4byte	0x57d
 9951 1704 31       		.uleb128 0x31
 9952 1705 F3090000 		.4byte	.LASF282
 9953 1709 07       		.byte	0x7
 9954 170a 6C01     		.2byte	0x16c
 9955 170c 7D050000 		.4byte	0x57d
 9956 1710 31       		.uleb128 0x31
 9957 1711 140F0000 		.4byte	.LASF283
 9958 1715 07       		.byte	0x7
 9959 1716 7001     		.2byte	0x170
 9960 1718 DF000000 		.4byte	0xdf
 9961 171c 31       		.uleb128 0x31
 9962 171d A6030000 		.4byte	.LASF284
 9963 1721 07       		.byte	0x7
 9964 1722 6701     		.2byte	0x167
 9965 1724 97000000 		.4byte	0x97
 9966 1728 0E       		.uleb128 0xe
 9967 1729 97000000 		.4byte	0x97
 9968 172d 38170000 		.4byte	0x1738
 9969 1731 0F       		.uleb128 0xf
 9970 1732 0C010000 		.4byte	0x10c
 9971 1736 02       		.byte	0x2
 9972 1737 00       		.byte	0
 9973 1738 31       		.uleb128 0x31
 9974 1739 50090000 		.4byte	.LASF285
 9975 173d 07       		.byte	0x7
 9976 173e 2001     		.2byte	0x120
 9977 1740 28170000 		.4byte	0x1728
 9978 1744 31       		.uleb128 0x31
 9979 1745 B9060000 		.4byte	.LASF286
 9980 1749 07       		.byte	0x7
 9981 174a 6801     		.2byte	0x168
 9982 174c 97000000 		.4byte	0x97
 9983 1750 31       		.uleb128 0x31
 9984 1751 350D0000 		.4byte	.LASF287
 9985 1755 07       		.byte	0x7
 9986 1756 2C01     		.2byte	0x12c
 9987 1758 950D0000 		.4byte	0xd95
 9988 175c 31       		.uleb128 0x31
 9989 175d EE020000 		.4byte	.LASF288
 9990 1761 07       		.byte	0x7
 9991 1762 2D01     		.2byte	0x12d
 9992 1764 950D0000 		.4byte	0xd95
 9993 1768 31       		.uleb128 0x31
 9994 1769 34100000 		.4byte	.LASF289
 9995 176d 07       		.byte	0x7
 9996 176e 3001     		.2byte	0x130
 9997 1770 950D0000 		.4byte	0xd95
 9998 1774 31       		.uleb128 0x31
 9999 1775 A1100000 		.4byte	.LASF290
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 224


 10000 1779 07       		.byte	0x7
 10001 177a 6A01     		.2byte	0x16a
 10002 177c 97000000 		.4byte	0x97
 10003 1780 31       		.uleb128 0x31
 10004 1781 5F050000 		.4byte	.LASF291
 10005 1785 07       		.byte	0x7
 10006 1786 5401     		.2byte	0x154
 10007 1788 D3000000 		.4byte	0xd3
 10008 178c 31       		.uleb128 0x31
 10009 178d D30B0000 		.4byte	.LASF292
 10010 1791 07       		.byte	0x7
 10011 1792 5501     		.2byte	0x155
 10012 1794 D7040000 		.4byte	0x4d7
 10013 1798 31       		.uleb128 0x31
 10014 1799 B7100000 		.4byte	.LASF293
 10015 179d 07       		.byte	0x7
 10016 179e 5501     		.2byte	0x155
 10017 17a0 D7040000 		.4byte	0x4d7
 10018 17a4 31       		.uleb128 0x31
 10019 17a5 82090000 		.4byte	.LASF294
 10020 17a9 07       		.byte	0x7
 10021 17aa 5501     		.2byte	0x155
 10022 17ac D7040000 		.4byte	0x4d7
 10023 17b0 31       		.uleb128 0x31
 10024 17b1 3C110000 		.4byte	.LASF295
 10025 17b5 07       		.byte	0x7
 10026 17b6 5601     		.2byte	0x156
 10027 17b8 97000000 		.4byte	0x97
 10028 17bc 31       		.uleb128 0x31
 10029 17bd 49020000 		.4byte	.LASF296
 10030 17c1 07       		.byte	0x7
 10031 17c2 5601     		.2byte	0x156
 10032 17c4 97000000 		.4byte	0x97
 10033 17c8 31       		.uleb128 0x31
 10034 17c9 CA010000 		.4byte	.LASF297
 10035 17cd 07       		.byte	0x7
 10036 17ce 5601     		.2byte	0x156
 10037 17d0 97000000 		.4byte	0x97
 10038 17d4 31       		.uleb128 0x31
 10039 17d5 35020000 		.4byte	.LASF298
 10040 17d9 07       		.byte	0x7
 10041 17da 8101     		.2byte	0x181
 10042 17dc C7000000 		.4byte	0xc7
 10043 17e0 31       		.uleb128 0x31
 10044 17e1 3F020000 		.4byte	.LASF299
 10045 17e5 07       		.byte	0x7
 10046 17e6 8201     		.2byte	0x182
 10047 17e8 C7000000 		.4byte	0xc7
 10048 17ec 31       		.uleb128 0x31
 10049 17ed 07030000 		.4byte	.LASF300
 10050 17f1 07       		.byte	0x7
 10051 17f2 6B01     		.2byte	0x16b
 10052 17f4 D3000000 		.4byte	0xd3
 10053 17f8 31       		.uleb128 0x31
 10054 17f9 B10D0000 		.4byte	.LASF301
 10055 17fd 07       		.byte	0x7
 10056 17fe 6B01     		.2byte	0x16b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 225


 10057 1800 D3000000 		.4byte	0xd3
 10058 1804 31       		.uleb128 0x31
 10059 1805 B40B0000 		.4byte	.LASF302
 10060 1809 07       		.byte	0x7
 10061 180a 8401     		.2byte	0x184
 10062 180c 840D0000 		.4byte	0xd84
 10063 1810 32       		.uleb128 0x32
 10064 1811 080F0000 		.4byte	.LASF303
 10065 1815 01       		.byte	0x1
 10066 1816 33       		.byte	0x33
 10067 1817 21180000 		.4byte	0x1821
 10068 181b 05       		.uleb128 0x5
 10069 181c 03       		.byte	0x3
 10070 181d 00000000 		.4byte	EEPROM_ADDR
 10071 1821 07       		.uleb128 0x7
 10072 1822 04       		.byte	0x4
 10073 1823 F4000000 		.4byte	0xf4
 10074 1827 00       		.byte	0
 10075              		.section	.debug_abbrev,"",%progbits
 10076              	.Ldebug_abbrev0:
 10077 0000 01       		.uleb128 0x1
 10078 0001 11       		.uleb128 0x11
 10079 0002 01       		.byte	0x1
 10080 0003 25       		.uleb128 0x25
 10081 0004 0E       		.uleb128 0xe
 10082 0005 13       		.uleb128 0x13
 10083 0006 0B       		.uleb128 0xb
 10084 0007 03       		.uleb128 0x3
 10085 0008 0E       		.uleb128 0xe
 10086 0009 1B       		.uleb128 0x1b
 10087 000a 0E       		.uleb128 0xe
 10088 000b 55       		.uleb128 0x55
 10089 000c 17       		.uleb128 0x17
 10090 000d 11       		.uleb128 0x11
 10091 000e 01       		.uleb128 0x1
 10092 000f 10       		.uleb128 0x10
 10093 0010 17       		.uleb128 0x17
 10094 0011 00       		.byte	0
 10095 0012 00       		.byte	0
 10096 0013 02       		.uleb128 0x2
 10097 0014 24       		.uleb128 0x24
 10098 0015 00       		.byte	0
 10099 0016 0B       		.uleb128 0xb
 10100 0017 0B       		.uleb128 0xb
 10101 0018 3E       		.uleb128 0x3e
 10102 0019 0B       		.uleb128 0xb
 10103 001a 03       		.uleb128 0x3
 10104 001b 0E       		.uleb128 0xe
 10105 001c 00       		.byte	0
 10106 001d 00       		.byte	0
 10107 001e 03       		.uleb128 0x3
 10108 001f 16       		.uleb128 0x16
 10109 0020 00       		.byte	0
 10110 0021 03       		.uleb128 0x3
 10111 0022 0E       		.uleb128 0xe
 10112 0023 3A       		.uleb128 0x3a
 10113 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 226


 10114 0025 3B       		.uleb128 0x3b
 10115 0026 0B       		.uleb128 0xb
 10116 0027 49       		.uleb128 0x49
 10117 0028 13       		.uleb128 0x13
 10118 0029 00       		.byte	0
 10119 002a 00       		.byte	0
 10120 002b 04       		.uleb128 0x4
 10121 002c 24       		.uleb128 0x24
 10122 002d 00       		.byte	0
 10123 002e 0B       		.uleb128 0xb
 10124 002f 0B       		.uleb128 0xb
 10125 0030 3E       		.uleb128 0x3e
 10126 0031 0B       		.uleb128 0xb
 10127 0032 03       		.uleb128 0x3
 10128 0033 08       		.uleb128 0x8
 10129 0034 00       		.byte	0
 10130 0035 00       		.byte	0
 10131 0036 05       		.uleb128 0x5
 10132 0037 16       		.uleb128 0x16
 10133 0038 00       		.byte	0
 10134 0039 03       		.uleb128 0x3
 10135 003a 0E       		.uleb128 0xe
 10136 003b 3A       		.uleb128 0x3a
 10137 003c 0B       		.uleb128 0xb
 10138 003d 3B       		.uleb128 0x3b
 10139 003e 05       		.uleb128 0x5
 10140 003f 49       		.uleb128 0x49
 10141 0040 13       		.uleb128 0x13
 10142 0041 00       		.byte	0
 10143 0042 00       		.byte	0
 10144 0043 06       		.uleb128 0x6
 10145 0044 35       		.uleb128 0x35
 10146 0045 00       		.byte	0
 10147 0046 49       		.uleb128 0x49
 10148 0047 13       		.uleb128 0x13
 10149 0048 00       		.byte	0
 10150 0049 00       		.byte	0
 10151 004a 07       		.uleb128 0x7
 10152 004b 0F       		.uleb128 0xf
 10153 004c 00       		.byte	0
 10154 004d 0B       		.uleb128 0xb
 10155 004e 0B       		.uleb128 0xb
 10156 004f 49       		.uleb128 0x49
 10157 0050 13       		.uleb128 0x13
 10158 0051 00       		.byte	0
 10159 0052 00       		.byte	0
 10160 0053 08       		.uleb128 0x8
 10161 0054 26       		.uleb128 0x26
 10162 0055 00       		.byte	0
 10163 0056 49       		.uleb128 0x49
 10164 0057 13       		.uleb128 0x13
 10165 0058 00       		.byte	0
 10166 0059 00       		.byte	0
 10167 005a 09       		.uleb128 0x9
 10168 005b 04       		.uleb128 0x4
 10169 005c 01       		.byte	0x1
 10170 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 227


 10171 005e 0E       		.uleb128 0xe
 10172 005f 0B       		.uleb128 0xb
 10173 0060 0B       		.uleb128 0xb
 10174 0061 49       		.uleb128 0x49
 10175 0062 13       		.uleb128 0x13
 10176 0063 3A       		.uleb128 0x3a
 10177 0064 0B       		.uleb128 0xb
 10178 0065 3B       		.uleb128 0x3b
 10179 0066 0B       		.uleb128 0xb
 10180 0067 01       		.uleb128 0x1
 10181 0068 13       		.uleb128 0x13
 10182 0069 00       		.byte	0
 10183 006a 00       		.byte	0
 10184 006b 0A       		.uleb128 0xa
 10185 006c 28       		.uleb128 0x28
 10186 006d 00       		.byte	0
 10187 006e 03       		.uleb128 0x3
 10188 006f 0E       		.uleb128 0xe
 10189 0070 1C       		.uleb128 0x1c
 10190 0071 0B       		.uleb128 0xb
 10191 0072 00       		.byte	0
 10192 0073 00       		.byte	0
 10193 0074 0B       		.uleb128 0xb
 10194 0075 13       		.uleb128 0x13
 10195 0076 01       		.byte	0x1
 10196 0077 03       		.uleb128 0x3
 10197 0078 0E       		.uleb128 0xe
 10198 0079 0B       		.uleb128 0xb
 10199 007a 0B       		.uleb128 0xb
 10200 007b 3A       		.uleb128 0x3a
 10201 007c 0B       		.uleb128 0xb
 10202 007d 3B       		.uleb128 0x3b
 10203 007e 0B       		.uleb128 0xb
 10204 007f 01       		.uleb128 0x1
 10205 0080 13       		.uleb128 0x13
 10206 0081 00       		.byte	0
 10207 0082 00       		.byte	0
 10208 0083 0C       		.uleb128 0xc
 10209 0084 0D       		.uleb128 0xd
 10210 0085 00       		.byte	0
 10211 0086 03       		.uleb128 0x3
 10212 0087 0E       		.uleb128 0xe
 10213 0088 3A       		.uleb128 0x3a
 10214 0089 0B       		.uleb128 0xb
 10215 008a 3B       		.uleb128 0x3b
 10216 008b 0B       		.uleb128 0xb
 10217 008c 49       		.uleb128 0x49
 10218 008d 13       		.uleb128 0x13
 10219 008e 38       		.uleb128 0x38
 10220 008f 0B       		.uleb128 0xb
 10221 0090 00       		.byte	0
 10222 0091 00       		.byte	0
 10223 0092 0D       		.uleb128 0xd
 10224 0093 0D       		.uleb128 0xd
 10225 0094 00       		.byte	0
 10226 0095 03       		.uleb128 0x3
 10227 0096 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 228


 10228 0097 3A       		.uleb128 0x3a
 10229 0098 0B       		.uleb128 0xb
 10230 0099 3B       		.uleb128 0x3b
 10231 009a 0B       		.uleb128 0xb
 10232 009b 49       		.uleb128 0x49
 10233 009c 13       		.uleb128 0x13
 10234 009d 38       		.uleb128 0x38
 10235 009e 0B       		.uleb128 0xb
 10236 009f 00       		.byte	0
 10237 00a0 00       		.byte	0
 10238 00a1 0E       		.uleb128 0xe
 10239 00a2 01       		.uleb128 0x1
 10240 00a3 01       		.byte	0x1
 10241 00a4 49       		.uleb128 0x49
 10242 00a5 13       		.uleb128 0x13
 10243 00a6 01       		.uleb128 0x1
 10244 00a7 13       		.uleb128 0x13
 10245 00a8 00       		.byte	0
 10246 00a9 00       		.byte	0
 10247 00aa 0F       		.uleb128 0xf
 10248 00ab 21       		.uleb128 0x21
 10249 00ac 00       		.byte	0
 10250 00ad 49       		.uleb128 0x49
 10251 00ae 13       		.uleb128 0x13
 10252 00af 2F       		.uleb128 0x2f
 10253 00b0 0B       		.uleb128 0xb
 10254 00b1 00       		.byte	0
 10255 00b2 00       		.byte	0
 10256 00b3 10       		.uleb128 0x10
 10257 00b4 13       		.uleb128 0x13
 10258 00b5 01       		.byte	0x1
 10259 00b6 03       		.uleb128 0x3
 10260 00b7 0E       		.uleb128 0xe
 10261 00b8 0B       		.uleb128 0xb
 10262 00b9 0B       		.uleb128 0xb
 10263 00ba 3A       		.uleb128 0x3a
 10264 00bb 0B       		.uleb128 0xb
 10265 00bc 3B       		.uleb128 0x3b
 10266 00bd 05       		.uleb128 0x5
 10267 00be 01       		.uleb128 0x1
 10268 00bf 13       		.uleb128 0x13
 10269 00c0 00       		.byte	0
 10270 00c1 00       		.byte	0
 10271 00c2 11       		.uleb128 0x11
 10272 00c3 0D       		.uleb128 0xd
 10273 00c4 00       		.byte	0
 10274 00c5 03       		.uleb128 0x3
 10275 00c6 0E       		.uleb128 0xe
 10276 00c7 3A       		.uleb128 0x3a
 10277 00c8 0B       		.uleb128 0xb
 10278 00c9 3B       		.uleb128 0x3b
 10279 00ca 05       		.uleb128 0x5
 10280 00cb 49       		.uleb128 0x49
 10281 00cc 13       		.uleb128 0x13
 10282 00cd 38       		.uleb128 0x38
 10283 00ce 0B       		.uleb128 0xb
 10284 00cf 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 229


 10285 00d0 00       		.byte	0
 10286 00d1 12       		.uleb128 0x12
 10287 00d2 0D       		.uleb128 0xd
 10288 00d3 00       		.byte	0
 10289 00d4 03       		.uleb128 0x3
 10290 00d5 08       		.uleb128 0x8
 10291 00d6 3A       		.uleb128 0x3a
 10292 00d7 0B       		.uleb128 0xb
 10293 00d8 3B       		.uleb128 0x3b
 10294 00d9 05       		.uleb128 0x5
 10295 00da 49       		.uleb128 0x49
 10296 00db 13       		.uleb128 0x13
 10297 00dc 38       		.uleb128 0x38
 10298 00dd 0B       		.uleb128 0xb
 10299 00de 00       		.byte	0
 10300 00df 00       		.byte	0
 10301 00e0 13       		.uleb128 0x13
 10302 00e1 2E       		.uleb128 0x2e
 10303 00e2 01       		.byte	0x1
 10304 00e3 03       		.uleb128 0x3
 10305 00e4 0E       		.uleb128 0xe
 10306 00e5 3A       		.uleb128 0x3a
 10307 00e6 0B       		.uleb128 0xb
 10308 00e7 3B       		.uleb128 0x3b
 10309 00e8 05       		.uleb128 0x5
 10310 00e9 27       		.uleb128 0x27
 10311 00ea 19       		.uleb128 0x19
 10312 00eb 49       		.uleb128 0x49
 10313 00ec 13       		.uleb128 0x13
 10314 00ed 20       		.uleb128 0x20
 10315 00ee 0B       		.uleb128 0xb
 10316 00ef 01       		.uleb128 0x1
 10317 00f0 13       		.uleb128 0x13
 10318 00f1 00       		.byte	0
 10319 00f2 00       		.byte	0
 10320 00f3 14       		.uleb128 0x14
 10321 00f4 05       		.uleb128 0x5
 10322 00f5 00       		.byte	0
 10323 00f6 03       		.uleb128 0x3
 10324 00f7 0E       		.uleb128 0xe
 10325 00f8 3A       		.uleb128 0x3a
 10326 00f9 0B       		.uleb128 0xb
 10327 00fa 3B       		.uleb128 0x3b
 10328 00fb 05       		.uleb128 0x5
 10329 00fc 49       		.uleb128 0x49
 10330 00fd 13       		.uleb128 0x13
 10331 00fe 00       		.byte	0
 10332 00ff 00       		.byte	0
 10333 0100 15       		.uleb128 0x15
 10334 0101 34       		.uleb128 0x34
 10335 0102 00       		.byte	0
 10336 0103 03       		.uleb128 0x3
 10337 0104 0E       		.uleb128 0xe
 10338 0105 3A       		.uleb128 0x3a
 10339 0106 0B       		.uleb128 0xb
 10340 0107 3B       		.uleb128 0x3b
 10341 0108 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 230


 10342 0109 49       		.uleb128 0x49
 10343 010a 13       		.uleb128 0x13
 10344 010b 00       		.byte	0
 10345 010c 00       		.byte	0
 10346 010d 16       		.uleb128 0x16
 10347 010e 2E       		.uleb128 0x2e
 10348 010f 01       		.byte	0x1
 10349 0110 3F       		.uleb128 0x3f
 10350 0111 19       		.uleb128 0x19
 10351 0112 03       		.uleb128 0x3
 10352 0113 0E       		.uleb128 0xe
 10353 0114 3A       		.uleb128 0x3a
 10354 0115 0B       		.uleb128 0xb
 10355 0116 3B       		.uleb128 0x3b
 10356 0117 0B       		.uleb128 0xb
 10357 0118 27       		.uleb128 0x27
 10358 0119 19       		.uleb128 0x19
 10359 011a 11       		.uleb128 0x11
 10360 011b 01       		.uleb128 0x1
 10361 011c 12       		.uleb128 0x12
 10362 011d 06       		.uleb128 0x6
 10363 011e 40       		.uleb128 0x40
 10364 011f 18       		.uleb128 0x18
 10365 0120 9642     		.uleb128 0x2116
 10366 0122 19       		.uleb128 0x19
 10367 0123 01       		.uleb128 0x1
 10368 0124 13       		.uleb128 0x13
 10369 0125 00       		.byte	0
 10370 0126 00       		.byte	0
 10371 0127 17       		.uleb128 0x17
 10372 0128 34       		.uleb128 0x34
 10373 0129 00       		.byte	0
 10374 012a 03       		.uleb128 0x3
 10375 012b 0E       		.uleb128 0xe
 10376 012c 3A       		.uleb128 0x3a
 10377 012d 0B       		.uleb128 0xb
 10378 012e 3B       		.uleb128 0x3b
 10379 012f 0B       		.uleb128 0xb
 10380 0130 49       		.uleb128 0x49
 10381 0131 13       		.uleb128 0x13
 10382 0132 02       		.uleb128 0x2
 10383 0133 18       		.uleb128 0x18
 10384 0134 00       		.byte	0
 10385 0135 00       		.byte	0
 10386 0136 18       		.uleb128 0x18
 10387 0137 1D       		.uleb128 0x1d
 10388 0138 01       		.byte	0x1
 10389 0139 31       		.uleb128 0x31
 10390 013a 13       		.uleb128 0x13
 10391 013b 11       		.uleb128 0x11
 10392 013c 01       		.uleb128 0x1
 10393 013d 12       		.uleb128 0x12
 10394 013e 06       		.uleb128 0x6
 10395 013f 58       		.uleb128 0x58
 10396 0140 0B       		.uleb128 0xb
 10397 0141 59       		.uleb128 0x59
 10398 0142 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 231


 10399 0143 01       		.uleb128 0x1
 10400 0144 13       		.uleb128 0x13
 10401 0145 00       		.byte	0
 10402 0146 00       		.byte	0
 10403 0147 19       		.uleb128 0x19
 10404 0148 05       		.uleb128 0x5
 10405 0149 00       		.byte	0
 10406 014a 31       		.uleb128 0x31
 10407 014b 13       		.uleb128 0x13
 10408 014c 02       		.uleb128 0x2
 10409 014d 18       		.uleb128 0x18
 10410 014e 00       		.byte	0
 10411 014f 00       		.byte	0
 10412 0150 1A       		.uleb128 0x1a
 10413 0151 0B       		.uleb128 0xb
 10414 0152 01       		.byte	0x1
 10415 0153 11       		.uleb128 0x11
 10416 0154 01       		.uleb128 0x1
 10417 0155 12       		.uleb128 0x12
 10418 0156 06       		.uleb128 0x6
 10419 0157 00       		.byte	0
 10420 0158 00       		.byte	0
 10421 0159 1B       		.uleb128 0x1b
 10422 015a 34       		.uleb128 0x34
 10423 015b 00       		.byte	0
 10424 015c 31       		.uleb128 0x31
 10425 015d 13       		.uleb128 0x13
 10426 015e 02       		.uleb128 0x2
 10427 015f 18       		.uleb128 0x18
 10428 0160 00       		.byte	0
 10429 0161 00       		.byte	0
 10430 0162 1C       		.uleb128 0x1c
 10431 0163 1D       		.uleb128 0x1d
 10432 0164 01       		.byte	0x1
 10433 0165 31       		.uleb128 0x31
 10434 0166 13       		.uleb128 0x13
 10435 0167 11       		.uleb128 0x11
 10436 0168 01       		.uleb128 0x1
 10437 0169 12       		.uleb128 0x12
 10438 016a 06       		.uleb128 0x6
 10439 016b 58       		.uleb128 0x58
 10440 016c 0B       		.uleb128 0xb
 10441 016d 59       		.uleb128 0x59
 10442 016e 05       		.uleb128 0x5
 10443 016f 01       		.uleb128 0x1
 10444 0170 13       		.uleb128 0x13
 10445 0171 00       		.byte	0
 10446 0172 00       		.byte	0
 10447 0173 1D       		.uleb128 0x1d
 10448 0174 1D       		.uleb128 0x1d
 10449 0175 01       		.byte	0x1
 10450 0176 31       		.uleb128 0x31
 10451 0177 13       		.uleb128 0x13
 10452 0178 11       		.uleb128 0x11
 10453 0179 01       		.uleb128 0x1
 10454 017a 12       		.uleb128 0x12
 10455 017b 06       		.uleb128 0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 232


 10456 017c 58       		.uleb128 0x58
 10457 017d 0B       		.uleb128 0xb
 10458 017e 59       		.uleb128 0x59
 10459 017f 05       		.uleb128 0x5
 10460 0180 00       		.byte	0
 10461 0181 00       		.byte	0
 10462 0182 1E       		.uleb128 0x1e
 10463 0183 2E       		.uleb128 0x2e
 10464 0184 01       		.byte	0x1
 10465 0185 3F       		.uleb128 0x3f
 10466 0186 19       		.uleb128 0x19
 10467 0187 03       		.uleb128 0x3
 10468 0188 0E       		.uleb128 0xe
 10469 0189 3A       		.uleb128 0x3a
 10470 018a 0B       		.uleb128 0xb
 10471 018b 3B       		.uleb128 0x3b
 10472 018c 05       		.uleb128 0x5
 10473 018d 27       		.uleb128 0x27
 10474 018e 19       		.uleb128 0x19
 10475 018f 11       		.uleb128 0x11
 10476 0190 01       		.uleb128 0x1
 10477 0191 12       		.uleb128 0x12
 10478 0192 06       		.uleb128 0x6
 10479 0193 40       		.uleb128 0x40
 10480 0194 18       		.uleb128 0x18
 10481 0195 9642     		.uleb128 0x2116
 10482 0197 19       		.uleb128 0x19
 10483 0198 01       		.uleb128 0x1
 10484 0199 13       		.uleb128 0x13
 10485 019a 00       		.byte	0
 10486 019b 00       		.byte	0
 10487 019c 1F       		.uleb128 0x1f
 10488 019d 34       		.uleb128 0x34
 10489 019e 00       		.byte	0
 10490 019f 03       		.uleb128 0x3
 10491 01a0 0E       		.uleb128 0xe
 10492 01a1 3A       		.uleb128 0x3a
 10493 01a2 0B       		.uleb128 0xb
 10494 01a3 3B       		.uleb128 0x3b
 10495 01a4 05       		.uleb128 0x5
 10496 01a5 49       		.uleb128 0x49
 10497 01a6 13       		.uleb128 0x13
 10498 01a7 02       		.uleb128 0x2
 10499 01a8 18       		.uleb128 0x18
 10500 01a9 00       		.byte	0
 10501 01aa 00       		.byte	0
 10502 01ab 20       		.uleb128 0x20
 10503 01ac 21       		.uleb128 0x21
 10504 01ad 00       		.byte	0
 10505 01ae 49       		.uleb128 0x49
 10506 01af 13       		.uleb128 0x13
 10507 01b0 2F       		.uleb128 0x2f
 10508 01b1 05       		.uleb128 0x5
 10509 01b2 00       		.byte	0
 10510 01b3 00       		.byte	0
 10511 01b4 21       		.uleb128 0x21
 10512 01b5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 233


 10513 01b6 01       		.byte	0x1
 10514 01b7 3F       		.uleb128 0x3f
 10515 01b8 19       		.uleb128 0x19
 10516 01b9 03       		.uleb128 0x3
 10517 01ba 0E       		.uleb128 0xe
 10518 01bb 3A       		.uleb128 0x3a
 10519 01bc 0B       		.uleb128 0xb
 10520 01bd 3B       		.uleb128 0x3b
 10521 01be 05       		.uleb128 0x5
 10522 01bf 27       		.uleb128 0x27
 10523 01c0 19       		.uleb128 0x19
 10524 01c1 49       		.uleb128 0x49
 10525 01c2 13       		.uleb128 0x13
 10526 01c3 11       		.uleb128 0x11
 10527 01c4 01       		.uleb128 0x1
 10528 01c5 12       		.uleb128 0x12
 10529 01c6 06       		.uleb128 0x6
 10530 01c7 40       		.uleb128 0x40
 10531 01c8 18       		.uleb128 0x18
 10532 01c9 9742     		.uleb128 0x2117
 10533 01cb 19       		.uleb128 0x19
 10534 01cc 01       		.uleb128 0x1
 10535 01cd 13       		.uleb128 0x13
 10536 01ce 00       		.byte	0
 10537 01cf 00       		.byte	0
 10538 01d0 22       		.uleb128 0x22
 10539 01d1 05       		.uleb128 0x5
 10540 01d2 00       		.byte	0
 10541 01d3 03       		.uleb128 0x3
 10542 01d4 0E       		.uleb128 0xe
 10543 01d5 3A       		.uleb128 0x3a
 10544 01d6 0B       		.uleb128 0xb
 10545 01d7 3B       		.uleb128 0x3b
 10546 01d8 05       		.uleb128 0x5
 10547 01d9 49       		.uleb128 0x49
 10548 01da 13       		.uleb128 0x13
 10549 01db 02       		.uleb128 0x2
 10550 01dc 18       		.uleb128 0x18
 10551 01dd 00       		.byte	0
 10552 01de 00       		.byte	0
 10553 01df 23       		.uleb128 0x23
 10554 01e0 34       		.uleb128 0x34
 10555 01e1 00       		.byte	0
 10556 01e2 03       		.uleb128 0x3
 10557 01e3 08       		.uleb128 0x8
 10558 01e4 3A       		.uleb128 0x3a
 10559 01e5 0B       		.uleb128 0xb
 10560 01e6 3B       		.uleb128 0x3b
 10561 01e7 05       		.uleb128 0x5
 10562 01e8 49       		.uleb128 0x49
 10563 01e9 13       		.uleb128 0x13
 10564 01ea 02       		.uleb128 0x2
 10565 01eb 18       		.uleb128 0x18
 10566 01ec 00       		.byte	0
 10567 01ed 00       		.byte	0
 10568 01ee 24       		.uleb128 0x24
 10569 01ef 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 234


 10570 01f0 01       		.byte	0x1
 10571 01f1 11       		.uleb128 0x11
 10572 01f2 01       		.uleb128 0x1
 10573 01f3 12       		.uleb128 0x12
 10574 01f4 06       		.uleb128 0x6
 10575 01f5 01       		.uleb128 0x1
 10576 01f6 13       		.uleb128 0x13
 10577 01f7 00       		.byte	0
 10578 01f8 00       		.byte	0
 10579 01f9 25       		.uleb128 0x25
 10580 01fa 21       		.uleb128 0x21
 10581 01fb 00       		.byte	0
 10582 01fc 49       		.uleb128 0x49
 10583 01fd 13       		.uleb128 0x13
 10584 01fe 2F       		.uleb128 0x2f
 10585 01ff 18       		.uleb128 0x18
 10586 0200 00       		.byte	0
 10587 0201 00       		.byte	0
 10588 0202 26       		.uleb128 0x26
 10589 0203 2E       		.uleb128 0x2e
 10590 0204 01       		.byte	0x1
 10591 0205 3F       		.uleb128 0x3f
 10592 0206 19       		.uleb128 0x19
 10593 0207 03       		.uleb128 0x3
 10594 0208 0E       		.uleb128 0xe
 10595 0209 3A       		.uleb128 0x3a
 10596 020a 0B       		.uleb128 0xb
 10597 020b 3B       		.uleb128 0x3b
 10598 020c 05       		.uleb128 0x5
 10599 020d 27       		.uleb128 0x27
 10600 020e 19       		.uleb128 0x19
 10601 020f 11       		.uleb128 0x11
 10602 0210 01       		.uleb128 0x1
 10603 0211 12       		.uleb128 0x12
 10604 0212 06       		.uleb128 0x6
 10605 0213 40       		.uleb128 0x40
 10606 0214 18       		.uleb128 0x18
 10607 0215 9742     		.uleb128 0x2117
 10608 0217 19       		.uleb128 0x19
 10609 0218 01       		.uleb128 0x1
 10610 0219 13       		.uleb128 0x13
 10611 021a 00       		.byte	0
 10612 021b 00       		.byte	0
 10613 021c 27       		.uleb128 0x27
 10614 021d 2E       		.uleb128 0x2e
 10615 021e 00       		.byte	0
 10616 021f 3F       		.uleb128 0x3f
 10617 0220 19       		.uleb128 0x19
 10618 0221 03       		.uleb128 0x3
 10619 0222 0E       		.uleb128 0xe
 10620 0223 3A       		.uleb128 0x3a
 10621 0224 0B       		.uleb128 0xb
 10622 0225 3B       		.uleb128 0x3b
 10623 0226 05       		.uleb128 0x5
 10624 0227 11       		.uleb128 0x11
 10625 0228 01       		.uleb128 0x1
 10626 0229 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 235


 10627 022a 06       		.uleb128 0x6
 10628 022b 40       		.uleb128 0x40
 10629 022c 18       		.uleb128 0x18
 10630 022d 9742     		.uleb128 0x2117
 10631 022f 19       		.uleb128 0x19
 10632 0230 00       		.byte	0
 10633 0231 00       		.byte	0
 10634 0232 28       		.uleb128 0x28
 10635 0233 05       		.uleb128 0x5
 10636 0234 00       		.byte	0
 10637 0235 03       		.uleb128 0x3
 10638 0236 08       		.uleb128 0x8
 10639 0237 3A       		.uleb128 0x3a
 10640 0238 0B       		.uleb128 0xb
 10641 0239 3B       		.uleb128 0x3b
 10642 023a 05       		.uleb128 0x5
 10643 023b 49       		.uleb128 0x49
 10644 023c 13       		.uleb128 0x13
 10645 023d 02       		.uleb128 0x2
 10646 023e 18       		.uleb128 0x18
 10647 023f 00       		.byte	0
 10648 0240 00       		.byte	0
 10649 0241 29       		.uleb128 0x29
 10650 0242 2E       		.uleb128 0x2e
 10651 0243 01       		.byte	0x1
 10652 0244 3F       		.uleb128 0x3f
 10653 0245 19       		.uleb128 0x19
 10654 0246 03       		.uleb128 0x3
 10655 0247 0E       		.uleb128 0xe
 10656 0248 3A       		.uleb128 0x3a
 10657 0249 0B       		.uleb128 0xb
 10658 024a 3B       		.uleb128 0x3b
 10659 024b 05       		.uleb128 0x5
 10660 024c 27       		.uleb128 0x27
 10661 024d 19       		.uleb128 0x19
 10662 024e 49       		.uleb128 0x49
 10663 024f 13       		.uleb128 0x13
 10664 0250 11       		.uleb128 0x11
 10665 0251 01       		.uleb128 0x1
 10666 0252 12       		.uleb128 0x12
 10667 0253 06       		.uleb128 0x6
 10668 0254 40       		.uleb128 0x40
 10669 0255 18       		.uleb128 0x18
 10670 0256 9642     		.uleb128 0x2116
 10671 0258 19       		.uleb128 0x19
 10672 0259 01       		.uleb128 0x1
 10673 025a 13       		.uleb128 0x13
 10674 025b 00       		.byte	0
 10675 025c 00       		.byte	0
 10676 025d 2A       		.uleb128 0x2a
 10677 025e 2E       		.uleb128 0x2e
 10678 025f 00       		.byte	0
 10679 0260 3F       		.uleb128 0x3f
 10680 0261 19       		.uleb128 0x19
 10681 0262 03       		.uleb128 0x3
 10682 0263 0E       		.uleb128 0xe
 10683 0264 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 236


 10684 0265 0B       		.uleb128 0xb
 10685 0266 3B       		.uleb128 0x3b
 10686 0267 05       		.uleb128 0x5
 10687 0268 27       		.uleb128 0x27
 10688 0269 19       		.uleb128 0x19
 10689 026a 49       		.uleb128 0x49
 10690 026b 13       		.uleb128 0x13
 10691 026c 11       		.uleb128 0x11
 10692 026d 01       		.uleb128 0x1
 10693 026e 12       		.uleb128 0x12
 10694 026f 06       		.uleb128 0x6
 10695 0270 40       		.uleb128 0x40
 10696 0271 18       		.uleb128 0x18
 10697 0272 9642     		.uleb128 0x2116
 10698 0274 19       		.uleb128 0x19
 10699 0275 00       		.byte	0
 10700 0276 00       		.byte	0
 10701 0277 2B       		.uleb128 0x2b
 10702 0278 2E       		.uleb128 0x2e
 10703 0279 00       		.byte	0
 10704 027a 3F       		.uleb128 0x3f
 10705 027b 19       		.uleb128 0x19
 10706 027c 03       		.uleb128 0x3
 10707 027d 0E       		.uleb128 0xe
 10708 027e 3A       		.uleb128 0x3a
 10709 027f 0B       		.uleb128 0xb
 10710 0280 3B       		.uleb128 0x3b
 10711 0281 05       		.uleb128 0x5
 10712 0282 27       		.uleb128 0x27
 10713 0283 19       		.uleb128 0x19
 10714 0284 11       		.uleb128 0x11
 10715 0285 01       		.uleb128 0x1
 10716 0286 12       		.uleb128 0x12
 10717 0287 06       		.uleb128 0x6
 10718 0288 40       		.uleb128 0x40
 10719 0289 18       		.uleb128 0x18
 10720 028a 9742     		.uleb128 0x2117
 10721 028c 19       		.uleb128 0x19
 10722 028d 00       		.byte	0
 10723 028e 00       		.byte	0
 10724 028f 2C       		.uleb128 0x2c
 10725 0290 2E       		.uleb128 0x2e
 10726 0291 01       		.byte	0x1
 10727 0292 3F       		.uleb128 0x3f
 10728 0293 19       		.uleb128 0x19
 10729 0294 03       		.uleb128 0x3
 10730 0295 0E       		.uleb128 0xe
 10731 0296 3A       		.uleb128 0x3a
 10732 0297 0B       		.uleb128 0xb
 10733 0298 3B       		.uleb128 0x3b
 10734 0299 05       		.uleb128 0x5
 10735 029a 11       		.uleb128 0x11
 10736 029b 01       		.uleb128 0x1
 10737 029c 12       		.uleb128 0x12
 10738 029d 06       		.uleb128 0x6
 10739 029e 40       		.uleb128 0x40
 10740 029f 18       		.uleb128 0x18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 237


 10741 02a0 9742     		.uleb128 0x2117
 10742 02a2 19       		.uleb128 0x19
 10743 02a3 01       		.uleb128 0x1
 10744 02a4 13       		.uleb128 0x13
 10745 02a5 00       		.byte	0
 10746 02a6 00       		.byte	0
 10747 02a7 2D       		.uleb128 0x2d
 10748 02a8 2E       		.uleb128 0x2e
 10749 02a9 01       		.byte	0x1
 10750 02aa 3F       		.uleb128 0x3f
 10751 02ab 19       		.uleb128 0x19
 10752 02ac 03       		.uleb128 0x3
 10753 02ad 0E       		.uleb128 0xe
 10754 02ae 3A       		.uleb128 0x3a
 10755 02af 0B       		.uleb128 0xb
 10756 02b0 3B       		.uleb128 0x3b
 10757 02b1 05       		.uleb128 0x5
 10758 02b2 11       		.uleb128 0x11
 10759 02b3 01       		.uleb128 0x1
 10760 02b4 12       		.uleb128 0x12
 10761 02b5 06       		.uleb128 0x6
 10762 02b6 40       		.uleb128 0x40
 10763 02b7 18       		.uleb128 0x18
 10764 02b8 9642     		.uleb128 0x2116
 10765 02ba 19       		.uleb128 0x19
 10766 02bb 01       		.uleb128 0x1
 10767 02bc 13       		.uleb128 0x13
 10768 02bd 00       		.byte	0
 10769 02be 00       		.byte	0
 10770 02bf 2E       		.uleb128 0x2e
 10771 02c0 2E       		.uleb128 0x2e
 10772 02c1 01       		.byte	0x1
 10773 02c2 3F       		.uleb128 0x3f
 10774 02c3 19       		.uleb128 0x19
 10775 02c4 03       		.uleb128 0x3
 10776 02c5 0E       		.uleb128 0xe
 10777 02c6 3A       		.uleb128 0x3a
 10778 02c7 0B       		.uleb128 0xb
 10779 02c8 3B       		.uleb128 0x3b
 10780 02c9 05       		.uleb128 0x5
 10781 02ca 49       		.uleb128 0x49
 10782 02cb 13       		.uleb128 0x13
 10783 02cc 11       		.uleb128 0x11
 10784 02cd 01       		.uleb128 0x1
 10785 02ce 12       		.uleb128 0x12
 10786 02cf 06       		.uleb128 0x6
 10787 02d0 40       		.uleb128 0x40
 10788 02d1 18       		.uleb128 0x18
 10789 02d2 9642     		.uleb128 0x2116
 10790 02d4 19       		.uleb128 0x19
 10791 02d5 01       		.uleb128 0x1
 10792 02d6 13       		.uleb128 0x13
 10793 02d7 00       		.byte	0
 10794 02d8 00       		.byte	0
 10795 02d9 2F       		.uleb128 0x2f
 10796 02da 2E       		.uleb128 0x2e
 10797 02db 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 238


 10798 02dc 3F       		.uleb128 0x3f
 10799 02dd 19       		.uleb128 0x19
 10800 02de 03       		.uleb128 0x3
 10801 02df 0E       		.uleb128 0xe
 10802 02e0 3A       		.uleb128 0x3a
 10803 02e1 0B       		.uleb128 0xb
 10804 02e2 3B       		.uleb128 0x3b
 10805 02e3 05       		.uleb128 0x5
 10806 02e4 11       		.uleb128 0x11
 10807 02e5 01       		.uleb128 0x1
 10808 02e6 12       		.uleb128 0x12
 10809 02e7 06       		.uleb128 0x6
 10810 02e8 40       		.uleb128 0x40
 10811 02e9 18       		.uleb128 0x18
 10812 02ea 9642     		.uleb128 0x2116
 10813 02ec 19       		.uleb128 0x19
 10814 02ed 00       		.byte	0
 10815 02ee 00       		.byte	0
 10816 02ef 30       		.uleb128 0x30
 10817 02f0 2E       		.uleb128 0x2e
 10818 02f1 00       		.byte	0
 10819 02f2 3F       		.uleb128 0x3f
 10820 02f3 19       		.uleb128 0x19
 10821 02f4 03       		.uleb128 0x3
 10822 02f5 0E       		.uleb128 0xe
 10823 02f6 3A       		.uleb128 0x3a
 10824 02f7 0B       		.uleb128 0xb
 10825 02f8 3B       		.uleb128 0x3b
 10826 02f9 05       		.uleb128 0x5
 10827 02fa 49       		.uleb128 0x49
 10828 02fb 13       		.uleb128 0x13
 10829 02fc 11       		.uleb128 0x11
 10830 02fd 01       		.uleb128 0x1
 10831 02fe 12       		.uleb128 0x12
 10832 02ff 06       		.uleb128 0x6
 10833 0300 40       		.uleb128 0x40
 10834 0301 18       		.uleb128 0x18
 10835 0302 9742     		.uleb128 0x2117
 10836 0304 19       		.uleb128 0x19
 10837 0305 00       		.byte	0
 10838 0306 00       		.byte	0
 10839 0307 31       		.uleb128 0x31
 10840 0308 34       		.uleb128 0x34
 10841 0309 00       		.byte	0
 10842 030a 03       		.uleb128 0x3
 10843 030b 0E       		.uleb128 0xe
 10844 030c 3A       		.uleb128 0x3a
 10845 030d 0B       		.uleb128 0xb
 10846 030e 3B       		.uleb128 0x3b
 10847 030f 05       		.uleb128 0x5
 10848 0310 49       		.uleb128 0x49
 10849 0311 13       		.uleb128 0x13
 10850 0312 3F       		.uleb128 0x3f
 10851 0313 19       		.uleb128 0x19
 10852 0314 3C       		.uleb128 0x3c
 10853 0315 19       		.uleb128 0x19
 10854 0316 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 239


 10855 0317 00       		.byte	0
 10856 0318 32       		.uleb128 0x32
 10857 0319 34       		.uleb128 0x34
 10858 031a 00       		.byte	0
 10859 031b 03       		.uleb128 0x3
 10860 031c 0E       		.uleb128 0xe
 10861 031d 3A       		.uleb128 0x3a
 10862 031e 0B       		.uleb128 0xb
 10863 031f 3B       		.uleb128 0x3b
 10864 0320 0B       		.uleb128 0xb
 10865 0321 49       		.uleb128 0x49
 10866 0322 13       		.uleb128 0x13
 10867 0323 3F       		.uleb128 0x3f
 10868 0324 19       		.uleb128 0x19
 10869 0325 02       		.uleb128 0x2
 10870 0326 18       		.uleb128 0x18
 10871 0327 00       		.byte	0
 10872 0328 00       		.byte	0
 10873 0329 00       		.byte	0
 10874              		.section	.debug_aranges,"",%progbits
 10875 0000 1C020000 		.4byte	0x21c
 10876 0004 0200     		.2byte	0x2
 10877 0006 00000000 		.4byte	.Ldebug_info0
 10878 000a 04       		.byte	0x4
 10879 000b 00       		.byte	0
 10880 000c 0000     		.2byte	0
 10881 000e 0000     		.2byte	0
 10882 0010 00000000 		.4byte	.LFB64
 10883 0014 BC050000 		.4byte	.LFE64-.LFB64
 10884 0018 00000000 		.4byte	.LFB65
 10885 001c 22000000 		.4byte	.LFE65-.LFB65
 10886 0020 00000000 		.4byte	.LFB66
 10887 0024 5E000000 		.4byte	.LFE66-.LFB66
 10888 0028 00000000 		.4byte	.LFB67
 10889 002c 64010000 		.4byte	.LFE67-.LFB67
 10890 0030 00000000 		.4byte	.LFB68
 10891 0034 BC070000 		.4byte	.LFE68-.LFB68
 10892 0038 00000000 		.4byte	.LFB69
 10893 003c 34070000 		.4byte	.LFE69-.LFB69
 10894 0040 00000000 		.4byte	.LFB70
 10895 0044 34010000 		.4byte	.LFE70-.LFB70
 10896 0048 00000000 		.4byte	.LFB71
 10897 004c 14000000 		.4byte	.LFE71-.LFB71
 10898 0050 00000000 		.4byte	.LFB72
 10899 0054 0C000000 		.4byte	.LFE72-.LFB72
 10900 0058 00000000 		.4byte	.LFB73
 10901 005c B8030000 		.4byte	.LFE73-.LFB73
 10902 0060 00000000 		.4byte	.LFB74
 10903 0064 04020000 		.4byte	.LFE74-.LFB74
 10904 0068 00000000 		.4byte	.LFB75
 10905 006c 12000000 		.4byte	.LFE75-.LFB75
 10906 0070 00000000 		.4byte	.LFB76
 10907 0074 12000000 		.4byte	.LFE76-.LFB76
 10908 0078 00000000 		.4byte	.LFB77
 10909 007c 12000000 		.4byte	.LFE77-.LFB77
 10910 0080 00000000 		.4byte	.LFB78
 10911 0084 12000000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 240


 10912 0088 00000000 		.4byte	.LFB79
 10913 008c 12000000 		.4byte	.LFE79-.LFB79
 10914 0090 00000000 		.4byte	.LFB80
 10915 0094 12000000 		.4byte	.LFE80-.LFB80
 10916 0098 00000000 		.4byte	.LFB81
 10917 009c 12000000 		.4byte	.LFE81-.LFB81
 10918 00a0 00000000 		.4byte	.LFB82
 10919 00a4 84000000 		.4byte	.LFE82-.LFB82
 10920 00a8 00000000 		.4byte	.LFB83
 10921 00ac 88000000 		.4byte	.LFE83-.LFB83
 10922 00b0 00000000 		.4byte	.LFB84
 10923 00b4 A0000000 		.4byte	.LFE84-.LFB84
 10924 00b8 00000000 		.4byte	.LFB85
 10925 00bc 3E000000 		.4byte	.LFE85-.LFB85
 10926 00c0 00000000 		.4byte	.LFB86
 10927 00c4 2E000000 		.4byte	.LFE86-.LFB86
 10928 00c8 00000000 		.4byte	.LFB87
 10929 00cc 90000000 		.4byte	.LFE87-.LFB87
 10930 00d0 00000000 		.4byte	.LFB88
 10931 00d4 60000000 		.4byte	.LFE88-.LFB88
 10932 00d8 00000000 		.4byte	.LFB89
 10933 00dc 58000000 		.4byte	.LFE89-.LFB89
 10934 00e0 00000000 		.4byte	.LFB90
 10935 00e4 CC000000 		.4byte	.LFE90-.LFB90
 10936 00e8 00000000 		.4byte	.LFB91
 10937 00ec 0C000000 		.4byte	.LFE91-.LFB91
 10938 00f0 00000000 		.4byte	.LFB92
 10939 00f4 0C000000 		.4byte	.LFE92-.LFB92
 10940 00f8 00000000 		.4byte	.LFB93
 10941 00fc 0C000000 		.4byte	.LFE93-.LFB93
 10942 0100 00000000 		.4byte	.LFB94
 10943 0104 0C000000 		.4byte	.LFE94-.LFB94
 10944 0108 00000000 		.4byte	.LFB95
 10945 010c 0C000000 		.4byte	.LFE95-.LFB95
 10946 0110 00000000 		.4byte	.LFB96
 10947 0114 0C000000 		.4byte	.LFE96-.LFB96
 10948 0118 00000000 		.4byte	.LFB97
 10949 011c 0C000000 		.4byte	.LFE97-.LFB97
 10950 0120 00000000 		.4byte	.LFB98
 10951 0124 0C000000 		.4byte	.LFE98-.LFB98
 10952 0128 00000000 		.4byte	.LFB99
 10953 012c BC000000 		.4byte	.LFE99-.LFB99
 10954 0130 00000000 		.4byte	.LFB100
 10955 0134 2C000000 		.4byte	.LFE100-.LFB100
 10956 0138 00000000 		.4byte	.LFB101
 10957 013c 0C000000 		.4byte	.LFE101-.LFB101
 10958 0140 00000000 		.4byte	.LFB102
 10959 0144 0C000000 		.4byte	.LFE102-.LFB102
 10960 0148 00000000 		.4byte	.LFB103
 10961 014c 80000000 		.4byte	.LFE103-.LFB103
 10962 0150 00000000 		.4byte	.LFB104
 10963 0154 0C000000 		.4byte	.LFE104-.LFB104
 10964 0158 00000000 		.4byte	.LFB105
 10965 015c 0C000000 		.4byte	.LFE105-.LFB105
 10966 0160 00000000 		.4byte	.LFB106
 10967 0164 C4000000 		.4byte	.LFE106-.LFB106
 10968 0168 00000000 		.4byte	.LFB107
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 241


 10969 016c A8000000 		.4byte	.LFE107-.LFB107
 10970 0170 00000000 		.4byte	.LFB108
 10971 0174 0C000000 		.4byte	.LFE108-.LFB108
 10972 0178 00000000 		.4byte	.LFB109
 10973 017c 20000000 		.4byte	.LFE109-.LFB109
 10974 0180 00000000 		.4byte	.LFB110
 10975 0184 0C000000 		.4byte	.LFE110-.LFB110
 10976 0188 00000000 		.4byte	.LFB111
 10977 018c 94000000 		.4byte	.LFE111-.LFB111
 10978 0190 00000000 		.4byte	.LFB112
 10979 0194 60000000 		.4byte	.LFE112-.LFB112
 10980 0198 00000000 		.4byte	.LFB113
 10981 019c 0C000000 		.4byte	.LFE113-.LFB113
 10982 01a0 00000000 		.4byte	.LFB114
 10983 01a4 0C000000 		.4byte	.LFE114-.LFB114
 10984 01a8 00000000 		.4byte	.LFB115
 10985 01ac 0C000000 		.4byte	.LFE115-.LFB115
 10986 01b0 00000000 		.4byte	.LFB116
 10987 01b4 0C000000 		.4byte	.LFE116-.LFB116
 10988 01b8 00000000 		.4byte	.LFB117
 10989 01bc 0C000000 		.4byte	.LFE117-.LFB117
 10990 01c0 00000000 		.4byte	.LFB118
 10991 01c4 54010000 		.4byte	.LFE118-.LFB118
 10992 01c8 00000000 		.4byte	.LFB119
 10993 01cc 14000000 		.4byte	.LFE119-.LFB119
 10994 01d0 00000000 		.4byte	.LFB120
 10995 01d4 50010000 		.4byte	.LFE120-.LFB120
 10996 01d8 00000000 		.4byte	.LFB121
 10997 01dc 94010000 		.4byte	.LFE121-.LFB121
 10998 01e0 00000000 		.4byte	.LFB122
 10999 01e4 24000000 		.4byte	.LFE122-.LFB122
 11000 01e8 00000000 		.4byte	.LFB123
 11001 01ec 40000000 		.4byte	.LFE123-.LFB123
 11002 01f0 00000000 		.4byte	.LFB124
 11003 01f4 0E000000 		.4byte	.LFE124-.LFB124
 11004 01f8 00000000 		.4byte	.LFB125
 11005 01fc 12000000 		.4byte	.LFE125-.LFB125
 11006 0200 00000000 		.4byte	.LFB126
 11007 0204 84000000 		.4byte	.LFE126-.LFB126
 11008 0208 00000000 		.4byte	.LFB127
 11009 020c 30000000 		.4byte	.LFE127-.LFB127
 11010 0210 00000000 		.4byte	.LFB128
 11011 0214 0C000000 		.4byte	.LFE128-.LFB128
 11012 0218 00000000 		.4byte	0
 11013 021c 00000000 		.4byte	0
 11014              		.section	.debug_ranges,"",%progbits
 11015              	.Ldebug_ranges0:
 11016 0000 00000000 		.4byte	.LFB64
 11017 0004 BC050000 		.4byte	.LFE64
 11018 0008 00000000 		.4byte	.LFB65
 11019 000c 22000000 		.4byte	.LFE65
 11020 0010 00000000 		.4byte	.LFB66
 11021 0014 5E000000 		.4byte	.LFE66
 11022 0018 00000000 		.4byte	.LFB67
 11023 001c 64010000 		.4byte	.LFE67
 11024 0020 00000000 		.4byte	.LFB68
 11025 0024 BC070000 		.4byte	.LFE68
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 242


 11026 0028 00000000 		.4byte	.LFB69
 11027 002c 34070000 		.4byte	.LFE69
 11028 0030 00000000 		.4byte	.LFB70
 11029 0034 34010000 		.4byte	.LFE70
 11030 0038 00000000 		.4byte	.LFB71
 11031 003c 14000000 		.4byte	.LFE71
 11032 0040 00000000 		.4byte	.LFB72
 11033 0044 0C000000 		.4byte	.LFE72
 11034 0048 00000000 		.4byte	.LFB73
 11035 004c B8030000 		.4byte	.LFE73
 11036 0050 00000000 		.4byte	.LFB74
 11037 0054 04020000 		.4byte	.LFE74
 11038 0058 00000000 		.4byte	.LFB75
 11039 005c 12000000 		.4byte	.LFE75
 11040 0060 00000000 		.4byte	.LFB76
 11041 0064 12000000 		.4byte	.LFE76
 11042 0068 00000000 		.4byte	.LFB77
 11043 006c 12000000 		.4byte	.LFE77
 11044 0070 00000000 		.4byte	.LFB78
 11045 0074 12000000 		.4byte	.LFE78
 11046 0078 00000000 		.4byte	.LFB79
 11047 007c 12000000 		.4byte	.LFE79
 11048 0080 00000000 		.4byte	.LFB80
 11049 0084 12000000 		.4byte	.LFE80
 11050 0088 00000000 		.4byte	.LFB81
 11051 008c 12000000 		.4byte	.LFE81
 11052 0090 00000000 		.4byte	.LFB82
 11053 0094 84000000 		.4byte	.LFE82
 11054 0098 00000000 		.4byte	.LFB83
 11055 009c 88000000 		.4byte	.LFE83
 11056 00a0 00000000 		.4byte	.LFB84
 11057 00a4 A0000000 		.4byte	.LFE84
 11058 00a8 00000000 		.4byte	.LFB85
 11059 00ac 3E000000 		.4byte	.LFE85
 11060 00b0 00000000 		.4byte	.LFB86
 11061 00b4 2E000000 		.4byte	.LFE86
 11062 00b8 00000000 		.4byte	.LFB87
 11063 00bc 90000000 		.4byte	.LFE87
 11064 00c0 00000000 		.4byte	.LFB88
 11065 00c4 60000000 		.4byte	.LFE88
 11066 00c8 00000000 		.4byte	.LFB89
 11067 00cc 58000000 		.4byte	.LFE89
 11068 00d0 00000000 		.4byte	.LFB90
 11069 00d4 CC000000 		.4byte	.LFE90
 11070 00d8 00000000 		.4byte	.LFB91
 11071 00dc 0C000000 		.4byte	.LFE91
 11072 00e0 00000000 		.4byte	.LFB92
 11073 00e4 0C000000 		.4byte	.LFE92
 11074 00e8 00000000 		.4byte	.LFB93
 11075 00ec 0C000000 		.4byte	.LFE93
 11076 00f0 00000000 		.4byte	.LFB94
 11077 00f4 0C000000 		.4byte	.LFE94
 11078 00f8 00000000 		.4byte	.LFB95
 11079 00fc 0C000000 		.4byte	.LFE95
 11080 0100 00000000 		.4byte	.LFB96
 11081 0104 0C000000 		.4byte	.LFE96
 11082 0108 00000000 		.4byte	.LFB97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 243


 11083 010c 0C000000 		.4byte	.LFE97
 11084 0110 00000000 		.4byte	.LFB98
 11085 0114 0C000000 		.4byte	.LFE98
 11086 0118 00000000 		.4byte	.LFB99
 11087 011c BC000000 		.4byte	.LFE99
 11088 0120 00000000 		.4byte	.LFB100
 11089 0124 2C000000 		.4byte	.LFE100
 11090 0128 00000000 		.4byte	.LFB101
 11091 012c 0C000000 		.4byte	.LFE101
 11092 0130 00000000 		.4byte	.LFB102
 11093 0134 0C000000 		.4byte	.LFE102
 11094 0138 00000000 		.4byte	.LFB103
 11095 013c 80000000 		.4byte	.LFE103
 11096 0140 00000000 		.4byte	.LFB104
 11097 0144 0C000000 		.4byte	.LFE104
 11098 0148 00000000 		.4byte	.LFB105
 11099 014c 0C000000 		.4byte	.LFE105
 11100 0150 00000000 		.4byte	.LFB106
 11101 0154 C4000000 		.4byte	.LFE106
 11102 0158 00000000 		.4byte	.LFB107
 11103 015c A8000000 		.4byte	.LFE107
 11104 0160 00000000 		.4byte	.LFB108
 11105 0164 0C000000 		.4byte	.LFE108
 11106 0168 00000000 		.4byte	.LFB109
 11107 016c 20000000 		.4byte	.LFE109
 11108 0170 00000000 		.4byte	.LFB110
 11109 0174 0C000000 		.4byte	.LFE110
 11110 0178 00000000 		.4byte	.LFB111
 11111 017c 94000000 		.4byte	.LFE111
 11112 0180 00000000 		.4byte	.LFB112
 11113 0184 60000000 		.4byte	.LFE112
 11114 0188 00000000 		.4byte	.LFB113
 11115 018c 0C000000 		.4byte	.LFE113
 11116 0190 00000000 		.4byte	.LFB114
 11117 0194 0C000000 		.4byte	.LFE114
 11118 0198 00000000 		.4byte	.LFB115
 11119 019c 0C000000 		.4byte	.LFE115
 11120 01a0 00000000 		.4byte	.LFB116
 11121 01a4 0C000000 		.4byte	.LFE116
 11122 01a8 00000000 		.4byte	.LFB117
 11123 01ac 0C000000 		.4byte	.LFE117
 11124 01b0 00000000 		.4byte	.LFB118
 11125 01b4 54010000 		.4byte	.LFE118
 11126 01b8 00000000 		.4byte	.LFB119
 11127 01bc 14000000 		.4byte	.LFE119
 11128 01c0 00000000 		.4byte	.LFB120
 11129 01c4 50010000 		.4byte	.LFE120
 11130 01c8 00000000 		.4byte	.LFB121
 11131 01cc 94010000 		.4byte	.LFE121
 11132 01d0 00000000 		.4byte	.LFB122
 11133 01d4 24000000 		.4byte	.LFE122
 11134 01d8 00000000 		.4byte	.LFB123
 11135 01dc 40000000 		.4byte	.LFE123
 11136 01e0 00000000 		.4byte	.LFB124
 11137 01e4 0E000000 		.4byte	.LFE124
 11138 01e8 00000000 		.4byte	.LFB125
 11139 01ec 12000000 		.4byte	.LFE125
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 244


 11140 01f0 00000000 		.4byte	.LFB126
 11141 01f4 84000000 		.4byte	.LFE126
 11142 01f8 00000000 		.4byte	.LFB127
 11143 01fc 30000000 		.4byte	.LFE127
 11144 0200 00000000 		.4byte	.LFB128
 11145 0204 0C000000 		.4byte	.LFE128
 11146 0208 00000000 		.4byte	0
 11147 020c 00000000 		.4byte	0
 11148              		.section	.debug_line,"",%progbits
 11149              	.Ldebug_line0:
 11150 0000 3D0B0000 		.section	.debug_str,"MS",%progbits,1
 11150      02008B01 
 11150      00000201 
 11150      FB0E0D00 
 11150      01010101 
 11151              	.LASF160:
 11152 0000 696E666F 		.ascii	"infoSend\000"
 11152      53656E64 
 11152      00
 11153              	.LASF48:
 11154 0009 4D454E55 		.ascii	"MENU_Y_N\000"
 11154      5F595F4E 
 11154      00
 11155              	.LASF174:
 11156 0012 73747269 		.ascii	"string_length\000"
 11156      6E675F6C 
 11156      656E6774 
 11156      6800
 11157              	.LASF24:
 11158 0020 73697A65 		.ascii	"sizetype\000"
 11158      74797065 
 11158      00
 11159              	.LASF66:
 11160 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 11160      494E4954 
 11160      5F4D454D 
 11160      00
 11161              	.LASF99:
 11162 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11162      545F4D4F 
 11162      44455F45 
 11162      4D475F46 
 11162      4346535F 
 11163              	.LASF46:
 11164 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 11164      5F494E50 
 11164      555400
 11165              	.LASF275:
 11166 0059 73746F70 		.ascii	"stop_master_device\000"
 11166      5F6D6173 
 11166      7465725F 
 11166      64657669 
 11166      636500
 11167              	.LASF11:
 11168 006c 696E7433 		.ascii	"int32_t\000"
 11168      325F7400 
 11169              	.LASF280:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 245


 11170 0074 675F7278 		.ascii	"g_rx\000"
 11170      00
 11171              	.LASF119:
 11172 0079 73745F64 		.ascii	"st_data\000"
 11172      61746100 
 11173              	.LASF221:
 11174 0081 77726974 		.ascii	"writeStatus\000"
 11174      65537461 
 11174      74757300 
 11175              	.LASF15:
 11176 008d 75696E74 		.ascii	"uint32\000"
 11176      333200
 11177              	.LASF249:
 11178 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 11178      7365745F 
 11178      62617564 
 11178      72617465 
 11178      00
 11179              	.LASF264:
 11180 00a5 6169725F 		.ascii	"air_chambers_control\000"
 11180      6368616D 
 11180      62657273 
 11180      5F636F6E 
 11180      74726F6C 
 11181              	.LASF200:
 11182 00ba 70726570 		.ascii	"prepare_generic_info\000"
 11182      6172655F 
 11182      67656E65 
 11182      7269635F 
 11182      696E666F 
 11183              	.LASF186:
 11184 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 11184      4D454E55 
 11184      7300
 11185              	.LASF124:
 11186 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 11186      6C696D5F 
 11186      696E6600 
 11187              	.LASF164:
 11188 00e5 54595045 		.ascii	"TYPE\000"
 11188      00
 11189              	.LASF147:
 11190 00ea 63686F69 		.ascii	"choice\000"
 11190      636500
 11191              	.LASF269:
 11192 00f1 70756D70 		.ascii	"pump_control\000"
 11192      5F636F6E 
 11192      74726F6C 
 11192      00
 11193              	.LASF33:
 11194 00fe 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 11194      4F4D5F52 
 11194      45534554 
 11194      5F434F55 
 11194      4E5400
 11195              	.LASF98:
 11196 0111 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 246


 11196      545F4D4F 
 11196      44455F45 
 11196      4D475F46 
 11196      43465300 
 11197              	.LASF254:
 11198 0125 636D645F 		.ascii	"cmd_get_imu_readings\000"
 11198      6765745F 
 11198      696D755F 
 11198      72656164 
 11198      696E6773 
 11199              	.LASF132:
 11200 013a 73745F4D 		.ascii	"st_MASTER_spec\000"
 11200      41535445 
 11200      525F7370 
 11200      656300
 11201              	.LASF152:
 11202 0149 50415241 		.ascii	"PARAM_STR\000"
 11202      4D5F5354 
 11202      5200
 11203              	.LASF97:
 11204 0153 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 11204      545F4D4F 
 11204      44455F45 
 11204      4D475F49 
 11204      4E544547 
 11205              	.LASF199:
 11206 016b 6D5F746D 		.ascii	"m_tmp\000"
 11206      7000
 11207              	.LASF184:
 11208 0171 50415241 		.ascii	"PARAM_IDX\000"
 11208      4D5F4944 
 11208      5800
 11209              	.LASF16:
 11210 017b 696E7438 		.ascii	"int8\000"
 11210      00
 11211              	.LASF167:
 11212 0180 6765745F 		.ascii	"get_param_list\000"
 11212      70617261 
 11212      6D5F6C69 
 11212      737400
 11213              	.LASF233:
 11214 018f 636D645F 		.ascii	"cmd_get_accelerations\000"
 11214      6765745F 
 11214      61636365 
 11214      6C657261 
 11214      74696F6E 
 11215              	.LASF253:
 11216 01a5 636D645F 		.ascii	"cmd_get_emg\000"
 11216      6765745F 
 11216      656D6700 
 11217              	.LASF127:
 11218 01b1 73745F65 		.ascii	"st_emg\000"
 11218      6D6700
 11219              	.LASF39:
 11220 01b8 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 11220      4F4D5F4D 
 11220      4541535F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 247


 11220      4F46465F 
 11220      3200
 11221              	.LASF297:
 11222 01ca 50756D70 		.ascii	"Pump_refNew\000"
 11222      5F726566 
 11222      4E657700 
 11223              	.LASF308:
 11224 01d6 72657375 		.ascii	"result\000"
 11224      6C7400
 11225              	.LASF118:
 11226 01dd 72656164 		.ascii	"ready\000"
 11226      7900
 11227              	.LASF176:
 11228 01e3 6175785F 		.ascii	"aux_str1\000"
 11228      73747231 
 11228      00
 11229              	.LASF29:
 11230 01ec 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 11230      4F4D5F50 
 11230      4F535F4C 
 11230      494D00
 11231              	.LASF84:
 11232 01fb 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 11232      4745545F 
 11232      4A4F5953 
 11232      5449434B 
 11232      00
 11233              	.LASF96:
 11234 020c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 11234      545F4D4F 
 11234      44455F45 
 11234      4D475F50 
 11234      524F504F 
 11235              	.LASF244:
 11236 0228 745F7374 		.ascii	"t_start\000"
 11236      61727400 
 11237              	.LASF144:
 11238 0230 6D656E75 		.ascii	"menu\000"
 11238      00
 11239              	.LASF298:
 11240 0235 50574D5F 		.ascii	"PWM_IMU_1\000"
 11240      494D555F 
 11240      3100
 11241              	.LASF299:
 11242 023f 50574D5F 		.ascii	"PWM_IMU_2\000"
 11242      494D555F 
 11242      3200
 11243              	.LASF296:
 11244 0249 50756D70 		.ascii	"Pump_refOld\000"
 11244      5F726566 
 11244      4F6C6400 
 11245              	.LASF4:
 11246 0255 6C6F6E67 		.ascii	"long int\000"
 11246      20696E74 
 11246      00
 11247              	.LASF37:
 11248 025e 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 248


 11248      4F4D5F43 
 11248      5552525F 
 11248      5049445F 
 11248      3200
 11249              	.LASF259:
 11250 0270 636D645F 		.ascii	"cmd_get_SD_file\000"
 11250      6765745F 
 11250      53445F66 
 11250      696C6500 
 11251              	.LASF228:
 11252 0280 7365745A 		.ascii	"setZeros\000"
 11252      65726F73 
 11252      00
 11253              	.LASF122:
 11254 0289 756E7573 		.ascii	"unused_bytes\000"
 11254      65645F62 
 11254      79746573 
 11254      00
 11255              	.LASF151:
 11256 0296 4E554D5F 		.ascii	"NUM_ITEMS\000"
 11256      4954454D 
 11256      5300
 11257              	.LASF185:
 11258 02a0 4D454D5F 		.ascii	"MEM_P\000"
 11258      5000
 11259              	.LASF257:
 11260 02a6 636D645F 		.ascii	"cmd_get_ADC_map\000"
 11260      6765745F 
 11260      4144435F 
 11260      6D617000 
 11261              	.LASF74:
 11262 02b6 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 11262      4745545F 
 11262      43555252 
 11262      454E5453 
 11262      00
 11263              	.LASF206:
 11264 02c7 70726570 		.ascii	"prepare_SD_EMG_history\000"
 11264      6172655F 
 11264      53445F45 
 11264      4D475F68 
 11264      6973746F 
 11265              	.LASF258:
 11266 02de 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 11266      6765745F 
 11266      4144435F 
 11266      72617700 
 11267              	.LASF288:
 11268 02ee 73645061 		.ascii	"sdParam\000"
 11268      72616D00 
 11269              	.LASF36:
 11270 02f6 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 11270      4F4D5F50 
 11270      4F535F50 
 11270      49445F32 
 11270      00
 11271              	.LASF300:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 249


 11272 0307 70726573 		.ascii	"pressure_value\000"
 11272      73757265 
 11272      5F76616C 
 11272      756500
 11273              	.LASF250:
 11274 0316 636D645F 		.ascii	"cmd_ping\000"
 11274      70696E67 
 11274      00
 11275              	.LASF27:
 11276 031f 43555354 		.ascii	"CUSTOM_INPUT\000"
 11276      4F4D5F49 
 11276      4E505554 
 11276      00
 11277              	.LASF189:
 11278 032c 7365745F 		.ascii	"set_custom_param\000"
 11278      63757374 
 11278      6F6D5F70 
 11278      6172616D 
 11278      00
 11279              	.LASF262:
 11280 033d 636D645F 		.ascii	"cmd_remove_SD_file\000"
 11280      72656D6F 
 11280      76655F53 
 11280      445F6669 
 11280      6C6500
 11281              	.LASF41:
 11282 0350 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 11282      4F4D5F44 
 11282      52495645 
 11282      525F3200 
 11283              	.LASF0:
 11284 0360 7369676E 		.ascii	"signed char\000"
 11284      65642063 
 11284      68617200 
 11285              	.LASF133:
 11286 036c 6D617374 		.ascii	"master_mode_active\000"
 11286      65725F6D 
 11286      6F64655F 
 11286      61637469 
 11286      766500
 11287              	.LASF219:
 11288 037f 6D656D53 		.ascii	"memStore\000"
 11288      746F7265 
 11288      00
 11289              	.LASF261:
 11290 0388 66696C65 		.ascii	"filename\000"
 11290      6E616D65 
 11290      00
 11291              	.LASF131:
 11292 0391 73776974 		.ascii	"switch_emg\000"
 11292      63685F65 
 11292      6D6700
 11293              	.LASF246:
 11294 039c 72656164 		.ascii	"read_flag\000"
 11294      5F666C61 
 11294      6700
 11295              	.LASF284:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 250


 11296 03a6 696E7465 		.ascii	"interrupt_flag\000"
 11296      72727570 
 11296      745F666C 
 11296      616700
 11297              	.LASF47:
 11298 03b5 4D454E55 		.ascii	"MENU_CTRL\000"
 11298      5F435452 
 11298      4C00
 11299              	.LASF1:
 11300 03bf 756E7369 		.ascii	"unsigned char\000"
 11300      676E6564 
 11300      20636861 
 11300      7200
 11301              	.LASF81:
 11302 03cd 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 11302      5345545F 
 11302      56494252 
 11302      4F544143 
 11302      54494C45 
 11303              	.LASF82:
 11304 03e9 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 11304      4745545F 
 11304      56494252 
 11304      4F544143 
 11304      54494C45 
 11305              	.LASF69:
 11306 0405 434D445F 		.ascii	"CMD_ACTIVATE\000"
 11306      41435449 
 11306      56415445 
 11306      00
 11307              	.LASF62:
 11308 0412 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 11308      53544F52 
 11308      455F4445 
 11308      4641554C 
 11308      545F5041 
 11309              	.LASF32:
 11310 042b 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 11310      4F4D5F48 
 11310      414E445F 
 11310      53494445 
 11310      00
 11311              	.LASF218:
 11312 043c 76616C75 		.ascii	"value\000"
 11312      6500
 11313              	.LASF158:
 11314 0442 70726573 		.ascii	"pressure\000"
 11314      73757265 
 11314      00
 11315              	.LASF70:
 11316 044b 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 11316      4745545F 
 11316      41435449 
 11316      56415445 
 11316      00
 11317              	.LASF21:
 11318 045c 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 251


 11318      00
 11319              	.LASF267:
 11320 0461 76616C76 		.ascii	"valve_command\000"
 11320      655F636F 
 11320      6D6D616E 
 11320      6400
 11321              	.LASF265:
 11322 046f 70726573 		.ascii	"pressure_reference\000"
 11322      73757265 
 11322      5F726566 
 11322      6572656E 
 11322      636500
 11323              	.LASF223:
 11324 0482 7265745F 		.ascii	"ret_val\000"
 11324      76616C00 
 11325              	.LASF52:
 11326 048a 4D454E55 		.ascii	"MENU_SPI\000"
 11326      5F535049 
 11326      00
 11327              	.LASF148:
 11328 0493 70617261 		.ascii	"parameter\000"
 11328      6D657465 
 11328      7200
 11329              	.LASF162:
 11330 049d 7061636B 		.ascii	"packet_string\000"
 11330      65745F73 
 11330      7472696E 
 11330      6700
 11331              	.LASF34:
 11332 04ab 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 11332      4F4D5F4C 
 11332      4153545F 
 11332      43484543 
 11332      4B45445F 
 11333              	.LASF215:
 11334 04c1 64617461 		.ascii	"data_length\000"
 11334      5F6C656E 
 11334      67746800 
 11335              	.LASF125:
 11336 04cd 706F735F 		.ascii	"pos_lim_sup\000"
 11336      6C696D5F 
 11336      73757000 
 11337              	.LASF230:
 11338 04d9 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 11338      6E69745F 
 11338      4F74626B 
 11338      41637457 
 11338      72697374 
 11339              	.LASF130:
 11340 04f0 656D675F 		.ascii	"emg_speed\000"
 11340      73706565 
 11340      6400
 11341              	.LASF181:
 11342 04fa 7061636B 		.ascii	"packet_data\000"
 11342      65745F64 
 11342      61746100 
 11343              	.LASF120:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 252


 11344 0506 73745F64 		.ascii	"st_device\000"
 11344      65766963 
 11344      6500
 11345              	.LASF210:
 11346 0510 636F6D6D 		.ascii	"commWrite\000"
 11346      57726974 
 11346      6500
 11347              	.LASF276:
 11348 051a 64656163 		.ascii	"deactivate_slaves\000"
 11348      74697661 
 11348      74655F73 
 11348      6C617665 
 11348      7300
 11349              	.LASF222:
 11350 052c 70616765 		.ascii	"pages\000"
 11350      7300
 11351              	.LASF309:
 11352 0532 6D656D49 		.ascii	"memInit\000"
 11352      6E697400 
 11353              	.LASF44:
 11354 053a 6D656E75 		.ascii	"menu_type\000"
 11354      5F747970 
 11354      6500
 11355              	.LASF55:
 11356 0544 4D454E55 		.ascii	"MENU_DEVICE\000"
 11356      5F444556 
 11356      49434500 
 11357              	.LASF71:
 11358 0550 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 11358      5345545F 
 11358      494E5055 
 11358      545300
 11359              	.LASF291:
 11360 055f 53485F72 		.ascii	"SH_ref\000"
 11360      656600
 11361              	.LASF116:
 11362 0566 62756666 		.ascii	"buffer\000"
 11362      657200
 11363              	.LASF248:
 11364 056d 63757272 		.ascii	"curr_diff\000"
 11364      5F646966 
 11364      6600
 11365              	.LASF231:
 11366 0577 636D645F 		.ascii	"cmd_get_measurements\000"
 11366      6765745F 
 11366      6D656173 
 11366      7572656D 
 11366      656E7473 
 11367              	.LASF161:
 11368 058c 72785F63 		.ascii	"rx_cmd\000"
 11368      6D6400
 11369              	.LASF114:
 11370 0593 54595045 		.ascii	"TYPE_DOUBLE\000"
 11370      5F444F55 
 11370      424C4500 
 11371              	.LASF273:
 11372 059f 736C6176 		.ascii	"slave_motor_idx\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 253


 11372      655F6D6F 
 11372      746F725F 
 11372      69647800 
 11373              	.LASF251:
 11374 05af 636D645F 		.ascii	"cmd_get_inputs\000"
 11374      6765745F 
 11374      696E7075 
 11374      747300
 11375              	.LASF235:
 11376 05be 6C617374 		.ascii	"last_aux_int16\000"
 11376      5F617578 
 11376      5F696E74 
 11376      313600
 11377              	.LASF103:
 11378 05cd 41434B5F 		.ascii	"ACK_ERROR\000"
 11378      4552524F 
 11378      5200
 11379              	.LASF94:
 11380 05d7 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 11380      545F4D4F 
 11380      44455F45 
 11380      58544552 
 11380      4E414C00 
 11381              	.LASF183:
 11382 05eb 696E6465 		.ascii	"index\000"
 11382      7800
 11383              	.LASF137:
 11384 05f1 6D617869 		.ascii	"maximum_pressure_kPa\000"
 11384      6D756D5F 
 11384      70726573 
 11384      73757265 
 11384      5F6B5061 
 11385              	.LASF43:
 11386 0606 63757374 		.ascii	"custom_param\000"
 11386      6F6D5F70 
 11386      6172616D 
 11386      00
 11387              	.LASF260:
 11388 0613 66696C65 		.ascii	"filename_length\000"
 11388      6E616D65 
 11388      5F6C656E 
 11388      67746800 
 11389              	.LASF247:
 11390 0623 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 11390      52656164 
 11390      52657343 
 11390      75727246 
 11390      726F6D53 
 11391              	.LASF57:
 11392 0639 4D454E55 		.ascii	"MENU_WRIST\000"
 11392      5F575249 
 11392      535400
 11393              	.LASF306:
 11394 0644 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 11394      73657273 
 11394      5C6D676E 
 11394      6F63636F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 254


 11394      5C446F63 
 11395 0671 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 11395      485F5649 
 11395      4245535C 
 11395      46575F57 
 11395      65617261 
 11396 06a2 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 11396      56494245 
 11396      535F536F 
 11396      636B6574 
 11396      2E637964 
 11397              	.LASF286:
 11398 06b9 72657365 		.ascii	"reset_PSoC_flag\000"
 11398      745F5053 
 11398      6F435F66 
 11398      6C616700 
 11399              	.LASF272:
 11400 06c9 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 11400      5F616374 
 11400      5F777269 
 11400      73745F63 
 11400      6F6E7472 
 11401              	.LASF115:
 11402 06e0 54595045 		.ascii	"TYPE_STRING\000"
 11402      5F535452 
 11402      494E4700 
 11403              	.LASF61:
 11404 06ec 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 11404      53544F52 
 11404      455F5041 
 11404      52414D53 
 11404      00
 11405              	.LASF7:
 11406 06fd 6C6F6E67 		.ascii	"long unsigned int\000"
 11406      20756E73 
 11406      69676E65 
 11406      6420696E 
 11406      7400
 11407              	.LASF65:
 11408 070f 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 11408      424F4F54 
 11408      4C4F4144 
 11408      455200
 11409              	.LASF212:
 11410 071e 6E756D5F 		.ascii	"num_of_bytes\000"
 11410      6F665F62 
 11410      79746573 
 11410      00
 11411              	.LASF100:
 11412 072b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 11412      545F4D4F 
 11412      44455F4A 
 11412      4F595354 
 11412      49434B00 
 11413              	.LASF220:
 11414 073f 64697370 		.ascii	"displacement\000"
 11414      6C616365 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 255


 11414      6D656E74 
 11414      00
 11415              	.LASF242:
 11416 074c 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 11416      6765745F 
 11416      76696272 
 11416      6F746163 
 11416      74696C65 
 11417              	.LASF166:
 11418 0768 7374725F 		.ascii	"str_sd_data\000"
 11418      73645F64 
 11418      61746100 
 11419              	.LASF134:
 11420 0774 736C6176 		.ascii	"slave_ID\000"
 11420      655F4944 
 11420      00
 11421              	.LASF104:
 11422 077d 41434B5F 		.ascii	"ACK_OK\000"
 11422      4F4B00
 11423              	.LASF106:
 11424 0784 54595045 		.ascii	"TYPE_FLAG\000"
 11424      5F464C41 
 11424      4700
 11425              	.LASF180:
 11426 078e 7061636B 		.ascii	"packet_length\000"
 11426      65745F6C 
 11426      656E6774 
 11426      6800
 11427              	.LASF30:
 11428 079c 43555354 		.ascii	"CUSTOM_REST_POS\000"
 11428      4F4D5F52 
 11428      4553545F 
 11428      504F5300 
 11429              	.LASF126:
 11430 07ac 696E7075 		.ascii	"input_mode\000"
 11430      745F6D6F 
 11430      646500
 11431              	.LASF76:
 11432 07b7 434D445F 		.ascii	"CMD_GET_EMG\000"
 11432      4745545F 
 11432      454D4700 
 11433              	.LASF226:
 11434 07c3 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 11434      6E69745F 
 11434      536F6674 
 11434      48616E64 
 11434      50726F00 
 11435              	.LASF156:
 11436 07d7 70696E67 		.ascii	"ping\000"
 11436      00
 11437              	.LASF64:
 11438 07dc 434D445F 		.ascii	"CMD_GET_INFO\000"
 11438      4745545F 
 11438      494E464F 
 11438      00
 11439              	.LASF190:
 11440 07e9 6765745F 		.ascii	"get_IMU_param_list\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 256


 11440      494D555F 
 11440      70617261 
 11440      6D5F6C69 
 11440      737400
 11441              	.LASF153:
 11442 07fc 4D454E55 		.ascii	"MENU\000"
 11442      00
 11443              	.LASF54:
 11444 0801 4D454E55 		.ascii	"MENU_DRIVER\000"
 11444      5F445249 
 11444      56455200 
 11445              	.LASF139:
 11446 080d 76696272 		.ascii	"vibrotactile_feedback_active\000"
 11446      6F746163 
 11446      74696C65 
 11446      5F666565 
 11446      64626163 
 11447              	.LASF75:
 11448 082a 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 11448      4745545F 
 11448      43555252 
 11448      5F414E44 
 11448      5F4D4541 
 11449              	.LASF304:
 11450 0840 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11450      43313120 
 11450      352E342E 
 11450      31203230 
 11450      31363036 
 11451 0873 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11451      20726576 
 11451      6973696F 
 11451      6E203233 
 11451      37373135 
 11452 08a6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11452      66756E63 
 11452      74696F6E 
 11452      2D736563 
 11452      74696F6E 
 11453              	.LASF234:
 11454 08ce 636D645F 		.ascii	"cmd_get_joystick\000"
 11454      6765745F 
 11454      6A6F7973 
 11454      7469636B 
 11454      00
 11455              	.LASF80:
 11456 08df 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 11456      5345545F 
 11456      43554646 
 11456      5F494E50 
 11456      55545300 
 11457              	.LASF6:
 11458 08f3 5F5F7569 		.ascii	"__uint32_t\000"
 11458      6E743332 
 11458      5F7400
 11459              	.LASF8:
 11460 08fe 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 257


 11460      206C6F6E 
 11460      6720696E 
 11460      7400
 11461              	.LASF123:
 11462 090c 73745F73 		.ascii	"st_slave\000"
 11462      6C617665 
 11462      00
 11463              	.LASF263:
 11464 0915 76696272 		.ascii	"vibrotactile_control\000"
 11464      6F746163 
 11464      74696C65 
 11464      5F636F6E 
 11464      74726F6C 
 11465              	.LASF108:
 11466 092a 54595045 		.ascii	"TYPE_UINT8\000"
 11466      5F55494E 
 11466      543800
 11467              	.LASF143:
 11468 0935 53485F63 		.ascii	"SH_config\000"
 11468      6F6E6669 
 11468      6700
 11469              	.LASF240:
 11470 093f 636D645F 		.ascii	"cmd_get_currents\000"
 11470      6765745F 
 11470      63757272 
 11470      656E7473 
 11470      00
 11471              	.LASF285:
 11472 0950 6368616E 		.ascii	"change_ext_ref_flag\000"
 11472      67655F65 
 11472      78745F72 
 11472      65665F66 
 11472      6C616700 
 11473              	.LASF20:
 11474 0964 646F7562 		.ascii	"double\000"
 11474      6C6500
 11475              	.LASF91:
 11476 096b 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 11476      4745545F 
 11476      53445F53 
 11476      494E474C 
 11476      455F4649 
 11477              	.LASF294:
 11478 0982 56545F72 		.ascii	"VT_refNew\000"
 11478      65664E65 
 11478      7700
 11479              	.LASF277:
 11480 098c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11480      52784275 
 11480      66666572 
 11480      00
 11481              	.LASF270:
 11482 0999 56545F63 		.ascii	"VT_control\000"
 11482      6F6E7472 
 11482      6F6C00
 11483              	.LASF19:
 11484 09a4 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 258


 11484      7400
 11485              	.LASF196:
 11486 09aa 6175785F 		.ascii	"aux_int8\000"
 11486      696E7438 
 11486      00
 11487              	.LASF92:
 11488 09b3 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 11488      52454D4F 
 11488      56455F53 
 11488      445F5349 
 11488      4E474C45 
 11489              	.LASF266:
 11490 09cd 6572725F 		.ascii	"err_pressure\000"
 11490      70726573 
 11490      73757265 
 11490      00
 11491              	.LASF178:
 11492 09da 636F756E 		.ascii	"count\000"
 11492      7400
 11493              	.LASF157:
 11494 09e0 73745F61 		.ascii	"st_adc_meas\000"
 11494      64635F6D 
 11494      65617300 
 11495              	.LASF173:
 11496 09ec 6D5F6164 		.ascii	"m_addr\000"
 11496      647200
 11497              	.LASF282:
 11498 09f3 635F6D65 		.ascii	"c_mem\000"
 11498      6D00
 11499              	.LASF214:
 11500 09f9 64617461 		.ascii	"data_array\000"
 11500      5F617272 
 11500      617900
 11501              	.LASF10:
 11502 0a04 756E7369 		.ascii	"unsigned int\000"
 11502      676E6564 
 11502      20696E74 
 11502      00
 11503              	.LASF227:
 11504 0a11 6D656D49 		.ascii	"memInit_Master\000"
 11504      6E69745F 
 11504      4D617374 
 11504      657200
 11505              	.LASF204:
 11506 0a20 70726570 		.ascii	"prepare_SD_legend\000"
 11506      6172655F 
 11506      53445F6C 
 11506      6567656E 
 11506      6400
 11507              	.LASF58:
 11508 0a32 53485F63 		.ascii	"SH_command\000"
 11508      6F6D6D61 
 11508      6E6400
 11509              	.LASF110:
 11510 0a3d 54595045 		.ascii	"TYPE_UINT16\000"
 11510      5F55494E 
 11510      54313600 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 259


 11511              	.LASF142:
 11512 0a49 666C6167 		.ascii	"flag\000"
 11512      00
 11513              	.LASF38:
 11514 0a4e 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 11514      4F4D5F49 
 11514      4E505554 
 11514      5F3200
 11515              	.LASF268:
 11516 0a5d 785F7661 		.ascii	"x_value\000"
 11516      6C756500 
 11517              	.LASF236:
 11518 0a65 636D645F 		.ascii	"cmd_set_inputs\000"
 11518      7365745F 
 11518      696E7075 
 11518      747300
 11519              	.LASF49:
 11520 0a74 4D454E55 		.ascii	"MENU_R_L\000"
 11520      5F525F4C 
 11520      00
 11521              	.LASF171:
 11522 0a7d 4D454E55 		.ascii	"MENU_LIST\000"
 11522      5F4C4953 
 11522      5400
 11523              	.LASF95:
 11524 0a87 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 11524      545F4D4F 
 11524      44455F45 
 11524      4E434F44 
 11524      45523300 
 11525              	.LASF211:
 11526 0a9b 636F6D6D 		.ascii	"commWriteID\000"
 11526      57726974 
 11526      65494400 
 11527              	.LASF87:
 11528 0aa7 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 11528      4745545F 
 11528      454E434F 
 11528      4445525F 
 11528      434F4E46 
 11529              	.LASF154:
 11530 0abc 4E554D5F 		.ascii	"NUM_STR\000"
 11530      53545200 
 11531              	.LASF238:
 11532 0ac4 636D645F 		.ascii	"cmd_get_activate\000"
 11532      6765745F 
 11532      61637469 
 11532      76617465 
 11532      00
 11533              	.LASF271:
 11534 0ad5 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 11534      61637469 
 11534      76617469 
 11534      6F6E5F76 
 11534      656C6F63 
 11535              	.LASF113:
 11536 0af1 54595045 		.ascii	"TYPE_FLOAT\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 260


 11536      5F464C4F 
 11536      415400
 11537              	.LASF40:
 11538 0afc 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 11538      4F4D5F50 
 11538      4F535F4C 
 11538      494D5F32 
 11538      00
 11539              	.LASF202:
 11540 0b0d 70726570 		.ascii	"prepare_R01_info\000"
 11540      6172655F 
 11540      5230315F 
 11540      696E666F 
 11540      00
 11541              	.LASF109:
 11542 0b1e 54595045 		.ascii	"TYPE_INT16\000"
 11542      5F494E54 
 11542      313600
 11543              	.LASF198:
 11544 0b29 6175785F 		.ascii	"aux_uint16\000"
 11544      75696E74 
 11544      313600
 11545              	.LASF128:
 11546 0b34 656D675F 		.ascii	"emg_threshold\000"
 11546      74687265 
 11546      73686F6C 
 11546      6400
 11547              	.LASF79:
 11548 0b42 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 11548      4745545F 
 11548      43555252 
 11548      5F444946 
 11548      4600
 11549              	.LASF42:
 11550 0b54 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 11550      4F4D5F44 
 11550      45565F54 
 11550      59504500 
 11551              	.LASF229:
 11552 0b64 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 11552      6E69745F 
 11552      41697243 
 11552      68616D62 
 11552      6572735F 
 11553              	.LASF23:
 11554 0b88 6C6F6E67 		.ascii	"long double\000"
 11554      20646F75 
 11554      626C6500 
 11555              	.LASF112:
 11556 0b94 54595045 		.ascii	"TYPE_UINT32\000"
 11556      5F55494E 
 11556      54333200 
 11557              	.LASF135:
 11558 0ba0 73745F46 		.ascii	"st_FB_spec\000"
 11558      425F7370 
 11558      656300
 11559              	.LASF216:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 261


 11560 0bab 63686563 		.ascii	"checksum\000"
 11560      6B73756D 
 11560      00
 11561              	.LASF302:
 11562 0bb4 73757065 		.ascii	"superstring\000"
 11562      72737472 
 11562      696E6700 
 11563              	.LASF68:
 11564 0bc0 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 11564      48414E44 
 11564      5F43414C 
 11564      49425241 
 11564      544500
 11565              	.LASF292:
 11566 0bd3 56545F72 		.ascii	"VT_ref\000"
 11566      656600
 11567              	.LASF274:
 11568 0bda 64726976 		.ascii	"drive_slave\000"
 11568      655F736C 
 11568      61766500 
 11569              	.LASF102:
 11570 0be6 61636B6E 		.ascii	"acknowledgment_values\000"
 11570      6F776C65 
 11570      64676D65 
 11570      6E745F76 
 11570      616C7565 
 11571              	.LASF225:
 11572 0bfc 6D656D52 		.ascii	"memRestore\000"
 11572      6573746F 
 11572      726500
 11573              	.LASF192:
 11574 0c07 696E666F 		.ascii	"info_string\000"
 11574      5F737472 
 11574      696E6700 
 11575              	.LASF168:
 11576 0c13 6E756D5F 		.ascii	"num_params\000"
 11576      70617261 
 11576      6D7300
 11577              	.LASF9:
 11578 0c1e 6C6F6E67 		.ascii	"long long unsigned int\000"
 11578      206C6F6E 
 11578      6720756E 
 11578      7369676E 
 11578      65642069 
 11579              	.LASF155:
 11580 0c35 63757374 		.ascii	"custom\000"
 11580      6F6D00
 11581              	.LASF53:
 11582 0c3c 4D454E55 		.ascii	"MENU_USER\000"
 11582      5F555345 
 11582      5200
 11583              	.LASF111:
 11584 0c46 54595045 		.ascii	"TYPE_INT32\000"
 11584      5F494E54 
 11584      333200
 11585              	.LASF193:
 11586 0c51 6175785F 		.ascii	"aux_uint32\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 262


 11586      75696E74 
 11586      333200
 11587              	.LASF117:
 11588 0c5c 6C656E67 		.ascii	"length\000"
 11588      746800
 11589              	.LASF172:
 11590 0c63 73656E64 		.ascii	"sendToDevice\000"
 11590      546F4465 
 11590      76696365 
 11590      00
 11591              	.LASF78:
 11592 0c70 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 11592      4745545F 
 11592      41434345 
 11592      4C00
 11593              	.LASF232:
 11594 0c7e 636D645F 		.ascii	"cmd_get_velocities\000"
 11594      6765745F 
 11594      76656C6F 
 11594      63697469 
 11594      657300
 11595              	.LASF224:
 11596 0c91 6D656D52 		.ascii	"memRecall\000"
 11596      6563616C 
 11596      6C00
 11597              	.LASF252:
 11598 0c9b 636D645F 		.ascii	"cmd_store_params\000"
 11598      73746F72 
 11598      655F7061 
 11598      72616D73 
 11598      00
 11599              	.LASF179:
 11600 0cac 6175785F 		.ascii	"aux_char\000"
 11600      63686172 
 11600      00
 11601              	.LASF83:
 11602 0cb5 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 11602      5345545F 
 11602      42415544 
 11602      52415445 
 11602      00
 11603              	.LASF191:
 11604 0cc6 71626164 		.ascii	"qbadminp_string\000"
 11604      6D696E70 
 11604      5F737472 
 11604      696E6700 
 11605              	.LASF22:
 11606 0cd6 72656738 		.ascii	"reg8\000"
 11606      00
 11607              	.LASF138:
 11608 0cdb 70726F70 		.ascii	"prop_err_fb_gain\000"
 11608      5F657272 
 11608      5F66625F 
 11608      6761696E 
 11608      00
 11609              	.LASF208:
 11610 0cec 636F6D6D 		.ascii	"commWrite_old_id\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 263


 11610      57726974 
 11610      655F6F6C 
 11610      645F6964 
 11610      00
 11611              	.LASF182:
 11612 0cfd 6D616E61 		.ascii	"manage_param_list\000"
 11612      67655F70 
 11612      6172616D 
 11612      5F6C6973 
 11612      7400
 11613              	.LASF195:
 11614 0d0f 6175785F 		.ascii	"aux_uint8\000"
 11614      75696E74 
 11614      3800
 11615              	.LASF63:
 11616 0d19 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 11616      52455354 
 11616      4F52455F 
 11616      50415241 
 11616      4D5300
 11617              	.LASF51:
 11618 0d2c 4D454E55 		.ascii	"MENU_EXP\000"
 11618      5F455850 
 11618      00
 11619              	.LASF287:
 11620 0d35 73644669 		.ascii	"sdFile\000"
 11620      6C6500
 11621              	.LASF169:
 11622 0d3c 6E756D5F 		.ascii	"num_menus\000"
 11622      6D656E75 
 11622      7300
 11623              	.LASF45:
 11624 0d46 4D454E55 		.ascii	"MENU_NO_MENU\000"
 11624      5F4E4F5F 
 11624      4D454E55 
 11624      00
 11625              	.LASF203:
 11626 0d53 70726570 		.ascii	"prepare_SD_param_info\000"
 11626      6172655F 
 11626      53445F70 
 11626      6172616D 
 11626      5F696E66 
 11627              	.LASF201:
 11628 0d69 70726570 		.ascii	"prepare_counter_info\000"
 11628      6172655F 
 11628      636F756E 
 11628      7465725F 
 11628      696E666F 
 11629              	.LASF205:
 11630 0d7e 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 11630      6172655F 
 11630      53445F45 
 11630      4D475F48 
 11630      6973746F 
 11631              	.LASF209:
 11632 0d9c 6F6C645F 		.ascii	"old_id\000"
 11632      696400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 264


 11633              	.LASF307:
 11634 0da3 5F5F5245 		.ascii	"__REV16\000"
 11634      56313600 
 11635              	.LASF149:
 11636 0dab 5641525F 		.ascii	"VAR_P\000"
 11636      5000
 11637              	.LASF301:
 11638 0db1 42617474 		.ascii	"Battery_level_out\000"
 11638      6572795F 
 11638      6C657665 
 11638      6C5F6F75 
 11638      7400
 11639              	.LASF239:
 11640 0dc3 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 11640      6765745F 
 11640      63757272 
 11640      5F616E64 
 11640      5F6D6561 
 11641              	.LASF165:
 11642 0dd9 696E666F 		.ascii	"info_type\000"
 11642      5F747970 
 11642      6500
 11643              	.LASF56:
 11644 0de3 4D454E55 		.ascii	"MENU_FSM\000"
 11644      5F46534D 
 11644      00
 11645              	.LASF90:
 11646 0dec 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 11646      4745545F 
 11646      4144435F 
 11646      52415700 
 11647              	.LASF101:
 11648 0dfc 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 11648      545F4D4F 
 11648      44455F45 
 11648      4D475F50 
 11648      524F504F 
 11649              	.LASF86:
 11650 0e1b 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 11650      4745545F 
 11650      494D555F 
 11650      50415241 
 11650      4D00
 11651              	.LASF88:
 11652 0e2d 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 11652      4745545F 
 11652      454E434F 
 11652      4445525F 
 11652      52415700 
 11653              	.LASF146:
 11654 0e41 72657365 		.ascii	"reset\000"
 11654      7400
 11655              	.LASF145:
 11656 0e47 6E616D65 		.ascii	"name\000"
 11656      00
 11657              	.LASF73:
 11658 0e4c 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 265


 11658      4745545F 
 11658      4D454153 
 11658      5552454D 
 11658      454E5453 
 11659              	.LASF140:
 11660 0e61 61697263 		.ascii	"airchamber_feedback_active\000"
 11660      68616D62 
 11660      65725F66 
 11660      65656462 
 11660      61636B5F 
 11661              	.LASF279:
 11662 0e7c 675F6164 		.ascii	"g_adc_measOld\000"
 11662      635F6D65 
 11662      61734F6C 
 11662      6400
 11663              	.LASF256:
 11664 0e8a 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 11664      6765745F 
 11664      656E636F 
 11664      6465725F 
 11664      72617700 
 11665              	.LASF13:
 11666 0e9e 75696E74 		.ascii	"uint8\000"
 11666      3800
 11667              	.LASF159:
 11668 0ea4 636F6D6D 		.ascii	"commProcess\000"
 11668      50726F63 
 11668      65737300 
 11669              	.LASF2:
 11670 0eb0 73686F72 		.ascii	"short int\000"
 11670      7420696E 
 11670      7400
 11671              	.LASF31:
 11672 0eba 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 11672      4F4D5F52 
 11672      4553545F 
 11672      504F535F 
 11672      44454C41 
 11673              	.LASF72:
 11674 0ed0 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 11674      4745545F 
 11674      494E5055 
 11674      545300
 11675              	.LASF89:
 11676 0edf 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 11676      4745545F 
 11676      4144435F 
 11676      434F4E46 
 11676      00
 11677              	.LASF60:
 11678 0ef0 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 11678      5345545F 
 11678      5A45524F 
 11678      5300
 11679              	.LASF197:
 11680 0efe 6175785F 		.ascii	"aux_int16\000"
 11680      696E7431 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 266


 11680      3600
 11681              	.LASF303:
 11682 0f08 45455052 		.ascii	"EEPROM_ADDR\000"
 11682      4F4D5F41 
 11682      44445200 
 11683              	.LASF283:
 11684 0f14 6379636C 		.ascii	"cycle_time\000"
 11684      655F7469 
 11684      6D6500
 11685              	.LASF26:
 11686 0f1f 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 11686      4F4D5F43 
 11686      5552525F 
 11686      50494400 
 11687              	.LASF188:
 11688 0f2f 4E554D5F 		.ascii	"NUM_PARAMs\000"
 11688      50415241 
 11688      4D7300
 11689              	.LASF77:
 11690 0f3a 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 11690      4745545F 
 11690      56454C4F 
 11690      43495449 
 11690      455300
 11691              	.LASF67:
 11692 0f4d 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 11692      4745545F 
 11692      50415241 
 11692      4D5F4C49 
 11692      535400
 11693              	.LASF105:
 11694 0f60 64617461 		.ascii	"data_types\000"
 11694      5F747970 
 11694      657300
 11695              	.LASF17:
 11696 0f6b 696E7431 		.ascii	"int16\000"
 11696      3600
 11697              	.LASF50:
 11698 0f71 4D454E55 		.ascii	"MENU_ON_OFF\000"
 11698      5F4F4E5F 
 11698      4F464600 
 11699              	.LASF35:
 11700 0f7d 43555354 		.ascii	"CUSTOM_DRIVER\000"
 11700      4F4D5F44 
 11700      52495645 
 11700      5200
 11701              	.LASF28:
 11702 0f8b 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 11702      4F4D5F4D 
 11702      4541535F 
 11702      4F464600 
 11703              	.LASF255:
 11704 0f9b 636D645F 		.ascii	"cmd_get_encoder_map\000"
 11704      6765745F 
 11704      656E636F 
 11704      6465725F 
 11704      6D617000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 267


 11705              	.LASF12:
 11706 0faf 75696E74 		.ascii	"uint32_t\000"
 11706      33325F74 
 11706      00
 11707              	.LASF194:
 11708 0fb8 6175785F 		.ascii	"aux_float\000"
 11708      666C6F61 
 11708      7400
 11709              	.LASF170:
 11710 0fc2 50415241 		.ascii	"PARAM_LIST\000"
 11710      4D5F4C49 
 11710      535400
 11711              	.LASF217:
 11712 0fcd 73656E64 		.ascii	"sendAcknowledgment\000"
 11712      41636B6E 
 11712      6F776C65 
 11712      64676D65 
 11712      6E7400
 11713              	.LASF177:
 11714 0fe0 6175785F 		.ascii	"aux_int32\000"
 11714      696E7433 
 11714      3200
 11715              	.LASF121:
 11716 0fea 62617564 		.ascii	"baud_rate\000"
 11716      5F726174 
 11716      6500
 11717              	.LASF245:
 11718 0ff4 745F656E 		.ascii	"t_end\000"
 11718      6400
 11719              	.LASF241:
 11720 0ffa 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 11720      6765745F 
 11720      63757272 
 11720      656E7473 
 11720      5F666F72 
 11721              	.LASF85:
 11722 1014 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 11722      4745545F 
 11722      494D555F 
 11722      52454144 
 11722      494E4753 
 11723              	.LASF187:
 11724 1029 70617261 		.ascii	"param_type\000"
 11724      6D5F7479 
 11724      706500
 11725              	.LASF289:
 11726 1034 73645230 		.ascii	"sdR01File\000"
 11726      3146696C 
 11726      6500
 11727              	.LASF213:
 11728 103e 4C435243 		.ascii	"LCRChecksum\000"
 11728      6865636B 
 11728      73756D00 
 11729              	.LASF3:
 11730 104a 73686F72 		.ascii	"short unsigned int\000"
 11730      7420756E 
 11730      7369676E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 268


 11730      65642069 
 11730      6E7400
 11731              	.LASF281:
 11732 105d 675F6D65 		.ascii	"g_mem\000"
 11732      6D00
 11733              	.LASF278:
 11734 1063 675F6164 		.ascii	"g_adc_meas\000"
 11734      635F6D65 
 11734      617300
 11735              	.LASF136:
 11736 106e 6D61785F 		.ascii	"max_residual_current\000"
 11736      72657369 
 11736      6475616C 
 11736      5F637572 
 11736      72656E74 
 11737              	.LASF141:
 11738 1083 73745F65 		.ascii	"st_eeprom\000"
 11738      6570726F 
 11738      6D00
 11739              	.LASF150:
 11740 108d 54595045 		.ascii	"TYPES\000"
 11740      5300
 11741              	.LASF18:
 11742 1093 696E7433 		.ascii	"int32\000"
 11742      3200
 11743              	.LASF163:
 11744 1099 696E666F 		.ascii	"infoGet\000"
 11744      47657400 
 11745              	.LASF290:
 11746 10a1 6D617374 		.ascii	"master_mode\000"
 11746      65725F6D 
 11746      6F646500 
 11747              	.LASF5:
 11748 10ad 5F5F696E 		.ascii	"__int32_t\000"
 11748      7433325F 
 11748      7400
 11749              	.LASF293:
 11750 10b7 56545F72 		.ascii	"VT_refOld\000"
 11750      65664F6C 
 11750      6400
 11751              	.LASF129:
 11752 10c1 656D675F 		.ascii	"emg_max_value\000"
 11752      6D61785F 
 11752      76616C75 
 11752      6500
 11753              	.LASF243:
 11754 10cf 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 11754      52656164 
 11754      494D5546 
 11754      726F6D53 
 11754      4800
 11755              	.LASF305:
 11756 10e1 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 11756      72635C63 
 11756      6F6D6D61 
 11756      6E645F70 
 11756      726F6365 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccJKp0me.s 			page 269


 11757              	.LASF93:
 11758 10fd 53485F69 		.ascii	"SH_input_mode\000"
 11758      6E707574 
 11758      5F6D6F64 
 11758      6500
 11759              	.LASF25:
 11760 110b 43555354 		.ascii	"CUSTOM_POS_PID\000"
 11760      4F4D5F50 
 11760      4F535F50 
 11760      494400
 11761              	.LASF107:
 11762 111a 54595045 		.ascii	"TYPE_INT8\000"
 11762      5F494E54 
 11762      3800
 11763              	.LASF207:
 11764 1124 494D555F 		.ascii	"IMU_reading_info\000"
 11764      72656164 
 11764      696E675F 
 11764      696E666F 
 11764      00
 11765              	.LASF14:
 11766 1135 75696E74 		.ascii	"uint16\000"
 11766      313600
 11767              	.LASF295:
 11768 113c 50756D70 		.ascii	"Pump_ref\000"
 11768      5F726566 
 11768      00
 11769              	.LASF175:
 11770 1145 6175785F 		.ascii	"aux_str\000"
 11770      73747200 
 11771              	.LASF59:
 11772 114d 434D445F 		.ascii	"CMD_PING\000"
 11772      50494E47 
 11772      00
 11773              	.LASF237:
 11774 1156 636D645F 		.ascii	"cmd_activate\000"
 11774      61637469 
 11774      76617465 
 11774      00
 11775              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
