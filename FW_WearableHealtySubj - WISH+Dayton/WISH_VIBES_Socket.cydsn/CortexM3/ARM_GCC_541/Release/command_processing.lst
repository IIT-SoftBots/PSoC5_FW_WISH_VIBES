ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L50
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L50
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L50
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L50
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L50
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L50
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e B8E2     		b	.L1
  75              	.L51:
  76              		.align	2
  77              	.L50:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F2B182 		bhi	.L49
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c B1050000 		.word	.L49+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 B1050000 		.word	.L49+1
  96 0074 B1050000 		.word	.L49+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 B1050000 		.word	.L49+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 B1050000 		.word	.L49+1
 102 008c B1050000 		.word	.L49+1
 103 0090 B1050000 		.word	.L49+1
 104 0094 B1050000 		.word	.L49+1
 105 0098 B1050000 		.word	.L49+1
 106 009c B1050000 		.word	.L49+1
 107 00a0 B1050000 		.word	.L49+1
 108 00a4 B1050000 		.word	.L49+1
 109 00a8 B1050000 		.word	.L49+1
 110 00ac B1050000 		.word	.L49+1
 111 00b0 B1050000 		.word	.L49+1
 112 00b4 B1050000 		.word	.L49+1
 113 00b8 B1050000 		.word	.L49+1
 114 00bc B1050000 		.word	.L49+1
 115 00c0 B1050000 		.word	.L49+1
 116 00c4 B1050000 		.word	.L49+1
 117 00c8 B1050000 		.word	.L49+1
 118 00cc B1050000 		.word	.L49+1
 119 00d0 B1050000 		.word	.L49+1
 120 00d4 B1050000 		.word	.L49+1
 121 00d8 B1050000 		.word	.L49+1
 122 00dc B1050000 		.word	.L49+1
 123 00e0 B1050000 		.word	.L49+1
 124 00e4 B1050000 		.word	.L49+1
 125 00e8 B1050000 		.word	.L49+1
 126 00ec B1050000 		.word	.L49+1
 127 00f0 B1050000 		.word	.L49+1
 128 00f4 B1050000 		.word	.L49+1
 129 00f8 B1050000 		.word	.L49+1
 130 00fc B1050000 		.word	.L49+1
 131 0100 B1050000 		.word	.L49+1
 132 0104 B1050000 		.word	.L49+1
 133 0108 B1050000 		.word	.L49+1
 134 010c B1050000 		.word	.L49+1
 135 0110 B1050000 		.word	.L49+1
 136 0114 B1050000 		.word	.L49+1
 137 0118 B1050000 		.word	.L49+1
 138 011c B1050000 		.word	.L49+1
 139 0120 B1050000 		.word	.L49+1
 140 0124 B1050000 		.word	.L49+1
 141 0128 B1050000 		.word	.L49+1
 142 012c B1050000 		.word	.L49+1
 143 0130 B1050000 		.word	.L49+1
 144 0134 B1050000 		.word	.L49+1
 145 0138 B1050000 		.word	.L49+1
 146 013c B1050000 		.word	.L49+1
 147 0140 B1050000 		.word	.L49+1
 148 0144 B1050000 		.word	.L49+1
 149 0148 B1050000 		.word	.L49+1
 150 014c B1050000 		.word	.L49+1
 151 0150 B1050000 		.word	.L49+1
 152 0154 B1050000 		.word	.L49+1
 153 0158 B1050000 		.word	.L49+1
 154 015c B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 5


 155 0160 B1050000 		.word	.L49+1
 156 0164 B1050000 		.word	.L49+1
 157 0168 B1050000 		.word	.L49+1
 158 016c B1050000 		.word	.L49+1
 159 0170 B1050000 		.word	.L49+1
 160 0174 B1050000 		.word	.L49+1
 161 0178 B1050000 		.word	.L49+1
 162 017c B1050000 		.word	.L49+1
 163 0180 B1050000 		.word	.L49+1
 164 0184 B1050000 		.word	.L49+1
 165 0188 B1050000 		.word	.L49+1
 166 018c B1050000 		.word	.L49+1
 167 0190 B1050000 		.word	.L49+1
 168 0194 B1050000 		.word	.L49+1
 169 0198 B1050000 		.word	.L49+1
 170 019c B1050000 		.word	.L49+1
 171 01a0 B1050000 		.word	.L49+1
 172 01a4 B1050000 		.word	.L49+1
 173 01a8 B1050000 		.word	.L49+1
 174 01ac B1050000 		.word	.L49+1
 175 01b0 B1050000 		.word	.L49+1
 176 01b4 B1050000 		.word	.L49+1
 177 01b8 B1050000 		.word	.L49+1
 178 01bc B1050000 		.word	.L49+1
 179 01c0 B1050000 		.word	.L49+1
 180 01c4 B1050000 		.word	.L49+1
 181 01c8 B1050000 		.word	.L49+1
 182 01cc B1050000 		.word	.L49+1
 183 01d0 B1050000 		.word	.L49+1
 184 01d4 B1050000 		.word	.L49+1
 185 01d8 B1050000 		.word	.L49+1
 186 01dc B1050000 		.word	.L49+1
 187 01e0 B1050000 		.word	.L49+1
 188 01e4 B1050000 		.word	.L49+1
 189 01e8 B1050000 		.word	.L49+1
 190 01ec B1050000 		.word	.L49+1
 191 01f0 B1050000 		.word	.L49+1
 192 01f4 B1050000 		.word	.L49+1
 193 01f8 B1050000 		.word	.L49+1
 194 01fc B1050000 		.word	.L49+1
 195 0200 B1050000 		.word	.L49+1
 196 0204 B1050000 		.word	.L49+1
 197 0208 B1050000 		.word	.L49+1
 198 020c B1050000 		.word	.L49+1
 199 0210 B1050000 		.word	.L49+1
 200 0214 B1050000 		.word	.L49+1
 201 0218 B1050000 		.word	.L49+1
 202 021c B1050000 		.word	.L49+1
 203 0220 B1050000 		.word	.L49+1
 204 0224 B1050000 		.word	.L49+1
 205 0228 B1050000 		.word	.L49+1
 206 022c B1050000 		.word	.L49+1
 207 0230 B1050000 		.word	.L49+1
 208 0234 B1050000 		.word	.L49+1
 209 0238 B1050000 		.word	.L49+1
 210 023c B1050000 		.word	.L49+1
 211 0240 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 6


 212 0244 B1050000 		.word	.L49+1
 213 0248 B1050000 		.word	.L49+1
 214 024c B1050000 		.word	.L49+1
 215 0250 B1050000 		.word	.L49+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 B1050000 		.word	.L49+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c B1050000 		.word	.L49+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 B1050000 		.word	.L49+1
 230 028c B1050000 		.word	.L49+1
 231 0290 B1050000 		.word	.L49+1
 232 0294 89040000 		.word	.L27+1
 233 0298 B1050000 		.word	.L49+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 B1050000 		.word	.L49+1
 236 02a4 B1050000 		.word	.L49+1
 237 02a8 B1050000 		.word	.L49+1
 238 02ac B1050000 		.word	.L49+1
 239 02b0 B1050000 		.word	.L49+1
 240 02b4 B1050000 		.word	.L49+1
 241 02b8 B1050000 		.word	.L49+1
 242 02bc B1050000 		.word	.L49+1
 243 02c0 B1050000 		.word	.L49+1
 244 02c4 B1050000 		.word	.L49+1
 245 02c8 B1050000 		.word	.L49+1
 246 02cc B1050000 		.word	.L49+1
 247 02d0 B1050000 		.word	.L49+1
 248 02d4 B1050000 		.word	.L49+1
 249 02d8 4B050000 		.word	.L29+1
 250 02dc 51050000 		.word	.L30+1
 251 02e0 69050000 		.word	.L31+1
 252 02e4 6F050000 		.word	.L32+1
 253 02e8 75050000 		.word	.L33+1
 254 02ec 7B050000 		.word	.L34+1
 255 02f0 81050000 		.word	.L35+1
 256 02f4 99050000 		.word	.L36+1
 257 02f8 B1050000 		.word	.L49+1
 258 02fc B1050000 		.word	.L49+1
 259 0300 B1050000 		.word	.L49+1
 260 0304 B1050000 		.word	.L49+1
 261 0308 B1050000 		.word	.L49+1
 262 030c B1050000 		.word	.L49+1
 263 0310 B1050000 		.word	.L49+1
 264 0314 B1050000 		.word	.L49+1
 265 0318 B1050000 		.word	.L49+1
 266 031c B1050000 		.word	.L49+1
 267 0320 B1050000 		.word	.L49+1
 268 0324 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 7


 269 0328 B1050000 		.word	.L49+1
 270 032c B1050000 		.word	.L49+1
 271 0330 B1050000 		.word	.L49+1
 272 0334 B1050000 		.word	.L49+1
 273 0338 B1050000 		.word	.L49+1
 274 033c B1050000 		.word	.L49+1
 275 0340 B1050000 		.word	.L49+1
 276 0344 B1050000 		.word	.L49+1
 277 0348 B1050000 		.word	.L49+1
 278 034c B1050000 		.word	.L49+1
 279 0350 B1050000 		.word	.L49+1
 280 0354 B1050000 		.word	.L49+1
 281 0358 B1050000 		.word	.L49+1
 282 035c B1050000 		.word	.L49+1
 283 0360 B1050000 		.word	.L49+1
 284 0364 B1050000 		.word	.L49+1
 285 0368 B1050000 		.word	.L49+1
 286 036c B1050000 		.word	.L49+1
 287 0370 B1050000 		.word	.L49+1
 288 0374 B1050000 		.word	.L49+1
 289 0378 B1050000 		.word	.L49+1
 290 037c B1050000 		.word	.L49+1
 291 0380 B1050000 		.word	.L49+1
 292 0384 B1050000 		.word	.L49+1
 293 0388 B1050000 		.word	.L49+1
 294 038c B1050000 		.word	.L49+1
 295 0390 B1050000 		.word	.L49+1
 296 0394 B1050000 		.word	.L49+1
 297 0398 B1050000 		.word	.L49+1
 298 039c B1050000 		.word	.L49+1
 299 03a0 B1050000 		.word	.L49+1
 300 03a4 B1050000 		.word	.L49+1
 301 03a8 B1050000 		.word	.L49+1
 302 03ac B1050000 		.word	.L49+1
 303 03b0 B1050000 		.word	.L49+1
 304 03b4 B1050000 		.word	.L49+1
 305 03b8 B1050000 		.word	.L49+1
 306 03bc B1050000 		.word	.L49+1
 307 03c0 B1050000 		.word	.L49+1
 308 03c4 B1050000 		.word	.L49+1
 309 03c8 B1050000 		.word	.L49+1
 310 03cc B1050000 		.word	.L49+1
 311 03d0 B1050000 		.word	.L49+1
 312 03d4 B1050000 		.word	.L49+1
 313 03d8 B1050000 		.word	.L49+1
 314 03dc B1050000 		.word	.L49+1
 315 03e0 B1050000 		.word	.L49+1
 316 03e4 B1050000 		.word	.L49+1
 317 03e8 B1050000 		.word	.L49+1
 318 03ec B1050000 		.word	.L49+1
 319 03f0 B1050000 		.word	.L49+1
 320 03f4 B1050000 		.word	.L49+1
 321 03f8 B1050000 		.word	.L49+1
 322 03fc B1050000 		.word	.L49+1
 323 0400 B1050000 		.word	.L49+1
 324 0404 B1050000 		.word	.L49+1
 325 0408 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 8


 326 040c B1050000 		.word	.L49+1
 327 0410 B1050000 		.word	.L49+1
 328 0414 B1050000 		.word	.L49+1
 329 0418 B1050000 		.word	.L49+1
 330 041c B1050000 		.word	.L49+1
 331 0420 B1050000 		.word	.L49+1
 332 0424 B1050000 		.word	.L49+1
 333 0428 B1050000 		.word	.L49+1
 334 042c B1050000 		.word	.L49+1
 335 0430 B1050000 		.word	.L49+1
 336 0434 B1050000 		.word	.L49+1
 337 0438 B1050000 		.word	.L49+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 B5E0     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a B2E0     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 AFE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 ACE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c A9E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 A6E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 A3E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e A0E0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 9DE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a 9AE0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 97E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 94E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c 91E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 8EE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 484B     		ldr	r3, .L52
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa 82E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 7FE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),TRUE );
 443              		.loc 1 174 0
 444 04b2 414B     		ldr	r3, .L52
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca 72E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 6FE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 6CE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea 62E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 5EE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 55E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c 51E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 48E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 28


 529              		.loc 1 214 0
 530 0526 44E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 33E0     		b	.L1
 548              	.L29:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:           
 230:..\src/command_processing.c ****             break;
 231:..\src/command_processing.c ****             
 232:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 233:..\src/command_processing.c **** 
 234:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 235:..\src/command_processing.c ****             cmd_get_imu_readings();
 549              		.loc 1 235 0
 550 054a FFF7FEFF 		bl	cmd_get_imu_readings
 236:..\src/command_processing.c ****             break; 
 551              		.loc 1 236 0
 552 054e 30E0     		b	.L1
 553              	.L30:
 237:..\src/command_processing.c ****             
 238:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 239:..\src/command_processing.c **** 
 240:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 241:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 554              		.loc 1 241 0
 555 0550 194B     		ldr	r3, .L52
 556 0552 1B88     		ldrh	r3, [r3]
 557 0554 7B62     		str	r3, [r7, #36]
 558              	.LBB16:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 29


 559              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 560              		.loc 2 792 0
 561 0556 7B6A     		ldr	r3, [r7, #36]
 562              		.syntax unified
 563              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 564 0558 5BBA     		rev16 r3, r3
 565              	@ 0 "" 2
 566              		.thumb
 567              		.syntax unified
 568 055a FB60     		str	r3, [r7, #12]
 569              		.loc 2 793 0
 570 055c FB68     		ldr	r3, [r7, #12]
 571              	.LBE17:
 572              	.LBE16:
 573              		.loc 1 241 0
 574 055e 9BB2     		uxth	r3, r3
 575 0560 1846     		mov	r0, r3
 576 0562 FFF7FEFF 		bl	get_IMU_param_list
 242:..\src/command_processing.c ****             break;             
 577              		.loc 1 242 0
 578 0566 24E0     		b	.L1
 579              	.L31:
 243:..\src/command_processing.c ****             
 244:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 245:..\src/command_processing.c **** 
 246:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 247:..\src/command_processing.c ****             cmd_get_encoder_map();
 580              		.loc 1 247 0
 581 0568 FFF7FEFF 		bl	cmd_get_encoder_map
 248:..\src/command_processing.c ****             break; 
 582              		.loc 1 248 0
 583 056c 21E0     		b	.L1
 584              	.L32:
 249:..\src/command_processing.c **** 
 250:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 251:..\src/command_processing.c **** 
 252:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 253:..\src/command_processing.c ****             cmd_get_encoder_raw();
 585              		.loc 1 253 0
 586 056e FFF7FEFF 		bl	cmd_get_encoder_raw
 254:..\src/command_processing.c ****             break; 
 587              		.loc 1 254 0
 588 0572 1EE0     		b	.L1
 589              	.L33:
 255:..\src/command_processing.c **** 
 256:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 257:..\src/command_processing.c **** 
 258:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 259:..\src/command_processing.c ****             cmd_get_ADC_map();
 590              		.loc 1 259 0
 591 0574 FFF7FEFF 		bl	cmd_get_ADC_map
 260:..\src/command_processing.c ****             break; 
 592              		.loc 1 260 0
 593 0578 1BE0     		b	.L1
 594              	.L34:
 261:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 30


 262:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 263:..\src/command_processing.c **** 
 264:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 265:..\src/command_processing.c ****             cmd_get_ADC_raw();
 595              		.loc 1 265 0
 596 057a FFF7FEFF 		bl	cmd_get_ADC_raw
 266:..\src/command_processing.c ****             break; 
 597              		.loc 1 266 0
 598 057e 18E0     		b	.L1
 599              	.L35:
 267:..\src/command_processing.c ****             
 268:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 269:..\src/command_processing.c **** 
 270:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 271:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 600              		.loc 1 271 0
 601 0580 0D4B     		ldr	r3, .L52
 602 0582 1B88     		ldrh	r3, [r3]
 603 0584 3B62     		str	r3, [r7, #32]
 604              	.LBB18:
 605              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 606              		.loc 2 792 0
 607 0586 3B6A     		ldr	r3, [r7, #32]
 608              		.syntax unified
 609              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 610 0588 5BBA     		rev16 r3, r3
 611              	@ 0 "" 2
 612              		.thumb
 613              		.syntax unified
 614 058a BB60     		str	r3, [r7, #8]
 615              		.loc 2 793 0
 616 058c BB68     		ldr	r3, [r7, #8]
 617              	.LBE19:
 618              	.LBE18:
 619              		.loc 1 271 0
 620 058e 9BB2     		uxth	r3, r3
 621 0590 1846     		mov	r0, r3
 622 0592 FFF7FEFF 		bl	cmd_get_SD_file
 272:..\src/command_processing.c ****             break;   
 623              		.loc 1 272 0
 624 0596 0CE0     		b	.L1
 625              	.L36:
 273:..\src/command_processing.c ****             
 274:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 275:..\src/command_processing.c **** 
 276:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 277:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 626              		.loc 1 277 0
 627 0598 074B     		ldr	r3, .L52
 628 059a 1B88     		ldrh	r3, [r3]
 629 059c FB61     		str	r3, [r7, #28]
 630              	.LBB20:
 631              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 632              		.loc 2 792 0
 633 059e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 31


 634              		.syntax unified
 635              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 636 05a0 5BBA     		rev16 r3, r3
 637              	@ 0 "" 2
 638              		.thumb
 639              		.syntax unified
 640 05a2 7B60     		str	r3, [r7, #4]
 641              		.loc 2 793 0
 642 05a4 7B68     		ldr	r3, [r7, #4]
 643              	.LBE21:
 644              	.LBE20:
 645              		.loc 1 277 0
 646 05a6 9BB2     		uxth	r3, r3
 647 05a8 1846     		mov	r0, r3
 648 05aa FFF7FEFF 		bl	cmd_remove_SD_file
 278:..\src/command_processing.c ****             break;               
 649              		.loc 1 278 0
 650 05ae 00E0     		b	.L1
 651              	.L49:
 279:..\src/command_processing.c ****             
 280:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 281:..\src/command_processing.c ****         default:
 282:..\src/command_processing.c ****             break;
 652              		.loc 1 282 0
 653 05b0 00BF     		nop
 654              	.L1:
 283:..\src/command_processing.c **** 
 284:..\src/command_processing.c ****     }
 285:..\src/command_processing.c **** }  
 655              		.loc 1 285 0
 656 05b2 3037     		adds	r7, r7, #48
 657              		.cfi_def_cfa_offset 8
 658 05b4 BD46     		mov	sp, r7
 659              		.cfi_def_cfa_register 13
 660              		@ sp needed
 661 05b6 80BD     		pop	{r7, pc}
 662              	.L53:
 663              		.align	2
 664              	.L52:
 665 05b8 01000000 		.word	g_rx+1
 666              		.cfi_endproc
 667              	.LFE64:
 668              		.size	commProcess, .-commProcess
 669              		.section	.text.infoSend,"ax",%progbits
 670              		.align	2
 671              		.global	infoSend
 672              		.thumb
 673              		.thumb_func
 674              		.type	infoSend, %function
 675              	infoSend:
 676              	.LFB65:
 286:..\src/command_processing.c **** 
 287:..\src/command_processing.c **** //==============================================================================
 288:..\src/command_processing.c **** //                                                                     INFO SEND
 289:..\src/command_processing.c **** //==============================================================================
 290:..\src/command_processing.c **** 
 291:..\src/command_processing.c **** void infoSend(void){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 32


 677              		.loc 1 291 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 1504
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 ADF5BC6D 		sub	sp, sp, #1504
 686              		.cfi_def_cfa_offset 1512
 687 0006 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 292:..\src/command_processing.c ****     char packet_string[1500];
 293:..\src/command_processing.c ****     
 294:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 689              		.loc 1 294 0
 690 0008 3B1D     		adds	r3, r7, #4
 691 000a 1846     		mov	r0, r3
 692 000c FFF7FEFF 		bl	prepare_generic_info
 295:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 693              		.loc 1 295 0
 694 0010 3B1D     		adds	r3, r7, #4
 695 0012 1846     		mov	r0, r3
 696 0014 FFF7FEFF 		bl	UART_RS485_PutString
 296:..\src/command_processing.c **** }
 697              		.loc 1 296 0
 698 0018 00BF     		nop
 699 001a 07F5BC67 		add	r7, r7, #1504
 700              		.cfi_def_cfa_offset 8
 701 001e BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0020 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE65:
 707              		.size	infoSend, .-infoSend
 708 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 709              		.align	2
 710              		.global	num_of_bytes
 711              		.thumb
 712              		.thumb_func
 713              		.type	num_of_bytes, %function
 714              	num_of_bytes:
 715              	.LFB66:
 297:..\src/command_processing.c **** //==============================================================================
 298:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 299:..\src/command_processing.c **** //==============================================================================
 300:..\src/command_processing.c ****                     
 301:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
 716              		.loc 1 301 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 33


 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 302:..\src/command_processing.c ****     uint8 sod;
 303:..\src/command_processing.c ****     switch (TYPE) {
 730              		.loc 1 303 0
 731 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 000c 092B     		cmp	r3, #9
 733 000e 20D8     		bhi	.L56
 734 0010 01A2     		adr	r2, .L58
 735 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 736 0016 00BF     		.p2align 2
 737              	.L58:
 738 0018 41000000 		.word	.L57+1
 739 001c 41000000 		.word	.L57+1
 740 0020 41000000 		.word	.L57+1
 741 0024 47000000 		.word	.L59+1
 742 0028 47000000 		.word	.L59+1
 743 002c 4D000000 		.word	.L60+1
 744 0030 4D000000 		.word	.L60+1
 745 0034 4D000000 		.word	.L60+1
 746 0038 53000000 		.word	.L56+1
 747 003c 41000000 		.word	.L57+1
 748              		.p2align 1
 749              	.L57:
 304:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 305:..\src/command_processing.c ****                 sod = 1; break;
 750              		.loc 1 305 0
 751 0040 0123     		movs	r3, #1
 752 0042 FB73     		strb	r3, [r7, #15]
 753 0044 05E0     		b	.L56
 754              	.L59:
 306:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 307:..\src/command_processing.c ****                 sod = 2; break;
 755              		.loc 1 307 0
 756 0046 0223     		movs	r3, #2
 757 0048 FB73     		strb	r3, [r7, #15]
 758 004a 02E0     		b	.L56
 759              	.L60:
 308:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 309:..\src/command_processing.c ****                 sod = 4; break;
 760              		.loc 1 309 0
 761 004c 0423     		movs	r3, #4
 762 004e FB73     		strb	r3, [r7, #15]
 763 0050 00BF     		nop
 764              	.L56:
 310:..\src/command_processing.c ****     }  
 311:..\src/command_processing.c ****     return sod;
 765              		.loc 1 311 0
 766 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 312:..\src/command_processing.c **** }
 767              		.loc 1 312 0
 768 0054 1846     		mov	r0, r3
 769 0056 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 34


 770              		.cfi_def_cfa_offset 4
 771 0058 BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 005a 80BC     		pop	{r7}
 775              		.cfi_restore 7
 776              		.cfi_def_cfa_offset 0
 777 005c 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE66:
 780              		.size	num_of_bytes, .-num_of_bytes
 781 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 782              		.align	2
 783              		.global	infoGet
 784              		.thumb
 785              		.thumb_func
 786              		.type	infoGet, %function
 787              	infoGet:
 788              	.LFB67:
 313:..\src/command_processing.c **** 
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 316:..\src/command_processing.c **** //==============================================================================
 317:..\src/command_processing.c **** 
 318:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 789              		.loc 1 318 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 24008
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 ADF5BB4D 		sub	sp, sp, #23936
 798              		.cfi_def_cfa_offset 23944
 799 0006 92B0     		sub	sp, sp, #72
 800              		.cfi_def_cfa_offset 24016
 801 0008 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 000a 0246     		mov	r2, r0
 804 000c 07F14803 		add	r3, r7, #72
 805 0010 423B     		subs	r3, r3, #66
 806 0012 1A80     		strh	r2, [r3]	@ movhi
 319:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 807              		.loc 1 319 0
 808 0014 07F59C43 		add	r3, r7, #19968
 809 0018 03F12803 		add	r3, r3, #40
 810 001c 0022     		movs	r2, #0
 811 001e 1A60     		str	r2, [r3]
 812 0020 0433     		adds	r3, r3, #4
 813 0022 40F69C72 		movw	r2, #3996
 814 0026 0021     		movs	r1, #0
 815 0028 1846     		mov	r0, r3
 816 002a FFF7FEFF 		bl	memset
 320:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 817              		.loc 1 320 0
 818 002e 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 35


 819 0032 403B     		subs	r3, r3, #64
 820 0034 0022     		movs	r2, #0
 821 0036 1A60     		str	r2, [r3]
 822 0038 0433     		adds	r3, r3, #4
 823 003a 44F61C62 		movw	r2, #19996
 824 003e 0021     		movs	r1, #0
 825 0040 1846     		mov	r0, r3
 826 0042 FFF7FEFF 		bl	memset
 321:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 322:..\src/command_processing.c **** 
 323:..\src/command_processing.c ****     switch (info_type) {
 827              		.loc 1 323 0
 828 0046 07F14803 		add	r3, r7, #72
 829 004a 423B     		subs	r3, r3, #66
 830 004c 1B88     		ldrh	r3, [r3]
 831 004e 062B     		cmp	r3, #6
 832 0050 7DD8     		bhi	.L73
 833 0052 01A2     		adr	r2, .L65
 834 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 835              		.p2align 2
 836              	.L65:
 837 0058 75000000 		.word	.L64+1
 838 005c 97000000 		.word	.L66+1
 839 0060 B9000000 		.word	.L67+1
 840 0064 E1000000 		.word	.L68+1
 841 0068 03010000 		.word	.L69+1
 842 006c 21010000 		.word	.L70+1
 843 0070 27010000 		.word	.L71+1
 844              		.p2align 1
 845              	.L64:
 324:..\src/command_processing.c ****         case INFO_ALL:
 325:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 846              		.loc 1 325 0
 847 0074 07F59C43 		add	r3, r7, #19968
 848 0078 03F12803 		add	r3, r3, #40
 849 007c 1846     		mov	r0, r3
 850 007e FFF7FEFF 		bl	prepare_generic_info
 326:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 851              		.loc 1 326 0
 852 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 327:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 853              		.loc 1 327 0
 854 0086 07F59C43 		add	r3, r7, #19968
 855 008a 03F12803 		add	r3, r3, #40
 856 008e 1846     		mov	r0, r3
 857 0090 FFF7FEFF 		bl	UART_RS485_PutString
 328:..\src/command_processing.c ****             break;
 858              		.loc 1 328 0
 859 0094 5CE0     		b	.L72
 860              	.L66:
 329:..\src/command_processing.c ****         case CYCLES_INFO:
 330:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 861              		.loc 1 330 0
 862 0096 07F59C43 		add	r3, r7, #19968
 863 009a 03F12803 		add	r3, r3, #40
 864 009e 1846     		mov	r0, r3
 865 00a0 FFF7FEFF 		bl	prepare_counter_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 36


 331:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 866              		.loc 1 331 0
 867 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 332:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 868              		.loc 1 332 0
 869 00a8 07F59C43 		add	r3, r7, #19968
 870 00ac 03F12803 		add	r3, r3, #40
 871 00b0 1846     		mov	r0, r3
 872 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 333:..\src/command_processing.c ****             break;
 873              		.loc 1 333 0
 874 00b6 4BE0     		b	.L72
 875              	.L67:
 334:..\src/command_processing.c ****         case GET_SD_PARAM:
 335:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 876              		.loc 1 335 0
 877 00b8 07F59C43 		add	r3, r7, #19968
 878 00bc 03F12803 		add	r3, r3, #40
 879 00c0 4FF47A62 		mov	r2, #4000
 880 00c4 1946     		mov	r1, r3
 881 00c6 2548     		ldr	r0, .L74
 882 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 336:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 883              		.loc 1 336 0
 884 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 337:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 885              		.loc 1 337 0
 886 00d0 07F59C43 		add	r3, r7, #19968
 887 00d4 03F12803 		add	r3, r3, #40
 888 00d8 1846     		mov	r0, r3
 889 00da FFF7FEFF 		bl	UART_RS485_PutString
 338:..\src/command_processing.c ****             break;
 890              		.loc 1 338 0
 891 00de 37E0     		b	.L72
 892              	.L68:
 339:..\src/command_processing.c ****         case GET_SD_DATA:
 340:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 893              		.loc 1 340 0
 894 00e0 07F14803 		add	r3, r7, #72
 895 00e4 403B     		subs	r3, r3, #64
 896 00e6 44F62061 		movw	r1, #20000
 897 00ea 1846     		mov	r0, r3
 898 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 341:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 899              		.loc 1 341 0
 900 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 342:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 901              		.loc 1 342 0
 902 00f4 07F14803 		add	r3, r7, #72
 903 00f8 403B     		subs	r3, r3, #64
 904 00fa 1846     		mov	r0, r3
 905 00fc FFF7FEFF 		bl	UART_RS485_PutString
 343:..\src/command_processing.c ****             break;
 906              		.loc 1 343 0
 907 0100 26E0     		b	.L72
 908              	.L69:
 344:..\src/command_processing.c ****         case GET_SD_FS_TREE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 37


 345:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 909              		.loc 1 345 0
 910 0102 07F14803 		add	r3, r7, #72
 911 0106 403B     		subs	r3, r3, #64
 912 0108 1846     		mov	r0, r3
 913 010a FFF7FEFF 		bl	Get_SD_FS
 346:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 914              		.loc 1 346 0
 915 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 347:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 916              		.loc 1 347 0
 917 0112 07F14803 		add	r3, r7, #72
 918 0116 403B     		subs	r3, r3, #64
 919 0118 1846     		mov	r0, r3
 920 011a FFF7FEFF 		bl	UART_RS485_PutString
 348:..\src/command_processing.c ****             break;
 921              		.loc 1 348 0
 922 011e 17E0     		b	.L72
 923              	.L70:
 349:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 350:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 351:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 924              		.loc 1 351 0
 925 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 352:..\src/command_processing.c ****             break;
 926              		.loc 1 352 0
 927 0124 14E0     		b	.L72
 928              	.L71:
 353:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 354:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 929              		.loc 1 354 0
 930 0126 07F59C43 		add	r3, r7, #19968
 931 012a 03F12803 		add	r3, r3, #40
 932 012e 4FF47A62 		mov	r2, #4000
 933 0132 1946     		mov	r1, r3
 934 0134 0A48     		ldr	r0, .L74+4
 935 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 355:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 936              		.loc 1 355 0
 937 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 356:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 938              		.loc 1 356 0
 939 013e 07F59C43 		add	r3, r7, #19968
 940 0142 03F12803 		add	r3, r3, #40
 941 0146 1846     		mov	r0, r3
 942 0148 FFF7FEFF 		bl	UART_RS485_PutString
 357:..\src/command_processing.c ****             break;            
 943              		.loc 1 357 0
 944 014c 00E0     		b	.L72
 945              	.L73:
 358:..\src/command_processing.c ****         default:
 359:..\src/command_processing.c ****             break;
 946              		.loc 1 359 0
 947 014e 00BF     		nop
 948              	.L72:
 360:..\src/command_processing.c ****     }
 361:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 38


 949              		.loc 1 361 0 discriminator 1
 950 0150 00BF     		nop
 951 0152 07F5BB47 		add	r7, r7, #23936
 952 0156 4837     		adds	r7, r7, #72
 953              		.cfi_def_cfa_offset 8
 954 0158 BD46     		mov	sp, r7
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 015a 80BD     		pop	{r7, pc}
 958              	.L75:
 959              		.align	2
 960              	.L74:
 961 015c 00000000 		.word	sdParam
 962 0160 00000000 		.word	sdR01File
 963              		.cfi_endproc
 964              	.LFE67:
 965              		.size	infoGet, .-infoGet
 966              		.section	.rodata
 967              		.align	2
 968              	.LC8:
 969 0000 00       		.ascii	"\000"
 970 0001 000000   		.align	2
 971              	.LC14:
 972 0004 202D2000 		.ascii	" - \000"
 973              		.align	2
 974              	.LC15:
 975 0008 54686520 		.ascii	"The board will reset\012\000"
 975      626F6172 
 975      64207769 
 975      6C6C2072 
 975      65736574 
 976 001e 0000     		.align	2
 977              	.LC16:
 978 0020 202D3E20 		.ascii	" -> \000"
 978      00
 979 0025 000000   		.align	2
 980              	.LC17:
 981 0028 0A00     		.ascii	"\012\000"
 982              		.section	.text.get_param_list,"ax",%progbits
 983              		.align	2
 984              		.global	get_param_list
 985              		.thumb
 986              		.thumb_func
 987              		.type	get_param_list, %function
 988              	get_param_list:
 989              	.LFB68:
 362:..\src/command_processing.c **** 
 363:..\src/command_processing.c **** 
 364:..\src/command_processing.c **** //==============================================================================
 365:..\src/command_processing.c **** //                                                                GET PARAM LIST
 366:..\src/command_processing.c **** //==============================================================================
 367:..\src/command_processing.c **** 
 368:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 990              		.loc 1 368 0
 991              		.cfi_startproc
 992              		@ args = 4, pretend = 0, frame = 608
 993              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 39


 994 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 995              		.cfi_def_cfa_offset 28
 996              		.cfi_offset 4, -28
 997              		.cfi_offset 5, -24
 998              		.cfi_offset 6, -20
 999              		.cfi_offset 7, -16
 1000              		.cfi_offset 8, -12
 1001              		.cfi_offset 9, -8
 1002              		.cfi_offset 14, -4
 1003 0004 ADF5197D 		sub	sp, sp, #612
 1004              		.cfi_def_cfa_offset 640
 1005 0008 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 000a 0646     		mov	r6, r0
 1008 000c 0846     		mov	r0, r1
 1009 000e 07F10801 		add	r1, r7, #8
 1010 0012 0A60     		str	r2, [r1]
 1011 0014 3A1D     		adds	r2, r7, #4
 1012 0016 1360     		str	r3, [r2]
 1013 0018 07F10F03 		add	r3, r7, #15
 1014 001c 3246     		mov	r2, r6
 1015 001e 1A70     		strb	r2, [r3]
 1016 0020 07F10E03 		add	r3, r7, #14
 1017 0024 0246     		mov	r2, r0
 1018 0026 1A70     		strb	r2, [r3]
 1019              		.loc 1 368 0
 1020 0028 6B46     		mov	r3, sp
 1021 002a 1E46     		mov	r6, r3
 369:..\src/command_processing.c ****     
 370:..\src/command_processing.c ****     uint8 CYDATA idx = 0;      
 1022              		.loc 1 370 0
 1023 002c 0023     		movs	r3, #0
 1024 002e 87F85F32 		strb	r3, [r7, #607]
 371:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1025              		.loc 1 371 0
 1026 0032 07F10803 		add	r3, r7, #8
 1027 0036 1B68     		ldr	r3, [r3]
 1028 0038 1B68     		ldr	r3, [r3]
 1029 003a C7F85032 		str	r3, [r7, #592]
 372:..\src/command_processing.c ****     uint8 CYDATA string_length;
 373:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1030              		.loc 1 373 0
 1031 003e 07F5A473 		add	r3, r7, #328
 1032 0042 0022     		movs	r2, #0
 1033 0044 1A60     		str	r2, [r3]
 1034 0046 0433     		adds	r3, r3, #4
 1035 0048 F622     		movs	r2, #246
 1036 004a 0021     		movs	r1, #0
 1037 004c 1846     		mov	r0, r3
 1038 004e FFF7FEFF 		bl	memset
 374:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1039              		.loc 1 374 0
 1040 0052 07F14C03 		add	r3, r7, #76
 1041 0056 0022     		movs	r2, #0
 1042 0058 1A60     		str	r2, [r3]
 1043 005a 0433     		adds	r3, r3, #4
 1044 005c F622     		movs	r2, #246
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 40


 1045 005e 0021     		movs	r1, #0
 1046 0060 1846     		mov	r0, r3
 1047 0062 FFF7FEFF 		bl	memset
 375:..\src/command_processing.c ****     
 376:..\src/command_processing.c ****     int32 aux_int32;
 377:..\src/command_processing.c ****     uint8 i, j;
 378:..\src/command_processing.c ****     uint8 count;
 379:..\src/command_processing.c ****     char aux_char[50];
 380:..\src/command_processing.c ****     
 381:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1048              		.loc 1 381 0
 1049 0066 07F10F03 		add	r3, r7, #15
 1050 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 006c 9BB2     		uxth	r3, r3
 1052 006e 1A46     		mov	r2, r3	@ movhi
 1053 0070 9200     		lsls	r2, r2, #2
 1054 0072 1344     		add	r3, r3, r2
 1055 0074 1A46     		mov	r2, r3	@ movhi
 1056 0076 9100     		lsls	r1, r2, #2
 1057 0078 1A46     		mov	r2, r3	@ movhi
 1058 007a 0B46     		mov	r3, r1	@ movhi
 1059 007c 1344     		add	r3, r3, r2
 1060 007e 5B00     		lsls	r3, r3, #1
 1061 0080 9AB2     		uxth	r2, r3
 1062 0082 07F10E03 		add	r3, r7, #14
 1063 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 0088 9BB2     		uxth	r3, r3
 1065 008a 1946     		mov	r1, r3	@ movhi
 1066 008c 8900     		lsls	r1, r1, #2
 1067 008e 0B44     		add	r3, r3, r1
 1068 0090 1946     		mov	r1, r3	@ movhi
 1069 0092 0901     		lsls	r1, r1, #4
 1070 0094 CB1A     		subs	r3, r1, r3
 1071 0096 5B00     		lsls	r3, r3, #1
 1072 0098 9BB2     		uxth	r3, r3
 1073 009a 1344     		add	r3, r3, r2
 1074 009c 9BB2     		uxth	r3, r3
 1075 009e 3233     		adds	r3, r3, #50
 1076 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 382:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1077              		.loc 1 382 0
 1078 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1079 00a8 0B46     		mov	r3, r1
 1080 00aa 013B     		subs	r3, r3, #1
 1081 00ac C7F84832 		str	r3, [r7, #584]
 1082 00b0 8AB2     		uxth	r2, r1
 1083 00b2 4FF00003 		mov	r3, #0
 1084 00b6 4FEAC309 		lsl	r9, r3, #3
 1085 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1086 00be 4FEAC208 		lsl	r8, r2, #3
 1087 00c2 8AB2     		uxth	r2, r1
 1088 00c4 4FF00003 		mov	r3, #0
 1089 00c8 DD00     		lsls	r5, r3, #3
 1090 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1091 00ce D400     		lsls	r4, r2, #3
 1092 00d0 0B46     		mov	r3, r1
 1093 00d2 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 41


 1094 00d4 DB08     		lsrs	r3, r3, #3
 1095 00d6 DB00     		lsls	r3, r3, #3
 1096 00d8 ADEB030D 		sub	sp, sp, r3
 1097 00dc 6B46     		mov	r3, sp
 1098 00de 0033     		adds	r3, r3, #0
 1099 00e0 C7F84432 		str	r3, [r7, #580]
 1100              	.LBB22:
 383:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1101              		.loc 1 383 0
 1102 00e4 0023     		movs	r3, #0
 1103 00e6 C7F85432 		str	r3, [r7, #596]
 1104 00ea 0BE0     		b	.L77
 1105              	.L78:
 1106              		.loc 1 383 0 is_stmt 0 discriminator 3
 1107 00ec D7F84422 		ldr	r2, [r7, #580]
 1108 00f0 D7F85432 		ldr	r3, [r7, #596]
 1109 00f4 1344     		add	r3, r3, r2
 1110 00f6 0022     		movs	r2, #0
 1111 00f8 1A70     		strb	r2, [r3]
 1112 00fa D7F85432 		ldr	r3, [r7, #596]
 1113 00fe 0133     		adds	r3, r3, #1
 1114 0100 C7F85432 		str	r3, [r7, #596]
 1115              	.L77:
 1116              		.loc 1 383 0 discriminator 1
 1117 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1118 0108 D7F85432 		ldr	r3, [r7, #596]
 1119 010c 9A42     		cmp	r2, r3
 1120 010e EDDC     		bgt	.L78
 1121              	.LBE22:
 384:..\src/command_processing.c **** 
 385:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1122              		.loc 1 385 0 is_stmt 1
 1123 0110 D7F84432 		ldr	r3, [r7, #580]
 1124 0114 0C22     		movs	r2, #12
 1125 0116 1A70     		strb	r2, [r3]
 386:..\src/command_processing.c ****     packet_data[1] = num_params;
 1126              		.loc 1 386 0
 1127 0118 D7F84432 		ldr	r3, [r7, #580]
 1128 011c 07F10F02 		add	r2, r7, #15
 1129 0120 1278     		ldrb	r2, [r2]
 1130 0122 5A70     		strb	r2, [r3, #1]
 387:..\src/command_processing.c ****     
 388:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1131              		.loc 1 388 0
 1132 0124 0023     		movs	r3, #0
 1133 0126 87F85F32 		strb	r3, [r7, #607]
 1134 012a 44E2     		b	.L79
 1135              	.L102:
 1136              	.LBB23:
 389:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1137              		.loc 1 389 0
 1138 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1139 0130 1B01     		lsls	r3, r3, #4
 1140 0132 07F10802 		add	r2, r7, #8
 1141 0136 1268     		ldr	r2, [r2]
 1142 0138 1344     		add	r3, r3, r2
 1143 013a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 42


 1144 013c C7F85032 		str	r3, [r7, #592]
 390:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1145              		.loc 1 390 0
 1146 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1147 0144 1B01     		lsls	r3, r3, #4
 1148 0146 07F10802 		add	r2, r7, #8
 1149 014a 1268     		ldr	r2, [r2]
 1150 014c 1344     		add	r3, r3, r2
 1151 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1152 0150 1846     		mov	r0, r3
 1153 0152 FFF7FEFF 		bl	num_of_bytes
 1154 0156 0346     		mov	r3, r0
 1155 0158 87F84332 		strb	r3, [r7, #579]
 391:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1156              		.loc 1 391 0
 1157 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1158 0160 3222     		movs	r2, #50
 1159 0162 02FB03F3 		mul	r3, r2, r3
 1160 0166 0233     		adds	r3, r3, #2
 1161 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1162 016c 1201     		lsls	r2, r2, #4
 1163 016e 07F10801 		add	r1, r7, #8
 1164 0172 0968     		ldr	r1, [r1]
 1165 0174 0A44     		add	r2, r2, r1
 1166 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1167 0178 D7F84422 		ldr	r2, [r7, #580]
 1168 017c D154     		strb	r1, [r2, r3]
 392:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1169              		.loc 1 392 0
 1170 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1171 0182 3222     		movs	r2, #50
 1172 0184 02FB03F3 		mul	r3, r2, r3
 1173 0188 0333     		adds	r3, r3, #3
 1174 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1175 018e 1201     		lsls	r2, r2, #4
 1176 0190 07F10801 		add	r1, r7, #8
 1177 0194 0968     		ldr	r1, [r1]
 1178 0196 0A44     		add	r2, r2, r1
 1179 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1180 019a D7F84422 		ldr	r2, [r7, #580]
 1181 019e D154     		strb	r1, [r2, r3]
 393:..\src/command_processing.c **** 
 394:..\src/command_processing.c **** 
 395:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1182              		.loc 1 395 0
 1183 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1184 01a4 1B01     		lsls	r3, r3, #4
 1185 01a6 07F10802 		add	r2, r7, #8
 1186 01aa 1268     		ldr	r2, [r2]
 1187 01ac 1344     		add	r3, r3, r2
 1188 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1189 01b0 052B     		cmp	r3, #5
 1190 01b2 61D1     		bne	.L113
 396:..\src/command_processing.c **** 
 397:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 398:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1191              		.loc 1 398 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 43


 1192 01b4 B74B     		ldr	r3, .L114
 1193 01b6 1B6A     		ldr	r3, [r3, #32]
 1194 01b8 B64A     		ldr	r2, .L114
 1195 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1196 01be 43FA02F2 		asr	r2, r3, r2
 1197 01c2 07F14803 		add	r3, r7, #72
 1198 01c6 1A60     		str	r2, [r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1199              		.loc 1 399 0
 1200 01c8 0023     		movs	r3, #0
 1201 01ca 87F85C32 		strb	r3, [r7, #604]
 1202 01ce 1AE0     		b	.L82
 1203              	.L83:
 400:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1204              		.loc 1 400 0 discriminator 3
 1205 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1206 01d4 3222     		movs	r2, #50
 1207 01d6 02FB03F3 		mul	r3, r2, r3
 1208 01da 1A1D     		adds	r2, r3, #4
 1209 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1210 01e0 1A44     		add	r2, r2, r3
 1211 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1212 01e6 D31A     		subs	r3, r2, r3
 1213 01e8 013B     		subs	r3, r3, #1
 1214 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1215 01ee 07F14801 		add	r1, r7, #72
 1216 01f2 0A44     		add	r2, r2, r1
 1217 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1218 01f6 D7F84422 		ldr	r2, [r7, #580]
 1219 01fa D154     		strb	r1, [r2, r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1220              		.loc 1 399 0 discriminator 3
 1221 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1222 0200 0133     		adds	r3, r3, #1
 1223 0202 87F85C32 		strb	r3, [r7, #604]
 1224              	.L82:
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1225              		.loc 1 399 0 is_stmt 0 discriminator 1
 1226 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1227 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1228 020e 9A42     		cmp	r2, r3
 1229 0210 DED3     		bcc	.L83
 401:..\src/command_processing.c ****             }
 402:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1230              		.loc 1 402 0 is_stmt 1
 1231 0212 A04B     		ldr	r3, .L114
 1232 0214 5B6A     		ldr	r3, [r3, #36]
 1233 0216 9F4A     		ldr	r2, .L114
 1234 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1235 021c 43FA02F2 		asr	r2, r3, r2
 1236 0220 07F14803 		add	r3, r7, #72
 1237 0224 1A60     		str	r2, [r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1238              		.loc 1 403 0
 1239 0226 0023     		movs	r3, #0
 1240 0228 87F85C32 		strb	r3, [r7, #604]
 1241 022c 1DE0     		b	.L84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 44


 1242              	.L85:
 404:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1243              		.loc 1 404 0 discriminator 3
 1244 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1245 0232 3222     		movs	r2, #50
 1246 0234 02FB03F3 		mul	r3, r2, r3
 1247 0238 1A1D     		adds	r2, r3, #4
 1248 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1249 023e 1A44     		add	r2, r2, r3
 1250 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1251 0244 1A44     		add	r2, r2, r3
 1252 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1253 024a D31A     		subs	r3, r2, r3
 1254 024c 013B     		subs	r3, r3, #1
 1255 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1256 0252 07F14801 		add	r1, r7, #72
 1257 0256 0A44     		add	r2, r2, r1
 1258 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1259 025a D7F84422 		ldr	r2, [r7, #580]
 1260 025e D154     		strb	r1, [r2, r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1261              		.loc 1 403 0 discriminator 3
 1262 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1263 0264 0133     		adds	r3, r3, #1
 1264 0266 87F85C32 		strb	r3, [r7, #604]
 1265              	.L84:
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1266              		.loc 1 403 0 is_stmt 0 discriminator 1
 1267 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1268 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1269 0272 9A42     		cmp	r2, r3
 1270 0274 DBD3     		bcc	.L85
 405:..\src/command_processing.c ****             }
 406:..\src/command_processing.c ****             break;            
 1271              		.loc 1 406 0 is_stmt 1
 1272 0276 48E0     		b	.L86
 1273              	.L113:
 407:..\src/command_processing.c ****             
 408:..\src/command_processing.c **** 
 409:..\src/command_processing.c ****         case 0:  // Not custom parameter
 410:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 411:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1274              		.loc 1 411 0
 1275 0278 0023     		movs	r3, #0
 1276 027a 87F85D32 		strb	r3, [r7, #605]
 1277 027e 32E0     		b	.L87
 1278              	.L90:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1279              		.loc 1 412 0
 1280 0280 0023     		movs	r3, #0
 1281 0282 87F85C32 		strb	r3, [r7, #604]
 1282 0286 21E0     		b	.L88
 1283              	.L89:
 413:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1284              		.loc 1 413 0 discriminator 3
 1285 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1286 028c 3222     		movs	r2, #50
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 45


 1287 028e 02FB03F3 		mul	r3, r2, r3
 1288 0292 1A1D     		adds	r2, r3, #4
 1289 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1290 0298 1A44     		add	r2, r2, r3
 1291 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1292 029e 1A44     		add	r2, r2, r3
 1293 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1294 02a4 D31A     		subs	r3, r2, r3
 1295 02a6 013B     		subs	r3, r3, #1
 1296 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1297 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1298 02b0 0A44     		add	r2, r2, r1
 1299 02b2 1146     		mov	r1, r2
 1300 02b4 D7F85022 		ldr	r2, [r7, #592]
 1301 02b8 0A44     		add	r2, r2, r1
 1302 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1303 02bc D7F84422 		ldr	r2, [r7, #580]
 1304 02c0 D154     		strb	r1, [r2, r3]
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1305              		.loc 1 412 0 discriminator 3
 1306 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1307 02c6 0133     		adds	r3, r3, #1
 1308 02c8 87F85C32 		strb	r3, [r7, #604]
 1309              	.L88:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1310              		.loc 1 412 0 is_stmt 0 discriminator 1
 1311 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1313 02d4 9A42     		cmp	r2, r3
 1314 02d6 D7D3     		bcc	.L89
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1315              		.loc 1 411 0 is_stmt 1 discriminator 2
 1316 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1317 02dc 97F84332 		ldrb	r3, [r7, #579]
 1318 02e0 1344     		add	r3, r3, r2
 1319 02e2 87F85D32 		strb	r3, [r7, #605]
 1320              	.L87:
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1321              		.loc 1 411 0 is_stmt 0 discriminator 1
 1322 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1323 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1324 02ee 1B01     		lsls	r3, r3, #4
 1325 02f0 07F10801 		add	r1, r7, #8
 1326 02f4 0968     		ldr	r1, [r1]
 1327 02f6 0B44     		add	r3, r3, r1
 1328 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1329 02fa 1946     		mov	r1, r3
 1330 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1331 0300 03FB01F3 		mul	r3, r3, r1
 1332 0304 9A42     		cmp	r2, r3
 1333 0306 BBDB     		blt	.L90
 414:..\src/command_processing.c ****                 }
 415:..\src/command_processing.c ****             }
 416:..\src/command_processing.c ****             break;
 1334              		.loc 1 416 0 is_stmt 1
 1335 0308 00BF     		nop
 1336              	.L86:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 46


 417:..\src/command_processing.c ****     }
 418:..\src/command_processing.c ****        
 419:..\src/command_processing.c ****         sprintf(aux_str,"");
 1337              		.loc 1 419 0
 1338 030a 634B     		ldr	r3, .L114+4
 1339 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1340 030e 07F5A473 		add	r3, r7, #328
 1341 0312 1A70     		strb	r2, [r3]
 420:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1342              		.loc 1 420 0
 1343 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1344 0318 0133     		adds	r3, r3, #1
 1345 031a 07F11401 		add	r1, r7, #20
 1346 031e 0A22     		movs	r2, #10
 1347 0320 1846     		mov	r0, r3
 1348 0322 FFF7FEFF 		bl	itoa
 421:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1349              		.loc 1 421 0
 1350 0326 07F11402 		add	r2, r7, #20
 1351 032a 07F5A473 		add	r3, r7, #328
 1352 032e 1146     		mov	r1, r2
 1353 0330 1846     		mov	r0, r3
 1354 0332 FFF7FEFF 		bl	strcat
 422:..\src/command_processing.c ****         strcat(aux_str," - ");
 1355              		.loc 1 422 0
 1356 0336 07F5A473 		add	r3, r7, #328
 1357 033a 1846     		mov	r0, r3
 1358 033c FFF7FEFF 		bl	strlen
 1359 0340 0346     		mov	r3, r0
 1360 0342 1A46     		mov	r2, r3
 1361 0344 07F5A473 		add	r3, r7, #328
 1362 0348 1344     		add	r3, r3, r2
 1363 034a 544A     		ldr	r2, .L114+8
 1364 034c 1068     		ldr	r0, [r2]	@ unaligned
 1365 034e 1860     		str	r0, [r3]	@ unaligned
 423:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1366              		.loc 1 423 0
 1367 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1368 0354 1B01     		lsls	r3, r3, #4
 1369 0356 07F10802 		add	r2, r7, #8
 1370 035a 1268     		ldr	r2, [r2]
 1371 035c 1344     		add	r3, r3, r2
 1372 035e 9A68     		ldr	r2, [r3, #8]
 1373 0360 07F5A473 		add	r3, r7, #328
 1374 0364 1146     		mov	r1, r2
 1375 0366 1846     		mov	r0, r3
 1376 0368 FFF7FEFF 		bl	strcat
 424:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1377              		.loc 1 424 0
 1378 036c 07F5A473 		add	r3, r7, #328
 1379 0370 1846     		mov	r0, r3
 1380 0372 FFF7FEFF 		bl	strlen
 1381 0376 0346     		mov	r3, r0
 1382 0378 87F85E32 		strb	r3, [r7, #606]
 425:..\src/command_processing.c ****         
 426:..\src/command_processing.c ****         // Parameters with a menu
 427:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 47


 1383              		.loc 1 427 0
 1384 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1385 0380 1B01     		lsls	r3, r3, #4
 1386 0382 07F10802 		add	r2, r7, #8
 1387 0386 1268     		ldr	r2, [r2]
 1388 0388 1344     		add	r3, r3, r2
 1389 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1390 038c 002B     		cmp	r3, #0
 1391 038e 40D0     		beq	.L91
 428:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1392              		.loc 1 428 0
 1393 0390 0023     		movs	r3, #0
 1394 0392 87F85D32 		strb	r3, [r7, #605]
 1395 0396 35E0     		b	.L92
 1396              	.L94:
 429:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1397              		.loc 1 429 0
 1398 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1399 039c 2C22     		movs	r2, #44
 1400 039e 02FB03F3 		mul	r3, r2, r3
 1401 03a2 3A1D     		adds	r2, r7, #4
 1402 03a4 1268     		ldr	r2, [r2]
 1403 03a6 1344     		add	r3, r3, r2
 1404 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1405 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1406 03ae 1B01     		lsls	r3, r3, #4
 1407 03b0 07F10801 		add	r1, r7, #8
 1408 03b4 0968     		ldr	r1, [r1]
 1409 03b6 0B44     		add	r3, r3, r1
 1410 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1411 03ba 9A42     		cmp	r2, r3
 1412 03bc 13D1     		bne	.L93
 430:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1413              		.loc 1 430 0
 1414 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1415 03c2 2C22     		movs	r2, #44
 1416 03c4 02FB03F3 		mul	r3, r2, r3
 1417 03c8 3A1D     		adds	r2, r7, #4
 1418 03ca 1268     		ldr	r2, [r2]
 1419 03cc 1A44     		add	r2, r2, r3
 1420 03ce D7F85032 		ldr	r3, [r7, #592]
 1421 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1422 03d4 9B00     		lsls	r3, r3, #2
 1423 03d6 1344     		add	r3, r3, r2
 1424 03d8 5A68     		ldr	r2, [r3, #4]
 1425 03da 07F5A473 		add	r3, r7, #328
 1426 03de 1146     		mov	r1, r2
 1427 03e0 1846     		mov	r0, r3
 1428 03e2 FFF7FEFF 		bl	strcat
 1429              	.L93:
 431:..\src/command_processing.c ****                 }              
 432:..\src/command_processing.c ****             //Recomputes string length
 433:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1430              		.loc 1 433 0 discriminator 2
 1431 03e6 07F5A473 		add	r3, r7, #328
 1432 03ea 1846     		mov	r0, r3
 1433 03ec FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 48


 1434 03f0 0346     		mov	r3, r0
 1435 03f2 DBB2     		uxtb	r3, r3
 1436 03f4 0133     		adds	r3, r3, #1
 1437 03f6 87F85E32 		strb	r3, [r7, #606]
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1438              		.loc 1 428 0 discriminator 2
 1439 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1440 03fe 0133     		adds	r3, r3, #1
 1441 0400 87F85D32 		strb	r3, [r7, #605]
 1442              	.L92:
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1443              		.loc 1 428 0 is_stmt 0 discriminator 1
 1444 0404 07F10E03 		add	r3, r7, #14
 1445 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1446 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1447 040e 9A42     		cmp	r2, r3
 1448 0410 C2D3     		bcc	.L94
 1449              	.L91:
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****         }
 436:..\src/command_processing.c **** 
 437:..\src/command_processing.c ****         // Add parameter string to packet
 438:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1450              		.loc 1 438 0 is_stmt 1
 1451 0412 97F85E32 		ldrb	r3, [r7, #606]
 1452 0416 87F85D32 		strb	r3, [r7, #605]
 1453 041a 28E0     		b	.L95
 1454              	.L96:
 439:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1455              		.loc 1 439 0 discriminator 3
 1456 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1457 0420 3222     		movs	r2, #50
 1458 0422 02FB03F3 		mul	r3, r2, r3
 1459 0426 1A1D     		adds	r2, r3, #4
 1460 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1461 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1462 0430 0901     		lsls	r1, r1, #4
 1463 0432 07F10800 		add	r0, r7, #8
 1464 0436 0068     		ldr	r0, [r0]
 1465 0438 0144     		add	r1, r1, r0
 1466 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1467 043c 01FB03F3 		mul	r3, r1, r3
 1468 0440 1A44     		add	r2, r2, r3
 1469 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1470 0446 1A44     		add	r2, r2, r3
 1471 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1472 044c D31A     		subs	r3, r2, r3
 1473 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1474 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1475 0456 8A1A     		subs	r2, r1, r2
 1476 0458 07F5A471 		add	r1, r7, #328
 1477 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1478 045e D7F84422 		ldr	r2, [r7, #580]
 1479 0462 D154     		strb	r1, [r2, r3]
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1480              		.loc 1 438 0 discriminator 3
 1481 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 49


 1482 0468 013B     		subs	r3, r3, #1
 1483 046a 87F85D32 		strb	r3, [r7, #605]
 1484              	.L95:
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1485              		.loc 1 438 0 is_stmt 0 discriminator 1
 1486 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1487 0472 002B     		cmp	r3, #0
 1488 0474 D2D1     		bne	.L96
 440:..\src/command_processing.c ****         
 441:..\src/command_processing.c ****         
 442:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1489              		.loc 1 442 0 is_stmt 1
 1490 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1491 047a 1B01     		lsls	r3, r3, #4
 1492 047c 07F10802 		add	r2, r7, #8
 1493 0480 1268     		ldr	r2, [r2]
 1494 0482 1344     		add	r3, r3, r2
 1495 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1496 0486 002B     		cmp	r3, #0
 1497 0488 6ED1     		bne	.L97
 443:..\src/command_processing.c ****             //Send the number of menus          
 444:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1498              		.loc 1 444 0
 1499 048a 0023     		movs	r3, #0
 1500 048c 87F85D32 		strb	r3, [r7, #605]
 1501 0490 40E0     		b	.L98
 1502              	.L115:
 1503 0492 00BF     		.align	2
 1504              	.L114:
 1505 0494 00000000 		.word	c_mem
 1506 0498 00000000 		.word	.LC8
 1507 049c 04000000 		.word	.LC14
 1508              	.L100:
 445:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1509              		.loc 1 445 0
 1510 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1511 04a4 2C22     		movs	r2, #44
 1512 04a6 02FB03F3 		mul	r3, r2, r3
 1513 04aa 3A1D     		adds	r2, r7, #4
 1514 04ac 1268     		ldr	r2, [r2]
 1515 04ae 1344     		add	r3, r3, r2
 1516 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1517 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1518 04b6 1B01     		lsls	r3, r3, #4
 1519 04b8 07F10801 		add	r1, r7, #8
 1520 04bc 0968     		ldr	r1, [r1]
 1521 04be 0B44     		add	r3, r3, r1
 1522 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1523 04c2 9A42     		cmp	r2, r3
 1524 04c4 21D1     		bne	.L99
 446:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1525              		.loc 1 446 0
 1526 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1527 04ca 3222     		movs	r2, #50
 1528 04cc 02FB03F3 		mul	r3, r2, r3
 1529 04d0 1A1D     		adds	r2, r3, #4
 1530 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 50


 1531 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1532 04da 0901     		lsls	r1, r1, #4
 1533 04dc 07F10800 		add	r0, r7, #8
 1534 04e0 0068     		ldr	r0, [r0]
 1535 04e2 0144     		add	r1, r1, r0
 1536 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1537 04e6 01FB03F3 		mul	r3, r1, r3
 1538 04ea 1A44     		add	r2, r2, r3
 1539 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1540 04f0 1344     		add	r3, r3, r2
 1541 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1542 04f6 0132     		adds	r2, r2, #1
 1543 04f8 D1B2     		uxtb	r1, r2
 1544 04fa D7F84422 		ldr	r2, [r7, #580]
 1545 04fe D154     		strb	r1, [r2, r3]
 447:..\src/command_processing.c ****                 i = num_menus;}              
 1546              		.loc 1 447 0
 1547 0500 07F10E03 		add	r3, r7, #14
 1548 0504 1B78     		ldrb	r3, [r3]
 1549 0506 87F85D32 		strb	r3, [r7, #605]
 1550              	.L99:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1551              		.loc 1 444 0 discriminator 2
 1552 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1553 050e 0133     		adds	r3, r3, #1
 1554 0510 87F85D32 		strb	r3, [r7, #605]
 1555              	.L98:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1556              		.loc 1 444 0 is_stmt 0 discriminator 1
 1557 0514 07F10E03 		add	r3, r7, #14
 1558 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1559 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1560 051e 9A42     		cmp	r2, r3
 1561 0520 BED3     		bcc	.L100
 448:..\src/command_processing.c ****             }
 449:..\src/command_processing.c ****             // Add empty bit + struct number
 450:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 451:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1562              		.loc 1 451 0 is_stmt 1
 1563 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1564 0526 3222     		movs	r2, #50
 1565 0528 02FB03F3 		mul	r3, r2, r3
 1566 052c 1A1D     		adds	r2, r3, #4
 1567 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1568 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1569 0536 0901     		lsls	r1, r1, #4
 1570 0538 07F10800 		add	r0, r7, #8
 1571 053c 0068     		ldr	r0, [r0]
 1572 053e 0144     		add	r1, r1, r0
 1573 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1574 0542 01FB03F3 		mul	r3, r1, r3
 1575 0546 1A44     		add	r2, r2, r3
 1576 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1577 054c 1344     		add	r3, r3, r2
 1578 054e 0233     		adds	r3, r3, #2
 1579 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1580 0554 1201     		lsls	r2, r2, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 51


 1581 0556 07F10801 		add	r1, r7, #8
 1582 055a 0968     		ldr	r1, [r1]
 1583 055c 0A44     		add	r2, r2, r1
 1584 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1585 0560 D7F84422 		ldr	r2, [r7, #580]
 1586 0564 D154     		strb	r1, [r2, r3]
 1587 0566 21E0     		b	.L101
 1588              	.L97:
 452:..\src/command_processing.c ****         }
 453:..\src/command_processing.c ****         else {
 454:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1589              		.loc 1 454 0
 1590 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1591 056c 3222     		movs	r2, #50
 1592 056e 02FB03F3 		mul	r3, r2, r3
 1593 0572 1A1D     		adds	r2, r3, #4
 1594 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1595 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1596 057c 0901     		lsls	r1, r1, #4
 1597 057e 07F10800 		add	r0, r7, #8
 1598 0582 0068     		ldr	r0, [r0]
 1599 0584 0144     		add	r1, r1, r0
 1600 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1601 0588 01FB03F3 		mul	r3, r1, r3
 1602 058c 1A44     		add	r2, r2, r3
 1603 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1604 0592 1344     		add	r3, r3, r2
 1605 0594 0133     		adds	r3, r3, #1
 1606 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1607 059a 1201     		lsls	r2, r2, #4
 1608 059c 07F10801 		add	r1, r7, #8
 1609 05a0 0968     		ldr	r1, [r1]
 1610 05a2 0A44     		add	r2, r2, r1
 1611 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1612 05a6 D7F84422 		ldr	r2, [r7, #580]
 1613 05aa D154     		strb	r1, [r2, r3]
 1614              	.L101:
 1615              	.LBE23:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1616              		.loc 1 388 0 discriminator 2
 1617 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1618 05b0 0133     		adds	r3, r3, #1
 1619 05b2 87F85F32 		strb	r3, [r7, #607]
 1620              	.L79:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1621              		.loc 1 388 0 is_stmt 0 discriminator 1
 1622 05b6 07F10F03 		add	r3, r7, #15
 1623 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1624 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 05c0 9A42     		cmp	r2, r3
 1626 05c2 FFF4B3AD 		bcc	.L102
 455:..\src/command_processing.c ****         }
 456:..\src/command_processing.c ****     }
 457:..\src/command_processing.c ****     
 458:..\src/command_processing.c ****     // Add menu
 459:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1627              		.loc 1 459 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 52


 1628 05c6 0023     		movs	r3, #0
 1629 05c8 87F85C32 		strb	r3, [r7, #604]
 1630 05cc C0E0     		b	.L103
 1631              	.L111:
 460:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1632              		.loc 1 460 0
 1633 05ce 774B     		ldr	r3, .L116
 1634 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 05d2 07F14C03 		add	r3, r7, #76
 1636 05d6 1A70     		strb	r2, [r3]
 461:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1637              		.loc 1 461 0
 1638 05d8 0023     		movs	r3, #0
 1639 05da 87F85B32 		strb	r3, [r7, #603]
 1640 05de 7AE0     		b	.L104
 1641              	.L108:
 462:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1642              		.loc 1 462 0
 1643 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1644 05e4 2C22     		movs	r2, #44
 1645 05e6 02FB03F3 		mul	r3, r2, r3
 1646 05ea 3A1D     		adds	r2, r7, #4
 1647 05ec 1268     		ldr	r2, [r2]
 1648 05ee 1A44     		add	r2, r2, r3
 1649 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1650 05f4 9B00     		lsls	r3, r3, #2
 1651 05f6 1344     		add	r3, r3, r2
 1652 05f8 5B68     		ldr	r3, [r3, #4]
 1653 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1654 05fc 002B     		cmp	r3, #0
 1655 05fe 24D1     		bne	.L105
 463:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1656              		.loc 1 463 0
 1657 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1658 0604 2C22     		movs	r2, #44
 1659 0606 02FB03F3 		mul	r3, r2, r3
 1660 060a 3A1D     		adds	r2, r7, #4
 1661 060c 1268     		ldr	r2, [r2]
 1662 060e 1344     		add	r3, r3, r2
 1663 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1664 0612 012B     		cmp	r3, #1
 1665 0614 15D1     		bne	.L106
 464:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1666              		.loc 1 464 0
 1667 0616 07F14C03 		add	r3, r7, #76
 1668 061a 1846     		mov	r0, r3
 1669 061c FFF7FEFF 		bl	strlen
 1670 0620 0346     		mov	r3, r0
 1671 0622 1A46     		mov	r2, r3
 1672 0624 07F14C03 		add	r3, r7, #76
 1673 0628 1344     		add	r3, r3, r2
 1674 062a 614A     		ldr	r2, .L116+4
 1675 062c 1D46     		mov	r5, r3
 1676 062e 1446     		mov	r4, r2
 1677 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1678 0632 2860     		str	r0, [r5]	@ unaligned
 1679 0634 6960     		str	r1, [r5, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 53


 1680 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1681 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1682 063a 2068     		ldr	r0, [r4]	@ unaligned
 1683 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1684 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1685 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1686              	.L106:
 465:..\src/command_processing.c ****                 }
 466:..\src/command_processing.c ****                 count = 10;
 1687              		.loc 1 466 0
 1688 0642 0A23     		movs	r3, #10
 1689 0644 87F85B32 		strb	r3, [r7, #603]
 1690 0648 40E0     		b	.L107
 1691              	.L105:
 467:..\src/command_processing.c ****             }            
 468:..\src/command_processing.c ****             else {
 469:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1692              		.loc 1 469 0
 1693 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1694 064e 07F11401 		add	r1, r7, #20
 1695 0652 0A22     		movs	r2, #10
 1696 0654 1846     		mov	r0, r3
 1697 0656 FFF7FEFF 		bl	itoa
 470:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1698              		.loc 1 470 0
 1699 065a 07F11402 		add	r2, r7, #20
 1700 065e 07F14C03 		add	r3, r7, #76
 1701 0662 1146     		mov	r1, r2
 1702 0664 1846     		mov	r0, r3
 1703 0666 FFF7FEFF 		bl	strcat
 471:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1704              		.loc 1 471 0
 1705 066a 07F14C03 		add	r3, r7, #76
 1706 066e 1846     		mov	r0, r3
 1707 0670 FFF7FEFF 		bl	strlen
 1708 0674 0346     		mov	r3, r0
 1709 0676 1A46     		mov	r2, r3
 1710 0678 07F14C03 		add	r3, r7, #76
 1711 067c 1344     		add	r3, r3, r2
 1712 067e 4D4A     		ldr	r2, .L116+8
 1713 0680 1068     		ldr	r0, [r2]	@ unaligned
 1714 0682 1860     		str	r0, [r3]	@ unaligned
 1715 0684 1279     		ldrb	r2, [r2, #4]
 1716 0686 1A71     		strb	r2, [r3, #4]
 472:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
 1717              		.loc 1 472 0
 1718 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1719 068c 2C22     		movs	r2, #44
 1720 068e 02FB03F3 		mul	r3, r2, r3
 1721 0692 3A1D     		adds	r2, r7, #4
 1722 0694 1268     		ldr	r2, [r2]
 1723 0696 1A44     		add	r2, r2, r3
 1724 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1725 069c 9B00     		lsls	r3, r3, #2
 1726 069e 1344     		add	r3, r3, r2
 1727 06a0 5A68     		ldr	r2, [r3, #4]
 1728 06a2 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 54


 1729 06a6 1146     		mov	r1, r2
 1730 06a8 1846     		mov	r0, r3
 1731 06aa FFF7FEFF 		bl	strcat
 473:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1732              		.loc 1 473 0
 1733 06ae 07F14C03 		add	r3, r7, #76
 1734 06b2 1846     		mov	r0, r3
 1735 06b4 FFF7FEFF 		bl	strlen
 1736 06b8 0346     		mov	r3, r0
 1737 06ba 1A46     		mov	r2, r3
 1738 06bc 07F14C03 		add	r3, r7, #76
 1739 06c0 1344     		add	r3, r3, r2
 1740 06c2 3D49     		ldr	r1, .L116+12
 1741 06c4 1A46     		mov	r2, r3
 1742 06c6 0B46     		mov	r3, r1
 1743 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1744 06ca 1380     		strh	r3, [r2]	@ unaligned
 1745              	.L107:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1746              		.loc 1 461 0 discriminator 2
 1747 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1748 06d0 0133     		adds	r3, r3, #1
 1749 06d2 87F85B32 		strb	r3, [r7, #603]
 1750              	.L104:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1751              		.loc 1 461 0 is_stmt 0 discriminator 1
 1752 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1753 06da 092B     		cmp	r3, #9
 1754 06dc 80D9     		bls	.L108
 474:..\src/command_processing.c ****             }    
 475:..\src/command_processing.c ****         }
 476:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1755              		.loc 1 476 0 is_stmt 1
 1756 06de 07F14C03 		add	r3, r7, #76
 1757 06e2 1846     		mov	r0, r3
 1758 06e4 FFF7FEFF 		bl	strlen
 1759 06e8 0346     		mov	r3, r0
 1760 06ea 87F85E32 		strb	r3, [r7, #606]
 477:..\src/command_processing.c ****         
 478:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1761              		.loc 1 478 0
 1762 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1763 06f2 87F85D32 		strb	r3, [r7, #605]
 1764 06f6 22E0     		b	.L109
 1765              	.L110:
 479:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1766              		.loc 1 479 0 discriminator 3
 1767 06f8 07F10F03 		add	r3, r7, #15
 1768 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1769 06fe 3222     		movs	r2, #50
 1770 0700 02FB03F3 		mul	r3, r2, r3
 1771 0704 9A1C     		adds	r2, r3, #2
 1772 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1773 070a 9621     		movs	r1, #150
 1774 070c 01FB03F3 		mul	r3, r1, r3
 1775 0710 1A44     		add	r2, r2, r3
 1776 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 55


 1777 0716 1A44     		add	r2, r2, r3
 1778 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1779 071c D31A     		subs	r3, r2, r3
 1780 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1781 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1782 0726 8A1A     		subs	r2, r1, r2
 1783 0728 07F14C01 		add	r1, r7, #76
 1784 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1785 072e D7F84422 		ldr	r2, [r7, #580]
 1786 0732 D154     		strb	r1, [r2, r3]
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1787              		.loc 1 478 0 discriminator 3
 1788 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1789 0738 013B     		subs	r3, r3, #1
 1790 073a 87F85D32 		strb	r3, [r7, #605]
 1791              	.L109:
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1792              		.loc 1 478 0 is_stmt 0 discriminator 1
 1793 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1794 0742 002B     		cmp	r3, #0
 1795 0744 D8D1     		bne	.L110
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1796              		.loc 1 459 0 is_stmt 1 discriminator 2
 1797 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1798 074a 0133     		adds	r3, r3, #1
 1799 074c 87F85C32 		strb	r3, [r7, #604]
 1800              	.L103:
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1801              		.loc 1 459 0 is_stmt 0 discriminator 1
 1802 0750 07F10E03 		add	r3, r7, #14
 1803 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1804 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1805 075a 9A42     		cmp	r2, r3
 1806 075c FFF437AF 		bcc	.L111
 480:..\src/command_processing.c ****     }
 481:..\src/command_processing.c ****         
 482:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1807              		.loc 1 482 0 is_stmt 1
 1808 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1809 0764 5C1E     		subs	r4, r3, #1
 1810 0766 D7F84422 		ldr	r2, [r7, #580]
 1811 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1812 076e DBB2     		uxtb	r3, r3
 1813 0770 013B     		subs	r3, r3, #1
 1814 0772 DBB2     		uxtb	r3, r3
 1815 0774 1946     		mov	r1, r3
 1816 0776 1046     		mov	r0, r2
 1817 0778 FFF7FEFF 		bl	LCRChecksum
 1818 077c 0346     		mov	r3, r0
 1819 077e 1A46     		mov	r2, r3
 1820 0780 D7F84432 		ldr	r3, [r7, #580]
 1821 0784 1A55     		strb	r2, [r3, r4]
 483:..\src/command_processing.c ****     
 484:..\src/command_processing.c ****     if (sendToDevice)
 1822              		.loc 1 484 0
 1823 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1824 078a 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 56


 1825 078c 07D0     		beq	.L112
 485:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1826              		.loc 1 485 0
 1827 078e D7F84432 		ldr	r3, [r7, #580]
 1828 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1829 0796 1146     		mov	r1, r2
 1830 0798 1846     		mov	r0, r3
 1831 079a FFF7FEFF 		bl	commWrite
 1832              	.L112:
 1833 079e B546     		mov	sp, r6
 486:..\src/command_processing.c ****     }
 487:..\src/command_processing.c ****     else {
 488:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 489:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 490:..\src/command_processing.c ****       // longPkgSize = packet_length;
 491:..\src/command_processing.c ****     }
 492:..\src/command_processing.c **** }
 1834              		.loc 1 492 0
 1835 07a0 00BF     		nop
 1836 07a2 07F51977 		add	r7, r7, #612
 1837              		.cfi_def_cfa_offset 28
 1838 07a6 BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1842              	.L117:
 1843              		.align	2
 1844              	.L116:
 1845 07ac 00000000 		.word	.LC8
 1846 07b0 08000000 		.word	.LC15
 1847 07b4 20000000 		.word	.LC16
 1848 07b8 28000000 		.word	.LC17
 1849              		.cfi_endproc
 1850              	.LFE68:
 1851              		.size	get_param_list, .-get_param_list
 1852              		.section	.rodata
 1853 002a 0000     		.align	2
 1854              	.LC19:
 1855 002c 44657669 		.ascii	"Device ID:\000"
 1855      63652049 
 1855      443A00
 1856 0037 00       		.align	2
 1857              	.LC20:
 1858 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1858      74687265 
 1858      73686F6C 
 1858      64733A00 
 1859              		.align	2
 1860              	.LC21:
 1861 0048 454D4720 		.ascii	"EMG max values:\000"
 1861      6D617820 
 1861      76616C75 
 1861      65733A00 
 1862              		.align	2
 1863              	.LC22:
 1864 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1864      6D617820 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 57


 1864      73706565 
 1864      64733A00 
 1865              		.align	2
 1866              	.LC23:
 1867 0068 454D4720 		.ascii	"EMG inversion:\000"
 1867      696E7665 
 1867      7273696F 
 1867      6E3A00
 1868 0077 00       		.align	2
 1869              	.LC24:
 1870 0078 4D617374 		.ascii	"Master Mode:\000"
 1870      6572204D 
 1870      6F64653A 
 1870      00
 1871 0085 000000   		.align	2
 1872              	.LC25:
 1873 0088 536C6176 		.ascii	"Slave ID:\000"
 1873      65204944 
 1873      3A00
 1874 0092 0000     		.align	2
 1875              	.LC26:
 1876 0094 536C6176 		.ascii	"Slave resolution:\000"
 1876      65207265 
 1876      736F6C75 
 1876      74696F6E 
 1876      3A00
 1877 00a6 0000     		.align	2
 1878              	.LC27:
 1879 00a8 496E7075 		.ascii	"Input mode:\000"
 1879      74206D6F 
 1879      64653A00 
 1880              		.align	2
 1881              	.LC28:
 1882 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1882      206C696D 
 1882      69747320 
 1882      5B696E66 
 1882      2C207375 
 1883              		.align	2
 1884              	.LC29:
 1885 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1885      6F746163 
 1885      74696C65 
 1885      20466565 
 1885      64626163 
 1886 00e3 00       		.align	2
 1887              	.LC30:
 1888 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1888      4368616D 
 1888      62657220 
 1888      46656564 
 1888      6261636B 
 1889 00fa 0000     		.align	2
 1890              	.LC31:
 1891 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1891      6D756D20 
 1891      736C6176 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 58


 1891      65207265 
 1891      73696475 
 1892              		.align	2
 1893              	.LC32:
 1894 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1894      6D756D20 
 1894      70726573 
 1894      73757265 
 1894      20666565 
 1895 013d 000000   		.align	2
 1896              	.LC33:
 1897 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1897      6F727469 
 1897      6F6E616C 
 1897      20707265 
 1897      73737572 
 1898 0162 0000     		.align	2
 1899              	.LC0:
 1900 0164 20557362 		.ascii	" Usb\000"
 1900      00
 1901 0169 000000   		.align	2
 1902              	.LC1:
 1903 016c 2048616E 		.ascii	" Handle\000"
 1903      646C6500 
 1904              		.align	2
 1905              	.LC2:
 1906 0174 20454D47 		.ascii	" EMG proportional\000"
 1906      2070726F 
 1906      706F7274 
 1906      696F6E61 
 1906      6C00
 1907 0186 0000     		.align	2
 1908              	.LC3:
 1909 0188 20454D47 		.ascii	" EMG Integral\000"
 1909      20496E74 
 1909      65677261 
 1909      6C00
 1910 0196 0000     		.align	2
 1911              	.LC4:
 1912 0198 20454D47 		.ascii	" EMG FCFS\000"
 1912      20464346 
 1912      5300
 1913 01a2 0000     		.align	2
 1914              	.LC5:
 1915 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
 1915      20464346 
 1915      53204164 
 1915      76616E63 
 1915      656400
 1916 01b7 00       		.align	2
 1917              	.LC6:
 1918 01b8 204A6F79 		.ascii	" Joystick\000"
 1918      73746963 
 1918      6B00
 1919 01c2 0000     		.align	2
 1920              	.LC7:
 1921 01c4 20454D47 		.ascii	" EMG proportional NC\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 59


 1921      2070726F 
 1921      706F7274 
 1921      696F6E61 
 1921      6C204E43 
 1922 01d9 000000   		.align	2
 1923              	.LC9:
 1924 01dc 204E4F00 		.ascii	" NO\000"
 1925              		.align	2
 1926              	.LC10:
 1927 01e0 20594553 		.ascii	" YES\000"
 1927      00
 1928 01e5 000000   		.align	2
 1929              	.LC11:
 1930 01e8 204F4646 		.ascii	" OFF\000"
 1930      00
 1931 01ed 000000   		.align	2
 1932              	.LC12:
 1933 01f0 204F4E00 		.ascii	" ON\000"
 1934              		.align	2
 1935              	.LC18:
 1936 01f4 01       		.byte	1
 1937 01f5 00       		.byte	0
 1938 01f6 0000     		.space	2
 1939 01f8 64010000 		.word	.LC0
 1940 01fc 6C010000 		.word	.LC1
 1941 0200 74010000 		.word	.LC2
 1942 0204 88010000 		.word	.LC3
 1943 0208 98010000 		.word	.LC4
 1944 020c A4010000 		.word	.LC5
 1945 0210 B8010000 		.word	.LC6
 1946 0214 C4010000 		.word	.LC7
 1947 0218 00000000 		.word	.LC8
 1948 021c 00000000 		.word	.LC8
 1949 0220 03       		.byte	3
 1950 0221 00       		.byte	0
 1951 0222 0000     		.space	2
 1952 0224 DC010000 		.word	.LC9
 1953 0228 E0010000 		.word	.LC10
 1954 022c 00000000 		.word	.LC8
 1955 0230 00000000 		.word	.LC8
 1956 0234 00000000 		.word	.LC8
 1957 0238 00000000 		.word	.LC8
 1958 023c 00000000 		.word	.LC8
 1959 0240 00000000 		.word	.LC8
 1960 0244 00000000 		.word	.LC8
 1961 0248 00000000 		.word	.LC8
 1962 024c 05       		.byte	5
 1963 024d 01       		.byte	1
 1964 024e 0000     		.space	2
 1965 0250 E8010000 		.word	.LC11
 1966 0254 F0010000 		.word	.LC12
 1967 0258 00000000 		.word	.LC8
 1968 025c 00000000 		.word	.LC8
 1969 0260 00000000 		.word	.LC8
 1970 0264 00000000 		.word	.LC8
 1971 0268 00000000 		.word	.LC8
 1972 026c 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 60


 1973 0270 00000000 		.word	.LC8
 1974 0274 00000000 		.word	.LC8
 1975              		.section	.text.manage_param_list,"ax",%progbits
 1976              		.align	2
 1977              		.global	manage_param_list
 1978              		.thumb
 1979              		.thumb_func
 1980              		.type	manage_param_list, %function
 1981              	manage_param_list:
 1982              	.LFB69:
 493:..\src/command_processing.c **** 
 494:..\src/command_processing.c **** //==============================================================================
 495:..\src/command_processing.c **** // MANAGE PARAM LIST
 496:..\src/command_processing.c **** //==============================================================================
 497:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 1983              		.loc 1 497 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 456
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 90B5     		push	{r4, r7, lr}
 1988              		.cfi_def_cfa_offset 12
 1989              		.cfi_offset 4, -12
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 F5B0     		sub	sp, sp, #468
 1993              		.cfi_def_cfa_offset 480
 1994 0004 02AF     		add	r7, sp, #8
 1995              		.cfi_def_cfa 7, 472
 1996 0006 0246     		mov	r2, r0
 1997 0008 BB1D     		adds	r3, r7, #6
 1998 000a 1A80     		strh	r2, [r3]	@ movhi
 1999 000c 7B1D     		adds	r3, r7, #5
 2000 000e 0A46     		mov	r2, r1
 2001 0010 1A70     		strb	r2, [r3]
 498:..\src/command_processing.c ****     uint8 CYDATA i, j;
 499:..\src/command_processing.c ****     
 500:..\src/command_processing.c ****     uint8 PARAM_IDX;
 501:..\src/command_processing.c ****          
 502:..\src/command_processing.c ****     // Arrays
 503:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2002              		.loc 1 503 0
 2003 0012 EE4B     		ldr	r3, .L134
 2004 0014 C7F8C031 		str	r3, [r7, #448]
 504:..\src/command_processing.c ****     
 505:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
 2005              		.loc 1 505 0
 2006 0018 BB1D     		adds	r3, r7, #6
 2007 001a 1B88     		ldrh	r3, [r3]
 2008 001c 002B     		cmp	r3, #0
 2009 001e 02D0     		beq	.L119
 506:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2010              		.loc 1 506 0
 2011 0020 EB4B     		ldr	r3, .L134+4
 2012 0022 C7F8C031 		str	r3, [r7, #448]
 2013              	.L119:
 507:..\src/command_processing.c ****     }
 508:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 61


 509:..\src/command_processing.c ****     struct menu menu_type;
 510:..\src/command_processing.c ****     
 511:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 512:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2014              		.loc 1 512 0
 2015 0026 EB4A     		ldr	r2, .L134+8
 2016 0028 07F58673 		add	r3, r7, #268
 2017 002c 1146     		mov	r1, r2
 2018 002e 8422     		movs	r2, #132
 2019 0030 1846     		mov	r0, r3
 2020 0032 FFF7FEFF 		bl	memcpy
 513:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 514:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 515:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 516:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 517:..\src/command_processing.c ****        };
 518:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 519:..\src/command_processing.c ****         
 520:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2021              		.loc 1 520 0
 2022 0036 0323     		movs	r3, #3
 2023 0038 87F8BF31 		strb	r3, [r7, #447]
 521:..\src/command_processing.c ****     
 522:..\src/command_processing.c ****     struct parameter param_type;   
 523:..\src/command_processing.c ****     
 524:..\src/command_processing.c ****     const struct parameter PARAM_LIST[] = {
 525:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 526:..\src/command_processing.c ****         //DEVICE_PARAMETERS    
 527:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->dev.id)                           , TYPE_UINT8      , 1         , 
 2024              		.loc 1 527 0
 2025 003c D7F8C031 		ldr	r3, [r7, #448]
 2026 0040 03F11002 		add	r2, r3, #16
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2027              		.loc 1 524 0
 2028 0044 07F10C03 		add	r3, r7, #12
 2029 0048 1A60     		str	r2, [r3]
 2030 004a 07F10C03 		add	r3, r7, #12
 2031 004e 0222     		movs	r2, #2
 2032 0050 1A71     		strb	r2, [r3, #4]
 2033 0052 07F10C03 		add	r3, r7, #12
 2034 0056 0122     		movs	r2, #1
 2035 0058 5A71     		strb	r2, [r3, #5]
 2036 005a 07F10C03 		add	r3, r7, #12
 2037 005e DE4A     		ldr	r2, .L134+12
 2038 0060 9A60     		str	r2, [r3, #8]
 2039 0062 07F10C03 		add	r3, r7, #12
 2040 0066 0022     		movs	r2, #0
 2041 0068 1A73     		strb	r2, [r3, #12]
 2042 006a 07F10C03 		add	r3, r7, #12
 2043 006e 0022     		movs	r2, #0
 2044 0070 5A73     		strb	r2, [r3, #13]
 2045 0072 07F10C03 		add	r3, r7, #12
 2046 0076 0022     		movs	r2, #0
 2047 0078 9A73     		strb	r2, [r3, #14]
 2048 007a 07F10C03 		add	r3, r7, #12
 2049 007e 0122     		movs	r2, #1
 2050 0080 DA73     		strb	r2, [r3, #15]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 62


 528:..\src/command_processing.c ****         
 529:..\src/command_processing.c ****         //EMG_PARAMETERS    
 530:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , 
 2051              		.loc 1 530 0
 2052 0082 D7F8C031 		ldr	r3, [r7, #448]
 2053 0086 03F13002 		add	r2, r3, #48
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2054              		.loc 1 524 0
 2055 008a 07F10C03 		add	r3, r7, #12
 2056 008e 1A61     		str	r2, [r3, #16]
 2057 0090 07F10C03 		add	r3, r7, #12
 2058 0094 0422     		movs	r2, #4
 2059 0096 1A75     		strb	r2, [r3, #20]
 2060 0098 07F10C03 		add	r3, r7, #12
 2061 009c 0222     		movs	r2, #2
 2062 009e 5A75     		strb	r2, [r3, #21]
 2063 00a0 07F10C03 		add	r3, r7, #12
 2064 00a4 CD4A     		ldr	r2, .L134+16
 2065 00a6 9A61     		str	r2, [r3, #24]
 2066 00a8 07F10C03 		add	r3, r7, #12
 2067 00ac 0022     		movs	r2, #0
 2068 00ae 1A77     		strb	r2, [r3, #28]
 2069 00b0 07F10C03 		add	r3, r7, #12
 2070 00b4 1E22     		movs	r2, #30
 2071 00b6 5A77     		strb	r2, [r3, #29]
 2072 00b8 07F10C03 		add	r3, r7, #12
 2073 00bc 0022     		movs	r2, #0
 2074 00be 9A77     		strb	r2, [r3, #30]
 2075 00c0 07F10C03 		add	r3, r7, #12
 2076 00c4 0122     		movs	r2, #1
 2077 00c6 DA77     		strb	r2, [r3, #31]
 531:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , 
 2078              		.loc 1 531 0
 2079 00c8 D7F8C031 		ldr	r3, [r7, #448]
 2080 00cc 03F13402 		add	r2, r3, #52
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2081              		.loc 1 524 0
 2082 00d0 07F10C03 		add	r3, r7, #12
 2083 00d4 1A62     		str	r2, [r3, #32]
 2084 00d6 07F10C03 		add	r3, r7, #12
 2085 00da 0622     		movs	r2, #6
 2086 00dc 83F82420 		strb	r2, [r3, #36]
 2087 00e0 07F10C03 		add	r3, r7, #12
 2088 00e4 0222     		movs	r2, #2
 2089 00e6 83F82520 		strb	r2, [r3, #37]
 2090 00ea 07F10C03 		add	r3, r7, #12
 2091 00ee BC4A     		ldr	r2, .L134+20
 2092 00f0 9A62     		str	r2, [r3, #40]
 2093 00f2 07F10C03 		add	r3, r7, #12
 2094 00f6 0022     		movs	r2, #0
 2095 00f8 83F82C20 		strb	r2, [r3, #44]
 2096 00fc 07F10C03 		add	r3, r7, #12
 2097 0100 1E22     		movs	r2, #30
 2098 0102 83F82D20 		strb	r2, [r3, #45]
 2099 0106 07F10C03 		add	r3, r7, #12
 2100 010a 0022     		movs	r2, #0
 2101 010c 83F82E20 		strb	r2, [r3, #46]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 63


 2102 0110 07F10C03 		add	r3, r7, #12
 2103 0114 0122     		movs	r2, #1
 2104 0116 83F82F20 		strb	r2, [r3, #47]
 532:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , 
 2105              		.loc 1 532 0
 2106 011a D7F8C031 		ldr	r3, [r7, #448]
 2107 011e 03F13C02 		add	r2, r3, #60
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2108              		.loc 1 524 0
 2109 0122 07F10C03 		add	r3, r7, #12
 2110 0126 1A63     		str	r2, [r3, #48]
 2111 0128 07F10C03 		add	r3, r7, #12
 2112 012c 0222     		movs	r2, #2
 2113 012e 83F83420 		strb	r2, [r3, #52]
 2114 0132 07F10C03 		add	r3, r7, #12
 2115 0136 0222     		movs	r2, #2
 2116 0138 83F83520 		strb	r2, [r3, #53]
 2117 013c 07F10C03 		add	r3, r7, #12
 2118 0140 A84A     		ldr	r2, .L134+24
 2119 0142 9A63     		str	r2, [r3, #56]
 2120 0144 07F10C03 		add	r3, r7, #12
 2121 0148 0022     		movs	r2, #0
 2122 014a 83F83C20 		strb	r2, [r3, #60]
 2123 014e 07F10C03 		add	r3, r7, #12
 2124 0152 1E22     		movs	r2, #30
 2125 0154 83F83D20 		strb	r2, [r3, #61]
 2126 0158 07F10C03 		add	r3, r7, #12
 2127 015c 0022     		movs	r2, #0
 2128 015e 83F83E20 		strb	r2, [r3, #62]
 2129 0162 07F10C03 		add	r3, r7, #12
 2130 0166 0122     		movs	r2, #1
 2131 0168 83F83F20 		strb	r2, [r3, #63]
 533:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , 
 2132              		.loc 1 533 0
 2133 016c D7F8C031 		ldr	r3, [r7, #448]
 2134 0170 03F13E02 		add	r2, r3, #62
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2135              		.loc 1 524 0
 2136 0174 07F10C03 		add	r3, r7, #12
 2137 0178 1A64     		str	r2, [r3, #64]
 2138 017a 07F10C03 		add	r3, r7, #12
 2139 017e 0022     		movs	r2, #0
 2140 0180 83F84420 		strb	r2, [r3, #68]
 2141 0184 07F10C03 		add	r3, r7, #12
 2142 0188 0122     		movs	r2, #1
 2143 018a 83F84520 		strb	r2, [r3, #69]
 2144 018e 07F10C03 		add	r3, r7, #12
 2145 0192 954A     		ldr	r2, .L134+28
 2146 0194 9A64     		str	r2, [r3, #72]
 2147 0196 07F10C03 		add	r3, r7, #12
 2148 019a 0322     		movs	r2, #3
 2149 019c 83F84C20 		strb	r2, [r3, #76]
 2150 01a0 07F10C03 		add	r3, r7, #12
 2151 01a4 1E22     		movs	r2, #30
 2152 01a6 83F84D20 		strb	r2, [r3, #77]
 2153 01aa 07F10C03 		add	r3, r7, #12
 2154 01ae 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 64


 2155 01b0 83F84E20 		strb	r2, [r3, #78]
 2156 01b4 07F10C03 		add	r3, r7, #12
 2157 01b8 0122     		movs	r2, #1
 2158 01ba 83F84F20 		strb	r2, [r3, #79]
 534:..\src/command_processing.c ****         
 535:..\src/command_processing.c ****         //MASTER MODE PARAMETERS
 536:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , 
 2159              		.loc 1 536 0
 2160 01be D7F8C031 		ldr	r3, [r7, #448]
 2161 01c2 03F14002 		add	r2, r3, #64
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2162              		.loc 1 524 0
 2163 01c6 07F10C03 		add	r3, r7, #12
 2164 01ca 1A65     		str	r2, [r3, #80]
 2165 01cc 07F10C03 		add	r3, r7, #12
 2166 01d0 0022     		movs	r2, #0
 2167 01d2 83F85420 		strb	r2, [r3, #84]
 2168 01d6 07F10C03 		add	r3, r7, #12
 2169 01da 0122     		movs	r2, #1
 2170 01dc 83F85520 		strb	r2, [r3, #85]
 2171 01e0 07F10C03 		add	r3, r7, #12
 2172 01e4 814A     		ldr	r2, .L134+32
 2173 01e6 9A65     		str	r2, [r3, #88]
 2174 01e8 07F10C03 		add	r3, r7, #12
 2175 01ec 0522     		movs	r2, #5
 2176 01ee 83F85C20 		strb	r2, [r3, #92]
 2177 01f2 07F10C03 		add	r3, r7, #12
 2178 01f6 5022     		movs	r2, #80
 2179 01f8 83F85D20 		strb	r2, [r3, #93]
 2180 01fc 07F10C03 		add	r3, r7, #12
 2181 0200 0022     		movs	r2, #0
 2182 0202 83F85E20 		strb	r2, [r3, #94]
 2183 0206 07F10C03 		add	r3, r7, #12
 2184 020a 0122     		movs	r2, #1
 2185 020c 83F85F20 		strb	r2, [r3, #95]
 537:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , 
 2186              		.loc 1 537 0
 2187 0210 D7F8C031 		ldr	r3, [r7, #448]
 2188 0214 03F14102 		add	r2, r3, #65
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2189              		.loc 1 524 0
 2190 0218 07F10C03 		add	r3, r7, #12
 2191 021c 1A66     		str	r2, [r3, #96]
 2192 021e 07F10C03 		add	r3, r7, #12
 2193 0222 0222     		movs	r2, #2
 2194 0224 83F86420 		strb	r2, [r3, #100]
 2195 0228 07F10C03 		add	r3, r7, #12
 2196 022c 0122     		movs	r2, #1
 2197 022e 83F86520 		strb	r2, [r3, #101]
 2198 0232 07F10C03 		add	r3, r7, #12
 2199 0236 6E4A     		ldr	r2, .L134+36
 2200 0238 9A66     		str	r2, [r3, #104]
 2201 023a 07F10C03 		add	r3, r7, #12
 2202 023e 0022     		movs	r2, #0
 2203 0240 83F86C20 		strb	r2, [r3, #108]
 2204 0244 07F10C03 		add	r3, r7, #12
 2205 0248 5022     		movs	r2, #80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 65


 2206 024a 83F86D20 		strb	r2, [r3, #109]
 2207 024e 07F10C03 		add	r3, r7, #12
 2208 0252 0022     		movs	r2, #0
 2209 0254 83F86E20 		strb	r2, [r3, #110]
 2210 0258 07F10C03 		add	r3, r7, #12
 2211 025c 0122     		movs	r2, #1
 2212 025e 83F86F20 		strb	r2, [r3, #111]
 538:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , 
 2213              		.loc 1 538 0
 2214 0262 D7F8C031 		ldr	r3, [r7, #448]
 2215 0266 03F12902 		add	r2, r3, #41
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2216              		.loc 1 524 0
 2217 026a 07F10C03 		add	r3, r7, #12
 2218 026e 1A67     		str	r2, [r3, #112]
 2219 0270 07F10C03 		add	r3, r7, #12
 2220 0274 0222     		movs	r2, #2
 2221 0276 83F87420 		strb	r2, [r3, #116]
 2222 027a 07F10C03 		add	r3, r7, #12
 2223 027e 0122     		movs	r2, #1
 2224 0280 83F87520 		strb	r2, [r3, #117]
 2225 0284 07F10C03 		add	r3, r7, #12
 2226 0288 5A4A     		ldr	r2, .L134+40
 2227 028a 9A67     		str	r2, [r3, #120]
 2228 028c 07F10C03 		add	r3, r7, #12
 2229 0290 0022     		movs	r2, #0
 2230 0292 83F87C20 		strb	r2, [r3, #124]
 2231 0296 07F10C03 		add	r3, r7, #12
 2232 029a 5022     		movs	r2, #80
 2233 029c 83F87D20 		strb	r2, [r3, #125]
 2234 02a0 07F10C03 		add	r3, r7, #12
 2235 02a4 0022     		movs	r2, #0
 2236 02a6 83F87E20 		strb	r2, [r3, #126]
 2237 02aa 07F10C03 		add	r3, r7, #12
 2238 02ae 0122     		movs	r2, #1
 2239 02b0 83F87F20 		strb	r2, [r3, #127]
 539:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , 
 2240              		.loc 1 539 0
 2241 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2242 02b8 03F12802 		add	r2, r3, #40
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2243              		.loc 1 524 0
 2244 02bc 07F10C03 		add	r3, r7, #12
 2245 02c0 C3F88020 		str	r2, [r3, #128]
 2246 02c4 07F10C03 		add	r3, r7, #12
 2247 02c8 0022     		movs	r2, #0
 2248 02ca 83F88420 		strb	r2, [r3, #132]
 2249 02ce 07F10C03 		add	r3, r7, #12
 2250 02d2 0122     		movs	r2, #1
 2251 02d4 83F88520 		strb	r2, [r3, #133]
 2252 02d8 07F10C03 		add	r3, r7, #12
 2253 02dc 464A     		ldr	r2, .L134+44
 2254 02de C3F88820 		str	r2, [r3, #136]
 2255 02e2 07F10C03 		add	r3, r7, #12
 2256 02e6 0122     		movs	r2, #1
 2257 02e8 83F88C20 		strb	r2, [r3, #140]
 2258 02ec 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 66


 2259 02f0 5022     		movs	r2, #80
 2260 02f2 83F88D20 		strb	r2, [r3, #141]
 2261 02f6 07F10C03 		add	r3, r7, #12
 2262 02fa 0322     		movs	r2, #3
 2263 02fc 83F88E20 		strb	r2, [r3, #142]
 2264 0300 07F10C03 		add	r3, r7, #12
 2265 0304 0122     		movs	r2, #1
 2266 0306 83F88F20 		strb	r2, [r3, #143]
 540:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , 
 2267              		.loc 1 540 0
 2268 030a D7F8C031 		ldr	r3, [r7, #448]
 2269 030e 03F12002 		add	r2, r3, #32
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2270              		.loc 1 524 0
 2271 0312 07F10C03 		add	r3, r7, #12
 2272 0316 C3F89020 		str	r2, [r3, #144]
 2273 031a 07F10C03 		add	r3, r7, #12
 2274 031e 0522     		movs	r2, #5
 2275 0320 83F89420 		strb	r2, [r3, #148]
 2276 0324 07F10C03 		add	r3, r7, #12
 2277 0328 0222     		movs	r2, #2
 2278 032a 83F89520 		strb	r2, [r3, #149]
 2279 032e 07F10C03 		add	r3, r7, #12
 2280 0332 324A     		ldr	r2, .L134+48
 2281 0334 C3F89820 		str	r2, [r3, #152]
 2282 0338 07F10C03 		add	r3, r7, #12
 2283 033c 0022     		movs	r2, #0
 2284 033e 83F89C20 		strb	r2, [r3, #156]
 2285 0342 07F10C03 		add	r3, r7, #12
 2286 0346 5022     		movs	r2, #80
 2287 0348 83F89D20 		strb	r2, [r3, #157]
 2288 034c 07F10C03 		add	r3, r7, #12
 2289 0350 0522     		movs	r2, #5
 2290 0352 83F89E20 		strb	r2, [r3, #158]
 2291 0356 07F10C03 		add	r3, r7, #12
 2292 035a 0122     		movs	r2, #1
 2293 035c 83F89F20 		strb	r2, [r3, #159]
 541:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , 
 2294              		.loc 1 541 0
 2295 0360 D7F8C031 		ldr	r3, [r7, #448]
 2296 0364 03F15C02 		add	r2, r3, #92
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2297              		.loc 1 524 0
 2298 0368 07F10C03 		add	r3, r7, #12
 2299 036c C3F8A020 		str	r2, [r3, #160]
 2300 0370 07F10C03 		add	r3, r7, #12
 2301 0374 0022     		movs	r2, #0
 2302 0376 83F8A420 		strb	r2, [r3, #164]
 2303 037a 07F10C03 		add	r3, r7, #12
 2304 037e 0122     		movs	r2, #1
 2305 0380 83F8A520 		strb	r2, [r3, #165]
 2306 0384 07F10C03 		add	r3, r7, #12
 2307 0388 1D4A     		ldr	r2, .L134+52
 2308 038a C3F8A820 		str	r2, [r3, #168]
 2309 038e 07F10C03 		add	r3, r7, #12
 2310 0392 0522     		movs	r2, #5
 2311 0394 83F8AC20 		strb	r2, [r3, #172]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 67


 2312 0398 07F10C03 		add	r3, r7, #12
 2313 039c 5022     		movs	r2, #80
 2314 039e 83F8AD20 		strb	r2, [r3, #173]
 2315 03a2 07F10C03 		add	r3, r7, #12
 2316 03a6 0022     		movs	r2, #0
 2317 03a8 83F8AE20 		strb	r2, [r3, #174]
 2318 03ac 07F10C03 		add	r3, r7, #12
 2319 03b0 0122     		movs	r2, #1
 2320 03b2 83F8AF20 		strb	r2, [r3, #175]
 542:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , 
 2321              		.loc 1 542 0
 2322 03b6 D7F8C031 		ldr	r3, [r7, #448]
 2323 03ba 03F15D02 		add	r2, r3, #93
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2324              		.loc 1 524 0
 2325 03be 07F10C03 		add	r3, r7, #12
 2326 03c2 C3F8B020 		str	r2, [r3, #176]
 2327 03c6 07F10C03 		add	r3, r7, #12
 2328 03ca 1BE0     		b	.L135
 2329              	.L136:
 2330              		.align	2
 2331              	.L134:
 2332 03cc 00000000 		.word	c_mem
 2333 03d0 00000000 		.word	g_mem
 2334 03d4 F4010000 		.word	.LC18
 2335 03d8 2C000000 		.word	.LC19
 2336 03dc 38000000 		.word	.LC20
 2337 03e0 48000000 		.word	.LC21
 2338 03e4 58000000 		.word	.LC22
 2339 03e8 68000000 		.word	.LC23
 2340 03ec 78000000 		.word	.LC24
 2341 03f0 88000000 		.word	.LC25
 2342 03f4 94000000 		.word	.LC26
 2343 03f8 A8000000 		.word	.LC27
 2344 03fc B4000000 		.word	.LC28
 2345 0400 CC000000 		.word	.LC29
 2346              	.L135:
 2347 0404 0022     		movs	r2, #0
 2348 0406 83F8B420 		strb	r2, [r3, #180]
 2349 040a 07F10C03 		add	r3, r7, #12
 2350 040e 0122     		movs	r2, #1
 2351 0410 83F8B520 		strb	r2, [r3, #181]
 2352 0414 07F10C03 		add	r3, r7, #12
 2353 0418 C04A     		ldr	r2, .L137
 2354 041a C3F8B820 		str	r2, [r3, #184]
 2355 041e 07F10C03 		add	r3, r7, #12
 2356 0422 0522     		movs	r2, #5
 2357 0424 83F8BC20 		strb	r2, [r3, #188]
 2358 0428 07F10C03 		add	r3, r7, #12
 2359 042c 5022     		movs	r2, #80
 2360 042e 83F8BD20 		strb	r2, [r3, #189]
 2361 0432 07F10C03 		add	r3, r7, #12
 2362 0436 0022     		movs	r2, #0
 2363 0438 83F8BE20 		strb	r2, [r3, #190]
 2364 043c 07F10C03 		add	r3, r7, #12
 2365 0440 0122     		movs	r2, #1
 2366 0442 83F8BF20 		strb	r2, [r3, #191]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 68


 543:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , 
 2367              		.loc 1 543 0
 2368 0446 D7F8C031 		ldr	r3, [r7, #448]
 2369 044a 03F15002 		add	r2, r3, #80
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2370              		.loc 1 524 0
 2371 044e 07F10C03 		add	r3, r7, #12
 2372 0452 C3F8C020 		str	r2, [r3, #192]
 2373 0456 07F10C03 		add	r3, r7, #12
 2374 045a 0522     		movs	r2, #5
 2375 045c 83F8C420 		strb	r2, [r3, #196]
 2376 0460 07F10C03 		add	r3, r7, #12
 2377 0464 0122     		movs	r2, #1
 2378 0466 83F8C520 		strb	r2, [r3, #197]
 2379 046a 07F10C03 		add	r3, r7, #12
 2380 046e AC4A     		ldr	r2, .L137+4
 2381 0470 C3F8C820 		str	r2, [r3, #200]
 2382 0474 07F10C03 		add	r3, r7, #12
 2383 0478 0022     		movs	r2, #0
 2384 047a 83F8CC20 		strb	r2, [r3, #204]
 2385 047e 07F10C03 		add	r3, r7, #12
 2386 0482 5022     		movs	r2, #80
 2387 0484 83F8CD20 		strb	r2, [r3, #205]
 2388 0488 07F10C03 		add	r3, r7, #12
 2389 048c 0022     		movs	r2, #0
 2390 048e 83F8CE20 		strb	r2, [r3, #206]
 2391 0492 07F10C03 		add	r3, r7, #12
 2392 0496 0122     		movs	r2, #1
 2393 0498 83F8CF20 		strb	r2, [r3, #207]
 544:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , 
 2394              		.loc 1 544 0
 2395 049c D7F8C031 		ldr	r3, [r7, #448]
 2396 04a0 03F15402 		add	r2, r3, #84
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2397              		.loc 1 524 0
 2398 04a4 07F10C03 		add	r3, r7, #12
 2399 04a8 C3F8D020 		str	r2, [r3, #208]
 2400 04ac 07F10C03 		add	r3, r7, #12
 2401 04b0 0722     		movs	r2, #7
 2402 04b2 83F8D420 		strb	r2, [r3, #212]
 2403 04b6 07F10C03 		add	r3, r7, #12
 2404 04ba 0122     		movs	r2, #1
 2405 04bc 83F8D520 		strb	r2, [r3, #213]
 2406 04c0 07F10C03 		add	r3, r7, #12
 2407 04c4 974A     		ldr	r2, .L137+8
 2408 04c6 C3F8D820 		str	r2, [r3, #216]
 2409 04ca 07F10C03 		add	r3, r7, #12
 2410 04ce 0022     		movs	r2, #0
 2411 04d0 83F8DC20 		strb	r2, [r3, #220]
 2412 04d4 07F10C03 		add	r3, r7, #12
 2413 04d8 5022     		movs	r2, #80
 2414 04da 83F8DD20 		strb	r2, [r3, #221]
 2415 04de 07F10C03 		add	r3, r7, #12
 2416 04e2 0022     		movs	r2, #0
 2417 04e4 83F8DE20 		strb	r2, [r3, #222]
 2418 04e8 07F10C03 		add	r3, r7, #12
 2419 04ec 0122     		movs	r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 69


 2420 04ee 83F8DF20 		strb	r2, [r3, #223]
 545:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , 
 2421              		.loc 1 545 0
 2422 04f2 D7F8C031 		ldr	r3, [r7, #448]
 2423 04f6 03F15802 		add	r2, r3, #88
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2424              		.loc 1 524 0
 2425 04fa 07F10C03 		add	r3, r7, #12
 2426 04fe C3F8E020 		str	r2, [r3, #224]
 2427 0502 07F10C03 		add	r3, r7, #12
 2428 0506 0722     		movs	r2, #7
 2429 0508 83F8E420 		strb	r2, [r3, #228]
 2430 050c 07F10C03 		add	r3, r7, #12
 2431 0510 0122     		movs	r2, #1
 2432 0512 83F8E520 		strb	r2, [r3, #229]
 2433 0516 07F10C03 		add	r3, r7, #12
 2434 051a 834A     		ldr	r2, .L137+12
 2435 051c C3F8E820 		str	r2, [r3, #232]
 2436 0520 07F10C03 		add	r3, r7, #12
 2437 0524 0022     		movs	r2, #0
 2438 0526 83F8EC20 		strb	r2, [r3, #236]
 2439 052a 07F10C03 		add	r3, r7, #12
 2440 052e 5022     		movs	r2, #80
 2441 0530 83F8ED20 		strb	r2, [r3, #237]
 2442 0534 07F10C03 		add	r3, r7, #12
 2443 0538 0022     		movs	r2, #0
 2444 053a 83F8EE20 		strb	r2, [r3, #238]
 2445 053e 07F10C03 		add	r3, r7, #12
 2446 0542 0122     		movs	r2, #1
 2447 0544 83F8EF20 		strb	r2, [r3, #239]
 546:..\src/command_processing.c ****     };
 547:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);  
 2448              		.loc 1 547 0
 2449 0548 0F23     		movs	r3, #15
 2450 054a 87F8BE31 		strb	r3, [r7, #446]
 548:..\src/command_processing.c ****     
 549:..\src/command_processing.c **** 
 550:..\src/command_processing.c ****     if (!index) {
 2451              		.loc 1 550 0
 2452 054e BB1D     		adds	r3, r7, #6
 2453 0550 1B88     		ldrh	r3, [r3]
 2454 0552 002B     		cmp	r3, #0
 2455 0554 0ED1     		bne	.L120
 551:..\src/command_processing.c ****         // Get parameters list with relative types
 552:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2456              		.loc 1 552 0
 2457 0556 07F58674 		add	r4, r7, #268
 2458 055a 07F10C02 		add	r2, r7, #12
 2459 055e 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2460 0562 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2461 0566 7B1D     		adds	r3, r7, #5
 2462 0568 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2463 056a 0093     		str	r3, [sp]
 2464 056c 2346     		mov	r3, r4
 2465 056e FFF7FEFF 		bl	get_param_list
 553:..\src/command_processing.c ****     }   
 554:..\src/command_processing.c ****     else if  (index == 300) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 70


 555:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 556:..\src/command_processing.c ****         qbadminp_string(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST);
 557:..\src/command_processing.c ****     }
 558:..\src/command_processing.c **** 
 559:..\src/command_processing.c ****     else {
 560:..\src/command_processing.c ****          // Set specific parameter        
 561:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 562:..\src/command_processing.c ****         
 563:..\src/command_processing.c ****         // Find size of data
 564:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 565:..\src/command_processing.c ****    
 566:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 567:..\src/command_processing.c ****             // Use default specifications for param setting
 568:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 569:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 570:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 571:..\src/command_processing.c ****                 }
 572:..\src/command_processing.c ****             } 
 573:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 574:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 575:..\src/command_processing.c ****         }
 576:..\src/command_processing.c ****         
 577:..\src/command_processing.c ****         else {  
 578:..\src/command_processing.c ****             // Use custom specifications for param setting
 579:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 580:..\src/command_processing.c ****         }
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****        
 583:..\src/command_processing.c ****         // Perform chip reset if needed
 584:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 585:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 586:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 587:..\src/command_processing.c ****             }   
 588:..\src/command_processing.c ****         }
 589:..\src/command_processing.c ****     }
 590:..\src/command_processing.c **** } 
 2466              		.loc 1 590 0
 2467 0572 CEE0     		b	.L133
 2468              	.L120:
 554:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 2469              		.loc 1 554 0
 2470 0574 BB1D     		adds	r3, r7, #6
 2471 0576 1B88     		ldrh	r3, [r3]
 2472 0578 B3F5967F 		cmp	r3, #300
 2473 057c 0AD1     		bne	.L122
 556:..\src/command_processing.c ****     }
 2474              		.loc 1 556 0
 2475 057e 07F58673 		add	r3, r7, #268
 2476 0582 07F10C02 		add	r2, r7, #12
 2477 0586 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2478 058a 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2479 058e FFF7FEFF 		bl	qbadminp_string
 2480              		.loc 1 590 0
 2481 0592 BEE0     		b	.L133
 2482              	.L122:
 2483              	.LBB24:
 561:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 71


 2484              		.loc 1 561 0
 2485 0594 BB1D     		adds	r3, r7, #6
 2486 0596 1B88     		ldrh	r3, [r3]	@ movhi
 2487 0598 DBB2     		uxtb	r3, r3
 2488 059a 013B     		subs	r3, r3, #1
 2489 059c 87F8BD31 		strb	r3, [r7, #445]
 564:..\src/command_processing.c ****    
 2490              		.loc 1 564 0
 2491 05a0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2492 05a4 07F10C02 		add	r2, r7, #12
 2493 05a8 1B01     		lsls	r3, r3, #4
 2494 05aa 1344     		add	r3, r3, r2
 2495 05ac 0433     		adds	r3, r3, #4
 2496 05ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2497 05b0 1846     		mov	r0, r3
 2498 05b2 FFF7FEFF 		bl	num_of_bytes
 2499 05b6 0346     		mov	r3, r0
 2500 05b8 87F8BC31 		strb	r3, [r7, #444]
 566:..\src/command_processing.c ****             // Use default specifications for param setting
 2501              		.loc 1 566 0
 2502 05bc 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2503 05c0 07F10C02 		add	r2, r7, #12
 2504 05c4 1B01     		lsls	r3, r3, #4
 2505 05c6 1344     		add	r3, r3, r2
 2506 05c8 0E33     		adds	r3, r3, #14
 2507 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2508 05cc 002B     		cmp	r3, #0
 2509 05ce 5BD1     		bne	.L123
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2510              		.loc 1 568 0
 2511 05d0 0023     		movs	r3, #0
 2512 05d2 87F8C731 		strb	r3, [r7, #455]
 2513 05d6 2FE0     		b	.L124
 2514              	.L127:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2515              		.loc 1 569 0
 2516 05d8 0023     		movs	r3, #0
 2517 05da 87F8C631 		strb	r3, [r7, #454]
 2518 05de 1EE0     		b	.L125
 2519              	.L126:
 570:..\src/command_processing.c ****                 }
 2520              		.loc 1 570 0 discriminator 3
 2521 05e0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2522 05e4 07F10C02 		add	r2, r7, #12
 2523 05e8 1B01     		lsls	r3, r3, #4
 2524 05ea 1344     		add	r3, r3, r2
 2525 05ec 1A68     		ldr	r2, [r3]
 2526 05ee 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2527 05f2 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2528 05f6 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2529 05fa 411A     		subs	r1, r0, r1
 2530 05fc 0B44     		add	r3, r3, r1
 2531 05fe 013B     		subs	r3, r3, #1
 2532 0600 1344     		add	r3, r3, r2
 2533 0602 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2534 0606 D11C     		adds	r1, r2, #3
 2535 0608 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 72


 2536 060c 0A44     		add	r2, r2, r1
 2537 060e 4749     		ldr	r1, .L137+16
 2538 0610 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2539 0612 1A70     		strb	r2, [r3]
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2540              		.loc 1 569 0 discriminator 3
 2541 0614 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2542 0618 0133     		adds	r3, r3, #1
 2543 061a 87F8C631 		strb	r3, [r7, #454]
 2544              	.L125:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2545              		.loc 1 569 0 is_stmt 0 discriminator 1
 2546 061e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2547 0622 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2548 0626 9A42     		cmp	r2, r3
 2549 0628 DAD3     		bcc	.L126
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 568 0 is_stmt 1 discriminator 2
 2551 062a 97F8C721 		ldrb	r2, [r7, #455]
 2552 062e 97F8BC31 		ldrb	r3, [r7, #444]
 2553 0632 1344     		add	r3, r3, r2
 2554 0634 87F8C731 		strb	r3, [r7, #455]
 2555              	.L124:
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2556              		.loc 1 568 0 is_stmt 0 discriminator 1
 2557 0638 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2558 063c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2559 0640 07F10C01 		add	r1, r7, #12
 2560 0644 1B01     		lsls	r3, r3, #4
 2561 0646 0B44     		add	r3, r3, r1
 2562 0648 0533     		adds	r3, r3, #5
 2563 064a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 064c 1946     		mov	r1, r3
 2565 064e 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2566 0652 03FB01F3 		mul	r3, r3, r1
 2567 0656 9A42     		cmp	r2, r3
 2568 0658 BEDB     		blt	.L127
 573:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2569              		.loc 1 573 0 is_stmt 1
 2570 065a 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2571 065e 07F10C02 		add	r2, r7, #12
 2572 0662 1B01     		lsls	r3, r3, #4
 2573 0664 1344     		add	r3, r3, r2
 2574 0666 0433     		adds	r3, r3, #4
 2575 0668 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2576 066a 092B     		cmp	r3, #9
 2577 066c 15D1     		bne	.L129
 574:..\src/command_processing.c ****         }
 2578              		.loc 1 574 0
 2579 066e 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2580 0672 07F10C02 		add	r2, r7, #12
 2581 0676 1B01     		lsls	r3, r3, #4
 2582 0678 1344     		add	r3, r3, r2
 2583 067a 1A68     		ldr	r2, [r3]
 2584 067c 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2585 0680 1344     		add	r3, r3, r2
 2586 0682 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 73


 2587 0684 1A70     		strb	r2, [r3]
 2588 0686 08E0     		b	.L129
 2589              	.L123:
 579:..\src/command_processing.c ****         }
 2590              		.loc 1 579 0
 2591 0688 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2592 068c 9BB2     		uxth	r3, r3
 2593 068e 07F10C02 		add	r2, r7, #12
 2594 0692 1146     		mov	r1, r2
 2595 0694 1846     		mov	r0, r3
 2596 0696 FFF7FEFF 		bl	set_custom_param
 2597              	.L129:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2598              		.loc 1 584 0
 2599 069a 0023     		movs	r3, #0
 2600 069c 87F8C731 		strb	r3, [r7, #455]
 2601 06a0 31E0     		b	.L130
 2602              	.L132:
 585:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2603              		.loc 1 585 0
 2604 06a2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2605 06a6 2C22     		movs	r2, #44
 2606 06a8 02FB03F3 		mul	r3, r2, r3
 2607 06ac 07F5E472 		add	r2, r7, #456
 2608 06b0 1344     		add	r3, r3, r2
 2609 06b2 BC3B     		subs	r3, r3, #188
 2610 06b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2611 06b6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2612 06ba 07F10C01 		add	r1, r7, #12
 2613 06be 1B01     		lsls	r3, r3, #4
 2614 06c0 0B44     		add	r3, r3, r1
 2615 06c2 0C33     		adds	r3, r3, #12
 2616 06c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 06c6 9A42     		cmp	r2, r3
 2618 06c8 0CBF     		ite	eq
 2619 06ca 0123     		moveq	r3, #1
 2620 06cc 0023     		movne	r3, #0
 2621 06ce DAB2     		uxtb	r2, r3
 2622 06d0 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2623 06d4 2C21     		movs	r1, #44
 2624 06d6 01FB03F3 		mul	r3, r1, r3
 2625 06da 07F5E471 		add	r1, r7, #456
 2626 06de 0B44     		add	r3, r3, r1
 2627 06e0 BB3B     		subs	r3, r3, #187
 2628 06e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 06e4 012B     		cmp	r3, #1
 2630 06e6 0CBF     		ite	eq
 2631 06e8 0123     		moveq	r3, #1
 2632 06ea 0023     		movne	r3, #0
 2633 06ec DBB2     		uxtb	r3, r3
 2634 06ee 1340     		ands	r3, r3, r2
 2635 06f0 DBB2     		uxtb	r3, r3
 2636 06f2 002B     		cmp	r3, #0
 2637 06f4 02D0     		beq	.L131
 586:..\src/command_processing.c ****             }   
 2638              		.loc 1 586 0
 2639 06f6 0E4B     		ldr	r3, .L137+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 74


 2640 06f8 0122     		movs	r2, #1
 2641 06fa 1A70     		strb	r2, [r3]
 2642              	.L131:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2643              		.loc 1 584 0 discriminator 2
 2644 06fc 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 0700 0133     		adds	r3, r3, #1
 2646 0702 87F8C731 		strb	r3, [r7, #455]
 2647              	.L130:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2648              		.loc 1 584 0 is_stmt 0 discriminator 1
 2649 0706 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2650 070a 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2651 070e 9A42     		cmp	r2, r3
 2652 0710 C7D3     		bcc	.L132
 2653              	.L133:
 2654              	.LBE24:
 2655              		.loc 1 590 0 is_stmt 1
 2656 0712 00BF     		nop
 2657 0714 07F5E677 		add	r7, r7, #460
 2658              		.cfi_def_cfa_offset 12
 2659 0718 BD46     		mov	sp, r7
 2660              		.cfi_def_cfa_register 13
 2661              		@ sp needed
 2662 071a 90BD     		pop	{r4, r7, pc}
 2663              	.L138:
 2664              		.align	2
 2665              	.L137:
 2666 071c E4000000 		.word	.LC30
 2667 0720 FC000000 		.word	.LC31
 2668 0724 1C010000 		.word	.LC32
 2669 0728 40010000 		.word	.LC33
 2670 072c 00000000 		.word	g_rx
 2671 0730 00000000 		.word	reset_PSoC_flag
 2672              		.cfi_endproc
 2673              	.LFE69:
 2674              		.size	manage_param_list, .-manage_param_list
 2675              		.section	.text.set_custom_param,"ax",%progbits
 2676              		.align	2
 2677              		.global	set_custom_param
 2678              		.thumb
 2679              		.thumb_func
 2680              		.type	set_custom_param, %function
 2681              	set_custom_param:
 2682              	.LFB70:
 591:..\src/command_processing.c **** 
 592:..\src/command_processing.c **** 
 593:..\src/command_processing.c **** //==============================================================================
 594:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 595:..\src/command_processing.c **** //==============================================================================
 596:..\src/command_processing.c **** 
 597:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2683              		.loc 1 597 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 16
 2686              		@ frame_needed = 1, uses_anonymous_args = 0
 2687 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 75


 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 7, -8
 2690              		.cfi_offset 14, -4
 2691 0002 84B0     		sub	sp, sp, #16
 2692              		.cfi_def_cfa_offset 24
 2693 0004 00AF     		add	r7, sp, #0
 2694              		.cfi_def_cfa_register 7
 2695 0006 0346     		mov	r3, r0
 2696 0008 3960     		str	r1, [r7]
 2697 000a FB80     		strh	r3, [r7, #6]	@ movhi
 598:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2698              		.loc 1 598 0
 2699 000c FB88     		ldrh	r3, [r7, #6]
 2700 000e 1B01     		lsls	r3, r3, #4
 2701 0010 3A68     		ldr	r2, [r7]
 2702 0012 1344     		add	r3, r3, r2
 2703 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2704 0016 1846     		mov	r0, r3
 2705 0018 FFF7FEFF 		bl	num_of_bytes
 2706 001c 0346     		mov	r3, r0
 2707 001e 7B73     		strb	r3, [r7, #13]
 599:..\src/command_processing.c **** 
 600:..\src/command_processing.c ****     uint8 CYDATA i, j;
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2708              		.loc 1 602 0
 2709 0020 FB88     		ldrh	r3, [r7, #6]
 2710 0022 1B01     		lsls	r3, r3, #4
 2711 0024 3A68     		ldr	r2, [r7]
 2712 0026 1344     		add	r3, r3, r2
 2713 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2714 002a 032B     		cmp	r3, #3
 2715 002c 02D0     		beq	.L141
 2716 002e 052B     		cmp	r3, #5
 2717 0030 06D0     		beq	.L142
 2718 0032 36E0     		b	.L149
 2719              	.L141:
 603:..\src/command_processing.c ****         
 604:..\src/command_processing.c ****             
 605:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 606:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2720              		.loc 1 606 0
 2721 0034 3D4B     		ldr	r3, .L151
 2722 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2723 0038 3D4B     		ldr	r3, .L151+4
 2724 003a 83F82820 		strb	r2, [r3, #40]
 607:..\src/command_processing.c ****             break;   
 2725              		.loc 1 607 0
 2726 003e 71E0     		b	.L143
 2727              	.L142:
 608:..\src/command_processing.c **** 
 609:..\src/command_processing.c ****         
 610:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 611:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2728              		.loc 1 611 0
 2729 0040 3A4B     		ldr	r3, .L151
 2730 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 76


 2731 0044 1A06     		lsls	r2, r3, #24
 2732 0046 394B     		ldr	r3, .L151
 2733 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2734 004a 1B04     		lsls	r3, r3, #16
 2735 004c 1A43     		orrs	r2, r2, r3
 2736 004e 374B     		ldr	r3, .L151
 2737 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2738 0052 1B02     		lsls	r3, r3, #8
 2739 0054 1343     		orrs	r3, r3, r2
 2740 0056 354A     		ldr	r2, .L151
 2741 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2742 005a 1343     		orrs	r3, r3, r2
 2743 005c 344A     		ldr	r2, .L151+4
 2744 005e 1362     		str	r3, [r2, #32]
 612:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2745              		.loc 1 612 0
 2746 0060 324B     		ldr	r3, .L151
 2747 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2748 0064 1A06     		lsls	r2, r3, #24
 2749 0066 314B     		ldr	r3, .L151
 2750 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2751 006a 1B04     		lsls	r3, r3, #16
 2752 006c 1A43     		orrs	r2, r2, r3
 2753 006e 2F4B     		ldr	r3, .L151
 2754 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2755 0072 1B02     		lsls	r3, r3, #8
 2756 0074 1343     		orrs	r3, r3, r2
 2757 0076 2D4A     		ldr	r2, .L151
 2758 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2759 007a 1343     		orrs	r3, r3, r2
 2760 007c 2C4A     		ldr	r2, .L151+4
 2761 007e 5362     		str	r3, [r2, #36]
 613:..\src/command_processing.c **** 
 614:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2762              		.loc 1 614 0
 2763 0080 2B4B     		ldr	r3, .L151+4
 2764 0082 1B6A     		ldr	r3, [r3, #32]
 2765 0084 2A4A     		ldr	r2, .L151+4
 2766 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2767 008a 9340     		lsls	r3, r3, r2
 2768 008c 284A     		ldr	r2, .L151+4
 2769 008e 1362     		str	r3, [r2, #32]
 615:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2770              		.loc 1 615 0
 2771 0090 274B     		ldr	r3, .L151+4
 2772 0092 5B6A     		ldr	r3, [r3, #36]
 2773 0094 264A     		ldr	r2, .L151+4
 2774 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2775 009a 9340     		lsls	r3, r3, r2
 2776 009c 244A     		ldr	r2, .L151+4
 2777 009e 5362     		str	r3, [r2, #36]
 616:..\src/command_processing.c ****             break;            
 2778              		.loc 1 616 0
 2779 00a0 40E0     		b	.L143
 2780              	.L149:
 617:..\src/command_processing.c ****             default:
 618:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 77


 619:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2781              		.loc 1 619 0
 2782 00a2 0023     		movs	r3, #0
 2783 00a4 FB73     		strb	r3, [r7, #15]
 2784 00a6 20E0     		b	.L144
 2785              	.L147:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2786              		.loc 1 620 0
 2787 00a8 0023     		movs	r3, #0
 2788 00aa BB73     		strb	r3, [r7, #14]
 2789 00ac 15E0     		b	.L145
 2790              	.L146:
 621:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2791              		.loc 1 621 0 discriminator 3
 2792 00ae FB88     		ldrh	r3, [r7, #6]
 2793 00b0 1B01     		lsls	r3, r3, #4
 2794 00b2 3A68     		ldr	r2, [r7]
 2795 00b4 1344     		add	r3, r3, r2
 2796 00b6 1A68     		ldr	r2, [r3]
 2797 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2798 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2799 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2800 00be 411A     		subs	r1, r0, r1
 2801 00c0 0B44     		add	r3, r3, r1
 2802 00c2 013B     		subs	r3, r3, #1
 2803 00c4 1344     		add	r3, r3, r2
 2804 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2805 00c8 D11C     		adds	r1, r2, #3
 2806 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2807 00cc 0A44     		add	r2, r2, r1
 2808 00ce 1749     		ldr	r1, .L151
 2809 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2810 00d2 1A70     		strb	r2, [r3]
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2811              		.loc 1 620 0 discriminator 3
 2812 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2813 00d6 0133     		adds	r3, r3, #1
 2814 00d8 BB73     		strb	r3, [r7, #14]
 2815              	.L145:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2816              		.loc 1 620 0 is_stmt 0 discriminator 1
 2817 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2818 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2819 00de 9A42     		cmp	r2, r3
 2820 00e0 E5D3     		bcc	.L146
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2821              		.loc 1 619 0 is_stmt 1 discriminator 2
 2822 00e2 FA7B     		ldrb	r2, [r7, #15]
 2823 00e4 7B7B     		ldrb	r3, [r7, #13]
 2824 00e6 1344     		add	r3, r3, r2
 2825 00e8 FB73     		strb	r3, [r7, #15]
 2826              	.L144:
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2827              		.loc 1 619 0 is_stmt 0 discriminator 1
 2828 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2829 00ec FB88     		ldrh	r3, [r7, #6]
 2830 00ee 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 78


 2831 00f0 3968     		ldr	r1, [r7]
 2832 00f2 0B44     		add	r3, r3, r1
 2833 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2834 00f6 1946     		mov	r1, r3
 2835 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2836 00fa 03FB01F3 		mul	r3, r3, r1
 2837 00fe 9A42     		cmp	r2, r3
 2838 0100 D2DB     		blt	.L147
 622:..\src/command_processing.c ****                     }
 623:..\src/command_processing.c ****                 } 
 624:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2839              		.loc 1 624 0 is_stmt 1
 2840 0102 FB88     		ldrh	r3, [r7, #6]
 2841 0104 1B01     		lsls	r3, r3, #4
 2842 0106 3A68     		ldr	r2, [r7]
 2843 0108 1344     		add	r3, r3, r2
 2844 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2845 010c 092B     		cmp	r3, #9
 2846 010e 08D1     		bne	.L150
 625:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2847              		.loc 1 625 0
 2848 0110 FB88     		ldrh	r3, [r7, #6]
 2849 0112 1B01     		lsls	r3, r3, #4
 2850 0114 3A68     		ldr	r2, [r7]
 2851 0116 1344     		add	r3, r3, r2
 2852 0118 1A68     		ldr	r2, [r3]
 2853 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2854 011c 1344     		add	r3, r3, r2
 2855 011e 0022     		movs	r2, #0
 2856 0120 1A70     		strb	r2, [r3]
 2857              	.L150:
 626:..\src/command_processing.c ****             break;
 2858              		.loc 1 626 0
 2859 0122 00BF     		nop
 2860              	.L143:
 627:..\src/command_processing.c ****     }
 628:..\src/command_processing.c **** 
 629:..\src/command_processing.c ****       
 630:..\src/command_processing.c **** }
 2861              		.loc 1 630 0
 2862 0124 00BF     		nop
 2863 0126 1037     		adds	r7, r7, #16
 2864              		.cfi_def_cfa_offset 8
 2865 0128 BD46     		mov	sp, r7
 2866              		.cfi_def_cfa_register 13
 2867              		@ sp needed
 2868 012a 80BD     		pop	{r7, pc}
 2869              	.L152:
 2870              		.align	2
 2871              	.L151:
 2872 012c 00000000 		.word	g_rx
 2873 0130 00000000 		.word	g_mem
 2874              		.cfi_endproc
 2875              	.LFE70:
 2876              		.size	set_custom_param, .-set_custom_param
 2877              		.section	.text.get_IMU_param_list,"ax",%progbits
 2878              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 79


 2879              		.global	get_IMU_param_list
 2880              		.thumb
 2881              		.thumb_func
 2882              		.type	get_IMU_param_list, %function
 2883              	get_IMU_param_list:
 2884              	.LFB71:
 631:..\src/command_processing.c **** 
 632:..\src/command_processing.c **** //==============================================================================
 633:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 634:..\src/command_processing.c **** //==============================================================================
 635:..\src/command_processing.c **** 
 636:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 637:..\src/command_processing.c **** {
 2885              		.loc 1 637 0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 8
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889              		@ link register save eliminated.
 2890 0000 80B4     		push	{r7}
 2891              		.cfi_def_cfa_offset 4
 2892              		.cfi_offset 7, -4
 2893 0002 83B0     		sub	sp, sp, #12
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              		.cfi_def_cfa_register 7
 2897 0006 0346     		mov	r3, r0
 2898 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 638:..\src/command_processing.c **** }
 2899              		.loc 1 638 0
 2900 000a 00BF     		nop
 2901 000c 0C37     		adds	r7, r7, #12
 2902              		.cfi_def_cfa_offset 4
 2903 000e BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 0010 80BC     		pop	{r7}
 2907              		.cfi_restore 7
 2908              		.cfi_def_cfa_offset 0
 2909 0012 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE71:
 2912              		.size	get_IMU_param_list, .-get_IMU_param_list
 2913              		.section	.text.setZeros,"ax",%progbits
 2914              		.align	2
 2915              		.global	setZeros
 2916              		.thumb
 2917              		.thumb_func
 2918              		.type	setZeros, %function
 2919              	setZeros:
 2920              	.LFB72:
 639:..\src/command_processing.c **** 
 640:..\src/command_processing.c **** //==============================================================================
 641:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 642:..\src/command_processing.c **** //==============================================================================
 643:..\src/command_processing.c **** 
 644:..\src/command_processing.c **** void setZeros()
 645:..\src/command_processing.c **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 80


 2921              		.loc 1 645 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 1, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926 0000 80B4     		push	{r7}
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 00AF     		add	r7, sp, #0
 2930              		.cfi_def_cfa_register 7
 646:..\src/command_processing.c **** }
 2931              		.loc 1 646 0
 2932 0004 00BF     		nop
 2933 0006 BD46     		mov	sp, r7
 2934              		.cfi_def_cfa_register 13
 2935              		@ sp needed
 2936 0008 80BC     		pop	{r7}
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 000a 7047     		bx	lr
 2940              		.cfi_endproc
 2941              	.LFE72:
 2942              		.size	setZeros, .-setZeros
 2943              		.section	.rodata
 2944              		.align	2
 2945              	.LC34:
 2946 0278 20256400 		.ascii	" %d\000"
 2947              		.align	2
 2948              	.LC35:
 2949 027c 20256C64 		.ascii	" %ld\000"
 2949      00
 2950              		.global	__aeabi_f2d
 2951 0281 000000   		.align	2
 2952              	.LC36:
 2953 0284 20256600 		.ascii	" %f\000"
 2954              		.section	.text.qbadminp_string,"ax",%progbits
 2955              		.align	2
 2956              		.global	qbadminp_string
 2957              		.thumb
 2958              		.thumb_func
 2959              		.type	qbadminp_string, %function
 2960              	qbadminp_string:
 2961              	.LFB73:
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c **** void  qbadminp_string ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], con
 2962              		.loc 1 648 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 2664
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 90B5     		push	{r4, r7, lr}
 2967              		.cfi_def_cfa_offset 12
 2968              		.cfi_offset 4, -12
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 ADF66C2D 		subw	sp, sp, #2668
 2972              		.cfi_def_cfa_offset 2680
 2973 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 81


 2974              		.cfi_def_cfa_register 7
 2975 0008 0446     		mov	r4, r0
 2976 000a 0846     		mov	r0, r1
 2977 000c 07F10801 		add	r1, r7, #8
 2978 0010 0A60     		str	r2, [r1]
 2979 0012 3A1D     		adds	r2, r7, #4
 2980 0014 1360     		str	r3, [r2]
 2981 0016 07F10F03 		add	r3, r7, #15
 2982 001a 2246     		mov	r2, r4
 2983 001c 1A70     		strb	r2, [r3]
 2984 001e 07F10E03 		add	r3, r7, #14
 2985 0022 0246     		mov	r2, r0
 2986 0024 1A70     		strb	r2, [r3]
 649:..\src/command_processing.c ****     strcpy(superstring, "");
 2987              		.loc 1 649 0
 2988 0026 AD4B     		ldr	r3, .L181
 2989 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2990 002a AD4B     		ldr	r3, .L181+4
 2991 002c 1A70     		strb	r2, [r3]
 650:..\src/command_processing.c ****     char info_string[2500] = "";
 2992              		.loc 1 650 0
 2993 002e 07F17803 		add	r3, r7, #120
 2994 0032 0022     		movs	r2, #0
 2995 0034 1A60     		str	r2, [r3]
 2996 0036 0433     		adds	r3, r3, #4
 2997 0038 4FF41C62 		mov	r2, #2496
 2998 003c 0021     		movs	r1, #0
 2999 003e 1846     		mov	r0, r3
 3000 0040 FFF7FEFF 		bl	memset
 651:..\src/command_processing.c ****     int i;
 652:..\src/command_processing.c ****     int idx;
 653:..\src/command_processing.c ****     int32 aux_int32;
 654:..\src/command_processing.c ****     uint32 aux_uint32;
 655:..\src/command_processing.c ****     float aux_float;
 656:..\src/command_processing.c ****     uint8 aux_uint8;
 657:..\src/command_processing.c ****     int8 aux_int8;
 658:..\src/command_processing.c ****     int16 aux_int16;
 659:..\src/command_processing.c ****     uint16 aux_uint16;
 660:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3001              		.loc 1 660 0
 3002 0044 A74B     		ldr	r3, .L181+8
 3003 0046 C7F85C3A 		str	r3, [r7, #2652]
 661:..\src/command_processing.c ****     
 662:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3004              		.loc 1 662 0
 3005 004a A64B     		ldr	r3, .L181+8
 3006 004c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3007 004e FA2B     		cmp	r3, #250
 3008 0050 00F0A581 		beq	.L179
 3009              	.LBB25:
 663:..\src/command_processing.c ****         uint8* m_addr;
 664:..\src/command_processing.c ****         uint8* m_tmp;
 665:..\src/command_processing.c ****         char str[100];
 666:..\src/command_processing.c ****         strcpy(info_string, "");
 3010              		.loc 1 666 0
 3011 0054 A14B     		ldr	r3, .L181
 3012 0056 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 82


 3013 0058 07F17803 		add	r3, r7, #120
 3014 005c 1A70     		strb	r2, [r3]
 667:..\src/command_processing.c ****         strcat(info_string, "\n");
 3015              		.loc 1 667 0
 3016 005e 07F17803 		add	r3, r7, #120
 3017 0062 1846     		mov	r0, r3
 3018 0064 FFF7FEFF 		bl	strlen
 3019 0068 0346     		mov	r3, r0
 3020 006a 1A46     		mov	r2, r3
 3021 006c 07F17803 		add	r3, r7, #120
 3022 0070 1344     		add	r3, r3, r2
 3023 0072 9D49     		ldr	r1, .L181+12
 3024 0074 1A46     		mov	r2, r3
 3025 0076 0B46     		mov	r3, r1
 3026 0078 1B88     		ldrh	r3, [r3]	@ unaligned
 3027 007a 1380     		strh	r3, [r2]	@ unaligned
 668:..\src/command_processing.c ****         
 669:..\src/command_processing.c ****         
 670:..\src/command_processing.c ****         for (idx = 0; idx < num_params; idx ++) {
 3028              		.loc 1 670 0
 3029 007c 0023     		movs	r3, #0
 3030 007e C7F8603A 		str	r3, [r7, #2656]
 3031 0082 7EE1     		b	.L157
 3032              	.L178:
 671:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3033              		.loc 1 671 0
 3034 0084 D7F8603A 		ldr	r3, [r7, #2656]
 3035 0088 1B01     		lsls	r3, r3, #4
 3036 008a 07F10802 		add	r2, r7, #8
 3037 008e 1268     		ldr	r2, [r2]
 3038 0090 1344     		add	r3, r3, r2
 3039 0092 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3040 0094 002B     		cmp	r3, #0
 3041 0096 00F06F81 		beq	.L158
 3042              	.LBB26:
 672:..\src/command_processing.c ****                 strcat(info_string, PARAM_LIST[idx].PARAM_STR );
 3043              		.loc 1 672 0
 3044 009a D7F8603A 		ldr	r3, [r7, #2656]
 3045 009e 1B01     		lsls	r3, r3, #4
 3046 00a0 07F10802 		add	r2, r7, #8
 3047 00a4 1268     		ldr	r2, [r2]
 3048 00a6 1344     		add	r3, r3, r2
 3049 00a8 9A68     		ldr	r2, [r3, #8]
 3050 00aa 07F17803 		add	r3, r7, #120
 3051 00ae 1146     		mov	r1, r2
 3052 00b0 1846     		mov	r0, r3
 3053 00b2 FFF7FEFF 		bl	strcat
 673:..\src/command_processing.c ****                 m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 3054              		.loc 1 673 0
 3055 00b6 D7F8603A 		ldr	r3, [r7, #2656]
 3056 00ba 1B01     		lsls	r3, r3, #4
 3057 00bc 07F10802 		add	r2, r7, #8
 3058 00c0 1268     		ldr	r2, [r2]
 3059 00c2 1344     		add	r3, r3, r2
 3060 00c4 1B68     		ldr	r3, [r3]
 3061 00c6 C7F8583A 		str	r3, [r7, #2648]
 674:..\src/command_processing.c ****                 uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 83


 3062              		.loc 1 674 0
 3063 00ca D7F8603A 		ldr	r3, [r7, #2656]
 3064 00ce 1B01     		lsls	r3, r3, #4
 3065 00d0 07F10802 		add	r2, r7, #8
 3066 00d4 1268     		ldr	r2, [r2]
 3067 00d6 1344     		add	r3, r3, r2
 3068 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3069 00da 1846     		mov	r0, r3
 3070 00dc FFF7FEFF 		bl	num_of_bytes
 3071 00e0 0346     		mov	r3, r0
 3072 00e2 87F8573A 		strb	r3, [r7, #2647]
 675:..\src/command_processing.c ****                 switch(PARAM_LIST[idx].custom){
 3073              		.loc 1 675 0
 3074 00e6 D7F8603A 		ldr	r3, [r7, #2656]
 3075 00ea 1B01     		lsls	r3, r3, #4
 3076 00ec 07F10802 		add	r2, r7, #8
 3077 00f0 1268     		ldr	r2, [r2]
 3078 00f2 1344     		add	r3, r3, r2
 3079 00f4 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3080 00f6 052B     		cmp	r3, #5
 3081 00f8 00F0FE80 		beq	.L160
 676:..\src/command_processing.c ****                 case 0:   default:    
 677:..\src/command_processing.c ****                     for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS; i++){
 3082              		.loc 1 677 0
 3083 00fc 0023     		movs	r3, #0
 3084 00fe C7F8643A 		str	r3, [r7, #2660]
 3085 0102 DCE0     		b	.L161
 3086              	.L176:
 678:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3087              		.loc 1 678 0
 3088 0104 97F8573A 		ldrb	r3, [r7, #2647]	@ zero_extendqisi2
 3089 0108 D7F8642A 		ldr	r2, [r7, #2660]
 3090 010c 02FB03F3 		mul	r3, r2, r3
 3091 0110 1A46     		mov	r2, r3
 3092 0112 D7F8583A 		ldr	r3, [r7, #2648]
 3093 0116 1344     		add	r3, r3, r2
 3094 0118 C7F8503A 		str	r3, [r7, #2640]
 679:..\src/command_processing.c ****                         switch (PARAM_LIST[idx].TYPES){
 3095              		.loc 1 679 0
 3096 011c D7F8603A 		ldr	r3, [r7, #2656]
 3097 0120 1B01     		lsls	r3, r3, #4
 3098 0122 07F10802 		add	r2, r7, #8
 3099 0126 1268     		ldr	r2, [r2]
 3100 0128 1344     		add	r3, r3, r2
 3101 012a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3102 012c 072B     		cmp	r3, #7
 3103 012e 00F2B980 		bhi	.L162
 3104 0132 01A2     		adr	r2, .L164
 3105 0134 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3106              		.p2align 2
 3107              	.L164:
 3108 0138 27020000 		.word	.L163+1
 3109 013c 75010000 		.word	.L165+1
 3110 0140 59010000 		.word	.L166+1
 3111 0144 91010000 		.word	.L167+1
 3112 0148 AD010000 		.word	.L168+1
 3113 014c E5010000 		.word	.L169+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 84


 3114 0150 C9010000 		.word	.L170+1
 3115 0154 01020000 		.word	.L171+1
 3116              		.p2align 1
 3117              	.L166:
 680:..\src/command_processing.c ****                             case TYPE_UINT8:
 681:..\src/command_processing.c ****                                 aux_uint8 = *((uint8*)m_tmp);
 3118              		.loc 1 681 0
 3119 0158 D7F8503A 		ldr	r3, [r7, #2640]
 3120 015c 1B78     		ldrb	r3, [r3]
 3121 015e 87F84F3A 		strb	r3, [r7, #2639]
 682:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint8);
 3122              		.loc 1 682 0
 3123 0162 97F84F2A 		ldrb	r2, [r7, #2639]	@ zero_extendqisi2
 3124 0166 07F11403 		add	r3, r7, #20
 3125 016a 6049     		ldr	r1, .L181+16
 3126 016c 1846     		mov	r0, r3
 3127 016e FFF7FEFF 		bl	sprintf
 683:..\src/command_processing.c ****                                 break;
 3128              		.loc 1 683 0
 3129 0172 97E0     		b	.L162
 3130              	.L165:
 684:..\src/command_processing.c ****                             case TYPE_INT8:
 685:..\src/command_processing.c ****                                 aux_int8 = *((int8*)m_tmp);
 3131              		.loc 1 685 0
 3132 0174 D7F8503A 		ldr	r3, [r7, #2640]
 3133 0178 1B78     		ldrb	r3, [r3]
 3134 017a 87F84E3A 		strb	r3, [r7, #2638]
 686:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int8);
 3135              		.loc 1 686 0
 3136 017e 97F94E2A 		ldrsb	r2, [r7, #2638]
 3137 0182 07F11403 		add	r3, r7, #20
 3138 0186 5949     		ldr	r1, .L181+16
 3139 0188 1846     		mov	r0, r3
 3140 018a FFF7FEFF 		bl	sprintf
 687:..\src/command_processing.c ****                                 break;
 3141              		.loc 1 687 0
 3142 018e 89E0     		b	.L162
 3143              	.L167:
 688:..\src/command_processing.c ****                             case TYPE_INT16:   
 689:..\src/command_processing.c ****                                 aux_int16 = *((int16*)m_tmp);
 3144              		.loc 1 689 0
 3145 0190 D7F8503A 		ldr	r3, [r7, #2640]
 3146 0194 1B88     		ldrh	r3, [r3]	@ movhi
 3147 0196 A7F84C3A 		strh	r3, [r7, #2636]	@ movhi
 690:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int16);
 3148              		.loc 1 690 0
 3149 019a B7F94C2A 		ldrsh	r2, [r7, #2636]
 3150 019e 07F11403 		add	r3, r7, #20
 3151 01a2 5249     		ldr	r1, .L181+16
 3152 01a4 1846     		mov	r0, r3
 3153 01a6 FFF7FEFF 		bl	sprintf
 691:..\src/command_processing.c ****                                 break;
 3154              		.loc 1 691 0
 3155 01aa 7BE0     		b	.L162
 3156              	.L168:
 692:..\src/command_processing.c ****                             
 693:..\src/command_processing.c ****                             case TYPE_UINT16: 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 85


 694:..\src/command_processing.c ****                                 aux_uint16 = *((uint16*)m_tmp);
 3157              		.loc 1 694 0
 3158 01ac D7F8503A 		ldr	r3, [r7, #2640]
 3159 01b0 1B88     		ldrh	r3, [r3]	@ movhi
 3160 01b2 A7F84A3A 		strh	r3, [r7, #2634]	@ movhi
 695:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint16);
 3161              		.loc 1 695 0
 3162 01b6 B7F84A2A 		ldrh	r2, [r7, #2634]
 3163 01ba 07F11403 		add	r3, r7, #20
 3164 01be 4B49     		ldr	r1, .L181+16
 3165 01c0 1846     		mov	r0, r3
 3166 01c2 FFF7FEFF 		bl	sprintf
 696:..\src/command_processing.c ****                                 break;
 3167              		.loc 1 696 0
 3168 01c6 6DE0     		b	.L162
 3169              	.L170:
 697:..\src/command_processing.c ****                             
 698:..\src/command_processing.c ****                             case TYPE_UINT32:
 699:..\src/command_processing.c ****                                 aux_uint32 = *((uint32*)m_tmp);
 3170              		.loc 1 699 0
 3171 01c8 D7F8503A 		ldr	r3, [r7, #2640]
 3172 01cc 1B68     		ldr	r3, [r3]
 3173 01ce C7F8443A 		str	r3, [r7, #2628]
 700:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_uint32);
 3174              		.loc 1 700 0
 3175 01d2 07F11403 		add	r3, r7, #20
 3176 01d6 D7F8442A 		ldr	r2, [r7, #2628]
 3177 01da 4549     		ldr	r1, .L181+20
 3178 01dc 1846     		mov	r0, r3
 3179 01de FFF7FEFF 		bl	sprintf
 701:..\src/command_processing.c ****                                 break;
 3180              		.loc 1 701 0
 3181 01e2 5FE0     		b	.L162
 3182              	.L169:
 702:..\src/command_processing.c ****                                 
 703:..\src/command_processing.c ****                             case TYPE_INT32:
 704:..\src/command_processing.c ****                                 aux_int32 = *((int32*)m_tmp);
 3183              		.loc 1 704 0
 3184 01e4 D7F8503A 		ldr	r3, [r7, #2640]
 3185 01e8 1B68     		ldr	r3, [r3]
 3186 01ea C7F8403A 		str	r3, [r7, #2624]
 705:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_int32);
 3187              		.loc 1 705 0
 3188 01ee 07F11403 		add	r3, r7, #20
 3189 01f2 D7F8402A 		ldr	r2, [r7, #2624]
 3190 01f6 3E49     		ldr	r1, .L181+20
 3191 01f8 1846     		mov	r0, r3
 3192 01fa FFF7FEFF 		bl	sprintf
 706:..\src/command_processing.c ****                                 break;
 3193              		.loc 1 706 0
 3194 01fe 51E0     		b	.L162
 3195              	.L171:
 707:..\src/command_processing.c ****                                 
 708:..\src/command_processing.c ****                             case TYPE_FLOAT:
 709:..\src/command_processing.c ****                                 aux_float = *((float*)m_tmp);
 3196              		.loc 1 709 0
 3197 0200 D7F8503A 		ldr	r3, [r7, #2640]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 86


 3198 0204 1B68     		ldr	r3, [r3]	@ float
 3199 0206 C7F83C3A 		str	r3, [r7, #2620]	@ float
 710:..\src/command_processing.c ****                                 sprintf(str, " %f", aux_float);
 3200              		.loc 1 710 0
 3201 020a D7F83C0A 		ldr	r0, [r7, #2620]	@ float
 3202 020e FFF7FEFF 		bl	__aeabi_f2d
 3203 0212 0346     		mov	r3, r0
 3204 0214 0C46     		mov	r4, r1
 3205 0216 07F11400 		add	r0, r7, #20
 3206 021a 1A46     		mov	r2, r3
 3207 021c 2346     		mov	r3, r4
 3208 021e 3549     		ldr	r1, .L181+24
 3209 0220 FFF7FEFF 		bl	sprintf
 711:..\src/command_processing.c ****                                 break;
 3210              		.loc 1 711 0
 3211 0224 3EE0     		b	.L162
 3212              	.L163:
 712:..\src/command_processing.c ****                                 
 713:..\src/command_processing.c ****                             case TYPE_FLAG:
 714:..\src/command_processing.c ****                                 for (i = 0; i < num_menus; i++){
 3213              		.loc 1 714 0
 3214 0226 0023     		movs	r3, #0
 3215 0228 C7F8643A 		str	r3, [r7, #2660]
 3216 022c 32E0     		b	.L172
 3217              	.L175:
 715:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3218              		.loc 1 715 0
 3219 022e D7F8643A 		ldr	r3, [r7, #2660]
 3220 0232 2C22     		movs	r2, #44
 3221 0234 02FB03F3 		mul	r3, r2, r3
 3222 0238 3A1D     		adds	r2, r7, #4
 3223 023a 1268     		ldr	r2, [r2]
 3224 023c 1344     		add	r3, r3, r2
 3225 023e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3226 0240 D7F8603A 		ldr	r3, [r7, #2656]
 3227 0244 1B01     		lsls	r3, r3, #4
 3228 0246 07F10801 		add	r1, r7, #8
 3229 024a 0968     		ldr	r1, [r1]
 3230 024c 0B44     		add	r3, r3, r1
 3231 024e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3232 0250 9A42     		cmp	r2, r3
 3233 0252 1AD1     		bne	.L173
 716:..\src/command_processing.c ****                                         strcpy(str, "");
 3234              		.loc 1 716 0
 3235 0254 214B     		ldr	r3, .L181
 3236 0256 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3237 0258 07F11403 		add	r3, r7, #20
 3238 025c 1A70     		strb	r2, [r3]
 717:..\src/command_processing.c ****                                         strcat(str, MENU_LIST[i].choice[*m_addr]);
 3239              		.loc 1 717 0
 3240 025e D7F8643A 		ldr	r3, [r7, #2660]
 3241 0262 2C22     		movs	r2, #44
 3242 0264 02FB03F3 		mul	r3, r2, r3
 3243 0268 3A1D     		adds	r2, r7, #4
 3244 026a 1268     		ldr	r2, [r2]
 3245 026c 1A44     		add	r2, r2, r3
 3246 026e D7F8583A 		ldr	r3, [r7, #2648]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 87


 3247 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3248 0274 9B00     		lsls	r3, r3, #2
 3249 0276 1344     		add	r3, r3, r2
 3250 0278 5A68     		ldr	r2, [r3, #4]
 3251 027a 07F11403 		add	r3, r7, #20
 3252 027e 1146     		mov	r1, r2
 3253 0280 1846     		mov	r0, r3
 3254 0282 FFF7FEFF 		bl	strcat
 718:..\src/command_processing.c ****                                         break;
 3255              		.loc 1 718 0
 3256 0286 00BF     		nop
 719:..\src/command_processing.c ****                                     }
 720:..\src/command_processing.c ****                                 }
 721:..\src/command_processing.c ****                                 break;
 3257              		.loc 1 721 0
 3258 0288 0BE0     		b	.L180
 3259              	.L173:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3260              		.loc 1 714 0 discriminator 2
 3261 028a D7F8643A 		ldr	r3, [r7, #2660]
 3262 028e 0133     		adds	r3, r3, #1
 3263 0290 C7F8643A 		str	r3, [r7, #2660]
 3264              	.L172:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3265              		.loc 1 714 0 is_stmt 0 discriminator 1
 3266 0294 07F10E03 		add	r3, r7, #14
 3267 0298 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3268 029a D7F8643A 		ldr	r3, [r7, #2660]
 3269 029e 9A42     		cmp	r2, r3
 3270 02a0 C5DC     		bgt	.L175
 3271              	.L180:
 3272              		.loc 1 721 0 is_stmt 1
 3273 02a2 00BF     		nop
 3274              	.L162:
 722:..\src/command_processing.c ****                         } 
 723:..\src/command_processing.c ****                         strcat(info_string, str);
 3275              		.loc 1 723 0 discriminator 2
 3276 02a4 07F11402 		add	r2, r7, #20
 3277 02a8 07F17803 		add	r3, r7, #120
 3278 02ac 1146     		mov	r1, r2
 3279 02ae 1846     		mov	r0, r3
 3280 02b0 FFF7FEFF 		bl	strcat
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3281              		.loc 1 677 0 discriminator 2
 3282 02b4 D7F8643A 		ldr	r3, [r7, #2660]
 3283 02b8 0133     		adds	r3, r3, #1
 3284 02ba C7F8643A 		str	r3, [r7, #2660]
 3285              	.L161:
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3286              		.loc 1 677 0 is_stmt 0 discriminator 1
 3287 02be D7F8603A 		ldr	r3, [r7, #2656]
 3288 02c2 1B01     		lsls	r3, r3, #4
 3289 02c4 07F10802 		add	r2, r7, #8
 3290 02c8 1268     		ldr	r2, [r2]
 3291 02ca 1344     		add	r3, r3, r2
 3292 02cc 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3293 02ce 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 88


 3294 02d0 D7F8643A 		ldr	r3, [r7, #2660]
 3295 02d4 9A42     		cmp	r2, r3
 3296 02d6 3FF715AF 		bgt	.L176
 724:..\src/command_processing.c ****                     }
 725:..\src/command_processing.c ****                     break;
 3297              		.loc 1 725 0 is_stmt 1
 3298 02da 3EE0     		b	.L177
 3299              	.L182:
 3300              		.align	2
 3301              	.L181:
 3302 02dc 00000000 		.word	.LC8
 3303 02e0 00000000 		.word	superstring
 3304 02e4 00000000 		.word	c_mem
 3305 02e8 28000000 		.word	.LC17
 3306 02ec 78020000 		.word	.LC34
 3307 02f0 7C020000 		.word	.LC35
 3308 02f4 84020000 		.word	.LC36
 3309              	.L160:
 726:..\src/command_processing.c ****                     
 727:..\src/command_processing.c ****                     
 728:..\src/command_processing.c ****                 case CUSTOM_POS_LIM:        
 729:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 3310              		.loc 1 729 0
 3311 02f8 2B4B     		ldr	r3, .L183
 3312 02fa 1B6A     		ldr	r3, [r3, #32]
 3313 02fc 2A4A     		ldr	r2, .L183
 3314 02fe 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3315 0302 1341     		asrs	r3, r3, r2
 3316 0304 C7F8403A 		str	r3, [r7, #2624]
 730:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3317              		.loc 1 730 0
 3318 0308 07F11403 		add	r3, r7, #20
 3319 030c D7F8402A 		ldr	r2, [r7, #2624]
 3320 0310 2649     		ldr	r1, .L183+4
 3321 0312 1846     		mov	r0, r3
 3322 0314 FFF7FEFF 		bl	sprintf
 731:..\src/command_processing.c ****                     strcat(info_string, str);
 3323              		.loc 1 731 0
 3324 0318 07F11402 		add	r2, r7, #20
 3325 031c 07F17803 		add	r3, r7, #120
 3326 0320 1146     		mov	r1, r2
 3327 0322 1846     		mov	r0, r3
 3328 0324 FFF7FEFF 		bl	strcat
 732:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 3329              		.loc 1 732 0
 3330 0328 1F4B     		ldr	r3, .L183
 3331 032a 5B6A     		ldr	r3, [r3, #36]
 3332 032c 1E4A     		ldr	r2, .L183
 3333 032e 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3334 0332 1341     		asrs	r3, r3, r2
 3335 0334 C7F8403A 		str	r3, [r7, #2624]
 733:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3336              		.loc 1 733 0
 3337 0338 07F11403 		add	r3, r7, #20
 3338 033c D7F8402A 		ldr	r2, [r7, #2624]
 3339 0340 1A49     		ldr	r1, .L183+4
 3340 0342 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 89


 3341 0344 FFF7FEFF 		bl	sprintf
 734:..\src/command_processing.c ****                     strcat(info_string, str);
 3342              		.loc 1 734 0
 3343 0348 07F11402 		add	r2, r7, #20
 3344 034c 07F17803 		add	r3, r7, #120
 3345 0350 1146     		mov	r1, r2
 3346 0352 1846     		mov	r0, r3
 3347 0354 FFF7FEFF 		bl	strcat
 735:..\src/command_processing.c ****                     break;
 3348              		.loc 1 735 0
 3349 0358 00BF     		nop
 3350              	.L177:
 736:..\src/command_processing.c ****                 }
 737:..\src/command_processing.c ****                 
 738:..\src/command_processing.c ****                 strcat(info_string, "\n");
 3351              		.loc 1 738 0
 3352 035a 07F17803 		add	r3, r7, #120
 3353 035e 1846     		mov	r0, r3
 3354 0360 FFF7FEFF 		bl	strlen
 3355 0364 0346     		mov	r3, r0
 3356 0366 1A46     		mov	r2, r3
 3357 0368 07F17803 		add	r3, r7, #120
 3358 036c 1344     		add	r3, r3, r2
 3359 036e 1049     		ldr	r1, .L183+8
 3360 0370 1A46     		mov	r2, r3
 3361 0372 0B46     		mov	r3, r1
 3362 0374 1B88     		ldrh	r3, [r3]	@ unaligned
 3363 0376 1380     		strh	r3, [r2]	@ unaligned
 3364              	.L158:
 3365              	.LBE26:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3366              		.loc 1 670 0 discriminator 2
 3367 0378 D7F8603A 		ldr	r3, [r7, #2656]
 3368 037c 0133     		adds	r3, r3, #1
 3369 037e C7F8603A 		str	r3, [r7, #2656]
 3370              	.L157:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3371              		.loc 1 670 0 is_stmt 0 discriminator 1
 3372 0382 07F10F03 		add	r3, r7, #15
 3373 0386 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3374 0388 D7F8603A 		ldr	r3, [r7, #2656]
 3375 038c 9A42     		cmp	r2, r3
 3376 038e 3FF779AE 		bgt	.L178
 739:..\src/command_processing.c ****                 
 740:..\src/command_processing.c ****             }
 741:..\src/command_processing.c ****             
 742:..\src/command_processing.c ****         }
 743:..\src/command_processing.c ****               
 744:..\src/command_processing.c ****       
 745:..\src/command_processing.c ****     strcat(superstring,info_string);
 3377              		.loc 1 745 0 is_stmt 1
 3378 0392 07F17803 		add	r3, r7, #120
 3379 0396 1946     		mov	r1, r3
 3380 0398 0648     		ldr	r0, .L183+12
 3381 039a FFF7FEFF 		bl	strcat
 3382              	.L179:
 3383              	.LBE25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 90


 746:..\src/command_processing.c ****     
 747:..\src/command_processing.c **** }}
 3384              		.loc 1 747 0
 3385 039e 00BF     		nop
 3386 03a0 07F66C27 		addw	r7, r7, #2668
 3387              		.cfi_def_cfa_offset 12
 3388 03a4 BD46     		mov	sp, r7
 3389              		.cfi_def_cfa_register 13
 3390              		@ sp needed
 3391 03a6 90BD     		pop	{r4, r7, pc}
 3392              	.L184:
 3393              		.align	2
 3394              	.L183:
 3395 03a8 00000000 		.word	c_mem
 3396 03ac 7C020000 		.word	.LC35
 3397 03b0 28000000 		.word	.LC17
 3398 03b4 00000000 		.word	superstring
 3399              		.cfi_endproc
 3400              	.LFE73:
 3401              		.size	qbadminp_string, .-qbadminp_string
 3402              		.section	.rodata
 3403              		.align	2
 3404              	.LC37:
 3405 0288 0D0A00   		.ascii	"\015\012\000"
 3406 028b 00       		.align	2
 3407              	.LC38:
 3408 028c 4669726D 		.ascii	"Firmware version: \000"
 3408      77617265 
 3408      20766572 
 3408      73696F6E 
 3408      3A2000
 3409 029f 00       		.align	2
 3410              	.LC39:
 3411 02a0 4149525F 		.ascii	"AIR_CHAMBERS_and_VIBROTACTILE_FB\000"
 3411      4348414D 
 3411      42455253 
 3411      5F616E64 
 3411      5F564942 
 3412 02c1 000000   		.align	2
 3413              	.LC40:
 3414 02c4 2E0D0A0D 		.ascii	".\015\012\015\012\000"
 3414      0A00
 3415 02ca 0000     		.align	2
 3416              	.LC41:
 3417 02cc 44455649 		.ascii	"DEVICE INFO\015\012\000"
 3417      43452049 
 3417      4E464F0D 
 3417      0A00
 3418 02da 0000     		.align	2
 3419              	.LC42:
 3420 02dc 44657669 		.ascii	"Device: PULSE\015\012\000"
 3420      63653A20 
 3420      50554C53 
 3420      450D0A00 
 3421              		.align	2
 3422              	.LC43:
 3423 02ec 454D4720 		.ascii	"EMG input %d -> %d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 91


 3423      696E7075 
 3423      74202564 
 3423      202D3E20 
 3423      256400
 3424 02ff 00       		.align	2
 3425              	.LC44:
 3426 0300 41637475 		.ascii	"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \015"
 3426      61746F72 
 3426      7320696E 
 3426      7075743A 
 3426      2050756D 
 3427 0330 0A00     		.ascii	"\012\000"
 3428              		.global	__aeabi_f2uiz
 3429 0332 0000     		.align	2
 3430              	.LC45:
 3431 0334 4C617374 		.ascii	"Last FW cycle time: %u us\015\012\000"
 3431      20465720 
 3431      6379636C 
 3431      65207469 
 3431      6D653A20 
 3432              		.align	2
 3433              	.LC46:
 3434 0350 0D0A0000 		.ascii	"\015\012\000\000"
 3435              		.section	.text.prepare_generic_info,"ax",%progbits
 3436              		.align	2
 3437              		.global	prepare_generic_info
 3438              		.thumb
 3439              		.thumb_func
 3440              		.type	prepare_generic_info, %function
 3441              	prepare_generic_info:
 3442              	.LFB74:
 748:..\src/command_processing.c **** //==============================================================================
 749:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 750:..\src/command_processing.c **** //==============================================================================
 751:..\src/command_processing.c **** 
 752:..\src/command_processing.c **** void prepare_generic_info(char *info_string){   
 3443              		.loc 1 752 0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 120
 3446              		@ frame_needed = 1, uses_anonymous_args = 0
 3447 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3448              		.cfi_def_cfa_offset 20
 3449              		.cfi_offset 4, -20
 3450              		.cfi_offset 5, -16
 3451              		.cfi_offset 6, -12
 3452              		.cfi_offset 7, -8
 3453              		.cfi_offset 14, -4
 3454 0002 A1B0     		sub	sp, sp, #132
 3455              		.cfi_def_cfa_offset 152
 3456 0004 02AF     		add	r7, sp, #8
 3457              		.cfi_def_cfa 7, 144
 3458 0006 7860     		str	r0, [r7, #4]
 753:..\src/command_processing.c ****     
 754:..\src/command_processing.c ****      manage_param_list(300,0);
 3459              		.loc 1 754 0
 3460 0008 0021     		movs	r1, #0
 3461 000a 4FF49670 		mov	r0, #300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 92


 3462 000e FFF7FEFF 		bl	manage_param_list
 755:..\src/command_processing.c ****     int i;
 756:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3463              		.loc 1 756 0
 3464 0012 704B     		ldr	r3, .L191
 3465 0014 3B67     		str	r3, [r7, #112]
 757:..\src/command_processing.c ****     
 758:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3466              		.loc 1 758 0
 3467 0016 6F4B     		ldr	r3, .L191
 3468 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3469 001a FA2B     		cmp	r3, #250
 3470 001c 00F0D680 		beq	.L190
 3471              	.LBB27:
 759:..\src/command_processing.c ****         
 760:..\src/command_processing.c ****         char str[100];
 761:..\src/command_processing.c ****         strcpy(info_string, "");
 3472              		.loc 1 761 0
 3473 0020 7B68     		ldr	r3, [r7, #4]
 3474 0022 0022     		movs	r2, #0
 3475 0024 1A70     		strb	r2, [r3]
 762:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3476              		.loc 1 762 0
 3477 0026 7868     		ldr	r0, [r7, #4]
 3478 0028 FFF7FEFF 		bl	strlen
 3479 002c 0346     		mov	r3, r0
 3480 002e 1A46     		mov	r2, r3
 3481 0030 7B68     		ldr	r3, [r7, #4]
 3482 0032 1344     		add	r3, r3, r2
 3483 0034 684A     		ldr	r2, .L191+4
 3484 0036 1188     		ldrh	r1, [r2]	@ unaligned
 3485 0038 9278     		ldrb	r2, [r2, #2]
 3486 003a 1980     		strh	r1, [r3]	@ unaligned
 3487 003c 9A70     		strb	r2, [r3, #2]
 763:..\src/command_processing.c ****         strcat(info_string, "Firmware version: ");
 3488              		.loc 1 763 0
 3489 003e 7868     		ldr	r0, [r7, #4]
 3490 0040 FFF7FEFF 		bl	strlen
 3491 0044 0346     		mov	r3, r0
 3492 0046 1A46     		mov	r2, r3
 3493 0048 7B68     		ldr	r3, [r7, #4]
 3494 004a 1344     		add	r3, r3, r2
 3495 004c 634A     		ldr	r2, .L191+8
 3496 004e 1D46     		mov	r5, r3
 3497 0050 1446     		mov	r4, r2
 3498 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3499 0054 2860     		str	r0, [r5]	@ unaligned
 3500 0056 6960     		str	r1, [r5, #4]	@ unaligned
 3501 0058 AA60     		str	r2, [r5, #8]	@ unaligned
 3502 005a EB60     		str	r3, [r5, #12]	@ unaligned
 3503 005c 2388     		ldrh	r3, [r4]	@ unaligned
 3504 005e A278     		ldrb	r2, [r4, #2]
 3505 0060 2B82     		strh	r3, [r5, #16]	@ unaligned
 3506 0062 1346     		mov	r3, r2
 3507 0064 AB74     		strb	r3, [r5, #18]
 764:..\src/command_processing.c ****         strcat(info_string, VERSION);
 3508              		.loc 1 764 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 93


 3509 0066 7868     		ldr	r0, [r7, #4]
 3510 0068 FFF7FEFF 		bl	strlen
 3511 006c 0346     		mov	r3, r0
 3512 006e 1A46     		mov	r2, r3
 3513 0070 7B68     		ldr	r3, [r7, #4]
 3514 0072 1344     		add	r3, r3, r2
 3515 0074 5A4A     		ldr	r2, .L191+12
 3516 0076 1446     		mov	r4, r2
 3517 0078 9E46     		mov	lr, r3
 3518 007a 04F1200C 		add	ip, r4, #32
 3519              	.L187:
 3520 007e 7546     		mov	r5, lr
 3521 0080 2646     		mov	r6, r4
 3522 0082 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 3523 0084 2860     		str	r0, [r5]	@ unaligned
 3524 0086 6960     		str	r1, [r5, #4]	@ unaligned
 3525 0088 AA60     		str	r2, [r5, #8]	@ unaligned
 3526 008a EB60     		str	r3, [r5, #12]	@ unaligned
 3527 008c 1034     		adds	r4, r4, #16
 3528 008e 0EF1100E 		add	lr, lr, #16
 3529 0092 6445     		cmp	r4, ip
 3530 0094 F3D1     		bne	.L187
 3531 0096 7346     		mov	r3, lr
 3532 0098 2246     		mov	r2, r4
 3533 009a 1278     		ldrb	r2, [r2]
 3534 009c 1A70     		strb	r2, [r3]
 765:..\src/command_processing.c ****         strcat(info_string, ".\r\n\r\n");      
 3535              		.loc 1 765 0
 3536 009e 7868     		ldr	r0, [r7, #4]
 3537 00a0 FFF7FEFF 		bl	strlen
 3538 00a4 0346     		mov	r3, r0
 3539 00a6 1A46     		mov	r2, r3
 3540 00a8 7B68     		ldr	r3, [r7, #4]
 3541 00aa 1344     		add	r3, r3, r2
 3542 00ac 4D4A     		ldr	r2, .L191+16
 3543 00ae 1068     		ldr	r0, [r2]	@ unaligned
 3544 00b0 1860     		str	r0, [r3]	@ unaligned
 3545 00b2 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3546 00b4 9A80     		strh	r2, [r3, #4]	@ unaligned
 766:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 3547              		.loc 1 766 0
 3548 00b6 7868     		ldr	r0, [r7, #4]
 3549 00b8 FFF7FEFF 		bl	strlen
 3550 00bc 0346     		mov	r3, r0
 3551 00be 1A46     		mov	r2, r3
 3552 00c0 7B68     		ldr	r3, [r7, #4]
 3553 00c2 1344     		add	r3, r3, r2
 3554 00c4 484A     		ldr	r2, .L191+20
 3555 00c6 1C46     		mov	r4, r3
 3556 00c8 1346     		mov	r3, r2
 3557 00ca 07CB     		ldmia	r3!, {r0, r1, r2}
 3558 00cc 2060     		str	r0, [r4]	@ unaligned
 3559 00ce 6160     		str	r1, [r4, #4]	@ unaligned
 3560 00d0 A260     		str	r2, [r4, #8]	@ unaligned
 3561 00d2 1B88     		ldrh	r3, [r3]	@ unaligned
 3562 00d4 A381     		strh	r3, [r4, #12]	@ unaligned
 767:..\src/command_processing.c ****         strcat(info_string, "Device: PULSE\r\n");
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 94


 3563              		.loc 1 767 0
 3564 00d6 7868     		ldr	r0, [r7, #4]
 3565 00d8 FFF7FEFF 		bl	strlen
 3566 00dc 0346     		mov	r3, r0
 3567 00de 1A46     		mov	r2, r3
 3568 00e0 7B68     		ldr	r3, [r7, #4]
 3569 00e2 1344     		add	r3, r3, r2
 3570 00e4 414A     		ldr	r2, .L191+24
 3571 00e6 1C46     		mov	r4, r3
 3572 00e8 1546     		mov	r5, r2
 3573 00ea 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3574 00ec 2060     		str	r0, [r4]	@ unaligned
 3575 00ee 6160     		str	r1, [r4, #4]	@ unaligned
 3576 00f0 A260     		str	r2, [r4, #8]	@ unaligned
 3577 00f2 E360     		str	r3, [r4, #12]	@ unaligned
 768:..\src/command_processing.c ****         strcat(info_string, superstring);
 3578              		.loc 1 768 0
 3579 00f4 3E49     		ldr	r1, .L191+28
 3580 00f6 7868     		ldr	r0, [r7, #4]
 3581 00f8 FFF7FEFF 		bl	strcat
 769:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3582              		.loc 1 769 0
 3583 00fc 7868     		ldr	r0, [r7, #4]
 3584 00fe FFF7FEFF 		bl	strlen
 3585 0102 0346     		mov	r3, r0
 3586 0104 1A46     		mov	r2, r3
 3587 0106 7B68     		ldr	r3, [r7, #4]
 3588 0108 1344     		add	r3, r3, r2
 3589 010a 334A     		ldr	r2, .L191+4
 3590 010c 1188     		ldrh	r1, [r2]	@ unaligned
 3591 010e 9278     		ldrb	r2, [r2, #2]
 3592 0110 1980     		strh	r1, [r3]	@ unaligned
 3593 0112 9A70     		strb	r2, [r3, #2]
 770:..\src/command_processing.c **** 
 771:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 3594              		.loc 1 771 0
 3595 0114 0023     		movs	r3, #0
 3596 0116 7B67     		str	r3, [r7, #116]
 3597 0118 20E0     		b	.L188
 3598              	.L189:
 772:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3599              		.loc 1 772 0 discriminator 3
 3600 011a 7B6F     		ldr	r3, [r7, #116]
 3601 011c 591C     		adds	r1, r3, #1
 3602 011e 354A     		ldr	r2, .L191+32
 3603 0120 7B6F     		ldr	r3, [r7, #116]
 3604 0122 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3605 0126 07F10C00 		add	r0, r7, #12
 3606 012a 0A46     		mov	r2, r1
 3607 012c 3249     		ldr	r1, .L191+36
 3608 012e FFF7FEFF 		bl	sprintf
 773:..\src/command_processing.c ****                 strcat(info_string, str);
 3609              		.loc 1 773 0 discriminator 3
 3610 0132 07F10C03 		add	r3, r7, #12
 3611 0136 1946     		mov	r1, r3
 3612 0138 7868     		ldr	r0, [r7, #4]
 3613 013a FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 95


 774:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 3614              		.loc 1 774 0 discriminator 3
 3615 013e 7868     		ldr	r0, [r7, #4]
 3616 0140 FFF7FEFF 		bl	strlen
 3617 0144 0346     		mov	r3, r0
 3618 0146 1A46     		mov	r2, r3
 3619 0148 7B68     		ldr	r3, [r7, #4]
 3620 014a 1344     		add	r3, r3, r2
 3621 014c 224A     		ldr	r2, .L191+4
 3622 014e 1188     		ldrh	r1, [r2]	@ unaligned
 3623 0150 9278     		ldrb	r2, [r2, #2]
 3624 0152 1980     		strh	r1, [r3]	@ unaligned
 3625 0154 9A70     		strb	r2, [r3, #2]
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3626              		.loc 1 771 0 discriminator 3
 3627 0156 7B6F     		ldr	r3, [r7, #116]
 3628 0158 0133     		adds	r3, r3, #1
 3629 015a 7B67     		str	r3, [r7, #116]
 3630              	.L188:
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3631              		.loc 1 771 0 is_stmt 0 discriminator 1
 3632 015c 7B6F     		ldr	r3, [r7, #116]
 3633 015e 012B     		cmp	r3, #1
 3634 0160 DBDD     		ble	.L189
 775:..\src/command_processing.c ****             }
 776:..\src/command_processing.c ****             
 777:..\src/command_processing.c ****             
 778:..\src/command_processing.c ****         sprintf(str,"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \r\n",(int) Pump_refOld, (int)V
 3635              		.loc 1 778 0 is_stmt 1
 3636 0162 264B     		ldr	r3, .L191+40
 3637 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3638 0166 1A46     		mov	r2, r3
 3639 0168 254B     		ldr	r3, .L191+44
 3640 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3641 016c 1946     		mov	r1, r3
 3642 016e 244B     		ldr	r3, .L191+44
 3643 0170 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3644 0172 07F10C00 		add	r0, r7, #12
 3645 0176 0093     		str	r3, [sp]
 3646 0178 0B46     		mov	r3, r1
 3647 017a 2249     		ldr	r1, .L191+48
 3648 017c FFF7FEFF 		bl	sprintf
 779:..\src/command_processing.c ****         strcat(info_string, str);
 3649              		.loc 1 779 0
 3650 0180 07F10C03 		add	r3, r7, #12
 3651 0184 1946     		mov	r1, r3
 3652 0186 7868     		ldr	r0, [r7, #4]
 3653 0188 FFF7FEFF 		bl	strcat
 780:..\src/command_processing.c ****         //sprintf(str, "Last FW cycle time: %d us\r\n", (uint16_t)cycle_time);
 781:..\src/command_processing.c ****         sprintf(str, "Last FW cycle time: %u us\r\n", (uint16)cycle_time);
 3654              		.loc 1 781 0
 3655 018c 1E4B     		ldr	r3, .L191+52
 3656 018e 1B68     		ldr	r3, [r3]	@ float
 3657 0190 1846     		mov	r0, r3
 3658 0192 FFF7FEFF 		bl	__aeabi_f2uiz
 3659 0196 0346     		mov	r3, r0
 3660 0198 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 96


 3661 019a 1A46     		mov	r2, r3
 3662 019c 07F10C03 		add	r3, r7, #12
 3663 01a0 1A49     		ldr	r1, .L191+56
 3664 01a2 1846     		mov	r0, r3
 3665 01a4 FFF7FEFF 		bl	sprintf
 782:..\src/command_processing.c ****         strcat(info_string, str);
 3666              		.loc 1 782 0
 3667 01a8 07F10C03 		add	r3, r7, #12
 3668 01ac 1946     		mov	r1, r3
 3669 01ae 7868     		ldr	r0, [r7, #4]
 3670 01b0 FFF7FEFF 		bl	strcat
 783:..\src/command_processing.c **** 
 784:..\src/command_processing.c ****                
 785:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 3671              		.loc 1 785 0
 3672 01b4 7868     		ldr	r0, [r7, #4]
 3673 01b6 FFF7FEFF 		bl	strlen
 3674 01ba 0346     		mov	r3, r0
 3675 01bc 1A46     		mov	r2, r3
 3676 01be 7B68     		ldr	r3, [r7, #4]
 3677 01c0 1344     		add	r3, r3, r2
 3678 01c2 134A     		ldr	r2, .L191+60
 3679 01c4 1188     		ldrh	r1, [r2]	@ unaligned
 3680 01c6 9278     		ldrb	r2, [r2, #2]
 3681 01c8 1980     		strh	r1, [r3]	@ unaligned
 3682 01ca 9A70     		strb	r2, [r3, #2]
 3683              	.L190:
 3684              	.LBE27:
 786:..\src/command_processing.c ****     }
 787:..\src/command_processing.c **** }
 3685              		.loc 1 787 0
 3686 01cc 00BF     		nop
 3687 01ce 7C37     		adds	r7, r7, #124
 3688              		.cfi_def_cfa_offset 20
 3689 01d0 BD46     		mov	sp, r7
 3690              		.cfi_def_cfa_register 13
 3691              		@ sp needed
 3692 01d2 F0BD     		pop	{r4, r5, r6, r7, pc}
 3693              	.L192:
 3694              		.align	2
 3695              	.L191:
 3696 01d4 00000000 		.word	c_mem
 3697 01d8 88020000 		.word	.LC37
 3698 01dc 8C020000 		.word	.LC38
 3699 01e0 A0020000 		.word	.LC39
 3700 01e4 C4020000 		.word	.LC40
 3701 01e8 CC020000 		.word	.LC41
 3702 01ec DC020000 		.word	.LC42
 3703 01f0 00000000 		.word	superstring
 3704 01f4 00000000 		.word	g_adc_meas
 3705 01f8 EC020000 		.word	.LC43
 3706 01fc 00000000 		.word	Pump_refOld
 3707 0200 00000000 		.word	VT_refOld
 3708 0204 00030000 		.word	.LC44
 3709 0208 00000000 		.word	cycle_time
 3710 020c 34030000 		.word	.LC45
 3711 0210 50030000 		.word	.LC46
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 97


 3712              		.cfi_endproc
 3713              	.LFE74:
 3714              		.size	prepare_generic_info, .-prepare_generic_info
 3715              		.section	.text.prepare_counter_info,"ax",%progbits
 3716              		.align	2
 3717              		.global	prepare_counter_info
 3718              		.thumb
 3719              		.thumb_func
 3720              		.type	prepare_counter_info, %function
 3721              	prepare_counter_info:
 3722              	.LFB75:
 788:..\src/command_processing.c **** 
 789:..\src/command_processing.c **** //==============================================================================
 790:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 791:..\src/command_processing.c **** //==============================================================================
 792:..\src/command_processing.c **** 
 793:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 794:..\src/command_processing.c **** {
 3723              		.loc 1 794 0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 8
 3726              		@ frame_needed = 1, uses_anonymous_args = 0
 3727              		@ link register save eliminated.
 3728 0000 80B4     		push	{r7}
 3729              		.cfi_def_cfa_offset 4
 3730              		.cfi_offset 7, -4
 3731 0002 83B0     		sub	sp, sp, #12
 3732              		.cfi_def_cfa_offset 16
 3733 0004 00AF     		add	r7, sp, #0
 3734              		.cfi_def_cfa_register 7
 3735 0006 7860     		str	r0, [r7, #4]
 795:..\src/command_processing.c **** }
 3736              		.loc 1 795 0
 3737 0008 00BF     		nop
 3738 000a 0C37     		adds	r7, r7, #12
 3739              		.cfi_def_cfa_offset 4
 3740 000c BD46     		mov	sp, r7
 3741              		.cfi_def_cfa_register 13
 3742              		@ sp needed
 3743 000e 80BC     		pop	{r7}
 3744              		.cfi_restore 7
 3745              		.cfi_def_cfa_offset 0
 3746 0010 7047     		bx	lr
 3747              		.cfi_endproc
 3748              	.LFE75:
 3749              		.size	prepare_counter_info, .-prepare_counter_info
 3750 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 3751              		.align	2
 3752              		.global	prepare_R01_info
 3753              		.thumb
 3754              		.thumb_func
 3755              		.type	prepare_R01_info, %function
 3756              	prepare_R01_info:
 3757              	.LFB76:
 796:..\src/command_processing.c **** 
 797:..\src/command_processing.c **** //==============================================================================
 798:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 98


 799:..\src/command_processing.c **** //==============================================================================
 800:..\src/command_processing.c **** 
 801:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
 802:..\src/command_processing.c **** {
 3758              		.loc 1 802 0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 8
 3761              		@ frame_needed = 1, uses_anonymous_args = 0
 3762              		@ link register save eliminated.
 3763 0000 80B4     		push	{r7}
 3764              		.cfi_def_cfa_offset 4
 3765              		.cfi_offset 7, -4
 3766 0002 83B0     		sub	sp, sp, #12
 3767              		.cfi_def_cfa_offset 16
 3768 0004 00AF     		add	r7, sp, #0
 3769              		.cfi_def_cfa_register 7
 3770 0006 7860     		str	r0, [r7, #4]
 803:..\src/command_processing.c **** }
 3771              		.loc 1 803 0
 3772 0008 00BF     		nop
 3773 000a 0C37     		adds	r7, r7, #12
 3774              		.cfi_def_cfa_offset 4
 3775 000c BD46     		mov	sp, r7
 3776              		.cfi_def_cfa_register 13
 3777              		@ sp needed
 3778 000e 80BC     		pop	{r7}
 3779              		.cfi_restore 7
 3780              		.cfi_def_cfa_offset 0
 3781 0010 7047     		bx	lr
 3782              		.cfi_endproc
 3783              	.LFE76:
 3784              		.size	prepare_R01_info, .-prepare_R01_info
 3785 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 3786              		.align	2
 3787              		.global	prepare_SD_param_info
 3788              		.thumb
 3789              		.thumb_func
 3790              		.type	prepare_SD_param_info, %function
 3791              	prepare_SD_param_info:
 3792              	.LFB77:
 804:..\src/command_processing.c **** 
 805:..\src/command_processing.c **** //==============================================================================
 806:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 807:..\src/command_processing.c **** //==============================================================================
 808:..\src/command_processing.c **** 
 809:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 810:..\src/command_processing.c **** {
 3793              		.loc 1 810 0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 8
 3796              		@ frame_needed = 1, uses_anonymous_args = 0
 3797              		@ link register save eliminated.
 3798 0000 80B4     		push	{r7}
 3799              		.cfi_def_cfa_offset 4
 3800              		.cfi_offset 7, -4
 3801 0002 83B0     		sub	sp, sp, #12
 3802              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 99


 3803 0004 00AF     		add	r7, sp, #0
 3804              		.cfi_def_cfa_register 7
 3805 0006 7860     		str	r0, [r7, #4]
 811:..\src/command_processing.c **** }
 3806              		.loc 1 811 0
 3807 0008 00BF     		nop
 3808 000a 0C37     		adds	r7, r7, #12
 3809              		.cfi_def_cfa_offset 4
 3810 000c BD46     		mov	sp, r7
 3811              		.cfi_def_cfa_register 13
 3812              		@ sp needed
 3813 000e 80BC     		pop	{r7}
 3814              		.cfi_restore 7
 3815              		.cfi_def_cfa_offset 0
 3816 0010 7047     		bx	lr
 3817              		.cfi_endproc
 3818              	.LFE77:
 3819              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 3820 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 3821              		.align	2
 3822              		.global	prepare_SD_legend
 3823              		.thumb
 3824              		.thumb_func
 3825              		.type	prepare_SD_legend, %function
 3826              	prepare_SD_legend:
 3827              	.LFB78:
 812:..\src/command_processing.c **** 
 813:..\src/command_processing.c **** 
 814:..\src/command_processing.c **** //==============================================================================
 815:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 816:..\src/command_processing.c **** //==============================================================================
 817:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 818:..\src/command_processing.c **** {
 3828              		.loc 1 818 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 8
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832              		@ link register save eliminated.
 3833 0000 80B4     		push	{r7}
 3834              		.cfi_def_cfa_offset 4
 3835              		.cfi_offset 7, -4
 3836 0002 83B0     		sub	sp, sp, #12
 3837              		.cfi_def_cfa_offset 16
 3838 0004 00AF     		add	r7, sp, #0
 3839              		.cfi_def_cfa_register 7
 3840 0006 7860     		str	r0, [r7, #4]
 819:..\src/command_processing.c **** }
 3841              		.loc 1 819 0
 3842 0008 00BF     		nop
 3843 000a 0C37     		adds	r7, r7, #12
 3844              		.cfi_def_cfa_offset 4
 3845 000c BD46     		mov	sp, r7
 3846              		.cfi_def_cfa_register 13
 3847              		@ sp needed
 3848 000e 80BC     		pop	{r7}
 3849              		.cfi_restore 7
 3850              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 100


 3851 0010 7047     		bx	lr
 3852              		.cfi_endproc
 3853              	.LFE78:
 3854              		.size	prepare_SD_legend, .-prepare_SD_legend
 3855 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 3856              		.align	2
 3857              		.global	prepare_SD_EMG_History_legend
 3858              		.thumb
 3859              		.thumb_func
 3860              		.type	prepare_SD_EMG_History_legend, %function
 3861              	prepare_SD_EMG_History_legend:
 3862              	.LFB79:
 820:..\src/command_processing.c **** 
 821:..\src/command_processing.c **** //==============================================================================
 822:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 823:..\src/command_processing.c **** //==============================================================================
 824:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 825:..\src/command_processing.c **** {
 3863              		.loc 1 825 0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 8
 3866              		@ frame_needed = 1, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
 3868 0000 80B4     		push	{r7}
 3869              		.cfi_def_cfa_offset 4
 3870              		.cfi_offset 7, -4
 3871 0002 83B0     		sub	sp, sp, #12
 3872              		.cfi_def_cfa_offset 16
 3873 0004 00AF     		add	r7, sp, #0
 3874              		.cfi_def_cfa_register 7
 3875 0006 7860     		str	r0, [r7, #4]
 826:..\src/command_processing.c ****     
 827:..\src/command_processing.c **** }
 3876              		.loc 1 827 0
 3877 0008 00BF     		nop
 3878 000a 0C37     		adds	r7, r7, #12
 3879              		.cfi_def_cfa_offset 4
 3880 000c BD46     		mov	sp, r7
 3881              		.cfi_def_cfa_register 13
 3882              		@ sp needed
 3883 000e 80BC     		pop	{r7}
 3884              		.cfi_restore 7
 3885              		.cfi_def_cfa_offset 0
 3886 0010 7047     		bx	lr
 3887              		.cfi_endproc
 3888              	.LFE79:
 3889              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 3890 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 3891              		.align	2
 3892              		.global	prepare_SD_EMG_history
 3893              		.thumb
 3894              		.thumb_func
 3895              		.type	prepare_SD_EMG_history, %function
 3896              	prepare_SD_EMG_history:
 3897              	.LFB80:
 828:..\src/command_processing.c **** 
 829:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 101


 830:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 831:..\src/command_processing.c **** //==============================================================================
 832:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
 833:..\src/command_processing.c **** {
 3898              		.loc 1 833 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 8
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902              		@ link register save eliminated.
 3903 0000 80B4     		push	{r7}
 3904              		.cfi_def_cfa_offset 4
 3905              		.cfi_offset 7, -4
 3906 0002 83B0     		sub	sp, sp, #12
 3907              		.cfi_def_cfa_offset 16
 3908 0004 00AF     		add	r7, sp, #0
 3909              		.cfi_def_cfa_register 7
 3910 0006 7860     		str	r0, [r7, #4]
 834:..\src/command_processing.c ****         
 835:..\src/command_processing.c **** }
 3911              		.loc 1 835 0
 3912 0008 00BF     		nop
 3913 000a 0C37     		adds	r7, r7, #12
 3914              		.cfi_def_cfa_offset 4
 3915 000c BD46     		mov	sp, r7
 3916              		.cfi_def_cfa_register 13
 3917              		@ sp needed
 3918 000e 80BC     		pop	{r7}
 3919              		.cfi_restore 7
 3920              		.cfi_def_cfa_offset 0
 3921 0010 7047     		bx	lr
 3922              		.cfi_endproc
 3923              	.LFE80:
 3924              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 3925 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 3926              		.align	2
 3927              		.global	IMU_reading_info
 3928              		.thumb
 3929              		.thumb_func
 3930              		.type	IMU_reading_info, %function
 3931              	IMU_reading_info:
 3932              	.LFB81:
 836:..\src/command_processing.c **** 
 837:..\src/command_processing.c **** //==============================================================================
 838:..\src/command_processing.c **** //                                                              IMU READING INFO
 839:..\src/command_processing.c **** //==============================================================================
 840:..\src/command_processing.c **** 
 841:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 842:..\src/command_processing.c **** {
 3933              		.loc 1 842 0
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 8
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937              		@ link register save eliminated.
 3938 0000 80B4     		push	{r7}
 3939              		.cfi_def_cfa_offset 4
 3940              		.cfi_offset 7, -4
 3941 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 102


 3942              		.cfi_def_cfa_offset 16
 3943 0004 00AF     		add	r7, sp, #0
 3944              		.cfi_def_cfa_register 7
 3945 0006 7860     		str	r0, [r7, #4]
 843:..\src/command_processing.c **** }
 3946              		.loc 1 843 0
 3947 0008 00BF     		nop
 3948 000a 0C37     		adds	r7, r7, #12
 3949              		.cfi_def_cfa_offset 4
 3950 000c BD46     		mov	sp, r7
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 000e 80BC     		pop	{r7}
 3954              		.cfi_restore 7
 3955              		.cfi_def_cfa_offset 0
 3956 0010 7047     		bx	lr
 3957              		.cfi_endproc
 3958              	.LFE81:
 3959              		.size	IMU_reading_info, .-IMU_reading_info
 3960 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 3961              		.align	2
 3962              		.global	commWrite_old_id
 3963              		.thumb
 3964              		.thumb_func
 3965              		.type	commWrite_old_id, %function
 3966              	commWrite_old_id:
 3967              	.LFB82:
 844:..\src/command_processing.c **** 
 845:..\src/command_processing.c **** //==============================================================================
 846:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 847:..\src/command_processing.c **** //==============================================================================
 848:..\src/command_processing.c **** 
 849:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 850:..\src/command_processing.c **** {
 3968              		.loc 1 850 0
 3969              		.cfi_startproc
 3970              		@ args = 0, pretend = 0, frame = 16
 3971              		@ frame_needed = 1, uses_anonymous_args = 0
 3972 0000 80B5     		push	{r7, lr}
 3973              		.cfi_def_cfa_offset 8
 3974              		.cfi_offset 7, -8
 3975              		.cfi_offset 14, -4
 3976 0002 84B0     		sub	sp, sp, #16
 3977              		.cfi_def_cfa_offset 24
 3978 0004 00AF     		add	r7, sp, #0
 3979              		.cfi_def_cfa_register 7
 3980 0006 7860     		str	r0, [r7, #4]
 3981 0008 0B46     		mov	r3, r1
 3982 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3983 000c 1346     		mov	r3, r2
 3984 000e 7B70     		strb	r3, [r7, #1]
 851:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 852:..\src/command_processing.c **** 
 853:..\src/command_processing.c ****     // frame - start
 854:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3985              		.loc 1 854 0
 3986 0010 3A20     		movs	r0, #58
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 103


 3987 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 855:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3988              		.loc 1 855 0
 3989 0016 3A20     		movs	r0, #58
 3990 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 856:..\src/command_processing.c ****     // frame - ID
 857:..\src/command_processing.c ****     //if(old_id)
 858:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 3991              		.loc 1 858 0
 3992 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3993 001e 1846     		mov	r0, r3
 3994 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 859:..\src/command_processing.c ****     //else
 860:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 861:..\src/command_processing.c ****         
 862:..\src/command_processing.c ****     // frame - length
 863:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3995              		.loc 1 863 0
 3996 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3997 0026 DBB2     		uxtb	r3, r3
 3998 0028 1846     		mov	r0, r3
 3999 002a FFF7FEFF 		bl	UART_RS485_PutChar
 864:..\src/command_processing.c ****     // frame - packet data
 865:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4000              		.loc 1 865 0
 4001 002e 0023     		movs	r3, #0
 4002 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 4003 0032 09E0     		b	.L201
 4004              	.L202:
 866:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4005              		.loc 1 866 0 discriminator 3
 4006 0034 FB89     		ldrh	r3, [r7, #14]
 4007 0036 7A68     		ldr	r2, [r7, #4]
 4008 0038 1344     		add	r3, r3, r2
 4009 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4010 003c 1846     		mov	r0, r3
 4011 003e FFF7FEFF 		bl	UART_RS485_PutChar
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4012              		.loc 1 865 0 discriminator 3
 4013 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4014 0044 0133     		adds	r3, r3, #1
 4015 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4016              	.L201:
 865:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4017              		.loc 1 865 0 is_stmt 0 discriminator 1
 4018 0048 FA89     		ldrh	r2, [r7, #14]
 4019 004a 7B88     		ldrh	r3, [r7, #2]
 4020 004c 9A42     		cmp	r2, r3
 4021 004e F1D3     		bcc	.L202
 867:..\src/command_processing.c ****     }
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     index = 0;
 4022              		.loc 1 869 0 is_stmt 1
 4023 0050 0023     		movs	r3, #0
 4024 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 104


 4025              		.loc 1 871 0
 4026 0054 00BF     		nop
 4027              	.L204:
 4028              		.loc 1 871 0 is_stmt 0 discriminator 2
 4029 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4030 005a 0346     		mov	r3, r0
 4031 005c 03F00103 		and	r3, r3, #1
 4032 0060 002B     		cmp	r3, #0
 4033 0062 05D1     		bne	.L203
 4034              		.loc 1 871 0 discriminator 1
 4035 0064 FB89     		ldrh	r3, [r7, #14]
 4036 0066 5A1C     		adds	r2, r3, #1
 4037 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 4038 006a B3F57A7F 		cmp	r3, #1000
 4039 006e F2D9     		bls	.L204
 4040              	.L203:
 872:..\src/command_processing.c **** 
 873:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4041              		.loc 1 873 0 is_stmt 1
 4042 0070 0120     		movs	r0, #1
 4043 0072 FFF7FEFF 		bl	RS485_CTS_Write
 874:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4044              		.loc 1 874 0
 4045 0076 0020     		movs	r0, #0
 4046 0078 FFF7FEFF 		bl	RS485_CTS_Write
 875:..\src/command_processing.c **** }
 4047              		.loc 1 875 0
 4048 007c 00BF     		nop
 4049 007e 1037     		adds	r7, r7, #16
 4050              		.cfi_def_cfa_offset 8
 4051 0080 BD46     		mov	sp, r7
 4052              		.cfi_def_cfa_register 13
 4053              		@ sp needed
 4054 0082 80BD     		pop	{r7, pc}
 4055              		.cfi_endproc
 4056              	.LFE82:
 4057              		.size	commWrite_old_id, .-commWrite_old_id
 4058              		.section	.text.commWrite,"ax",%progbits
 4059              		.align	2
 4060              		.global	commWrite
 4061              		.thumb
 4062              		.thumb_func
 4063              		.type	commWrite, %function
 4064              	commWrite:
 4065              	.LFB83:
 876:..\src/command_processing.c **** 
 877:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 878:..\src/command_processing.c **** {
 4066              		.loc 1 878 0
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 16
 4069              		@ frame_needed = 1, uses_anonymous_args = 0
 4070 0000 80B5     		push	{r7, lr}
 4071              		.cfi_def_cfa_offset 8
 4072              		.cfi_offset 7, -8
 4073              		.cfi_offset 14, -4
 4074 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 105


 4075              		.cfi_def_cfa_offset 24
 4076 0004 00AF     		add	r7, sp, #0
 4077              		.cfi_def_cfa_register 7
 4078 0006 7860     		str	r0, [r7, #4]
 4079 0008 0B46     		mov	r3, r1
 4080 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 879:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 880:..\src/command_processing.c **** 
 881:..\src/command_processing.c ****     // frame - start
 882:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4081              		.loc 1 882 0
 4082 000c 3A20     		movs	r0, #58
 4083 000e FFF7FEFF 		bl	UART_RS485_PutChar
 883:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4084              		.loc 1 883 0
 4085 0012 3A20     		movs	r0, #58
 4086 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 884:..\src/command_processing.c ****     // frame - ID
 885:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 4087              		.loc 1 885 0
 4088 0018 1A4B     		ldr	r3, .L210
 4089 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 4090 001c 1846     		mov	r0, r3
 4091 001e FFF7FEFF 		bl	UART_RS485_PutChar
 886:..\src/command_processing.c ****     // frame - length
 887:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4092              		.loc 1 887 0
 4093 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4094 0024 DBB2     		uxtb	r3, r3
 4095 0026 1846     		mov	r0, r3
 4096 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 888:..\src/command_processing.c ****     // frame - packet data
 889:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4097              		.loc 1 889 0
 4098 002c 0023     		movs	r3, #0
 4099 002e FB81     		strh	r3, [r7, #14]	@ movhi
 4100 0030 09E0     		b	.L206
 4101              	.L207:
 890:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4102              		.loc 1 890 0 discriminator 3
 4103 0032 FB89     		ldrh	r3, [r7, #14]
 4104 0034 7A68     		ldr	r2, [r7, #4]
 4105 0036 1344     		add	r3, r3, r2
 4106 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4107 003a 1846     		mov	r0, r3
 4108 003c FFF7FEFF 		bl	UART_RS485_PutChar
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4109              		.loc 1 889 0 discriminator 3
 4110 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4111 0042 0133     		adds	r3, r3, #1
 4112 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 4113              	.L206:
 889:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4114              		.loc 1 889 0 is_stmt 0 discriminator 1
 4115 0046 FA89     		ldrh	r2, [r7, #14]
 4116 0048 7B88     		ldrh	r3, [r7, #2]
 4117 004a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 106


 4118 004c F1D3     		bcc	.L207
 891:..\src/command_processing.c ****     }
 892:..\src/command_processing.c **** 
 893:..\src/command_processing.c ****     index = 0;
 4119              		.loc 1 893 0 is_stmt 1
 4120 004e 0023     		movs	r3, #0
 4121 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 894:..\src/command_processing.c **** 
 895:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4122              		.loc 1 895 0
 4123 0052 00BF     		nop
 4124              	.L209:
 4125              		.loc 1 895 0 is_stmt 0 discriminator 2
 4126 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4127 0058 0346     		mov	r3, r0
 4128 005a 03F00103 		and	r3, r3, #1
 4129 005e 002B     		cmp	r3, #0
 4130 0060 05D1     		bne	.L208
 4131              		.loc 1 895 0 discriminator 1
 4132 0062 FB89     		ldrh	r3, [r7, #14]
 4133 0064 5A1C     		adds	r2, r3, #1
 4134 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 4135 0068 B3F57A7F 		cmp	r3, #1000
 4136 006c F2D9     		bls	.L209
 4137              	.L208:
 896:..\src/command_processing.c **** 
 897:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4138              		.loc 1 897 0 is_stmt 1
 4139 006e 0120     		movs	r0, #1
 4140 0070 FFF7FEFF 		bl	RS485_CTS_Write
 898:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4141              		.loc 1 898 0
 4142 0074 0020     		movs	r0, #0
 4143 0076 FFF7FEFF 		bl	RS485_CTS_Write
 899:..\src/command_processing.c **** }
 4144              		.loc 1 899 0
 4145 007a 00BF     		nop
 4146 007c 1037     		adds	r7, r7, #16
 4147              		.cfi_def_cfa_offset 8
 4148 007e BD46     		mov	sp, r7
 4149              		.cfi_def_cfa_register 13
 4150              		@ sp needed
 4151 0080 80BD     		pop	{r7, pc}
 4152              	.L211:
 4153 0082 00BF     		.align	2
 4154              	.L210:
 4155 0084 00000000 		.word	g_mem
 4156              		.cfi_endproc
 4157              	.LFE83:
 4158              		.size	commWrite, .-commWrite
 4159              		.section	.text.commWriteID,"ax",%progbits
 4160              		.align	2
 4161              		.global	commWriteID
 4162              		.thumb
 4163              		.thumb_func
 4164              		.type	commWriteID, %function
 4165              	commWriteID:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 107


 4166              	.LFB84:
 900:..\src/command_processing.c **** 
 901:..\src/command_processing.c **** 
 902:..\src/command_processing.c **** //==============================================================================
 903:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 904:..\src/command_processing.c **** //==============================================================================
 905:..\src/command_processing.c **** 
 906:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 907:..\src/command_processing.c **** {
 4167              		.loc 1 907 0
 4168              		.cfi_startproc
 4169              		@ args = 0, pretend = 0, frame = 8
 4170              		@ frame_needed = 1, uses_anonymous_args = 0
 4171 0000 80B5     		push	{r7, lr}
 4172              		.cfi_def_cfa_offset 8
 4173              		.cfi_offset 7, -8
 4174              		.cfi_offset 14, -4
 4175 0002 82B0     		sub	sp, sp, #8
 4176              		.cfi_def_cfa_offset 16
 4177 0004 00AF     		add	r7, sp, #0
 4178              		.cfi_def_cfa_register 7
 4179 0006 7860     		str	r0, [r7, #4]
 4180 0008 0B46     		mov	r3, r1
 4181 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4182 000c 1346     		mov	r3, r2
 4183 000e 7B70     		strb	r3, [r7, #1]
 908:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 909:..\src/command_processing.c **** 
 910:..\src/command_processing.c ****     // frame - start
 911:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4184              		.loc 1 911 0
 4185 0010 3A20     		movs	r0, #58
 4186 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 912:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4187              		.loc 1 912 0
 4188 0016 3A20     		movs	r0, #58
 4189 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 913:..\src/command_processing.c ****     // frame - ID
 914:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 4190              		.loc 1 914 0
 4191 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4192 001e 1846     		mov	r0, r3
 4193 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 915:..\src/command_processing.c ****     // frame - length
 916:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4194              		.loc 1 916 0
 4195 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4196 0026 DBB2     		uxtb	r3, r3
 4197 0028 1846     		mov	r0, r3
 4198 002a FFF7FEFF 		bl	UART_RS485_PutChar
 917:..\src/command_processing.c ****     // frame - packet data
 918:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 4199              		.loc 1 918 0
 4200 002e 1B4B     		ldr	r3, .L217
 4201 0030 0022     		movs	r2, #0
 4202 0032 1A80     		strh	r2, [r3]	@ movhi
 4203 0034 0EE0     		b	.L213
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 108


 4204              	.L214:
 919:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4205              		.loc 1 919 0 discriminator 3
 4206 0036 194B     		ldr	r3, .L217
 4207 0038 1B88     		ldrh	r3, [r3]
 4208 003a 1A46     		mov	r2, r3
 4209 003c 7B68     		ldr	r3, [r7, #4]
 4210 003e 1344     		add	r3, r3, r2
 4211 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4212 0042 1846     		mov	r0, r3
 4213 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4214              		.loc 1 918 0 discriminator 3
 4215 0048 144B     		ldr	r3, .L217
 4216 004a 1B88     		ldrh	r3, [r3]
 4217 004c 0133     		adds	r3, r3, #1
 4218 004e 9AB2     		uxth	r2, r3
 4219 0050 124B     		ldr	r3, .L217
 4220 0052 1A80     		strh	r2, [r3]	@ movhi
 4221              	.L213:
 918:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4222              		.loc 1 918 0 is_stmt 0 discriminator 1
 4223 0054 114B     		ldr	r3, .L217
 4224 0056 1B88     		ldrh	r3, [r3]
 4225 0058 7A88     		ldrh	r2, [r7, #2]
 4226 005a 9A42     		cmp	r2, r3
 4227 005c EBD8     		bhi	.L214
 920:..\src/command_processing.c ****     }
 921:..\src/command_processing.c **** 
 922:..\src/command_processing.c ****     i = 0;
 4228              		.loc 1 922 0 is_stmt 1
 4229 005e 0F4B     		ldr	r3, .L217
 4230 0060 0022     		movs	r2, #0
 4231 0062 1A80     		strh	r2, [r3]	@ movhi
 923:..\src/command_processing.c **** 
 924:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 4232              		.loc 1 924 0
 4233 0064 00BF     		nop
 4234              	.L216:
 4235              		.loc 1 924 0 is_stmt 0 discriminator 2
 4236 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4237 006a 0346     		mov	r3, r0
 4238 006c 03F00103 		and	r3, r3, #1
 4239 0070 002B     		cmp	r3, #0
 4240 0072 08D1     		bne	.L215
 4241              		.loc 1 924 0 discriminator 1
 4242 0074 094B     		ldr	r3, .L217
 4243 0076 1B88     		ldrh	r3, [r3]
 4244 0078 5A1C     		adds	r2, r3, #1
 4245 007a 91B2     		uxth	r1, r2
 4246 007c 074A     		ldr	r2, .L217
 4247 007e 1180     		strh	r1, [r2]	@ movhi
 4248 0080 B3F57A7F 		cmp	r3, #1000
 4249 0084 EFD9     		bls	.L216
 4250              	.L215:
 925:..\src/command_processing.c ****     
 926:..\src/command_processing.c ****     RS485_CTS_Write(1);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 109


 4251              		.loc 1 926 0 is_stmt 1
 4252 0086 0120     		movs	r0, #1
 4253 0088 FFF7FEFF 		bl	RS485_CTS_Write
 927:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4254              		.loc 1 927 0
 4255 008c 0020     		movs	r0, #0
 4256 008e FFF7FEFF 		bl	RS485_CTS_Write
 928:..\src/command_processing.c **** }
 4257              		.loc 1 928 0
 4258 0092 00BF     		nop
 4259 0094 0837     		adds	r7, r7, #8
 4260              		.cfi_def_cfa_offset 8
 4261 0096 BD46     		mov	sp, r7
 4262              		.cfi_def_cfa_register 13
 4263              		@ sp needed
 4264 0098 80BD     		pop	{r7, pc}
 4265              	.L218:
 4266 009a 00BF     		.align	2
 4267              	.L217:
 4268 009c 00000000 		.word	i.10044
 4269              		.cfi_endproc
 4270              	.LFE84:
 4271              		.size	commWriteID, .-commWriteID
 4272              		.section	.text.LCRChecksum,"ax",%progbits
 4273              		.align	2
 4274              		.global	LCRChecksum
 4275              		.thumb
 4276              		.thumb_func
 4277              		.type	LCRChecksum, %function
 4278              	LCRChecksum:
 4279              	.LFB85:
 929:..\src/command_processing.c **** 
 930:..\src/command_processing.c **** //==============================================================================
 931:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 932:..\src/command_processing.c **** //==============================================================================
 933:..\src/command_processing.c **** 
 934:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 935:..\src/command_processing.c **** 
 936:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 4280              		.loc 1 936 0
 4281              		.cfi_startproc
 4282              		@ args = 0, pretend = 0, frame = 16
 4283              		@ frame_needed = 1, uses_anonymous_args = 0
 4284              		@ link register save eliminated.
 4285 0000 80B4     		push	{r7}
 4286              		.cfi_def_cfa_offset 4
 4287              		.cfi_offset 7, -4
 4288 0002 85B0     		sub	sp, sp, #20
 4289              		.cfi_def_cfa_offset 24
 4290 0004 00AF     		add	r7, sp, #0
 4291              		.cfi_def_cfa_register 7
 4292 0006 7860     		str	r0, [r7, #4]
 4293 0008 0B46     		mov	r3, r1
 4294 000a FB70     		strb	r3, [r7, #3]
 937:..\src/command_processing.c ****     
 938:..\src/command_processing.c ****     uint8 CYDATA i;
 939:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 110


 4295              		.loc 1 939 0
 4296 000c 0023     		movs	r3, #0
 4297 000e BB73     		strb	r3, [r7, #14]
 940:..\src/command_processing.c ****     
 941:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 4298              		.loc 1 941 0
 4299 0010 0023     		movs	r3, #0
 4300 0012 FB73     		strb	r3, [r7, #15]
 4301 0014 09E0     		b	.L220
 4302              	.L221:
 942:..\src/command_processing.c ****        checksum ^= data_array[i];
 4303              		.loc 1 942 0 discriminator 3
 4304 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4305 0018 7A68     		ldr	r2, [r7, #4]
 4306 001a 1344     		add	r3, r3, r2
 4307 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4308 001e BB7B     		ldrb	r3, [r7, #14]
 4309 0020 5340     		eors	r3, r3, r2
 4310 0022 BB73     		strb	r3, [r7, #14]
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4311              		.loc 1 941 0 discriminator 3
 4312 0024 FB7B     		ldrb	r3, [r7, #15]
 4313 0026 0133     		adds	r3, r3, #1
 4314 0028 FB73     		strb	r3, [r7, #15]
 4315              	.L220:
 941:..\src/command_processing.c ****        checksum ^= data_array[i];
 4316              		.loc 1 941 0 is_stmt 0 discriminator 1
 4317 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4318 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4319 002e 9A42     		cmp	r2, r3
 4320 0030 F1D3     		bcc	.L221
 943:..\src/command_processing.c ****   
 944:..\src/command_processing.c ****     return checksum;
 4321              		.loc 1 944 0 is_stmt 1
 4322 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 945:..\src/command_processing.c **** }
 4323              		.loc 1 945 0
 4324 0034 1846     		mov	r0, r3
 4325 0036 1437     		adds	r7, r7, #20
 4326              		.cfi_def_cfa_offset 4
 4327 0038 BD46     		mov	sp, r7
 4328              		.cfi_def_cfa_register 13
 4329              		@ sp needed
 4330 003a 80BC     		pop	{r7}
 4331              		.cfi_restore 7
 4332              		.cfi_def_cfa_offset 0
 4333 003c 7047     		bx	lr
 4334              		.cfi_endproc
 4335              	.LFE85:
 4336              		.size	LCRChecksum, .-LCRChecksum
 4337 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 4338              		.align	2
 4339              		.global	sendAcknowledgment
 4340              		.thumb
 4341              		.thumb_func
 4342              		.type	sendAcknowledgment, %function
 4343              	sendAcknowledgment:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 111


 4344              	.LFB86:
 946:..\src/command_processing.c **** 
 947:..\src/command_processing.c **** 
 948:..\src/command_processing.c **** //==============================================================================
 949:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 950:..\src/command_processing.c **** //==============================================================================
 951:..\src/command_processing.c **** 
 952:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 4345              		.loc 1 952 0
 4346              		.cfi_startproc
 4347              		@ args = 0, pretend = 0, frame = 16
 4348              		@ frame_needed = 1, uses_anonymous_args = 0
 4349 0000 80B5     		push	{r7, lr}
 4350              		.cfi_def_cfa_offset 8
 4351              		.cfi_offset 7, -8
 4352              		.cfi_offset 14, -4
 4353 0002 84B0     		sub	sp, sp, #16
 4354              		.cfi_def_cfa_offset 24
 4355 0004 00AF     		add	r7, sp, #0
 4356              		.cfi_def_cfa_register 7
 4357 0006 0346     		mov	r3, r0
 4358 0008 FB71     		strb	r3, [r7, #7]
 953:..\src/command_processing.c ****     int packet_length = 2;
 4359              		.loc 1 953 0
 4360 000a 0223     		movs	r3, #2
 4361 000c FB60     		str	r3, [r7, #12]
 954:..\src/command_processing.c ****     uint8 packet_data[2];
 955:..\src/command_processing.c **** 
 956:..\src/command_processing.c ****     packet_data[0] = value;
 4362              		.loc 1 956 0
 4363 000e FB79     		ldrb	r3, [r7, #7]
 4364 0010 3B72     		strb	r3, [r7, #8]
 957:..\src/command_processing.c ****     packet_data[1] = value;
 4365              		.loc 1 957 0
 4366 0012 FB79     		ldrb	r3, [r7, #7]
 4367 0014 7B72     		strb	r3, [r7, #9]
 958:..\src/command_processing.c **** 
 959:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 4368              		.loc 1 959 0
 4369 0016 FB68     		ldr	r3, [r7, #12]
 4370 0018 9AB2     		uxth	r2, r3
 4371 001a 07F10803 		add	r3, r7, #8
 4372 001e 1146     		mov	r1, r2
 4373 0020 1846     		mov	r0, r3
 4374 0022 FFF7FEFF 		bl	commWrite
 960:..\src/command_processing.c **** }
 4375              		.loc 1 960 0
 4376 0026 00BF     		nop
 4377 0028 1037     		adds	r7, r7, #16
 4378              		.cfi_def_cfa_offset 8
 4379 002a BD46     		mov	sp, r7
 4380              		.cfi_def_cfa_register 13
 4381              		@ sp needed
 4382 002c 80BD     		pop	{r7, pc}
 4383              		.cfi_endproc
 4384              	.LFE86:
 4385              		.size	sendAcknowledgment, .-sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 112


 4386 002e 00BF     		.section	.text.memStore,"ax",%progbits
 4387              		.align	2
 4388              		.global	memStore
 4389              		.thumb
 4390              		.thumb_func
 4391              		.type	memStore, %function
 4392              	memStore:
 4393              	.LFB87:
 961:..\src/command_processing.c **** 
 962:..\src/command_processing.c **** //==============================================================================
 963:..\src/command_processing.c **** //                                                                  STORE MEMORY
 964:..\src/command_processing.c **** //==============================================================================
 965:..\src/command_processing.c **** 
 966:..\src/command_processing.c **** 
 967:..\src/command_processing.c **** uint8 memStore(int displacement)
 968:..\src/command_processing.c **** {
 4394              		.loc 1 968 0
 4395              		.cfi_startproc
 4396              		@ args = 0, pretend = 0, frame = 24
 4397              		@ frame_needed = 1, uses_anonymous_args = 0
 4398 0000 80B5     		push	{r7, lr}
 4399              		.cfi_def_cfa_offset 8
 4400              		.cfi_offset 7, -8
 4401              		.cfi_offset 14, -4
 4402 0002 86B0     		sub	sp, sp, #24
 4403              		.cfi_def_cfa_offset 32
 4404 0004 00AF     		add	r7, sp, #0
 4405              		.cfi_def_cfa_register 7
 4406 0006 7860     		str	r0, [r7, #4]
 969:..\src/command_processing.c ****     int i;  // iterator
 970:..\src/command_processing.c ****     uint8 writeStatus;
 971:..\src/command_processing.c ****     int pages;
 972:..\src/command_processing.c ****     uint8 ret_val = 1;
 4407              		.loc 1 972 0
 4408 0008 0123     		movs	r3, #1
 4409 000a FB74     		strb	r3, [r7, #19]
 973:..\src/command_processing.c **** 
 974:..\src/command_processing.c ****     // Disable Interrupt
 975:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 4410              		.loc 1 975 0
 4411 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 976:..\src/command_processing.c **** 
 977:..\src/command_processing.c ****     // Stop motor
 978:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 979:..\src/command_processing.c **** 
 980:..\src/command_processing.c ****     // Update temperature information for better writing performance
 981:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 4412              		.loc 1 981 0
 4413 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 982:..\src/command_processing.c **** 
 983:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 4414              		.loc 1 983 0
 4415 0014 1C4A     		ldr	r2, .L230
 4416 0016 1D4B     		ldr	r3, .L230+4
 4417 0018 1046     		mov	r0, r2
 4418 001a 1946     		mov	r1, r3
 4419 001c 6023     		movs	r3, #96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 113


 4420 001e 1A46     		mov	r2, r3
 4421 0020 FFF7FEFF 		bl	memcpy
 984:..\src/command_processing.c **** 
 985:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 4422              		.loc 1 985 0
 4423 0024 0623     		movs	r3, #6
 4424 0026 FB60     		str	r3, [r7, #12]
 986:..\src/command_processing.c **** 
 987:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 4425              		.loc 1 987 0
 4426 0028 0023     		movs	r3, #0
 4427 002a 7B61     		str	r3, [r7, #20]
 4428 002c 18E0     		b	.L225
 4429              	.L228:
 988:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4430              		.loc 1 988 0
 4431 002e 7B69     		ldr	r3, [r7, #20]
 4432 0030 1B01     		lsls	r3, r3, #4
 4433 0032 1A46     		mov	r2, r3
 4434 0034 154B     		ldr	r3, .L230+4
 4435 0036 D018     		adds	r0, r2, r3
 4436 0038 7B69     		ldr	r3, [r7, #20]
 4437 003a DAB2     		uxtb	r2, r3
 4438 003c 7B68     		ldr	r3, [r7, #4]
 4439 003e DBB2     		uxtb	r3, r3
 4440 0040 1344     		add	r3, r3, r2
 4441 0042 DBB2     		uxtb	r3, r3
 4442 0044 1946     		mov	r1, r3
 4443 0046 FFF7FEFF 		bl	EEPROM_Write
 4444 004a 0346     		mov	r3, r0
 4445 004c FB72     		strb	r3, [r7, #11]
 989:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 4446              		.loc 1 989 0
 4447 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4448 0050 002B     		cmp	r3, #0
 4449 0052 02D0     		beq	.L226
 990:..\src/command_processing.c ****             ret_val = 0;
 4450              		.loc 1 990 0
 4451 0054 0023     		movs	r3, #0
 4452 0056 FB74     		strb	r3, [r7, #19]
 991:..\src/command_processing.c ****             break;
 4453              		.loc 1 991 0
 4454 0058 06E0     		b	.L227
 4455              	.L226:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4456              		.loc 1 987 0 discriminator 2
 4457 005a 7B69     		ldr	r3, [r7, #20]
 4458 005c 0133     		adds	r3, r3, #1
 4459 005e 7B61     		str	r3, [r7, #20]
 4460              	.L225:
 987:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4461              		.loc 1 987 0 is_stmt 0 discriminator 1
 4462 0060 7A69     		ldr	r2, [r7, #20]
 4463 0062 FB68     		ldr	r3, [r7, #12]
 4464 0064 9A42     		cmp	r2, r3
 4465 0066 E2DB     		blt	.L228
 4466              	.L227:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 114


 992:..\src/command_processing.c ****         }
 993:..\src/command_processing.c ****     }
 994:..\src/command_processing.c **** 
 995:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 4467              		.loc 1 995 0 is_stmt 1
 4468 0068 084A     		ldr	r2, .L230+4
 4469 006a 074B     		ldr	r3, .L230
 4470 006c 1046     		mov	r0, r2
 4471 006e 1946     		mov	r1, r3
 4472 0070 6023     		movs	r3, #96
 4473 0072 1A46     		mov	r2, r3
 4474 0074 FFF7FEFF 		bl	memcpy
 996:..\src/command_processing.c **** 
 997:..\src/command_processing.c ****     // Re-Enable Interrupt
 998:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 4475              		.loc 1 998 0
 4476 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 999:..\src/command_processing.c **** 
1000:..\src/command_processing.c ****     return ret_val;
 4477              		.loc 1 1000 0
 4478 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1001:..\src/command_processing.c **** }
 4479              		.loc 1 1001 0
 4480 007e 1846     		mov	r0, r3
 4481 0080 1837     		adds	r7, r7, #24
 4482              		.cfi_def_cfa_offset 8
 4483 0082 BD46     		mov	sp, r7
 4484              		.cfi_def_cfa_register 13
 4485              		@ sp needed
 4486 0084 80BD     		pop	{r7, pc}
 4487              	.L231:
 4488 0086 00BF     		.align	2
 4489              	.L230:
 4490 0088 00000000 		.word	c_mem
 4491 008c 00000000 		.word	g_mem
 4492              		.cfi_endproc
 4493              	.LFE87:
 4494              		.size	memStore, .-memStore
 4495              		.section	.text.memRecall,"ax",%progbits
 4496              		.align	2
 4497              		.global	memRecall
 4498              		.thumb
 4499              		.thumb_func
 4500              		.type	memRecall, %function
 4501              	memRecall:
 4502              	.LFB88:
1002:..\src/command_processing.c **** 
1003:..\src/command_processing.c **** 
1004:..\src/command_processing.c **** //==============================================================================
1005:..\src/command_processing.c **** //                                                                 RECALL MEMORY
1006:..\src/command_processing.c **** //==============================================================================
1007:..\src/command_processing.c **** 
1008:..\src/command_processing.c **** 
1009:..\src/command_processing.c **** void memRecall(void)
1010:..\src/command_processing.c **** {  
 4503              		.loc 1 1010 0
 4504              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 115


 4505              		@ args = 0, pretend = 0, frame = 8
 4506              		@ frame_needed = 1, uses_anonymous_args = 0
 4507 0000 80B5     		push	{r7, lr}
 4508              		.cfi_def_cfa_offset 8
 4509              		.cfi_offset 7, -8
 4510              		.cfi_offset 14, -4
 4511 0002 82B0     		sub	sp, sp, #8
 4512              		.cfi_def_cfa_offset 16
 4513 0004 00AF     		add	r7, sp, #0
 4514              		.cfi_def_cfa_register 7
1011:..\src/command_processing.c ****     uint16 i;
1012:..\src/command_processing.c **** 
1013:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4515              		.loc 1 1013 0
 4516 0006 0023     		movs	r3, #0
 4517 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4518 000a 0CE0     		b	.L233
 4519              	.L234:
1014:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4520              		.loc 1 1014 0 discriminator 3
 4521 000c FB88     		ldrh	r3, [r7, #6]
 4522 000e 114A     		ldr	r2, .L238
 4523 0010 1344     		add	r3, r3, r2
 4524 0012 114A     		ldr	r2, .L238+4
 4525 0014 1168     		ldr	r1, [r2]
 4526 0016 FA88     		ldrh	r2, [r7, #6]
 4527 0018 0A44     		add	r2, r2, r1
 4528 001a 1278     		ldrb	r2, [r2]
 4529 001c D2B2     		uxtb	r2, r2
 4530 001e 1A70     		strb	r2, [r3]
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4531              		.loc 1 1013 0 discriminator 3
 4532 0020 FB88     		ldrh	r3, [r7, #6]
 4533 0022 0133     		adds	r3, r3, #1
 4534 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 4535              	.L233:
1013:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4536              		.loc 1 1013 0 is_stmt 0 discriminator 1
 4537 0026 FB88     		ldrh	r3, [r7, #6]
 4538 0028 5F2B     		cmp	r3, #95
 4539 002a EFD9     		bls	.L234
1015:..\src/command_processing.c ****     }
1016:..\src/command_processing.c ****        //check for initialization
1017:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4540              		.loc 1 1017 0 is_stmt 1
 4541 002c 094B     		ldr	r3, .L238
 4542 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4543 0030 002B     		cmp	r3, #0
 4544 0032 02D1     		bne	.L235
1018:..\src/command_processing.c ****         memRestore();
 4545              		.loc 1 1018 0
 4546 0034 FFF7FEFF 		bl	memRestore
1019:..\src/command_processing.c ****     } else {
1020:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
1021:..\src/command_processing.c ****     }   
1022:..\src/command_processing.c **** }
 4547              		.loc 1 1022 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 116


 4548 0038 07E0     		b	.L237
 4549              	.L235:
1020:..\src/command_processing.c ****     }   
 4550              		.loc 1 1020 0
 4551 003a 084A     		ldr	r2, .L238+8
 4552 003c 054B     		ldr	r3, .L238
 4553 003e 1046     		mov	r0, r2
 4554 0040 1946     		mov	r1, r3
 4555 0042 6023     		movs	r3, #96
 4556 0044 1A46     		mov	r2, r3
 4557 0046 FFF7FEFF 		bl	memcpy
 4558              	.L237:
 4559              		.loc 1 1022 0
 4560 004a 00BF     		nop
 4561 004c 0837     		adds	r7, r7, #8
 4562              		.cfi_def_cfa_offset 8
 4563 004e BD46     		mov	sp, r7
 4564              		.cfi_def_cfa_register 13
 4565              		@ sp needed
 4566 0050 80BD     		pop	{r7, pc}
 4567              	.L239:
 4568 0052 00BF     		.align	2
 4569              	.L238:
 4570 0054 00000000 		.word	g_mem
 4571 0058 00000000 		.word	EEPROM_ADDR
 4572 005c 00000000 		.word	c_mem
 4573              		.cfi_endproc
 4574              	.LFE88:
 4575              		.size	memRecall, .-memRecall
 4576              		.section	.text.memRestore,"ax",%progbits
 4577              		.align	2
 4578              		.global	memRestore
 4579              		.thumb
 4580              		.thumb_func
 4581              		.type	memRestore, %function
 4582              	memRestore:
 4583              	.LFB89:
1023:..\src/command_processing.c **** 
1024:..\src/command_processing.c **** 
1025:..\src/command_processing.c **** //==============================================================================
1026:..\src/command_processing.c **** //                                                                RESTORE MEMORY
1027:..\src/command_processing.c **** //==============================================================================
1028:..\src/command_processing.c **** 
1029:..\src/command_processing.c **** 
1030:..\src/command_processing.c **** uint8 memRestore(void) {
 4584              		.loc 1 1030 0
 4585              		.cfi_startproc
 4586              		@ args = 0, pretend = 0, frame = 8
 4587              		@ frame_needed = 1, uses_anonymous_args = 0
 4588 0000 80B5     		push	{r7, lr}
 4589              		.cfi_def_cfa_offset 8
 4590              		.cfi_offset 7, -8
 4591              		.cfi_offset 14, -4
 4592 0002 82B0     		sub	sp, sp, #8
 4593              		.cfi_def_cfa_offset 16
 4594 0004 00AF     		add	r7, sp, #0
 4595              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 117


1031:..\src/command_processing.c ****     uint16 i;
1032:..\src/command_processing.c **** 
1033:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4596              		.loc 1 1033 0
 4597 0006 0023     		movs	r3, #0
 4598 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4599 000a 0EE0     		b	.L241
 4600              	.L242:
1034:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4601              		.loc 1 1034 0 discriminator 3
 4602 000c FB88     		ldrh	r3, [r7, #6]
 4603 000e 104A     		ldr	r2, .L245
 4604 0010 1344     		add	r3, r3, r2
 4605 0012 104A     		ldr	r2, .L245+4
 4606 0014 1168     		ldr	r1, [r2]
 4607 0016 FA88     		ldrh	r2, [r7, #6]
 4608 0018 02F54872 		add	r2, r2, #800
 4609 001c 0A44     		add	r2, r2, r1
 4610 001e 1278     		ldrb	r2, [r2]
 4611 0020 D2B2     		uxtb	r2, r2
 4612 0022 1A70     		strb	r2, [r3]
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4613              		.loc 1 1033 0 discriminator 3
 4614 0024 FB88     		ldrh	r3, [r7, #6]
 4615 0026 0133     		adds	r3, r3, #1
 4616 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 4617              	.L241:
1033:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4618              		.loc 1 1033 0 is_stmt 0 discriminator 1
 4619 002a FB88     		ldrh	r3, [r7, #6]
 4620 002c 5F2B     		cmp	r3, #95
 4621 002e EDD9     		bls	.L242
1035:..\src/command_processing.c ****     }
1036:..\src/command_processing.c **** 
1037:..\src/command_processing.c ****     //check for initialization
1038:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4622              		.loc 1 1038 0 is_stmt 1
 4623 0030 074B     		ldr	r3, .L245
 4624 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4625 0034 002B     		cmp	r3, #0
 4626 0036 03D1     		bne	.L243
1039:..\src/command_processing.c ****         return memInit();
 4627              		.loc 1 1039 0
 4628 0038 FFF7FEFF 		bl	memInit
 4629 003c 0346     		mov	r3, r0
 4630 003e 03E0     		b	.L244
 4631              	.L243:
1040:..\src/command_processing.c ****     } else {
1041:..\src/command_processing.c ****         return memStore(0);
 4632              		.loc 1 1041 0
 4633 0040 0020     		movs	r0, #0
 4634 0042 FFF7FEFF 		bl	memStore
 4635 0046 0346     		mov	r3, r0
 4636              	.L244:
1042:..\src/command_processing.c ****     }  
1043:..\src/command_processing.c **** }
 4637              		.loc 1 1043 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 118


 4638 0048 1846     		mov	r0, r3
 4639 004a 0837     		adds	r7, r7, #8
 4640              		.cfi_def_cfa_offset 8
 4641 004c BD46     		mov	sp, r7
 4642              		.cfi_def_cfa_register 13
 4643              		@ sp needed
 4644 004e 80BD     		pop	{r7, pc}
 4645              	.L246:
 4646              		.align	2
 4647              	.L245:
 4648 0050 00000000 		.word	g_mem
 4649 0054 00000000 		.word	EEPROM_ADDR
 4650              		.cfi_endproc
 4651              	.LFE89:
 4652              		.size	memRestore, .-memRestore
 4653              		.section	.text.memInit,"ax",%progbits
 4654              		.align	2
 4655              		.global	memInit
 4656              		.thumb
 4657              		.thumb_func
 4658              		.type	memInit, %function
 4659              	memInit:
 4660              	.LFB90:
1044:..\src/command_processing.c **** 
1045:..\src/command_processing.c **** //==============================================================================
1046:..\src/command_processing.c **** //                                                                   MEMORY INIT
1047:..\src/command_processing.c **** //==============================================================================
1048:..\src/command_processing.c **** 
1049:..\src/command_processing.c **** uint8 memInit(void)
1050:..\src/command_processing.c **** {
 4661              		.loc 1 1050 0
 4662              		.cfi_startproc
 4663              		@ args = 0, pretend = 0, frame = 0
 4664              		@ frame_needed = 1, uses_anonymous_args = 0
 4665 0000 80B5     		push	{r7, lr}
 4666              		.cfi_def_cfa_offset 8
 4667              		.cfi_offset 7, -8
 4668              		.cfi_offset 14, -4
 4669 0002 00AF     		add	r7, sp, #0
 4670              		.cfi_def_cfa_register 7
1051:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1052:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4671              		.loc 1 1052 0
 4672 0004 2F4B     		ldr	r3, .L251
 4673 0006 0122     		movs	r2, #1
 4674 0008 1A70     		strb	r2, [r3]
1053:..\src/command_processing.c ****     
1054:..\src/command_processing.c ****     // DEV STRUCT
1055:..\src/command_processing.c ****     g_mem.dev.id = 2;
 4675              		.loc 1 1055 0
 4676 000a 2E4B     		ldr	r3, .L251
 4677 000c 0222     		movs	r2, #2
 4678 000e 1A74     		strb	r2, [r3, #16]
1056:..\src/command_processing.c ****     
1057:..\src/command_processing.c ****     // SH STRUCT
1058:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 4679              		.loc 1 1058 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 119


 4680 0010 2C4B     		ldr	r3, .L251
 4681 0012 0022     		movs	r2, #0
 4682 0014 1A62     		str	r2, [r3, #32]
1059:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 4683              		.loc 1 1059 0
 4684 0016 2B4B     		ldr	r3, .L251
 4685 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 4686 001c 1A46     		mov	r2, r3
 4687 001e 4FF47A53 		mov	r3, #16000
 4688 0022 9340     		lsls	r3, r3, r2
 4689 0024 274A     		ldr	r2, .L251
 4690 0026 5362     		str	r3, [r2, #36]
1060:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 4691              		.loc 1 1060 0
 4692 0028 264B     		ldr	r3, .L251
 4693 002a 0422     		movs	r2, #4
 4694 002c 83F82820 		strb	r2, [r3, #40]
1061:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 4695              		.loc 1 1061 0
 4696 0030 244B     		ldr	r3, .L251
 4697 0032 0322     		movs	r2, #3
 4698 0034 83F82920 		strb	r2, [r3, #41]
1062:..\src/command_processing.c **** 
1063:..\src/command_processing.c ****     // EMG STRUCT     
1064:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4699              		.loc 1 1064 0
 4700 0038 224B     		ldr	r3, .L251
 4701 003a C822     		movs	r2, #200
 4702 003c 1A86     		strh	r2, [r3, #48]	@ movhi
1065:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4703              		.loc 1 1065 0
 4704 003e 214B     		ldr	r3, .L251
 4705 0040 C822     		movs	r2, #200
 4706 0042 5A86     		strh	r2, [r3, #50]	@ movhi
1066:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4707              		.loc 1 1066 0
 4708 0044 1F4B     		ldr	r3, .L251
 4709 0046 4FF48062 		mov	r2, #1024
 4710 004a 5A63     		str	r2, [r3, #52]
1067:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4711              		.loc 1 1067 0
 4712 004c 1D4B     		ldr	r3, .L251
 4713 004e 4FF48062 		mov	r2, #1024
 4714 0052 9A63     		str	r2, [r3, #56]
1068:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4715              		.loc 1 1068 0
 4716 0054 1B4B     		ldr	r3, .L251
 4717 0056 6422     		movs	r2, #100
 4718 0058 83F83C20 		strb	r2, [r3, #60]
1069:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4719              		.loc 1 1069 0
 4720 005c 194B     		ldr	r3, .L251
 4721 005e 6422     		movs	r2, #100
 4722 0060 83F83D20 		strb	r2, [r3, #61]
1070:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4723              		.loc 1 1070 0
 4724 0064 174B     		ldr	r3, .L251
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 120


 4725 0066 0022     		movs	r2, #0
 4726 0068 83F83E20 		strb	r2, [r3, #62]
1071:..\src/command_processing.c ****     
1072:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
1073:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4727              		.loc 1 1073 0
 4728 006c 154B     		ldr	r3, .L251
 4729 006e 0022     		movs	r2, #0
 4730 0070 83F84020 		strb	r2, [r3, #64]
1074:..\src/command_processing.c ****     
1075:..\src/command_processing.c ****     
1076:..\src/command_processing.c ****     //FEEDBACK STRUCT
1077:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4731              		.loc 1 1077 0
 4732 0074 134B     		ldr	r3, .L251
 4733 0076 4FF4E172 		mov	r2, #450
 4734 007a 1A65     		str	r2, [r3, #80]
1078:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4735              		.loc 1 1078 0
 4736 007c 114B     		ldr	r3, .L251
 4737 007e 124A     		ldr	r2, .L251+4
 4738 0080 5A65     		str	r2, [r3, #84]	@ float
1079:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 4739              		.loc 1 1079 0
 4740 0082 104B     		ldr	r3, .L251
 4741 0084 4FF07E52 		mov	r2, #1065353216
 4742 0088 9A65     		str	r2, [r3, #88]	@ float
1080:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 4743              		.loc 1 1080 0
 4744 008a 0E4B     		ldr	r3, .L251
 4745 008c 0022     		movs	r2, #0
 4746 008e 83F85C20 		strb	r2, [r3, #92]
1081:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 4747              		.loc 1 1081 0
 4748 0092 0C4B     		ldr	r3, .L251
 4749 0094 0022     		movs	r2, #0
 4750 0096 83F85D20 		strb	r2, [r3, #93]
1082:..\src/command_processing.c ****     
1083:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1084:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4751              		.loc 1 1084 0
 4752 009a 0A4B     		ldr	r3, .L251
 4753 009c 0122     		movs	r2, #1
 4754 009e 1A70     		strb	r2, [r3]
1085:..\src/command_processing.c ****     
1086:..\src/command_processing.c ****     //write that configuration to EEPROM
1087:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 4755              		.loc 1 1087 0
 4756 00a0 0020     		movs	r0, #0
 4757 00a2 FFF7FEFF 		bl	memStore
 4758 00a6 0346     		mov	r3, r0
 4759 00a8 002B     		cmp	r3, #0
 4760 00aa 07D0     		beq	.L248
 4761              		.loc 1 1087 0 is_stmt 0 discriminator 1
 4762 00ac 3220     		movs	r0, #50
 4763 00ae FFF7FEFF 		bl	memStore
 4764 00b2 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 121


 4765 00b4 002B     		cmp	r3, #0
 4766 00b6 01D0     		beq	.L248
 4767              		.loc 1 1087 0 discriminator 3
 4768 00b8 0123     		movs	r3, #1
 4769 00ba 00E0     		b	.L249
 4770              	.L248:
 4771              		.loc 1 1087 0 discriminator 4
 4772 00bc 0023     		movs	r3, #0
 4773              	.L249:
 4774              		.loc 1 1087 0 discriminator 6
 4775 00be DBB2     		uxtb	r3, r3
 4776 00c0 1846     		mov	r0, r3
 4777 00c2 80BD     		pop	{r7, pc}
 4778              	.L252:
 4779              		.align	2
 4780              	.L251:
 4781 00c4 00000000 		.word	g_mem
 4782 00c8 0000C841 		.word	1103626240
 4783              		.cfi_endproc
 4784              	.LFE90:
 4785              		.size	memInit, .-memInit
 4786              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 4787              		.align	2
 4788              		.global	memInit_SoftHandPro
 4789              		.thumb
 4790              		.thumb_func
 4791              		.type	memInit_SoftHandPro, %function
 4792              	memInit_SoftHandPro:
 4793              	.LFB91:
1088:..\src/command_processing.c **** 
1089:..\src/command_processing.c **** //==============================================================================
1090:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
1091:..\src/command_processing.c **** //==============================================================================
1092:..\src/command_processing.c **** void memInit_SoftHandPro(void)
1093:..\src/command_processing.c **** {
 4794              		.loc 1 1093 0 is_stmt 1
 4795              		.cfi_startproc
 4796              		@ args = 0, pretend = 0, frame = 0
 4797              		@ frame_needed = 1, uses_anonymous_args = 0
 4798              		@ link register save eliminated.
 4799 0000 80B4     		push	{r7}
 4800              		.cfi_def_cfa_offset 4
 4801              		.cfi_offset 7, -4
 4802 0002 00AF     		add	r7, sp, #0
 4803              		.cfi_def_cfa_register 7
1094:..\src/command_processing.c **** }
 4804              		.loc 1 1094 0
 4805 0004 00BF     		nop
 4806 0006 BD46     		mov	sp, r7
 4807              		.cfi_def_cfa_register 13
 4808              		@ sp needed
 4809 0008 80BC     		pop	{r7}
 4810              		.cfi_restore 7
 4811              		.cfi_def_cfa_offset 0
 4812 000a 7047     		bx	lr
 4813              		.cfi_endproc
 4814              	.LFE91:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 122


 4815              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 4816              		.section	.text.memInit_Master,"ax",%progbits
 4817              		.align	2
 4818              		.global	memInit_Master
 4819              		.thumb
 4820              		.thumb_func
 4821              		.type	memInit_Master, %function
 4822              	memInit_Master:
 4823              	.LFB92:
1095:..\src/command_processing.c **** 
1096:..\src/command_processing.c **** //==============================================================================
1097:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
1098:..\src/command_processing.c **** //==============================================================================
1099:..\src/command_processing.c **** void memInit_Master(void)
1100:..\src/command_processing.c **** {
 4824              		.loc 1 1100 0
 4825              		.cfi_startproc
 4826              		@ args = 0, pretend = 0, frame = 0
 4827              		@ frame_needed = 1, uses_anonymous_args = 0
 4828              		@ link register save eliminated.
 4829 0000 80B4     		push	{r7}
 4830              		.cfi_def_cfa_offset 4
 4831              		.cfi_offset 7, -4
 4832 0002 00AF     		add	r7, sp, #0
 4833              		.cfi_def_cfa_register 7
1101:..\src/command_processing.c **** }
 4834              		.loc 1 1101 0
 4835 0004 00BF     		nop
 4836 0006 BD46     		mov	sp, r7
 4837              		.cfi_def_cfa_register 13
 4838              		@ sp needed
 4839 0008 80BC     		pop	{r7}
 4840              		.cfi_restore 7
 4841              		.cfi_def_cfa_offset 0
 4842 000a 7047     		bx	lr
 4843              		.cfi_endproc
 4844              	.LFE92:
 4845              		.size	memInit_Master, .-memInit_Master
 4846              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 4847              		.align	2
 4848              		.global	memInit_AirChambers_Vibrotactile_Fb
 4849              		.thumb
 4850              		.thumb_func
 4851              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 4852              	memInit_AirChambers_Vibrotactile_Fb:
 4853              	.LFB93:
1102:..\src/command_processing.c **** 
1103:..\src/command_processing.c **** //==============================================================================
1104:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
1105:..\src/command_processing.c **** //==============================================================================
1106:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
1107:..\src/command_processing.c **** {
 4854              		.loc 1 1107 0
 4855              		.cfi_startproc
 4856              		@ args = 0, pretend = 0, frame = 0
 4857              		@ frame_needed = 1, uses_anonymous_args = 0
 4858              		@ link register save eliminated.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 123


 4859 0000 80B4     		push	{r7}
 4860              		.cfi_def_cfa_offset 4
 4861              		.cfi_offset 7, -4
 4862 0002 00AF     		add	r7, sp, #0
 4863              		.cfi_def_cfa_register 7
1108:..\src/command_processing.c **** }
 4864              		.loc 1 1108 0
 4865 0004 00BF     		nop
 4866 0006 BD46     		mov	sp, r7
 4867              		.cfi_def_cfa_register 13
 4868              		@ sp needed
 4869 0008 80BC     		pop	{r7}
 4870              		.cfi_restore 7
 4871              		.cfi_def_cfa_offset 0
 4872 000a 7047     		bx	lr
 4873              		.cfi_endproc
 4874              	.LFE93:
 4875              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 4876              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 4877              		.align	2
 4878              		.global	memInit_OtbkActWristMs
 4879              		.thumb
 4880              		.thumb_func
 4881              		.type	memInit_OtbkActWristMs, %function
 4882              	memInit_OtbkActWristMs:
 4883              	.LFB94:
1109:..\src/command_processing.c **** 
1110:..\src/command_processing.c **** //==============================================================================
1111:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
1112:..\src/command_processing.c **** //==============================================================================
1113:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
1114:..\src/command_processing.c **** {
 4884              		.loc 1 1114 0
 4885              		.cfi_startproc
 4886              		@ args = 0, pretend = 0, frame = 0
 4887              		@ frame_needed = 1, uses_anonymous_args = 0
 4888              		@ link register save eliminated.
 4889 0000 80B4     		push	{r7}
 4890              		.cfi_def_cfa_offset 4
 4891              		.cfi_offset 7, -4
 4892 0002 00AF     		add	r7, sp, #0
 4893              		.cfi_def_cfa_register 7
1115:..\src/command_processing.c **** }
 4894              		.loc 1 1115 0
 4895 0004 00BF     		nop
 4896 0006 BD46     		mov	sp, r7
 4897              		.cfi_def_cfa_register 13
 4898              		@ sp needed
 4899 0008 80BC     		pop	{r7}
 4900              		.cfi_restore 7
 4901              		.cfi_def_cfa_offset 0
 4902 000a 7047     		bx	lr
 4903              		.cfi_endproc
 4904              	.LFE94:
 4905              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 4906              		.section	.text.cmd_get_measurements,"ax",%progbits
 4907              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 124


 4908              		.global	cmd_get_measurements
 4909              		.thumb
 4910              		.thumb_func
 4911              		.type	cmd_get_measurements, %function
 4912              	cmd_get_measurements:
 4913              	.LFB95:
1116:..\src/command_processing.c **** 
1117:..\src/command_processing.c **** //==============================================================================
1118:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
1119:..\src/command_processing.c **** //==============================================================================
1120:..\src/command_processing.c **** /**
1121:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1122:..\src/command_processing.c **** **/
1123:..\src/command_processing.c **** 
1124:..\src/command_processing.c **** void cmd_get_measurements(){
 4914              		.loc 1 1124 0
 4915              		.cfi_startproc
 4916              		@ args = 0, pretend = 0, frame = 0
 4917              		@ frame_needed = 1, uses_anonymous_args = 0
 4918              		@ link register save eliminated.
 4919 0000 80B4     		push	{r7}
 4920              		.cfi_def_cfa_offset 4
 4921              		.cfi_offset 7, -4
 4922 0002 00AF     		add	r7, sp, #0
 4923              		.cfi_def_cfa_register 7
1125:..\src/command_processing.c ****  
1126:..\src/command_processing.c ****    
1127:..\src/command_processing.c **** }
 4924              		.loc 1 1127 0
 4925 0004 00BF     		nop
 4926 0006 BD46     		mov	sp, r7
 4927              		.cfi_def_cfa_register 13
 4928              		@ sp needed
 4929 0008 80BC     		pop	{r7}
 4930              		.cfi_restore 7
 4931              		.cfi_def_cfa_offset 0
 4932 000a 7047     		bx	lr
 4933              		.cfi_endproc
 4934              	.LFE95:
 4935              		.size	cmd_get_measurements, .-cmd_get_measurements
 4936              		.section	.text.cmd_get_velocities,"ax",%progbits
 4937              		.align	2
 4938              		.global	cmd_get_velocities
 4939              		.thumb
 4940              		.thumb_func
 4941              		.type	cmd_get_velocities, %function
 4942              	cmd_get_velocities:
 4943              	.LFB96:
1128:..\src/command_processing.c **** 
1129:..\src/command_processing.c **** void cmd_get_velocities(){
 4944              		.loc 1 1129 0
 4945              		.cfi_startproc
 4946              		@ args = 0, pretend = 0, frame = 0
 4947              		@ frame_needed = 1, uses_anonymous_args = 0
 4948              		@ link register save eliminated.
 4949 0000 80B4     		push	{r7}
 4950              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 125


 4951              		.cfi_offset 7, -4
 4952 0002 00AF     		add	r7, sp, #0
 4953              		.cfi_def_cfa_register 7
1130:..\src/command_processing.c ****  
1131:..\src/command_processing.c **** }
 4954              		.loc 1 1131 0
 4955 0004 00BF     		nop
 4956 0006 BD46     		mov	sp, r7
 4957              		.cfi_def_cfa_register 13
 4958              		@ sp needed
 4959 0008 80BC     		pop	{r7}
 4960              		.cfi_restore 7
 4961              		.cfi_def_cfa_offset 0
 4962 000a 7047     		bx	lr
 4963              		.cfi_endproc
 4964              	.LFE96:
 4965              		.size	cmd_get_velocities, .-cmd_get_velocities
 4966              		.section	.text.cmd_get_accelerations,"ax",%progbits
 4967              		.align	2
 4968              		.global	cmd_get_accelerations
 4969              		.thumb
 4970              		.thumb_func
 4971              		.type	cmd_get_accelerations, %function
 4972              	cmd_get_accelerations:
 4973              	.LFB97:
1132:..\src/command_processing.c **** 
1133:..\src/command_processing.c **** void cmd_get_accelerations(){
 4974              		.loc 1 1133 0
 4975              		.cfi_startproc
 4976              		@ args = 0, pretend = 0, frame = 0
 4977              		@ frame_needed = 1, uses_anonymous_args = 0
 4978              		@ link register save eliminated.
 4979 0000 80B4     		push	{r7}
 4980              		.cfi_def_cfa_offset 4
 4981              		.cfi_offset 7, -4
 4982 0002 00AF     		add	r7, sp, #0
 4983              		.cfi_def_cfa_register 7
1134:..\src/command_processing.c ****  
1135:..\src/command_processing.c **** }
 4984              		.loc 1 1135 0
 4985 0004 00BF     		nop
 4986 0006 BD46     		mov	sp, r7
 4987              		.cfi_def_cfa_register 13
 4988              		@ sp needed
 4989 0008 80BC     		pop	{r7}
 4990              		.cfi_restore 7
 4991              		.cfi_def_cfa_offset 0
 4992 000a 7047     		bx	lr
 4993              		.cfi_endproc
 4994              	.LFE97:
 4995              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 4996              		.section	.text.cmd_get_joystick,"ax",%progbits
 4997              		.align	2
 4998              		.global	cmd_get_joystick
 4999              		.thumb
 5000              		.thumb_func
 5001              		.type	cmd_get_joystick, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 126


 5002              	cmd_get_joystick:
 5003              	.LFB98:
1136:..\src/command_processing.c **** 
1137:..\src/command_processing.c **** void cmd_get_joystick() {
 5004              		.loc 1 1137 0
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 0
 5007              		@ frame_needed = 1, uses_anonymous_args = 0
 5008              		@ link register save eliminated.
 5009 0000 80B4     		push	{r7}
 5010              		.cfi_def_cfa_offset 4
 5011              		.cfi_offset 7, -4
 5012 0002 00AF     		add	r7, sp, #0
 5013              		.cfi_def_cfa_register 7
1138:..\src/command_processing.c ****  
1139:..\src/command_processing.c **** }
 5014              		.loc 1 1139 0
 5015 0004 00BF     		nop
 5016 0006 BD46     		mov	sp, r7
 5017              		.cfi_def_cfa_register 13
 5018              		@ sp needed
 5019 0008 80BC     		pop	{r7}
 5020              		.cfi_restore 7
 5021              		.cfi_def_cfa_offset 0
 5022 000a 7047     		bx	lr
 5023              		.cfi_endproc
 5024              	.LFE98:
 5025              		.size	cmd_get_joystick, .-cmd_get_joystick
 5026              		.section	.text.cmd_set_inputs,"ax",%progbits
 5027              		.align	2
 5028              		.global	cmd_set_inputs
 5029              		.thumb
 5030              		.thumb_func
 5031              		.type	cmd_set_inputs, %function
 5032              	cmd_set_inputs:
 5033              	.LFB99:
1140:..\src/command_processing.c **** 
1141:..\src/command_processing.c **** void cmd_set_inputs(){
 5034              		.loc 1 1141 0
 5035              		.cfi_startproc
 5036              		@ args = 0, pretend = 0, frame = 8
 5037              		@ frame_needed = 1, uses_anonymous_args = 0
 5038              		@ link register save eliminated.
 5039 0000 80B4     		push	{r7}
 5040              		.cfi_def_cfa_offset 4
 5041              		.cfi_offset 7, -4
 5042 0002 83B0     		sub	sp, sp, #12
 5043              		.cfi_def_cfa_offset 16
 5044 0004 00AF     		add	r7, sp, #0
 5045              		.cfi_def_cfa_register 7
1142:..\src/command_processing.c ****      // Store position setted in right variables
1143:..\src/command_processing.c ****     int16 aux_int16[3];
1144:..\src/command_processing.c ****     static int16 last_aux_int16[3];
1145:..\src/command_processing.c ****     
1146:..\src/command_processing.c ****     aux_int16[0] = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 5046              		.loc 1 1146 0
 5047 0006 294B     		ldr	r3, .L268
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 127


 5048 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5049 000a 1B02     		lsls	r3, r3, #8
 5050 000c 1AB2     		sxth	r2, r3
 5051 000e 274B     		ldr	r3, .L268
 5052 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5053 0012 1BB2     		sxth	r3, r3
 5054 0014 1343     		orrs	r3, r3, r2
 5055 0016 1BB2     		sxth	r3, r3
 5056 0018 3B80     		strh	r3, [r7]	@ movhi
1147:..\src/command_processing.c ****     aux_int16[1] = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 5057              		.loc 1 1147 0
 5058 001a 244B     		ldr	r3, .L268
 5059 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5060 001e 1B02     		lsls	r3, r3, #8
 5061 0020 1AB2     		sxth	r2, r3
 5062 0022 224B     		ldr	r3, .L268
 5063 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5064 0026 1BB2     		sxth	r3, r3
 5065 0028 1343     		orrs	r3, r3, r2
 5066 002a 1BB2     		sxth	r3, r3
 5067 002c 7B80     		strh	r3, [r7, #2]	@ movhi
1148:..\src/command_processing.c ****     aux_int16[2] = (int16)(g_rx.buffer[5]<<8 | g_rx.buffer[6]);
 5068              		.loc 1 1148 0
 5069 002e 1F4B     		ldr	r3, .L268
 5070 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 5071 0032 1B02     		lsls	r3, r3, #8
 5072 0034 1AB2     		sxth	r2, r3
 5073 0036 1D4B     		ldr	r3, .L268
 5074 0038 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5075 003a 1BB2     		sxth	r3, r3
 5076 003c 1343     		orrs	r3, r3, r2
 5077 003e 1BB2     		sxth	r3, r3
 5078 0040 BB80     		strh	r3, [r7, #4]	@ movhi
 5079              	.LBB28:
1149:..\src/command_processing.c ****     // Check if last command received was the same as this 
1150:..\src/command_processing.c ****     //(Note: last command not last motor reference in g_ref)
1151:..\src/command_processing.c ****     for (uint8 i = 0; i < 3; i++) {
 5080              		.loc 1 1151 0
 5081 0042 0023     		movs	r3, #0
 5082 0044 FB71     		strb	r3, [r7, #7]
 5083 0046 06E0     		b	.L262
 5084              	.L263:
1152:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
1153:..\src/command_processing.c ****             change_ext_ref_flag[i] = TRUE;
 5085              		.loc 1 1153 0 discriminator 3
 5086 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5087 004a 194A     		ldr	r2, .L268+4
 5088 004c 0121     		movs	r1, #1
 5089 004e D154     		strb	r1, [r2, r3]
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5090              		.loc 1 1151 0 discriminator 3
 5091 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5092 0052 0133     		adds	r3, r3, #1
 5093 0054 FB71     		strb	r3, [r7, #7]
 5094              	.L262:
1151:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5095              		.loc 1 1151 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 128


 5096 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5097 0058 022B     		cmp	r3, #2
 5098 005a F5D9     		bls	.L263
 5099              	.LBE28:
1154:..\src/command_processing.c ****        }
1155:..\src/command_processing.c ****         // Update last command
1156:..\src/command_processing.c ****       // last_aux_int16[i] = aux_int16[i];
1157:..\src/command_processing.c ****     
1158:..\src/command_processing.c ****     
1159:..\src/command_processing.c ****     // Update g_refNew in case a new command has been received
1160:..\src/command_processing.c ****     if (change_ext_ref_flag[0]) {
 5100              		.loc 1 1160 0 is_stmt 1
 5101 005c 144B     		ldr	r3, .L268+4
 5102 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5103 0060 002B     		cmp	r3, #0
 5104 0062 0BD0     		beq	.L264
1161:..\src/command_processing.c ****         Pump_refNew = aux_int16[0];
 5105              		.loc 1 1161 0
 5106 0064 B7F90030 		ldrsh	r3, [r7]
 5107 0068 DAB2     		uxtb	r2, r3
 5108 006a 124B     		ldr	r3, .L268+8
 5109 006c 1A70     		strb	r2, [r3]
1162:..\src/command_processing.c ****                 
1163:..\src/command_processing.c ****         // Check if the reference is nor higher or lower than the position limits
1164:..\src/command_processing.c ****         if (Pump_refNew < 0)
1165:..\src/command_processing.c ****             Pump_refNew = 0;
1166:..\src/command_processing.c ****                 
1167:..\src/command_processing.c ****         if (Pump_refNew > 100)
 5110              		.loc 1 1167 0
 5111 006e 114B     		ldr	r3, .L268+8
 5112 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5113 0072 642B     		cmp	r3, #100
 5114 0074 02D9     		bls	.L264
1168:..\src/command_processing.c ****             Pump_refNew = 100;       
 5115              		.loc 1 1168 0
 5116 0076 0F4B     		ldr	r3, .L268+8
 5117 0078 6422     		movs	r2, #100
 5118 007a 1A70     		strb	r2, [r3]
 5119              	.L264:
1169:..\src/command_processing.c ****     }
1170:..\src/command_processing.c ****     
1171:..\src/command_processing.c ****     if (change_ext_ref_flag[1]) 
 5120              		.loc 1 1171 0
 5121 007c 0C4B     		ldr	r3, .L268+4
 5122 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5123 0080 002B     		cmp	r3, #0
 5124 0082 04D0     		beq	.L265
1172:..\src/command_processing.c ****         VT_refNew[0] = aux_int16[1];
 5125              		.loc 1 1172 0
 5126 0084 B7F90230 		ldrsh	r3, [r7, #2]
 5127 0088 DAB2     		uxtb	r2, r3
 5128 008a 0B4B     		ldr	r3, .L268+12
 5129 008c 1A70     		strb	r2, [r3]
 5130              	.L265:
1173:..\src/command_processing.c ****     
1174:..\src/command_processing.c ****     if (change_ext_ref_flag[2]) 
 5131              		.loc 1 1174 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 129


 5132 008e 084B     		ldr	r3, .L268+4
 5133 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5134 0092 002B     		cmp	r3, #0
 5135 0094 04D0     		beq	.L267
1175:..\src/command_processing.c ****         VT_refNew[1] = aux_int16[2];
 5136              		.loc 1 1175 0
 5137 0096 B7F90430 		ldrsh	r3, [r7, #4]
 5138 009a DAB2     		uxtb	r2, r3
 5139 009c 064B     		ldr	r3, .L268+12
 5140 009e 5A70     		strb	r2, [r3, #1]
 5141              	.L267:
1176:..\src/command_processing.c ****                 
1177:..\src/command_processing.c ****    }
 5142              		.loc 1 1177 0
 5143 00a0 00BF     		nop
 5144 00a2 0C37     		adds	r7, r7, #12
 5145              		.cfi_def_cfa_offset 4
 5146 00a4 BD46     		mov	sp, r7
 5147              		.cfi_def_cfa_register 13
 5148              		@ sp needed
 5149 00a6 80BC     		pop	{r7}
 5150              		.cfi_restore 7
 5151              		.cfi_def_cfa_offset 0
 5152 00a8 7047     		bx	lr
 5153              	.L269:
 5154 00aa 00BF     		.align	2
 5155              	.L268:
 5156 00ac 00000000 		.word	g_rx
 5157 00b0 00000000 		.word	change_ext_ref_flag
 5158 00b4 00000000 		.word	Pump_refNew
 5159 00b8 00000000 		.word	VT_refNew
 5160              		.cfi_endproc
 5161              	.LFE99:
 5162              		.size	cmd_set_inputs, .-cmd_set_inputs
 5163              		.section	.text.cmd_activate,"ax",%progbits
 5164              		.align	2
 5165              		.global	cmd_activate
 5166              		.thumb
 5167              		.thumb_func
 5168              		.type	cmd_activate, %function
 5169              	cmd_activate:
 5170              	.LFB100:
1178:..\src/command_processing.c **** 
1179:..\src/command_processing.c **** void cmd_activate(){
 5171              		.loc 1 1179 0
 5172              		.cfi_startproc
 5173              		@ args = 0, pretend = 0, frame = 8
 5174              		@ frame_needed = 1, uses_anonymous_args = 0
 5175 0000 80B5     		push	{r7, lr}
 5176              		.cfi_def_cfa_offset 8
 5177              		.cfi_offset 7, -8
 5178              		.cfi_offset 14, -4
 5179 0002 82B0     		sub	sp, sp, #8
 5180              		.cfi_def_cfa_offset 16
 5181 0004 00AF     		add	r7, sp, #0
 5182              		.cfi_def_cfa_register 7
1180:..\src/command_processing.c ****  uint8 aux = g_rx.buffer[1];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 130


 5183              		.loc 1 1180 0
 5184 0006 084B     		ldr	r3, .L271
 5185 0008 5B78     		ldrb	r3, [r3, #1]
 5186 000a FB71     		strb	r3, [r7, #7]
1181:..\src/command_processing.c ****  VALVE_Write((aux >> 1) & 0x01);
 5187              		.loc 1 1181 0
 5188 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5189 000e 5B08     		lsrs	r3, r3, #1
 5190 0010 DBB2     		uxtb	r3, r3
 5191 0012 03F00103 		and	r3, r3, #1
 5192 0016 DBB2     		uxtb	r3, r3
 5193 0018 1846     		mov	r0, r3
 5194 001a FFF7FEFF 		bl	VALVE_Write
1182:..\src/command_processing.c ****  
1183:..\src/command_processing.c **** }
 5195              		.loc 1 1183 0
 5196 001e 00BF     		nop
 5197 0020 0837     		adds	r7, r7, #8
 5198              		.cfi_def_cfa_offset 8
 5199 0022 BD46     		mov	sp, r7
 5200              		.cfi_def_cfa_register 13
 5201              		@ sp needed
 5202 0024 80BD     		pop	{r7, pc}
 5203              	.L272:
 5204 0026 00BF     		.align	2
 5205              	.L271:
 5206 0028 00000000 		.word	g_rx
 5207              		.cfi_endproc
 5208              	.LFE100:
 5209              		.size	cmd_activate, .-cmd_activate
 5210              		.section	.text.cmd_get_activate,"ax",%progbits
 5211              		.align	2
 5212              		.global	cmd_get_activate
 5213              		.thumb
 5214              		.thumb_func
 5215              		.type	cmd_get_activate, %function
 5216              	cmd_get_activate:
 5217              	.LFB101:
1184:..\src/command_processing.c **** 
1185:..\src/command_processing.c **** void cmd_get_activate(){
 5218              		.loc 1 1185 0
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 0
 5221              		@ frame_needed = 1, uses_anonymous_args = 0
 5222              		@ link register save eliminated.
 5223 0000 80B4     		push	{r7}
 5224              		.cfi_def_cfa_offset 4
 5225              		.cfi_offset 7, -4
 5226 0002 00AF     		add	r7, sp, #0
 5227              		.cfi_def_cfa_register 7
1186:..\src/command_processing.c ****     
1187:..\src/command_processing.c **** }
 5228              		.loc 1 1187 0
 5229 0004 00BF     		nop
 5230 0006 BD46     		mov	sp, r7
 5231              		.cfi_def_cfa_register 13
 5232              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 131


 5233 0008 80BC     		pop	{r7}
 5234              		.cfi_restore 7
 5235              		.cfi_def_cfa_offset 0
 5236 000a 7047     		bx	lr
 5237              		.cfi_endproc
 5238              	.LFE101:
 5239              		.size	cmd_get_activate, .-cmd_get_activate
 5240              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 5241              		.align	2
 5242              		.global	cmd_get_curr_and_meas
 5243              		.thumb
 5244              		.thumb_func
 5245              		.type	cmd_get_curr_and_meas, %function
 5246              	cmd_get_curr_and_meas:
 5247              	.LFB102:
1188:..\src/command_processing.c **** 
1189:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 5248              		.loc 1 1189 0
 5249              		.cfi_startproc
 5250              		@ args = 0, pretend = 0, frame = 0
 5251              		@ frame_needed = 1, uses_anonymous_args = 0
 5252              		@ link register save eliminated.
 5253 0000 80B4     		push	{r7}
 5254              		.cfi_def_cfa_offset 4
 5255              		.cfi_offset 7, -4
 5256 0002 00AF     		add	r7, sp, #0
 5257              		.cfi_def_cfa_register 7
1190:..\src/command_processing.c ****    
1191:..\src/command_processing.c ****    
1192:..\src/command_processing.c **** }
 5258              		.loc 1 1192 0
 5259 0004 00BF     		nop
 5260 0006 BD46     		mov	sp, r7
 5261              		.cfi_def_cfa_register 13
 5262              		@ sp needed
 5263 0008 80BC     		pop	{r7}
 5264              		.cfi_restore 7
 5265              		.cfi_def_cfa_offset 0
 5266 000a 7047     		bx	lr
 5267              		.cfi_endproc
 5268              	.LFE102:
 5269              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 5270              		.section	.text.cmd_get_currents,"ax",%progbits
 5271              		.align	2
 5272              		.global	cmd_get_currents
 5273              		.thumb
 5274              		.thumb_func
 5275              		.type	cmd_get_currents, %function
 5276              	cmd_get_currents:
 5277              	.LFB103:
1193:..\src/command_processing.c **** 
1194:..\src/command_processing.c **** void cmd_get_currents(){
 5278              		.loc 1 1194 0
 5279              		.cfi_startproc
 5280              		@ args = 0, pretend = 0, frame = 16
 5281              		@ frame_needed = 1, uses_anonymous_args = 0
 5282 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 132


 5283              		.cfi_def_cfa_offset 8
 5284              		.cfi_offset 7, -8
 5285              		.cfi_offset 14, -4
 5286 0002 84B0     		sub	sp, sp, #16
 5287              		.cfi_def_cfa_offset 24
 5288 0004 00AF     		add	r7, sp, #0
 5289              		.cfi_def_cfa_register 7
1195:..\src/command_processing.c ****    
1196:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
1197:..\src/command_processing.c ****     
1198:..\src/command_processing.c ****     uint8 packet_data[6]; 
1199:..\src/command_processing.c ****     int16 aux_int16;
1200:..\src/command_processing.c ****     
1201:..\src/command_processing.c ****     //Header package
1202:..\src/command_processing.c **** 
1203:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
 5290              		.loc 1 1203 0
 5291 0006 8523     		movs	r3, #133
 5292 0008 3B72     		strb	r3, [r7, #8]
1204:..\src/command_processing.c **** 
1205:..\src/command_processing.c ****      // Send pressure times 100 here instead of current (Simulink use)
1206:..\src/command_processing.c ****     aux_int16 = (int16)(pressure_value * 1000); //Pressure
 5293              		.loc 1 1206 0
 5294 000a 1B4B     		ldr	r3, .L277
 5295 000c 1B68     		ldr	r3, [r3]
 5296 000e 9BB2     		uxth	r3, r3
 5297 0010 1A46     		mov	r2, r3	@ movhi
 5298 0012 5201     		lsls	r2, r2, #5
 5299 0014 D21A     		subs	r2, r2, r3
 5300 0016 9200     		lsls	r2, r2, #2
 5301 0018 1344     		add	r3, r3, r2
 5302 001a DB00     		lsls	r3, r3, #3
 5303 001c 9BB2     		uxth	r3, r3
 5304 001e 1BB2     		sxth	r3, r3
 5305 0020 FB80     		strh	r3, [r7, #6]	@ movhi
1207:..\src/command_processing.c ****     if (aux_int16 < 0) aux_int16 = 0;
 5306              		.loc 1 1207 0
 5307 0022 B7F90630 		ldrsh	r3, [r7, #6]
 5308 0026 002B     		cmp	r3, #0
 5309 0028 01DA     		bge	.L276
 5310              		.loc 1 1207 0 is_stmt 0 discriminator 1
 5311 002a 0023     		movs	r3, #0
 5312 002c FB80     		strh	r3, [r7, #6]	@ movhi
 5313              	.L276:
1208:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5314              		.loc 1 1208 0 is_stmt 1
 5315 002e BB1D     		adds	r3, r7, #6
 5316 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5317 0032 BB72     		strb	r3, [r7, #10]
1209:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5318              		.loc 1 1209 0
 5319 0034 BB1D     		adds	r3, r7, #6
 5320 0036 0133     		adds	r3, r3, #1
 5321 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5322 003a 7B72     		strb	r3, [r7, #9]
1210:..\src/command_processing.c ****     
1211:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 133


1212:..\src/command_processing.c ****     // aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated current
1213:..\src/command_processing.c ****     aux_int16 = (int16)(Battery_level_out);
 5323              		.loc 1 1213 0
 5324 003c 0F4B     		ldr	r3, .L277+4
 5325 003e 1B68     		ldr	r3, [r3]
 5326 0040 1BB2     		sxth	r3, r3
 5327 0042 FB80     		strh	r3, [r7, #6]	@ movhi
1214:..\src/command_processing.c ****     
1215:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5328              		.loc 1 1215 0
 5329 0044 BB1D     		adds	r3, r7, #6
 5330 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5331 0048 3B73     		strb	r3, [r7, #12]
1216:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5332              		.loc 1 1216 0
 5333 004a BB1D     		adds	r3, r7, #6
 5334 004c 0133     		adds	r3, r3, #1
 5335 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5336 0050 FB72     		strb	r3, [r7, #11]
1217:..\src/command_processing.c **** 
1218:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
1219:..\src/command_processing.c **** 
1220:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5337              		.loc 1 1220 0
 5338 0052 07F10803 		add	r3, r7, #8
 5339 0056 0521     		movs	r1, #5
 5340 0058 1846     		mov	r0, r3
 5341 005a FFF7FEFF 		bl	LCRChecksum
 5342 005e 0346     		mov	r3, r0
 5343 0060 7B73     		strb	r3, [r7, #13]
1221:..\src/command_processing.c ****     
1222:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5344              		.loc 1 1222 0
 5345 0062 07F10803 		add	r3, r7, #8
 5346 0066 0621     		movs	r1, #6
 5347 0068 1846     		mov	r0, r3
 5348 006a FFF7FEFF 		bl	commWrite
1223:..\src/command_processing.c **** 
1224:..\src/command_processing.c **** }
 5349              		.loc 1 1224 0
 5350 006e 00BF     		nop
 5351 0070 1037     		adds	r7, r7, #16
 5352              		.cfi_def_cfa_offset 8
 5353 0072 BD46     		mov	sp, r7
 5354              		.cfi_def_cfa_register 13
 5355              		@ sp needed
 5356 0074 80BD     		pop	{r7, pc}
 5357              	.L278:
 5358 0076 00BF     		.align	2
 5359              	.L277:
 5360 0078 00000000 		.word	pressure_value
 5361 007c 00000000 		.word	Battery_level_out
 5362              		.cfi_endproc
 5363              	.LFE103:
 5364              		.size	cmd_get_currents, .-cmd_get_currents
 5365              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 5366              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 134


 5367              		.global	cmd_get_currents_for_cuff
 5368              		.thumb
 5369              		.thumb_func
 5370              		.type	cmd_get_currents_for_cuff, %function
 5371              	cmd_get_currents_for_cuff:
 5372              	.LFB104:
1225:..\src/command_processing.c **** 
1226:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 5373              		.loc 1 1226 0
 5374              		.cfi_startproc
 5375              		@ args = 0, pretend = 0, frame = 0
 5376              		@ frame_needed = 1, uses_anonymous_args = 0
 5377              		@ link register save eliminated.
 5378 0000 80B4     		push	{r7}
 5379              		.cfi_def_cfa_offset 4
 5380              		.cfi_offset 7, -4
 5381 0002 00AF     		add	r7, sp, #0
 5382              		.cfi_def_cfa_register 7
1227:..\src/command_processing.c ****    
1228:..\src/command_processing.c **** }
 5383              		.loc 1 1228 0
 5384 0004 00BF     		nop
 5385 0006 BD46     		mov	sp, r7
 5386              		.cfi_def_cfa_register 13
 5387              		@ sp needed
 5388 0008 80BC     		pop	{r7}
 5389              		.cfi_restore 7
 5390              		.cfi_def_cfa_offset 0
 5391 000a 7047     		bx	lr
 5392              		.cfi_endproc
 5393              	.LFE104:
 5394              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 5395              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
 5396              		.align	2
 5397              		.global	cmd_get_vibrotactile_inputs
 5398              		.thumb
 5399              		.thumb_func
 5400              		.type	cmd_get_vibrotactile_inputs, %function
 5401              	cmd_get_vibrotactile_inputs:
 5402              	.LFB105:
1229:..\src/command_processing.c **** 
1230:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 5403              		.loc 1 1230 0
 5404              		.cfi_startproc
 5405              		@ args = 0, pretend = 0, frame = 0
 5406              		@ frame_needed = 1, uses_anonymous_args = 0
 5407              		@ link register save eliminated.
 5408 0000 80B4     		push	{r7}
 5409              		.cfi_def_cfa_offset 4
 5410              		.cfi_offset 7, -4
 5411 0002 00AF     		add	r7, sp, #0
 5412              		.cfi_def_cfa_register 7
1231:..\src/command_processing.c ****     
1232:..\src/command_processing.c **** }
 5413              		.loc 1 1232 0
 5414 0004 00BF     		nop
 5415 0006 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 135


 5416              		.cfi_def_cfa_register 13
 5417              		@ sp needed
 5418 0008 80BC     		pop	{r7}
 5419              		.cfi_restore 7
 5420              		.cfi_def_cfa_offset 0
 5421 000a 7047     		bx	lr
 5422              		.cfi_endproc
 5423              	.LFE105:
 5424              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
 5425              		.section	.text.commReadWriteSH,"ax",%progbits
 5426              		.align	2
 5427              		.global	commReadWriteSH
 5428              		.thumb
 5429              		.thumb_func
 5430              		.type	commReadWriteSH, %function
 5431              	commReadWriteSH:
 5432              	.LFB106:
1233:..\src/command_processing.c **** 
1234:..\src/command_processing.c **** void commReadWriteSH() {
 5433              		.loc 1 1234 0
 5434              		.cfi_startproc
 5435              		@ args = 0, pretend = 0, frame = 32
 5436              		@ frame_needed = 1, uses_anonymous_args = 0
 5437 0000 80B5     		push	{r7, lr}
 5438              		.cfi_def_cfa_offset 8
 5439              		.cfi_offset 7, -8
 5440              		.cfi_offset 14, -4
 5441 0002 88B0     		sub	sp, sp, #32
 5442              		.cfi_def_cfa_offset 40
 5443 0004 00AF     		add	r7, sp, #0
 5444              		.cfi_def_cfa_register 7
1235:..\src/command_processing.c ****      
1236:..\src/command_processing.c ****     uint8 packet_data[16];
1237:..\src/command_processing.c ****     uint8 packet_length;
1238:..\src/command_processing.c ****    
1239:..\src/command_processing.c ****     uint32 t_start, t_end;
1240:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5445              		.loc 1 1240 0
 5446 0006 0123     		movs	r3, #1
 5447 0008 FB77     		strb	r3, [r7, #31]
1241:..\src/command_processing.c **** 
1242:..\src/command_processing.c ****     packet_length = 2;
 5448              		.loc 1 1242 0
 5449 000a 0223     		movs	r3, #2
 5450 000c BB77     		strb	r3, [r7, #30]
1243:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5451              		.loc 1 1243 0
 5452 000e FA23     		movs	r3, #250
 5453 0010 3B71     		strb	r3, [r7, #4]
1244:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5454              		.loc 1 1244 0
 5455 0012 FA23     		movs	r3, #250
 5456 0014 7B71     		strb	r3, [r7, #5]
1245:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5457              		.loc 1 1245 0
 5458 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5459 0018 99B2     		uxth	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 136


 5460 001a 234B     		ldr	r3, .L288
 5461 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5462 0020 3B1D     		adds	r3, r7, #4
 5463 0022 1846     		mov	r0, r3
 5464 0024 FFF7FEFF 		bl	commWriteID
1246:..\src/command_processing.c **** 
1247:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5465              		.loc 1 1247 0
 5466 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5467 002c 0346     		mov	r3, r0
 5468 002e BB61     		str	r3, [r7, #24]
1248:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5469              		.loc 1 1248 0
 5470 0030 18E0     		b	.L282
 5471              	.L285:
1249:..\src/command_processing.c ****         if (interrupt_flag){
 5472              		.loc 1 1249 0
 5473 0032 1E4B     		ldr	r3, .L288+4
 5474 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5475 0036 002B     		cmp	r3, #0
 5476 0038 04D0     		beq	.L283
1250:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5477              		.loc 1 1250 0
 5478 003a 1C4B     		ldr	r3, .L288+4
 5479 003c 0022     		movs	r2, #0
 5480 003e 1A70     		strb	r2, [r3]
1251:..\src/command_processing.c ****             interrupt_manager();
 5481              		.loc 1 1251 0
 5482 0040 FFF7FEFF 		bl	interrupt_manager
 5483              	.L283:
1252:..\src/command_processing.c ****         }
1253:..\src/command_processing.c **** 
1254:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5484              		.loc 1 1254 0
 5485 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5486 0048 0346     		mov	r3, r0
 5487 004a 7B61     		str	r3, [r7, #20]
1255:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5488              		.loc 1 1255 0
 5489 004c BA69     		ldr	r2, [r7, #24]
 5490 004e 7B69     		ldr	r3, [r7, #20]
 5491 0050 D31A     		subs	r3, r2, r3
 5492 0052 174A     		ldr	r2, .L288+8
 5493 0054 9342     		cmp	r3, r2
 5494 0056 05D9     		bls	.L282
1256:..\src/command_processing.c ****             read_flag = FALSE;
 5495              		.loc 1 1256 0
 5496 0058 0023     		movs	r3, #0
 5497 005a FB77     		strb	r3, [r7, #31]
1257:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5498              		.loc 1 1257 0
 5499 005c 154B     		ldr	r3, .L288+12
 5500 005e 0022     		movs	r2, #0
 5501 0060 1A70     		strb	r2, [r3]
1258:..\src/command_processing.c ****             break;
 5502              		.loc 1 1258 0
 5503 0062 03E0     		b	.L284
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 137


 5504              	.L282:
1248:..\src/command_processing.c ****         if (interrupt_flag){
 5505              		.loc 1 1248 0
 5506 0064 144B     		ldr	r3, .L288+16
 5507 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5508 0068 FB2B     		cmp	r3, #251
 5509 006a E2D1     		bne	.L285
 5510              	.L284:
1259:..\src/command_processing.c ****         }
1260:..\src/command_processing.c ****     }
1261:..\src/command_processing.c **** 
1262:..\src/command_processing.c ****         if (read_flag) {
 5511              		.loc 1 1262 0
 5512 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5513 006e 002B     		cmp	r3, #0
 5514 0070 15D0     		beq	.L287
1263:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5515              		.loc 1 1263 0
 5516 0072 114B     		ldr	r3, .L288+16
 5517 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5518 0076 1B02     		lsls	r3, r3, #8
 5519 0078 1AB2     		sxth	r2, r3
 5520 007a 0F4B     		ldr	r3, .L288+16
 5521 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5522 007e 1BB2     		sxth	r3, r3
 5523 0080 1343     		orrs	r3, r3, r2
 5524 0082 1AB2     		sxth	r2, r3
 5525 0084 0D4B     		ldr	r3, .L288+20
 5526 0086 1A80     		strh	r2, [r3]	@ movhi
1264:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5527              		.loc 1 1264 0
 5528 0088 0B4B     		ldr	r3, .L288+16
 5529 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5530 008c 1B02     		lsls	r3, r3, #8
 5531 008e 1AB2     		sxth	r2, r3
 5532 0090 094B     		ldr	r3, .L288+16
 5533 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5534 0094 1BB2     		sxth	r3, r3
 5535 0096 1343     		orrs	r3, r3, r2
 5536 0098 1AB2     		sxth	r2, r3
 5537 009a 094B     		ldr	r3, .L288+24
 5538 009c 1A80     		strh	r2, [r3]	@ movhi
 5539              	.L287:
1265:..\src/command_processing.c ****     }
1266:..\src/command_processing.c ****     
1267:..\src/command_processing.c ****     
1268:..\src/command_processing.c **** }
 5540              		.loc 1 1268 0
 5541 009e 00BF     		nop
 5542 00a0 2037     		adds	r7, r7, #32
 5543              		.cfi_def_cfa_offset 8
 5544 00a2 BD46     		mov	sp, r7
 5545              		.cfi_def_cfa_register 13
 5546              		@ sp needed
 5547 00a4 80BD     		pop	{r7, pc}
 5548              	.L289:
 5549 00a6 00BF     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 138


 5550              	.L288:
 5551 00a8 00000000 		.word	c_mem
 5552 00ac 00000000 		.word	interrupt_flag
 5553 00b0 20AA4400 		.word	4500000
 5554 00b4 00000000 		.word	master_mode
 5555 00b8 00000000 		.word	g_rx
 5556 00bc 00000000 		.word	PWM_IMU_1
 5557 00c0 00000000 		.word	PWM_IMU_2
 5558              		.cfi_endproc
 5559              	.LFE106:
 5560              		.size	commReadWriteSH, .-commReadWriteSH
 5561              		.section	.text.commReadIMUFromSH,"ax",%progbits
 5562              		.align	2
 5563              		.global	commReadIMUFromSH
 5564              		.thumb
 5565              		.thumb_func
 5566              		.type	commReadIMUFromSH, %function
 5567              	commReadIMUFromSH:
 5568              	.LFB107:
1269:..\src/command_processing.c **** 
1270:..\src/command_processing.c **** 
1271:..\src/command_processing.c **** //==============================================================================
1272:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1273:..\src/command_processing.c **** //==============================================================================
1274:..\src/command_processing.c **** void commReadIMUFromSH(){
 5569              		.loc 1 1274 0
 5570              		.cfi_startproc
 5571              		@ args = 0, pretend = 0, frame = 32
 5572              		@ frame_needed = 1, uses_anonymous_args = 0
 5573 0000 80B5     		push	{r7, lr}
 5574              		.cfi_def_cfa_offset 8
 5575              		.cfi_offset 7, -8
 5576              		.cfi_offset 14, -4
 5577 0002 88B0     		sub	sp, sp, #32
 5578              		.cfi_def_cfa_offset 40
 5579 0004 00AF     		add	r7, sp, #0
 5580              		.cfi_def_cfa_register 7
1275:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1276:..\src/command_processing.c ****     // resulted from the processed IMU values.
1277:..\src/command_processing.c ****     // This function use RS485 protocol to communicate with the second board. 
1278:..\src/command_processing.c ****     // Baude Rate is set to 2000000. 
1279:..\src/command_processing.c ****     // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1280:..\src/command_processing.c ****     // and an answer (: : ID pk_length CMD data1[0] data1[1] data2[0] data2[1] check) received --> 
1281:..\src/command_processing.c ****     // At least 64 us are requested for this communication 
1282:..\src/command_processing.c ****     
1283:..\src/command_processing.c ****     uint8 packet_data[16];
1284:..\src/command_processing.c ****     uint8 packet_length;
1285:..\src/command_processing.c ****    
1286:..\src/command_processing.c ****     uint32 t_start, t_end;
1287:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5581              		.loc 1 1287 0
 5582 0006 0123     		movs	r3, #1
 5583 0008 FB77     		strb	r3, [r7, #31]
1288:..\src/command_processing.c **** 
1289:..\src/command_processing.c ****     packet_length = 2;
 5584              		.loc 1 1289 0
 5585 000a 0223     		movs	r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 139


 5586 000c BB77     		strb	r3, [r7, #30]
1290:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5587              		.loc 1 1290 0
 5588 000e FA23     		movs	r3, #250
 5589 0010 3B71     		strb	r3, [r7, #4]
1291:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5590              		.loc 1 1291 0
 5591 0012 FA23     		movs	r3, #250
 5592 0014 7B71     		strb	r3, [r7, #5]
1292:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5593              		.loc 1 1292 0
 5594 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5595 0018 99B2     		uxth	r1, r3
 5596 001a 234B     		ldr	r3, .L297
 5597 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5598 0020 3B1D     		adds	r3, r7, #4
 5599 0022 1846     		mov	r0, r3
 5600 0024 FFF7FEFF 		bl	commWriteID
1293:..\src/command_processing.c **** 
1294:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5601              		.loc 1 1294 0
 5602 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5603 002c 0346     		mov	r3, r0
 5604 002e BB61     		str	r3, [r7, #24]
1295:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5605              		.loc 1 1295 0
 5606 0030 18E0     		b	.L291
 5607              	.L294:
1296:..\src/command_processing.c ****         if (interrupt_flag){
 5608              		.loc 1 1296 0
 5609 0032 1E4B     		ldr	r3, .L297+4
 5610 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5611 0036 002B     		cmp	r3, #0
 5612 0038 04D0     		beq	.L292
1297:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5613              		.loc 1 1297 0
 5614 003a 1C4B     		ldr	r3, .L297+4
 5615 003c 0022     		movs	r2, #0
 5616 003e 1A70     		strb	r2, [r3]
1298:..\src/command_processing.c ****             interrupt_manager();
 5617              		.loc 1 1298 0
 5618 0040 FFF7FEFF 		bl	interrupt_manager
 5619              	.L292:
1299:..\src/command_processing.c ****         }
1300:..\src/command_processing.c **** 
1301:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5620              		.loc 1 1301 0
 5621 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5622 0048 0346     		mov	r3, r0
 5623 004a 7B61     		str	r3, [r7, #20]
1302:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5624              		.loc 1 1302 0
 5625 004c BA69     		ldr	r2, [r7, #24]
 5626 004e 7B69     		ldr	r3, [r7, #20]
 5627 0050 D31A     		subs	r3, r2, r3
 5628 0052 174A     		ldr	r2, .L297+8
 5629 0054 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 140


 5630 0056 05D9     		bls	.L291
1303:..\src/command_processing.c ****             read_flag = FALSE;
 5631              		.loc 1 1303 0
 5632 0058 0023     		movs	r3, #0
 5633 005a FB77     		strb	r3, [r7, #31]
1304:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5634              		.loc 1 1304 0
 5635 005c 154B     		ldr	r3, .L297+12
 5636 005e 0022     		movs	r2, #0
 5637 0060 1A70     		strb	r2, [r3]
1305:..\src/command_processing.c ****             break;
 5638              		.loc 1 1305 0
 5639 0062 03E0     		b	.L293
 5640              	.L291:
1295:..\src/command_processing.c ****         if (interrupt_flag){
 5641              		.loc 1 1295 0
 5642 0064 144B     		ldr	r3, .L297+16
 5643 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5644 0068 FB2B     		cmp	r3, #251
 5645 006a E2D1     		bne	.L294
 5646              	.L293:
1306:..\src/command_processing.c ****         }
1307:..\src/command_processing.c ****     }
1308:..\src/command_processing.c **** 
1309:..\src/command_processing.c ****         if (read_flag) {
 5647              		.loc 1 1309 0
 5648 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5649 006e 002B     		cmp	r3, #0
 5650 0070 15D0     		beq	.L296
1310:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5651              		.loc 1 1310 0
 5652 0072 114B     		ldr	r3, .L297+16
 5653 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5654 0076 1B02     		lsls	r3, r3, #8
 5655 0078 1AB2     		sxth	r2, r3
 5656 007a 0F4B     		ldr	r3, .L297+16
 5657 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5658 007e 1BB2     		sxth	r3, r3
 5659 0080 1343     		orrs	r3, r3, r2
 5660 0082 1AB2     		sxth	r2, r3
 5661 0084 0D4B     		ldr	r3, .L297+20
 5662 0086 1A80     		strh	r2, [r3]	@ movhi
1311:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5663              		.loc 1 1311 0
 5664 0088 0B4B     		ldr	r3, .L297+16
 5665 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5666 008c 1B02     		lsls	r3, r3, #8
 5667 008e 1AB2     		sxth	r2, r3
 5668 0090 094B     		ldr	r3, .L297+16
 5669 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5670 0094 1BB2     		sxth	r3, r3
 5671 0096 1343     		orrs	r3, r3, r2
 5672 0098 1AB2     		sxth	r2, r3
 5673 009a 094B     		ldr	r3, .L297+24
 5674 009c 1A80     		strh	r2, [r3]	@ movhi
 5675              	.L296:
1312:..\src/command_processing.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 141


1313:..\src/command_processing.c ****     
1314:..\src/command_processing.c **** }
 5676              		.loc 1 1314 0
 5677 009e 00BF     		nop
 5678 00a0 2037     		adds	r7, r7, #32
 5679              		.cfi_def_cfa_offset 8
 5680 00a2 BD46     		mov	sp, r7
 5681              		.cfi_def_cfa_register 13
 5682              		@ sp needed
 5683 00a4 80BD     		pop	{r7, pc}
 5684              	.L298:
 5685 00a6 00BF     		.align	2
 5686              	.L297:
 5687 00a8 00000000 		.word	c_mem
 5688 00ac 00000000 		.word	interrupt_flag
 5689 00b0 20AA4400 		.word	4500000
 5690 00b4 00000000 		.word	master_mode
 5691 00b8 00000000 		.word	g_rx
 5692 00bc 00000000 		.word	PWM_IMU_1
 5693 00c0 00000000 		.word	PWM_IMU_2
 5694              		.cfi_endproc
 5695              	.LFE107:
 5696              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 5697              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 5698              		.align	2
 5699              		.global	commReadResCurrFromSH
 5700              		.thumb
 5701              		.thumb_func
 5702              		.type	commReadResCurrFromSH, %function
 5703              	commReadResCurrFromSH:
 5704              	.LFB108:
1315:..\src/command_processing.c **** 
1316:..\src/command_processing.c **** //==============================================================================
1317:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1318:..\src/command_processing.c **** //==============================================================================
1319:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1320:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1321:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1322:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1323:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1324:..\src/command_processing.c **** int16 commReadResCurrFromSH()
1325:..\src/command_processing.c **** {
 5705              		.loc 1 1325 0
 5706              		.cfi_startproc
 5707              		@ args = 0, pretend = 0, frame = 32
 5708              		@ frame_needed = 1, uses_anonymous_args = 0
 5709 0000 80B5     		push	{r7, lr}
 5710              		.cfi_def_cfa_offset 8
 5711              		.cfi_offset 7, -8
 5712              		.cfi_offset 14, -4
 5713 0002 88B0     		sub	sp, sp, #32
 5714              		.cfi_def_cfa_offset 40
 5715 0004 00AF     		add	r7, sp, #0
 5716              		.cfi_def_cfa_register 7
1326:..\src/command_processing.c ****     uint8 packet_data[16];
1327:..\src/command_processing.c ****     uint8 packet_length;
1328:..\src/command_processing.c ****     int16 curr_diff = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 142


 5717              		.loc 1 1328 0
 5718 0006 0023     		movs	r3, #0
 5719 0008 FB83     		strh	r3, [r7, #30]	@ movhi
1329:..\src/command_processing.c ****     uint32 t_start, t_end;
1330:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5720              		.loc 1 1330 0
 5721 000a 0123     		movs	r3, #1
 5722 000c 7B77     		strb	r3, [r7, #29]
1331:..\src/command_processing.c **** 
1332:..\src/command_processing.c ****     packet_length = 2;
 5723              		.loc 1 1332 0
 5724 000e 0223     		movs	r3, #2
 5725 0010 3B77     		strb	r3, [r7, #28]
1333:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 5726              		.loc 1 1333 0
 5727 0012 8C23     		movs	r3, #140
 5728 0014 3B71     		strb	r3, [r7, #4]
1334:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 5729              		.loc 1 1334 0
 5730 0016 8C23     		movs	r3, #140
 5731 0018 7B71     		strb	r3, [r7, #5]
1335:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5732              		.loc 1 1335 0
 5733 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 5734 001c 99B2     		uxth	r1, r3
 5735 001e 1D4B     		ldr	r3, .L306
 5736 0020 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5737 0024 3B1D     		adds	r3, r7, #4
 5738 0026 1846     		mov	r0, r3
 5739 0028 FFF7FEFF 		bl	commWriteID
1336:..\src/command_processing.c **** 
1337:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5740              		.loc 1 1337 0
 5741 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5742 0030 0346     		mov	r3, r0
 5743 0032 BB61     		str	r3, [r7, #24]
1338:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 5744              		.loc 1 1338 0
 5745 0034 18E0     		b	.L300
 5746              	.L303:
1339:..\src/command_processing.c ****         if (interrupt_flag){
 5747              		.loc 1 1339 0
 5748 0036 184B     		ldr	r3, .L306+4
 5749 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5750 003a 002B     		cmp	r3, #0
 5751 003c 04D0     		beq	.L301
1340:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5752              		.loc 1 1340 0
 5753 003e 164B     		ldr	r3, .L306+4
 5754 0040 0022     		movs	r2, #0
 5755 0042 1A70     		strb	r2, [r3]
1341:..\src/command_processing.c ****             interrupt_manager();
 5756              		.loc 1 1341 0
 5757 0044 FFF7FEFF 		bl	interrupt_manager
 5758              	.L301:
1342:..\src/command_processing.c ****         }
1343:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 143


1344:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5759              		.loc 1 1344 0
 5760 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5761 004c 0346     		mov	r3, r0
 5762 004e 7B61     		str	r3, [r7, #20]
1345:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5763              		.loc 1 1345 0
 5764 0050 BA69     		ldr	r2, [r7, #24]
 5765 0052 7B69     		ldr	r3, [r7, #20]
 5766 0054 D31A     		subs	r3, r2, r3
 5767 0056 114A     		ldr	r2, .L306+8
 5768 0058 9342     		cmp	r3, r2
 5769 005a 05D9     		bls	.L300
1346:..\src/command_processing.c ****             read_flag = FALSE;
 5770              		.loc 1 1346 0
 5771 005c 0023     		movs	r3, #0
 5772 005e 7B77     		strb	r3, [r7, #29]
1347:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5773              		.loc 1 1347 0
 5774 0060 0F4B     		ldr	r3, .L306+12
 5775 0062 0022     		movs	r2, #0
 5776 0064 1A70     		strb	r2, [r3]
1348:..\src/command_processing.c ****             break;
 5777              		.loc 1 1348 0
 5778 0066 03E0     		b	.L302
 5779              	.L300:
1338:..\src/command_processing.c ****         if (interrupt_flag){
 5780              		.loc 1 1338 0
 5781 0068 0E4B     		ldr	r3, .L306+16
 5782 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5783 006c 8E2B     		cmp	r3, #142
 5784 006e E2D1     		bne	.L303
 5785              	.L302:
1349:..\src/command_processing.c ****         }
1350:..\src/command_processing.c ****     }
1351:..\src/command_processing.c **** 
1352:..\src/command_processing.c ****     if (read_flag) {
 5786              		.loc 1 1352 0
 5787 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 5788 0072 002B     		cmp	r3, #0
 5789 0074 08D0     		beq	.L304
1353:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 5790              		.loc 1 1353 0
 5791 0076 0B4B     		ldr	r3, .L306+16
 5792 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5793 007a 1B02     		lsls	r3, r3, #8
 5794 007c 1AB2     		sxth	r2, r3
 5795 007e 094B     		ldr	r3, .L306+16
 5796 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5797 0082 1BB2     		sxth	r3, r3
 5798 0084 1343     		orrs	r3, r3, r2
 5799 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 5800              	.L304:
1354:..\src/command_processing.c ****     }
1355:..\src/command_processing.c ****     
1356:..\src/command_processing.c ****     return curr_diff;
 5801              		.loc 1 1356 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 144


 5802 0088 B7F91E30 		ldrsh	r3, [r7, #30]
1357:..\src/command_processing.c **** }
 5803              		.loc 1 1357 0
 5804 008c 1846     		mov	r0, r3
 5805 008e 2037     		adds	r7, r7, #32
 5806              		.cfi_def_cfa_offset 8
 5807 0090 BD46     		mov	sp, r7
 5808              		.cfi_def_cfa_register 13
 5809              		@ sp needed
 5810 0092 80BD     		pop	{r7, pc}
 5811              	.L307:
 5812              		.align	2
 5813              	.L306:
 5814 0094 00000000 		.word	c_mem
 5815 0098 00000000 		.word	interrupt_flag
 5816 009c 20AA4400 		.word	4500000
 5817 00a0 00000000 		.word	master_mode
 5818 00a4 00000000 		.word	g_rx
 5819              		.cfi_endproc
 5820              	.LFE108:
 5821              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 5822              		.section	.text.cmd_set_baudrate,"ax",%progbits
 5823              		.align	2
 5824              		.global	cmd_set_baudrate
 5825              		.thumb
 5826              		.thumb_func
 5827              		.type	cmd_set_baudrate, %function
 5828              	cmd_set_baudrate:
 5829              	.LFB109:
1358:..\src/command_processing.c **** 
1359:..\src/command_processing.c **** 
1360:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1361:..\src/command_processing.c **** 
1362:..\src/command_processing.c **** void cmd_set_baudrate(){
 5830              		.loc 1 1362 0
 5831              		.cfi_startproc
 5832              		@ args = 0, pretend = 0, frame = 0
 5833              		@ frame_needed = 1, uses_anonymous_args = 0
 5834              		@ link register save eliminated.
 5835 0000 80B4     		push	{r7}
 5836              		.cfi_def_cfa_offset 4
 5837              		.cfi_offset 7, -4
 5838 0002 00AF     		add	r7, sp, #0
 5839              		.cfi_def_cfa_register 7
1363:..\src/command_processing.c ****     
1364:..\src/command_processing.c **** }
 5840              		.loc 1 1364 0
 5841 0004 00BF     		nop
 5842 0006 BD46     		mov	sp, r7
 5843              		.cfi_def_cfa_register 13
 5844              		@ sp needed
 5845 0008 80BC     		pop	{r7}
 5846              		.cfi_restore 7
 5847              		.cfi_def_cfa_offset 0
 5848 000a 7047     		bx	lr
 5849              		.cfi_endproc
 5850              	.LFE109:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 145


 5851              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 5852              		.section	.text.cmd_ping,"ax",%progbits
 5853              		.align	2
 5854              		.global	cmd_ping
 5855              		.thumb
 5856              		.thumb_func
 5857              		.type	cmd_ping, %function
 5858              	cmd_ping:
 5859              	.LFB110:
1365:..\src/command_processing.c **** 
1366:..\src/command_processing.c **** void cmd_ping(){
 5860              		.loc 1 1366 0
 5861              		.cfi_startproc
 5862              		@ args = 0, pretend = 0, frame = 8
 5863              		@ frame_needed = 1, uses_anonymous_args = 0
 5864 0000 80B5     		push	{r7, lr}
 5865              		.cfi_def_cfa_offset 8
 5866              		.cfi_offset 7, -8
 5867              		.cfi_offset 14, -4
 5868 0002 82B0     		sub	sp, sp, #8
 5869              		.cfi_def_cfa_offset 16
 5870 0004 00AF     		add	r7, sp, #0
 5871              		.cfi_def_cfa_register 7
1367:..\src/command_processing.c **** 
1368:..\src/command_processing.c ****     uint8 packet_data[2];
1369:..\src/command_processing.c **** 
1370:..\src/command_processing.c ****     // Header
1371:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 5872              		.loc 1 1371 0
 5873 0006 0023     		movs	r3, #0
 5874 0008 3B71     		strb	r3, [r7, #4]
1372:..\src/command_processing.c ****     
1373:..\src/command_processing.c ****     // Load Payload
1374:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 5875              		.loc 1 1374 0
 5876 000a 0023     		movs	r3, #0
 5877 000c 7B71     		strb	r3, [r7, #5]
1375:..\src/command_processing.c **** 
1376:..\src/command_processing.c ****     // Send Package to uart
1377:..\src/command_processing.c ****     commWrite(packet_data, 2);
 5878              		.loc 1 1377 0
 5879 000e 3B1D     		adds	r3, r7, #4
 5880 0010 0221     		movs	r1, #2
 5881 0012 1846     		mov	r0, r3
 5882 0014 FFF7FEFF 		bl	commWrite
1378:..\src/command_processing.c **** }
 5883              		.loc 1 1378 0
 5884 0018 00BF     		nop
 5885 001a 0837     		adds	r7, r7, #8
 5886              		.cfi_def_cfa_offset 8
 5887 001c BD46     		mov	sp, r7
 5888              		.cfi_def_cfa_register 13
 5889              		@ sp needed
 5890 001e 80BD     		pop	{r7, pc}
 5891              		.cfi_endproc
 5892              	.LFE110:
 5893              		.size	cmd_ping, .-cmd_ping
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 146


 5894              		.section	.text.cmd_get_inputs,"ax",%progbits
 5895              		.align	2
 5896              		.global	cmd_get_inputs
 5897              		.thumb
 5898              		.thumb_func
 5899              		.type	cmd_get_inputs, %function
 5900              	cmd_get_inputs:
 5901              	.LFB111:
1379:..\src/command_processing.c **** 
1380:..\src/command_processing.c **** void cmd_get_inputs(){
 5902              		.loc 1 1380 0
 5903              		.cfi_startproc
 5904              		@ args = 0, pretend = 0, frame = 0
 5905              		@ frame_needed = 1, uses_anonymous_args = 0
 5906              		@ link register save eliminated.
 5907 0000 80B4     		push	{r7}
 5908              		.cfi_def_cfa_offset 4
 5909              		.cfi_offset 7, -4
 5910 0002 00AF     		add	r7, sp, #0
 5911              		.cfi_def_cfa_register 7
1381:..\src/command_processing.c **** 
1382:..\src/command_processing.c **** }
 5912              		.loc 1 1382 0
 5913 0004 00BF     		nop
 5914 0006 BD46     		mov	sp, r7
 5915              		.cfi_def_cfa_register 13
 5916              		@ sp needed
 5917 0008 80BC     		pop	{r7}
 5918              		.cfi_restore 7
 5919              		.cfi_def_cfa_offset 0
 5920 000a 7047     		bx	lr
 5921              		.cfi_endproc
 5922              	.LFE111:
 5923              		.size	cmd_get_inputs, .-cmd_get_inputs
 5924              		.section	.text.cmd_store_params,"ax",%progbits
 5925              		.align	2
 5926              		.global	cmd_store_params
 5927              		.thumb
 5928              		.thumb_func
 5929              		.type	cmd_store_params, %function
 5930              	cmd_store_params:
 5931              	.LFB112:
1383:..\src/command_processing.c **** 
1384:..\src/command_processing.c **** void cmd_store_params(){
 5932              		.loc 1 1384 0
 5933              		.cfi_startproc
 5934              		@ args = 0, pretend = 0, frame = 8
 5935              		@ frame_needed = 1, uses_anonymous_args = 0
 5936 0000 80B5     		push	{r7, lr}
 5937              		.cfi_def_cfa_offset 8
 5938              		.cfi_offset 7, -8
 5939              		.cfi_offset 14, -4
 5940 0002 82B0     		sub	sp, sp, #8
 5941              		.cfi_def_cfa_offset 16
 5942 0004 00AF     		add	r7, sp, #0
 5943              		.cfi_def_cfa_register 7
1385:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 147


1386:..\src/command_processing.c ****     uint8 CYDATA packet_length = 2;
 5944              		.loc 1 1386 0
 5945 0006 0223     		movs	r3, #2
 5946 0008 FB71     		strb	r3, [r7, #7]
1387:..\src/command_processing.c ****     uint8 CYDATA packet_data[2];
1388:..\src/command_processing.c ****     uint8 CYDATA old_id;
1389:..\src/command_processing.c ****       
1390:..\src/command_processing.c ****     // Store params 
1391:..\src/command_processing.c **** 
1392:..\src/command_processing.c ****     if (c_mem.dev.id != g_mem.dev.id) {     //If a new id is going to be set we will lose communica
 5947              		.loc 1 1392 0
 5948 000a 1F4B     		ldr	r3, .L319
 5949 000c 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 5950 000e 1F4B     		ldr	r3, .L319+4
 5951 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5952 0012 9A42     		cmp	r2, r3
 5953 0014 20D0     		beq	.L312
1393:..\src/command_processing.c ****         old_id = c_mem.dev.id;          //after the memstore(0) and the ACK won't be recognised
 5954              		.loc 1 1393 0
 5955 0016 1C4B     		ldr	r3, .L319
 5956 0018 1B7C     		ldrb	r3, [r3, #16]
 5957 001a BB71     		strb	r3, [r7, #6]
1394:..\src/command_processing.c ****         if(memStore(0)) {
 5958              		.loc 1 1394 0
 5959 001c 0020     		movs	r0, #0
 5960 001e FFF7FEFF 		bl	memStore
 5961 0022 0346     		mov	r3, r0
 5962 0024 002B     		cmp	r3, #0
 5963 0026 0BD0     		beq	.L313
1395:..\src/command_processing.c ****             packet_data[0] = ACK_OK;
 5964              		.loc 1 1395 0
 5965 0028 0123     		movs	r3, #1
 5966 002a 3B71     		strb	r3, [r7, #4]
1396:..\src/command_processing.c ****             packet_data[1] = ACK_OK;
 5967              		.loc 1 1396 0
 5968 002c 0123     		movs	r3, #1
 5969 002e 7B71     		strb	r3, [r7, #5]
1397:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5970              		.loc 1 1397 0
 5971 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5972 0032 99B2     		uxth	r1, r3
 5973 0034 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5974 0036 3B1D     		adds	r3, r7, #4
 5975 0038 1846     		mov	r0, r3
 5976 003a FFF7FEFF 		bl	commWrite_old_id
 5977 003e 18E0     		b	.L315
 5978              	.L313:
1398:..\src/command_processing.c ****         }    
1399:..\src/command_processing.c ****         else{
1400:..\src/command_processing.c ****             packet_data[0] = ACK_ERROR;
 5979              		.loc 1 1400 0
 5980 0040 0023     		movs	r3, #0
 5981 0042 3B71     		strb	r3, [r7, #4]
1401:..\src/command_processing.c ****             packet_data[1] = ACK_ERROR;
 5982              		.loc 1 1401 0
 5983 0044 0023     		movs	r3, #0
 5984 0046 7B71     		strb	r3, [r7, #5]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 148


1402:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5985              		.loc 1 1402 0
 5986 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5987 004a 99B2     		uxth	r1, r3
 5988 004c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5989 004e 3B1D     		adds	r3, r7, #4
 5990 0050 1846     		mov	r0, r3
 5991 0052 FFF7FEFF 		bl	commWrite_old_id
 5992 0056 0CE0     		b	.L315
 5993              	.L312:
1403:..\src/command_processing.c ****         }
1404:..\src/command_processing.c ****     }    
1405:..\src/command_processing.c ****     else {
1406:..\src/command_processing.c ****         if(memStore(0))
 5994              		.loc 1 1406 0
 5995 0058 0020     		movs	r0, #0
 5996 005a FFF7FEFF 		bl	memStore
 5997 005e 0346     		mov	r3, r0
 5998 0060 002B     		cmp	r3, #0
 5999 0062 03D0     		beq	.L316
1407:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 6000              		.loc 1 1407 0
 6001 0064 0120     		movs	r0, #1
 6002 0066 FFF7FEFF 		bl	sendAcknowledgment
 6003 006a 02E0     		b	.L315
 6004              	.L316:
1408:..\src/command_processing.c ****         else
1409:..\src/command_processing.c ****             sendAcknowledgment(ACK_ERROR);
 6005              		.loc 1 1409 0
 6006 006c 0020     		movs	r0, #0
 6007 006e FFF7FEFF 		bl	sendAcknowledgment
 6008              	.L315:
1410:..\src/command_processing.c ****     }
1411:..\src/command_processing.c ****     
1412:..\src/command_processing.c ****     // FW reset (if necessary)
1413:..\src/command_processing.c ****     if (reset_PSoC_flag == TRUE) {
 6009              		.loc 1 1413 0
 6010 0072 074B     		ldr	r3, .L319+8
 6011 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6012 0076 012B     		cmp	r3, #1
 6013 0078 01D1     		bne	.L318
1414:..\src/command_processing.c ****         CySoftwareReset();
 6014              		.loc 1 1414 0
 6015 007a FFF7FEFF 		bl	CySoftwareReset
 6016              	.L318:
1415:..\src/command_processing.c ****     }
1416:..\src/command_processing.c **** }
 6017              		.loc 1 1416 0
 6018 007e 00BF     		nop
 6019 0080 0837     		adds	r7, r7, #8
 6020              		.cfi_def_cfa_offset 8
 6021 0082 BD46     		mov	sp, r7
 6022              		.cfi_def_cfa_register 13
 6023              		@ sp needed
 6024 0084 80BD     		pop	{r7, pc}
 6025              	.L320:
 6026 0086 00BF     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 149


 6027              	.L319:
 6028 0088 00000000 		.word	c_mem
 6029 008c 00000000 		.word	g_mem
 6030 0090 00000000 		.word	reset_PSoC_flag
 6031              		.cfi_endproc
 6032              	.LFE112:
 6033              		.size	cmd_store_params, .-cmd_store_params
 6034              		.section	.text.cmd_get_emg,"ax",%progbits
 6035              		.align	2
 6036              		.global	cmd_get_emg
 6037              		.thumb
 6038              		.thumb_func
 6039              		.type	cmd_get_emg, %function
 6040              	cmd_get_emg:
 6041              	.LFB113:
1417:..\src/command_processing.c **** 
1418:..\src/command_processing.c **** void cmd_get_emg(){
 6042              		.loc 1 1418 0
 6043              		.cfi_startproc
 6044              		@ args = 0, pretend = 0, frame = 16
 6045              		@ frame_needed = 1, uses_anonymous_args = 0
 6046 0000 80B5     		push	{r7, lr}
 6047              		.cfi_def_cfa_offset 8
 6048              		.cfi_offset 7, -8
 6049              		.cfi_offset 14, -4
 6050 0002 84B0     		sub	sp, sp, #16
 6051              		.cfi_def_cfa_offset 24
 6052 0004 00AF     		add	r7, sp, #0
 6053              		.cfi_def_cfa_register 7
1419:..\src/command_processing.c ****     
1420:..\src/command_processing.c ****     uint8 packet_data[6];
1421:..\src/command_processing.c ****     int16 aux_int16;
1422:..\src/command_processing.c ****     
1423:..\src/command_processing.c ****     // Header        
1424:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 6054              		.loc 1 1424 0
 6055 0006 8823     		movs	r3, #136
 6056 0008 3B72     		strb	r3, [r7, #8]
1425:..\src/command_processing.c ****     
1426:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 6057              		.loc 1 1426 0
 6058 000a 144B     		ldr	r3, .L322
 6059 000c 1B68     		ldr	r3, [r3]
 6060 000e 1BB2     		sxth	r3, r3
 6061 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1427:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 6062              		.loc 1 1427 0
 6063 0012 BB1D     		adds	r3, r7, #6
 6064 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6065 0016 BB72     		strb	r3, [r7, #10]
1428:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 6066              		.loc 1 1428 0
 6067 0018 BB1D     		adds	r3, r7, #6
 6068 001a 0133     		adds	r3, r3, #1
 6069 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6070 001e 7B72     		strb	r3, [r7, #9]
1429:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 150


1430:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 6071              		.loc 1 1430 0
 6072 0020 0E4B     		ldr	r3, .L322
 6073 0022 5B68     		ldr	r3, [r3, #4]
 6074 0024 1BB2     		sxth	r3, r3
 6075 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1431:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 6076              		.loc 1 1431 0
 6077 0028 BB1D     		adds	r3, r7, #6
 6078 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6079 002c 3B73     		strb	r3, [r7, #12]
1432:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 6080              		.loc 1 1432 0
 6081 002e BB1D     		adds	r3, r7, #6
 6082 0030 0133     		adds	r3, r3, #1
 6083 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6084 0034 FB72     		strb	r3, [r7, #11]
1433:..\src/command_processing.c **** 
1434:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 6085              		.loc 1 1434 0
 6086 0036 07F10803 		add	r3, r7, #8
 6087 003a 0521     		movs	r1, #5
 6088 003c 1846     		mov	r0, r3
 6089 003e FFF7FEFF 		bl	LCRChecksum
 6090 0042 0346     		mov	r3, r0
 6091 0044 7B73     		strb	r3, [r7, #13]
1435:..\src/command_processing.c **** 
1436:..\src/command_processing.c ****     commWrite(packet_data, 6);
 6092              		.loc 1 1436 0
 6093 0046 07F10803 		add	r3, r7, #8
 6094 004a 0621     		movs	r1, #6
 6095 004c 1846     		mov	r0, r3
 6096 004e FFF7FEFF 		bl	commWrite
1437:..\src/command_processing.c **** 
1438:..\src/command_processing.c **** }
 6097              		.loc 1 1438 0
 6098 0052 00BF     		nop
 6099 0054 1037     		adds	r7, r7, #16
 6100              		.cfi_def_cfa_offset 8
 6101 0056 BD46     		mov	sp, r7
 6102              		.cfi_def_cfa_register 13
 6103              		@ sp needed
 6104 0058 80BD     		pop	{r7, pc}
 6105              	.L323:
 6106 005a 00BF     		.align	2
 6107              	.L322:
 6108 005c 00000000 		.word	g_adc_measOld
 6109              		.cfi_endproc
 6110              	.LFE113:
 6111              		.size	cmd_get_emg, .-cmd_get_emg
 6112              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 6113              		.align	2
 6114              		.global	cmd_get_imu_readings
 6115              		.thumb
 6116              		.thumb_func
 6117              		.type	cmd_get_imu_readings, %function
 6118              	cmd_get_imu_readings:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 151


 6119              	.LFB114:
1439:..\src/command_processing.c **** 
1440:..\src/command_processing.c **** void cmd_get_imu_readings(){
 6120              		.loc 1 1440 0
 6121              		.cfi_startproc
 6122              		@ args = 0, pretend = 0, frame = 0
 6123              		@ frame_needed = 1, uses_anonymous_args = 0
 6124              		@ link register save eliminated.
 6125 0000 80B4     		push	{r7}
 6126              		.cfi_def_cfa_offset 4
 6127              		.cfi_offset 7, -4
 6128 0002 00AF     		add	r7, sp, #0
 6129              		.cfi_def_cfa_register 7
1441:..\src/command_processing.c ****  
1442:..\src/command_processing.c **** }
 6130              		.loc 1 1442 0
 6131 0004 00BF     		nop
 6132 0006 BD46     		mov	sp, r7
 6133              		.cfi_def_cfa_register 13
 6134              		@ sp needed
 6135 0008 80BC     		pop	{r7}
 6136              		.cfi_restore 7
 6137              		.cfi_def_cfa_offset 0
 6138 000a 7047     		bx	lr
 6139              		.cfi_endproc
 6140              	.LFE114:
 6141              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 6142              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 6143              		.align	2
 6144              		.global	cmd_get_encoder_map
 6145              		.thumb
 6146              		.thumb_func
 6147              		.type	cmd_get_encoder_map, %function
 6148              	cmd_get_encoder_map:
 6149              	.LFB115:
1443:..\src/command_processing.c **** 
1444:..\src/command_processing.c **** void cmd_get_encoder_map(){
 6150              		.loc 1 1444 0
 6151              		.cfi_startproc
 6152              		@ args = 0, pretend = 0, frame = 0
 6153              		@ frame_needed = 1, uses_anonymous_args = 0
 6154              		@ link register save eliminated.
 6155 0000 80B4     		push	{r7}
 6156              		.cfi_def_cfa_offset 4
 6157              		.cfi_offset 7, -4
 6158 0002 00AF     		add	r7, sp, #0
 6159              		.cfi_def_cfa_register 7
1445:..\src/command_processing.c ****    }
 6160              		.loc 1 1445 0
 6161 0004 00BF     		nop
 6162 0006 BD46     		mov	sp, r7
 6163              		.cfi_def_cfa_register 13
 6164              		@ sp needed
 6165 0008 80BC     		pop	{r7}
 6166              		.cfi_restore 7
 6167              		.cfi_def_cfa_offset 0
 6168 000a 7047     		bx	lr
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 152


 6169              		.cfi_endproc
 6170              	.LFE115:
 6171              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 6172              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 6173              		.align	2
 6174              		.global	cmd_get_encoder_raw
 6175              		.thumb
 6176              		.thumb_func
 6177              		.type	cmd_get_encoder_raw, %function
 6178              	cmd_get_encoder_raw:
 6179              	.LFB116:
1446:..\src/command_processing.c **** 
1447:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 6180              		.loc 1 1447 0
 6181              		.cfi_startproc
 6182              		@ args = 0, pretend = 0, frame = 0
 6183              		@ frame_needed = 1, uses_anonymous_args = 0
 6184              		@ link register save eliminated.
 6185 0000 80B4     		push	{r7}
 6186              		.cfi_def_cfa_offset 4
 6187              		.cfi_offset 7, -4
 6188 0002 00AF     		add	r7, sp, #0
 6189              		.cfi_def_cfa_register 7
1448:..\src/command_processing.c ****    }
 6190              		.loc 1 1448 0
 6191 0004 00BF     		nop
 6192 0006 BD46     		mov	sp, r7
 6193              		.cfi_def_cfa_register 13
 6194              		@ sp needed
 6195 0008 80BC     		pop	{r7}
 6196              		.cfi_restore 7
 6197              		.cfi_def_cfa_offset 0
 6198 000a 7047     		bx	lr
 6199              		.cfi_endproc
 6200              	.LFE116:
 6201              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 6202              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 6203              		.align	2
 6204              		.global	cmd_get_ADC_map
 6205              		.thumb
 6206              		.thumb_func
 6207              		.type	cmd_get_ADC_map, %function
 6208              	cmd_get_ADC_map:
 6209              	.LFB117:
1449:..\src/command_processing.c **** 
1450:..\src/command_processing.c **** void cmd_get_ADC_map(){
 6210              		.loc 1 1450 0
 6211              		.cfi_startproc
 6212              		@ args = 0, pretend = 0, frame = 0
 6213              		@ frame_needed = 1, uses_anonymous_args = 0
 6214              		@ link register save eliminated.
 6215 0000 80B4     		push	{r7}
 6216              		.cfi_def_cfa_offset 4
 6217              		.cfi_offset 7, -4
 6218 0002 00AF     		add	r7, sp, #0
 6219              		.cfi_def_cfa_register 7
1451:..\src/command_processing.c ****    }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 153


 6220              		.loc 1 1451 0
 6221 0004 00BF     		nop
 6222 0006 BD46     		mov	sp, r7
 6223              		.cfi_def_cfa_register 13
 6224              		@ sp needed
 6225 0008 80BC     		pop	{r7}
 6226              		.cfi_restore 7
 6227              		.cfi_def_cfa_offset 0
 6228 000a 7047     		bx	lr
 6229              		.cfi_endproc
 6230              	.LFE117:
 6231              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 6232              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 6233              		.align	2
 6234              		.global	cmd_get_ADC_raw
 6235              		.thumb
 6236              		.thumb_func
 6237              		.type	cmd_get_ADC_raw, %function
 6238              	cmd_get_ADC_raw:
 6239              	.LFB118:
1452:..\src/command_processing.c **** 
1453:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 6240              		.loc 1 1453 0
 6241              		.cfi_startproc
 6242              		@ args = 0, pretend = 0, frame = 0
 6243              		@ frame_needed = 1, uses_anonymous_args = 0
 6244              		@ link register save eliminated.
 6245 0000 80B4     		push	{r7}
 6246              		.cfi_def_cfa_offset 4
 6247              		.cfi_offset 7, -4
 6248 0002 00AF     		add	r7, sp, #0
 6249              		.cfi_def_cfa_register 7
1454:..\src/command_processing.c ****    
1455:..\src/command_processing.c **** }
 6250              		.loc 1 1455 0
 6251 0004 00BF     		nop
 6252 0006 BD46     		mov	sp, r7
 6253              		.cfi_def_cfa_register 13
 6254              		@ sp needed
 6255 0008 80BC     		pop	{r7}
 6256              		.cfi_restore 7
 6257              		.cfi_def_cfa_offset 0
 6258 000a 7047     		bx	lr
 6259              		.cfi_endproc
 6260              	.LFE118:
 6261              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 6262              		.section	.text.cmd_get_SD_file,"ax",%progbits
 6263              		.align	2
 6264              		.global	cmd_get_SD_file
 6265              		.thumb
 6266              		.thumb_func
 6267              		.type	cmd_get_SD_file, %function
 6268              	cmd_get_SD_file:
 6269              	.LFB119:
1456:..\src/command_processing.c **** 
1457:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 6270              		.loc 1 1457 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 154


 6271              		.cfi_startproc
 6272              		@ args = 0, pretend = 0, frame = 20064
 6273              		@ frame_needed = 1, uses_anonymous_args = 0
 6274 0000 80B5     		push	{r7, lr}
 6275              		.cfi_def_cfa_offset 8
 6276              		.cfi_offset 7, -8
 6277              		.cfi_offset 14, -4
 6278 0002 ADF59C4D 		sub	sp, sp, #19968
 6279              		.cfi_def_cfa_offset 19976
 6280 0006 98B0     		sub	sp, sp, #96
 6281              		.cfi_def_cfa_offset 20072
 6282 0008 00AF     		add	r7, sp, #0
 6283              		.cfi_def_cfa_register 7
 6284 000a 0246     		mov	r2, r0
 6285 000c 07F16003 		add	r3, r7, #96
 6286 0010 5A3B     		subs	r3, r3, #90
 6287 0012 1A80     		strh	r2, [r3]	@ movhi
1458:..\src/command_processing.c ****     
1459:..\src/command_processing.c ****     uint8 i = 0;
 6288              		.loc 1 1459 0
 6289 0014 0023     		movs	r3, #0
 6290 0016 07F59C42 		add	r2, r7, #19968
 6291 001a 02F15F02 		add	r2, r2, #95
 6292 001e 1370     		strb	r3, [r2]
1460:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 6293              		.loc 1 1460 0
 6294 0020 0023     		movs	r3, #0
 6295 0022 07F59C42 		add	r2, r7, #19968
 6296 0026 02F12C02 		add	r2, r2, #44
 6297 002a 1360     		str	r3, [r2]
 6298 002c 07F59C43 		add	r3, r7, #19968
 6299 0030 03F13003 		add	r3, r3, #48
 6300 0034 2E22     		movs	r2, #46
 6301 0036 0021     		movs	r1, #0
 6302 0038 1846     		mov	r0, r3
 6303 003a FFF7FEFF 		bl	memset
1461:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 6304              		.loc 1 1461 0
 6305 003e 07F16003 		add	r3, r7, #96
 6306 0042 543B     		subs	r3, r3, #84
 6307 0044 0022     		movs	r2, #0
 6308 0046 1A60     		str	r2, [r3]
 6309 0048 0433     		adds	r3, r3, #4
 6310 004a 44F61C62 		movw	r2, #19996
 6311 004e 0021     		movs	r1, #0
 6312 0050 1846     		mov	r0, r3
 6313 0052 FFF7FEFF 		bl	memset
1462:..\src/command_processing.c ****     strcpy(filename, "");
 6314              		.loc 1 1462 0
 6315 0056 3C4B     		ldr	r3, .L334
 6316 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6317 005a 07F59C42 		add	r2, r7, #19968
 6318 005e 02F12C02 		add	r2, r2, #44
 6319 0062 1370     		strb	r3, [r2]
1463:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 6320              		.loc 1 1463 0
 6321 0064 384B     		ldr	r3, .L334
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 155


 6322 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6323 0068 07F16003 		add	r3, r7, #96
 6324 006c 543B     		subs	r3, r3, #84
 6325 006e 1A70     		strb	r2, [r3]
1464:..\src/command_processing.c ****     
1465:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 6326              		.loc 1 1465 0
 6327 0070 0023     		movs	r3, #0
 6328 0072 07F59C42 		add	r2, r7, #19968
 6329 0076 02F15F02 		add	r2, r2, #95
 6330 007a 1370     		strb	r3, [r2]
 6331 007c 1DE0     		b	.L330
 6332              	.L331:
1466:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6333              		.loc 1 1466 0 discriminator 3
 6334 007e 07F59C43 		add	r3, r7, #19968
 6335 0082 03F15F03 		add	r3, r3, #95
 6336 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6337 0088 07F59C42 		add	r2, r7, #19968
 6338 008c 02F12C02 		add	r2, r2, #44
 6339 0090 1344     		add	r3, r3, r2
 6340 0092 07F59C42 		add	r2, r7, #19968
 6341 0096 02F15F02 		add	r2, r2, #95
 6342 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6343 009c 0332     		adds	r2, r2, #3
 6344 009e 2B49     		ldr	r1, .L334+4
 6345 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 6346 00a2 1A70     		strb	r2, [r3]
1465:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6347              		.loc 1 1465 0 discriminator 3
 6348 00a4 07F59C43 		add	r3, r7, #19968
 6349 00a8 03F15F03 		add	r3, r3, #95
 6350 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6351 00ae 0133     		adds	r3, r3, #1
 6352 00b0 07F59C42 		add	r2, r7, #19968
 6353 00b4 02F15F02 		add	r2, r2, #95
 6354 00b8 1370     		strb	r3, [r2]
 6355              	.L330:
1465:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6356              		.loc 1 1465 0 is_stmt 0 discriminator 1
 6357 00ba 07F59C43 		add	r3, r7, #19968
 6358 00be 03F15F03 		add	r3, r3, #95
 6359 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6360 00c4 9AB2     		uxth	r2, r3
 6361 00c6 07F16003 		add	r3, r7, #96
 6362 00ca 5A3B     		subs	r3, r3, #90
 6363 00cc 1B88     		ldrh	r3, [r3]
 6364 00ce 9342     		cmp	r3, r2
 6365 00d0 D5D8     		bhi	.L331
1467:..\src/command_processing.c ****     }
1468:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 6366              		.loc 1 1468 0 is_stmt 1
 6367 00d2 07F59C43 		add	r3, r7, #19968
 6368 00d6 03F15F03 		add	r3, r3, #95
 6369 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6370 00dc 07F59C42 		add	r2, r7, #19968
 6371 00e0 02F12C02 		add	r2, r2, #44
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 156


 6372 00e4 1344     		add	r3, r3, r2
 6373 00e6 0022     		movs	r2, #0
 6374 00e8 1A70     		strb	r2, [r3]
1469:..\src/command_processing.c ****      
1470:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1471:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 6375              		.loc 1 1471 0
 6376 00ea 07F59C43 		add	r3, r7, #19968
 6377 00ee 03F12C03 		add	r3, r3, #44
 6378 00f2 1749     		ldr	r1, .L334+8
 6379 00f4 1846     		mov	r0, r3
 6380 00f6 FFF7FEFF 		bl	strcmp
 6381 00fa 0346     		mov	r3, r0
 6382 00fc 002B     		cmp	r3, #0
 6383 00fe 0CD0     		beq	.L332
1472:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 6384              		.loc 1 1472 0
 6385 0100 07F16003 		add	r3, r7, #96
 6386 0104 543B     		subs	r3, r3, #84
 6387 0106 07F59C40 		add	r0, r7, #19968
 6388 010a 00F12C00 		add	r0, r0, #44
 6389 010e 44F62062 		movw	r2, #20000
 6390 0112 1946     		mov	r1, r3
 6391 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 6392 0118 07E0     		b	.L333
 6393              	.L332:
1473:..\src/command_processing.c ****     }
1474:..\src/command_processing.c ****     else {
1475:..\src/command_processing.c ****         //It is the currently open working file
1476:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 6394              		.loc 1 1476 0
 6395 011a 07F16003 		add	r3, r7, #96
 6396 011e 543B     		subs	r3, r3, #84
 6397 0120 44F62061 		movw	r1, #20000
 6398 0124 1846     		mov	r0, r3
 6399 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 6400              	.L333:
1477:..\src/command_processing.c ****     }
1478:..\src/command_processing.c **** 
1479:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
1480:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1481:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 6401              		.loc 1 1481 0
 6402 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1482:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 6403              		.loc 1 1482 0
 6404 012e 07F16003 		add	r3, r7, #96
 6405 0132 543B     		subs	r3, r3, #84
 6406 0134 1846     		mov	r0, r3
 6407 0136 FFF7FEFF 		bl	UART_RS485_PutString
1483:..\src/command_processing.c **** }
 6408              		.loc 1 1483 0
 6409 013a 00BF     		nop
 6410 013c 07F59C47 		add	r7, r7, #19968
 6411 0140 6037     		adds	r7, r7, #96
 6412              		.cfi_def_cfa_offset 8
 6413 0142 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 157


 6414              		.cfi_def_cfa_register 13
 6415              		@ sp needed
 6416 0144 80BD     		pop	{r7, pc}
 6417              	.L335:
 6418 0146 00BF     		.align	2
 6419              	.L334:
 6420 0148 00000000 		.word	.LC8
 6421 014c 00000000 		.word	g_rx
 6422 0150 00000000 		.word	sdFile
 6423              		.cfi_endproc
 6424              	.LFE119:
 6425              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 6426              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 6427              		.align	2
 6428              		.global	cmd_remove_SD_file
 6429              		.thumb
 6430              		.thumb_func
 6431              		.type	cmd_remove_SD_file, %function
 6432              	cmd_remove_SD_file:
 6433              	.LFB120:
1484:..\src/command_processing.c **** 
1485:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 6434              		.loc 1 1485 0
 6435              		.cfi_startproc
 6436              		@ args = 0, pretend = 0, frame = 8
 6437              		@ frame_needed = 1, uses_anonymous_args = 0
 6438              		@ link register save eliminated.
 6439 0000 80B4     		push	{r7}
 6440              		.cfi_def_cfa_offset 4
 6441              		.cfi_offset 7, -4
 6442 0002 83B0     		sub	sp, sp, #12
 6443              		.cfi_def_cfa_offset 16
 6444 0004 00AF     		add	r7, sp, #0
 6445              		.cfi_def_cfa_register 7
 6446 0006 0346     		mov	r3, r0
 6447 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1486:..\src/command_processing.c ****   
1487:..\src/command_processing.c **** }
 6448              		.loc 1 1487 0
 6449 000a 00BF     		nop
 6450 000c 0C37     		adds	r7, r7, #12
 6451              		.cfi_def_cfa_offset 4
 6452 000e BD46     		mov	sp, r7
 6453              		.cfi_def_cfa_register 13
 6454              		@ sp needed
 6455 0010 80BC     		pop	{r7}
 6456              		.cfi_restore 7
 6457              		.cfi_def_cfa_offset 0
 6458 0012 7047     		bx	lr
 6459              		.cfi_endproc
 6460              	.LFE120:
 6461              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 6462              		.global	__aeabi_i2f
 6463              		.global	__aeabi_ddiv
 6464              		.global	__aeabi_dmul
 6465              		.global	__aeabi_d2iz
 6466              		.section	.text.vibrotactile_control,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 158


 6467              		.align	2
 6468              		.global	vibrotactile_control
 6469              		.thumb
 6470              		.thumb_func
 6471              		.type	vibrotactile_control, %function
 6472              	vibrotactile_control:
 6473              	.LFB121:
1488:..\src/command_processing.c **** 
1489:..\src/command_processing.c **** //==============================================================================
1490:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
1491:..\src/command_processing.c **** //==============================================================================
1492:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1493:..\src/command_processing.c **** 
1494:..\src/command_processing.c **** void vibrotactile_control() {
 6474              		.loc 1 1494 0
 6475              		.cfi_startproc
 6476              		@ args = 0, pretend = 0, frame = 8
 6477              		@ frame_needed = 1, uses_anonymous_args = 0
 6478 0000 90B5     		push	{r4, r7, lr}
 6479              		.cfi_def_cfa_offset 12
 6480              		.cfi_offset 4, -12
 6481              		.cfi_offset 7, -8
 6482              		.cfi_offset 14, -4
 6483 0002 83B0     		sub	sp, sp, #12
 6484              		.cfi_def_cfa_offset 24
 6485 0004 00AF     		add	r7, sp, #0
 6486              		.cfi_def_cfa_register 7
1495:..\src/command_processing.c ****     
1496:..\src/command_processing.c ****     uint8 i;
1497:..\src/command_processing.c ****     
1498:..\src/command_processing.c ****     commReadIMUFromSH();    
 6487              		.loc 1 1498 0
 6488 0006 FFF7FEFF 		bl	commReadIMUFromSH
1499:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1500:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1501:..\src/command_processing.c ****     
1502:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 6489              		.loc 1 1502 0
 6490 000a 4B4B     		ldr	r3, .L345
 6491 000c B3F90030 		ldrsh	r3, [r3]
 6492 0010 1846     		mov	r0, r3
 6493 0012 FFF7FEFF 		bl	__aeabi_i2f
 6494 0016 0346     		mov	r3, r0
 6495 0018 1846     		mov	r0, r3
 6496 001a FFF7FEFF 		bl	__aeabi_f2d
 6497 001e 4FF00002 		mov	r2, #0
 6498 0022 464B     		ldr	r3, .L345+4
 6499 0024 FFF7FEFF 		bl	__aeabi_ddiv
 6500 0028 0346     		mov	r3, r0
 6501 002a 0C46     		mov	r4, r1
 6502 002c 1846     		mov	r0, r3
 6503 002e 2146     		mov	r1, r4
 6504 0030 4FF00002 		mov	r2, #0
 6505 0034 424B     		ldr	r3, .L345+8
 6506 0036 FFF7FEFF 		bl	__aeabi_dmul
 6507 003a 0346     		mov	r3, r0
 6508 003c 0C46     		mov	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 159


 6509 003e 1846     		mov	r0, r3
 6510 0040 2146     		mov	r1, r4
 6511 0042 FFF7FEFF 		bl	__aeabi_d2iz
 6512 0046 0346     		mov	r3, r0
 6513 0048 1AB2     		sxth	r2, r3
 6514 004a 3B4B     		ldr	r3, .L345
 6515 004c 1A80     		strh	r2, [r3]	@ movhi
1503:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_VT_PWM) PWM_IMU_1 = MAX_VT_PWM;
 6516              		.loc 1 1503 0
 6517 004e 3A4B     		ldr	r3, .L345
 6518 0050 B3F90030 		ldrsh	r3, [r3]
 6519 0054 642B     		cmp	r3, #100
 6520 0056 02DD     		ble	.L338
 6521              		.loc 1 1503 0 is_stmt 0 discriminator 1
 6522 0058 374B     		ldr	r3, .L345
 6523 005a 6422     		movs	r2, #100
 6524 005c 1A80     		strh	r2, [r3]	@ movhi
 6525              	.L338:
1504:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_VT_PWM) PWM_IMU_1 = 0;
 6526              		.loc 1 1504 0 is_stmt 1
 6527 005e 364B     		ldr	r3, .L345
 6528 0060 B3F90030 		ldrsh	r3, [r3]
 6529 0064 092B     		cmp	r3, #9
 6530 0066 02DC     		bgt	.L339
 6531              		.loc 1 1504 0 is_stmt 0 discriminator 1
 6532 0068 334B     		ldr	r3, .L345
 6533 006a 0022     		movs	r2, #0
 6534 006c 1A80     		strh	r2, [r3]	@ movhi
 6535              	.L339:
1505:..\src/command_processing.c ****     
1506:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 6536              		.loc 1 1506 0 is_stmt 1
 6537 006e 354B     		ldr	r3, .L345+12
 6538 0070 B3F90030 		ldrsh	r3, [r3]
 6539 0074 1846     		mov	r0, r3
 6540 0076 FFF7FEFF 		bl	__aeabi_i2f
 6541 007a 0346     		mov	r3, r0
 6542 007c 1846     		mov	r0, r3
 6543 007e FFF7FEFF 		bl	__aeabi_f2d
 6544 0082 4FF00002 		mov	r2, #0
 6545 0086 2D4B     		ldr	r3, .L345+4
 6546 0088 FFF7FEFF 		bl	__aeabi_ddiv
 6547 008c 0346     		mov	r3, r0
 6548 008e 0C46     		mov	r4, r1
 6549 0090 1846     		mov	r0, r3
 6550 0092 2146     		mov	r1, r4
 6551 0094 4FF00002 		mov	r2, #0
 6552 0098 294B     		ldr	r3, .L345+8
 6553 009a FFF7FEFF 		bl	__aeabi_dmul
 6554 009e 0346     		mov	r3, r0
 6555 00a0 0C46     		mov	r4, r1
 6556 00a2 1846     		mov	r0, r3
 6557 00a4 2146     		mov	r1, r4
 6558 00a6 FFF7FEFF 		bl	__aeabi_d2iz
 6559 00aa 0346     		mov	r3, r0
 6560 00ac 1AB2     		sxth	r2, r3
 6561 00ae 254B     		ldr	r3, .L345+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 160


 6562 00b0 1A80     		strh	r2, [r3]	@ movhi
1507:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_VT_PWM) PWM_IMU_2 = MAX_VT_PWM;
 6563              		.loc 1 1507 0
 6564 00b2 244B     		ldr	r3, .L345+12
 6565 00b4 B3F90030 		ldrsh	r3, [r3]
 6566 00b8 642B     		cmp	r3, #100
 6567 00ba 02DD     		ble	.L340
 6568              		.loc 1 1507 0 is_stmt 0 discriminator 1
 6569 00bc 214B     		ldr	r3, .L345+12
 6570 00be 6422     		movs	r2, #100
 6571 00c0 1A80     		strh	r2, [r3]	@ movhi
 6572              	.L340:
1508:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_VT_PWM) PWM_IMU_2 = 0;
 6573              		.loc 1 1508 0 is_stmt 1
 6574 00c2 204B     		ldr	r3, .L345+12
 6575 00c4 B3F90030 		ldrsh	r3, [r3]
 6576 00c8 092B     		cmp	r3, #9
 6577 00ca 02DC     		bgt	.L341
 6578              		.loc 1 1508 0 is_stmt 0 discriminator 1
 6579 00cc 1D4B     		ldr	r3, .L345+12
 6580 00ce 0022     		movs	r2, #0
 6581 00d0 1A80     		strh	r2, [r3]	@ movhi
 6582              	.L341:
1509:..\src/command_processing.c ****     
1510:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6583              		.loc 1 1510 0 is_stmt 1
 6584 00d2 194B     		ldr	r3, .L345
 6585 00d4 B3F90030 		ldrsh	r3, [r3]
 6586 00d8 DAB2     		uxtb	r2, r3
 6587 00da 1B4B     		ldr	r3, .L345+16
 6588 00dc 1A70     		strb	r2, [r3]
1511:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6589              		.loc 1 1511 0
 6590 00de 194B     		ldr	r3, .L345+12
 6591 00e0 B3F90030 		ldrsh	r3, [r3]
 6592 00e4 DAB2     		uxtb	r2, r3
 6593 00e6 184B     		ldr	r3, .L345+16
 6594 00e8 5A70     		strb	r2, [r3, #1]
1512:..\src/command_processing.c ****     
1513:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6595              		.loc 1 1513 0
 6596 00ea 134B     		ldr	r3, .L345
 6597 00ec B3F90030 		ldrsh	r3, [r3]
 6598 00f0 DAB2     		uxtb	r2, r3
 6599 00f2 154B     		ldr	r3, .L345+16
 6600 00f4 1A70     		strb	r2, [r3]
1514:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6601              		.loc 1 1514 0
 6602 00f6 134B     		ldr	r3, .L345+12
 6603 00f8 B3F90030 		ldrsh	r3, [r3]
 6604 00fc DAB2     		uxtb	r2, r3
 6605 00fe 124B     		ldr	r3, .L345+16
 6606 0100 5A70     		strb	r2, [r3, #1]
1515:..\src/command_processing.c **** 
1516:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 6607              		.loc 1 1516 0
 6608 0102 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 161


 6609 0104 FB71     		strb	r3, [r7, #7]
 6610 0106 0FE0     		b	.L342
 6611              	.L344:
1517:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6612              		.loc 1 1517 0
 6613 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6614 010a 1846     		mov	r0, r3
 6615 010c FFF7FEFF 		bl	vibrotactile_control_generic
1518:..\src/command_processing.c ****         
1519:..\src/command_processing.c ****         if (interrupt_flag){
 6616              		.loc 1 1519 0
 6617 0110 0E4B     		ldr	r3, .L345+20
 6618 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6619 0114 002B     		cmp	r3, #0
 6620 0116 04D0     		beq	.L343
1520:..\src/command_processing.c ****             interrupt_flag = FALSE;
 6621              		.loc 1 1520 0
 6622 0118 0C4B     		ldr	r3, .L345+20
 6623 011a 0022     		movs	r2, #0
 6624 011c 1A70     		strb	r2, [r3]
1521:..\src/command_processing.c ****             interrupt_manager();
 6625              		.loc 1 1521 0
 6626 011e FFF7FEFF 		bl	interrupt_manager
 6627              	.L343:
1516:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6628              		.loc 1 1516 0 discriminator 2
 6629 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6630 0124 0133     		adds	r3, r3, #1
 6631 0126 FB71     		strb	r3, [r7, #7]
 6632              	.L342:
1516:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6633              		.loc 1 1516 0 is_stmt 0 discriminator 1
 6634 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6635 012a 012B     		cmp	r3, #1
 6636 012c ECD9     		bls	.L344
1522:..\src/command_processing.c ****         }
1523:..\src/command_processing.c ****     } 
1524:..\src/command_processing.c **** }
 6637              		.loc 1 1524 0 is_stmt 1
 6638 012e 00BF     		nop
 6639 0130 0C37     		adds	r7, r7, #12
 6640              		.cfi_def_cfa_offset 12
 6641 0132 BD46     		mov	sp, r7
 6642              		.cfi_def_cfa_register 13
 6643              		@ sp needed
 6644 0134 90BD     		pop	{r4, r7, pc}
 6645              	.L346:
 6646 0136 00BF     		.align	2
 6647              	.L345:
 6648 0138 00000000 		.word	PWM_IMU_1
 6649 013c 00004940 		.word	1078525952
 6650 0140 00003E40 		.word	1077805056
 6651 0144 00000000 		.word	PWM_IMU_2
 6652 0148 00000000 		.word	VT_ref
 6653 014c 00000000 		.word	interrupt_flag
 6654              		.cfi_endproc
 6655              	.LFE121:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 162


 6656              		.size	vibrotactile_control, .-vibrotactile_control
 6657              		.global	__aeabi_i2d
 6658              		.global	__aeabi_dsub
 6659              		.global	__aeabi_dadd
 6660              		.global	__aeabi_fcmpgt
 6661              		.global	__aeabi_f2iz
 6662              		.global	__aeabi_fmul
 6663              		.section	.text.air_chambers_control,"ax",%progbits
 6664              		.align	2
 6665              		.global	air_chambers_control
 6666              		.thumb
 6667              		.thumb_func
 6668              		.type	air_chambers_control, %function
 6669              	air_chambers_control:
 6670              	.LFB122:
1525:..\src/command_processing.c **** 
1526:..\src/command_processing.c **** 
1527:..\src/command_processing.c **** //==============================================================================
1528:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1529:..\src/command_processing.c **** //==============================================================================
1530:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1531:..\src/command_processing.c **** 
1532:..\src/command_processing.c **** 
1533:..\src/command_processing.c **** void air_chambers_control() {
 6671              		.loc 1 1533 0
 6672              		.cfi_startproc
 6673              		@ args = 0, pretend = 0, frame = 16
 6674              		@ frame_needed = 1, uses_anonymous_args = 0
 6675 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 6676              		.cfi_def_cfa_offset 24
 6677              		.cfi_offset 4, -24
 6678              		.cfi_offset 5, -20
 6679              		.cfi_offset 7, -16
 6680              		.cfi_offset 8, -12
 6681              		.cfi_offset 9, -8
 6682              		.cfi_offset 14, -4
 6683 0004 84B0     		sub	sp, sp, #16
 6684              		.cfi_def_cfa_offset 40
 6685 0006 00AF     		add	r7, sp, #0
 6686              		.cfi_def_cfa_register 7
1534:..\src/command_processing.c **** 
1535:..\src/command_processing.c ****     int16 curr_diff;
1536:..\src/command_processing.c ****     int32 pressure_reference;
1537:..\src/command_processing.c ****     int32 err_pressure;
1538:..\src/command_processing.c ****     int32 valve_command;
1539:..\src/command_processing.c ****     int16 x_value;
1540:..\src/command_processing.c **** 
1541:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1542:..\src/command_processing.c ****     
1543:..\src/command_processing.c ****     curr_diff = (int16)commReadResCurrFromSH();
 6687              		.loc 1 1543 0
 6688 0008 FFF7FEFF 		bl	commReadResCurrFromSH
 6689 000c 0346     		mov	r3, r0
 6690 000e BB80     		strh	r3, [r7, #4]	@ movhi
1544:..\src/command_processing.c **** 
1545:..\src/command_processing.c ****     // Compute pressure reference
1546:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 163


1547:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 6691              		.loc 1 1547 0
 6692 0010 B7F90430 		ldrsh	r3, [r7, #4]
 6693 0014 1846     		mov	r0, r3
 6694 0016 FFF7FEFF 		bl	__aeabi_i2d
 6695 001a 4FF00002 		mov	r2, #0
 6696 001e 574B     		ldr	r3, .L357
 6697 0020 FFF7FEFF 		bl	__aeabi_dsub
 6698 0024 0346     		mov	r3, r0
 6699 0026 0C46     		mov	r4, r1
 6700 0028 1846     		mov	r0, r3
 6701 002a 2146     		mov	r1, r4
 6702 002c FFF7FEFF 		bl	__aeabi_d2iz
 6703 0030 0346     		mov	r3, r0
 6704 0032 FB80     		strh	r3, [r7, #6]	@ movhi
1548:..\src/command_processing.c ****     if (x_value < 0)
 6705              		.loc 1 1548 0
 6706 0034 B7F90630 		ldrsh	r3, [r7, #6]
 6707 0038 002B     		cmp	r3, #0
 6708 003a 01DA     		bge	.L348
1549:..\src/command_processing.c ****         x_value = 0;
 6709              		.loc 1 1549 0
 6710 003c 0023     		movs	r3, #0
 6711 003e FB80     		strh	r3, [r7, #6]	@ movhi
 6712              	.L348:
1550:..\src/command_processing.c ****     
1551:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 6713              		.loc 1 1551 0
 6714 0040 B7F90630 		ldrsh	r3, [r7, #6]
 6715 0044 1846     		mov	r0, r3
 6716 0046 FFF7FEFF 		bl	__aeabi_i2d
 6717 004a 4FF00002 		mov	r2, #0
 6718 004e 4C4B     		ldr	r3, .L357+4
 6719 0050 FFF7FEFF 		bl	__aeabi_dmul
 6720 0054 0346     		mov	r3, r0
 6721 0056 0C46     		mov	r4, r1
 6722 0058 2546     		mov	r5, r4
 6723 005a 1C46     		mov	r4, r3
 6724 005c B7F90630 		ldrsh	r3, [r7, #6]
 6725 0060 1846     		mov	r0, r3
 6726 0062 FFF7FEFF 		bl	__aeabi_i2d
 6727 0066 0246     		mov	r2, r0
 6728 0068 0B46     		mov	r3, r1
 6729 006a 2046     		mov	r0, r4
 6730 006c 2946     		mov	r1, r5
 6731 006e FFF7FEFF 		bl	__aeabi_dmul
 6732 0072 0346     		mov	r3, r0
 6733 0074 0C46     		mov	r4, r1
 6734 0076 2546     		mov	r5, r4
 6735 0078 1C46     		mov	r4, r3
 6736 007a 424B     		ldr	r3, .L357+8
 6737 007c 1B6D     		ldr	r3, [r3, #80]
 6738 007e 1846     		mov	r0, r3
 6739 0080 FFF7FEFF 		bl	__aeabi_i2d
 6740 0084 4FF00002 		mov	r2, #0
 6741 0088 3F4B     		ldr	r3, .L357+12
 6742 008a FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 164


 6743 008e 0246     		mov	r2, r0
 6744 0090 0B46     		mov	r3, r1
 6745 0092 9046     		mov	r8, r2
 6746 0094 9946     		mov	r9, r3
 6747 0096 B7F90630 		ldrsh	r3, [r7, #6]
 6748 009a 1846     		mov	r0, r3
 6749 009c FFF7FEFF 		bl	__aeabi_i2d
 6750 00a0 0246     		mov	r2, r0
 6751 00a2 0B46     		mov	r3, r1
 6752 00a4 4046     		mov	r0, r8
 6753 00a6 4946     		mov	r1, r9
 6754 00a8 FFF7FEFF 		bl	__aeabi_dmul
 6755 00ac 0246     		mov	r2, r0
 6756 00ae 0B46     		mov	r3, r1
 6757 00b0 2046     		mov	r0, r4
 6758 00b2 2946     		mov	r1, r5
 6759 00b4 FFF7FEFF 		bl	__aeabi_dadd
 6760 00b8 0346     		mov	r3, r0
 6761 00ba 0C46     		mov	r4, r1
 6762 00bc 1846     		mov	r0, r3
 6763 00be 2146     		mov	r1, r4
 6764 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 6765 00c4 0146     		mov	r1, r0
 6766 00c6 2F4B     		ldr	r3, .L357+8
 6767 00c8 1B6D     		ldr	r3, [r3, #80]
 6768 00ca 2E4A     		ldr	r2, .L357+8
 6769 00cc 126D     		ldr	r2, [r2, #80]
 6770 00ce 02FB03F3 		mul	r3, r2, r3
 6771 00d2 91FBF3F3 		sdiv	r3, r1, r3
 6772 00d6 FB60     		str	r3, [r7, #12]
1552:..\src/command_processing.c ****     if (pressure_reference < 0)
 6773              		.loc 1 1552 0
 6774 00d8 FB68     		ldr	r3, [r7, #12]
 6775 00da 002B     		cmp	r3, #0
 6776 00dc 01DA     		bge	.L349
1553:..\src/command_processing.c ****         pressure_reference = 0;
 6777              		.loc 1 1553 0
 6778 00de 0023     		movs	r3, #0
 6779 00e0 FB60     		str	r3, [r7, #12]
 6780              	.L349:
1554:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 6781              		.loc 1 1554 0
 6782 00e2 F868     		ldr	r0, [r7, #12]
 6783 00e4 FFF7FEFF 		bl	__aeabi_i2f
 6784 00e8 0246     		mov	r2, r0
 6785 00ea 264B     		ldr	r3, .L357+8
 6786 00ec 5B6D     		ldr	r3, [r3, #84]	@ float
 6787 00ee 1946     		mov	r1, r3
 6788 00f0 1046     		mov	r0, r2
 6789 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 6790 00f6 0346     		mov	r3, r0
 6791 00f8 002B     		cmp	r3, #0
 6792 00fa 06D0     		beq	.L350
1555:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 6793              		.loc 1 1555 0
 6794 00fc 214B     		ldr	r3, .L357+8
 6795 00fe 5B6D     		ldr	r3, [r3, #84]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 165


 6796 0100 1846     		mov	r0, r3
 6797 0102 FFF7FEFF 		bl	__aeabi_f2iz
 6798 0106 0346     		mov	r3, r0
 6799 0108 FB60     		str	r3, [r7, #12]
 6800              	.L350:
1556:..\src/command_processing.c ****     
1557:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 6801              		.loc 1 1557 0
 6802 010a 204B     		ldr	r3, .L357+16
 6803 010c 1B68     		ldr	r3, [r3]
 6804 010e FA68     		ldr	r2, [r7, #12]
 6805 0110 D31A     		subs	r3, r2, r3
 6806 0112 3B60     		str	r3, [r7]
1558:..\src/command_processing.c **** 
1559:..\src/command_processing.c ****     if (x_value <= 0){
 6807              		.loc 1 1559 0
 6808 0114 B7F90630 		ldrsh	r3, [r7, #6]
 6809 0118 002B     		cmp	r3, #0
 6810 011a 02DC     		bgt	.L352
1560:..\src/command_processing.c ****         //i.e the hand is opening
1561:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 6811              		.loc 1 1561 0
 6812 011c 0023     		movs	r3, #0
 6813 011e BB60     		str	r3, [r7, #8]
 6814 0120 01E0     		b	.L353
 6815              	.L352:
1562:..\src/command_processing.c ****     }
1563:..\src/command_processing.c ****     else {
1564:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1565:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1566:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1567:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
 6816              		.loc 1 1567 0
 6817 0122 0123     		movs	r3, #1
 6818 0124 BB60     		str	r3, [r7, #8]
 6819              	.L353:
1568:..\src/command_processing.c ****     }
1569:..\src/command_processing.c ****     
1570:..\src/command_processing.c ****     // Pump control*/
1571:..\src/command_processing.c ****    
1572:..\src/command_processing.c ****     Pump_refNew = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 6820              		.loc 1 1572 0
 6821 0126 174B     		ldr	r3, .L357+8
 6822 0128 9C6D     		ldr	r4, [r3, #88]	@ float
 6823 012a 3868     		ldr	r0, [r7]
 6824 012c FFF7FEFF 		bl	__aeabi_i2f
 6825 0130 0346     		mov	r3, r0
 6826 0132 1946     		mov	r1, r3
 6827 0134 2046     		mov	r0, r4
 6828 0136 FFF7FEFF 		bl	__aeabi_fmul
 6829 013a 0346     		mov	r3, r0
 6830 013c 1846     		mov	r0, r3
 6831 013e FFF7FEFF 		bl	__aeabi_f2iz
 6832 0142 0346     		mov	r3, r0
 6833 0144 DAB2     		uxtb	r2, r3
 6834 0146 124B     		ldr	r3, .L357+20
 6835 0148 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 166


1573:..\src/command_processing.c **** 
1574:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1575:..\src/command_processing.c ****     
1576:..\src/command_processing.c ****     // Limit output voltage
1577:..\src/command_processing.c ****     if (Pump_refNew > MAX_PUMP_PWM) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 6836              		.loc 1 1577 0
 6837 014a 114B     		ldr	r3, .L357+20
 6838 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6839 014e 502B     		cmp	r3, #80
 6840 0150 02D9     		bls	.L354
1578:..\src/command_processing.c ****         Pump_refNew = MAX_PUMP_PWM; // 80
 6841              		.loc 1 1578 0
 6842 0152 0F4B     		ldr	r3, .L357+20
 6843 0154 5022     		movs	r2, #80
 6844 0156 1A70     		strb	r2, [r3]
 6845              	.L354:
1579:..\src/command_processing.c ****     if (Pump_refNew < MIN_PUMP_PWM)
 6846              		.loc 1 1579 0
 6847 0158 0D4B     		ldr	r3, .L357+20
 6848 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6849 015c 132B     		cmp	r3, #19
 6850 015e 02D8     		bhi	.L355
1580:..\src/command_processing.c ****         Pump_refNew = 0;
 6851              		.loc 1 1580 0
 6852 0160 0B4B     		ldr	r3, .L357+20
 6853 0162 0022     		movs	r2, #0
 6854 0164 1A70     		strb	r2, [r3]
 6855              	.L355:
1581:..\src/command_processing.c ****         
1582:..\src/command_processing.c ****     VALVE_Write(valve_command);
 6856              		.loc 1 1582 0
 6857 0166 BB68     		ldr	r3, [r7, #8]
 6858 0168 DBB2     		uxtb	r3, r3
 6859 016a 1846     		mov	r0, r3
 6860 016c FFF7FEFF 		bl	VALVE_Write
1583:..\src/command_processing.c ****     
1584:..\src/command_processing.c ****     
1585:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1586:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1587:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1588:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1589:..\src/command_processing.c **** 
1590:..\src/command_processing.c **** }
 6861              		.loc 1 1590 0
 6862 0170 00BF     		nop
 6863 0172 1037     		adds	r7, r7, #16
 6864              		.cfi_def_cfa_offset 24
 6865 0174 BD46     		mov	sp, r7
 6866              		.cfi_def_cfa_register 13
 6867              		@ sp needed
 6868 0176 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 6869              	.L358:
 6870 017a 00BF     		.align	2
 6871              	.L357:
 6872 017c 00004940 		.word	1078525952
 6873 0180 00003EC0 		.word	-1069678592
 6874 0184 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 167


 6875 0188 00804B40 		.word	1078689792
 6876 018c 00000000 		.word	pressure_value
 6877 0190 00000000 		.word	Pump_refNew
 6878              		.cfi_endproc
 6879              	.LFE122:
 6880              		.size	air_chambers_control, .-air_chambers_control
 6881              		.section	.text.pump_control,"ax",%progbits
 6882              		.align	2
 6883              		.global	pump_control
 6884              		.thumb
 6885              		.thumb_func
 6886              		.type	pump_control, %function
 6887              	pump_control:
 6888              	.LFB123:
1591:..\src/command_processing.c **** 
1592:..\src/command_processing.c **** void pump_control() {
 6889              		.loc 1 1592 0
 6890              		.cfi_startproc
 6891              		@ args = 0, pretend = 0, frame = 0
 6892              		@ frame_needed = 1, uses_anonymous_args = 0
 6893 0000 80B5     		push	{r7, lr}
 6894              		.cfi_def_cfa_offset 8
 6895              		.cfi_offset 7, -8
 6896              		.cfi_offset 14, -4
 6897 0002 00AF     		add	r7, sp, #0
 6898              		.cfi_def_cfa_register 7
1593:..\src/command_processing.c ****     if (Pump_ref > 100)
 6899              		.loc 1 1593 0
 6900 0004 064B     		ldr	r3, .L361
 6901 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6902 0008 642B     		cmp	r3, #100
 6903 000a 02D9     		bls	.L360
1594:..\src/command_processing.c ****         Pump_ref = 100;
 6904              		.loc 1 1594 0
 6905 000c 044B     		ldr	r3, .L361
 6906 000e 6422     		movs	r2, #100
 6907 0010 1A70     		strb	r2, [r3]
 6908              	.L360:
1595:..\src/command_processing.c ****     PWM_PUMP_WriteCompare(Pump_ref);
 6909              		.loc 1 1595 0
 6910 0012 034B     		ldr	r3, .L361
 6911 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6912 0016 1846     		mov	r0, r3
 6913 0018 FFF7FEFF 		bl	PWM_PUMP_WriteCompare
1596:..\src/command_processing.c **** }
 6914              		.loc 1 1596 0
 6915 001c 00BF     		nop
 6916 001e 80BD     		pop	{r7, pc}
 6917              	.L362:
 6918              		.align	2
 6919              	.L361:
 6920 0020 00000000 		.word	Pump_ref
 6921              		.cfi_endproc
 6922              	.LFE123:
 6923              		.size	pump_control, .-pump_control
 6924              		.section	.text.VT_control,"ax",%progbits
 6925              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 168


 6926              		.global	VT_control
 6927              		.thumb
 6928              		.thumb_func
 6929              		.type	VT_control, %function
 6930              	VT_control:
 6931              	.LFB124:
1597:..\src/command_processing.c **** 
1598:..\src/command_processing.c **** void VT_control() {
 6932              		.loc 1 1598 0
 6933              		.cfi_startproc
 6934              		@ args = 0, pretend = 0, frame = 0
 6935              		@ frame_needed = 1, uses_anonymous_args = 0
 6936 0000 80B5     		push	{r7, lr}
 6937              		.cfi_def_cfa_offset 8
 6938              		.cfi_offset 7, -8
 6939              		.cfi_offset 14, -4
 6940 0002 00AF     		add	r7, sp, #0
 6941              		.cfi_def_cfa_register 7
1599:..\src/command_processing.c ****     if (VT_ref[0] > 100)
 6942              		.loc 1 1599 0
 6943 0004 0D4B     		ldr	r3, .L366
 6944 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6945 0008 642B     		cmp	r3, #100
 6946 000a 02D9     		bls	.L364
1600:..\src/command_processing.c ****         VT_ref[0] = 100;
 6947              		.loc 1 1600 0
 6948 000c 0B4B     		ldr	r3, .L366
 6949 000e 6422     		movs	r2, #100
 6950 0010 1A70     		strb	r2, [r3]
 6951              	.L364:
1601:..\src/command_processing.c ****     PWM_VT_WriteCompare1(VT_ref[0]);
 6952              		.loc 1 1601 0
 6953 0012 0A4B     		ldr	r3, .L366
 6954 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6955 0016 9BB2     		uxth	r3, r3
 6956 0018 1846     		mov	r0, r3
 6957 001a FFF7FEFF 		bl	PWM_VT_WriteCompare1
1602:..\src/command_processing.c ****     if (VT_ref[1] > 100)
 6958              		.loc 1 1602 0
 6959 001e 074B     		ldr	r3, .L366
 6960 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6961 0022 642B     		cmp	r3, #100
 6962 0024 02D9     		bls	.L365
1603:..\src/command_processing.c ****         VT_ref[1] = 100;
 6963              		.loc 1 1603 0
 6964 0026 054B     		ldr	r3, .L366
 6965 0028 6422     		movs	r2, #100
 6966 002a 5A70     		strb	r2, [r3, #1]
 6967              	.L365:
1604:..\src/command_processing.c ****     PWM_VT_WriteCompare2(VT_ref[1]);
 6968              		.loc 1 1604 0
 6969 002c 034B     		ldr	r3, .L366
 6970 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6971 0030 9BB2     		uxth	r3, r3
 6972 0032 1846     		mov	r0, r3
 6973 0034 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1605:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 169


 6974              		.loc 1 1605 0
 6975 0038 00BF     		nop
 6976 003a 80BD     		pop	{r7, pc}
 6977              	.L367:
 6978              		.align	2
 6979              	.L366:
 6980 003c 00000000 		.word	VT_ref
 6981              		.cfi_endproc
 6982              	.LFE124:
 6983              		.size	VT_control, .-VT_control
 6984              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 6985              		.align	2
 6986              		.global	emg_activation_velocity_fsm
 6987              		.thumb
 6988              		.thumb_func
 6989              		.type	emg_activation_velocity_fsm, %function
 6990              	emg_activation_velocity_fsm:
 6991              	.LFB125:
1606:..\src/command_processing.c **** //==============================================================================
1607:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1608:..\src/command_processing.c **** //==============================================================================
1609:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1610:..\src/command_processing.c **** 
1611:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 6992              		.loc 1 1611 0
 6993              		.cfi_startproc
 6994              		@ args = 0, pretend = 0, frame = 0
 6995              		@ frame_needed = 1, uses_anonymous_args = 0
 6996              		@ link register save eliminated.
 6997 0000 80B4     		push	{r7}
 6998              		.cfi_def_cfa_offset 4
 6999              		.cfi_offset 7, -4
 7000 0002 00AF     		add	r7, sp, #0
 7001              		.cfi_def_cfa_register 7
1612:..\src/command_processing.c ****     
1613:..\src/command_processing.c **** return 0;
 7002              		.loc 1 1613 0
 7003 0004 0023     		movs	r3, #0
1614:..\src/command_processing.c **** }
 7004              		.loc 1 1614 0
 7005 0006 1846     		mov	r0, r3
 7006 0008 BD46     		mov	sp, r7
 7007              		.cfi_def_cfa_register 13
 7008              		@ sp needed
 7009 000a 80BC     		pop	{r7}
 7010              		.cfi_restore 7
 7011              		.cfi_def_cfa_offset 0
 7012 000c 7047     		bx	lr
 7013              		.cfi_endproc
 7014              	.LFE125:
 7015              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 7016 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 7017              		.align	2
 7018              		.global	otbk_act_wrist_control
 7019              		.thumb
 7020              		.thumb_func
 7021              		.type	otbk_act_wrist_control, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 170


 7022              	otbk_act_wrist_control:
 7023              	.LFB126:
1615:..\src/command_processing.c **** 
1616:..\src/command_processing.c **** //==============================================================================
1617:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1618:..\src/command_processing.c **** //==============================================================================
1619:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1620:..\src/command_processing.c **** 
1621:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 7024              		.loc 1 1621 0
 7025              		.cfi_startproc
 7026              		@ args = 0, pretend = 0, frame = 8
 7027              		@ frame_needed = 1, uses_anonymous_args = 0
 7028              		@ link register save eliminated.
 7029 0000 80B4     		push	{r7}
 7030              		.cfi_def_cfa_offset 4
 7031              		.cfi_offset 7, -4
 7032 0002 83B0     		sub	sp, sp, #12
 7033              		.cfi_def_cfa_offset 16
 7034 0004 00AF     		add	r7, sp, #0
 7035              		.cfi_def_cfa_register 7
 7036 0006 7860     		str	r0, [r7, #4]
1622:..\src/command_processing.c ****     
1623:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1624:..\src/command_processing.c ****     
1625:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1626:..\src/command_processing.c ****         
1627:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
1628:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1629:..\src/command_processing.c ****     switch (fsm_state){
1630:..\src/command_processing.c ****         case RELAX_STATE:
1631:..\src/command_processing.c ****             
1632:..\src/command_processing.c ****             // Wrist stop
1633:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1634:..\src/command_processing.c ****             
1635:..\src/command_processing.c ****             // Softhand stop
1636:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1637:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1638:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1639:..\src/command_processing.c ****             
1640:..\src/command_processing.c ****             break;
1641:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1642:..\src/command_processing.c ****                 
1643:..\src/command_processing.c ****             break;
1644:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1645:..\src/command_processing.c ****             
1646:..\src/command_processing.c ****             // Wrist movement
1647:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1648:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1649:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1650:..\src/command_processing.c ****                 }
1651:..\src/command_processing.c ****                 else {
1652:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1653:..\src/command_processing.c ****                 }
1654:..\src/command_processing.c ****             }
1655:..\src/command_processing.c ****             else {
1656:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 171


1657:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1658:..\src/command_processing.c ****                 }
1659:..\src/command_processing.c ****                 else {
1660:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1661:..\src/command_processing.c ****                 }
1662:..\src/command_processing.c ****             }
1663:..\src/command_processing.c ****             
1664:..\src/command_processing.c ****             // Softhand stop
1665:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1666:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1667:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1668:..\src/command_processing.c ****             
1669:..\src/command_processing.c ****             break;
1670:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1671:..\src/command_processing.c ****             
1672:..\src/command_processing.c ****             // Wrist stop
1673:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1674:..\src/command_processing.c ****             
1675:..\src/command_processing.c ****             // SoftHand movement
1676:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1677:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1678:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1679:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1680:..\src/command_processing.c ****             
1681:..\src/command_processing.c ****             break;
1682:..\src/command_processing.c ****     }
1683:..\src/command_processing.c ****         
1684:..\src/command_processing.c ****     // Limit output voltage
1685:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1686:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1687:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1688:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1689:..\src/command_processing.c ****     
1690:..\src/command_processing.c **** #endif
1691:..\src/command_processing.c **** }
 7037              		.loc 1 1691 0
 7038 0008 00BF     		nop
 7039 000a 0C37     		adds	r7, r7, #12
 7040              		.cfi_def_cfa_offset 4
 7041 000c BD46     		mov	sp, r7
 7042              		.cfi_def_cfa_register 13
 7043              		@ sp needed
 7044 000e 80BC     		pop	{r7}
 7045              		.cfi_restore 7
 7046              		.cfi_def_cfa_offset 0
 7047 0010 7047     		bx	lr
 7048              		.cfi_endproc
 7049              	.LFE126:
 7050              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 7051 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 7052              		.align	2
 7053              		.global	drive_slave
 7054              		.thumb
 7055              		.thumb_func
 7056              		.type	drive_slave, %function
 7057              	drive_slave:
 7058              	.LFB127:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 172


1692:..\src/command_processing.c **** 
1693:..\src/command_processing.c **** //==============================================================================
1694:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1695:..\src/command_processing.c **** //==============================================================================
1696:..\src/command_processing.c ****  
1697:..\src/command_processing.c **** //==============================================================================
1698:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1699:..\src/command_processing.c **** //==============================================================================
1700:..\src/command_processing.c ****  
1701:..\src/command_processing.c ****  
1702:..\src/command_processing.c **** void drive_slave( uint8 slave_ID) {
 7059              		.loc 1 1702 0
 7060              		.cfi_startproc
 7061              		@ args = 0, pretend = 0, frame = 24
 7062              		@ frame_needed = 1, uses_anonymous_args = 0
 7063 0000 90B5     		push	{r4, r7, lr}
 7064              		.cfi_def_cfa_offset 12
 7065              		.cfi_offset 4, -12
 7066              		.cfi_offset 7, -8
 7067              		.cfi_offset 14, -4
 7068 0002 87B0     		sub	sp, sp, #28
 7069              		.cfi_def_cfa_offset 40
 7070 0004 00AF     		add	r7, sp, #0
 7071              		.cfi_def_cfa_register 7
 7072 0006 0346     		mov	r3, r0
 7073 0008 FB71     		strb	r3, [r7, #7]
1703:..\src/command_processing.c **** // This function use RS485 protocol to communicate with the second board. 
1704:..\src/command_processing.c **** // Baude Rate is set to 2000000. 
1705:..\src/command_processing.c **** // Here a request (: : ID pk_length CMD check) is sent  --> 6bytes * 8bit * 0.5us = 24us
1706:..\src/command_processing.c **** // and an answer (: : ID pk_length CMD data1[0] data1[1] check) received --> 8bytes * 8bit * 0.5us 
1707:..\src/command_processing.c **** // At least 56 us are requested for this communication 
1708:..\src/command_processing.c **** 
1709:..\src/command_processing.c ****     uint8 packet_data[6];
1710:..\src/command_processing.c ****     uint8 packet_length;
1711:..\src/command_processing.c ****     int16 aux_int16;
1712:..\src/command_processing.c **** 
1713:..\src/command_processing.c ****        
1714:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
1715:..\src/command_processing.c ****     packet_data[0] = CMD_SET_INPUTS;
 7074              		.loc 1 1715 0
 7075 000a 8223     		movs	r3, #130
 7076 000c 3B74     		strb	r3, [r7, #16]
1716:..\src/command_processing.c ****     
1717:..\src/command_processing.c ****  //aux_int16 = (int16) motor_idx;
1718:..\src/command_processing.c ****    aux_int16 = (int16) (SH_ref >> g_mem.SH_config.res);
 7077              		.loc 1 1718 0
 7078 000e 1B4B     		ldr	r3, .L372
 7079 0010 1B68     		ldr	r3, [r3]
 7080 0012 1B4A     		ldr	r2, .L372+4
 7081 0014 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 7082 0018 1341     		asrs	r3, r3, r2
 7083 001a 1BB2     		sxth	r3, r3
 7084 001c FB81     		strh	r3, [r7, #14]	@ movhi
1719:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 7085              		.loc 1 1719 0
 7086 001e 07F10E03 		add	r3, r7, #14
 7087 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 173


 7088 0024 BB74     		strb	r3, [r7, #18]
1720:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 7089              		.loc 1 1720 0
 7090 0026 07F10E03 		add	r3, r7, #14
 7091 002a 0133     		adds	r3, r3, #1
 7092 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7093 002e 7B74     		strb	r3, [r7, #17]
1721:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
 7094              		.loc 1 1721 0
 7095 0030 07F11003 		add	r3, r7, #16
 7096 0034 0333     		adds	r3, r3, #3
 7097 0036 0022     		movs	r2, #0
 7098 0038 1A80     		strh	r2, [r3]	@ movhi
1722:..\src/command_processing.c ****   //  packet_data[3] = (char*)0;
1723:..\src/command_processing.c ****    // packet_data[4] = (char*)0;
1724:..\src/command_processing.c ****     packet_length = 6;
 7099              		.loc 1 1724 0
 7100 003a 0623     		movs	r3, #6
 7101 003c FB75     		strb	r3, [r7, #23]
1725:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 7102              		.loc 1 1725 0
 7103 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7104 0040 5C1E     		subs	r4, r3, #1
 7105 0042 FB7D     		ldrb	r3, [r7, #23]
 7106 0044 013B     		subs	r3, r3, #1
 7107 0046 DAB2     		uxtb	r2, r3
 7108 0048 07F11003 		add	r3, r7, #16
 7109 004c 1146     		mov	r1, r2
 7110 004e 1846     		mov	r0, r3
 7111 0050 FFF7FEFF 		bl	LCRChecksum
 7112 0054 0346     		mov	r3, r0
 7113 0056 1A46     		mov	r2, r3
 7114 0058 07F11803 		add	r3, r7, #24
 7115 005c 2344     		add	r3, r3, r4
 7116 005e 03F8082C 		strb	r2, [r3, #-8]
1726:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, slave_ID);
 7117              		.loc 1 1726 0
 7118 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7119 0064 99B2     		uxth	r1, r3
 7120 0066 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7121 0068 07F11003 		add	r3, r7, #16
 7122 006c 1846     		mov	r0, r3
 7123 006e FFF7FEFF 		bl	commWriteID
1727:..\src/command_processing.c **** 
1728:..\src/command_processing.c **** }
 7124              		.loc 1 1728 0
 7125 0072 00BF     		nop
 7126 0074 1C37     		adds	r7, r7, #28
 7127              		.cfi_def_cfa_offset 12
 7128 0076 BD46     		mov	sp, r7
 7129              		.cfi_def_cfa_register 13
 7130              		@ sp needed
 7131 0078 90BD     		pop	{r4, r7, pc}
 7132              	.L373:
 7133 007a 00BF     		.align	2
 7134              	.L372:
 7135 007c 00000000 		.word	SH_ref
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 174


 7136 0080 00000000 		.word	g_mem
 7137              		.cfi_endproc
 7138              	.LFE127:
 7139              		.size	drive_slave, .-drive_slave
 7140              		.section	.text.stop_master_device,"ax",%progbits
 7141              		.align	2
 7142              		.global	stop_master_device
 7143              		.thumb
 7144              		.thumb_func
 7145              		.type	stop_master_device, %function
 7146              	stop_master_device:
 7147              	.LFB128:
1729:..\src/command_processing.c **** //==============================================================================
1730:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1731:..\src/command_processing.c **** //==============================================================================
1732:..\src/command_processing.c ****  
1733:..\src/command_processing.c **** void stop_master_device() {
 7148              		.loc 1 1733 0
 7149              		.cfi_startproc
 7150              		@ args = 0, pretend = 0, frame = 0
 7151              		@ frame_needed = 1, uses_anonymous_args = 0
 7152 0000 80B5     		push	{r7, lr}
 7153              		.cfi_def_cfa_offset 8
 7154              		.cfi_offset 7, -8
 7155              		.cfi_offset 14, -4
 7156 0002 00AF     		add	r7, sp, #0
 7157              		.cfi_def_cfa_register 7
1734:..\src/command_processing.c ****     
1735:..\src/command_processing.c ****         // Stop pump and open valve
1736:..\src/command_processing.c ****         Pump_ref = 0;    
 7158              		.loc 1 1736 0
 7159 0004 074B     		ldr	r3, .L375
 7160 0006 0022     		movs	r2, #0
 7161 0008 1A70     		strb	r2, [r3]
1737:..\src/command_processing.c ****         VALVE_Write(OPEN);
 7162              		.loc 1 1737 0
 7163 000a 0020     		movs	r0, #0
 7164 000c FFF7FEFF 		bl	VALVE_Write
1738:..\src/command_processing.c ****         master_mode = 0; 
 7165              		.loc 1 1738 0
 7166 0010 054B     		ldr	r3, .L375+4
 7167 0012 0022     		movs	r2, #0
 7168 0014 1A70     		strb	r2, [r3]
1739:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 7169              		.loc 1 1739 0
 7170 0016 054B     		ldr	r3, .L375+8
 7171 0018 0022     		movs	r2, #0
 7172 001a 83F84020 		strb	r2, [r3, #64]
1740:..\src/command_processing.c **** 
1741:..\src/command_processing.c **** }
 7173              		.loc 1 1741 0
 7174 001e 00BF     		nop
 7175 0020 80BD     		pop	{r7, pc}
 7176              	.L376:
 7177 0022 00BF     		.align	2
 7178              	.L375:
 7179 0024 00000000 		.word	Pump_ref
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 175


 7180 0028 00000000 		.word	master_mode
 7181 002c 00000000 		.word	g_mem
 7182              		.cfi_endproc
 7183              	.LFE128:
 7184              		.size	stop_master_device, .-stop_master_device
 7185              		.section	.text.deactivate_slaves,"ax",%progbits
 7186              		.align	2
 7187              		.global	deactivate_slaves
 7188              		.thumb
 7189              		.thumb_func
 7190              		.type	deactivate_slaves, %function
 7191              	deactivate_slaves:
 7192              	.LFB129:
1742:..\src/command_processing.c **** 
1743:..\src/command_processing.c **** //==============================================================================
1744:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1745:..\src/command_processing.c **** //==============================================================================
1746:..\src/command_processing.c ****  
1747:..\src/command_processing.c **** void deactivate_slaves() {
 7193              		.loc 1 1747 0
 7194              		.cfi_startproc
 7195              		@ args = 0, pretend = 0, frame = 0
 7196              		@ frame_needed = 1, uses_anonymous_args = 0
 7197              		@ link register save eliminated.
 7198 0000 80B4     		push	{r7}
 7199              		.cfi_def_cfa_offset 4
 7200              		.cfi_offset 7, -4
 7201 0002 00AF     		add	r7, sp, #0
 7202              		.cfi_def_cfa_register 7
1748:..\src/command_processing.c ****    
1749:..\src/command_processing.c **** }
 7203              		.loc 1 1749 0
 7204 0004 00BF     		nop
 7205 0006 BD46     		mov	sp, r7
 7206              		.cfi_def_cfa_register 13
 7207              		@ sp needed
 7208 0008 80BC     		pop	{r7}
 7209              		.cfi_restore 7
 7210              		.cfi_def_cfa_offset 0
 7211 000a 7047     		bx	lr
 7212              		.cfi_endproc
 7213              	.LFE129:
 7214              		.size	deactivate_slaves, .-deactivate_slaves
 7215              		.bss
 7216              		.align	1
 7217              	i.10044:
 7218 0000 0000     		.space	2
 7219 0002 0000     		.align	2
 7220              	last_aux_int16.10114:
 7221 0004 00000000 		.space	6
 7221      0000
 7222              		.text
 7223              	.Letext0:
 7224              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7225              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7226              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 7227              		.file 6 "..\\src\\commands.h"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 176


 7228              		.file 7 "..\\src\\globals.h"
 7229              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 7230              		.section	.debug_info,"",%progbits
 7231              	.Ldebug_info0:
 7232 0000 86180000 		.4byte	0x1886
 7233 0004 0400     		.2byte	0x4
 7234 0006 00000000 		.4byte	.Ldebug_abbrev0
 7235 000a 04       		.byte	0x4
 7236 000b 01       		.uleb128 0x1
 7237 000c 50080000 		.4byte	.LASF305
 7238 0010 0C       		.byte	0xc
 7239 0011 F1100000 		.4byte	.LASF306
 7240 0015 54060000 		.4byte	.LASF307
 7241 0019 00000000 		.4byte	.Ldebug_ranges0+0
 7242 001d 00000000 		.4byte	0
 7243 0021 00000000 		.4byte	.Ldebug_line0
 7244 0025 02       		.uleb128 0x2
 7245 0026 01       		.byte	0x1
 7246 0027 06       		.byte	0x6
 7247 0028 60030000 		.4byte	.LASF0
 7248 002c 02       		.uleb128 0x2
 7249 002d 01       		.byte	0x1
 7250 002e 08       		.byte	0x8
 7251 002f CF030000 		.4byte	.LASF1
 7252 0033 02       		.uleb128 0x2
 7253 0034 02       		.byte	0x2
 7254 0035 05       		.byte	0x5
 7255 0036 C00E0000 		.4byte	.LASF2
 7256 003a 02       		.uleb128 0x2
 7257 003b 02       		.byte	0x2
 7258 003c 07       		.byte	0x7
 7259 003d 5A100000 		.4byte	.LASF3
 7260 0041 03       		.uleb128 0x3
 7261 0042 BD100000 		.4byte	.LASF5
 7262 0046 03       		.byte	0x3
 7263 0047 3F       		.byte	0x3f
 7264 0048 4C000000 		.4byte	0x4c
 7265 004c 02       		.uleb128 0x2
 7266 004d 04       		.byte	0x4
 7267 004e 05       		.byte	0x5
 7268 004f 55020000 		.4byte	.LASF4
 7269 0053 03       		.uleb128 0x3
 7270 0054 03090000 		.4byte	.LASF6
 7271 0058 03       		.byte	0x3
 7272 0059 41       		.byte	0x41
 7273 005a 5E000000 		.4byte	0x5e
 7274 005e 02       		.uleb128 0x2
 7275 005f 04       		.byte	0x4
 7276 0060 07       		.byte	0x7
 7277 0061 0D070000 		.4byte	.LASF7
 7278 0065 02       		.uleb128 0x2
 7279 0066 08       		.byte	0x8
 7280 0067 05       		.byte	0x5
 7281 0068 0E090000 		.4byte	.LASF8
 7282 006c 02       		.uleb128 0x2
 7283 006d 08       		.byte	0x8
 7284 006e 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 177


 7285 006f 2E0C0000 		.4byte	.LASF9
 7286 0073 04       		.uleb128 0x4
 7287 0074 04       		.byte	0x4
 7288 0075 05       		.byte	0x5
 7289 0076 696E7400 		.ascii	"int\000"
 7290 007a 02       		.uleb128 0x2
 7291 007b 04       		.byte	0x4
 7292 007c 07       		.byte	0x7
 7293 007d 140A0000 		.4byte	.LASF10
 7294 0081 03       		.uleb128 0x3
 7295 0082 6C000000 		.4byte	.LASF11
 7296 0086 04       		.byte	0x4
 7297 0087 2C       		.byte	0x2c
 7298 0088 41000000 		.4byte	0x41
 7299 008c 03       		.uleb128 0x3
 7300 008d BF0F0000 		.4byte	.LASF12
 7301 0091 04       		.byte	0x4
 7302 0092 30       		.byte	0x30
 7303 0093 53000000 		.4byte	0x53
 7304 0097 05       		.uleb128 0x5
 7305 0098 AE0E0000 		.4byte	.LASF13
 7306 009c 05       		.byte	0x5
 7307 009d E401     		.2byte	0x1e4
 7308 009f 2C000000 		.4byte	0x2c
 7309 00a3 05       		.uleb128 0x5
 7310 00a4 45110000 		.4byte	.LASF14
 7311 00a8 05       		.byte	0x5
 7312 00a9 E501     		.2byte	0x1e5
 7313 00ab 3A000000 		.4byte	0x3a
 7314 00af 05       		.uleb128 0x5
 7315 00b0 8D000000 		.4byte	.LASF15
 7316 00b4 05       		.byte	0x5
 7317 00b5 E601     		.2byte	0x1e6
 7318 00b7 5E000000 		.4byte	0x5e
 7319 00bb 05       		.uleb128 0x5
 7320 00bc 7B010000 		.4byte	.LASF16
 7321 00c0 05       		.byte	0x5
 7322 00c1 E701     		.2byte	0x1e7
 7323 00c3 25000000 		.4byte	0x25
 7324 00c7 05       		.uleb128 0x5
 7325 00c8 7B0F0000 		.4byte	.LASF17
 7326 00cc 05       		.byte	0x5
 7327 00cd E801     		.2byte	0x1e8
 7328 00cf 33000000 		.4byte	0x33
 7329 00d3 05       		.uleb128 0x5
 7330 00d4 A3100000 		.4byte	.LASF18
 7331 00d8 05       		.byte	0x5
 7332 00d9 E901     		.2byte	0x1e9
 7333 00db 4C000000 		.4byte	0x4c
 7334 00df 02       		.uleb128 0x2
 7335 00e0 04       		.byte	0x4
 7336 00e1 04       		.byte	0x4
 7337 00e2 B4090000 		.4byte	.LASF19
 7338 00e6 02       		.uleb128 0x2
 7339 00e7 08       		.byte	0x8
 7340 00e8 04       		.byte	0x4
 7341 00e9 74090000 		.4byte	.LASF20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 178


 7342 00ed 02       		.uleb128 0x2
 7343 00ee 01       		.byte	0x1
 7344 00ef 08       		.byte	0x8
 7345 00f0 6C040000 		.4byte	.LASF21
 7346 00f4 05       		.uleb128 0x5
 7347 00f5 E60C0000 		.4byte	.LASF22
 7348 00f9 05       		.byte	0x5
 7349 00fa 8E02     		.2byte	0x28e
 7350 00fc 00010000 		.4byte	0x100
 7351 0100 06       		.uleb128 0x6
 7352 0101 97000000 		.4byte	0x97
 7353 0105 02       		.uleb128 0x2
 7354 0106 08       		.byte	0x8
 7355 0107 04       		.byte	0x4
 7356 0108 980B0000 		.4byte	.LASF23
 7357 010c 02       		.uleb128 0x2
 7358 010d 04       		.byte	0x4
 7359 010e 07       		.byte	0x7
 7360 010f 20000000 		.4byte	.LASF24
 7361 0113 07       		.uleb128 0x7
 7362 0114 04       		.byte	0x4
 7363 0115 ED000000 		.4byte	0xed
 7364 0119 07       		.uleb128 0x7
 7365 011a 04       		.byte	0x4
 7366 011b 1F010000 		.4byte	0x11f
 7367 011f 08       		.uleb128 0x8
 7368 0120 ED000000 		.4byte	0xed
 7369 0124 09       		.uleb128 0x9
 7370 0125 16060000 		.4byte	.LASF43
 7371 0129 01       		.byte	0x1
 7372 012a 2C000000 		.4byte	0x2c
 7373 012e 06       		.byte	0x6
 7374 012f 43       		.byte	0x43
 7375 0130 A1010000 		.4byte	0x1a1
 7376 0134 0A       		.uleb128 0xa
 7377 0135 1B110000 		.4byte	.LASF25
 7378 0139 01       		.byte	0x1
 7379 013a 0A       		.uleb128 0xa
 7380 013b 2F0F0000 		.4byte	.LASF26
 7381 013f 02       		.byte	0x2
 7382 0140 0A       		.uleb128 0xa
 7383 0141 1F030000 		.4byte	.LASF27
 7384 0145 03       		.byte	0x3
 7385 0146 0A       		.uleb128 0xa
 7386 0147 9B0F0000 		.4byte	.LASF28
 7387 014b 04       		.byte	0x4
 7388 014c 0A       		.uleb128 0xa
 7389 014d EC010000 		.4byte	.LASF29
 7390 0151 05       		.byte	0x5
 7391 0152 0A       		.uleb128 0xa
 7392 0153 AC070000 		.4byte	.LASF30
 7393 0157 06       		.byte	0x6
 7394 0158 0A       		.uleb128 0xa
 7395 0159 CA0E0000 		.4byte	.LASF31
 7396 015d 07       		.byte	0x7
 7397 015e 0A       		.uleb128 0xa
 7398 015f 3B040000 		.4byte	.LASF32
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 179


 7399 0163 08       		.byte	0x8
 7400 0164 0A       		.uleb128 0xa
 7401 0165 FE000000 		.4byte	.LASF33
 7402 0169 09       		.byte	0x9
 7403 016a 0A       		.uleb128 0xa
 7404 016b BB040000 		.4byte	.LASF34
 7405 016f 0A       		.byte	0xa
 7406 0170 0A       		.uleb128 0xa
 7407 0171 8D0F0000 		.4byte	.LASF35
 7408 0175 0B       		.byte	0xb
 7409 0176 0A       		.uleb128 0xa
 7410 0177 F6020000 		.4byte	.LASF36
 7411 017b 0C       		.byte	0xc
 7412 017c 0A       		.uleb128 0xa
 7413 017d 5E020000 		.4byte	.LASF37
 7414 0181 0D       		.byte	0xd
 7415 0182 0A       		.uleb128 0xa
 7416 0183 5E0A0000 		.4byte	.LASF38
 7417 0187 0E       		.byte	0xe
 7418 0188 0A       		.uleb128 0xa
 7419 0189 B8010000 		.4byte	.LASF39
 7420 018d 0F       		.byte	0xf
 7421 018e 0A       		.uleb128 0xa
 7422 018f 0C0B0000 		.4byte	.LASF40
 7423 0193 10       		.byte	0x10
 7424 0194 0A       		.uleb128 0xa
 7425 0195 50030000 		.4byte	.LASF41
 7426 0199 11       		.byte	0x11
 7427 019a 0A       		.uleb128 0xa
 7428 019b 640B0000 		.4byte	.LASF42
 7429 019f 12       		.byte	0x12
 7430 01a0 00       		.byte	0
 7431 01a1 09       		.uleb128 0x9
 7432 01a2 4A050000 		.4byte	.LASF44
 7433 01a6 01       		.byte	0x1
 7434 01a7 2C000000 		.4byte	0x2c
 7435 01ab 06       		.byte	0x6
 7436 01ac 5A       		.byte	0x5a
 7437 01ad 00020000 		.4byte	0x200
 7438 01b1 0A       		.uleb128 0xa
 7439 01b2 560D0000 		.4byte	.LASF45
 7440 01b6 00       		.byte	0
 7441 01b7 0A       		.uleb128 0xa
 7442 01b8 4E000000 		.4byte	.LASF46
 7443 01bc 01       		.byte	0x1
 7444 01bd 0A       		.uleb128 0xa
 7445 01be C5030000 		.4byte	.LASF47
 7446 01c2 02       		.byte	0x2
 7447 01c3 0A       		.uleb128 0xa
 7448 01c4 09000000 		.4byte	.LASF48
 7449 01c8 03       		.byte	0x3
 7450 01c9 0A       		.uleb128 0xa
 7451 01ca 840A0000 		.4byte	.LASF49
 7452 01ce 04       		.byte	0x4
 7453 01cf 0A       		.uleb128 0xa
 7454 01d0 810F0000 		.4byte	.LASF50
 7455 01d4 05       		.byte	0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 180


 7456 01d5 0A       		.uleb128 0xa
 7457 01d6 3C0D0000 		.4byte	.LASF51
 7458 01da 06       		.byte	0x6
 7459 01db 0A       		.uleb128 0xa
 7460 01dc 9A040000 		.4byte	.LASF52
 7461 01e0 07       		.byte	0x7
 7462 01e1 0A       		.uleb128 0xa
 7463 01e2 4C0C0000 		.4byte	.LASF53
 7464 01e6 08       		.byte	0x8
 7465 01e7 0A       		.uleb128 0xa
 7466 01e8 11080000 		.4byte	.LASF54
 7467 01ec 09       		.byte	0x9
 7468 01ed 0A       		.uleb128 0xa
 7469 01ee 54050000 		.4byte	.LASF55
 7470 01f2 0A       		.byte	0xa
 7471 01f3 0A       		.uleb128 0xa
 7472 01f4 F30D0000 		.4byte	.LASF56
 7473 01f8 0B       		.byte	0xb
 7474 01f9 0A       		.uleb128 0xa
 7475 01fa 49060000 		.4byte	.LASF57
 7476 01fe 0C       		.byte	0xc
 7477 01ff 00       		.byte	0
 7478 0200 09       		.uleb128 0x9
 7479 0201 420A0000 		.4byte	.LASF58
 7480 0205 01       		.byte	0x1
 7481 0206 2C000000 		.4byte	0x2c
 7482 020a 06       		.byte	0x6
 7483 020b 69       		.byte	0x69
 7484 020c DD020000 		.4byte	0x2dd
 7485 0210 0A       		.uleb128 0xa
 7486 0211 5D110000 		.4byte	.LASF59
 7487 0215 00       		.byte	0
 7488 0216 0A       		.uleb128 0xa
 7489 0217 000F0000 		.4byte	.LASF60
 7490 021b 01       		.byte	0x1
 7491 021c 0A       		.uleb128 0xa
 7492 021d FC060000 		.4byte	.LASF61
 7493 0221 03       		.byte	0x3
 7494 0222 0A       		.uleb128 0xa
 7495 0223 22040000 		.4byte	.LASF62
 7496 0227 04       		.byte	0x4
 7497 0228 0A       		.uleb128 0xa
 7498 0229 290D0000 		.4byte	.LASF63
 7499 022d 05       		.byte	0x5
 7500 022e 0A       		.uleb128 0xa
 7501 022f EC070000 		.4byte	.LASF64
 7502 0233 06       		.byte	0x6
 7503 0234 0A       		.uleb128 0xa
 7504 0235 1F070000 		.4byte	.LASF65
 7505 0239 09       		.byte	0x9
 7506 023a 0A       		.uleb128 0xa
 7507 023b 29000000 		.4byte	.LASF66
 7508 023f 0A       		.byte	0xa
 7509 0240 0A       		.uleb128 0xa
 7510 0241 5D0F0000 		.4byte	.LASF67
 7511 0245 0C       		.byte	0xc
 7512 0246 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 181


 7513 0247 D00B0000 		.4byte	.LASF68
 7514 024b 0D       		.byte	0xd
 7515 024c 0A       		.uleb128 0xa
 7516 024d 15040000 		.4byte	.LASF69
 7517 0251 80       		.byte	0x80
 7518 0252 0A       		.uleb128 0xa
 7519 0253 5B040000 		.4byte	.LASF70
 7520 0257 81       		.byte	0x81
 7521 0258 0A       		.uleb128 0xa
 7522 0259 60050000 		.4byte	.LASF71
 7523 025d 82       		.byte	0x82
 7524 025e 0A       		.uleb128 0xa
 7525 025f E00E0000 		.4byte	.LASF72
 7526 0263 83       		.byte	0x83
 7527 0264 0A       		.uleb128 0xa
 7528 0265 5C0E0000 		.4byte	.LASF73
 7529 0269 84       		.byte	0x84
 7530 026a 0A       		.uleb128 0xa
 7531 026b B6020000 		.4byte	.LASF74
 7532 026f 85       		.byte	0x85
 7533 0270 0A       		.uleb128 0xa
 7534 0271 3A080000 		.4byte	.LASF75
 7535 0275 86       		.byte	0x86
 7536 0276 0A       		.uleb128 0xa
 7537 0277 C7070000 		.4byte	.LASF76
 7538 027b 88       		.byte	0x88
 7539 027c 0A       		.uleb128 0xa
 7540 027d 4A0F0000 		.4byte	.LASF77
 7541 0281 89       		.byte	0x89
 7542 0282 0A       		.uleb128 0xa
 7543 0283 800C0000 		.4byte	.LASF78
 7544 0287 8B       		.byte	0x8b
 7545 0288 0A       		.uleb128 0xa
 7546 0289 520B0000 		.4byte	.LASF79
 7547 028d 8C       		.byte	0x8c
 7548 028e 0A       		.uleb128 0xa
 7549 028f EF080000 		.4byte	.LASF80
 7550 0293 8E       		.byte	0x8e
 7551 0294 0A       		.uleb128 0xa
 7552 0295 DD030000 		.4byte	.LASF81
 7553 0299 FB       		.byte	0xfb
 7554 029a 0A       		.uleb128 0xa
 7555 029b F9030000 		.4byte	.LASF82
 7556 029f FA       		.byte	0xfa
 7557 02a0 0A       		.uleb128 0xa
 7558 02a1 C50C0000 		.4byte	.LASF83
 7559 02a5 90       		.byte	0x90
 7560 02a6 0A       		.uleb128 0xa
 7561 02a7 FB010000 		.4byte	.LASF84
 7562 02ab 92       		.byte	0x92
 7563 02ac 0A       		.uleb128 0xa
 7564 02ad 24100000 		.4byte	.LASF85
 7565 02b1 A1       		.byte	0xa1
 7566 02b2 0A       		.uleb128 0xa
 7567 02b3 2B0E0000 		.4byte	.LASF86
 7568 02b7 A2       		.byte	0xa2
 7569 02b8 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 182


 7570 02b9 B70A0000 		.4byte	.LASF87
 7571 02bd A3       		.byte	0xa3
 7572 02be 0A       		.uleb128 0xa
 7573 02bf 3D0E0000 		.4byte	.LASF88
 7574 02c3 A4       		.byte	0xa4
 7575 02c4 0A       		.uleb128 0xa
 7576 02c5 EF0E0000 		.4byte	.LASF89
 7577 02c9 A5       		.byte	0xa5
 7578 02ca 0A       		.uleb128 0xa
 7579 02cb FC0D0000 		.4byte	.LASF90
 7580 02cf A6       		.byte	0xa6
 7581 02d0 0A       		.uleb128 0xa
 7582 02d1 7B090000 		.4byte	.LASF91
 7583 02d5 A7       		.byte	0xa7
 7584 02d6 0A       		.uleb128 0xa
 7585 02d7 C3090000 		.4byte	.LASF92
 7586 02db A8       		.byte	0xa8
 7587 02dc 00       		.byte	0
 7588 02dd 09       		.uleb128 0x9
 7589 02de 0D110000 		.4byte	.LASF93
 7590 02e2 01       		.byte	0x1
 7591 02e3 2C000000 		.4byte	0x2c
 7592 02e7 06       		.byte	0x6
 7593 02e8 BB       		.byte	0xbb
 7594 02e9 1E030000 		.4byte	0x31e
 7595 02ed 0A       		.uleb128 0xa
 7596 02ee E7050000 		.4byte	.LASF94
 7597 02f2 00       		.byte	0
 7598 02f3 0A       		.uleb128 0xa
 7599 02f4 970A0000 		.4byte	.LASF95
 7600 02f8 01       		.byte	0x1
 7601 02f9 0A       		.uleb128 0xa
 7602 02fa 0C020000 		.4byte	.LASF96
 7603 02fe 02       		.byte	0x2
 7604 02ff 0A       		.uleb128 0xa
 7605 0300 53010000 		.4byte	.LASF97
 7606 0304 03       		.byte	0x3
 7607 0305 0A       		.uleb128 0xa
 7608 0306 11010000 		.4byte	.LASF98
 7609 030a 04       		.byte	0x4
 7610 030b 0A       		.uleb128 0xa
 7611 030c 36000000 		.4byte	.LASF99
 7612 0310 05       		.byte	0x5
 7613 0311 0A       		.uleb128 0xa
 7614 0312 3B070000 		.4byte	.LASF100
 7615 0316 06       		.byte	0x6
 7616 0317 0A       		.uleb128 0xa
 7617 0318 0C0E0000 		.4byte	.LASF101
 7618 031c 07       		.byte	0x7
 7619 031d 00       		.byte	0
 7620 031e 09       		.uleb128 0x9
 7621 031f F60B0000 		.4byte	.LASF102
 7622 0323 01       		.byte	0x1
 7623 0324 2C000000 		.4byte	0x2c
 7624 0328 06       		.byte	0x6
 7625 0329 DE       		.byte	0xde
 7626 032a 3B030000 		.4byte	0x33b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 183


 7627 032e 0A       		.uleb128 0xa
 7628 032f DD050000 		.4byte	.LASF103
 7629 0333 00       		.byte	0
 7630 0334 0A       		.uleb128 0xa
 7631 0335 8D070000 		.4byte	.LASF104
 7632 0339 01       		.byte	0x1
 7633 033a 00       		.byte	0
 7634 033b 09       		.uleb128 0x9
 7635 033c 700F0000 		.4byte	.LASF105
 7636 0340 01       		.byte	0x1
 7637 0341 2C000000 		.4byte	0x2c
 7638 0345 06       		.byte	0x6
 7639 0346 E6       		.byte	0xe6
 7640 0347 88030000 		.4byte	0x388
 7641 034b 0A       		.uleb128 0xa
 7642 034c 94070000 		.4byte	.LASF106
 7643 0350 00       		.byte	0
 7644 0351 0A       		.uleb128 0xa
 7645 0352 2A110000 		.4byte	.LASF107
 7646 0356 01       		.byte	0x1
 7647 0357 0A       		.uleb128 0xa
 7648 0358 3A090000 		.4byte	.LASF108
 7649 035c 02       		.byte	0x2
 7650 035d 0A       		.uleb128 0xa
 7651 035e 2E0B0000 		.4byte	.LASF109
 7652 0362 03       		.byte	0x3
 7653 0363 0A       		.uleb128 0xa
 7654 0364 4D0A0000 		.4byte	.LASF110
 7655 0368 04       		.byte	0x4
 7656 0369 0A       		.uleb128 0xa
 7657 036a 560C0000 		.4byte	.LASF111
 7658 036e 05       		.byte	0x5
 7659 036f 0A       		.uleb128 0xa
 7660 0370 A40B0000 		.4byte	.LASF112
 7661 0374 06       		.byte	0x6
 7662 0375 0A       		.uleb128 0xa
 7663 0376 010B0000 		.4byte	.LASF113
 7664 037a 07       		.byte	0x7
 7665 037b 0A       		.uleb128 0xa
 7666 037c A3050000 		.4byte	.LASF114
 7667 0380 08       		.byte	0x8
 7668 0381 0A       		.uleb128 0xa
 7669 0382 F0060000 		.4byte	.LASF115
 7670 0386 09       		.byte	0x9
 7671 0387 00       		.byte	0
 7672 0388 0B       		.uleb128 0xb
 7673 0389 79000000 		.4byte	.LASF119
 7674 038d 86       		.byte	0x86
 7675 038e 07       		.byte	0x7
 7676 038f 9B       		.byte	0x9b
 7677 0390 C5030000 		.4byte	0x3c5
 7678 0394 0C       		.uleb128 0xc
 7679 0395 76050000 		.4byte	.LASF116
 7680 0399 07       		.byte	0x7
 7681 039a 9C       		.byte	0x9c
 7682 039b C5030000 		.4byte	0x3c5
 7683 039f 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 184


 7684 03a0 0C       		.uleb128 0xc
 7685 03a1 6C0C0000 		.4byte	.LASF117
 7686 03a5 07       		.byte	0x7
 7687 03a6 9D       		.byte	0x9d
 7688 03a7 C7000000 		.4byte	0xc7
 7689 03ab 80       		.byte	0x80
 7690 03ac 0D       		.uleb128 0xd
 7691 03ad 696E6400 		.ascii	"ind\000"
 7692 03b1 07       		.byte	0x7
 7693 03b2 9E       		.byte	0x9e
 7694 03b3 C7000000 		.4byte	0xc7
 7695 03b7 82       		.byte	0x82
 7696 03b8 0C       		.uleb128 0xc
 7697 03b9 DD010000 		.4byte	.LASF118
 7698 03bd 07       		.byte	0x7
 7699 03be 9F       		.byte	0x9f
 7700 03bf 97000000 		.4byte	0x97
 7701 03c3 84       		.byte	0x84
 7702 03c4 00       		.byte	0
 7703 03c5 0E       		.uleb128 0xe
 7704 03c6 97000000 		.4byte	0x97
 7705 03ca D5030000 		.4byte	0x3d5
 7706 03ce 0F       		.uleb128 0xf
 7707 03cf 0C010000 		.4byte	0x10c
 7708 03d3 7F       		.byte	0x7f
 7709 03d4 00       		.byte	0
 7710 03d5 0B       		.uleb128 0xb
 7711 03d6 16050000 		.4byte	.LASF120
 7712 03da 10       		.byte	0x10
 7713 03db 07       		.byte	0x7
 7714 03dc A9       		.byte	0xa9
 7715 03dd 05040000 		.4byte	0x405
 7716 03e1 0D       		.uleb128 0xd
 7717 03e2 696400   		.ascii	"id\000"
 7718 03e5 07       		.byte	0x7
 7719 03e6 AA       		.byte	0xaa
 7720 03e7 97000000 		.4byte	0x97
 7721 03eb 00       		.byte	0
 7722 03ec 0C       		.uleb128 0xc
 7723 03ed FA0F0000 		.4byte	.LASF121
 7724 03f1 07       		.byte	0x7
 7725 03f2 AB       		.byte	0xab
 7726 03f3 97000000 		.4byte	0x97
 7727 03f7 01       		.byte	0x1
 7728 03f8 0C       		.uleb128 0xc
 7729 03f9 89020000 		.4byte	.LASF122
 7730 03fd 07       		.byte	0x7
 7731 03fe AC       		.byte	0xac
 7732 03ff 05040000 		.4byte	0x405
 7733 0403 02       		.byte	0x2
 7734 0404 00       		.byte	0
 7735 0405 0E       		.uleb128 0xe
 7736 0406 97000000 		.4byte	0x97
 7737 040a 15040000 		.4byte	0x415
 7738 040e 0F       		.uleb128 0xf
 7739 040f 0C010000 		.4byte	0x10c
 7740 0413 0D       		.byte	0xd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 185


 7741 0414 00       		.byte	0
 7742 0415 0B       		.uleb128 0xb
 7743 0416 1C090000 		.4byte	.LASF123
 7744 041a 10       		.byte	0x10
 7745 041b 07       		.byte	0x7
 7746 041c B3       		.byte	0xb3
 7747 041d 5E040000 		.4byte	0x45e
 7748 0421 0C       		.uleb128 0xc
 7749 0422 D9000000 		.4byte	.LASF124
 7750 0426 07       		.byte	0x7
 7751 0427 B5       		.byte	0xb5
 7752 0428 D3000000 		.4byte	0xd3
 7753 042c 00       		.byte	0
 7754 042d 0C       		.uleb128 0xc
 7755 042e DD040000 		.4byte	.LASF125
 7756 0432 07       		.byte	0x7
 7757 0433 B6       		.byte	0xb6
 7758 0434 D3000000 		.4byte	0xd3
 7759 0438 04       		.byte	0x4
 7760 0439 0C       		.uleb128 0xc
 7761 043a BC070000 		.4byte	.LASF126
 7762 043e 07       		.byte	0x7
 7763 043f B7       		.byte	0xb7
 7764 0440 97000000 		.4byte	0x97
 7765 0444 08       		.byte	0x8
 7766 0445 0D       		.uleb128 0xd
 7767 0446 72657300 		.ascii	"res\000"
 7768 044a 07       		.byte	0x7
 7769 044b B8       		.byte	0xb8
 7770 044c 97000000 		.4byte	0x97
 7771 0450 09       		.byte	0x9
 7772 0451 0C       		.uleb128 0xc
 7773 0452 89020000 		.4byte	.LASF122
 7774 0456 07       		.byte	0x7
 7775 0457 B9       		.byte	0xb9
 7776 0458 5E040000 		.4byte	0x45e
 7777 045c 0A       		.byte	0xa
 7778 045d 00       		.byte	0
 7779 045e 0E       		.uleb128 0xe
 7780 045f 97000000 		.4byte	0x97
 7781 0463 6E040000 		.4byte	0x46e
 7782 0467 0F       		.uleb128 0xf
 7783 0468 0C010000 		.4byte	0x10c
 7784 046c 05       		.byte	0x5
 7785 046d 00       		.byte	0
 7786 046e 0B       		.uleb128 0xb
 7787 046f B1010000 		.4byte	.LASF127
 7788 0473 10       		.byte	0x10
 7789 0474 07       		.byte	0x7
 7790 0475 C1       		.byte	0xc1
 7791 0476 B7040000 		.4byte	0x4b7
 7792 047a 0C       		.uleb128 0xc
 7793 047b 440B0000 		.4byte	.LASF128
 7794 047f 07       		.byte	0x7
 7795 0480 C2       		.byte	0xc2
 7796 0481 B7040000 		.4byte	0x4b7
 7797 0485 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 186


 7798 0486 0C       		.uleb128 0xc
 7799 0487 D1100000 		.4byte	.LASF129
 7800 048b 07       		.byte	0x7
 7801 048c C3       		.byte	0xc3
 7802 048d C7040000 		.4byte	0x4c7
 7803 0491 04       		.byte	0x4
 7804 0492 0C       		.uleb128 0xc
 7805 0493 00050000 		.4byte	.LASF130
 7806 0497 07       		.byte	0x7
 7807 0498 C4       		.byte	0xc4
 7808 0499 D7040000 		.4byte	0x4d7
 7809 049d 0C       		.byte	0xc
 7810 049e 0C       		.uleb128 0xc
 7811 049f 91030000 		.4byte	.LASF131
 7812 04a3 07       		.byte	0x7
 7813 04a4 C5       		.byte	0xc5
 7814 04a5 97000000 		.4byte	0x97
 7815 04a9 0E       		.byte	0xe
 7816 04aa 0C       		.uleb128 0xc
 7817 04ab 89020000 		.4byte	.LASF122
 7818 04af 07       		.byte	0x7
 7819 04b0 C6       		.byte	0xc6
 7820 04b1 E7040000 		.4byte	0x4e7
 7821 04b5 0F       		.byte	0xf
 7822 04b6 00       		.byte	0
 7823 04b7 0E       		.uleb128 0xe
 7824 04b8 A3000000 		.4byte	0xa3
 7825 04bc C7040000 		.4byte	0x4c7
 7826 04c0 0F       		.uleb128 0xf
 7827 04c1 0C010000 		.4byte	0x10c
 7828 04c5 01       		.byte	0x1
 7829 04c6 00       		.byte	0
 7830 04c7 0E       		.uleb128 0xe
 7831 04c8 AF000000 		.4byte	0xaf
 7832 04cc D7040000 		.4byte	0x4d7
 7833 04d0 0F       		.uleb128 0xf
 7834 04d1 0C010000 		.4byte	0x10c
 7835 04d5 01       		.byte	0x1
 7836 04d6 00       		.byte	0
 7837 04d7 0E       		.uleb128 0xe
 7838 04d8 97000000 		.4byte	0x97
 7839 04dc E7040000 		.4byte	0x4e7
 7840 04e0 0F       		.uleb128 0xf
 7841 04e1 0C010000 		.4byte	0x10c
 7842 04e5 01       		.byte	0x1
 7843 04e6 00       		.byte	0
 7844 04e7 0E       		.uleb128 0xe
 7845 04e8 97000000 		.4byte	0x97
 7846 04ec F7040000 		.4byte	0x4f7
 7847 04f0 0F       		.uleb128 0xf
 7848 04f1 0C010000 		.4byte	0x10c
 7849 04f5 00       		.byte	0
 7850 04f6 00       		.byte	0
 7851 04f7 0B       		.uleb128 0xb
 7852 04f8 3A010000 		.4byte	.LASF132
 7853 04fc 10       		.byte	0x10
 7854 04fd 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 187


 7855 04fe CD       		.byte	0xcd
 7856 04ff 28050000 		.4byte	0x528
 7857 0503 0C       		.uleb128 0xc
 7858 0504 6C030000 		.4byte	.LASF133
 7859 0508 07       		.byte	0x7
 7860 0509 CE       		.byte	0xce
 7861 050a 97000000 		.4byte	0x97
 7862 050e 00       		.byte	0
 7863 050f 0C       		.uleb128 0xc
 7864 0510 84070000 		.4byte	.LASF134
 7865 0514 07       		.byte	0x7
 7866 0515 CF       		.byte	0xcf
 7867 0516 97000000 		.4byte	0x97
 7868 051a 01       		.byte	0x1
 7869 051b 0C       		.uleb128 0xc
 7870 051c 89020000 		.4byte	.LASF122
 7871 0520 07       		.byte	0x7
 7872 0521 D0       		.byte	0xd0
 7873 0522 05040000 		.4byte	0x405
 7874 0526 02       		.byte	0x2
 7875 0527 00       		.byte	0
 7876 0528 0B       		.uleb128 0xb
 7877 0529 B00B0000 		.4byte	.LASF135
 7878 052d 10       		.byte	0x10
 7879 052e 07       		.byte	0x7
 7880 052f D7       		.byte	0xd7
 7881 0530 7D050000 		.4byte	0x57d
 7882 0534 0C       		.uleb128 0xc
 7883 0535 7E100000 		.4byte	.LASF136
 7884 0539 07       		.byte	0x7
 7885 053a D8       		.byte	0xd8
 7886 053b D3000000 		.4byte	0xd3
 7887 053f 00       		.byte	0
 7888 0540 0C       		.uleb128 0xc
 7889 0541 01060000 		.4byte	.LASF137
 7890 0545 07       		.byte	0x7
 7891 0546 D9       		.byte	0xd9
 7892 0547 DF000000 		.4byte	0xdf
 7893 054b 04       		.byte	0x4
 7894 054c 0C       		.uleb128 0xc
 7895 054d EB0C0000 		.4byte	.LASF138
 7896 0551 07       		.byte	0x7
 7897 0552 DA       		.byte	0xda
 7898 0553 DF000000 		.4byte	0xdf
 7899 0557 08       		.byte	0x8
 7900 0558 0C       		.uleb128 0xc
 7901 0559 1D080000 		.4byte	.LASF139
 7902 055d 07       		.byte	0x7
 7903 055e DB       		.byte	0xdb
 7904 055f 97000000 		.4byte	0x97
 7905 0563 0C       		.byte	0xc
 7906 0564 0C       		.uleb128 0xc
 7907 0565 710E0000 		.4byte	.LASF140
 7908 0569 07       		.byte	0x7
 7909 056a DC       		.byte	0xdc
 7910 056b 97000000 		.4byte	0x97
 7911 056f 0D       		.byte	0xd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 188


 7912 0570 0C       		.uleb128 0xc
 7913 0571 89020000 		.4byte	.LASF122
 7914 0575 07       		.byte	0x7
 7915 0576 DD       		.byte	0xdd
 7916 0577 D7040000 		.4byte	0x4d7
 7917 057b 0E       		.byte	0xe
 7918 057c 00       		.byte	0
 7919 057d 0B       		.uleb128 0xb
 7920 057e 93100000 		.4byte	.LASF141
 7921 0582 60       		.byte	0x60
 7922 0583 07       		.byte	0x7
 7923 0584 E7       		.byte	0xe7
 7924 0585 DC050000 		.4byte	0x5dc
 7925 0589 0C       		.uleb128 0xc
 7926 058a 590A0000 		.4byte	.LASF142
 7927 058e 07       		.byte	0x7
 7928 058f E8       		.byte	0xe8
 7929 0590 97000000 		.4byte	0x97
 7930 0594 00       		.byte	0
 7931 0595 0C       		.uleb128 0xc
 7932 0596 89020000 		.4byte	.LASF122
 7933 059a 07       		.byte	0x7
 7934 059b E9       		.byte	0xe9
 7935 059c DC050000 		.4byte	0x5dc
 7936 05a0 01       		.byte	0x1
 7937 05a1 0D       		.uleb128 0xd
 7938 05a2 64657600 		.ascii	"dev\000"
 7939 05a6 07       		.byte	0x7
 7940 05a7 EA       		.byte	0xea
 7941 05a8 D5030000 		.4byte	0x3d5
 7942 05ac 10       		.byte	0x10
 7943 05ad 0C       		.uleb128 0xc
 7944 05ae 45090000 		.4byte	.LASF143
 7945 05b2 07       		.byte	0x7
 7946 05b3 EB       		.byte	0xeb
 7947 05b4 15040000 		.4byte	0x415
 7948 05b8 20       		.byte	0x20
 7949 05b9 0D       		.uleb128 0xd
 7950 05ba 656D6700 		.ascii	"emg\000"
 7951 05be 07       		.byte	0x7
 7952 05bf EC       		.byte	0xec
 7953 05c0 6E040000 		.4byte	0x46e
 7954 05c4 30       		.byte	0x30
 7955 05c5 0D       		.uleb128 0xd
 7956 05c6 4D5300   		.ascii	"MS\000"
 7957 05c9 07       		.byte	0x7
 7958 05ca ED       		.byte	0xed
 7959 05cb F7040000 		.4byte	0x4f7
 7960 05cf 40       		.byte	0x40
 7961 05d0 0D       		.uleb128 0xd
 7962 05d1 464200   		.ascii	"FB\000"
 7963 05d4 07       		.byte	0x7
 7964 05d5 EE       		.byte	0xee
 7965 05d6 28050000 		.4byte	0x528
 7966 05da 50       		.byte	0x50
 7967 05db 00       		.byte	0
 7968 05dc 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 189


 7969 05dd 97000000 		.4byte	0x97
 7970 05e1 EC050000 		.4byte	0x5ec
 7971 05e5 0F       		.uleb128 0xf
 7972 05e6 0C010000 		.4byte	0x10c
 7973 05ea 0E       		.byte	0xe
 7974 05eb 00       		.byte	0
 7975 05ec 10       		.uleb128 0x10
 7976 05ed 30020000 		.4byte	.LASF144
 7977 05f1 2C       		.byte	0x2c
 7978 05f2 07       		.byte	0x7
 7979 05f3 3901     		.2byte	0x139
 7980 05f5 21060000 		.4byte	0x621
 7981 05f9 11       		.uleb128 0x11
 7982 05fa 570E0000 		.4byte	.LASF145
 7983 05fe 07       		.byte	0x7
 7984 05ff 3A01     		.2byte	0x13a
 7985 0601 97000000 		.4byte	0x97
 7986 0605 00       		.byte	0
 7987 0606 11       		.uleb128 0x11
 7988 0607 510E0000 		.4byte	.LASF146
 7989 060b 07       		.byte	0x7
 7990 060c 3B01     		.2byte	0x13b
 7991 060e 97000000 		.4byte	0x97
 7992 0612 01       		.byte	0x1
 7993 0613 11       		.uleb128 0x11
 7994 0614 EA000000 		.4byte	.LASF147
 7995 0618 07       		.byte	0x7
 7996 0619 3C01     		.2byte	0x13c
 7997 061b 21060000 		.4byte	0x621
 7998 061f 04       		.byte	0x4
 7999 0620 00       		.byte	0
 8000 0621 0E       		.uleb128 0xe
 8001 0622 19010000 		.4byte	0x119
 8002 0626 31060000 		.4byte	0x631
 8003 062a 0F       		.uleb128 0xf
 8004 062b 0C010000 		.4byte	0x10c
 8005 062f 09       		.byte	0x9
 8006 0630 00       		.byte	0
 8007 0631 10       		.uleb128 0x10
 8008 0632 A3040000 		.4byte	.LASF148
 8009 0636 10       		.byte	0x10
 8010 0637 07       		.byte	0x7
 8011 0638 3F01     		.2byte	0x13f
 8012 063a A7060000 		.4byte	0x6a7
 8013 063e 11       		.uleb128 0x11
 8014 063f BB0D0000 		.4byte	.LASF149
 8015 0643 07       		.byte	0x7
 8016 0644 4001     		.2byte	0x140
 8017 0646 A7060000 		.4byte	0x6a7
 8018 064a 00       		.byte	0
 8019 064b 11       		.uleb128 0x11
 8020 064c 9D100000 		.4byte	.LASF150
 8021 0650 07       		.byte	0x7
 8022 0651 4101     		.2byte	0x141
 8023 0653 97000000 		.4byte	0x97
 8024 0657 04       		.byte	0x4
 8025 0658 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 190


 8026 0659 96020000 		.4byte	.LASF151
 8027 065d 07       		.byte	0x7
 8028 065e 4201     		.2byte	0x142
 8029 0660 97000000 		.4byte	0x97
 8030 0664 05       		.byte	0x5
 8031 0665 11       		.uleb128 0x11
 8032 0666 49010000 		.4byte	.LASF152
 8033 066a 07       		.byte	0x7
 8034 066b 4301     		.2byte	0x143
 8035 066d 19010000 		.4byte	0x119
 8036 0671 08       		.byte	0x8
 8037 0672 11       		.uleb128 0x11
 8038 0673 0C080000 		.4byte	.LASF153
 8039 0677 07       		.byte	0x7
 8040 0678 4401     		.2byte	0x144
 8041 067a 97000000 		.4byte	0x97
 8042 067e 0C       		.byte	0xc
 8043 067f 11       		.uleb128 0x11
 8044 0680 CC0A0000 		.4byte	.LASF154
 8045 0684 07       		.byte	0x7
 8046 0685 4501     		.2byte	0x145
 8047 0687 97000000 		.4byte	0x97
 8048 068b 0D       		.byte	0xd
 8049 068c 11       		.uleb128 0x11
 8050 068d 450C0000 		.4byte	.LASF155
 8051 0691 07       		.byte	0x7
 8052 0692 4601     		.2byte	0x146
 8053 0694 97000000 		.4byte	0x97
 8054 0698 0E       		.byte	0xe
 8055 0699 11       		.uleb128 0x11
 8056 069a E7070000 		.4byte	.LASF156
 8057 069e 07       		.byte	0x7
 8058 069f 4701     		.2byte	0x147
 8059 06a1 97000000 		.4byte	0x97
 8060 06a5 0F       		.byte	0xf
 8061 06a6 00       		.byte	0
 8062 06a7 07       		.uleb128 0x7
 8063 06a8 04       		.byte	0x4
 8064 06a9 97000000 		.4byte	0x97
 8065 06ad 10       		.uleb128 0x10
 8066 06ae F0090000 		.4byte	.LASF157
 8067 06b2 0C       		.byte	0xc
 8068 06b3 07       		.byte	0x7
 8069 06b4 5C01     		.2byte	0x15c
 8070 06b6 D5060000 		.4byte	0x6d5
 8071 06ba 12       		.uleb128 0x12
 8072 06bb 656D6700 		.ascii	"emg\000"
 8073 06bf 07       		.byte	0x7
 8074 06c0 5D01     		.2byte	0x15d
 8075 06c2 D5060000 		.4byte	0x6d5
 8076 06c6 00       		.byte	0
 8077 06c7 11       		.uleb128 0x11
 8078 06c8 52040000 		.4byte	.LASF158
 8079 06cc 07       		.byte	0x7
 8080 06cd 5E01     		.2byte	0x15e
 8081 06cf DF000000 		.4byte	0xdf
 8082 06d3 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 191


 8083 06d4 00       		.byte	0
 8084 06d5 0E       		.uleb128 0xe
 8085 06d6 D3000000 		.4byte	0xd3
 8086 06da E5060000 		.4byte	0x6e5
 8087 06de 0F       		.uleb128 0xf
 8088 06df 0C010000 		.4byte	0x10c
 8089 06e3 01       		.byte	0x1
 8090 06e4 00       		.byte	0
 8091 06e5 13       		.uleb128 0x13
 8092 06e6 B30D0000 		.4byte	.LASF308
 8093 06ea 02       		.byte	0x2
 8094 06eb 1403     		.2byte	0x314
 8095 06ed 8C000000 		.4byte	0x8c
 8096 06f1 03       		.byte	0x3
 8097 06f2 0F070000 		.4byte	0x70f
 8098 06f6 14       		.uleb128 0x14
 8099 06f7 4C040000 		.4byte	.LASF218
 8100 06fb 02       		.byte	0x2
 8101 06fc 1403     		.2byte	0x314
 8102 06fe 8C000000 		.4byte	0x8c
 8103 0702 15       		.uleb128 0x15
 8104 0703 D6010000 		.4byte	.LASF309
 8105 0707 02       		.byte	0x2
 8106 0708 1603     		.2byte	0x316
 8107 070a 8C000000 		.4byte	0x8c
 8108 070e 00       		.byte	0
 8109 070f 16       		.uleb128 0x16
 8110 0710 B40E0000 		.4byte	.LASF159
 8111 0714 01       		.byte	0x1
 8112 0715 3D       		.byte	0x3d
 8113 0716 00000000 		.4byte	.LFB64
 8114 071a BC050000 		.4byte	.LFE64-.LFB64
 8115 071e 01       		.uleb128 0x1
 8116 071f 9C       		.byte	0x9c
 8117 0720 17080000 		.4byte	0x817
 8118 0724 17       		.uleb128 0x17
 8119 0725 9C050000 		.4byte	.LASF161
 8120 0729 01       		.byte	0x1
 8121 072a 3F       		.byte	0x3f
 8122 072b 97000000 		.4byte	0x97
 8123 072f 02       		.uleb128 0x2
 8124 0730 91       		.byte	0x91
 8125 0731 77       		.sleb128 -9
 8126 0732 18       		.uleb128 0x18
 8127 0733 E5060000 		.4byte	0x6e5
 8128 0737 9A040000 		.4byte	.LBB12
 8129 073b 08000000 		.4byte	.LBE12-.LBB12
 8130 073f 01       		.byte	0x1
 8131 0740 A2       		.byte	0xa2
 8132 0741 60070000 		.4byte	0x760
 8133 0745 19       		.uleb128 0x19
 8134 0746 F6060000 		.4byte	0x6f6
 8135 074a 02       		.uleb128 0x2
 8136 074b 91       		.byte	0x91
 8137 074c 60       		.sleb128 -32
 8138 074d 1A       		.uleb128 0x1a
 8139 074e 9A040000 		.4byte	.LBB13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 192


 8140 0752 08000000 		.4byte	.LBE13-.LBB13
 8141 0756 1B       		.uleb128 0x1b
 8142 0757 02070000 		.4byte	0x702
 8143 075b 02       		.uleb128 0x2
 8144 075c 91       		.byte	0x91
 8145 075d 5C       		.sleb128 -36
 8146 075e 00       		.byte	0
 8147 075f 00       		.byte	0
 8148 0760 18       		.uleb128 0x18
 8149 0761 E5060000 		.4byte	0x6e5
 8150 0765 B8040000 		.4byte	.LBB14
 8151 0769 08000000 		.4byte	.LBE14-.LBB14
 8152 076d 01       		.byte	0x1
 8153 076e AE       		.byte	0xae
 8154 076f 8E070000 		.4byte	0x78e
 8155 0773 19       		.uleb128 0x19
 8156 0774 F6060000 		.4byte	0x6f6
 8157 0778 02       		.uleb128 0x2
 8158 0779 91       		.byte	0x91
 8159 077a 70       		.sleb128 -16
 8160 077b 1A       		.uleb128 0x1a
 8161 077c B8040000 		.4byte	.LBB15
 8162 0780 08000000 		.4byte	.LBE15-.LBB15
 8163 0784 1B       		.uleb128 0x1b
 8164 0785 02070000 		.4byte	0x702
 8165 0789 02       		.uleb128 0x2
 8166 078a 91       		.byte	0x91
 8167 078b 58       		.sleb128 -40
 8168 078c 00       		.byte	0
 8169 078d 00       		.byte	0
 8170 078e 18       		.uleb128 0x18
 8171 078f E5060000 		.4byte	0x6e5
 8172 0793 56050000 		.4byte	.LBB16
 8173 0797 08000000 		.4byte	.LBE16-.LBB16
 8174 079b 01       		.byte	0x1
 8175 079c F1       		.byte	0xf1
 8176 079d BC070000 		.4byte	0x7bc
 8177 07a1 19       		.uleb128 0x19
 8178 07a2 F6060000 		.4byte	0x6f6
 8179 07a6 02       		.uleb128 0x2
 8180 07a7 91       		.byte	0x91
 8181 07a8 6C       		.sleb128 -20
 8182 07a9 1A       		.uleb128 0x1a
 8183 07aa 56050000 		.4byte	.LBB17
 8184 07ae 08000000 		.4byte	.LBE17-.LBB17
 8185 07b2 1B       		.uleb128 0x1b
 8186 07b3 02070000 		.4byte	0x702
 8187 07b7 02       		.uleb128 0x2
 8188 07b8 91       		.byte	0x91
 8189 07b9 54       		.sleb128 -44
 8190 07ba 00       		.byte	0
 8191 07bb 00       		.byte	0
 8192 07bc 1C       		.uleb128 0x1c
 8193 07bd E5060000 		.4byte	0x6e5
 8194 07c1 86050000 		.4byte	.LBB18
 8195 07c5 08000000 		.4byte	.LBE18-.LBB18
 8196 07c9 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 193


 8197 07ca 0F01     		.2byte	0x10f
 8198 07cc EB070000 		.4byte	0x7eb
 8199 07d0 19       		.uleb128 0x19
 8200 07d1 F6060000 		.4byte	0x6f6
 8201 07d5 02       		.uleb128 0x2
 8202 07d6 91       		.byte	0x91
 8203 07d7 68       		.sleb128 -24
 8204 07d8 1A       		.uleb128 0x1a
 8205 07d9 86050000 		.4byte	.LBB19
 8206 07dd 08000000 		.4byte	.LBE19-.LBB19
 8207 07e1 1B       		.uleb128 0x1b
 8208 07e2 02070000 		.4byte	0x702
 8209 07e6 02       		.uleb128 0x2
 8210 07e7 91       		.byte	0x91
 8211 07e8 50       		.sleb128 -48
 8212 07e9 00       		.byte	0
 8213 07ea 00       		.byte	0
 8214 07eb 1D       		.uleb128 0x1d
 8215 07ec E5060000 		.4byte	0x6e5
 8216 07f0 9E050000 		.4byte	.LBB20
 8217 07f4 08000000 		.4byte	.LBE20-.LBB20
 8218 07f8 01       		.byte	0x1
 8219 07f9 1501     		.2byte	0x115
 8220 07fb 19       		.uleb128 0x19
 8221 07fc F6060000 		.4byte	0x6f6
 8222 0800 02       		.uleb128 0x2
 8223 0801 91       		.byte	0x91
 8224 0802 64       		.sleb128 -28
 8225 0803 1A       		.uleb128 0x1a
 8226 0804 9E050000 		.4byte	.LBB21
 8227 0808 08000000 		.4byte	.LBE21-.LBB21
 8228 080c 1B       		.uleb128 0x1b
 8229 080d 02070000 		.4byte	0x702
 8230 0811 02       		.uleb128 0x2
 8231 0812 91       		.byte	0x91
 8232 0813 4C       		.sleb128 -52
 8233 0814 00       		.byte	0
 8234 0815 00       		.byte	0
 8235 0816 00       		.byte	0
 8236 0817 1E       		.uleb128 0x1e
 8237 0818 00000000 		.4byte	.LASF160
 8238 081c 01       		.byte	0x1
 8239 081d 2301     		.2byte	0x123
 8240 081f 00000000 		.4byte	.LFB65
 8241 0823 22000000 		.4byte	.LFE65-.LFB65
 8242 0827 01       		.uleb128 0x1
 8243 0828 9C       		.byte	0x9c
 8244 0829 3E080000 		.4byte	0x83e
 8245 082d 1F       		.uleb128 0x1f
 8246 082e AD040000 		.4byte	.LASF162
 8247 0832 01       		.byte	0x1
 8248 0833 2401     		.2byte	0x124
 8249 0835 3E080000 		.4byte	0x83e
 8250 0839 03       		.uleb128 0x3
 8251 083a 91       		.byte	0x91
 8252 083b 9C74     		.sleb128 -1508
 8253 083d 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 194


 8254 083e 0E       		.uleb128 0xe
 8255 083f ED000000 		.4byte	0xed
 8256 0843 4F080000 		.4byte	0x84f
 8257 0847 20       		.uleb128 0x20
 8258 0848 0C010000 		.4byte	0x10c
 8259 084c DB05     		.2byte	0x5db
 8260 084e 00       		.byte	0
 8261 084f 21       		.uleb128 0x21
 8262 0850 2E070000 		.4byte	.LASF212
 8263 0854 01       		.byte	0x1
 8264 0855 2D01     		.2byte	0x12d
 8265 0857 97000000 		.4byte	0x97
 8266 085b 00000000 		.4byte	.LFB66
 8267 085f 5E000000 		.4byte	.LFE66-.LFB66
 8268 0863 01       		.uleb128 0x1
 8269 0864 9C       		.byte	0x9c
 8270 0865 88080000 		.4byte	0x888
 8271 0869 22       		.uleb128 0x22
 8272 086a E5000000 		.4byte	.LASF164
 8273 086e 01       		.byte	0x1
 8274 086f 2D01     		.2byte	0x12d
 8275 0871 97000000 		.4byte	0x97
 8276 0875 02       		.uleb128 0x2
 8277 0876 91       		.byte	0x91
 8278 0877 6F       		.sleb128 -17
 8279 0878 23       		.uleb128 0x23
 8280 0879 736F6400 		.ascii	"sod\000"
 8281 087d 01       		.byte	0x1
 8282 087e 2E01     		.2byte	0x12e
 8283 0880 97000000 		.4byte	0x97
 8284 0884 02       		.uleb128 0x2
 8285 0885 91       		.byte	0x91
 8286 0886 77       		.sleb128 -9
 8287 0887 00       		.byte	0
 8288 0888 1E       		.uleb128 0x1e
 8289 0889 A9100000 		.4byte	.LASF163
 8290 088d 01       		.byte	0x1
 8291 088e 3E01     		.2byte	0x13e
 8292 0890 00000000 		.4byte	.LFB67
 8293 0894 64010000 		.4byte	.LFE67-.LFB67
 8294 0898 01       		.uleb128 0x1
 8295 0899 9C       		.byte	0x9c
 8296 089a D1080000 		.4byte	0x8d1
 8297 089e 22       		.uleb128 0x22
 8298 089f E90D0000 		.4byte	.LASF165
 8299 08a3 01       		.byte	0x1
 8300 08a4 3E01     		.2byte	0x13e
 8301 08a6 A3000000 		.4byte	0xa3
 8302 08aa 04       		.uleb128 0x4
 8303 08ab 91       		.byte	0x91
 8304 08ac B6C47E   		.sleb128 -24010
 8305 08af 1F       		.uleb128 0x1f
 8306 08b0 AD040000 		.4byte	.LASF162
 8307 08b4 01       		.byte	0x1
 8308 08b5 3F01     		.2byte	0x13f
 8309 08b7 D1080000 		.4byte	0x8d1
 8310 08bb 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 195


 8311 08bc 91       		.byte	0x91
 8312 08bd D860     		.sleb128 -4008
 8313 08bf 1F       		.uleb128 0x1f
 8314 08c0 78070000 		.4byte	.LASF166
 8315 08c4 01       		.byte	0x1
 8316 08c5 4001     		.2byte	0x140
 8317 08c7 E2080000 		.4byte	0x8e2
 8318 08cb 04       		.uleb128 0x4
 8319 08cc 91       		.byte	0x91
 8320 08cd B8C47E   		.sleb128 -24008
 8321 08d0 00       		.byte	0
 8322 08d1 0E       		.uleb128 0xe
 8323 08d2 ED000000 		.4byte	0xed
 8324 08d6 E2080000 		.4byte	0x8e2
 8325 08da 20       		.uleb128 0x20
 8326 08db 0C010000 		.4byte	0x10c
 8327 08df 9F0F     		.2byte	0xf9f
 8328 08e1 00       		.byte	0
 8329 08e2 0E       		.uleb128 0xe
 8330 08e3 ED000000 		.4byte	0xed
 8331 08e7 F3080000 		.4byte	0x8f3
 8332 08eb 20       		.uleb128 0x20
 8333 08ec 0C010000 		.4byte	0x10c
 8334 08f0 1F4E     		.2byte	0x4e1f
 8335 08f2 00       		.byte	0
 8336 08f3 1E       		.uleb128 0x1e
 8337 08f4 80010000 		.4byte	.LASF167
 8338 08f8 01       		.byte	0x1
 8339 08f9 7001     		.2byte	0x170
 8340 08fb 00000000 		.4byte	.LFB68
 8341 08ff BC070000 		.4byte	.LFE68-.LFB68
 8342 0903 01       		.uleb128 0x1
 8343 0904 9C       		.byte	0x9c
 8344 0905 430A0000 		.4byte	0xa43
 8345 0909 22       		.uleb128 0x22
 8346 090a 230C0000 		.4byte	.LASF168
 8347 090e 01       		.byte	0x1
 8348 090f 7001     		.2byte	0x170
 8349 0911 97000000 		.4byte	0x97
 8350 0915 03       		.uleb128 0x3
 8351 0916 91       		.byte	0x91
 8352 0917 8F7B     		.sleb128 -625
 8353 0919 22       		.uleb128 0x22
 8354 091a 4C0D0000 		.4byte	.LASF169
 8355 091e 01       		.byte	0x1
 8356 091f 7001     		.2byte	0x170
 8357 0921 97000000 		.4byte	0x97
 8358 0925 03       		.uleb128 0x3
 8359 0926 91       		.byte	0x91
 8360 0927 8E7B     		.sleb128 -626
 8361 0929 22       		.uleb128 0x22
 8362 092a D20F0000 		.4byte	.LASF170
 8363 092e 01       		.byte	0x1
 8364 092f 7001     		.2byte	0x170
 8365 0931 430A0000 		.4byte	0xa43
 8366 0935 03       		.uleb128 0x3
 8367 0936 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 196


 8368 0937 887B     		.sleb128 -632
 8369 0939 22       		.uleb128 0x22
 8370 093a 8D0A0000 		.4byte	.LASF171
 8371 093e 01       		.byte	0x1
 8372 093f 7001     		.2byte	0x170
 8373 0941 4E0A0000 		.4byte	0xa4e
 8374 0945 03       		.uleb128 0x3
 8375 0946 91       		.byte	0x91
 8376 0947 847B     		.sleb128 -636
 8377 0949 22       		.uleb128 0x22
 8378 094a 730C0000 		.4byte	.LASF172
 8379 094e 01       		.byte	0x1
 8380 094f 7001     		.2byte	0x170
 8381 0951 97000000 		.4byte	0x97
 8382 0955 02       		.uleb128 0x2
 8383 0956 91       		.byte	0x91
 8384 0957 00       		.sleb128 0
 8385 0958 23       		.uleb128 0x23
 8386 0959 69647800 		.ascii	"idx\000"
 8387 095d 01       		.byte	0x1
 8388 095e 7201     		.2byte	0x172
 8389 0960 97000000 		.4byte	0x97
 8390 0964 02       		.uleb128 0x2
 8391 0965 91       		.byte	0x91
 8392 0966 5F       		.sleb128 -33
 8393 0967 1F       		.uleb128 0x1f
 8394 0968 FC090000 		.4byte	.LASF173
 8395 096c 01       		.byte	0x1
 8396 096d 7301     		.2byte	0x173
 8397 096f A7060000 		.4byte	0x6a7
 8398 0973 02       		.uleb128 0x2
 8399 0974 91       		.byte	0x91
 8400 0975 50       		.sleb128 -48
 8401 0976 1F       		.uleb128 0x1f
 8402 0977 12000000 		.4byte	.LASF174
 8403 097b 01       		.byte	0x1
 8404 097c 7401     		.2byte	0x174
 8405 097e 97000000 		.4byte	0x97
 8406 0982 02       		.uleb128 0x2
 8407 0983 91       		.byte	0x91
 8408 0984 5E       		.sleb128 -34
 8409 0985 1F       		.uleb128 0x1f
 8410 0986 55110000 		.4byte	.LASF175
 8411 098a 01       		.byte	0x1
 8412 098b 7501     		.2byte	0x175
 8413 098d 590A0000 		.4byte	0xa59
 8414 0991 03       		.uleb128 0x3
 8415 0992 91       		.byte	0x91
 8416 0993 C87D     		.sleb128 -312
 8417 0995 1F       		.uleb128 0x1f
 8418 0996 E3010000 		.4byte	.LASF176
 8419 099a 01       		.byte	0x1
 8420 099b 7601     		.2byte	0x176
 8421 099d 590A0000 		.4byte	0xa59
 8422 09a1 03       		.uleb128 0x3
 8423 09a2 91       		.byte	0x91
 8424 09a3 CC7B     		.sleb128 -564
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 197


 8425 09a5 1F       		.uleb128 0x1f
 8426 09a6 F00F0000 		.4byte	.LASF177
 8427 09aa 01       		.byte	0x1
 8428 09ab 7801     		.2byte	0x178
 8429 09ad D3000000 		.4byte	0xd3
 8430 09b1 03       		.uleb128 0x3
 8431 09b2 91       		.byte	0x91
 8432 09b3 C87B     		.sleb128 -568
 8433 09b5 23       		.uleb128 0x23
 8434 09b6 6900     		.ascii	"i\000"
 8435 09b8 01       		.byte	0x1
 8436 09b9 7901     		.2byte	0x179
 8437 09bb 97000000 		.4byte	0x97
 8438 09bf 02       		.uleb128 0x2
 8439 09c0 91       		.byte	0x91
 8440 09c1 5D       		.sleb128 -35
 8441 09c2 23       		.uleb128 0x23
 8442 09c3 6A00     		.ascii	"j\000"
 8443 09c5 01       		.byte	0x1
 8444 09c6 7901     		.2byte	0x179
 8445 09c8 97000000 		.4byte	0x97
 8446 09cc 02       		.uleb128 0x2
 8447 09cd 91       		.byte	0x91
 8448 09ce 5C       		.sleb128 -36
 8449 09cf 1F       		.uleb128 0x1f
 8450 09d0 EA090000 		.4byte	.LASF178
 8451 09d4 01       		.byte	0x1
 8452 09d5 7A01     		.2byte	0x17a
 8453 09d7 97000000 		.4byte	0x97
 8454 09db 02       		.uleb128 0x2
 8455 09dc 91       		.byte	0x91
 8456 09dd 5B       		.sleb128 -37
 8457 09de 1F       		.uleb128 0x1f
 8458 09df BC0C0000 		.4byte	.LASF179
 8459 09e3 01       		.byte	0x1
 8460 09e4 7B01     		.2byte	0x17b
 8461 09e6 690A0000 		.4byte	0xa69
 8462 09ea 03       		.uleb128 0x3
 8463 09eb 91       		.byte	0x91
 8464 09ec 947B     		.sleb128 -620
 8465 09ee 1F       		.uleb128 0x1f
 8466 09ef 9E070000 		.4byte	.LASF180
 8467 09f3 01       		.byte	0x1
 8468 09f4 7D01     		.2byte	0x17d
 8469 09f6 A3000000 		.4byte	0xa3
 8470 09fa 02       		.uleb128 0x2
 8471 09fb 91       		.byte	0x91
 8472 09fc 4E       		.sleb128 -50
 8473 09fd 1F       		.uleb128 0x1f
 8474 09fe 0A050000 		.4byte	.LASF181
 8475 0a02 01       		.byte	0x1
 8476 0a03 7E01     		.2byte	0x17e
 8477 0a05 790A0000 		.4byte	0xa79
 8478 0a09 03       		.uleb128 0x3
 8479 0a0a 91       		.byte	0x91
 8480 0a0b 44       		.sleb128 -60
 8481 0a0c 06       		.byte	0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 198


 8482 0a0d 24       		.uleb128 0x24
 8483 0a0e E4000000 		.4byte	.LBB22
 8484 0a12 2C000000 		.4byte	.LBE22-.LBB22
 8485 0a16 290A0000 		.4byte	0xa29
 8486 0a1a 23       		.uleb128 0x23
 8487 0a1b 696900   		.ascii	"ii\000"
 8488 0a1e 01       		.byte	0x1
 8489 0a1f 7F01     		.2byte	0x17f
 8490 0a21 73000000 		.4byte	0x73
 8491 0a25 02       		.uleb128 0x2
 8492 0a26 91       		.byte	0x91
 8493 0a27 54       		.sleb128 -44
 8494 0a28 00       		.byte	0
 8495 0a29 1A       		.uleb128 0x1a
 8496 0a2a 2C010000 		.4byte	.LBB23
 8497 0a2e 80040000 		.4byte	.LBE23-.LBB23
 8498 0a32 23       		.uleb128 0x23
 8499 0a33 736F6400 		.ascii	"sod\000"
 8500 0a37 01       		.byte	0x1
 8501 0a38 8601     		.2byte	0x186
 8502 0a3a 97000000 		.4byte	0x97
 8503 0a3e 02       		.uleb128 0x2
 8504 0a3f 91       		.byte	0x91
 8505 0a40 43       		.sleb128 -61
 8506 0a41 00       		.byte	0
 8507 0a42 00       		.byte	0
 8508 0a43 07       		.uleb128 0x7
 8509 0a44 04       		.byte	0x4
 8510 0a45 490A0000 		.4byte	0xa49
 8511 0a49 08       		.uleb128 0x8
 8512 0a4a 31060000 		.4byte	0x631
 8513 0a4e 07       		.uleb128 0x7
 8514 0a4f 04       		.byte	0x4
 8515 0a50 540A0000 		.4byte	0xa54
 8516 0a54 08       		.uleb128 0x8
 8517 0a55 EC050000 		.4byte	0x5ec
 8518 0a59 0E       		.uleb128 0xe
 8519 0a5a ED000000 		.4byte	0xed
 8520 0a5e 690A0000 		.4byte	0xa69
 8521 0a62 0F       		.uleb128 0xf
 8522 0a63 0C010000 		.4byte	0x10c
 8523 0a67 F9       		.byte	0xf9
 8524 0a68 00       		.byte	0
 8525 0a69 0E       		.uleb128 0xe
 8526 0a6a ED000000 		.4byte	0xed
 8527 0a6e 790A0000 		.4byte	0xa79
 8528 0a72 0F       		.uleb128 0xf
 8529 0a73 0C010000 		.4byte	0x10c
 8530 0a77 31       		.byte	0x31
 8531 0a78 00       		.byte	0
 8532 0a79 0E       		.uleb128 0xe
 8533 0a7a 97000000 		.4byte	0x97
 8534 0a7e 8C0A0000 		.4byte	0xa8c
 8535 0a82 25       		.uleb128 0x25
 8536 0a83 0C010000 		.4byte	0x10c
 8537 0a87 03       		.uleb128 0x3
 8538 0a88 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 199


 8539 0a89 48       		.sleb128 -56
 8540 0a8a 06       		.byte	0x6
 8541 0a8b 00       		.byte	0
 8542 0a8c 1E       		.uleb128 0x1e
 8543 0a8d 0D0D0000 		.4byte	.LASF182
 8544 0a91 01       		.byte	0x1
 8545 0a92 F101     		.2byte	0x1f1
 8546 0a94 00000000 		.4byte	.LFB69
 8547 0a98 34070000 		.4byte	.LFE69-.LFB69
 8548 0a9c 01       		.uleb128 0x1
 8549 0a9d 9C       		.byte	0x9c
 8550 0a9e 720B0000 		.4byte	0xb72
 8551 0aa2 22       		.uleb128 0x22
 8552 0aa3 FB050000 		.4byte	.LASF183
 8553 0aa7 01       		.byte	0x1
 8554 0aa8 F101     		.2byte	0x1f1
 8555 0aaa A3000000 		.4byte	0xa3
 8556 0aae 03       		.uleb128 0x3
 8557 0aaf 91       		.byte	0x91
 8558 0ab0 AE7C     		.sleb128 -466
 8559 0ab2 22       		.uleb128 0x22
 8560 0ab3 730C0000 		.4byte	.LASF172
 8561 0ab7 01       		.byte	0x1
 8562 0ab8 F101     		.2byte	0x1f1
 8563 0aba 97000000 		.4byte	0x97
 8564 0abe 03       		.uleb128 0x3
 8565 0abf 91       		.byte	0x91
 8566 0ac0 AD7C     		.sleb128 -467
 8567 0ac2 23       		.uleb128 0x23
 8568 0ac3 6900     		.ascii	"i\000"
 8569 0ac5 01       		.byte	0x1
 8570 0ac6 F201     		.2byte	0x1f2
 8571 0ac8 97000000 		.4byte	0x97
 8572 0acc 02       		.uleb128 0x2
 8573 0acd 91       		.byte	0x91
 8574 0ace 6F       		.sleb128 -17
 8575 0acf 23       		.uleb128 0x23
 8576 0ad0 6A00     		.ascii	"j\000"
 8577 0ad2 01       		.byte	0x1
 8578 0ad3 F201     		.2byte	0x1f2
 8579 0ad5 97000000 		.4byte	0x97
 8580 0ad9 02       		.uleb128 0x2
 8581 0ada 91       		.byte	0x91
 8582 0adb 6E       		.sleb128 -18
 8583 0adc 1F       		.uleb128 0x1f
 8584 0add 71010000 		.4byte	.LASF184
 8585 0ae1 01       		.byte	0x1
 8586 0ae2 F401     		.2byte	0x1f4
 8587 0ae4 97000000 		.4byte	0x97
 8588 0ae8 02       		.uleb128 0x2
 8589 0ae9 91       		.byte	0x91
 8590 0aea 65       		.sleb128 -27
 8591 0aeb 1F       		.uleb128 0x1f
 8592 0aec A0020000 		.4byte	.LASF185
 8593 0af0 01       		.byte	0x1
 8594 0af1 F701     		.2byte	0x1f7
 8595 0af3 720B0000 		.4byte	0xb72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 200


 8596 0af7 02       		.uleb128 0x2
 8597 0af8 91       		.byte	0x91
 8598 0af9 68       		.sleb128 -24
 8599 0afa 1F       		.uleb128 0x1f
 8600 0afb 4A050000 		.4byte	.LASF44
 8601 0aff 01       		.byte	0x1
 8602 0b00 FD01     		.2byte	0x1fd
 8603 0b02 EC050000 		.4byte	0x5ec
 8604 0b06 03       		.uleb128 0x3
 8605 0b07 91       		.byte	0x91
 8606 0b08 B87F     		.sleb128 -72
 8607 0b0a 1F       		.uleb128 0x1f
 8608 0b0b 8D0A0000 		.4byte	.LASF171
 8609 0b0f 01       		.byte	0x1
 8610 0b10 0002     		.2byte	0x200
 8611 0b12 880B0000 		.4byte	0xb88
 8612 0b16 03       		.uleb128 0x3
 8613 0b17 91       		.byte	0x91
 8614 0b18 B47E     		.sleb128 -204
 8615 0b1a 1F       		.uleb128 0x1f
 8616 0b1b CF000000 		.4byte	.LASF186
 8617 0b1f 01       		.byte	0x1
 8618 0b20 0802     		.2byte	0x208
 8619 0b22 97000000 		.4byte	0x97
 8620 0b26 02       		.uleb128 0x2
 8621 0b27 91       		.byte	0x91
 8622 0b28 67       		.sleb128 -25
 8623 0b29 1F       		.uleb128 0x1f
 8624 0b2a 39100000 		.4byte	.LASF187
 8625 0b2e 01       		.byte	0x1
 8626 0b2f 0A02     		.2byte	0x20a
 8627 0b31 31060000 		.4byte	0x631
 8628 0b35 03       		.uleb128 0x3
 8629 0b36 91       		.byte	0x91
 8630 0b37 A47E     		.sleb128 -220
 8631 0b39 1F       		.uleb128 0x1f
 8632 0b3a D20F0000 		.4byte	.LASF170
 8633 0b3e 01       		.byte	0x1
 8634 0b3f 0C02     		.2byte	0x20c
 8635 0b41 9D0B0000 		.4byte	0xb9d
 8636 0b45 03       		.uleb128 0x3
 8637 0b46 91       		.byte	0x91
 8638 0b47 B47C     		.sleb128 -460
 8639 0b49 1F       		.uleb128 0x1f
 8640 0b4a 3F0F0000 		.4byte	.LASF188
 8641 0b4e 01       		.byte	0x1
 8642 0b4f 2302     		.2byte	0x223
 8643 0b51 97000000 		.4byte	0x97
 8644 0b55 02       		.uleb128 0x2
 8645 0b56 91       		.byte	0x91
 8646 0b57 66       		.sleb128 -26
 8647 0b58 1A       		.uleb128 0x1a
 8648 0b59 94050000 		.4byte	.LBB24
 8649 0b5d 7E010000 		.4byte	.LBE24-.LBB24
 8650 0b61 23       		.uleb128 0x23
 8651 0b62 736F6400 		.ascii	"sod\000"
 8652 0b66 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 201


 8653 0b67 3402     		.2byte	0x234
 8654 0b69 97000000 		.4byte	0x97
 8655 0b6d 02       		.uleb128 0x2
 8656 0b6e 91       		.byte	0x91
 8657 0b6f 64       		.sleb128 -28
 8658 0b70 00       		.byte	0
 8659 0b71 00       		.byte	0
 8660 0b72 07       		.uleb128 0x7
 8661 0b73 04       		.byte	0x4
 8662 0b74 7D050000 		.4byte	0x57d
 8663 0b78 0E       		.uleb128 0xe
 8664 0b79 540A0000 		.4byte	0xa54
 8665 0b7d 880B0000 		.4byte	0xb88
 8666 0b81 0F       		.uleb128 0xf
 8667 0b82 0C010000 		.4byte	0x10c
 8668 0b86 02       		.byte	0x2
 8669 0b87 00       		.byte	0
 8670 0b88 08       		.uleb128 0x8
 8671 0b89 780B0000 		.4byte	0xb78
 8672 0b8d 0E       		.uleb128 0xe
 8673 0b8e 490A0000 		.4byte	0xa49
 8674 0b92 9D0B0000 		.4byte	0xb9d
 8675 0b96 0F       		.uleb128 0xf
 8676 0b97 0C010000 		.4byte	0x10c
 8677 0b9b 0E       		.byte	0xe
 8678 0b9c 00       		.byte	0
 8679 0b9d 08       		.uleb128 0x8
 8680 0b9e 8D0B0000 		.4byte	0xb8d
 8681 0ba2 1E       		.uleb128 0x1e
 8682 0ba3 2C030000 		.4byte	.LASF189
 8683 0ba7 01       		.byte	0x1
 8684 0ba8 5502     		.2byte	0x255
 8685 0baa 00000000 		.4byte	.LFB70
 8686 0bae 34010000 		.4byte	.LFE70-.LFB70
 8687 0bb2 01       		.uleb128 0x1
 8688 0bb3 9C       		.byte	0x9c
 8689 0bb4 000C0000 		.4byte	0xc00
 8690 0bb8 22       		.uleb128 0x22
 8691 0bb9 FB050000 		.4byte	.LASF183
 8692 0bbd 01       		.byte	0x1
 8693 0bbe 5502     		.2byte	0x255
 8694 0bc0 A3000000 		.4byte	0xa3
 8695 0bc4 02       		.uleb128 0x2
 8696 0bc5 91       		.byte	0x91
 8697 0bc6 6E       		.sleb128 -18
 8698 0bc7 22       		.uleb128 0x22
 8699 0bc8 D20F0000 		.4byte	.LASF170
 8700 0bcc 01       		.byte	0x1
 8701 0bcd 5502     		.2byte	0x255
 8702 0bcf 430A0000 		.4byte	0xa43
 8703 0bd3 02       		.uleb128 0x2
 8704 0bd4 91       		.byte	0x91
 8705 0bd5 68       		.sleb128 -24
 8706 0bd6 23       		.uleb128 0x23
 8707 0bd7 736F6400 		.ascii	"sod\000"
 8708 0bdb 01       		.byte	0x1
 8709 0bdc 5602     		.2byte	0x256
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 202


 8710 0bde 97000000 		.4byte	0x97
 8711 0be2 02       		.uleb128 0x2
 8712 0be3 91       		.byte	0x91
 8713 0be4 75       		.sleb128 -11
 8714 0be5 23       		.uleb128 0x23
 8715 0be6 6900     		.ascii	"i\000"
 8716 0be8 01       		.byte	0x1
 8717 0be9 5802     		.2byte	0x258
 8718 0beb 97000000 		.4byte	0x97
 8719 0bef 02       		.uleb128 0x2
 8720 0bf0 91       		.byte	0x91
 8721 0bf1 77       		.sleb128 -9
 8722 0bf2 23       		.uleb128 0x23
 8723 0bf3 6A00     		.ascii	"j\000"
 8724 0bf5 01       		.byte	0x1
 8725 0bf6 5802     		.2byte	0x258
 8726 0bf8 97000000 		.4byte	0x97
 8727 0bfc 02       		.uleb128 0x2
 8728 0bfd 91       		.byte	0x91
 8729 0bfe 76       		.sleb128 -10
 8730 0bff 00       		.byte	0
 8731 0c00 26       		.uleb128 0x26
 8732 0c01 F9070000 		.4byte	.LASF190
 8733 0c05 01       		.byte	0x1
 8734 0c06 7C02     		.2byte	0x27c
 8735 0c08 00000000 		.4byte	.LFB71
 8736 0c0c 14000000 		.4byte	.LFE71-.LFB71
 8737 0c10 01       		.uleb128 0x1
 8738 0c11 9C       		.byte	0x9c
 8739 0c12 260C0000 		.4byte	0xc26
 8740 0c16 22       		.uleb128 0x22
 8741 0c17 FB050000 		.4byte	.LASF183
 8742 0c1b 01       		.byte	0x1
 8743 0c1c 7C02     		.2byte	0x27c
 8744 0c1e A3000000 		.4byte	0xa3
 8745 0c22 02       		.uleb128 0x2
 8746 0c23 91       		.byte	0x91
 8747 0c24 76       		.sleb128 -10
 8748 0c25 00       		.byte	0
 8749 0c26 27       		.uleb128 0x27
 8750 0c27 80020000 		.4byte	.LASF228
 8751 0c2b 01       		.byte	0x1
 8752 0c2c 8402     		.2byte	0x284
 8753 0c2e 00000000 		.4byte	.LFB72
 8754 0c32 0C000000 		.4byte	.LFE72-.LFB72
 8755 0c36 01       		.uleb128 0x1
 8756 0c37 9C       		.byte	0x9c
 8757 0c38 1E       		.uleb128 0x1e
 8758 0c39 D60C0000 		.4byte	.LASF191
 8759 0c3d 01       		.byte	0x1
 8760 0c3e 8802     		.2byte	0x288
 8761 0c40 00000000 		.4byte	.LFB73
 8762 0c44 B8030000 		.4byte	.LFE73-.LFB73
 8763 0c48 01       		.uleb128 0x1
 8764 0c49 9C       		.byte	0x9c
 8765 0c4a 840D0000 		.4byte	0xd84
 8766 0c4e 22       		.uleb128 0x22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 203


 8767 0c4f 230C0000 		.4byte	.LASF168
 8768 0c53 01       		.byte	0x1
 8769 0c54 8802     		.2byte	0x288
 8770 0c56 97000000 		.4byte	0x97
 8771 0c5a 03       		.uleb128 0x3
 8772 0c5b 91       		.byte	0x91
 8773 0c5c 976B     		.sleb128 -2665
 8774 0c5e 22       		.uleb128 0x22
 8775 0c5f 4C0D0000 		.4byte	.LASF169
 8776 0c63 01       		.byte	0x1
 8777 0c64 8802     		.2byte	0x288
 8778 0c66 97000000 		.4byte	0x97
 8779 0c6a 03       		.uleb128 0x3
 8780 0c6b 91       		.byte	0x91
 8781 0c6c 966B     		.sleb128 -2666
 8782 0c6e 22       		.uleb128 0x22
 8783 0c6f D20F0000 		.4byte	.LASF170
 8784 0c73 01       		.byte	0x1
 8785 0c74 8802     		.2byte	0x288
 8786 0c76 430A0000 		.4byte	0xa43
 8787 0c7a 03       		.uleb128 0x3
 8788 0c7b 91       		.byte	0x91
 8789 0c7c 906B     		.sleb128 -2672
 8790 0c7e 22       		.uleb128 0x22
 8791 0c7f 8D0A0000 		.4byte	.LASF171
 8792 0c83 01       		.byte	0x1
 8793 0c84 8802     		.2byte	0x288
 8794 0c86 4E0A0000 		.4byte	0xa4e
 8795 0c8a 03       		.uleb128 0x3
 8796 0c8b 91       		.byte	0x91
 8797 0c8c 8C6B     		.sleb128 -2676
 8798 0c8e 1F       		.uleb128 0x1f
 8799 0c8f 170C0000 		.4byte	.LASF192
 8800 0c93 01       		.byte	0x1
 8801 0c94 8A02     		.2byte	0x28a
 8802 0c96 840D0000 		.4byte	0xd84
 8803 0c9a 03       		.uleb128 0x3
 8804 0c9b 91       		.byte	0x91
 8805 0c9c 806C     		.sleb128 -2560
 8806 0c9e 23       		.uleb128 0x23
 8807 0c9f 6900     		.ascii	"i\000"
 8808 0ca1 01       		.byte	0x1
 8809 0ca2 8B02     		.2byte	0x28b
 8810 0ca4 73000000 		.4byte	0x73
 8811 0ca8 02       		.uleb128 0x2
 8812 0ca9 91       		.byte	0x91
 8813 0caa 6C       		.sleb128 -20
 8814 0cab 23       		.uleb128 0x23
 8815 0cac 69647800 		.ascii	"idx\000"
 8816 0cb0 01       		.byte	0x1
 8817 0cb1 8C02     		.2byte	0x28c
 8818 0cb3 73000000 		.4byte	0x73
 8819 0cb7 02       		.uleb128 0x2
 8820 0cb8 91       		.byte	0x91
 8821 0cb9 68       		.sleb128 -24
 8822 0cba 1F       		.uleb128 0x1f
 8823 0cbb F00F0000 		.4byte	.LASF177
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 204


 8824 0cbf 01       		.byte	0x1
 8825 0cc0 8D02     		.2byte	0x28d
 8826 0cc2 D3000000 		.4byte	0xd3
 8827 0cc6 02       		.uleb128 0x2
 8828 0cc7 91       		.byte	0x91
 8829 0cc8 48       		.sleb128 -56
 8830 0cc9 1F       		.uleb128 0x1f
 8831 0cca 610C0000 		.4byte	.LASF193
 8832 0cce 01       		.byte	0x1
 8833 0ccf 8E02     		.2byte	0x28e
 8834 0cd1 AF000000 		.4byte	0xaf
 8835 0cd5 02       		.uleb128 0x2
 8836 0cd6 91       		.byte	0x91
 8837 0cd7 4C       		.sleb128 -52
 8838 0cd8 1F       		.uleb128 0x1f
 8839 0cd9 C80F0000 		.4byte	.LASF194
 8840 0cdd 01       		.byte	0x1
 8841 0cde 8F02     		.2byte	0x28f
 8842 0ce0 DF000000 		.4byte	0xdf
 8843 0ce4 02       		.uleb128 0x2
 8844 0ce5 91       		.byte	0x91
 8845 0ce6 44       		.sleb128 -60
 8846 0ce7 1F       		.uleb128 0x1f
 8847 0ce8 1F0D0000 		.4byte	.LASF195
 8848 0cec 01       		.byte	0x1
 8849 0ced 9002     		.2byte	0x290
 8850 0cef 97000000 		.4byte	0x97
 8851 0cf3 02       		.uleb128 0x2
 8852 0cf4 91       		.byte	0x91
 8853 0cf5 57       		.sleb128 -41
 8854 0cf6 1F       		.uleb128 0x1f
 8855 0cf7 BA090000 		.4byte	.LASF196
 8856 0cfb 01       		.byte	0x1
 8857 0cfc 9102     		.2byte	0x291
 8858 0cfe BB000000 		.4byte	0xbb
 8859 0d02 02       		.uleb128 0x2
 8860 0d03 91       		.byte	0x91
 8861 0d04 56       		.sleb128 -42
 8862 0d05 1F       		.uleb128 0x1f
 8863 0d06 0E0F0000 		.4byte	.LASF197
 8864 0d0a 01       		.byte	0x1
 8865 0d0b 9202     		.2byte	0x292
 8866 0d0d C7000000 		.4byte	0xc7
 8867 0d11 02       		.uleb128 0x2
 8868 0d12 91       		.byte	0x91
 8869 0d13 54       		.sleb128 -44
 8870 0d14 1F       		.uleb128 0x1f
 8871 0d15 390B0000 		.4byte	.LASF198
 8872 0d19 01       		.byte	0x1
 8873 0d1a 9302     		.2byte	0x293
 8874 0d1c A3000000 		.4byte	0xa3
 8875 0d20 02       		.uleb128 0x2
 8876 0d21 91       		.byte	0x91
 8877 0d22 52       		.sleb128 -46
 8878 0d23 1F       		.uleb128 0x1f
 8879 0d24 A0020000 		.4byte	.LASF185
 8880 0d28 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 205


 8881 0d29 9402     		.2byte	0x294
 8882 0d2b 720B0000 		.4byte	0xb72
 8883 0d2f 02       		.uleb128 0x2
 8884 0d30 91       		.byte	0x91
 8885 0d31 64       		.sleb128 -28
 8886 0d32 1A       		.uleb128 0x1a
 8887 0d33 54000000 		.4byte	.LBB25
 8888 0d37 4A030000 		.4byte	.LBE25-.LBB25
 8889 0d3b 1F       		.uleb128 0x1f
 8890 0d3c FC090000 		.4byte	.LASF173
 8891 0d40 01       		.byte	0x1
 8892 0d41 9702     		.2byte	0x297
 8893 0d43 A7060000 		.4byte	0x6a7
 8894 0d47 02       		.uleb128 0x2
 8895 0d48 91       		.byte	0x91
 8896 0d49 60       		.sleb128 -32
 8897 0d4a 1F       		.uleb128 0x1f
 8898 0d4b 6B010000 		.4byte	.LASF199
 8899 0d4f 01       		.byte	0x1
 8900 0d50 9802     		.2byte	0x298
 8901 0d52 A7060000 		.4byte	0x6a7
 8902 0d56 02       		.uleb128 0x2
 8903 0d57 91       		.byte	0x91
 8904 0d58 58       		.sleb128 -40
 8905 0d59 23       		.uleb128 0x23
 8906 0d5a 73747200 		.ascii	"str\000"
 8907 0d5e 01       		.byte	0x1
 8908 0d5f 9902     		.2byte	0x299
 8909 0d61 950D0000 		.4byte	0xd95
 8910 0d65 03       		.uleb128 0x3
 8911 0d66 91       		.byte	0x91
 8912 0d67 9C6B     		.sleb128 -2660
 8913 0d69 1A       		.uleb128 0x1a
 8914 0d6a 9A000000 		.4byte	.LBB26
 8915 0d6e DE020000 		.4byte	.LBE26-.LBB26
 8916 0d72 23       		.uleb128 0x23
 8917 0d73 736F6400 		.ascii	"sod\000"
 8918 0d77 01       		.byte	0x1
 8919 0d78 A202     		.2byte	0x2a2
 8920 0d7a 97000000 		.4byte	0x97
 8921 0d7e 02       		.uleb128 0x2
 8922 0d7f 91       		.byte	0x91
 8923 0d80 5F       		.sleb128 -33
 8924 0d81 00       		.byte	0
 8925 0d82 00       		.byte	0
 8926 0d83 00       		.byte	0
 8927 0d84 0E       		.uleb128 0xe
 8928 0d85 ED000000 		.4byte	0xed
 8929 0d89 950D0000 		.4byte	0xd95
 8930 0d8d 20       		.uleb128 0x20
 8931 0d8e 0C010000 		.4byte	0x10c
 8932 0d92 C309     		.2byte	0x9c3
 8933 0d94 00       		.byte	0
 8934 0d95 0E       		.uleb128 0xe
 8935 0d96 ED000000 		.4byte	0xed
 8936 0d9a A50D0000 		.4byte	0xda5
 8937 0d9e 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 206


 8938 0d9f 0C010000 		.4byte	0x10c
 8939 0da3 63       		.byte	0x63
 8940 0da4 00       		.byte	0
 8941 0da5 1E       		.uleb128 0x1e
 8942 0da6 BA000000 		.4byte	.LASF200
 8943 0daa 01       		.byte	0x1
 8944 0dab F002     		.2byte	0x2f0
 8945 0dad 00000000 		.4byte	.LFB74
 8946 0db1 14020000 		.4byte	.LFE74-.LFB74
 8947 0db5 01       		.uleb128 0x1
 8948 0db6 9C       		.byte	0x9c
 8949 0db7 020E0000 		.4byte	0xe02
 8950 0dbb 22       		.uleb128 0x22
 8951 0dbc 170C0000 		.4byte	.LASF192
 8952 0dc0 01       		.byte	0x1
 8953 0dc1 F002     		.2byte	0x2f0
 8954 0dc3 13010000 		.4byte	0x113
 8955 0dc7 03       		.uleb128 0x3
 8956 0dc8 91       		.byte	0x91
 8957 0dc9 F47E     		.sleb128 -140
 8958 0dcb 23       		.uleb128 0x23
 8959 0dcc 6900     		.ascii	"i\000"
 8960 0dce 01       		.byte	0x1
 8961 0dcf F302     		.2byte	0x2f3
 8962 0dd1 73000000 		.4byte	0x73
 8963 0dd5 02       		.uleb128 0x2
 8964 0dd6 91       		.byte	0x91
 8965 0dd7 64       		.sleb128 -28
 8966 0dd8 1F       		.uleb128 0x1f
 8967 0dd9 A0020000 		.4byte	.LASF185
 8968 0ddd 01       		.byte	0x1
 8969 0dde F402     		.2byte	0x2f4
 8970 0de0 720B0000 		.4byte	0xb72
 8971 0de4 02       		.uleb128 0x2
 8972 0de5 91       		.byte	0x91
 8973 0de6 60       		.sleb128 -32
 8974 0de7 1A       		.uleb128 0x1a
 8975 0de8 20000000 		.4byte	.LBB27
 8976 0dec AC010000 		.4byte	.LBE27-.LBB27
 8977 0df0 23       		.uleb128 0x23
 8978 0df1 73747200 		.ascii	"str\000"
 8979 0df5 01       		.byte	0x1
 8980 0df6 F802     		.2byte	0x2f8
 8981 0df8 950D0000 		.4byte	0xd95
 8982 0dfc 03       		.uleb128 0x3
 8983 0dfd 91       		.byte	0x91
 8984 0dfe FC7E     		.sleb128 -132
 8985 0e00 00       		.byte	0
 8986 0e01 00       		.byte	0
 8987 0e02 26       		.uleb128 0x26
 8988 0e03 790D0000 		.4byte	.LASF201
 8989 0e07 01       		.byte	0x1
 8990 0e08 1903     		.2byte	0x319
 8991 0e0a 00000000 		.4byte	.LFB75
 8992 0e0e 12000000 		.4byte	.LFE75-.LFB75
 8993 0e12 01       		.uleb128 0x1
 8994 0e13 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 207


 8995 0e14 280E0000 		.4byte	0xe28
 8996 0e18 22       		.uleb128 0x22
 8997 0e19 170C0000 		.4byte	.LASF192
 8998 0e1d 01       		.byte	0x1
 8999 0e1e 1903     		.2byte	0x319
 9000 0e20 13010000 		.4byte	0x113
 9001 0e24 02       		.uleb128 0x2
 9002 0e25 91       		.byte	0x91
 9003 0e26 74       		.sleb128 -12
 9004 0e27 00       		.byte	0
 9005 0e28 26       		.uleb128 0x26
 9006 0e29 1D0B0000 		.4byte	.LASF202
 9007 0e2d 01       		.byte	0x1
 9008 0e2e 2103     		.2byte	0x321
 9009 0e30 00000000 		.4byte	.LFB76
 9010 0e34 12000000 		.4byte	.LFE76-.LFB76
 9011 0e38 01       		.uleb128 0x1
 9012 0e39 9C       		.byte	0x9c
 9013 0e3a 4E0E0000 		.4byte	0xe4e
 9014 0e3e 22       		.uleb128 0x22
 9015 0e3f 170C0000 		.4byte	.LASF192
 9016 0e43 01       		.byte	0x1
 9017 0e44 2103     		.2byte	0x321
 9018 0e46 13010000 		.4byte	0x113
 9019 0e4a 02       		.uleb128 0x2
 9020 0e4b 91       		.byte	0x91
 9021 0e4c 74       		.sleb128 -12
 9022 0e4d 00       		.byte	0
 9023 0e4e 26       		.uleb128 0x26
 9024 0e4f 630D0000 		.4byte	.LASF203
 9025 0e53 01       		.byte	0x1
 9026 0e54 2903     		.2byte	0x329
 9027 0e56 00000000 		.4byte	.LFB77
 9028 0e5a 12000000 		.4byte	.LFE77-.LFB77
 9029 0e5e 01       		.uleb128 0x1
 9030 0e5f 9C       		.byte	0x9c
 9031 0e60 740E0000 		.4byte	0xe74
 9032 0e64 22       		.uleb128 0x22
 9033 0e65 170C0000 		.4byte	.LASF192
 9034 0e69 01       		.byte	0x1
 9035 0e6a 2903     		.2byte	0x329
 9036 0e6c 13010000 		.4byte	0x113
 9037 0e70 02       		.uleb128 0x2
 9038 0e71 91       		.byte	0x91
 9039 0e72 74       		.sleb128 -12
 9040 0e73 00       		.byte	0
 9041 0e74 26       		.uleb128 0x26
 9042 0e75 300A0000 		.4byte	.LASF204
 9043 0e79 01       		.byte	0x1
 9044 0e7a 3103     		.2byte	0x331
 9045 0e7c 00000000 		.4byte	.LFB78
 9046 0e80 12000000 		.4byte	.LFE78-.LFB78
 9047 0e84 01       		.uleb128 0x1
 9048 0e85 9C       		.byte	0x9c
 9049 0e86 9A0E0000 		.4byte	0xe9a
 9050 0e8a 22       		.uleb128 0x22
 9051 0e8b 170C0000 		.4byte	.LASF192
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 208


 9052 0e8f 01       		.byte	0x1
 9053 0e90 3103     		.2byte	0x331
 9054 0e92 13010000 		.4byte	0x113
 9055 0e96 02       		.uleb128 0x2
 9056 0e97 91       		.byte	0x91
 9057 0e98 74       		.sleb128 -12
 9058 0e99 00       		.byte	0
 9059 0e9a 26       		.uleb128 0x26
 9060 0e9b 8E0D0000 		.4byte	.LASF205
 9061 0e9f 01       		.byte	0x1
 9062 0ea0 3803     		.2byte	0x338
 9063 0ea2 00000000 		.4byte	.LFB79
 9064 0ea6 12000000 		.4byte	.LFE79-.LFB79
 9065 0eaa 01       		.uleb128 0x1
 9066 0eab 9C       		.byte	0x9c
 9067 0eac C00E0000 		.4byte	0xec0
 9068 0eb0 22       		.uleb128 0x22
 9069 0eb1 170C0000 		.4byte	.LASF192
 9070 0eb5 01       		.byte	0x1
 9071 0eb6 3803     		.2byte	0x338
 9072 0eb8 13010000 		.4byte	0x113
 9073 0ebc 02       		.uleb128 0x2
 9074 0ebd 91       		.byte	0x91
 9075 0ebe 74       		.sleb128 -12
 9076 0ebf 00       		.byte	0
 9077 0ec0 26       		.uleb128 0x26
 9078 0ec1 C7020000 		.4byte	.LASF206
 9079 0ec5 01       		.byte	0x1
 9080 0ec6 4003     		.2byte	0x340
 9081 0ec8 00000000 		.4byte	.LFB80
 9082 0ecc 12000000 		.4byte	.LFE80-.LFB80
 9083 0ed0 01       		.uleb128 0x1
 9084 0ed1 9C       		.byte	0x9c
 9085 0ed2 E60E0000 		.4byte	0xee6
 9086 0ed6 22       		.uleb128 0x22
 9087 0ed7 170C0000 		.4byte	.LASF192
 9088 0edb 01       		.byte	0x1
 9089 0edc 4003     		.2byte	0x340
 9090 0ede 13010000 		.4byte	0x113
 9091 0ee2 02       		.uleb128 0x2
 9092 0ee3 91       		.byte	0x91
 9093 0ee4 74       		.sleb128 -12
 9094 0ee5 00       		.byte	0
 9095 0ee6 26       		.uleb128 0x26
 9096 0ee7 34110000 		.4byte	.LASF207
 9097 0eeb 01       		.byte	0x1
 9098 0eec 4903     		.2byte	0x349
 9099 0eee 00000000 		.4byte	.LFB81
 9100 0ef2 12000000 		.4byte	.LFE81-.LFB81
 9101 0ef6 01       		.uleb128 0x1
 9102 0ef7 9C       		.byte	0x9c
 9103 0ef8 0C0F0000 		.4byte	0xf0c
 9104 0efc 22       		.uleb128 0x22
 9105 0efd 170C0000 		.4byte	.LASF192
 9106 0f01 01       		.byte	0x1
 9107 0f02 4903     		.2byte	0x349
 9108 0f04 13010000 		.4byte	0x113
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 209


 9109 0f08 02       		.uleb128 0x2
 9110 0f09 91       		.byte	0x91
 9111 0f0a 74       		.sleb128 -12
 9112 0f0b 00       		.byte	0
 9113 0f0c 1E       		.uleb128 0x1e
 9114 0f0d FC0C0000 		.4byte	.LASF208
 9115 0f11 01       		.byte	0x1
 9116 0f12 5103     		.2byte	0x351
 9117 0f14 00000000 		.4byte	.LFB82
 9118 0f18 84000000 		.4byte	.LFE82-.LFB82
 9119 0f1c 01       		.uleb128 0x1
 9120 0f1d 9C       		.byte	0x9c
 9121 0f1e 5F0F0000 		.4byte	0xf5f
 9122 0f22 22       		.uleb128 0x22
 9123 0f23 0A050000 		.4byte	.LASF181
 9124 0f27 01       		.byte	0x1
 9125 0f28 5103     		.2byte	0x351
 9126 0f2a A7060000 		.4byte	0x6a7
 9127 0f2e 02       		.uleb128 0x2
 9128 0f2f 91       		.byte	0x91
 9129 0f30 6C       		.sleb128 -20
 9130 0f31 22       		.uleb128 0x22
 9131 0f32 9E070000 		.4byte	.LASF180
 9132 0f36 01       		.byte	0x1
 9133 0f37 5103     		.2byte	0x351
 9134 0f39 A3000000 		.4byte	0xa3
 9135 0f3d 02       		.uleb128 0x2
 9136 0f3e 91       		.byte	0x91
 9137 0f3f 6A       		.sleb128 -22
 9138 0f40 22       		.uleb128 0x22
 9139 0f41 AC0D0000 		.4byte	.LASF209
 9140 0f45 01       		.byte	0x1
 9141 0f46 5103     		.2byte	0x351
 9142 0f48 97000000 		.4byte	0x97
 9143 0f4c 02       		.uleb128 0x2
 9144 0f4d 91       		.byte	0x91
 9145 0f4e 69       		.sleb128 -23
 9146 0f4f 1F       		.uleb128 0x1f
 9147 0f50 FB050000 		.4byte	.LASF183
 9148 0f54 01       		.byte	0x1
 9149 0f55 5303     		.2byte	0x353
 9150 0f57 A3000000 		.4byte	0xa3
 9151 0f5b 02       		.uleb128 0x2
 9152 0f5c 91       		.byte	0x91
 9153 0f5d 76       		.sleb128 -10
 9154 0f5e 00       		.byte	0
 9155 0f5f 1E       		.uleb128 0x1e
 9156 0f60 20050000 		.4byte	.LASF210
 9157 0f64 01       		.byte	0x1
 9158 0f65 6D03     		.2byte	0x36d
 9159 0f67 00000000 		.4byte	.LFB83
 9160 0f6b 88000000 		.4byte	.LFE83-.LFB83
 9161 0f6f 01       		.uleb128 0x1
 9162 0f70 9C       		.byte	0x9c
 9163 0f71 A30F0000 		.4byte	0xfa3
 9164 0f75 22       		.uleb128 0x22
 9165 0f76 0A050000 		.4byte	.LASF181
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 210


 9166 0f7a 01       		.byte	0x1
 9167 0f7b 6D03     		.2byte	0x36d
 9168 0f7d A7060000 		.4byte	0x6a7
 9169 0f81 02       		.uleb128 0x2
 9170 0f82 91       		.byte	0x91
 9171 0f83 6C       		.sleb128 -20
 9172 0f84 22       		.uleb128 0x22
 9173 0f85 9E070000 		.4byte	.LASF180
 9174 0f89 01       		.byte	0x1
 9175 0f8a 6D03     		.2byte	0x36d
 9176 0f8c A3000000 		.4byte	0xa3
 9177 0f90 02       		.uleb128 0x2
 9178 0f91 91       		.byte	0x91
 9179 0f92 6A       		.sleb128 -22
 9180 0f93 1F       		.uleb128 0x1f
 9181 0f94 FB050000 		.4byte	.LASF183
 9182 0f98 01       		.byte	0x1
 9183 0f99 6F03     		.2byte	0x36f
 9184 0f9b A3000000 		.4byte	0xa3
 9185 0f9f 02       		.uleb128 0x2
 9186 0fa0 91       		.byte	0x91
 9187 0fa1 76       		.sleb128 -10
 9188 0fa2 00       		.byte	0
 9189 0fa3 1E       		.uleb128 0x1e
 9190 0fa4 AB0A0000 		.4byte	.LASF211
 9191 0fa8 01       		.byte	0x1
 9192 0fa9 8A03     		.2byte	0x38a
 9193 0fab 00000000 		.4byte	.LFB84
 9194 0faf A0000000 		.4byte	.LFE84-.LFB84
 9195 0fb3 01       		.uleb128 0x1
 9196 0fb4 9C       		.byte	0x9c
 9197 0fb5 F60F0000 		.4byte	0xff6
 9198 0fb9 22       		.uleb128 0x22
 9199 0fba 0A050000 		.4byte	.LASF181
 9200 0fbe 01       		.byte	0x1
 9201 0fbf 8A03     		.2byte	0x38a
 9202 0fc1 A7060000 		.4byte	0x6a7
 9203 0fc5 02       		.uleb128 0x2
 9204 0fc6 91       		.byte	0x91
 9205 0fc7 74       		.sleb128 -12
 9206 0fc8 22       		.uleb128 0x22
 9207 0fc9 9E070000 		.4byte	.LASF180
 9208 0fcd 01       		.byte	0x1
 9209 0fce 8A03     		.2byte	0x38a
 9210 0fd0 A3000000 		.4byte	0xa3
 9211 0fd4 02       		.uleb128 0x2
 9212 0fd5 91       		.byte	0x91
 9213 0fd6 72       		.sleb128 -14
 9214 0fd7 28       		.uleb128 0x28
 9215 0fd8 696400   		.ascii	"id\000"
 9216 0fdb 01       		.byte	0x1
 9217 0fdc 8A03     		.2byte	0x38a
 9218 0fde 97000000 		.4byte	0x97
 9219 0fe2 02       		.uleb128 0x2
 9220 0fe3 91       		.byte	0x91
 9221 0fe4 71       		.sleb128 -15
 9222 0fe5 23       		.uleb128 0x23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 211


 9223 0fe6 6900     		.ascii	"i\000"
 9224 0fe8 01       		.byte	0x1
 9225 0fe9 8C03     		.2byte	0x38c
 9226 0feb A3000000 		.4byte	0xa3
 9227 0fef 05       		.uleb128 0x5
 9228 0ff0 03       		.byte	0x3
 9229 0ff1 00000000 		.4byte	i.10044
 9230 0ff5 00       		.byte	0
 9231 0ff6 21       		.uleb128 0x21
 9232 0ff7 4E100000 		.4byte	.LASF213
 9233 0ffb 01       		.byte	0x1
 9234 0ffc A803     		.2byte	0x3a8
 9235 0ffe 97000000 		.4byte	0x97
 9236 1002 00000000 		.4byte	.LFB85
 9237 1006 3E000000 		.4byte	.LFE85-.LFB85
 9238 100a 01       		.uleb128 0x1
 9239 100b 9C       		.byte	0x9c
 9240 100c 4B100000 		.4byte	0x104b
 9241 1010 22       		.uleb128 0x22
 9242 1011 090A0000 		.4byte	.LASF214
 9243 1015 01       		.byte	0x1
 9244 1016 A803     		.2byte	0x3a8
 9245 1018 A7060000 		.4byte	0x6a7
 9246 101c 02       		.uleb128 0x2
 9247 101d 91       		.byte	0x91
 9248 101e 6C       		.sleb128 -20
 9249 101f 22       		.uleb128 0x22
 9250 1020 D1040000 		.4byte	.LASF215
 9251 1024 01       		.byte	0x1
 9252 1025 A803     		.2byte	0x3a8
 9253 1027 97000000 		.4byte	0x97
 9254 102b 02       		.uleb128 0x2
 9255 102c 91       		.byte	0x91
 9256 102d 6B       		.sleb128 -21
 9257 102e 23       		.uleb128 0x23
 9258 102f 6900     		.ascii	"i\000"
 9259 1031 01       		.byte	0x1
 9260 1032 AA03     		.2byte	0x3aa
 9261 1034 97000000 		.4byte	0x97
 9262 1038 02       		.uleb128 0x2
 9263 1039 91       		.byte	0x91
 9264 103a 77       		.sleb128 -9
 9265 103b 1F       		.uleb128 0x1f
 9266 103c BB0B0000 		.4byte	.LASF216
 9267 1040 01       		.byte	0x1
 9268 1041 AB03     		.2byte	0x3ab
 9269 1043 97000000 		.4byte	0x97
 9270 1047 02       		.uleb128 0x2
 9271 1048 91       		.byte	0x91
 9272 1049 76       		.sleb128 -10
 9273 104a 00       		.byte	0
 9274 104b 1E       		.uleb128 0x1e
 9275 104c DD0F0000 		.4byte	.LASF217
 9276 1050 01       		.byte	0x1
 9277 1051 B803     		.2byte	0x3b8
 9278 1053 00000000 		.4byte	.LFB86
 9279 1057 2E000000 		.4byte	.LFE86-.LFB86
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 212


 9280 105b 01       		.uleb128 0x1
 9281 105c 9C       		.byte	0x9c
 9282 105d 8F100000 		.4byte	0x108f
 9283 1061 22       		.uleb128 0x22
 9284 1062 4C040000 		.4byte	.LASF218
 9285 1066 01       		.byte	0x1
 9286 1067 B803     		.2byte	0x3b8
 9287 1069 97000000 		.4byte	0x97
 9288 106d 02       		.uleb128 0x2
 9289 106e 91       		.byte	0x91
 9290 106f 6F       		.sleb128 -17
 9291 1070 1F       		.uleb128 0x1f
 9292 1071 9E070000 		.4byte	.LASF180
 9293 1075 01       		.byte	0x1
 9294 1076 B903     		.2byte	0x3b9
 9295 1078 73000000 		.4byte	0x73
 9296 107c 02       		.uleb128 0x2
 9297 107d 91       		.byte	0x91
 9298 107e 74       		.sleb128 -12
 9299 107f 1F       		.uleb128 0x1f
 9300 1080 0A050000 		.4byte	.LASF181
 9301 1084 01       		.byte	0x1
 9302 1085 BA03     		.2byte	0x3ba
 9303 1087 D7040000 		.4byte	0x4d7
 9304 108b 02       		.uleb128 0x2
 9305 108c 91       		.byte	0x91
 9306 108d 70       		.sleb128 -16
 9307 108e 00       		.byte	0
 9308 108f 29       		.uleb128 0x29
 9309 1090 7F030000 		.4byte	.LASF219
 9310 1094 01       		.byte	0x1
 9311 1095 C703     		.2byte	0x3c7
 9312 1097 97000000 		.4byte	0x97
 9313 109b 00000000 		.4byte	.LFB87
 9314 109f 90000000 		.4byte	.LFE87-.LFB87
 9315 10a3 01       		.uleb128 0x1
 9316 10a4 9C       		.byte	0x9c
 9317 10a5 F3100000 		.4byte	0x10f3
 9318 10a9 22       		.uleb128 0x22
 9319 10aa 4F070000 		.4byte	.LASF220
 9320 10ae 01       		.byte	0x1
 9321 10af C703     		.2byte	0x3c7
 9322 10b1 73000000 		.4byte	0x73
 9323 10b5 02       		.uleb128 0x2
 9324 10b6 91       		.byte	0x91
 9325 10b7 64       		.sleb128 -28
 9326 10b8 23       		.uleb128 0x23
 9327 10b9 6900     		.ascii	"i\000"
 9328 10bb 01       		.byte	0x1
 9329 10bc C903     		.2byte	0x3c9
 9330 10be 73000000 		.4byte	0x73
 9331 10c2 02       		.uleb128 0x2
 9332 10c3 91       		.byte	0x91
 9333 10c4 74       		.sleb128 -12
 9334 10c5 1F       		.uleb128 0x1f
 9335 10c6 81000000 		.4byte	.LASF221
 9336 10ca 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 213


 9337 10cb CA03     		.2byte	0x3ca
 9338 10cd 97000000 		.4byte	0x97
 9339 10d1 02       		.uleb128 0x2
 9340 10d2 91       		.byte	0x91
 9341 10d3 6B       		.sleb128 -21
 9342 10d4 1F       		.uleb128 0x1f
 9343 10d5 3C050000 		.4byte	.LASF222
 9344 10d9 01       		.byte	0x1
 9345 10da CB03     		.2byte	0x3cb
 9346 10dc 73000000 		.4byte	0x73
 9347 10e0 02       		.uleb128 0x2
 9348 10e1 91       		.byte	0x91
 9349 10e2 6C       		.sleb128 -20
 9350 10e3 1F       		.uleb128 0x1f
 9351 10e4 92040000 		.4byte	.LASF223
 9352 10e8 01       		.byte	0x1
 9353 10e9 CC03     		.2byte	0x3cc
 9354 10eb 97000000 		.4byte	0x97
 9355 10ef 02       		.uleb128 0x2
 9356 10f0 91       		.byte	0x91
 9357 10f1 73       		.sleb128 -13
 9358 10f2 00       		.byte	0
 9359 10f3 1E       		.uleb128 0x1e
 9360 10f4 A10C0000 		.4byte	.LASF224
 9361 10f8 01       		.byte	0x1
 9362 10f9 F103     		.2byte	0x3f1
 9363 10fb 00000000 		.4byte	.LFB88
 9364 10ff 60000000 		.4byte	.LFE88-.LFB88
 9365 1103 01       		.uleb128 0x1
 9366 1104 9C       		.byte	0x9c
 9367 1105 17110000 		.4byte	0x1117
 9368 1109 23       		.uleb128 0x23
 9369 110a 6900     		.ascii	"i\000"
 9370 110c 01       		.byte	0x1
 9371 110d F303     		.2byte	0x3f3
 9372 110f A3000000 		.4byte	0xa3
 9373 1113 02       		.uleb128 0x2
 9374 1114 91       		.byte	0x91
 9375 1115 76       		.sleb128 -10
 9376 1116 00       		.byte	0
 9377 1117 29       		.uleb128 0x29
 9378 1118 0C0C0000 		.4byte	.LASF225
 9379 111c 01       		.byte	0x1
 9380 111d 0604     		.2byte	0x406
 9381 111f 97000000 		.4byte	0x97
 9382 1123 00000000 		.4byte	.LFB89
 9383 1127 58000000 		.4byte	.LFE89-.LFB89
 9384 112b 01       		.uleb128 0x1
 9385 112c 9C       		.byte	0x9c
 9386 112d 3F110000 		.4byte	0x113f
 9387 1131 23       		.uleb128 0x23
 9388 1132 6900     		.ascii	"i\000"
 9389 1134 01       		.byte	0x1
 9390 1135 0704     		.2byte	0x407
 9391 1137 A3000000 		.4byte	0xa3
 9392 113b 02       		.uleb128 0x2
 9393 113c 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 214


 9394 113d 76       		.sleb128 -10
 9395 113e 00       		.byte	0
 9396 113f 2A       		.uleb128 0x2a
 9397 1140 42050000 		.4byte	.LASF310
 9398 1144 01       		.byte	0x1
 9399 1145 1904     		.2byte	0x419
 9400 1147 97000000 		.4byte	0x97
 9401 114b 00000000 		.4byte	.LFB90
 9402 114f CC000000 		.4byte	.LFE90-.LFB90
 9403 1153 01       		.uleb128 0x1
 9404 1154 9C       		.byte	0x9c
 9405 1155 2B       		.uleb128 0x2b
 9406 1156 D3070000 		.4byte	.LASF226
 9407 115a 01       		.byte	0x1
 9408 115b 4404     		.2byte	0x444
 9409 115d 00000000 		.4byte	.LFB91
 9410 1161 0C000000 		.4byte	.LFE91-.LFB91
 9411 1165 01       		.uleb128 0x1
 9412 1166 9C       		.byte	0x9c
 9413 1167 2B       		.uleb128 0x2b
 9414 1168 210A0000 		.4byte	.LASF227
 9415 116c 01       		.byte	0x1
 9416 116d 4B04     		.2byte	0x44b
 9417 116f 00000000 		.4byte	.LFB92
 9418 1173 0C000000 		.4byte	.LFE92-.LFB92
 9419 1177 01       		.uleb128 0x1
 9420 1178 9C       		.byte	0x9c
 9421 1179 27       		.uleb128 0x27
 9422 117a 740B0000 		.4byte	.LASF229
 9423 117e 01       		.byte	0x1
 9424 117f 5204     		.2byte	0x452
 9425 1181 00000000 		.4byte	.LFB93
 9426 1185 0C000000 		.4byte	.LFE93-.LFB93
 9427 1189 01       		.uleb128 0x1
 9428 118a 9C       		.byte	0x9c
 9429 118b 2B       		.uleb128 0x2b
 9430 118c E9040000 		.4byte	.LASF230
 9431 1190 01       		.byte	0x1
 9432 1191 5904     		.2byte	0x459
 9433 1193 00000000 		.4byte	.LFB94
 9434 1197 0C000000 		.4byte	.LFE94-.LFB94
 9435 119b 01       		.uleb128 0x1
 9436 119c 9C       		.byte	0x9c
 9437 119d 27       		.uleb128 0x27
 9438 119e 87050000 		.4byte	.LASF231
 9439 11a2 01       		.byte	0x1
 9440 11a3 6404     		.2byte	0x464
 9441 11a5 00000000 		.4byte	.LFB95
 9442 11a9 0C000000 		.4byte	.LFE95-.LFB95
 9443 11ad 01       		.uleb128 0x1
 9444 11ae 9C       		.byte	0x9c
 9445 11af 27       		.uleb128 0x27
 9446 11b0 8E0C0000 		.4byte	.LASF232
 9447 11b4 01       		.byte	0x1
 9448 11b5 6904     		.2byte	0x469
 9449 11b7 00000000 		.4byte	.LFB96
 9450 11bb 0C000000 		.4byte	.LFE96-.LFB96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 215


 9451 11bf 01       		.uleb128 0x1
 9452 11c0 9C       		.byte	0x9c
 9453 11c1 27       		.uleb128 0x27
 9454 11c2 8F010000 		.4byte	.LASF233
 9455 11c6 01       		.byte	0x1
 9456 11c7 6D04     		.2byte	0x46d
 9457 11c9 00000000 		.4byte	.LFB97
 9458 11cd 0C000000 		.4byte	.LFE97-.LFB97
 9459 11d1 01       		.uleb128 0x1
 9460 11d2 9C       		.byte	0x9c
 9461 11d3 27       		.uleb128 0x27
 9462 11d4 DE080000 		.4byte	.LASF234
 9463 11d8 01       		.byte	0x1
 9464 11d9 7104     		.2byte	0x471
 9465 11db 00000000 		.4byte	.LFB98
 9466 11df 0C000000 		.4byte	.LFE98-.LFB98
 9467 11e3 01       		.uleb128 0x1
 9468 11e4 9C       		.byte	0x9c
 9469 11e5 2C       		.uleb128 0x2c
 9470 11e6 750A0000 		.4byte	.LASF236
 9471 11ea 01       		.byte	0x1
 9472 11eb 7504     		.2byte	0x475
 9473 11ed 00000000 		.4byte	.LFB99
 9474 11f1 BC000000 		.4byte	.LFE99-.LFB99
 9475 11f5 01       		.uleb128 0x1
 9476 11f6 9C       		.byte	0x9c
 9477 11f7 34120000 		.4byte	0x1234
 9478 11fb 1F       		.uleb128 0x1f
 9479 11fc 0E0F0000 		.4byte	.LASF197
 9480 1200 01       		.byte	0x1
 9481 1201 7704     		.2byte	0x477
 9482 1203 34120000 		.4byte	0x1234
 9483 1207 02       		.uleb128 0x2
 9484 1208 91       		.byte	0x91
 9485 1209 70       		.sleb128 -16
 9486 120a 1F       		.uleb128 0x1f
 9487 120b CE050000 		.4byte	.LASF235
 9488 120f 01       		.byte	0x1
 9489 1210 7804     		.2byte	0x478
 9490 1212 34120000 		.4byte	0x1234
 9491 1216 05       		.uleb128 0x5
 9492 1217 03       		.byte	0x3
 9493 1218 04000000 		.4byte	last_aux_int16.10114
 9494 121c 1A       		.uleb128 0x1a
 9495 121d 42000000 		.4byte	.LBB28
 9496 1221 1A000000 		.4byte	.LBE28-.LBB28
 9497 1225 23       		.uleb128 0x23
 9498 1226 6900     		.ascii	"i\000"
 9499 1228 01       		.byte	0x1
 9500 1229 7F04     		.2byte	0x47f
 9501 122b 97000000 		.4byte	0x97
 9502 122f 02       		.uleb128 0x2
 9503 1230 91       		.byte	0x91
 9504 1231 77       		.sleb128 -9
 9505 1232 00       		.byte	0
 9506 1233 00       		.byte	0
 9507 1234 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 216


 9508 1235 C7000000 		.4byte	0xc7
 9509 1239 44120000 		.4byte	0x1244
 9510 123d 0F       		.uleb128 0xf
 9511 123e 0C010000 		.4byte	0x10c
 9512 1242 02       		.byte	0x2
 9513 1243 00       		.byte	0
 9514 1244 2D       		.uleb128 0x2d
 9515 1245 66110000 		.4byte	.LASF237
 9516 1249 01       		.byte	0x1
 9517 124a 9B04     		.2byte	0x49b
 9518 124c 00000000 		.4byte	.LFB100
 9519 1250 2C000000 		.4byte	.LFE100-.LFB100
 9520 1254 01       		.uleb128 0x1
 9521 1255 9C       		.byte	0x9c
 9522 1256 6A120000 		.4byte	0x126a
 9523 125a 23       		.uleb128 0x23
 9524 125b 61757800 		.ascii	"aux\000"
 9525 125f 01       		.byte	0x1
 9526 1260 9C04     		.2byte	0x49c
 9527 1262 97000000 		.4byte	0x97
 9528 1266 02       		.uleb128 0x2
 9529 1267 91       		.byte	0x91
 9530 1268 77       		.sleb128 -9
 9531 1269 00       		.byte	0
 9532 126a 27       		.uleb128 0x27
 9533 126b D40A0000 		.4byte	.LASF238
 9534 126f 01       		.byte	0x1
 9535 1270 A104     		.2byte	0x4a1
 9536 1272 00000000 		.4byte	.LFB101
 9537 1276 0C000000 		.4byte	.LFE101-.LFB101
 9538 127a 01       		.uleb128 0x1
 9539 127b 9C       		.byte	0x9c
 9540 127c 27       		.uleb128 0x27
 9541 127d D30D0000 		.4byte	.LASF239
 9542 1281 01       		.byte	0x1
 9543 1282 A504     		.2byte	0x4a5
 9544 1284 00000000 		.4byte	.LFB102
 9545 1288 0C000000 		.4byte	.LFE102-.LFB102
 9546 128c 01       		.uleb128 0x1
 9547 128d 9C       		.byte	0x9c
 9548 128e 2D       		.uleb128 0x2d
 9549 128f 4F090000 		.4byte	.LASF240
 9550 1293 01       		.byte	0x1
 9551 1294 AA04     		.2byte	0x4aa
 9552 1296 00000000 		.4byte	.LFB103
 9553 129a 80000000 		.4byte	.LFE103-.LFB103
 9554 129e 01       		.uleb128 0x1
 9555 129f 9C       		.byte	0x9c
 9556 12a0 C3120000 		.4byte	0x12c3
 9557 12a4 1F       		.uleb128 0x1f
 9558 12a5 0A050000 		.4byte	.LASF181
 9559 12a9 01       		.byte	0x1
 9560 12aa AE04     		.2byte	0x4ae
 9561 12ac 5E040000 		.4byte	0x45e
 9562 12b0 02       		.uleb128 0x2
 9563 12b1 91       		.byte	0x91
 9564 12b2 70       		.sleb128 -16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 217


 9565 12b3 1F       		.uleb128 0x1f
 9566 12b4 0E0F0000 		.4byte	.LASF197
 9567 12b8 01       		.byte	0x1
 9568 12b9 AF04     		.2byte	0x4af
 9569 12bb C7000000 		.4byte	0xc7
 9570 12bf 02       		.uleb128 0x2
 9571 12c0 91       		.byte	0x91
 9572 12c1 6E       		.sleb128 -18
 9573 12c2 00       		.byte	0
 9574 12c3 27       		.uleb128 0x27
 9575 12c4 0A100000 		.4byte	.LASF241
 9576 12c8 01       		.byte	0x1
 9577 12c9 CA04     		.2byte	0x4ca
 9578 12cb 00000000 		.4byte	.LFB104
 9579 12cf 0C000000 		.4byte	.LFE104-.LFB104
 9580 12d3 01       		.uleb128 0x1
 9581 12d4 9C       		.byte	0x9c
 9582 12d5 27       		.uleb128 0x27
 9583 12d6 5C070000 		.4byte	.LASF242
 9584 12da 01       		.byte	0x1
 9585 12db CE04     		.2byte	0x4ce
 9586 12dd 00000000 		.4byte	.LFB105
 9587 12e1 0C000000 		.4byte	.LFE105-.LFB105
 9588 12e5 01       		.uleb128 0x1
 9589 12e6 9C       		.byte	0x9c
 9590 12e7 2D       		.uleb128 0x2d
 9591 12e8 A6030000 		.4byte	.LASF243
 9592 12ec 01       		.byte	0x1
 9593 12ed D204     		.2byte	0x4d2
 9594 12ef 00000000 		.4byte	.LFB106
 9595 12f3 C4000000 		.4byte	.LFE106-.LFB106
 9596 12f7 01       		.uleb128 0x1
 9597 12f8 9C       		.byte	0x9c
 9598 12f9 49130000 		.4byte	0x1349
 9599 12fd 1F       		.uleb128 0x1f
 9600 12fe 0A050000 		.4byte	.LASF181
 9601 1302 01       		.byte	0x1
 9602 1303 D404     		.2byte	0x4d4
 9603 1305 49130000 		.4byte	0x1349
 9604 1309 02       		.uleb128 0x2
 9605 130a 91       		.byte	0x91
 9606 130b 5C       		.sleb128 -36
 9607 130c 1F       		.uleb128 0x1f
 9608 130d 9E070000 		.4byte	.LASF180
 9609 1311 01       		.byte	0x1
 9610 1312 D504     		.2byte	0x4d5
 9611 1314 97000000 		.4byte	0x97
 9612 1318 02       		.uleb128 0x2
 9613 1319 91       		.byte	0x91
 9614 131a 76       		.sleb128 -10
 9615 131b 1F       		.uleb128 0x1f
 9616 131c 28020000 		.4byte	.LASF244
 9617 1320 01       		.byte	0x1
 9618 1321 D704     		.2byte	0x4d7
 9619 1323 AF000000 		.4byte	0xaf
 9620 1327 02       		.uleb128 0x2
 9621 1328 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 218


 9622 1329 70       		.sleb128 -16
 9623 132a 1F       		.uleb128 0x1f
 9624 132b 04100000 		.4byte	.LASF245
 9625 132f 01       		.byte	0x1
 9626 1330 D704     		.2byte	0x4d7
 9627 1332 AF000000 		.4byte	0xaf
 9628 1336 02       		.uleb128 0x2
 9629 1337 91       		.byte	0x91
 9630 1338 6C       		.sleb128 -20
 9631 1339 1F       		.uleb128 0x1f
 9632 133a 9C030000 		.4byte	.LASF246
 9633 133e 01       		.byte	0x1
 9634 133f D804     		.2byte	0x4d8
 9635 1341 97000000 		.4byte	0x97
 9636 1345 02       		.uleb128 0x2
 9637 1346 91       		.byte	0x91
 9638 1347 77       		.sleb128 -9
 9639 1348 00       		.byte	0
 9640 1349 0E       		.uleb128 0xe
 9641 134a 97000000 		.4byte	0x97
 9642 134e 59130000 		.4byte	0x1359
 9643 1352 0F       		.uleb128 0xf
 9644 1353 0C010000 		.4byte	0x10c
 9645 1357 0F       		.byte	0xf
 9646 1358 00       		.byte	0
 9647 1359 2D       		.uleb128 0x2d
 9648 135a DF100000 		.4byte	.LASF247
 9649 135e 01       		.byte	0x1
 9650 135f FA04     		.2byte	0x4fa
 9651 1361 00000000 		.4byte	.LFB107
 9652 1365 C4000000 		.4byte	.LFE107-.LFB107
 9653 1369 01       		.uleb128 0x1
 9654 136a 9C       		.byte	0x9c
 9655 136b BB130000 		.4byte	0x13bb
 9656 136f 1F       		.uleb128 0x1f
 9657 1370 0A050000 		.4byte	.LASF181
 9658 1374 01       		.byte	0x1
 9659 1375 0305     		.2byte	0x503
 9660 1377 49130000 		.4byte	0x1349
 9661 137b 02       		.uleb128 0x2
 9662 137c 91       		.byte	0x91
 9663 137d 5C       		.sleb128 -36
 9664 137e 1F       		.uleb128 0x1f
 9665 137f 9E070000 		.4byte	.LASF180
 9666 1383 01       		.byte	0x1
 9667 1384 0405     		.2byte	0x504
 9668 1386 97000000 		.4byte	0x97
 9669 138a 02       		.uleb128 0x2
 9670 138b 91       		.byte	0x91
 9671 138c 76       		.sleb128 -10
 9672 138d 1F       		.uleb128 0x1f
 9673 138e 28020000 		.4byte	.LASF244
 9674 1392 01       		.byte	0x1
 9675 1393 0605     		.2byte	0x506
 9676 1395 AF000000 		.4byte	0xaf
 9677 1399 02       		.uleb128 0x2
 9678 139a 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 219


 9679 139b 70       		.sleb128 -16
 9680 139c 1F       		.uleb128 0x1f
 9681 139d 04100000 		.4byte	.LASF245
 9682 13a1 01       		.byte	0x1
 9683 13a2 0605     		.2byte	0x506
 9684 13a4 AF000000 		.4byte	0xaf
 9685 13a8 02       		.uleb128 0x2
 9686 13a9 91       		.byte	0x91
 9687 13aa 6C       		.sleb128 -20
 9688 13ab 1F       		.uleb128 0x1f
 9689 13ac 9C030000 		.4byte	.LASF246
 9690 13b0 01       		.byte	0x1
 9691 13b1 0705     		.2byte	0x507
 9692 13b3 97000000 		.4byte	0x97
 9693 13b7 02       		.uleb128 0x2
 9694 13b8 91       		.byte	0x91
 9695 13b9 77       		.sleb128 -9
 9696 13ba 00       		.byte	0
 9697 13bb 2E       		.uleb128 0x2e
 9698 13bc 33060000 		.4byte	.LASF248
 9699 13c0 01       		.byte	0x1
 9700 13c1 2C05     		.2byte	0x52c
 9701 13c3 C7000000 		.4byte	0xc7
 9702 13c7 00000000 		.4byte	.LFB108
 9703 13cb A8000000 		.4byte	.LFE108-.LFB108
 9704 13cf 01       		.uleb128 0x1
 9705 13d0 9C       		.byte	0x9c
 9706 13d1 30140000 		.4byte	0x1430
 9707 13d5 1F       		.uleb128 0x1f
 9708 13d6 0A050000 		.4byte	.LASF181
 9709 13da 01       		.byte	0x1
 9710 13db 2E05     		.2byte	0x52e
 9711 13dd 49130000 		.4byte	0x1349
 9712 13e1 02       		.uleb128 0x2
 9713 13e2 91       		.byte	0x91
 9714 13e3 5C       		.sleb128 -36
 9715 13e4 1F       		.uleb128 0x1f
 9716 13e5 9E070000 		.4byte	.LASF180
 9717 13e9 01       		.byte	0x1
 9718 13ea 2F05     		.2byte	0x52f
 9719 13ec 97000000 		.4byte	0x97
 9720 13f0 02       		.uleb128 0x2
 9721 13f1 91       		.byte	0x91
 9722 13f2 74       		.sleb128 -12
 9723 13f3 1F       		.uleb128 0x1f
 9724 13f4 7D050000 		.4byte	.LASF249
 9725 13f8 01       		.byte	0x1
 9726 13f9 3005     		.2byte	0x530
 9727 13fb C7000000 		.4byte	0xc7
 9728 13ff 02       		.uleb128 0x2
 9729 1400 91       		.byte	0x91
 9730 1401 76       		.sleb128 -10
 9731 1402 1F       		.uleb128 0x1f
 9732 1403 28020000 		.4byte	.LASF244
 9733 1407 01       		.byte	0x1
 9734 1408 3105     		.2byte	0x531
 9735 140a AF000000 		.4byte	0xaf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 220


 9736 140e 02       		.uleb128 0x2
 9737 140f 91       		.byte	0x91
 9738 1410 70       		.sleb128 -16
 9739 1411 1F       		.uleb128 0x1f
 9740 1412 04100000 		.4byte	.LASF245
 9741 1416 01       		.byte	0x1
 9742 1417 3105     		.2byte	0x531
 9743 1419 AF000000 		.4byte	0xaf
 9744 141d 02       		.uleb128 0x2
 9745 141e 91       		.byte	0x91
 9746 141f 6C       		.sleb128 -20
 9747 1420 1F       		.uleb128 0x1f
 9748 1421 9C030000 		.4byte	.LASF246
 9749 1425 01       		.byte	0x1
 9750 1426 3205     		.2byte	0x532
 9751 1428 97000000 		.4byte	0x97
 9752 142c 02       		.uleb128 0x2
 9753 142d 91       		.byte	0x91
 9754 142e 75       		.sleb128 -11
 9755 142f 00       		.byte	0
 9756 1430 27       		.uleb128 0x27
 9757 1431 94000000 		.4byte	.LASF250
 9758 1435 01       		.byte	0x1
 9759 1436 5205     		.2byte	0x552
 9760 1438 00000000 		.4byte	.LFB109
 9761 143c 0C000000 		.4byte	.LFE109-.LFB109
 9762 1440 01       		.uleb128 0x1
 9763 1441 9C       		.byte	0x9c
 9764 1442 2D       		.uleb128 0x2d
 9765 1443 16030000 		.4byte	.LASF251
 9766 1447 01       		.byte	0x1
 9767 1448 5605     		.2byte	0x556
 9768 144a 00000000 		.4byte	.LFB110
 9769 144e 20000000 		.4byte	.LFE110-.LFB110
 9770 1452 01       		.uleb128 0x1
 9771 1453 9C       		.byte	0x9c
 9772 1454 68140000 		.4byte	0x1468
 9773 1458 1F       		.uleb128 0x1f
 9774 1459 0A050000 		.4byte	.LASF181
 9775 145d 01       		.byte	0x1
 9776 145e 5805     		.2byte	0x558
 9777 1460 D7040000 		.4byte	0x4d7
 9778 1464 02       		.uleb128 0x2
 9779 1465 91       		.byte	0x91
 9780 1466 74       		.sleb128 -12
 9781 1467 00       		.byte	0
 9782 1468 27       		.uleb128 0x27
 9783 1469 BF050000 		.4byte	.LASF252
 9784 146d 01       		.byte	0x1
 9785 146e 6405     		.2byte	0x564
 9786 1470 00000000 		.4byte	.LFB111
 9787 1474 0C000000 		.4byte	.LFE111-.LFB111
 9788 1478 01       		.uleb128 0x1
 9789 1479 9C       		.byte	0x9c
 9790 147a 2D       		.uleb128 0x2d
 9791 147b AB0C0000 		.4byte	.LASF253
 9792 147f 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 221


 9793 1480 6805     		.2byte	0x568
 9794 1482 00000000 		.4byte	.LFB112
 9795 1486 94000000 		.4byte	.LFE112-.LFB112
 9796 148a 01       		.uleb128 0x1
 9797 148b 9C       		.byte	0x9c
 9798 148c BE140000 		.4byte	0x14be
 9799 1490 1F       		.uleb128 0x1f
 9800 1491 9E070000 		.4byte	.LASF180
 9801 1495 01       		.byte	0x1
 9802 1496 6A05     		.2byte	0x56a
 9803 1498 97000000 		.4byte	0x97
 9804 149c 02       		.uleb128 0x2
 9805 149d 91       		.byte	0x91
 9806 149e 77       		.sleb128 -9
 9807 149f 1F       		.uleb128 0x1f
 9808 14a0 0A050000 		.4byte	.LASF181
 9809 14a4 01       		.byte	0x1
 9810 14a5 6B05     		.2byte	0x56b
 9811 14a7 D7040000 		.4byte	0x4d7
 9812 14ab 02       		.uleb128 0x2
 9813 14ac 91       		.byte	0x91
 9814 14ad 74       		.sleb128 -12
 9815 14ae 1F       		.uleb128 0x1f
 9816 14af AC0D0000 		.4byte	.LASF209
 9817 14b3 01       		.byte	0x1
 9818 14b4 6C05     		.2byte	0x56c
 9819 14b6 97000000 		.4byte	0x97
 9820 14ba 02       		.uleb128 0x2
 9821 14bb 91       		.byte	0x91
 9822 14bc 76       		.sleb128 -10
 9823 14bd 00       		.byte	0
 9824 14be 2D       		.uleb128 0x2d
 9825 14bf A5010000 		.4byte	.LASF254
 9826 14c3 01       		.byte	0x1
 9827 14c4 8A05     		.2byte	0x58a
 9828 14c6 00000000 		.4byte	.LFB113
 9829 14ca 60000000 		.4byte	.LFE113-.LFB113
 9830 14ce 01       		.uleb128 0x1
 9831 14cf 9C       		.byte	0x9c
 9832 14d0 F3140000 		.4byte	0x14f3
 9833 14d4 1F       		.uleb128 0x1f
 9834 14d5 0A050000 		.4byte	.LASF181
 9835 14d9 01       		.byte	0x1
 9836 14da 8C05     		.2byte	0x58c
 9837 14dc 5E040000 		.4byte	0x45e
 9838 14e0 02       		.uleb128 0x2
 9839 14e1 91       		.byte	0x91
 9840 14e2 70       		.sleb128 -16
 9841 14e3 1F       		.uleb128 0x1f
 9842 14e4 0E0F0000 		.4byte	.LASF197
 9843 14e8 01       		.byte	0x1
 9844 14e9 8D05     		.2byte	0x58d
 9845 14eb C7000000 		.4byte	0xc7
 9846 14ef 02       		.uleb128 0x2
 9847 14f0 91       		.byte	0x91
 9848 14f1 6E       		.sleb128 -18
 9849 14f2 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 222


 9850 14f3 27       		.uleb128 0x27
 9851 14f4 25010000 		.4byte	.LASF255
 9852 14f8 01       		.byte	0x1
 9853 14f9 A005     		.2byte	0x5a0
 9854 14fb 00000000 		.4byte	.LFB114
 9855 14ff 0C000000 		.4byte	.LFE114-.LFB114
 9856 1503 01       		.uleb128 0x1
 9857 1504 9C       		.byte	0x9c
 9858 1505 27       		.uleb128 0x27
 9859 1506 AB0F0000 		.4byte	.LASF256
 9860 150a 01       		.byte	0x1
 9861 150b A405     		.2byte	0x5a4
 9862 150d 00000000 		.4byte	.LFB115
 9863 1511 0C000000 		.4byte	.LFE115-.LFB115
 9864 1515 01       		.uleb128 0x1
 9865 1516 9C       		.byte	0x9c
 9866 1517 27       		.uleb128 0x27
 9867 1518 9A0E0000 		.4byte	.LASF257
 9868 151c 01       		.byte	0x1
 9869 151d A705     		.2byte	0x5a7
 9870 151f 00000000 		.4byte	.LFB116
 9871 1523 0C000000 		.4byte	.LFE116-.LFB116
 9872 1527 01       		.uleb128 0x1
 9873 1528 9C       		.byte	0x9c
 9874 1529 27       		.uleb128 0x27
 9875 152a A6020000 		.4byte	.LASF258
 9876 152e 01       		.byte	0x1
 9877 152f AA05     		.2byte	0x5aa
 9878 1531 00000000 		.4byte	.LFB117
 9879 1535 0C000000 		.4byte	.LFE117-.LFB117
 9880 1539 01       		.uleb128 0x1
 9881 153a 9C       		.byte	0x9c
 9882 153b 27       		.uleb128 0x27
 9883 153c DE020000 		.4byte	.LASF259
 9884 1540 01       		.byte	0x1
 9885 1541 AD05     		.2byte	0x5ad
 9886 1543 00000000 		.4byte	.LFB118
 9887 1547 0C000000 		.4byte	.LFE118-.LFB118
 9888 154b 01       		.uleb128 0x1
 9889 154c 9C       		.byte	0x9c
 9890 154d 1E       		.uleb128 0x1e
 9891 154e 70020000 		.4byte	.LASF260
 9892 1552 01       		.byte	0x1
 9893 1553 B105     		.2byte	0x5b1
 9894 1555 00000000 		.4byte	.LFB119
 9895 1559 54010000 		.4byte	.LFE119-.LFB119
 9896 155d 01       		.uleb128 0x1
 9897 155e 9C       		.byte	0x9c
 9898 155f A2150000 		.4byte	0x15a2
 9899 1563 22       		.uleb128 0x22
 9900 1564 23060000 		.4byte	.LASF261
 9901 1568 01       		.byte	0x1
 9902 1569 B105     		.2byte	0x5b1
 9903 156b A3000000 		.4byte	0xa3
 9904 156f 04       		.uleb128 0x4
 9905 1570 91       		.byte	0x91
 9906 1571 9EE37E   		.sleb128 -20066
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 223


 9907 1574 23       		.uleb128 0x23
 9908 1575 6900     		.ascii	"i\000"
 9909 1577 01       		.byte	0x1
 9910 1578 B305     		.2byte	0x5b3
 9911 157a 97000000 		.4byte	0x97
 9912 157e 02       		.uleb128 0x2
 9913 157f 91       		.byte	0x91
 9914 1580 77       		.sleb128 -9
 9915 1581 1F       		.uleb128 0x1f
 9916 1582 88030000 		.4byte	.LASF262
 9917 1586 01       		.byte	0x1
 9918 1587 B405     		.2byte	0x5b4
 9919 1589 690A0000 		.4byte	0xa69
 9920 158d 02       		.uleb128 0x2
 9921 158e 91       		.byte	0x91
 9922 158f 44       		.sleb128 -60
 9923 1590 1F       		.uleb128 0x1f
 9924 1591 78070000 		.4byte	.LASF166
 9925 1595 01       		.byte	0x1
 9926 1596 B505     		.2byte	0x5b5
 9927 1598 E2080000 		.4byte	0x8e2
 9928 159c 04       		.uleb128 0x4
 9929 159d 91       		.byte	0x91
 9930 159e A4E37E   		.sleb128 -20060
 9931 15a1 00       		.byte	0
 9932 15a2 26       		.uleb128 0x26
 9933 15a3 3D030000 		.4byte	.LASF263
 9934 15a7 01       		.byte	0x1
 9935 15a8 CD05     		.2byte	0x5cd
 9936 15aa 00000000 		.4byte	.LFB120
 9937 15ae 14000000 		.4byte	.LFE120-.LFB120
 9938 15b2 01       		.uleb128 0x1
 9939 15b3 9C       		.byte	0x9c
 9940 15b4 C8150000 		.4byte	0x15c8
 9941 15b8 22       		.uleb128 0x22
 9942 15b9 23060000 		.4byte	.LASF261
 9943 15bd 01       		.byte	0x1
 9944 15be CD05     		.2byte	0x5cd
 9945 15c0 A3000000 		.4byte	0xa3
 9946 15c4 02       		.uleb128 0x2
 9947 15c5 91       		.byte	0x91
 9948 15c6 76       		.sleb128 -10
 9949 15c7 00       		.byte	0
 9950 15c8 2D       		.uleb128 0x2d
 9951 15c9 25090000 		.4byte	.LASF264
 9952 15cd 01       		.byte	0x1
 9953 15ce D605     		.2byte	0x5d6
 9954 15d0 00000000 		.4byte	.LFB121
 9955 15d4 50010000 		.4byte	.LFE121-.LFB121
 9956 15d8 01       		.uleb128 0x1
 9957 15d9 9C       		.byte	0x9c
 9958 15da EC150000 		.4byte	0x15ec
 9959 15de 23       		.uleb128 0x23
 9960 15df 6900     		.ascii	"i\000"
 9961 15e1 01       		.byte	0x1
 9962 15e2 D805     		.2byte	0x5d8
 9963 15e4 97000000 		.4byte	0x97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 224


 9964 15e8 02       		.uleb128 0x2
 9965 15e9 91       		.byte	0x91
 9966 15ea 6F       		.sleb128 -17
 9967 15eb 00       		.byte	0
 9968 15ec 2D       		.uleb128 0x2d
 9969 15ed A5000000 		.4byte	.LASF265
 9970 15f1 01       		.byte	0x1
 9971 15f2 FD05     		.2byte	0x5fd
 9972 15f4 00000000 		.4byte	.LFB122
 9973 15f8 94010000 		.4byte	.LFE122-.LFB122
 9974 15fc 01       		.uleb128 0x1
 9975 15fd 9C       		.byte	0x9c
 9976 15fe 4E160000 		.4byte	0x164e
 9977 1602 1F       		.uleb128 0x1f
 9978 1603 7D050000 		.4byte	.LASF249
 9979 1607 01       		.byte	0x1
 9980 1608 FF05     		.2byte	0x5ff
 9981 160a C7000000 		.4byte	0xc7
 9982 160e 02       		.uleb128 0x2
 9983 160f 91       		.byte	0x91
 9984 1610 5C       		.sleb128 -36
 9985 1611 1F       		.uleb128 0x1f
 9986 1612 7F040000 		.4byte	.LASF266
 9987 1616 01       		.byte	0x1
 9988 1617 0006     		.2byte	0x600
 9989 1619 D3000000 		.4byte	0xd3
 9990 161d 02       		.uleb128 0x2
 9991 161e 91       		.byte	0x91
 9992 161f 64       		.sleb128 -28
 9993 1620 1F       		.uleb128 0x1f
 9994 1621 DD090000 		.4byte	.LASF267
 9995 1625 01       		.byte	0x1
 9996 1626 0106     		.2byte	0x601
 9997 1628 D3000000 		.4byte	0xd3
 9998 162c 02       		.uleb128 0x2
 9999 162d 91       		.byte	0x91
 10000 162e 58       		.sleb128 -40
 10001 162f 1F       		.uleb128 0x1f
 10002 1630 71040000 		.4byte	.LASF268
 10003 1634 01       		.byte	0x1
 10004 1635 0206     		.2byte	0x602
 10005 1637 D3000000 		.4byte	0xd3
 10006 163b 02       		.uleb128 0x2
 10007 163c 91       		.byte	0x91
 10008 163d 60       		.sleb128 -32
 10009 163e 1F       		.uleb128 0x1f
 10010 163f 6D0A0000 		.4byte	.LASF269
 10011 1643 01       		.byte	0x1
 10012 1644 0306     		.2byte	0x603
 10013 1646 C7000000 		.4byte	0xc7
 10014 164a 02       		.uleb128 0x2
 10015 164b 91       		.byte	0x91
 10016 164c 5E       		.sleb128 -34
 10017 164d 00       		.byte	0
 10018 164e 2F       		.uleb128 0x2f
 10019 164f F1000000 		.4byte	.LASF270
 10020 1653 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 225


 10021 1654 3806     		.2byte	0x638
 10022 1656 00000000 		.4byte	.LFB123
 10023 165a 24000000 		.4byte	.LFE123-.LFB123
 10024 165e 01       		.uleb128 0x1
 10025 165f 9C       		.byte	0x9c
 10026 1660 2F       		.uleb128 0x2f
 10027 1661 A9090000 		.4byte	.LASF271
 10028 1665 01       		.byte	0x1
 10029 1666 3E06     		.2byte	0x63e
 10030 1668 00000000 		.4byte	.LFB124
 10031 166c 40000000 		.4byte	.LFE124-.LFB124
 10032 1670 01       		.uleb128 0x1
 10033 1671 9C       		.byte	0x9c
 10034 1672 30       		.uleb128 0x30
 10035 1673 E50A0000 		.4byte	.LASF272
 10036 1677 01       		.byte	0x1
 10037 1678 4B06     		.2byte	0x64b
 10038 167a 97000000 		.4byte	0x97
 10039 167e 00000000 		.4byte	.LFB125
 10040 1682 0E000000 		.4byte	.LFE125-.LFB125
 10041 1686 01       		.uleb128 0x1
 10042 1687 9C       		.byte	0x9c
 10043 1688 26       		.uleb128 0x26
 10044 1689 D9060000 		.4byte	.LASF273
 10045 168d 01       		.byte	0x1
 10046 168e 5506     		.2byte	0x655
 10047 1690 00000000 		.4byte	.LFB126
 10048 1694 12000000 		.4byte	.LFE126-.LFB126
 10049 1698 01       		.uleb128 0x1
 10050 1699 9C       		.byte	0x9c
 10051 169a AE160000 		.4byte	0x16ae
 10052 169e 22       		.uleb128 0x22
 10053 169f AF050000 		.4byte	.LASF274
 10054 16a3 01       		.byte	0x1
 10055 16a4 5506     		.2byte	0x655
 10056 16a6 73000000 		.4byte	0x73
 10057 16aa 02       		.uleb128 0x2
 10058 16ab 91       		.byte	0x91
 10059 16ac 74       		.sleb128 -12
 10060 16ad 00       		.byte	0
 10061 16ae 1E       		.uleb128 0x1e
 10062 16af EA0B0000 		.4byte	.LASF275
 10063 16b3 01       		.byte	0x1
 10064 16b4 A606     		.2byte	0x6a6
 10065 16b6 00000000 		.4byte	.LFB127
 10066 16ba 84000000 		.4byte	.LFE127-.LFB127
 10067 16be 01       		.uleb128 0x1
 10068 16bf 9C       		.byte	0x9c
 10069 16c0 01170000 		.4byte	0x1701
 10070 16c4 22       		.uleb128 0x22
 10071 16c5 84070000 		.4byte	.LASF134
 10072 16c9 01       		.byte	0x1
 10073 16ca A606     		.2byte	0x6a6
 10074 16cc 97000000 		.4byte	0x97
 10075 16d0 02       		.uleb128 0x2
 10076 16d1 91       		.byte	0x91
 10077 16d2 5F       		.sleb128 -33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 226


 10078 16d3 1F       		.uleb128 0x1f
 10079 16d4 0A050000 		.4byte	.LASF181
 10080 16d8 01       		.byte	0x1
 10081 16d9 AD06     		.2byte	0x6ad
 10082 16db 5E040000 		.4byte	0x45e
 10083 16df 02       		.uleb128 0x2
 10084 16e0 91       		.byte	0x91
 10085 16e1 68       		.sleb128 -24
 10086 16e2 1F       		.uleb128 0x1f
 10087 16e3 9E070000 		.4byte	.LASF180
 10088 16e7 01       		.byte	0x1
 10089 16e8 AE06     		.2byte	0x6ae
 10090 16ea 97000000 		.4byte	0x97
 10091 16ee 02       		.uleb128 0x2
 10092 16ef 91       		.byte	0x91
 10093 16f0 6F       		.sleb128 -17
 10094 16f1 1F       		.uleb128 0x1f
 10095 16f2 0E0F0000 		.4byte	.LASF197
 10096 16f6 01       		.byte	0x1
 10097 16f7 AF06     		.2byte	0x6af
 10098 16f9 C7000000 		.4byte	0xc7
 10099 16fd 02       		.uleb128 0x2
 10100 16fe 91       		.byte	0x91
 10101 16ff 66       		.sleb128 -26
 10102 1700 00       		.byte	0
 10103 1701 2F       		.uleb128 0x2f
 10104 1702 59000000 		.4byte	.LASF276
 10105 1706 01       		.byte	0x1
 10106 1707 C506     		.2byte	0x6c5
 10107 1709 00000000 		.4byte	.LFB128
 10108 170d 30000000 		.4byte	.LFE128-.LFB128
 10109 1711 01       		.uleb128 0x1
 10110 1712 9C       		.byte	0x9c
 10111 1713 27       		.uleb128 0x27
 10112 1714 2A050000 		.4byte	.LASF277
 10113 1718 01       		.byte	0x1
 10114 1719 D306     		.2byte	0x6d3
 10115 171b 00000000 		.4byte	.LFB129
 10116 171f 0C000000 		.4byte	.LFE129-.LFB129
 10117 1723 01       		.uleb128 0x1
 10118 1724 9C       		.byte	0x9c
 10119 1725 31       		.uleb128 0x31
 10120 1726 9C090000 		.4byte	.LASF278
 10121 172a 08       		.byte	0x8
 10122 172b 1207     		.2byte	0x712
 10123 172d 31170000 		.4byte	0x1731
 10124 1731 06       		.uleb128 0x6
 10125 1732 81000000 		.4byte	0x81
 10126 1736 31       		.uleb128 0x31
 10127 1737 73100000 		.4byte	.LASF279
 10128 173b 07       		.byte	0x7
 10129 173c 6D01     		.2byte	0x16d
 10130 173e AD060000 		.4byte	0x6ad
 10131 1742 31       		.uleb128 0x31
 10132 1743 8C0E0000 		.4byte	.LASF280
 10133 1747 07       		.byte	0x7
 10134 1748 6D01     		.2byte	0x16d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 227


 10135 174a AD060000 		.4byte	0x6ad
 10136 174e 31       		.uleb128 0x31
 10137 174f 74000000 		.4byte	.LASF281
 10138 1753 07       		.byte	0x7
 10139 1754 6601     		.2byte	0x166
 10140 1756 88030000 		.4byte	0x388
 10141 175a 31       		.uleb128 0x31
 10142 175b 6D100000 		.4byte	.LASF282
 10143 175f 07       		.byte	0x7
 10144 1760 6C01     		.2byte	0x16c
 10145 1762 7D050000 		.4byte	0x57d
 10146 1766 31       		.uleb128 0x31
 10147 1767 030A0000 		.4byte	.LASF283
 10148 176b 07       		.byte	0x7
 10149 176c 6C01     		.2byte	0x16c
 10150 176e 7D050000 		.4byte	0x57d
 10151 1772 31       		.uleb128 0x31
 10152 1773 240F0000 		.4byte	.LASF284
 10153 1777 07       		.byte	0x7
 10154 1778 7001     		.2byte	0x170
 10155 177a DF000000 		.4byte	0xdf
 10156 177e 31       		.uleb128 0x31
 10157 177f B6030000 		.4byte	.LASF285
 10158 1783 07       		.byte	0x7
 10159 1784 6701     		.2byte	0x167
 10160 1786 97000000 		.4byte	0x97
 10161 178a 0E       		.uleb128 0xe
 10162 178b 97000000 		.4byte	0x97
 10163 178f 9A170000 		.4byte	0x179a
 10164 1793 0F       		.uleb128 0xf
 10165 1794 0C010000 		.4byte	0x10c
 10166 1798 02       		.byte	0x2
 10167 1799 00       		.byte	0
 10168 179a 31       		.uleb128 0x31
 10169 179b 60090000 		.4byte	.LASF286
 10170 179f 07       		.byte	0x7
 10171 17a0 2001     		.2byte	0x120
 10172 17a2 8A170000 		.4byte	0x178a
 10173 17a6 31       		.uleb128 0x31
 10174 17a7 C9060000 		.4byte	.LASF287
 10175 17ab 07       		.byte	0x7
 10176 17ac 6801     		.2byte	0x168
 10177 17ae 97000000 		.4byte	0x97
 10178 17b2 31       		.uleb128 0x31
 10179 17b3 450D0000 		.4byte	.LASF288
 10180 17b7 07       		.byte	0x7
 10181 17b8 2C01     		.2byte	0x12c
 10182 17ba 950D0000 		.4byte	0xd95
 10183 17be 31       		.uleb128 0x31
 10184 17bf EE020000 		.4byte	.LASF289
 10185 17c3 07       		.byte	0x7
 10186 17c4 2D01     		.2byte	0x12d
 10187 17c6 950D0000 		.4byte	0xd95
 10188 17ca 31       		.uleb128 0x31
 10189 17cb 44100000 		.4byte	.LASF290
 10190 17cf 07       		.byte	0x7
 10191 17d0 3001     		.2byte	0x130
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 228


 10192 17d2 950D0000 		.4byte	0xd95
 10193 17d6 31       		.uleb128 0x31
 10194 17d7 B1100000 		.4byte	.LASF291
 10195 17db 07       		.byte	0x7
 10196 17dc 6A01     		.2byte	0x16a
 10197 17de 97000000 		.4byte	0x97
 10198 17e2 31       		.uleb128 0x31
 10199 17e3 6F050000 		.4byte	.LASF292
 10200 17e7 07       		.byte	0x7
 10201 17e8 5401     		.2byte	0x154
 10202 17ea D3000000 		.4byte	0xd3
 10203 17ee 31       		.uleb128 0x31
 10204 17ef E30B0000 		.4byte	.LASF293
 10205 17f3 07       		.byte	0x7
 10206 17f4 5501     		.2byte	0x155
 10207 17f6 D7040000 		.4byte	0x4d7
 10208 17fa 31       		.uleb128 0x31
 10209 17fb C7100000 		.4byte	.LASF294
 10210 17ff 07       		.byte	0x7
 10211 1800 5501     		.2byte	0x155
 10212 1802 D7040000 		.4byte	0x4d7
 10213 1806 31       		.uleb128 0x31
 10214 1807 92090000 		.4byte	.LASF295
 10215 180b 07       		.byte	0x7
 10216 180c 5501     		.2byte	0x155
 10217 180e D7040000 		.4byte	0x4d7
 10218 1812 31       		.uleb128 0x31
 10219 1813 4C110000 		.4byte	.LASF296
 10220 1817 07       		.byte	0x7
 10221 1818 5601     		.2byte	0x156
 10222 181a 97000000 		.4byte	0x97
 10223 181e 31       		.uleb128 0x31
 10224 181f 49020000 		.4byte	.LASF297
 10225 1823 07       		.byte	0x7
 10226 1824 5601     		.2byte	0x156
 10227 1826 97000000 		.4byte	0x97
 10228 182a 31       		.uleb128 0x31
 10229 182b CA010000 		.4byte	.LASF298
 10230 182f 07       		.byte	0x7
 10231 1830 5601     		.2byte	0x156
 10232 1832 97000000 		.4byte	0x97
 10233 1836 31       		.uleb128 0x31
 10234 1837 35020000 		.4byte	.LASF299
 10235 183b 07       		.byte	0x7
 10236 183c 8101     		.2byte	0x181
 10237 183e C7000000 		.4byte	0xc7
 10238 1842 31       		.uleb128 0x31
 10239 1843 3F020000 		.4byte	.LASF300
 10240 1847 07       		.byte	0x7
 10241 1848 8201     		.2byte	0x182
 10242 184a C7000000 		.4byte	0xc7
 10243 184e 31       		.uleb128 0x31
 10244 184f 07030000 		.4byte	.LASF301
 10245 1853 07       		.byte	0x7
 10246 1854 6B01     		.2byte	0x16b
 10247 1856 D3000000 		.4byte	0xd3
 10248 185a 31       		.uleb128 0x31
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 229


 10249 185b C10D0000 		.4byte	.LASF302
 10250 185f 07       		.byte	0x7
 10251 1860 6B01     		.2byte	0x16b
 10252 1862 D3000000 		.4byte	0xd3
 10253 1866 31       		.uleb128 0x31
 10254 1867 C40B0000 		.4byte	.LASF303
 10255 186b 07       		.byte	0x7
 10256 186c 8401     		.2byte	0x184
 10257 186e 840D0000 		.4byte	0xd84
 10258 1872 32       		.uleb128 0x32
 10259 1873 180F0000 		.4byte	.LASF304
 10260 1877 01       		.byte	0x1
 10261 1878 33       		.byte	0x33
 10262 1879 83180000 		.4byte	0x1883
 10263 187d 05       		.uleb128 0x5
 10264 187e 03       		.byte	0x3
 10265 187f 00000000 		.4byte	EEPROM_ADDR
 10266 1883 07       		.uleb128 0x7
 10267 1884 04       		.byte	0x4
 10268 1885 F4000000 		.4byte	0xf4
 10269 1889 00       		.byte	0
 10270              		.section	.debug_abbrev,"",%progbits
 10271              	.Ldebug_abbrev0:
 10272 0000 01       		.uleb128 0x1
 10273 0001 11       		.uleb128 0x11
 10274 0002 01       		.byte	0x1
 10275 0003 25       		.uleb128 0x25
 10276 0004 0E       		.uleb128 0xe
 10277 0005 13       		.uleb128 0x13
 10278 0006 0B       		.uleb128 0xb
 10279 0007 03       		.uleb128 0x3
 10280 0008 0E       		.uleb128 0xe
 10281 0009 1B       		.uleb128 0x1b
 10282 000a 0E       		.uleb128 0xe
 10283 000b 55       		.uleb128 0x55
 10284 000c 17       		.uleb128 0x17
 10285 000d 11       		.uleb128 0x11
 10286 000e 01       		.uleb128 0x1
 10287 000f 10       		.uleb128 0x10
 10288 0010 17       		.uleb128 0x17
 10289 0011 00       		.byte	0
 10290 0012 00       		.byte	0
 10291 0013 02       		.uleb128 0x2
 10292 0014 24       		.uleb128 0x24
 10293 0015 00       		.byte	0
 10294 0016 0B       		.uleb128 0xb
 10295 0017 0B       		.uleb128 0xb
 10296 0018 3E       		.uleb128 0x3e
 10297 0019 0B       		.uleb128 0xb
 10298 001a 03       		.uleb128 0x3
 10299 001b 0E       		.uleb128 0xe
 10300 001c 00       		.byte	0
 10301 001d 00       		.byte	0
 10302 001e 03       		.uleb128 0x3
 10303 001f 16       		.uleb128 0x16
 10304 0020 00       		.byte	0
 10305 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 230


 10306 0022 0E       		.uleb128 0xe
 10307 0023 3A       		.uleb128 0x3a
 10308 0024 0B       		.uleb128 0xb
 10309 0025 3B       		.uleb128 0x3b
 10310 0026 0B       		.uleb128 0xb
 10311 0027 49       		.uleb128 0x49
 10312 0028 13       		.uleb128 0x13
 10313 0029 00       		.byte	0
 10314 002a 00       		.byte	0
 10315 002b 04       		.uleb128 0x4
 10316 002c 24       		.uleb128 0x24
 10317 002d 00       		.byte	0
 10318 002e 0B       		.uleb128 0xb
 10319 002f 0B       		.uleb128 0xb
 10320 0030 3E       		.uleb128 0x3e
 10321 0031 0B       		.uleb128 0xb
 10322 0032 03       		.uleb128 0x3
 10323 0033 08       		.uleb128 0x8
 10324 0034 00       		.byte	0
 10325 0035 00       		.byte	0
 10326 0036 05       		.uleb128 0x5
 10327 0037 16       		.uleb128 0x16
 10328 0038 00       		.byte	0
 10329 0039 03       		.uleb128 0x3
 10330 003a 0E       		.uleb128 0xe
 10331 003b 3A       		.uleb128 0x3a
 10332 003c 0B       		.uleb128 0xb
 10333 003d 3B       		.uleb128 0x3b
 10334 003e 05       		.uleb128 0x5
 10335 003f 49       		.uleb128 0x49
 10336 0040 13       		.uleb128 0x13
 10337 0041 00       		.byte	0
 10338 0042 00       		.byte	0
 10339 0043 06       		.uleb128 0x6
 10340 0044 35       		.uleb128 0x35
 10341 0045 00       		.byte	0
 10342 0046 49       		.uleb128 0x49
 10343 0047 13       		.uleb128 0x13
 10344 0048 00       		.byte	0
 10345 0049 00       		.byte	0
 10346 004a 07       		.uleb128 0x7
 10347 004b 0F       		.uleb128 0xf
 10348 004c 00       		.byte	0
 10349 004d 0B       		.uleb128 0xb
 10350 004e 0B       		.uleb128 0xb
 10351 004f 49       		.uleb128 0x49
 10352 0050 13       		.uleb128 0x13
 10353 0051 00       		.byte	0
 10354 0052 00       		.byte	0
 10355 0053 08       		.uleb128 0x8
 10356 0054 26       		.uleb128 0x26
 10357 0055 00       		.byte	0
 10358 0056 49       		.uleb128 0x49
 10359 0057 13       		.uleb128 0x13
 10360 0058 00       		.byte	0
 10361 0059 00       		.byte	0
 10362 005a 09       		.uleb128 0x9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 231


 10363 005b 04       		.uleb128 0x4
 10364 005c 01       		.byte	0x1
 10365 005d 03       		.uleb128 0x3
 10366 005e 0E       		.uleb128 0xe
 10367 005f 0B       		.uleb128 0xb
 10368 0060 0B       		.uleb128 0xb
 10369 0061 49       		.uleb128 0x49
 10370 0062 13       		.uleb128 0x13
 10371 0063 3A       		.uleb128 0x3a
 10372 0064 0B       		.uleb128 0xb
 10373 0065 3B       		.uleb128 0x3b
 10374 0066 0B       		.uleb128 0xb
 10375 0067 01       		.uleb128 0x1
 10376 0068 13       		.uleb128 0x13
 10377 0069 00       		.byte	0
 10378 006a 00       		.byte	0
 10379 006b 0A       		.uleb128 0xa
 10380 006c 28       		.uleb128 0x28
 10381 006d 00       		.byte	0
 10382 006e 03       		.uleb128 0x3
 10383 006f 0E       		.uleb128 0xe
 10384 0070 1C       		.uleb128 0x1c
 10385 0071 0B       		.uleb128 0xb
 10386 0072 00       		.byte	0
 10387 0073 00       		.byte	0
 10388 0074 0B       		.uleb128 0xb
 10389 0075 13       		.uleb128 0x13
 10390 0076 01       		.byte	0x1
 10391 0077 03       		.uleb128 0x3
 10392 0078 0E       		.uleb128 0xe
 10393 0079 0B       		.uleb128 0xb
 10394 007a 0B       		.uleb128 0xb
 10395 007b 3A       		.uleb128 0x3a
 10396 007c 0B       		.uleb128 0xb
 10397 007d 3B       		.uleb128 0x3b
 10398 007e 0B       		.uleb128 0xb
 10399 007f 01       		.uleb128 0x1
 10400 0080 13       		.uleb128 0x13
 10401 0081 00       		.byte	0
 10402 0082 00       		.byte	0
 10403 0083 0C       		.uleb128 0xc
 10404 0084 0D       		.uleb128 0xd
 10405 0085 00       		.byte	0
 10406 0086 03       		.uleb128 0x3
 10407 0087 0E       		.uleb128 0xe
 10408 0088 3A       		.uleb128 0x3a
 10409 0089 0B       		.uleb128 0xb
 10410 008a 3B       		.uleb128 0x3b
 10411 008b 0B       		.uleb128 0xb
 10412 008c 49       		.uleb128 0x49
 10413 008d 13       		.uleb128 0x13
 10414 008e 38       		.uleb128 0x38
 10415 008f 0B       		.uleb128 0xb
 10416 0090 00       		.byte	0
 10417 0091 00       		.byte	0
 10418 0092 0D       		.uleb128 0xd
 10419 0093 0D       		.uleb128 0xd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 232


 10420 0094 00       		.byte	0
 10421 0095 03       		.uleb128 0x3
 10422 0096 08       		.uleb128 0x8
 10423 0097 3A       		.uleb128 0x3a
 10424 0098 0B       		.uleb128 0xb
 10425 0099 3B       		.uleb128 0x3b
 10426 009a 0B       		.uleb128 0xb
 10427 009b 49       		.uleb128 0x49
 10428 009c 13       		.uleb128 0x13
 10429 009d 38       		.uleb128 0x38
 10430 009e 0B       		.uleb128 0xb
 10431 009f 00       		.byte	0
 10432 00a0 00       		.byte	0
 10433 00a1 0E       		.uleb128 0xe
 10434 00a2 01       		.uleb128 0x1
 10435 00a3 01       		.byte	0x1
 10436 00a4 49       		.uleb128 0x49
 10437 00a5 13       		.uleb128 0x13
 10438 00a6 01       		.uleb128 0x1
 10439 00a7 13       		.uleb128 0x13
 10440 00a8 00       		.byte	0
 10441 00a9 00       		.byte	0
 10442 00aa 0F       		.uleb128 0xf
 10443 00ab 21       		.uleb128 0x21
 10444 00ac 00       		.byte	0
 10445 00ad 49       		.uleb128 0x49
 10446 00ae 13       		.uleb128 0x13
 10447 00af 2F       		.uleb128 0x2f
 10448 00b0 0B       		.uleb128 0xb
 10449 00b1 00       		.byte	0
 10450 00b2 00       		.byte	0
 10451 00b3 10       		.uleb128 0x10
 10452 00b4 13       		.uleb128 0x13
 10453 00b5 01       		.byte	0x1
 10454 00b6 03       		.uleb128 0x3
 10455 00b7 0E       		.uleb128 0xe
 10456 00b8 0B       		.uleb128 0xb
 10457 00b9 0B       		.uleb128 0xb
 10458 00ba 3A       		.uleb128 0x3a
 10459 00bb 0B       		.uleb128 0xb
 10460 00bc 3B       		.uleb128 0x3b
 10461 00bd 05       		.uleb128 0x5
 10462 00be 01       		.uleb128 0x1
 10463 00bf 13       		.uleb128 0x13
 10464 00c0 00       		.byte	0
 10465 00c1 00       		.byte	0
 10466 00c2 11       		.uleb128 0x11
 10467 00c3 0D       		.uleb128 0xd
 10468 00c4 00       		.byte	0
 10469 00c5 03       		.uleb128 0x3
 10470 00c6 0E       		.uleb128 0xe
 10471 00c7 3A       		.uleb128 0x3a
 10472 00c8 0B       		.uleb128 0xb
 10473 00c9 3B       		.uleb128 0x3b
 10474 00ca 05       		.uleb128 0x5
 10475 00cb 49       		.uleb128 0x49
 10476 00cc 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 233


 10477 00cd 38       		.uleb128 0x38
 10478 00ce 0B       		.uleb128 0xb
 10479 00cf 00       		.byte	0
 10480 00d0 00       		.byte	0
 10481 00d1 12       		.uleb128 0x12
 10482 00d2 0D       		.uleb128 0xd
 10483 00d3 00       		.byte	0
 10484 00d4 03       		.uleb128 0x3
 10485 00d5 08       		.uleb128 0x8
 10486 00d6 3A       		.uleb128 0x3a
 10487 00d7 0B       		.uleb128 0xb
 10488 00d8 3B       		.uleb128 0x3b
 10489 00d9 05       		.uleb128 0x5
 10490 00da 49       		.uleb128 0x49
 10491 00db 13       		.uleb128 0x13
 10492 00dc 38       		.uleb128 0x38
 10493 00dd 0B       		.uleb128 0xb
 10494 00de 00       		.byte	0
 10495 00df 00       		.byte	0
 10496 00e0 13       		.uleb128 0x13
 10497 00e1 2E       		.uleb128 0x2e
 10498 00e2 01       		.byte	0x1
 10499 00e3 03       		.uleb128 0x3
 10500 00e4 0E       		.uleb128 0xe
 10501 00e5 3A       		.uleb128 0x3a
 10502 00e6 0B       		.uleb128 0xb
 10503 00e7 3B       		.uleb128 0x3b
 10504 00e8 05       		.uleb128 0x5
 10505 00e9 27       		.uleb128 0x27
 10506 00ea 19       		.uleb128 0x19
 10507 00eb 49       		.uleb128 0x49
 10508 00ec 13       		.uleb128 0x13
 10509 00ed 20       		.uleb128 0x20
 10510 00ee 0B       		.uleb128 0xb
 10511 00ef 01       		.uleb128 0x1
 10512 00f0 13       		.uleb128 0x13
 10513 00f1 00       		.byte	0
 10514 00f2 00       		.byte	0
 10515 00f3 14       		.uleb128 0x14
 10516 00f4 05       		.uleb128 0x5
 10517 00f5 00       		.byte	0
 10518 00f6 03       		.uleb128 0x3
 10519 00f7 0E       		.uleb128 0xe
 10520 00f8 3A       		.uleb128 0x3a
 10521 00f9 0B       		.uleb128 0xb
 10522 00fa 3B       		.uleb128 0x3b
 10523 00fb 05       		.uleb128 0x5
 10524 00fc 49       		.uleb128 0x49
 10525 00fd 13       		.uleb128 0x13
 10526 00fe 00       		.byte	0
 10527 00ff 00       		.byte	0
 10528 0100 15       		.uleb128 0x15
 10529 0101 34       		.uleb128 0x34
 10530 0102 00       		.byte	0
 10531 0103 03       		.uleb128 0x3
 10532 0104 0E       		.uleb128 0xe
 10533 0105 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 234


 10534 0106 0B       		.uleb128 0xb
 10535 0107 3B       		.uleb128 0x3b
 10536 0108 05       		.uleb128 0x5
 10537 0109 49       		.uleb128 0x49
 10538 010a 13       		.uleb128 0x13
 10539 010b 00       		.byte	0
 10540 010c 00       		.byte	0
 10541 010d 16       		.uleb128 0x16
 10542 010e 2E       		.uleb128 0x2e
 10543 010f 01       		.byte	0x1
 10544 0110 3F       		.uleb128 0x3f
 10545 0111 19       		.uleb128 0x19
 10546 0112 03       		.uleb128 0x3
 10547 0113 0E       		.uleb128 0xe
 10548 0114 3A       		.uleb128 0x3a
 10549 0115 0B       		.uleb128 0xb
 10550 0116 3B       		.uleb128 0x3b
 10551 0117 0B       		.uleb128 0xb
 10552 0118 27       		.uleb128 0x27
 10553 0119 19       		.uleb128 0x19
 10554 011a 11       		.uleb128 0x11
 10555 011b 01       		.uleb128 0x1
 10556 011c 12       		.uleb128 0x12
 10557 011d 06       		.uleb128 0x6
 10558 011e 40       		.uleb128 0x40
 10559 011f 18       		.uleb128 0x18
 10560 0120 9642     		.uleb128 0x2116
 10561 0122 19       		.uleb128 0x19
 10562 0123 01       		.uleb128 0x1
 10563 0124 13       		.uleb128 0x13
 10564 0125 00       		.byte	0
 10565 0126 00       		.byte	0
 10566 0127 17       		.uleb128 0x17
 10567 0128 34       		.uleb128 0x34
 10568 0129 00       		.byte	0
 10569 012a 03       		.uleb128 0x3
 10570 012b 0E       		.uleb128 0xe
 10571 012c 3A       		.uleb128 0x3a
 10572 012d 0B       		.uleb128 0xb
 10573 012e 3B       		.uleb128 0x3b
 10574 012f 0B       		.uleb128 0xb
 10575 0130 49       		.uleb128 0x49
 10576 0131 13       		.uleb128 0x13
 10577 0132 02       		.uleb128 0x2
 10578 0133 18       		.uleb128 0x18
 10579 0134 00       		.byte	0
 10580 0135 00       		.byte	0
 10581 0136 18       		.uleb128 0x18
 10582 0137 1D       		.uleb128 0x1d
 10583 0138 01       		.byte	0x1
 10584 0139 31       		.uleb128 0x31
 10585 013a 13       		.uleb128 0x13
 10586 013b 11       		.uleb128 0x11
 10587 013c 01       		.uleb128 0x1
 10588 013d 12       		.uleb128 0x12
 10589 013e 06       		.uleb128 0x6
 10590 013f 58       		.uleb128 0x58
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 235


 10591 0140 0B       		.uleb128 0xb
 10592 0141 59       		.uleb128 0x59
 10593 0142 0B       		.uleb128 0xb
 10594 0143 01       		.uleb128 0x1
 10595 0144 13       		.uleb128 0x13
 10596 0145 00       		.byte	0
 10597 0146 00       		.byte	0
 10598 0147 19       		.uleb128 0x19
 10599 0148 05       		.uleb128 0x5
 10600 0149 00       		.byte	0
 10601 014a 31       		.uleb128 0x31
 10602 014b 13       		.uleb128 0x13
 10603 014c 02       		.uleb128 0x2
 10604 014d 18       		.uleb128 0x18
 10605 014e 00       		.byte	0
 10606 014f 00       		.byte	0
 10607 0150 1A       		.uleb128 0x1a
 10608 0151 0B       		.uleb128 0xb
 10609 0152 01       		.byte	0x1
 10610 0153 11       		.uleb128 0x11
 10611 0154 01       		.uleb128 0x1
 10612 0155 12       		.uleb128 0x12
 10613 0156 06       		.uleb128 0x6
 10614 0157 00       		.byte	0
 10615 0158 00       		.byte	0
 10616 0159 1B       		.uleb128 0x1b
 10617 015a 34       		.uleb128 0x34
 10618 015b 00       		.byte	0
 10619 015c 31       		.uleb128 0x31
 10620 015d 13       		.uleb128 0x13
 10621 015e 02       		.uleb128 0x2
 10622 015f 18       		.uleb128 0x18
 10623 0160 00       		.byte	0
 10624 0161 00       		.byte	0
 10625 0162 1C       		.uleb128 0x1c
 10626 0163 1D       		.uleb128 0x1d
 10627 0164 01       		.byte	0x1
 10628 0165 31       		.uleb128 0x31
 10629 0166 13       		.uleb128 0x13
 10630 0167 11       		.uleb128 0x11
 10631 0168 01       		.uleb128 0x1
 10632 0169 12       		.uleb128 0x12
 10633 016a 06       		.uleb128 0x6
 10634 016b 58       		.uleb128 0x58
 10635 016c 0B       		.uleb128 0xb
 10636 016d 59       		.uleb128 0x59
 10637 016e 05       		.uleb128 0x5
 10638 016f 01       		.uleb128 0x1
 10639 0170 13       		.uleb128 0x13
 10640 0171 00       		.byte	0
 10641 0172 00       		.byte	0
 10642 0173 1D       		.uleb128 0x1d
 10643 0174 1D       		.uleb128 0x1d
 10644 0175 01       		.byte	0x1
 10645 0176 31       		.uleb128 0x31
 10646 0177 13       		.uleb128 0x13
 10647 0178 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 236


 10648 0179 01       		.uleb128 0x1
 10649 017a 12       		.uleb128 0x12
 10650 017b 06       		.uleb128 0x6
 10651 017c 58       		.uleb128 0x58
 10652 017d 0B       		.uleb128 0xb
 10653 017e 59       		.uleb128 0x59
 10654 017f 05       		.uleb128 0x5
 10655 0180 00       		.byte	0
 10656 0181 00       		.byte	0
 10657 0182 1E       		.uleb128 0x1e
 10658 0183 2E       		.uleb128 0x2e
 10659 0184 01       		.byte	0x1
 10660 0185 3F       		.uleb128 0x3f
 10661 0186 19       		.uleb128 0x19
 10662 0187 03       		.uleb128 0x3
 10663 0188 0E       		.uleb128 0xe
 10664 0189 3A       		.uleb128 0x3a
 10665 018a 0B       		.uleb128 0xb
 10666 018b 3B       		.uleb128 0x3b
 10667 018c 05       		.uleb128 0x5
 10668 018d 27       		.uleb128 0x27
 10669 018e 19       		.uleb128 0x19
 10670 018f 11       		.uleb128 0x11
 10671 0190 01       		.uleb128 0x1
 10672 0191 12       		.uleb128 0x12
 10673 0192 06       		.uleb128 0x6
 10674 0193 40       		.uleb128 0x40
 10675 0194 18       		.uleb128 0x18
 10676 0195 9642     		.uleb128 0x2116
 10677 0197 19       		.uleb128 0x19
 10678 0198 01       		.uleb128 0x1
 10679 0199 13       		.uleb128 0x13
 10680 019a 00       		.byte	0
 10681 019b 00       		.byte	0
 10682 019c 1F       		.uleb128 0x1f
 10683 019d 34       		.uleb128 0x34
 10684 019e 00       		.byte	0
 10685 019f 03       		.uleb128 0x3
 10686 01a0 0E       		.uleb128 0xe
 10687 01a1 3A       		.uleb128 0x3a
 10688 01a2 0B       		.uleb128 0xb
 10689 01a3 3B       		.uleb128 0x3b
 10690 01a4 05       		.uleb128 0x5
 10691 01a5 49       		.uleb128 0x49
 10692 01a6 13       		.uleb128 0x13
 10693 01a7 02       		.uleb128 0x2
 10694 01a8 18       		.uleb128 0x18
 10695 01a9 00       		.byte	0
 10696 01aa 00       		.byte	0
 10697 01ab 20       		.uleb128 0x20
 10698 01ac 21       		.uleb128 0x21
 10699 01ad 00       		.byte	0
 10700 01ae 49       		.uleb128 0x49
 10701 01af 13       		.uleb128 0x13
 10702 01b0 2F       		.uleb128 0x2f
 10703 01b1 05       		.uleb128 0x5
 10704 01b2 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 237


 10705 01b3 00       		.byte	0
 10706 01b4 21       		.uleb128 0x21
 10707 01b5 2E       		.uleb128 0x2e
 10708 01b6 01       		.byte	0x1
 10709 01b7 3F       		.uleb128 0x3f
 10710 01b8 19       		.uleb128 0x19
 10711 01b9 03       		.uleb128 0x3
 10712 01ba 0E       		.uleb128 0xe
 10713 01bb 3A       		.uleb128 0x3a
 10714 01bc 0B       		.uleb128 0xb
 10715 01bd 3B       		.uleb128 0x3b
 10716 01be 05       		.uleb128 0x5
 10717 01bf 27       		.uleb128 0x27
 10718 01c0 19       		.uleb128 0x19
 10719 01c1 49       		.uleb128 0x49
 10720 01c2 13       		.uleb128 0x13
 10721 01c3 11       		.uleb128 0x11
 10722 01c4 01       		.uleb128 0x1
 10723 01c5 12       		.uleb128 0x12
 10724 01c6 06       		.uleb128 0x6
 10725 01c7 40       		.uleb128 0x40
 10726 01c8 18       		.uleb128 0x18
 10727 01c9 9742     		.uleb128 0x2117
 10728 01cb 19       		.uleb128 0x19
 10729 01cc 01       		.uleb128 0x1
 10730 01cd 13       		.uleb128 0x13
 10731 01ce 00       		.byte	0
 10732 01cf 00       		.byte	0
 10733 01d0 22       		.uleb128 0x22
 10734 01d1 05       		.uleb128 0x5
 10735 01d2 00       		.byte	0
 10736 01d3 03       		.uleb128 0x3
 10737 01d4 0E       		.uleb128 0xe
 10738 01d5 3A       		.uleb128 0x3a
 10739 01d6 0B       		.uleb128 0xb
 10740 01d7 3B       		.uleb128 0x3b
 10741 01d8 05       		.uleb128 0x5
 10742 01d9 49       		.uleb128 0x49
 10743 01da 13       		.uleb128 0x13
 10744 01db 02       		.uleb128 0x2
 10745 01dc 18       		.uleb128 0x18
 10746 01dd 00       		.byte	0
 10747 01de 00       		.byte	0
 10748 01df 23       		.uleb128 0x23
 10749 01e0 34       		.uleb128 0x34
 10750 01e1 00       		.byte	0
 10751 01e2 03       		.uleb128 0x3
 10752 01e3 08       		.uleb128 0x8
 10753 01e4 3A       		.uleb128 0x3a
 10754 01e5 0B       		.uleb128 0xb
 10755 01e6 3B       		.uleb128 0x3b
 10756 01e7 05       		.uleb128 0x5
 10757 01e8 49       		.uleb128 0x49
 10758 01e9 13       		.uleb128 0x13
 10759 01ea 02       		.uleb128 0x2
 10760 01eb 18       		.uleb128 0x18
 10761 01ec 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 238


 10762 01ed 00       		.byte	0
 10763 01ee 24       		.uleb128 0x24
 10764 01ef 0B       		.uleb128 0xb
 10765 01f0 01       		.byte	0x1
 10766 01f1 11       		.uleb128 0x11
 10767 01f2 01       		.uleb128 0x1
 10768 01f3 12       		.uleb128 0x12
 10769 01f4 06       		.uleb128 0x6
 10770 01f5 01       		.uleb128 0x1
 10771 01f6 13       		.uleb128 0x13
 10772 01f7 00       		.byte	0
 10773 01f8 00       		.byte	0
 10774 01f9 25       		.uleb128 0x25
 10775 01fa 21       		.uleb128 0x21
 10776 01fb 00       		.byte	0
 10777 01fc 49       		.uleb128 0x49
 10778 01fd 13       		.uleb128 0x13
 10779 01fe 2F       		.uleb128 0x2f
 10780 01ff 18       		.uleb128 0x18
 10781 0200 00       		.byte	0
 10782 0201 00       		.byte	0
 10783 0202 26       		.uleb128 0x26
 10784 0203 2E       		.uleb128 0x2e
 10785 0204 01       		.byte	0x1
 10786 0205 3F       		.uleb128 0x3f
 10787 0206 19       		.uleb128 0x19
 10788 0207 03       		.uleb128 0x3
 10789 0208 0E       		.uleb128 0xe
 10790 0209 3A       		.uleb128 0x3a
 10791 020a 0B       		.uleb128 0xb
 10792 020b 3B       		.uleb128 0x3b
 10793 020c 05       		.uleb128 0x5
 10794 020d 27       		.uleb128 0x27
 10795 020e 19       		.uleb128 0x19
 10796 020f 11       		.uleb128 0x11
 10797 0210 01       		.uleb128 0x1
 10798 0211 12       		.uleb128 0x12
 10799 0212 06       		.uleb128 0x6
 10800 0213 40       		.uleb128 0x40
 10801 0214 18       		.uleb128 0x18
 10802 0215 9742     		.uleb128 0x2117
 10803 0217 19       		.uleb128 0x19
 10804 0218 01       		.uleb128 0x1
 10805 0219 13       		.uleb128 0x13
 10806 021a 00       		.byte	0
 10807 021b 00       		.byte	0
 10808 021c 27       		.uleb128 0x27
 10809 021d 2E       		.uleb128 0x2e
 10810 021e 00       		.byte	0
 10811 021f 3F       		.uleb128 0x3f
 10812 0220 19       		.uleb128 0x19
 10813 0221 03       		.uleb128 0x3
 10814 0222 0E       		.uleb128 0xe
 10815 0223 3A       		.uleb128 0x3a
 10816 0224 0B       		.uleb128 0xb
 10817 0225 3B       		.uleb128 0x3b
 10818 0226 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 239


 10819 0227 11       		.uleb128 0x11
 10820 0228 01       		.uleb128 0x1
 10821 0229 12       		.uleb128 0x12
 10822 022a 06       		.uleb128 0x6
 10823 022b 40       		.uleb128 0x40
 10824 022c 18       		.uleb128 0x18
 10825 022d 9742     		.uleb128 0x2117
 10826 022f 19       		.uleb128 0x19
 10827 0230 00       		.byte	0
 10828 0231 00       		.byte	0
 10829 0232 28       		.uleb128 0x28
 10830 0233 05       		.uleb128 0x5
 10831 0234 00       		.byte	0
 10832 0235 03       		.uleb128 0x3
 10833 0236 08       		.uleb128 0x8
 10834 0237 3A       		.uleb128 0x3a
 10835 0238 0B       		.uleb128 0xb
 10836 0239 3B       		.uleb128 0x3b
 10837 023a 05       		.uleb128 0x5
 10838 023b 49       		.uleb128 0x49
 10839 023c 13       		.uleb128 0x13
 10840 023d 02       		.uleb128 0x2
 10841 023e 18       		.uleb128 0x18
 10842 023f 00       		.byte	0
 10843 0240 00       		.byte	0
 10844 0241 29       		.uleb128 0x29
 10845 0242 2E       		.uleb128 0x2e
 10846 0243 01       		.byte	0x1
 10847 0244 3F       		.uleb128 0x3f
 10848 0245 19       		.uleb128 0x19
 10849 0246 03       		.uleb128 0x3
 10850 0247 0E       		.uleb128 0xe
 10851 0248 3A       		.uleb128 0x3a
 10852 0249 0B       		.uleb128 0xb
 10853 024a 3B       		.uleb128 0x3b
 10854 024b 05       		.uleb128 0x5
 10855 024c 27       		.uleb128 0x27
 10856 024d 19       		.uleb128 0x19
 10857 024e 49       		.uleb128 0x49
 10858 024f 13       		.uleb128 0x13
 10859 0250 11       		.uleb128 0x11
 10860 0251 01       		.uleb128 0x1
 10861 0252 12       		.uleb128 0x12
 10862 0253 06       		.uleb128 0x6
 10863 0254 40       		.uleb128 0x40
 10864 0255 18       		.uleb128 0x18
 10865 0256 9642     		.uleb128 0x2116
 10866 0258 19       		.uleb128 0x19
 10867 0259 01       		.uleb128 0x1
 10868 025a 13       		.uleb128 0x13
 10869 025b 00       		.byte	0
 10870 025c 00       		.byte	0
 10871 025d 2A       		.uleb128 0x2a
 10872 025e 2E       		.uleb128 0x2e
 10873 025f 00       		.byte	0
 10874 0260 3F       		.uleb128 0x3f
 10875 0261 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 240


 10876 0262 03       		.uleb128 0x3
 10877 0263 0E       		.uleb128 0xe
 10878 0264 3A       		.uleb128 0x3a
 10879 0265 0B       		.uleb128 0xb
 10880 0266 3B       		.uleb128 0x3b
 10881 0267 05       		.uleb128 0x5
 10882 0268 27       		.uleb128 0x27
 10883 0269 19       		.uleb128 0x19
 10884 026a 49       		.uleb128 0x49
 10885 026b 13       		.uleb128 0x13
 10886 026c 11       		.uleb128 0x11
 10887 026d 01       		.uleb128 0x1
 10888 026e 12       		.uleb128 0x12
 10889 026f 06       		.uleb128 0x6
 10890 0270 40       		.uleb128 0x40
 10891 0271 18       		.uleb128 0x18
 10892 0272 9642     		.uleb128 0x2116
 10893 0274 19       		.uleb128 0x19
 10894 0275 00       		.byte	0
 10895 0276 00       		.byte	0
 10896 0277 2B       		.uleb128 0x2b
 10897 0278 2E       		.uleb128 0x2e
 10898 0279 00       		.byte	0
 10899 027a 3F       		.uleb128 0x3f
 10900 027b 19       		.uleb128 0x19
 10901 027c 03       		.uleb128 0x3
 10902 027d 0E       		.uleb128 0xe
 10903 027e 3A       		.uleb128 0x3a
 10904 027f 0B       		.uleb128 0xb
 10905 0280 3B       		.uleb128 0x3b
 10906 0281 05       		.uleb128 0x5
 10907 0282 27       		.uleb128 0x27
 10908 0283 19       		.uleb128 0x19
 10909 0284 11       		.uleb128 0x11
 10910 0285 01       		.uleb128 0x1
 10911 0286 12       		.uleb128 0x12
 10912 0287 06       		.uleb128 0x6
 10913 0288 40       		.uleb128 0x40
 10914 0289 18       		.uleb128 0x18
 10915 028a 9742     		.uleb128 0x2117
 10916 028c 19       		.uleb128 0x19
 10917 028d 00       		.byte	0
 10918 028e 00       		.byte	0
 10919 028f 2C       		.uleb128 0x2c
 10920 0290 2E       		.uleb128 0x2e
 10921 0291 01       		.byte	0x1
 10922 0292 3F       		.uleb128 0x3f
 10923 0293 19       		.uleb128 0x19
 10924 0294 03       		.uleb128 0x3
 10925 0295 0E       		.uleb128 0xe
 10926 0296 3A       		.uleb128 0x3a
 10927 0297 0B       		.uleb128 0xb
 10928 0298 3B       		.uleb128 0x3b
 10929 0299 05       		.uleb128 0x5
 10930 029a 11       		.uleb128 0x11
 10931 029b 01       		.uleb128 0x1
 10932 029c 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 241


 10933 029d 06       		.uleb128 0x6
 10934 029e 40       		.uleb128 0x40
 10935 029f 18       		.uleb128 0x18
 10936 02a0 9742     		.uleb128 0x2117
 10937 02a2 19       		.uleb128 0x19
 10938 02a3 01       		.uleb128 0x1
 10939 02a4 13       		.uleb128 0x13
 10940 02a5 00       		.byte	0
 10941 02a6 00       		.byte	0
 10942 02a7 2D       		.uleb128 0x2d
 10943 02a8 2E       		.uleb128 0x2e
 10944 02a9 01       		.byte	0x1
 10945 02aa 3F       		.uleb128 0x3f
 10946 02ab 19       		.uleb128 0x19
 10947 02ac 03       		.uleb128 0x3
 10948 02ad 0E       		.uleb128 0xe
 10949 02ae 3A       		.uleb128 0x3a
 10950 02af 0B       		.uleb128 0xb
 10951 02b0 3B       		.uleb128 0x3b
 10952 02b1 05       		.uleb128 0x5
 10953 02b2 11       		.uleb128 0x11
 10954 02b3 01       		.uleb128 0x1
 10955 02b4 12       		.uleb128 0x12
 10956 02b5 06       		.uleb128 0x6
 10957 02b6 40       		.uleb128 0x40
 10958 02b7 18       		.uleb128 0x18
 10959 02b8 9642     		.uleb128 0x2116
 10960 02ba 19       		.uleb128 0x19
 10961 02bb 01       		.uleb128 0x1
 10962 02bc 13       		.uleb128 0x13
 10963 02bd 00       		.byte	0
 10964 02be 00       		.byte	0
 10965 02bf 2E       		.uleb128 0x2e
 10966 02c0 2E       		.uleb128 0x2e
 10967 02c1 01       		.byte	0x1
 10968 02c2 3F       		.uleb128 0x3f
 10969 02c3 19       		.uleb128 0x19
 10970 02c4 03       		.uleb128 0x3
 10971 02c5 0E       		.uleb128 0xe
 10972 02c6 3A       		.uleb128 0x3a
 10973 02c7 0B       		.uleb128 0xb
 10974 02c8 3B       		.uleb128 0x3b
 10975 02c9 05       		.uleb128 0x5
 10976 02ca 49       		.uleb128 0x49
 10977 02cb 13       		.uleb128 0x13
 10978 02cc 11       		.uleb128 0x11
 10979 02cd 01       		.uleb128 0x1
 10980 02ce 12       		.uleb128 0x12
 10981 02cf 06       		.uleb128 0x6
 10982 02d0 40       		.uleb128 0x40
 10983 02d1 18       		.uleb128 0x18
 10984 02d2 9642     		.uleb128 0x2116
 10985 02d4 19       		.uleb128 0x19
 10986 02d5 01       		.uleb128 0x1
 10987 02d6 13       		.uleb128 0x13
 10988 02d7 00       		.byte	0
 10989 02d8 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 242


 10990 02d9 2F       		.uleb128 0x2f
 10991 02da 2E       		.uleb128 0x2e
 10992 02db 00       		.byte	0
 10993 02dc 3F       		.uleb128 0x3f
 10994 02dd 19       		.uleb128 0x19
 10995 02de 03       		.uleb128 0x3
 10996 02df 0E       		.uleb128 0xe
 10997 02e0 3A       		.uleb128 0x3a
 10998 02e1 0B       		.uleb128 0xb
 10999 02e2 3B       		.uleb128 0x3b
 11000 02e3 05       		.uleb128 0x5
 11001 02e4 11       		.uleb128 0x11
 11002 02e5 01       		.uleb128 0x1
 11003 02e6 12       		.uleb128 0x12
 11004 02e7 06       		.uleb128 0x6
 11005 02e8 40       		.uleb128 0x40
 11006 02e9 18       		.uleb128 0x18
 11007 02ea 9642     		.uleb128 0x2116
 11008 02ec 19       		.uleb128 0x19
 11009 02ed 00       		.byte	0
 11010 02ee 00       		.byte	0
 11011 02ef 30       		.uleb128 0x30
 11012 02f0 2E       		.uleb128 0x2e
 11013 02f1 00       		.byte	0
 11014 02f2 3F       		.uleb128 0x3f
 11015 02f3 19       		.uleb128 0x19
 11016 02f4 03       		.uleb128 0x3
 11017 02f5 0E       		.uleb128 0xe
 11018 02f6 3A       		.uleb128 0x3a
 11019 02f7 0B       		.uleb128 0xb
 11020 02f8 3B       		.uleb128 0x3b
 11021 02f9 05       		.uleb128 0x5
 11022 02fa 49       		.uleb128 0x49
 11023 02fb 13       		.uleb128 0x13
 11024 02fc 11       		.uleb128 0x11
 11025 02fd 01       		.uleb128 0x1
 11026 02fe 12       		.uleb128 0x12
 11027 02ff 06       		.uleb128 0x6
 11028 0300 40       		.uleb128 0x40
 11029 0301 18       		.uleb128 0x18
 11030 0302 9742     		.uleb128 0x2117
 11031 0304 19       		.uleb128 0x19
 11032 0305 00       		.byte	0
 11033 0306 00       		.byte	0
 11034 0307 31       		.uleb128 0x31
 11035 0308 34       		.uleb128 0x34
 11036 0309 00       		.byte	0
 11037 030a 03       		.uleb128 0x3
 11038 030b 0E       		.uleb128 0xe
 11039 030c 3A       		.uleb128 0x3a
 11040 030d 0B       		.uleb128 0xb
 11041 030e 3B       		.uleb128 0x3b
 11042 030f 05       		.uleb128 0x5
 11043 0310 49       		.uleb128 0x49
 11044 0311 13       		.uleb128 0x13
 11045 0312 3F       		.uleb128 0x3f
 11046 0313 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 243


 11047 0314 3C       		.uleb128 0x3c
 11048 0315 19       		.uleb128 0x19
 11049 0316 00       		.byte	0
 11050 0317 00       		.byte	0
 11051 0318 32       		.uleb128 0x32
 11052 0319 34       		.uleb128 0x34
 11053 031a 00       		.byte	0
 11054 031b 03       		.uleb128 0x3
 11055 031c 0E       		.uleb128 0xe
 11056 031d 3A       		.uleb128 0x3a
 11057 031e 0B       		.uleb128 0xb
 11058 031f 3B       		.uleb128 0x3b
 11059 0320 0B       		.uleb128 0xb
 11060 0321 49       		.uleb128 0x49
 11061 0322 13       		.uleb128 0x13
 11062 0323 3F       		.uleb128 0x3f
 11063 0324 19       		.uleb128 0x19
 11064 0325 02       		.uleb128 0x2
 11065 0326 18       		.uleb128 0x18
 11066 0327 00       		.byte	0
 11067 0328 00       		.byte	0
 11068 0329 00       		.byte	0
 11069              		.section	.debug_aranges,"",%progbits
 11070 0000 24020000 		.4byte	0x224
 11071 0004 0200     		.2byte	0x2
 11072 0006 00000000 		.4byte	.Ldebug_info0
 11073 000a 04       		.byte	0x4
 11074 000b 00       		.byte	0
 11075 000c 0000     		.2byte	0
 11076 000e 0000     		.2byte	0
 11077 0010 00000000 		.4byte	.LFB64
 11078 0014 BC050000 		.4byte	.LFE64-.LFB64
 11079 0018 00000000 		.4byte	.LFB65
 11080 001c 22000000 		.4byte	.LFE65-.LFB65
 11081 0020 00000000 		.4byte	.LFB66
 11082 0024 5E000000 		.4byte	.LFE66-.LFB66
 11083 0028 00000000 		.4byte	.LFB67
 11084 002c 64010000 		.4byte	.LFE67-.LFB67
 11085 0030 00000000 		.4byte	.LFB68
 11086 0034 BC070000 		.4byte	.LFE68-.LFB68
 11087 0038 00000000 		.4byte	.LFB69
 11088 003c 34070000 		.4byte	.LFE69-.LFB69
 11089 0040 00000000 		.4byte	.LFB70
 11090 0044 34010000 		.4byte	.LFE70-.LFB70
 11091 0048 00000000 		.4byte	.LFB71
 11092 004c 14000000 		.4byte	.LFE71-.LFB71
 11093 0050 00000000 		.4byte	.LFB72
 11094 0054 0C000000 		.4byte	.LFE72-.LFB72
 11095 0058 00000000 		.4byte	.LFB73
 11096 005c B8030000 		.4byte	.LFE73-.LFB73
 11097 0060 00000000 		.4byte	.LFB74
 11098 0064 14020000 		.4byte	.LFE74-.LFB74
 11099 0068 00000000 		.4byte	.LFB75
 11100 006c 12000000 		.4byte	.LFE75-.LFB75
 11101 0070 00000000 		.4byte	.LFB76
 11102 0074 12000000 		.4byte	.LFE76-.LFB76
 11103 0078 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 244


 11104 007c 12000000 		.4byte	.LFE77-.LFB77
 11105 0080 00000000 		.4byte	.LFB78
 11106 0084 12000000 		.4byte	.LFE78-.LFB78
 11107 0088 00000000 		.4byte	.LFB79
 11108 008c 12000000 		.4byte	.LFE79-.LFB79
 11109 0090 00000000 		.4byte	.LFB80
 11110 0094 12000000 		.4byte	.LFE80-.LFB80
 11111 0098 00000000 		.4byte	.LFB81
 11112 009c 12000000 		.4byte	.LFE81-.LFB81
 11113 00a0 00000000 		.4byte	.LFB82
 11114 00a4 84000000 		.4byte	.LFE82-.LFB82
 11115 00a8 00000000 		.4byte	.LFB83
 11116 00ac 88000000 		.4byte	.LFE83-.LFB83
 11117 00b0 00000000 		.4byte	.LFB84
 11118 00b4 A0000000 		.4byte	.LFE84-.LFB84
 11119 00b8 00000000 		.4byte	.LFB85
 11120 00bc 3E000000 		.4byte	.LFE85-.LFB85
 11121 00c0 00000000 		.4byte	.LFB86
 11122 00c4 2E000000 		.4byte	.LFE86-.LFB86
 11123 00c8 00000000 		.4byte	.LFB87
 11124 00cc 90000000 		.4byte	.LFE87-.LFB87
 11125 00d0 00000000 		.4byte	.LFB88
 11126 00d4 60000000 		.4byte	.LFE88-.LFB88
 11127 00d8 00000000 		.4byte	.LFB89
 11128 00dc 58000000 		.4byte	.LFE89-.LFB89
 11129 00e0 00000000 		.4byte	.LFB90
 11130 00e4 CC000000 		.4byte	.LFE90-.LFB90
 11131 00e8 00000000 		.4byte	.LFB91
 11132 00ec 0C000000 		.4byte	.LFE91-.LFB91
 11133 00f0 00000000 		.4byte	.LFB92
 11134 00f4 0C000000 		.4byte	.LFE92-.LFB92
 11135 00f8 00000000 		.4byte	.LFB93
 11136 00fc 0C000000 		.4byte	.LFE93-.LFB93
 11137 0100 00000000 		.4byte	.LFB94
 11138 0104 0C000000 		.4byte	.LFE94-.LFB94
 11139 0108 00000000 		.4byte	.LFB95
 11140 010c 0C000000 		.4byte	.LFE95-.LFB95
 11141 0110 00000000 		.4byte	.LFB96
 11142 0114 0C000000 		.4byte	.LFE96-.LFB96
 11143 0118 00000000 		.4byte	.LFB97
 11144 011c 0C000000 		.4byte	.LFE97-.LFB97
 11145 0120 00000000 		.4byte	.LFB98
 11146 0124 0C000000 		.4byte	.LFE98-.LFB98
 11147 0128 00000000 		.4byte	.LFB99
 11148 012c BC000000 		.4byte	.LFE99-.LFB99
 11149 0130 00000000 		.4byte	.LFB100
 11150 0134 2C000000 		.4byte	.LFE100-.LFB100
 11151 0138 00000000 		.4byte	.LFB101
 11152 013c 0C000000 		.4byte	.LFE101-.LFB101
 11153 0140 00000000 		.4byte	.LFB102
 11154 0144 0C000000 		.4byte	.LFE102-.LFB102
 11155 0148 00000000 		.4byte	.LFB103
 11156 014c 80000000 		.4byte	.LFE103-.LFB103
 11157 0150 00000000 		.4byte	.LFB104
 11158 0154 0C000000 		.4byte	.LFE104-.LFB104
 11159 0158 00000000 		.4byte	.LFB105
 11160 015c 0C000000 		.4byte	.LFE105-.LFB105
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 245


 11161 0160 00000000 		.4byte	.LFB106
 11162 0164 C4000000 		.4byte	.LFE106-.LFB106
 11163 0168 00000000 		.4byte	.LFB107
 11164 016c C4000000 		.4byte	.LFE107-.LFB107
 11165 0170 00000000 		.4byte	.LFB108
 11166 0174 A8000000 		.4byte	.LFE108-.LFB108
 11167 0178 00000000 		.4byte	.LFB109
 11168 017c 0C000000 		.4byte	.LFE109-.LFB109
 11169 0180 00000000 		.4byte	.LFB110
 11170 0184 20000000 		.4byte	.LFE110-.LFB110
 11171 0188 00000000 		.4byte	.LFB111
 11172 018c 0C000000 		.4byte	.LFE111-.LFB111
 11173 0190 00000000 		.4byte	.LFB112
 11174 0194 94000000 		.4byte	.LFE112-.LFB112
 11175 0198 00000000 		.4byte	.LFB113
 11176 019c 60000000 		.4byte	.LFE113-.LFB113
 11177 01a0 00000000 		.4byte	.LFB114
 11178 01a4 0C000000 		.4byte	.LFE114-.LFB114
 11179 01a8 00000000 		.4byte	.LFB115
 11180 01ac 0C000000 		.4byte	.LFE115-.LFB115
 11181 01b0 00000000 		.4byte	.LFB116
 11182 01b4 0C000000 		.4byte	.LFE116-.LFB116
 11183 01b8 00000000 		.4byte	.LFB117
 11184 01bc 0C000000 		.4byte	.LFE117-.LFB117
 11185 01c0 00000000 		.4byte	.LFB118
 11186 01c4 0C000000 		.4byte	.LFE118-.LFB118
 11187 01c8 00000000 		.4byte	.LFB119
 11188 01cc 54010000 		.4byte	.LFE119-.LFB119
 11189 01d0 00000000 		.4byte	.LFB120
 11190 01d4 14000000 		.4byte	.LFE120-.LFB120
 11191 01d8 00000000 		.4byte	.LFB121
 11192 01dc 50010000 		.4byte	.LFE121-.LFB121
 11193 01e0 00000000 		.4byte	.LFB122
 11194 01e4 94010000 		.4byte	.LFE122-.LFB122
 11195 01e8 00000000 		.4byte	.LFB123
 11196 01ec 24000000 		.4byte	.LFE123-.LFB123
 11197 01f0 00000000 		.4byte	.LFB124
 11198 01f4 40000000 		.4byte	.LFE124-.LFB124
 11199 01f8 00000000 		.4byte	.LFB125
 11200 01fc 0E000000 		.4byte	.LFE125-.LFB125
 11201 0200 00000000 		.4byte	.LFB126
 11202 0204 12000000 		.4byte	.LFE126-.LFB126
 11203 0208 00000000 		.4byte	.LFB127
 11204 020c 84000000 		.4byte	.LFE127-.LFB127
 11205 0210 00000000 		.4byte	.LFB128
 11206 0214 30000000 		.4byte	.LFE128-.LFB128
 11207 0218 00000000 		.4byte	.LFB129
 11208 021c 0C000000 		.4byte	.LFE129-.LFB129
 11209 0220 00000000 		.4byte	0
 11210 0224 00000000 		.4byte	0
 11211              		.section	.debug_ranges,"",%progbits
 11212              	.Ldebug_ranges0:
 11213 0000 00000000 		.4byte	.LFB64
 11214 0004 BC050000 		.4byte	.LFE64
 11215 0008 00000000 		.4byte	.LFB65
 11216 000c 22000000 		.4byte	.LFE65
 11217 0010 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 246


 11218 0014 5E000000 		.4byte	.LFE66
 11219 0018 00000000 		.4byte	.LFB67
 11220 001c 64010000 		.4byte	.LFE67
 11221 0020 00000000 		.4byte	.LFB68
 11222 0024 BC070000 		.4byte	.LFE68
 11223 0028 00000000 		.4byte	.LFB69
 11224 002c 34070000 		.4byte	.LFE69
 11225 0030 00000000 		.4byte	.LFB70
 11226 0034 34010000 		.4byte	.LFE70
 11227 0038 00000000 		.4byte	.LFB71
 11228 003c 14000000 		.4byte	.LFE71
 11229 0040 00000000 		.4byte	.LFB72
 11230 0044 0C000000 		.4byte	.LFE72
 11231 0048 00000000 		.4byte	.LFB73
 11232 004c B8030000 		.4byte	.LFE73
 11233 0050 00000000 		.4byte	.LFB74
 11234 0054 14020000 		.4byte	.LFE74
 11235 0058 00000000 		.4byte	.LFB75
 11236 005c 12000000 		.4byte	.LFE75
 11237 0060 00000000 		.4byte	.LFB76
 11238 0064 12000000 		.4byte	.LFE76
 11239 0068 00000000 		.4byte	.LFB77
 11240 006c 12000000 		.4byte	.LFE77
 11241 0070 00000000 		.4byte	.LFB78
 11242 0074 12000000 		.4byte	.LFE78
 11243 0078 00000000 		.4byte	.LFB79
 11244 007c 12000000 		.4byte	.LFE79
 11245 0080 00000000 		.4byte	.LFB80
 11246 0084 12000000 		.4byte	.LFE80
 11247 0088 00000000 		.4byte	.LFB81
 11248 008c 12000000 		.4byte	.LFE81
 11249 0090 00000000 		.4byte	.LFB82
 11250 0094 84000000 		.4byte	.LFE82
 11251 0098 00000000 		.4byte	.LFB83
 11252 009c 88000000 		.4byte	.LFE83
 11253 00a0 00000000 		.4byte	.LFB84
 11254 00a4 A0000000 		.4byte	.LFE84
 11255 00a8 00000000 		.4byte	.LFB85
 11256 00ac 3E000000 		.4byte	.LFE85
 11257 00b0 00000000 		.4byte	.LFB86
 11258 00b4 2E000000 		.4byte	.LFE86
 11259 00b8 00000000 		.4byte	.LFB87
 11260 00bc 90000000 		.4byte	.LFE87
 11261 00c0 00000000 		.4byte	.LFB88
 11262 00c4 60000000 		.4byte	.LFE88
 11263 00c8 00000000 		.4byte	.LFB89
 11264 00cc 58000000 		.4byte	.LFE89
 11265 00d0 00000000 		.4byte	.LFB90
 11266 00d4 CC000000 		.4byte	.LFE90
 11267 00d8 00000000 		.4byte	.LFB91
 11268 00dc 0C000000 		.4byte	.LFE91
 11269 00e0 00000000 		.4byte	.LFB92
 11270 00e4 0C000000 		.4byte	.LFE92
 11271 00e8 00000000 		.4byte	.LFB93
 11272 00ec 0C000000 		.4byte	.LFE93
 11273 00f0 00000000 		.4byte	.LFB94
 11274 00f4 0C000000 		.4byte	.LFE94
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 247


 11275 00f8 00000000 		.4byte	.LFB95
 11276 00fc 0C000000 		.4byte	.LFE95
 11277 0100 00000000 		.4byte	.LFB96
 11278 0104 0C000000 		.4byte	.LFE96
 11279 0108 00000000 		.4byte	.LFB97
 11280 010c 0C000000 		.4byte	.LFE97
 11281 0110 00000000 		.4byte	.LFB98
 11282 0114 0C000000 		.4byte	.LFE98
 11283 0118 00000000 		.4byte	.LFB99
 11284 011c BC000000 		.4byte	.LFE99
 11285 0120 00000000 		.4byte	.LFB100
 11286 0124 2C000000 		.4byte	.LFE100
 11287 0128 00000000 		.4byte	.LFB101
 11288 012c 0C000000 		.4byte	.LFE101
 11289 0130 00000000 		.4byte	.LFB102
 11290 0134 0C000000 		.4byte	.LFE102
 11291 0138 00000000 		.4byte	.LFB103
 11292 013c 80000000 		.4byte	.LFE103
 11293 0140 00000000 		.4byte	.LFB104
 11294 0144 0C000000 		.4byte	.LFE104
 11295 0148 00000000 		.4byte	.LFB105
 11296 014c 0C000000 		.4byte	.LFE105
 11297 0150 00000000 		.4byte	.LFB106
 11298 0154 C4000000 		.4byte	.LFE106
 11299 0158 00000000 		.4byte	.LFB107
 11300 015c C4000000 		.4byte	.LFE107
 11301 0160 00000000 		.4byte	.LFB108
 11302 0164 A8000000 		.4byte	.LFE108
 11303 0168 00000000 		.4byte	.LFB109
 11304 016c 0C000000 		.4byte	.LFE109
 11305 0170 00000000 		.4byte	.LFB110
 11306 0174 20000000 		.4byte	.LFE110
 11307 0178 00000000 		.4byte	.LFB111
 11308 017c 0C000000 		.4byte	.LFE111
 11309 0180 00000000 		.4byte	.LFB112
 11310 0184 94000000 		.4byte	.LFE112
 11311 0188 00000000 		.4byte	.LFB113
 11312 018c 60000000 		.4byte	.LFE113
 11313 0190 00000000 		.4byte	.LFB114
 11314 0194 0C000000 		.4byte	.LFE114
 11315 0198 00000000 		.4byte	.LFB115
 11316 019c 0C000000 		.4byte	.LFE115
 11317 01a0 00000000 		.4byte	.LFB116
 11318 01a4 0C000000 		.4byte	.LFE116
 11319 01a8 00000000 		.4byte	.LFB117
 11320 01ac 0C000000 		.4byte	.LFE117
 11321 01b0 00000000 		.4byte	.LFB118
 11322 01b4 0C000000 		.4byte	.LFE118
 11323 01b8 00000000 		.4byte	.LFB119
 11324 01bc 54010000 		.4byte	.LFE119
 11325 01c0 00000000 		.4byte	.LFB120
 11326 01c4 14000000 		.4byte	.LFE120
 11327 01c8 00000000 		.4byte	.LFB121
 11328 01cc 50010000 		.4byte	.LFE121
 11329 01d0 00000000 		.4byte	.LFB122
 11330 01d4 94010000 		.4byte	.LFE122
 11331 01d8 00000000 		.4byte	.LFB123
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 248


 11332 01dc 24000000 		.4byte	.LFE123
 11333 01e0 00000000 		.4byte	.LFB124
 11334 01e4 40000000 		.4byte	.LFE124
 11335 01e8 00000000 		.4byte	.LFB125
 11336 01ec 0E000000 		.4byte	.LFE125
 11337 01f0 00000000 		.4byte	.LFB126
 11338 01f4 12000000 		.4byte	.LFE126
 11339 01f8 00000000 		.4byte	.LFB127
 11340 01fc 84000000 		.4byte	.LFE127
 11341 0200 00000000 		.4byte	.LFB128
 11342 0204 30000000 		.4byte	.LFE128
 11343 0208 00000000 		.4byte	.LFB129
 11344 020c 0C000000 		.4byte	.LFE129
 11345 0210 00000000 		.4byte	0
 11346 0214 00000000 		.4byte	0
 11347              		.section	.debug_line,"",%progbits
 11348              	.Ldebug_line0:
 11349 0000 650B0000 		.section	.debug_str,"MS",%progbits,1
 11349      02008B01 
 11349      00000201 
 11349      FB0E0D00 
 11349      01010101 
 11350              	.LASF160:
 11351 0000 696E666F 		.ascii	"infoSend\000"
 11351      53656E64 
 11351      00
 11352              	.LASF48:
 11353 0009 4D454E55 		.ascii	"MENU_Y_N\000"
 11353      5F595F4E 
 11353      00
 11354              	.LASF174:
 11355 0012 73747269 		.ascii	"string_length\000"
 11355      6E675F6C 
 11355      656E6774 
 11355      6800
 11356              	.LASF24:
 11357 0020 73697A65 		.ascii	"sizetype\000"
 11357      74797065 
 11357      00
 11358              	.LASF66:
 11359 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 11359      494E4954 
 11359      5F4D454D 
 11359      00
 11360              	.LASF99:
 11361 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11361      545F4D4F 
 11361      44455F45 
 11361      4D475F46 
 11361      4346535F 
 11362              	.LASF46:
 11363 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 11363      5F494E50 
 11363      555400
 11364              	.LASF276:
 11365 0059 73746F70 		.ascii	"stop_master_device\000"
 11365      5F6D6173 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 249


 11365      7465725F 
 11365      64657669 
 11365      636500
 11366              	.LASF11:
 11367 006c 696E7433 		.ascii	"int32_t\000"
 11367      325F7400 
 11368              	.LASF281:
 11369 0074 675F7278 		.ascii	"g_rx\000"
 11369      00
 11370              	.LASF119:
 11371 0079 73745F64 		.ascii	"st_data\000"
 11371      61746100 
 11372              	.LASF221:
 11373 0081 77726974 		.ascii	"writeStatus\000"
 11373      65537461 
 11373      74757300 
 11374              	.LASF15:
 11375 008d 75696E74 		.ascii	"uint32\000"
 11375      333200
 11376              	.LASF250:
 11377 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 11377      7365745F 
 11377      62617564 
 11377      72617465 
 11377      00
 11378              	.LASF265:
 11379 00a5 6169725F 		.ascii	"air_chambers_control\000"
 11379      6368616D 
 11379      62657273 
 11379      5F636F6E 
 11379      74726F6C 
 11380              	.LASF200:
 11381 00ba 70726570 		.ascii	"prepare_generic_info\000"
 11381      6172655F 
 11381      67656E65 
 11381      7269635F 
 11381      696E666F 
 11382              	.LASF186:
 11383 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 11383      4D454E55 
 11383      7300
 11384              	.LASF124:
 11385 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 11385      6C696D5F 
 11385      696E6600 
 11386              	.LASF164:
 11387 00e5 54595045 		.ascii	"TYPE\000"
 11387      00
 11388              	.LASF147:
 11389 00ea 63686F69 		.ascii	"choice\000"
 11389      636500
 11390              	.LASF270:
 11391 00f1 70756D70 		.ascii	"pump_control\000"
 11391      5F636F6E 
 11391      74726F6C 
 11391      00
 11392              	.LASF33:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 250


 11393 00fe 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 11393      4F4D5F52 
 11393      45534554 
 11393      5F434F55 
 11393      4E5400
 11394              	.LASF98:
 11395 0111 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 11395      545F4D4F 
 11395      44455F45 
 11395      4D475F46 
 11395      43465300 
 11396              	.LASF255:
 11397 0125 636D645F 		.ascii	"cmd_get_imu_readings\000"
 11397      6765745F 
 11397      696D755F 
 11397      72656164 
 11397      696E6773 
 11398              	.LASF132:
 11399 013a 73745F4D 		.ascii	"st_MASTER_spec\000"
 11399      41535445 
 11399      525F7370 
 11399      656300
 11400              	.LASF152:
 11401 0149 50415241 		.ascii	"PARAM_STR\000"
 11401      4D5F5354 
 11401      5200
 11402              	.LASF97:
 11403 0153 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 11403      545F4D4F 
 11403      44455F45 
 11403      4D475F49 
 11403      4E544547 
 11404              	.LASF199:
 11405 016b 6D5F746D 		.ascii	"m_tmp\000"
 11405      7000
 11406              	.LASF184:
 11407 0171 50415241 		.ascii	"PARAM_IDX\000"
 11407      4D5F4944 
 11407      5800
 11408              	.LASF16:
 11409 017b 696E7438 		.ascii	"int8\000"
 11409      00
 11410              	.LASF167:
 11411 0180 6765745F 		.ascii	"get_param_list\000"
 11411      70617261 
 11411      6D5F6C69 
 11411      737400
 11412              	.LASF233:
 11413 018f 636D645F 		.ascii	"cmd_get_accelerations\000"
 11413      6765745F 
 11413      61636365 
 11413      6C657261 
 11413      74696F6E 
 11414              	.LASF254:
 11415 01a5 636D645F 		.ascii	"cmd_get_emg\000"
 11415      6765745F 
 11415      656D6700 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 251


 11416              	.LASF127:
 11417 01b1 73745F65 		.ascii	"st_emg\000"
 11417      6D6700
 11418              	.LASF39:
 11419 01b8 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 11419      4F4D5F4D 
 11419      4541535F 
 11419      4F46465F 
 11419      3200
 11420              	.LASF298:
 11421 01ca 50756D70 		.ascii	"Pump_refNew\000"
 11421      5F726566 
 11421      4E657700 
 11422              	.LASF309:
 11423 01d6 72657375 		.ascii	"result\000"
 11423      6C7400
 11424              	.LASF118:
 11425 01dd 72656164 		.ascii	"ready\000"
 11425      7900
 11426              	.LASF176:
 11427 01e3 6175785F 		.ascii	"aux_str1\000"
 11427      73747231 
 11427      00
 11428              	.LASF29:
 11429 01ec 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 11429      4F4D5F50 
 11429      4F535F4C 
 11429      494D00
 11430              	.LASF84:
 11431 01fb 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 11431      4745545F 
 11431      4A4F5953 
 11431      5449434B 
 11431      00
 11432              	.LASF96:
 11433 020c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 11433      545F4D4F 
 11433      44455F45 
 11433      4D475F50 
 11433      524F504F 
 11434              	.LASF244:
 11435 0228 745F7374 		.ascii	"t_start\000"
 11435      61727400 
 11436              	.LASF144:
 11437 0230 6D656E75 		.ascii	"menu\000"
 11437      00
 11438              	.LASF299:
 11439 0235 50574D5F 		.ascii	"PWM_IMU_1\000"
 11439      494D555F 
 11439      3100
 11440              	.LASF300:
 11441 023f 50574D5F 		.ascii	"PWM_IMU_2\000"
 11441      494D555F 
 11441      3200
 11442              	.LASF297:
 11443 0249 50756D70 		.ascii	"Pump_refOld\000"
 11443      5F726566 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 252


 11443      4F6C6400 
 11444              	.LASF4:
 11445 0255 6C6F6E67 		.ascii	"long int\000"
 11445      20696E74 
 11445      00
 11446              	.LASF37:
 11447 025e 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
 11447      4F4D5F43 
 11447      5552525F 
 11447      5049445F 
 11447      3200
 11448              	.LASF260:
 11449 0270 636D645F 		.ascii	"cmd_get_SD_file\000"
 11449      6765745F 
 11449      53445F66 
 11449      696C6500 
 11450              	.LASF228:
 11451 0280 7365745A 		.ascii	"setZeros\000"
 11451      65726F73 
 11451      00
 11452              	.LASF122:
 11453 0289 756E7573 		.ascii	"unused_bytes\000"
 11453      65645F62 
 11453      79746573 
 11453      00
 11454              	.LASF151:
 11455 0296 4E554D5F 		.ascii	"NUM_ITEMS\000"
 11455      4954454D 
 11455      5300
 11456              	.LASF185:
 11457 02a0 4D454D5F 		.ascii	"MEM_P\000"
 11457      5000
 11458              	.LASF258:
 11459 02a6 636D645F 		.ascii	"cmd_get_ADC_map\000"
 11459      6765745F 
 11459      4144435F 
 11459      6D617000 
 11460              	.LASF74:
 11461 02b6 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 11461      4745545F 
 11461      43555252 
 11461      454E5453 
 11461      00
 11462              	.LASF206:
 11463 02c7 70726570 		.ascii	"prepare_SD_EMG_history\000"
 11463      6172655F 
 11463      53445F45 
 11463      4D475F68 
 11463      6973746F 
 11464              	.LASF259:
 11465 02de 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 11465      6765745F 
 11465      4144435F 
 11465      72617700 
 11466              	.LASF289:
 11467 02ee 73645061 		.ascii	"sdParam\000"
 11467      72616D00 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 253


 11468              	.LASF36:
 11469 02f6 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 11469      4F4D5F50 
 11469      4F535F50 
 11469      49445F32 
 11469      00
 11470              	.LASF301:
 11471 0307 70726573 		.ascii	"pressure_value\000"
 11471      73757265 
 11471      5F76616C 
 11471      756500
 11472              	.LASF251:
 11473 0316 636D645F 		.ascii	"cmd_ping\000"
 11473      70696E67 
 11473      00
 11474              	.LASF27:
 11475 031f 43555354 		.ascii	"CUSTOM_INPUT\000"
 11475      4F4D5F49 
 11475      4E505554 
 11475      00
 11476              	.LASF189:
 11477 032c 7365745F 		.ascii	"set_custom_param\000"
 11477      63757374 
 11477      6F6D5F70 
 11477      6172616D 
 11477      00
 11478              	.LASF263:
 11479 033d 636D645F 		.ascii	"cmd_remove_SD_file\000"
 11479      72656D6F 
 11479      76655F53 
 11479      445F6669 
 11479      6C6500
 11480              	.LASF41:
 11481 0350 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 11481      4F4D5F44 
 11481      52495645 
 11481      525F3200 
 11482              	.LASF0:
 11483 0360 7369676E 		.ascii	"signed char\000"
 11483      65642063 
 11483      68617200 
 11484              	.LASF133:
 11485 036c 6D617374 		.ascii	"master_mode_active\000"
 11485      65725F6D 
 11485      6F64655F 
 11485      61637469 
 11485      766500
 11486              	.LASF219:
 11487 037f 6D656D53 		.ascii	"memStore\000"
 11487      746F7265 
 11487      00
 11488              	.LASF262:
 11489 0388 66696C65 		.ascii	"filename\000"
 11489      6E616D65 
 11489      00
 11490              	.LASF131:
 11491 0391 73776974 		.ascii	"switch_emg\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 254


 11491      63685F65 
 11491      6D6700
 11492              	.LASF246:
 11493 039c 72656164 		.ascii	"read_flag\000"
 11493      5F666C61 
 11493      6700
 11494              	.LASF243:
 11495 03a6 636F6D6D 		.ascii	"commReadWriteSH\000"
 11495      52656164 
 11495      57726974 
 11495      65534800 
 11496              	.LASF285:
 11497 03b6 696E7465 		.ascii	"interrupt_flag\000"
 11497      72727570 
 11497      745F666C 
 11497      616700
 11498              	.LASF47:
 11499 03c5 4D454E55 		.ascii	"MENU_CTRL\000"
 11499      5F435452 
 11499      4C00
 11500              	.LASF1:
 11501 03cf 756E7369 		.ascii	"unsigned char\000"
 11501      676E6564 
 11501      20636861 
 11501      7200
 11502              	.LASF81:
 11503 03dd 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 11503      5345545F 
 11503      56494252 
 11503      4F544143 
 11503      54494C45 
 11504              	.LASF82:
 11505 03f9 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 11505      4745545F 
 11505      56494252 
 11505      4F544143 
 11505      54494C45 
 11506              	.LASF69:
 11507 0415 434D445F 		.ascii	"CMD_ACTIVATE\000"
 11507      41435449 
 11507      56415445 
 11507      00
 11508              	.LASF62:
 11509 0422 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 11509      53544F52 
 11509      455F4445 
 11509      4641554C 
 11509      545F5041 
 11510              	.LASF32:
 11511 043b 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 11511      4F4D5F48 
 11511      414E445F 
 11511      53494445 
 11511      00
 11512              	.LASF218:
 11513 044c 76616C75 		.ascii	"value\000"
 11513      6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 255


 11514              	.LASF158:
 11515 0452 70726573 		.ascii	"pressure\000"
 11515      73757265 
 11515      00
 11516              	.LASF70:
 11517 045b 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 11517      4745545F 
 11517      41435449 
 11517      56415445 
 11517      00
 11518              	.LASF21:
 11519 046c 63686172 		.ascii	"char\000"
 11519      00
 11520              	.LASF268:
 11521 0471 76616C76 		.ascii	"valve_command\000"
 11521      655F636F 
 11521      6D6D616E 
 11521      6400
 11522              	.LASF266:
 11523 047f 70726573 		.ascii	"pressure_reference\000"
 11523      73757265 
 11523      5F726566 
 11523      6572656E 
 11523      636500
 11524              	.LASF223:
 11525 0492 7265745F 		.ascii	"ret_val\000"
 11525      76616C00 
 11526              	.LASF52:
 11527 049a 4D454E55 		.ascii	"MENU_SPI\000"
 11527      5F535049 
 11527      00
 11528              	.LASF148:
 11529 04a3 70617261 		.ascii	"parameter\000"
 11529      6D657465 
 11529      7200
 11530              	.LASF162:
 11531 04ad 7061636B 		.ascii	"packet_string\000"
 11531      65745F73 
 11531      7472696E 
 11531      6700
 11532              	.LASF34:
 11533 04bb 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 11533      4F4D5F4C 
 11533      4153545F 
 11533      43484543 
 11533      4B45445F 
 11534              	.LASF215:
 11535 04d1 64617461 		.ascii	"data_length\000"
 11535      5F6C656E 
 11535      67746800 
 11536              	.LASF125:
 11537 04dd 706F735F 		.ascii	"pos_lim_sup\000"
 11537      6C696D5F 
 11537      73757000 
 11538              	.LASF230:
 11539 04e9 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 11539      6E69745F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 256


 11539      4F74626B 
 11539      41637457 
 11539      72697374 
 11540              	.LASF130:
 11541 0500 656D675F 		.ascii	"emg_speed\000"
 11541      73706565 
 11541      6400
 11542              	.LASF181:
 11543 050a 7061636B 		.ascii	"packet_data\000"
 11543      65745F64 
 11543      61746100 
 11544              	.LASF120:
 11545 0516 73745F64 		.ascii	"st_device\000"
 11545      65766963 
 11545      6500
 11546              	.LASF210:
 11547 0520 636F6D6D 		.ascii	"commWrite\000"
 11547      57726974 
 11547      6500
 11548              	.LASF277:
 11549 052a 64656163 		.ascii	"deactivate_slaves\000"
 11549      74697661 
 11549      74655F73 
 11549      6C617665 
 11549      7300
 11550              	.LASF222:
 11551 053c 70616765 		.ascii	"pages\000"
 11551      7300
 11552              	.LASF310:
 11553 0542 6D656D49 		.ascii	"memInit\000"
 11553      6E697400 
 11554              	.LASF44:
 11555 054a 6D656E75 		.ascii	"menu_type\000"
 11555      5F747970 
 11555      6500
 11556              	.LASF55:
 11557 0554 4D454E55 		.ascii	"MENU_DEVICE\000"
 11557      5F444556 
 11557      49434500 
 11558              	.LASF71:
 11559 0560 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 11559      5345545F 
 11559      494E5055 
 11559      545300
 11560              	.LASF292:
 11561 056f 53485F72 		.ascii	"SH_ref\000"
 11561      656600
 11562              	.LASF116:
 11563 0576 62756666 		.ascii	"buffer\000"
 11563      657200
 11564              	.LASF249:
 11565 057d 63757272 		.ascii	"curr_diff\000"
 11565      5F646966 
 11565      6600
 11566              	.LASF231:
 11567 0587 636D645F 		.ascii	"cmd_get_measurements\000"
 11567      6765745F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 257


 11567      6D656173 
 11567      7572656D 
 11567      656E7473 
 11568              	.LASF161:
 11569 059c 72785F63 		.ascii	"rx_cmd\000"
 11569      6D6400
 11570              	.LASF114:
 11571 05a3 54595045 		.ascii	"TYPE_DOUBLE\000"
 11571      5F444F55 
 11571      424C4500 
 11572              	.LASF274:
 11573 05af 736C6176 		.ascii	"slave_motor_idx\000"
 11573      655F6D6F 
 11573      746F725F 
 11573      69647800 
 11574              	.LASF252:
 11575 05bf 636D645F 		.ascii	"cmd_get_inputs\000"
 11575      6765745F 
 11575      696E7075 
 11575      747300
 11576              	.LASF235:
 11577 05ce 6C617374 		.ascii	"last_aux_int16\000"
 11577      5F617578 
 11577      5F696E74 
 11577      313600
 11578              	.LASF103:
 11579 05dd 41434B5F 		.ascii	"ACK_ERROR\000"
 11579      4552524F 
 11579      5200
 11580              	.LASF94:
 11581 05e7 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 11581      545F4D4F 
 11581      44455F45 
 11581      58544552 
 11581      4E414C00 
 11582              	.LASF183:
 11583 05fb 696E6465 		.ascii	"index\000"
 11583      7800
 11584              	.LASF137:
 11585 0601 6D617869 		.ascii	"maximum_pressure_kPa\000"
 11585      6D756D5F 
 11585      70726573 
 11585      73757265 
 11585      5F6B5061 
 11586              	.LASF43:
 11587 0616 63757374 		.ascii	"custom_param\000"
 11587      6F6D5F70 
 11587      6172616D 
 11587      00
 11588              	.LASF261:
 11589 0623 66696C65 		.ascii	"filename_length\000"
 11589      6E616D65 
 11589      5F6C656E 
 11589      67746800 
 11590              	.LASF248:
 11591 0633 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 11591      52656164 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 258


 11591      52657343 
 11591      75727246 
 11591      726F6D53 
 11592              	.LASF57:
 11593 0649 4D454E55 		.ascii	"MENU_WRIST\000"
 11593      5F575249 
 11593      535400
 11594              	.LASF307:
 11595 0654 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 11595      73657273 
 11595      5C6D676E 
 11595      6F63636F 
 11595      5C446F63 
 11596 0681 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 11596      485F5649 
 11596      4245535C 
 11596      46575F57 
 11596      65617261 
 11597 06b2 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 11597      56494245 
 11597      535F536F 
 11597      636B6574 
 11597      2E637964 
 11598              	.LASF287:
 11599 06c9 72657365 		.ascii	"reset_PSoC_flag\000"
 11599      745F5053 
 11599      6F435F66 
 11599      6C616700 
 11600              	.LASF273:
 11601 06d9 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 11601      5F616374 
 11601      5F777269 
 11601      73745F63 
 11601      6F6E7472 
 11602              	.LASF115:
 11603 06f0 54595045 		.ascii	"TYPE_STRING\000"
 11603      5F535452 
 11603      494E4700 
 11604              	.LASF61:
 11605 06fc 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 11605      53544F52 
 11605      455F5041 
 11605      52414D53 
 11605      00
 11606              	.LASF7:
 11607 070d 6C6F6E67 		.ascii	"long unsigned int\000"
 11607      20756E73 
 11607      69676E65 
 11607      6420696E 
 11607      7400
 11608              	.LASF65:
 11609 071f 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 11609      424F4F54 
 11609      4C4F4144 
 11609      455200
 11610              	.LASF212:
 11611 072e 6E756D5F 		.ascii	"num_of_bytes\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 259


 11611      6F665F62 
 11611      79746573 
 11611      00
 11612              	.LASF100:
 11613 073b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 11613      545F4D4F 
 11613      44455F4A 
 11613      4F595354 
 11613      49434B00 
 11614              	.LASF220:
 11615 074f 64697370 		.ascii	"displacement\000"
 11615      6C616365 
 11615      6D656E74 
 11615      00
 11616              	.LASF242:
 11617 075c 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 11617      6765745F 
 11617      76696272 
 11617      6F746163 
 11617      74696C65 
 11618              	.LASF166:
 11619 0778 7374725F 		.ascii	"str_sd_data\000"
 11619      73645F64 
 11619      61746100 
 11620              	.LASF134:
 11621 0784 736C6176 		.ascii	"slave_ID\000"
 11621      655F4944 
 11621      00
 11622              	.LASF104:
 11623 078d 41434B5F 		.ascii	"ACK_OK\000"
 11623      4F4B00
 11624              	.LASF106:
 11625 0794 54595045 		.ascii	"TYPE_FLAG\000"
 11625      5F464C41 
 11625      4700
 11626              	.LASF180:
 11627 079e 7061636B 		.ascii	"packet_length\000"
 11627      65745F6C 
 11627      656E6774 
 11627      6800
 11628              	.LASF30:
 11629 07ac 43555354 		.ascii	"CUSTOM_REST_POS\000"
 11629      4F4D5F52 
 11629      4553545F 
 11629      504F5300 
 11630              	.LASF126:
 11631 07bc 696E7075 		.ascii	"input_mode\000"
 11631      745F6D6F 
 11631      646500
 11632              	.LASF76:
 11633 07c7 434D445F 		.ascii	"CMD_GET_EMG\000"
 11633      4745545F 
 11633      454D4700 
 11634              	.LASF226:
 11635 07d3 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 11635      6E69745F 
 11635      536F6674 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 260


 11635      48616E64 
 11635      50726F00 
 11636              	.LASF156:
 11637 07e7 70696E67 		.ascii	"ping\000"
 11637      00
 11638              	.LASF64:
 11639 07ec 434D445F 		.ascii	"CMD_GET_INFO\000"
 11639      4745545F 
 11639      494E464F 
 11639      00
 11640              	.LASF190:
 11641 07f9 6765745F 		.ascii	"get_IMU_param_list\000"
 11641      494D555F 
 11641      70617261 
 11641      6D5F6C69 
 11641      737400
 11642              	.LASF153:
 11643 080c 4D454E55 		.ascii	"MENU\000"
 11643      00
 11644              	.LASF54:
 11645 0811 4D454E55 		.ascii	"MENU_DRIVER\000"
 11645      5F445249 
 11645      56455200 
 11646              	.LASF139:
 11647 081d 76696272 		.ascii	"vibrotactile_feedback_active\000"
 11647      6F746163 
 11647      74696C65 
 11647      5F666565 
 11647      64626163 
 11648              	.LASF75:
 11649 083a 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 11649      4745545F 
 11649      43555252 
 11649      5F414E44 
 11649      5F4D4541 
 11650              	.LASF305:
 11651 0850 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11651      43313120 
 11651      352E342E 
 11651      31203230 
 11651      31363036 
 11652 0883 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11652      20726576 
 11652      6973696F 
 11652      6E203233 
 11652      37373135 
 11653 08b6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11653      66756E63 
 11653      74696F6E 
 11653      2D736563 
 11653      74696F6E 
 11654              	.LASF234:
 11655 08de 636D645F 		.ascii	"cmd_get_joystick\000"
 11655      6765745F 
 11655      6A6F7973 
 11655      7469636B 
 11655      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 261


 11656              	.LASF80:
 11657 08ef 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 11657      5345545F 
 11657      43554646 
 11657      5F494E50 
 11657      55545300 
 11658              	.LASF6:
 11659 0903 5F5F7569 		.ascii	"__uint32_t\000"
 11659      6E743332 
 11659      5F7400
 11660              	.LASF8:
 11661 090e 6C6F6E67 		.ascii	"long long int\000"
 11661      206C6F6E 
 11661      6720696E 
 11661      7400
 11662              	.LASF123:
 11663 091c 73745F73 		.ascii	"st_slave\000"
 11663      6C617665 
 11663      00
 11664              	.LASF264:
 11665 0925 76696272 		.ascii	"vibrotactile_control\000"
 11665      6F746163 
 11665      74696C65 
 11665      5F636F6E 
 11665      74726F6C 
 11666              	.LASF108:
 11667 093a 54595045 		.ascii	"TYPE_UINT8\000"
 11667      5F55494E 
 11667      543800
 11668              	.LASF143:
 11669 0945 53485F63 		.ascii	"SH_config\000"
 11669      6F6E6669 
 11669      6700
 11670              	.LASF240:
 11671 094f 636D645F 		.ascii	"cmd_get_currents\000"
 11671      6765745F 
 11671      63757272 
 11671      656E7473 
 11671      00
 11672              	.LASF286:
 11673 0960 6368616E 		.ascii	"change_ext_ref_flag\000"
 11673      67655F65 
 11673      78745F72 
 11673      65665F66 
 11673      6C616700 
 11674              	.LASF20:
 11675 0974 646F7562 		.ascii	"double\000"
 11675      6C6500
 11676              	.LASF91:
 11677 097b 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 11677      4745545F 
 11677      53445F53 
 11677      494E474C 
 11677      455F4649 
 11678              	.LASF295:
 11679 0992 56545F72 		.ascii	"VT_refNew\000"
 11679      65664E65 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 262


 11679      7700
 11680              	.LASF278:
 11681 099c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11681      52784275 
 11681      66666572 
 11681      00
 11682              	.LASF271:
 11683 09a9 56545F63 		.ascii	"VT_control\000"
 11683      6F6E7472 
 11683      6F6C00
 11684              	.LASF19:
 11685 09b4 666C6F61 		.ascii	"float\000"
 11685      7400
 11686              	.LASF196:
 11687 09ba 6175785F 		.ascii	"aux_int8\000"
 11687      696E7438 
 11687      00
 11688              	.LASF92:
 11689 09c3 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 11689      52454D4F 
 11689      56455F53 
 11689      445F5349 
 11689      4E474C45 
 11690              	.LASF267:
 11691 09dd 6572725F 		.ascii	"err_pressure\000"
 11691      70726573 
 11691      73757265 
 11691      00
 11692              	.LASF178:
 11693 09ea 636F756E 		.ascii	"count\000"
 11693      7400
 11694              	.LASF157:
 11695 09f0 73745F61 		.ascii	"st_adc_meas\000"
 11695      64635F6D 
 11695      65617300 
 11696              	.LASF173:
 11697 09fc 6D5F6164 		.ascii	"m_addr\000"
 11697      647200
 11698              	.LASF283:
 11699 0a03 635F6D65 		.ascii	"c_mem\000"
 11699      6D00
 11700              	.LASF214:
 11701 0a09 64617461 		.ascii	"data_array\000"
 11701      5F617272 
 11701      617900
 11702              	.LASF10:
 11703 0a14 756E7369 		.ascii	"unsigned int\000"
 11703      676E6564 
 11703      20696E74 
 11703      00
 11704              	.LASF227:
 11705 0a21 6D656D49 		.ascii	"memInit_Master\000"
 11705      6E69745F 
 11705      4D617374 
 11705      657200
 11706              	.LASF204:
 11707 0a30 70726570 		.ascii	"prepare_SD_legend\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 263


 11707      6172655F 
 11707      53445F6C 
 11707      6567656E 
 11707      6400
 11708              	.LASF58:
 11709 0a42 53485F63 		.ascii	"SH_command\000"
 11709      6F6D6D61 
 11709      6E6400
 11710              	.LASF110:
 11711 0a4d 54595045 		.ascii	"TYPE_UINT16\000"
 11711      5F55494E 
 11711      54313600 
 11712              	.LASF142:
 11713 0a59 666C6167 		.ascii	"flag\000"
 11713      00
 11714              	.LASF38:
 11715 0a5e 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 11715      4F4D5F49 
 11715      4E505554 
 11715      5F3200
 11716              	.LASF269:
 11717 0a6d 785F7661 		.ascii	"x_value\000"
 11717      6C756500 
 11718              	.LASF236:
 11719 0a75 636D645F 		.ascii	"cmd_set_inputs\000"
 11719      7365745F 
 11719      696E7075 
 11719      747300
 11720              	.LASF49:
 11721 0a84 4D454E55 		.ascii	"MENU_R_L\000"
 11721      5F525F4C 
 11721      00
 11722              	.LASF171:
 11723 0a8d 4D454E55 		.ascii	"MENU_LIST\000"
 11723      5F4C4953 
 11723      5400
 11724              	.LASF95:
 11725 0a97 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 11725      545F4D4F 
 11725      44455F45 
 11725      4E434F44 
 11725      45523300 
 11726              	.LASF211:
 11727 0aab 636F6D6D 		.ascii	"commWriteID\000"
 11727      57726974 
 11727      65494400 
 11728              	.LASF87:
 11729 0ab7 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 11729      4745545F 
 11729      454E434F 
 11729      4445525F 
 11729      434F4E46 
 11730              	.LASF154:
 11731 0acc 4E554D5F 		.ascii	"NUM_STR\000"
 11731      53545200 
 11732              	.LASF238:
 11733 0ad4 636D645F 		.ascii	"cmd_get_activate\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 264


 11733      6765745F 
 11733      61637469 
 11733      76617465 
 11733      00
 11734              	.LASF272:
 11735 0ae5 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 11735      61637469 
 11735      76617469 
 11735      6F6E5F76 
 11735      656C6F63 
 11736              	.LASF113:
 11737 0b01 54595045 		.ascii	"TYPE_FLOAT\000"
 11737      5F464C4F 
 11737      415400
 11738              	.LASF40:
 11739 0b0c 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 11739      4F4D5F50 
 11739      4F535F4C 
 11739      494D5F32 
 11739      00
 11740              	.LASF202:
 11741 0b1d 70726570 		.ascii	"prepare_R01_info\000"
 11741      6172655F 
 11741      5230315F 
 11741      696E666F 
 11741      00
 11742              	.LASF109:
 11743 0b2e 54595045 		.ascii	"TYPE_INT16\000"
 11743      5F494E54 
 11743      313600
 11744              	.LASF198:
 11745 0b39 6175785F 		.ascii	"aux_uint16\000"
 11745      75696E74 
 11745      313600
 11746              	.LASF128:
 11747 0b44 656D675F 		.ascii	"emg_threshold\000"
 11747      74687265 
 11747      73686F6C 
 11747      6400
 11748              	.LASF79:
 11749 0b52 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 11749      4745545F 
 11749      43555252 
 11749      5F444946 
 11749      4600
 11750              	.LASF42:
 11751 0b64 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 11751      4F4D5F44 
 11751      45565F54 
 11751      59504500 
 11752              	.LASF229:
 11753 0b74 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 11753      6E69745F 
 11753      41697243 
 11753      68616D62 
 11753      6572735F 
 11754              	.LASF23:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 265


 11755 0b98 6C6F6E67 		.ascii	"long double\000"
 11755      20646F75 
 11755      626C6500 
 11756              	.LASF112:
 11757 0ba4 54595045 		.ascii	"TYPE_UINT32\000"
 11757      5F55494E 
 11757      54333200 
 11758              	.LASF135:
 11759 0bb0 73745F46 		.ascii	"st_FB_spec\000"
 11759      425F7370 
 11759      656300
 11760              	.LASF216:
 11761 0bbb 63686563 		.ascii	"checksum\000"
 11761      6B73756D 
 11761      00
 11762              	.LASF303:
 11763 0bc4 73757065 		.ascii	"superstring\000"
 11763      72737472 
 11763      696E6700 
 11764              	.LASF68:
 11765 0bd0 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 11765      48414E44 
 11765      5F43414C 
 11765      49425241 
 11765      544500
 11766              	.LASF293:
 11767 0be3 56545F72 		.ascii	"VT_ref\000"
 11767      656600
 11768              	.LASF275:
 11769 0bea 64726976 		.ascii	"drive_slave\000"
 11769      655F736C 
 11769      61766500 
 11770              	.LASF102:
 11771 0bf6 61636B6E 		.ascii	"acknowledgment_values\000"
 11771      6F776C65 
 11771      64676D65 
 11771      6E745F76 
 11771      616C7565 
 11772              	.LASF225:
 11773 0c0c 6D656D52 		.ascii	"memRestore\000"
 11773      6573746F 
 11773      726500
 11774              	.LASF192:
 11775 0c17 696E666F 		.ascii	"info_string\000"
 11775      5F737472 
 11775      696E6700 
 11776              	.LASF168:
 11777 0c23 6E756D5F 		.ascii	"num_params\000"
 11777      70617261 
 11777      6D7300
 11778              	.LASF9:
 11779 0c2e 6C6F6E67 		.ascii	"long long unsigned int\000"
 11779      206C6F6E 
 11779      6720756E 
 11779      7369676E 
 11779      65642069 
 11780              	.LASF155:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 266


 11781 0c45 63757374 		.ascii	"custom\000"
 11781      6F6D00
 11782              	.LASF53:
 11783 0c4c 4D454E55 		.ascii	"MENU_USER\000"
 11783      5F555345 
 11783      5200
 11784              	.LASF111:
 11785 0c56 54595045 		.ascii	"TYPE_INT32\000"
 11785      5F494E54 
 11785      333200
 11786              	.LASF193:
 11787 0c61 6175785F 		.ascii	"aux_uint32\000"
 11787      75696E74 
 11787      333200
 11788              	.LASF117:
 11789 0c6c 6C656E67 		.ascii	"length\000"
 11789      746800
 11790              	.LASF172:
 11791 0c73 73656E64 		.ascii	"sendToDevice\000"
 11791      546F4465 
 11791      76696365 
 11791      00
 11792              	.LASF78:
 11793 0c80 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 11793      4745545F 
 11793      41434345 
 11793      4C00
 11794              	.LASF232:
 11795 0c8e 636D645F 		.ascii	"cmd_get_velocities\000"
 11795      6765745F 
 11795      76656C6F 
 11795      63697469 
 11795      657300
 11796              	.LASF224:
 11797 0ca1 6D656D52 		.ascii	"memRecall\000"
 11797      6563616C 
 11797      6C00
 11798              	.LASF253:
 11799 0cab 636D645F 		.ascii	"cmd_store_params\000"
 11799      73746F72 
 11799      655F7061 
 11799      72616D73 
 11799      00
 11800              	.LASF179:
 11801 0cbc 6175785F 		.ascii	"aux_char\000"
 11801      63686172 
 11801      00
 11802              	.LASF83:
 11803 0cc5 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 11803      5345545F 
 11803      42415544 
 11803      52415445 
 11803      00
 11804              	.LASF191:
 11805 0cd6 71626164 		.ascii	"qbadminp_string\000"
 11805      6D696E70 
 11805      5F737472 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 267


 11805      696E6700 
 11806              	.LASF22:
 11807 0ce6 72656738 		.ascii	"reg8\000"
 11807      00
 11808              	.LASF138:
 11809 0ceb 70726F70 		.ascii	"prop_err_fb_gain\000"
 11809      5F657272 
 11809      5F66625F 
 11809      6761696E 
 11809      00
 11810              	.LASF208:
 11811 0cfc 636F6D6D 		.ascii	"commWrite_old_id\000"
 11811      57726974 
 11811      655F6F6C 
 11811      645F6964 
 11811      00
 11812              	.LASF182:
 11813 0d0d 6D616E61 		.ascii	"manage_param_list\000"
 11813      67655F70 
 11813      6172616D 
 11813      5F6C6973 
 11813      7400
 11814              	.LASF195:
 11815 0d1f 6175785F 		.ascii	"aux_uint8\000"
 11815      75696E74 
 11815      3800
 11816              	.LASF63:
 11817 0d29 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 11817      52455354 
 11817      4F52455F 
 11817      50415241 
 11817      4D5300
 11818              	.LASF51:
 11819 0d3c 4D454E55 		.ascii	"MENU_EXP\000"
 11819      5F455850 
 11819      00
 11820              	.LASF288:
 11821 0d45 73644669 		.ascii	"sdFile\000"
 11821      6C6500
 11822              	.LASF169:
 11823 0d4c 6E756D5F 		.ascii	"num_menus\000"
 11823      6D656E75 
 11823      7300
 11824              	.LASF45:
 11825 0d56 4D454E55 		.ascii	"MENU_NO_MENU\000"
 11825      5F4E4F5F 
 11825      4D454E55 
 11825      00
 11826              	.LASF203:
 11827 0d63 70726570 		.ascii	"prepare_SD_param_info\000"
 11827      6172655F 
 11827      53445F70 
 11827      6172616D 
 11827      5F696E66 
 11828              	.LASF201:
 11829 0d79 70726570 		.ascii	"prepare_counter_info\000"
 11829      6172655F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 268


 11829      636F756E 
 11829      7465725F 
 11829      696E666F 
 11830              	.LASF205:
 11831 0d8e 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 11831      6172655F 
 11831      53445F45 
 11831      4D475F48 
 11831      6973746F 
 11832              	.LASF209:
 11833 0dac 6F6C645F 		.ascii	"old_id\000"
 11833      696400
 11834              	.LASF308:
 11835 0db3 5F5F5245 		.ascii	"__REV16\000"
 11835      56313600 
 11836              	.LASF149:
 11837 0dbb 5641525F 		.ascii	"VAR_P\000"
 11837      5000
 11838              	.LASF302:
 11839 0dc1 42617474 		.ascii	"Battery_level_out\000"
 11839      6572795F 
 11839      6C657665 
 11839      6C5F6F75 
 11839      7400
 11840              	.LASF239:
 11841 0dd3 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 11841      6765745F 
 11841      63757272 
 11841      5F616E64 
 11841      5F6D6561 
 11842              	.LASF165:
 11843 0de9 696E666F 		.ascii	"info_type\000"
 11843      5F747970 
 11843      6500
 11844              	.LASF56:
 11845 0df3 4D454E55 		.ascii	"MENU_FSM\000"
 11845      5F46534D 
 11845      00
 11846              	.LASF90:
 11847 0dfc 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 11847      4745545F 
 11847      4144435F 
 11847      52415700 
 11848              	.LASF101:
 11849 0e0c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 11849      545F4D4F 
 11849      44455F45 
 11849      4D475F50 
 11849      524F504F 
 11850              	.LASF86:
 11851 0e2b 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 11851      4745545F 
 11851      494D555F 
 11851      50415241 
 11851      4D00
 11852              	.LASF88:
 11853 0e3d 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 269


 11853      4745545F 
 11853      454E434F 
 11853      4445525F 
 11853      52415700 
 11854              	.LASF146:
 11855 0e51 72657365 		.ascii	"reset\000"
 11855      7400
 11856              	.LASF145:
 11857 0e57 6E616D65 		.ascii	"name\000"
 11857      00
 11858              	.LASF73:
 11859 0e5c 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 11859      4745545F 
 11859      4D454153 
 11859      5552454D 
 11859      454E5453 
 11860              	.LASF140:
 11861 0e71 61697263 		.ascii	"airchamber_feedback_active\000"
 11861      68616D62 
 11861      65725F66 
 11861      65656462 
 11861      61636B5F 
 11862              	.LASF280:
 11863 0e8c 675F6164 		.ascii	"g_adc_measOld\000"
 11863      635F6D65 
 11863      61734F6C 
 11863      6400
 11864              	.LASF257:
 11865 0e9a 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 11865      6765745F 
 11865      656E636F 
 11865      6465725F 
 11865      72617700 
 11866              	.LASF13:
 11867 0eae 75696E74 		.ascii	"uint8\000"
 11867      3800
 11868              	.LASF159:
 11869 0eb4 636F6D6D 		.ascii	"commProcess\000"
 11869      50726F63 
 11869      65737300 
 11870              	.LASF2:
 11871 0ec0 73686F72 		.ascii	"short int\000"
 11871      7420696E 
 11871      7400
 11872              	.LASF31:
 11873 0eca 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 11873      4F4D5F52 
 11873      4553545F 
 11873      504F535F 
 11873      44454C41 
 11874              	.LASF72:
 11875 0ee0 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 11875      4745545F 
 11875      494E5055 
 11875      545300
 11876              	.LASF89:
 11877 0eef 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 270


 11877      4745545F 
 11877      4144435F 
 11877      434F4E46 
 11877      00
 11878              	.LASF60:
 11879 0f00 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 11879      5345545F 
 11879      5A45524F 
 11879      5300
 11880              	.LASF197:
 11881 0f0e 6175785F 		.ascii	"aux_int16\000"
 11881      696E7431 
 11881      3600
 11882              	.LASF304:
 11883 0f18 45455052 		.ascii	"EEPROM_ADDR\000"
 11883      4F4D5F41 
 11883      44445200 
 11884              	.LASF284:
 11885 0f24 6379636C 		.ascii	"cycle_time\000"
 11885      655F7469 
 11885      6D6500
 11886              	.LASF26:
 11887 0f2f 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 11887      4F4D5F43 
 11887      5552525F 
 11887      50494400 
 11888              	.LASF188:
 11889 0f3f 4E554D5F 		.ascii	"NUM_PARAMs\000"
 11889      50415241 
 11889      4D7300
 11890              	.LASF77:
 11891 0f4a 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 11891      4745545F 
 11891      56454C4F 
 11891      43495449 
 11891      455300
 11892              	.LASF67:
 11893 0f5d 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 11893      4745545F 
 11893      50415241 
 11893      4D5F4C49 
 11893      535400
 11894              	.LASF105:
 11895 0f70 64617461 		.ascii	"data_types\000"
 11895      5F747970 
 11895      657300
 11896              	.LASF17:
 11897 0f7b 696E7431 		.ascii	"int16\000"
 11897      3600
 11898              	.LASF50:
 11899 0f81 4D454E55 		.ascii	"MENU_ON_OFF\000"
 11899      5F4F4E5F 
 11899      4F464600 
 11900              	.LASF35:
 11901 0f8d 43555354 		.ascii	"CUSTOM_DRIVER\000"
 11901      4F4D5F44 
 11901      52495645 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 271


 11901      5200
 11902              	.LASF28:
 11903 0f9b 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 11903      4F4D5F4D 
 11903      4541535F 
 11903      4F464600 
 11904              	.LASF256:
 11905 0fab 636D645F 		.ascii	"cmd_get_encoder_map\000"
 11905      6765745F 
 11905      656E636F 
 11905      6465725F 
 11905      6D617000 
 11906              	.LASF12:
 11907 0fbf 75696E74 		.ascii	"uint32_t\000"
 11907      33325F74 
 11907      00
 11908              	.LASF194:
 11909 0fc8 6175785F 		.ascii	"aux_float\000"
 11909      666C6F61 
 11909      7400
 11910              	.LASF170:
 11911 0fd2 50415241 		.ascii	"PARAM_LIST\000"
 11911      4D5F4C49 
 11911      535400
 11912              	.LASF217:
 11913 0fdd 73656E64 		.ascii	"sendAcknowledgment\000"
 11913      41636B6E 
 11913      6F776C65 
 11913      64676D65 
 11913      6E7400
 11914              	.LASF177:
 11915 0ff0 6175785F 		.ascii	"aux_int32\000"
 11915      696E7433 
 11915      3200
 11916              	.LASF121:
 11917 0ffa 62617564 		.ascii	"baud_rate\000"
 11917      5F726174 
 11917      6500
 11918              	.LASF245:
 11919 1004 745F656E 		.ascii	"t_end\000"
 11919      6400
 11920              	.LASF241:
 11921 100a 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 11921      6765745F 
 11921      63757272 
 11921      656E7473 
 11921      5F666F72 
 11922              	.LASF85:
 11923 1024 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 11923      4745545F 
 11923      494D555F 
 11923      52454144 
 11923      494E4753 
 11924              	.LASF187:
 11925 1039 70617261 		.ascii	"param_type\000"
 11925      6D5F7479 
 11925      706500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 272


 11926              	.LASF290:
 11927 1044 73645230 		.ascii	"sdR01File\000"
 11927      3146696C 
 11927      6500
 11928              	.LASF213:
 11929 104e 4C435243 		.ascii	"LCRChecksum\000"
 11929      6865636B 
 11929      73756D00 
 11930              	.LASF3:
 11931 105a 73686F72 		.ascii	"short unsigned int\000"
 11931      7420756E 
 11931      7369676E 
 11931      65642069 
 11931      6E7400
 11932              	.LASF282:
 11933 106d 675F6D65 		.ascii	"g_mem\000"
 11933      6D00
 11934              	.LASF279:
 11935 1073 675F6164 		.ascii	"g_adc_meas\000"
 11935      635F6D65 
 11935      617300
 11936              	.LASF136:
 11937 107e 6D61785F 		.ascii	"max_residual_current\000"
 11937      72657369 
 11937      6475616C 
 11937      5F637572 
 11937      72656E74 
 11938              	.LASF141:
 11939 1093 73745F65 		.ascii	"st_eeprom\000"
 11939      6570726F 
 11939      6D00
 11940              	.LASF150:
 11941 109d 54595045 		.ascii	"TYPES\000"
 11941      5300
 11942              	.LASF18:
 11943 10a3 696E7433 		.ascii	"int32\000"
 11943      3200
 11944              	.LASF163:
 11945 10a9 696E666F 		.ascii	"infoGet\000"
 11945      47657400 
 11946              	.LASF291:
 11947 10b1 6D617374 		.ascii	"master_mode\000"
 11947      65725F6D 
 11947      6F646500 
 11948              	.LASF5:
 11949 10bd 5F5F696E 		.ascii	"__int32_t\000"
 11949      7433325F 
 11949      7400
 11950              	.LASF294:
 11951 10c7 56545F72 		.ascii	"VT_refOld\000"
 11951      65664F6C 
 11951      6400
 11952              	.LASF129:
 11953 10d1 656D675F 		.ascii	"emg_max_value\000"
 11953      6D61785F 
 11953      76616C75 
 11953      6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc7niWda.s 			page 273


 11954              	.LASF247:
 11955 10df 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 11955      52656164 
 11955      494D5546 
 11955      726F6D53 
 11955      4800
 11956              	.LASF306:
 11957 10f1 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 11957      72635C63 
 11957      6F6D6D61 
 11957      6E645F70 
 11957      726F6365 
 11958              	.LASF93:
 11959 110d 53485F69 		.ascii	"SH_input_mode\000"
 11959      6E707574 
 11959      5F6D6F64 
 11959      6500
 11960              	.LASF25:
 11961 111b 43555354 		.ascii	"CUSTOM_POS_PID\000"
 11961      4F4D5F50 
 11961      4F535F50 
 11961      494400
 11962              	.LASF107:
 11963 112a 54595045 		.ascii	"TYPE_INT8\000"
 11963      5F494E54 
 11963      3800
 11964              	.LASF207:
 11965 1134 494D555F 		.ascii	"IMU_reading_info\000"
 11965      72656164 
 11965      696E675F 
 11965      696E666F 
 11965      00
 11966              	.LASF14:
 11967 1145 75696E74 		.ascii	"uint16\000"
 11967      313600
 11968              	.LASF296:
 11969 114c 50756D70 		.ascii	"Pump_ref\000"
 11969      5F726566 
 11969      00
 11970              	.LASF175:
 11971 1155 6175785F 		.ascii	"aux_str\000"
 11971      73747200 
 11972              	.LASF59:
 11973 115d 434D445F 		.ascii	"CMD_PING\000"
 11973      50494E47 
 11973      00
 11974              	.LASF237:
 11975 1166 636D645F 		.ascii	"cmd_activate\000"
 11975      61637469 
 11975      76617465 
 11975      00
 11976              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
