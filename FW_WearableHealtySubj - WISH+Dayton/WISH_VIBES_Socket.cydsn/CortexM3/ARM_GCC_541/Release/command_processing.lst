ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L50
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L50
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L50
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L50
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L50
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L50
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e B8E2     		b	.L1
  75              	.L51:
  76              		.align	2
  77              	.L50:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F2B182 		bhi	.L49
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c B1050000 		.word	.L49+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 B1050000 		.word	.L49+1
  96 0074 B1050000 		.word	.L49+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 B1050000 		.word	.L49+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 B1050000 		.word	.L49+1
 102 008c B1050000 		.word	.L49+1
 103 0090 B1050000 		.word	.L49+1
 104 0094 B1050000 		.word	.L49+1
 105 0098 B1050000 		.word	.L49+1
 106 009c B1050000 		.word	.L49+1
 107 00a0 B1050000 		.word	.L49+1
 108 00a4 B1050000 		.word	.L49+1
 109 00a8 B1050000 		.word	.L49+1
 110 00ac B1050000 		.word	.L49+1
 111 00b0 B1050000 		.word	.L49+1
 112 00b4 B1050000 		.word	.L49+1
 113 00b8 B1050000 		.word	.L49+1
 114 00bc B1050000 		.word	.L49+1
 115 00c0 B1050000 		.word	.L49+1
 116 00c4 B1050000 		.word	.L49+1
 117 00c8 B1050000 		.word	.L49+1
 118 00cc B1050000 		.word	.L49+1
 119 00d0 B1050000 		.word	.L49+1
 120 00d4 B1050000 		.word	.L49+1
 121 00d8 B1050000 		.word	.L49+1
 122 00dc B1050000 		.word	.L49+1
 123 00e0 B1050000 		.word	.L49+1
 124 00e4 B1050000 		.word	.L49+1
 125 00e8 B1050000 		.word	.L49+1
 126 00ec B1050000 		.word	.L49+1
 127 00f0 B1050000 		.word	.L49+1
 128 00f4 B1050000 		.word	.L49+1
 129 00f8 B1050000 		.word	.L49+1
 130 00fc B1050000 		.word	.L49+1
 131 0100 B1050000 		.word	.L49+1
 132 0104 B1050000 		.word	.L49+1
 133 0108 B1050000 		.word	.L49+1
 134 010c B1050000 		.word	.L49+1
 135 0110 B1050000 		.word	.L49+1
 136 0114 B1050000 		.word	.L49+1
 137 0118 B1050000 		.word	.L49+1
 138 011c B1050000 		.word	.L49+1
 139 0120 B1050000 		.word	.L49+1
 140 0124 B1050000 		.word	.L49+1
 141 0128 B1050000 		.word	.L49+1
 142 012c B1050000 		.word	.L49+1
 143 0130 B1050000 		.word	.L49+1
 144 0134 B1050000 		.word	.L49+1
 145 0138 B1050000 		.word	.L49+1
 146 013c B1050000 		.word	.L49+1
 147 0140 B1050000 		.word	.L49+1
 148 0144 B1050000 		.word	.L49+1
 149 0148 B1050000 		.word	.L49+1
 150 014c B1050000 		.word	.L49+1
 151 0150 B1050000 		.word	.L49+1
 152 0154 B1050000 		.word	.L49+1
 153 0158 B1050000 		.word	.L49+1
 154 015c B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 5


 155 0160 B1050000 		.word	.L49+1
 156 0164 B1050000 		.word	.L49+1
 157 0168 B1050000 		.word	.L49+1
 158 016c B1050000 		.word	.L49+1
 159 0170 B1050000 		.word	.L49+1
 160 0174 B1050000 		.word	.L49+1
 161 0178 B1050000 		.word	.L49+1
 162 017c B1050000 		.word	.L49+1
 163 0180 B1050000 		.word	.L49+1
 164 0184 B1050000 		.word	.L49+1
 165 0188 B1050000 		.word	.L49+1
 166 018c B1050000 		.word	.L49+1
 167 0190 B1050000 		.word	.L49+1
 168 0194 B1050000 		.word	.L49+1
 169 0198 B1050000 		.word	.L49+1
 170 019c B1050000 		.word	.L49+1
 171 01a0 B1050000 		.word	.L49+1
 172 01a4 B1050000 		.word	.L49+1
 173 01a8 B1050000 		.word	.L49+1
 174 01ac B1050000 		.word	.L49+1
 175 01b0 B1050000 		.word	.L49+1
 176 01b4 B1050000 		.word	.L49+1
 177 01b8 B1050000 		.word	.L49+1
 178 01bc B1050000 		.word	.L49+1
 179 01c0 B1050000 		.word	.L49+1
 180 01c4 B1050000 		.word	.L49+1
 181 01c8 B1050000 		.word	.L49+1
 182 01cc B1050000 		.word	.L49+1
 183 01d0 B1050000 		.word	.L49+1
 184 01d4 B1050000 		.word	.L49+1
 185 01d8 B1050000 		.word	.L49+1
 186 01dc B1050000 		.word	.L49+1
 187 01e0 B1050000 		.word	.L49+1
 188 01e4 B1050000 		.word	.L49+1
 189 01e8 B1050000 		.word	.L49+1
 190 01ec B1050000 		.word	.L49+1
 191 01f0 B1050000 		.word	.L49+1
 192 01f4 B1050000 		.word	.L49+1
 193 01f8 B1050000 		.word	.L49+1
 194 01fc B1050000 		.word	.L49+1
 195 0200 B1050000 		.word	.L49+1
 196 0204 B1050000 		.word	.L49+1
 197 0208 B1050000 		.word	.L49+1
 198 020c B1050000 		.word	.L49+1
 199 0210 B1050000 		.word	.L49+1
 200 0214 B1050000 		.word	.L49+1
 201 0218 B1050000 		.word	.L49+1
 202 021c B1050000 		.word	.L49+1
 203 0220 B1050000 		.word	.L49+1
 204 0224 B1050000 		.word	.L49+1
 205 0228 B1050000 		.word	.L49+1
 206 022c B1050000 		.word	.L49+1
 207 0230 B1050000 		.word	.L49+1
 208 0234 B1050000 		.word	.L49+1
 209 0238 B1050000 		.word	.L49+1
 210 023c B1050000 		.word	.L49+1
 211 0240 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 6


 212 0244 B1050000 		.word	.L49+1
 213 0248 B1050000 		.word	.L49+1
 214 024c B1050000 		.word	.L49+1
 215 0250 B1050000 		.word	.L49+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 B1050000 		.word	.L49+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c B1050000 		.word	.L49+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 B1050000 		.word	.L49+1
 230 028c B1050000 		.word	.L49+1
 231 0290 B1050000 		.word	.L49+1
 232 0294 89040000 		.word	.L27+1
 233 0298 B1050000 		.word	.L49+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 B1050000 		.word	.L49+1
 236 02a4 B1050000 		.word	.L49+1
 237 02a8 B1050000 		.word	.L49+1
 238 02ac B1050000 		.word	.L49+1
 239 02b0 B1050000 		.word	.L49+1
 240 02b4 B1050000 		.word	.L49+1
 241 02b8 B1050000 		.word	.L49+1
 242 02bc B1050000 		.word	.L49+1
 243 02c0 B1050000 		.word	.L49+1
 244 02c4 B1050000 		.word	.L49+1
 245 02c8 B1050000 		.word	.L49+1
 246 02cc B1050000 		.word	.L49+1
 247 02d0 B1050000 		.word	.L49+1
 248 02d4 B1050000 		.word	.L49+1
 249 02d8 4B050000 		.word	.L29+1
 250 02dc 51050000 		.word	.L30+1
 251 02e0 69050000 		.word	.L31+1
 252 02e4 6F050000 		.word	.L32+1
 253 02e8 75050000 		.word	.L33+1
 254 02ec 7B050000 		.word	.L34+1
 255 02f0 81050000 		.word	.L35+1
 256 02f4 99050000 		.word	.L36+1
 257 02f8 B1050000 		.word	.L49+1
 258 02fc B1050000 		.word	.L49+1
 259 0300 B1050000 		.word	.L49+1
 260 0304 B1050000 		.word	.L49+1
 261 0308 B1050000 		.word	.L49+1
 262 030c B1050000 		.word	.L49+1
 263 0310 B1050000 		.word	.L49+1
 264 0314 B1050000 		.word	.L49+1
 265 0318 B1050000 		.word	.L49+1
 266 031c B1050000 		.word	.L49+1
 267 0320 B1050000 		.word	.L49+1
 268 0324 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 7


 269 0328 B1050000 		.word	.L49+1
 270 032c B1050000 		.word	.L49+1
 271 0330 B1050000 		.word	.L49+1
 272 0334 B1050000 		.word	.L49+1
 273 0338 B1050000 		.word	.L49+1
 274 033c B1050000 		.word	.L49+1
 275 0340 B1050000 		.word	.L49+1
 276 0344 B1050000 		.word	.L49+1
 277 0348 B1050000 		.word	.L49+1
 278 034c B1050000 		.word	.L49+1
 279 0350 B1050000 		.word	.L49+1
 280 0354 B1050000 		.word	.L49+1
 281 0358 B1050000 		.word	.L49+1
 282 035c B1050000 		.word	.L49+1
 283 0360 B1050000 		.word	.L49+1
 284 0364 B1050000 		.word	.L49+1
 285 0368 B1050000 		.word	.L49+1
 286 036c B1050000 		.word	.L49+1
 287 0370 B1050000 		.word	.L49+1
 288 0374 B1050000 		.word	.L49+1
 289 0378 B1050000 		.word	.L49+1
 290 037c B1050000 		.word	.L49+1
 291 0380 B1050000 		.word	.L49+1
 292 0384 B1050000 		.word	.L49+1
 293 0388 B1050000 		.word	.L49+1
 294 038c B1050000 		.word	.L49+1
 295 0390 B1050000 		.word	.L49+1
 296 0394 B1050000 		.word	.L49+1
 297 0398 B1050000 		.word	.L49+1
 298 039c B1050000 		.word	.L49+1
 299 03a0 B1050000 		.word	.L49+1
 300 03a4 B1050000 		.word	.L49+1
 301 03a8 B1050000 		.word	.L49+1
 302 03ac B1050000 		.word	.L49+1
 303 03b0 B1050000 		.word	.L49+1
 304 03b4 B1050000 		.word	.L49+1
 305 03b8 B1050000 		.word	.L49+1
 306 03bc B1050000 		.word	.L49+1
 307 03c0 B1050000 		.word	.L49+1
 308 03c4 B1050000 		.word	.L49+1
 309 03c8 B1050000 		.word	.L49+1
 310 03cc B1050000 		.word	.L49+1
 311 03d0 B1050000 		.word	.L49+1
 312 03d4 B1050000 		.word	.L49+1
 313 03d8 B1050000 		.word	.L49+1
 314 03dc B1050000 		.word	.L49+1
 315 03e0 B1050000 		.word	.L49+1
 316 03e4 B1050000 		.word	.L49+1
 317 03e8 B1050000 		.word	.L49+1
 318 03ec B1050000 		.word	.L49+1
 319 03f0 B1050000 		.word	.L49+1
 320 03f4 B1050000 		.word	.L49+1
 321 03f8 B1050000 		.word	.L49+1
 322 03fc B1050000 		.word	.L49+1
 323 0400 B1050000 		.word	.L49+1
 324 0404 B1050000 		.word	.L49+1
 325 0408 B1050000 		.word	.L49+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 8


 326 040c B1050000 		.word	.L49+1
 327 0410 B1050000 		.word	.L49+1
 328 0414 B1050000 		.word	.L49+1
 329 0418 B1050000 		.word	.L49+1
 330 041c B1050000 		.word	.L49+1
 331 0420 B1050000 		.word	.L49+1
 332 0424 B1050000 		.word	.L49+1
 333 0428 B1050000 		.word	.L49+1
 334 042c B1050000 		.word	.L49+1
 335 0430 B1050000 		.word	.L49+1
 336 0434 B1050000 		.word	.L49+1
 337 0438 B1050000 		.word	.L49+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 B5E0     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a B2E0     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 AFE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 ACE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c A9E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 A6E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 A3E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e A0E0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 9DE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a 9AE0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 97E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 94E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c 91E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 8EE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 484B     		ldr	r3, .L52
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa 82E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 7FE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),TRUE );
 443              		.loc 1 174 0
 444 04b2 414B     		ldr	r3, .L52
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca 72E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 6FE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 6CE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea 62E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 5EE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 55E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c 51E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 48E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 28


 529              		.loc 1 214 0
 530 0526 44E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 33E0     		b	.L1
 548              	.L29:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:           
 230:..\src/command_processing.c ****             break;
 231:..\src/command_processing.c ****             
 232:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 233:..\src/command_processing.c **** 
 234:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 235:..\src/command_processing.c ****             cmd_get_imu_readings();
 549              		.loc 1 235 0
 550 054a FFF7FEFF 		bl	cmd_get_imu_readings
 236:..\src/command_processing.c ****             break; 
 551              		.loc 1 236 0
 552 054e 30E0     		b	.L1
 553              	.L30:
 237:..\src/command_processing.c ****             
 238:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 239:..\src/command_processing.c **** 
 240:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 241:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 554              		.loc 1 241 0
 555 0550 194B     		ldr	r3, .L52
 556 0552 1B88     		ldrh	r3, [r3]
 557 0554 7B62     		str	r3, [r7, #36]
 558              	.LBB16:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 29


 559              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 560              		.loc 2 792 0
 561 0556 7B6A     		ldr	r3, [r7, #36]
 562              		.syntax unified
 563              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 564 0558 5BBA     		rev16 r3, r3
 565              	@ 0 "" 2
 566              		.thumb
 567              		.syntax unified
 568 055a FB60     		str	r3, [r7, #12]
 569              		.loc 2 793 0
 570 055c FB68     		ldr	r3, [r7, #12]
 571              	.LBE17:
 572              	.LBE16:
 573              		.loc 1 241 0
 574 055e 9BB2     		uxth	r3, r3
 575 0560 1846     		mov	r0, r3
 576 0562 FFF7FEFF 		bl	get_IMU_param_list
 242:..\src/command_processing.c ****             break;             
 577              		.loc 1 242 0
 578 0566 24E0     		b	.L1
 579              	.L31:
 243:..\src/command_processing.c ****             
 244:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 245:..\src/command_processing.c **** 
 246:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 247:..\src/command_processing.c ****             cmd_get_encoder_map();
 580              		.loc 1 247 0
 581 0568 FFF7FEFF 		bl	cmd_get_encoder_map
 248:..\src/command_processing.c ****             break; 
 582              		.loc 1 248 0
 583 056c 21E0     		b	.L1
 584              	.L32:
 249:..\src/command_processing.c **** 
 250:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 251:..\src/command_processing.c **** 
 252:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 253:..\src/command_processing.c ****             cmd_get_encoder_raw();
 585              		.loc 1 253 0
 586 056e FFF7FEFF 		bl	cmd_get_encoder_raw
 254:..\src/command_processing.c ****             break; 
 587              		.loc 1 254 0
 588 0572 1EE0     		b	.L1
 589              	.L33:
 255:..\src/command_processing.c **** 
 256:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 257:..\src/command_processing.c **** 
 258:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 259:..\src/command_processing.c ****             cmd_get_ADC_map();
 590              		.loc 1 259 0
 591 0574 FFF7FEFF 		bl	cmd_get_ADC_map
 260:..\src/command_processing.c ****             break; 
 592              		.loc 1 260 0
 593 0578 1BE0     		b	.L1
 594              	.L34:
 261:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 30


 262:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 263:..\src/command_processing.c **** 
 264:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 265:..\src/command_processing.c ****             cmd_get_ADC_raw();
 595              		.loc 1 265 0
 596 057a FFF7FEFF 		bl	cmd_get_ADC_raw
 266:..\src/command_processing.c ****             break; 
 597              		.loc 1 266 0
 598 057e 18E0     		b	.L1
 599              	.L35:
 267:..\src/command_processing.c ****             
 268:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 269:..\src/command_processing.c **** 
 270:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 271:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 600              		.loc 1 271 0
 601 0580 0D4B     		ldr	r3, .L52
 602 0582 1B88     		ldrh	r3, [r3]
 603 0584 3B62     		str	r3, [r7, #32]
 604              	.LBB18:
 605              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 606              		.loc 2 792 0
 607 0586 3B6A     		ldr	r3, [r7, #32]
 608              		.syntax unified
 609              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 610 0588 5BBA     		rev16 r3, r3
 611              	@ 0 "" 2
 612              		.thumb
 613              		.syntax unified
 614 058a BB60     		str	r3, [r7, #8]
 615              		.loc 2 793 0
 616 058c BB68     		ldr	r3, [r7, #8]
 617              	.LBE19:
 618              	.LBE18:
 619              		.loc 1 271 0
 620 058e 9BB2     		uxth	r3, r3
 621 0590 1846     		mov	r0, r3
 622 0592 FFF7FEFF 		bl	cmd_get_SD_file
 272:..\src/command_processing.c ****             break;   
 623              		.loc 1 272 0
 624 0596 0CE0     		b	.L1
 625              	.L36:
 273:..\src/command_processing.c ****             
 274:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 275:..\src/command_processing.c **** 
 276:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 277:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 626              		.loc 1 277 0
 627 0598 074B     		ldr	r3, .L52
 628 059a 1B88     		ldrh	r3, [r3]
 629 059c FB61     		str	r3, [r7, #28]
 630              	.LBB20:
 631              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 632              		.loc 2 792 0
 633 059e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 31


 634              		.syntax unified
 635              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 636 05a0 5BBA     		rev16 r3, r3
 637              	@ 0 "" 2
 638              		.thumb
 639              		.syntax unified
 640 05a2 7B60     		str	r3, [r7, #4]
 641              		.loc 2 793 0
 642 05a4 7B68     		ldr	r3, [r7, #4]
 643              	.LBE21:
 644              	.LBE20:
 645              		.loc 1 277 0
 646 05a6 9BB2     		uxth	r3, r3
 647 05a8 1846     		mov	r0, r3
 648 05aa FFF7FEFF 		bl	cmd_remove_SD_file
 278:..\src/command_processing.c ****             break;               
 649              		.loc 1 278 0
 650 05ae 00E0     		b	.L1
 651              	.L49:
 279:..\src/command_processing.c ****             
 280:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 281:..\src/command_processing.c ****         default:
 282:..\src/command_processing.c ****             break;
 652              		.loc 1 282 0
 653 05b0 00BF     		nop
 654              	.L1:
 283:..\src/command_processing.c **** 
 284:..\src/command_processing.c ****     }
 285:..\src/command_processing.c **** }  
 655              		.loc 1 285 0
 656 05b2 3037     		adds	r7, r7, #48
 657              		.cfi_def_cfa_offset 8
 658 05b4 BD46     		mov	sp, r7
 659              		.cfi_def_cfa_register 13
 660              		@ sp needed
 661 05b6 80BD     		pop	{r7, pc}
 662              	.L53:
 663              		.align	2
 664              	.L52:
 665 05b8 01000000 		.word	g_rx+1
 666              		.cfi_endproc
 667              	.LFE64:
 668              		.size	commProcess, .-commProcess
 669              		.section	.text.infoSend,"ax",%progbits
 670              		.align	2
 671              		.global	infoSend
 672              		.thumb
 673              		.thumb_func
 674              		.type	infoSend, %function
 675              	infoSend:
 676              	.LFB65:
 286:..\src/command_processing.c **** 
 287:..\src/command_processing.c **** //==============================================================================
 288:..\src/command_processing.c **** //                                                                     INFO SEND
 289:..\src/command_processing.c **** //==============================================================================
 290:..\src/command_processing.c **** 
 291:..\src/command_processing.c **** void infoSend(void){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 32


 677              		.loc 1 291 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 1504
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 ADF5BC6D 		sub	sp, sp, #1504
 686              		.cfi_def_cfa_offset 1512
 687 0006 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 292:..\src/command_processing.c ****     char packet_string[1500];
 293:..\src/command_processing.c ****     
 294:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 689              		.loc 1 294 0
 690 0008 3B1D     		adds	r3, r7, #4
 691 000a 1846     		mov	r0, r3
 692 000c FFF7FEFF 		bl	prepare_generic_info
 295:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 693              		.loc 1 295 0
 694 0010 3B1D     		adds	r3, r7, #4
 695 0012 1846     		mov	r0, r3
 696 0014 FFF7FEFF 		bl	UART_RS485_PutString
 296:..\src/command_processing.c **** }
 697              		.loc 1 296 0
 698 0018 00BF     		nop
 699 001a 07F5BC67 		add	r7, r7, #1504
 700              		.cfi_def_cfa_offset 8
 701 001e BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0020 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE65:
 707              		.size	infoSend, .-infoSend
 708 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 709              		.align	2
 710              		.global	num_of_bytes
 711              		.thumb
 712              		.thumb_func
 713              		.type	num_of_bytes, %function
 714              	num_of_bytes:
 715              	.LFB66:
 297:..\src/command_processing.c **** //==============================================================================
 298:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 299:..\src/command_processing.c **** //==============================================================================
 300:..\src/command_processing.c ****                     
 301:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
 716              		.loc 1 301 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 33


 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 302:..\src/command_processing.c ****     uint8 sod;
 303:..\src/command_processing.c ****     switch (TYPE) {
 730              		.loc 1 303 0
 731 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 000c 092B     		cmp	r3, #9
 733 000e 20D8     		bhi	.L56
 734 0010 01A2     		adr	r2, .L58
 735 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 736 0016 00BF     		.p2align 2
 737              	.L58:
 738 0018 41000000 		.word	.L57+1
 739 001c 41000000 		.word	.L57+1
 740 0020 41000000 		.word	.L57+1
 741 0024 47000000 		.word	.L59+1
 742 0028 47000000 		.word	.L59+1
 743 002c 4D000000 		.word	.L60+1
 744 0030 4D000000 		.word	.L60+1
 745 0034 4D000000 		.word	.L60+1
 746 0038 53000000 		.word	.L56+1
 747 003c 41000000 		.word	.L57+1
 748              		.p2align 1
 749              	.L57:
 304:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 305:..\src/command_processing.c ****                 sod = 1; break;
 750              		.loc 1 305 0
 751 0040 0123     		movs	r3, #1
 752 0042 FB73     		strb	r3, [r7, #15]
 753 0044 05E0     		b	.L56
 754              	.L59:
 306:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 307:..\src/command_processing.c ****                 sod = 2; break;
 755              		.loc 1 307 0
 756 0046 0223     		movs	r3, #2
 757 0048 FB73     		strb	r3, [r7, #15]
 758 004a 02E0     		b	.L56
 759              	.L60:
 308:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 309:..\src/command_processing.c ****                 sod = 4; break;
 760              		.loc 1 309 0
 761 004c 0423     		movs	r3, #4
 762 004e FB73     		strb	r3, [r7, #15]
 763 0050 00BF     		nop
 764              	.L56:
 310:..\src/command_processing.c ****     }  
 311:..\src/command_processing.c ****     return sod;
 765              		.loc 1 311 0
 766 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 312:..\src/command_processing.c **** }
 767              		.loc 1 312 0
 768 0054 1846     		mov	r0, r3
 769 0056 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 34


 770              		.cfi_def_cfa_offset 4
 771 0058 BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 005a 80BC     		pop	{r7}
 775              		.cfi_restore 7
 776              		.cfi_def_cfa_offset 0
 777 005c 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE66:
 780              		.size	num_of_bytes, .-num_of_bytes
 781 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 782              		.align	2
 783              		.global	infoGet
 784              		.thumb
 785              		.thumb_func
 786              		.type	infoGet, %function
 787              	infoGet:
 788              	.LFB67:
 313:..\src/command_processing.c **** 
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 316:..\src/command_processing.c **** //==============================================================================
 317:..\src/command_processing.c **** 
 318:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 789              		.loc 1 318 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 24008
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 ADF5BB4D 		sub	sp, sp, #23936
 798              		.cfi_def_cfa_offset 23944
 799 0006 92B0     		sub	sp, sp, #72
 800              		.cfi_def_cfa_offset 24016
 801 0008 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 000a 0246     		mov	r2, r0
 804 000c 07F14803 		add	r3, r7, #72
 805 0010 423B     		subs	r3, r3, #66
 806 0012 1A80     		strh	r2, [r3]	@ movhi
 319:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 807              		.loc 1 319 0
 808 0014 07F59C43 		add	r3, r7, #19968
 809 0018 03F12803 		add	r3, r3, #40
 810 001c 0022     		movs	r2, #0
 811 001e 1A60     		str	r2, [r3]
 812 0020 0433     		adds	r3, r3, #4
 813 0022 40F69C72 		movw	r2, #3996
 814 0026 0021     		movs	r1, #0
 815 0028 1846     		mov	r0, r3
 816 002a FFF7FEFF 		bl	memset
 320:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 817              		.loc 1 320 0
 818 002e 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 35


 819 0032 403B     		subs	r3, r3, #64
 820 0034 0022     		movs	r2, #0
 821 0036 1A60     		str	r2, [r3]
 822 0038 0433     		adds	r3, r3, #4
 823 003a 44F61C62 		movw	r2, #19996
 824 003e 0021     		movs	r1, #0
 825 0040 1846     		mov	r0, r3
 826 0042 FFF7FEFF 		bl	memset
 321:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 322:..\src/command_processing.c **** 
 323:..\src/command_processing.c ****     switch (info_type) {
 827              		.loc 1 323 0
 828 0046 07F14803 		add	r3, r7, #72
 829 004a 423B     		subs	r3, r3, #66
 830 004c 1B88     		ldrh	r3, [r3]
 831 004e 062B     		cmp	r3, #6
 832 0050 7DD8     		bhi	.L73
 833 0052 01A2     		adr	r2, .L65
 834 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 835              		.p2align 2
 836              	.L65:
 837 0058 75000000 		.word	.L64+1
 838 005c 97000000 		.word	.L66+1
 839 0060 B9000000 		.word	.L67+1
 840 0064 E1000000 		.word	.L68+1
 841 0068 03010000 		.word	.L69+1
 842 006c 21010000 		.word	.L70+1
 843 0070 27010000 		.word	.L71+1
 844              		.p2align 1
 845              	.L64:
 324:..\src/command_processing.c ****         case INFO_ALL:
 325:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 846              		.loc 1 325 0
 847 0074 07F59C43 		add	r3, r7, #19968
 848 0078 03F12803 		add	r3, r3, #40
 849 007c 1846     		mov	r0, r3
 850 007e FFF7FEFF 		bl	prepare_generic_info
 326:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 851              		.loc 1 326 0
 852 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 327:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 853              		.loc 1 327 0
 854 0086 07F59C43 		add	r3, r7, #19968
 855 008a 03F12803 		add	r3, r3, #40
 856 008e 1846     		mov	r0, r3
 857 0090 FFF7FEFF 		bl	UART_RS485_PutString
 328:..\src/command_processing.c ****             break;
 858              		.loc 1 328 0
 859 0094 5CE0     		b	.L72
 860              	.L66:
 329:..\src/command_processing.c ****         case CYCLES_INFO:
 330:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 861              		.loc 1 330 0
 862 0096 07F59C43 		add	r3, r7, #19968
 863 009a 03F12803 		add	r3, r3, #40
 864 009e 1846     		mov	r0, r3
 865 00a0 FFF7FEFF 		bl	prepare_counter_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 36


 331:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 866              		.loc 1 331 0
 867 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 332:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 868              		.loc 1 332 0
 869 00a8 07F59C43 		add	r3, r7, #19968
 870 00ac 03F12803 		add	r3, r3, #40
 871 00b0 1846     		mov	r0, r3
 872 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 333:..\src/command_processing.c ****             break;
 873              		.loc 1 333 0
 874 00b6 4BE0     		b	.L72
 875              	.L67:
 334:..\src/command_processing.c ****         case GET_SD_PARAM:
 335:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 876              		.loc 1 335 0
 877 00b8 07F59C43 		add	r3, r7, #19968
 878 00bc 03F12803 		add	r3, r3, #40
 879 00c0 4FF47A62 		mov	r2, #4000
 880 00c4 1946     		mov	r1, r3
 881 00c6 2548     		ldr	r0, .L74
 882 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 336:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 883              		.loc 1 336 0
 884 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 337:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 885              		.loc 1 337 0
 886 00d0 07F59C43 		add	r3, r7, #19968
 887 00d4 03F12803 		add	r3, r3, #40
 888 00d8 1846     		mov	r0, r3
 889 00da FFF7FEFF 		bl	UART_RS485_PutString
 338:..\src/command_processing.c ****             break;
 890              		.loc 1 338 0
 891 00de 37E0     		b	.L72
 892              	.L68:
 339:..\src/command_processing.c ****         case GET_SD_DATA:
 340:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 893              		.loc 1 340 0
 894 00e0 07F14803 		add	r3, r7, #72
 895 00e4 403B     		subs	r3, r3, #64
 896 00e6 44F62061 		movw	r1, #20000
 897 00ea 1846     		mov	r0, r3
 898 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 341:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 899              		.loc 1 341 0
 900 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 342:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 901              		.loc 1 342 0
 902 00f4 07F14803 		add	r3, r7, #72
 903 00f8 403B     		subs	r3, r3, #64
 904 00fa 1846     		mov	r0, r3
 905 00fc FFF7FEFF 		bl	UART_RS485_PutString
 343:..\src/command_processing.c ****             break;
 906              		.loc 1 343 0
 907 0100 26E0     		b	.L72
 908              	.L69:
 344:..\src/command_processing.c ****         case GET_SD_FS_TREE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 37


 345:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 909              		.loc 1 345 0
 910 0102 07F14803 		add	r3, r7, #72
 911 0106 403B     		subs	r3, r3, #64
 912 0108 1846     		mov	r0, r3
 913 010a FFF7FEFF 		bl	Get_SD_FS
 346:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 914              		.loc 1 346 0
 915 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 347:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 916              		.loc 1 347 0
 917 0112 07F14803 		add	r3, r7, #72
 918 0116 403B     		subs	r3, r3, #64
 919 0118 1846     		mov	r0, r3
 920 011a FFF7FEFF 		bl	UART_RS485_PutString
 348:..\src/command_processing.c ****             break;
 921              		.loc 1 348 0
 922 011e 17E0     		b	.L72
 923              	.L70:
 349:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 350:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 351:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 924              		.loc 1 351 0
 925 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 352:..\src/command_processing.c ****             break;
 926              		.loc 1 352 0
 927 0124 14E0     		b	.L72
 928              	.L71:
 353:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 354:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 929              		.loc 1 354 0
 930 0126 07F59C43 		add	r3, r7, #19968
 931 012a 03F12803 		add	r3, r3, #40
 932 012e 4FF47A62 		mov	r2, #4000
 933 0132 1946     		mov	r1, r3
 934 0134 0A48     		ldr	r0, .L74+4
 935 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 355:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 936              		.loc 1 355 0
 937 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 356:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 938              		.loc 1 356 0
 939 013e 07F59C43 		add	r3, r7, #19968
 940 0142 03F12803 		add	r3, r3, #40
 941 0146 1846     		mov	r0, r3
 942 0148 FFF7FEFF 		bl	UART_RS485_PutString
 357:..\src/command_processing.c ****             break;            
 943              		.loc 1 357 0
 944 014c 00E0     		b	.L72
 945              	.L73:
 358:..\src/command_processing.c ****         default:
 359:..\src/command_processing.c ****             break;
 946              		.loc 1 359 0
 947 014e 00BF     		nop
 948              	.L72:
 360:..\src/command_processing.c ****     }
 361:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 38


 949              		.loc 1 361 0 discriminator 1
 950 0150 00BF     		nop
 951 0152 07F5BB47 		add	r7, r7, #23936
 952 0156 4837     		adds	r7, r7, #72
 953              		.cfi_def_cfa_offset 8
 954 0158 BD46     		mov	sp, r7
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 015a 80BD     		pop	{r7, pc}
 958              	.L75:
 959              		.align	2
 960              	.L74:
 961 015c 00000000 		.word	sdParam
 962 0160 00000000 		.word	sdR01File
 963              		.cfi_endproc
 964              	.LFE67:
 965              		.size	infoGet, .-infoGet
 966              		.section	.rodata
 967              		.align	2
 968              	.LC8:
 969 0000 00       		.ascii	"\000"
 970 0001 000000   		.align	2
 971              	.LC14:
 972 0004 202D2000 		.ascii	" - \000"
 973              		.align	2
 974              	.LC15:
 975 0008 54686520 		.ascii	"The board will reset\012\000"
 975      626F6172 
 975      64207769 
 975      6C6C2072 
 975      65736574 
 976 001e 0000     		.align	2
 977              	.LC16:
 978 0020 202D3E20 		.ascii	" -> \000"
 978      00
 979 0025 000000   		.align	2
 980              	.LC17:
 981 0028 0A00     		.ascii	"\012\000"
 982              		.section	.text.get_param_list,"ax",%progbits
 983              		.align	2
 984              		.global	get_param_list
 985              		.thumb
 986              		.thumb_func
 987              		.type	get_param_list, %function
 988              	get_param_list:
 989              	.LFB68:
 362:..\src/command_processing.c **** 
 363:..\src/command_processing.c **** 
 364:..\src/command_processing.c **** //==============================================================================
 365:..\src/command_processing.c **** //                                                                GET PARAM LIST
 366:..\src/command_processing.c **** //==============================================================================
 367:..\src/command_processing.c **** 
 368:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 990              		.loc 1 368 0
 991              		.cfi_startproc
 992              		@ args = 4, pretend = 0, frame = 608
 993              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 39


 994 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 995              		.cfi_def_cfa_offset 28
 996              		.cfi_offset 4, -28
 997              		.cfi_offset 5, -24
 998              		.cfi_offset 6, -20
 999              		.cfi_offset 7, -16
 1000              		.cfi_offset 8, -12
 1001              		.cfi_offset 9, -8
 1002              		.cfi_offset 14, -4
 1003 0004 ADF5197D 		sub	sp, sp, #612
 1004              		.cfi_def_cfa_offset 640
 1005 0008 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 000a 0646     		mov	r6, r0
 1008 000c 0846     		mov	r0, r1
 1009 000e 07F10801 		add	r1, r7, #8
 1010 0012 0A60     		str	r2, [r1]
 1011 0014 3A1D     		adds	r2, r7, #4
 1012 0016 1360     		str	r3, [r2]
 1013 0018 07F10F03 		add	r3, r7, #15
 1014 001c 3246     		mov	r2, r6
 1015 001e 1A70     		strb	r2, [r3]
 1016 0020 07F10E03 		add	r3, r7, #14
 1017 0024 0246     		mov	r2, r0
 1018 0026 1A70     		strb	r2, [r3]
 1019              		.loc 1 368 0
 1020 0028 6B46     		mov	r3, sp
 1021 002a 1E46     		mov	r6, r3
 369:..\src/command_processing.c ****     
 370:..\src/command_processing.c ****     uint8 CYDATA idx = 0;      
 1022              		.loc 1 370 0
 1023 002c 0023     		movs	r3, #0
 1024 002e 87F85F32 		strb	r3, [r7, #607]
 371:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1025              		.loc 1 371 0
 1026 0032 07F10803 		add	r3, r7, #8
 1027 0036 1B68     		ldr	r3, [r3]
 1028 0038 1B68     		ldr	r3, [r3]
 1029 003a C7F85032 		str	r3, [r7, #592]
 372:..\src/command_processing.c ****     uint8 CYDATA string_length;
 373:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1030              		.loc 1 373 0
 1031 003e 07F5A473 		add	r3, r7, #328
 1032 0042 0022     		movs	r2, #0
 1033 0044 1A60     		str	r2, [r3]
 1034 0046 0433     		adds	r3, r3, #4
 1035 0048 F622     		movs	r2, #246
 1036 004a 0021     		movs	r1, #0
 1037 004c 1846     		mov	r0, r3
 1038 004e FFF7FEFF 		bl	memset
 374:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1039              		.loc 1 374 0
 1040 0052 07F14C03 		add	r3, r7, #76
 1041 0056 0022     		movs	r2, #0
 1042 0058 1A60     		str	r2, [r3]
 1043 005a 0433     		adds	r3, r3, #4
 1044 005c F622     		movs	r2, #246
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 40


 1045 005e 0021     		movs	r1, #0
 1046 0060 1846     		mov	r0, r3
 1047 0062 FFF7FEFF 		bl	memset
 375:..\src/command_processing.c ****     
 376:..\src/command_processing.c ****     int32 aux_int32;
 377:..\src/command_processing.c ****     uint8 i, j;
 378:..\src/command_processing.c ****     uint8 count;
 379:..\src/command_processing.c ****     char aux_char[50];
 380:..\src/command_processing.c ****     
 381:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1048              		.loc 1 381 0
 1049 0066 07F10F03 		add	r3, r7, #15
 1050 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 006c 9BB2     		uxth	r3, r3
 1052 006e 1A46     		mov	r2, r3	@ movhi
 1053 0070 9200     		lsls	r2, r2, #2
 1054 0072 1344     		add	r3, r3, r2
 1055 0074 1A46     		mov	r2, r3	@ movhi
 1056 0076 9100     		lsls	r1, r2, #2
 1057 0078 1A46     		mov	r2, r3	@ movhi
 1058 007a 0B46     		mov	r3, r1	@ movhi
 1059 007c 1344     		add	r3, r3, r2
 1060 007e 5B00     		lsls	r3, r3, #1
 1061 0080 9AB2     		uxth	r2, r3
 1062 0082 07F10E03 		add	r3, r7, #14
 1063 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 0088 9BB2     		uxth	r3, r3
 1065 008a 1946     		mov	r1, r3	@ movhi
 1066 008c 8900     		lsls	r1, r1, #2
 1067 008e 0B44     		add	r3, r3, r1
 1068 0090 1946     		mov	r1, r3	@ movhi
 1069 0092 0901     		lsls	r1, r1, #4
 1070 0094 CB1A     		subs	r3, r1, r3
 1071 0096 5B00     		lsls	r3, r3, #1
 1072 0098 9BB2     		uxth	r3, r3
 1073 009a 1344     		add	r3, r3, r2
 1074 009c 9BB2     		uxth	r3, r3
 1075 009e 3233     		adds	r3, r3, #50
 1076 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 382:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1077              		.loc 1 382 0
 1078 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1079 00a8 0B46     		mov	r3, r1
 1080 00aa 013B     		subs	r3, r3, #1
 1081 00ac C7F84832 		str	r3, [r7, #584]
 1082 00b0 8AB2     		uxth	r2, r1
 1083 00b2 4FF00003 		mov	r3, #0
 1084 00b6 4FEAC309 		lsl	r9, r3, #3
 1085 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1086 00be 4FEAC208 		lsl	r8, r2, #3
 1087 00c2 8AB2     		uxth	r2, r1
 1088 00c4 4FF00003 		mov	r3, #0
 1089 00c8 DD00     		lsls	r5, r3, #3
 1090 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1091 00ce D400     		lsls	r4, r2, #3
 1092 00d0 0B46     		mov	r3, r1
 1093 00d2 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 41


 1094 00d4 DB08     		lsrs	r3, r3, #3
 1095 00d6 DB00     		lsls	r3, r3, #3
 1096 00d8 ADEB030D 		sub	sp, sp, r3
 1097 00dc 6B46     		mov	r3, sp
 1098 00de 0033     		adds	r3, r3, #0
 1099 00e0 C7F84432 		str	r3, [r7, #580]
 1100              	.LBB22:
 383:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1101              		.loc 1 383 0
 1102 00e4 0023     		movs	r3, #0
 1103 00e6 C7F85432 		str	r3, [r7, #596]
 1104 00ea 0BE0     		b	.L77
 1105              	.L78:
 1106              		.loc 1 383 0 is_stmt 0 discriminator 3
 1107 00ec D7F84422 		ldr	r2, [r7, #580]
 1108 00f0 D7F85432 		ldr	r3, [r7, #596]
 1109 00f4 1344     		add	r3, r3, r2
 1110 00f6 0022     		movs	r2, #0
 1111 00f8 1A70     		strb	r2, [r3]
 1112 00fa D7F85432 		ldr	r3, [r7, #596]
 1113 00fe 0133     		adds	r3, r3, #1
 1114 0100 C7F85432 		str	r3, [r7, #596]
 1115              	.L77:
 1116              		.loc 1 383 0 discriminator 1
 1117 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1118 0108 D7F85432 		ldr	r3, [r7, #596]
 1119 010c 9A42     		cmp	r2, r3
 1120 010e EDDC     		bgt	.L78
 1121              	.LBE22:
 384:..\src/command_processing.c **** 
 385:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1122              		.loc 1 385 0 is_stmt 1
 1123 0110 D7F84432 		ldr	r3, [r7, #580]
 1124 0114 0C22     		movs	r2, #12
 1125 0116 1A70     		strb	r2, [r3]
 386:..\src/command_processing.c ****     packet_data[1] = num_params;
 1126              		.loc 1 386 0
 1127 0118 D7F84432 		ldr	r3, [r7, #580]
 1128 011c 07F10F02 		add	r2, r7, #15
 1129 0120 1278     		ldrb	r2, [r2]
 1130 0122 5A70     		strb	r2, [r3, #1]
 387:..\src/command_processing.c ****     
 388:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1131              		.loc 1 388 0
 1132 0124 0023     		movs	r3, #0
 1133 0126 87F85F32 		strb	r3, [r7, #607]
 1134 012a 44E2     		b	.L79
 1135              	.L102:
 1136              	.LBB23:
 389:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1137              		.loc 1 389 0
 1138 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1139 0130 1B01     		lsls	r3, r3, #4
 1140 0132 07F10802 		add	r2, r7, #8
 1141 0136 1268     		ldr	r2, [r2]
 1142 0138 1344     		add	r3, r3, r2
 1143 013a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 42


 1144 013c C7F85032 		str	r3, [r7, #592]
 390:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1145              		.loc 1 390 0
 1146 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1147 0144 1B01     		lsls	r3, r3, #4
 1148 0146 07F10802 		add	r2, r7, #8
 1149 014a 1268     		ldr	r2, [r2]
 1150 014c 1344     		add	r3, r3, r2
 1151 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1152 0150 1846     		mov	r0, r3
 1153 0152 FFF7FEFF 		bl	num_of_bytes
 1154 0156 0346     		mov	r3, r0
 1155 0158 87F84332 		strb	r3, [r7, #579]
 391:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1156              		.loc 1 391 0
 1157 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1158 0160 3222     		movs	r2, #50
 1159 0162 02FB03F3 		mul	r3, r2, r3
 1160 0166 0233     		adds	r3, r3, #2
 1161 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1162 016c 1201     		lsls	r2, r2, #4
 1163 016e 07F10801 		add	r1, r7, #8
 1164 0172 0968     		ldr	r1, [r1]
 1165 0174 0A44     		add	r2, r2, r1
 1166 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1167 0178 D7F84422 		ldr	r2, [r7, #580]
 1168 017c D154     		strb	r1, [r2, r3]
 392:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1169              		.loc 1 392 0
 1170 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1171 0182 3222     		movs	r2, #50
 1172 0184 02FB03F3 		mul	r3, r2, r3
 1173 0188 0333     		adds	r3, r3, #3
 1174 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1175 018e 1201     		lsls	r2, r2, #4
 1176 0190 07F10801 		add	r1, r7, #8
 1177 0194 0968     		ldr	r1, [r1]
 1178 0196 0A44     		add	r2, r2, r1
 1179 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1180 019a D7F84422 		ldr	r2, [r7, #580]
 1181 019e D154     		strb	r1, [r2, r3]
 393:..\src/command_processing.c **** 
 394:..\src/command_processing.c **** 
 395:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1182              		.loc 1 395 0
 1183 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1184 01a4 1B01     		lsls	r3, r3, #4
 1185 01a6 07F10802 		add	r2, r7, #8
 1186 01aa 1268     		ldr	r2, [r2]
 1187 01ac 1344     		add	r3, r3, r2
 1188 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1189 01b0 052B     		cmp	r3, #5
 1190 01b2 61D1     		bne	.L113
 396:..\src/command_processing.c **** 
 397:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 398:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1191              		.loc 1 398 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 43


 1192 01b4 B74B     		ldr	r3, .L114
 1193 01b6 1B6A     		ldr	r3, [r3, #32]
 1194 01b8 B64A     		ldr	r2, .L114
 1195 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1196 01be 43FA02F2 		asr	r2, r3, r2
 1197 01c2 07F14803 		add	r3, r7, #72
 1198 01c6 1A60     		str	r2, [r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1199              		.loc 1 399 0
 1200 01c8 0023     		movs	r3, #0
 1201 01ca 87F85C32 		strb	r3, [r7, #604]
 1202 01ce 1AE0     		b	.L82
 1203              	.L83:
 400:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1204              		.loc 1 400 0 discriminator 3
 1205 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1206 01d4 3222     		movs	r2, #50
 1207 01d6 02FB03F3 		mul	r3, r2, r3
 1208 01da 1A1D     		adds	r2, r3, #4
 1209 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1210 01e0 1A44     		add	r2, r2, r3
 1211 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1212 01e6 D31A     		subs	r3, r2, r3
 1213 01e8 013B     		subs	r3, r3, #1
 1214 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1215 01ee 07F14801 		add	r1, r7, #72
 1216 01f2 0A44     		add	r2, r2, r1
 1217 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1218 01f6 D7F84422 		ldr	r2, [r7, #580]
 1219 01fa D154     		strb	r1, [r2, r3]
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1220              		.loc 1 399 0 discriminator 3
 1221 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1222 0200 0133     		adds	r3, r3, #1
 1223 0202 87F85C32 		strb	r3, [r7, #604]
 1224              	.L82:
 399:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1225              		.loc 1 399 0 is_stmt 0 discriminator 1
 1226 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1227 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1228 020e 9A42     		cmp	r2, r3
 1229 0210 DED3     		bcc	.L83
 401:..\src/command_processing.c ****             }
 402:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1230              		.loc 1 402 0 is_stmt 1
 1231 0212 A04B     		ldr	r3, .L114
 1232 0214 5B6A     		ldr	r3, [r3, #36]
 1233 0216 9F4A     		ldr	r2, .L114
 1234 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1235 021c 43FA02F2 		asr	r2, r3, r2
 1236 0220 07F14803 		add	r3, r7, #72
 1237 0224 1A60     		str	r2, [r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1238              		.loc 1 403 0
 1239 0226 0023     		movs	r3, #0
 1240 0228 87F85C32 		strb	r3, [r7, #604]
 1241 022c 1DE0     		b	.L84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 44


 1242              	.L85:
 404:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1243              		.loc 1 404 0 discriminator 3
 1244 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1245 0232 3222     		movs	r2, #50
 1246 0234 02FB03F3 		mul	r3, r2, r3
 1247 0238 1A1D     		adds	r2, r3, #4
 1248 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1249 023e 1A44     		add	r2, r2, r3
 1250 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1251 0244 1A44     		add	r2, r2, r3
 1252 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1253 024a D31A     		subs	r3, r2, r3
 1254 024c 013B     		subs	r3, r3, #1
 1255 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1256 0252 07F14801 		add	r1, r7, #72
 1257 0256 0A44     		add	r2, r2, r1
 1258 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1259 025a D7F84422 		ldr	r2, [r7, #580]
 1260 025e D154     		strb	r1, [r2, r3]
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1261              		.loc 1 403 0 discriminator 3
 1262 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1263 0264 0133     		adds	r3, r3, #1
 1264 0266 87F85C32 		strb	r3, [r7, #604]
 1265              	.L84:
 403:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1266              		.loc 1 403 0 is_stmt 0 discriminator 1
 1267 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1268 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1269 0272 9A42     		cmp	r2, r3
 1270 0274 DBD3     		bcc	.L85
 405:..\src/command_processing.c ****             }
 406:..\src/command_processing.c ****             break;            
 1271              		.loc 1 406 0 is_stmt 1
 1272 0276 48E0     		b	.L86
 1273              	.L113:
 407:..\src/command_processing.c ****             
 408:..\src/command_processing.c **** 
 409:..\src/command_processing.c ****         case 0:  // Not custom parameter
 410:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 411:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1274              		.loc 1 411 0
 1275 0278 0023     		movs	r3, #0
 1276 027a 87F85D32 		strb	r3, [r7, #605]
 1277 027e 32E0     		b	.L87
 1278              	.L90:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1279              		.loc 1 412 0
 1280 0280 0023     		movs	r3, #0
 1281 0282 87F85C32 		strb	r3, [r7, #604]
 1282 0286 21E0     		b	.L88
 1283              	.L89:
 413:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1284              		.loc 1 413 0 discriminator 3
 1285 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1286 028c 3222     		movs	r2, #50
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 45


 1287 028e 02FB03F3 		mul	r3, r2, r3
 1288 0292 1A1D     		adds	r2, r3, #4
 1289 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1290 0298 1A44     		add	r2, r2, r3
 1291 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1292 029e 1A44     		add	r2, r2, r3
 1293 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1294 02a4 D31A     		subs	r3, r2, r3
 1295 02a6 013B     		subs	r3, r3, #1
 1296 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1297 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1298 02b0 0A44     		add	r2, r2, r1
 1299 02b2 1146     		mov	r1, r2
 1300 02b4 D7F85022 		ldr	r2, [r7, #592]
 1301 02b8 0A44     		add	r2, r2, r1
 1302 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1303 02bc D7F84422 		ldr	r2, [r7, #580]
 1304 02c0 D154     		strb	r1, [r2, r3]
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1305              		.loc 1 412 0 discriminator 3
 1306 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1307 02c6 0133     		adds	r3, r3, #1
 1308 02c8 87F85C32 		strb	r3, [r7, #604]
 1309              	.L88:
 412:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1310              		.loc 1 412 0 is_stmt 0 discriminator 1
 1311 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1313 02d4 9A42     		cmp	r2, r3
 1314 02d6 D7D3     		bcc	.L89
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1315              		.loc 1 411 0 is_stmt 1 discriminator 2
 1316 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1317 02dc 97F84332 		ldrb	r3, [r7, #579]
 1318 02e0 1344     		add	r3, r3, r2
 1319 02e2 87F85D32 		strb	r3, [r7, #605]
 1320              	.L87:
 411:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1321              		.loc 1 411 0 is_stmt 0 discriminator 1
 1322 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1323 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1324 02ee 1B01     		lsls	r3, r3, #4
 1325 02f0 07F10801 		add	r1, r7, #8
 1326 02f4 0968     		ldr	r1, [r1]
 1327 02f6 0B44     		add	r3, r3, r1
 1328 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1329 02fa 1946     		mov	r1, r3
 1330 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1331 0300 03FB01F3 		mul	r3, r3, r1
 1332 0304 9A42     		cmp	r2, r3
 1333 0306 BBDB     		blt	.L90
 414:..\src/command_processing.c ****                 }
 415:..\src/command_processing.c ****             }
 416:..\src/command_processing.c ****             break;
 1334              		.loc 1 416 0 is_stmt 1
 1335 0308 00BF     		nop
 1336              	.L86:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 46


 417:..\src/command_processing.c ****     }
 418:..\src/command_processing.c ****        
 419:..\src/command_processing.c ****         sprintf(aux_str,"");
 1337              		.loc 1 419 0
 1338 030a 634B     		ldr	r3, .L114+4
 1339 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1340 030e 07F5A473 		add	r3, r7, #328
 1341 0312 1A70     		strb	r2, [r3]
 420:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1342              		.loc 1 420 0
 1343 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1344 0318 0133     		adds	r3, r3, #1
 1345 031a 07F11401 		add	r1, r7, #20
 1346 031e 0A22     		movs	r2, #10
 1347 0320 1846     		mov	r0, r3
 1348 0322 FFF7FEFF 		bl	itoa
 421:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1349              		.loc 1 421 0
 1350 0326 07F11402 		add	r2, r7, #20
 1351 032a 07F5A473 		add	r3, r7, #328
 1352 032e 1146     		mov	r1, r2
 1353 0330 1846     		mov	r0, r3
 1354 0332 FFF7FEFF 		bl	strcat
 422:..\src/command_processing.c ****         strcat(aux_str," - ");
 1355              		.loc 1 422 0
 1356 0336 07F5A473 		add	r3, r7, #328
 1357 033a 1846     		mov	r0, r3
 1358 033c FFF7FEFF 		bl	strlen
 1359 0340 0346     		mov	r3, r0
 1360 0342 1A46     		mov	r2, r3
 1361 0344 07F5A473 		add	r3, r7, #328
 1362 0348 1344     		add	r3, r3, r2
 1363 034a 544A     		ldr	r2, .L114+8
 1364 034c 1068     		ldr	r0, [r2]	@ unaligned
 1365 034e 1860     		str	r0, [r3]	@ unaligned
 423:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1366              		.loc 1 423 0
 1367 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1368 0354 1B01     		lsls	r3, r3, #4
 1369 0356 07F10802 		add	r2, r7, #8
 1370 035a 1268     		ldr	r2, [r2]
 1371 035c 1344     		add	r3, r3, r2
 1372 035e 9A68     		ldr	r2, [r3, #8]
 1373 0360 07F5A473 		add	r3, r7, #328
 1374 0364 1146     		mov	r1, r2
 1375 0366 1846     		mov	r0, r3
 1376 0368 FFF7FEFF 		bl	strcat
 424:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1377              		.loc 1 424 0
 1378 036c 07F5A473 		add	r3, r7, #328
 1379 0370 1846     		mov	r0, r3
 1380 0372 FFF7FEFF 		bl	strlen
 1381 0376 0346     		mov	r3, r0
 1382 0378 87F85E32 		strb	r3, [r7, #606]
 425:..\src/command_processing.c ****         
 426:..\src/command_processing.c ****         // Parameters with a menu
 427:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 47


 1383              		.loc 1 427 0
 1384 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1385 0380 1B01     		lsls	r3, r3, #4
 1386 0382 07F10802 		add	r2, r7, #8
 1387 0386 1268     		ldr	r2, [r2]
 1388 0388 1344     		add	r3, r3, r2
 1389 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1390 038c 002B     		cmp	r3, #0
 1391 038e 40D0     		beq	.L91
 428:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1392              		.loc 1 428 0
 1393 0390 0023     		movs	r3, #0
 1394 0392 87F85D32 		strb	r3, [r7, #605]
 1395 0396 35E0     		b	.L92
 1396              	.L94:
 429:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1397              		.loc 1 429 0
 1398 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1399 039c 2C22     		movs	r2, #44
 1400 039e 02FB03F3 		mul	r3, r2, r3
 1401 03a2 3A1D     		adds	r2, r7, #4
 1402 03a4 1268     		ldr	r2, [r2]
 1403 03a6 1344     		add	r3, r3, r2
 1404 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1405 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1406 03ae 1B01     		lsls	r3, r3, #4
 1407 03b0 07F10801 		add	r1, r7, #8
 1408 03b4 0968     		ldr	r1, [r1]
 1409 03b6 0B44     		add	r3, r3, r1
 1410 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1411 03ba 9A42     		cmp	r2, r3
 1412 03bc 13D1     		bne	.L93
 430:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1413              		.loc 1 430 0
 1414 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1415 03c2 2C22     		movs	r2, #44
 1416 03c4 02FB03F3 		mul	r3, r2, r3
 1417 03c8 3A1D     		adds	r2, r7, #4
 1418 03ca 1268     		ldr	r2, [r2]
 1419 03cc 1A44     		add	r2, r2, r3
 1420 03ce D7F85032 		ldr	r3, [r7, #592]
 1421 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1422 03d4 9B00     		lsls	r3, r3, #2
 1423 03d6 1344     		add	r3, r3, r2
 1424 03d8 5A68     		ldr	r2, [r3, #4]
 1425 03da 07F5A473 		add	r3, r7, #328
 1426 03de 1146     		mov	r1, r2
 1427 03e0 1846     		mov	r0, r3
 1428 03e2 FFF7FEFF 		bl	strcat
 1429              	.L93:
 431:..\src/command_processing.c ****                 }              
 432:..\src/command_processing.c ****             //Recomputes string length
 433:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1430              		.loc 1 433 0 discriminator 2
 1431 03e6 07F5A473 		add	r3, r7, #328
 1432 03ea 1846     		mov	r0, r3
 1433 03ec FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 48


 1434 03f0 0346     		mov	r3, r0
 1435 03f2 DBB2     		uxtb	r3, r3
 1436 03f4 0133     		adds	r3, r3, #1
 1437 03f6 87F85E32 		strb	r3, [r7, #606]
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1438              		.loc 1 428 0 discriminator 2
 1439 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1440 03fe 0133     		adds	r3, r3, #1
 1441 0400 87F85D32 		strb	r3, [r7, #605]
 1442              	.L92:
 428:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1443              		.loc 1 428 0 is_stmt 0 discriminator 1
 1444 0404 07F10E03 		add	r3, r7, #14
 1445 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1446 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1447 040e 9A42     		cmp	r2, r3
 1448 0410 C2D3     		bcc	.L94
 1449              	.L91:
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****         }
 436:..\src/command_processing.c **** 
 437:..\src/command_processing.c ****         // Add parameter string to packet
 438:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1450              		.loc 1 438 0 is_stmt 1
 1451 0412 97F85E32 		ldrb	r3, [r7, #606]
 1452 0416 87F85D32 		strb	r3, [r7, #605]
 1453 041a 28E0     		b	.L95
 1454              	.L96:
 439:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1455              		.loc 1 439 0 discriminator 3
 1456 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1457 0420 3222     		movs	r2, #50
 1458 0422 02FB03F3 		mul	r3, r2, r3
 1459 0426 1A1D     		adds	r2, r3, #4
 1460 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1461 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1462 0430 0901     		lsls	r1, r1, #4
 1463 0432 07F10800 		add	r0, r7, #8
 1464 0436 0068     		ldr	r0, [r0]
 1465 0438 0144     		add	r1, r1, r0
 1466 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1467 043c 01FB03F3 		mul	r3, r1, r3
 1468 0440 1A44     		add	r2, r2, r3
 1469 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1470 0446 1A44     		add	r2, r2, r3
 1471 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1472 044c D31A     		subs	r3, r2, r3
 1473 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1474 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1475 0456 8A1A     		subs	r2, r1, r2
 1476 0458 07F5A471 		add	r1, r7, #328
 1477 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1478 045e D7F84422 		ldr	r2, [r7, #580]
 1479 0462 D154     		strb	r1, [r2, r3]
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1480              		.loc 1 438 0 discriminator 3
 1481 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 49


 1482 0468 013B     		subs	r3, r3, #1
 1483 046a 87F85D32 		strb	r3, [r7, #605]
 1484              	.L95:
 438:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1485              		.loc 1 438 0 is_stmt 0 discriminator 1
 1486 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1487 0472 002B     		cmp	r3, #0
 1488 0474 D2D1     		bne	.L96
 440:..\src/command_processing.c ****         
 441:..\src/command_processing.c ****         
 442:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1489              		.loc 1 442 0 is_stmt 1
 1490 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1491 047a 1B01     		lsls	r3, r3, #4
 1492 047c 07F10802 		add	r2, r7, #8
 1493 0480 1268     		ldr	r2, [r2]
 1494 0482 1344     		add	r3, r3, r2
 1495 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1496 0486 002B     		cmp	r3, #0
 1497 0488 6ED1     		bne	.L97
 443:..\src/command_processing.c ****             //Send the number of menus          
 444:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1498              		.loc 1 444 0
 1499 048a 0023     		movs	r3, #0
 1500 048c 87F85D32 		strb	r3, [r7, #605]
 1501 0490 40E0     		b	.L98
 1502              	.L115:
 1503 0492 00BF     		.align	2
 1504              	.L114:
 1505 0494 00000000 		.word	c_mem
 1506 0498 00000000 		.word	.LC8
 1507 049c 04000000 		.word	.LC14
 1508              	.L100:
 445:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1509              		.loc 1 445 0
 1510 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1511 04a4 2C22     		movs	r2, #44
 1512 04a6 02FB03F3 		mul	r3, r2, r3
 1513 04aa 3A1D     		adds	r2, r7, #4
 1514 04ac 1268     		ldr	r2, [r2]
 1515 04ae 1344     		add	r3, r3, r2
 1516 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1517 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1518 04b6 1B01     		lsls	r3, r3, #4
 1519 04b8 07F10801 		add	r1, r7, #8
 1520 04bc 0968     		ldr	r1, [r1]
 1521 04be 0B44     		add	r3, r3, r1
 1522 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1523 04c2 9A42     		cmp	r2, r3
 1524 04c4 21D1     		bne	.L99
 446:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1525              		.loc 1 446 0
 1526 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1527 04ca 3222     		movs	r2, #50
 1528 04cc 02FB03F3 		mul	r3, r2, r3
 1529 04d0 1A1D     		adds	r2, r3, #4
 1530 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 50


 1531 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1532 04da 0901     		lsls	r1, r1, #4
 1533 04dc 07F10800 		add	r0, r7, #8
 1534 04e0 0068     		ldr	r0, [r0]
 1535 04e2 0144     		add	r1, r1, r0
 1536 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1537 04e6 01FB03F3 		mul	r3, r1, r3
 1538 04ea 1A44     		add	r2, r2, r3
 1539 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1540 04f0 1344     		add	r3, r3, r2
 1541 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1542 04f6 0132     		adds	r2, r2, #1
 1543 04f8 D1B2     		uxtb	r1, r2
 1544 04fa D7F84422 		ldr	r2, [r7, #580]
 1545 04fe D154     		strb	r1, [r2, r3]
 447:..\src/command_processing.c ****                 i = num_menus;}              
 1546              		.loc 1 447 0
 1547 0500 07F10E03 		add	r3, r7, #14
 1548 0504 1B78     		ldrb	r3, [r3]
 1549 0506 87F85D32 		strb	r3, [r7, #605]
 1550              	.L99:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1551              		.loc 1 444 0 discriminator 2
 1552 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1553 050e 0133     		adds	r3, r3, #1
 1554 0510 87F85D32 		strb	r3, [r7, #605]
 1555              	.L98:
 444:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1556              		.loc 1 444 0 is_stmt 0 discriminator 1
 1557 0514 07F10E03 		add	r3, r7, #14
 1558 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1559 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1560 051e 9A42     		cmp	r2, r3
 1561 0520 BED3     		bcc	.L100
 448:..\src/command_processing.c ****             }
 449:..\src/command_processing.c ****             // Add empty bit + struct number
 450:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 451:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1562              		.loc 1 451 0 is_stmt 1
 1563 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1564 0526 3222     		movs	r2, #50
 1565 0528 02FB03F3 		mul	r3, r2, r3
 1566 052c 1A1D     		adds	r2, r3, #4
 1567 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1568 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1569 0536 0901     		lsls	r1, r1, #4
 1570 0538 07F10800 		add	r0, r7, #8
 1571 053c 0068     		ldr	r0, [r0]
 1572 053e 0144     		add	r1, r1, r0
 1573 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1574 0542 01FB03F3 		mul	r3, r1, r3
 1575 0546 1A44     		add	r2, r2, r3
 1576 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1577 054c 1344     		add	r3, r3, r2
 1578 054e 0233     		adds	r3, r3, #2
 1579 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1580 0554 1201     		lsls	r2, r2, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 51


 1581 0556 07F10801 		add	r1, r7, #8
 1582 055a 0968     		ldr	r1, [r1]
 1583 055c 0A44     		add	r2, r2, r1
 1584 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1585 0560 D7F84422 		ldr	r2, [r7, #580]
 1586 0564 D154     		strb	r1, [r2, r3]
 1587 0566 21E0     		b	.L101
 1588              	.L97:
 452:..\src/command_processing.c ****         }
 453:..\src/command_processing.c ****         else {
 454:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1589              		.loc 1 454 0
 1590 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1591 056c 3222     		movs	r2, #50
 1592 056e 02FB03F3 		mul	r3, r2, r3
 1593 0572 1A1D     		adds	r2, r3, #4
 1594 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1595 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1596 057c 0901     		lsls	r1, r1, #4
 1597 057e 07F10800 		add	r0, r7, #8
 1598 0582 0068     		ldr	r0, [r0]
 1599 0584 0144     		add	r1, r1, r0
 1600 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1601 0588 01FB03F3 		mul	r3, r1, r3
 1602 058c 1A44     		add	r2, r2, r3
 1603 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1604 0592 1344     		add	r3, r3, r2
 1605 0594 0133     		adds	r3, r3, #1
 1606 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1607 059a 1201     		lsls	r2, r2, #4
 1608 059c 07F10801 		add	r1, r7, #8
 1609 05a0 0968     		ldr	r1, [r1]
 1610 05a2 0A44     		add	r2, r2, r1
 1611 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1612 05a6 D7F84422 		ldr	r2, [r7, #580]
 1613 05aa D154     		strb	r1, [r2, r3]
 1614              	.L101:
 1615              	.LBE23:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1616              		.loc 1 388 0 discriminator 2
 1617 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1618 05b0 0133     		adds	r3, r3, #1
 1619 05b2 87F85F32 		strb	r3, [r7, #607]
 1620              	.L79:
 388:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1621              		.loc 1 388 0 is_stmt 0 discriminator 1
 1622 05b6 07F10F03 		add	r3, r7, #15
 1623 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1624 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 05c0 9A42     		cmp	r2, r3
 1626 05c2 FFF4B3AD 		bcc	.L102
 455:..\src/command_processing.c ****         }
 456:..\src/command_processing.c ****     }
 457:..\src/command_processing.c ****     
 458:..\src/command_processing.c ****     // Add menu
 459:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1627              		.loc 1 459 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 52


 1628 05c6 0023     		movs	r3, #0
 1629 05c8 87F85C32 		strb	r3, [r7, #604]
 1630 05cc C0E0     		b	.L103
 1631              	.L111:
 460:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1632              		.loc 1 460 0
 1633 05ce 774B     		ldr	r3, .L116
 1634 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 05d2 07F14C03 		add	r3, r7, #76
 1636 05d6 1A70     		strb	r2, [r3]
 461:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1637              		.loc 1 461 0
 1638 05d8 0023     		movs	r3, #0
 1639 05da 87F85B32 		strb	r3, [r7, #603]
 1640 05de 7AE0     		b	.L104
 1641              	.L108:
 462:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1642              		.loc 1 462 0
 1643 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1644 05e4 2C22     		movs	r2, #44
 1645 05e6 02FB03F3 		mul	r3, r2, r3
 1646 05ea 3A1D     		adds	r2, r7, #4
 1647 05ec 1268     		ldr	r2, [r2]
 1648 05ee 1A44     		add	r2, r2, r3
 1649 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1650 05f4 9B00     		lsls	r3, r3, #2
 1651 05f6 1344     		add	r3, r3, r2
 1652 05f8 5B68     		ldr	r3, [r3, #4]
 1653 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1654 05fc 002B     		cmp	r3, #0
 1655 05fe 24D1     		bne	.L105
 463:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1656              		.loc 1 463 0
 1657 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1658 0604 2C22     		movs	r2, #44
 1659 0606 02FB03F3 		mul	r3, r2, r3
 1660 060a 3A1D     		adds	r2, r7, #4
 1661 060c 1268     		ldr	r2, [r2]
 1662 060e 1344     		add	r3, r3, r2
 1663 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1664 0612 012B     		cmp	r3, #1
 1665 0614 15D1     		bne	.L106
 464:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1666              		.loc 1 464 0
 1667 0616 07F14C03 		add	r3, r7, #76
 1668 061a 1846     		mov	r0, r3
 1669 061c FFF7FEFF 		bl	strlen
 1670 0620 0346     		mov	r3, r0
 1671 0622 1A46     		mov	r2, r3
 1672 0624 07F14C03 		add	r3, r7, #76
 1673 0628 1344     		add	r3, r3, r2
 1674 062a 614A     		ldr	r2, .L116+4
 1675 062c 1D46     		mov	r5, r3
 1676 062e 1446     		mov	r4, r2
 1677 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1678 0632 2860     		str	r0, [r5]	@ unaligned
 1679 0634 6960     		str	r1, [r5, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 53


 1680 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1681 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1682 063a 2068     		ldr	r0, [r4]	@ unaligned
 1683 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1684 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1685 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1686              	.L106:
 465:..\src/command_processing.c ****                 }
 466:..\src/command_processing.c ****                 count = 10;
 1687              		.loc 1 466 0
 1688 0642 0A23     		movs	r3, #10
 1689 0644 87F85B32 		strb	r3, [r7, #603]
 1690 0648 40E0     		b	.L107
 1691              	.L105:
 467:..\src/command_processing.c ****             }            
 468:..\src/command_processing.c ****             else {
 469:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1692              		.loc 1 469 0
 1693 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1694 064e 07F11401 		add	r1, r7, #20
 1695 0652 0A22     		movs	r2, #10
 1696 0654 1846     		mov	r0, r3
 1697 0656 FFF7FEFF 		bl	itoa
 470:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1698              		.loc 1 470 0
 1699 065a 07F11402 		add	r2, r7, #20
 1700 065e 07F14C03 		add	r3, r7, #76
 1701 0662 1146     		mov	r1, r2
 1702 0664 1846     		mov	r0, r3
 1703 0666 FFF7FEFF 		bl	strcat
 471:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1704              		.loc 1 471 0
 1705 066a 07F14C03 		add	r3, r7, #76
 1706 066e 1846     		mov	r0, r3
 1707 0670 FFF7FEFF 		bl	strlen
 1708 0674 0346     		mov	r3, r0
 1709 0676 1A46     		mov	r2, r3
 1710 0678 07F14C03 		add	r3, r7, #76
 1711 067c 1344     		add	r3, r3, r2
 1712 067e 4D4A     		ldr	r2, .L116+8
 1713 0680 1068     		ldr	r0, [r2]	@ unaligned
 1714 0682 1860     		str	r0, [r3]	@ unaligned
 1715 0684 1279     		ldrb	r2, [r2, #4]
 1716 0686 1A71     		strb	r2, [r3, #4]
 472:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
 1717              		.loc 1 472 0
 1718 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1719 068c 2C22     		movs	r2, #44
 1720 068e 02FB03F3 		mul	r3, r2, r3
 1721 0692 3A1D     		adds	r2, r7, #4
 1722 0694 1268     		ldr	r2, [r2]
 1723 0696 1A44     		add	r2, r2, r3
 1724 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1725 069c 9B00     		lsls	r3, r3, #2
 1726 069e 1344     		add	r3, r3, r2
 1727 06a0 5A68     		ldr	r2, [r3, #4]
 1728 06a2 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 54


 1729 06a6 1146     		mov	r1, r2
 1730 06a8 1846     		mov	r0, r3
 1731 06aa FFF7FEFF 		bl	strcat
 473:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1732              		.loc 1 473 0
 1733 06ae 07F14C03 		add	r3, r7, #76
 1734 06b2 1846     		mov	r0, r3
 1735 06b4 FFF7FEFF 		bl	strlen
 1736 06b8 0346     		mov	r3, r0
 1737 06ba 1A46     		mov	r2, r3
 1738 06bc 07F14C03 		add	r3, r7, #76
 1739 06c0 1344     		add	r3, r3, r2
 1740 06c2 3D49     		ldr	r1, .L116+12
 1741 06c4 1A46     		mov	r2, r3
 1742 06c6 0B46     		mov	r3, r1
 1743 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1744 06ca 1380     		strh	r3, [r2]	@ unaligned
 1745              	.L107:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1746              		.loc 1 461 0 discriminator 2
 1747 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1748 06d0 0133     		adds	r3, r3, #1
 1749 06d2 87F85B32 		strb	r3, [r7, #603]
 1750              	.L104:
 461:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1751              		.loc 1 461 0 is_stmt 0 discriminator 1
 1752 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1753 06da 092B     		cmp	r3, #9
 1754 06dc 80D9     		bls	.L108
 474:..\src/command_processing.c ****             }    
 475:..\src/command_processing.c ****         }
 476:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1755              		.loc 1 476 0 is_stmt 1
 1756 06de 07F14C03 		add	r3, r7, #76
 1757 06e2 1846     		mov	r0, r3
 1758 06e4 FFF7FEFF 		bl	strlen
 1759 06e8 0346     		mov	r3, r0
 1760 06ea 87F85E32 		strb	r3, [r7, #606]
 477:..\src/command_processing.c ****         
 478:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1761              		.loc 1 478 0
 1762 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1763 06f2 87F85D32 		strb	r3, [r7, #605]
 1764 06f6 22E0     		b	.L109
 1765              	.L110:
 479:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1766              		.loc 1 479 0 discriminator 3
 1767 06f8 07F10F03 		add	r3, r7, #15
 1768 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1769 06fe 3222     		movs	r2, #50
 1770 0700 02FB03F3 		mul	r3, r2, r3
 1771 0704 9A1C     		adds	r2, r3, #2
 1772 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1773 070a 9621     		movs	r1, #150
 1774 070c 01FB03F3 		mul	r3, r1, r3
 1775 0710 1A44     		add	r2, r2, r3
 1776 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 55


 1777 0716 1A44     		add	r2, r2, r3
 1778 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1779 071c D31A     		subs	r3, r2, r3
 1780 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1781 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1782 0726 8A1A     		subs	r2, r1, r2
 1783 0728 07F14C01 		add	r1, r7, #76
 1784 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1785 072e D7F84422 		ldr	r2, [r7, #580]
 1786 0732 D154     		strb	r1, [r2, r3]
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1787              		.loc 1 478 0 discriminator 3
 1788 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1789 0738 013B     		subs	r3, r3, #1
 1790 073a 87F85D32 		strb	r3, [r7, #605]
 1791              	.L109:
 478:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1792              		.loc 1 478 0 is_stmt 0 discriminator 1
 1793 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1794 0742 002B     		cmp	r3, #0
 1795 0744 D8D1     		bne	.L110
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1796              		.loc 1 459 0 is_stmt 1 discriminator 2
 1797 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1798 074a 0133     		adds	r3, r3, #1
 1799 074c 87F85C32 		strb	r3, [r7, #604]
 1800              	.L103:
 459:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1801              		.loc 1 459 0 is_stmt 0 discriminator 1
 1802 0750 07F10E03 		add	r3, r7, #14
 1803 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1804 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1805 075a 9A42     		cmp	r2, r3
 1806 075c FFF437AF 		bcc	.L111
 480:..\src/command_processing.c ****     }
 481:..\src/command_processing.c ****         
 482:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1807              		.loc 1 482 0 is_stmt 1
 1808 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1809 0764 5C1E     		subs	r4, r3, #1
 1810 0766 D7F84422 		ldr	r2, [r7, #580]
 1811 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1812 076e DBB2     		uxtb	r3, r3
 1813 0770 013B     		subs	r3, r3, #1
 1814 0772 DBB2     		uxtb	r3, r3
 1815 0774 1946     		mov	r1, r3
 1816 0776 1046     		mov	r0, r2
 1817 0778 FFF7FEFF 		bl	LCRChecksum
 1818 077c 0346     		mov	r3, r0
 1819 077e 1A46     		mov	r2, r3
 1820 0780 D7F84432 		ldr	r3, [r7, #580]
 1821 0784 1A55     		strb	r2, [r3, r4]
 483:..\src/command_processing.c ****     
 484:..\src/command_processing.c ****     if (sendToDevice)
 1822              		.loc 1 484 0
 1823 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1824 078a 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 56


 1825 078c 07D0     		beq	.L112
 485:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1826              		.loc 1 485 0
 1827 078e D7F84432 		ldr	r3, [r7, #580]
 1828 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1829 0796 1146     		mov	r1, r2
 1830 0798 1846     		mov	r0, r3
 1831 079a FFF7FEFF 		bl	commWrite
 1832              	.L112:
 1833 079e B546     		mov	sp, r6
 486:..\src/command_processing.c ****     }
 487:..\src/command_processing.c ****     else {
 488:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 489:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 490:..\src/command_processing.c ****       // longPkgSize = packet_length;
 491:..\src/command_processing.c ****     }
 492:..\src/command_processing.c **** }
 1834              		.loc 1 492 0
 1835 07a0 00BF     		nop
 1836 07a2 07F51977 		add	r7, r7, #612
 1837              		.cfi_def_cfa_offset 28
 1838 07a6 BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1842              	.L117:
 1843              		.align	2
 1844              	.L116:
 1845 07ac 00000000 		.word	.LC8
 1846 07b0 08000000 		.word	.LC15
 1847 07b4 20000000 		.word	.LC16
 1848 07b8 28000000 		.word	.LC17
 1849              		.cfi_endproc
 1850              	.LFE68:
 1851              		.size	get_param_list, .-get_param_list
 1852              		.section	.rodata
 1853 002a 0000     		.align	2
 1854              	.LC19:
 1855 002c 44657669 		.ascii	"Device ID:\000"
 1855      63652049 
 1855      443A00
 1856 0037 00       		.align	2
 1857              	.LC20:
 1858 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1858      74687265 
 1858      73686F6C 
 1858      64733A00 
 1859              		.align	2
 1860              	.LC21:
 1861 0048 454D4720 		.ascii	"EMG max values:\000"
 1861      6D617820 
 1861      76616C75 
 1861      65733A00 
 1862              		.align	2
 1863              	.LC22:
 1864 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1864      6D617820 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 57


 1864      73706565 
 1864      64733A00 
 1865              		.align	2
 1866              	.LC23:
 1867 0068 454D4720 		.ascii	"EMG inversion:\000"
 1867      696E7665 
 1867      7273696F 
 1867      6E3A00
 1868 0077 00       		.align	2
 1869              	.LC24:
 1870 0078 4D617374 		.ascii	"Master Mode:\000"
 1870      6572204D 
 1870      6F64653A 
 1870      00
 1871 0085 000000   		.align	2
 1872              	.LC25:
 1873 0088 536C6176 		.ascii	"Slave ID:\000"
 1873      65204944 
 1873      3A00
 1874 0092 0000     		.align	2
 1875              	.LC26:
 1876 0094 536C6176 		.ascii	"Slave resolution:\000"
 1876      65207265 
 1876      736F6C75 
 1876      74696F6E 
 1876      3A00
 1877 00a6 0000     		.align	2
 1878              	.LC27:
 1879 00a8 496E7075 		.ascii	"Input mode:\000"
 1879      74206D6F 
 1879      64653A00 
 1880              		.align	2
 1881              	.LC28:
 1882 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1882      206C696D 
 1882      69747320 
 1882      5B696E66 
 1882      2C207375 
 1883              		.align	2
 1884              	.LC29:
 1885 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1885      6F746163 
 1885      74696C65 
 1885      20466565 
 1885      64626163 
 1886 00e3 00       		.align	2
 1887              	.LC30:
 1888 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1888      4368616D 
 1888      62657220 
 1888      46656564 
 1888      6261636B 
 1889 00fa 0000     		.align	2
 1890              	.LC31:
 1891 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1891      6D756D20 
 1891      736C6176 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 58


 1891      65207265 
 1891      73696475 
 1892              		.align	2
 1893              	.LC32:
 1894 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1894      6D756D20 
 1894      70726573 
 1894      73757265 
 1894      20666565 
 1895 013d 000000   		.align	2
 1896              	.LC33:
 1897 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1897      6F727469 
 1897      6F6E616C 
 1897      20707265 
 1897      73737572 
 1898 0162 0000     		.align	2
 1899              	.LC0:
 1900 0164 20557362 		.ascii	" Usb\000"
 1900      00
 1901 0169 000000   		.align	2
 1902              	.LC1:
 1903 016c 2048616E 		.ascii	" Handle\000"
 1903      646C6500 
 1904              		.align	2
 1905              	.LC2:
 1906 0174 20454D47 		.ascii	" EMG proportional\000"
 1906      2070726F 
 1906      706F7274 
 1906      696F6E61 
 1906      6C00
 1907 0186 0000     		.align	2
 1908              	.LC3:
 1909 0188 20454D47 		.ascii	" EMG Integral\000"
 1909      20496E74 
 1909      65677261 
 1909      6C00
 1910 0196 0000     		.align	2
 1911              	.LC4:
 1912 0198 20454D47 		.ascii	" EMG FCFS\000"
 1912      20464346 
 1912      5300
 1913 01a2 0000     		.align	2
 1914              	.LC5:
 1915 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
 1915      20464346 
 1915      53204164 
 1915      76616E63 
 1915      656400
 1916 01b7 00       		.align	2
 1917              	.LC6:
 1918 01b8 204A6F79 		.ascii	" Joystick\000"
 1918      73746963 
 1918      6B00
 1919 01c2 0000     		.align	2
 1920              	.LC7:
 1921 01c4 20454D47 		.ascii	" EMG proportional NC\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 59


 1921      2070726F 
 1921      706F7274 
 1921      696F6E61 
 1921      6C204E43 
 1922 01d9 000000   		.align	2
 1923              	.LC9:
 1924 01dc 204E4F00 		.ascii	" NO\000"
 1925              		.align	2
 1926              	.LC10:
 1927 01e0 20594553 		.ascii	" YES\000"
 1927      00
 1928 01e5 000000   		.align	2
 1929              	.LC11:
 1930 01e8 204F4646 		.ascii	" OFF\000"
 1930      00
 1931 01ed 000000   		.align	2
 1932              	.LC12:
 1933 01f0 204F4E00 		.ascii	" ON\000"
 1934              		.align	2
 1935              	.LC18:
 1936 01f4 01       		.byte	1
 1937 01f5 00       		.byte	0
 1938 01f6 0000     		.space	2
 1939 01f8 64010000 		.word	.LC0
 1940 01fc 6C010000 		.word	.LC1
 1941 0200 74010000 		.word	.LC2
 1942 0204 88010000 		.word	.LC3
 1943 0208 98010000 		.word	.LC4
 1944 020c A4010000 		.word	.LC5
 1945 0210 B8010000 		.word	.LC6
 1946 0214 C4010000 		.word	.LC7
 1947 0218 00000000 		.word	.LC8
 1948 021c 00000000 		.word	.LC8
 1949 0220 03       		.byte	3
 1950 0221 00       		.byte	0
 1951 0222 0000     		.space	2
 1952 0224 DC010000 		.word	.LC9
 1953 0228 E0010000 		.word	.LC10
 1954 022c 00000000 		.word	.LC8
 1955 0230 00000000 		.word	.LC8
 1956 0234 00000000 		.word	.LC8
 1957 0238 00000000 		.word	.LC8
 1958 023c 00000000 		.word	.LC8
 1959 0240 00000000 		.word	.LC8
 1960 0244 00000000 		.word	.LC8
 1961 0248 00000000 		.word	.LC8
 1962 024c 05       		.byte	5
 1963 024d 01       		.byte	1
 1964 024e 0000     		.space	2
 1965 0250 E8010000 		.word	.LC11
 1966 0254 F0010000 		.word	.LC12
 1967 0258 00000000 		.word	.LC8
 1968 025c 00000000 		.word	.LC8
 1969 0260 00000000 		.word	.LC8
 1970 0264 00000000 		.word	.LC8
 1971 0268 00000000 		.word	.LC8
 1972 026c 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 60


 1973 0270 00000000 		.word	.LC8
 1974 0274 00000000 		.word	.LC8
 1975              		.section	.text.manage_param_list,"ax",%progbits
 1976              		.align	2
 1977              		.global	manage_param_list
 1978              		.thumb
 1979              		.thumb_func
 1980              		.type	manage_param_list, %function
 1981              	manage_param_list:
 1982              	.LFB69:
 493:..\src/command_processing.c **** 
 494:..\src/command_processing.c **** //==============================================================================
 495:..\src/command_processing.c **** // MANAGE PARAM LIST
 496:..\src/command_processing.c **** //==============================================================================
 497:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 1983              		.loc 1 497 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 456
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 90B5     		push	{r4, r7, lr}
 1988              		.cfi_def_cfa_offset 12
 1989              		.cfi_offset 4, -12
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 F5B0     		sub	sp, sp, #468
 1993              		.cfi_def_cfa_offset 480
 1994 0004 02AF     		add	r7, sp, #8
 1995              		.cfi_def_cfa 7, 472
 1996 0006 0246     		mov	r2, r0
 1997 0008 BB1D     		adds	r3, r7, #6
 1998 000a 1A80     		strh	r2, [r3]	@ movhi
 1999 000c 7B1D     		adds	r3, r7, #5
 2000 000e 0A46     		mov	r2, r1
 2001 0010 1A70     		strb	r2, [r3]
 498:..\src/command_processing.c ****     uint8 CYDATA i, j;
 499:..\src/command_processing.c ****     
 500:..\src/command_processing.c ****     uint8 PARAM_IDX;
 501:..\src/command_processing.c ****          
 502:..\src/command_processing.c ****     // Arrays
 503:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2002              		.loc 1 503 0
 2003 0012 EE4B     		ldr	r3, .L134
 2004 0014 C7F8C031 		str	r3, [r7, #448]
 504:..\src/command_processing.c ****     
 505:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
 2005              		.loc 1 505 0
 2006 0018 BB1D     		adds	r3, r7, #6
 2007 001a 1B88     		ldrh	r3, [r3]
 2008 001c 002B     		cmp	r3, #0
 2009 001e 02D0     		beq	.L119
 506:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2010              		.loc 1 506 0
 2011 0020 EB4B     		ldr	r3, .L134+4
 2012 0022 C7F8C031 		str	r3, [r7, #448]
 2013              	.L119:
 507:..\src/command_processing.c ****     }
 508:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 61


 509:..\src/command_processing.c ****     struct menu menu_type;
 510:..\src/command_processing.c ****     
 511:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 512:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2014              		.loc 1 512 0
 2015 0026 EB4A     		ldr	r2, .L134+8
 2016 0028 07F58673 		add	r3, r7, #268
 2017 002c 1146     		mov	r1, r2
 2018 002e 8422     		movs	r2, #132
 2019 0030 1846     		mov	r0, r3
 2020 0032 FFF7FEFF 		bl	memcpy
 513:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 514:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 515:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 516:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 517:..\src/command_processing.c ****        };
 518:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 519:..\src/command_processing.c ****         
 520:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2021              		.loc 1 520 0
 2022 0036 0323     		movs	r3, #3
 2023 0038 87F8BF31 		strb	r3, [r7, #447]
 521:..\src/command_processing.c ****     
 522:..\src/command_processing.c ****     struct parameter param_type;   
 523:..\src/command_processing.c ****     
 524:..\src/command_processing.c ****     const struct parameter PARAM_LIST[] = {
 525:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 526:..\src/command_processing.c ****         //DEVICE_PARAMETERS    
 527:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->dev.id)                           , TYPE_UINT8      , 1         , 
 2024              		.loc 1 527 0
 2025 003c D7F8C031 		ldr	r3, [r7, #448]
 2026 0040 03F11002 		add	r2, r3, #16
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2027              		.loc 1 524 0
 2028 0044 07F10C03 		add	r3, r7, #12
 2029 0048 1A60     		str	r2, [r3]
 2030 004a 07F10C03 		add	r3, r7, #12
 2031 004e 0222     		movs	r2, #2
 2032 0050 1A71     		strb	r2, [r3, #4]
 2033 0052 07F10C03 		add	r3, r7, #12
 2034 0056 0122     		movs	r2, #1
 2035 0058 5A71     		strb	r2, [r3, #5]
 2036 005a 07F10C03 		add	r3, r7, #12
 2037 005e DE4A     		ldr	r2, .L134+12
 2038 0060 9A60     		str	r2, [r3, #8]
 2039 0062 07F10C03 		add	r3, r7, #12
 2040 0066 0022     		movs	r2, #0
 2041 0068 1A73     		strb	r2, [r3, #12]
 2042 006a 07F10C03 		add	r3, r7, #12
 2043 006e 0022     		movs	r2, #0
 2044 0070 5A73     		strb	r2, [r3, #13]
 2045 0072 07F10C03 		add	r3, r7, #12
 2046 0076 0022     		movs	r2, #0
 2047 0078 9A73     		strb	r2, [r3, #14]
 2048 007a 07F10C03 		add	r3, r7, #12
 2049 007e 0122     		movs	r2, #1
 2050 0080 DA73     		strb	r2, [r3, #15]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 62


 528:..\src/command_processing.c ****         
 529:..\src/command_processing.c ****         //EMG_PARAMETERS    
 530:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , 
 2051              		.loc 1 530 0
 2052 0082 D7F8C031 		ldr	r3, [r7, #448]
 2053 0086 03F13002 		add	r2, r3, #48
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2054              		.loc 1 524 0
 2055 008a 07F10C03 		add	r3, r7, #12
 2056 008e 1A61     		str	r2, [r3, #16]
 2057 0090 07F10C03 		add	r3, r7, #12
 2058 0094 0422     		movs	r2, #4
 2059 0096 1A75     		strb	r2, [r3, #20]
 2060 0098 07F10C03 		add	r3, r7, #12
 2061 009c 0222     		movs	r2, #2
 2062 009e 5A75     		strb	r2, [r3, #21]
 2063 00a0 07F10C03 		add	r3, r7, #12
 2064 00a4 CD4A     		ldr	r2, .L134+16
 2065 00a6 9A61     		str	r2, [r3, #24]
 2066 00a8 07F10C03 		add	r3, r7, #12
 2067 00ac 0022     		movs	r2, #0
 2068 00ae 1A77     		strb	r2, [r3, #28]
 2069 00b0 07F10C03 		add	r3, r7, #12
 2070 00b4 1E22     		movs	r2, #30
 2071 00b6 5A77     		strb	r2, [r3, #29]
 2072 00b8 07F10C03 		add	r3, r7, #12
 2073 00bc 0022     		movs	r2, #0
 2074 00be 9A77     		strb	r2, [r3, #30]
 2075 00c0 07F10C03 		add	r3, r7, #12
 2076 00c4 0122     		movs	r2, #1
 2077 00c6 DA77     		strb	r2, [r3, #31]
 531:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , 
 2078              		.loc 1 531 0
 2079 00c8 D7F8C031 		ldr	r3, [r7, #448]
 2080 00cc 03F13402 		add	r2, r3, #52
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2081              		.loc 1 524 0
 2082 00d0 07F10C03 		add	r3, r7, #12
 2083 00d4 1A62     		str	r2, [r3, #32]
 2084 00d6 07F10C03 		add	r3, r7, #12
 2085 00da 0622     		movs	r2, #6
 2086 00dc 83F82420 		strb	r2, [r3, #36]
 2087 00e0 07F10C03 		add	r3, r7, #12
 2088 00e4 0222     		movs	r2, #2
 2089 00e6 83F82520 		strb	r2, [r3, #37]
 2090 00ea 07F10C03 		add	r3, r7, #12
 2091 00ee BC4A     		ldr	r2, .L134+20
 2092 00f0 9A62     		str	r2, [r3, #40]
 2093 00f2 07F10C03 		add	r3, r7, #12
 2094 00f6 0022     		movs	r2, #0
 2095 00f8 83F82C20 		strb	r2, [r3, #44]
 2096 00fc 07F10C03 		add	r3, r7, #12
 2097 0100 1E22     		movs	r2, #30
 2098 0102 83F82D20 		strb	r2, [r3, #45]
 2099 0106 07F10C03 		add	r3, r7, #12
 2100 010a 0022     		movs	r2, #0
 2101 010c 83F82E20 		strb	r2, [r3, #46]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 63


 2102 0110 07F10C03 		add	r3, r7, #12
 2103 0114 0122     		movs	r2, #1
 2104 0116 83F82F20 		strb	r2, [r3, #47]
 532:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , 
 2105              		.loc 1 532 0
 2106 011a D7F8C031 		ldr	r3, [r7, #448]
 2107 011e 03F13C02 		add	r2, r3, #60
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2108              		.loc 1 524 0
 2109 0122 07F10C03 		add	r3, r7, #12
 2110 0126 1A63     		str	r2, [r3, #48]
 2111 0128 07F10C03 		add	r3, r7, #12
 2112 012c 0222     		movs	r2, #2
 2113 012e 83F83420 		strb	r2, [r3, #52]
 2114 0132 07F10C03 		add	r3, r7, #12
 2115 0136 0222     		movs	r2, #2
 2116 0138 83F83520 		strb	r2, [r3, #53]
 2117 013c 07F10C03 		add	r3, r7, #12
 2118 0140 A84A     		ldr	r2, .L134+24
 2119 0142 9A63     		str	r2, [r3, #56]
 2120 0144 07F10C03 		add	r3, r7, #12
 2121 0148 0022     		movs	r2, #0
 2122 014a 83F83C20 		strb	r2, [r3, #60]
 2123 014e 07F10C03 		add	r3, r7, #12
 2124 0152 1E22     		movs	r2, #30
 2125 0154 83F83D20 		strb	r2, [r3, #61]
 2126 0158 07F10C03 		add	r3, r7, #12
 2127 015c 0022     		movs	r2, #0
 2128 015e 83F83E20 		strb	r2, [r3, #62]
 2129 0162 07F10C03 		add	r3, r7, #12
 2130 0166 0122     		movs	r2, #1
 2131 0168 83F83F20 		strb	r2, [r3, #63]
 533:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , 
 2132              		.loc 1 533 0
 2133 016c D7F8C031 		ldr	r3, [r7, #448]
 2134 0170 03F13E02 		add	r2, r3, #62
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2135              		.loc 1 524 0
 2136 0174 07F10C03 		add	r3, r7, #12
 2137 0178 1A64     		str	r2, [r3, #64]
 2138 017a 07F10C03 		add	r3, r7, #12
 2139 017e 0022     		movs	r2, #0
 2140 0180 83F84420 		strb	r2, [r3, #68]
 2141 0184 07F10C03 		add	r3, r7, #12
 2142 0188 0122     		movs	r2, #1
 2143 018a 83F84520 		strb	r2, [r3, #69]
 2144 018e 07F10C03 		add	r3, r7, #12
 2145 0192 954A     		ldr	r2, .L134+28
 2146 0194 9A64     		str	r2, [r3, #72]
 2147 0196 07F10C03 		add	r3, r7, #12
 2148 019a 0322     		movs	r2, #3
 2149 019c 83F84C20 		strb	r2, [r3, #76]
 2150 01a0 07F10C03 		add	r3, r7, #12
 2151 01a4 1E22     		movs	r2, #30
 2152 01a6 83F84D20 		strb	r2, [r3, #77]
 2153 01aa 07F10C03 		add	r3, r7, #12
 2154 01ae 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 64


 2155 01b0 83F84E20 		strb	r2, [r3, #78]
 2156 01b4 07F10C03 		add	r3, r7, #12
 2157 01b8 0122     		movs	r2, #1
 2158 01ba 83F84F20 		strb	r2, [r3, #79]
 534:..\src/command_processing.c ****         
 535:..\src/command_processing.c ****         //MASTER MODE PARAMETERS
 536:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , 
 2159              		.loc 1 536 0
 2160 01be D7F8C031 		ldr	r3, [r7, #448]
 2161 01c2 03F14002 		add	r2, r3, #64
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2162              		.loc 1 524 0
 2163 01c6 07F10C03 		add	r3, r7, #12
 2164 01ca 1A65     		str	r2, [r3, #80]
 2165 01cc 07F10C03 		add	r3, r7, #12
 2166 01d0 0022     		movs	r2, #0
 2167 01d2 83F85420 		strb	r2, [r3, #84]
 2168 01d6 07F10C03 		add	r3, r7, #12
 2169 01da 0122     		movs	r2, #1
 2170 01dc 83F85520 		strb	r2, [r3, #85]
 2171 01e0 07F10C03 		add	r3, r7, #12
 2172 01e4 814A     		ldr	r2, .L134+32
 2173 01e6 9A65     		str	r2, [r3, #88]
 2174 01e8 07F10C03 		add	r3, r7, #12
 2175 01ec 0522     		movs	r2, #5
 2176 01ee 83F85C20 		strb	r2, [r3, #92]
 2177 01f2 07F10C03 		add	r3, r7, #12
 2178 01f6 5022     		movs	r2, #80
 2179 01f8 83F85D20 		strb	r2, [r3, #93]
 2180 01fc 07F10C03 		add	r3, r7, #12
 2181 0200 0022     		movs	r2, #0
 2182 0202 83F85E20 		strb	r2, [r3, #94]
 2183 0206 07F10C03 		add	r3, r7, #12
 2184 020a 0122     		movs	r2, #1
 2185 020c 83F85F20 		strb	r2, [r3, #95]
 537:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , 
 2186              		.loc 1 537 0
 2187 0210 D7F8C031 		ldr	r3, [r7, #448]
 2188 0214 03F14102 		add	r2, r3, #65
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2189              		.loc 1 524 0
 2190 0218 07F10C03 		add	r3, r7, #12
 2191 021c 1A66     		str	r2, [r3, #96]
 2192 021e 07F10C03 		add	r3, r7, #12
 2193 0222 0222     		movs	r2, #2
 2194 0224 83F86420 		strb	r2, [r3, #100]
 2195 0228 07F10C03 		add	r3, r7, #12
 2196 022c 0122     		movs	r2, #1
 2197 022e 83F86520 		strb	r2, [r3, #101]
 2198 0232 07F10C03 		add	r3, r7, #12
 2199 0236 6E4A     		ldr	r2, .L134+36
 2200 0238 9A66     		str	r2, [r3, #104]
 2201 023a 07F10C03 		add	r3, r7, #12
 2202 023e 0022     		movs	r2, #0
 2203 0240 83F86C20 		strb	r2, [r3, #108]
 2204 0244 07F10C03 		add	r3, r7, #12
 2205 0248 5022     		movs	r2, #80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 65


 2206 024a 83F86D20 		strb	r2, [r3, #109]
 2207 024e 07F10C03 		add	r3, r7, #12
 2208 0252 0022     		movs	r2, #0
 2209 0254 83F86E20 		strb	r2, [r3, #110]
 2210 0258 07F10C03 		add	r3, r7, #12
 2211 025c 0122     		movs	r2, #1
 2212 025e 83F86F20 		strb	r2, [r3, #111]
 538:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , 
 2213              		.loc 1 538 0
 2214 0262 D7F8C031 		ldr	r3, [r7, #448]
 2215 0266 03F12902 		add	r2, r3, #41
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2216              		.loc 1 524 0
 2217 026a 07F10C03 		add	r3, r7, #12
 2218 026e 1A67     		str	r2, [r3, #112]
 2219 0270 07F10C03 		add	r3, r7, #12
 2220 0274 0222     		movs	r2, #2
 2221 0276 83F87420 		strb	r2, [r3, #116]
 2222 027a 07F10C03 		add	r3, r7, #12
 2223 027e 0122     		movs	r2, #1
 2224 0280 83F87520 		strb	r2, [r3, #117]
 2225 0284 07F10C03 		add	r3, r7, #12
 2226 0288 5A4A     		ldr	r2, .L134+40
 2227 028a 9A67     		str	r2, [r3, #120]
 2228 028c 07F10C03 		add	r3, r7, #12
 2229 0290 0022     		movs	r2, #0
 2230 0292 83F87C20 		strb	r2, [r3, #124]
 2231 0296 07F10C03 		add	r3, r7, #12
 2232 029a 5022     		movs	r2, #80
 2233 029c 83F87D20 		strb	r2, [r3, #125]
 2234 02a0 07F10C03 		add	r3, r7, #12
 2235 02a4 0022     		movs	r2, #0
 2236 02a6 83F87E20 		strb	r2, [r3, #126]
 2237 02aa 07F10C03 		add	r3, r7, #12
 2238 02ae 0122     		movs	r2, #1
 2239 02b0 83F87F20 		strb	r2, [r3, #127]
 539:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , 
 2240              		.loc 1 539 0
 2241 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2242 02b8 03F12802 		add	r2, r3, #40
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2243              		.loc 1 524 0
 2244 02bc 07F10C03 		add	r3, r7, #12
 2245 02c0 C3F88020 		str	r2, [r3, #128]
 2246 02c4 07F10C03 		add	r3, r7, #12
 2247 02c8 0022     		movs	r2, #0
 2248 02ca 83F88420 		strb	r2, [r3, #132]
 2249 02ce 07F10C03 		add	r3, r7, #12
 2250 02d2 0122     		movs	r2, #1
 2251 02d4 83F88520 		strb	r2, [r3, #133]
 2252 02d8 07F10C03 		add	r3, r7, #12
 2253 02dc 464A     		ldr	r2, .L134+44
 2254 02de C3F88820 		str	r2, [r3, #136]
 2255 02e2 07F10C03 		add	r3, r7, #12
 2256 02e6 0122     		movs	r2, #1
 2257 02e8 83F88C20 		strb	r2, [r3, #140]
 2258 02ec 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 66


 2259 02f0 5022     		movs	r2, #80
 2260 02f2 83F88D20 		strb	r2, [r3, #141]
 2261 02f6 07F10C03 		add	r3, r7, #12
 2262 02fa 0322     		movs	r2, #3
 2263 02fc 83F88E20 		strb	r2, [r3, #142]
 2264 0300 07F10C03 		add	r3, r7, #12
 2265 0304 0122     		movs	r2, #1
 2266 0306 83F88F20 		strb	r2, [r3, #143]
 540:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , 
 2267              		.loc 1 540 0
 2268 030a D7F8C031 		ldr	r3, [r7, #448]
 2269 030e 03F12002 		add	r2, r3, #32
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2270              		.loc 1 524 0
 2271 0312 07F10C03 		add	r3, r7, #12
 2272 0316 C3F89020 		str	r2, [r3, #144]
 2273 031a 07F10C03 		add	r3, r7, #12
 2274 031e 0522     		movs	r2, #5
 2275 0320 83F89420 		strb	r2, [r3, #148]
 2276 0324 07F10C03 		add	r3, r7, #12
 2277 0328 0222     		movs	r2, #2
 2278 032a 83F89520 		strb	r2, [r3, #149]
 2279 032e 07F10C03 		add	r3, r7, #12
 2280 0332 324A     		ldr	r2, .L134+48
 2281 0334 C3F89820 		str	r2, [r3, #152]
 2282 0338 07F10C03 		add	r3, r7, #12
 2283 033c 0022     		movs	r2, #0
 2284 033e 83F89C20 		strb	r2, [r3, #156]
 2285 0342 07F10C03 		add	r3, r7, #12
 2286 0346 5022     		movs	r2, #80
 2287 0348 83F89D20 		strb	r2, [r3, #157]
 2288 034c 07F10C03 		add	r3, r7, #12
 2289 0350 0522     		movs	r2, #5
 2290 0352 83F89E20 		strb	r2, [r3, #158]
 2291 0356 07F10C03 		add	r3, r7, #12
 2292 035a 0122     		movs	r2, #1
 2293 035c 83F89F20 		strb	r2, [r3, #159]
 541:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , 
 2294              		.loc 1 541 0
 2295 0360 D7F8C031 		ldr	r3, [r7, #448]
 2296 0364 03F15C02 		add	r2, r3, #92
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2297              		.loc 1 524 0
 2298 0368 07F10C03 		add	r3, r7, #12
 2299 036c C3F8A020 		str	r2, [r3, #160]
 2300 0370 07F10C03 		add	r3, r7, #12
 2301 0374 0022     		movs	r2, #0
 2302 0376 83F8A420 		strb	r2, [r3, #164]
 2303 037a 07F10C03 		add	r3, r7, #12
 2304 037e 0122     		movs	r2, #1
 2305 0380 83F8A520 		strb	r2, [r3, #165]
 2306 0384 07F10C03 		add	r3, r7, #12
 2307 0388 1D4A     		ldr	r2, .L134+52
 2308 038a C3F8A820 		str	r2, [r3, #168]
 2309 038e 07F10C03 		add	r3, r7, #12
 2310 0392 0522     		movs	r2, #5
 2311 0394 83F8AC20 		strb	r2, [r3, #172]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 67


 2312 0398 07F10C03 		add	r3, r7, #12
 2313 039c 5022     		movs	r2, #80
 2314 039e 83F8AD20 		strb	r2, [r3, #173]
 2315 03a2 07F10C03 		add	r3, r7, #12
 2316 03a6 0022     		movs	r2, #0
 2317 03a8 83F8AE20 		strb	r2, [r3, #174]
 2318 03ac 07F10C03 		add	r3, r7, #12
 2319 03b0 0122     		movs	r2, #1
 2320 03b2 83F8AF20 		strb	r2, [r3, #175]
 542:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , 
 2321              		.loc 1 542 0
 2322 03b6 D7F8C031 		ldr	r3, [r7, #448]
 2323 03ba 03F15D02 		add	r2, r3, #93
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2324              		.loc 1 524 0
 2325 03be 07F10C03 		add	r3, r7, #12
 2326 03c2 C3F8B020 		str	r2, [r3, #176]
 2327 03c6 07F10C03 		add	r3, r7, #12
 2328 03ca 1BE0     		b	.L135
 2329              	.L136:
 2330              		.align	2
 2331              	.L134:
 2332 03cc 00000000 		.word	c_mem
 2333 03d0 00000000 		.word	g_mem
 2334 03d4 F4010000 		.word	.LC18
 2335 03d8 2C000000 		.word	.LC19
 2336 03dc 38000000 		.word	.LC20
 2337 03e0 48000000 		.word	.LC21
 2338 03e4 58000000 		.word	.LC22
 2339 03e8 68000000 		.word	.LC23
 2340 03ec 78000000 		.word	.LC24
 2341 03f0 88000000 		.word	.LC25
 2342 03f4 94000000 		.word	.LC26
 2343 03f8 A8000000 		.word	.LC27
 2344 03fc B4000000 		.word	.LC28
 2345 0400 CC000000 		.word	.LC29
 2346              	.L135:
 2347 0404 0022     		movs	r2, #0
 2348 0406 83F8B420 		strb	r2, [r3, #180]
 2349 040a 07F10C03 		add	r3, r7, #12
 2350 040e 0122     		movs	r2, #1
 2351 0410 83F8B520 		strb	r2, [r3, #181]
 2352 0414 07F10C03 		add	r3, r7, #12
 2353 0418 C04A     		ldr	r2, .L137
 2354 041a C3F8B820 		str	r2, [r3, #184]
 2355 041e 07F10C03 		add	r3, r7, #12
 2356 0422 0522     		movs	r2, #5
 2357 0424 83F8BC20 		strb	r2, [r3, #188]
 2358 0428 07F10C03 		add	r3, r7, #12
 2359 042c 5022     		movs	r2, #80
 2360 042e 83F8BD20 		strb	r2, [r3, #189]
 2361 0432 07F10C03 		add	r3, r7, #12
 2362 0436 0022     		movs	r2, #0
 2363 0438 83F8BE20 		strb	r2, [r3, #190]
 2364 043c 07F10C03 		add	r3, r7, #12
 2365 0440 0122     		movs	r2, #1
 2366 0442 83F8BF20 		strb	r2, [r3, #191]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 68


 543:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , 
 2367              		.loc 1 543 0
 2368 0446 D7F8C031 		ldr	r3, [r7, #448]
 2369 044a 03F15002 		add	r2, r3, #80
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2370              		.loc 1 524 0
 2371 044e 07F10C03 		add	r3, r7, #12
 2372 0452 C3F8C020 		str	r2, [r3, #192]
 2373 0456 07F10C03 		add	r3, r7, #12
 2374 045a 0522     		movs	r2, #5
 2375 045c 83F8C420 		strb	r2, [r3, #196]
 2376 0460 07F10C03 		add	r3, r7, #12
 2377 0464 0122     		movs	r2, #1
 2378 0466 83F8C520 		strb	r2, [r3, #197]
 2379 046a 07F10C03 		add	r3, r7, #12
 2380 046e AC4A     		ldr	r2, .L137+4
 2381 0470 C3F8C820 		str	r2, [r3, #200]
 2382 0474 07F10C03 		add	r3, r7, #12
 2383 0478 0022     		movs	r2, #0
 2384 047a 83F8CC20 		strb	r2, [r3, #204]
 2385 047e 07F10C03 		add	r3, r7, #12
 2386 0482 5022     		movs	r2, #80
 2387 0484 83F8CD20 		strb	r2, [r3, #205]
 2388 0488 07F10C03 		add	r3, r7, #12
 2389 048c 0022     		movs	r2, #0
 2390 048e 83F8CE20 		strb	r2, [r3, #206]
 2391 0492 07F10C03 		add	r3, r7, #12
 2392 0496 0122     		movs	r2, #1
 2393 0498 83F8CF20 		strb	r2, [r3, #207]
 544:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , 
 2394              		.loc 1 544 0
 2395 049c D7F8C031 		ldr	r3, [r7, #448]
 2396 04a0 03F15402 		add	r2, r3, #84
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2397              		.loc 1 524 0
 2398 04a4 07F10C03 		add	r3, r7, #12
 2399 04a8 C3F8D020 		str	r2, [r3, #208]
 2400 04ac 07F10C03 		add	r3, r7, #12
 2401 04b0 0722     		movs	r2, #7
 2402 04b2 83F8D420 		strb	r2, [r3, #212]
 2403 04b6 07F10C03 		add	r3, r7, #12
 2404 04ba 0122     		movs	r2, #1
 2405 04bc 83F8D520 		strb	r2, [r3, #213]
 2406 04c0 07F10C03 		add	r3, r7, #12
 2407 04c4 974A     		ldr	r2, .L137+8
 2408 04c6 C3F8D820 		str	r2, [r3, #216]
 2409 04ca 07F10C03 		add	r3, r7, #12
 2410 04ce 0022     		movs	r2, #0
 2411 04d0 83F8DC20 		strb	r2, [r3, #220]
 2412 04d4 07F10C03 		add	r3, r7, #12
 2413 04d8 5022     		movs	r2, #80
 2414 04da 83F8DD20 		strb	r2, [r3, #221]
 2415 04de 07F10C03 		add	r3, r7, #12
 2416 04e2 0022     		movs	r2, #0
 2417 04e4 83F8DE20 		strb	r2, [r3, #222]
 2418 04e8 07F10C03 		add	r3, r7, #12
 2419 04ec 0122     		movs	r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 69


 2420 04ee 83F8DF20 		strb	r2, [r3, #223]
 545:..\src/command_processing.c ****         {(uint8* const) &(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , 
 2421              		.loc 1 545 0
 2422 04f2 D7F8C031 		ldr	r3, [r7, #448]
 2423 04f6 03F15802 		add	r2, r3, #88
 524:..\src/command_processing.c ****     //  {VAR_P                                                     , TYPES           , NUM_ITEMS , 
 2424              		.loc 1 524 0
 2425 04fa 07F10C03 		add	r3, r7, #12
 2426 04fe C3F8E020 		str	r2, [r3, #224]
 2427 0502 07F10C03 		add	r3, r7, #12
 2428 0506 0722     		movs	r2, #7
 2429 0508 83F8E420 		strb	r2, [r3, #228]
 2430 050c 07F10C03 		add	r3, r7, #12
 2431 0510 0122     		movs	r2, #1
 2432 0512 83F8E520 		strb	r2, [r3, #229]
 2433 0516 07F10C03 		add	r3, r7, #12
 2434 051a 834A     		ldr	r2, .L137+12
 2435 051c C3F8E820 		str	r2, [r3, #232]
 2436 0520 07F10C03 		add	r3, r7, #12
 2437 0524 0022     		movs	r2, #0
 2438 0526 83F8EC20 		strb	r2, [r3, #236]
 2439 052a 07F10C03 		add	r3, r7, #12
 2440 052e 5022     		movs	r2, #80
 2441 0530 83F8ED20 		strb	r2, [r3, #237]
 2442 0534 07F10C03 		add	r3, r7, #12
 2443 0538 0022     		movs	r2, #0
 2444 053a 83F8EE20 		strb	r2, [r3, #238]
 2445 053e 07F10C03 		add	r3, r7, #12
 2446 0542 0122     		movs	r2, #1
 2447 0544 83F8EF20 		strb	r2, [r3, #239]
 546:..\src/command_processing.c ****     };
 547:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);  
 2448              		.loc 1 547 0
 2449 0548 0F23     		movs	r3, #15
 2450 054a 87F8BE31 		strb	r3, [r7, #446]
 548:..\src/command_processing.c ****     
 549:..\src/command_processing.c **** 
 550:..\src/command_processing.c ****     if (!index) {
 2451              		.loc 1 550 0
 2452 054e BB1D     		adds	r3, r7, #6
 2453 0550 1B88     		ldrh	r3, [r3]
 2454 0552 002B     		cmp	r3, #0
 2455 0554 0ED1     		bne	.L120
 551:..\src/command_processing.c ****         // Get parameters list with relative types
 552:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2456              		.loc 1 552 0
 2457 0556 07F58674 		add	r4, r7, #268
 2458 055a 07F10C02 		add	r2, r7, #12
 2459 055e 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2460 0562 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2461 0566 7B1D     		adds	r3, r7, #5
 2462 0568 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2463 056a 0093     		str	r3, [sp]
 2464 056c 2346     		mov	r3, r4
 2465 056e FFF7FEFF 		bl	get_param_list
 553:..\src/command_processing.c ****     }   
 554:..\src/command_processing.c ****     else if  (index == 300) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 70


 555:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 556:..\src/command_processing.c ****         qbadminp_string(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST);
 557:..\src/command_processing.c ****     }
 558:..\src/command_processing.c **** 
 559:..\src/command_processing.c ****     else {
 560:..\src/command_processing.c ****          // Set specific parameter        
 561:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 562:..\src/command_processing.c ****         
 563:..\src/command_processing.c ****         // Find size of data
 564:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 565:..\src/command_processing.c ****    
 566:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 567:..\src/command_processing.c ****             // Use default specifications for param setting
 568:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 569:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 570:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 571:..\src/command_processing.c ****                 }
 572:..\src/command_processing.c ****             } 
 573:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 574:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 575:..\src/command_processing.c ****         }
 576:..\src/command_processing.c ****         
 577:..\src/command_processing.c ****         else {  
 578:..\src/command_processing.c ****             // Use custom specifications for param setting
 579:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 580:..\src/command_processing.c ****         }
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****        
 583:..\src/command_processing.c ****         // Perform chip reset if needed
 584:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 585:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 586:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 587:..\src/command_processing.c ****             }   
 588:..\src/command_processing.c ****         }
 589:..\src/command_processing.c ****     }
 590:..\src/command_processing.c **** } 
 2466              		.loc 1 590 0
 2467 0572 CEE0     		b	.L133
 2468              	.L120:
 554:..\src/command_processing.c ****         // Called only by prepre_generic_info to get data  from the parameters to print
 2469              		.loc 1 554 0
 2470 0574 BB1D     		adds	r3, r7, #6
 2471 0576 1B88     		ldrh	r3, [r3]
 2472 0578 B3F5967F 		cmp	r3, #300
 2473 057c 0AD1     		bne	.L122
 556:..\src/command_processing.c ****     }
 2474              		.loc 1 556 0
 2475 057e 07F58673 		add	r3, r7, #268
 2476 0582 07F10C02 		add	r2, r7, #12
 2477 0586 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2478 058a 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2479 058e FFF7FEFF 		bl	qbadminp_string
 2480              		.loc 1 590 0
 2481 0592 BEE0     		b	.L133
 2482              	.L122:
 2483              	.LBB24:
 561:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 71


 2484              		.loc 1 561 0
 2485 0594 BB1D     		adds	r3, r7, #6
 2486 0596 1B88     		ldrh	r3, [r3]	@ movhi
 2487 0598 DBB2     		uxtb	r3, r3
 2488 059a 013B     		subs	r3, r3, #1
 2489 059c 87F8BD31 		strb	r3, [r7, #445]
 564:..\src/command_processing.c ****    
 2490              		.loc 1 564 0
 2491 05a0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2492 05a4 07F10C02 		add	r2, r7, #12
 2493 05a8 1B01     		lsls	r3, r3, #4
 2494 05aa 1344     		add	r3, r3, r2
 2495 05ac 0433     		adds	r3, r3, #4
 2496 05ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2497 05b0 1846     		mov	r0, r3
 2498 05b2 FFF7FEFF 		bl	num_of_bytes
 2499 05b6 0346     		mov	r3, r0
 2500 05b8 87F8BC31 		strb	r3, [r7, #444]
 566:..\src/command_processing.c ****             // Use default specifications for param setting
 2501              		.loc 1 566 0
 2502 05bc 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2503 05c0 07F10C02 		add	r2, r7, #12
 2504 05c4 1B01     		lsls	r3, r3, #4
 2505 05c6 1344     		add	r3, r3, r2
 2506 05c8 0E33     		adds	r3, r3, #14
 2507 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2508 05cc 002B     		cmp	r3, #0
 2509 05ce 5BD1     		bne	.L123
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2510              		.loc 1 568 0
 2511 05d0 0023     		movs	r3, #0
 2512 05d2 87F8C731 		strb	r3, [r7, #455]
 2513 05d6 2FE0     		b	.L124
 2514              	.L127:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2515              		.loc 1 569 0
 2516 05d8 0023     		movs	r3, #0
 2517 05da 87F8C631 		strb	r3, [r7, #454]
 2518 05de 1EE0     		b	.L125
 2519              	.L126:
 570:..\src/command_processing.c ****                 }
 2520              		.loc 1 570 0 discriminator 3
 2521 05e0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2522 05e4 07F10C02 		add	r2, r7, #12
 2523 05e8 1B01     		lsls	r3, r3, #4
 2524 05ea 1344     		add	r3, r3, r2
 2525 05ec 1A68     		ldr	r2, [r3]
 2526 05ee 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2527 05f2 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2528 05f6 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2529 05fa 411A     		subs	r1, r0, r1
 2530 05fc 0B44     		add	r3, r3, r1
 2531 05fe 013B     		subs	r3, r3, #1
 2532 0600 1344     		add	r3, r3, r2
 2533 0602 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2534 0606 D11C     		adds	r1, r2, #3
 2535 0608 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 72


 2536 060c 0A44     		add	r2, r2, r1
 2537 060e 4749     		ldr	r1, .L137+16
 2538 0610 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2539 0612 1A70     		strb	r2, [r3]
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2540              		.loc 1 569 0 discriminator 3
 2541 0614 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2542 0618 0133     		adds	r3, r3, #1
 2543 061a 87F8C631 		strb	r3, [r7, #454]
 2544              	.L125:
 569:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2545              		.loc 1 569 0 is_stmt 0 discriminator 1
 2546 061e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2547 0622 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2548 0626 9A42     		cmp	r2, r3
 2549 0628 DAD3     		bcc	.L126
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 568 0 is_stmt 1 discriminator 2
 2551 062a 97F8C721 		ldrb	r2, [r7, #455]
 2552 062e 97F8BC31 		ldrb	r3, [r7, #444]
 2553 0632 1344     		add	r3, r3, r2
 2554 0634 87F8C731 		strb	r3, [r7, #455]
 2555              	.L124:
 568:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2556              		.loc 1 568 0 is_stmt 0 discriminator 1
 2557 0638 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2558 063c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2559 0640 07F10C01 		add	r1, r7, #12
 2560 0644 1B01     		lsls	r3, r3, #4
 2561 0646 0B44     		add	r3, r3, r1
 2562 0648 0533     		adds	r3, r3, #5
 2563 064a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 064c 1946     		mov	r1, r3
 2565 064e 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2566 0652 03FB01F3 		mul	r3, r3, r1
 2567 0656 9A42     		cmp	r2, r3
 2568 0658 BEDB     		blt	.L127
 573:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2569              		.loc 1 573 0 is_stmt 1
 2570 065a 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2571 065e 07F10C02 		add	r2, r7, #12
 2572 0662 1B01     		lsls	r3, r3, #4
 2573 0664 1344     		add	r3, r3, r2
 2574 0666 0433     		adds	r3, r3, #4
 2575 0668 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2576 066a 092B     		cmp	r3, #9
 2577 066c 15D1     		bne	.L129
 574:..\src/command_processing.c ****         }
 2578              		.loc 1 574 0
 2579 066e 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2580 0672 07F10C02 		add	r2, r7, #12
 2581 0676 1B01     		lsls	r3, r3, #4
 2582 0678 1344     		add	r3, r3, r2
 2583 067a 1A68     		ldr	r2, [r3]
 2584 067c 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2585 0680 1344     		add	r3, r3, r2
 2586 0682 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 73


 2587 0684 1A70     		strb	r2, [r3]
 2588 0686 08E0     		b	.L129
 2589              	.L123:
 579:..\src/command_processing.c ****         }
 2590              		.loc 1 579 0
 2591 0688 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2592 068c 9BB2     		uxth	r3, r3
 2593 068e 07F10C02 		add	r2, r7, #12
 2594 0692 1146     		mov	r1, r2
 2595 0694 1846     		mov	r0, r3
 2596 0696 FFF7FEFF 		bl	set_custom_param
 2597              	.L129:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2598              		.loc 1 584 0
 2599 069a 0023     		movs	r3, #0
 2600 069c 87F8C731 		strb	r3, [r7, #455]
 2601 06a0 31E0     		b	.L130
 2602              	.L132:
 585:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2603              		.loc 1 585 0
 2604 06a2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2605 06a6 2C22     		movs	r2, #44
 2606 06a8 02FB03F3 		mul	r3, r2, r3
 2607 06ac 07F5E472 		add	r2, r7, #456
 2608 06b0 1344     		add	r3, r3, r2
 2609 06b2 BC3B     		subs	r3, r3, #188
 2610 06b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2611 06b6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2612 06ba 07F10C01 		add	r1, r7, #12
 2613 06be 1B01     		lsls	r3, r3, #4
 2614 06c0 0B44     		add	r3, r3, r1
 2615 06c2 0C33     		adds	r3, r3, #12
 2616 06c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 06c6 9A42     		cmp	r2, r3
 2618 06c8 0CBF     		ite	eq
 2619 06ca 0123     		moveq	r3, #1
 2620 06cc 0023     		movne	r3, #0
 2621 06ce DAB2     		uxtb	r2, r3
 2622 06d0 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2623 06d4 2C21     		movs	r1, #44
 2624 06d6 01FB03F3 		mul	r3, r1, r3
 2625 06da 07F5E471 		add	r1, r7, #456
 2626 06de 0B44     		add	r3, r3, r1
 2627 06e0 BB3B     		subs	r3, r3, #187
 2628 06e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 06e4 012B     		cmp	r3, #1
 2630 06e6 0CBF     		ite	eq
 2631 06e8 0123     		moveq	r3, #1
 2632 06ea 0023     		movne	r3, #0
 2633 06ec DBB2     		uxtb	r3, r3
 2634 06ee 1340     		ands	r3, r3, r2
 2635 06f0 DBB2     		uxtb	r3, r3
 2636 06f2 002B     		cmp	r3, #0
 2637 06f4 02D0     		beq	.L131
 586:..\src/command_processing.c ****             }   
 2638              		.loc 1 586 0
 2639 06f6 0E4B     		ldr	r3, .L137+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 74


 2640 06f8 0122     		movs	r2, #1
 2641 06fa 1A70     		strb	r2, [r3]
 2642              	.L131:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2643              		.loc 1 584 0 discriminator 2
 2644 06fc 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 0700 0133     		adds	r3, r3, #1
 2646 0702 87F8C731 		strb	r3, [r7, #455]
 2647              	.L130:
 584:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2648              		.loc 1 584 0 is_stmt 0 discriminator 1
 2649 0706 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2650 070a 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2651 070e 9A42     		cmp	r2, r3
 2652 0710 C7D3     		bcc	.L132
 2653              	.L133:
 2654              	.LBE24:
 2655              		.loc 1 590 0 is_stmt 1
 2656 0712 00BF     		nop
 2657 0714 07F5E677 		add	r7, r7, #460
 2658              		.cfi_def_cfa_offset 12
 2659 0718 BD46     		mov	sp, r7
 2660              		.cfi_def_cfa_register 13
 2661              		@ sp needed
 2662 071a 90BD     		pop	{r4, r7, pc}
 2663              	.L138:
 2664              		.align	2
 2665              	.L137:
 2666 071c E4000000 		.word	.LC30
 2667 0720 FC000000 		.word	.LC31
 2668 0724 1C010000 		.word	.LC32
 2669 0728 40010000 		.word	.LC33
 2670 072c 00000000 		.word	g_rx
 2671 0730 00000000 		.word	reset_PSoC_flag
 2672              		.cfi_endproc
 2673              	.LFE69:
 2674              		.size	manage_param_list, .-manage_param_list
 2675              		.section	.text.set_custom_param,"ax",%progbits
 2676              		.align	2
 2677              		.global	set_custom_param
 2678              		.thumb
 2679              		.thumb_func
 2680              		.type	set_custom_param, %function
 2681              	set_custom_param:
 2682              	.LFB70:
 591:..\src/command_processing.c **** 
 592:..\src/command_processing.c **** 
 593:..\src/command_processing.c **** //==============================================================================
 594:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 595:..\src/command_processing.c **** //==============================================================================
 596:..\src/command_processing.c **** 
 597:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2683              		.loc 1 597 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 16
 2686              		@ frame_needed = 1, uses_anonymous_args = 0
 2687 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 75


 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 7, -8
 2690              		.cfi_offset 14, -4
 2691 0002 84B0     		sub	sp, sp, #16
 2692              		.cfi_def_cfa_offset 24
 2693 0004 00AF     		add	r7, sp, #0
 2694              		.cfi_def_cfa_register 7
 2695 0006 0346     		mov	r3, r0
 2696 0008 3960     		str	r1, [r7]
 2697 000a FB80     		strh	r3, [r7, #6]	@ movhi
 598:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2698              		.loc 1 598 0
 2699 000c FB88     		ldrh	r3, [r7, #6]
 2700 000e 1B01     		lsls	r3, r3, #4
 2701 0010 3A68     		ldr	r2, [r7]
 2702 0012 1344     		add	r3, r3, r2
 2703 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2704 0016 1846     		mov	r0, r3
 2705 0018 FFF7FEFF 		bl	num_of_bytes
 2706 001c 0346     		mov	r3, r0
 2707 001e 7B73     		strb	r3, [r7, #13]
 599:..\src/command_processing.c **** 
 600:..\src/command_processing.c ****     uint8 CYDATA i, j;
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2708              		.loc 1 602 0
 2709 0020 FB88     		ldrh	r3, [r7, #6]
 2710 0022 1B01     		lsls	r3, r3, #4
 2711 0024 3A68     		ldr	r2, [r7]
 2712 0026 1344     		add	r3, r3, r2
 2713 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2714 002a 032B     		cmp	r3, #3
 2715 002c 02D0     		beq	.L141
 2716 002e 052B     		cmp	r3, #5
 2717 0030 06D0     		beq	.L142
 2718 0032 36E0     		b	.L149
 2719              	.L141:
 603:..\src/command_processing.c ****         
 604:..\src/command_processing.c ****             
 605:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 606:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2720              		.loc 1 606 0
 2721 0034 3D4B     		ldr	r3, .L151
 2722 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2723 0038 3D4B     		ldr	r3, .L151+4
 2724 003a 83F82820 		strb	r2, [r3, #40]
 607:..\src/command_processing.c ****             break;   
 2725              		.loc 1 607 0
 2726 003e 71E0     		b	.L143
 2727              	.L142:
 608:..\src/command_processing.c **** 
 609:..\src/command_processing.c ****         
 610:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 611:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2728              		.loc 1 611 0
 2729 0040 3A4B     		ldr	r3, .L151
 2730 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 76


 2731 0044 1A06     		lsls	r2, r3, #24
 2732 0046 394B     		ldr	r3, .L151
 2733 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2734 004a 1B04     		lsls	r3, r3, #16
 2735 004c 1A43     		orrs	r2, r2, r3
 2736 004e 374B     		ldr	r3, .L151
 2737 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2738 0052 1B02     		lsls	r3, r3, #8
 2739 0054 1343     		orrs	r3, r3, r2
 2740 0056 354A     		ldr	r2, .L151
 2741 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2742 005a 1343     		orrs	r3, r3, r2
 2743 005c 344A     		ldr	r2, .L151+4
 2744 005e 1362     		str	r3, [r2, #32]
 612:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2745              		.loc 1 612 0
 2746 0060 324B     		ldr	r3, .L151
 2747 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2748 0064 1A06     		lsls	r2, r3, #24
 2749 0066 314B     		ldr	r3, .L151
 2750 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2751 006a 1B04     		lsls	r3, r3, #16
 2752 006c 1A43     		orrs	r2, r2, r3
 2753 006e 2F4B     		ldr	r3, .L151
 2754 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2755 0072 1B02     		lsls	r3, r3, #8
 2756 0074 1343     		orrs	r3, r3, r2
 2757 0076 2D4A     		ldr	r2, .L151
 2758 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2759 007a 1343     		orrs	r3, r3, r2
 2760 007c 2C4A     		ldr	r2, .L151+4
 2761 007e 5362     		str	r3, [r2, #36]
 613:..\src/command_processing.c **** 
 614:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2762              		.loc 1 614 0
 2763 0080 2B4B     		ldr	r3, .L151+4
 2764 0082 1B6A     		ldr	r3, [r3, #32]
 2765 0084 2A4A     		ldr	r2, .L151+4
 2766 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2767 008a 9340     		lsls	r3, r3, r2
 2768 008c 284A     		ldr	r2, .L151+4
 2769 008e 1362     		str	r3, [r2, #32]
 615:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2770              		.loc 1 615 0
 2771 0090 274B     		ldr	r3, .L151+4
 2772 0092 5B6A     		ldr	r3, [r3, #36]
 2773 0094 264A     		ldr	r2, .L151+4
 2774 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2775 009a 9340     		lsls	r3, r3, r2
 2776 009c 244A     		ldr	r2, .L151+4
 2777 009e 5362     		str	r3, [r2, #36]
 616:..\src/command_processing.c ****             break;            
 2778              		.loc 1 616 0
 2779 00a0 40E0     		b	.L143
 2780              	.L149:
 617:..\src/command_processing.c ****             default:
 618:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 77


 619:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2781              		.loc 1 619 0
 2782 00a2 0023     		movs	r3, #0
 2783 00a4 FB73     		strb	r3, [r7, #15]
 2784 00a6 20E0     		b	.L144
 2785              	.L147:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2786              		.loc 1 620 0
 2787 00a8 0023     		movs	r3, #0
 2788 00aa BB73     		strb	r3, [r7, #14]
 2789 00ac 15E0     		b	.L145
 2790              	.L146:
 621:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2791              		.loc 1 621 0 discriminator 3
 2792 00ae FB88     		ldrh	r3, [r7, #6]
 2793 00b0 1B01     		lsls	r3, r3, #4
 2794 00b2 3A68     		ldr	r2, [r7]
 2795 00b4 1344     		add	r3, r3, r2
 2796 00b6 1A68     		ldr	r2, [r3]
 2797 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2798 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2799 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2800 00be 411A     		subs	r1, r0, r1
 2801 00c0 0B44     		add	r3, r3, r1
 2802 00c2 013B     		subs	r3, r3, #1
 2803 00c4 1344     		add	r3, r3, r2
 2804 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2805 00c8 D11C     		adds	r1, r2, #3
 2806 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2807 00cc 0A44     		add	r2, r2, r1
 2808 00ce 1749     		ldr	r1, .L151
 2809 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2810 00d2 1A70     		strb	r2, [r3]
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2811              		.loc 1 620 0 discriminator 3
 2812 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2813 00d6 0133     		adds	r3, r3, #1
 2814 00d8 BB73     		strb	r3, [r7, #14]
 2815              	.L145:
 620:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2816              		.loc 1 620 0 is_stmt 0 discriminator 1
 2817 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2818 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2819 00de 9A42     		cmp	r2, r3
 2820 00e0 E5D3     		bcc	.L146
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2821              		.loc 1 619 0 is_stmt 1 discriminator 2
 2822 00e2 FA7B     		ldrb	r2, [r7, #15]
 2823 00e4 7B7B     		ldrb	r3, [r7, #13]
 2824 00e6 1344     		add	r3, r3, r2
 2825 00e8 FB73     		strb	r3, [r7, #15]
 2826              	.L144:
 619:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2827              		.loc 1 619 0 is_stmt 0 discriminator 1
 2828 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2829 00ec FB88     		ldrh	r3, [r7, #6]
 2830 00ee 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 78


 2831 00f0 3968     		ldr	r1, [r7]
 2832 00f2 0B44     		add	r3, r3, r1
 2833 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2834 00f6 1946     		mov	r1, r3
 2835 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2836 00fa 03FB01F3 		mul	r3, r3, r1
 2837 00fe 9A42     		cmp	r2, r3
 2838 0100 D2DB     		blt	.L147
 622:..\src/command_processing.c ****                     }
 623:..\src/command_processing.c ****                 } 
 624:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2839              		.loc 1 624 0 is_stmt 1
 2840 0102 FB88     		ldrh	r3, [r7, #6]
 2841 0104 1B01     		lsls	r3, r3, #4
 2842 0106 3A68     		ldr	r2, [r7]
 2843 0108 1344     		add	r3, r3, r2
 2844 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2845 010c 092B     		cmp	r3, #9
 2846 010e 08D1     		bne	.L150
 625:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2847              		.loc 1 625 0
 2848 0110 FB88     		ldrh	r3, [r7, #6]
 2849 0112 1B01     		lsls	r3, r3, #4
 2850 0114 3A68     		ldr	r2, [r7]
 2851 0116 1344     		add	r3, r3, r2
 2852 0118 1A68     		ldr	r2, [r3]
 2853 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2854 011c 1344     		add	r3, r3, r2
 2855 011e 0022     		movs	r2, #0
 2856 0120 1A70     		strb	r2, [r3]
 2857              	.L150:
 626:..\src/command_processing.c ****             break;
 2858              		.loc 1 626 0
 2859 0122 00BF     		nop
 2860              	.L143:
 627:..\src/command_processing.c ****     }
 628:..\src/command_processing.c **** 
 629:..\src/command_processing.c ****       
 630:..\src/command_processing.c **** }
 2861              		.loc 1 630 0
 2862 0124 00BF     		nop
 2863 0126 1037     		adds	r7, r7, #16
 2864              		.cfi_def_cfa_offset 8
 2865 0128 BD46     		mov	sp, r7
 2866              		.cfi_def_cfa_register 13
 2867              		@ sp needed
 2868 012a 80BD     		pop	{r7, pc}
 2869              	.L152:
 2870              		.align	2
 2871              	.L151:
 2872 012c 00000000 		.word	g_rx
 2873 0130 00000000 		.word	g_mem
 2874              		.cfi_endproc
 2875              	.LFE70:
 2876              		.size	set_custom_param, .-set_custom_param
 2877              		.section	.text.get_IMU_param_list,"ax",%progbits
 2878              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 79


 2879              		.global	get_IMU_param_list
 2880              		.thumb
 2881              		.thumb_func
 2882              		.type	get_IMU_param_list, %function
 2883              	get_IMU_param_list:
 2884              	.LFB71:
 631:..\src/command_processing.c **** 
 632:..\src/command_processing.c **** //==============================================================================
 633:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 634:..\src/command_processing.c **** //==============================================================================
 635:..\src/command_processing.c **** 
 636:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 637:..\src/command_processing.c **** {
 2885              		.loc 1 637 0
 2886              		.cfi_startproc
 2887              		@ args = 0, pretend = 0, frame = 8
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889              		@ link register save eliminated.
 2890 0000 80B4     		push	{r7}
 2891              		.cfi_def_cfa_offset 4
 2892              		.cfi_offset 7, -4
 2893 0002 83B0     		sub	sp, sp, #12
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              		.cfi_def_cfa_register 7
 2897 0006 0346     		mov	r3, r0
 2898 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 638:..\src/command_processing.c **** }
 2899              		.loc 1 638 0
 2900 000a 00BF     		nop
 2901 000c 0C37     		adds	r7, r7, #12
 2902              		.cfi_def_cfa_offset 4
 2903 000e BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 0010 80BC     		pop	{r7}
 2907              		.cfi_restore 7
 2908              		.cfi_def_cfa_offset 0
 2909 0012 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE71:
 2912              		.size	get_IMU_param_list, .-get_IMU_param_list
 2913              		.section	.text.setZeros,"ax",%progbits
 2914              		.align	2
 2915              		.global	setZeros
 2916              		.thumb
 2917              		.thumb_func
 2918              		.type	setZeros, %function
 2919              	setZeros:
 2920              	.LFB72:
 639:..\src/command_processing.c **** 
 640:..\src/command_processing.c **** //==============================================================================
 641:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 642:..\src/command_processing.c **** //==============================================================================
 643:..\src/command_processing.c **** 
 644:..\src/command_processing.c **** void setZeros()
 645:..\src/command_processing.c **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 80


 2921              		.loc 1 645 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 1, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926 0000 80B4     		push	{r7}
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 00AF     		add	r7, sp, #0
 2930              		.cfi_def_cfa_register 7
 646:..\src/command_processing.c **** }
 2931              		.loc 1 646 0
 2932 0004 00BF     		nop
 2933 0006 BD46     		mov	sp, r7
 2934              		.cfi_def_cfa_register 13
 2935              		@ sp needed
 2936 0008 80BC     		pop	{r7}
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 000a 7047     		bx	lr
 2940              		.cfi_endproc
 2941              	.LFE72:
 2942              		.size	setZeros, .-setZeros
 2943              		.section	.rodata
 2944              		.align	2
 2945              	.LC34:
 2946 0278 20256400 		.ascii	" %d\000"
 2947              		.align	2
 2948              	.LC35:
 2949 027c 20256C64 		.ascii	" %ld\000"
 2949      00
 2950              		.global	__aeabi_f2d
 2951 0281 000000   		.align	2
 2952              	.LC36:
 2953 0284 20256600 		.ascii	" %f\000"
 2954              		.section	.text.qbadminp_string,"ax",%progbits
 2955              		.align	2
 2956              		.global	qbadminp_string
 2957              		.thumb
 2958              		.thumb_func
 2959              		.type	qbadminp_string, %function
 2960              	qbadminp_string:
 2961              	.LFB73:
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c **** void  qbadminp_string ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], con
 2962              		.loc 1 648 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 2664
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 90B5     		push	{r4, r7, lr}
 2967              		.cfi_def_cfa_offset 12
 2968              		.cfi_offset 4, -12
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 ADF66C2D 		subw	sp, sp, #2668
 2972              		.cfi_def_cfa_offset 2680
 2973 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 81


 2974              		.cfi_def_cfa_register 7
 2975 0008 0446     		mov	r4, r0
 2976 000a 0846     		mov	r0, r1
 2977 000c 07F10801 		add	r1, r7, #8
 2978 0010 0A60     		str	r2, [r1]
 2979 0012 3A1D     		adds	r2, r7, #4
 2980 0014 1360     		str	r3, [r2]
 2981 0016 07F10F03 		add	r3, r7, #15
 2982 001a 2246     		mov	r2, r4
 2983 001c 1A70     		strb	r2, [r3]
 2984 001e 07F10E03 		add	r3, r7, #14
 2985 0022 0246     		mov	r2, r0
 2986 0024 1A70     		strb	r2, [r3]
 649:..\src/command_processing.c ****     strcpy(superstring, "");
 2987              		.loc 1 649 0
 2988 0026 AD4B     		ldr	r3, .L181
 2989 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2990 002a AD4B     		ldr	r3, .L181+4
 2991 002c 1A70     		strb	r2, [r3]
 650:..\src/command_processing.c ****     char info_string[2500] = "";
 2992              		.loc 1 650 0
 2993 002e 07F17803 		add	r3, r7, #120
 2994 0032 0022     		movs	r2, #0
 2995 0034 1A60     		str	r2, [r3]
 2996 0036 0433     		adds	r3, r3, #4
 2997 0038 4FF41C62 		mov	r2, #2496
 2998 003c 0021     		movs	r1, #0
 2999 003e 1846     		mov	r0, r3
 3000 0040 FFF7FEFF 		bl	memset
 651:..\src/command_processing.c ****     int i;
 652:..\src/command_processing.c ****     int idx;
 653:..\src/command_processing.c ****     int32 aux_int32;
 654:..\src/command_processing.c ****     uint32 aux_uint32;
 655:..\src/command_processing.c ****     float aux_float;
 656:..\src/command_processing.c ****     uint8 aux_uint8;
 657:..\src/command_processing.c ****     int8 aux_int8;
 658:..\src/command_processing.c ****     int16 aux_int16;
 659:..\src/command_processing.c ****     uint16 aux_uint16;
 660:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3001              		.loc 1 660 0
 3002 0044 A74B     		ldr	r3, .L181+8
 3003 0046 C7F85C3A 		str	r3, [r7, #2652]
 661:..\src/command_processing.c ****     
 662:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3004              		.loc 1 662 0
 3005 004a A64B     		ldr	r3, .L181+8
 3006 004c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3007 004e FA2B     		cmp	r3, #250
 3008 0050 00F0A581 		beq	.L179
 3009              	.LBB25:
 663:..\src/command_processing.c ****         uint8* m_addr;
 664:..\src/command_processing.c ****         uint8* m_tmp;
 665:..\src/command_processing.c ****         char str[100];
 666:..\src/command_processing.c ****         strcpy(info_string, "");
 3010              		.loc 1 666 0
 3011 0054 A14B     		ldr	r3, .L181
 3012 0056 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 82


 3013 0058 07F17803 		add	r3, r7, #120
 3014 005c 1A70     		strb	r2, [r3]
 667:..\src/command_processing.c ****         strcat(info_string, "\n");
 3015              		.loc 1 667 0
 3016 005e 07F17803 		add	r3, r7, #120
 3017 0062 1846     		mov	r0, r3
 3018 0064 FFF7FEFF 		bl	strlen
 3019 0068 0346     		mov	r3, r0
 3020 006a 1A46     		mov	r2, r3
 3021 006c 07F17803 		add	r3, r7, #120
 3022 0070 1344     		add	r3, r3, r2
 3023 0072 9D49     		ldr	r1, .L181+12
 3024 0074 1A46     		mov	r2, r3
 3025 0076 0B46     		mov	r3, r1
 3026 0078 1B88     		ldrh	r3, [r3]	@ unaligned
 3027 007a 1380     		strh	r3, [r2]	@ unaligned
 668:..\src/command_processing.c ****         
 669:..\src/command_processing.c ****         
 670:..\src/command_processing.c ****         for (idx = 0; idx < num_params; idx ++) {
 3028              		.loc 1 670 0
 3029 007c 0023     		movs	r3, #0
 3030 007e C7F8603A 		str	r3, [r7, #2656]
 3031 0082 7EE1     		b	.L157
 3032              	.L178:
 671:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3033              		.loc 1 671 0
 3034 0084 D7F8603A 		ldr	r3, [r7, #2656]
 3035 0088 1B01     		lsls	r3, r3, #4
 3036 008a 07F10802 		add	r2, r7, #8
 3037 008e 1268     		ldr	r2, [r2]
 3038 0090 1344     		add	r3, r3, r2
 3039 0092 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3040 0094 002B     		cmp	r3, #0
 3041 0096 00F06F81 		beq	.L158
 3042              	.LBB26:
 672:..\src/command_processing.c ****                 strcat(info_string, PARAM_LIST[idx].PARAM_STR );
 3043              		.loc 1 672 0
 3044 009a D7F8603A 		ldr	r3, [r7, #2656]
 3045 009e 1B01     		lsls	r3, r3, #4
 3046 00a0 07F10802 		add	r2, r7, #8
 3047 00a4 1268     		ldr	r2, [r2]
 3048 00a6 1344     		add	r3, r3, r2
 3049 00a8 9A68     		ldr	r2, [r3, #8]
 3050 00aa 07F17803 		add	r3, r7, #120
 3051 00ae 1146     		mov	r1, r2
 3052 00b0 1846     		mov	r0, r3
 3053 00b2 FFF7FEFF 		bl	strcat
 673:..\src/command_processing.c ****                 m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 3054              		.loc 1 673 0
 3055 00b6 D7F8603A 		ldr	r3, [r7, #2656]
 3056 00ba 1B01     		lsls	r3, r3, #4
 3057 00bc 07F10802 		add	r2, r7, #8
 3058 00c0 1268     		ldr	r2, [r2]
 3059 00c2 1344     		add	r3, r3, r2
 3060 00c4 1B68     		ldr	r3, [r3]
 3061 00c6 C7F8583A 		str	r3, [r7, #2648]
 674:..\src/command_processing.c ****                 uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 83


 3062              		.loc 1 674 0
 3063 00ca D7F8603A 		ldr	r3, [r7, #2656]
 3064 00ce 1B01     		lsls	r3, r3, #4
 3065 00d0 07F10802 		add	r2, r7, #8
 3066 00d4 1268     		ldr	r2, [r2]
 3067 00d6 1344     		add	r3, r3, r2
 3068 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3069 00da 1846     		mov	r0, r3
 3070 00dc FFF7FEFF 		bl	num_of_bytes
 3071 00e0 0346     		mov	r3, r0
 3072 00e2 87F8573A 		strb	r3, [r7, #2647]
 675:..\src/command_processing.c ****                 switch(PARAM_LIST[idx].custom){
 3073              		.loc 1 675 0
 3074 00e6 D7F8603A 		ldr	r3, [r7, #2656]
 3075 00ea 1B01     		lsls	r3, r3, #4
 3076 00ec 07F10802 		add	r2, r7, #8
 3077 00f0 1268     		ldr	r2, [r2]
 3078 00f2 1344     		add	r3, r3, r2
 3079 00f4 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3080 00f6 052B     		cmp	r3, #5
 3081 00f8 00F0FE80 		beq	.L160
 676:..\src/command_processing.c ****                 case 0:   default:    
 677:..\src/command_processing.c ****                     for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS; i++){
 3082              		.loc 1 677 0
 3083 00fc 0023     		movs	r3, #0
 3084 00fe C7F8643A 		str	r3, [r7, #2660]
 3085 0102 DCE0     		b	.L161
 3086              	.L176:
 678:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3087              		.loc 1 678 0
 3088 0104 97F8573A 		ldrb	r3, [r7, #2647]	@ zero_extendqisi2
 3089 0108 D7F8642A 		ldr	r2, [r7, #2660]
 3090 010c 02FB03F3 		mul	r3, r2, r3
 3091 0110 1A46     		mov	r2, r3
 3092 0112 D7F8583A 		ldr	r3, [r7, #2648]
 3093 0116 1344     		add	r3, r3, r2
 3094 0118 C7F8503A 		str	r3, [r7, #2640]
 679:..\src/command_processing.c ****                         switch (PARAM_LIST[idx].TYPES){
 3095              		.loc 1 679 0
 3096 011c D7F8603A 		ldr	r3, [r7, #2656]
 3097 0120 1B01     		lsls	r3, r3, #4
 3098 0122 07F10802 		add	r2, r7, #8
 3099 0126 1268     		ldr	r2, [r2]
 3100 0128 1344     		add	r3, r3, r2
 3101 012a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3102 012c 072B     		cmp	r3, #7
 3103 012e 00F2B980 		bhi	.L162
 3104 0132 01A2     		adr	r2, .L164
 3105 0134 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3106              		.p2align 2
 3107              	.L164:
 3108 0138 27020000 		.word	.L163+1
 3109 013c 75010000 		.word	.L165+1
 3110 0140 59010000 		.word	.L166+1
 3111 0144 91010000 		.word	.L167+1
 3112 0148 AD010000 		.word	.L168+1
 3113 014c E5010000 		.word	.L169+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 84


 3114 0150 C9010000 		.word	.L170+1
 3115 0154 01020000 		.word	.L171+1
 3116              		.p2align 1
 3117              	.L166:
 680:..\src/command_processing.c ****                             case TYPE_UINT8:
 681:..\src/command_processing.c ****                                 aux_uint8 = *((uint8*)m_tmp);
 3118              		.loc 1 681 0
 3119 0158 D7F8503A 		ldr	r3, [r7, #2640]
 3120 015c 1B78     		ldrb	r3, [r3]
 3121 015e 87F84F3A 		strb	r3, [r7, #2639]
 682:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint8);
 3122              		.loc 1 682 0
 3123 0162 97F84F2A 		ldrb	r2, [r7, #2639]	@ zero_extendqisi2
 3124 0166 07F11403 		add	r3, r7, #20
 3125 016a 6049     		ldr	r1, .L181+16
 3126 016c 1846     		mov	r0, r3
 3127 016e FFF7FEFF 		bl	sprintf
 683:..\src/command_processing.c ****                                 break;
 3128              		.loc 1 683 0
 3129 0172 97E0     		b	.L162
 3130              	.L165:
 684:..\src/command_processing.c ****                             case TYPE_INT8:
 685:..\src/command_processing.c ****                                 aux_int8 = *((int8*)m_tmp);
 3131              		.loc 1 685 0
 3132 0174 D7F8503A 		ldr	r3, [r7, #2640]
 3133 0178 1B78     		ldrb	r3, [r3]
 3134 017a 87F84E3A 		strb	r3, [r7, #2638]
 686:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int8);
 3135              		.loc 1 686 0
 3136 017e 97F94E2A 		ldrsb	r2, [r7, #2638]
 3137 0182 07F11403 		add	r3, r7, #20
 3138 0186 5949     		ldr	r1, .L181+16
 3139 0188 1846     		mov	r0, r3
 3140 018a FFF7FEFF 		bl	sprintf
 687:..\src/command_processing.c ****                                 break;
 3141              		.loc 1 687 0
 3142 018e 89E0     		b	.L162
 3143              	.L167:
 688:..\src/command_processing.c ****                             case TYPE_INT16:   
 689:..\src/command_processing.c ****                                 aux_int16 = *((int16*)m_tmp);
 3144              		.loc 1 689 0
 3145 0190 D7F8503A 		ldr	r3, [r7, #2640]
 3146 0194 1B88     		ldrh	r3, [r3]	@ movhi
 3147 0196 A7F84C3A 		strh	r3, [r7, #2636]	@ movhi
 690:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_int16);
 3148              		.loc 1 690 0
 3149 019a B7F94C2A 		ldrsh	r2, [r7, #2636]
 3150 019e 07F11403 		add	r3, r7, #20
 3151 01a2 5249     		ldr	r1, .L181+16
 3152 01a4 1846     		mov	r0, r3
 3153 01a6 FFF7FEFF 		bl	sprintf
 691:..\src/command_processing.c ****                                 break;
 3154              		.loc 1 691 0
 3155 01aa 7BE0     		b	.L162
 3156              	.L168:
 692:..\src/command_processing.c ****                             
 693:..\src/command_processing.c ****                             case TYPE_UINT16: 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 85


 694:..\src/command_processing.c ****                                 aux_uint16 = *((uint16*)m_tmp);
 3157              		.loc 1 694 0
 3158 01ac D7F8503A 		ldr	r3, [r7, #2640]
 3159 01b0 1B88     		ldrh	r3, [r3]	@ movhi
 3160 01b2 A7F84A3A 		strh	r3, [r7, #2634]	@ movhi
 695:..\src/command_processing.c ****                                 sprintf(str, " %d", aux_uint16);
 3161              		.loc 1 695 0
 3162 01b6 B7F84A2A 		ldrh	r2, [r7, #2634]
 3163 01ba 07F11403 		add	r3, r7, #20
 3164 01be 4B49     		ldr	r1, .L181+16
 3165 01c0 1846     		mov	r0, r3
 3166 01c2 FFF7FEFF 		bl	sprintf
 696:..\src/command_processing.c ****                                 break;
 3167              		.loc 1 696 0
 3168 01c6 6DE0     		b	.L162
 3169              	.L170:
 697:..\src/command_processing.c ****                             
 698:..\src/command_processing.c ****                             case TYPE_UINT32:
 699:..\src/command_processing.c ****                                 aux_uint32 = *((uint32*)m_tmp);
 3170              		.loc 1 699 0
 3171 01c8 D7F8503A 		ldr	r3, [r7, #2640]
 3172 01cc 1B68     		ldr	r3, [r3]
 3173 01ce C7F8443A 		str	r3, [r7, #2628]
 700:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_uint32);
 3174              		.loc 1 700 0
 3175 01d2 07F11403 		add	r3, r7, #20
 3176 01d6 D7F8442A 		ldr	r2, [r7, #2628]
 3177 01da 4549     		ldr	r1, .L181+20
 3178 01dc 1846     		mov	r0, r3
 3179 01de FFF7FEFF 		bl	sprintf
 701:..\src/command_processing.c ****                                 break;
 3180              		.loc 1 701 0
 3181 01e2 5FE0     		b	.L162
 3182              	.L169:
 702:..\src/command_processing.c ****                                 
 703:..\src/command_processing.c ****                             case TYPE_INT32:
 704:..\src/command_processing.c ****                                 aux_int32 = *((int32*)m_tmp);
 3183              		.loc 1 704 0
 3184 01e4 D7F8503A 		ldr	r3, [r7, #2640]
 3185 01e8 1B68     		ldr	r3, [r3]
 3186 01ea C7F8403A 		str	r3, [r7, #2624]
 705:..\src/command_processing.c ****                                 sprintf(str, " %ld", aux_int32);
 3187              		.loc 1 705 0
 3188 01ee 07F11403 		add	r3, r7, #20
 3189 01f2 D7F8402A 		ldr	r2, [r7, #2624]
 3190 01f6 3E49     		ldr	r1, .L181+20
 3191 01f8 1846     		mov	r0, r3
 3192 01fa FFF7FEFF 		bl	sprintf
 706:..\src/command_processing.c ****                                 break;
 3193              		.loc 1 706 0
 3194 01fe 51E0     		b	.L162
 3195              	.L171:
 707:..\src/command_processing.c ****                                 
 708:..\src/command_processing.c ****                             case TYPE_FLOAT:
 709:..\src/command_processing.c ****                                 aux_float = *((float*)m_tmp);
 3196              		.loc 1 709 0
 3197 0200 D7F8503A 		ldr	r3, [r7, #2640]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 86


 3198 0204 1B68     		ldr	r3, [r3]	@ float
 3199 0206 C7F83C3A 		str	r3, [r7, #2620]	@ float
 710:..\src/command_processing.c ****                                 sprintf(str, " %f", aux_float);
 3200              		.loc 1 710 0
 3201 020a D7F83C0A 		ldr	r0, [r7, #2620]	@ float
 3202 020e FFF7FEFF 		bl	__aeabi_f2d
 3203 0212 0346     		mov	r3, r0
 3204 0214 0C46     		mov	r4, r1
 3205 0216 07F11400 		add	r0, r7, #20
 3206 021a 1A46     		mov	r2, r3
 3207 021c 2346     		mov	r3, r4
 3208 021e 3549     		ldr	r1, .L181+24
 3209 0220 FFF7FEFF 		bl	sprintf
 711:..\src/command_processing.c ****                                 break;
 3210              		.loc 1 711 0
 3211 0224 3EE0     		b	.L162
 3212              	.L163:
 712:..\src/command_processing.c ****                                 
 713:..\src/command_processing.c ****                             case TYPE_FLAG:
 714:..\src/command_processing.c ****                                 for (i = 0; i < num_menus; i++){
 3213              		.loc 1 714 0
 3214 0226 0023     		movs	r3, #0
 3215 0228 C7F8643A 		str	r3, [r7, #2660]
 3216 022c 32E0     		b	.L172
 3217              	.L175:
 715:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3218              		.loc 1 715 0
 3219 022e D7F8643A 		ldr	r3, [r7, #2660]
 3220 0232 2C22     		movs	r2, #44
 3221 0234 02FB03F3 		mul	r3, r2, r3
 3222 0238 3A1D     		adds	r2, r7, #4
 3223 023a 1268     		ldr	r2, [r2]
 3224 023c 1344     		add	r3, r3, r2
 3225 023e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3226 0240 D7F8603A 		ldr	r3, [r7, #2656]
 3227 0244 1B01     		lsls	r3, r3, #4
 3228 0246 07F10801 		add	r1, r7, #8
 3229 024a 0968     		ldr	r1, [r1]
 3230 024c 0B44     		add	r3, r3, r1
 3231 024e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3232 0250 9A42     		cmp	r2, r3
 3233 0252 1AD1     		bne	.L173
 716:..\src/command_processing.c ****                                         strcpy(str, "");
 3234              		.loc 1 716 0
 3235 0254 214B     		ldr	r3, .L181
 3236 0256 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3237 0258 07F11403 		add	r3, r7, #20
 3238 025c 1A70     		strb	r2, [r3]
 717:..\src/command_processing.c ****                                         strcat(str, MENU_LIST[i].choice[*m_addr]);
 3239              		.loc 1 717 0
 3240 025e D7F8643A 		ldr	r3, [r7, #2660]
 3241 0262 2C22     		movs	r2, #44
 3242 0264 02FB03F3 		mul	r3, r2, r3
 3243 0268 3A1D     		adds	r2, r7, #4
 3244 026a 1268     		ldr	r2, [r2]
 3245 026c 1A44     		add	r2, r2, r3
 3246 026e D7F8583A 		ldr	r3, [r7, #2648]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 87


 3247 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3248 0274 9B00     		lsls	r3, r3, #2
 3249 0276 1344     		add	r3, r3, r2
 3250 0278 5A68     		ldr	r2, [r3, #4]
 3251 027a 07F11403 		add	r3, r7, #20
 3252 027e 1146     		mov	r1, r2
 3253 0280 1846     		mov	r0, r3
 3254 0282 FFF7FEFF 		bl	strcat
 718:..\src/command_processing.c ****                                         break;
 3255              		.loc 1 718 0
 3256 0286 00BF     		nop
 719:..\src/command_processing.c ****                                     }
 720:..\src/command_processing.c ****                                 }
 721:..\src/command_processing.c ****                                 break;
 3257              		.loc 1 721 0
 3258 0288 0BE0     		b	.L180
 3259              	.L173:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3260              		.loc 1 714 0 discriminator 2
 3261 028a D7F8643A 		ldr	r3, [r7, #2660]
 3262 028e 0133     		adds	r3, r3, #1
 3263 0290 C7F8643A 		str	r3, [r7, #2660]
 3264              	.L172:
 714:..\src/command_processing.c ****                                     if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 3265              		.loc 1 714 0 is_stmt 0 discriminator 1
 3266 0294 07F10E03 		add	r3, r7, #14
 3267 0298 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3268 029a D7F8643A 		ldr	r3, [r7, #2660]
 3269 029e 9A42     		cmp	r2, r3
 3270 02a0 C5DC     		bgt	.L175
 3271              	.L180:
 3272              		.loc 1 721 0 is_stmt 1
 3273 02a2 00BF     		nop
 3274              	.L162:
 722:..\src/command_processing.c ****                         } 
 723:..\src/command_processing.c ****                         strcat(info_string, str);
 3275              		.loc 1 723 0 discriminator 2
 3276 02a4 07F11402 		add	r2, r7, #20
 3277 02a8 07F17803 		add	r3, r7, #120
 3278 02ac 1146     		mov	r1, r2
 3279 02ae 1846     		mov	r0, r3
 3280 02b0 FFF7FEFF 		bl	strcat
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3281              		.loc 1 677 0 discriminator 2
 3282 02b4 D7F8643A 		ldr	r3, [r7, #2660]
 3283 02b8 0133     		adds	r3, r3, #1
 3284 02ba C7F8643A 		str	r3, [r7, #2660]
 3285              	.L161:
 677:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 3286              		.loc 1 677 0 is_stmt 0 discriminator 1
 3287 02be D7F8603A 		ldr	r3, [r7, #2656]
 3288 02c2 1B01     		lsls	r3, r3, #4
 3289 02c4 07F10802 		add	r2, r7, #8
 3290 02c8 1268     		ldr	r2, [r2]
 3291 02ca 1344     		add	r3, r3, r2
 3292 02cc 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3293 02ce 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 88


 3294 02d0 D7F8643A 		ldr	r3, [r7, #2660]
 3295 02d4 9A42     		cmp	r2, r3
 3296 02d6 3FF715AF 		bgt	.L176
 724:..\src/command_processing.c ****                     }
 725:..\src/command_processing.c ****                     break;
 3297              		.loc 1 725 0 is_stmt 1
 3298 02da 3EE0     		b	.L177
 3299              	.L182:
 3300              		.align	2
 3301              	.L181:
 3302 02dc 00000000 		.word	.LC8
 3303 02e0 00000000 		.word	superstring
 3304 02e4 00000000 		.word	c_mem
 3305 02e8 28000000 		.word	.LC17
 3306 02ec 78020000 		.word	.LC34
 3307 02f0 7C020000 		.word	.LC35
 3308 02f4 84020000 		.word	.LC36
 3309              	.L160:
 726:..\src/command_processing.c ****                     
 727:..\src/command_processing.c ****                     
 728:..\src/command_processing.c ****                 case CUSTOM_POS_LIM:        
 729:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 3310              		.loc 1 729 0
 3311 02f8 2B4B     		ldr	r3, .L183
 3312 02fa 1B6A     		ldr	r3, [r3, #32]
 3313 02fc 2A4A     		ldr	r2, .L183
 3314 02fe 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3315 0302 1341     		asrs	r3, r3, r2
 3316 0304 C7F8403A 		str	r3, [r7, #2624]
 730:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3317              		.loc 1 730 0
 3318 0308 07F11403 		add	r3, r7, #20
 3319 030c D7F8402A 		ldr	r2, [r7, #2624]
 3320 0310 2649     		ldr	r1, .L183+4
 3321 0312 1846     		mov	r0, r3
 3322 0314 FFF7FEFF 		bl	sprintf
 731:..\src/command_processing.c ****                     strcat(info_string, str);
 3323              		.loc 1 731 0
 3324 0318 07F11402 		add	r2, r7, #20
 3325 031c 07F17803 		add	r3, r7, #120
 3326 0320 1146     		mov	r1, r2
 3327 0322 1846     		mov	r0, r3
 3328 0324 FFF7FEFF 		bl	strcat
 732:..\src/command_processing.c ****                     aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 3329              		.loc 1 732 0
 3330 0328 1F4B     		ldr	r3, .L183
 3331 032a 5B6A     		ldr	r3, [r3, #36]
 3332 032c 1E4A     		ldr	r2, .L183
 3333 032e 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3334 0332 1341     		asrs	r3, r3, r2
 3335 0334 C7F8403A 		str	r3, [r7, #2624]
 733:..\src/command_processing.c ****                     sprintf(str, " %ld", aux_int32);
 3336              		.loc 1 733 0
 3337 0338 07F11403 		add	r3, r7, #20
 3338 033c D7F8402A 		ldr	r2, [r7, #2624]
 3339 0340 1A49     		ldr	r1, .L183+4
 3340 0342 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 89


 3341 0344 FFF7FEFF 		bl	sprintf
 734:..\src/command_processing.c ****                     strcat(info_string, str);
 3342              		.loc 1 734 0
 3343 0348 07F11402 		add	r2, r7, #20
 3344 034c 07F17803 		add	r3, r7, #120
 3345 0350 1146     		mov	r1, r2
 3346 0352 1846     		mov	r0, r3
 3347 0354 FFF7FEFF 		bl	strcat
 735:..\src/command_processing.c ****                     break;
 3348              		.loc 1 735 0
 3349 0358 00BF     		nop
 3350              	.L177:
 736:..\src/command_processing.c ****                 }
 737:..\src/command_processing.c ****                 
 738:..\src/command_processing.c ****                 strcat(info_string, "\n");
 3351              		.loc 1 738 0
 3352 035a 07F17803 		add	r3, r7, #120
 3353 035e 1846     		mov	r0, r3
 3354 0360 FFF7FEFF 		bl	strlen
 3355 0364 0346     		mov	r3, r0
 3356 0366 1A46     		mov	r2, r3
 3357 0368 07F17803 		add	r3, r7, #120
 3358 036c 1344     		add	r3, r3, r2
 3359 036e 1049     		ldr	r1, .L183+8
 3360 0370 1A46     		mov	r2, r3
 3361 0372 0B46     		mov	r3, r1
 3362 0374 1B88     		ldrh	r3, [r3]	@ unaligned
 3363 0376 1380     		strh	r3, [r2]	@ unaligned
 3364              	.L158:
 3365              	.LBE26:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3366              		.loc 1 670 0 discriminator 2
 3367 0378 D7F8603A 		ldr	r3, [r7, #2656]
 3368 037c 0133     		adds	r3, r3, #1
 3369 037e C7F8603A 		str	r3, [r7, #2656]
 3370              	.L157:
 670:..\src/command_processing.c ****             if (PARAM_LIST[idx].ping){
 3371              		.loc 1 670 0 is_stmt 0 discriminator 1
 3372 0382 07F10F03 		add	r3, r7, #15
 3373 0386 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3374 0388 D7F8603A 		ldr	r3, [r7, #2656]
 3375 038c 9A42     		cmp	r2, r3
 3376 038e 3FF779AE 		bgt	.L178
 739:..\src/command_processing.c ****                 
 740:..\src/command_processing.c ****             }
 741:..\src/command_processing.c ****             
 742:..\src/command_processing.c ****         }
 743:..\src/command_processing.c ****               
 744:..\src/command_processing.c ****       
 745:..\src/command_processing.c ****     strcat(superstring,info_string);
 3377              		.loc 1 745 0 is_stmt 1
 3378 0392 07F17803 		add	r3, r7, #120
 3379 0396 1946     		mov	r1, r3
 3380 0398 0648     		ldr	r0, .L183+12
 3381 039a FFF7FEFF 		bl	strcat
 3382              	.L179:
 3383              	.LBE25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 90


 746:..\src/command_processing.c ****     
 747:..\src/command_processing.c **** }}
 3384              		.loc 1 747 0
 3385 039e 00BF     		nop
 3386 03a0 07F66C27 		addw	r7, r7, #2668
 3387              		.cfi_def_cfa_offset 12
 3388 03a4 BD46     		mov	sp, r7
 3389              		.cfi_def_cfa_register 13
 3390              		@ sp needed
 3391 03a6 90BD     		pop	{r4, r7, pc}
 3392              	.L184:
 3393              		.align	2
 3394              	.L183:
 3395 03a8 00000000 		.word	c_mem
 3396 03ac 7C020000 		.word	.LC35
 3397 03b0 28000000 		.word	.LC17
 3398 03b4 00000000 		.word	superstring
 3399              		.cfi_endproc
 3400              	.LFE73:
 3401              		.size	qbadminp_string, .-qbadminp_string
 3402              		.section	.rodata
 3403              		.align	2
 3404              	.LC37:
 3405 0288 0D0A00   		.ascii	"\015\012\000"
 3406 028b 00       		.align	2
 3407              	.LC38:
 3408 028c 4669726D 		.ascii	"Firmware version: \000"
 3408      77617265 
 3408      20766572 
 3408      73696F6E 
 3408      3A2000
 3409 029f 00       		.align	2
 3410              	.LC39:
 3411 02a0 4149525F 		.ascii	"AIR_CHAMBERS_and_VIBROTACTILE_FB\000"
 3411      4348414D 
 3411      42455253 
 3411      5F616E64 
 3411      5F564942 
 3412 02c1 000000   		.align	2
 3413              	.LC40:
 3414 02c4 2E0D0A0D 		.ascii	".\015\012\015\012\000"
 3414      0A00
 3415 02ca 0000     		.align	2
 3416              	.LC41:
 3417 02cc 44455649 		.ascii	"DEVICE INFO\015\012\000"
 3417      43452049 
 3417      4E464F0D 
 3417      0A00
 3418 02da 0000     		.align	2
 3419              	.LC42:
 3420 02dc 44657669 		.ascii	"Device: PULSE\015\012\000"
 3420      63653A20 
 3420      50554C53 
 3420      450D0A00 
 3421              		.align	2
 3422              	.LC43:
 3423 02ec 454D4720 		.ascii	"EMG input %d -> %d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 91


 3423      696E7075 
 3423      74202564 
 3423      202D3E20 
 3423      256400
 3424 02ff 00       		.align	2
 3425              	.LC44:
 3426 0300 41637475 		.ascii	"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \015"
 3426      61746F72 
 3426      7320696E 
 3426      7075743A 
 3426      2050756D 
 3427 0330 0A00     		.ascii	"\012\000"
 3428 0332 0000     		.align	2
 3429              	.LC45:
 3430 0334 4C617374 		.ascii	"Last FW cycle time: %u us\015\012\000"
 3430      20465720 
 3430      6379636C 
 3430      65207469 
 3430      6D653A20 
 3431              		.align	2
 3432              	.LC46:
 3433 0350 0D0A0000 		.ascii	"\015\012\000\000"
 3434              		.section	.text.prepare_generic_info,"ax",%progbits
 3435              		.align	2
 3436              		.global	prepare_generic_info
 3437              		.thumb
 3438              		.thumb_func
 3439              		.type	prepare_generic_info, %function
 3440              	prepare_generic_info:
 3441              	.LFB74:
 748:..\src/command_processing.c **** //==============================================================================
 749:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 750:..\src/command_processing.c **** //==============================================================================
 751:..\src/command_processing.c **** 
 752:..\src/command_processing.c **** void prepare_generic_info(char *info_string){   
 3442              		.loc 1 752 0
 3443              		.cfi_startproc
 3444              		@ args = 0, pretend = 0, frame = 120
 3445              		@ frame_needed = 1, uses_anonymous_args = 0
 3446 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3447              		.cfi_def_cfa_offset 20
 3448              		.cfi_offset 4, -20
 3449              		.cfi_offset 5, -16
 3450              		.cfi_offset 6, -12
 3451              		.cfi_offset 7, -8
 3452              		.cfi_offset 14, -4
 3453 0002 A1B0     		sub	sp, sp, #132
 3454              		.cfi_def_cfa_offset 152
 3455 0004 02AF     		add	r7, sp, #8
 3456              		.cfi_def_cfa 7, 144
 3457 0006 7860     		str	r0, [r7, #4]
 753:..\src/command_processing.c ****      manage_param_list(300,0);
 3458              		.loc 1 753 0
 3459 0008 0021     		movs	r1, #0
 3460 000a 4FF49670 		mov	r0, #300
 3461 000e FFF7FEFF 		bl	manage_param_list
 754:..\src/command_processing.c ****     int i;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 92


 755:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3462              		.loc 1 755 0
 3463 0012 6F4B     		ldr	r3, .L191
 3464 0014 3B67     		str	r3, [r7, #112]
 756:..\src/command_processing.c ****     
 757:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3465              		.loc 1 757 0
 3466 0016 6E4B     		ldr	r3, .L191
 3467 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3468 001a FA2B     		cmp	r3, #250
 3469 001c 00F0D480 		beq	.L190
 3470              	.LBB27:
 758:..\src/command_processing.c ****         
 759:..\src/command_processing.c ****         char str[100];
 760:..\src/command_processing.c ****         strcpy(info_string, "");
 3471              		.loc 1 760 0
 3472 0020 7B68     		ldr	r3, [r7, #4]
 3473 0022 0022     		movs	r2, #0
 3474 0024 1A70     		strb	r2, [r3]
 761:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3475              		.loc 1 761 0
 3476 0026 7868     		ldr	r0, [r7, #4]
 3477 0028 FFF7FEFF 		bl	strlen
 3478 002c 0346     		mov	r3, r0
 3479 002e 1A46     		mov	r2, r3
 3480 0030 7B68     		ldr	r3, [r7, #4]
 3481 0032 1344     		add	r3, r3, r2
 3482 0034 674A     		ldr	r2, .L191+4
 3483 0036 1188     		ldrh	r1, [r2]	@ unaligned
 3484 0038 9278     		ldrb	r2, [r2, #2]
 3485 003a 1980     		strh	r1, [r3]	@ unaligned
 3486 003c 9A70     		strb	r2, [r3, #2]
 762:..\src/command_processing.c ****         strcat(info_string, "Firmware version: ");
 3487              		.loc 1 762 0
 3488 003e 7868     		ldr	r0, [r7, #4]
 3489 0040 FFF7FEFF 		bl	strlen
 3490 0044 0346     		mov	r3, r0
 3491 0046 1A46     		mov	r2, r3
 3492 0048 7B68     		ldr	r3, [r7, #4]
 3493 004a 1344     		add	r3, r3, r2
 3494 004c 624A     		ldr	r2, .L191+8
 3495 004e 1D46     		mov	r5, r3
 3496 0050 1446     		mov	r4, r2
 3497 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3498 0054 2860     		str	r0, [r5]	@ unaligned
 3499 0056 6960     		str	r1, [r5, #4]	@ unaligned
 3500 0058 AA60     		str	r2, [r5, #8]	@ unaligned
 3501 005a EB60     		str	r3, [r5, #12]	@ unaligned
 3502 005c 2388     		ldrh	r3, [r4]	@ unaligned
 3503 005e A278     		ldrb	r2, [r4, #2]
 3504 0060 2B82     		strh	r3, [r5, #16]	@ unaligned
 3505 0062 1346     		mov	r3, r2
 3506 0064 AB74     		strb	r3, [r5, #18]
 763:..\src/command_processing.c ****         strcat(info_string, VERSION);
 3507              		.loc 1 763 0
 3508 0066 7868     		ldr	r0, [r7, #4]
 3509 0068 FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 93


 3510 006c 0346     		mov	r3, r0
 3511 006e 1A46     		mov	r2, r3
 3512 0070 7B68     		ldr	r3, [r7, #4]
 3513 0072 1344     		add	r3, r3, r2
 3514 0074 594A     		ldr	r2, .L191+12
 3515 0076 1446     		mov	r4, r2
 3516 0078 9E46     		mov	lr, r3
 3517 007a 04F1200C 		add	ip, r4, #32
 3518              	.L187:
 3519 007e 7546     		mov	r5, lr
 3520 0080 2646     		mov	r6, r4
 3521 0082 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 3522 0084 2860     		str	r0, [r5]	@ unaligned
 3523 0086 6960     		str	r1, [r5, #4]	@ unaligned
 3524 0088 AA60     		str	r2, [r5, #8]	@ unaligned
 3525 008a EB60     		str	r3, [r5, #12]	@ unaligned
 3526 008c 1034     		adds	r4, r4, #16
 3527 008e 0EF1100E 		add	lr, lr, #16
 3528 0092 6445     		cmp	r4, ip
 3529 0094 F3D1     		bne	.L187
 3530 0096 7346     		mov	r3, lr
 3531 0098 2246     		mov	r2, r4
 3532 009a 1278     		ldrb	r2, [r2]
 3533 009c 1A70     		strb	r2, [r3]
 764:..\src/command_processing.c ****         strcat(info_string, ".\r\n\r\n");      
 3534              		.loc 1 764 0
 3535 009e 7868     		ldr	r0, [r7, #4]
 3536 00a0 FFF7FEFF 		bl	strlen
 3537 00a4 0346     		mov	r3, r0
 3538 00a6 1A46     		mov	r2, r3
 3539 00a8 7B68     		ldr	r3, [r7, #4]
 3540 00aa 1344     		add	r3, r3, r2
 3541 00ac 4C4A     		ldr	r2, .L191+16
 3542 00ae 1068     		ldr	r0, [r2]	@ unaligned
 3543 00b0 1860     		str	r0, [r3]	@ unaligned
 3544 00b2 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3545 00b4 9A80     		strh	r2, [r3, #4]	@ unaligned
 765:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 3546              		.loc 1 765 0
 3547 00b6 7868     		ldr	r0, [r7, #4]
 3548 00b8 FFF7FEFF 		bl	strlen
 3549 00bc 0346     		mov	r3, r0
 3550 00be 1A46     		mov	r2, r3
 3551 00c0 7B68     		ldr	r3, [r7, #4]
 3552 00c2 1344     		add	r3, r3, r2
 3553 00c4 474A     		ldr	r2, .L191+20
 3554 00c6 1C46     		mov	r4, r3
 3555 00c8 1346     		mov	r3, r2
 3556 00ca 07CB     		ldmia	r3!, {r0, r1, r2}
 3557 00cc 2060     		str	r0, [r4]	@ unaligned
 3558 00ce 6160     		str	r1, [r4, #4]	@ unaligned
 3559 00d0 A260     		str	r2, [r4, #8]	@ unaligned
 3560 00d2 1B88     		ldrh	r3, [r3]	@ unaligned
 3561 00d4 A381     		strh	r3, [r4, #12]	@ unaligned
 766:..\src/command_processing.c ****         strcat(info_string, "Device: PULSE\r\n");
 3562              		.loc 1 766 0
 3563 00d6 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 94


 3564 00d8 FFF7FEFF 		bl	strlen
 3565 00dc 0346     		mov	r3, r0
 3566 00de 1A46     		mov	r2, r3
 3567 00e0 7B68     		ldr	r3, [r7, #4]
 3568 00e2 1344     		add	r3, r3, r2
 3569 00e4 404A     		ldr	r2, .L191+24
 3570 00e6 1C46     		mov	r4, r3
 3571 00e8 1546     		mov	r5, r2
 3572 00ea 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3573 00ec 2060     		str	r0, [r4]	@ unaligned
 3574 00ee 6160     		str	r1, [r4, #4]	@ unaligned
 3575 00f0 A260     		str	r2, [r4, #8]	@ unaligned
 3576 00f2 E360     		str	r3, [r4, #12]	@ unaligned
 767:..\src/command_processing.c ****         strcat(info_string, superstring);
 3577              		.loc 1 767 0
 3578 00f4 3D49     		ldr	r1, .L191+28
 3579 00f6 7868     		ldr	r0, [r7, #4]
 3580 00f8 FFF7FEFF 		bl	strcat
 768:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3581              		.loc 1 768 0
 3582 00fc 7868     		ldr	r0, [r7, #4]
 3583 00fe FFF7FEFF 		bl	strlen
 3584 0102 0346     		mov	r3, r0
 3585 0104 1A46     		mov	r2, r3
 3586 0106 7B68     		ldr	r3, [r7, #4]
 3587 0108 1344     		add	r3, r3, r2
 3588 010a 324A     		ldr	r2, .L191+4
 3589 010c 1188     		ldrh	r1, [r2]	@ unaligned
 3590 010e 9278     		ldrb	r2, [r2, #2]
 3591 0110 1980     		strh	r1, [r3]	@ unaligned
 3592 0112 9A70     		strb	r2, [r3, #2]
 769:..\src/command_processing.c **** 
 770:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 3593              		.loc 1 770 0
 3594 0114 0023     		movs	r3, #0
 3595 0116 7B67     		str	r3, [r7, #116]
 3596 0118 20E0     		b	.L188
 3597              	.L189:
 771:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3598              		.loc 1 771 0 discriminator 3
 3599 011a 7B6F     		ldr	r3, [r7, #116]
 3600 011c 591C     		adds	r1, r3, #1
 3601 011e 344A     		ldr	r2, .L191+32
 3602 0120 7B6F     		ldr	r3, [r7, #116]
 3603 0122 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3604 0126 07F10C00 		add	r0, r7, #12
 3605 012a 0A46     		mov	r2, r1
 3606 012c 3149     		ldr	r1, .L191+36
 3607 012e FFF7FEFF 		bl	sprintf
 772:..\src/command_processing.c ****                 strcat(info_string, str);
 3608              		.loc 1 772 0 discriminator 3
 3609 0132 07F10C03 		add	r3, r7, #12
 3610 0136 1946     		mov	r1, r3
 3611 0138 7868     		ldr	r0, [r7, #4]
 3612 013a FFF7FEFF 		bl	strcat
 773:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 3613              		.loc 1 773 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 95


 3614 013e 7868     		ldr	r0, [r7, #4]
 3615 0140 FFF7FEFF 		bl	strlen
 3616 0144 0346     		mov	r3, r0
 3617 0146 1A46     		mov	r2, r3
 3618 0148 7B68     		ldr	r3, [r7, #4]
 3619 014a 1344     		add	r3, r3, r2
 3620 014c 214A     		ldr	r2, .L191+4
 3621 014e 1188     		ldrh	r1, [r2]	@ unaligned
 3622 0150 9278     		ldrb	r2, [r2, #2]
 3623 0152 1980     		strh	r1, [r3]	@ unaligned
 3624 0154 9A70     		strb	r2, [r3, #2]
 770:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3625              		.loc 1 770 0 discriminator 3
 3626 0156 7B6F     		ldr	r3, [r7, #116]
 3627 0158 0133     		adds	r3, r3, #1
 3628 015a 7B67     		str	r3, [r7, #116]
 3629              	.L188:
 770:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3630              		.loc 1 770 0 is_stmt 0 discriminator 1
 3631 015c 7B6F     		ldr	r3, [r7, #116]
 3632 015e 012B     		cmp	r3, #1
 3633 0160 DBDD     		ble	.L189
 774:..\src/command_processing.c ****             }
 775:..\src/command_processing.c ****             
 776:..\src/command_processing.c ****             
 777:..\src/command_processing.c ****         sprintf(str,"Actuators input: Pump = %d, VT0 = %d, VT1 = %d \r\n",(int) Pump_refOld, (int)V
 3634              		.loc 1 777 0 is_stmt 1
 3635 0162 254B     		ldr	r3, .L191+40
 3636 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3637 0166 1A46     		mov	r2, r3
 3638 0168 244B     		ldr	r3, .L191+44
 3639 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3640 016c 1946     		mov	r1, r3
 3641 016e 234B     		ldr	r3, .L191+44
 3642 0170 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3643 0172 07F10C00 		add	r0, r7, #12
 3644 0176 0093     		str	r3, [sp]
 3645 0178 0B46     		mov	r3, r1
 3646 017a 2149     		ldr	r1, .L191+48
 3647 017c FFF7FEFF 		bl	sprintf
 778:..\src/command_processing.c ****         strcat(info_string, str);
 3648              		.loc 1 778 0
 3649 0180 07F10C03 		add	r3, r7, #12
 3650 0184 1946     		mov	r1, r3
 3651 0186 7868     		ldr	r0, [r7, #4]
 3652 0188 FFF7FEFF 		bl	strcat
 779:..\src/command_processing.c ****         sprintf(str, "Last FW cycle time: %u us\r\n", (uint16)timer_value0 - (uint16)timer_value);
 3653              		.loc 1 779 0
 3654 018c 1D4B     		ldr	r3, .L191+52
 3655 018e 1B88     		ldrh	r3, [r3]
 3656 0190 1A46     		mov	r2, r3
 3657 0192 1D4B     		ldr	r3, .L191+56
 3658 0194 1B88     		ldrh	r3, [r3]
 3659 0196 D21A     		subs	r2, r2, r3
 3660 0198 07F10C03 		add	r3, r7, #12
 3661 019c 1B49     		ldr	r1, .L191+60
 3662 019e 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 96


 3663 01a0 FFF7FEFF 		bl	sprintf
 780:..\src/command_processing.c ****         strcat(info_string, str);
 3664              		.loc 1 780 0
 3665 01a4 07F10C03 		add	r3, r7, #12
 3666 01a8 1946     		mov	r1, r3
 3667 01aa 7868     		ldr	r0, [r7, #4]
 3668 01ac FFF7FEFF 		bl	strcat
 781:..\src/command_processing.c **** 
 782:..\src/command_processing.c ****                
 783:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 3669              		.loc 1 783 0
 3670 01b0 7868     		ldr	r0, [r7, #4]
 3671 01b2 FFF7FEFF 		bl	strlen
 3672 01b6 0346     		mov	r3, r0
 3673 01b8 1A46     		mov	r2, r3
 3674 01ba 7B68     		ldr	r3, [r7, #4]
 3675 01bc 1344     		add	r3, r3, r2
 3676 01be 144A     		ldr	r2, .L191+64
 3677 01c0 1188     		ldrh	r1, [r2]	@ unaligned
 3678 01c2 9278     		ldrb	r2, [r2, #2]
 3679 01c4 1980     		strh	r1, [r3]	@ unaligned
 3680 01c6 9A70     		strb	r2, [r3, #2]
 3681              	.L190:
 3682              	.LBE27:
 784:..\src/command_processing.c ****     }
 785:..\src/command_processing.c **** }
 3683              		.loc 1 785 0
 3684 01c8 00BF     		nop
 3685 01ca 7C37     		adds	r7, r7, #124
 3686              		.cfi_def_cfa_offset 20
 3687 01cc BD46     		mov	sp, r7
 3688              		.cfi_def_cfa_register 13
 3689              		@ sp needed
 3690 01ce F0BD     		pop	{r4, r5, r6, r7, pc}
 3691              	.L192:
 3692              		.align	2
 3693              	.L191:
 3694 01d0 00000000 		.word	c_mem
 3695 01d4 88020000 		.word	.LC37
 3696 01d8 8C020000 		.word	.LC38
 3697 01dc A0020000 		.word	.LC39
 3698 01e0 C4020000 		.word	.LC40
 3699 01e4 CC020000 		.word	.LC41
 3700 01e8 DC020000 		.word	.LC42
 3701 01ec 00000000 		.word	superstring
 3702 01f0 00000000 		.word	g_adc_meas
 3703 01f4 EC020000 		.word	.LC43
 3704 01f8 00000000 		.word	Pump_refOld
 3705 01fc 00000000 		.word	VT_refOld
 3706 0200 00030000 		.word	.LC44
 3707 0204 00000000 		.word	timer_value0
 3708 0208 00000000 		.word	timer_value
 3709 020c 34030000 		.word	.LC45
 3710 0210 50030000 		.word	.LC46
 3711              		.cfi_endproc
 3712              	.LFE74:
 3713              		.size	prepare_generic_info, .-prepare_generic_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 97


 3714              		.section	.text.prepare_counter_info,"ax",%progbits
 3715              		.align	2
 3716              		.global	prepare_counter_info
 3717              		.thumb
 3718              		.thumb_func
 3719              		.type	prepare_counter_info, %function
 3720              	prepare_counter_info:
 3721              	.LFB75:
 786:..\src/command_processing.c **** 
 787:..\src/command_processing.c **** //==============================================================================
 788:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 789:..\src/command_processing.c **** //==============================================================================
 790:..\src/command_processing.c **** 
 791:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 792:..\src/command_processing.c **** {
 3722              		.loc 1 792 0
 3723              		.cfi_startproc
 3724              		@ args = 0, pretend = 0, frame = 8
 3725              		@ frame_needed = 1, uses_anonymous_args = 0
 3726              		@ link register save eliminated.
 3727 0000 80B4     		push	{r7}
 3728              		.cfi_def_cfa_offset 4
 3729              		.cfi_offset 7, -4
 3730 0002 83B0     		sub	sp, sp, #12
 3731              		.cfi_def_cfa_offset 16
 3732 0004 00AF     		add	r7, sp, #0
 3733              		.cfi_def_cfa_register 7
 3734 0006 7860     		str	r0, [r7, #4]
 793:..\src/command_processing.c **** }
 3735              		.loc 1 793 0
 3736 0008 00BF     		nop
 3737 000a 0C37     		adds	r7, r7, #12
 3738              		.cfi_def_cfa_offset 4
 3739 000c BD46     		mov	sp, r7
 3740              		.cfi_def_cfa_register 13
 3741              		@ sp needed
 3742 000e 80BC     		pop	{r7}
 3743              		.cfi_restore 7
 3744              		.cfi_def_cfa_offset 0
 3745 0010 7047     		bx	lr
 3746              		.cfi_endproc
 3747              	.LFE75:
 3748              		.size	prepare_counter_info, .-prepare_counter_info
 3749 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 3750              		.align	2
 3751              		.global	prepare_R01_info
 3752              		.thumb
 3753              		.thumb_func
 3754              		.type	prepare_R01_info, %function
 3755              	prepare_R01_info:
 3756              	.LFB76:
 794:..\src/command_processing.c **** 
 795:..\src/command_processing.c **** //==============================================================================
 796:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 797:..\src/command_processing.c **** //==============================================================================
 798:..\src/command_processing.c **** 
 799:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 98


 800:..\src/command_processing.c **** {
 3757              		.loc 1 800 0
 3758              		.cfi_startproc
 3759              		@ args = 0, pretend = 0, frame = 8
 3760              		@ frame_needed = 1, uses_anonymous_args = 0
 3761              		@ link register save eliminated.
 3762 0000 80B4     		push	{r7}
 3763              		.cfi_def_cfa_offset 4
 3764              		.cfi_offset 7, -4
 3765 0002 83B0     		sub	sp, sp, #12
 3766              		.cfi_def_cfa_offset 16
 3767 0004 00AF     		add	r7, sp, #0
 3768              		.cfi_def_cfa_register 7
 3769 0006 7860     		str	r0, [r7, #4]
 801:..\src/command_processing.c **** }
 3770              		.loc 1 801 0
 3771 0008 00BF     		nop
 3772 000a 0C37     		adds	r7, r7, #12
 3773              		.cfi_def_cfa_offset 4
 3774 000c BD46     		mov	sp, r7
 3775              		.cfi_def_cfa_register 13
 3776              		@ sp needed
 3777 000e 80BC     		pop	{r7}
 3778              		.cfi_restore 7
 3779              		.cfi_def_cfa_offset 0
 3780 0010 7047     		bx	lr
 3781              		.cfi_endproc
 3782              	.LFE76:
 3783              		.size	prepare_R01_info, .-prepare_R01_info
 3784 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 3785              		.align	2
 3786              		.global	prepare_SD_param_info
 3787              		.thumb
 3788              		.thumb_func
 3789              		.type	prepare_SD_param_info, %function
 3790              	prepare_SD_param_info:
 3791              	.LFB77:
 802:..\src/command_processing.c **** 
 803:..\src/command_processing.c **** //==============================================================================
 804:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 805:..\src/command_processing.c **** //==============================================================================
 806:..\src/command_processing.c **** 
 807:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 808:..\src/command_processing.c **** {
 3792              		.loc 1 808 0
 3793              		.cfi_startproc
 3794              		@ args = 0, pretend = 0, frame = 8
 3795              		@ frame_needed = 1, uses_anonymous_args = 0
 3796              		@ link register save eliminated.
 3797 0000 80B4     		push	{r7}
 3798              		.cfi_def_cfa_offset 4
 3799              		.cfi_offset 7, -4
 3800 0002 83B0     		sub	sp, sp, #12
 3801              		.cfi_def_cfa_offset 16
 3802 0004 00AF     		add	r7, sp, #0
 3803              		.cfi_def_cfa_register 7
 3804 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 99


 809:..\src/command_processing.c **** }
 3805              		.loc 1 809 0
 3806 0008 00BF     		nop
 3807 000a 0C37     		adds	r7, r7, #12
 3808              		.cfi_def_cfa_offset 4
 3809 000c BD46     		mov	sp, r7
 3810              		.cfi_def_cfa_register 13
 3811              		@ sp needed
 3812 000e 80BC     		pop	{r7}
 3813              		.cfi_restore 7
 3814              		.cfi_def_cfa_offset 0
 3815 0010 7047     		bx	lr
 3816              		.cfi_endproc
 3817              	.LFE77:
 3818              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 3819 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 3820              		.align	2
 3821              		.global	prepare_SD_legend
 3822              		.thumb
 3823              		.thumb_func
 3824              		.type	prepare_SD_legend, %function
 3825              	prepare_SD_legend:
 3826              	.LFB78:
 810:..\src/command_processing.c **** 
 811:..\src/command_processing.c **** 
 812:..\src/command_processing.c **** //==============================================================================
 813:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 814:..\src/command_processing.c **** //==============================================================================
 815:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 816:..\src/command_processing.c **** {
 3827              		.loc 1 816 0
 3828              		.cfi_startproc
 3829              		@ args = 0, pretend = 0, frame = 8
 3830              		@ frame_needed = 1, uses_anonymous_args = 0
 3831              		@ link register save eliminated.
 3832 0000 80B4     		push	{r7}
 3833              		.cfi_def_cfa_offset 4
 3834              		.cfi_offset 7, -4
 3835 0002 83B0     		sub	sp, sp, #12
 3836              		.cfi_def_cfa_offset 16
 3837 0004 00AF     		add	r7, sp, #0
 3838              		.cfi_def_cfa_register 7
 3839 0006 7860     		str	r0, [r7, #4]
 817:..\src/command_processing.c **** }
 3840              		.loc 1 817 0
 3841 0008 00BF     		nop
 3842 000a 0C37     		adds	r7, r7, #12
 3843              		.cfi_def_cfa_offset 4
 3844 000c BD46     		mov	sp, r7
 3845              		.cfi_def_cfa_register 13
 3846              		@ sp needed
 3847 000e 80BC     		pop	{r7}
 3848              		.cfi_restore 7
 3849              		.cfi_def_cfa_offset 0
 3850 0010 7047     		bx	lr
 3851              		.cfi_endproc
 3852              	.LFE78:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 100


 3853              		.size	prepare_SD_legend, .-prepare_SD_legend
 3854 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 3855              		.align	2
 3856              		.global	prepare_SD_EMG_History_legend
 3857              		.thumb
 3858              		.thumb_func
 3859              		.type	prepare_SD_EMG_History_legend, %function
 3860              	prepare_SD_EMG_History_legend:
 3861              	.LFB79:
 818:..\src/command_processing.c **** 
 819:..\src/command_processing.c **** //==============================================================================
 820:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 821:..\src/command_processing.c **** //==============================================================================
 822:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 823:..\src/command_processing.c **** {
 3862              		.loc 1 823 0
 3863              		.cfi_startproc
 3864              		@ args = 0, pretend = 0, frame = 8
 3865              		@ frame_needed = 1, uses_anonymous_args = 0
 3866              		@ link register save eliminated.
 3867 0000 80B4     		push	{r7}
 3868              		.cfi_def_cfa_offset 4
 3869              		.cfi_offset 7, -4
 3870 0002 83B0     		sub	sp, sp, #12
 3871              		.cfi_def_cfa_offset 16
 3872 0004 00AF     		add	r7, sp, #0
 3873              		.cfi_def_cfa_register 7
 3874 0006 7860     		str	r0, [r7, #4]
 824:..\src/command_processing.c ****     
 825:..\src/command_processing.c **** }
 3875              		.loc 1 825 0
 3876 0008 00BF     		nop
 3877 000a 0C37     		adds	r7, r7, #12
 3878              		.cfi_def_cfa_offset 4
 3879 000c BD46     		mov	sp, r7
 3880              		.cfi_def_cfa_register 13
 3881              		@ sp needed
 3882 000e 80BC     		pop	{r7}
 3883              		.cfi_restore 7
 3884              		.cfi_def_cfa_offset 0
 3885 0010 7047     		bx	lr
 3886              		.cfi_endproc
 3887              	.LFE79:
 3888              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 3889 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 3890              		.align	2
 3891              		.global	prepare_SD_EMG_history
 3892              		.thumb
 3893              		.thumb_func
 3894              		.type	prepare_SD_EMG_history, %function
 3895              	prepare_SD_EMG_history:
 3896              	.LFB80:
 826:..\src/command_processing.c **** 
 827:..\src/command_processing.c **** //==============================================================================
 828:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 829:..\src/command_processing.c **** //==============================================================================
 830:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 101


 831:..\src/command_processing.c **** {
 3897              		.loc 1 831 0
 3898              		.cfi_startproc
 3899              		@ args = 0, pretend = 0, frame = 8
 3900              		@ frame_needed = 1, uses_anonymous_args = 0
 3901              		@ link register save eliminated.
 3902 0000 80B4     		push	{r7}
 3903              		.cfi_def_cfa_offset 4
 3904              		.cfi_offset 7, -4
 3905 0002 83B0     		sub	sp, sp, #12
 3906              		.cfi_def_cfa_offset 16
 3907 0004 00AF     		add	r7, sp, #0
 3908              		.cfi_def_cfa_register 7
 3909 0006 7860     		str	r0, [r7, #4]
 832:..\src/command_processing.c ****         
 833:..\src/command_processing.c **** }
 3910              		.loc 1 833 0
 3911 0008 00BF     		nop
 3912 000a 0C37     		adds	r7, r7, #12
 3913              		.cfi_def_cfa_offset 4
 3914 000c BD46     		mov	sp, r7
 3915              		.cfi_def_cfa_register 13
 3916              		@ sp needed
 3917 000e 80BC     		pop	{r7}
 3918              		.cfi_restore 7
 3919              		.cfi_def_cfa_offset 0
 3920 0010 7047     		bx	lr
 3921              		.cfi_endproc
 3922              	.LFE80:
 3923              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 3924 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 3925              		.align	2
 3926              		.global	IMU_reading_info
 3927              		.thumb
 3928              		.thumb_func
 3929              		.type	IMU_reading_info, %function
 3930              	IMU_reading_info:
 3931              	.LFB81:
 834:..\src/command_processing.c **** 
 835:..\src/command_processing.c **** //==============================================================================
 836:..\src/command_processing.c **** //                                                              IMU READING INFO
 837:..\src/command_processing.c **** //==============================================================================
 838:..\src/command_processing.c **** 
 839:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 840:..\src/command_processing.c **** {
 3932              		.loc 1 840 0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 8
 3935              		@ frame_needed = 1, uses_anonymous_args = 0
 3936              		@ link register save eliminated.
 3937 0000 80B4     		push	{r7}
 3938              		.cfi_def_cfa_offset 4
 3939              		.cfi_offset 7, -4
 3940 0002 83B0     		sub	sp, sp, #12
 3941              		.cfi_def_cfa_offset 16
 3942 0004 00AF     		add	r7, sp, #0
 3943              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 102


 3944 0006 7860     		str	r0, [r7, #4]
 841:..\src/command_processing.c **** }
 3945              		.loc 1 841 0
 3946 0008 00BF     		nop
 3947 000a 0C37     		adds	r7, r7, #12
 3948              		.cfi_def_cfa_offset 4
 3949 000c BD46     		mov	sp, r7
 3950              		.cfi_def_cfa_register 13
 3951              		@ sp needed
 3952 000e 80BC     		pop	{r7}
 3953              		.cfi_restore 7
 3954              		.cfi_def_cfa_offset 0
 3955 0010 7047     		bx	lr
 3956              		.cfi_endproc
 3957              	.LFE81:
 3958              		.size	IMU_reading_info, .-IMU_reading_info
 3959 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 3960              		.align	2
 3961              		.global	commWrite_old_id
 3962              		.thumb
 3963              		.thumb_func
 3964              		.type	commWrite_old_id, %function
 3965              	commWrite_old_id:
 3966              	.LFB82:
 842:..\src/command_processing.c **** 
 843:..\src/command_processing.c **** //==============================================================================
 844:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 845:..\src/command_processing.c **** //==============================================================================
 846:..\src/command_processing.c **** 
 847:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 848:..\src/command_processing.c **** {
 3967              		.loc 1 848 0
 3968              		.cfi_startproc
 3969              		@ args = 0, pretend = 0, frame = 16
 3970              		@ frame_needed = 1, uses_anonymous_args = 0
 3971 0000 80B5     		push	{r7, lr}
 3972              		.cfi_def_cfa_offset 8
 3973              		.cfi_offset 7, -8
 3974              		.cfi_offset 14, -4
 3975 0002 84B0     		sub	sp, sp, #16
 3976              		.cfi_def_cfa_offset 24
 3977 0004 00AF     		add	r7, sp, #0
 3978              		.cfi_def_cfa_register 7
 3979 0006 7860     		str	r0, [r7, #4]
 3980 0008 0B46     		mov	r3, r1
 3981 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3982 000c 1346     		mov	r3, r2
 3983 000e 7B70     		strb	r3, [r7, #1]
 849:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 850:..\src/command_processing.c **** 
 851:..\src/command_processing.c ****     // frame - start
 852:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3984              		.loc 1 852 0
 3985 0010 3A20     		movs	r0, #58
 3986 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 853:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 3987              		.loc 1 853 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 103


 3988 0016 3A20     		movs	r0, #58
 3989 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 854:..\src/command_processing.c ****     // frame - ID
 855:..\src/command_processing.c ****     //if(old_id)
 856:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 3990              		.loc 1 856 0
 3991 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3992 001e 1846     		mov	r0, r3
 3993 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 857:..\src/command_processing.c ****     //else
 858:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 859:..\src/command_processing.c ****         
 860:..\src/command_processing.c ****     // frame - length
 861:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 3994              		.loc 1 861 0
 3995 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3996 0026 DBB2     		uxtb	r3, r3
 3997 0028 1846     		mov	r0, r3
 3998 002a FFF7FEFF 		bl	UART_RS485_PutChar
 862:..\src/command_processing.c ****     // frame - packet data
 863:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 3999              		.loc 1 863 0
 4000 002e 0023     		movs	r3, #0
 4001 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 4002 0032 09E0     		b	.L201
 4003              	.L202:
 864:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4004              		.loc 1 864 0 discriminator 3
 4005 0034 FB89     		ldrh	r3, [r7, #14]
 4006 0036 7A68     		ldr	r2, [r7, #4]
 4007 0038 1344     		add	r3, r3, r2
 4008 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4009 003c 1846     		mov	r0, r3
 4010 003e FFF7FEFF 		bl	UART_RS485_PutChar
 863:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4011              		.loc 1 863 0 discriminator 3
 4012 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4013 0044 0133     		adds	r3, r3, #1
 4014 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4015              	.L201:
 863:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4016              		.loc 1 863 0 is_stmt 0 discriminator 1
 4017 0048 FA89     		ldrh	r2, [r7, #14]
 4018 004a 7B88     		ldrh	r3, [r7, #2]
 4019 004c 9A42     		cmp	r2, r3
 4020 004e F1D3     		bcc	.L202
 865:..\src/command_processing.c ****     }
 866:..\src/command_processing.c **** 
 867:..\src/command_processing.c ****     index = 0;
 4021              		.loc 1 867 0 is_stmt 1
 4022 0050 0023     		movs	r3, #0
 4023 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4024              		.loc 1 869 0
 4025 0054 00BF     		nop
 4026              	.L204:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 104


 4027              		.loc 1 869 0 is_stmt 0 discriminator 2
 4028 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4029 005a 0346     		mov	r3, r0
 4030 005c 03F00103 		and	r3, r3, #1
 4031 0060 002B     		cmp	r3, #0
 4032 0062 05D1     		bne	.L203
 4033              		.loc 1 869 0 discriminator 1
 4034 0064 FB89     		ldrh	r3, [r7, #14]
 4035 0066 5A1C     		adds	r2, r3, #1
 4036 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 4037 006a B3F57A7F 		cmp	r3, #1000
 4038 006e F2D9     		bls	.L204
 4039              	.L203:
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4040              		.loc 1 871 0 is_stmt 1
 4041 0070 0120     		movs	r0, #1
 4042 0072 FFF7FEFF 		bl	RS485_CTS_Write
 872:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4043              		.loc 1 872 0
 4044 0076 0020     		movs	r0, #0
 4045 0078 FFF7FEFF 		bl	RS485_CTS_Write
 873:..\src/command_processing.c **** }
 4046              		.loc 1 873 0
 4047 007c 00BF     		nop
 4048 007e 1037     		adds	r7, r7, #16
 4049              		.cfi_def_cfa_offset 8
 4050 0080 BD46     		mov	sp, r7
 4051              		.cfi_def_cfa_register 13
 4052              		@ sp needed
 4053 0082 80BD     		pop	{r7, pc}
 4054              		.cfi_endproc
 4055              	.LFE82:
 4056              		.size	commWrite_old_id, .-commWrite_old_id
 4057              		.section	.text.commWrite,"ax",%progbits
 4058              		.align	2
 4059              		.global	commWrite
 4060              		.thumb
 4061              		.thumb_func
 4062              		.type	commWrite, %function
 4063              	commWrite:
 4064              	.LFB83:
 874:..\src/command_processing.c **** 
 875:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 876:..\src/command_processing.c **** {
 4065              		.loc 1 876 0
 4066              		.cfi_startproc
 4067              		@ args = 0, pretend = 0, frame = 16
 4068              		@ frame_needed = 1, uses_anonymous_args = 0
 4069 0000 80B5     		push	{r7, lr}
 4070              		.cfi_def_cfa_offset 8
 4071              		.cfi_offset 7, -8
 4072              		.cfi_offset 14, -4
 4073 0002 84B0     		sub	sp, sp, #16
 4074              		.cfi_def_cfa_offset 24
 4075 0004 00AF     		add	r7, sp, #0
 4076              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 105


 4077 0006 7860     		str	r0, [r7, #4]
 4078 0008 0B46     		mov	r3, r1
 4079 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 877:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 878:..\src/command_processing.c **** 
 879:..\src/command_processing.c ****     // frame - start
 880:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4080              		.loc 1 880 0
 4081 000c 3A20     		movs	r0, #58
 4082 000e FFF7FEFF 		bl	UART_RS485_PutChar
 881:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4083              		.loc 1 881 0
 4084 0012 3A20     		movs	r0, #58
 4085 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 882:..\src/command_processing.c ****     // frame - ID
 883:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 4086              		.loc 1 883 0
 4087 0018 1A4B     		ldr	r3, .L210
 4088 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 4089 001c 1846     		mov	r0, r3
 4090 001e FFF7FEFF 		bl	UART_RS485_PutChar
 884:..\src/command_processing.c ****     // frame - length
 885:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4091              		.loc 1 885 0
 4092 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4093 0024 DBB2     		uxtb	r3, r3
 4094 0026 1846     		mov	r0, r3
 4095 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 886:..\src/command_processing.c ****     // frame - packet data
 887:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4096              		.loc 1 887 0
 4097 002c 0023     		movs	r3, #0
 4098 002e FB81     		strh	r3, [r7, #14]	@ movhi
 4099 0030 09E0     		b	.L206
 4100              	.L207:
 888:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4101              		.loc 1 888 0 discriminator 3
 4102 0032 FB89     		ldrh	r3, [r7, #14]
 4103 0034 7A68     		ldr	r2, [r7, #4]
 4104 0036 1344     		add	r3, r3, r2
 4105 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4106 003a 1846     		mov	r0, r3
 4107 003c FFF7FEFF 		bl	UART_RS485_PutChar
 887:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4108              		.loc 1 887 0 discriminator 3
 4109 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4110 0042 0133     		adds	r3, r3, #1
 4111 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 4112              	.L206:
 887:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4113              		.loc 1 887 0 is_stmt 0 discriminator 1
 4114 0046 FA89     		ldrh	r2, [r7, #14]
 4115 0048 7B88     		ldrh	r3, [r7, #2]
 4116 004a 9A42     		cmp	r2, r3
 4117 004c F1D3     		bcc	.L207
 889:..\src/command_processing.c ****     }
 890:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 106


 891:..\src/command_processing.c ****     index = 0;
 4118              		.loc 1 891 0 is_stmt 1
 4119 004e 0023     		movs	r3, #0
 4120 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 892:..\src/command_processing.c **** 
 893:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4121              		.loc 1 893 0
 4122 0052 00BF     		nop
 4123              	.L209:
 4124              		.loc 1 893 0 is_stmt 0 discriminator 2
 4125 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4126 0058 0346     		mov	r3, r0
 4127 005a 03F00103 		and	r3, r3, #1
 4128 005e 002B     		cmp	r3, #0
 4129 0060 05D1     		bne	.L208
 4130              		.loc 1 893 0 discriminator 1
 4131 0062 FB89     		ldrh	r3, [r7, #14]
 4132 0064 5A1C     		adds	r2, r3, #1
 4133 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 4134 0068 B3F57A7F 		cmp	r3, #1000
 4135 006c F2D9     		bls	.L209
 4136              	.L208:
 894:..\src/command_processing.c **** 
 895:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4137              		.loc 1 895 0 is_stmt 1
 4138 006e 0120     		movs	r0, #1
 4139 0070 FFF7FEFF 		bl	RS485_CTS_Write
 896:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4140              		.loc 1 896 0
 4141 0074 0020     		movs	r0, #0
 4142 0076 FFF7FEFF 		bl	RS485_CTS_Write
 897:..\src/command_processing.c **** }
 4143              		.loc 1 897 0
 4144 007a 00BF     		nop
 4145 007c 1037     		adds	r7, r7, #16
 4146              		.cfi_def_cfa_offset 8
 4147 007e BD46     		mov	sp, r7
 4148              		.cfi_def_cfa_register 13
 4149              		@ sp needed
 4150 0080 80BD     		pop	{r7, pc}
 4151              	.L211:
 4152 0082 00BF     		.align	2
 4153              	.L210:
 4154 0084 00000000 		.word	g_mem
 4155              		.cfi_endproc
 4156              	.LFE83:
 4157              		.size	commWrite, .-commWrite
 4158              		.section	.text.commWriteID,"ax",%progbits
 4159              		.align	2
 4160              		.global	commWriteID
 4161              		.thumb
 4162              		.thumb_func
 4163              		.type	commWriteID, %function
 4164              	commWriteID:
 4165              	.LFB84:
 898:..\src/command_processing.c **** 
 899:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 107


 900:..\src/command_processing.c **** //==============================================================================
 901:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 902:..\src/command_processing.c **** //==============================================================================
 903:..\src/command_processing.c **** 
 904:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 905:..\src/command_processing.c **** {
 4166              		.loc 1 905 0
 4167              		.cfi_startproc
 4168              		@ args = 0, pretend = 0, frame = 8
 4169              		@ frame_needed = 1, uses_anonymous_args = 0
 4170 0000 80B5     		push	{r7, lr}
 4171              		.cfi_def_cfa_offset 8
 4172              		.cfi_offset 7, -8
 4173              		.cfi_offset 14, -4
 4174 0002 82B0     		sub	sp, sp, #8
 4175              		.cfi_def_cfa_offset 16
 4176 0004 00AF     		add	r7, sp, #0
 4177              		.cfi_def_cfa_register 7
 4178 0006 7860     		str	r0, [r7, #4]
 4179 0008 0B46     		mov	r3, r1
 4180 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4181 000c 1346     		mov	r3, r2
 4182 000e 7B70     		strb	r3, [r7, #1]
 906:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 907:..\src/command_processing.c **** 
 908:..\src/command_processing.c ****     // frame - start
 909:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4183              		.loc 1 909 0
 4184 0010 3A20     		movs	r0, #58
 4185 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 910:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4186              		.loc 1 910 0
 4187 0016 3A20     		movs	r0, #58
 4188 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 911:..\src/command_processing.c ****     // frame - ID
 912:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 4189              		.loc 1 912 0
 4190 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4191 001e 1846     		mov	r0, r3
 4192 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 913:..\src/command_processing.c ****     // frame - length
 914:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4193              		.loc 1 914 0
 4194 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4195 0026 DBB2     		uxtb	r3, r3
 4196 0028 1846     		mov	r0, r3
 4197 002a FFF7FEFF 		bl	UART_RS485_PutChar
 915:..\src/command_processing.c ****     // frame - packet data
 916:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 4198              		.loc 1 916 0
 4199 002e 1B4B     		ldr	r3, .L217
 4200 0030 0022     		movs	r2, #0
 4201 0032 1A80     		strh	r2, [r3]	@ movhi
 4202 0034 0EE0     		b	.L213
 4203              	.L214:
 917:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4204              		.loc 1 917 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 108


 4205 0036 194B     		ldr	r3, .L217
 4206 0038 1B88     		ldrh	r3, [r3]
 4207 003a 1A46     		mov	r2, r3
 4208 003c 7B68     		ldr	r3, [r7, #4]
 4209 003e 1344     		add	r3, r3, r2
 4210 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4211 0042 1846     		mov	r0, r3
 4212 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 916:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4213              		.loc 1 916 0 discriminator 3
 4214 0048 144B     		ldr	r3, .L217
 4215 004a 1B88     		ldrh	r3, [r3]
 4216 004c 0133     		adds	r3, r3, #1
 4217 004e 9AB2     		uxth	r2, r3
 4218 0050 124B     		ldr	r3, .L217
 4219 0052 1A80     		strh	r2, [r3]	@ movhi
 4220              	.L213:
 916:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4221              		.loc 1 916 0 is_stmt 0 discriminator 1
 4222 0054 114B     		ldr	r3, .L217
 4223 0056 1B88     		ldrh	r3, [r3]
 4224 0058 7A88     		ldrh	r2, [r7, #2]
 4225 005a 9A42     		cmp	r2, r3
 4226 005c EBD8     		bhi	.L214
 918:..\src/command_processing.c ****     }
 919:..\src/command_processing.c **** 
 920:..\src/command_processing.c ****     i = 0;
 4227              		.loc 1 920 0 is_stmt 1
 4228 005e 0F4B     		ldr	r3, .L217
 4229 0060 0022     		movs	r2, #0
 4230 0062 1A80     		strh	r2, [r3]	@ movhi
 921:..\src/command_processing.c **** 
 922:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 4231              		.loc 1 922 0
 4232 0064 00BF     		nop
 4233              	.L216:
 4234              		.loc 1 922 0 is_stmt 0 discriminator 2
 4235 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4236 006a 0346     		mov	r3, r0
 4237 006c 03F00103 		and	r3, r3, #1
 4238 0070 002B     		cmp	r3, #0
 4239 0072 08D1     		bne	.L215
 4240              		.loc 1 922 0 discriminator 1
 4241 0074 094B     		ldr	r3, .L217
 4242 0076 1B88     		ldrh	r3, [r3]
 4243 0078 5A1C     		adds	r2, r3, #1
 4244 007a 91B2     		uxth	r1, r2
 4245 007c 074A     		ldr	r2, .L217
 4246 007e 1180     		strh	r1, [r2]	@ movhi
 4247 0080 B3F57A7F 		cmp	r3, #1000
 4248 0084 EFD9     		bls	.L216
 4249              	.L215:
 923:..\src/command_processing.c ****     
 924:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4250              		.loc 1 924 0 is_stmt 1
 4251 0086 0120     		movs	r0, #1
 4252 0088 FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 109


 925:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4253              		.loc 1 925 0
 4254 008c 0020     		movs	r0, #0
 4255 008e FFF7FEFF 		bl	RS485_CTS_Write
 926:..\src/command_processing.c **** }
 4256              		.loc 1 926 0
 4257 0092 00BF     		nop
 4258 0094 0837     		adds	r7, r7, #8
 4259              		.cfi_def_cfa_offset 8
 4260 0096 BD46     		mov	sp, r7
 4261              		.cfi_def_cfa_register 13
 4262              		@ sp needed
 4263 0098 80BD     		pop	{r7, pc}
 4264              	.L218:
 4265 009a 00BF     		.align	2
 4266              	.L217:
 4267 009c 00000000 		.word	i.10022
 4268              		.cfi_endproc
 4269              	.LFE84:
 4270              		.size	commWriteID, .-commWriteID
 4271              		.section	.text.LCRChecksum,"ax",%progbits
 4272              		.align	2
 4273              		.global	LCRChecksum
 4274              		.thumb
 4275              		.thumb_func
 4276              		.type	LCRChecksum, %function
 4277              	LCRChecksum:
 4278              	.LFB85:
 927:..\src/command_processing.c **** 
 928:..\src/command_processing.c **** //==============================================================================
 929:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 930:..\src/command_processing.c **** //==============================================================================
 931:..\src/command_processing.c **** 
 932:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 933:..\src/command_processing.c **** 
 934:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 4279              		.loc 1 934 0
 4280              		.cfi_startproc
 4281              		@ args = 0, pretend = 0, frame = 16
 4282              		@ frame_needed = 1, uses_anonymous_args = 0
 4283              		@ link register save eliminated.
 4284 0000 80B4     		push	{r7}
 4285              		.cfi_def_cfa_offset 4
 4286              		.cfi_offset 7, -4
 4287 0002 85B0     		sub	sp, sp, #20
 4288              		.cfi_def_cfa_offset 24
 4289 0004 00AF     		add	r7, sp, #0
 4290              		.cfi_def_cfa_register 7
 4291 0006 7860     		str	r0, [r7, #4]
 4292 0008 0B46     		mov	r3, r1
 4293 000a FB70     		strb	r3, [r7, #3]
 935:..\src/command_processing.c ****     
 936:..\src/command_processing.c ****     uint8 CYDATA i;
 937:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
 4294              		.loc 1 937 0
 4295 000c 0023     		movs	r3, #0
 4296 000e BB73     		strb	r3, [r7, #14]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 110


 938:..\src/command_processing.c ****     
 939:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 4297              		.loc 1 939 0
 4298 0010 0023     		movs	r3, #0
 4299 0012 FB73     		strb	r3, [r7, #15]
 4300 0014 09E0     		b	.L220
 4301              	.L221:
 940:..\src/command_processing.c ****        checksum ^= data_array[i];
 4302              		.loc 1 940 0 discriminator 3
 4303 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4304 0018 7A68     		ldr	r2, [r7, #4]
 4305 001a 1344     		add	r3, r3, r2
 4306 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4307 001e BB7B     		ldrb	r3, [r7, #14]
 4308 0020 5340     		eors	r3, r3, r2
 4309 0022 BB73     		strb	r3, [r7, #14]
 939:..\src/command_processing.c ****        checksum ^= data_array[i];
 4310              		.loc 1 939 0 discriminator 3
 4311 0024 FB7B     		ldrb	r3, [r7, #15]
 4312 0026 0133     		adds	r3, r3, #1
 4313 0028 FB73     		strb	r3, [r7, #15]
 4314              	.L220:
 939:..\src/command_processing.c ****        checksum ^= data_array[i];
 4315              		.loc 1 939 0 is_stmt 0 discriminator 1
 4316 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4317 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4318 002e 9A42     		cmp	r2, r3
 4319 0030 F1D3     		bcc	.L221
 941:..\src/command_processing.c ****   
 942:..\src/command_processing.c ****     return checksum;
 4320              		.loc 1 942 0 is_stmt 1
 4321 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 943:..\src/command_processing.c **** }
 4322              		.loc 1 943 0
 4323 0034 1846     		mov	r0, r3
 4324 0036 1437     		adds	r7, r7, #20
 4325              		.cfi_def_cfa_offset 4
 4326 0038 BD46     		mov	sp, r7
 4327              		.cfi_def_cfa_register 13
 4328              		@ sp needed
 4329 003a 80BC     		pop	{r7}
 4330              		.cfi_restore 7
 4331              		.cfi_def_cfa_offset 0
 4332 003c 7047     		bx	lr
 4333              		.cfi_endproc
 4334              	.LFE85:
 4335              		.size	LCRChecksum, .-LCRChecksum
 4336 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 4337              		.align	2
 4338              		.global	sendAcknowledgment
 4339              		.thumb
 4340              		.thumb_func
 4341              		.type	sendAcknowledgment, %function
 4342              	sendAcknowledgment:
 4343              	.LFB86:
 944:..\src/command_processing.c **** 
 945:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 111


 946:..\src/command_processing.c **** //==============================================================================
 947:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 948:..\src/command_processing.c **** //==============================================================================
 949:..\src/command_processing.c **** 
 950:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 4344              		.loc 1 950 0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 16
 4347              		@ frame_needed = 1, uses_anonymous_args = 0
 4348 0000 80B5     		push	{r7, lr}
 4349              		.cfi_def_cfa_offset 8
 4350              		.cfi_offset 7, -8
 4351              		.cfi_offset 14, -4
 4352 0002 84B0     		sub	sp, sp, #16
 4353              		.cfi_def_cfa_offset 24
 4354 0004 00AF     		add	r7, sp, #0
 4355              		.cfi_def_cfa_register 7
 4356 0006 0346     		mov	r3, r0
 4357 0008 FB71     		strb	r3, [r7, #7]
 951:..\src/command_processing.c ****     int packet_length = 2;
 4358              		.loc 1 951 0
 4359 000a 0223     		movs	r3, #2
 4360 000c FB60     		str	r3, [r7, #12]
 952:..\src/command_processing.c ****     uint8 packet_data[2];
 953:..\src/command_processing.c **** 
 954:..\src/command_processing.c ****     packet_data[0] = value;
 4361              		.loc 1 954 0
 4362 000e FB79     		ldrb	r3, [r7, #7]
 4363 0010 3B72     		strb	r3, [r7, #8]
 955:..\src/command_processing.c ****     packet_data[1] = value;
 4364              		.loc 1 955 0
 4365 0012 FB79     		ldrb	r3, [r7, #7]
 4366 0014 7B72     		strb	r3, [r7, #9]
 956:..\src/command_processing.c **** 
 957:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 4367              		.loc 1 957 0
 4368 0016 FB68     		ldr	r3, [r7, #12]
 4369 0018 9AB2     		uxth	r2, r3
 4370 001a 07F10803 		add	r3, r7, #8
 4371 001e 1146     		mov	r1, r2
 4372 0020 1846     		mov	r0, r3
 4373 0022 FFF7FEFF 		bl	commWrite
 958:..\src/command_processing.c **** }
 4374              		.loc 1 958 0
 4375 0026 00BF     		nop
 4376 0028 1037     		adds	r7, r7, #16
 4377              		.cfi_def_cfa_offset 8
 4378 002a BD46     		mov	sp, r7
 4379              		.cfi_def_cfa_register 13
 4380              		@ sp needed
 4381 002c 80BD     		pop	{r7, pc}
 4382              		.cfi_endproc
 4383              	.LFE86:
 4384              		.size	sendAcknowledgment, .-sendAcknowledgment
 4385 002e 00BF     		.section	.text.memStore,"ax",%progbits
 4386              		.align	2
 4387              		.global	memStore
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 112


 4388              		.thumb
 4389              		.thumb_func
 4390              		.type	memStore, %function
 4391              	memStore:
 4392              	.LFB87:
 959:..\src/command_processing.c **** 
 960:..\src/command_processing.c **** //==============================================================================
 961:..\src/command_processing.c **** //                                                                  STORE MEMORY
 962:..\src/command_processing.c **** //==============================================================================
 963:..\src/command_processing.c **** 
 964:..\src/command_processing.c **** 
 965:..\src/command_processing.c **** uint8 memStore(int displacement)
 966:..\src/command_processing.c **** {
 4393              		.loc 1 966 0
 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 24
 4396              		@ frame_needed = 1, uses_anonymous_args = 0
 4397 0000 80B5     		push	{r7, lr}
 4398              		.cfi_def_cfa_offset 8
 4399              		.cfi_offset 7, -8
 4400              		.cfi_offset 14, -4
 4401 0002 86B0     		sub	sp, sp, #24
 4402              		.cfi_def_cfa_offset 32
 4403 0004 00AF     		add	r7, sp, #0
 4404              		.cfi_def_cfa_register 7
 4405 0006 7860     		str	r0, [r7, #4]
 967:..\src/command_processing.c ****     int i;  // iterator
 968:..\src/command_processing.c ****     uint8 writeStatus;
 969:..\src/command_processing.c ****     int pages;
 970:..\src/command_processing.c ****     uint8 ret_val = 1;
 4406              		.loc 1 970 0
 4407 0008 0123     		movs	r3, #1
 4408 000a FB74     		strb	r3, [r7, #19]
 971:..\src/command_processing.c **** 
 972:..\src/command_processing.c ****     // Disable Interrupt
 973:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 4409              		.loc 1 973 0
 4410 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 974:..\src/command_processing.c **** 
 975:..\src/command_processing.c ****     // Stop motor
 976:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 977:..\src/command_processing.c **** 
 978:..\src/command_processing.c ****     // Update temperature information for better writing performance
 979:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 4411              		.loc 1 979 0
 4412 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 980:..\src/command_processing.c **** 
 981:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 4413              		.loc 1 981 0
 4414 0014 1C4A     		ldr	r2, .L230
 4415 0016 1D4B     		ldr	r3, .L230+4
 4416 0018 1046     		mov	r0, r2
 4417 001a 1946     		mov	r1, r3
 4418 001c 6023     		movs	r3, #96
 4419 001e 1A46     		mov	r2, r3
 4420 0020 FFF7FEFF 		bl	memcpy
 982:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 113


 983:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 4421              		.loc 1 983 0
 4422 0024 0623     		movs	r3, #6
 4423 0026 FB60     		str	r3, [r7, #12]
 984:..\src/command_processing.c **** 
 985:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 4424              		.loc 1 985 0
 4425 0028 0023     		movs	r3, #0
 4426 002a 7B61     		str	r3, [r7, #20]
 4427 002c 18E0     		b	.L225
 4428              	.L228:
 986:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4429              		.loc 1 986 0
 4430 002e 7B69     		ldr	r3, [r7, #20]
 4431 0030 1B01     		lsls	r3, r3, #4
 4432 0032 1A46     		mov	r2, r3
 4433 0034 154B     		ldr	r3, .L230+4
 4434 0036 D018     		adds	r0, r2, r3
 4435 0038 7B69     		ldr	r3, [r7, #20]
 4436 003a DAB2     		uxtb	r2, r3
 4437 003c 7B68     		ldr	r3, [r7, #4]
 4438 003e DBB2     		uxtb	r3, r3
 4439 0040 1344     		add	r3, r3, r2
 4440 0042 DBB2     		uxtb	r3, r3
 4441 0044 1946     		mov	r1, r3
 4442 0046 FFF7FEFF 		bl	EEPROM_Write
 4443 004a 0346     		mov	r3, r0
 4444 004c FB72     		strb	r3, [r7, #11]
 987:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 4445              		.loc 1 987 0
 4446 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4447 0050 002B     		cmp	r3, #0
 4448 0052 02D0     		beq	.L226
 988:..\src/command_processing.c ****             ret_val = 0;
 4449              		.loc 1 988 0
 4450 0054 0023     		movs	r3, #0
 4451 0056 FB74     		strb	r3, [r7, #19]
 989:..\src/command_processing.c ****             break;
 4452              		.loc 1 989 0
 4453 0058 06E0     		b	.L227
 4454              	.L226:
 985:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4455              		.loc 1 985 0 discriminator 2
 4456 005a 7B69     		ldr	r3, [r7, #20]
 4457 005c 0133     		adds	r3, r3, #1
 4458 005e 7B61     		str	r3, [r7, #20]
 4459              	.L225:
 985:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4460              		.loc 1 985 0 is_stmt 0 discriminator 1
 4461 0060 7A69     		ldr	r2, [r7, #20]
 4462 0062 FB68     		ldr	r3, [r7, #12]
 4463 0064 9A42     		cmp	r2, r3
 4464 0066 E2DB     		blt	.L228
 4465              	.L227:
 990:..\src/command_processing.c ****         }
 991:..\src/command_processing.c ****     }
 992:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 114


 993:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 4466              		.loc 1 993 0 is_stmt 1
 4467 0068 084A     		ldr	r2, .L230+4
 4468 006a 074B     		ldr	r3, .L230
 4469 006c 1046     		mov	r0, r2
 4470 006e 1946     		mov	r1, r3
 4471 0070 6023     		movs	r3, #96
 4472 0072 1A46     		mov	r2, r3
 4473 0074 FFF7FEFF 		bl	memcpy
 994:..\src/command_processing.c **** 
 995:..\src/command_processing.c ****     // Re-Enable Interrupt
 996:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 4474              		.loc 1 996 0
 4475 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 997:..\src/command_processing.c **** 
 998:..\src/command_processing.c ****     return ret_val;
 4476              		.loc 1 998 0
 4477 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 999:..\src/command_processing.c **** }
 4478              		.loc 1 999 0
 4479 007e 1846     		mov	r0, r3
 4480 0080 1837     		adds	r7, r7, #24
 4481              		.cfi_def_cfa_offset 8
 4482 0082 BD46     		mov	sp, r7
 4483              		.cfi_def_cfa_register 13
 4484              		@ sp needed
 4485 0084 80BD     		pop	{r7, pc}
 4486              	.L231:
 4487 0086 00BF     		.align	2
 4488              	.L230:
 4489 0088 00000000 		.word	c_mem
 4490 008c 00000000 		.word	g_mem
 4491              		.cfi_endproc
 4492              	.LFE87:
 4493              		.size	memStore, .-memStore
 4494              		.section	.text.memRecall,"ax",%progbits
 4495              		.align	2
 4496              		.global	memRecall
 4497              		.thumb
 4498              		.thumb_func
 4499              		.type	memRecall, %function
 4500              	memRecall:
 4501              	.LFB88:
1000:..\src/command_processing.c **** 
1001:..\src/command_processing.c **** 
1002:..\src/command_processing.c **** //==============================================================================
1003:..\src/command_processing.c **** //                                                                 RECALL MEMORY
1004:..\src/command_processing.c **** //==============================================================================
1005:..\src/command_processing.c **** 
1006:..\src/command_processing.c **** 
1007:..\src/command_processing.c **** void memRecall(void)
1008:..\src/command_processing.c **** {  
 4502              		.loc 1 1008 0
 4503              		.cfi_startproc
 4504              		@ args = 0, pretend = 0, frame = 8
 4505              		@ frame_needed = 1, uses_anonymous_args = 0
 4506 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 115


 4507              		.cfi_def_cfa_offset 8
 4508              		.cfi_offset 7, -8
 4509              		.cfi_offset 14, -4
 4510 0002 82B0     		sub	sp, sp, #8
 4511              		.cfi_def_cfa_offset 16
 4512 0004 00AF     		add	r7, sp, #0
 4513              		.cfi_def_cfa_register 7
1009:..\src/command_processing.c ****     uint16 i;
1010:..\src/command_processing.c **** 
1011:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4514              		.loc 1 1011 0
 4515 0006 0023     		movs	r3, #0
 4516 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4517 000a 0CE0     		b	.L233
 4518              	.L234:
1012:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4519              		.loc 1 1012 0 discriminator 3
 4520 000c FB88     		ldrh	r3, [r7, #6]
 4521 000e 114A     		ldr	r2, .L238
 4522 0010 1344     		add	r3, r3, r2
 4523 0012 114A     		ldr	r2, .L238+4
 4524 0014 1168     		ldr	r1, [r2]
 4525 0016 FA88     		ldrh	r2, [r7, #6]
 4526 0018 0A44     		add	r2, r2, r1
 4527 001a 1278     		ldrb	r2, [r2]
 4528 001c D2B2     		uxtb	r2, r2
 4529 001e 1A70     		strb	r2, [r3]
1011:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4530              		.loc 1 1011 0 discriminator 3
 4531 0020 FB88     		ldrh	r3, [r7, #6]
 4532 0022 0133     		adds	r3, r3, #1
 4533 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 4534              	.L233:
1011:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4535              		.loc 1 1011 0 is_stmt 0 discriminator 1
 4536 0026 FB88     		ldrh	r3, [r7, #6]
 4537 0028 5F2B     		cmp	r3, #95
 4538 002a EFD9     		bls	.L234
1013:..\src/command_processing.c ****     }
1014:..\src/command_processing.c ****        //check for initialization
1015:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4539              		.loc 1 1015 0 is_stmt 1
 4540 002c 094B     		ldr	r3, .L238
 4541 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4542 0030 002B     		cmp	r3, #0
 4543 0032 02D1     		bne	.L235
1016:..\src/command_processing.c ****         memRestore();
 4544              		.loc 1 1016 0
 4545 0034 FFF7FEFF 		bl	memRestore
1017:..\src/command_processing.c ****     } else {
1018:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
1019:..\src/command_processing.c ****     }   
1020:..\src/command_processing.c **** }
 4546              		.loc 1 1020 0
 4547 0038 07E0     		b	.L237
 4548              	.L235:
1018:..\src/command_processing.c ****     }   
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 116


 4549              		.loc 1 1018 0
 4550 003a 084A     		ldr	r2, .L238+8
 4551 003c 054B     		ldr	r3, .L238
 4552 003e 1046     		mov	r0, r2
 4553 0040 1946     		mov	r1, r3
 4554 0042 6023     		movs	r3, #96
 4555 0044 1A46     		mov	r2, r3
 4556 0046 FFF7FEFF 		bl	memcpy
 4557              	.L237:
 4558              		.loc 1 1020 0
 4559 004a 00BF     		nop
 4560 004c 0837     		adds	r7, r7, #8
 4561              		.cfi_def_cfa_offset 8
 4562 004e BD46     		mov	sp, r7
 4563              		.cfi_def_cfa_register 13
 4564              		@ sp needed
 4565 0050 80BD     		pop	{r7, pc}
 4566              	.L239:
 4567 0052 00BF     		.align	2
 4568              	.L238:
 4569 0054 00000000 		.word	g_mem
 4570 0058 00000000 		.word	EEPROM_ADDR
 4571 005c 00000000 		.word	c_mem
 4572              		.cfi_endproc
 4573              	.LFE88:
 4574              		.size	memRecall, .-memRecall
 4575              		.section	.text.memRestore,"ax",%progbits
 4576              		.align	2
 4577              		.global	memRestore
 4578              		.thumb
 4579              		.thumb_func
 4580              		.type	memRestore, %function
 4581              	memRestore:
 4582              	.LFB89:
1021:..\src/command_processing.c **** 
1022:..\src/command_processing.c **** 
1023:..\src/command_processing.c **** //==============================================================================
1024:..\src/command_processing.c **** //                                                                RESTORE MEMORY
1025:..\src/command_processing.c **** //==============================================================================
1026:..\src/command_processing.c **** 
1027:..\src/command_processing.c **** 
1028:..\src/command_processing.c **** uint8 memRestore(void) {
 4583              		.loc 1 1028 0
 4584              		.cfi_startproc
 4585              		@ args = 0, pretend = 0, frame = 8
 4586              		@ frame_needed = 1, uses_anonymous_args = 0
 4587 0000 80B5     		push	{r7, lr}
 4588              		.cfi_def_cfa_offset 8
 4589              		.cfi_offset 7, -8
 4590              		.cfi_offset 14, -4
 4591 0002 82B0     		sub	sp, sp, #8
 4592              		.cfi_def_cfa_offset 16
 4593 0004 00AF     		add	r7, sp, #0
 4594              		.cfi_def_cfa_register 7
1029:..\src/command_processing.c ****     uint16 i;
1030:..\src/command_processing.c **** 
1031:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 117


 4595              		.loc 1 1031 0
 4596 0006 0023     		movs	r3, #0
 4597 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4598 000a 0EE0     		b	.L241
 4599              	.L242:
1032:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4600              		.loc 1 1032 0 discriminator 3
 4601 000c FB88     		ldrh	r3, [r7, #6]
 4602 000e 104A     		ldr	r2, .L245
 4603 0010 1344     		add	r3, r3, r2
 4604 0012 104A     		ldr	r2, .L245+4
 4605 0014 1168     		ldr	r1, [r2]
 4606 0016 FA88     		ldrh	r2, [r7, #6]
 4607 0018 02F54872 		add	r2, r2, #800
 4608 001c 0A44     		add	r2, r2, r1
 4609 001e 1278     		ldrb	r2, [r2]
 4610 0020 D2B2     		uxtb	r2, r2
 4611 0022 1A70     		strb	r2, [r3]
1031:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4612              		.loc 1 1031 0 discriminator 3
 4613 0024 FB88     		ldrh	r3, [r7, #6]
 4614 0026 0133     		adds	r3, r3, #1
 4615 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 4616              	.L241:
1031:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4617              		.loc 1 1031 0 is_stmt 0 discriminator 1
 4618 002a FB88     		ldrh	r3, [r7, #6]
 4619 002c 5F2B     		cmp	r3, #95
 4620 002e EDD9     		bls	.L242
1033:..\src/command_processing.c ****     }
1034:..\src/command_processing.c **** 
1035:..\src/command_processing.c ****     //check for initialization
1036:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4621              		.loc 1 1036 0 is_stmt 1
 4622 0030 074B     		ldr	r3, .L245
 4623 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4624 0034 002B     		cmp	r3, #0
 4625 0036 03D1     		bne	.L243
1037:..\src/command_processing.c ****         return memInit();
 4626              		.loc 1 1037 0
 4627 0038 FFF7FEFF 		bl	memInit
 4628 003c 0346     		mov	r3, r0
 4629 003e 03E0     		b	.L244
 4630              	.L243:
1038:..\src/command_processing.c ****     } else {
1039:..\src/command_processing.c ****         return memStore(0);
 4631              		.loc 1 1039 0
 4632 0040 0020     		movs	r0, #0
 4633 0042 FFF7FEFF 		bl	memStore
 4634 0046 0346     		mov	r3, r0
 4635              	.L244:
1040:..\src/command_processing.c ****     }  
1041:..\src/command_processing.c **** }
 4636              		.loc 1 1041 0
 4637 0048 1846     		mov	r0, r3
 4638 004a 0837     		adds	r7, r7, #8
 4639              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 118


 4640 004c BD46     		mov	sp, r7
 4641              		.cfi_def_cfa_register 13
 4642              		@ sp needed
 4643 004e 80BD     		pop	{r7, pc}
 4644              	.L246:
 4645              		.align	2
 4646              	.L245:
 4647 0050 00000000 		.word	g_mem
 4648 0054 00000000 		.word	EEPROM_ADDR
 4649              		.cfi_endproc
 4650              	.LFE89:
 4651              		.size	memRestore, .-memRestore
 4652              		.section	.text.memInit,"ax",%progbits
 4653              		.align	2
 4654              		.global	memInit
 4655              		.thumb
 4656              		.thumb_func
 4657              		.type	memInit, %function
 4658              	memInit:
 4659              	.LFB90:
1042:..\src/command_processing.c **** 
1043:..\src/command_processing.c **** //==============================================================================
1044:..\src/command_processing.c **** //                                                                   MEMORY INIT
1045:..\src/command_processing.c **** //==============================================================================
1046:..\src/command_processing.c **** 
1047:..\src/command_processing.c **** uint8 memInit(void)
1048:..\src/command_processing.c **** {
 4660              		.loc 1 1048 0
 4661              		.cfi_startproc
 4662              		@ args = 0, pretend = 0, frame = 0
 4663              		@ frame_needed = 1, uses_anonymous_args = 0
 4664 0000 80B5     		push	{r7, lr}
 4665              		.cfi_def_cfa_offset 8
 4666              		.cfi_offset 7, -8
 4667              		.cfi_offset 14, -4
 4668 0002 00AF     		add	r7, sp, #0
 4669              		.cfi_def_cfa_register 7
1049:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1050:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4670              		.loc 1 1050 0
 4671 0004 2F4B     		ldr	r3, .L251
 4672 0006 0122     		movs	r2, #1
 4673 0008 1A70     		strb	r2, [r3]
1051:..\src/command_processing.c ****     
1052:..\src/command_processing.c ****     // DEV STRUCT
1053:..\src/command_processing.c ****     g_mem.dev.id = 2;
 4674              		.loc 1 1053 0
 4675 000a 2E4B     		ldr	r3, .L251
 4676 000c 0222     		movs	r2, #2
 4677 000e 1A74     		strb	r2, [r3, #16]
1054:..\src/command_processing.c ****     
1055:..\src/command_processing.c ****     // SH STRUCT
1056:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 4678              		.loc 1 1056 0
 4679 0010 2C4B     		ldr	r3, .L251
 4680 0012 0022     		movs	r2, #0
 4681 0014 1A62     		str	r2, [r3, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 119


1057:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 4682              		.loc 1 1057 0
 4683 0016 2B4B     		ldr	r3, .L251
 4684 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 4685 001c 1A46     		mov	r2, r3
 4686 001e 4FF47A53 		mov	r3, #16000
 4687 0022 9340     		lsls	r3, r3, r2
 4688 0024 274A     		ldr	r2, .L251
 4689 0026 5362     		str	r3, [r2, #36]
1058:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 4690              		.loc 1 1058 0
 4691 0028 264B     		ldr	r3, .L251
 4692 002a 0422     		movs	r2, #4
 4693 002c 83F82820 		strb	r2, [r3, #40]
1059:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 4694              		.loc 1 1059 0
 4695 0030 244B     		ldr	r3, .L251
 4696 0032 0322     		movs	r2, #3
 4697 0034 83F82920 		strb	r2, [r3, #41]
1060:..\src/command_processing.c **** 
1061:..\src/command_processing.c ****     // EMG STRUCT     
1062:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4698              		.loc 1 1062 0
 4699 0038 224B     		ldr	r3, .L251
 4700 003a C822     		movs	r2, #200
 4701 003c 1A86     		strh	r2, [r3, #48]	@ movhi
1063:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4702              		.loc 1 1063 0
 4703 003e 214B     		ldr	r3, .L251
 4704 0040 C822     		movs	r2, #200
 4705 0042 5A86     		strh	r2, [r3, #50]	@ movhi
1064:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4706              		.loc 1 1064 0
 4707 0044 1F4B     		ldr	r3, .L251
 4708 0046 4FF48062 		mov	r2, #1024
 4709 004a 5A63     		str	r2, [r3, #52]
1065:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4710              		.loc 1 1065 0
 4711 004c 1D4B     		ldr	r3, .L251
 4712 004e 4FF48062 		mov	r2, #1024
 4713 0052 9A63     		str	r2, [r3, #56]
1066:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4714              		.loc 1 1066 0
 4715 0054 1B4B     		ldr	r3, .L251
 4716 0056 6422     		movs	r2, #100
 4717 0058 83F83C20 		strb	r2, [r3, #60]
1067:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4718              		.loc 1 1067 0
 4719 005c 194B     		ldr	r3, .L251
 4720 005e 6422     		movs	r2, #100
 4721 0060 83F83D20 		strb	r2, [r3, #61]
1068:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4722              		.loc 1 1068 0
 4723 0064 174B     		ldr	r3, .L251
 4724 0066 0022     		movs	r2, #0
 4725 0068 83F83E20 		strb	r2, [r3, #62]
1069:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 120


1070:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
1071:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4726              		.loc 1 1071 0
 4727 006c 154B     		ldr	r3, .L251
 4728 006e 0022     		movs	r2, #0
 4729 0070 83F84020 		strb	r2, [r3, #64]
1072:..\src/command_processing.c ****     
1073:..\src/command_processing.c ****     
1074:..\src/command_processing.c ****     //FEEDBACK STRUCT
1075:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4730              		.loc 1 1075 0
 4731 0074 134B     		ldr	r3, .L251
 4732 0076 4FF4E172 		mov	r2, #450
 4733 007a 1A65     		str	r2, [r3, #80]
1076:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4734              		.loc 1 1076 0
 4735 007c 114B     		ldr	r3, .L251
 4736 007e 124A     		ldr	r2, .L251+4
 4737 0080 5A65     		str	r2, [r3, #84]	@ float
1077:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 4738              		.loc 1 1077 0
 4739 0082 104B     		ldr	r3, .L251
 4740 0084 4FF07E52 		mov	r2, #1065353216
 4741 0088 9A65     		str	r2, [r3, #88]	@ float
1078:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 4742              		.loc 1 1078 0
 4743 008a 0E4B     		ldr	r3, .L251
 4744 008c 0022     		movs	r2, #0
 4745 008e 83F85C20 		strb	r2, [r3, #92]
1079:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 4746              		.loc 1 1079 0
 4747 0092 0C4B     		ldr	r3, .L251
 4748 0094 0022     		movs	r2, #0
 4749 0096 83F85D20 		strb	r2, [r3, #93]
1080:..\src/command_processing.c ****     
1081:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1082:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4750              		.loc 1 1082 0
 4751 009a 0A4B     		ldr	r3, .L251
 4752 009c 0122     		movs	r2, #1
 4753 009e 1A70     		strb	r2, [r3]
1083:..\src/command_processing.c ****     
1084:..\src/command_processing.c ****     //write that configuration to EEPROM
1085:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 4754              		.loc 1 1085 0
 4755 00a0 0020     		movs	r0, #0
 4756 00a2 FFF7FEFF 		bl	memStore
 4757 00a6 0346     		mov	r3, r0
 4758 00a8 002B     		cmp	r3, #0
 4759 00aa 07D0     		beq	.L248
 4760              		.loc 1 1085 0 is_stmt 0 discriminator 1
 4761 00ac 3220     		movs	r0, #50
 4762 00ae FFF7FEFF 		bl	memStore
 4763 00b2 0346     		mov	r3, r0
 4764 00b4 002B     		cmp	r3, #0
 4765 00b6 01D0     		beq	.L248
 4766              		.loc 1 1085 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 121


 4767 00b8 0123     		movs	r3, #1
 4768 00ba 00E0     		b	.L249
 4769              	.L248:
 4770              		.loc 1 1085 0 discriminator 4
 4771 00bc 0023     		movs	r3, #0
 4772              	.L249:
 4773              		.loc 1 1085 0 discriminator 6
 4774 00be DBB2     		uxtb	r3, r3
 4775 00c0 1846     		mov	r0, r3
 4776 00c2 80BD     		pop	{r7, pc}
 4777              	.L252:
 4778              		.align	2
 4779              	.L251:
 4780 00c4 00000000 		.word	g_mem
 4781 00c8 0000C841 		.word	1103626240
 4782              		.cfi_endproc
 4783              	.LFE90:
 4784              		.size	memInit, .-memInit
 4785              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 4786              		.align	2
 4787              		.global	memInit_SoftHandPro
 4788              		.thumb
 4789              		.thumb_func
 4790              		.type	memInit_SoftHandPro, %function
 4791              	memInit_SoftHandPro:
 4792              	.LFB91:
1086:..\src/command_processing.c **** 
1087:..\src/command_processing.c **** //==============================================================================
1088:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
1089:..\src/command_processing.c **** //==============================================================================
1090:..\src/command_processing.c **** void memInit_SoftHandPro(void)
1091:..\src/command_processing.c **** {
 4793              		.loc 1 1091 0 is_stmt 1
 4794              		.cfi_startproc
 4795              		@ args = 0, pretend = 0, frame = 0
 4796              		@ frame_needed = 1, uses_anonymous_args = 0
 4797              		@ link register save eliminated.
 4798 0000 80B4     		push	{r7}
 4799              		.cfi_def_cfa_offset 4
 4800              		.cfi_offset 7, -4
 4801 0002 00AF     		add	r7, sp, #0
 4802              		.cfi_def_cfa_register 7
1092:..\src/command_processing.c **** }
 4803              		.loc 1 1092 0
 4804 0004 00BF     		nop
 4805 0006 BD46     		mov	sp, r7
 4806              		.cfi_def_cfa_register 13
 4807              		@ sp needed
 4808 0008 80BC     		pop	{r7}
 4809              		.cfi_restore 7
 4810              		.cfi_def_cfa_offset 0
 4811 000a 7047     		bx	lr
 4812              		.cfi_endproc
 4813              	.LFE91:
 4814              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 4815              		.section	.text.memInit_Master,"ax",%progbits
 4816              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 122


 4817              		.global	memInit_Master
 4818              		.thumb
 4819              		.thumb_func
 4820              		.type	memInit_Master, %function
 4821              	memInit_Master:
 4822              	.LFB92:
1093:..\src/command_processing.c **** 
1094:..\src/command_processing.c **** //==============================================================================
1095:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
1096:..\src/command_processing.c **** //==============================================================================
1097:..\src/command_processing.c **** void memInit_Master(void)
1098:..\src/command_processing.c **** {
 4823              		.loc 1 1098 0
 4824              		.cfi_startproc
 4825              		@ args = 0, pretend = 0, frame = 0
 4826              		@ frame_needed = 1, uses_anonymous_args = 0
 4827              		@ link register save eliminated.
 4828 0000 80B4     		push	{r7}
 4829              		.cfi_def_cfa_offset 4
 4830              		.cfi_offset 7, -4
 4831 0002 00AF     		add	r7, sp, #0
 4832              		.cfi_def_cfa_register 7
1099:..\src/command_processing.c **** }
 4833              		.loc 1 1099 0
 4834 0004 00BF     		nop
 4835 0006 BD46     		mov	sp, r7
 4836              		.cfi_def_cfa_register 13
 4837              		@ sp needed
 4838 0008 80BC     		pop	{r7}
 4839              		.cfi_restore 7
 4840              		.cfi_def_cfa_offset 0
 4841 000a 7047     		bx	lr
 4842              		.cfi_endproc
 4843              	.LFE92:
 4844              		.size	memInit_Master, .-memInit_Master
 4845              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 4846              		.align	2
 4847              		.global	memInit_AirChambers_Vibrotactile_Fb
 4848              		.thumb
 4849              		.thumb_func
 4850              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 4851              	memInit_AirChambers_Vibrotactile_Fb:
 4852              	.LFB93:
1100:..\src/command_processing.c **** 
1101:..\src/command_processing.c **** //==============================================================================
1102:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
1103:..\src/command_processing.c **** //==============================================================================
1104:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
1105:..\src/command_processing.c **** {
 4853              		.loc 1 1105 0
 4854              		.cfi_startproc
 4855              		@ args = 0, pretend = 0, frame = 0
 4856              		@ frame_needed = 1, uses_anonymous_args = 0
 4857              		@ link register save eliminated.
 4858 0000 80B4     		push	{r7}
 4859              		.cfi_def_cfa_offset 4
 4860              		.cfi_offset 7, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 123


 4861 0002 00AF     		add	r7, sp, #0
 4862              		.cfi_def_cfa_register 7
1106:..\src/command_processing.c **** }
 4863              		.loc 1 1106 0
 4864 0004 00BF     		nop
 4865 0006 BD46     		mov	sp, r7
 4866              		.cfi_def_cfa_register 13
 4867              		@ sp needed
 4868 0008 80BC     		pop	{r7}
 4869              		.cfi_restore 7
 4870              		.cfi_def_cfa_offset 0
 4871 000a 7047     		bx	lr
 4872              		.cfi_endproc
 4873              	.LFE93:
 4874              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 4875              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 4876              		.align	2
 4877              		.global	memInit_OtbkActWristMs
 4878              		.thumb
 4879              		.thumb_func
 4880              		.type	memInit_OtbkActWristMs, %function
 4881              	memInit_OtbkActWristMs:
 4882              	.LFB94:
1107:..\src/command_processing.c **** 
1108:..\src/command_processing.c **** //==============================================================================
1109:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
1110:..\src/command_processing.c **** //==============================================================================
1111:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
1112:..\src/command_processing.c **** {
 4883              		.loc 1 1112 0
 4884              		.cfi_startproc
 4885              		@ args = 0, pretend = 0, frame = 0
 4886              		@ frame_needed = 1, uses_anonymous_args = 0
 4887              		@ link register save eliminated.
 4888 0000 80B4     		push	{r7}
 4889              		.cfi_def_cfa_offset 4
 4890              		.cfi_offset 7, -4
 4891 0002 00AF     		add	r7, sp, #0
 4892              		.cfi_def_cfa_register 7
1113:..\src/command_processing.c **** }
 4893              		.loc 1 1113 0
 4894 0004 00BF     		nop
 4895 0006 BD46     		mov	sp, r7
 4896              		.cfi_def_cfa_register 13
 4897              		@ sp needed
 4898 0008 80BC     		pop	{r7}
 4899              		.cfi_restore 7
 4900              		.cfi_def_cfa_offset 0
 4901 000a 7047     		bx	lr
 4902              		.cfi_endproc
 4903              	.LFE94:
 4904              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 4905              		.section	.text.cmd_get_measurements,"ax",%progbits
 4906              		.align	2
 4907              		.global	cmd_get_measurements
 4908              		.thumb
 4909              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 124


 4910              		.type	cmd_get_measurements, %function
 4911              	cmd_get_measurements:
 4912              	.LFB95:
1114:..\src/command_processing.c **** 
1115:..\src/command_processing.c **** //==============================================================================
1116:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
1117:..\src/command_processing.c **** //==============================================================================
1118:..\src/command_processing.c **** /**
1119:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1120:..\src/command_processing.c **** **/
1121:..\src/command_processing.c **** 
1122:..\src/command_processing.c **** void cmd_get_measurements(){
 4913              		.loc 1 1122 0
 4914              		.cfi_startproc
 4915              		@ args = 0, pretend = 0, frame = 0
 4916              		@ frame_needed = 1, uses_anonymous_args = 0
 4917              		@ link register save eliminated.
 4918 0000 80B4     		push	{r7}
 4919              		.cfi_def_cfa_offset 4
 4920              		.cfi_offset 7, -4
 4921 0002 00AF     		add	r7, sp, #0
 4922              		.cfi_def_cfa_register 7
1123:..\src/command_processing.c ****  
1124:..\src/command_processing.c ****    
1125:..\src/command_processing.c **** }
 4923              		.loc 1 1125 0
 4924 0004 00BF     		nop
 4925 0006 BD46     		mov	sp, r7
 4926              		.cfi_def_cfa_register 13
 4927              		@ sp needed
 4928 0008 80BC     		pop	{r7}
 4929              		.cfi_restore 7
 4930              		.cfi_def_cfa_offset 0
 4931 000a 7047     		bx	lr
 4932              		.cfi_endproc
 4933              	.LFE95:
 4934              		.size	cmd_get_measurements, .-cmd_get_measurements
 4935              		.section	.text.cmd_get_velocities,"ax",%progbits
 4936              		.align	2
 4937              		.global	cmd_get_velocities
 4938              		.thumb
 4939              		.thumb_func
 4940              		.type	cmd_get_velocities, %function
 4941              	cmd_get_velocities:
 4942              	.LFB96:
1126:..\src/command_processing.c **** 
1127:..\src/command_processing.c **** void cmd_get_velocities(){
 4943              		.loc 1 1127 0
 4944              		.cfi_startproc
 4945              		@ args = 0, pretend = 0, frame = 0
 4946              		@ frame_needed = 1, uses_anonymous_args = 0
 4947              		@ link register save eliminated.
 4948 0000 80B4     		push	{r7}
 4949              		.cfi_def_cfa_offset 4
 4950              		.cfi_offset 7, -4
 4951 0002 00AF     		add	r7, sp, #0
 4952              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 125


1128:..\src/command_processing.c ****  
1129:..\src/command_processing.c **** }
 4953              		.loc 1 1129 0
 4954 0004 00BF     		nop
 4955 0006 BD46     		mov	sp, r7
 4956              		.cfi_def_cfa_register 13
 4957              		@ sp needed
 4958 0008 80BC     		pop	{r7}
 4959              		.cfi_restore 7
 4960              		.cfi_def_cfa_offset 0
 4961 000a 7047     		bx	lr
 4962              		.cfi_endproc
 4963              	.LFE96:
 4964              		.size	cmd_get_velocities, .-cmd_get_velocities
 4965              		.section	.text.cmd_get_accelerations,"ax",%progbits
 4966              		.align	2
 4967              		.global	cmd_get_accelerations
 4968              		.thumb
 4969              		.thumb_func
 4970              		.type	cmd_get_accelerations, %function
 4971              	cmd_get_accelerations:
 4972              	.LFB97:
1130:..\src/command_processing.c **** 
1131:..\src/command_processing.c **** void cmd_get_accelerations(){
 4973              		.loc 1 1131 0
 4974              		.cfi_startproc
 4975              		@ args = 0, pretend = 0, frame = 0
 4976              		@ frame_needed = 1, uses_anonymous_args = 0
 4977              		@ link register save eliminated.
 4978 0000 80B4     		push	{r7}
 4979              		.cfi_def_cfa_offset 4
 4980              		.cfi_offset 7, -4
 4981 0002 00AF     		add	r7, sp, #0
 4982              		.cfi_def_cfa_register 7
1132:..\src/command_processing.c ****  
1133:..\src/command_processing.c **** }
 4983              		.loc 1 1133 0
 4984 0004 00BF     		nop
 4985 0006 BD46     		mov	sp, r7
 4986              		.cfi_def_cfa_register 13
 4987              		@ sp needed
 4988 0008 80BC     		pop	{r7}
 4989              		.cfi_restore 7
 4990              		.cfi_def_cfa_offset 0
 4991 000a 7047     		bx	lr
 4992              		.cfi_endproc
 4993              	.LFE97:
 4994              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 4995              		.section	.text.cmd_get_joystick,"ax",%progbits
 4996              		.align	2
 4997              		.global	cmd_get_joystick
 4998              		.thumb
 4999              		.thumb_func
 5000              		.type	cmd_get_joystick, %function
 5001              	cmd_get_joystick:
 5002              	.LFB98:
1134:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 126


1135:..\src/command_processing.c **** void cmd_get_joystick() {
 5003              		.loc 1 1135 0
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 0
 5006              		@ frame_needed = 1, uses_anonymous_args = 0
 5007              		@ link register save eliminated.
 5008 0000 80B4     		push	{r7}
 5009              		.cfi_def_cfa_offset 4
 5010              		.cfi_offset 7, -4
 5011 0002 00AF     		add	r7, sp, #0
 5012              		.cfi_def_cfa_register 7
1136:..\src/command_processing.c ****  
1137:..\src/command_processing.c **** }
 5013              		.loc 1 1137 0
 5014 0004 00BF     		nop
 5015 0006 BD46     		mov	sp, r7
 5016              		.cfi_def_cfa_register 13
 5017              		@ sp needed
 5018 0008 80BC     		pop	{r7}
 5019              		.cfi_restore 7
 5020              		.cfi_def_cfa_offset 0
 5021 000a 7047     		bx	lr
 5022              		.cfi_endproc
 5023              	.LFE98:
 5024              		.size	cmd_get_joystick, .-cmd_get_joystick
 5025              		.section	.text.cmd_set_inputs,"ax",%progbits
 5026              		.align	2
 5027              		.global	cmd_set_inputs
 5028              		.thumb
 5029              		.thumb_func
 5030              		.type	cmd_set_inputs, %function
 5031              	cmd_set_inputs:
 5032              	.LFB99:
1138:..\src/command_processing.c **** 
1139:..\src/command_processing.c **** void cmd_set_inputs(){
 5033              		.loc 1 1139 0
 5034              		.cfi_startproc
 5035              		@ args = 0, pretend = 0, frame = 8
 5036              		@ frame_needed = 1, uses_anonymous_args = 0
 5037              		@ link register save eliminated.
 5038 0000 80B4     		push	{r7}
 5039              		.cfi_def_cfa_offset 4
 5040              		.cfi_offset 7, -4
 5041 0002 83B0     		sub	sp, sp, #12
 5042              		.cfi_def_cfa_offset 16
 5043 0004 00AF     		add	r7, sp, #0
 5044              		.cfi_def_cfa_register 7
1140:..\src/command_processing.c ****      // Store position setted in right variables
1141:..\src/command_processing.c ****     int16 aux_int16[3];
1142:..\src/command_processing.c ****     static int16 last_aux_int16[3];
1143:..\src/command_processing.c ****     
1144:..\src/command_processing.c ****     aux_int16[0] = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 5045              		.loc 1 1144 0
 5046 0006 294B     		ldr	r3, .L268
 5047 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5048 000a 1B02     		lsls	r3, r3, #8
 5049 000c 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 127


 5050 000e 274B     		ldr	r3, .L268
 5051 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5052 0012 1BB2     		sxth	r3, r3
 5053 0014 1343     		orrs	r3, r3, r2
 5054 0016 1BB2     		sxth	r3, r3
 5055 0018 3B80     		strh	r3, [r7]	@ movhi
1145:..\src/command_processing.c ****     aux_int16[1] = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 5056              		.loc 1 1145 0
 5057 001a 244B     		ldr	r3, .L268
 5058 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5059 001e 1B02     		lsls	r3, r3, #8
 5060 0020 1AB2     		sxth	r2, r3
 5061 0022 224B     		ldr	r3, .L268
 5062 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5063 0026 1BB2     		sxth	r3, r3
 5064 0028 1343     		orrs	r3, r3, r2
 5065 002a 1BB2     		sxth	r3, r3
 5066 002c 7B80     		strh	r3, [r7, #2]	@ movhi
1146:..\src/command_processing.c ****     aux_int16[2] = (int16)(g_rx.buffer[5]<<8 | g_rx.buffer[6]);
 5067              		.loc 1 1146 0
 5068 002e 1F4B     		ldr	r3, .L268
 5069 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 5070 0032 1B02     		lsls	r3, r3, #8
 5071 0034 1AB2     		sxth	r2, r3
 5072 0036 1D4B     		ldr	r3, .L268
 5073 0038 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5074 003a 1BB2     		sxth	r3, r3
 5075 003c 1343     		orrs	r3, r3, r2
 5076 003e 1BB2     		sxth	r3, r3
 5077 0040 BB80     		strh	r3, [r7, #4]	@ movhi
 5078              	.LBB28:
1147:..\src/command_processing.c ****     // Check if last command received was the same as this 
1148:..\src/command_processing.c ****     //(Note: last command not last motor reference in g_ref)
1149:..\src/command_processing.c ****     for (uint8 i = 0; i < 3; i++) {
 5079              		.loc 1 1149 0
 5080 0042 0023     		movs	r3, #0
 5081 0044 FB71     		strb	r3, [r7, #7]
 5082 0046 06E0     		b	.L262
 5083              	.L263:
1150:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
1151:..\src/command_processing.c ****             change_ext_ref_flag[i] = TRUE;
 5084              		.loc 1 1151 0 discriminator 3
 5085 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5086 004a 194A     		ldr	r2, .L268+4
 5087 004c 0121     		movs	r1, #1
 5088 004e D154     		strb	r1, [r2, r3]
1149:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5089              		.loc 1 1149 0 discriminator 3
 5090 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5091 0052 0133     		adds	r3, r3, #1
 5092 0054 FB71     		strb	r3, [r7, #7]
 5093              	.L262:
1149:..\src/command_processing.c ****        //if(last_aux_int16[i] != aux_int16[i]){
 5094              		.loc 1 1149 0 is_stmt 0 discriminator 1
 5095 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5096 0058 022B     		cmp	r3, #2
 5097 005a F5D9     		bls	.L263
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 128


 5098              	.LBE28:
1152:..\src/command_processing.c ****        }
1153:..\src/command_processing.c ****         // Update last command
1154:..\src/command_processing.c ****       // last_aux_int16[i] = aux_int16[i];
1155:..\src/command_processing.c ****     
1156:..\src/command_processing.c ****     
1157:..\src/command_processing.c ****     // Update g_refNew in case a new command has been received
1158:..\src/command_processing.c ****     if (change_ext_ref_flag[0]) {
 5099              		.loc 1 1158 0 is_stmt 1
 5100 005c 144B     		ldr	r3, .L268+4
 5101 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5102 0060 002B     		cmp	r3, #0
 5103 0062 0BD0     		beq	.L264
1159:..\src/command_processing.c ****         Pump_refNew = aux_int16[0];
 5104              		.loc 1 1159 0
 5105 0064 B7F90030 		ldrsh	r3, [r7]
 5106 0068 DAB2     		uxtb	r2, r3
 5107 006a 124B     		ldr	r3, .L268+8
 5108 006c 1A70     		strb	r2, [r3]
1160:..\src/command_processing.c ****                 
1161:..\src/command_processing.c ****         // Check if the reference is nor higher or lower than the position limits
1162:..\src/command_processing.c ****         if (Pump_refNew < 0)
1163:..\src/command_processing.c ****             Pump_refNew = 0;
1164:..\src/command_processing.c ****                 
1165:..\src/command_processing.c ****         if (Pump_refNew > 100)
 5109              		.loc 1 1165 0
 5110 006e 114B     		ldr	r3, .L268+8
 5111 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5112 0072 642B     		cmp	r3, #100
 5113 0074 02D9     		bls	.L264
1166:..\src/command_processing.c ****             Pump_refNew = 100;       
 5114              		.loc 1 1166 0
 5115 0076 0F4B     		ldr	r3, .L268+8
 5116 0078 6422     		movs	r2, #100
 5117 007a 1A70     		strb	r2, [r3]
 5118              	.L264:
1167:..\src/command_processing.c ****     }
1168:..\src/command_processing.c ****     
1169:..\src/command_processing.c ****     if (change_ext_ref_flag[1]) 
 5119              		.loc 1 1169 0
 5120 007c 0C4B     		ldr	r3, .L268+4
 5121 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5122 0080 002B     		cmp	r3, #0
 5123 0082 04D0     		beq	.L265
1170:..\src/command_processing.c ****         VT_refNew[0] = aux_int16[1];
 5124              		.loc 1 1170 0
 5125 0084 B7F90230 		ldrsh	r3, [r7, #2]
 5126 0088 DAB2     		uxtb	r2, r3
 5127 008a 0B4B     		ldr	r3, .L268+12
 5128 008c 1A70     		strb	r2, [r3]
 5129              	.L265:
1171:..\src/command_processing.c ****     
1172:..\src/command_processing.c ****     if (change_ext_ref_flag[2]) 
 5130              		.loc 1 1172 0
 5131 008e 084B     		ldr	r3, .L268+4
 5132 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5133 0092 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 129


 5134 0094 04D0     		beq	.L267
1173:..\src/command_processing.c ****         VT_refNew[1] = aux_int16[2];
 5135              		.loc 1 1173 0
 5136 0096 B7F90430 		ldrsh	r3, [r7, #4]
 5137 009a DAB2     		uxtb	r2, r3
 5138 009c 064B     		ldr	r3, .L268+12
 5139 009e 5A70     		strb	r2, [r3, #1]
 5140              	.L267:
1174:..\src/command_processing.c ****                 
1175:..\src/command_processing.c ****    }
 5141              		.loc 1 1175 0
 5142 00a0 00BF     		nop
 5143 00a2 0C37     		adds	r7, r7, #12
 5144              		.cfi_def_cfa_offset 4
 5145 00a4 BD46     		mov	sp, r7
 5146              		.cfi_def_cfa_register 13
 5147              		@ sp needed
 5148 00a6 80BC     		pop	{r7}
 5149              		.cfi_restore 7
 5150              		.cfi_def_cfa_offset 0
 5151 00a8 7047     		bx	lr
 5152              	.L269:
 5153 00aa 00BF     		.align	2
 5154              	.L268:
 5155 00ac 00000000 		.word	g_rx
 5156 00b0 00000000 		.word	change_ext_ref_flag
 5157 00b4 00000000 		.word	Pump_refNew
 5158 00b8 00000000 		.word	VT_refNew
 5159              		.cfi_endproc
 5160              	.LFE99:
 5161              		.size	cmd_set_inputs, .-cmd_set_inputs
 5162              		.section	.text.cmd_activate,"ax",%progbits
 5163              		.align	2
 5164              		.global	cmd_activate
 5165              		.thumb
 5166              		.thumb_func
 5167              		.type	cmd_activate, %function
 5168              	cmd_activate:
 5169              	.LFB100:
1176:..\src/command_processing.c **** 
1177:..\src/command_processing.c **** void cmd_activate(){
 5170              		.loc 1 1177 0
 5171              		.cfi_startproc
 5172              		@ args = 0, pretend = 0, frame = 8
 5173              		@ frame_needed = 1, uses_anonymous_args = 0
 5174 0000 80B5     		push	{r7, lr}
 5175              		.cfi_def_cfa_offset 8
 5176              		.cfi_offset 7, -8
 5177              		.cfi_offset 14, -4
 5178 0002 82B0     		sub	sp, sp, #8
 5179              		.cfi_def_cfa_offset 16
 5180 0004 00AF     		add	r7, sp, #0
 5181              		.cfi_def_cfa_register 7
1178:..\src/command_processing.c ****  uint8 aux = g_rx.buffer[1];
 5182              		.loc 1 1178 0
 5183 0006 0E4B     		ldr	r3, .L272
 5184 0008 5B78     		ldrb	r3, [r3, #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 130


 5185 000a FB71     		strb	r3, [r7, #7]
1179:..\src/command_processing.c ****  VALVE_Write((aux >> 1) & 0x01);
 5186              		.loc 1 1179 0
 5187 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5188 000e 5B08     		lsrs	r3, r3, #1
 5189 0010 DBB2     		uxtb	r3, r3
 5190 0012 03F00103 		and	r3, r3, #1
 5191 0016 DBB2     		uxtb	r3, r3
 5192 0018 1846     		mov	r0, r3
 5193 001a FFF7FEFF 		bl	VALVE_Write
1180:..\src/command_processing.c ****  if (aux == 0)
 5194              		.loc 1 1180 0
 5195 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5196 0020 002B     		cmp	r3, #0
 5197 0022 02D1     		bne	.L271
1181:..\src/command_processing.c ****  Pump_refNew = 0;
 5198              		.loc 1 1181 0
 5199 0024 074B     		ldr	r3, .L272+4
 5200 0026 0022     		movs	r2, #0
 5201 0028 1A70     		strb	r2, [r3]
 5202              	.L271:
1182:..\src/command_processing.c ****  VT_refNew[0] = 0;   
 5203              		.loc 1 1182 0
 5204 002a 074B     		ldr	r3, .L272+8
 5205 002c 0022     		movs	r2, #0
 5206 002e 1A70     		strb	r2, [r3]
1183:..\src/command_processing.c ****  VT_refNew[1] = 0;   
 5207              		.loc 1 1183 0
 5208 0030 054B     		ldr	r3, .L272+8
 5209 0032 0022     		movs	r2, #0
 5210 0034 5A70     		strb	r2, [r3, #1]
1184:..\src/command_processing.c **** }
 5211              		.loc 1 1184 0
 5212 0036 00BF     		nop
 5213 0038 0837     		adds	r7, r7, #8
 5214              		.cfi_def_cfa_offset 8
 5215 003a BD46     		mov	sp, r7
 5216              		.cfi_def_cfa_register 13
 5217              		@ sp needed
 5218 003c 80BD     		pop	{r7, pc}
 5219              	.L273:
 5220 003e 00BF     		.align	2
 5221              	.L272:
 5222 0040 00000000 		.word	g_rx
 5223 0044 00000000 		.word	Pump_refNew
 5224 0048 00000000 		.word	VT_refNew
 5225              		.cfi_endproc
 5226              	.LFE100:
 5227              		.size	cmd_activate, .-cmd_activate
 5228              		.section	.text.cmd_get_activate,"ax",%progbits
 5229              		.align	2
 5230              		.global	cmd_get_activate
 5231              		.thumb
 5232              		.thumb_func
 5233              		.type	cmd_get_activate, %function
 5234              	cmd_get_activate:
 5235              	.LFB101:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 131


1185:..\src/command_processing.c **** 
1186:..\src/command_processing.c **** void cmd_get_activate(){
 5236              		.loc 1 1186 0
 5237              		.cfi_startproc
 5238              		@ args = 0, pretend = 0, frame = 0
 5239              		@ frame_needed = 1, uses_anonymous_args = 0
 5240              		@ link register save eliminated.
 5241 0000 80B4     		push	{r7}
 5242              		.cfi_def_cfa_offset 4
 5243              		.cfi_offset 7, -4
 5244 0002 00AF     		add	r7, sp, #0
 5245              		.cfi_def_cfa_register 7
1187:..\src/command_processing.c ****     
1188:..\src/command_processing.c **** }
 5246              		.loc 1 1188 0
 5247 0004 00BF     		nop
 5248 0006 BD46     		mov	sp, r7
 5249              		.cfi_def_cfa_register 13
 5250              		@ sp needed
 5251 0008 80BC     		pop	{r7}
 5252              		.cfi_restore 7
 5253              		.cfi_def_cfa_offset 0
 5254 000a 7047     		bx	lr
 5255              		.cfi_endproc
 5256              	.LFE101:
 5257              		.size	cmd_get_activate, .-cmd_get_activate
 5258              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 5259              		.align	2
 5260              		.global	cmd_get_curr_and_meas
 5261              		.thumb
 5262              		.thumb_func
 5263              		.type	cmd_get_curr_and_meas, %function
 5264              	cmd_get_curr_and_meas:
 5265              	.LFB102:
1189:..\src/command_processing.c **** 
1190:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 5266              		.loc 1 1190 0
 5267              		.cfi_startproc
 5268              		@ args = 0, pretend = 0, frame = 0
 5269              		@ frame_needed = 1, uses_anonymous_args = 0
 5270              		@ link register save eliminated.
 5271 0000 80B4     		push	{r7}
 5272              		.cfi_def_cfa_offset 4
 5273              		.cfi_offset 7, -4
 5274 0002 00AF     		add	r7, sp, #0
 5275              		.cfi_def_cfa_register 7
1191:..\src/command_processing.c ****    
1192:..\src/command_processing.c ****    
1193:..\src/command_processing.c **** }
 5276              		.loc 1 1193 0
 5277 0004 00BF     		nop
 5278 0006 BD46     		mov	sp, r7
 5279              		.cfi_def_cfa_register 13
 5280              		@ sp needed
 5281 0008 80BC     		pop	{r7}
 5282              		.cfi_restore 7
 5283              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 132


 5284 000a 7047     		bx	lr
 5285              		.cfi_endproc
 5286              	.LFE102:
 5287              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 5288              		.global	__aeabi_i2d
 5289              		.global	__aeabi_dmul
 5290              		.global	__aeabi_d2iz
 5291              		.section	.text.cmd_get_currents,"ax",%progbits
 5292              		.align	2
 5293              		.global	cmd_get_currents
 5294              		.thumb
 5295              		.thumb_func
 5296              		.type	cmd_get_currents, %function
 5297              	cmd_get_currents:
 5298              	.LFB103:
1194:..\src/command_processing.c **** 
1195:..\src/command_processing.c **** void cmd_get_currents(){
 5299              		.loc 1 1195 0
 5300              		.cfi_startproc
 5301              		@ args = 0, pretend = 0, frame = 16
 5302              		@ frame_needed = 1, uses_anonymous_args = 0
 5303 0000 90B5     		push	{r4, r7, lr}
 5304              		.cfi_def_cfa_offset 12
 5305              		.cfi_offset 4, -12
 5306              		.cfi_offset 7, -8
 5307              		.cfi_offset 14, -4
 5308 0002 85B0     		sub	sp, sp, #20
 5309              		.cfi_def_cfa_offset 32
 5310 0004 00AF     		add	r7, sp, #0
 5311              		.cfi_def_cfa_register 7
1196:..\src/command_processing.c ****    
1197:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
1198:..\src/command_processing.c ****     
1199:..\src/command_processing.c ****     uint8 packet_data[6]; 
1200:..\src/command_processing.c ****     int16 aux_int16;
1201:..\src/command_processing.c ****     
1202:..\src/command_processing.c ****     //Header package
1203:..\src/command_processing.c **** 
1204:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
 5312              		.loc 1 1204 0
 5313 0006 8523     		movs	r3, #133
 5314 0008 3B72     		strb	r3, [r7, #8]
1205:..\src/command_processing.c **** 
1206:..\src/command_processing.c ****      // Send pressure times 100 here instead of current (Simulink use)
1207:..\src/command_processing.c ****     aux_int16 = (int16)(pressure_value*100.0); //Pressure
 5315              		.loc 1 1207 0
 5316 000a 1B4B     		ldr	r3, .L277
 5317 000c 1B68     		ldr	r3, [r3]
 5318 000e 1846     		mov	r0, r3
 5319 0010 FFF7FEFF 		bl	__aeabi_i2d
 5320 0014 4FF00002 		mov	r2, #0
 5321 0018 184B     		ldr	r3, .L277+4
 5322 001a FFF7FEFF 		bl	__aeabi_dmul
 5323 001e 0346     		mov	r3, r0
 5324 0020 0C46     		mov	r4, r1
 5325 0022 1846     		mov	r0, r3
 5326 0024 2146     		mov	r1, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 133


 5327 0026 FFF7FEFF 		bl	__aeabi_d2iz
 5328 002a 0346     		mov	r3, r0
 5329 002c 1BB2     		sxth	r3, r3
 5330 002e FB80     		strh	r3, [r7, #6]	@ movhi
1208:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5331              		.loc 1 1208 0
 5332 0030 BB1D     		adds	r3, r7, #6
 5333 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5334 0034 BB72     		strb	r3, [r7, #10]
1209:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5335              		.loc 1 1209 0
 5336 0036 BB1D     		adds	r3, r7, #6
 5337 0038 0133     		adds	r3, r3, #1
 5338 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5339 003c 7B72     		strb	r3, [r7, #9]
1210:..\src/command_processing.c ****     
1211:..\src/command_processing.c ****     
1212:..\src/command_processing.c ****        // aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated curren
1213:..\src/command_processing.c ****         aux_int16 = (int16)PWM_IMU_2;
 5340              		.loc 1 1213 0
 5341 003e 104B     		ldr	r3, .L277+8
 5342 0040 B3F90030 		ldrsh	r3, [r3]
 5343 0044 FB80     		strh	r3, [r7, #6]	@ movhi
1214:..\src/command_processing.c ****     
1215:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5344              		.loc 1 1215 0
 5345 0046 BB1D     		adds	r3, r7, #6
 5346 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5347 004a 3B73     		strb	r3, [r7, #12]
1216:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5348              		.loc 1 1216 0
 5349 004c BB1D     		adds	r3, r7, #6
 5350 004e 0133     		adds	r3, r3, #1
 5351 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5352 0052 FB72     		strb	r3, [r7, #11]
1217:..\src/command_processing.c **** 
1218:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
1219:..\src/command_processing.c **** 
1220:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5353              		.loc 1 1220 0
 5354 0054 07F10803 		add	r3, r7, #8
 5355 0058 0521     		movs	r1, #5
 5356 005a 1846     		mov	r0, r3
 5357 005c FFF7FEFF 		bl	LCRChecksum
 5358 0060 0346     		mov	r3, r0
 5359 0062 7B73     		strb	r3, [r7, #13]
1221:..\src/command_processing.c ****     
1222:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5360              		.loc 1 1222 0
 5361 0064 07F10803 		add	r3, r7, #8
 5362 0068 0621     		movs	r1, #6
 5363 006a 1846     		mov	r0, r3
 5364 006c FFF7FEFF 		bl	commWrite
1223:..\src/command_processing.c **** }
 5365              		.loc 1 1223 0
 5366 0070 00BF     		nop
 5367 0072 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 134


 5368              		.cfi_def_cfa_offset 12
 5369 0074 BD46     		mov	sp, r7
 5370              		.cfi_def_cfa_register 13
 5371              		@ sp needed
 5372 0076 90BD     		pop	{r4, r7, pc}
 5373              	.L278:
 5374              		.align	2
 5375              	.L277:
 5376 0078 00000000 		.word	pressure_value
 5377 007c 00005940 		.word	1079574528
 5378 0080 00000000 		.word	PWM_IMU_2
 5379              		.cfi_endproc
 5380              	.LFE103:
 5381              		.size	cmd_get_currents, .-cmd_get_currents
 5382              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 5383              		.align	2
 5384              		.global	cmd_get_currents_for_cuff
 5385              		.thumb
 5386              		.thumb_func
 5387              		.type	cmd_get_currents_for_cuff, %function
 5388              	cmd_get_currents_for_cuff:
 5389              	.LFB104:
1224:..\src/command_processing.c **** 
1225:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 5390              		.loc 1 1225 0
 5391              		.cfi_startproc
 5392              		@ args = 0, pretend = 0, frame = 0
 5393              		@ frame_needed = 1, uses_anonymous_args = 0
 5394              		@ link register save eliminated.
 5395 0000 80B4     		push	{r7}
 5396              		.cfi_def_cfa_offset 4
 5397              		.cfi_offset 7, -4
 5398 0002 00AF     		add	r7, sp, #0
 5399              		.cfi_def_cfa_register 7
1226:..\src/command_processing.c ****    
1227:..\src/command_processing.c **** }
 5400              		.loc 1 1227 0
 5401 0004 00BF     		nop
 5402 0006 BD46     		mov	sp, r7
 5403              		.cfi_def_cfa_register 13
 5404              		@ sp needed
 5405 0008 80BC     		pop	{r7}
 5406              		.cfi_restore 7
 5407              		.cfi_def_cfa_offset 0
 5408 000a 7047     		bx	lr
 5409              		.cfi_endproc
 5410              	.LFE104:
 5411              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 5412              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
 5413              		.align	2
 5414              		.global	cmd_get_vibrotactile_inputs
 5415              		.thumb
 5416              		.thumb_func
 5417              		.type	cmd_get_vibrotactile_inputs, %function
 5418              	cmd_get_vibrotactile_inputs:
 5419              	.LFB105:
1228:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 135


1229:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 5420              		.loc 1 1229 0
 5421              		.cfi_startproc
 5422              		@ args = 0, pretend = 0, frame = 0
 5423              		@ frame_needed = 1, uses_anonymous_args = 0
 5424              		@ link register save eliminated.
 5425 0000 80B4     		push	{r7}
 5426              		.cfi_def_cfa_offset 4
 5427              		.cfi_offset 7, -4
 5428 0002 00AF     		add	r7, sp, #0
 5429              		.cfi_def_cfa_register 7
1230:..\src/command_processing.c ****     
1231:..\src/command_processing.c **** }
 5430              		.loc 1 1231 0
 5431 0004 00BF     		nop
 5432 0006 BD46     		mov	sp, r7
 5433              		.cfi_def_cfa_register 13
 5434              		@ sp needed
 5435 0008 80BC     		pop	{r7}
 5436              		.cfi_restore 7
 5437              		.cfi_def_cfa_offset 0
 5438 000a 7047     		bx	lr
 5439              		.cfi_endproc
 5440              	.LFE105:
 5441              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
 5442              		.section	.text.commReadIMUFromSH,"ax",%progbits
 5443              		.align	2
 5444              		.global	commReadIMUFromSH
 5445              		.thumb
 5446              		.thumb_func
 5447              		.type	commReadIMUFromSH, %function
 5448              	commReadIMUFromSH:
 5449              	.LFB106:
1232:..\src/command_processing.c **** 
1233:..\src/command_processing.c **** //==============================================================================
1234:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1235:..\src/command_processing.c **** //==============================================================================
1236:..\src/command_processing.c **** void commReadIMUFromSH(){
 5450              		.loc 1 1236 0
 5451              		.cfi_startproc
 5452              		@ args = 0, pretend = 0, frame = 32
 5453              		@ frame_needed = 1, uses_anonymous_args = 0
 5454 0000 80B5     		push	{r7, lr}
 5455              		.cfi_def_cfa_offset 8
 5456              		.cfi_offset 7, -8
 5457              		.cfi_offset 14, -4
 5458 0002 88B0     		sub	sp, sp, #32
 5459              		.cfi_def_cfa_offset 40
 5460 0004 00AF     		add	r7, sp, #0
 5461              		.cfi_def_cfa_register 7
1237:..\src/command_processing.c **** 
1238:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1239:..\src/command_processing.c ****     // resulted from the processed IMU values.
1240:..\src/command_processing.c ****     
1241:..\src/command_processing.c ****     uint8 packet_data[16];
1242:..\src/command_processing.c ****     uint8 packet_length;
1243:..\src/command_processing.c ****    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 136


1244:..\src/command_processing.c ****     uint32 t_start, t_end;
1245:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5462              		.loc 1 1245 0
 5463 0006 0123     		movs	r3, #1
 5464 0008 FB77     		strb	r3, [r7, #31]
1246:..\src/command_processing.c **** 
1247:..\src/command_processing.c ****     packet_length = 2;
 5465              		.loc 1 1247 0
 5466 000a 0223     		movs	r3, #2
 5467 000c BB77     		strb	r3, [r7, #30]
1248:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5468              		.loc 1 1248 0
 5469 000e FA23     		movs	r3, #250
 5470 0010 3B71     		strb	r3, [r7, #4]
1249:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5471              		.loc 1 1249 0
 5472 0012 FA23     		movs	r3, #250
 5473 0014 7B71     		strb	r3, [r7, #5]
1250:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5474              		.loc 1 1250 0
 5475 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5476 0018 99B2     		uxth	r1, r3
 5477 001a 234B     		ldr	r3, .L288
 5478 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5479 0020 3B1D     		adds	r3, r7, #4
 5480 0022 1846     		mov	r0, r3
 5481 0024 FFF7FEFF 		bl	commWriteID
1251:..\src/command_processing.c **** 
1252:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5482              		.loc 1 1252 0
 5483 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5484 002c 0346     		mov	r3, r0
 5485 002e BB61     		str	r3, [r7, #24]
1253:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5486              		.loc 1 1253 0
 5487 0030 18E0     		b	.L282
 5488              	.L285:
1254:..\src/command_processing.c ****         if (interrupt_flag){
 5489              		.loc 1 1254 0
 5490 0032 1E4B     		ldr	r3, .L288+4
 5491 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5492 0036 002B     		cmp	r3, #0
 5493 0038 04D0     		beq	.L283
1255:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5494              		.loc 1 1255 0
 5495 003a 1C4B     		ldr	r3, .L288+4
 5496 003c 0022     		movs	r2, #0
 5497 003e 1A70     		strb	r2, [r3]
1256:..\src/command_processing.c ****             interrupt_manager();
 5498              		.loc 1 1256 0
 5499 0040 FFF7FEFF 		bl	interrupt_manager
 5500              	.L283:
1257:..\src/command_processing.c ****         }
1258:..\src/command_processing.c **** 
1259:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5501              		.loc 1 1259 0
 5502 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 137


 5503 0048 0346     		mov	r3, r0
 5504 004a 7B61     		str	r3, [r7, #20]
1260:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5505              		.loc 1 1260 0
 5506 004c BA69     		ldr	r2, [r7, #24]
 5507 004e 7B69     		ldr	r3, [r7, #20]
 5508 0050 D31A     		subs	r3, r2, r3
 5509 0052 174A     		ldr	r2, .L288+8
 5510 0054 9342     		cmp	r3, r2
 5511 0056 05D9     		bls	.L282
1261:..\src/command_processing.c ****             read_flag = FALSE;
 5512              		.loc 1 1261 0
 5513 0058 0023     		movs	r3, #0
 5514 005a FB77     		strb	r3, [r7, #31]
1262:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5515              		.loc 1 1262 0
 5516 005c 154B     		ldr	r3, .L288+12
 5517 005e 0022     		movs	r2, #0
 5518 0060 1A70     		strb	r2, [r3]
1263:..\src/command_processing.c ****             break;
 5519              		.loc 1 1263 0
 5520 0062 03E0     		b	.L284
 5521              	.L282:
1253:..\src/command_processing.c ****         if (interrupt_flag){
 5522              		.loc 1 1253 0
 5523 0064 144B     		ldr	r3, .L288+16
 5524 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5525 0068 FB2B     		cmp	r3, #251
 5526 006a E2D1     		bne	.L285
 5527              	.L284:
1264:..\src/command_processing.c ****         }
1265:..\src/command_processing.c ****     }
1266:..\src/command_processing.c **** 
1267:..\src/command_processing.c ****         if (read_flag) {
 5528              		.loc 1 1267 0
 5529 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5530 006e 002B     		cmp	r3, #0
 5531 0070 15D0     		beq	.L287
1268:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5532              		.loc 1 1268 0
 5533 0072 114B     		ldr	r3, .L288+16
 5534 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5535 0076 1B02     		lsls	r3, r3, #8
 5536 0078 1AB2     		sxth	r2, r3
 5537 007a 0F4B     		ldr	r3, .L288+16
 5538 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5539 007e 1BB2     		sxth	r3, r3
 5540 0080 1343     		orrs	r3, r3, r2
 5541 0082 1AB2     		sxth	r2, r3
 5542 0084 0D4B     		ldr	r3, .L288+20
 5543 0086 1A80     		strh	r2, [r3]	@ movhi
1269:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5544              		.loc 1 1269 0
 5545 0088 0B4B     		ldr	r3, .L288+16
 5546 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5547 008c 1B02     		lsls	r3, r3, #8
 5548 008e 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 138


 5549 0090 094B     		ldr	r3, .L288+16
 5550 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5551 0094 1BB2     		sxth	r3, r3
 5552 0096 1343     		orrs	r3, r3, r2
 5553 0098 1AB2     		sxth	r2, r3
 5554 009a 094B     		ldr	r3, .L288+24
 5555 009c 1A80     		strh	r2, [r3]	@ movhi
 5556              	.L287:
1270:..\src/command_processing.c ****     }
1271:..\src/command_processing.c ****     
1272:..\src/command_processing.c **** }
 5557              		.loc 1 1272 0
 5558 009e 00BF     		nop
 5559 00a0 2037     		adds	r7, r7, #32
 5560              		.cfi_def_cfa_offset 8
 5561 00a2 BD46     		mov	sp, r7
 5562              		.cfi_def_cfa_register 13
 5563              		@ sp needed
 5564 00a4 80BD     		pop	{r7, pc}
 5565              	.L289:
 5566 00a6 00BF     		.align	2
 5567              	.L288:
 5568 00a8 00000000 		.word	c_mem
 5569 00ac 00000000 		.word	interrupt_flag
 5570 00b0 20AA4400 		.word	4500000
 5571 00b4 00000000 		.word	master_mode
 5572 00b8 00000000 		.word	g_rx
 5573 00bc 00000000 		.word	PWM_IMU_1
 5574 00c0 00000000 		.word	PWM_IMU_2
 5575              		.cfi_endproc
 5576              	.LFE106:
 5577              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 5578              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 5579              		.align	2
 5580              		.global	commReadResCurrFromSH
 5581              		.thumb
 5582              		.thumb_func
 5583              		.type	commReadResCurrFromSH, %function
 5584              	commReadResCurrFromSH:
 5585              	.LFB107:
1273:..\src/command_processing.c **** 
1274:..\src/command_processing.c **** //==============================================================================
1275:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1276:..\src/command_processing.c **** //==============================================================================
1277:..\src/command_processing.c **** 
1278:..\src/command_processing.c **** int16 commReadResCurrFromSH()
1279:..\src/command_processing.c **** {
 5586              		.loc 1 1279 0
 5587              		.cfi_startproc
 5588              		@ args = 0, pretend = 0, frame = 32
 5589              		@ frame_needed = 1, uses_anonymous_args = 0
 5590 0000 80B5     		push	{r7, lr}
 5591              		.cfi_def_cfa_offset 8
 5592              		.cfi_offset 7, -8
 5593              		.cfi_offset 14, -4
 5594 0002 88B0     		sub	sp, sp, #32
 5595              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 139


 5596 0004 00AF     		add	r7, sp, #0
 5597              		.cfi_def_cfa_register 7
1280:..\src/command_processing.c ****     uint8 packet_data[16];
1281:..\src/command_processing.c ****     uint8 packet_length;
1282:..\src/command_processing.c ****     int16 curr_diff = 0;
 5598              		.loc 1 1282 0
 5599 0006 0023     		movs	r3, #0
 5600 0008 FB83     		strh	r3, [r7, #30]	@ movhi
1283:..\src/command_processing.c ****     uint32 t_start, t_end;
1284:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5601              		.loc 1 1284 0
 5602 000a 0123     		movs	r3, #1
 5603 000c 7B77     		strb	r3, [r7, #29]
1285:..\src/command_processing.c **** 
1286:..\src/command_processing.c ****     packet_length = 2;
 5604              		.loc 1 1286 0
 5605 000e 0223     		movs	r3, #2
 5606 0010 3B77     		strb	r3, [r7, #28]
1287:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 5607              		.loc 1 1287 0
 5608 0012 8C23     		movs	r3, #140
 5609 0014 3B71     		strb	r3, [r7, #4]
1288:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 5610              		.loc 1 1288 0
 5611 0016 8C23     		movs	r3, #140
 5612 0018 7B71     		strb	r3, [r7, #5]
1289:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5613              		.loc 1 1289 0
 5614 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 5615 001c 99B2     		uxth	r1, r3
 5616 001e 1D4B     		ldr	r3, .L297
 5617 0020 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5618 0024 3B1D     		adds	r3, r7, #4
 5619 0026 1846     		mov	r0, r3
 5620 0028 FFF7FEFF 		bl	commWriteID
1290:..\src/command_processing.c **** 
1291:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5621              		.loc 1 1291 0
 5622 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5623 0030 0346     		mov	r3, r0
 5624 0032 BB61     		str	r3, [r7, #24]
1292:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 5625              		.loc 1 1292 0
 5626 0034 18E0     		b	.L291
 5627              	.L294:
1293:..\src/command_processing.c ****         if (interrupt_flag){
 5628              		.loc 1 1293 0
 5629 0036 184B     		ldr	r3, .L297+4
 5630 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5631 003a 002B     		cmp	r3, #0
 5632 003c 04D0     		beq	.L292
1294:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5633              		.loc 1 1294 0
 5634 003e 164B     		ldr	r3, .L297+4
 5635 0040 0022     		movs	r2, #0
 5636 0042 1A70     		strb	r2, [r3]
1295:..\src/command_processing.c ****             interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 140


 5637              		.loc 1 1295 0
 5638 0044 FFF7FEFF 		bl	interrupt_manager
 5639              	.L292:
1296:..\src/command_processing.c ****         }
1297:..\src/command_processing.c **** 
1298:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5640              		.loc 1 1298 0
 5641 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5642 004c 0346     		mov	r3, r0
 5643 004e 7B61     		str	r3, [r7, #20]
1299:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5644              		.loc 1 1299 0
 5645 0050 BA69     		ldr	r2, [r7, #24]
 5646 0052 7B69     		ldr	r3, [r7, #20]
 5647 0054 D31A     		subs	r3, r2, r3
 5648 0056 114A     		ldr	r2, .L297+8
 5649 0058 9342     		cmp	r3, r2
 5650 005a 05D9     		bls	.L291
1300:..\src/command_processing.c ****             read_flag = FALSE;
 5651              		.loc 1 1300 0
 5652 005c 0023     		movs	r3, #0
 5653 005e 7B77     		strb	r3, [r7, #29]
1301:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5654              		.loc 1 1301 0
 5655 0060 0F4B     		ldr	r3, .L297+12
 5656 0062 0022     		movs	r2, #0
 5657 0064 1A70     		strb	r2, [r3]
1302:..\src/command_processing.c ****             break;
 5658              		.loc 1 1302 0
 5659 0066 03E0     		b	.L293
 5660              	.L291:
1292:..\src/command_processing.c ****         if (interrupt_flag){
 5661              		.loc 1 1292 0
 5662 0068 0E4B     		ldr	r3, .L297+16
 5663 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5664 006c 8E2B     		cmp	r3, #142
 5665 006e E2D1     		bne	.L294
 5666              	.L293:
1303:..\src/command_processing.c ****         }
1304:..\src/command_processing.c ****     }
1305:..\src/command_processing.c **** 
1306:..\src/command_processing.c ****     if (read_flag) {
 5667              		.loc 1 1306 0
 5668 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 5669 0072 002B     		cmp	r3, #0
 5670 0074 08D0     		beq	.L295
1307:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 5671              		.loc 1 1307 0
 5672 0076 0B4B     		ldr	r3, .L297+16
 5673 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5674 007a 1B02     		lsls	r3, r3, #8
 5675 007c 1AB2     		sxth	r2, r3
 5676 007e 094B     		ldr	r3, .L297+16
 5677 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5678 0082 1BB2     		sxth	r3, r3
 5679 0084 1343     		orrs	r3, r3, r2
 5680 0086 FB83     		strh	r3, [r7, #30]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 141


 5681              	.L295:
1308:..\src/command_processing.c ****     }
1309:..\src/command_processing.c ****     
1310:..\src/command_processing.c ****     return curr_diff;
 5682              		.loc 1 1310 0
 5683 0088 B7F91E30 		ldrsh	r3, [r7, #30]
1311:..\src/command_processing.c **** }
 5684              		.loc 1 1311 0
 5685 008c 1846     		mov	r0, r3
 5686 008e 2037     		adds	r7, r7, #32
 5687              		.cfi_def_cfa_offset 8
 5688 0090 BD46     		mov	sp, r7
 5689              		.cfi_def_cfa_register 13
 5690              		@ sp needed
 5691 0092 80BD     		pop	{r7, pc}
 5692              	.L298:
 5693              		.align	2
 5694              	.L297:
 5695 0094 00000000 		.word	c_mem
 5696 0098 00000000 		.word	interrupt_flag
 5697 009c 20AA4400 		.word	4500000
 5698 00a0 00000000 		.word	master_mode
 5699 00a4 00000000 		.word	g_rx
 5700              		.cfi_endproc
 5701              	.LFE107:
 5702              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 5703              		.section	.text.cmd_set_baudrate,"ax",%progbits
 5704              		.align	2
 5705              		.global	cmd_set_baudrate
 5706              		.thumb
 5707              		.thumb_func
 5708              		.type	cmd_set_baudrate, %function
 5709              	cmd_set_baudrate:
 5710              	.LFB108:
1312:..\src/command_processing.c **** 
1313:..\src/command_processing.c **** 
1314:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1315:..\src/command_processing.c **** 
1316:..\src/command_processing.c **** void cmd_set_baudrate(){
 5711              		.loc 1 1316 0
 5712              		.cfi_startproc
 5713              		@ args = 0, pretend = 0, frame = 0
 5714              		@ frame_needed = 1, uses_anonymous_args = 0
 5715              		@ link register save eliminated.
 5716 0000 80B4     		push	{r7}
 5717              		.cfi_def_cfa_offset 4
 5718              		.cfi_offset 7, -4
 5719 0002 00AF     		add	r7, sp, #0
 5720              		.cfi_def_cfa_register 7
1317:..\src/command_processing.c ****     
1318:..\src/command_processing.c **** }
 5721              		.loc 1 1318 0
 5722 0004 00BF     		nop
 5723 0006 BD46     		mov	sp, r7
 5724              		.cfi_def_cfa_register 13
 5725              		@ sp needed
 5726 0008 80BC     		pop	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 142


 5727              		.cfi_restore 7
 5728              		.cfi_def_cfa_offset 0
 5729 000a 7047     		bx	lr
 5730              		.cfi_endproc
 5731              	.LFE108:
 5732              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 5733              		.section	.text.cmd_ping,"ax",%progbits
 5734              		.align	2
 5735              		.global	cmd_ping
 5736              		.thumb
 5737              		.thumb_func
 5738              		.type	cmd_ping, %function
 5739              	cmd_ping:
 5740              	.LFB109:
1319:..\src/command_processing.c **** 
1320:..\src/command_processing.c **** void cmd_ping(){
 5741              		.loc 1 1320 0
 5742              		.cfi_startproc
 5743              		@ args = 0, pretend = 0, frame = 8
 5744              		@ frame_needed = 1, uses_anonymous_args = 0
 5745 0000 80B5     		push	{r7, lr}
 5746              		.cfi_def_cfa_offset 8
 5747              		.cfi_offset 7, -8
 5748              		.cfi_offset 14, -4
 5749 0002 82B0     		sub	sp, sp, #8
 5750              		.cfi_def_cfa_offset 16
 5751 0004 00AF     		add	r7, sp, #0
 5752              		.cfi_def_cfa_register 7
1321:..\src/command_processing.c **** 
1322:..\src/command_processing.c ****     uint8 packet_data[2];
1323:..\src/command_processing.c **** 
1324:..\src/command_processing.c ****     // Header
1325:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 5753              		.loc 1 1325 0
 5754 0006 0023     		movs	r3, #0
 5755 0008 3B71     		strb	r3, [r7, #4]
1326:..\src/command_processing.c ****     
1327:..\src/command_processing.c ****     // Load Payload
1328:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 5756              		.loc 1 1328 0
 5757 000a 0023     		movs	r3, #0
 5758 000c 7B71     		strb	r3, [r7, #5]
1329:..\src/command_processing.c **** 
1330:..\src/command_processing.c ****     // Send Package to uart
1331:..\src/command_processing.c ****     commWrite(packet_data, 2);
 5759              		.loc 1 1331 0
 5760 000e 3B1D     		adds	r3, r7, #4
 5761 0010 0221     		movs	r1, #2
 5762 0012 1846     		mov	r0, r3
 5763 0014 FFF7FEFF 		bl	commWrite
1332:..\src/command_processing.c **** }
 5764              		.loc 1 1332 0
 5765 0018 00BF     		nop
 5766 001a 0837     		adds	r7, r7, #8
 5767              		.cfi_def_cfa_offset 8
 5768 001c BD46     		mov	sp, r7
 5769              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 143


 5770              		@ sp needed
 5771 001e 80BD     		pop	{r7, pc}
 5772              		.cfi_endproc
 5773              	.LFE109:
 5774              		.size	cmd_ping, .-cmd_ping
 5775              		.section	.text.cmd_get_inputs,"ax",%progbits
 5776              		.align	2
 5777              		.global	cmd_get_inputs
 5778              		.thumb
 5779              		.thumb_func
 5780              		.type	cmd_get_inputs, %function
 5781              	cmd_get_inputs:
 5782              	.LFB110:
1333:..\src/command_processing.c **** 
1334:..\src/command_processing.c **** void cmd_get_inputs(){
 5783              		.loc 1 1334 0
 5784              		.cfi_startproc
 5785              		@ args = 0, pretend = 0, frame = 0
 5786              		@ frame_needed = 1, uses_anonymous_args = 0
 5787              		@ link register save eliminated.
 5788 0000 80B4     		push	{r7}
 5789              		.cfi_def_cfa_offset 4
 5790              		.cfi_offset 7, -4
 5791 0002 00AF     		add	r7, sp, #0
 5792              		.cfi_def_cfa_register 7
1335:..\src/command_processing.c **** 
1336:..\src/command_processing.c **** }
 5793              		.loc 1 1336 0
 5794 0004 00BF     		nop
 5795 0006 BD46     		mov	sp, r7
 5796              		.cfi_def_cfa_register 13
 5797              		@ sp needed
 5798 0008 80BC     		pop	{r7}
 5799              		.cfi_restore 7
 5800              		.cfi_def_cfa_offset 0
 5801 000a 7047     		bx	lr
 5802              		.cfi_endproc
 5803              	.LFE110:
 5804              		.size	cmd_get_inputs, .-cmd_get_inputs
 5805              		.section	.text.cmd_store_params,"ax",%progbits
 5806              		.align	2
 5807              		.global	cmd_store_params
 5808              		.thumb
 5809              		.thumb_func
 5810              		.type	cmd_store_params, %function
 5811              	cmd_store_params:
 5812              	.LFB111:
1337:..\src/command_processing.c **** 
1338:..\src/command_processing.c **** void cmd_store_params(){
 5813              		.loc 1 1338 0
 5814              		.cfi_startproc
 5815              		@ args = 0, pretend = 0, frame = 8
 5816              		@ frame_needed = 1, uses_anonymous_args = 0
 5817 0000 80B5     		push	{r7, lr}
 5818              		.cfi_def_cfa_offset 8
 5819              		.cfi_offset 7, -8
 5820              		.cfi_offset 14, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 144


 5821 0002 82B0     		sub	sp, sp, #8
 5822              		.cfi_def_cfa_offset 16
 5823 0004 00AF     		add	r7, sp, #0
 5824              		.cfi_def_cfa_register 7
1339:..\src/command_processing.c ****     
1340:..\src/command_processing.c ****     uint8 CYDATA packet_length = 2;
 5825              		.loc 1 1340 0
 5826 0006 0223     		movs	r3, #2
 5827 0008 FB71     		strb	r3, [r7, #7]
1341:..\src/command_processing.c ****     uint8 CYDATA packet_data[2];
1342:..\src/command_processing.c ****     uint8 CYDATA old_id;
1343:..\src/command_processing.c ****       
1344:..\src/command_processing.c ****     // Store params 
1345:..\src/command_processing.c **** 
1346:..\src/command_processing.c ****     if (c_mem.dev.id != g_mem.dev.id) {     //If a new id is going to be set we will lose communica
 5828              		.loc 1 1346 0
 5829 000a 1F4B     		ldr	r3, .L310
 5830 000c 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 5831 000e 1F4B     		ldr	r3, .L310+4
 5832 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5833 0012 9A42     		cmp	r2, r3
 5834 0014 20D0     		beq	.L303
1347:..\src/command_processing.c ****         old_id = c_mem.dev.id;          //after the memstore(0) and the ACK won't be recognised
 5835              		.loc 1 1347 0
 5836 0016 1C4B     		ldr	r3, .L310
 5837 0018 1B7C     		ldrb	r3, [r3, #16]
 5838 001a BB71     		strb	r3, [r7, #6]
1348:..\src/command_processing.c ****         if(memStore(0)) {
 5839              		.loc 1 1348 0
 5840 001c 0020     		movs	r0, #0
 5841 001e FFF7FEFF 		bl	memStore
 5842 0022 0346     		mov	r3, r0
 5843 0024 002B     		cmp	r3, #0
 5844 0026 0BD0     		beq	.L304
1349:..\src/command_processing.c ****             packet_data[0] = ACK_OK;
 5845              		.loc 1 1349 0
 5846 0028 0123     		movs	r3, #1
 5847 002a 3B71     		strb	r3, [r7, #4]
1350:..\src/command_processing.c ****             packet_data[1] = ACK_OK;
 5848              		.loc 1 1350 0
 5849 002c 0123     		movs	r3, #1
 5850 002e 7B71     		strb	r3, [r7, #5]
1351:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5851              		.loc 1 1351 0
 5852 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5853 0032 99B2     		uxth	r1, r3
 5854 0034 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5855 0036 3B1D     		adds	r3, r7, #4
 5856 0038 1846     		mov	r0, r3
 5857 003a FFF7FEFF 		bl	commWrite_old_id
 5858 003e 18E0     		b	.L306
 5859              	.L304:
1352:..\src/command_processing.c ****         }    
1353:..\src/command_processing.c ****         else{
1354:..\src/command_processing.c ****             packet_data[0] = ACK_ERROR;
 5860              		.loc 1 1354 0
 5861 0040 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 145


 5862 0042 3B71     		strb	r3, [r7, #4]
1355:..\src/command_processing.c ****             packet_data[1] = ACK_ERROR;
 5863              		.loc 1 1355 0
 5864 0044 0023     		movs	r3, #0
 5865 0046 7B71     		strb	r3, [r7, #5]
1356:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_length, old_id);
 5866              		.loc 1 1356 0
 5867 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5868 004a 99B2     		uxth	r1, r3
 5869 004c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5870 004e 3B1D     		adds	r3, r7, #4
 5871 0050 1846     		mov	r0, r3
 5872 0052 FFF7FEFF 		bl	commWrite_old_id
 5873 0056 0CE0     		b	.L306
 5874              	.L303:
1357:..\src/command_processing.c ****         }
1358:..\src/command_processing.c ****     }    
1359:..\src/command_processing.c ****     else {
1360:..\src/command_processing.c ****         if(memStore(0))
 5875              		.loc 1 1360 0
 5876 0058 0020     		movs	r0, #0
 5877 005a FFF7FEFF 		bl	memStore
 5878 005e 0346     		mov	r3, r0
 5879 0060 002B     		cmp	r3, #0
 5880 0062 03D0     		beq	.L307
1361:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 5881              		.loc 1 1361 0
 5882 0064 0120     		movs	r0, #1
 5883 0066 FFF7FEFF 		bl	sendAcknowledgment
 5884 006a 02E0     		b	.L306
 5885              	.L307:
1362:..\src/command_processing.c ****         else
1363:..\src/command_processing.c ****             sendAcknowledgment(ACK_ERROR);
 5886              		.loc 1 1363 0
 5887 006c 0020     		movs	r0, #0
 5888 006e FFF7FEFF 		bl	sendAcknowledgment
 5889              	.L306:
1364:..\src/command_processing.c ****     }
1365:..\src/command_processing.c ****     
1366:..\src/command_processing.c ****     // FW reset (if necessary)
1367:..\src/command_processing.c ****     if (reset_PSoC_flag == TRUE) {
 5890              		.loc 1 1367 0
 5891 0072 074B     		ldr	r3, .L310+8
 5892 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5893 0076 012B     		cmp	r3, #1
 5894 0078 01D1     		bne	.L309
1368:..\src/command_processing.c ****         CySoftwareReset();
 5895              		.loc 1 1368 0
 5896 007a FFF7FEFF 		bl	CySoftwareReset
 5897              	.L309:
1369:..\src/command_processing.c ****     }
1370:..\src/command_processing.c **** }
 5898              		.loc 1 1370 0
 5899 007e 00BF     		nop
 5900 0080 0837     		adds	r7, r7, #8
 5901              		.cfi_def_cfa_offset 8
 5902 0082 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 146


 5903              		.cfi_def_cfa_register 13
 5904              		@ sp needed
 5905 0084 80BD     		pop	{r7, pc}
 5906              	.L311:
 5907 0086 00BF     		.align	2
 5908              	.L310:
 5909 0088 00000000 		.word	c_mem
 5910 008c 00000000 		.word	g_mem
 5911 0090 00000000 		.word	reset_PSoC_flag
 5912              		.cfi_endproc
 5913              	.LFE111:
 5914              		.size	cmd_store_params, .-cmd_store_params
 5915              		.section	.text.cmd_get_emg,"ax",%progbits
 5916              		.align	2
 5917              		.global	cmd_get_emg
 5918              		.thumb
 5919              		.thumb_func
 5920              		.type	cmd_get_emg, %function
 5921              	cmd_get_emg:
 5922              	.LFB112:
1371:..\src/command_processing.c **** 
1372:..\src/command_processing.c **** void cmd_get_emg(){
 5923              		.loc 1 1372 0
 5924              		.cfi_startproc
 5925              		@ args = 0, pretend = 0, frame = 16
 5926              		@ frame_needed = 1, uses_anonymous_args = 0
 5927 0000 80B5     		push	{r7, lr}
 5928              		.cfi_def_cfa_offset 8
 5929              		.cfi_offset 7, -8
 5930              		.cfi_offset 14, -4
 5931 0002 84B0     		sub	sp, sp, #16
 5932              		.cfi_def_cfa_offset 24
 5933 0004 00AF     		add	r7, sp, #0
 5934              		.cfi_def_cfa_register 7
1373:..\src/command_processing.c ****     
1374:..\src/command_processing.c ****     uint8 packet_data[6];
1375:..\src/command_processing.c ****     int16 aux_int16;
1376:..\src/command_processing.c ****     
1377:..\src/command_processing.c ****     // Header        
1378:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 5935              		.loc 1 1378 0
 5936 0006 8823     		movs	r3, #136
 5937 0008 3B72     		strb	r3, [r7, #8]
1379:..\src/command_processing.c ****     
1380:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 5938              		.loc 1 1380 0
 5939 000a 144B     		ldr	r3, .L313
 5940 000c 1B68     		ldr	r3, [r3]
 5941 000e 1BB2     		sxth	r3, r3
 5942 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1381:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5943              		.loc 1 1381 0
 5944 0012 BB1D     		adds	r3, r7, #6
 5945 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5946 0016 BB72     		strb	r3, [r7, #10]
1382:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5947              		.loc 1 1382 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 147


 5948 0018 BB1D     		adds	r3, r7, #6
 5949 001a 0133     		adds	r3, r3, #1
 5950 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5951 001e 7B72     		strb	r3, [r7, #9]
1383:..\src/command_processing.c ****     
1384:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 5952              		.loc 1 1384 0
 5953 0020 0E4B     		ldr	r3, .L313
 5954 0022 5B68     		ldr	r3, [r3, #4]
 5955 0024 1BB2     		sxth	r3, r3
 5956 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1385:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5957              		.loc 1 1385 0
 5958 0028 BB1D     		adds	r3, r7, #6
 5959 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5960 002c 3B73     		strb	r3, [r7, #12]
1386:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5961              		.loc 1 1386 0
 5962 002e BB1D     		adds	r3, r7, #6
 5963 0030 0133     		adds	r3, r3, #1
 5964 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5965 0034 FB72     		strb	r3, [r7, #11]
1387:..\src/command_processing.c **** 
1388:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5966              		.loc 1 1388 0
 5967 0036 07F10803 		add	r3, r7, #8
 5968 003a 0521     		movs	r1, #5
 5969 003c 1846     		mov	r0, r3
 5970 003e FFF7FEFF 		bl	LCRChecksum
 5971 0042 0346     		mov	r3, r0
 5972 0044 7B73     		strb	r3, [r7, #13]
1389:..\src/command_processing.c **** 
1390:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5973              		.loc 1 1390 0
 5974 0046 07F10803 		add	r3, r7, #8
 5975 004a 0621     		movs	r1, #6
 5976 004c 1846     		mov	r0, r3
 5977 004e FFF7FEFF 		bl	commWrite
1391:..\src/command_processing.c **** 
1392:..\src/command_processing.c **** }
 5978              		.loc 1 1392 0
 5979 0052 00BF     		nop
 5980 0054 1037     		adds	r7, r7, #16
 5981              		.cfi_def_cfa_offset 8
 5982 0056 BD46     		mov	sp, r7
 5983              		.cfi_def_cfa_register 13
 5984              		@ sp needed
 5985 0058 80BD     		pop	{r7, pc}
 5986              	.L314:
 5987 005a 00BF     		.align	2
 5988              	.L313:
 5989 005c 00000000 		.word	g_adc_measOld
 5990              		.cfi_endproc
 5991              	.LFE112:
 5992              		.size	cmd_get_emg, .-cmd_get_emg
 5993              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 5994              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 148


 5995              		.global	cmd_get_imu_readings
 5996              		.thumb
 5997              		.thumb_func
 5998              		.type	cmd_get_imu_readings, %function
 5999              	cmd_get_imu_readings:
 6000              	.LFB113:
1393:..\src/command_processing.c **** 
1394:..\src/command_processing.c **** void cmd_get_imu_readings(){
 6001              		.loc 1 1394 0
 6002              		.cfi_startproc
 6003              		@ args = 0, pretend = 0, frame = 0
 6004              		@ frame_needed = 1, uses_anonymous_args = 0
 6005              		@ link register save eliminated.
 6006 0000 80B4     		push	{r7}
 6007              		.cfi_def_cfa_offset 4
 6008              		.cfi_offset 7, -4
 6009 0002 00AF     		add	r7, sp, #0
 6010              		.cfi_def_cfa_register 7
1395:..\src/command_processing.c ****  
1396:..\src/command_processing.c **** }
 6011              		.loc 1 1396 0
 6012 0004 00BF     		nop
 6013 0006 BD46     		mov	sp, r7
 6014              		.cfi_def_cfa_register 13
 6015              		@ sp needed
 6016 0008 80BC     		pop	{r7}
 6017              		.cfi_restore 7
 6018              		.cfi_def_cfa_offset 0
 6019 000a 7047     		bx	lr
 6020              		.cfi_endproc
 6021              	.LFE113:
 6022              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 6023              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 6024              		.align	2
 6025              		.global	cmd_get_encoder_map
 6026              		.thumb
 6027              		.thumb_func
 6028              		.type	cmd_get_encoder_map, %function
 6029              	cmd_get_encoder_map:
 6030              	.LFB114:
1397:..\src/command_processing.c **** 
1398:..\src/command_processing.c **** void cmd_get_encoder_map(){
 6031              		.loc 1 1398 0
 6032              		.cfi_startproc
 6033              		@ args = 0, pretend = 0, frame = 0
 6034              		@ frame_needed = 1, uses_anonymous_args = 0
 6035              		@ link register save eliminated.
 6036 0000 80B4     		push	{r7}
 6037              		.cfi_def_cfa_offset 4
 6038              		.cfi_offset 7, -4
 6039 0002 00AF     		add	r7, sp, #0
 6040              		.cfi_def_cfa_register 7
1399:..\src/command_processing.c ****    }
 6041              		.loc 1 1399 0
 6042 0004 00BF     		nop
 6043 0006 BD46     		mov	sp, r7
 6044              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 149


 6045              		@ sp needed
 6046 0008 80BC     		pop	{r7}
 6047              		.cfi_restore 7
 6048              		.cfi_def_cfa_offset 0
 6049 000a 7047     		bx	lr
 6050              		.cfi_endproc
 6051              	.LFE114:
 6052              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 6053              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 6054              		.align	2
 6055              		.global	cmd_get_encoder_raw
 6056              		.thumb
 6057              		.thumb_func
 6058              		.type	cmd_get_encoder_raw, %function
 6059              	cmd_get_encoder_raw:
 6060              	.LFB115:
1400:..\src/command_processing.c **** 
1401:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 6061              		.loc 1 1401 0
 6062              		.cfi_startproc
 6063              		@ args = 0, pretend = 0, frame = 0
 6064              		@ frame_needed = 1, uses_anonymous_args = 0
 6065              		@ link register save eliminated.
 6066 0000 80B4     		push	{r7}
 6067              		.cfi_def_cfa_offset 4
 6068              		.cfi_offset 7, -4
 6069 0002 00AF     		add	r7, sp, #0
 6070              		.cfi_def_cfa_register 7
1402:..\src/command_processing.c ****    }
 6071              		.loc 1 1402 0
 6072 0004 00BF     		nop
 6073 0006 BD46     		mov	sp, r7
 6074              		.cfi_def_cfa_register 13
 6075              		@ sp needed
 6076 0008 80BC     		pop	{r7}
 6077              		.cfi_restore 7
 6078              		.cfi_def_cfa_offset 0
 6079 000a 7047     		bx	lr
 6080              		.cfi_endproc
 6081              	.LFE115:
 6082              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 6083              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 6084              		.align	2
 6085              		.global	cmd_get_ADC_map
 6086              		.thumb
 6087              		.thumb_func
 6088              		.type	cmd_get_ADC_map, %function
 6089              	cmd_get_ADC_map:
 6090              	.LFB116:
1403:..\src/command_processing.c **** 
1404:..\src/command_processing.c **** void cmd_get_ADC_map(){
 6091              		.loc 1 1404 0
 6092              		.cfi_startproc
 6093              		@ args = 0, pretend = 0, frame = 0
 6094              		@ frame_needed = 1, uses_anonymous_args = 0
 6095              		@ link register save eliminated.
 6096 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 150


 6097              		.cfi_def_cfa_offset 4
 6098              		.cfi_offset 7, -4
 6099 0002 00AF     		add	r7, sp, #0
 6100              		.cfi_def_cfa_register 7
1405:..\src/command_processing.c ****    }
 6101              		.loc 1 1405 0
 6102 0004 00BF     		nop
 6103 0006 BD46     		mov	sp, r7
 6104              		.cfi_def_cfa_register 13
 6105              		@ sp needed
 6106 0008 80BC     		pop	{r7}
 6107              		.cfi_restore 7
 6108              		.cfi_def_cfa_offset 0
 6109 000a 7047     		bx	lr
 6110              		.cfi_endproc
 6111              	.LFE116:
 6112              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 6113              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 6114              		.align	2
 6115              		.global	cmd_get_ADC_raw
 6116              		.thumb
 6117              		.thumb_func
 6118              		.type	cmd_get_ADC_raw, %function
 6119              	cmd_get_ADC_raw:
 6120              	.LFB117:
1406:..\src/command_processing.c **** 
1407:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 6121              		.loc 1 1407 0
 6122              		.cfi_startproc
 6123              		@ args = 0, pretend = 0, frame = 0
 6124              		@ frame_needed = 1, uses_anonymous_args = 0
 6125              		@ link register save eliminated.
 6126 0000 80B4     		push	{r7}
 6127              		.cfi_def_cfa_offset 4
 6128              		.cfi_offset 7, -4
 6129 0002 00AF     		add	r7, sp, #0
 6130              		.cfi_def_cfa_register 7
1408:..\src/command_processing.c ****    
1409:..\src/command_processing.c **** }
 6131              		.loc 1 1409 0
 6132 0004 00BF     		nop
 6133 0006 BD46     		mov	sp, r7
 6134              		.cfi_def_cfa_register 13
 6135              		@ sp needed
 6136 0008 80BC     		pop	{r7}
 6137              		.cfi_restore 7
 6138              		.cfi_def_cfa_offset 0
 6139 000a 7047     		bx	lr
 6140              		.cfi_endproc
 6141              	.LFE117:
 6142              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 6143              		.section	.text.cmd_get_SD_file,"ax",%progbits
 6144              		.align	2
 6145              		.global	cmd_get_SD_file
 6146              		.thumb
 6147              		.thumb_func
 6148              		.type	cmd_get_SD_file, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 151


 6149              	cmd_get_SD_file:
 6150              	.LFB118:
1410:..\src/command_processing.c **** 
1411:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 6151              		.loc 1 1411 0
 6152              		.cfi_startproc
 6153              		@ args = 0, pretend = 0, frame = 20064
 6154              		@ frame_needed = 1, uses_anonymous_args = 0
 6155 0000 80B5     		push	{r7, lr}
 6156              		.cfi_def_cfa_offset 8
 6157              		.cfi_offset 7, -8
 6158              		.cfi_offset 14, -4
 6159 0002 ADF59C4D 		sub	sp, sp, #19968
 6160              		.cfi_def_cfa_offset 19976
 6161 0006 98B0     		sub	sp, sp, #96
 6162              		.cfi_def_cfa_offset 20072
 6163 0008 00AF     		add	r7, sp, #0
 6164              		.cfi_def_cfa_register 7
 6165 000a 0246     		mov	r2, r0
 6166 000c 07F16003 		add	r3, r7, #96
 6167 0010 5A3B     		subs	r3, r3, #90
 6168 0012 1A80     		strh	r2, [r3]	@ movhi
1412:..\src/command_processing.c ****     
1413:..\src/command_processing.c ****     uint8 i = 0;
 6169              		.loc 1 1413 0
 6170 0014 0023     		movs	r3, #0
 6171 0016 07F59C42 		add	r2, r7, #19968
 6172 001a 02F15F02 		add	r2, r2, #95
 6173 001e 1370     		strb	r3, [r2]
1414:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 6174              		.loc 1 1414 0
 6175 0020 0023     		movs	r3, #0
 6176 0022 07F59C42 		add	r2, r7, #19968
 6177 0026 02F12C02 		add	r2, r2, #44
 6178 002a 1360     		str	r3, [r2]
 6179 002c 07F59C43 		add	r3, r7, #19968
 6180 0030 03F13003 		add	r3, r3, #48
 6181 0034 2E22     		movs	r2, #46
 6182 0036 0021     		movs	r1, #0
 6183 0038 1846     		mov	r0, r3
 6184 003a FFF7FEFF 		bl	memset
1415:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 6185              		.loc 1 1415 0
 6186 003e 07F16003 		add	r3, r7, #96
 6187 0042 543B     		subs	r3, r3, #84
 6188 0044 0022     		movs	r2, #0
 6189 0046 1A60     		str	r2, [r3]
 6190 0048 0433     		adds	r3, r3, #4
 6191 004a 44F61C62 		movw	r2, #19996
 6192 004e 0021     		movs	r1, #0
 6193 0050 1846     		mov	r0, r3
 6194 0052 FFF7FEFF 		bl	memset
1416:..\src/command_processing.c ****     strcpy(filename, "");
 6195              		.loc 1 1416 0
 6196 0056 3C4B     		ldr	r3, .L325
 6197 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6198 005a 07F59C42 		add	r2, r7, #19968
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 152


 6199 005e 02F12C02 		add	r2, r2, #44
 6200 0062 1370     		strb	r3, [r2]
1417:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 6201              		.loc 1 1417 0
 6202 0064 384B     		ldr	r3, .L325
 6203 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6204 0068 07F16003 		add	r3, r7, #96
 6205 006c 543B     		subs	r3, r3, #84
 6206 006e 1A70     		strb	r2, [r3]
1418:..\src/command_processing.c ****     
1419:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 6207              		.loc 1 1419 0
 6208 0070 0023     		movs	r3, #0
 6209 0072 07F59C42 		add	r2, r7, #19968
 6210 0076 02F15F02 		add	r2, r2, #95
 6211 007a 1370     		strb	r3, [r2]
 6212 007c 1DE0     		b	.L321
 6213              	.L322:
1420:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6214              		.loc 1 1420 0 discriminator 3
 6215 007e 07F59C43 		add	r3, r7, #19968
 6216 0082 03F15F03 		add	r3, r3, #95
 6217 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6218 0088 07F59C42 		add	r2, r7, #19968
 6219 008c 02F12C02 		add	r2, r2, #44
 6220 0090 1344     		add	r3, r3, r2
 6221 0092 07F59C42 		add	r2, r7, #19968
 6222 0096 02F15F02 		add	r2, r2, #95
 6223 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6224 009c 0332     		adds	r2, r2, #3
 6225 009e 2B49     		ldr	r1, .L325+4
 6226 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 6227 00a2 1A70     		strb	r2, [r3]
1419:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6228              		.loc 1 1419 0 discriminator 3
 6229 00a4 07F59C43 		add	r3, r7, #19968
 6230 00a8 03F15F03 		add	r3, r3, #95
 6231 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6232 00ae 0133     		adds	r3, r3, #1
 6233 00b0 07F59C42 		add	r2, r7, #19968
 6234 00b4 02F15F02 		add	r2, r2, #95
 6235 00b8 1370     		strb	r3, [r2]
 6236              	.L321:
1419:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6237              		.loc 1 1419 0 is_stmt 0 discriminator 1
 6238 00ba 07F59C43 		add	r3, r7, #19968
 6239 00be 03F15F03 		add	r3, r3, #95
 6240 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6241 00c4 9AB2     		uxth	r2, r3
 6242 00c6 07F16003 		add	r3, r7, #96
 6243 00ca 5A3B     		subs	r3, r3, #90
 6244 00cc 1B88     		ldrh	r3, [r3]
 6245 00ce 9342     		cmp	r3, r2
 6246 00d0 D5D8     		bhi	.L322
1421:..\src/command_processing.c ****     }
1422:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 6247              		.loc 1 1422 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 153


 6248 00d2 07F59C43 		add	r3, r7, #19968
 6249 00d6 03F15F03 		add	r3, r3, #95
 6250 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6251 00dc 07F59C42 		add	r2, r7, #19968
 6252 00e0 02F12C02 		add	r2, r2, #44
 6253 00e4 1344     		add	r3, r3, r2
 6254 00e6 0022     		movs	r2, #0
 6255 00e8 1A70     		strb	r2, [r3]
1423:..\src/command_processing.c ****      
1424:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1425:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 6256              		.loc 1 1425 0
 6257 00ea 07F59C43 		add	r3, r7, #19968
 6258 00ee 03F12C03 		add	r3, r3, #44
 6259 00f2 1749     		ldr	r1, .L325+8
 6260 00f4 1846     		mov	r0, r3
 6261 00f6 FFF7FEFF 		bl	strcmp
 6262 00fa 0346     		mov	r3, r0
 6263 00fc 002B     		cmp	r3, #0
 6264 00fe 0CD0     		beq	.L323
1426:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 6265              		.loc 1 1426 0
 6266 0100 07F16003 		add	r3, r7, #96
 6267 0104 543B     		subs	r3, r3, #84
 6268 0106 07F59C40 		add	r0, r7, #19968
 6269 010a 00F12C00 		add	r0, r0, #44
 6270 010e 44F62062 		movw	r2, #20000
 6271 0112 1946     		mov	r1, r3
 6272 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 6273 0118 07E0     		b	.L324
 6274              	.L323:
1427:..\src/command_processing.c ****     }
1428:..\src/command_processing.c ****     else {
1429:..\src/command_processing.c ****         //It is the currently open working file
1430:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 6275              		.loc 1 1430 0
 6276 011a 07F16003 		add	r3, r7, #96
 6277 011e 543B     		subs	r3, r3, #84
 6278 0120 44F62061 		movw	r1, #20000
 6279 0124 1846     		mov	r0, r3
 6280 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 6281              	.L324:
1431:..\src/command_processing.c ****     }
1432:..\src/command_processing.c **** 
1433:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
1434:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1435:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 6282              		.loc 1 1435 0
 6283 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1436:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 6284              		.loc 1 1436 0
 6285 012e 07F16003 		add	r3, r7, #96
 6286 0132 543B     		subs	r3, r3, #84
 6287 0134 1846     		mov	r0, r3
 6288 0136 FFF7FEFF 		bl	UART_RS485_PutString
1437:..\src/command_processing.c **** }
 6289              		.loc 1 1437 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 154


 6290 013a 00BF     		nop
 6291 013c 07F59C47 		add	r7, r7, #19968
 6292 0140 6037     		adds	r7, r7, #96
 6293              		.cfi_def_cfa_offset 8
 6294 0142 BD46     		mov	sp, r7
 6295              		.cfi_def_cfa_register 13
 6296              		@ sp needed
 6297 0144 80BD     		pop	{r7, pc}
 6298              	.L326:
 6299 0146 00BF     		.align	2
 6300              	.L325:
 6301 0148 00000000 		.word	.LC8
 6302 014c 00000000 		.word	g_rx
 6303 0150 00000000 		.word	sdFile
 6304              		.cfi_endproc
 6305              	.LFE118:
 6306              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 6307              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 6308              		.align	2
 6309              		.global	cmd_remove_SD_file
 6310              		.thumb
 6311              		.thumb_func
 6312              		.type	cmd_remove_SD_file, %function
 6313              	cmd_remove_SD_file:
 6314              	.LFB119:
1438:..\src/command_processing.c **** 
1439:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 6315              		.loc 1 1439 0
 6316              		.cfi_startproc
 6317              		@ args = 0, pretend = 0, frame = 8
 6318              		@ frame_needed = 1, uses_anonymous_args = 0
 6319              		@ link register save eliminated.
 6320 0000 80B4     		push	{r7}
 6321              		.cfi_def_cfa_offset 4
 6322              		.cfi_offset 7, -4
 6323 0002 83B0     		sub	sp, sp, #12
 6324              		.cfi_def_cfa_offset 16
 6325 0004 00AF     		add	r7, sp, #0
 6326              		.cfi_def_cfa_register 7
 6327 0006 0346     		mov	r3, r0
 6328 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1440:..\src/command_processing.c ****   
1441:..\src/command_processing.c **** }
 6329              		.loc 1 1441 0
 6330 000a 00BF     		nop
 6331 000c 0C37     		adds	r7, r7, #12
 6332              		.cfi_def_cfa_offset 4
 6333 000e BD46     		mov	sp, r7
 6334              		.cfi_def_cfa_register 13
 6335              		@ sp needed
 6336 0010 80BC     		pop	{r7}
 6337              		.cfi_restore 7
 6338              		.cfi_def_cfa_offset 0
 6339 0012 7047     		bx	lr
 6340              		.cfi_endproc
 6341              	.LFE119:
 6342              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 155


 6343              		.global	__aeabi_i2f
 6344              		.global	__aeabi_ddiv
 6345              		.section	.text.vibrotactile_control,"ax",%progbits
 6346              		.align	2
 6347              		.global	vibrotactile_control
 6348              		.thumb
 6349              		.thumb_func
 6350              		.type	vibrotactile_control, %function
 6351              	vibrotactile_control:
 6352              	.LFB120:
1442:..\src/command_processing.c **** 
1443:..\src/command_processing.c **** //==============================================================================
1444:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
1445:..\src/command_processing.c **** //==============================================================================
1446:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1447:..\src/command_processing.c **** 
1448:..\src/command_processing.c **** void vibrotactile_control() {
 6353              		.loc 1 1448 0
 6354              		.cfi_startproc
 6355              		@ args = 0, pretend = 0, frame = 8
 6356              		@ frame_needed = 1, uses_anonymous_args = 0
 6357 0000 90B5     		push	{r4, r7, lr}
 6358              		.cfi_def_cfa_offset 12
 6359              		.cfi_offset 4, -12
 6360              		.cfi_offset 7, -8
 6361              		.cfi_offset 14, -4
 6362 0002 83B0     		sub	sp, sp, #12
 6363              		.cfi_def_cfa_offset 24
 6364 0004 00AF     		add	r7, sp, #0
 6365              		.cfi_def_cfa_register 7
1449:..\src/command_processing.c ****     
1450:..\src/command_processing.c ****     uint8 i;
1451:..\src/command_processing.c ****     
1452:..\src/command_processing.c ****     commReadIMUFromSH();    
 6366              		.loc 1 1452 0
 6367 0006 FFF7FEFF 		bl	commReadIMUFromSH
1453:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1454:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1455:..\src/command_processing.c ****     
1456:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 6368              		.loc 1 1456 0
 6369 000a 4B4B     		ldr	r3, .L336
 6370 000c B3F90030 		ldrsh	r3, [r3]
 6371 0010 1846     		mov	r0, r3
 6372 0012 FFF7FEFF 		bl	__aeabi_i2f
 6373 0016 0346     		mov	r3, r0
 6374 0018 1846     		mov	r0, r3
 6375 001a FFF7FEFF 		bl	__aeabi_f2d
 6376 001e 4FF00002 		mov	r2, #0
 6377 0022 464B     		ldr	r3, .L336+4
 6378 0024 FFF7FEFF 		bl	__aeabi_ddiv
 6379 0028 0346     		mov	r3, r0
 6380 002a 0C46     		mov	r4, r1
 6381 002c 1846     		mov	r0, r3
 6382 002e 2146     		mov	r1, r4
 6383 0030 4FF00002 		mov	r2, #0
 6384 0034 424B     		ldr	r3, .L336+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 156


 6385 0036 FFF7FEFF 		bl	__aeabi_dmul
 6386 003a 0346     		mov	r3, r0
 6387 003c 0C46     		mov	r4, r1
 6388 003e 1846     		mov	r0, r3
 6389 0040 2146     		mov	r1, r4
 6390 0042 FFF7FEFF 		bl	__aeabi_d2iz
 6391 0046 0346     		mov	r3, r0
 6392 0048 1AB2     		sxth	r2, r3
 6393 004a 3B4B     		ldr	r3, .L336
 6394 004c 1A80     		strh	r2, [r3]	@ movhi
1457:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_VT_PWM) PWM_IMU_1 = MAX_VT_PWM;
 6395              		.loc 1 1457 0
 6396 004e 3A4B     		ldr	r3, .L336
 6397 0050 B3F90030 		ldrsh	r3, [r3]
 6398 0054 642B     		cmp	r3, #100
 6399 0056 02DD     		ble	.L329
 6400              		.loc 1 1457 0 is_stmt 0 discriminator 1
 6401 0058 374B     		ldr	r3, .L336
 6402 005a 6422     		movs	r2, #100
 6403 005c 1A80     		strh	r2, [r3]	@ movhi
 6404              	.L329:
1458:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_VT_PWM) PWM_IMU_1 = 0;
 6405              		.loc 1 1458 0 is_stmt 1
 6406 005e 364B     		ldr	r3, .L336
 6407 0060 B3F90030 		ldrsh	r3, [r3]
 6408 0064 092B     		cmp	r3, #9
 6409 0066 02DC     		bgt	.L330
 6410              		.loc 1 1458 0 is_stmt 0 discriminator 1
 6411 0068 334B     		ldr	r3, .L336
 6412 006a 0022     		movs	r2, #0
 6413 006c 1A80     		strh	r2, [r3]	@ movhi
 6414              	.L330:
1459:..\src/command_processing.c ****     
1460:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 6415              		.loc 1 1460 0 is_stmt 1
 6416 006e 354B     		ldr	r3, .L336+12
 6417 0070 B3F90030 		ldrsh	r3, [r3]
 6418 0074 1846     		mov	r0, r3
 6419 0076 FFF7FEFF 		bl	__aeabi_i2f
 6420 007a 0346     		mov	r3, r0
 6421 007c 1846     		mov	r0, r3
 6422 007e FFF7FEFF 		bl	__aeabi_f2d
 6423 0082 4FF00002 		mov	r2, #0
 6424 0086 2D4B     		ldr	r3, .L336+4
 6425 0088 FFF7FEFF 		bl	__aeabi_ddiv
 6426 008c 0346     		mov	r3, r0
 6427 008e 0C46     		mov	r4, r1
 6428 0090 1846     		mov	r0, r3
 6429 0092 2146     		mov	r1, r4
 6430 0094 4FF00002 		mov	r2, #0
 6431 0098 294B     		ldr	r3, .L336+8
 6432 009a FFF7FEFF 		bl	__aeabi_dmul
 6433 009e 0346     		mov	r3, r0
 6434 00a0 0C46     		mov	r4, r1
 6435 00a2 1846     		mov	r0, r3
 6436 00a4 2146     		mov	r1, r4
 6437 00a6 FFF7FEFF 		bl	__aeabi_d2iz
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 157


 6438 00aa 0346     		mov	r3, r0
 6439 00ac 1AB2     		sxth	r2, r3
 6440 00ae 254B     		ldr	r3, .L336+12
 6441 00b0 1A80     		strh	r2, [r3]	@ movhi
1461:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_VT_PWM) PWM_IMU_2 = MAX_VT_PWM;
 6442              		.loc 1 1461 0
 6443 00b2 244B     		ldr	r3, .L336+12
 6444 00b4 B3F90030 		ldrsh	r3, [r3]
 6445 00b8 642B     		cmp	r3, #100
 6446 00ba 02DD     		ble	.L331
 6447              		.loc 1 1461 0 is_stmt 0 discriminator 1
 6448 00bc 214B     		ldr	r3, .L336+12
 6449 00be 6422     		movs	r2, #100
 6450 00c0 1A80     		strh	r2, [r3]	@ movhi
 6451              	.L331:
1462:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_VT_PWM) PWM_IMU_2 = 0;
 6452              		.loc 1 1462 0 is_stmt 1
 6453 00c2 204B     		ldr	r3, .L336+12
 6454 00c4 B3F90030 		ldrsh	r3, [r3]
 6455 00c8 092B     		cmp	r3, #9
 6456 00ca 02DC     		bgt	.L332
 6457              		.loc 1 1462 0 is_stmt 0 discriminator 1
 6458 00cc 1D4B     		ldr	r3, .L336+12
 6459 00ce 0022     		movs	r2, #0
 6460 00d0 1A80     		strh	r2, [r3]	@ movhi
 6461              	.L332:
1463:..\src/command_processing.c ****     
1464:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6462              		.loc 1 1464 0 is_stmt 1
 6463 00d2 194B     		ldr	r3, .L336
 6464 00d4 B3F90030 		ldrsh	r3, [r3]
 6465 00d8 DAB2     		uxtb	r2, r3
 6466 00da 1B4B     		ldr	r3, .L336+16
 6467 00dc 1A70     		strb	r2, [r3]
1465:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6468              		.loc 1 1465 0
 6469 00de 194B     		ldr	r3, .L336+12
 6470 00e0 B3F90030 		ldrsh	r3, [r3]
 6471 00e4 DAB2     		uxtb	r2, r3
 6472 00e6 184B     		ldr	r3, .L336+16
 6473 00e8 5A70     		strb	r2, [r3, #1]
1466:..\src/command_processing.c ****     
1467:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6474              		.loc 1 1467 0
 6475 00ea 134B     		ldr	r3, .L336
 6476 00ec B3F90030 		ldrsh	r3, [r3]
 6477 00f0 DAB2     		uxtb	r2, r3
 6478 00f2 154B     		ldr	r3, .L336+16
 6479 00f4 1A70     		strb	r2, [r3]
1468:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6480              		.loc 1 1468 0
 6481 00f6 134B     		ldr	r3, .L336+12
 6482 00f8 B3F90030 		ldrsh	r3, [r3]
 6483 00fc DAB2     		uxtb	r2, r3
 6484 00fe 124B     		ldr	r3, .L336+16
 6485 0100 5A70     		strb	r2, [r3, #1]
1469:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 158


1470:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 6486              		.loc 1 1470 0
 6487 0102 0023     		movs	r3, #0
 6488 0104 FB71     		strb	r3, [r7, #7]
 6489 0106 0FE0     		b	.L333
 6490              	.L335:
1471:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6491              		.loc 1 1471 0
 6492 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6493 010a 1846     		mov	r0, r3
 6494 010c FFF7FEFF 		bl	vibrotactile_control_generic
1472:..\src/command_processing.c ****         
1473:..\src/command_processing.c ****         if (interrupt_flag){
 6495              		.loc 1 1473 0
 6496 0110 0E4B     		ldr	r3, .L336+20
 6497 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6498 0114 002B     		cmp	r3, #0
 6499 0116 04D0     		beq	.L334
1474:..\src/command_processing.c ****             interrupt_flag = FALSE;
 6500              		.loc 1 1474 0
 6501 0118 0C4B     		ldr	r3, .L336+20
 6502 011a 0022     		movs	r2, #0
 6503 011c 1A70     		strb	r2, [r3]
1475:..\src/command_processing.c ****             interrupt_manager();
 6504              		.loc 1 1475 0
 6505 011e FFF7FEFF 		bl	interrupt_manager
 6506              	.L334:
1470:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6507              		.loc 1 1470 0 discriminator 2
 6508 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6509 0124 0133     		adds	r3, r3, #1
 6510 0126 FB71     		strb	r3, [r7, #7]
 6511              	.L333:
1470:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6512              		.loc 1 1470 0 is_stmt 0 discriminator 1
 6513 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6514 012a 012B     		cmp	r3, #1
 6515 012c ECD9     		bls	.L335
1476:..\src/command_processing.c ****         }
1477:..\src/command_processing.c ****     } 
1478:..\src/command_processing.c **** }
 6516              		.loc 1 1478 0 is_stmt 1
 6517 012e 00BF     		nop
 6518 0130 0C37     		adds	r7, r7, #12
 6519              		.cfi_def_cfa_offset 12
 6520 0132 BD46     		mov	sp, r7
 6521              		.cfi_def_cfa_register 13
 6522              		@ sp needed
 6523 0134 90BD     		pop	{r4, r7, pc}
 6524              	.L337:
 6525 0136 00BF     		.align	2
 6526              	.L336:
 6527 0138 00000000 		.word	PWM_IMU_1
 6528 013c 00004940 		.word	1078525952
 6529 0140 00003E40 		.word	1077805056
 6530 0144 00000000 		.word	PWM_IMU_2
 6531 0148 00000000 		.word	VT_ref
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 159


 6532 014c 00000000 		.word	interrupt_flag
 6533              		.cfi_endproc
 6534              	.LFE120:
 6535              		.size	vibrotactile_control, .-vibrotactile_control
 6536              		.global	__aeabi_dsub
 6537              		.global	__aeabi_dadd
 6538              		.global	__aeabi_fcmpgt
 6539              		.global	__aeabi_f2iz
 6540              		.global	__aeabi_fmul
 6541              		.section	.text.air_chambers_control,"ax",%progbits
 6542              		.align	2
 6543              		.global	air_chambers_control
 6544              		.thumb
 6545              		.thumb_func
 6546              		.type	air_chambers_control, %function
 6547              	air_chambers_control:
 6548              	.LFB121:
1479:..\src/command_processing.c **** 
1480:..\src/command_processing.c **** 
1481:..\src/command_processing.c **** //==============================================================================
1482:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1483:..\src/command_processing.c **** //==============================================================================
1484:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1485:..\src/command_processing.c **** 
1486:..\src/command_processing.c **** 
1487:..\src/command_processing.c **** void air_chambers_control() {
 6549              		.loc 1 1487 0
 6550              		.cfi_startproc
 6551              		@ args = 0, pretend = 0, frame = 16
 6552              		@ frame_needed = 1, uses_anonymous_args = 0
 6553 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 6554              		.cfi_def_cfa_offset 24
 6555              		.cfi_offset 4, -24
 6556              		.cfi_offset 5, -20
 6557              		.cfi_offset 7, -16
 6558              		.cfi_offset 8, -12
 6559              		.cfi_offset 9, -8
 6560              		.cfi_offset 14, -4
 6561 0004 84B0     		sub	sp, sp, #16
 6562              		.cfi_def_cfa_offset 40
 6563 0006 00AF     		add	r7, sp, #0
 6564              		.cfi_def_cfa_register 7
1488:..\src/command_processing.c **** 
1489:..\src/command_processing.c ****     int16 curr_diff;
1490:..\src/command_processing.c ****     int32 pressure_reference;
1491:..\src/command_processing.c ****     int32 err_pressure;
1492:..\src/command_processing.c ****     int32 valve_command;
1493:..\src/command_processing.c ****     int16 x_value;
1494:..\src/command_processing.c **** 
1495:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1496:..\src/command_processing.c ****     
1497:..\src/command_processing.c ****     curr_diff = (int16)commReadResCurrFromSH();
 6565              		.loc 1 1497 0
 6566 0008 FFF7FEFF 		bl	commReadResCurrFromSH
 6567 000c 0346     		mov	r3, r0
 6568 000e BB80     		strh	r3, [r7, #4]	@ movhi
1498:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 160


1499:..\src/command_processing.c ****     // Compute pressure reference
1500:..\src/command_processing.c **** 
1501:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 6569              		.loc 1 1501 0
 6570 0010 B7F90430 		ldrsh	r3, [r7, #4]
 6571 0014 1846     		mov	r0, r3
 6572 0016 FFF7FEFF 		bl	__aeabi_i2d
 6573 001a 4FF00002 		mov	r2, #0
 6574 001e 574B     		ldr	r3, .L348
 6575 0020 FFF7FEFF 		bl	__aeabi_dsub
 6576 0024 0346     		mov	r3, r0
 6577 0026 0C46     		mov	r4, r1
 6578 0028 1846     		mov	r0, r3
 6579 002a 2146     		mov	r1, r4
 6580 002c FFF7FEFF 		bl	__aeabi_d2iz
 6581 0030 0346     		mov	r3, r0
 6582 0032 FB80     		strh	r3, [r7, #6]	@ movhi
1502:..\src/command_processing.c ****     if (x_value < 0)
 6583              		.loc 1 1502 0
 6584 0034 B7F90630 		ldrsh	r3, [r7, #6]
 6585 0038 002B     		cmp	r3, #0
 6586 003a 01DA     		bge	.L339
1503:..\src/command_processing.c ****         x_value = 0;
 6587              		.loc 1 1503 0
 6588 003c 0023     		movs	r3, #0
 6589 003e FB80     		strh	r3, [r7, #6]	@ movhi
 6590              	.L339:
1504:..\src/command_processing.c ****     
1505:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 6591              		.loc 1 1505 0
 6592 0040 B7F90630 		ldrsh	r3, [r7, #6]
 6593 0044 1846     		mov	r0, r3
 6594 0046 FFF7FEFF 		bl	__aeabi_i2d
 6595 004a 4FF00002 		mov	r2, #0
 6596 004e 4C4B     		ldr	r3, .L348+4
 6597 0050 FFF7FEFF 		bl	__aeabi_dmul
 6598 0054 0346     		mov	r3, r0
 6599 0056 0C46     		mov	r4, r1
 6600 0058 2546     		mov	r5, r4
 6601 005a 1C46     		mov	r4, r3
 6602 005c B7F90630 		ldrsh	r3, [r7, #6]
 6603 0060 1846     		mov	r0, r3
 6604 0062 FFF7FEFF 		bl	__aeabi_i2d
 6605 0066 0246     		mov	r2, r0
 6606 0068 0B46     		mov	r3, r1
 6607 006a 2046     		mov	r0, r4
 6608 006c 2946     		mov	r1, r5
 6609 006e FFF7FEFF 		bl	__aeabi_dmul
 6610 0072 0346     		mov	r3, r0
 6611 0074 0C46     		mov	r4, r1
 6612 0076 2546     		mov	r5, r4
 6613 0078 1C46     		mov	r4, r3
 6614 007a 424B     		ldr	r3, .L348+8
 6615 007c 1B6D     		ldr	r3, [r3, #80]
 6616 007e 1846     		mov	r0, r3
 6617 0080 FFF7FEFF 		bl	__aeabi_i2d
 6618 0084 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 161


 6619 0088 3F4B     		ldr	r3, .L348+12
 6620 008a FFF7FEFF 		bl	__aeabi_dmul
 6621 008e 0246     		mov	r2, r0
 6622 0090 0B46     		mov	r3, r1
 6623 0092 9046     		mov	r8, r2
 6624 0094 9946     		mov	r9, r3
 6625 0096 B7F90630 		ldrsh	r3, [r7, #6]
 6626 009a 1846     		mov	r0, r3
 6627 009c FFF7FEFF 		bl	__aeabi_i2d
 6628 00a0 0246     		mov	r2, r0
 6629 00a2 0B46     		mov	r3, r1
 6630 00a4 4046     		mov	r0, r8
 6631 00a6 4946     		mov	r1, r9
 6632 00a8 FFF7FEFF 		bl	__aeabi_dmul
 6633 00ac 0246     		mov	r2, r0
 6634 00ae 0B46     		mov	r3, r1
 6635 00b0 2046     		mov	r0, r4
 6636 00b2 2946     		mov	r1, r5
 6637 00b4 FFF7FEFF 		bl	__aeabi_dadd
 6638 00b8 0346     		mov	r3, r0
 6639 00ba 0C46     		mov	r4, r1
 6640 00bc 1846     		mov	r0, r3
 6641 00be 2146     		mov	r1, r4
 6642 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 6643 00c4 0146     		mov	r1, r0
 6644 00c6 2F4B     		ldr	r3, .L348+8
 6645 00c8 1B6D     		ldr	r3, [r3, #80]
 6646 00ca 2E4A     		ldr	r2, .L348+8
 6647 00cc 126D     		ldr	r2, [r2, #80]
 6648 00ce 02FB03F3 		mul	r3, r2, r3
 6649 00d2 91FBF3F3 		sdiv	r3, r1, r3
 6650 00d6 FB60     		str	r3, [r7, #12]
1506:..\src/command_processing.c ****     if (pressure_reference < 0)
 6651              		.loc 1 1506 0
 6652 00d8 FB68     		ldr	r3, [r7, #12]
 6653 00da 002B     		cmp	r3, #0
 6654 00dc 01DA     		bge	.L340
1507:..\src/command_processing.c ****         pressure_reference = 0;
 6655              		.loc 1 1507 0
 6656 00de 0023     		movs	r3, #0
 6657 00e0 FB60     		str	r3, [r7, #12]
 6658              	.L340:
1508:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 6659              		.loc 1 1508 0
 6660 00e2 F868     		ldr	r0, [r7, #12]
 6661 00e4 FFF7FEFF 		bl	__aeabi_i2f
 6662 00e8 0246     		mov	r2, r0
 6663 00ea 264B     		ldr	r3, .L348+8
 6664 00ec 5B6D     		ldr	r3, [r3, #84]	@ float
 6665 00ee 1946     		mov	r1, r3
 6666 00f0 1046     		mov	r0, r2
 6667 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 6668 00f6 0346     		mov	r3, r0
 6669 00f8 002B     		cmp	r3, #0
 6670 00fa 06D0     		beq	.L341
1509:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 6671              		.loc 1 1509 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 162


 6672 00fc 214B     		ldr	r3, .L348+8
 6673 00fe 5B6D     		ldr	r3, [r3, #84]	@ float
 6674 0100 1846     		mov	r0, r3
 6675 0102 FFF7FEFF 		bl	__aeabi_f2iz
 6676 0106 0346     		mov	r3, r0
 6677 0108 FB60     		str	r3, [r7, #12]
 6678              	.L341:
1510:..\src/command_processing.c ****     
1511:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 6679              		.loc 1 1511 0
 6680 010a 204B     		ldr	r3, .L348+16
 6681 010c 1B68     		ldr	r3, [r3]
 6682 010e FA68     		ldr	r2, [r7, #12]
 6683 0110 D31A     		subs	r3, r2, r3
 6684 0112 3B60     		str	r3, [r7]
1512:..\src/command_processing.c **** 
1513:..\src/command_processing.c ****     if (x_value <= 0){
 6685              		.loc 1 1513 0
 6686 0114 B7F90630 		ldrsh	r3, [r7, #6]
 6687 0118 002B     		cmp	r3, #0
 6688 011a 02DC     		bgt	.L343
1514:..\src/command_processing.c ****         //i.e the hand is opening
1515:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 6689              		.loc 1 1515 0
 6690 011c 0023     		movs	r3, #0
 6691 011e BB60     		str	r3, [r7, #8]
 6692 0120 01E0     		b	.L344
 6693              	.L343:
1516:..\src/command_processing.c ****     }
1517:..\src/command_processing.c ****     else {
1518:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1519:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1520:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1521:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
 6694              		.loc 1 1521 0
 6695 0122 0123     		movs	r3, #1
 6696 0124 BB60     		str	r3, [r7, #8]
 6697              	.L344:
1522:..\src/command_processing.c ****     }
1523:..\src/command_processing.c ****     
1524:..\src/command_processing.c ****     // Pump control*/
1525:..\src/command_processing.c ****    
1526:..\src/command_processing.c ****     Pump_refNew = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 6698              		.loc 1 1526 0
 6699 0126 174B     		ldr	r3, .L348+8
 6700 0128 9C6D     		ldr	r4, [r3, #88]	@ float
 6701 012a 3868     		ldr	r0, [r7]
 6702 012c FFF7FEFF 		bl	__aeabi_i2f
 6703 0130 0346     		mov	r3, r0
 6704 0132 1946     		mov	r1, r3
 6705 0134 2046     		mov	r0, r4
 6706 0136 FFF7FEFF 		bl	__aeabi_fmul
 6707 013a 0346     		mov	r3, r0
 6708 013c 1846     		mov	r0, r3
 6709 013e FFF7FEFF 		bl	__aeabi_f2iz
 6710 0142 0346     		mov	r3, r0
 6711 0144 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 163


 6712 0146 124B     		ldr	r3, .L348+20
 6713 0148 1A70     		strb	r2, [r3]
1527:..\src/command_processing.c **** 
1528:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1529:..\src/command_processing.c ****     
1530:..\src/command_processing.c ****     // Limit output voltage
1531:..\src/command_processing.c ****     if (Pump_refNew > MAX_PUMP_PWM) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 6714              		.loc 1 1531 0
 6715 014a 114B     		ldr	r3, .L348+20
 6716 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6717 014e 502B     		cmp	r3, #80
 6718 0150 02D9     		bls	.L345
1532:..\src/command_processing.c ****         Pump_refNew = MAX_PUMP_PWM; // 80
 6719              		.loc 1 1532 0
 6720 0152 0F4B     		ldr	r3, .L348+20
 6721 0154 5022     		movs	r2, #80
 6722 0156 1A70     		strb	r2, [r3]
 6723              	.L345:
1533:..\src/command_processing.c ****     if (Pump_refNew < MIN_PUMP_PWM)
 6724              		.loc 1 1533 0
 6725 0158 0D4B     		ldr	r3, .L348+20
 6726 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6727 015c 132B     		cmp	r3, #19
 6728 015e 02D8     		bhi	.L346
1534:..\src/command_processing.c ****         Pump_refNew = 0;
 6729              		.loc 1 1534 0
 6730 0160 0B4B     		ldr	r3, .L348+20
 6731 0162 0022     		movs	r2, #0
 6732 0164 1A70     		strb	r2, [r3]
 6733              	.L346:
1535:..\src/command_processing.c ****         
1536:..\src/command_processing.c ****     VALVE_Write(valve_command);
 6734              		.loc 1 1536 0
 6735 0166 BB68     		ldr	r3, [r7, #8]
 6736 0168 DBB2     		uxtb	r3, r3
 6737 016a 1846     		mov	r0, r3
 6738 016c FFF7FEFF 		bl	VALVE_Write
1537:..\src/command_processing.c ****     
1538:..\src/command_processing.c ****     
1539:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1540:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1541:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1542:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1543:..\src/command_processing.c **** 
1544:..\src/command_processing.c **** }
 6739              		.loc 1 1544 0
 6740 0170 00BF     		nop
 6741 0172 1037     		adds	r7, r7, #16
 6742              		.cfi_def_cfa_offset 24
 6743 0174 BD46     		mov	sp, r7
 6744              		.cfi_def_cfa_register 13
 6745              		@ sp needed
 6746 0176 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 6747              	.L349:
 6748 017a 00BF     		.align	2
 6749              	.L348:
 6750 017c 00004940 		.word	1078525952
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 164


 6751 0180 00003EC0 		.word	-1069678592
 6752 0184 00000000 		.word	c_mem
 6753 0188 00804B40 		.word	1078689792
 6754 018c 00000000 		.word	pressure_value
 6755 0190 00000000 		.word	Pump_refNew
 6756              		.cfi_endproc
 6757              	.LFE121:
 6758              		.size	air_chambers_control, .-air_chambers_control
 6759              		.section	.text.pump_control,"ax",%progbits
 6760              		.align	2
 6761              		.global	pump_control
 6762              		.thumb
 6763              		.thumb_func
 6764              		.type	pump_control, %function
 6765              	pump_control:
 6766              	.LFB122:
1545:..\src/command_processing.c **** 
1546:..\src/command_processing.c **** void pump_control() {
 6767              		.loc 1 1546 0
 6768              		.cfi_startproc
 6769              		@ args = 0, pretend = 0, frame = 0
 6770              		@ frame_needed = 1, uses_anonymous_args = 0
 6771 0000 80B5     		push	{r7, lr}
 6772              		.cfi_def_cfa_offset 8
 6773              		.cfi_offset 7, -8
 6774              		.cfi_offset 14, -4
 6775 0002 00AF     		add	r7, sp, #0
 6776              		.cfi_def_cfa_register 7
1547:..\src/command_processing.c ****     if (Pump_ref > 100)
 6777              		.loc 1 1547 0
 6778 0004 064B     		ldr	r3, .L352
 6779 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6780 0008 642B     		cmp	r3, #100
 6781 000a 02D9     		bls	.L351
1548:..\src/command_processing.c ****         Pump_ref = 100;
 6782              		.loc 1 1548 0
 6783 000c 044B     		ldr	r3, .L352
 6784 000e 6422     		movs	r2, #100
 6785 0010 1A70     		strb	r2, [r3]
 6786              	.L351:
1549:..\src/command_processing.c ****     PWM_PUMP_WriteCompare(Pump_ref);
 6787              		.loc 1 1549 0
 6788 0012 034B     		ldr	r3, .L352
 6789 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6790 0016 1846     		mov	r0, r3
 6791 0018 FFF7FEFF 		bl	PWM_PUMP_WriteCompare
1550:..\src/command_processing.c **** }
 6792              		.loc 1 1550 0
 6793 001c 00BF     		nop
 6794 001e 80BD     		pop	{r7, pc}
 6795              	.L353:
 6796              		.align	2
 6797              	.L352:
 6798 0020 00000000 		.word	Pump_ref
 6799              		.cfi_endproc
 6800              	.LFE122:
 6801              		.size	pump_control, .-pump_control
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 165


 6802              		.section	.text.VT_control,"ax",%progbits
 6803              		.align	2
 6804              		.global	VT_control
 6805              		.thumb
 6806              		.thumb_func
 6807              		.type	VT_control, %function
 6808              	VT_control:
 6809              	.LFB123:
1551:..\src/command_processing.c **** 
1552:..\src/command_processing.c **** void VT_control() {
 6810              		.loc 1 1552 0
 6811              		.cfi_startproc
 6812              		@ args = 0, pretend = 0, frame = 0
 6813              		@ frame_needed = 1, uses_anonymous_args = 0
 6814 0000 80B5     		push	{r7, lr}
 6815              		.cfi_def_cfa_offset 8
 6816              		.cfi_offset 7, -8
 6817              		.cfi_offset 14, -4
 6818 0002 00AF     		add	r7, sp, #0
 6819              		.cfi_def_cfa_register 7
1553:..\src/command_processing.c ****     if (VT_ref[0] > 100)
 6820              		.loc 1 1553 0
 6821 0004 0D4B     		ldr	r3, .L357
 6822 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6823 0008 642B     		cmp	r3, #100
 6824 000a 02D9     		bls	.L355
1554:..\src/command_processing.c ****         VT_ref[0] = 100;
 6825              		.loc 1 1554 0
 6826 000c 0B4B     		ldr	r3, .L357
 6827 000e 6422     		movs	r2, #100
 6828 0010 1A70     		strb	r2, [r3]
 6829              	.L355:
1555:..\src/command_processing.c ****     PWM_VT_WriteCompare1(VT_ref[0]);
 6830              		.loc 1 1555 0
 6831 0012 0A4B     		ldr	r3, .L357
 6832 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6833 0016 9BB2     		uxth	r3, r3
 6834 0018 1846     		mov	r0, r3
 6835 001a FFF7FEFF 		bl	PWM_VT_WriteCompare1
1556:..\src/command_processing.c ****     if (VT_ref[1] > 100)
 6836              		.loc 1 1556 0
 6837 001e 074B     		ldr	r3, .L357
 6838 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6839 0022 642B     		cmp	r3, #100
 6840 0024 02D9     		bls	.L356
1557:..\src/command_processing.c ****         VT_ref[1] = 100;
 6841              		.loc 1 1557 0
 6842 0026 054B     		ldr	r3, .L357
 6843 0028 6422     		movs	r2, #100
 6844 002a 5A70     		strb	r2, [r3, #1]
 6845              	.L356:
1558:..\src/command_processing.c ****     PWM_VT_WriteCompare2(VT_ref[1]);
 6846              		.loc 1 1558 0
 6847 002c 034B     		ldr	r3, .L357
 6848 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6849 0030 9BB2     		uxth	r3, r3
 6850 0032 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 166


 6851 0034 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1559:..\src/command_processing.c **** }
 6852              		.loc 1 1559 0
 6853 0038 00BF     		nop
 6854 003a 80BD     		pop	{r7, pc}
 6855              	.L358:
 6856              		.align	2
 6857              	.L357:
 6858 003c 00000000 		.word	VT_ref
 6859              		.cfi_endproc
 6860              	.LFE123:
 6861              		.size	VT_control, .-VT_control
 6862              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 6863              		.align	2
 6864              		.global	emg_activation_velocity_fsm
 6865              		.thumb
 6866              		.thumb_func
 6867              		.type	emg_activation_velocity_fsm, %function
 6868              	emg_activation_velocity_fsm:
 6869              	.LFB124:
1560:..\src/command_processing.c **** //==============================================================================
1561:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1562:..\src/command_processing.c **** //==============================================================================
1563:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1564:..\src/command_processing.c **** 
1565:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 6870              		.loc 1 1565 0
 6871              		.cfi_startproc
 6872              		@ args = 0, pretend = 0, frame = 0
 6873              		@ frame_needed = 1, uses_anonymous_args = 0
 6874              		@ link register save eliminated.
 6875 0000 80B4     		push	{r7}
 6876              		.cfi_def_cfa_offset 4
 6877              		.cfi_offset 7, -4
 6878 0002 00AF     		add	r7, sp, #0
 6879              		.cfi_def_cfa_register 7
1566:..\src/command_processing.c ****     
1567:..\src/command_processing.c **** return 0;
 6880              		.loc 1 1567 0
 6881 0004 0023     		movs	r3, #0
1568:..\src/command_processing.c **** }
 6882              		.loc 1 1568 0
 6883 0006 1846     		mov	r0, r3
 6884 0008 BD46     		mov	sp, r7
 6885              		.cfi_def_cfa_register 13
 6886              		@ sp needed
 6887 000a 80BC     		pop	{r7}
 6888              		.cfi_restore 7
 6889              		.cfi_def_cfa_offset 0
 6890 000c 7047     		bx	lr
 6891              		.cfi_endproc
 6892              	.LFE124:
 6893              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 6894 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 6895              		.align	2
 6896              		.global	otbk_act_wrist_control
 6897              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 167


 6898              		.thumb_func
 6899              		.type	otbk_act_wrist_control, %function
 6900              	otbk_act_wrist_control:
 6901              	.LFB125:
1569:..\src/command_processing.c **** 
1570:..\src/command_processing.c **** //==============================================================================
1571:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1572:..\src/command_processing.c **** //==============================================================================
1573:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1574:..\src/command_processing.c **** 
1575:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 6902              		.loc 1 1575 0
 6903              		.cfi_startproc
 6904              		@ args = 0, pretend = 0, frame = 8
 6905              		@ frame_needed = 1, uses_anonymous_args = 0
 6906              		@ link register save eliminated.
 6907 0000 80B4     		push	{r7}
 6908              		.cfi_def_cfa_offset 4
 6909              		.cfi_offset 7, -4
 6910 0002 83B0     		sub	sp, sp, #12
 6911              		.cfi_def_cfa_offset 16
 6912 0004 00AF     		add	r7, sp, #0
 6913              		.cfi_def_cfa_register 7
 6914 0006 7860     		str	r0, [r7, #4]
1576:..\src/command_processing.c ****     
1577:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1578:..\src/command_processing.c ****     
1579:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1580:..\src/command_processing.c ****         
1581:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
1582:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1583:..\src/command_processing.c ****     switch (fsm_state){
1584:..\src/command_processing.c ****         case RELAX_STATE:
1585:..\src/command_processing.c ****             
1586:..\src/command_processing.c ****             // Wrist stop
1587:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1588:..\src/command_processing.c ****             
1589:..\src/command_processing.c ****             // Softhand stop
1590:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1591:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1592:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1593:..\src/command_processing.c ****             
1594:..\src/command_processing.c ****             break;
1595:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1596:..\src/command_processing.c ****                 
1597:..\src/command_processing.c ****             break;
1598:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1599:..\src/command_processing.c ****             
1600:..\src/command_processing.c ****             // Wrist movement
1601:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1602:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1603:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1604:..\src/command_processing.c ****                 }
1605:..\src/command_processing.c ****                 else {
1606:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1607:..\src/command_processing.c ****                 }
1608:..\src/command_processing.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 168


1609:..\src/command_processing.c ****             else {
1610:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1611:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1612:..\src/command_processing.c ****                 }
1613:..\src/command_processing.c ****                 else {
1614:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1615:..\src/command_processing.c ****                 }
1616:..\src/command_processing.c ****             }
1617:..\src/command_processing.c ****             
1618:..\src/command_processing.c ****             // Softhand stop
1619:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1620:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1621:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1622:..\src/command_processing.c ****             
1623:..\src/command_processing.c ****             break;
1624:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1625:..\src/command_processing.c ****             
1626:..\src/command_processing.c ****             // Wrist stop
1627:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1628:..\src/command_processing.c ****             
1629:..\src/command_processing.c ****             // SoftHand movement
1630:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1631:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1632:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1633:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1634:..\src/command_processing.c ****             
1635:..\src/command_processing.c ****             break;
1636:..\src/command_processing.c ****     }
1637:..\src/command_processing.c ****         
1638:..\src/command_processing.c ****     // Limit output voltage
1639:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1640:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1641:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1642:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1643:..\src/command_processing.c ****     
1644:..\src/command_processing.c **** #endif
1645:..\src/command_processing.c **** }
 6915              		.loc 1 1645 0
 6916 0008 00BF     		nop
 6917 000a 0C37     		adds	r7, r7, #12
 6918              		.cfi_def_cfa_offset 4
 6919 000c BD46     		mov	sp, r7
 6920              		.cfi_def_cfa_register 13
 6921              		@ sp needed
 6922 000e 80BC     		pop	{r7}
 6923              		.cfi_restore 7
 6924              		.cfi_def_cfa_offset 0
 6925 0010 7047     		bx	lr
 6926              		.cfi_endproc
 6927              	.LFE125:
 6928              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 6929 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 6930              		.align	2
 6931              		.global	drive_slave
 6932              		.thumb
 6933              		.thumb_func
 6934              		.type	drive_slave, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 169


 6935              	drive_slave:
 6936              	.LFB126:
1646:..\src/command_processing.c **** 
1647:..\src/command_processing.c **** //==============================================================================
1648:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1649:..\src/command_processing.c **** //==============================================================================
1650:..\src/command_processing.c ****  
1651:..\src/command_processing.c **** //==============================================================================
1652:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1653:..\src/command_processing.c **** //==============================================================================
1654:..\src/command_processing.c ****  
1655:..\src/command_processing.c ****  
1656:..\src/command_processing.c **** void drive_slave( uint8 slave_ID) {
 6937              		.loc 1 1656 0
 6938              		.cfi_startproc
 6939              		@ args = 0, pretend = 0, frame = 24
 6940              		@ frame_needed = 1, uses_anonymous_args = 0
 6941 0000 90B5     		push	{r4, r7, lr}
 6942              		.cfi_def_cfa_offset 12
 6943              		.cfi_offset 4, -12
 6944              		.cfi_offset 7, -8
 6945              		.cfi_offset 14, -4
 6946 0002 87B0     		sub	sp, sp, #28
 6947              		.cfi_def_cfa_offset 40
 6948 0004 00AF     		add	r7, sp, #0
 6949              		.cfi_def_cfa_register 7
 6950 0006 0346     		mov	r3, r0
 6951 0008 FB71     		strb	r3, [r7, #7]
1657:..\src/command_processing.c **** 
1658:..\src/command_processing.c ****     uint8 packet_data[6];
1659:..\src/command_processing.c ****     uint8 packet_length;
1660:..\src/command_processing.c ****     int16 aux_int16;
1661:..\src/command_processing.c **** 
1662:..\src/command_processing.c ****        
1663:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
1664:..\src/command_processing.c ****     packet_data[0] = CMD_SET_INPUTS;
 6952              		.loc 1 1664 0
 6953 000a 8223     		movs	r3, #130
 6954 000c 3B74     		strb	r3, [r7, #16]
1665:..\src/command_processing.c ****     
1666:..\src/command_processing.c ****  //aux_int16 = (int16) motor_idx;
1667:..\src/command_processing.c ****    aux_int16 = (int16) (SH_ref >> g_mem.SH_config.res);
 6955              		.loc 1 1667 0
 6956 000e 1B4B     		ldr	r3, .L363
 6957 0010 1B68     		ldr	r3, [r3]
 6958 0012 1B4A     		ldr	r2, .L363+4
 6959 0014 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 6960 0018 1341     		asrs	r3, r3, r2
 6961 001a 1BB2     		sxth	r3, r3
 6962 001c FB81     		strh	r3, [r7, #14]	@ movhi
1668:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 6963              		.loc 1 1668 0
 6964 001e 07F10E03 		add	r3, r7, #14
 6965 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6966 0024 BB74     		strb	r3, [r7, #18]
1669:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 6967              		.loc 1 1669 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 170


 6968 0026 07F10E03 		add	r3, r7, #14
 6969 002a 0133     		adds	r3, r3, #1
 6970 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6971 002e 7B74     		strb	r3, [r7, #17]
1670:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
 6972              		.loc 1 1670 0
 6973 0030 07F11003 		add	r3, r7, #16
 6974 0034 0333     		adds	r3, r3, #3
 6975 0036 0022     		movs	r2, #0
 6976 0038 1A80     		strh	r2, [r3]	@ movhi
1671:..\src/command_processing.c ****   //  packet_data[3] = (char*)0;
1672:..\src/command_processing.c ****    // packet_data[4] = (char*)0;
1673:..\src/command_processing.c ****     packet_length = 6;
 6977              		.loc 1 1673 0
 6978 003a 0623     		movs	r3, #6
 6979 003c FB75     		strb	r3, [r7, #23]
1674:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 6980              		.loc 1 1674 0
 6981 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6982 0040 5C1E     		subs	r4, r3, #1
 6983 0042 FB7D     		ldrb	r3, [r7, #23]
 6984 0044 013B     		subs	r3, r3, #1
 6985 0046 DAB2     		uxtb	r2, r3
 6986 0048 07F11003 		add	r3, r7, #16
 6987 004c 1146     		mov	r1, r2
 6988 004e 1846     		mov	r0, r3
 6989 0050 FFF7FEFF 		bl	LCRChecksum
 6990 0054 0346     		mov	r3, r0
 6991 0056 1A46     		mov	r2, r3
 6992 0058 07F11803 		add	r3, r7, #24
 6993 005c 2344     		add	r3, r3, r4
 6994 005e 03F8082C 		strb	r2, [r3, #-8]
1675:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, slave_ID);
 6995              		.loc 1 1675 0
 6996 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6997 0064 99B2     		uxth	r1, r3
 6998 0066 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6999 0068 07F11003 		add	r3, r7, #16
 7000 006c 1846     		mov	r0, r3
 7001 006e FFF7FEFF 		bl	commWriteID
1676:..\src/command_processing.c **** 
1677:..\src/command_processing.c **** }
 7002              		.loc 1 1677 0
 7003 0072 00BF     		nop
 7004 0074 1C37     		adds	r7, r7, #28
 7005              		.cfi_def_cfa_offset 12
 7006 0076 BD46     		mov	sp, r7
 7007              		.cfi_def_cfa_register 13
 7008              		@ sp needed
 7009 0078 90BD     		pop	{r4, r7, pc}
 7010              	.L364:
 7011 007a 00BF     		.align	2
 7012              	.L363:
 7013 007c 00000000 		.word	SH_ref
 7014 0080 00000000 		.word	g_mem
 7015              		.cfi_endproc
 7016              	.LFE126:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 171


 7017              		.size	drive_slave, .-drive_slave
 7018              		.section	.text.stop_master_device,"ax",%progbits
 7019              		.align	2
 7020              		.global	stop_master_device
 7021              		.thumb
 7022              		.thumb_func
 7023              		.type	stop_master_device, %function
 7024              	stop_master_device:
 7025              	.LFB127:
1678:..\src/command_processing.c **** //==============================================================================
1679:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1680:..\src/command_processing.c **** //==============================================================================
1681:..\src/command_processing.c ****  
1682:..\src/command_processing.c **** void stop_master_device() {
 7026              		.loc 1 1682 0
 7027              		.cfi_startproc
 7028              		@ args = 0, pretend = 0, frame = 0
 7029              		@ frame_needed = 1, uses_anonymous_args = 0
 7030 0000 80B5     		push	{r7, lr}
 7031              		.cfi_def_cfa_offset 8
 7032              		.cfi_offset 7, -8
 7033              		.cfi_offset 14, -4
 7034 0002 00AF     		add	r7, sp, #0
 7035              		.cfi_def_cfa_register 7
1683:..\src/command_processing.c ****     
1684:..\src/command_processing.c ****         // Stop pump and open valve
1685:..\src/command_processing.c ****         Pump_ref = 0;    
 7036              		.loc 1 1685 0
 7037 0004 074B     		ldr	r3, .L366
 7038 0006 0022     		movs	r2, #0
 7039 0008 1A70     		strb	r2, [r3]
1686:..\src/command_processing.c ****         VALVE_Write(OPEN);
 7040              		.loc 1 1686 0
 7041 000a 0020     		movs	r0, #0
 7042 000c FFF7FEFF 		bl	VALVE_Write
1687:..\src/command_processing.c ****         master_mode = 0; 
 7043              		.loc 1 1687 0
 7044 0010 054B     		ldr	r3, .L366+4
 7045 0012 0022     		movs	r2, #0
 7046 0014 1A70     		strb	r2, [r3]
1688:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 7047              		.loc 1 1688 0
 7048 0016 054B     		ldr	r3, .L366+8
 7049 0018 0022     		movs	r2, #0
 7050 001a 83F84020 		strb	r2, [r3, #64]
1689:..\src/command_processing.c **** 
1690:..\src/command_processing.c **** }
 7051              		.loc 1 1690 0
 7052 001e 00BF     		nop
 7053 0020 80BD     		pop	{r7, pc}
 7054              	.L367:
 7055 0022 00BF     		.align	2
 7056              	.L366:
 7057 0024 00000000 		.word	Pump_ref
 7058 0028 00000000 		.word	master_mode
 7059 002c 00000000 		.word	g_mem
 7060              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 172


 7061              	.LFE127:
 7062              		.size	stop_master_device, .-stop_master_device
 7063              		.section	.text.deactivate_slaves,"ax",%progbits
 7064              		.align	2
 7065              		.global	deactivate_slaves
 7066              		.thumb
 7067              		.thumb_func
 7068              		.type	deactivate_slaves, %function
 7069              	deactivate_slaves:
 7070              	.LFB128:
1691:..\src/command_processing.c **** 
1692:..\src/command_processing.c **** //==============================================================================
1693:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1694:..\src/command_processing.c **** //==============================================================================
1695:..\src/command_processing.c ****  
1696:..\src/command_processing.c **** void deactivate_slaves() {
 7071              		.loc 1 1696 0
 7072              		.cfi_startproc
 7073              		@ args = 0, pretend = 0, frame = 0
 7074              		@ frame_needed = 1, uses_anonymous_args = 0
 7075              		@ link register save eliminated.
 7076 0000 80B4     		push	{r7}
 7077              		.cfi_def_cfa_offset 4
 7078              		.cfi_offset 7, -4
 7079 0002 00AF     		add	r7, sp, #0
 7080              		.cfi_def_cfa_register 7
1697:..\src/command_processing.c ****    
1698:..\src/command_processing.c **** }
 7081              		.loc 1 1698 0
 7082 0004 00BF     		nop
 7083 0006 BD46     		mov	sp, r7
 7084              		.cfi_def_cfa_register 13
 7085              		@ sp needed
 7086 0008 80BC     		pop	{r7}
 7087              		.cfi_restore 7
 7088              		.cfi_def_cfa_offset 0
 7089 000a 7047     		bx	lr
 7090              		.cfi_endproc
 7091              	.LFE128:
 7092              		.size	deactivate_slaves, .-deactivate_slaves
 7093              		.bss
 7094              		.align	1
 7095              	i.10022:
 7096 0000 0000     		.space	2
 7097 0002 0000     		.align	2
 7098              	last_aux_int16.10092:
 7099 0004 00000000 		.space	6
 7099      0000
 7100              		.text
 7101              	.Letext0:
 7102              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7103              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 7104              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 7105              		.file 6 "..\\src\\commands.h"
 7106              		.file 7 "..\\src\\globals.h"
 7107              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 7108              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 173


 7109              	.Ldebug_info0:
 7110 0000 24180000 		.4byte	0x1824
 7111 0004 0400     		.2byte	0x4
 7112 0006 00000000 		.4byte	.Ldebug_abbrev0
 7113 000a 04       		.byte	0x4
 7114 000b 01       		.uleb128 0x1
 7115 000c 4C080000 		.4byte	.LASF304
 7116 0010 0C       		.byte	0xc
 7117 0011 DD100000 		.4byte	.LASF305
 7118 0015 50060000 		.4byte	.LASF306
 7119 0019 00000000 		.4byte	.Ldebug_ranges0+0
 7120 001d 00000000 		.4byte	0
 7121 0021 00000000 		.4byte	.Ldebug_line0
 7122 0025 02       		.uleb128 0x2
 7123 0026 01       		.byte	0x1
 7124 0027 06       		.byte	0x6
 7125 0028 6C030000 		.4byte	.LASF0
 7126 002c 02       		.uleb128 0x2
 7127 002d 01       		.byte	0x1
 7128 002e 08       		.byte	0x8
 7129 002f CB030000 		.4byte	.LASF1
 7130 0033 02       		.uleb128 0x2
 7131 0034 02       		.byte	0x2
 7132 0035 05       		.byte	0x5
 7133 0036 B70E0000 		.4byte	.LASF2
 7134 003a 02       		.uleb128 0x2
 7135 003b 02       		.byte	0x2
 7136 003c 07       		.byte	0x7
 7137 003d 46100000 		.4byte	.LASF3
 7138 0041 03       		.uleb128 0x3
 7139 0042 A9100000 		.4byte	.LASF5
 7140 0046 03       		.byte	0x3
 7141 0047 3F       		.byte	0x3f
 7142 0048 4C000000 		.4byte	0x4c
 7143 004c 02       		.uleb128 0x2
 7144 004d 04       		.byte	0x4
 7145 004e 05       		.byte	0x5
 7146 004f 61020000 		.4byte	.LASF4
 7147 0053 03       		.uleb128 0x3
 7148 0054 FF080000 		.4byte	.LASF6
 7149 0058 03       		.byte	0x3
 7150 0059 41       		.byte	0x41
 7151 005a 5E000000 		.4byte	0x5e
 7152 005e 02       		.uleb128 0x2
 7153 005f 04       		.byte	0x4
 7154 0060 07       		.byte	0x7
 7155 0061 09070000 		.4byte	.LASF7
 7156 0065 02       		.uleb128 0x2
 7157 0066 08       		.byte	0x8
 7158 0067 05       		.byte	0x5
 7159 0068 0A090000 		.4byte	.LASF8
 7160 006c 02       		.uleb128 0x2
 7161 006d 08       		.byte	0x8
 7162 006e 07       		.byte	0x7
 7163 006f 2A0C0000 		.4byte	.LASF9
 7164 0073 04       		.uleb128 0x4
 7165 0074 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 174


 7166 0075 05       		.byte	0x5
 7167 0076 696E7400 		.ascii	"int\000"
 7168 007a 02       		.uleb128 0x2
 7169 007b 04       		.byte	0x4
 7170 007c 07       		.byte	0x7
 7171 007d 100A0000 		.4byte	.LASF10
 7172 0081 03       		.uleb128 0x3
 7173 0082 6C000000 		.4byte	.LASF11
 7174 0086 04       		.byte	0x4
 7175 0087 2C       		.byte	0x2c
 7176 0088 41000000 		.4byte	0x41
 7177 008c 03       		.uleb128 0x3
 7178 008d AB0F0000 		.4byte	.LASF12
 7179 0091 04       		.byte	0x4
 7180 0092 30       		.byte	0x30
 7181 0093 53000000 		.4byte	0x53
 7182 0097 05       		.uleb128 0x5
 7183 0098 A50E0000 		.4byte	.LASF13
 7184 009c 05       		.byte	0x5
 7185 009d E401     		.2byte	0x1e4
 7186 009f 2C000000 		.4byte	0x2c
 7187 00a3 05       		.uleb128 0x5
 7188 00a4 31110000 		.4byte	.LASF14
 7189 00a8 05       		.byte	0x5
 7190 00a9 E501     		.2byte	0x1e5
 7191 00ab 3A000000 		.4byte	0x3a
 7192 00af 05       		.uleb128 0x5
 7193 00b0 8D000000 		.4byte	.LASF15
 7194 00b4 05       		.byte	0x5
 7195 00b5 E601     		.2byte	0x1e6
 7196 00b7 5E000000 		.4byte	0x5e
 7197 00bb 05       		.uleb128 0x5
 7198 00bc 7B010000 		.4byte	.LASF16
 7199 00c0 05       		.byte	0x5
 7200 00c1 E701     		.2byte	0x1e7
 7201 00c3 25000000 		.4byte	0x25
 7202 00c7 05       		.uleb128 0x5
 7203 00c8 670F0000 		.4byte	.LASF17
 7204 00cc 05       		.byte	0x5
 7205 00cd E801     		.2byte	0x1e8
 7206 00cf 33000000 		.4byte	0x33
 7207 00d3 05       		.uleb128 0x5
 7208 00d4 8F100000 		.4byte	.LASF18
 7209 00d8 05       		.byte	0x5
 7210 00d9 E901     		.2byte	0x1e9
 7211 00db 4C000000 		.4byte	0x4c
 7212 00df 02       		.uleb128 0x2
 7213 00e0 04       		.byte	0x4
 7214 00e1 04       		.byte	0x4
 7215 00e2 B0090000 		.4byte	.LASF19
 7216 00e6 02       		.uleb128 0x2
 7217 00e7 08       		.byte	0x8
 7218 00e8 04       		.byte	0x4
 7219 00e9 70090000 		.4byte	.LASF20
 7220 00ed 02       		.uleb128 0x2
 7221 00ee 01       		.byte	0x1
 7222 00ef 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 175


 7223 00f0 68040000 		.4byte	.LASF21
 7224 00f4 05       		.uleb128 0x5
 7225 00f5 E20C0000 		.4byte	.LASF22
 7226 00f9 05       		.byte	0x5
 7227 00fa 8E02     		.2byte	0x28e
 7228 00fc 00010000 		.4byte	0x100
 7229 0100 06       		.uleb128 0x6
 7230 0101 97000000 		.4byte	0x97
 7231 0105 02       		.uleb128 0x2
 7232 0106 08       		.byte	0x8
 7233 0107 04       		.byte	0x4
 7234 0108 940B0000 		.4byte	.LASF23
 7235 010c 02       		.uleb128 0x2
 7236 010d 04       		.byte	0x4
 7237 010e 07       		.byte	0x7
 7238 010f 20000000 		.4byte	.LASF24
 7239 0113 07       		.uleb128 0x7
 7240 0114 04       		.byte	0x4
 7241 0115 ED000000 		.4byte	0xed
 7242 0119 07       		.uleb128 0x7
 7243 011a 04       		.byte	0x4
 7244 011b 1F010000 		.4byte	0x11f
 7245 011f 08       		.uleb128 0x8
 7246 0120 ED000000 		.4byte	0xed
 7247 0124 09       		.uleb128 0x9
 7248 0125 12060000 		.4byte	.LASF43
 7249 0129 01       		.byte	0x1
 7250 012a 2C000000 		.4byte	0x2c
 7251 012e 06       		.byte	0x6
 7252 012f 43       		.byte	0x43
 7253 0130 A1010000 		.4byte	0x1a1
 7254 0134 0A       		.uleb128 0xa
 7255 0135 07110000 		.4byte	.LASF25
 7256 0139 01       		.byte	0x1
 7257 013a 0A       		.uleb128 0xa
 7258 013b 1B0F0000 		.4byte	.LASF26
 7259 013f 02       		.byte	0x2
 7260 0140 0A       		.uleb128 0xa
 7261 0141 2B030000 		.4byte	.LASF27
 7262 0145 03       		.byte	0x3
 7263 0146 0A       		.uleb128 0xa
 7264 0147 870F0000 		.4byte	.LASF28
 7265 014b 04       		.byte	0x4
 7266 014c 0A       		.uleb128 0xa
 7267 014d EC010000 		.4byte	.LASF29
 7268 0151 05       		.byte	0x5
 7269 0152 0A       		.uleb128 0xa
 7270 0153 A8070000 		.4byte	.LASF30
 7271 0157 06       		.byte	0x6
 7272 0158 0A       		.uleb128 0xa
 7273 0159 C10E0000 		.4byte	.LASF31
 7274 015d 07       		.byte	0x7
 7275 015e 0A       		.uleb128 0xa
 7276 015f 37040000 		.4byte	.LASF32
 7277 0163 08       		.byte	0x8
 7278 0164 0A       		.uleb128 0xa
 7279 0165 FE000000 		.4byte	.LASF33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 176


 7280 0169 09       		.byte	0x9
 7281 016a 0A       		.uleb128 0xa
 7282 016b B7040000 		.4byte	.LASF34
 7283 016f 0A       		.byte	0xa
 7284 0170 0A       		.uleb128 0xa
 7285 0171 790F0000 		.4byte	.LASF35
 7286 0175 0B       		.byte	0xb
 7287 0176 0A       		.uleb128 0xa
 7288 0177 02030000 		.4byte	.LASF36
 7289 017b 0C       		.byte	0xc
 7290 017c 0A       		.uleb128 0xa
 7291 017d 6A020000 		.4byte	.LASF37
 7292 0181 0D       		.byte	0xd
 7293 0182 0A       		.uleb128 0xa
 7294 0183 5A0A0000 		.4byte	.LASF38
 7295 0187 0E       		.byte	0xe
 7296 0188 0A       		.uleb128 0xa
 7297 0189 B8010000 		.4byte	.LASF39
 7298 018d 0F       		.byte	0xf
 7299 018e 0A       		.uleb128 0xa
 7300 018f 080B0000 		.4byte	.LASF40
 7301 0193 10       		.byte	0x10
 7302 0194 0A       		.uleb128 0xa
 7303 0195 5C030000 		.4byte	.LASF41
 7304 0199 11       		.byte	0x11
 7305 019a 0A       		.uleb128 0xa
 7306 019b 600B0000 		.4byte	.LASF42
 7307 019f 12       		.byte	0x12
 7308 01a0 00       		.byte	0
 7309 01a1 09       		.uleb128 0x9
 7310 01a2 46050000 		.4byte	.LASF44
 7311 01a6 01       		.byte	0x1
 7312 01a7 2C000000 		.4byte	0x2c
 7313 01ab 06       		.byte	0x6
 7314 01ac 5A       		.byte	0x5a
 7315 01ad 00020000 		.4byte	0x200
 7316 01b1 0A       		.uleb128 0xa
 7317 01b2 520D0000 		.4byte	.LASF45
 7318 01b6 00       		.byte	0
 7319 01b7 0A       		.uleb128 0xa
 7320 01b8 4E000000 		.4byte	.LASF46
 7321 01bc 01       		.byte	0x1
 7322 01bd 0A       		.uleb128 0xa
 7323 01be C1030000 		.4byte	.LASF47
 7324 01c2 02       		.byte	0x2
 7325 01c3 0A       		.uleb128 0xa
 7326 01c4 09000000 		.4byte	.LASF48
 7327 01c8 03       		.byte	0x3
 7328 01c9 0A       		.uleb128 0xa
 7329 01ca 800A0000 		.4byte	.LASF49
 7330 01ce 04       		.byte	0x4
 7331 01cf 0A       		.uleb128 0xa
 7332 01d0 6D0F0000 		.4byte	.LASF50
 7333 01d4 05       		.byte	0x5
 7334 01d5 0A       		.uleb128 0xa
 7335 01d6 380D0000 		.4byte	.LASF51
 7336 01da 06       		.byte	0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 177


 7337 01db 0A       		.uleb128 0xa
 7338 01dc 96040000 		.4byte	.LASF52
 7339 01e0 07       		.byte	0x7
 7340 01e1 0A       		.uleb128 0xa
 7341 01e2 480C0000 		.4byte	.LASF53
 7342 01e6 08       		.byte	0x8
 7343 01e7 0A       		.uleb128 0xa
 7344 01e8 0D080000 		.4byte	.LASF54
 7345 01ec 09       		.byte	0x9
 7346 01ed 0A       		.uleb128 0xa
 7347 01ee 50050000 		.4byte	.LASF55
 7348 01f2 0A       		.byte	0xa
 7349 01f3 0A       		.uleb128 0xa
 7350 01f4 DD0D0000 		.4byte	.LASF56
 7351 01f8 0B       		.byte	0xb
 7352 01f9 0A       		.uleb128 0xa
 7353 01fa 45060000 		.4byte	.LASF57
 7354 01fe 0C       		.byte	0xc
 7355 01ff 00       		.byte	0
 7356 0200 09       		.uleb128 0x9
 7357 0201 3E0A0000 		.4byte	.LASF58
 7358 0205 01       		.byte	0x1
 7359 0206 2C000000 		.4byte	0x2c
 7360 020a 06       		.byte	0x6
 7361 020b 69       		.byte	0x69
 7362 020c DD020000 		.4byte	0x2dd
 7363 0210 0A       		.uleb128 0xa
 7364 0211 49110000 		.4byte	.LASF59
 7365 0215 00       		.byte	0
 7366 0216 0A       		.uleb128 0xa
 7367 0217 F70E0000 		.4byte	.LASF60
 7368 021b 01       		.byte	0x1
 7369 021c 0A       		.uleb128 0xa
 7370 021d F8060000 		.4byte	.LASF61
 7371 0221 03       		.byte	0x3
 7372 0222 0A       		.uleb128 0xa
 7373 0223 1E040000 		.4byte	.LASF62
 7374 0227 04       		.byte	0x4
 7375 0228 0A       		.uleb128 0xa
 7376 0229 250D0000 		.4byte	.LASF63
 7377 022d 05       		.byte	0x5
 7378 022e 0A       		.uleb128 0xa
 7379 022f E8070000 		.4byte	.LASF64
 7380 0233 06       		.byte	0x6
 7381 0234 0A       		.uleb128 0xa
 7382 0235 1B070000 		.4byte	.LASF65
 7383 0239 09       		.byte	0x9
 7384 023a 0A       		.uleb128 0xa
 7385 023b 29000000 		.4byte	.LASF66
 7386 023f 0A       		.byte	0xa
 7387 0240 0A       		.uleb128 0xa
 7388 0241 490F0000 		.4byte	.LASF67
 7389 0245 0C       		.byte	0xc
 7390 0246 0A       		.uleb128 0xa
 7391 0247 CC0B0000 		.4byte	.LASF68
 7392 024b 0D       		.byte	0xd
 7393 024c 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 178


 7394 024d 11040000 		.4byte	.LASF69
 7395 0251 80       		.byte	0x80
 7396 0252 0A       		.uleb128 0xa
 7397 0253 57040000 		.4byte	.LASF70
 7398 0257 81       		.byte	0x81
 7399 0258 0A       		.uleb128 0xa
 7400 0259 5C050000 		.4byte	.LASF71
 7401 025d 82       		.byte	0x82
 7402 025e 0A       		.uleb128 0xa
 7403 025f D70E0000 		.4byte	.LASF72
 7404 0263 83       		.byte	0x83
 7405 0264 0A       		.uleb128 0xa
 7406 0265 530E0000 		.4byte	.LASF73
 7407 0269 84       		.byte	0x84
 7408 026a 0A       		.uleb128 0xa
 7409 026b C2020000 		.4byte	.LASF74
 7410 026f 85       		.byte	0x85
 7411 0270 0A       		.uleb128 0xa
 7412 0271 36080000 		.4byte	.LASF75
 7413 0275 86       		.byte	0x86
 7414 0276 0A       		.uleb128 0xa
 7415 0277 C3070000 		.4byte	.LASF76
 7416 027b 88       		.byte	0x88
 7417 027c 0A       		.uleb128 0xa
 7418 027d 360F0000 		.4byte	.LASF77
 7419 0281 89       		.byte	0x89
 7420 0282 0A       		.uleb128 0xa
 7421 0283 7C0C0000 		.4byte	.LASF78
 7422 0287 8B       		.byte	0x8b
 7423 0288 0A       		.uleb128 0xa
 7424 0289 4E0B0000 		.4byte	.LASF79
 7425 028d 8C       		.byte	0x8c
 7426 028e 0A       		.uleb128 0xa
 7427 028f EB080000 		.4byte	.LASF80
 7428 0293 8E       		.byte	0x8e
 7429 0294 0A       		.uleb128 0xa
 7430 0295 D9030000 		.4byte	.LASF81
 7431 0299 FB       		.byte	0xfb
 7432 029a 0A       		.uleb128 0xa
 7433 029b F5030000 		.4byte	.LASF82
 7434 029f FA       		.byte	0xfa
 7435 02a0 0A       		.uleb128 0xa
 7436 02a1 C10C0000 		.4byte	.LASF83
 7437 02a5 90       		.byte	0x90
 7438 02a6 0A       		.uleb128 0xa
 7439 02a7 FB010000 		.4byte	.LASF84
 7440 02ab 92       		.byte	0x92
 7441 02ac 0A       		.uleb128 0xa
 7442 02ad 10100000 		.4byte	.LASF85
 7443 02b1 A1       		.byte	0xa1
 7444 02b2 0A       		.uleb128 0xa
 7445 02b3 150E0000 		.4byte	.LASF86
 7446 02b7 A2       		.byte	0xa2
 7447 02b8 0A       		.uleb128 0xa
 7448 02b9 B30A0000 		.4byte	.LASF87
 7449 02bd A3       		.byte	0xa3
 7450 02be 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 179


 7451 02bf 340E0000 		.4byte	.LASF88
 7452 02c3 A4       		.byte	0xa4
 7453 02c4 0A       		.uleb128 0xa
 7454 02c5 E60E0000 		.4byte	.LASF89
 7455 02c9 A5       		.byte	0xa5
 7456 02ca 0A       		.uleb128 0xa
 7457 02cb E60D0000 		.4byte	.LASF90
 7458 02cf A6       		.byte	0xa6
 7459 02d0 0A       		.uleb128 0xa
 7460 02d1 77090000 		.4byte	.LASF91
 7461 02d5 A7       		.byte	0xa7
 7462 02d6 0A       		.uleb128 0xa
 7463 02d7 BF090000 		.4byte	.LASF92
 7464 02db A8       		.byte	0xa8
 7465 02dc 00       		.byte	0
 7466 02dd 09       		.uleb128 0x9
 7467 02de F9100000 		.4byte	.LASF93
 7468 02e2 01       		.byte	0x1
 7469 02e3 2C000000 		.4byte	0x2c
 7470 02e7 06       		.byte	0x6
 7471 02e8 BB       		.byte	0xbb
 7472 02e9 1E030000 		.4byte	0x31e
 7473 02ed 0A       		.uleb128 0xa
 7474 02ee E3050000 		.4byte	.LASF94
 7475 02f2 00       		.byte	0
 7476 02f3 0A       		.uleb128 0xa
 7477 02f4 930A0000 		.4byte	.LASF95
 7478 02f8 01       		.byte	0x1
 7479 02f9 0A       		.uleb128 0xa
 7480 02fa 0C020000 		.4byte	.LASF96
 7481 02fe 02       		.byte	0x2
 7482 02ff 0A       		.uleb128 0xa
 7483 0300 53010000 		.4byte	.LASF97
 7484 0304 03       		.byte	0x3
 7485 0305 0A       		.uleb128 0xa
 7486 0306 11010000 		.4byte	.LASF98
 7487 030a 04       		.byte	0x4
 7488 030b 0A       		.uleb128 0xa
 7489 030c 36000000 		.4byte	.LASF99
 7490 0310 05       		.byte	0x5
 7491 0311 0A       		.uleb128 0xa
 7492 0312 37070000 		.4byte	.LASF100
 7493 0316 06       		.byte	0x6
 7494 0317 0A       		.uleb128 0xa
 7495 0318 F60D0000 		.4byte	.LASF101
 7496 031c 07       		.byte	0x7
 7497 031d 00       		.byte	0
 7498 031e 09       		.uleb128 0x9
 7499 031f F20B0000 		.4byte	.LASF102
 7500 0323 01       		.byte	0x1
 7501 0324 2C000000 		.4byte	0x2c
 7502 0328 06       		.byte	0x6
 7503 0329 DE       		.byte	0xde
 7504 032a 3B030000 		.4byte	0x33b
 7505 032e 0A       		.uleb128 0xa
 7506 032f D9050000 		.4byte	.LASF103
 7507 0333 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 180


 7508 0334 0A       		.uleb128 0xa
 7509 0335 89070000 		.4byte	.LASF104
 7510 0339 01       		.byte	0x1
 7511 033a 00       		.byte	0
 7512 033b 09       		.uleb128 0x9
 7513 033c 5C0F0000 		.4byte	.LASF105
 7514 0340 01       		.byte	0x1
 7515 0341 2C000000 		.4byte	0x2c
 7516 0345 06       		.byte	0x6
 7517 0346 E6       		.byte	0xe6
 7518 0347 88030000 		.4byte	0x388
 7519 034b 0A       		.uleb128 0xa
 7520 034c 90070000 		.4byte	.LASF106
 7521 0350 00       		.byte	0
 7522 0351 0A       		.uleb128 0xa
 7523 0352 16110000 		.4byte	.LASF107
 7524 0356 01       		.byte	0x1
 7525 0357 0A       		.uleb128 0xa
 7526 0358 36090000 		.4byte	.LASF108
 7527 035c 02       		.byte	0x2
 7528 035d 0A       		.uleb128 0xa
 7529 035e 2A0B0000 		.4byte	.LASF109
 7530 0362 03       		.byte	0x3
 7531 0363 0A       		.uleb128 0xa
 7532 0364 490A0000 		.4byte	.LASF110
 7533 0368 04       		.byte	0x4
 7534 0369 0A       		.uleb128 0xa
 7535 036a 520C0000 		.4byte	.LASF111
 7536 036e 05       		.byte	0x5
 7537 036f 0A       		.uleb128 0xa
 7538 0370 A00B0000 		.4byte	.LASF112
 7539 0374 06       		.byte	0x6
 7540 0375 0A       		.uleb128 0xa
 7541 0376 FD0A0000 		.4byte	.LASF113
 7542 037a 07       		.byte	0x7
 7543 037b 0A       		.uleb128 0xa
 7544 037c 9F050000 		.4byte	.LASF114
 7545 0380 08       		.byte	0x8
 7546 0381 0A       		.uleb128 0xa
 7547 0382 EC060000 		.4byte	.LASF115
 7548 0386 09       		.byte	0x9
 7549 0387 00       		.byte	0
 7550 0388 0B       		.uleb128 0xb
 7551 0389 79000000 		.4byte	.LASF119
 7552 038d 86       		.byte	0x86
 7553 038e 07       		.byte	0x7
 7554 038f 9B       		.byte	0x9b
 7555 0390 C5030000 		.4byte	0x3c5
 7556 0394 0C       		.uleb128 0xc
 7557 0395 72050000 		.4byte	.LASF116
 7558 0399 07       		.byte	0x7
 7559 039a 9C       		.byte	0x9c
 7560 039b C5030000 		.4byte	0x3c5
 7561 039f 00       		.byte	0
 7562 03a0 0C       		.uleb128 0xc
 7563 03a1 680C0000 		.4byte	.LASF117
 7564 03a5 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 181


 7565 03a6 9D       		.byte	0x9d
 7566 03a7 C7000000 		.4byte	0xc7
 7567 03ab 80       		.byte	0x80
 7568 03ac 0D       		.uleb128 0xd
 7569 03ad 696E6400 		.ascii	"ind\000"
 7570 03b1 07       		.byte	0x7
 7571 03b2 9E       		.byte	0x9e
 7572 03b3 C7000000 		.4byte	0xc7
 7573 03b7 82       		.byte	0x82
 7574 03b8 0C       		.uleb128 0xc
 7575 03b9 DD010000 		.4byte	.LASF118
 7576 03bd 07       		.byte	0x7
 7577 03be 9F       		.byte	0x9f
 7578 03bf 97000000 		.4byte	0x97
 7579 03c3 84       		.byte	0x84
 7580 03c4 00       		.byte	0
 7581 03c5 0E       		.uleb128 0xe
 7582 03c6 97000000 		.4byte	0x97
 7583 03ca D5030000 		.4byte	0x3d5
 7584 03ce 0F       		.uleb128 0xf
 7585 03cf 0C010000 		.4byte	0x10c
 7586 03d3 7F       		.byte	0x7f
 7587 03d4 00       		.byte	0
 7588 03d5 0B       		.uleb128 0xb
 7589 03d6 12050000 		.4byte	.LASF120
 7590 03da 10       		.byte	0x10
 7591 03db 07       		.byte	0x7
 7592 03dc A9       		.byte	0xa9
 7593 03dd 05040000 		.4byte	0x405
 7594 03e1 0D       		.uleb128 0xd
 7595 03e2 696400   		.ascii	"id\000"
 7596 03e5 07       		.byte	0x7
 7597 03e6 AA       		.byte	0xaa
 7598 03e7 97000000 		.4byte	0x97
 7599 03eb 00       		.byte	0
 7600 03ec 0C       		.uleb128 0xc
 7601 03ed E60F0000 		.4byte	.LASF121
 7602 03f1 07       		.byte	0x7
 7603 03f2 AB       		.byte	0xab
 7604 03f3 97000000 		.4byte	0x97
 7605 03f7 01       		.byte	0x1
 7606 03f8 0C       		.uleb128 0xc
 7607 03f9 95020000 		.4byte	.LASF122
 7608 03fd 07       		.byte	0x7
 7609 03fe AC       		.byte	0xac
 7610 03ff 05040000 		.4byte	0x405
 7611 0403 02       		.byte	0x2
 7612 0404 00       		.byte	0
 7613 0405 0E       		.uleb128 0xe
 7614 0406 97000000 		.4byte	0x97
 7615 040a 15040000 		.4byte	0x415
 7616 040e 0F       		.uleb128 0xf
 7617 040f 0C010000 		.4byte	0x10c
 7618 0413 0D       		.byte	0xd
 7619 0414 00       		.byte	0
 7620 0415 0B       		.uleb128 0xb
 7621 0416 18090000 		.4byte	.LASF123
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 182


 7622 041a 10       		.byte	0x10
 7623 041b 07       		.byte	0x7
 7624 041c B3       		.byte	0xb3
 7625 041d 5E040000 		.4byte	0x45e
 7626 0421 0C       		.uleb128 0xc
 7627 0422 D9000000 		.4byte	.LASF124
 7628 0426 07       		.byte	0x7
 7629 0427 B5       		.byte	0xb5
 7630 0428 D3000000 		.4byte	0xd3
 7631 042c 00       		.byte	0
 7632 042d 0C       		.uleb128 0xc
 7633 042e D9040000 		.4byte	.LASF125
 7634 0432 07       		.byte	0x7
 7635 0433 B6       		.byte	0xb6
 7636 0434 D3000000 		.4byte	0xd3
 7637 0438 04       		.byte	0x4
 7638 0439 0C       		.uleb128 0xc
 7639 043a B8070000 		.4byte	.LASF126
 7640 043e 07       		.byte	0x7
 7641 043f B7       		.byte	0xb7
 7642 0440 97000000 		.4byte	0x97
 7643 0444 08       		.byte	0x8
 7644 0445 0D       		.uleb128 0xd
 7645 0446 72657300 		.ascii	"res\000"
 7646 044a 07       		.byte	0x7
 7647 044b B8       		.byte	0xb8
 7648 044c 97000000 		.4byte	0x97
 7649 0450 09       		.byte	0x9
 7650 0451 0C       		.uleb128 0xc
 7651 0452 95020000 		.4byte	.LASF122
 7652 0456 07       		.byte	0x7
 7653 0457 B9       		.byte	0xb9
 7654 0458 5E040000 		.4byte	0x45e
 7655 045c 0A       		.byte	0xa
 7656 045d 00       		.byte	0
 7657 045e 0E       		.uleb128 0xe
 7658 045f 97000000 		.4byte	0x97
 7659 0463 6E040000 		.4byte	0x46e
 7660 0467 0F       		.uleb128 0xf
 7661 0468 0C010000 		.4byte	0x10c
 7662 046c 05       		.byte	0x5
 7663 046d 00       		.byte	0
 7664 046e 0B       		.uleb128 0xb
 7665 046f B1010000 		.4byte	.LASF127
 7666 0473 10       		.byte	0x10
 7667 0474 07       		.byte	0x7
 7668 0475 C1       		.byte	0xc1
 7669 0476 B7040000 		.4byte	0x4b7
 7670 047a 0C       		.uleb128 0xc
 7671 047b 400B0000 		.4byte	.LASF128
 7672 047f 07       		.byte	0x7
 7673 0480 C2       		.byte	0xc2
 7674 0481 B7040000 		.4byte	0x4b7
 7675 0485 00       		.byte	0
 7676 0486 0C       		.uleb128 0xc
 7677 0487 BD100000 		.4byte	.LASF129
 7678 048b 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 183


 7679 048c C3       		.byte	0xc3
 7680 048d C7040000 		.4byte	0x4c7
 7681 0491 04       		.byte	0x4
 7682 0492 0C       		.uleb128 0xc
 7683 0493 FC040000 		.4byte	.LASF130
 7684 0497 07       		.byte	0x7
 7685 0498 C4       		.byte	0xc4
 7686 0499 D7040000 		.4byte	0x4d7
 7687 049d 0C       		.byte	0xc
 7688 049e 0C       		.uleb128 0xc
 7689 049f 9D030000 		.4byte	.LASF131
 7690 04a3 07       		.byte	0x7
 7691 04a4 C5       		.byte	0xc5
 7692 04a5 97000000 		.4byte	0x97
 7693 04a9 0E       		.byte	0xe
 7694 04aa 0C       		.uleb128 0xc
 7695 04ab 95020000 		.4byte	.LASF122
 7696 04af 07       		.byte	0x7
 7697 04b0 C6       		.byte	0xc6
 7698 04b1 E7040000 		.4byte	0x4e7
 7699 04b5 0F       		.byte	0xf
 7700 04b6 00       		.byte	0
 7701 04b7 0E       		.uleb128 0xe
 7702 04b8 A3000000 		.4byte	0xa3
 7703 04bc C7040000 		.4byte	0x4c7
 7704 04c0 0F       		.uleb128 0xf
 7705 04c1 0C010000 		.4byte	0x10c
 7706 04c5 01       		.byte	0x1
 7707 04c6 00       		.byte	0
 7708 04c7 0E       		.uleb128 0xe
 7709 04c8 AF000000 		.4byte	0xaf
 7710 04cc D7040000 		.4byte	0x4d7
 7711 04d0 0F       		.uleb128 0xf
 7712 04d1 0C010000 		.4byte	0x10c
 7713 04d5 01       		.byte	0x1
 7714 04d6 00       		.byte	0
 7715 04d7 0E       		.uleb128 0xe
 7716 04d8 97000000 		.4byte	0x97
 7717 04dc E7040000 		.4byte	0x4e7
 7718 04e0 0F       		.uleb128 0xf
 7719 04e1 0C010000 		.4byte	0x10c
 7720 04e5 01       		.byte	0x1
 7721 04e6 00       		.byte	0
 7722 04e7 0E       		.uleb128 0xe
 7723 04e8 97000000 		.4byte	0x97
 7724 04ec F7040000 		.4byte	0x4f7
 7725 04f0 0F       		.uleb128 0xf
 7726 04f1 0C010000 		.4byte	0x10c
 7727 04f5 00       		.byte	0
 7728 04f6 00       		.byte	0
 7729 04f7 0B       		.uleb128 0xb
 7730 04f8 3A010000 		.4byte	.LASF132
 7731 04fc 10       		.byte	0x10
 7732 04fd 07       		.byte	0x7
 7733 04fe CD       		.byte	0xcd
 7734 04ff 28050000 		.4byte	0x528
 7735 0503 0C       		.uleb128 0xc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 184


 7736 0504 78030000 		.4byte	.LASF133
 7737 0508 07       		.byte	0x7
 7738 0509 CE       		.byte	0xce
 7739 050a 97000000 		.4byte	0x97
 7740 050e 00       		.byte	0
 7741 050f 0C       		.uleb128 0xc
 7742 0510 80070000 		.4byte	.LASF134
 7743 0514 07       		.byte	0x7
 7744 0515 CF       		.byte	0xcf
 7745 0516 97000000 		.4byte	0x97
 7746 051a 01       		.byte	0x1
 7747 051b 0C       		.uleb128 0xc
 7748 051c 95020000 		.4byte	.LASF122
 7749 0520 07       		.byte	0x7
 7750 0521 D0       		.byte	0xd0
 7751 0522 05040000 		.4byte	0x405
 7752 0526 02       		.byte	0x2
 7753 0527 00       		.byte	0
 7754 0528 0B       		.uleb128 0xb
 7755 0529 AC0B0000 		.4byte	.LASF135
 7756 052d 10       		.byte	0x10
 7757 052e 07       		.byte	0x7
 7758 052f D7       		.byte	0xd7
 7759 0530 7D050000 		.4byte	0x57d
 7760 0534 0C       		.uleb128 0xc
 7761 0535 6A100000 		.4byte	.LASF136
 7762 0539 07       		.byte	0x7
 7763 053a D8       		.byte	0xd8
 7764 053b D3000000 		.4byte	0xd3
 7765 053f 00       		.byte	0
 7766 0540 0C       		.uleb128 0xc
 7767 0541 FD050000 		.4byte	.LASF137
 7768 0545 07       		.byte	0x7
 7769 0546 D9       		.byte	0xd9
 7770 0547 DF000000 		.4byte	0xdf
 7771 054b 04       		.byte	0x4
 7772 054c 0C       		.uleb128 0xc
 7773 054d E70C0000 		.4byte	.LASF138
 7774 0551 07       		.byte	0x7
 7775 0552 DA       		.byte	0xda
 7776 0553 DF000000 		.4byte	0xdf
 7777 0557 08       		.byte	0x8
 7778 0558 0C       		.uleb128 0xc
 7779 0559 19080000 		.4byte	.LASF139
 7780 055d 07       		.byte	0x7
 7781 055e DB       		.byte	0xdb
 7782 055f 97000000 		.4byte	0x97
 7783 0563 0C       		.byte	0xc
 7784 0564 0C       		.uleb128 0xc
 7785 0565 680E0000 		.4byte	.LASF140
 7786 0569 07       		.byte	0x7
 7787 056a DC       		.byte	0xdc
 7788 056b 97000000 		.4byte	0x97
 7789 056f 0D       		.byte	0xd
 7790 0570 0C       		.uleb128 0xc
 7791 0571 95020000 		.4byte	.LASF122
 7792 0575 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 185


 7793 0576 DD       		.byte	0xdd
 7794 0577 D7040000 		.4byte	0x4d7
 7795 057b 0E       		.byte	0xe
 7796 057c 00       		.byte	0
 7797 057d 0B       		.uleb128 0xb
 7798 057e 7F100000 		.4byte	.LASF141
 7799 0582 60       		.byte	0x60
 7800 0583 07       		.byte	0x7
 7801 0584 E7       		.byte	0xe7
 7802 0585 DC050000 		.4byte	0x5dc
 7803 0589 0C       		.uleb128 0xc
 7804 058a 550A0000 		.4byte	.LASF142
 7805 058e 07       		.byte	0x7
 7806 058f E8       		.byte	0xe8
 7807 0590 97000000 		.4byte	0x97
 7808 0594 00       		.byte	0
 7809 0595 0C       		.uleb128 0xc
 7810 0596 95020000 		.4byte	.LASF122
 7811 059a 07       		.byte	0x7
 7812 059b E9       		.byte	0xe9
 7813 059c DC050000 		.4byte	0x5dc
 7814 05a0 01       		.byte	0x1
 7815 05a1 0D       		.uleb128 0xd
 7816 05a2 64657600 		.ascii	"dev\000"
 7817 05a6 07       		.byte	0x7
 7818 05a7 EA       		.byte	0xea
 7819 05a8 D5030000 		.4byte	0x3d5
 7820 05ac 10       		.byte	0x10
 7821 05ad 0C       		.uleb128 0xc
 7822 05ae 41090000 		.4byte	.LASF143
 7823 05b2 07       		.byte	0x7
 7824 05b3 EB       		.byte	0xeb
 7825 05b4 15040000 		.4byte	0x415
 7826 05b8 20       		.byte	0x20
 7827 05b9 0D       		.uleb128 0xd
 7828 05ba 656D6700 		.ascii	"emg\000"
 7829 05be 07       		.byte	0x7
 7830 05bf EC       		.byte	0xec
 7831 05c0 6E040000 		.4byte	0x46e
 7832 05c4 30       		.byte	0x30
 7833 05c5 0D       		.uleb128 0xd
 7834 05c6 4D5300   		.ascii	"MS\000"
 7835 05c9 07       		.byte	0x7
 7836 05ca ED       		.byte	0xed
 7837 05cb F7040000 		.4byte	0x4f7
 7838 05cf 40       		.byte	0x40
 7839 05d0 0D       		.uleb128 0xd
 7840 05d1 464200   		.ascii	"FB\000"
 7841 05d4 07       		.byte	0x7
 7842 05d5 EE       		.byte	0xee
 7843 05d6 28050000 		.4byte	0x528
 7844 05da 50       		.byte	0x50
 7845 05db 00       		.byte	0
 7846 05dc 0E       		.uleb128 0xe
 7847 05dd 97000000 		.4byte	0x97
 7848 05e1 EC050000 		.4byte	0x5ec
 7849 05e5 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 186


 7850 05e6 0C010000 		.4byte	0x10c
 7851 05ea 0E       		.byte	0xe
 7852 05eb 00       		.byte	0
 7853 05ec 10       		.uleb128 0x10
 7854 05ed 30020000 		.4byte	.LASF144
 7855 05f1 2C       		.byte	0x2c
 7856 05f2 07       		.byte	0x7
 7857 05f3 3901     		.2byte	0x139
 7858 05f5 21060000 		.4byte	0x621
 7859 05f9 11       		.uleb128 0x11
 7860 05fa 4E0E0000 		.4byte	.LASF145
 7861 05fe 07       		.byte	0x7
 7862 05ff 3A01     		.2byte	0x13a
 7863 0601 97000000 		.4byte	0x97
 7864 0605 00       		.byte	0
 7865 0606 11       		.uleb128 0x11
 7866 0607 480E0000 		.4byte	.LASF146
 7867 060b 07       		.byte	0x7
 7868 060c 3B01     		.2byte	0x13b
 7869 060e 97000000 		.4byte	0x97
 7870 0612 01       		.byte	0x1
 7871 0613 11       		.uleb128 0x11
 7872 0614 EA000000 		.4byte	.LASF147
 7873 0618 07       		.byte	0x7
 7874 0619 3C01     		.2byte	0x13c
 7875 061b 21060000 		.4byte	0x621
 7876 061f 04       		.byte	0x4
 7877 0620 00       		.byte	0
 7878 0621 0E       		.uleb128 0xe
 7879 0622 19010000 		.4byte	0x119
 7880 0626 31060000 		.4byte	0x631
 7881 062a 0F       		.uleb128 0xf
 7882 062b 0C010000 		.4byte	0x10c
 7883 062f 09       		.byte	0x9
 7884 0630 00       		.byte	0
 7885 0631 10       		.uleb128 0x10
 7886 0632 9F040000 		.4byte	.LASF148
 7887 0636 10       		.byte	0x10
 7888 0637 07       		.byte	0x7
 7889 0638 3F01     		.2byte	0x13f
 7890 063a A7060000 		.4byte	0x6a7
 7891 063e 11       		.uleb128 0x11
 7892 063f B70D0000 		.4byte	.LASF149
 7893 0643 07       		.byte	0x7
 7894 0644 4001     		.2byte	0x140
 7895 0646 A7060000 		.4byte	0x6a7
 7896 064a 00       		.byte	0
 7897 064b 11       		.uleb128 0x11
 7898 064c 89100000 		.4byte	.LASF150
 7899 0650 07       		.byte	0x7
 7900 0651 4101     		.2byte	0x141
 7901 0653 97000000 		.4byte	0x97
 7902 0657 04       		.byte	0x4
 7903 0658 11       		.uleb128 0x11
 7904 0659 A2020000 		.4byte	.LASF151
 7905 065d 07       		.byte	0x7
 7906 065e 4201     		.2byte	0x142
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 187


 7907 0660 97000000 		.4byte	0x97
 7908 0664 05       		.byte	0x5
 7909 0665 11       		.uleb128 0x11
 7910 0666 49010000 		.4byte	.LASF152
 7911 066a 07       		.byte	0x7
 7912 066b 4301     		.2byte	0x143
 7913 066d 19010000 		.4byte	0x119
 7914 0671 08       		.byte	0x8
 7915 0672 11       		.uleb128 0x11
 7916 0673 08080000 		.4byte	.LASF153
 7917 0677 07       		.byte	0x7
 7918 0678 4401     		.2byte	0x144
 7919 067a 97000000 		.4byte	0x97
 7920 067e 0C       		.byte	0xc
 7921 067f 11       		.uleb128 0x11
 7922 0680 C80A0000 		.4byte	.LASF154
 7923 0684 07       		.byte	0x7
 7924 0685 4501     		.2byte	0x145
 7925 0687 97000000 		.4byte	0x97
 7926 068b 0D       		.byte	0xd
 7927 068c 11       		.uleb128 0x11
 7928 068d 410C0000 		.4byte	.LASF155
 7929 0691 07       		.byte	0x7
 7930 0692 4601     		.2byte	0x146
 7931 0694 97000000 		.4byte	0x97
 7932 0698 0E       		.byte	0xe
 7933 0699 11       		.uleb128 0x11
 7934 069a E3070000 		.4byte	.LASF156
 7935 069e 07       		.byte	0x7
 7936 069f 4701     		.2byte	0x147
 7937 06a1 97000000 		.4byte	0x97
 7938 06a5 0F       		.byte	0xf
 7939 06a6 00       		.byte	0
 7940 06a7 07       		.uleb128 0x7
 7941 06a8 04       		.byte	0x4
 7942 06a9 97000000 		.4byte	0x97
 7943 06ad 10       		.uleb128 0x10
 7944 06ae EC090000 		.4byte	.LASF157
 7945 06b2 0C       		.byte	0xc
 7946 06b3 07       		.byte	0x7
 7947 06b4 5C01     		.2byte	0x15c
 7948 06b6 D5060000 		.4byte	0x6d5
 7949 06ba 12       		.uleb128 0x12
 7950 06bb 656D6700 		.ascii	"emg\000"
 7951 06bf 07       		.byte	0x7
 7952 06c0 5D01     		.2byte	0x15d
 7953 06c2 D5060000 		.4byte	0x6d5
 7954 06c6 00       		.byte	0
 7955 06c7 11       		.uleb128 0x11
 7956 06c8 4E040000 		.4byte	.LASF158
 7957 06cc 07       		.byte	0x7
 7958 06cd 5E01     		.2byte	0x15e
 7959 06cf DF000000 		.4byte	0xdf
 7960 06d3 08       		.byte	0x8
 7961 06d4 00       		.byte	0
 7962 06d5 0E       		.uleb128 0xe
 7963 06d6 D3000000 		.4byte	0xd3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 188


 7964 06da E5060000 		.4byte	0x6e5
 7965 06de 0F       		.uleb128 0xf
 7966 06df 0C010000 		.4byte	0x10c
 7967 06e3 01       		.byte	0x1
 7968 06e4 00       		.byte	0
 7969 06e5 13       		.uleb128 0x13
 7970 06e6 AF0D0000 		.4byte	.LASF307
 7971 06ea 02       		.byte	0x2
 7972 06eb 1403     		.2byte	0x314
 7973 06ed 8C000000 		.4byte	0x8c
 7974 06f1 03       		.byte	0x3
 7975 06f2 0F070000 		.4byte	0x70f
 7976 06f6 14       		.uleb128 0x14
 7977 06f7 48040000 		.4byte	.LASF218
 7978 06fb 02       		.byte	0x2
 7979 06fc 1403     		.2byte	0x314
 7980 06fe 8C000000 		.4byte	0x8c
 7981 0702 15       		.uleb128 0x15
 7982 0703 D6010000 		.4byte	.LASF308
 7983 0707 02       		.byte	0x2
 7984 0708 1603     		.2byte	0x316
 7985 070a 8C000000 		.4byte	0x8c
 7986 070e 00       		.byte	0
 7987 070f 16       		.uleb128 0x16
 7988 0710 AB0E0000 		.4byte	.LASF159
 7989 0714 01       		.byte	0x1
 7990 0715 3D       		.byte	0x3d
 7991 0716 00000000 		.4byte	.LFB64
 7992 071a BC050000 		.4byte	.LFE64-.LFB64
 7993 071e 01       		.uleb128 0x1
 7994 071f 9C       		.byte	0x9c
 7995 0720 17080000 		.4byte	0x817
 7996 0724 17       		.uleb128 0x17
 7997 0725 98050000 		.4byte	.LASF161
 7998 0729 01       		.byte	0x1
 7999 072a 3F       		.byte	0x3f
 8000 072b 97000000 		.4byte	0x97
 8001 072f 02       		.uleb128 0x2
 8002 0730 91       		.byte	0x91
 8003 0731 77       		.sleb128 -9
 8004 0732 18       		.uleb128 0x18
 8005 0733 E5060000 		.4byte	0x6e5
 8006 0737 9A040000 		.4byte	.LBB12
 8007 073b 08000000 		.4byte	.LBE12-.LBB12
 8008 073f 01       		.byte	0x1
 8009 0740 A2       		.byte	0xa2
 8010 0741 60070000 		.4byte	0x760
 8011 0745 19       		.uleb128 0x19
 8012 0746 F6060000 		.4byte	0x6f6
 8013 074a 02       		.uleb128 0x2
 8014 074b 91       		.byte	0x91
 8015 074c 60       		.sleb128 -32
 8016 074d 1A       		.uleb128 0x1a
 8017 074e 9A040000 		.4byte	.LBB13
 8018 0752 08000000 		.4byte	.LBE13-.LBB13
 8019 0756 1B       		.uleb128 0x1b
 8020 0757 02070000 		.4byte	0x702
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 189


 8021 075b 02       		.uleb128 0x2
 8022 075c 91       		.byte	0x91
 8023 075d 5C       		.sleb128 -36
 8024 075e 00       		.byte	0
 8025 075f 00       		.byte	0
 8026 0760 18       		.uleb128 0x18
 8027 0761 E5060000 		.4byte	0x6e5
 8028 0765 B8040000 		.4byte	.LBB14
 8029 0769 08000000 		.4byte	.LBE14-.LBB14
 8030 076d 01       		.byte	0x1
 8031 076e AE       		.byte	0xae
 8032 076f 8E070000 		.4byte	0x78e
 8033 0773 19       		.uleb128 0x19
 8034 0774 F6060000 		.4byte	0x6f6
 8035 0778 02       		.uleb128 0x2
 8036 0779 91       		.byte	0x91
 8037 077a 70       		.sleb128 -16
 8038 077b 1A       		.uleb128 0x1a
 8039 077c B8040000 		.4byte	.LBB15
 8040 0780 08000000 		.4byte	.LBE15-.LBB15
 8041 0784 1B       		.uleb128 0x1b
 8042 0785 02070000 		.4byte	0x702
 8043 0789 02       		.uleb128 0x2
 8044 078a 91       		.byte	0x91
 8045 078b 58       		.sleb128 -40
 8046 078c 00       		.byte	0
 8047 078d 00       		.byte	0
 8048 078e 18       		.uleb128 0x18
 8049 078f E5060000 		.4byte	0x6e5
 8050 0793 56050000 		.4byte	.LBB16
 8051 0797 08000000 		.4byte	.LBE16-.LBB16
 8052 079b 01       		.byte	0x1
 8053 079c F1       		.byte	0xf1
 8054 079d BC070000 		.4byte	0x7bc
 8055 07a1 19       		.uleb128 0x19
 8056 07a2 F6060000 		.4byte	0x6f6
 8057 07a6 02       		.uleb128 0x2
 8058 07a7 91       		.byte	0x91
 8059 07a8 6C       		.sleb128 -20
 8060 07a9 1A       		.uleb128 0x1a
 8061 07aa 56050000 		.4byte	.LBB17
 8062 07ae 08000000 		.4byte	.LBE17-.LBB17
 8063 07b2 1B       		.uleb128 0x1b
 8064 07b3 02070000 		.4byte	0x702
 8065 07b7 02       		.uleb128 0x2
 8066 07b8 91       		.byte	0x91
 8067 07b9 54       		.sleb128 -44
 8068 07ba 00       		.byte	0
 8069 07bb 00       		.byte	0
 8070 07bc 1C       		.uleb128 0x1c
 8071 07bd E5060000 		.4byte	0x6e5
 8072 07c1 86050000 		.4byte	.LBB18
 8073 07c5 08000000 		.4byte	.LBE18-.LBB18
 8074 07c9 01       		.byte	0x1
 8075 07ca 0F01     		.2byte	0x10f
 8076 07cc EB070000 		.4byte	0x7eb
 8077 07d0 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 190


 8078 07d1 F6060000 		.4byte	0x6f6
 8079 07d5 02       		.uleb128 0x2
 8080 07d6 91       		.byte	0x91
 8081 07d7 68       		.sleb128 -24
 8082 07d8 1A       		.uleb128 0x1a
 8083 07d9 86050000 		.4byte	.LBB19
 8084 07dd 08000000 		.4byte	.LBE19-.LBB19
 8085 07e1 1B       		.uleb128 0x1b
 8086 07e2 02070000 		.4byte	0x702
 8087 07e6 02       		.uleb128 0x2
 8088 07e7 91       		.byte	0x91
 8089 07e8 50       		.sleb128 -48
 8090 07e9 00       		.byte	0
 8091 07ea 00       		.byte	0
 8092 07eb 1D       		.uleb128 0x1d
 8093 07ec E5060000 		.4byte	0x6e5
 8094 07f0 9E050000 		.4byte	.LBB20
 8095 07f4 08000000 		.4byte	.LBE20-.LBB20
 8096 07f8 01       		.byte	0x1
 8097 07f9 1501     		.2byte	0x115
 8098 07fb 19       		.uleb128 0x19
 8099 07fc F6060000 		.4byte	0x6f6
 8100 0800 02       		.uleb128 0x2
 8101 0801 91       		.byte	0x91
 8102 0802 64       		.sleb128 -28
 8103 0803 1A       		.uleb128 0x1a
 8104 0804 9E050000 		.4byte	.LBB21
 8105 0808 08000000 		.4byte	.LBE21-.LBB21
 8106 080c 1B       		.uleb128 0x1b
 8107 080d 02070000 		.4byte	0x702
 8108 0811 02       		.uleb128 0x2
 8109 0812 91       		.byte	0x91
 8110 0813 4C       		.sleb128 -52
 8111 0814 00       		.byte	0
 8112 0815 00       		.byte	0
 8113 0816 00       		.byte	0
 8114 0817 1E       		.uleb128 0x1e
 8115 0818 00000000 		.4byte	.LASF160
 8116 081c 01       		.byte	0x1
 8117 081d 2301     		.2byte	0x123
 8118 081f 00000000 		.4byte	.LFB65
 8119 0823 22000000 		.4byte	.LFE65-.LFB65
 8120 0827 01       		.uleb128 0x1
 8121 0828 9C       		.byte	0x9c
 8122 0829 3E080000 		.4byte	0x83e
 8123 082d 1F       		.uleb128 0x1f
 8124 082e A9040000 		.4byte	.LASF162
 8125 0832 01       		.byte	0x1
 8126 0833 2401     		.2byte	0x124
 8127 0835 3E080000 		.4byte	0x83e
 8128 0839 03       		.uleb128 0x3
 8129 083a 91       		.byte	0x91
 8130 083b 9C74     		.sleb128 -1508
 8131 083d 00       		.byte	0
 8132 083e 0E       		.uleb128 0xe
 8133 083f ED000000 		.4byte	0xed
 8134 0843 4F080000 		.4byte	0x84f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 191


 8135 0847 20       		.uleb128 0x20
 8136 0848 0C010000 		.4byte	0x10c
 8137 084c DB05     		.2byte	0x5db
 8138 084e 00       		.byte	0
 8139 084f 21       		.uleb128 0x21
 8140 0850 2A070000 		.4byte	.LASF212
 8141 0854 01       		.byte	0x1
 8142 0855 2D01     		.2byte	0x12d
 8143 0857 97000000 		.4byte	0x97
 8144 085b 00000000 		.4byte	.LFB66
 8145 085f 5E000000 		.4byte	.LFE66-.LFB66
 8146 0863 01       		.uleb128 0x1
 8147 0864 9C       		.byte	0x9c
 8148 0865 88080000 		.4byte	0x888
 8149 0869 22       		.uleb128 0x22
 8150 086a E5000000 		.4byte	.LASF164
 8151 086e 01       		.byte	0x1
 8152 086f 2D01     		.2byte	0x12d
 8153 0871 97000000 		.4byte	0x97
 8154 0875 02       		.uleb128 0x2
 8155 0876 91       		.byte	0x91
 8156 0877 6F       		.sleb128 -17
 8157 0878 23       		.uleb128 0x23
 8158 0879 736F6400 		.ascii	"sod\000"
 8159 087d 01       		.byte	0x1
 8160 087e 2E01     		.2byte	0x12e
 8161 0880 97000000 		.4byte	0x97
 8162 0884 02       		.uleb128 0x2
 8163 0885 91       		.byte	0x91
 8164 0886 77       		.sleb128 -9
 8165 0887 00       		.byte	0
 8166 0888 1E       		.uleb128 0x1e
 8167 0889 95100000 		.4byte	.LASF163
 8168 088d 01       		.byte	0x1
 8169 088e 3E01     		.2byte	0x13e
 8170 0890 00000000 		.4byte	.LFB67
 8171 0894 64010000 		.4byte	.LFE67-.LFB67
 8172 0898 01       		.uleb128 0x1
 8173 0899 9C       		.byte	0x9c
 8174 089a D1080000 		.4byte	0x8d1
 8175 089e 22       		.uleb128 0x22
 8176 089f D30D0000 		.4byte	.LASF165
 8177 08a3 01       		.byte	0x1
 8178 08a4 3E01     		.2byte	0x13e
 8179 08a6 A3000000 		.4byte	0xa3
 8180 08aa 04       		.uleb128 0x4
 8181 08ab 91       		.byte	0x91
 8182 08ac B6C47E   		.sleb128 -24010
 8183 08af 1F       		.uleb128 0x1f
 8184 08b0 A9040000 		.4byte	.LASF162
 8185 08b4 01       		.byte	0x1
 8186 08b5 3F01     		.2byte	0x13f
 8187 08b7 D1080000 		.4byte	0x8d1
 8188 08bb 03       		.uleb128 0x3
 8189 08bc 91       		.byte	0x91
 8190 08bd D860     		.sleb128 -4008
 8191 08bf 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 192


 8192 08c0 74070000 		.4byte	.LASF166
 8193 08c4 01       		.byte	0x1
 8194 08c5 4001     		.2byte	0x140
 8195 08c7 E2080000 		.4byte	0x8e2
 8196 08cb 04       		.uleb128 0x4
 8197 08cc 91       		.byte	0x91
 8198 08cd B8C47E   		.sleb128 -24008
 8199 08d0 00       		.byte	0
 8200 08d1 0E       		.uleb128 0xe
 8201 08d2 ED000000 		.4byte	0xed
 8202 08d6 E2080000 		.4byte	0x8e2
 8203 08da 20       		.uleb128 0x20
 8204 08db 0C010000 		.4byte	0x10c
 8205 08df 9F0F     		.2byte	0xf9f
 8206 08e1 00       		.byte	0
 8207 08e2 0E       		.uleb128 0xe
 8208 08e3 ED000000 		.4byte	0xed
 8209 08e7 F3080000 		.4byte	0x8f3
 8210 08eb 20       		.uleb128 0x20
 8211 08ec 0C010000 		.4byte	0x10c
 8212 08f0 1F4E     		.2byte	0x4e1f
 8213 08f2 00       		.byte	0
 8214 08f3 1E       		.uleb128 0x1e
 8215 08f4 80010000 		.4byte	.LASF167
 8216 08f8 01       		.byte	0x1
 8217 08f9 7001     		.2byte	0x170
 8218 08fb 00000000 		.4byte	.LFB68
 8219 08ff BC070000 		.4byte	.LFE68-.LFB68
 8220 0903 01       		.uleb128 0x1
 8221 0904 9C       		.byte	0x9c
 8222 0905 430A0000 		.4byte	0xa43
 8223 0909 22       		.uleb128 0x22
 8224 090a 1F0C0000 		.4byte	.LASF168
 8225 090e 01       		.byte	0x1
 8226 090f 7001     		.2byte	0x170
 8227 0911 97000000 		.4byte	0x97
 8228 0915 03       		.uleb128 0x3
 8229 0916 91       		.byte	0x91
 8230 0917 8F7B     		.sleb128 -625
 8231 0919 22       		.uleb128 0x22
 8232 091a 480D0000 		.4byte	.LASF169
 8233 091e 01       		.byte	0x1
 8234 091f 7001     		.2byte	0x170
 8235 0921 97000000 		.4byte	0x97
 8236 0925 03       		.uleb128 0x3
 8237 0926 91       		.byte	0x91
 8238 0927 8E7B     		.sleb128 -626
 8239 0929 22       		.uleb128 0x22
 8240 092a BE0F0000 		.4byte	.LASF170
 8241 092e 01       		.byte	0x1
 8242 092f 7001     		.2byte	0x170
 8243 0931 430A0000 		.4byte	0xa43
 8244 0935 03       		.uleb128 0x3
 8245 0936 91       		.byte	0x91
 8246 0937 887B     		.sleb128 -632
 8247 0939 22       		.uleb128 0x22
 8248 093a 890A0000 		.4byte	.LASF171
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 193


 8249 093e 01       		.byte	0x1
 8250 093f 7001     		.2byte	0x170
 8251 0941 4E0A0000 		.4byte	0xa4e
 8252 0945 03       		.uleb128 0x3
 8253 0946 91       		.byte	0x91
 8254 0947 847B     		.sleb128 -636
 8255 0949 22       		.uleb128 0x22
 8256 094a 6F0C0000 		.4byte	.LASF172
 8257 094e 01       		.byte	0x1
 8258 094f 7001     		.2byte	0x170
 8259 0951 97000000 		.4byte	0x97
 8260 0955 02       		.uleb128 0x2
 8261 0956 91       		.byte	0x91
 8262 0957 00       		.sleb128 0
 8263 0958 23       		.uleb128 0x23
 8264 0959 69647800 		.ascii	"idx\000"
 8265 095d 01       		.byte	0x1
 8266 095e 7201     		.2byte	0x172
 8267 0960 97000000 		.4byte	0x97
 8268 0964 02       		.uleb128 0x2
 8269 0965 91       		.byte	0x91
 8270 0966 5F       		.sleb128 -33
 8271 0967 1F       		.uleb128 0x1f
 8272 0968 F8090000 		.4byte	.LASF173
 8273 096c 01       		.byte	0x1
 8274 096d 7301     		.2byte	0x173
 8275 096f A7060000 		.4byte	0x6a7
 8276 0973 02       		.uleb128 0x2
 8277 0974 91       		.byte	0x91
 8278 0975 50       		.sleb128 -48
 8279 0976 1F       		.uleb128 0x1f
 8280 0977 12000000 		.4byte	.LASF174
 8281 097b 01       		.byte	0x1
 8282 097c 7401     		.2byte	0x174
 8283 097e 97000000 		.4byte	0x97
 8284 0982 02       		.uleb128 0x2
 8285 0983 91       		.byte	0x91
 8286 0984 5E       		.sleb128 -34
 8287 0985 1F       		.uleb128 0x1f
 8288 0986 41110000 		.4byte	.LASF175
 8289 098a 01       		.byte	0x1
 8290 098b 7501     		.2byte	0x175
 8291 098d 590A0000 		.4byte	0xa59
 8292 0991 03       		.uleb128 0x3
 8293 0992 91       		.byte	0x91
 8294 0993 C87D     		.sleb128 -312
 8295 0995 1F       		.uleb128 0x1f
 8296 0996 E3010000 		.4byte	.LASF176
 8297 099a 01       		.byte	0x1
 8298 099b 7601     		.2byte	0x176
 8299 099d 590A0000 		.4byte	0xa59
 8300 09a1 03       		.uleb128 0x3
 8301 09a2 91       		.byte	0x91
 8302 09a3 CC7B     		.sleb128 -564
 8303 09a5 1F       		.uleb128 0x1f
 8304 09a6 DC0F0000 		.4byte	.LASF177
 8305 09aa 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 194


 8306 09ab 7801     		.2byte	0x178
 8307 09ad D3000000 		.4byte	0xd3
 8308 09b1 03       		.uleb128 0x3
 8309 09b2 91       		.byte	0x91
 8310 09b3 C87B     		.sleb128 -568
 8311 09b5 23       		.uleb128 0x23
 8312 09b6 6900     		.ascii	"i\000"
 8313 09b8 01       		.byte	0x1
 8314 09b9 7901     		.2byte	0x179
 8315 09bb 97000000 		.4byte	0x97
 8316 09bf 02       		.uleb128 0x2
 8317 09c0 91       		.byte	0x91
 8318 09c1 5D       		.sleb128 -35
 8319 09c2 23       		.uleb128 0x23
 8320 09c3 6A00     		.ascii	"j\000"
 8321 09c5 01       		.byte	0x1
 8322 09c6 7901     		.2byte	0x179
 8323 09c8 97000000 		.4byte	0x97
 8324 09cc 02       		.uleb128 0x2
 8325 09cd 91       		.byte	0x91
 8326 09ce 5C       		.sleb128 -36
 8327 09cf 1F       		.uleb128 0x1f
 8328 09d0 E6090000 		.4byte	.LASF178
 8329 09d4 01       		.byte	0x1
 8330 09d5 7A01     		.2byte	0x17a
 8331 09d7 97000000 		.4byte	0x97
 8332 09db 02       		.uleb128 0x2
 8333 09dc 91       		.byte	0x91
 8334 09dd 5B       		.sleb128 -37
 8335 09de 1F       		.uleb128 0x1f
 8336 09df B80C0000 		.4byte	.LASF179
 8337 09e3 01       		.byte	0x1
 8338 09e4 7B01     		.2byte	0x17b
 8339 09e6 690A0000 		.4byte	0xa69
 8340 09ea 03       		.uleb128 0x3
 8341 09eb 91       		.byte	0x91
 8342 09ec 947B     		.sleb128 -620
 8343 09ee 1F       		.uleb128 0x1f
 8344 09ef 9A070000 		.4byte	.LASF180
 8345 09f3 01       		.byte	0x1
 8346 09f4 7D01     		.2byte	0x17d
 8347 09f6 A3000000 		.4byte	0xa3
 8348 09fa 02       		.uleb128 0x2
 8349 09fb 91       		.byte	0x91
 8350 09fc 4E       		.sleb128 -50
 8351 09fd 1F       		.uleb128 0x1f
 8352 09fe 06050000 		.4byte	.LASF181
 8353 0a02 01       		.byte	0x1
 8354 0a03 7E01     		.2byte	0x17e
 8355 0a05 790A0000 		.4byte	0xa79
 8356 0a09 03       		.uleb128 0x3
 8357 0a0a 91       		.byte	0x91
 8358 0a0b 44       		.sleb128 -60
 8359 0a0c 06       		.byte	0x6
 8360 0a0d 24       		.uleb128 0x24
 8361 0a0e E4000000 		.4byte	.LBB22
 8362 0a12 2C000000 		.4byte	.LBE22-.LBB22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 195


 8363 0a16 290A0000 		.4byte	0xa29
 8364 0a1a 23       		.uleb128 0x23
 8365 0a1b 696900   		.ascii	"ii\000"
 8366 0a1e 01       		.byte	0x1
 8367 0a1f 7F01     		.2byte	0x17f
 8368 0a21 73000000 		.4byte	0x73
 8369 0a25 02       		.uleb128 0x2
 8370 0a26 91       		.byte	0x91
 8371 0a27 54       		.sleb128 -44
 8372 0a28 00       		.byte	0
 8373 0a29 1A       		.uleb128 0x1a
 8374 0a2a 2C010000 		.4byte	.LBB23
 8375 0a2e 80040000 		.4byte	.LBE23-.LBB23
 8376 0a32 23       		.uleb128 0x23
 8377 0a33 736F6400 		.ascii	"sod\000"
 8378 0a37 01       		.byte	0x1
 8379 0a38 8601     		.2byte	0x186
 8380 0a3a 97000000 		.4byte	0x97
 8381 0a3e 02       		.uleb128 0x2
 8382 0a3f 91       		.byte	0x91
 8383 0a40 43       		.sleb128 -61
 8384 0a41 00       		.byte	0
 8385 0a42 00       		.byte	0
 8386 0a43 07       		.uleb128 0x7
 8387 0a44 04       		.byte	0x4
 8388 0a45 490A0000 		.4byte	0xa49
 8389 0a49 08       		.uleb128 0x8
 8390 0a4a 31060000 		.4byte	0x631
 8391 0a4e 07       		.uleb128 0x7
 8392 0a4f 04       		.byte	0x4
 8393 0a50 540A0000 		.4byte	0xa54
 8394 0a54 08       		.uleb128 0x8
 8395 0a55 EC050000 		.4byte	0x5ec
 8396 0a59 0E       		.uleb128 0xe
 8397 0a5a ED000000 		.4byte	0xed
 8398 0a5e 690A0000 		.4byte	0xa69
 8399 0a62 0F       		.uleb128 0xf
 8400 0a63 0C010000 		.4byte	0x10c
 8401 0a67 F9       		.byte	0xf9
 8402 0a68 00       		.byte	0
 8403 0a69 0E       		.uleb128 0xe
 8404 0a6a ED000000 		.4byte	0xed
 8405 0a6e 790A0000 		.4byte	0xa79
 8406 0a72 0F       		.uleb128 0xf
 8407 0a73 0C010000 		.4byte	0x10c
 8408 0a77 31       		.byte	0x31
 8409 0a78 00       		.byte	0
 8410 0a79 0E       		.uleb128 0xe
 8411 0a7a 97000000 		.4byte	0x97
 8412 0a7e 8C0A0000 		.4byte	0xa8c
 8413 0a82 25       		.uleb128 0x25
 8414 0a83 0C010000 		.4byte	0x10c
 8415 0a87 03       		.uleb128 0x3
 8416 0a88 91       		.byte	0x91
 8417 0a89 48       		.sleb128 -56
 8418 0a8a 06       		.byte	0x6
 8419 0a8b 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 196


 8420 0a8c 1E       		.uleb128 0x1e
 8421 0a8d 090D0000 		.4byte	.LASF182
 8422 0a91 01       		.byte	0x1
 8423 0a92 F101     		.2byte	0x1f1
 8424 0a94 00000000 		.4byte	.LFB69
 8425 0a98 34070000 		.4byte	.LFE69-.LFB69
 8426 0a9c 01       		.uleb128 0x1
 8427 0a9d 9C       		.byte	0x9c
 8428 0a9e 720B0000 		.4byte	0xb72
 8429 0aa2 22       		.uleb128 0x22
 8430 0aa3 F7050000 		.4byte	.LASF183
 8431 0aa7 01       		.byte	0x1
 8432 0aa8 F101     		.2byte	0x1f1
 8433 0aaa A3000000 		.4byte	0xa3
 8434 0aae 03       		.uleb128 0x3
 8435 0aaf 91       		.byte	0x91
 8436 0ab0 AE7C     		.sleb128 -466
 8437 0ab2 22       		.uleb128 0x22
 8438 0ab3 6F0C0000 		.4byte	.LASF172
 8439 0ab7 01       		.byte	0x1
 8440 0ab8 F101     		.2byte	0x1f1
 8441 0aba 97000000 		.4byte	0x97
 8442 0abe 03       		.uleb128 0x3
 8443 0abf 91       		.byte	0x91
 8444 0ac0 AD7C     		.sleb128 -467
 8445 0ac2 23       		.uleb128 0x23
 8446 0ac3 6900     		.ascii	"i\000"
 8447 0ac5 01       		.byte	0x1
 8448 0ac6 F201     		.2byte	0x1f2
 8449 0ac8 97000000 		.4byte	0x97
 8450 0acc 02       		.uleb128 0x2
 8451 0acd 91       		.byte	0x91
 8452 0ace 6F       		.sleb128 -17
 8453 0acf 23       		.uleb128 0x23
 8454 0ad0 6A00     		.ascii	"j\000"
 8455 0ad2 01       		.byte	0x1
 8456 0ad3 F201     		.2byte	0x1f2
 8457 0ad5 97000000 		.4byte	0x97
 8458 0ad9 02       		.uleb128 0x2
 8459 0ada 91       		.byte	0x91
 8460 0adb 6E       		.sleb128 -18
 8461 0adc 1F       		.uleb128 0x1f
 8462 0add 71010000 		.4byte	.LASF184
 8463 0ae1 01       		.byte	0x1
 8464 0ae2 F401     		.2byte	0x1f4
 8465 0ae4 97000000 		.4byte	0x97
 8466 0ae8 02       		.uleb128 0x2
 8467 0ae9 91       		.byte	0x91
 8468 0aea 65       		.sleb128 -27
 8469 0aeb 1F       		.uleb128 0x1f
 8470 0aec AC020000 		.4byte	.LASF185
 8471 0af0 01       		.byte	0x1
 8472 0af1 F701     		.2byte	0x1f7
 8473 0af3 720B0000 		.4byte	0xb72
 8474 0af7 02       		.uleb128 0x2
 8475 0af8 91       		.byte	0x91
 8476 0af9 68       		.sleb128 -24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 197


 8477 0afa 1F       		.uleb128 0x1f
 8478 0afb 46050000 		.4byte	.LASF44
 8479 0aff 01       		.byte	0x1
 8480 0b00 FD01     		.2byte	0x1fd
 8481 0b02 EC050000 		.4byte	0x5ec
 8482 0b06 03       		.uleb128 0x3
 8483 0b07 91       		.byte	0x91
 8484 0b08 B87F     		.sleb128 -72
 8485 0b0a 1F       		.uleb128 0x1f
 8486 0b0b 890A0000 		.4byte	.LASF171
 8487 0b0f 01       		.byte	0x1
 8488 0b10 0002     		.2byte	0x200
 8489 0b12 880B0000 		.4byte	0xb88
 8490 0b16 03       		.uleb128 0x3
 8491 0b17 91       		.byte	0x91
 8492 0b18 B47E     		.sleb128 -204
 8493 0b1a 1F       		.uleb128 0x1f
 8494 0b1b CF000000 		.4byte	.LASF186
 8495 0b1f 01       		.byte	0x1
 8496 0b20 0802     		.2byte	0x208
 8497 0b22 97000000 		.4byte	0x97
 8498 0b26 02       		.uleb128 0x2
 8499 0b27 91       		.byte	0x91
 8500 0b28 67       		.sleb128 -25
 8501 0b29 1F       		.uleb128 0x1f
 8502 0b2a 25100000 		.4byte	.LASF187
 8503 0b2e 01       		.byte	0x1
 8504 0b2f 0A02     		.2byte	0x20a
 8505 0b31 31060000 		.4byte	0x631
 8506 0b35 03       		.uleb128 0x3
 8507 0b36 91       		.byte	0x91
 8508 0b37 A47E     		.sleb128 -220
 8509 0b39 1F       		.uleb128 0x1f
 8510 0b3a BE0F0000 		.4byte	.LASF170
 8511 0b3e 01       		.byte	0x1
 8512 0b3f 0C02     		.2byte	0x20c
 8513 0b41 9D0B0000 		.4byte	0xb9d
 8514 0b45 03       		.uleb128 0x3
 8515 0b46 91       		.byte	0x91
 8516 0b47 B47C     		.sleb128 -460
 8517 0b49 1F       		.uleb128 0x1f
 8518 0b4a 2B0F0000 		.4byte	.LASF188
 8519 0b4e 01       		.byte	0x1
 8520 0b4f 2302     		.2byte	0x223
 8521 0b51 97000000 		.4byte	0x97
 8522 0b55 02       		.uleb128 0x2
 8523 0b56 91       		.byte	0x91
 8524 0b57 66       		.sleb128 -26
 8525 0b58 1A       		.uleb128 0x1a
 8526 0b59 94050000 		.4byte	.LBB24
 8527 0b5d 7E010000 		.4byte	.LBE24-.LBB24
 8528 0b61 23       		.uleb128 0x23
 8529 0b62 736F6400 		.ascii	"sod\000"
 8530 0b66 01       		.byte	0x1
 8531 0b67 3402     		.2byte	0x234
 8532 0b69 97000000 		.4byte	0x97
 8533 0b6d 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 198


 8534 0b6e 91       		.byte	0x91
 8535 0b6f 64       		.sleb128 -28
 8536 0b70 00       		.byte	0
 8537 0b71 00       		.byte	0
 8538 0b72 07       		.uleb128 0x7
 8539 0b73 04       		.byte	0x4
 8540 0b74 7D050000 		.4byte	0x57d
 8541 0b78 0E       		.uleb128 0xe
 8542 0b79 540A0000 		.4byte	0xa54
 8543 0b7d 880B0000 		.4byte	0xb88
 8544 0b81 0F       		.uleb128 0xf
 8545 0b82 0C010000 		.4byte	0x10c
 8546 0b86 02       		.byte	0x2
 8547 0b87 00       		.byte	0
 8548 0b88 08       		.uleb128 0x8
 8549 0b89 780B0000 		.4byte	0xb78
 8550 0b8d 0E       		.uleb128 0xe
 8551 0b8e 490A0000 		.4byte	0xa49
 8552 0b92 9D0B0000 		.4byte	0xb9d
 8553 0b96 0F       		.uleb128 0xf
 8554 0b97 0C010000 		.4byte	0x10c
 8555 0b9b 0E       		.byte	0xe
 8556 0b9c 00       		.byte	0
 8557 0b9d 08       		.uleb128 0x8
 8558 0b9e 8D0B0000 		.4byte	0xb8d
 8559 0ba2 1E       		.uleb128 0x1e
 8560 0ba3 38030000 		.4byte	.LASF189
 8561 0ba7 01       		.byte	0x1
 8562 0ba8 5502     		.2byte	0x255
 8563 0baa 00000000 		.4byte	.LFB70
 8564 0bae 34010000 		.4byte	.LFE70-.LFB70
 8565 0bb2 01       		.uleb128 0x1
 8566 0bb3 9C       		.byte	0x9c
 8567 0bb4 000C0000 		.4byte	0xc00
 8568 0bb8 22       		.uleb128 0x22
 8569 0bb9 F7050000 		.4byte	.LASF183
 8570 0bbd 01       		.byte	0x1
 8571 0bbe 5502     		.2byte	0x255
 8572 0bc0 A3000000 		.4byte	0xa3
 8573 0bc4 02       		.uleb128 0x2
 8574 0bc5 91       		.byte	0x91
 8575 0bc6 6E       		.sleb128 -18
 8576 0bc7 22       		.uleb128 0x22
 8577 0bc8 BE0F0000 		.4byte	.LASF170
 8578 0bcc 01       		.byte	0x1
 8579 0bcd 5502     		.2byte	0x255
 8580 0bcf 430A0000 		.4byte	0xa43
 8581 0bd3 02       		.uleb128 0x2
 8582 0bd4 91       		.byte	0x91
 8583 0bd5 68       		.sleb128 -24
 8584 0bd6 23       		.uleb128 0x23
 8585 0bd7 736F6400 		.ascii	"sod\000"
 8586 0bdb 01       		.byte	0x1
 8587 0bdc 5602     		.2byte	0x256
 8588 0bde 97000000 		.4byte	0x97
 8589 0be2 02       		.uleb128 0x2
 8590 0be3 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 199


 8591 0be4 75       		.sleb128 -11
 8592 0be5 23       		.uleb128 0x23
 8593 0be6 6900     		.ascii	"i\000"
 8594 0be8 01       		.byte	0x1
 8595 0be9 5802     		.2byte	0x258
 8596 0beb 97000000 		.4byte	0x97
 8597 0bef 02       		.uleb128 0x2
 8598 0bf0 91       		.byte	0x91
 8599 0bf1 77       		.sleb128 -9
 8600 0bf2 23       		.uleb128 0x23
 8601 0bf3 6A00     		.ascii	"j\000"
 8602 0bf5 01       		.byte	0x1
 8603 0bf6 5802     		.2byte	0x258
 8604 0bf8 97000000 		.4byte	0x97
 8605 0bfc 02       		.uleb128 0x2
 8606 0bfd 91       		.byte	0x91
 8607 0bfe 76       		.sleb128 -10
 8608 0bff 00       		.byte	0
 8609 0c00 26       		.uleb128 0x26
 8610 0c01 F5070000 		.4byte	.LASF190
 8611 0c05 01       		.byte	0x1
 8612 0c06 7C02     		.2byte	0x27c
 8613 0c08 00000000 		.4byte	.LFB71
 8614 0c0c 14000000 		.4byte	.LFE71-.LFB71
 8615 0c10 01       		.uleb128 0x1
 8616 0c11 9C       		.byte	0x9c
 8617 0c12 260C0000 		.4byte	0xc26
 8618 0c16 22       		.uleb128 0x22
 8619 0c17 F7050000 		.4byte	.LASF183
 8620 0c1b 01       		.byte	0x1
 8621 0c1c 7C02     		.2byte	0x27c
 8622 0c1e A3000000 		.4byte	0xa3
 8623 0c22 02       		.uleb128 0x2
 8624 0c23 91       		.byte	0x91
 8625 0c24 76       		.sleb128 -10
 8626 0c25 00       		.byte	0
 8627 0c26 27       		.uleb128 0x27
 8628 0c27 8C020000 		.4byte	.LASF228
 8629 0c2b 01       		.byte	0x1
 8630 0c2c 8402     		.2byte	0x284
 8631 0c2e 00000000 		.4byte	.LFB72
 8632 0c32 0C000000 		.4byte	.LFE72-.LFB72
 8633 0c36 01       		.uleb128 0x1
 8634 0c37 9C       		.byte	0x9c
 8635 0c38 1E       		.uleb128 0x1e
 8636 0c39 D20C0000 		.4byte	.LASF191
 8637 0c3d 01       		.byte	0x1
 8638 0c3e 8802     		.2byte	0x288
 8639 0c40 00000000 		.4byte	.LFB73
 8640 0c44 B8030000 		.4byte	.LFE73-.LFB73
 8641 0c48 01       		.uleb128 0x1
 8642 0c49 9C       		.byte	0x9c
 8643 0c4a 840D0000 		.4byte	0xd84
 8644 0c4e 22       		.uleb128 0x22
 8645 0c4f 1F0C0000 		.4byte	.LASF168
 8646 0c53 01       		.byte	0x1
 8647 0c54 8802     		.2byte	0x288
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 200


 8648 0c56 97000000 		.4byte	0x97
 8649 0c5a 03       		.uleb128 0x3
 8650 0c5b 91       		.byte	0x91
 8651 0c5c 976B     		.sleb128 -2665
 8652 0c5e 22       		.uleb128 0x22
 8653 0c5f 480D0000 		.4byte	.LASF169
 8654 0c63 01       		.byte	0x1
 8655 0c64 8802     		.2byte	0x288
 8656 0c66 97000000 		.4byte	0x97
 8657 0c6a 03       		.uleb128 0x3
 8658 0c6b 91       		.byte	0x91
 8659 0c6c 966B     		.sleb128 -2666
 8660 0c6e 22       		.uleb128 0x22
 8661 0c6f BE0F0000 		.4byte	.LASF170
 8662 0c73 01       		.byte	0x1
 8663 0c74 8802     		.2byte	0x288
 8664 0c76 430A0000 		.4byte	0xa43
 8665 0c7a 03       		.uleb128 0x3
 8666 0c7b 91       		.byte	0x91
 8667 0c7c 906B     		.sleb128 -2672
 8668 0c7e 22       		.uleb128 0x22
 8669 0c7f 890A0000 		.4byte	.LASF171
 8670 0c83 01       		.byte	0x1
 8671 0c84 8802     		.2byte	0x288
 8672 0c86 4E0A0000 		.4byte	0xa4e
 8673 0c8a 03       		.uleb128 0x3
 8674 0c8b 91       		.byte	0x91
 8675 0c8c 8C6B     		.sleb128 -2676
 8676 0c8e 1F       		.uleb128 0x1f
 8677 0c8f 130C0000 		.4byte	.LASF192
 8678 0c93 01       		.byte	0x1
 8679 0c94 8A02     		.2byte	0x28a
 8680 0c96 840D0000 		.4byte	0xd84
 8681 0c9a 03       		.uleb128 0x3
 8682 0c9b 91       		.byte	0x91
 8683 0c9c 806C     		.sleb128 -2560
 8684 0c9e 23       		.uleb128 0x23
 8685 0c9f 6900     		.ascii	"i\000"
 8686 0ca1 01       		.byte	0x1
 8687 0ca2 8B02     		.2byte	0x28b
 8688 0ca4 73000000 		.4byte	0x73
 8689 0ca8 02       		.uleb128 0x2
 8690 0ca9 91       		.byte	0x91
 8691 0caa 6C       		.sleb128 -20
 8692 0cab 23       		.uleb128 0x23
 8693 0cac 69647800 		.ascii	"idx\000"
 8694 0cb0 01       		.byte	0x1
 8695 0cb1 8C02     		.2byte	0x28c
 8696 0cb3 73000000 		.4byte	0x73
 8697 0cb7 02       		.uleb128 0x2
 8698 0cb8 91       		.byte	0x91
 8699 0cb9 68       		.sleb128 -24
 8700 0cba 1F       		.uleb128 0x1f
 8701 0cbb DC0F0000 		.4byte	.LASF177
 8702 0cbf 01       		.byte	0x1
 8703 0cc0 8D02     		.2byte	0x28d
 8704 0cc2 D3000000 		.4byte	0xd3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 201


 8705 0cc6 02       		.uleb128 0x2
 8706 0cc7 91       		.byte	0x91
 8707 0cc8 48       		.sleb128 -56
 8708 0cc9 1F       		.uleb128 0x1f
 8709 0cca 5D0C0000 		.4byte	.LASF193
 8710 0cce 01       		.byte	0x1
 8711 0ccf 8E02     		.2byte	0x28e
 8712 0cd1 AF000000 		.4byte	0xaf
 8713 0cd5 02       		.uleb128 0x2
 8714 0cd6 91       		.byte	0x91
 8715 0cd7 4C       		.sleb128 -52
 8716 0cd8 1F       		.uleb128 0x1f
 8717 0cd9 B40F0000 		.4byte	.LASF194
 8718 0cdd 01       		.byte	0x1
 8719 0cde 8F02     		.2byte	0x28f
 8720 0ce0 DF000000 		.4byte	0xdf
 8721 0ce4 02       		.uleb128 0x2
 8722 0ce5 91       		.byte	0x91
 8723 0ce6 44       		.sleb128 -60
 8724 0ce7 1F       		.uleb128 0x1f
 8725 0ce8 1B0D0000 		.4byte	.LASF195
 8726 0cec 01       		.byte	0x1
 8727 0ced 9002     		.2byte	0x290
 8728 0cef 97000000 		.4byte	0x97
 8729 0cf3 02       		.uleb128 0x2
 8730 0cf4 91       		.byte	0x91
 8731 0cf5 57       		.sleb128 -41
 8732 0cf6 1F       		.uleb128 0x1f
 8733 0cf7 B6090000 		.4byte	.LASF196
 8734 0cfb 01       		.byte	0x1
 8735 0cfc 9102     		.2byte	0x291
 8736 0cfe BB000000 		.4byte	0xbb
 8737 0d02 02       		.uleb128 0x2
 8738 0d03 91       		.byte	0x91
 8739 0d04 56       		.sleb128 -42
 8740 0d05 1F       		.uleb128 0x1f
 8741 0d06 050F0000 		.4byte	.LASF197
 8742 0d0a 01       		.byte	0x1
 8743 0d0b 9202     		.2byte	0x292
 8744 0d0d C7000000 		.4byte	0xc7
 8745 0d11 02       		.uleb128 0x2
 8746 0d12 91       		.byte	0x91
 8747 0d13 54       		.sleb128 -44
 8748 0d14 1F       		.uleb128 0x1f
 8749 0d15 350B0000 		.4byte	.LASF198
 8750 0d19 01       		.byte	0x1
 8751 0d1a 9302     		.2byte	0x293
 8752 0d1c A3000000 		.4byte	0xa3
 8753 0d20 02       		.uleb128 0x2
 8754 0d21 91       		.byte	0x91
 8755 0d22 52       		.sleb128 -46
 8756 0d23 1F       		.uleb128 0x1f
 8757 0d24 AC020000 		.4byte	.LASF185
 8758 0d28 01       		.byte	0x1
 8759 0d29 9402     		.2byte	0x294
 8760 0d2b 720B0000 		.4byte	0xb72
 8761 0d2f 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 202


 8762 0d30 91       		.byte	0x91
 8763 0d31 64       		.sleb128 -28
 8764 0d32 1A       		.uleb128 0x1a
 8765 0d33 54000000 		.4byte	.LBB25
 8766 0d37 4A030000 		.4byte	.LBE25-.LBB25
 8767 0d3b 1F       		.uleb128 0x1f
 8768 0d3c F8090000 		.4byte	.LASF173
 8769 0d40 01       		.byte	0x1
 8770 0d41 9702     		.2byte	0x297
 8771 0d43 A7060000 		.4byte	0x6a7
 8772 0d47 02       		.uleb128 0x2
 8773 0d48 91       		.byte	0x91
 8774 0d49 60       		.sleb128 -32
 8775 0d4a 1F       		.uleb128 0x1f
 8776 0d4b 6B010000 		.4byte	.LASF199
 8777 0d4f 01       		.byte	0x1
 8778 0d50 9802     		.2byte	0x298
 8779 0d52 A7060000 		.4byte	0x6a7
 8780 0d56 02       		.uleb128 0x2
 8781 0d57 91       		.byte	0x91
 8782 0d58 58       		.sleb128 -40
 8783 0d59 23       		.uleb128 0x23
 8784 0d5a 73747200 		.ascii	"str\000"
 8785 0d5e 01       		.byte	0x1
 8786 0d5f 9902     		.2byte	0x299
 8787 0d61 950D0000 		.4byte	0xd95
 8788 0d65 03       		.uleb128 0x3
 8789 0d66 91       		.byte	0x91
 8790 0d67 9C6B     		.sleb128 -2660
 8791 0d69 1A       		.uleb128 0x1a
 8792 0d6a 9A000000 		.4byte	.LBB26
 8793 0d6e DE020000 		.4byte	.LBE26-.LBB26
 8794 0d72 23       		.uleb128 0x23
 8795 0d73 736F6400 		.ascii	"sod\000"
 8796 0d77 01       		.byte	0x1
 8797 0d78 A202     		.2byte	0x2a2
 8798 0d7a 97000000 		.4byte	0x97
 8799 0d7e 02       		.uleb128 0x2
 8800 0d7f 91       		.byte	0x91
 8801 0d80 5F       		.sleb128 -33
 8802 0d81 00       		.byte	0
 8803 0d82 00       		.byte	0
 8804 0d83 00       		.byte	0
 8805 0d84 0E       		.uleb128 0xe
 8806 0d85 ED000000 		.4byte	0xed
 8807 0d89 950D0000 		.4byte	0xd95
 8808 0d8d 20       		.uleb128 0x20
 8809 0d8e 0C010000 		.4byte	0x10c
 8810 0d92 C309     		.2byte	0x9c3
 8811 0d94 00       		.byte	0
 8812 0d95 0E       		.uleb128 0xe
 8813 0d96 ED000000 		.4byte	0xed
 8814 0d9a A50D0000 		.4byte	0xda5
 8815 0d9e 0F       		.uleb128 0xf
 8816 0d9f 0C010000 		.4byte	0x10c
 8817 0da3 63       		.byte	0x63
 8818 0da4 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 203


 8819 0da5 1E       		.uleb128 0x1e
 8820 0da6 BA000000 		.4byte	.LASF200
 8821 0daa 01       		.byte	0x1
 8822 0dab F002     		.2byte	0x2f0
 8823 0dad 00000000 		.4byte	.LFB74
 8824 0db1 14020000 		.4byte	.LFE74-.LFB74
 8825 0db5 01       		.uleb128 0x1
 8826 0db6 9C       		.byte	0x9c
 8827 0db7 020E0000 		.4byte	0xe02
 8828 0dbb 22       		.uleb128 0x22
 8829 0dbc 130C0000 		.4byte	.LASF192
 8830 0dc0 01       		.byte	0x1
 8831 0dc1 F002     		.2byte	0x2f0
 8832 0dc3 13010000 		.4byte	0x113
 8833 0dc7 03       		.uleb128 0x3
 8834 0dc8 91       		.byte	0x91
 8835 0dc9 F47E     		.sleb128 -140
 8836 0dcb 23       		.uleb128 0x23
 8837 0dcc 6900     		.ascii	"i\000"
 8838 0dce 01       		.byte	0x1
 8839 0dcf F202     		.2byte	0x2f2
 8840 0dd1 73000000 		.4byte	0x73
 8841 0dd5 02       		.uleb128 0x2
 8842 0dd6 91       		.byte	0x91
 8843 0dd7 64       		.sleb128 -28
 8844 0dd8 1F       		.uleb128 0x1f
 8845 0dd9 AC020000 		.4byte	.LASF185
 8846 0ddd 01       		.byte	0x1
 8847 0dde F302     		.2byte	0x2f3
 8848 0de0 720B0000 		.4byte	0xb72
 8849 0de4 02       		.uleb128 0x2
 8850 0de5 91       		.byte	0x91
 8851 0de6 60       		.sleb128 -32
 8852 0de7 1A       		.uleb128 0x1a
 8853 0de8 20000000 		.4byte	.LBB27
 8854 0dec A8010000 		.4byte	.LBE27-.LBB27
 8855 0df0 23       		.uleb128 0x23
 8856 0df1 73747200 		.ascii	"str\000"
 8857 0df5 01       		.byte	0x1
 8858 0df6 F702     		.2byte	0x2f7
 8859 0df8 950D0000 		.4byte	0xd95
 8860 0dfc 03       		.uleb128 0x3
 8861 0dfd 91       		.byte	0x91
 8862 0dfe FC7E     		.sleb128 -132
 8863 0e00 00       		.byte	0
 8864 0e01 00       		.byte	0
 8865 0e02 26       		.uleb128 0x26
 8866 0e03 750D0000 		.4byte	.LASF201
 8867 0e07 01       		.byte	0x1
 8868 0e08 1703     		.2byte	0x317
 8869 0e0a 00000000 		.4byte	.LFB75
 8870 0e0e 12000000 		.4byte	.LFE75-.LFB75
 8871 0e12 01       		.uleb128 0x1
 8872 0e13 9C       		.byte	0x9c
 8873 0e14 280E0000 		.4byte	0xe28
 8874 0e18 22       		.uleb128 0x22
 8875 0e19 130C0000 		.4byte	.LASF192
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 204


 8876 0e1d 01       		.byte	0x1
 8877 0e1e 1703     		.2byte	0x317
 8878 0e20 13010000 		.4byte	0x113
 8879 0e24 02       		.uleb128 0x2
 8880 0e25 91       		.byte	0x91
 8881 0e26 74       		.sleb128 -12
 8882 0e27 00       		.byte	0
 8883 0e28 26       		.uleb128 0x26
 8884 0e29 190B0000 		.4byte	.LASF202
 8885 0e2d 01       		.byte	0x1
 8886 0e2e 1F03     		.2byte	0x31f
 8887 0e30 00000000 		.4byte	.LFB76
 8888 0e34 12000000 		.4byte	.LFE76-.LFB76
 8889 0e38 01       		.uleb128 0x1
 8890 0e39 9C       		.byte	0x9c
 8891 0e3a 4E0E0000 		.4byte	0xe4e
 8892 0e3e 22       		.uleb128 0x22
 8893 0e3f 130C0000 		.4byte	.LASF192
 8894 0e43 01       		.byte	0x1
 8895 0e44 1F03     		.2byte	0x31f
 8896 0e46 13010000 		.4byte	0x113
 8897 0e4a 02       		.uleb128 0x2
 8898 0e4b 91       		.byte	0x91
 8899 0e4c 74       		.sleb128 -12
 8900 0e4d 00       		.byte	0
 8901 0e4e 26       		.uleb128 0x26
 8902 0e4f 5F0D0000 		.4byte	.LASF203
 8903 0e53 01       		.byte	0x1
 8904 0e54 2703     		.2byte	0x327
 8905 0e56 00000000 		.4byte	.LFB77
 8906 0e5a 12000000 		.4byte	.LFE77-.LFB77
 8907 0e5e 01       		.uleb128 0x1
 8908 0e5f 9C       		.byte	0x9c
 8909 0e60 740E0000 		.4byte	0xe74
 8910 0e64 22       		.uleb128 0x22
 8911 0e65 130C0000 		.4byte	.LASF192
 8912 0e69 01       		.byte	0x1
 8913 0e6a 2703     		.2byte	0x327
 8914 0e6c 13010000 		.4byte	0x113
 8915 0e70 02       		.uleb128 0x2
 8916 0e71 91       		.byte	0x91
 8917 0e72 74       		.sleb128 -12
 8918 0e73 00       		.byte	0
 8919 0e74 26       		.uleb128 0x26
 8920 0e75 2C0A0000 		.4byte	.LASF204
 8921 0e79 01       		.byte	0x1
 8922 0e7a 2F03     		.2byte	0x32f
 8923 0e7c 00000000 		.4byte	.LFB78
 8924 0e80 12000000 		.4byte	.LFE78-.LFB78
 8925 0e84 01       		.uleb128 0x1
 8926 0e85 9C       		.byte	0x9c
 8927 0e86 9A0E0000 		.4byte	0xe9a
 8928 0e8a 22       		.uleb128 0x22
 8929 0e8b 130C0000 		.4byte	.LASF192
 8930 0e8f 01       		.byte	0x1
 8931 0e90 2F03     		.2byte	0x32f
 8932 0e92 13010000 		.4byte	0x113
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 205


 8933 0e96 02       		.uleb128 0x2
 8934 0e97 91       		.byte	0x91
 8935 0e98 74       		.sleb128 -12
 8936 0e99 00       		.byte	0
 8937 0e9a 26       		.uleb128 0x26
 8938 0e9b 8A0D0000 		.4byte	.LASF205
 8939 0e9f 01       		.byte	0x1
 8940 0ea0 3603     		.2byte	0x336
 8941 0ea2 00000000 		.4byte	.LFB79
 8942 0ea6 12000000 		.4byte	.LFE79-.LFB79
 8943 0eaa 01       		.uleb128 0x1
 8944 0eab 9C       		.byte	0x9c
 8945 0eac C00E0000 		.4byte	0xec0
 8946 0eb0 22       		.uleb128 0x22
 8947 0eb1 130C0000 		.4byte	.LASF192
 8948 0eb5 01       		.byte	0x1
 8949 0eb6 3603     		.2byte	0x336
 8950 0eb8 13010000 		.4byte	0x113
 8951 0ebc 02       		.uleb128 0x2
 8952 0ebd 91       		.byte	0x91
 8953 0ebe 74       		.sleb128 -12
 8954 0ebf 00       		.byte	0
 8955 0ec0 26       		.uleb128 0x26
 8956 0ec1 D3020000 		.4byte	.LASF206
 8957 0ec5 01       		.byte	0x1
 8958 0ec6 3E03     		.2byte	0x33e
 8959 0ec8 00000000 		.4byte	.LFB80
 8960 0ecc 12000000 		.4byte	.LFE80-.LFB80
 8961 0ed0 01       		.uleb128 0x1
 8962 0ed1 9C       		.byte	0x9c
 8963 0ed2 E60E0000 		.4byte	0xee6
 8964 0ed6 22       		.uleb128 0x22
 8965 0ed7 130C0000 		.4byte	.LASF192
 8966 0edb 01       		.byte	0x1
 8967 0edc 3E03     		.2byte	0x33e
 8968 0ede 13010000 		.4byte	0x113
 8969 0ee2 02       		.uleb128 0x2
 8970 0ee3 91       		.byte	0x91
 8971 0ee4 74       		.sleb128 -12
 8972 0ee5 00       		.byte	0
 8973 0ee6 26       		.uleb128 0x26
 8974 0ee7 20110000 		.4byte	.LASF207
 8975 0eeb 01       		.byte	0x1
 8976 0eec 4703     		.2byte	0x347
 8977 0eee 00000000 		.4byte	.LFB81
 8978 0ef2 12000000 		.4byte	.LFE81-.LFB81
 8979 0ef6 01       		.uleb128 0x1
 8980 0ef7 9C       		.byte	0x9c
 8981 0ef8 0C0F0000 		.4byte	0xf0c
 8982 0efc 22       		.uleb128 0x22
 8983 0efd 130C0000 		.4byte	.LASF192
 8984 0f01 01       		.byte	0x1
 8985 0f02 4703     		.2byte	0x347
 8986 0f04 13010000 		.4byte	0x113
 8987 0f08 02       		.uleb128 0x2
 8988 0f09 91       		.byte	0x91
 8989 0f0a 74       		.sleb128 -12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 206


 8990 0f0b 00       		.byte	0
 8991 0f0c 1E       		.uleb128 0x1e
 8992 0f0d F80C0000 		.4byte	.LASF208
 8993 0f11 01       		.byte	0x1
 8994 0f12 4F03     		.2byte	0x34f
 8995 0f14 00000000 		.4byte	.LFB82
 8996 0f18 84000000 		.4byte	.LFE82-.LFB82
 8997 0f1c 01       		.uleb128 0x1
 8998 0f1d 9C       		.byte	0x9c
 8999 0f1e 5F0F0000 		.4byte	0xf5f
 9000 0f22 22       		.uleb128 0x22
 9001 0f23 06050000 		.4byte	.LASF181
 9002 0f27 01       		.byte	0x1
 9003 0f28 4F03     		.2byte	0x34f
 9004 0f2a A7060000 		.4byte	0x6a7
 9005 0f2e 02       		.uleb128 0x2
 9006 0f2f 91       		.byte	0x91
 9007 0f30 6C       		.sleb128 -20
 9008 0f31 22       		.uleb128 0x22
 9009 0f32 9A070000 		.4byte	.LASF180
 9010 0f36 01       		.byte	0x1
 9011 0f37 4F03     		.2byte	0x34f
 9012 0f39 A3000000 		.4byte	0xa3
 9013 0f3d 02       		.uleb128 0x2
 9014 0f3e 91       		.byte	0x91
 9015 0f3f 6A       		.sleb128 -22
 9016 0f40 22       		.uleb128 0x22
 9017 0f41 A80D0000 		.4byte	.LASF209
 9018 0f45 01       		.byte	0x1
 9019 0f46 4F03     		.2byte	0x34f
 9020 0f48 97000000 		.4byte	0x97
 9021 0f4c 02       		.uleb128 0x2
 9022 0f4d 91       		.byte	0x91
 9023 0f4e 69       		.sleb128 -23
 9024 0f4f 1F       		.uleb128 0x1f
 9025 0f50 F7050000 		.4byte	.LASF183
 9026 0f54 01       		.byte	0x1
 9027 0f55 5103     		.2byte	0x351
 9028 0f57 A3000000 		.4byte	0xa3
 9029 0f5b 02       		.uleb128 0x2
 9030 0f5c 91       		.byte	0x91
 9031 0f5d 76       		.sleb128 -10
 9032 0f5e 00       		.byte	0
 9033 0f5f 1E       		.uleb128 0x1e
 9034 0f60 1C050000 		.4byte	.LASF210
 9035 0f64 01       		.byte	0x1
 9036 0f65 6B03     		.2byte	0x36b
 9037 0f67 00000000 		.4byte	.LFB83
 9038 0f6b 88000000 		.4byte	.LFE83-.LFB83
 9039 0f6f 01       		.uleb128 0x1
 9040 0f70 9C       		.byte	0x9c
 9041 0f71 A30F0000 		.4byte	0xfa3
 9042 0f75 22       		.uleb128 0x22
 9043 0f76 06050000 		.4byte	.LASF181
 9044 0f7a 01       		.byte	0x1
 9045 0f7b 6B03     		.2byte	0x36b
 9046 0f7d A7060000 		.4byte	0x6a7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 207


 9047 0f81 02       		.uleb128 0x2
 9048 0f82 91       		.byte	0x91
 9049 0f83 6C       		.sleb128 -20
 9050 0f84 22       		.uleb128 0x22
 9051 0f85 9A070000 		.4byte	.LASF180
 9052 0f89 01       		.byte	0x1
 9053 0f8a 6B03     		.2byte	0x36b
 9054 0f8c A3000000 		.4byte	0xa3
 9055 0f90 02       		.uleb128 0x2
 9056 0f91 91       		.byte	0x91
 9057 0f92 6A       		.sleb128 -22
 9058 0f93 1F       		.uleb128 0x1f
 9059 0f94 F7050000 		.4byte	.LASF183
 9060 0f98 01       		.byte	0x1
 9061 0f99 6D03     		.2byte	0x36d
 9062 0f9b A3000000 		.4byte	0xa3
 9063 0f9f 02       		.uleb128 0x2
 9064 0fa0 91       		.byte	0x91
 9065 0fa1 76       		.sleb128 -10
 9066 0fa2 00       		.byte	0
 9067 0fa3 1E       		.uleb128 0x1e
 9068 0fa4 A70A0000 		.4byte	.LASF211
 9069 0fa8 01       		.byte	0x1
 9070 0fa9 8803     		.2byte	0x388
 9071 0fab 00000000 		.4byte	.LFB84
 9072 0faf A0000000 		.4byte	.LFE84-.LFB84
 9073 0fb3 01       		.uleb128 0x1
 9074 0fb4 9C       		.byte	0x9c
 9075 0fb5 F60F0000 		.4byte	0xff6
 9076 0fb9 22       		.uleb128 0x22
 9077 0fba 06050000 		.4byte	.LASF181
 9078 0fbe 01       		.byte	0x1
 9079 0fbf 8803     		.2byte	0x388
 9080 0fc1 A7060000 		.4byte	0x6a7
 9081 0fc5 02       		.uleb128 0x2
 9082 0fc6 91       		.byte	0x91
 9083 0fc7 74       		.sleb128 -12
 9084 0fc8 22       		.uleb128 0x22
 9085 0fc9 9A070000 		.4byte	.LASF180
 9086 0fcd 01       		.byte	0x1
 9087 0fce 8803     		.2byte	0x388
 9088 0fd0 A3000000 		.4byte	0xa3
 9089 0fd4 02       		.uleb128 0x2
 9090 0fd5 91       		.byte	0x91
 9091 0fd6 72       		.sleb128 -14
 9092 0fd7 28       		.uleb128 0x28
 9093 0fd8 696400   		.ascii	"id\000"
 9094 0fdb 01       		.byte	0x1
 9095 0fdc 8803     		.2byte	0x388
 9096 0fde 97000000 		.4byte	0x97
 9097 0fe2 02       		.uleb128 0x2
 9098 0fe3 91       		.byte	0x91
 9099 0fe4 71       		.sleb128 -15
 9100 0fe5 23       		.uleb128 0x23
 9101 0fe6 6900     		.ascii	"i\000"
 9102 0fe8 01       		.byte	0x1
 9103 0fe9 8A03     		.2byte	0x38a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 208


 9104 0feb A3000000 		.4byte	0xa3
 9105 0fef 05       		.uleb128 0x5
 9106 0ff0 03       		.byte	0x3
 9107 0ff1 00000000 		.4byte	i.10022
 9108 0ff5 00       		.byte	0
 9109 0ff6 21       		.uleb128 0x21
 9110 0ff7 3A100000 		.4byte	.LASF213
 9111 0ffb 01       		.byte	0x1
 9112 0ffc A603     		.2byte	0x3a6
 9113 0ffe 97000000 		.4byte	0x97
 9114 1002 00000000 		.4byte	.LFB85
 9115 1006 3E000000 		.4byte	.LFE85-.LFB85
 9116 100a 01       		.uleb128 0x1
 9117 100b 9C       		.byte	0x9c
 9118 100c 4B100000 		.4byte	0x104b
 9119 1010 22       		.uleb128 0x22
 9120 1011 050A0000 		.4byte	.LASF214
 9121 1015 01       		.byte	0x1
 9122 1016 A603     		.2byte	0x3a6
 9123 1018 A7060000 		.4byte	0x6a7
 9124 101c 02       		.uleb128 0x2
 9125 101d 91       		.byte	0x91
 9126 101e 6C       		.sleb128 -20
 9127 101f 22       		.uleb128 0x22
 9128 1020 CD040000 		.4byte	.LASF215
 9129 1024 01       		.byte	0x1
 9130 1025 A603     		.2byte	0x3a6
 9131 1027 97000000 		.4byte	0x97
 9132 102b 02       		.uleb128 0x2
 9133 102c 91       		.byte	0x91
 9134 102d 6B       		.sleb128 -21
 9135 102e 23       		.uleb128 0x23
 9136 102f 6900     		.ascii	"i\000"
 9137 1031 01       		.byte	0x1
 9138 1032 A803     		.2byte	0x3a8
 9139 1034 97000000 		.4byte	0x97
 9140 1038 02       		.uleb128 0x2
 9141 1039 91       		.byte	0x91
 9142 103a 77       		.sleb128 -9
 9143 103b 1F       		.uleb128 0x1f
 9144 103c B70B0000 		.4byte	.LASF216
 9145 1040 01       		.byte	0x1
 9146 1041 A903     		.2byte	0x3a9
 9147 1043 97000000 		.4byte	0x97
 9148 1047 02       		.uleb128 0x2
 9149 1048 91       		.byte	0x91
 9150 1049 76       		.sleb128 -10
 9151 104a 00       		.byte	0
 9152 104b 1E       		.uleb128 0x1e
 9153 104c C90F0000 		.4byte	.LASF217
 9154 1050 01       		.byte	0x1
 9155 1051 B603     		.2byte	0x3b6
 9156 1053 00000000 		.4byte	.LFB86
 9157 1057 2E000000 		.4byte	.LFE86-.LFB86
 9158 105b 01       		.uleb128 0x1
 9159 105c 9C       		.byte	0x9c
 9160 105d 8F100000 		.4byte	0x108f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 209


 9161 1061 22       		.uleb128 0x22
 9162 1062 48040000 		.4byte	.LASF218
 9163 1066 01       		.byte	0x1
 9164 1067 B603     		.2byte	0x3b6
 9165 1069 97000000 		.4byte	0x97
 9166 106d 02       		.uleb128 0x2
 9167 106e 91       		.byte	0x91
 9168 106f 6F       		.sleb128 -17
 9169 1070 1F       		.uleb128 0x1f
 9170 1071 9A070000 		.4byte	.LASF180
 9171 1075 01       		.byte	0x1
 9172 1076 B703     		.2byte	0x3b7
 9173 1078 73000000 		.4byte	0x73
 9174 107c 02       		.uleb128 0x2
 9175 107d 91       		.byte	0x91
 9176 107e 74       		.sleb128 -12
 9177 107f 1F       		.uleb128 0x1f
 9178 1080 06050000 		.4byte	.LASF181
 9179 1084 01       		.byte	0x1
 9180 1085 B803     		.2byte	0x3b8
 9181 1087 D7040000 		.4byte	0x4d7
 9182 108b 02       		.uleb128 0x2
 9183 108c 91       		.byte	0x91
 9184 108d 70       		.sleb128 -16
 9185 108e 00       		.byte	0
 9186 108f 29       		.uleb128 0x29
 9187 1090 8B030000 		.4byte	.LASF219
 9188 1094 01       		.byte	0x1
 9189 1095 C503     		.2byte	0x3c5
 9190 1097 97000000 		.4byte	0x97
 9191 109b 00000000 		.4byte	.LFB87
 9192 109f 90000000 		.4byte	.LFE87-.LFB87
 9193 10a3 01       		.uleb128 0x1
 9194 10a4 9C       		.byte	0x9c
 9195 10a5 F3100000 		.4byte	0x10f3
 9196 10a9 22       		.uleb128 0x22
 9197 10aa 4B070000 		.4byte	.LASF220
 9198 10ae 01       		.byte	0x1
 9199 10af C503     		.2byte	0x3c5
 9200 10b1 73000000 		.4byte	0x73
 9201 10b5 02       		.uleb128 0x2
 9202 10b6 91       		.byte	0x91
 9203 10b7 64       		.sleb128 -28
 9204 10b8 23       		.uleb128 0x23
 9205 10b9 6900     		.ascii	"i\000"
 9206 10bb 01       		.byte	0x1
 9207 10bc C703     		.2byte	0x3c7
 9208 10be 73000000 		.4byte	0x73
 9209 10c2 02       		.uleb128 0x2
 9210 10c3 91       		.byte	0x91
 9211 10c4 74       		.sleb128 -12
 9212 10c5 1F       		.uleb128 0x1f
 9213 10c6 81000000 		.4byte	.LASF221
 9214 10ca 01       		.byte	0x1
 9215 10cb C803     		.2byte	0x3c8
 9216 10cd 97000000 		.4byte	0x97
 9217 10d1 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 210


 9218 10d2 91       		.byte	0x91
 9219 10d3 6B       		.sleb128 -21
 9220 10d4 1F       		.uleb128 0x1f
 9221 10d5 38050000 		.4byte	.LASF222
 9222 10d9 01       		.byte	0x1
 9223 10da C903     		.2byte	0x3c9
 9224 10dc 73000000 		.4byte	0x73
 9225 10e0 02       		.uleb128 0x2
 9226 10e1 91       		.byte	0x91
 9227 10e2 6C       		.sleb128 -20
 9228 10e3 1F       		.uleb128 0x1f
 9229 10e4 8E040000 		.4byte	.LASF223
 9230 10e8 01       		.byte	0x1
 9231 10e9 CA03     		.2byte	0x3ca
 9232 10eb 97000000 		.4byte	0x97
 9233 10ef 02       		.uleb128 0x2
 9234 10f0 91       		.byte	0x91
 9235 10f1 73       		.sleb128 -13
 9236 10f2 00       		.byte	0
 9237 10f3 1E       		.uleb128 0x1e
 9238 10f4 9D0C0000 		.4byte	.LASF224
 9239 10f8 01       		.byte	0x1
 9240 10f9 EF03     		.2byte	0x3ef
 9241 10fb 00000000 		.4byte	.LFB88
 9242 10ff 60000000 		.4byte	.LFE88-.LFB88
 9243 1103 01       		.uleb128 0x1
 9244 1104 9C       		.byte	0x9c
 9245 1105 17110000 		.4byte	0x1117
 9246 1109 23       		.uleb128 0x23
 9247 110a 6900     		.ascii	"i\000"
 9248 110c 01       		.byte	0x1
 9249 110d F103     		.2byte	0x3f1
 9250 110f A3000000 		.4byte	0xa3
 9251 1113 02       		.uleb128 0x2
 9252 1114 91       		.byte	0x91
 9253 1115 76       		.sleb128 -10
 9254 1116 00       		.byte	0
 9255 1117 29       		.uleb128 0x29
 9256 1118 080C0000 		.4byte	.LASF225
 9257 111c 01       		.byte	0x1
 9258 111d 0404     		.2byte	0x404
 9259 111f 97000000 		.4byte	0x97
 9260 1123 00000000 		.4byte	.LFB89
 9261 1127 58000000 		.4byte	.LFE89-.LFB89
 9262 112b 01       		.uleb128 0x1
 9263 112c 9C       		.byte	0x9c
 9264 112d 3F110000 		.4byte	0x113f
 9265 1131 23       		.uleb128 0x23
 9266 1132 6900     		.ascii	"i\000"
 9267 1134 01       		.byte	0x1
 9268 1135 0504     		.2byte	0x405
 9269 1137 A3000000 		.4byte	0xa3
 9270 113b 02       		.uleb128 0x2
 9271 113c 91       		.byte	0x91
 9272 113d 76       		.sleb128 -10
 9273 113e 00       		.byte	0
 9274 113f 2A       		.uleb128 0x2a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 211


 9275 1140 3E050000 		.4byte	.LASF309
 9276 1144 01       		.byte	0x1
 9277 1145 1704     		.2byte	0x417
 9278 1147 97000000 		.4byte	0x97
 9279 114b 00000000 		.4byte	.LFB90
 9280 114f CC000000 		.4byte	.LFE90-.LFB90
 9281 1153 01       		.uleb128 0x1
 9282 1154 9C       		.byte	0x9c
 9283 1155 2B       		.uleb128 0x2b
 9284 1156 CF070000 		.4byte	.LASF226
 9285 115a 01       		.byte	0x1
 9286 115b 4204     		.2byte	0x442
 9287 115d 00000000 		.4byte	.LFB91
 9288 1161 0C000000 		.4byte	.LFE91-.LFB91
 9289 1165 01       		.uleb128 0x1
 9290 1166 9C       		.byte	0x9c
 9291 1167 2B       		.uleb128 0x2b
 9292 1168 1D0A0000 		.4byte	.LASF227
 9293 116c 01       		.byte	0x1
 9294 116d 4904     		.2byte	0x449
 9295 116f 00000000 		.4byte	.LFB92
 9296 1173 0C000000 		.4byte	.LFE92-.LFB92
 9297 1177 01       		.uleb128 0x1
 9298 1178 9C       		.byte	0x9c
 9299 1179 27       		.uleb128 0x27
 9300 117a 700B0000 		.4byte	.LASF229
 9301 117e 01       		.byte	0x1
 9302 117f 5004     		.2byte	0x450
 9303 1181 00000000 		.4byte	.LFB93
 9304 1185 0C000000 		.4byte	.LFE93-.LFB93
 9305 1189 01       		.uleb128 0x1
 9306 118a 9C       		.byte	0x9c
 9307 118b 2B       		.uleb128 0x2b
 9308 118c E5040000 		.4byte	.LASF230
 9309 1190 01       		.byte	0x1
 9310 1191 5704     		.2byte	0x457
 9311 1193 00000000 		.4byte	.LFB94
 9312 1197 0C000000 		.4byte	.LFE94-.LFB94
 9313 119b 01       		.uleb128 0x1
 9314 119c 9C       		.byte	0x9c
 9315 119d 27       		.uleb128 0x27
 9316 119e 83050000 		.4byte	.LASF231
 9317 11a2 01       		.byte	0x1
 9318 11a3 6204     		.2byte	0x462
 9319 11a5 00000000 		.4byte	.LFB95
 9320 11a9 0C000000 		.4byte	.LFE95-.LFB95
 9321 11ad 01       		.uleb128 0x1
 9322 11ae 9C       		.byte	0x9c
 9323 11af 27       		.uleb128 0x27
 9324 11b0 8A0C0000 		.4byte	.LASF232
 9325 11b4 01       		.byte	0x1
 9326 11b5 6704     		.2byte	0x467
 9327 11b7 00000000 		.4byte	.LFB96
 9328 11bb 0C000000 		.4byte	.LFE96-.LFB96
 9329 11bf 01       		.uleb128 0x1
 9330 11c0 9C       		.byte	0x9c
 9331 11c1 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 212


 9332 11c2 8F010000 		.4byte	.LASF233
 9333 11c6 01       		.byte	0x1
 9334 11c7 6B04     		.2byte	0x46b
 9335 11c9 00000000 		.4byte	.LFB97
 9336 11cd 0C000000 		.4byte	.LFE97-.LFB97
 9337 11d1 01       		.uleb128 0x1
 9338 11d2 9C       		.byte	0x9c
 9339 11d3 27       		.uleb128 0x27
 9340 11d4 DA080000 		.4byte	.LASF234
 9341 11d8 01       		.byte	0x1
 9342 11d9 6F04     		.2byte	0x46f
 9343 11db 00000000 		.4byte	.LFB98
 9344 11df 0C000000 		.4byte	.LFE98-.LFB98
 9345 11e3 01       		.uleb128 0x1
 9346 11e4 9C       		.byte	0x9c
 9347 11e5 2C       		.uleb128 0x2c
 9348 11e6 710A0000 		.4byte	.LASF236
 9349 11ea 01       		.byte	0x1
 9350 11eb 7304     		.2byte	0x473
 9351 11ed 00000000 		.4byte	.LFB99
 9352 11f1 BC000000 		.4byte	.LFE99-.LFB99
 9353 11f5 01       		.uleb128 0x1
 9354 11f6 9C       		.byte	0x9c
 9355 11f7 34120000 		.4byte	0x1234
 9356 11fb 1F       		.uleb128 0x1f
 9357 11fc 050F0000 		.4byte	.LASF197
 9358 1200 01       		.byte	0x1
 9359 1201 7504     		.2byte	0x475
 9360 1203 34120000 		.4byte	0x1234
 9361 1207 02       		.uleb128 0x2
 9362 1208 91       		.byte	0x91
 9363 1209 70       		.sleb128 -16
 9364 120a 1F       		.uleb128 0x1f
 9365 120b CA050000 		.4byte	.LASF235
 9366 120f 01       		.byte	0x1
 9367 1210 7604     		.2byte	0x476
 9368 1212 34120000 		.4byte	0x1234
 9369 1216 05       		.uleb128 0x5
 9370 1217 03       		.byte	0x3
 9371 1218 04000000 		.4byte	last_aux_int16.10092
 9372 121c 1A       		.uleb128 0x1a
 9373 121d 42000000 		.4byte	.LBB28
 9374 1221 1A000000 		.4byte	.LBE28-.LBB28
 9375 1225 23       		.uleb128 0x23
 9376 1226 6900     		.ascii	"i\000"
 9377 1228 01       		.byte	0x1
 9378 1229 7D04     		.2byte	0x47d
 9379 122b 97000000 		.4byte	0x97
 9380 122f 02       		.uleb128 0x2
 9381 1230 91       		.byte	0x91
 9382 1231 77       		.sleb128 -9
 9383 1232 00       		.byte	0
 9384 1233 00       		.byte	0
 9385 1234 0E       		.uleb128 0xe
 9386 1235 C7000000 		.4byte	0xc7
 9387 1239 44120000 		.4byte	0x1244
 9388 123d 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 213


 9389 123e 0C010000 		.4byte	0x10c
 9390 1242 02       		.byte	0x2
 9391 1243 00       		.byte	0
 9392 1244 2D       		.uleb128 0x2d
 9393 1245 52110000 		.4byte	.LASF237
 9394 1249 01       		.byte	0x1
 9395 124a 9904     		.2byte	0x499
 9396 124c 00000000 		.4byte	.LFB100
 9397 1250 4C000000 		.4byte	.LFE100-.LFB100
 9398 1254 01       		.uleb128 0x1
 9399 1255 9C       		.byte	0x9c
 9400 1256 6A120000 		.4byte	0x126a
 9401 125a 23       		.uleb128 0x23
 9402 125b 61757800 		.ascii	"aux\000"
 9403 125f 01       		.byte	0x1
 9404 1260 9A04     		.2byte	0x49a
 9405 1262 97000000 		.4byte	0x97
 9406 1266 02       		.uleb128 0x2
 9407 1267 91       		.byte	0x91
 9408 1268 77       		.sleb128 -9
 9409 1269 00       		.byte	0
 9410 126a 27       		.uleb128 0x27
 9411 126b D00A0000 		.4byte	.LASF238
 9412 126f 01       		.byte	0x1
 9413 1270 A204     		.2byte	0x4a2
 9414 1272 00000000 		.4byte	.LFB101
 9415 1276 0C000000 		.4byte	.LFE101-.LFB101
 9416 127a 01       		.uleb128 0x1
 9417 127b 9C       		.byte	0x9c
 9418 127c 27       		.uleb128 0x27
 9419 127d BD0D0000 		.4byte	.LASF239
 9420 1281 01       		.byte	0x1
 9421 1282 A604     		.2byte	0x4a6
 9422 1284 00000000 		.4byte	.LFB102
 9423 1288 0C000000 		.4byte	.LFE102-.LFB102
 9424 128c 01       		.uleb128 0x1
 9425 128d 9C       		.byte	0x9c
 9426 128e 2D       		.uleb128 0x2d
 9427 128f 4B090000 		.4byte	.LASF240
 9428 1293 01       		.byte	0x1
 9429 1294 AB04     		.2byte	0x4ab
 9430 1296 00000000 		.4byte	.LFB103
 9431 129a 84000000 		.4byte	.LFE103-.LFB103
 9432 129e 01       		.uleb128 0x1
 9433 129f 9C       		.byte	0x9c
 9434 12a0 C3120000 		.4byte	0x12c3
 9435 12a4 1F       		.uleb128 0x1f
 9436 12a5 06050000 		.4byte	.LASF181
 9437 12a9 01       		.byte	0x1
 9438 12aa AF04     		.2byte	0x4af
 9439 12ac 5E040000 		.4byte	0x45e
 9440 12b0 02       		.uleb128 0x2
 9441 12b1 91       		.byte	0x91
 9442 12b2 68       		.sleb128 -24
 9443 12b3 1F       		.uleb128 0x1f
 9444 12b4 050F0000 		.4byte	.LASF197
 9445 12b8 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 214


 9446 12b9 B004     		.2byte	0x4b0
 9447 12bb C7000000 		.4byte	0xc7
 9448 12bf 02       		.uleb128 0x2
 9449 12c0 91       		.byte	0x91
 9450 12c1 66       		.sleb128 -26
 9451 12c2 00       		.byte	0
 9452 12c3 27       		.uleb128 0x27
 9453 12c4 F60F0000 		.4byte	.LASF241
 9454 12c8 01       		.byte	0x1
 9455 12c9 C904     		.2byte	0x4c9
 9456 12cb 00000000 		.4byte	.LFB104
 9457 12cf 0C000000 		.4byte	.LFE104-.LFB104
 9458 12d3 01       		.uleb128 0x1
 9459 12d4 9C       		.byte	0x9c
 9460 12d5 27       		.uleb128 0x27
 9461 12d6 58070000 		.4byte	.LASF242
 9462 12da 01       		.byte	0x1
 9463 12db CD04     		.2byte	0x4cd
 9464 12dd 00000000 		.4byte	.LFB105
 9465 12e1 0C000000 		.4byte	.LFE105-.LFB105
 9466 12e5 01       		.uleb128 0x1
 9467 12e6 9C       		.byte	0x9c
 9468 12e7 2D       		.uleb128 0x2d
 9469 12e8 CB100000 		.4byte	.LASF243
 9470 12ec 01       		.byte	0x1
 9471 12ed D404     		.2byte	0x4d4
 9472 12ef 00000000 		.4byte	.LFB106
 9473 12f3 C4000000 		.4byte	.LFE106-.LFB106
 9474 12f7 01       		.uleb128 0x1
 9475 12f8 9C       		.byte	0x9c
 9476 12f9 49130000 		.4byte	0x1349
 9477 12fd 1F       		.uleb128 0x1f
 9478 12fe 06050000 		.4byte	.LASF181
 9479 1302 01       		.byte	0x1
 9480 1303 D904     		.2byte	0x4d9
 9481 1305 49130000 		.4byte	0x1349
 9482 1309 02       		.uleb128 0x2
 9483 130a 91       		.byte	0x91
 9484 130b 5C       		.sleb128 -36
 9485 130c 1F       		.uleb128 0x1f
 9486 130d 9A070000 		.4byte	.LASF180
 9487 1311 01       		.byte	0x1
 9488 1312 DA04     		.2byte	0x4da
 9489 1314 97000000 		.4byte	0x97
 9490 1318 02       		.uleb128 0x2
 9491 1319 91       		.byte	0x91
 9492 131a 76       		.sleb128 -10
 9493 131b 1F       		.uleb128 0x1f
 9494 131c 28020000 		.4byte	.LASF244
 9495 1320 01       		.byte	0x1
 9496 1321 DC04     		.2byte	0x4dc
 9497 1323 AF000000 		.4byte	0xaf
 9498 1327 02       		.uleb128 0x2
 9499 1328 91       		.byte	0x91
 9500 1329 70       		.sleb128 -16
 9501 132a 1F       		.uleb128 0x1f
 9502 132b F00F0000 		.4byte	.LASF245
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 215


 9503 132f 01       		.byte	0x1
 9504 1330 DC04     		.2byte	0x4dc
 9505 1332 AF000000 		.4byte	0xaf
 9506 1336 02       		.uleb128 0x2
 9507 1337 91       		.byte	0x91
 9508 1338 6C       		.sleb128 -20
 9509 1339 1F       		.uleb128 0x1f
 9510 133a A8030000 		.4byte	.LASF246
 9511 133e 01       		.byte	0x1
 9512 133f DD04     		.2byte	0x4dd
 9513 1341 97000000 		.4byte	0x97
 9514 1345 02       		.uleb128 0x2
 9515 1346 91       		.byte	0x91
 9516 1347 77       		.sleb128 -9
 9517 1348 00       		.byte	0
 9518 1349 0E       		.uleb128 0xe
 9519 134a 97000000 		.4byte	0x97
 9520 134e 59130000 		.4byte	0x1359
 9521 1352 0F       		.uleb128 0xf
 9522 1353 0C010000 		.4byte	0x10c
 9523 1357 0F       		.byte	0xf
 9524 1358 00       		.byte	0
 9525 1359 2E       		.uleb128 0x2e
 9526 135a 2F060000 		.4byte	.LASF247
 9527 135e 01       		.byte	0x1
 9528 135f FE04     		.2byte	0x4fe
 9529 1361 C7000000 		.4byte	0xc7
 9530 1365 00000000 		.4byte	.LFB107
 9531 1369 A8000000 		.4byte	.LFE107-.LFB107
 9532 136d 01       		.uleb128 0x1
 9533 136e 9C       		.byte	0x9c
 9534 136f CE130000 		.4byte	0x13ce
 9535 1373 1F       		.uleb128 0x1f
 9536 1374 06050000 		.4byte	.LASF181
 9537 1378 01       		.byte	0x1
 9538 1379 0005     		.2byte	0x500
 9539 137b 49130000 		.4byte	0x1349
 9540 137f 02       		.uleb128 0x2
 9541 1380 91       		.byte	0x91
 9542 1381 5C       		.sleb128 -36
 9543 1382 1F       		.uleb128 0x1f
 9544 1383 9A070000 		.4byte	.LASF180
 9545 1387 01       		.byte	0x1
 9546 1388 0105     		.2byte	0x501
 9547 138a 97000000 		.4byte	0x97
 9548 138e 02       		.uleb128 0x2
 9549 138f 91       		.byte	0x91
 9550 1390 74       		.sleb128 -12
 9551 1391 1F       		.uleb128 0x1f
 9552 1392 79050000 		.4byte	.LASF248
 9553 1396 01       		.byte	0x1
 9554 1397 0205     		.2byte	0x502
 9555 1399 C7000000 		.4byte	0xc7
 9556 139d 02       		.uleb128 0x2
 9557 139e 91       		.byte	0x91
 9558 139f 76       		.sleb128 -10
 9559 13a0 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 216


 9560 13a1 28020000 		.4byte	.LASF244
 9561 13a5 01       		.byte	0x1
 9562 13a6 0305     		.2byte	0x503
 9563 13a8 AF000000 		.4byte	0xaf
 9564 13ac 02       		.uleb128 0x2
 9565 13ad 91       		.byte	0x91
 9566 13ae 70       		.sleb128 -16
 9567 13af 1F       		.uleb128 0x1f
 9568 13b0 F00F0000 		.4byte	.LASF245
 9569 13b4 01       		.byte	0x1
 9570 13b5 0305     		.2byte	0x503
 9571 13b7 AF000000 		.4byte	0xaf
 9572 13bb 02       		.uleb128 0x2
 9573 13bc 91       		.byte	0x91
 9574 13bd 6C       		.sleb128 -20
 9575 13be 1F       		.uleb128 0x1f
 9576 13bf A8030000 		.4byte	.LASF246
 9577 13c3 01       		.byte	0x1
 9578 13c4 0405     		.2byte	0x504
 9579 13c6 97000000 		.4byte	0x97
 9580 13ca 02       		.uleb128 0x2
 9581 13cb 91       		.byte	0x91
 9582 13cc 75       		.sleb128 -11
 9583 13cd 00       		.byte	0
 9584 13ce 27       		.uleb128 0x27
 9585 13cf 94000000 		.4byte	.LASF249
 9586 13d3 01       		.byte	0x1
 9587 13d4 2405     		.2byte	0x524
 9588 13d6 00000000 		.4byte	.LFB108
 9589 13da 0C000000 		.4byte	.LFE108-.LFB108
 9590 13de 01       		.uleb128 0x1
 9591 13df 9C       		.byte	0x9c
 9592 13e0 2D       		.uleb128 0x2d
 9593 13e1 22030000 		.4byte	.LASF250
 9594 13e5 01       		.byte	0x1
 9595 13e6 2805     		.2byte	0x528
 9596 13e8 00000000 		.4byte	.LFB109
 9597 13ec 20000000 		.4byte	.LFE109-.LFB109
 9598 13f0 01       		.uleb128 0x1
 9599 13f1 9C       		.byte	0x9c
 9600 13f2 06140000 		.4byte	0x1406
 9601 13f6 1F       		.uleb128 0x1f
 9602 13f7 06050000 		.4byte	.LASF181
 9603 13fb 01       		.byte	0x1
 9604 13fc 2A05     		.2byte	0x52a
 9605 13fe D7040000 		.4byte	0x4d7
 9606 1402 02       		.uleb128 0x2
 9607 1403 91       		.byte	0x91
 9608 1404 74       		.sleb128 -12
 9609 1405 00       		.byte	0
 9610 1406 27       		.uleb128 0x27
 9611 1407 BB050000 		.4byte	.LASF251
 9612 140b 01       		.byte	0x1
 9613 140c 3605     		.2byte	0x536
 9614 140e 00000000 		.4byte	.LFB110
 9615 1412 0C000000 		.4byte	.LFE110-.LFB110
 9616 1416 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 217


 9617 1417 9C       		.byte	0x9c
 9618 1418 2D       		.uleb128 0x2d
 9619 1419 A70C0000 		.4byte	.LASF252
 9620 141d 01       		.byte	0x1
 9621 141e 3A05     		.2byte	0x53a
 9622 1420 00000000 		.4byte	.LFB111
 9623 1424 94000000 		.4byte	.LFE111-.LFB111
 9624 1428 01       		.uleb128 0x1
 9625 1429 9C       		.byte	0x9c
 9626 142a 5C140000 		.4byte	0x145c
 9627 142e 1F       		.uleb128 0x1f
 9628 142f 9A070000 		.4byte	.LASF180
 9629 1433 01       		.byte	0x1
 9630 1434 3C05     		.2byte	0x53c
 9631 1436 97000000 		.4byte	0x97
 9632 143a 02       		.uleb128 0x2
 9633 143b 91       		.byte	0x91
 9634 143c 77       		.sleb128 -9
 9635 143d 1F       		.uleb128 0x1f
 9636 143e 06050000 		.4byte	.LASF181
 9637 1442 01       		.byte	0x1
 9638 1443 3D05     		.2byte	0x53d
 9639 1445 D7040000 		.4byte	0x4d7
 9640 1449 02       		.uleb128 0x2
 9641 144a 91       		.byte	0x91
 9642 144b 74       		.sleb128 -12
 9643 144c 1F       		.uleb128 0x1f
 9644 144d A80D0000 		.4byte	.LASF209
 9645 1451 01       		.byte	0x1
 9646 1452 3E05     		.2byte	0x53e
 9647 1454 97000000 		.4byte	0x97
 9648 1458 02       		.uleb128 0x2
 9649 1459 91       		.byte	0x91
 9650 145a 76       		.sleb128 -10
 9651 145b 00       		.byte	0
 9652 145c 2D       		.uleb128 0x2d
 9653 145d A5010000 		.4byte	.LASF253
 9654 1461 01       		.byte	0x1
 9655 1462 5C05     		.2byte	0x55c
 9656 1464 00000000 		.4byte	.LFB112
 9657 1468 60000000 		.4byte	.LFE112-.LFB112
 9658 146c 01       		.uleb128 0x1
 9659 146d 9C       		.byte	0x9c
 9660 146e 91140000 		.4byte	0x1491
 9661 1472 1F       		.uleb128 0x1f
 9662 1473 06050000 		.4byte	.LASF181
 9663 1477 01       		.byte	0x1
 9664 1478 5E05     		.2byte	0x55e
 9665 147a 5E040000 		.4byte	0x45e
 9666 147e 02       		.uleb128 0x2
 9667 147f 91       		.byte	0x91
 9668 1480 70       		.sleb128 -16
 9669 1481 1F       		.uleb128 0x1f
 9670 1482 050F0000 		.4byte	.LASF197
 9671 1486 01       		.byte	0x1
 9672 1487 5F05     		.2byte	0x55f
 9673 1489 C7000000 		.4byte	0xc7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 218


 9674 148d 02       		.uleb128 0x2
 9675 148e 91       		.byte	0x91
 9676 148f 6E       		.sleb128 -18
 9677 1490 00       		.byte	0
 9678 1491 27       		.uleb128 0x27
 9679 1492 25010000 		.4byte	.LASF254
 9680 1496 01       		.byte	0x1
 9681 1497 7205     		.2byte	0x572
 9682 1499 00000000 		.4byte	.LFB113
 9683 149d 0C000000 		.4byte	.LFE113-.LFB113
 9684 14a1 01       		.uleb128 0x1
 9685 14a2 9C       		.byte	0x9c
 9686 14a3 27       		.uleb128 0x27
 9687 14a4 970F0000 		.4byte	.LASF255
 9688 14a8 01       		.byte	0x1
 9689 14a9 7605     		.2byte	0x576
 9690 14ab 00000000 		.4byte	.LFB114
 9691 14af 0C000000 		.4byte	.LFE114-.LFB114
 9692 14b3 01       		.uleb128 0x1
 9693 14b4 9C       		.byte	0x9c
 9694 14b5 27       		.uleb128 0x27
 9695 14b6 910E0000 		.4byte	.LASF256
 9696 14ba 01       		.byte	0x1
 9697 14bb 7905     		.2byte	0x579
 9698 14bd 00000000 		.4byte	.LFB115
 9699 14c1 0C000000 		.4byte	.LFE115-.LFB115
 9700 14c5 01       		.uleb128 0x1
 9701 14c6 9C       		.byte	0x9c
 9702 14c7 27       		.uleb128 0x27
 9703 14c8 B2020000 		.4byte	.LASF257
 9704 14cc 01       		.byte	0x1
 9705 14cd 7C05     		.2byte	0x57c
 9706 14cf 00000000 		.4byte	.LFB116
 9707 14d3 0C000000 		.4byte	.LFE116-.LFB116
 9708 14d7 01       		.uleb128 0x1
 9709 14d8 9C       		.byte	0x9c
 9710 14d9 27       		.uleb128 0x27
 9711 14da EA020000 		.4byte	.LASF258
 9712 14de 01       		.byte	0x1
 9713 14df 7F05     		.2byte	0x57f
 9714 14e1 00000000 		.4byte	.LFB117
 9715 14e5 0C000000 		.4byte	.LFE117-.LFB117
 9716 14e9 01       		.uleb128 0x1
 9717 14ea 9C       		.byte	0x9c
 9718 14eb 1E       		.uleb128 0x1e
 9719 14ec 7C020000 		.4byte	.LASF259
 9720 14f0 01       		.byte	0x1
 9721 14f1 8305     		.2byte	0x583
 9722 14f3 00000000 		.4byte	.LFB118
 9723 14f7 54010000 		.4byte	.LFE118-.LFB118
 9724 14fb 01       		.uleb128 0x1
 9725 14fc 9C       		.byte	0x9c
 9726 14fd 40150000 		.4byte	0x1540
 9727 1501 22       		.uleb128 0x22
 9728 1502 1F060000 		.4byte	.LASF260
 9729 1506 01       		.byte	0x1
 9730 1507 8305     		.2byte	0x583
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 219


 9731 1509 A3000000 		.4byte	0xa3
 9732 150d 04       		.uleb128 0x4
 9733 150e 91       		.byte	0x91
 9734 150f 9EE37E   		.sleb128 -20066
 9735 1512 23       		.uleb128 0x23
 9736 1513 6900     		.ascii	"i\000"
 9737 1515 01       		.byte	0x1
 9738 1516 8505     		.2byte	0x585
 9739 1518 97000000 		.4byte	0x97
 9740 151c 02       		.uleb128 0x2
 9741 151d 91       		.byte	0x91
 9742 151e 77       		.sleb128 -9
 9743 151f 1F       		.uleb128 0x1f
 9744 1520 94030000 		.4byte	.LASF261
 9745 1524 01       		.byte	0x1
 9746 1525 8605     		.2byte	0x586
 9747 1527 690A0000 		.4byte	0xa69
 9748 152b 02       		.uleb128 0x2
 9749 152c 91       		.byte	0x91
 9750 152d 44       		.sleb128 -60
 9751 152e 1F       		.uleb128 0x1f
 9752 152f 74070000 		.4byte	.LASF166
 9753 1533 01       		.byte	0x1
 9754 1534 8705     		.2byte	0x587
 9755 1536 E2080000 		.4byte	0x8e2
 9756 153a 04       		.uleb128 0x4
 9757 153b 91       		.byte	0x91
 9758 153c A4E37E   		.sleb128 -20060
 9759 153f 00       		.byte	0
 9760 1540 26       		.uleb128 0x26
 9761 1541 49030000 		.4byte	.LASF262
 9762 1545 01       		.byte	0x1
 9763 1546 9F05     		.2byte	0x59f
 9764 1548 00000000 		.4byte	.LFB119
 9765 154c 14000000 		.4byte	.LFE119-.LFB119
 9766 1550 01       		.uleb128 0x1
 9767 1551 9C       		.byte	0x9c
 9768 1552 66150000 		.4byte	0x1566
 9769 1556 22       		.uleb128 0x22
 9770 1557 1F060000 		.4byte	.LASF260
 9771 155b 01       		.byte	0x1
 9772 155c 9F05     		.2byte	0x59f
 9773 155e A3000000 		.4byte	0xa3
 9774 1562 02       		.uleb128 0x2
 9775 1563 91       		.byte	0x91
 9776 1564 76       		.sleb128 -10
 9777 1565 00       		.byte	0
 9778 1566 2D       		.uleb128 0x2d
 9779 1567 21090000 		.4byte	.LASF263
 9780 156b 01       		.byte	0x1
 9781 156c A805     		.2byte	0x5a8
 9782 156e 00000000 		.4byte	.LFB120
 9783 1572 50010000 		.4byte	.LFE120-.LFB120
 9784 1576 01       		.uleb128 0x1
 9785 1577 9C       		.byte	0x9c
 9786 1578 8A150000 		.4byte	0x158a
 9787 157c 23       		.uleb128 0x23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 220


 9788 157d 6900     		.ascii	"i\000"
 9789 157f 01       		.byte	0x1
 9790 1580 AA05     		.2byte	0x5aa
 9791 1582 97000000 		.4byte	0x97
 9792 1586 02       		.uleb128 0x2
 9793 1587 91       		.byte	0x91
 9794 1588 6F       		.sleb128 -17
 9795 1589 00       		.byte	0
 9796 158a 2D       		.uleb128 0x2d
 9797 158b A5000000 		.4byte	.LASF264
 9798 158f 01       		.byte	0x1
 9799 1590 CF05     		.2byte	0x5cf
 9800 1592 00000000 		.4byte	.LFB121
 9801 1596 94010000 		.4byte	.LFE121-.LFB121
 9802 159a 01       		.uleb128 0x1
 9803 159b 9C       		.byte	0x9c
 9804 159c EC150000 		.4byte	0x15ec
 9805 15a0 1F       		.uleb128 0x1f
 9806 15a1 79050000 		.4byte	.LASF248
 9807 15a5 01       		.byte	0x1
 9808 15a6 D105     		.2byte	0x5d1
 9809 15a8 C7000000 		.4byte	0xc7
 9810 15ac 02       		.uleb128 0x2
 9811 15ad 91       		.byte	0x91
 9812 15ae 5C       		.sleb128 -36
 9813 15af 1F       		.uleb128 0x1f
 9814 15b0 7B040000 		.4byte	.LASF265
 9815 15b4 01       		.byte	0x1
 9816 15b5 D205     		.2byte	0x5d2
 9817 15b7 D3000000 		.4byte	0xd3
 9818 15bb 02       		.uleb128 0x2
 9819 15bc 91       		.byte	0x91
 9820 15bd 64       		.sleb128 -28
 9821 15be 1F       		.uleb128 0x1f
 9822 15bf D9090000 		.4byte	.LASF266
 9823 15c3 01       		.byte	0x1
 9824 15c4 D305     		.2byte	0x5d3
 9825 15c6 D3000000 		.4byte	0xd3
 9826 15ca 02       		.uleb128 0x2
 9827 15cb 91       		.byte	0x91
 9828 15cc 58       		.sleb128 -40
 9829 15cd 1F       		.uleb128 0x1f
 9830 15ce 6D040000 		.4byte	.LASF267
 9831 15d2 01       		.byte	0x1
 9832 15d3 D405     		.2byte	0x5d4
 9833 15d5 D3000000 		.4byte	0xd3
 9834 15d9 02       		.uleb128 0x2
 9835 15da 91       		.byte	0x91
 9836 15db 60       		.sleb128 -32
 9837 15dc 1F       		.uleb128 0x1f
 9838 15dd 690A0000 		.4byte	.LASF268
 9839 15e1 01       		.byte	0x1
 9840 15e2 D505     		.2byte	0x5d5
 9841 15e4 C7000000 		.4byte	0xc7
 9842 15e8 02       		.uleb128 0x2
 9843 15e9 91       		.byte	0x91
 9844 15ea 5E       		.sleb128 -34
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 221


 9845 15eb 00       		.byte	0
 9846 15ec 2F       		.uleb128 0x2f
 9847 15ed F1000000 		.4byte	.LASF269
 9848 15f1 01       		.byte	0x1
 9849 15f2 0A06     		.2byte	0x60a
 9850 15f4 00000000 		.4byte	.LFB122
 9851 15f8 24000000 		.4byte	.LFE122-.LFB122
 9852 15fc 01       		.uleb128 0x1
 9853 15fd 9C       		.byte	0x9c
 9854 15fe 2F       		.uleb128 0x2f
 9855 15ff A5090000 		.4byte	.LASF270
 9856 1603 01       		.byte	0x1
 9857 1604 1006     		.2byte	0x610
 9858 1606 00000000 		.4byte	.LFB123
 9859 160a 40000000 		.4byte	.LFE123-.LFB123
 9860 160e 01       		.uleb128 0x1
 9861 160f 9C       		.byte	0x9c
 9862 1610 30       		.uleb128 0x30
 9863 1611 E10A0000 		.4byte	.LASF271
 9864 1615 01       		.byte	0x1
 9865 1616 1D06     		.2byte	0x61d
 9866 1618 97000000 		.4byte	0x97
 9867 161c 00000000 		.4byte	.LFB124
 9868 1620 0E000000 		.4byte	.LFE124-.LFB124
 9869 1624 01       		.uleb128 0x1
 9870 1625 9C       		.byte	0x9c
 9871 1626 26       		.uleb128 0x26
 9872 1627 D5060000 		.4byte	.LASF272
 9873 162b 01       		.byte	0x1
 9874 162c 2706     		.2byte	0x627
 9875 162e 00000000 		.4byte	.LFB125
 9876 1632 12000000 		.4byte	.LFE125-.LFB125
 9877 1636 01       		.uleb128 0x1
 9878 1637 9C       		.byte	0x9c
 9879 1638 4C160000 		.4byte	0x164c
 9880 163c 22       		.uleb128 0x22
 9881 163d AB050000 		.4byte	.LASF273
 9882 1641 01       		.byte	0x1
 9883 1642 2706     		.2byte	0x627
 9884 1644 73000000 		.4byte	0x73
 9885 1648 02       		.uleb128 0x2
 9886 1649 91       		.byte	0x91
 9887 164a 74       		.sleb128 -12
 9888 164b 00       		.byte	0
 9889 164c 1E       		.uleb128 0x1e
 9890 164d E60B0000 		.4byte	.LASF274
 9891 1651 01       		.byte	0x1
 9892 1652 7806     		.2byte	0x678
 9893 1654 00000000 		.4byte	.LFB126
 9894 1658 84000000 		.4byte	.LFE126-.LFB126
 9895 165c 01       		.uleb128 0x1
 9896 165d 9C       		.byte	0x9c
 9897 165e 9F160000 		.4byte	0x169f
 9898 1662 22       		.uleb128 0x22
 9899 1663 80070000 		.4byte	.LASF134
 9900 1667 01       		.byte	0x1
 9901 1668 7806     		.2byte	0x678
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 222


 9902 166a 97000000 		.4byte	0x97
 9903 166e 02       		.uleb128 0x2
 9904 166f 91       		.byte	0x91
 9905 1670 5F       		.sleb128 -33
 9906 1671 1F       		.uleb128 0x1f
 9907 1672 06050000 		.4byte	.LASF181
 9908 1676 01       		.byte	0x1
 9909 1677 7A06     		.2byte	0x67a
 9910 1679 5E040000 		.4byte	0x45e
 9911 167d 02       		.uleb128 0x2
 9912 167e 91       		.byte	0x91
 9913 167f 68       		.sleb128 -24
 9914 1680 1F       		.uleb128 0x1f
 9915 1681 9A070000 		.4byte	.LASF180
 9916 1685 01       		.byte	0x1
 9917 1686 7B06     		.2byte	0x67b
 9918 1688 97000000 		.4byte	0x97
 9919 168c 02       		.uleb128 0x2
 9920 168d 91       		.byte	0x91
 9921 168e 6F       		.sleb128 -17
 9922 168f 1F       		.uleb128 0x1f
 9923 1690 050F0000 		.4byte	.LASF197
 9924 1694 01       		.byte	0x1
 9925 1695 7C06     		.2byte	0x67c
 9926 1697 C7000000 		.4byte	0xc7
 9927 169b 02       		.uleb128 0x2
 9928 169c 91       		.byte	0x91
 9929 169d 66       		.sleb128 -26
 9930 169e 00       		.byte	0
 9931 169f 2F       		.uleb128 0x2f
 9932 16a0 59000000 		.4byte	.LASF275
 9933 16a4 01       		.byte	0x1
 9934 16a5 9206     		.2byte	0x692
 9935 16a7 00000000 		.4byte	.LFB127
 9936 16ab 30000000 		.4byte	.LFE127-.LFB127
 9937 16af 01       		.uleb128 0x1
 9938 16b0 9C       		.byte	0x9c
 9939 16b1 27       		.uleb128 0x27
 9940 16b2 26050000 		.4byte	.LASF276
 9941 16b6 01       		.byte	0x1
 9942 16b7 A006     		.2byte	0x6a0
 9943 16b9 00000000 		.4byte	.LFB128
 9944 16bd 0C000000 		.4byte	.LFE128-.LFB128
 9945 16c1 01       		.uleb128 0x1
 9946 16c2 9C       		.byte	0x9c
 9947 16c3 31       		.uleb128 0x31
 9948 16c4 98090000 		.4byte	.LASF277
 9949 16c8 08       		.byte	0x8
 9950 16c9 1207     		.2byte	0x712
 9951 16cb CF160000 		.4byte	0x16cf
 9952 16cf 06       		.uleb128 0x6
 9953 16d0 81000000 		.4byte	0x81
 9954 16d4 31       		.uleb128 0x31
 9955 16d5 5F100000 		.4byte	.LASF278
 9956 16d9 07       		.byte	0x7
 9957 16da 6D01     		.2byte	0x16d
 9958 16dc AD060000 		.4byte	0x6ad
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 223


 9959 16e0 31       		.uleb128 0x31
 9960 16e1 830E0000 		.4byte	.LASF279
 9961 16e5 07       		.byte	0x7
 9962 16e6 6D01     		.2byte	0x16d
 9963 16e8 AD060000 		.4byte	0x6ad
 9964 16ec 31       		.uleb128 0x31
 9965 16ed 74000000 		.4byte	.LASF280
 9966 16f1 07       		.byte	0x7
 9967 16f2 6601     		.2byte	0x166
 9968 16f4 88030000 		.4byte	0x388
 9969 16f8 31       		.uleb128 0x31
 9970 16f9 59100000 		.4byte	.LASF281
 9971 16fd 07       		.byte	0x7
 9972 16fe 6C01     		.2byte	0x16c
 9973 1700 7D050000 		.4byte	0x57d
 9974 1704 31       		.uleb128 0x31
 9975 1705 FF090000 		.4byte	.LASF282
 9976 1709 07       		.byte	0x7
 9977 170a 6C01     		.2byte	0x16c
 9978 170c 7D050000 		.4byte	0x57d
 9979 1710 31       		.uleb128 0x31
 9980 1711 55020000 		.4byte	.LASF283
 9981 1715 07       		.byte	0x7
 9982 1716 6E01     		.2byte	0x16e
 9983 1718 A3000000 		.4byte	0xa3
 9984 171c 31       		.uleb128 0x31
 9985 171d 270E0000 		.4byte	.LASF284
 9986 1721 07       		.byte	0x7
 9987 1722 6F01     		.2byte	0x16f
 9988 1724 A3000000 		.4byte	0xa3
 9989 1728 31       		.uleb128 0x31
 9990 1729 B2030000 		.4byte	.LASF285
 9991 172d 07       		.byte	0x7
 9992 172e 6701     		.2byte	0x167
 9993 1730 97000000 		.4byte	0x97
 9994 1734 0E       		.uleb128 0xe
 9995 1735 97000000 		.4byte	0x97
 9996 1739 44170000 		.4byte	0x1744
 9997 173d 0F       		.uleb128 0xf
 9998 173e 0C010000 		.4byte	0x10c
 9999 1742 02       		.byte	0x2
 10000 1743 00       		.byte	0
 10001 1744 31       		.uleb128 0x31
 10002 1745 5C090000 		.4byte	.LASF286
 10003 1749 07       		.byte	0x7
 10004 174a 2001     		.2byte	0x120
 10005 174c 34170000 		.4byte	0x1734
 10006 1750 31       		.uleb128 0x31
 10007 1751 C5060000 		.4byte	.LASF287
 10008 1755 07       		.byte	0x7
 10009 1756 6801     		.2byte	0x168
 10010 1758 97000000 		.4byte	0x97
 10011 175c 31       		.uleb128 0x31
 10012 175d 410D0000 		.4byte	.LASF288
 10013 1761 07       		.byte	0x7
 10014 1762 2C01     		.2byte	0x12c
 10015 1764 950D0000 		.4byte	0xd95
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 224


 10016 1768 31       		.uleb128 0x31
 10017 1769 FA020000 		.4byte	.LASF289
 10018 176d 07       		.byte	0x7
 10019 176e 2D01     		.2byte	0x12d
 10020 1770 950D0000 		.4byte	0xd95
 10021 1774 31       		.uleb128 0x31
 10022 1775 30100000 		.4byte	.LASF290
 10023 1779 07       		.byte	0x7
 10024 177a 3001     		.2byte	0x130
 10025 177c 950D0000 		.4byte	0xd95
 10026 1780 31       		.uleb128 0x31
 10027 1781 9D100000 		.4byte	.LASF291
 10028 1785 07       		.byte	0x7
 10029 1786 6A01     		.2byte	0x16a
 10030 1788 97000000 		.4byte	0x97
 10031 178c 31       		.uleb128 0x31
 10032 178d 6B050000 		.4byte	.LASF292
 10033 1791 07       		.byte	0x7
 10034 1792 5401     		.2byte	0x154
 10035 1794 D3000000 		.4byte	0xd3
 10036 1798 31       		.uleb128 0x31
 10037 1799 DF0B0000 		.4byte	.LASF293
 10038 179d 07       		.byte	0x7
 10039 179e 5501     		.2byte	0x155
 10040 17a0 D7040000 		.4byte	0x4d7
 10041 17a4 31       		.uleb128 0x31
 10042 17a5 B3100000 		.4byte	.LASF294
 10043 17a9 07       		.byte	0x7
 10044 17aa 5501     		.2byte	0x155
 10045 17ac D7040000 		.4byte	0x4d7
 10046 17b0 31       		.uleb128 0x31
 10047 17b1 8E090000 		.4byte	.LASF295
 10048 17b5 07       		.byte	0x7
 10049 17b6 5501     		.2byte	0x155
 10050 17b8 D7040000 		.4byte	0x4d7
 10051 17bc 31       		.uleb128 0x31
 10052 17bd 38110000 		.4byte	.LASF296
 10053 17c1 07       		.byte	0x7
 10054 17c2 5601     		.2byte	0x156
 10055 17c4 97000000 		.4byte	0x97
 10056 17c8 31       		.uleb128 0x31
 10057 17c9 49020000 		.4byte	.LASF297
 10058 17cd 07       		.byte	0x7
 10059 17ce 5601     		.2byte	0x156
 10060 17d0 97000000 		.4byte	0x97
 10061 17d4 31       		.uleb128 0x31
 10062 17d5 CA010000 		.4byte	.LASF298
 10063 17d9 07       		.byte	0x7
 10064 17da 5601     		.2byte	0x156
 10065 17dc 97000000 		.4byte	0x97
 10066 17e0 31       		.uleb128 0x31
 10067 17e1 35020000 		.4byte	.LASF299
 10068 17e5 07       		.byte	0x7
 10069 17e6 8101     		.2byte	0x181
 10070 17e8 C7000000 		.4byte	0xc7
 10071 17ec 31       		.uleb128 0x31
 10072 17ed 3F020000 		.4byte	.LASF300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 225


 10073 17f1 07       		.byte	0x7
 10074 17f2 8201     		.2byte	0x182
 10075 17f4 C7000000 		.4byte	0xc7
 10076 17f8 31       		.uleb128 0x31
 10077 17f9 13030000 		.4byte	.LASF301
 10078 17fd 07       		.byte	0x7
 10079 17fe 6B01     		.2byte	0x16b
 10080 1800 D3000000 		.4byte	0xd3
 10081 1804 31       		.uleb128 0x31
 10082 1805 C00B0000 		.4byte	.LASF302
 10083 1809 07       		.byte	0x7
 10084 180a 8401     		.2byte	0x184
 10085 180c 840D0000 		.4byte	0xd84
 10086 1810 32       		.uleb128 0x32
 10087 1811 0F0F0000 		.4byte	.LASF303
 10088 1815 01       		.byte	0x1
 10089 1816 33       		.byte	0x33
 10090 1817 21180000 		.4byte	0x1821
 10091 181b 05       		.uleb128 0x5
 10092 181c 03       		.byte	0x3
 10093 181d 00000000 		.4byte	EEPROM_ADDR
 10094 1821 07       		.uleb128 0x7
 10095 1822 04       		.byte	0x4
 10096 1823 F4000000 		.4byte	0xf4
 10097 1827 00       		.byte	0
 10098              		.section	.debug_abbrev,"",%progbits
 10099              	.Ldebug_abbrev0:
 10100 0000 01       		.uleb128 0x1
 10101 0001 11       		.uleb128 0x11
 10102 0002 01       		.byte	0x1
 10103 0003 25       		.uleb128 0x25
 10104 0004 0E       		.uleb128 0xe
 10105 0005 13       		.uleb128 0x13
 10106 0006 0B       		.uleb128 0xb
 10107 0007 03       		.uleb128 0x3
 10108 0008 0E       		.uleb128 0xe
 10109 0009 1B       		.uleb128 0x1b
 10110 000a 0E       		.uleb128 0xe
 10111 000b 55       		.uleb128 0x55
 10112 000c 17       		.uleb128 0x17
 10113 000d 11       		.uleb128 0x11
 10114 000e 01       		.uleb128 0x1
 10115 000f 10       		.uleb128 0x10
 10116 0010 17       		.uleb128 0x17
 10117 0011 00       		.byte	0
 10118 0012 00       		.byte	0
 10119 0013 02       		.uleb128 0x2
 10120 0014 24       		.uleb128 0x24
 10121 0015 00       		.byte	0
 10122 0016 0B       		.uleb128 0xb
 10123 0017 0B       		.uleb128 0xb
 10124 0018 3E       		.uleb128 0x3e
 10125 0019 0B       		.uleb128 0xb
 10126 001a 03       		.uleb128 0x3
 10127 001b 0E       		.uleb128 0xe
 10128 001c 00       		.byte	0
 10129 001d 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 226


 10130 001e 03       		.uleb128 0x3
 10131 001f 16       		.uleb128 0x16
 10132 0020 00       		.byte	0
 10133 0021 03       		.uleb128 0x3
 10134 0022 0E       		.uleb128 0xe
 10135 0023 3A       		.uleb128 0x3a
 10136 0024 0B       		.uleb128 0xb
 10137 0025 3B       		.uleb128 0x3b
 10138 0026 0B       		.uleb128 0xb
 10139 0027 49       		.uleb128 0x49
 10140 0028 13       		.uleb128 0x13
 10141 0029 00       		.byte	0
 10142 002a 00       		.byte	0
 10143 002b 04       		.uleb128 0x4
 10144 002c 24       		.uleb128 0x24
 10145 002d 00       		.byte	0
 10146 002e 0B       		.uleb128 0xb
 10147 002f 0B       		.uleb128 0xb
 10148 0030 3E       		.uleb128 0x3e
 10149 0031 0B       		.uleb128 0xb
 10150 0032 03       		.uleb128 0x3
 10151 0033 08       		.uleb128 0x8
 10152 0034 00       		.byte	0
 10153 0035 00       		.byte	0
 10154 0036 05       		.uleb128 0x5
 10155 0037 16       		.uleb128 0x16
 10156 0038 00       		.byte	0
 10157 0039 03       		.uleb128 0x3
 10158 003a 0E       		.uleb128 0xe
 10159 003b 3A       		.uleb128 0x3a
 10160 003c 0B       		.uleb128 0xb
 10161 003d 3B       		.uleb128 0x3b
 10162 003e 05       		.uleb128 0x5
 10163 003f 49       		.uleb128 0x49
 10164 0040 13       		.uleb128 0x13
 10165 0041 00       		.byte	0
 10166 0042 00       		.byte	0
 10167 0043 06       		.uleb128 0x6
 10168 0044 35       		.uleb128 0x35
 10169 0045 00       		.byte	0
 10170 0046 49       		.uleb128 0x49
 10171 0047 13       		.uleb128 0x13
 10172 0048 00       		.byte	0
 10173 0049 00       		.byte	0
 10174 004a 07       		.uleb128 0x7
 10175 004b 0F       		.uleb128 0xf
 10176 004c 00       		.byte	0
 10177 004d 0B       		.uleb128 0xb
 10178 004e 0B       		.uleb128 0xb
 10179 004f 49       		.uleb128 0x49
 10180 0050 13       		.uleb128 0x13
 10181 0051 00       		.byte	0
 10182 0052 00       		.byte	0
 10183 0053 08       		.uleb128 0x8
 10184 0054 26       		.uleb128 0x26
 10185 0055 00       		.byte	0
 10186 0056 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 227


 10187 0057 13       		.uleb128 0x13
 10188 0058 00       		.byte	0
 10189 0059 00       		.byte	0
 10190 005a 09       		.uleb128 0x9
 10191 005b 04       		.uleb128 0x4
 10192 005c 01       		.byte	0x1
 10193 005d 03       		.uleb128 0x3
 10194 005e 0E       		.uleb128 0xe
 10195 005f 0B       		.uleb128 0xb
 10196 0060 0B       		.uleb128 0xb
 10197 0061 49       		.uleb128 0x49
 10198 0062 13       		.uleb128 0x13
 10199 0063 3A       		.uleb128 0x3a
 10200 0064 0B       		.uleb128 0xb
 10201 0065 3B       		.uleb128 0x3b
 10202 0066 0B       		.uleb128 0xb
 10203 0067 01       		.uleb128 0x1
 10204 0068 13       		.uleb128 0x13
 10205 0069 00       		.byte	0
 10206 006a 00       		.byte	0
 10207 006b 0A       		.uleb128 0xa
 10208 006c 28       		.uleb128 0x28
 10209 006d 00       		.byte	0
 10210 006e 03       		.uleb128 0x3
 10211 006f 0E       		.uleb128 0xe
 10212 0070 1C       		.uleb128 0x1c
 10213 0071 0B       		.uleb128 0xb
 10214 0072 00       		.byte	0
 10215 0073 00       		.byte	0
 10216 0074 0B       		.uleb128 0xb
 10217 0075 13       		.uleb128 0x13
 10218 0076 01       		.byte	0x1
 10219 0077 03       		.uleb128 0x3
 10220 0078 0E       		.uleb128 0xe
 10221 0079 0B       		.uleb128 0xb
 10222 007a 0B       		.uleb128 0xb
 10223 007b 3A       		.uleb128 0x3a
 10224 007c 0B       		.uleb128 0xb
 10225 007d 3B       		.uleb128 0x3b
 10226 007e 0B       		.uleb128 0xb
 10227 007f 01       		.uleb128 0x1
 10228 0080 13       		.uleb128 0x13
 10229 0081 00       		.byte	0
 10230 0082 00       		.byte	0
 10231 0083 0C       		.uleb128 0xc
 10232 0084 0D       		.uleb128 0xd
 10233 0085 00       		.byte	0
 10234 0086 03       		.uleb128 0x3
 10235 0087 0E       		.uleb128 0xe
 10236 0088 3A       		.uleb128 0x3a
 10237 0089 0B       		.uleb128 0xb
 10238 008a 3B       		.uleb128 0x3b
 10239 008b 0B       		.uleb128 0xb
 10240 008c 49       		.uleb128 0x49
 10241 008d 13       		.uleb128 0x13
 10242 008e 38       		.uleb128 0x38
 10243 008f 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 228


 10244 0090 00       		.byte	0
 10245 0091 00       		.byte	0
 10246 0092 0D       		.uleb128 0xd
 10247 0093 0D       		.uleb128 0xd
 10248 0094 00       		.byte	0
 10249 0095 03       		.uleb128 0x3
 10250 0096 08       		.uleb128 0x8
 10251 0097 3A       		.uleb128 0x3a
 10252 0098 0B       		.uleb128 0xb
 10253 0099 3B       		.uleb128 0x3b
 10254 009a 0B       		.uleb128 0xb
 10255 009b 49       		.uleb128 0x49
 10256 009c 13       		.uleb128 0x13
 10257 009d 38       		.uleb128 0x38
 10258 009e 0B       		.uleb128 0xb
 10259 009f 00       		.byte	0
 10260 00a0 00       		.byte	0
 10261 00a1 0E       		.uleb128 0xe
 10262 00a2 01       		.uleb128 0x1
 10263 00a3 01       		.byte	0x1
 10264 00a4 49       		.uleb128 0x49
 10265 00a5 13       		.uleb128 0x13
 10266 00a6 01       		.uleb128 0x1
 10267 00a7 13       		.uleb128 0x13
 10268 00a8 00       		.byte	0
 10269 00a9 00       		.byte	0
 10270 00aa 0F       		.uleb128 0xf
 10271 00ab 21       		.uleb128 0x21
 10272 00ac 00       		.byte	0
 10273 00ad 49       		.uleb128 0x49
 10274 00ae 13       		.uleb128 0x13
 10275 00af 2F       		.uleb128 0x2f
 10276 00b0 0B       		.uleb128 0xb
 10277 00b1 00       		.byte	0
 10278 00b2 00       		.byte	0
 10279 00b3 10       		.uleb128 0x10
 10280 00b4 13       		.uleb128 0x13
 10281 00b5 01       		.byte	0x1
 10282 00b6 03       		.uleb128 0x3
 10283 00b7 0E       		.uleb128 0xe
 10284 00b8 0B       		.uleb128 0xb
 10285 00b9 0B       		.uleb128 0xb
 10286 00ba 3A       		.uleb128 0x3a
 10287 00bb 0B       		.uleb128 0xb
 10288 00bc 3B       		.uleb128 0x3b
 10289 00bd 05       		.uleb128 0x5
 10290 00be 01       		.uleb128 0x1
 10291 00bf 13       		.uleb128 0x13
 10292 00c0 00       		.byte	0
 10293 00c1 00       		.byte	0
 10294 00c2 11       		.uleb128 0x11
 10295 00c3 0D       		.uleb128 0xd
 10296 00c4 00       		.byte	0
 10297 00c5 03       		.uleb128 0x3
 10298 00c6 0E       		.uleb128 0xe
 10299 00c7 3A       		.uleb128 0x3a
 10300 00c8 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 229


 10301 00c9 3B       		.uleb128 0x3b
 10302 00ca 05       		.uleb128 0x5
 10303 00cb 49       		.uleb128 0x49
 10304 00cc 13       		.uleb128 0x13
 10305 00cd 38       		.uleb128 0x38
 10306 00ce 0B       		.uleb128 0xb
 10307 00cf 00       		.byte	0
 10308 00d0 00       		.byte	0
 10309 00d1 12       		.uleb128 0x12
 10310 00d2 0D       		.uleb128 0xd
 10311 00d3 00       		.byte	0
 10312 00d4 03       		.uleb128 0x3
 10313 00d5 08       		.uleb128 0x8
 10314 00d6 3A       		.uleb128 0x3a
 10315 00d7 0B       		.uleb128 0xb
 10316 00d8 3B       		.uleb128 0x3b
 10317 00d9 05       		.uleb128 0x5
 10318 00da 49       		.uleb128 0x49
 10319 00db 13       		.uleb128 0x13
 10320 00dc 38       		.uleb128 0x38
 10321 00dd 0B       		.uleb128 0xb
 10322 00de 00       		.byte	0
 10323 00df 00       		.byte	0
 10324 00e0 13       		.uleb128 0x13
 10325 00e1 2E       		.uleb128 0x2e
 10326 00e2 01       		.byte	0x1
 10327 00e3 03       		.uleb128 0x3
 10328 00e4 0E       		.uleb128 0xe
 10329 00e5 3A       		.uleb128 0x3a
 10330 00e6 0B       		.uleb128 0xb
 10331 00e7 3B       		.uleb128 0x3b
 10332 00e8 05       		.uleb128 0x5
 10333 00e9 27       		.uleb128 0x27
 10334 00ea 19       		.uleb128 0x19
 10335 00eb 49       		.uleb128 0x49
 10336 00ec 13       		.uleb128 0x13
 10337 00ed 20       		.uleb128 0x20
 10338 00ee 0B       		.uleb128 0xb
 10339 00ef 01       		.uleb128 0x1
 10340 00f0 13       		.uleb128 0x13
 10341 00f1 00       		.byte	0
 10342 00f2 00       		.byte	0
 10343 00f3 14       		.uleb128 0x14
 10344 00f4 05       		.uleb128 0x5
 10345 00f5 00       		.byte	0
 10346 00f6 03       		.uleb128 0x3
 10347 00f7 0E       		.uleb128 0xe
 10348 00f8 3A       		.uleb128 0x3a
 10349 00f9 0B       		.uleb128 0xb
 10350 00fa 3B       		.uleb128 0x3b
 10351 00fb 05       		.uleb128 0x5
 10352 00fc 49       		.uleb128 0x49
 10353 00fd 13       		.uleb128 0x13
 10354 00fe 00       		.byte	0
 10355 00ff 00       		.byte	0
 10356 0100 15       		.uleb128 0x15
 10357 0101 34       		.uleb128 0x34
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 230


 10358 0102 00       		.byte	0
 10359 0103 03       		.uleb128 0x3
 10360 0104 0E       		.uleb128 0xe
 10361 0105 3A       		.uleb128 0x3a
 10362 0106 0B       		.uleb128 0xb
 10363 0107 3B       		.uleb128 0x3b
 10364 0108 05       		.uleb128 0x5
 10365 0109 49       		.uleb128 0x49
 10366 010a 13       		.uleb128 0x13
 10367 010b 00       		.byte	0
 10368 010c 00       		.byte	0
 10369 010d 16       		.uleb128 0x16
 10370 010e 2E       		.uleb128 0x2e
 10371 010f 01       		.byte	0x1
 10372 0110 3F       		.uleb128 0x3f
 10373 0111 19       		.uleb128 0x19
 10374 0112 03       		.uleb128 0x3
 10375 0113 0E       		.uleb128 0xe
 10376 0114 3A       		.uleb128 0x3a
 10377 0115 0B       		.uleb128 0xb
 10378 0116 3B       		.uleb128 0x3b
 10379 0117 0B       		.uleb128 0xb
 10380 0118 27       		.uleb128 0x27
 10381 0119 19       		.uleb128 0x19
 10382 011a 11       		.uleb128 0x11
 10383 011b 01       		.uleb128 0x1
 10384 011c 12       		.uleb128 0x12
 10385 011d 06       		.uleb128 0x6
 10386 011e 40       		.uleb128 0x40
 10387 011f 18       		.uleb128 0x18
 10388 0120 9642     		.uleb128 0x2116
 10389 0122 19       		.uleb128 0x19
 10390 0123 01       		.uleb128 0x1
 10391 0124 13       		.uleb128 0x13
 10392 0125 00       		.byte	0
 10393 0126 00       		.byte	0
 10394 0127 17       		.uleb128 0x17
 10395 0128 34       		.uleb128 0x34
 10396 0129 00       		.byte	0
 10397 012a 03       		.uleb128 0x3
 10398 012b 0E       		.uleb128 0xe
 10399 012c 3A       		.uleb128 0x3a
 10400 012d 0B       		.uleb128 0xb
 10401 012e 3B       		.uleb128 0x3b
 10402 012f 0B       		.uleb128 0xb
 10403 0130 49       		.uleb128 0x49
 10404 0131 13       		.uleb128 0x13
 10405 0132 02       		.uleb128 0x2
 10406 0133 18       		.uleb128 0x18
 10407 0134 00       		.byte	0
 10408 0135 00       		.byte	0
 10409 0136 18       		.uleb128 0x18
 10410 0137 1D       		.uleb128 0x1d
 10411 0138 01       		.byte	0x1
 10412 0139 31       		.uleb128 0x31
 10413 013a 13       		.uleb128 0x13
 10414 013b 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 231


 10415 013c 01       		.uleb128 0x1
 10416 013d 12       		.uleb128 0x12
 10417 013e 06       		.uleb128 0x6
 10418 013f 58       		.uleb128 0x58
 10419 0140 0B       		.uleb128 0xb
 10420 0141 59       		.uleb128 0x59
 10421 0142 0B       		.uleb128 0xb
 10422 0143 01       		.uleb128 0x1
 10423 0144 13       		.uleb128 0x13
 10424 0145 00       		.byte	0
 10425 0146 00       		.byte	0
 10426 0147 19       		.uleb128 0x19
 10427 0148 05       		.uleb128 0x5
 10428 0149 00       		.byte	0
 10429 014a 31       		.uleb128 0x31
 10430 014b 13       		.uleb128 0x13
 10431 014c 02       		.uleb128 0x2
 10432 014d 18       		.uleb128 0x18
 10433 014e 00       		.byte	0
 10434 014f 00       		.byte	0
 10435 0150 1A       		.uleb128 0x1a
 10436 0151 0B       		.uleb128 0xb
 10437 0152 01       		.byte	0x1
 10438 0153 11       		.uleb128 0x11
 10439 0154 01       		.uleb128 0x1
 10440 0155 12       		.uleb128 0x12
 10441 0156 06       		.uleb128 0x6
 10442 0157 00       		.byte	0
 10443 0158 00       		.byte	0
 10444 0159 1B       		.uleb128 0x1b
 10445 015a 34       		.uleb128 0x34
 10446 015b 00       		.byte	0
 10447 015c 31       		.uleb128 0x31
 10448 015d 13       		.uleb128 0x13
 10449 015e 02       		.uleb128 0x2
 10450 015f 18       		.uleb128 0x18
 10451 0160 00       		.byte	0
 10452 0161 00       		.byte	0
 10453 0162 1C       		.uleb128 0x1c
 10454 0163 1D       		.uleb128 0x1d
 10455 0164 01       		.byte	0x1
 10456 0165 31       		.uleb128 0x31
 10457 0166 13       		.uleb128 0x13
 10458 0167 11       		.uleb128 0x11
 10459 0168 01       		.uleb128 0x1
 10460 0169 12       		.uleb128 0x12
 10461 016a 06       		.uleb128 0x6
 10462 016b 58       		.uleb128 0x58
 10463 016c 0B       		.uleb128 0xb
 10464 016d 59       		.uleb128 0x59
 10465 016e 05       		.uleb128 0x5
 10466 016f 01       		.uleb128 0x1
 10467 0170 13       		.uleb128 0x13
 10468 0171 00       		.byte	0
 10469 0172 00       		.byte	0
 10470 0173 1D       		.uleb128 0x1d
 10471 0174 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 232


 10472 0175 01       		.byte	0x1
 10473 0176 31       		.uleb128 0x31
 10474 0177 13       		.uleb128 0x13
 10475 0178 11       		.uleb128 0x11
 10476 0179 01       		.uleb128 0x1
 10477 017a 12       		.uleb128 0x12
 10478 017b 06       		.uleb128 0x6
 10479 017c 58       		.uleb128 0x58
 10480 017d 0B       		.uleb128 0xb
 10481 017e 59       		.uleb128 0x59
 10482 017f 05       		.uleb128 0x5
 10483 0180 00       		.byte	0
 10484 0181 00       		.byte	0
 10485 0182 1E       		.uleb128 0x1e
 10486 0183 2E       		.uleb128 0x2e
 10487 0184 01       		.byte	0x1
 10488 0185 3F       		.uleb128 0x3f
 10489 0186 19       		.uleb128 0x19
 10490 0187 03       		.uleb128 0x3
 10491 0188 0E       		.uleb128 0xe
 10492 0189 3A       		.uleb128 0x3a
 10493 018a 0B       		.uleb128 0xb
 10494 018b 3B       		.uleb128 0x3b
 10495 018c 05       		.uleb128 0x5
 10496 018d 27       		.uleb128 0x27
 10497 018e 19       		.uleb128 0x19
 10498 018f 11       		.uleb128 0x11
 10499 0190 01       		.uleb128 0x1
 10500 0191 12       		.uleb128 0x12
 10501 0192 06       		.uleb128 0x6
 10502 0193 40       		.uleb128 0x40
 10503 0194 18       		.uleb128 0x18
 10504 0195 9642     		.uleb128 0x2116
 10505 0197 19       		.uleb128 0x19
 10506 0198 01       		.uleb128 0x1
 10507 0199 13       		.uleb128 0x13
 10508 019a 00       		.byte	0
 10509 019b 00       		.byte	0
 10510 019c 1F       		.uleb128 0x1f
 10511 019d 34       		.uleb128 0x34
 10512 019e 00       		.byte	0
 10513 019f 03       		.uleb128 0x3
 10514 01a0 0E       		.uleb128 0xe
 10515 01a1 3A       		.uleb128 0x3a
 10516 01a2 0B       		.uleb128 0xb
 10517 01a3 3B       		.uleb128 0x3b
 10518 01a4 05       		.uleb128 0x5
 10519 01a5 49       		.uleb128 0x49
 10520 01a6 13       		.uleb128 0x13
 10521 01a7 02       		.uleb128 0x2
 10522 01a8 18       		.uleb128 0x18
 10523 01a9 00       		.byte	0
 10524 01aa 00       		.byte	0
 10525 01ab 20       		.uleb128 0x20
 10526 01ac 21       		.uleb128 0x21
 10527 01ad 00       		.byte	0
 10528 01ae 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 233


 10529 01af 13       		.uleb128 0x13
 10530 01b0 2F       		.uleb128 0x2f
 10531 01b1 05       		.uleb128 0x5
 10532 01b2 00       		.byte	0
 10533 01b3 00       		.byte	0
 10534 01b4 21       		.uleb128 0x21
 10535 01b5 2E       		.uleb128 0x2e
 10536 01b6 01       		.byte	0x1
 10537 01b7 3F       		.uleb128 0x3f
 10538 01b8 19       		.uleb128 0x19
 10539 01b9 03       		.uleb128 0x3
 10540 01ba 0E       		.uleb128 0xe
 10541 01bb 3A       		.uleb128 0x3a
 10542 01bc 0B       		.uleb128 0xb
 10543 01bd 3B       		.uleb128 0x3b
 10544 01be 05       		.uleb128 0x5
 10545 01bf 27       		.uleb128 0x27
 10546 01c0 19       		.uleb128 0x19
 10547 01c1 49       		.uleb128 0x49
 10548 01c2 13       		.uleb128 0x13
 10549 01c3 11       		.uleb128 0x11
 10550 01c4 01       		.uleb128 0x1
 10551 01c5 12       		.uleb128 0x12
 10552 01c6 06       		.uleb128 0x6
 10553 01c7 40       		.uleb128 0x40
 10554 01c8 18       		.uleb128 0x18
 10555 01c9 9742     		.uleb128 0x2117
 10556 01cb 19       		.uleb128 0x19
 10557 01cc 01       		.uleb128 0x1
 10558 01cd 13       		.uleb128 0x13
 10559 01ce 00       		.byte	0
 10560 01cf 00       		.byte	0
 10561 01d0 22       		.uleb128 0x22
 10562 01d1 05       		.uleb128 0x5
 10563 01d2 00       		.byte	0
 10564 01d3 03       		.uleb128 0x3
 10565 01d4 0E       		.uleb128 0xe
 10566 01d5 3A       		.uleb128 0x3a
 10567 01d6 0B       		.uleb128 0xb
 10568 01d7 3B       		.uleb128 0x3b
 10569 01d8 05       		.uleb128 0x5
 10570 01d9 49       		.uleb128 0x49
 10571 01da 13       		.uleb128 0x13
 10572 01db 02       		.uleb128 0x2
 10573 01dc 18       		.uleb128 0x18
 10574 01dd 00       		.byte	0
 10575 01de 00       		.byte	0
 10576 01df 23       		.uleb128 0x23
 10577 01e0 34       		.uleb128 0x34
 10578 01e1 00       		.byte	0
 10579 01e2 03       		.uleb128 0x3
 10580 01e3 08       		.uleb128 0x8
 10581 01e4 3A       		.uleb128 0x3a
 10582 01e5 0B       		.uleb128 0xb
 10583 01e6 3B       		.uleb128 0x3b
 10584 01e7 05       		.uleb128 0x5
 10585 01e8 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 234


 10586 01e9 13       		.uleb128 0x13
 10587 01ea 02       		.uleb128 0x2
 10588 01eb 18       		.uleb128 0x18
 10589 01ec 00       		.byte	0
 10590 01ed 00       		.byte	0
 10591 01ee 24       		.uleb128 0x24
 10592 01ef 0B       		.uleb128 0xb
 10593 01f0 01       		.byte	0x1
 10594 01f1 11       		.uleb128 0x11
 10595 01f2 01       		.uleb128 0x1
 10596 01f3 12       		.uleb128 0x12
 10597 01f4 06       		.uleb128 0x6
 10598 01f5 01       		.uleb128 0x1
 10599 01f6 13       		.uleb128 0x13
 10600 01f7 00       		.byte	0
 10601 01f8 00       		.byte	0
 10602 01f9 25       		.uleb128 0x25
 10603 01fa 21       		.uleb128 0x21
 10604 01fb 00       		.byte	0
 10605 01fc 49       		.uleb128 0x49
 10606 01fd 13       		.uleb128 0x13
 10607 01fe 2F       		.uleb128 0x2f
 10608 01ff 18       		.uleb128 0x18
 10609 0200 00       		.byte	0
 10610 0201 00       		.byte	0
 10611 0202 26       		.uleb128 0x26
 10612 0203 2E       		.uleb128 0x2e
 10613 0204 01       		.byte	0x1
 10614 0205 3F       		.uleb128 0x3f
 10615 0206 19       		.uleb128 0x19
 10616 0207 03       		.uleb128 0x3
 10617 0208 0E       		.uleb128 0xe
 10618 0209 3A       		.uleb128 0x3a
 10619 020a 0B       		.uleb128 0xb
 10620 020b 3B       		.uleb128 0x3b
 10621 020c 05       		.uleb128 0x5
 10622 020d 27       		.uleb128 0x27
 10623 020e 19       		.uleb128 0x19
 10624 020f 11       		.uleb128 0x11
 10625 0210 01       		.uleb128 0x1
 10626 0211 12       		.uleb128 0x12
 10627 0212 06       		.uleb128 0x6
 10628 0213 40       		.uleb128 0x40
 10629 0214 18       		.uleb128 0x18
 10630 0215 9742     		.uleb128 0x2117
 10631 0217 19       		.uleb128 0x19
 10632 0218 01       		.uleb128 0x1
 10633 0219 13       		.uleb128 0x13
 10634 021a 00       		.byte	0
 10635 021b 00       		.byte	0
 10636 021c 27       		.uleb128 0x27
 10637 021d 2E       		.uleb128 0x2e
 10638 021e 00       		.byte	0
 10639 021f 3F       		.uleb128 0x3f
 10640 0220 19       		.uleb128 0x19
 10641 0221 03       		.uleb128 0x3
 10642 0222 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 235


 10643 0223 3A       		.uleb128 0x3a
 10644 0224 0B       		.uleb128 0xb
 10645 0225 3B       		.uleb128 0x3b
 10646 0226 05       		.uleb128 0x5
 10647 0227 11       		.uleb128 0x11
 10648 0228 01       		.uleb128 0x1
 10649 0229 12       		.uleb128 0x12
 10650 022a 06       		.uleb128 0x6
 10651 022b 40       		.uleb128 0x40
 10652 022c 18       		.uleb128 0x18
 10653 022d 9742     		.uleb128 0x2117
 10654 022f 19       		.uleb128 0x19
 10655 0230 00       		.byte	0
 10656 0231 00       		.byte	0
 10657 0232 28       		.uleb128 0x28
 10658 0233 05       		.uleb128 0x5
 10659 0234 00       		.byte	0
 10660 0235 03       		.uleb128 0x3
 10661 0236 08       		.uleb128 0x8
 10662 0237 3A       		.uleb128 0x3a
 10663 0238 0B       		.uleb128 0xb
 10664 0239 3B       		.uleb128 0x3b
 10665 023a 05       		.uleb128 0x5
 10666 023b 49       		.uleb128 0x49
 10667 023c 13       		.uleb128 0x13
 10668 023d 02       		.uleb128 0x2
 10669 023e 18       		.uleb128 0x18
 10670 023f 00       		.byte	0
 10671 0240 00       		.byte	0
 10672 0241 29       		.uleb128 0x29
 10673 0242 2E       		.uleb128 0x2e
 10674 0243 01       		.byte	0x1
 10675 0244 3F       		.uleb128 0x3f
 10676 0245 19       		.uleb128 0x19
 10677 0246 03       		.uleb128 0x3
 10678 0247 0E       		.uleb128 0xe
 10679 0248 3A       		.uleb128 0x3a
 10680 0249 0B       		.uleb128 0xb
 10681 024a 3B       		.uleb128 0x3b
 10682 024b 05       		.uleb128 0x5
 10683 024c 27       		.uleb128 0x27
 10684 024d 19       		.uleb128 0x19
 10685 024e 49       		.uleb128 0x49
 10686 024f 13       		.uleb128 0x13
 10687 0250 11       		.uleb128 0x11
 10688 0251 01       		.uleb128 0x1
 10689 0252 12       		.uleb128 0x12
 10690 0253 06       		.uleb128 0x6
 10691 0254 40       		.uleb128 0x40
 10692 0255 18       		.uleb128 0x18
 10693 0256 9642     		.uleb128 0x2116
 10694 0258 19       		.uleb128 0x19
 10695 0259 01       		.uleb128 0x1
 10696 025a 13       		.uleb128 0x13
 10697 025b 00       		.byte	0
 10698 025c 00       		.byte	0
 10699 025d 2A       		.uleb128 0x2a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 236


 10700 025e 2E       		.uleb128 0x2e
 10701 025f 00       		.byte	0
 10702 0260 3F       		.uleb128 0x3f
 10703 0261 19       		.uleb128 0x19
 10704 0262 03       		.uleb128 0x3
 10705 0263 0E       		.uleb128 0xe
 10706 0264 3A       		.uleb128 0x3a
 10707 0265 0B       		.uleb128 0xb
 10708 0266 3B       		.uleb128 0x3b
 10709 0267 05       		.uleb128 0x5
 10710 0268 27       		.uleb128 0x27
 10711 0269 19       		.uleb128 0x19
 10712 026a 49       		.uleb128 0x49
 10713 026b 13       		.uleb128 0x13
 10714 026c 11       		.uleb128 0x11
 10715 026d 01       		.uleb128 0x1
 10716 026e 12       		.uleb128 0x12
 10717 026f 06       		.uleb128 0x6
 10718 0270 40       		.uleb128 0x40
 10719 0271 18       		.uleb128 0x18
 10720 0272 9642     		.uleb128 0x2116
 10721 0274 19       		.uleb128 0x19
 10722 0275 00       		.byte	0
 10723 0276 00       		.byte	0
 10724 0277 2B       		.uleb128 0x2b
 10725 0278 2E       		.uleb128 0x2e
 10726 0279 00       		.byte	0
 10727 027a 3F       		.uleb128 0x3f
 10728 027b 19       		.uleb128 0x19
 10729 027c 03       		.uleb128 0x3
 10730 027d 0E       		.uleb128 0xe
 10731 027e 3A       		.uleb128 0x3a
 10732 027f 0B       		.uleb128 0xb
 10733 0280 3B       		.uleb128 0x3b
 10734 0281 05       		.uleb128 0x5
 10735 0282 27       		.uleb128 0x27
 10736 0283 19       		.uleb128 0x19
 10737 0284 11       		.uleb128 0x11
 10738 0285 01       		.uleb128 0x1
 10739 0286 12       		.uleb128 0x12
 10740 0287 06       		.uleb128 0x6
 10741 0288 40       		.uleb128 0x40
 10742 0289 18       		.uleb128 0x18
 10743 028a 9742     		.uleb128 0x2117
 10744 028c 19       		.uleb128 0x19
 10745 028d 00       		.byte	0
 10746 028e 00       		.byte	0
 10747 028f 2C       		.uleb128 0x2c
 10748 0290 2E       		.uleb128 0x2e
 10749 0291 01       		.byte	0x1
 10750 0292 3F       		.uleb128 0x3f
 10751 0293 19       		.uleb128 0x19
 10752 0294 03       		.uleb128 0x3
 10753 0295 0E       		.uleb128 0xe
 10754 0296 3A       		.uleb128 0x3a
 10755 0297 0B       		.uleb128 0xb
 10756 0298 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 237


 10757 0299 05       		.uleb128 0x5
 10758 029a 11       		.uleb128 0x11
 10759 029b 01       		.uleb128 0x1
 10760 029c 12       		.uleb128 0x12
 10761 029d 06       		.uleb128 0x6
 10762 029e 40       		.uleb128 0x40
 10763 029f 18       		.uleb128 0x18
 10764 02a0 9742     		.uleb128 0x2117
 10765 02a2 19       		.uleb128 0x19
 10766 02a3 01       		.uleb128 0x1
 10767 02a4 13       		.uleb128 0x13
 10768 02a5 00       		.byte	0
 10769 02a6 00       		.byte	0
 10770 02a7 2D       		.uleb128 0x2d
 10771 02a8 2E       		.uleb128 0x2e
 10772 02a9 01       		.byte	0x1
 10773 02aa 3F       		.uleb128 0x3f
 10774 02ab 19       		.uleb128 0x19
 10775 02ac 03       		.uleb128 0x3
 10776 02ad 0E       		.uleb128 0xe
 10777 02ae 3A       		.uleb128 0x3a
 10778 02af 0B       		.uleb128 0xb
 10779 02b0 3B       		.uleb128 0x3b
 10780 02b1 05       		.uleb128 0x5
 10781 02b2 11       		.uleb128 0x11
 10782 02b3 01       		.uleb128 0x1
 10783 02b4 12       		.uleb128 0x12
 10784 02b5 06       		.uleb128 0x6
 10785 02b6 40       		.uleb128 0x40
 10786 02b7 18       		.uleb128 0x18
 10787 02b8 9642     		.uleb128 0x2116
 10788 02ba 19       		.uleb128 0x19
 10789 02bb 01       		.uleb128 0x1
 10790 02bc 13       		.uleb128 0x13
 10791 02bd 00       		.byte	0
 10792 02be 00       		.byte	0
 10793 02bf 2E       		.uleb128 0x2e
 10794 02c0 2E       		.uleb128 0x2e
 10795 02c1 01       		.byte	0x1
 10796 02c2 3F       		.uleb128 0x3f
 10797 02c3 19       		.uleb128 0x19
 10798 02c4 03       		.uleb128 0x3
 10799 02c5 0E       		.uleb128 0xe
 10800 02c6 3A       		.uleb128 0x3a
 10801 02c7 0B       		.uleb128 0xb
 10802 02c8 3B       		.uleb128 0x3b
 10803 02c9 05       		.uleb128 0x5
 10804 02ca 49       		.uleb128 0x49
 10805 02cb 13       		.uleb128 0x13
 10806 02cc 11       		.uleb128 0x11
 10807 02cd 01       		.uleb128 0x1
 10808 02ce 12       		.uleb128 0x12
 10809 02cf 06       		.uleb128 0x6
 10810 02d0 40       		.uleb128 0x40
 10811 02d1 18       		.uleb128 0x18
 10812 02d2 9642     		.uleb128 0x2116
 10813 02d4 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 238


 10814 02d5 01       		.uleb128 0x1
 10815 02d6 13       		.uleb128 0x13
 10816 02d7 00       		.byte	0
 10817 02d8 00       		.byte	0
 10818 02d9 2F       		.uleb128 0x2f
 10819 02da 2E       		.uleb128 0x2e
 10820 02db 00       		.byte	0
 10821 02dc 3F       		.uleb128 0x3f
 10822 02dd 19       		.uleb128 0x19
 10823 02de 03       		.uleb128 0x3
 10824 02df 0E       		.uleb128 0xe
 10825 02e0 3A       		.uleb128 0x3a
 10826 02e1 0B       		.uleb128 0xb
 10827 02e2 3B       		.uleb128 0x3b
 10828 02e3 05       		.uleb128 0x5
 10829 02e4 11       		.uleb128 0x11
 10830 02e5 01       		.uleb128 0x1
 10831 02e6 12       		.uleb128 0x12
 10832 02e7 06       		.uleb128 0x6
 10833 02e8 40       		.uleb128 0x40
 10834 02e9 18       		.uleb128 0x18
 10835 02ea 9642     		.uleb128 0x2116
 10836 02ec 19       		.uleb128 0x19
 10837 02ed 00       		.byte	0
 10838 02ee 00       		.byte	0
 10839 02ef 30       		.uleb128 0x30
 10840 02f0 2E       		.uleb128 0x2e
 10841 02f1 00       		.byte	0
 10842 02f2 3F       		.uleb128 0x3f
 10843 02f3 19       		.uleb128 0x19
 10844 02f4 03       		.uleb128 0x3
 10845 02f5 0E       		.uleb128 0xe
 10846 02f6 3A       		.uleb128 0x3a
 10847 02f7 0B       		.uleb128 0xb
 10848 02f8 3B       		.uleb128 0x3b
 10849 02f9 05       		.uleb128 0x5
 10850 02fa 49       		.uleb128 0x49
 10851 02fb 13       		.uleb128 0x13
 10852 02fc 11       		.uleb128 0x11
 10853 02fd 01       		.uleb128 0x1
 10854 02fe 12       		.uleb128 0x12
 10855 02ff 06       		.uleb128 0x6
 10856 0300 40       		.uleb128 0x40
 10857 0301 18       		.uleb128 0x18
 10858 0302 9742     		.uleb128 0x2117
 10859 0304 19       		.uleb128 0x19
 10860 0305 00       		.byte	0
 10861 0306 00       		.byte	0
 10862 0307 31       		.uleb128 0x31
 10863 0308 34       		.uleb128 0x34
 10864 0309 00       		.byte	0
 10865 030a 03       		.uleb128 0x3
 10866 030b 0E       		.uleb128 0xe
 10867 030c 3A       		.uleb128 0x3a
 10868 030d 0B       		.uleb128 0xb
 10869 030e 3B       		.uleb128 0x3b
 10870 030f 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 239


 10871 0310 49       		.uleb128 0x49
 10872 0311 13       		.uleb128 0x13
 10873 0312 3F       		.uleb128 0x3f
 10874 0313 19       		.uleb128 0x19
 10875 0314 3C       		.uleb128 0x3c
 10876 0315 19       		.uleb128 0x19
 10877 0316 00       		.byte	0
 10878 0317 00       		.byte	0
 10879 0318 32       		.uleb128 0x32
 10880 0319 34       		.uleb128 0x34
 10881 031a 00       		.byte	0
 10882 031b 03       		.uleb128 0x3
 10883 031c 0E       		.uleb128 0xe
 10884 031d 3A       		.uleb128 0x3a
 10885 031e 0B       		.uleb128 0xb
 10886 031f 3B       		.uleb128 0x3b
 10887 0320 0B       		.uleb128 0xb
 10888 0321 49       		.uleb128 0x49
 10889 0322 13       		.uleb128 0x13
 10890 0323 3F       		.uleb128 0x3f
 10891 0324 19       		.uleb128 0x19
 10892 0325 02       		.uleb128 0x2
 10893 0326 18       		.uleb128 0x18
 10894 0327 00       		.byte	0
 10895 0328 00       		.byte	0
 10896 0329 00       		.byte	0
 10897              		.section	.debug_aranges,"",%progbits
 10898 0000 1C020000 		.4byte	0x21c
 10899 0004 0200     		.2byte	0x2
 10900 0006 00000000 		.4byte	.Ldebug_info0
 10901 000a 04       		.byte	0x4
 10902 000b 00       		.byte	0
 10903 000c 0000     		.2byte	0
 10904 000e 0000     		.2byte	0
 10905 0010 00000000 		.4byte	.LFB64
 10906 0014 BC050000 		.4byte	.LFE64-.LFB64
 10907 0018 00000000 		.4byte	.LFB65
 10908 001c 22000000 		.4byte	.LFE65-.LFB65
 10909 0020 00000000 		.4byte	.LFB66
 10910 0024 5E000000 		.4byte	.LFE66-.LFB66
 10911 0028 00000000 		.4byte	.LFB67
 10912 002c 64010000 		.4byte	.LFE67-.LFB67
 10913 0030 00000000 		.4byte	.LFB68
 10914 0034 BC070000 		.4byte	.LFE68-.LFB68
 10915 0038 00000000 		.4byte	.LFB69
 10916 003c 34070000 		.4byte	.LFE69-.LFB69
 10917 0040 00000000 		.4byte	.LFB70
 10918 0044 34010000 		.4byte	.LFE70-.LFB70
 10919 0048 00000000 		.4byte	.LFB71
 10920 004c 14000000 		.4byte	.LFE71-.LFB71
 10921 0050 00000000 		.4byte	.LFB72
 10922 0054 0C000000 		.4byte	.LFE72-.LFB72
 10923 0058 00000000 		.4byte	.LFB73
 10924 005c B8030000 		.4byte	.LFE73-.LFB73
 10925 0060 00000000 		.4byte	.LFB74
 10926 0064 14020000 		.4byte	.LFE74-.LFB74
 10927 0068 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 240


 10928 006c 12000000 		.4byte	.LFE75-.LFB75
 10929 0070 00000000 		.4byte	.LFB76
 10930 0074 12000000 		.4byte	.LFE76-.LFB76
 10931 0078 00000000 		.4byte	.LFB77
 10932 007c 12000000 		.4byte	.LFE77-.LFB77
 10933 0080 00000000 		.4byte	.LFB78
 10934 0084 12000000 		.4byte	.LFE78-.LFB78
 10935 0088 00000000 		.4byte	.LFB79
 10936 008c 12000000 		.4byte	.LFE79-.LFB79
 10937 0090 00000000 		.4byte	.LFB80
 10938 0094 12000000 		.4byte	.LFE80-.LFB80
 10939 0098 00000000 		.4byte	.LFB81
 10940 009c 12000000 		.4byte	.LFE81-.LFB81
 10941 00a0 00000000 		.4byte	.LFB82
 10942 00a4 84000000 		.4byte	.LFE82-.LFB82
 10943 00a8 00000000 		.4byte	.LFB83
 10944 00ac 88000000 		.4byte	.LFE83-.LFB83
 10945 00b0 00000000 		.4byte	.LFB84
 10946 00b4 A0000000 		.4byte	.LFE84-.LFB84
 10947 00b8 00000000 		.4byte	.LFB85
 10948 00bc 3E000000 		.4byte	.LFE85-.LFB85
 10949 00c0 00000000 		.4byte	.LFB86
 10950 00c4 2E000000 		.4byte	.LFE86-.LFB86
 10951 00c8 00000000 		.4byte	.LFB87
 10952 00cc 90000000 		.4byte	.LFE87-.LFB87
 10953 00d0 00000000 		.4byte	.LFB88
 10954 00d4 60000000 		.4byte	.LFE88-.LFB88
 10955 00d8 00000000 		.4byte	.LFB89
 10956 00dc 58000000 		.4byte	.LFE89-.LFB89
 10957 00e0 00000000 		.4byte	.LFB90
 10958 00e4 CC000000 		.4byte	.LFE90-.LFB90
 10959 00e8 00000000 		.4byte	.LFB91
 10960 00ec 0C000000 		.4byte	.LFE91-.LFB91
 10961 00f0 00000000 		.4byte	.LFB92
 10962 00f4 0C000000 		.4byte	.LFE92-.LFB92
 10963 00f8 00000000 		.4byte	.LFB93
 10964 00fc 0C000000 		.4byte	.LFE93-.LFB93
 10965 0100 00000000 		.4byte	.LFB94
 10966 0104 0C000000 		.4byte	.LFE94-.LFB94
 10967 0108 00000000 		.4byte	.LFB95
 10968 010c 0C000000 		.4byte	.LFE95-.LFB95
 10969 0110 00000000 		.4byte	.LFB96
 10970 0114 0C000000 		.4byte	.LFE96-.LFB96
 10971 0118 00000000 		.4byte	.LFB97
 10972 011c 0C000000 		.4byte	.LFE97-.LFB97
 10973 0120 00000000 		.4byte	.LFB98
 10974 0124 0C000000 		.4byte	.LFE98-.LFB98
 10975 0128 00000000 		.4byte	.LFB99
 10976 012c BC000000 		.4byte	.LFE99-.LFB99
 10977 0130 00000000 		.4byte	.LFB100
 10978 0134 4C000000 		.4byte	.LFE100-.LFB100
 10979 0138 00000000 		.4byte	.LFB101
 10980 013c 0C000000 		.4byte	.LFE101-.LFB101
 10981 0140 00000000 		.4byte	.LFB102
 10982 0144 0C000000 		.4byte	.LFE102-.LFB102
 10983 0148 00000000 		.4byte	.LFB103
 10984 014c 84000000 		.4byte	.LFE103-.LFB103
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 241


 10985 0150 00000000 		.4byte	.LFB104
 10986 0154 0C000000 		.4byte	.LFE104-.LFB104
 10987 0158 00000000 		.4byte	.LFB105
 10988 015c 0C000000 		.4byte	.LFE105-.LFB105
 10989 0160 00000000 		.4byte	.LFB106
 10990 0164 C4000000 		.4byte	.LFE106-.LFB106
 10991 0168 00000000 		.4byte	.LFB107
 10992 016c A8000000 		.4byte	.LFE107-.LFB107
 10993 0170 00000000 		.4byte	.LFB108
 10994 0174 0C000000 		.4byte	.LFE108-.LFB108
 10995 0178 00000000 		.4byte	.LFB109
 10996 017c 20000000 		.4byte	.LFE109-.LFB109
 10997 0180 00000000 		.4byte	.LFB110
 10998 0184 0C000000 		.4byte	.LFE110-.LFB110
 10999 0188 00000000 		.4byte	.LFB111
 11000 018c 94000000 		.4byte	.LFE111-.LFB111
 11001 0190 00000000 		.4byte	.LFB112
 11002 0194 60000000 		.4byte	.LFE112-.LFB112
 11003 0198 00000000 		.4byte	.LFB113
 11004 019c 0C000000 		.4byte	.LFE113-.LFB113
 11005 01a0 00000000 		.4byte	.LFB114
 11006 01a4 0C000000 		.4byte	.LFE114-.LFB114
 11007 01a8 00000000 		.4byte	.LFB115
 11008 01ac 0C000000 		.4byte	.LFE115-.LFB115
 11009 01b0 00000000 		.4byte	.LFB116
 11010 01b4 0C000000 		.4byte	.LFE116-.LFB116
 11011 01b8 00000000 		.4byte	.LFB117
 11012 01bc 0C000000 		.4byte	.LFE117-.LFB117
 11013 01c0 00000000 		.4byte	.LFB118
 11014 01c4 54010000 		.4byte	.LFE118-.LFB118
 11015 01c8 00000000 		.4byte	.LFB119
 11016 01cc 14000000 		.4byte	.LFE119-.LFB119
 11017 01d0 00000000 		.4byte	.LFB120
 11018 01d4 50010000 		.4byte	.LFE120-.LFB120
 11019 01d8 00000000 		.4byte	.LFB121
 11020 01dc 94010000 		.4byte	.LFE121-.LFB121
 11021 01e0 00000000 		.4byte	.LFB122
 11022 01e4 24000000 		.4byte	.LFE122-.LFB122
 11023 01e8 00000000 		.4byte	.LFB123
 11024 01ec 40000000 		.4byte	.LFE123-.LFB123
 11025 01f0 00000000 		.4byte	.LFB124
 11026 01f4 0E000000 		.4byte	.LFE124-.LFB124
 11027 01f8 00000000 		.4byte	.LFB125
 11028 01fc 12000000 		.4byte	.LFE125-.LFB125
 11029 0200 00000000 		.4byte	.LFB126
 11030 0204 84000000 		.4byte	.LFE126-.LFB126
 11031 0208 00000000 		.4byte	.LFB127
 11032 020c 30000000 		.4byte	.LFE127-.LFB127
 11033 0210 00000000 		.4byte	.LFB128
 11034 0214 0C000000 		.4byte	.LFE128-.LFB128
 11035 0218 00000000 		.4byte	0
 11036 021c 00000000 		.4byte	0
 11037              		.section	.debug_ranges,"",%progbits
 11038              	.Ldebug_ranges0:
 11039 0000 00000000 		.4byte	.LFB64
 11040 0004 BC050000 		.4byte	.LFE64
 11041 0008 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 242


 11042 000c 22000000 		.4byte	.LFE65
 11043 0010 00000000 		.4byte	.LFB66
 11044 0014 5E000000 		.4byte	.LFE66
 11045 0018 00000000 		.4byte	.LFB67
 11046 001c 64010000 		.4byte	.LFE67
 11047 0020 00000000 		.4byte	.LFB68
 11048 0024 BC070000 		.4byte	.LFE68
 11049 0028 00000000 		.4byte	.LFB69
 11050 002c 34070000 		.4byte	.LFE69
 11051 0030 00000000 		.4byte	.LFB70
 11052 0034 34010000 		.4byte	.LFE70
 11053 0038 00000000 		.4byte	.LFB71
 11054 003c 14000000 		.4byte	.LFE71
 11055 0040 00000000 		.4byte	.LFB72
 11056 0044 0C000000 		.4byte	.LFE72
 11057 0048 00000000 		.4byte	.LFB73
 11058 004c B8030000 		.4byte	.LFE73
 11059 0050 00000000 		.4byte	.LFB74
 11060 0054 14020000 		.4byte	.LFE74
 11061 0058 00000000 		.4byte	.LFB75
 11062 005c 12000000 		.4byte	.LFE75
 11063 0060 00000000 		.4byte	.LFB76
 11064 0064 12000000 		.4byte	.LFE76
 11065 0068 00000000 		.4byte	.LFB77
 11066 006c 12000000 		.4byte	.LFE77
 11067 0070 00000000 		.4byte	.LFB78
 11068 0074 12000000 		.4byte	.LFE78
 11069 0078 00000000 		.4byte	.LFB79
 11070 007c 12000000 		.4byte	.LFE79
 11071 0080 00000000 		.4byte	.LFB80
 11072 0084 12000000 		.4byte	.LFE80
 11073 0088 00000000 		.4byte	.LFB81
 11074 008c 12000000 		.4byte	.LFE81
 11075 0090 00000000 		.4byte	.LFB82
 11076 0094 84000000 		.4byte	.LFE82
 11077 0098 00000000 		.4byte	.LFB83
 11078 009c 88000000 		.4byte	.LFE83
 11079 00a0 00000000 		.4byte	.LFB84
 11080 00a4 A0000000 		.4byte	.LFE84
 11081 00a8 00000000 		.4byte	.LFB85
 11082 00ac 3E000000 		.4byte	.LFE85
 11083 00b0 00000000 		.4byte	.LFB86
 11084 00b4 2E000000 		.4byte	.LFE86
 11085 00b8 00000000 		.4byte	.LFB87
 11086 00bc 90000000 		.4byte	.LFE87
 11087 00c0 00000000 		.4byte	.LFB88
 11088 00c4 60000000 		.4byte	.LFE88
 11089 00c8 00000000 		.4byte	.LFB89
 11090 00cc 58000000 		.4byte	.LFE89
 11091 00d0 00000000 		.4byte	.LFB90
 11092 00d4 CC000000 		.4byte	.LFE90
 11093 00d8 00000000 		.4byte	.LFB91
 11094 00dc 0C000000 		.4byte	.LFE91
 11095 00e0 00000000 		.4byte	.LFB92
 11096 00e4 0C000000 		.4byte	.LFE92
 11097 00e8 00000000 		.4byte	.LFB93
 11098 00ec 0C000000 		.4byte	.LFE93
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 243


 11099 00f0 00000000 		.4byte	.LFB94
 11100 00f4 0C000000 		.4byte	.LFE94
 11101 00f8 00000000 		.4byte	.LFB95
 11102 00fc 0C000000 		.4byte	.LFE95
 11103 0100 00000000 		.4byte	.LFB96
 11104 0104 0C000000 		.4byte	.LFE96
 11105 0108 00000000 		.4byte	.LFB97
 11106 010c 0C000000 		.4byte	.LFE97
 11107 0110 00000000 		.4byte	.LFB98
 11108 0114 0C000000 		.4byte	.LFE98
 11109 0118 00000000 		.4byte	.LFB99
 11110 011c BC000000 		.4byte	.LFE99
 11111 0120 00000000 		.4byte	.LFB100
 11112 0124 4C000000 		.4byte	.LFE100
 11113 0128 00000000 		.4byte	.LFB101
 11114 012c 0C000000 		.4byte	.LFE101
 11115 0130 00000000 		.4byte	.LFB102
 11116 0134 0C000000 		.4byte	.LFE102
 11117 0138 00000000 		.4byte	.LFB103
 11118 013c 84000000 		.4byte	.LFE103
 11119 0140 00000000 		.4byte	.LFB104
 11120 0144 0C000000 		.4byte	.LFE104
 11121 0148 00000000 		.4byte	.LFB105
 11122 014c 0C000000 		.4byte	.LFE105
 11123 0150 00000000 		.4byte	.LFB106
 11124 0154 C4000000 		.4byte	.LFE106
 11125 0158 00000000 		.4byte	.LFB107
 11126 015c A8000000 		.4byte	.LFE107
 11127 0160 00000000 		.4byte	.LFB108
 11128 0164 0C000000 		.4byte	.LFE108
 11129 0168 00000000 		.4byte	.LFB109
 11130 016c 20000000 		.4byte	.LFE109
 11131 0170 00000000 		.4byte	.LFB110
 11132 0174 0C000000 		.4byte	.LFE110
 11133 0178 00000000 		.4byte	.LFB111
 11134 017c 94000000 		.4byte	.LFE111
 11135 0180 00000000 		.4byte	.LFB112
 11136 0184 60000000 		.4byte	.LFE112
 11137 0188 00000000 		.4byte	.LFB113
 11138 018c 0C000000 		.4byte	.LFE113
 11139 0190 00000000 		.4byte	.LFB114
 11140 0194 0C000000 		.4byte	.LFE114
 11141 0198 00000000 		.4byte	.LFB115
 11142 019c 0C000000 		.4byte	.LFE115
 11143 01a0 00000000 		.4byte	.LFB116
 11144 01a4 0C000000 		.4byte	.LFE116
 11145 01a8 00000000 		.4byte	.LFB117
 11146 01ac 0C000000 		.4byte	.LFE117
 11147 01b0 00000000 		.4byte	.LFB118
 11148 01b4 54010000 		.4byte	.LFE118
 11149 01b8 00000000 		.4byte	.LFB119
 11150 01bc 14000000 		.4byte	.LFE119
 11151 01c0 00000000 		.4byte	.LFB120
 11152 01c4 50010000 		.4byte	.LFE120
 11153 01c8 00000000 		.4byte	.LFB121
 11154 01cc 94010000 		.4byte	.LFE121
 11155 01d0 00000000 		.4byte	.LFB122
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 244


 11156 01d4 24000000 		.4byte	.LFE122
 11157 01d8 00000000 		.4byte	.LFB123
 11158 01dc 40000000 		.4byte	.LFE123
 11159 01e0 00000000 		.4byte	.LFB124
 11160 01e4 0E000000 		.4byte	.LFE124
 11161 01e8 00000000 		.4byte	.LFB125
 11162 01ec 12000000 		.4byte	.LFE125
 11163 01f0 00000000 		.4byte	.LFB126
 11164 01f4 84000000 		.4byte	.LFE126
 11165 01f8 00000000 		.4byte	.LFB127
 11166 01fc 30000000 		.4byte	.LFE127
 11167 0200 00000000 		.4byte	.LFB128
 11168 0204 0C000000 		.4byte	.LFE128
 11169 0208 00000000 		.4byte	0
 11170 020c 00000000 		.4byte	0
 11171              		.section	.debug_line,"",%progbits
 11172              	.Ldebug_line0:
 11173 0000 380B0000 		.section	.debug_str,"MS",%progbits,1
 11173      02008B01 
 11173      00000201 
 11173      FB0E0D00 
 11173      01010101 
 11174              	.LASF160:
 11175 0000 696E666F 		.ascii	"infoSend\000"
 11175      53656E64 
 11175      00
 11176              	.LASF48:
 11177 0009 4D454E55 		.ascii	"MENU_Y_N\000"
 11177      5F595F4E 
 11177      00
 11178              	.LASF174:
 11179 0012 73747269 		.ascii	"string_length\000"
 11179      6E675F6C 
 11179      656E6774 
 11179      6800
 11180              	.LASF24:
 11181 0020 73697A65 		.ascii	"sizetype\000"
 11181      74797065 
 11181      00
 11182              	.LASF66:
 11183 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 11183      494E4954 
 11183      5F4D454D 
 11183      00
 11184              	.LASF99:
 11185 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11185      545F4D4F 
 11185      44455F45 
 11185      4D475F46 
 11185      4346535F 
 11186              	.LASF46:
 11187 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 11187      5F494E50 
 11187      555400
 11188              	.LASF275:
 11189 0059 73746F70 		.ascii	"stop_master_device\000"
 11189      5F6D6173 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 245


 11189      7465725F 
 11189      64657669 
 11189      636500
 11190              	.LASF11:
 11191 006c 696E7433 		.ascii	"int32_t\000"
 11191      325F7400 
 11192              	.LASF280:
 11193 0074 675F7278 		.ascii	"g_rx\000"
 11193      00
 11194              	.LASF119:
 11195 0079 73745F64 		.ascii	"st_data\000"
 11195      61746100 
 11196              	.LASF221:
 11197 0081 77726974 		.ascii	"writeStatus\000"
 11197      65537461 
 11197      74757300 
 11198              	.LASF15:
 11199 008d 75696E74 		.ascii	"uint32\000"
 11199      333200
 11200              	.LASF249:
 11201 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 11201      7365745F 
 11201      62617564 
 11201      72617465 
 11201      00
 11202              	.LASF264:
 11203 00a5 6169725F 		.ascii	"air_chambers_control\000"
 11203      6368616D 
 11203      62657273 
 11203      5F636F6E 
 11203      74726F6C 
 11204              	.LASF200:
 11205 00ba 70726570 		.ascii	"prepare_generic_info\000"
 11205      6172655F 
 11205      67656E65 
 11205      7269635F 
 11205      696E666F 
 11206              	.LASF186:
 11207 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 11207      4D454E55 
 11207      7300
 11208              	.LASF124:
 11209 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 11209      6C696D5F 
 11209      696E6600 
 11210              	.LASF164:
 11211 00e5 54595045 		.ascii	"TYPE\000"
 11211      00
 11212              	.LASF147:
 11213 00ea 63686F69 		.ascii	"choice\000"
 11213      636500
 11214              	.LASF269:
 11215 00f1 70756D70 		.ascii	"pump_control\000"
 11215      5F636F6E 
 11215      74726F6C 
 11215      00
 11216              	.LASF33:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 246


 11217 00fe 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 11217      4F4D5F52 
 11217      45534554 
 11217      5F434F55 
 11217      4E5400
 11218              	.LASF98:
 11219 0111 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 11219      545F4D4F 
 11219      44455F45 
 11219      4D475F46 
 11219      43465300 
 11220              	.LASF254:
 11221 0125 636D645F 		.ascii	"cmd_get_imu_readings\000"
 11221      6765745F 
 11221      696D755F 
 11221      72656164 
 11221      696E6773 
 11222              	.LASF132:
 11223 013a 73745F4D 		.ascii	"st_MASTER_spec\000"
 11223      41535445 
 11223      525F7370 
 11223      656300
 11224              	.LASF152:
 11225 0149 50415241 		.ascii	"PARAM_STR\000"
 11225      4D5F5354 
 11225      5200
 11226              	.LASF97:
 11227 0153 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 11227      545F4D4F 
 11227      44455F45 
 11227      4D475F49 
 11227      4E544547 
 11228              	.LASF199:
 11229 016b 6D5F746D 		.ascii	"m_tmp\000"
 11229      7000
 11230              	.LASF184:
 11231 0171 50415241 		.ascii	"PARAM_IDX\000"
 11231      4D5F4944 
 11231      5800
 11232              	.LASF16:
 11233 017b 696E7438 		.ascii	"int8\000"
 11233      00
 11234              	.LASF167:
 11235 0180 6765745F 		.ascii	"get_param_list\000"
 11235      70617261 
 11235      6D5F6C69 
 11235      737400
 11236              	.LASF233:
 11237 018f 636D645F 		.ascii	"cmd_get_accelerations\000"
 11237      6765745F 
 11237      61636365 
 11237      6C657261 
 11237      74696F6E 
 11238              	.LASF253:
 11239 01a5 636D645F 		.ascii	"cmd_get_emg\000"
 11239      6765745F 
 11239      656D6700 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 247


 11240              	.LASF127:
 11241 01b1 73745F65 		.ascii	"st_emg\000"
 11241      6D6700
 11242              	.LASF39:
 11243 01b8 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 11243      4F4D5F4D 
 11243      4541535F 
 11243      4F46465F 
 11243      3200
 11244              	.LASF298:
 11245 01ca 50756D70 		.ascii	"Pump_refNew\000"
 11245      5F726566 
 11245      4E657700 
 11246              	.LASF308:
 11247 01d6 72657375 		.ascii	"result\000"
 11247      6C7400
 11248              	.LASF118:
 11249 01dd 72656164 		.ascii	"ready\000"
 11249      7900
 11250              	.LASF176:
 11251 01e3 6175785F 		.ascii	"aux_str1\000"
 11251      73747231 
 11251      00
 11252              	.LASF29:
 11253 01ec 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 11253      4F4D5F50 
 11253      4F535F4C 
 11253      494D00
 11254              	.LASF84:
 11255 01fb 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 11255      4745545F 
 11255      4A4F5953 
 11255      5449434B 
 11255      00
 11256              	.LASF96:
 11257 020c 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 11257      545F4D4F 
 11257      44455F45 
 11257      4D475F50 
 11257      524F504F 
 11258              	.LASF244:
 11259 0228 745F7374 		.ascii	"t_start\000"
 11259      61727400 
 11260              	.LASF144:
 11261 0230 6D656E75 		.ascii	"menu\000"
 11261      00
 11262              	.LASF299:
 11263 0235 50574D5F 		.ascii	"PWM_IMU_1\000"
 11263      494D555F 
 11263      3100
 11264              	.LASF300:
 11265 023f 50574D5F 		.ascii	"PWM_IMU_2\000"
 11265      494D555F 
 11265      3200
 11266              	.LASF297:
 11267 0249 50756D70 		.ascii	"Pump_refOld\000"
 11267      5F726566 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 248


 11267      4F6C6400 
 11268              	.LASF283:
 11269 0255 74696D65 		.ascii	"timer_value\000"
 11269      725F7661 
 11269      6C756500 
 11270              	.LASF4:
 11271 0261 6C6F6E67 		.ascii	"long int\000"
 11271      20696E74 
 11271      00
 11272              	.LASF37:
 11273 026a 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
 11273      4F4D5F43 
 11273      5552525F 
 11273      5049445F 
 11273      3200
 11274              	.LASF259:
 11275 027c 636D645F 		.ascii	"cmd_get_SD_file\000"
 11275      6765745F 
 11275      53445F66 
 11275      696C6500 
 11276              	.LASF228:
 11277 028c 7365745A 		.ascii	"setZeros\000"
 11277      65726F73 
 11277      00
 11278              	.LASF122:
 11279 0295 756E7573 		.ascii	"unused_bytes\000"
 11279      65645F62 
 11279      79746573 
 11279      00
 11280              	.LASF151:
 11281 02a2 4E554D5F 		.ascii	"NUM_ITEMS\000"
 11281      4954454D 
 11281      5300
 11282              	.LASF185:
 11283 02ac 4D454D5F 		.ascii	"MEM_P\000"
 11283      5000
 11284              	.LASF257:
 11285 02b2 636D645F 		.ascii	"cmd_get_ADC_map\000"
 11285      6765745F 
 11285      4144435F 
 11285      6D617000 
 11286              	.LASF74:
 11287 02c2 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 11287      4745545F 
 11287      43555252 
 11287      454E5453 
 11287      00
 11288              	.LASF206:
 11289 02d3 70726570 		.ascii	"prepare_SD_EMG_history\000"
 11289      6172655F 
 11289      53445F45 
 11289      4D475F68 
 11289      6973746F 
 11290              	.LASF258:
 11291 02ea 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 11291      6765745F 
 11291      4144435F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 249


 11291      72617700 
 11292              	.LASF289:
 11293 02fa 73645061 		.ascii	"sdParam\000"
 11293      72616D00 
 11294              	.LASF36:
 11295 0302 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 11295      4F4D5F50 
 11295      4F535F50 
 11295      49445F32 
 11295      00
 11296              	.LASF301:
 11297 0313 70726573 		.ascii	"pressure_value\000"
 11297      73757265 
 11297      5F76616C 
 11297      756500
 11298              	.LASF250:
 11299 0322 636D645F 		.ascii	"cmd_ping\000"
 11299      70696E67 
 11299      00
 11300              	.LASF27:
 11301 032b 43555354 		.ascii	"CUSTOM_INPUT\000"
 11301      4F4D5F49 
 11301      4E505554 
 11301      00
 11302              	.LASF189:
 11303 0338 7365745F 		.ascii	"set_custom_param\000"
 11303      63757374 
 11303      6F6D5F70 
 11303      6172616D 
 11303      00
 11304              	.LASF262:
 11305 0349 636D645F 		.ascii	"cmd_remove_SD_file\000"
 11305      72656D6F 
 11305      76655F53 
 11305      445F6669 
 11305      6C6500
 11306              	.LASF41:
 11307 035c 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 11307      4F4D5F44 
 11307      52495645 
 11307      525F3200 
 11308              	.LASF0:
 11309 036c 7369676E 		.ascii	"signed char\000"
 11309      65642063 
 11309      68617200 
 11310              	.LASF133:
 11311 0378 6D617374 		.ascii	"master_mode_active\000"
 11311      65725F6D 
 11311      6F64655F 
 11311      61637469 
 11311      766500
 11312              	.LASF219:
 11313 038b 6D656D53 		.ascii	"memStore\000"
 11313      746F7265 
 11313      00
 11314              	.LASF261:
 11315 0394 66696C65 		.ascii	"filename\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 250


 11315      6E616D65 
 11315      00
 11316              	.LASF131:
 11317 039d 73776974 		.ascii	"switch_emg\000"
 11317      63685F65 
 11317      6D6700
 11318              	.LASF246:
 11319 03a8 72656164 		.ascii	"read_flag\000"
 11319      5F666C61 
 11319      6700
 11320              	.LASF285:
 11321 03b2 696E7465 		.ascii	"interrupt_flag\000"
 11321      72727570 
 11321      745F666C 
 11321      616700
 11322              	.LASF47:
 11323 03c1 4D454E55 		.ascii	"MENU_CTRL\000"
 11323      5F435452 
 11323      4C00
 11324              	.LASF1:
 11325 03cb 756E7369 		.ascii	"unsigned char\000"
 11325      676E6564 
 11325      20636861 
 11325      7200
 11326              	.LASF81:
 11327 03d9 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 11327      5345545F 
 11327      56494252 
 11327      4F544143 
 11327      54494C45 
 11328              	.LASF82:
 11329 03f5 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 11329      4745545F 
 11329      56494252 
 11329      4F544143 
 11329      54494C45 
 11330              	.LASF69:
 11331 0411 434D445F 		.ascii	"CMD_ACTIVATE\000"
 11331      41435449 
 11331      56415445 
 11331      00
 11332              	.LASF62:
 11333 041e 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 11333      53544F52 
 11333      455F4445 
 11333      4641554C 
 11333      545F5041 
 11334              	.LASF32:
 11335 0437 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 11335      4F4D5F48 
 11335      414E445F 
 11335      53494445 
 11335      00
 11336              	.LASF218:
 11337 0448 76616C75 		.ascii	"value\000"
 11337      6500
 11338              	.LASF158:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 251


 11339 044e 70726573 		.ascii	"pressure\000"
 11339      73757265 
 11339      00
 11340              	.LASF70:
 11341 0457 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 11341      4745545F 
 11341      41435449 
 11341      56415445 
 11341      00
 11342              	.LASF21:
 11343 0468 63686172 		.ascii	"char\000"
 11343      00
 11344              	.LASF267:
 11345 046d 76616C76 		.ascii	"valve_command\000"
 11345      655F636F 
 11345      6D6D616E 
 11345      6400
 11346              	.LASF265:
 11347 047b 70726573 		.ascii	"pressure_reference\000"
 11347      73757265 
 11347      5F726566 
 11347      6572656E 
 11347      636500
 11348              	.LASF223:
 11349 048e 7265745F 		.ascii	"ret_val\000"
 11349      76616C00 
 11350              	.LASF52:
 11351 0496 4D454E55 		.ascii	"MENU_SPI\000"
 11351      5F535049 
 11351      00
 11352              	.LASF148:
 11353 049f 70617261 		.ascii	"parameter\000"
 11353      6D657465 
 11353      7200
 11354              	.LASF162:
 11355 04a9 7061636B 		.ascii	"packet_string\000"
 11355      65745F73 
 11355      7472696E 
 11355      6700
 11356              	.LASF34:
 11357 04b7 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 11357      4F4D5F4C 
 11357      4153545F 
 11357      43484543 
 11357      4B45445F 
 11358              	.LASF215:
 11359 04cd 64617461 		.ascii	"data_length\000"
 11359      5F6C656E 
 11359      67746800 
 11360              	.LASF125:
 11361 04d9 706F735F 		.ascii	"pos_lim_sup\000"
 11361      6C696D5F 
 11361      73757000 
 11362              	.LASF230:
 11363 04e5 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 11363      6E69745F 
 11363      4F74626B 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 252


 11363      41637457 
 11363      72697374 
 11364              	.LASF130:
 11365 04fc 656D675F 		.ascii	"emg_speed\000"
 11365      73706565 
 11365      6400
 11366              	.LASF181:
 11367 0506 7061636B 		.ascii	"packet_data\000"
 11367      65745F64 
 11367      61746100 
 11368              	.LASF120:
 11369 0512 73745F64 		.ascii	"st_device\000"
 11369      65766963 
 11369      6500
 11370              	.LASF210:
 11371 051c 636F6D6D 		.ascii	"commWrite\000"
 11371      57726974 
 11371      6500
 11372              	.LASF276:
 11373 0526 64656163 		.ascii	"deactivate_slaves\000"
 11373      74697661 
 11373      74655F73 
 11373      6C617665 
 11373      7300
 11374              	.LASF222:
 11375 0538 70616765 		.ascii	"pages\000"
 11375      7300
 11376              	.LASF309:
 11377 053e 6D656D49 		.ascii	"memInit\000"
 11377      6E697400 
 11378              	.LASF44:
 11379 0546 6D656E75 		.ascii	"menu_type\000"
 11379      5F747970 
 11379      6500
 11380              	.LASF55:
 11381 0550 4D454E55 		.ascii	"MENU_DEVICE\000"
 11381      5F444556 
 11381      49434500 
 11382              	.LASF71:
 11383 055c 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 11383      5345545F 
 11383      494E5055 
 11383      545300
 11384              	.LASF292:
 11385 056b 53485F72 		.ascii	"SH_ref\000"
 11385      656600
 11386              	.LASF116:
 11387 0572 62756666 		.ascii	"buffer\000"
 11387      657200
 11388              	.LASF248:
 11389 0579 63757272 		.ascii	"curr_diff\000"
 11389      5F646966 
 11389      6600
 11390              	.LASF231:
 11391 0583 636D645F 		.ascii	"cmd_get_measurements\000"
 11391      6765745F 
 11391      6D656173 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 253


 11391      7572656D 
 11391      656E7473 
 11392              	.LASF161:
 11393 0598 72785F63 		.ascii	"rx_cmd\000"
 11393      6D6400
 11394              	.LASF114:
 11395 059f 54595045 		.ascii	"TYPE_DOUBLE\000"
 11395      5F444F55 
 11395      424C4500 
 11396              	.LASF273:
 11397 05ab 736C6176 		.ascii	"slave_motor_idx\000"
 11397      655F6D6F 
 11397      746F725F 
 11397      69647800 
 11398              	.LASF251:
 11399 05bb 636D645F 		.ascii	"cmd_get_inputs\000"
 11399      6765745F 
 11399      696E7075 
 11399      747300
 11400              	.LASF235:
 11401 05ca 6C617374 		.ascii	"last_aux_int16\000"
 11401      5F617578 
 11401      5F696E74 
 11401      313600
 11402              	.LASF103:
 11403 05d9 41434B5F 		.ascii	"ACK_ERROR\000"
 11403      4552524F 
 11403      5200
 11404              	.LASF94:
 11405 05e3 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 11405      545F4D4F 
 11405      44455F45 
 11405      58544552 
 11405      4E414C00 
 11406              	.LASF183:
 11407 05f7 696E6465 		.ascii	"index\000"
 11407      7800
 11408              	.LASF137:
 11409 05fd 6D617869 		.ascii	"maximum_pressure_kPa\000"
 11409      6D756D5F 
 11409      70726573 
 11409      73757265 
 11409      5F6B5061 
 11410              	.LASF43:
 11411 0612 63757374 		.ascii	"custom_param\000"
 11411      6F6D5F70 
 11411      6172616D 
 11411      00
 11412              	.LASF260:
 11413 061f 66696C65 		.ascii	"filename_length\000"
 11413      6E616D65 
 11413      5F6C656E 
 11413      67746800 
 11414              	.LASF247:
 11415 062f 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 11415      52656164 
 11415      52657343 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 254


 11415      75727246 
 11415      726F6D53 
 11416              	.LASF57:
 11417 0645 4D454E55 		.ascii	"MENU_WRIST\000"
 11417      5F575249 
 11417      535400
 11418              	.LASF306:
 11419 0650 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 11419      73657273 
 11419      5C6D676E 
 11419      6F63636F 
 11419      5C446F63 
 11420 067d 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 11420      485F5649 
 11420      4245535C 
 11420      46575F57 
 11420      65617261 
 11421 06ae 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 11421      56494245 
 11421      535F536F 
 11421      636B6574 
 11421      2E637964 
 11422              	.LASF287:
 11423 06c5 72657365 		.ascii	"reset_PSoC_flag\000"
 11423      745F5053 
 11423      6F435F66 
 11423      6C616700 
 11424              	.LASF272:
 11425 06d5 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 11425      5F616374 
 11425      5F777269 
 11425      73745F63 
 11425      6F6E7472 
 11426              	.LASF115:
 11427 06ec 54595045 		.ascii	"TYPE_STRING\000"
 11427      5F535452 
 11427      494E4700 
 11428              	.LASF61:
 11429 06f8 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 11429      53544F52 
 11429      455F5041 
 11429      52414D53 
 11429      00
 11430              	.LASF7:
 11431 0709 6C6F6E67 		.ascii	"long unsigned int\000"
 11431      20756E73 
 11431      69676E65 
 11431      6420696E 
 11431      7400
 11432              	.LASF65:
 11433 071b 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 11433      424F4F54 
 11433      4C4F4144 
 11433      455200
 11434              	.LASF212:
 11435 072a 6E756D5F 		.ascii	"num_of_bytes\000"
 11435      6F665F62 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 255


 11435      79746573 
 11435      00
 11436              	.LASF100:
 11437 0737 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 11437      545F4D4F 
 11437      44455F4A 
 11437      4F595354 
 11437      49434B00 
 11438              	.LASF220:
 11439 074b 64697370 		.ascii	"displacement\000"
 11439      6C616365 
 11439      6D656E74 
 11439      00
 11440              	.LASF242:
 11441 0758 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 11441      6765745F 
 11441      76696272 
 11441      6F746163 
 11441      74696C65 
 11442              	.LASF166:
 11443 0774 7374725F 		.ascii	"str_sd_data\000"
 11443      73645F64 
 11443      61746100 
 11444              	.LASF134:
 11445 0780 736C6176 		.ascii	"slave_ID\000"
 11445      655F4944 
 11445      00
 11446              	.LASF104:
 11447 0789 41434B5F 		.ascii	"ACK_OK\000"
 11447      4F4B00
 11448              	.LASF106:
 11449 0790 54595045 		.ascii	"TYPE_FLAG\000"
 11449      5F464C41 
 11449      4700
 11450              	.LASF180:
 11451 079a 7061636B 		.ascii	"packet_length\000"
 11451      65745F6C 
 11451      656E6774 
 11451      6800
 11452              	.LASF30:
 11453 07a8 43555354 		.ascii	"CUSTOM_REST_POS\000"
 11453      4F4D5F52 
 11453      4553545F 
 11453      504F5300 
 11454              	.LASF126:
 11455 07b8 696E7075 		.ascii	"input_mode\000"
 11455      745F6D6F 
 11455      646500
 11456              	.LASF76:
 11457 07c3 434D445F 		.ascii	"CMD_GET_EMG\000"
 11457      4745545F 
 11457      454D4700 
 11458              	.LASF226:
 11459 07cf 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 11459      6E69745F 
 11459      536F6674 
 11459      48616E64 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 256


 11459      50726F00 
 11460              	.LASF156:
 11461 07e3 70696E67 		.ascii	"ping\000"
 11461      00
 11462              	.LASF64:
 11463 07e8 434D445F 		.ascii	"CMD_GET_INFO\000"
 11463      4745545F 
 11463      494E464F 
 11463      00
 11464              	.LASF190:
 11465 07f5 6765745F 		.ascii	"get_IMU_param_list\000"
 11465      494D555F 
 11465      70617261 
 11465      6D5F6C69 
 11465      737400
 11466              	.LASF153:
 11467 0808 4D454E55 		.ascii	"MENU\000"
 11467      00
 11468              	.LASF54:
 11469 080d 4D454E55 		.ascii	"MENU_DRIVER\000"
 11469      5F445249 
 11469      56455200 
 11470              	.LASF139:
 11471 0819 76696272 		.ascii	"vibrotactile_feedback_active\000"
 11471      6F746163 
 11471      74696C65 
 11471      5F666565 
 11471      64626163 
 11472              	.LASF75:
 11473 0836 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 11473      4745545F 
 11473      43555252 
 11473      5F414E44 
 11473      5F4D4541 
 11474              	.LASF304:
 11475 084c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11475      43313120 
 11475      352E342E 
 11475      31203230 
 11475      31363036 
 11476 087f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11476      20726576 
 11476      6973696F 
 11476      6E203233 
 11476      37373135 
 11477 08b2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11477      66756E63 
 11477      74696F6E 
 11477      2D736563 
 11477      74696F6E 
 11478              	.LASF234:
 11479 08da 636D645F 		.ascii	"cmd_get_joystick\000"
 11479      6765745F 
 11479      6A6F7973 
 11479      7469636B 
 11479      00
 11480              	.LASF80:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 257


 11481 08eb 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 11481      5345545F 
 11481      43554646 
 11481      5F494E50 
 11481      55545300 
 11482              	.LASF6:
 11483 08ff 5F5F7569 		.ascii	"__uint32_t\000"
 11483      6E743332 
 11483      5F7400
 11484              	.LASF8:
 11485 090a 6C6F6E67 		.ascii	"long long int\000"
 11485      206C6F6E 
 11485      6720696E 
 11485      7400
 11486              	.LASF123:
 11487 0918 73745F73 		.ascii	"st_slave\000"
 11487      6C617665 
 11487      00
 11488              	.LASF263:
 11489 0921 76696272 		.ascii	"vibrotactile_control\000"
 11489      6F746163 
 11489      74696C65 
 11489      5F636F6E 
 11489      74726F6C 
 11490              	.LASF108:
 11491 0936 54595045 		.ascii	"TYPE_UINT8\000"
 11491      5F55494E 
 11491      543800
 11492              	.LASF143:
 11493 0941 53485F63 		.ascii	"SH_config\000"
 11493      6F6E6669 
 11493      6700
 11494              	.LASF240:
 11495 094b 636D645F 		.ascii	"cmd_get_currents\000"
 11495      6765745F 
 11495      63757272 
 11495      656E7473 
 11495      00
 11496              	.LASF286:
 11497 095c 6368616E 		.ascii	"change_ext_ref_flag\000"
 11497      67655F65 
 11497      78745F72 
 11497      65665F66 
 11497      6C616700 
 11498              	.LASF20:
 11499 0970 646F7562 		.ascii	"double\000"
 11499      6C6500
 11500              	.LASF91:
 11501 0977 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 11501      4745545F 
 11501      53445F53 
 11501      494E474C 
 11501      455F4649 
 11502              	.LASF295:
 11503 098e 56545F72 		.ascii	"VT_refNew\000"
 11503      65664E65 
 11503      7700
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 258


 11504              	.LASF277:
 11505 0998 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11505      52784275 
 11505      66666572 
 11505      00
 11506              	.LASF270:
 11507 09a5 56545F63 		.ascii	"VT_control\000"
 11507      6F6E7472 
 11507      6F6C00
 11508              	.LASF19:
 11509 09b0 666C6F61 		.ascii	"float\000"
 11509      7400
 11510              	.LASF196:
 11511 09b6 6175785F 		.ascii	"aux_int8\000"
 11511      696E7438 
 11511      00
 11512              	.LASF92:
 11513 09bf 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 11513      52454D4F 
 11513      56455F53 
 11513      445F5349 
 11513      4E474C45 
 11514              	.LASF266:
 11515 09d9 6572725F 		.ascii	"err_pressure\000"
 11515      70726573 
 11515      73757265 
 11515      00
 11516              	.LASF178:
 11517 09e6 636F756E 		.ascii	"count\000"
 11517      7400
 11518              	.LASF157:
 11519 09ec 73745F61 		.ascii	"st_adc_meas\000"
 11519      64635F6D 
 11519      65617300 
 11520              	.LASF173:
 11521 09f8 6D5F6164 		.ascii	"m_addr\000"
 11521      647200
 11522              	.LASF282:
 11523 09ff 635F6D65 		.ascii	"c_mem\000"
 11523      6D00
 11524              	.LASF214:
 11525 0a05 64617461 		.ascii	"data_array\000"
 11525      5F617272 
 11525      617900
 11526              	.LASF10:
 11527 0a10 756E7369 		.ascii	"unsigned int\000"
 11527      676E6564 
 11527      20696E74 
 11527      00
 11528              	.LASF227:
 11529 0a1d 6D656D49 		.ascii	"memInit_Master\000"
 11529      6E69745F 
 11529      4D617374 
 11529      657200
 11530              	.LASF204:
 11531 0a2c 70726570 		.ascii	"prepare_SD_legend\000"
 11531      6172655F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 259


 11531      53445F6C 
 11531      6567656E 
 11531      6400
 11532              	.LASF58:
 11533 0a3e 53485F63 		.ascii	"SH_command\000"
 11533      6F6D6D61 
 11533      6E6400
 11534              	.LASF110:
 11535 0a49 54595045 		.ascii	"TYPE_UINT16\000"
 11535      5F55494E 
 11535      54313600 
 11536              	.LASF142:
 11537 0a55 666C6167 		.ascii	"flag\000"
 11537      00
 11538              	.LASF38:
 11539 0a5a 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 11539      4F4D5F49 
 11539      4E505554 
 11539      5F3200
 11540              	.LASF268:
 11541 0a69 785F7661 		.ascii	"x_value\000"
 11541      6C756500 
 11542              	.LASF236:
 11543 0a71 636D645F 		.ascii	"cmd_set_inputs\000"
 11543      7365745F 
 11543      696E7075 
 11543      747300
 11544              	.LASF49:
 11545 0a80 4D454E55 		.ascii	"MENU_R_L\000"
 11545      5F525F4C 
 11545      00
 11546              	.LASF171:
 11547 0a89 4D454E55 		.ascii	"MENU_LIST\000"
 11547      5F4C4953 
 11547      5400
 11548              	.LASF95:
 11549 0a93 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 11549      545F4D4F 
 11549      44455F45 
 11549      4E434F44 
 11549      45523300 
 11550              	.LASF211:
 11551 0aa7 636F6D6D 		.ascii	"commWriteID\000"
 11551      57726974 
 11551      65494400 
 11552              	.LASF87:
 11553 0ab3 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 11553      4745545F 
 11553      454E434F 
 11553      4445525F 
 11553      434F4E46 
 11554              	.LASF154:
 11555 0ac8 4E554D5F 		.ascii	"NUM_STR\000"
 11555      53545200 
 11556              	.LASF238:
 11557 0ad0 636D645F 		.ascii	"cmd_get_activate\000"
 11557      6765745F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 260


 11557      61637469 
 11557      76617465 
 11557      00
 11558              	.LASF271:
 11559 0ae1 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 11559      61637469 
 11559      76617469 
 11559      6F6E5F76 
 11559      656C6F63 
 11560              	.LASF113:
 11561 0afd 54595045 		.ascii	"TYPE_FLOAT\000"
 11561      5F464C4F 
 11561      415400
 11562              	.LASF40:
 11563 0b08 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 11563      4F4D5F50 
 11563      4F535F4C 
 11563      494D5F32 
 11563      00
 11564              	.LASF202:
 11565 0b19 70726570 		.ascii	"prepare_R01_info\000"
 11565      6172655F 
 11565      5230315F 
 11565      696E666F 
 11565      00
 11566              	.LASF109:
 11567 0b2a 54595045 		.ascii	"TYPE_INT16\000"
 11567      5F494E54 
 11567      313600
 11568              	.LASF198:
 11569 0b35 6175785F 		.ascii	"aux_uint16\000"
 11569      75696E74 
 11569      313600
 11570              	.LASF128:
 11571 0b40 656D675F 		.ascii	"emg_threshold\000"
 11571      74687265 
 11571      73686F6C 
 11571      6400
 11572              	.LASF79:
 11573 0b4e 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 11573      4745545F 
 11573      43555252 
 11573      5F444946 
 11573      4600
 11574              	.LASF42:
 11575 0b60 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 11575      4F4D5F44 
 11575      45565F54 
 11575      59504500 
 11576              	.LASF229:
 11577 0b70 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 11577      6E69745F 
 11577      41697243 
 11577      68616D62 
 11577      6572735F 
 11578              	.LASF23:
 11579 0b94 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 261


 11579      20646F75 
 11579      626C6500 
 11580              	.LASF112:
 11581 0ba0 54595045 		.ascii	"TYPE_UINT32\000"
 11581      5F55494E 
 11581      54333200 
 11582              	.LASF135:
 11583 0bac 73745F46 		.ascii	"st_FB_spec\000"
 11583      425F7370 
 11583      656300
 11584              	.LASF216:
 11585 0bb7 63686563 		.ascii	"checksum\000"
 11585      6B73756D 
 11585      00
 11586              	.LASF302:
 11587 0bc0 73757065 		.ascii	"superstring\000"
 11587      72737472 
 11587      696E6700 
 11588              	.LASF68:
 11589 0bcc 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 11589      48414E44 
 11589      5F43414C 
 11589      49425241 
 11589      544500
 11590              	.LASF293:
 11591 0bdf 56545F72 		.ascii	"VT_ref\000"
 11591      656600
 11592              	.LASF274:
 11593 0be6 64726976 		.ascii	"drive_slave\000"
 11593      655F736C 
 11593      61766500 
 11594              	.LASF102:
 11595 0bf2 61636B6E 		.ascii	"acknowledgment_values\000"
 11595      6F776C65 
 11595      64676D65 
 11595      6E745F76 
 11595      616C7565 
 11596              	.LASF225:
 11597 0c08 6D656D52 		.ascii	"memRestore\000"
 11597      6573746F 
 11597      726500
 11598              	.LASF192:
 11599 0c13 696E666F 		.ascii	"info_string\000"
 11599      5F737472 
 11599      696E6700 
 11600              	.LASF168:
 11601 0c1f 6E756D5F 		.ascii	"num_params\000"
 11601      70617261 
 11601      6D7300
 11602              	.LASF9:
 11603 0c2a 6C6F6E67 		.ascii	"long long unsigned int\000"
 11603      206C6F6E 
 11603      6720756E 
 11603      7369676E 
 11603      65642069 
 11604              	.LASF155:
 11605 0c41 63757374 		.ascii	"custom\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 262


 11605      6F6D00
 11606              	.LASF53:
 11607 0c48 4D454E55 		.ascii	"MENU_USER\000"
 11607      5F555345 
 11607      5200
 11608              	.LASF111:
 11609 0c52 54595045 		.ascii	"TYPE_INT32\000"
 11609      5F494E54 
 11609      333200
 11610              	.LASF193:
 11611 0c5d 6175785F 		.ascii	"aux_uint32\000"
 11611      75696E74 
 11611      333200
 11612              	.LASF117:
 11613 0c68 6C656E67 		.ascii	"length\000"
 11613      746800
 11614              	.LASF172:
 11615 0c6f 73656E64 		.ascii	"sendToDevice\000"
 11615      546F4465 
 11615      76696365 
 11615      00
 11616              	.LASF78:
 11617 0c7c 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 11617      4745545F 
 11617      41434345 
 11617      4C00
 11618              	.LASF232:
 11619 0c8a 636D645F 		.ascii	"cmd_get_velocities\000"
 11619      6765745F 
 11619      76656C6F 
 11619      63697469 
 11619      657300
 11620              	.LASF224:
 11621 0c9d 6D656D52 		.ascii	"memRecall\000"
 11621      6563616C 
 11621      6C00
 11622              	.LASF252:
 11623 0ca7 636D645F 		.ascii	"cmd_store_params\000"
 11623      73746F72 
 11623      655F7061 
 11623      72616D73 
 11623      00
 11624              	.LASF179:
 11625 0cb8 6175785F 		.ascii	"aux_char\000"
 11625      63686172 
 11625      00
 11626              	.LASF83:
 11627 0cc1 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 11627      5345545F 
 11627      42415544 
 11627      52415445 
 11627      00
 11628              	.LASF191:
 11629 0cd2 71626164 		.ascii	"qbadminp_string\000"
 11629      6D696E70 
 11629      5F737472 
 11629      696E6700 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 263


 11630              	.LASF22:
 11631 0ce2 72656738 		.ascii	"reg8\000"
 11631      00
 11632              	.LASF138:
 11633 0ce7 70726F70 		.ascii	"prop_err_fb_gain\000"
 11633      5F657272 
 11633      5F66625F 
 11633      6761696E 
 11633      00
 11634              	.LASF208:
 11635 0cf8 636F6D6D 		.ascii	"commWrite_old_id\000"
 11635      57726974 
 11635      655F6F6C 
 11635      645F6964 
 11635      00
 11636              	.LASF182:
 11637 0d09 6D616E61 		.ascii	"manage_param_list\000"
 11637      67655F70 
 11637      6172616D 
 11637      5F6C6973 
 11637      7400
 11638              	.LASF195:
 11639 0d1b 6175785F 		.ascii	"aux_uint8\000"
 11639      75696E74 
 11639      3800
 11640              	.LASF63:
 11641 0d25 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 11641      52455354 
 11641      4F52455F 
 11641      50415241 
 11641      4D5300
 11642              	.LASF51:
 11643 0d38 4D454E55 		.ascii	"MENU_EXP\000"
 11643      5F455850 
 11643      00
 11644              	.LASF288:
 11645 0d41 73644669 		.ascii	"sdFile\000"
 11645      6C6500
 11646              	.LASF169:
 11647 0d48 6E756D5F 		.ascii	"num_menus\000"
 11647      6D656E75 
 11647      7300
 11648              	.LASF45:
 11649 0d52 4D454E55 		.ascii	"MENU_NO_MENU\000"
 11649      5F4E4F5F 
 11649      4D454E55 
 11649      00
 11650              	.LASF203:
 11651 0d5f 70726570 		.ascii	"prepare_SD_param_info\000"
 11651      6172655F 
 11651      53445F70 
 11651      6172616D 
 11651      5F696E66 
 11652              	.LASF201:
 11653 0d75 70726570 		.ascii	"prepare_counter_info\000"
 11653      6172655F 
 11653      636F756E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 264


 11653      7465725F 
 11653      696E666F 
 11654              	.LASF205:
 11655 0d8a 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 11655      6172655F 
 11655      53445F45 
 11655      4D475F48 
 11655      6973746F 
 11656              	.LASF209:
 11657 0da8 6F6C645F 		.ascii	"old_id\000"
 11657      696400
 11658              	.LASF307:
 11659 0daf 5F5F5245 		.ascii	"__REV16\000"
 11659      56313600 
 11660              	.LASF149:
 11661 0db7 5641525F 		.ascii	"VAR_P\000"
 11661      5000
 11662              	.LASF239:
 11663 0dbd 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 11663      6765745F 
 11663      63757272 
 11663      5F616E64 
 11663      5F6D6561 
 11664              	.LASF165:
 11665 0dd3 696E666F 		.ascii	"info_type\000"
 11665      5F747970 
 11665      6500
 11666              	.LASF56:
 11667 0ddd 4D454E55 		.ascii	"MENU_FSM\000"
 11667      5F46534D 
 11667      00
 11668              	.LASF90:
 11669 0de6 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 11669      4745545F 
 11669      4144435F 
 11669      52415700 
 11670              	.LASF101:
 11671 0df6 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 11671      545F4D4F 
 11671      44455F45 
 11671      4D475F50 
 11671      524F504F 
 11672              	.LASF86:
 11673 0e15 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 11673      4745545F 
 11673      494D555F 
 11673      50415241 
 11673      4D00
 11674              	.LASF284:
 11675 0e27 74696D65 		.ascii	"timer_value0\000"
 11675      725F7661 
 11675      6C756530 
 11675      00
 11676              	.LASF88:
 11677 0e34 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 11677      4745545F 
 11677      454E434F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 265


 11677      4445525F 
 11677      52415700 
 11678              	.LASF146:
 11679 0e48 72657365 		.ascii	"reset\000"
 11679      7400
 11680              	.LASF145:
 11681 0e4e 6E616D65 		.ascii	"name\000"
 11681      00
 11682              	.LASF73:
 11683 0e53 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 11683      4745545F 
 11683      4D454153 
 11683      5552454D 
 11683      454E5453 
 11684              	.LASF140:
 11685 0e68 61697263 		.ascii	"airchamber_feedback_active\000"
 11685      68616D62 
 11685      65725F66 
 11685      65656462 
 11685      61636B5F 
 11686              	.LASF279:
 11687 0e83 675F6164 		.ascii	"g_adc_measOld\000"
 11687      635F6D65 
 11687      61734F6C 
 11687      6400
 11688              	.LASF256:
 11689 0e91 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 11689      6765745F 
 11689      656E636F 
 11689      6465725F 
 11689      72617700 
 11690              	.LASF13:
 11691 0ea5 75696E74 		.ascii	"uint8\000"
 11691      3800
 11692              	.LASF159:
 11693 0eab 636F6D6D 		.ascii	"commProcess\000"
 11693      50726F63 
 11693      65737300 
 11694              	.LASF2:
 11695 0eb7 73686F72 		.ascii	"short int\000"
 11695      7420696E 
 11695      7400
 11696              	.LASF31:
 11697 0ec1 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 11697      4F4D5F52 
 11697      4553545F 
 11697      504F535F 
 11697      44454C41 
 11698              	.LASF72:
 11699 0ed7 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 11699      4745545F 
 11699      494E5055 
 11699      545300
 11700              	.LASF89:
 11701 0ee6 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 11701      4745545F 
 11701      4144435F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 266


 11701      434F4E46 
 11701      00
 11702              	.LASF60:
 11703 0ef7 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 11703      5345545F 
 11703      5A45524F 
 11703      5300
 11704              	.LASF197:
 11705 0f05 6175785F 		.ascii	"aux_int16\000"
 11705      696E7431 
 11705      3600
 11706              	.LASF303:
 11707 0f0f 45455052 		.ascii	"EEPROM_ADDR\000"
 11707      4F4D5F41 
 11707      44445200 
 11708              	.LASF26:
 11709 0f1b 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 11709      4F4D5F43 
 11709      5552525F 
 11709      50494400 
 11710              	.LASF188:
 11711 0f2b 4E554D5F 		.ascii	"NUM_PARAMs\000"
 11711      50415241 
 11711      4D7300
 11712              	.LASF77:
 11713 0f36 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 11713      4745545F 
 11713      56454C4F 
 11713      43495449 
 11713      455300
 11714              	.LASF67:
 11715 0f49 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 11715      4745545F 
 11715      50415241 
 11715      4D5F4C49 
 11715      535400
 11716              	.LASF105:
 11717 0f5c 64617461 		.ascii	"data_types\000"
 11717      5F747970 
 11717      657300
 11718              	.LASF17:
 11719 0f67 696E7431 		.ascii	"int16\000"
 11719      3600
 11720              	.LASF50:
 11721 0f6d 4D454E55 		.ascii	"MENU_ON_OFF\000"
 11721      5F4F4E5F 
 11721      4F464600 
 11722              	.LASF35:
 11723 0f79 43555354 		.ascii	"CUSTOM_DRIVER\000"
 11723      4F4D5F44 
 11723      52495645 
 11723      5200
 11724              	.LASF28:
 11725 0f87 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 11725      4F4D5F4D 
 11725      4541535F 
 11725      4F464600 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 267


 11726              	.LASF255:
 11727 0f97 636D645F 		.ascii	"cmd_get_encoder_map\000"
 11727      6765745F 
 11727      656E636F 
 11727      6465725F 
 11727      6D617000 
 11728              	.LASF12:
 11729 0fab 75696E74 		.ascii	"uint32_t\000"
 11729      33325F74 
 11729      00
 11730              	.LASF194:
 11731 0fb4 6175785F 		.ascii	"aux_float\000"
 11731      666C6F61 
 11731      7400
 11732              	.LASF170:
 11733 0fbe 50415241 		.ascii	"PARAM_LIST\000"
 11733      4D5F4C49 
 11733      535400
 11734              	.LASF217:
 11735 0fc9 73656E64 		.ascii	"sendAcknowledgment\000"
 11735      41636B6E 
 11735      6F776C65 
 11735      64676D65 
 11735      6E7400
 11736              	.LASF177:
 11737 0fdc 6175785F 		.ascii	"aux_int32\000"
 11737      696E7433 
 11737      3200
 11738              	.LASF121:
 11739 0fe6 62617564 		.ascii	"baud_rate\000"
 11739      5F726174 
 11739      6500
 11740              	.LASF245:
 11741 0ff0 745F656E 		.ascii	"t_end\000"
 11741      6400
 11742              	.LASF241:
 11743 0ff6 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 11743      6765745F 
 11743      63757272 
 11743      656E7473 
 11743      5F666F72 
 11744              	.LASF85:
 11745 1010 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 11745      4745545F 
 11745      494D555F 
 11745      52454144 
 11745      494E4753 
 11746              	.LASF187:
 11747 1025 70617261 		.ascii	"param_type\000"
 11747      6D5F7479 
 11747      706500
 11748              	.LASF290:
 11749 1030 73645230 		.ascii	"sdR01File\000"
 11749      3146696C 
 11749      6500
 11750              	.LASF213:
 11751 103a 4C435243 		.ascii	"LCRChecksum\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 268


 11751      6865636B 
 11751      73756D00 
 11752              	.LASF3:
 11753 1046 73686F72 		.ascii	"short unsigned int\000"
 11753      7420756E 
 11753      7369676E 
 11753      65642069 
 11753      6E7400
 11754              	.LASF281:
 11755 1059 675F6D65 		.ascii	"g_mem\000"
 11755      6D00
 11756              	.LASF278:
 11757 105f 675F6164 		.ascii	"g_adc_meas\000"
 11757      635F6D65 
 11757      617300
 11758              	.LASF136:
 11759 106a 6D61785F 		.ascii	"max_residual_current\000"
 11759      72657369 
 11759      6475616C 
 11759      5F637572 
 11759      72656E74 
 11760              	.LASF141:
 11761 107f 73745F65 		.ascii	"st_eeprom\000"
 11761      6570726F 
 11761      6D00
 11762              	.LASF150:
 11763 1089 54595045 		.ascii	"TYPES\000"
 11763      5300
 11764              	.LASF18:
 11765 108f 696E7433 		.ascii	"int32\000"
 11765      3200
 11766              	.LASF163:
 11767 1095 696E666F 		.ascii	"infoGet\000"
 11767      47657400 
 11768              	.LASF291:
 11769 109d 6D617374 		.ascii	"master_mode\000"
 11769      65725F6D 
 11769      6F646500 
 11770              	.LASF5:
 11771 10a9 5F5F696E 		.ascii	"__int32_t\000"
 11771      7433325F 
 11771      7400
 11772              	.LASF294:
 11773 10b3 56545F72 		.ascii	"VT_refOld\000"
 11773      65664F6C 
 11773      6400
 11774              	.LASF129:
 11775 10bd 656D675F 		.ascii	"emg_max_value\000"
 11775      6D61785F 
 11775      76616C75 
 11775      6500
 11776              	.LASF243:
 11777 10cb 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 11777      52656164 
 11777      494D5546 
 11777      726F6D53 
 11777      4800
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccA8j7dD.s 			page 269


 11778              	.LASF305:
 11779 10dd 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 11779      72635C63 
 11779      6F6D6D61 
 11779      6E645F70 
 11779      726F6365 
 11780              	.LASF93:
 11781 10f9 53485F69 		.ascii	"SH_input_mode\000"
 11781      6E707574 
 11781      5F6D6F64 
 11781      6500
 11782              	.LASF25:
 11783 1107 43555354 		.ascii	"CUSTOM_POS_PID\000"
 11783      4F4D5F50 
 11783      4F535F50 
 11783      494400
 11784              	.LASF107:
 11785 1116 54595045 		.ascii	"TYPE_INT8\000"
 11785      5F494E54 
 11785      3800
 11786              	.LASF207:
 11787 1120 494D555F 		.ascii	"IMU_reading_info\000"
 11787      72656164 
 11787      696E675F 
 11787      696E666F 
 11787      00
 11788              	.LASF14:
 11789 1131 75696E74 		.ascii	"uint16\000"
 11789      313600
 11790              	.LASF296:
 11791 1138 50756D70 		.ascii	"Pump_ref\000"
 11791      5F726566 
 11791      00
 11792              	.LASF175:
 11793 1141 6175785F 		.ascii	"aux_str\000"
 11793      73747200 
 11794              	.LASF59:
 11795 1149 434D445F 		.ascii	"CMD_PING\000"
 11795      50494E47 
 11795      00
 11796              	.LASF237:
 11797 1152 636D645F 		.ascii	"cmd_activate\000"
 11797      61637469 
 11797      76617465 
 11797      00
 11798              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
