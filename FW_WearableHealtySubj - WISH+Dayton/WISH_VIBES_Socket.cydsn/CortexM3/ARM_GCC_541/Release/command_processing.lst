ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.section	.text.commProcess,"ax",%progbits
  27              		.align	2
  28              		.global	commProcess
  29              		.thumb
  30              		.thumb_func
  31              		.type	commProcess, %function
  32              	commProcess:
  33              	.LFB64:
  34              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 2


  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** //================================================================     variables
  50:..\src/command_processing.c **** 
  51:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  52:..\src/command_processing.c **** 
  53:..\src/command_processing.c **** //==============================================================================
  54:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  55:..\src/command_processing.c **** //==============================================================================
  56:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  57:..\src/command_processing.c **** //      - Verify checksum;
  58:..\src/command_processing.c **** //      - Process commands;
  59:..\src/command_processing.c **** //==============================================================================
  60:..\src/command_processing.c **** 
  61:..\src/command_processing.c **** void commProcess(void){
  35              		.loc 1 61 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 48
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8CB0     		sub	sp, sp, #48
  44              		.cfi_def_cfa_offset 56
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  62:..\src/command_processing.c **** 
  63:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  64:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
  47              		.loc 1 64 0
  48 0006 0E4B     		ldr	r3, .L54
  49 0008 1B78     		ldrb	r3, [r3]
  50 000a 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 3


  65:..\src/command_processing.c **** 
  66:..\src/command_processing.c **** //==========================================================     verify checksum
  67:..\src/command_processing.c **** 
  68:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  51              		.loc 1 68 0
  52 000e 0C4B     		ldr	r3, .L54
  53 0010 B3F98030 		ldrsh	r3, [r3, #128]
  54 0014 DBB2     		uxtb	r3, r3
  55 0016 013B     		subs	r3, r3, #1
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 1946     		mov	r1, r3
  58 001c 0848     		ldr	r0, .L54
  59 001e FFF7FEFF 		bl	LCRChecksum
  60 0022 0346     		mov	r3, r0
  61 0024 1946     		mov	r1, r3
  62 0026 064B     		ldr	r3, .L54
  63 0028 B3F98030 		ldrsh	r3, [r3, #128]
  64 002c 013B     		subs	r3, r3, #1
  65 002e 044A     		ldr	r2, .L54
  66 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  67 0032 9942     		cmp	r1, r3
  68 0034 06D0     		beq	.L2
  69:..\src/command_processing.c ****         // Wrong checksum
  70:..\src/command_processing.c ****         g_rx.ready = 0;
  69              		.loc 1 70 0
  70 0036 024B     		ldr	r3, .L54
  71 0038 0022     		movs	r2, #0
  72 003a 83F88420 		strb	r2, [r3, #132]
  71:..\src/command_processing.c ****         return;
  73              		.loc 1 71 0
  74 003e 07E3     		b	.L1
  75              	.L55:
  76              		.align	2
  77              	.L54:
  78 0040 00000000 		.word	g_rx
  79              	.L2:
  72:..\src/command_processing.c ****     }
  73:..\src/command_processing.c **** 
  74:..\src/command_processing.c ****     switch(rx_cmd) {
  80              		.loc 1 74 0
  81 0044 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  82 0048 FA2B     		cmp	r3, #250
  83 004a 00F20083 		bhi	.L53
  84 004e 01A2     		adr	r2, .L6
  85 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  86              		.p2align 2
  87              	.L6:
  88 0054 CD040000 		.word	.L5+1
  89 0058 AD040000 		.word	.L7+1
  90 005c 4F060000 		.word	.L53+1
  91 0060 D3040000 		.word	.L8+1
  92 0064 D9040000 		.word	.L9+1
  93 0068 F5040000 		.word	.L10+1
  94 006c 95040000 		.word	.L11+1
  95 0070 4F060000 		.word	.L53+1
  96 0074 4F060000 		.word	.L53+1
  97 0078 29050000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 4


  98 007c 0F050000 		.word	.L13+1
  99 0080 4F060000 		.word	.L53+1
 100 0084 B3040000 		.word	.L14+1
 101 0088 4B050000 		.word	.L15+1
 102 008c 4F060000 		.word	.L53+1
 103 0090 4F060000 		.word	.L53+1
 104 0094 4F060000 		.word	.L53+1
 105 0098 4F060000 		.word	.L53+1
 106 009c 4F060000 		.word	.L53+1
 107 00a0 4F060000 		.word	.L53+1
 108 00a4 4F060000 		.word	.L53+1
 109 00a8 4F060000 		.word	.L53+1
 110 00ac 4F060000 		.word	.L53+1
 111 00b0 4F060000 		.word	.L53+1
 112 00b4 4F060000 		.word	.L53+1
 113 00b8 4F060000 		.word	.L53+1
 114 00bc 4F060000 		.word	.L53+1
 115 00c0 4F060000 		.word	.L53+1
 116 00c4 4F060000 		.word	.L53+1
 117 00c8 4F060000 		.word	.L53+1
 118 00cc 4F060000 		.word	.L53+1
 119 00d0 4F060000 		.word	.L53+1
 120 00d4 4F060000 		.word	.L53+1
 121 00d8 4F060000 		.word	.L53+1
 122 00dc 4F060000 		.word	.L53+1
 123 00e0 4F060000 		.word	.L53+1
 124 00e4 4F060000 		.word	.L53+1
 125 00e8 4F060000 		.word	.L53+1
 126 00ec 4F060000 		.word	.L53+1
 127 00f0 4F060000 		.word	.L53+1
 128 00f4 4F060000 		.word	.L53+1
 129 00f8 4F060000 		.word	.L53+1
 130 00fc 4F060000 		.word	.L53+1
 131 0100 4F060000 		.word	.L53+1
 132 0104 4F060000 		.word	.L53+1
 133 0108 4F060000 		.word	.L53+1
 134 010c 4F060000 		.word	.L53+1
 135 0110 4F060000 		.word	.L53+1
 136 0114 4F060000 		.word	.L53+1
 137 0118 4F060000 		.word	.L53+1
 138 011c 4F060000 		.word	.L53+1
 139 0120 4F060000 		.word	.L53+1
 140 0124 4F060000 		.word	.L53+1
 141 0128 4F060000 		.word	.L53+1
 142 012c 4F060000 		.word	.L53+1
 143 0130 4F060000 		.word	.L53+1
 144 0134 4F060000 		.word	.L53+1
 145 0138 4F060000 		.word	.L53+1
 146 013c 4F060000 		.word	.L53+1
 147 0140 4F060000 		.word	.L53+1
 148 0144 4F060000 		.word	.L53+1
 149 0148 4F060000 		.word	.L53+1
 150 014c 4F060000 		.word	.L53+1
 151 0150 4F060000 		.word	.L53+1
 152 0154 4F060000 		.word	.L53+1
 153 0158 4F060000 		.word	.L53+1
 154 015c 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 5


 155 0160 4F060000 		.word	.L53+1
 156 0164 4F060000 		.word	.L53+1
 157 0168 4F060000 		.word	.L53+1
 158 016c 4F060000 		.word	.L53+1
 159 0170 4F060000 		.word	.L53+1
 160 0174 4F060000 		.word	.L53+1
 161 0178 4F060000 		.word	.L53+1
 162 017c 4F060000 		.word	.L53+1
 163 0180 4F060000 		.word	.L53+1
 164 0184 4F060000 		.word	.L53+1
 165 0188 4F060000 		.word	.L53+1
 166 018c 4F060000 		.word	.L53+1
 167 0190 4F060000 		.word	.L53+1
 168 0194 4F060000 		.word	.L53+1
 169 0198 4F060000 		.word	.L53+1
 170 019c 4F060000 		.word	.L53+1
 171 01a0 4F060000 		.word	.L53+1
 172 01a4 4F060000 		.word	.L53+1
 173 01a8 4F060000 		.word	.L53+1
 174 01ac 4F060000 		.word	.L53+1
 175 01b0 4F060000 		.word	.L53+1
 176 01b4 4F060000 		.word	.L53+1
 177 01b8 4F060000 		.word	.L53+1
 178 01bc 4F060000 		.word	.L53+1
 179 01c0 4F060000 		.word	.L53+1
 180 01c4 4F060000 		.word	.L53+1
 181 01c8 4F060000 		.word	.L53+1
 182 01cc 4F060000 		.word	.L53+1
 183 01d0 4F060000 		.word	.L53+1
 184 01d4 4F060000 		.word	.L53+1
 185 01d8 4F060000 		.word	.L53+1
 186 01dc 4F060000 		.word	.L53+1
 187 01e0 4F060000 		.word	.L53+1
 188 01e4 4F060000 		.word	.L53+1
 189 01e8 4F060000 		.word	.L53+1
 190 01ec 4F060000 		.word	.L53+1
 191 01f0 4F060000 		.word	.L53+1
 192 01f4 4F060000 		.word	.L53+1
 193 01f8 4F060000 		.word	.L53+1
 194 01fc 4F060000 		.word	.L53+1
 195 0200 4F060000 		.word	.L53+1
 196 0204 4F060000 		.word	.L53+1
 197 0208 4F060000 		.word	.L53+1
 198 020c 4F060000 		.word	.L53+1
 199 0210 4F060000 		.word	.L53+1
 200 0214 4F060000 		.word	.L53+1
 201 0218 4F060000 		.word	.L53+1
 202 021c 4F060000 		.word	.L53+1
 203 0220 4F060000 		.word	.L53+1
 204 0224 4F060000 		.word	.L53+1
 205 0228 4F060000 		.word	.L53+1
 206 022c 4F060000 		.word	.L53+1
 207 0230 4F060000 		.word	.L53+1
 208 0234 4F060000 		.word	.L53+1
 209 0238 4F060000 		.word	.L53+1
 210 023c 4F060000 		.word	.L53+1
 211 0240 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 6


 212 0244 4F060000 		.word	.L53+1
 213 0248 4F060000 		.word	.L53+1
 214 024c 4F060000 		.word	.L53+1
 215 0250 4F060000 		.word	.L53+1
 216 0254 41040000 		.word	.L16+1
 217 0258 83040000 		.word	.L17+1
 218 025c 47040000 		.word	.L18+1
 219 0260 8F040000 		.word	.L19+1
 220 0264 4D040000 		.word	.L20+1
 221 0268 59040000 		.word	.L21+1
 222 026c 53040000 		.word	.L22+1
 223 0270 4F060000 		.word	.L53+1
 224 0274 7D040000 		.word	.L23+1
 225 0278 6B040000 		.word	.L24+1
 226 027c 4F060000 		.word	.L53+1
 227 0280 71040000 		.word	.L25+1
 228 0284 5F040000 		.word	.L26+1
 229 0288 4F060000 		.word	.L53+1
 230 028c 4F060000 		.word	.L53+1
 231 0290 4F060000 		.word	.L53+1
 232 0294 89040000 		.word	.L27+1
 233 0298 4F060000 		.word	.L53+1
 234 029c 77040000 		.word	.L28+1
 235 02a0 4F060000 		.word	.L53+1
 236 02a4 4F060000 		.word	.L53+1
 237 02a8 4F060000 		.word	.L53+1
 238 02ac 4F060000 		.word	.L53+1
 239 02b0 4F060000 		.word	.L53+1
 240 02b4 4F060000 		.word	.L53+1
 241 02b8 4F060000 		.word	.L53+1
 242 02bc 4F060000 		.word	.L53+1
 243 02c0 4F060000 		.word	.L53+1
 244 02c4 4F060000 		.word	.L53+1
 245 02c8 4F060000 		.word	.L53+1
 246 02cc 4F060000 		.word	.L53+1
 247 02d0 4F060000 		.word	.L53+1
 248 02d4 4F060000 		.word	.L53+1
 249 02d8 E9050000 		.word	.L29+1
 250 02dc EF050000 		.word	.L30+1
 251 02e0 07060000 		.word	.L31+1
 252 02e4 0D060000 		.word	.L32+1
 253 02e8 13060000 		.word	.L33+1
 254 02ec 19060000 		.word	.L34+1
 255 02f0 1F060000 		.word	.L35+1
 256 02f4 37060000 		.word	.L36+1
 257 02f8 4F060000 		.word	.L53+1
 258 02fc 4F060000 		.word	.L53+1
 259 0300 4F060000 		.word	.L53+1
 260 0304 4F060000 		.word	.L53+1
 261 0308 4F060000 		.word	.L53+1
 262 030c 4F060000 		.word	.L53+1
 263 0310 4F060000 		.word	.L53+1
 264 0314 4F060000 		.word	.L53+1
 265 0318 4F060000 		.word	.L53+1
 266 031c 4F060000 		.word	.L53+1
 267 0320 4F060000 		.word	.L53+1
 268 0324 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 7


 269 0328 4F060000 		.word	.L53+1
 270 032c 4F060000 		.word	.L53+1
 271 0330 4F060000 		.word	.L53+1
 272 0334 4F060000 		.word	.L53+1
 273 0338 4F060000 		.word	.L53+1
 274 033c 4F060000 		.word	.L53+1
 275 0340 4F060000 		.word	.L53+1
 276 0344 4F060000 		.word	.L53+1
 277 0348 4F060000 		.word	.L53+1
 278 034c 4F060000 		.word	.L53+1
 279 0350 4F060000 		.word	.L53+1
 280 0354 4F060000 		.word	.L53+1
 281 0358 4F060000 		.word	.L53+1
 282 035c 4F060000 		.word	.L53+1
 283 0360 4F060000 		.word	.L53+1
 284 0364 4F060000 		.word	.L53+1
 285 0368 4F060000 		.word	.L53+1
 286 036c 4F060000 		.word	.L53+1
 287 0370 4F060000 		.word	.L53+1
 288 0374 4F060000 		.word	.L53+1
 289 0378 4F060000 		.word	.L53+1
 290 037c 4F060000 		.word	.L53+1
 291 0380 4F060000 		.word	.L53+1
 292 0384 4F060000 		.word	.L53+1
 293 0388 4F060000 		.word	.L53+1
 294 038c 4F060000 		.word	.L53+1
 295 0390 4F060000 		.word	.L53+1
 296 0394 4F060000 		.word	.L53+1
 297 0398 4F060000 		.word	.L53+1
 298 039c 4F060000 		.word	.L53+1
 299 03a0 4F060000 		.word	.L53+1
 300 03a4 4F060000 		.word	.L53+1
 301 03a8 4F060000 		.word	.L53+1
 302 03ac 4F060000 		.word	.L53+1
 303 03b0 4F060000 		.word	.L53+1
 304 03b4 4F060000 		.word	.L53+1
 305 03b8 4F060000 		.word	.L53+1
 306 03bc 4F060000 		.word	.L53+1
 307 03c0 4F060000 		.word	.L53+1
 308 03c4 4F060000 		.word	.L53+1
 309 03c8 4F060000 		.word	.L53+1
 310 03cc 4F060000 		.word	.L53+1
 311 03d0 4F060000 		.word	.L53+1
 312 03d4 4F060000 		.word	.L53+1
 313 03d8 4F060000 		.word	.L53+1
 314 03dc 4F060000 		.word	.L53+1
 315 03e0 4F060000 		.word	.L53+1
 316 03e4 4F060000 		.word	.L53+1
 317 03e8 4F060000 		.word	.L53+1
 318 03ec 4F060000 		.word	.L53+1
 319 03f0 4F060000 		.word	.L53+1
 320 03f4 4F060000 		.word	.L53+1
 321 03f8 4F060000 		.word	.L53+1
 322 03fc 4F060000 		.word	.L53+1
 323 0400 4F060000 		.word	.L53+1
 324 0404 4F060000 		.word	.L53+1
 325 0408 4F060000 		.word	.L53+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 8


 326 040c 4F060000 		.word	.L53+1
 327 0410 4F060000 		.word	.L53+1
 328 0414 4F060000 		.word	.L53+1
 329 0418 4F060000 		.word	.L53+1
 330 041c 4F060000 		.word	.L53+1
 331 0420 4F060000 		.word	.L53+1
 332 0424 4F060000 		.word	.L53+1
 333 0428 4F060000 		.word	.L53+1
 334 042c 4F060000 		.word	.L53+1
 335 0430 4F060000 		.word	.L53+1
 336 0434 4F060000 		.word	.L53+1
 337 0438 4F060000 		.word	.L53+1
 338 043c 65040000 		.word	.L37+1
 339              		.p2align 1
 340              	.L16:
  75:..\src/command_processing.c **** 
  76:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  77:..\src/command_processing.c ****         case CMD_ACTIVATE:
  78:..\src/command_processing.c ****             cmd_activate();
 341              		.loc 1 78 0
 342 0440 FFF7FEFF 		bl	cmd_activate
  79:..\src/command_processing.c ****             break;
 343              		.loc 1 79 0
 344 0444 04E1     		b	.L1
 345              	.L18:
  80:..\src/command_processing.c **** 
  81:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  82:..\src/command_processing.c **** 
  83:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  84:..\src/command_processing.c ****             cmd_set_inputs();
 346              		.loc 1 84 0
 347 0446 FFF7FEFF 		bl	cmd_set_inputs
  85:..\src/command_processing.c ****             break;
 348              		.loc 1 85 0
 349 044a 01E1     		b	.L1
 350              	.L20:
  86:..\src/command_processing.c **** 
  87:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  88:..\src/command_processing.c **** 
  89:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  90:..\src/command_processing.c ****             cmd_get_measurements();
 351              		.loc 1 90 0
 352 044c FFF7FEFF 		bl	cmd_get_measurements
  91:..\src/command_processing.c ****             break;
 353              		.loc 1 91 0
 354 0450 FEE0     		b	.L1
 355              	.L22:
  92:..\src/command_processing.c **** 
  93:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  94:..\src/command_processing.c **** 
  95:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  96:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 356              		.loc 1 96 0
 357 0452 FFF7FEFF 		bl	cmd_get_curr_and_meas
  97:..\src/command_processing.c ****             break;
 358              		.loc 1 97 0
 359 0456 FBE0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 9


 360              	.L21:
  98:..\src/command_processing.c ****             
  99:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 100:..\src/command_processing.c **** 
 101:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 102:..\src/command_processing.c ****             cmd_get_currents();
 361              		.loc 1 102 0
 362 0458 FFF7FEFF 		bl	cmd_get_currents
 103:..\src/command_processing.c ****             break;
 363              		.loc 1 103 0
 364 045c F8E0     		b	.L1
 365              	.L26:
 104:..\src/command_processing.c **** 
 105:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 106:..\src/command_processing.c ****          
 107:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 108:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 366              		.loc 1 108 0
 367 045e FFF7FEFF 		bl	cmd_get_currents_for_cuff
 109:..\src/command_processing.c ****             break;
 368              		.loc 1 109 0
 369 0462 F5E0     		b	.L1
 370              	.L37:
 110:..\src/command_processing.c **** 
 111:..\src/command_processing.c **** //=========================================================     CMD_GET_VIBROTACTILE_INPUTS
 112:..\src/command_processing.c ****          
 113:..\src/command_processing.c ****         case CMD_GET_VIBROTACTILE_INPUTS:
 114:..\src/command_processing.c ****             cmd_get_vibrotactile_inputs();
 371              		.loc 1 114 0
 372 0464 FFF7FEFF 		bl	cmd_get_vibrotactile_inputs
 115:..\src/command_processing.c ****             break;            
 373              		.loc 1 115 0
 374 0468 F2E0     		b	.L1
 375              	.L24:
 116:..\src/command_processing.c ****             
 117:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 118:..\src/command_processing.c ****         
 119:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 120:..\src/command_processing.c ****             cmd_get_velocities();
 376              		.loc 1 120 0
 377 046a FFF7FEFF 		bl	cmd_get_velocities
 121:..\src/command_processing.c ****             break;
 378              		.loc 1 121 0
 379 046e EFE0     		b	.L1
 380              	.L25:
 122:..\src/command_processing.c ****             
 123:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 124:..\src/command_processing.c **** 
 125:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 126:..\src/command_processing.c ****             cmd_get_accelerations();
 381              		.loc 1 126 0
 382 0470 FFF7FEFF 		bl	cmd_get_accelerations
 127:..\src/command_processing.c ****             break;
 383              		.loc 1 127 0
 384 0474 ECE0     		b	.L1
 385              	.L28:
 128:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 10


 129:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 130:..\src/command_processing.c **** 
 131:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 132:..\src/command_processing.c ****             cmd_get_joystick();
 386              		.loc 1 132 0
 387 0476 FFF7FEFF 		bl	cmd_get_joystick
 133:..\src/command_processing.c ****         break;
 388              		.loc 1 133 0
 389 047a E9E0     		b	.L1
 390              	.L23:
 134:..\src/command_processing.c ****             
 135:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 136:..\src/command_processing.c **** 
 137:..\src/command_processing.c ****         case CMD_GET_EMG:
 138:..\src/command_processing.c ****             cmd_get_emg();
 391              		.loc 1 138 0
 392 047c FFF7FEFF 		bl	cmd_get_emg
 139:..\src/command_processing.c ****             break;
 393              		.loc 1 139 0
 394 0480 E6E0     		b	.L1
 395              	.L17:
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 142:..\src/command_processing.c ****             
 143:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 144:..\src/command_processing.c ****             cmd_get_activate();
 396              		.loc 1 144 0
 397 0482 FFF7FEFF 		bl	cmd_get_activate
 145:..\src/command_processing.c ****             break;
 398              		.loc 1 145 0
 399 0486 E3E0     		b	.L1
 400              	.L27:
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 148:..\src/command_processing.c ****             
 149:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 150:..\src/command_processing.c ****             cmd_set_baudrate();
 401              		.loc 1 150 0
 402 0488 FFF7FEFF 		bl	cmd_set_baudrate
 151:..\src/command_processing.c ****             break;  
 403              		.loc 1 151 0
 404 048c E0E0     		b	.L1
 405              	.L19:
 152:..\src/command_processing.c ****             
 153:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 154:..\src/command_processing.c **** 
 155:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 156:..\src/command_processing.c ****             cmd_get_inputs();
 406              		.loc 1 156 0
 407 048e FFF7FEFF 		bl	cmd_get_inputs
 157:..\src/command_processing.c ****             break;
 408              		.loc 1 157 0
 409 0492 DDE0     		b	.L1
 410              	.L11:
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 160:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 11


 161:..\src/command_processing.c ****         case CMD_GET_INFO:
 162:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 411              		.loc 1 162 0
 412 0494 704B     		ldr	r3, .L56
 413 0496 1B88     		ldrh	r3, [r3]
 414 0498 BB61     		str	r3, [r7, #24]
 415              	.LBB12:
 416              	.LBB13:
 417              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 12


  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 13


 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 14


 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 15


 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 16


 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 17


 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 18


 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 19


 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 20


 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 21


 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 22


 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 23


 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 24


 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 25


 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 418              		.loc 2 792 0
 419 049a BB69     		ldr	r3, [r7, #24]
 420              		.syntax unified
 421              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 422 049c 5BBA     		rev16 r3, r3
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426 049e 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 427              		.loc 2 793 0
 428 04a0 7B69     		ldr	r3, [r7, #20]
 429              	.LBE13:
 430              	.LBE12:
 431              		.loc 1 162 0
 432 04a2 9BB2     		uxth	r3, r3
 433 04a4 1846     		mov	r0, r3
 434 04a6 FFF7FEFF 		bl	infoGet
 163:..\src/command_processing.c ****             break;
 435              		.loc 1 163 0
 436 04aa D1E0     		b	.L1
 437              	.L7:
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 166:..\src/command_processing.c **** 
 167:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 168:..\src/command_processing.c ****             setZeros();
 438              		.loc 1 168 0
 439 04ac FFF7FEFF 		bl	setZeros
 169:..\src/command_processing.c ****             break;
 440              		.loc 1 169 0
 441 04b0 CEE0     		b	.L1
 442              	.L14:
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 172:..\src/command_processing.c **** 
 173:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 174:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])),TRUE );
 443              		.loc 1 174 0
 444 04b2 694B     		ldr	r3, .L56
 445 04b4 1B88     		ldrh	r3, [r3]
 446 04b6 BB62     		str	r3, [r7, #40]
 447              	.LBB14:
 448              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 449              		.loc 2 792 0
 450 04b8 BB6A     		ldr	r3, [r7, #40]
 451              		.syntax unified
 452              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 453 04ba 5BBA     		rev16 r3, r3
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457 04bc 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 26


 458              		.loc 2 793 0
 459 04be 3B69     		ldr	r3, [r7, #16]
 460              	.LBE15:
 461              	.LBE14:
 462              		.loc 1 174 0
 463 04c0 9BB2     		uxth	r3, r3
 464 04c2 0121     		movs	r1, #1
 465 04c4 1846     		mov	r0, r3
 466 04c6 FFF7FEFF 		bl	manage_param_list
 175:..\src/command_processing.c ****             break;
 467              		.loc 1 175 0
 468 04ca C1E0     		b	.L1
 469              	.L5:
 176:..\src/command_processing.c **** 
 177:..\src/command_processing.c **** //=================================================================     CMD_PING
 178:..\src/command_processing.c ****             
 179:..\src/command_processing.c ****         case CMD_PING:
 180:..\src/command_processing.c ****             cmd_ping();
 470              		.loc 1 180 0
 471 04cc FFF7FEFF 		bl	cmd_ping
 181:..\src/command_processing.c ****             break;
 472              		.loc 1 181 0
 473 04d0 BEE0     		b	.L1
 474              	.L8:
 182:..\src/command_processing.c **** 
 183:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 184:..\src/command_processing.c ****             
 185:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 186:..\src/command_processing.c ****             cmd_store_params();
 475              		.loc 1 186 0
 476 04d2 FFF7FEFF 		bl	cmd_store_params
 187:..\src/command_processing.c ****             break;
 477              		.loc 1 187 0
 478 04d6 BBE0     		b	.L1
 479              	.L9:
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 190:..\src/command_processing.c **** 
 191:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 192:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 480              		.loc 1 192 0
 481 04d8 3220     		movs	r0, #50
 482 04da FFF7FEFF 		bl	memStore
 483 04de 0346     		mov	r3, r0
 484 04e0 002B     		cmp	r3, #0
 485 04e2 03D0     		beq	.L40
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 486              		.loc 1 193 0
 487 04e4 0120     		movs	r0, #1
 488 04e6 FFF7FEFF 		bl	sendAcknowledgment
 194:..\src/command_processing.c ****             else
 195:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 196:..\src/command_processing.c ****             break;
 489              		.loc 1 196 0
 490 04ea B1E0     		b	.L1
 491              	.L40:
 195:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 27


 492              		.loc 1 195 0
 493 04ec 0020     		movs	r0, #0
 494 04ee FFF7FEFF 		bl	sendAcknowledgment
 495              		.loc 1 196 0
 496 04f2 ADE0     		b	.L1
 497              	.L10:
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 199:..\src/command_processing.c **** 
 200:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 201:..\src/command_processing.c ****             if(memRestore())
 498              		.loc 1 201 0
 499 04f4 FFF7FEFF 		bl	memRestore
 500 04f8 0346     		mov	r3, r0
 501 04fa 002B     		cmp	r3, #0
 502 04fc 03D0     		beq	.L42
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 503              		.loc 1 202 0
 504 04fe 0120     		movs	r0, #1
 505 0500 FFF7FEFF 		bl	sendAcknowledgment
 203:..\src/command_processing.c ****             else
 204:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 205:..\src/command_processing.c ****             break;
 506              		.loc 1 205 0
 507 0504 A4E0     		b	.L1
 508              	.L42:
 204:..\src/command_processing.c ****             break;
 509              		.loc 1 204 0
 510 0506 0020     		movs	r0, #0
 511 0508 FFF7FEFF 		bl	sendAcknowledgment
 512              		.loc 1 205 0
 513 050c A0E0     		b	.L1
 514              	.L13:
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 208:..\src/command_processing.c **** 
 209:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 210:..\src/command_processing.c ****             if(memInit())
 515              		.loc 1 210 0
 516 050e FFF7FEFF 		bl	memInit
 517 0512 0346     		mov	r3, r0
 518 0514 002B     		cmp	r3, #0
 519 0516 03D0     		beq	.L44
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 520              		.loc 1 211 0
 521 0518 0120     		movs	r0, #1
 522 051a FFF7FEFF 		bl	sendAcknowledgment
 212:..\src/command_processing.c ****             else
 213:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 214:..\src/command_processing.c ****             break;
 523              		.loc 1 214 0
 524 051e 97E0     		b	.L1
 525              	.L44:
 213:..\src/command_processing.c ****             break;
 526              		.loc 1 213 0
 527 0520 0020     		movs	r0, #0
 528 0522 FFF7FEFF 		bl	sendAcknowledgment
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 28


 529              		.loc 1 214 0
 530 0526 93E0     		b	.L1
 531              	.L12:
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 217:..\src/command_processing.c **** 
 218:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 219:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 220:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 532              		.loc 1 220 0
 533 0528 0120     		movs	r0, #1
 534 052a FFF7FEFF 		bl	sendAcknowledgment
 221:..\src/command_processing.c ****             CyDelay(1000);
 535              		.loc 1 221 0
 536 052e 4FF47A70 		mov	r0, #1000
 537 0532 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 538              		.loc 1 222 0
 539 0536 0020     		movs	r0, #0
 540 0538 FFF7FEFF 		bl	FTDI_ENABLE_Write
 223:..\src/command_processing.c ****             CyDelay(1000);
 541              		.loc 1 223 0
 542 053c 4FF47A70 		mov	r0, #1000
 543 0540 FFF7FEFF 		bl	CyDelay
 224:..\src/command_processing.c ****             Bootloadable_Load();
 544              		.loc 1 224 0
 545 0544 FFF7FEFF 		bl	Bootloadable_Load
 225:..\src/command_processing.c ****             break;
 546              		.loc 1 225 0
 547 0548 82E0     		b	.L1
 548              	.L15:
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 228:..\src/command_processing.c **** 
 229:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:
 230:..\src/command_processing.c ****             calib.speed = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 549              		.loc 1 230 0
 550 054a 444B     		ldr	r3, .L56+4
 551 054c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 552 054e 1B02     		lsls	r3, r3, #8
 553 0550 1AB2     		sxth	r2, r3
 554 0552 424B     		ldr	r3, .L56+4
 555 0554 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 556 0556 1BB2     		sxth	r3, r3
 557 0558 1343     		orrs	r3, r3, r2
 558 055a 1AB2     		sxth	r2, r3
 559 055c 404B     		ldr	r3, .L56+8
 560 055e 5A80     		strh	r2, [r3, #2]	@ movhi
 231:..\src/command_processing.c ****             calib.repetitions = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 561              		.loc 1 231 0
 562 0560 3E4B     		ldr	r3, .L56+4
 563 0562 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 564 0564 1B02     		lsls	r3, r3, #8
 565 0566 1AB2     		sxth	r2, r3
 566 0568 3C4B     		ldr	r3, .L56+4
 567 056a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 568 056c 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 29


 569 056e 1343     		orrs	r3, r3, r2
 570 0570 1AB2     		sxth	r2, r3
 571 0572 3B4B     		ldr	r3, .L56+8
 572 0574 9A80     		strh	r2, [r3, #4]	@ movhi
 232:..\src/command_processing.c ****             
 233:..\src/command_processing.c ****             if(calib.speed == -1 && calib.repetitions == -1) {
 573              		.loc 1 233 0
 574 0576 3A4B     		ldr	r3, .L56+8
 575 0578 B3F90230 		ldrsh	r3, [r3, #2]
 576 057c B3F1FF3F 		cmp	r3, #-1
 577 0580 0FD1     		bne	.L46
 578              		.loc 1 233 0 is_stmt 0 discriminator 1
 579 0582 374B     		ldr	r3, .L56+8
 580 0584 B3F90430 		ldrsh	r3, [r3, #4]
 581 0588 B3F1FF3F 		cmp	r3, #-1
 582 058c 09D1     		bne	.L46
 234:..\src/command_processing.c ****                 calib.enabled = FALSE;
 583              		.loc 1 234 0 is_stmt 1
 584 058e 344B     		ldr	r3, .L56+8
 585 0590 0022     		movs	r2, #0
 586 0592 1A70     		strb	r2, [r3]
 235:..\src/command_processing.c ****                 calib.speed = 0;
 587              		.loc 1 235 0
 588 0594 324B     		ldr	r3, .L56+8
 589 0596 0022     		movs	r2, #0
 590 0598 5A80     		strh	r2, [r3, #2]	@ movhi
 236:..\src/command_processing.c ****                 calib.repetitions = 0;
 591              		.loc 1 236 0
 592 059a 314B     		ldr	r3, .L56+8
 593 059c 0022     		movs	r2, #0
 594 059e 9A80     		strh	r2, [r3, #4]	@ movhi
 237:..\src/command_processing.c ****                 break;
 595              		.loc 1 237 0
 596 05a0 56E0     		b	.L1
 597              	.L46:
 238:..\src/command_processing.c ****             }
 239:..\src/command_processing.c ****             // Speed & repetitions saturations
 240:..\src/command_processing.c ****             if (calib.speed < 0) {
 598              		.loc 1 240 0
 599 05a2 2F4B     		ldr	r3, .L56+8
 600 05a4 B3F90230 		ldrsh	r3, [r3, #2]
 601 05a8 002B     		cmp	r3, #0
 602 05aa 03DA     		bge	.L47
 241:..\src/command_processing.c ****                 calib.speed = 0;
 603              		.loc 1 241 0
 604 05ac 2C4B     		ldr	r3, .L56+8
 605 05ae 0022     		movs	r2, #0
 606 05b0 5A80     		strh	r2, [r3, #2]	@ movhi
 607 05b2 07E0     		b	.L48
 608              	.L47:
 242:..\src/command_processing.c ****             } else if (calib.speed > 200) {
 609              		.loc 1 242 0
 610 05b4 2A4B     		ldr	r3, .L56+8
 611 05b6 B3F90230 		ldrsh	r3, [r3, #2]
 612 05ba C82B     		cmp	r3, #200
 613 05bc 02DD     		ble	.L48
 243:..\src/command_processing.c ****                 calib.speed = 200;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 30


 614              		.loc 1 243 0
 615 05be 284B     		ldr	r3, .L56+8
 616 05c0 C822     		movs	r2, #200
 617 05c2 5A80     		strh	r2, [r3, #2]	@ movhi
 618              	.L48:
 244:..\src/command_processing.c ****             }
 245:..\src/command_processing.c ****             if (calib.repetitions < 0) {
 619              		.loc 1 245 0
 620 05c4 264B     		ldr	r3, .L56+8
 621 05c6 B3F90430 		ldrsh	r3, [r3, #4]
 622 05ca 002B     		cmp	r3, #0
 623 05cc 02DA     		bge	.L49
 246:..\src/command_processing.c ****                 calib.repetitions = 0;
 624              		.loc 1 246 0
 625 05ce 244B     		ldr	r3, .L56+8
 626 05d0 0022     		movs	r2, #0
 627 05d2 9A80     		strh	r2, [r3, #4]	@ movhi
 628              	.L49:
 247:..\src/command_processing.c ****             } else if (calib.repetitions > 32767) {
 248:..\src/command_processing.c ****                 calib.repetitions = 32767;
 249:..\src/command_processing.c ****             }
 250:..\src/command_processing.c ****             
 251:..\src/command_processing.c ****             g_refNew[0].pos = 0;                    // SoftHand is on motor 1
 629              		.loc 1 251 0
 630 05d4 234B     		ldr	r3, .L56+12
 631 05d6 0022     		movs	r2, #0
 632 05d8 1A60     		str	r2, [r3]
 252:..\src/command_processing.c ****             calib.enabled = TRUE;
 633              		.loc 1 252 0
 634 05da 214B     		ldr	r3, .L56+8
 635 05dc 0122     		movs	r2, #1
 636 05de 1A70     		strb	r2, [r3]
 253:..\src/command_processing.c ****          
 254:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 637              		.loc 1 254 0
 638 05e0 0120     		movs	r0, #1
 639 05e2 FFF7FEFF 		bl	sendAcknowledgment
 255:..\src/command_processing.c ****             break;
 640              		.loc 1 255 0
 641 05e6 33E0     		b	.L1
 642              	.L29:
 256:..\src/command_processing.c ****             
 257:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 258:..\src/command_processing.c **** 
 259:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 260:..\src/command_processing.c ****             cmd_get_imu_readings();
 643              		.loc 1 260 0
 644 05e8 FFF7FEFF 		bl	cmd_get_imu_readings
 261:..\src/command_processing.c ****             break; 
 645              		.loc 1 261 0
 646 05ec 30E0     		b	.L1
 647              	.L30:
 262:..\src/command_processing.c ****             
 263:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 264:..\src/command_processing.c **** 
 265:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 266:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 31


 648              		.loc 1 266 0
 649 05ee 1A4B     		ldr	r3, .L56
 650 05f0 1B88     		ldrh	r3, [r3]
 651 05f2 7B62     		str	r3, [r7, #36]
 652              	.LBB16:
 653              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 654              		.loc 2 792 0
 655 05f4 7B6A     		ldr	r3, [r7, #36]
 656              		.syntax unified
 657              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 658 05f6 5BBA     		rev16 r3, r3
 659              	@ 0 "" 2
 660              		.thumb
 661              		.syntax unified
 662 05f8 FB60     		str	r3, [r7, #12]
 663              		.loc 2 793 0
 664 05fa FB68     		ldr	r3, [r7, #12]
 665              	.LBE17:
 666              	.LBE16:
 667              		.loc 1 266 0
 668 05fc 9BB2     		uxth	r3, r3
 669 05fe 1846     		mov	r0, r3
 670 0600 FFF7FEFF 		bl	get_IMU_param_list
 267:..\src/command_processing.c ****             break;             
 671              		.loc 1 267 0
 672 0604 24E0     		b	.L1
 673              	.L31:
 268:..\src/command_processing.c ****             
 269:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 270:..\src/command_processing.c **** 
 271:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 272:..\src/command_processing.c ****             cmd_get_encoder_map();
 674              		.loc 1 272 0
 675 0606 FFF7FEFF 		bl	cmd_get_encoder_map
 273:..\src/command_processing.c ****             break; 
 676              		.loc 1 273 0
 677 060a 21E0     		b	.L1
 678              	.L32:
 274:..\src/command_processing.c **** 
 275:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 276:..\src/command_processing.c **** 
 277:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 278:..\src/command_processing.c ****             cmd_get_encoder_raw();
 679              		.loc 1 278 0
 680 060c FFF7FEFF 		bl	cmd_get_encoder_raw
 279:..\src/command_processing.c ****             break; 
 681              		.loc 1 279 0
 682 0610 1EE0     		b	.L1
 683              	.L33:
 280:..\src/command_processing.c **** 
 281:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 282:..\src/command_processing.c **** 
 283:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 284:..\src/command_processing.c ****             cmd_get_ADC_map();
 684              		.loc 1 284 0
 685 0612 FFF7FEFF 		bl	cmd_get_ADC_map
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 32


 285:..\src/command_processing.c ****             break; 
 686              		.loc 1 285 0
 687 0616 1BE0     		b	.L1
 688              	.L34:
 286:..\src/command_processing.c ****             
 287:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 288:..\src/command_processing.c **** 
 289:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 290:..\src/command_processing.c ****             cmd_get_ADC_raw();
 689              		.loc 1 290 0
 690 0618 FFF7FEFF 		bl	cmd_get_ADC_raw
 291:..\src/command_processing.c ****             break; 
 691              		.loc 1 291 0
 692 061c 18E0     		b	.L1
 693              	.L35:
 292:..\src/command_processing.c ****             
 293:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 294:..\src/command_processing.c **** 
 295:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 296:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 694              		.loc 1 296 0
 695 061e 0E4B     		ldr	r3, .L56
 696 0620 1B88     		ldrh	r3, [r3]
 697 0622 3B62     		str	r3, [r7, #32]
 698              	.LBB18:
 699              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 700              		.loc 2 792 0
 701 0624 3B6A     		ldr	r3, [r7, #32]
 702              		.syntax unified
 703              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 704 0626 5BBA     		rev16 r3, r3
 705              	@ 0 "" 2
 706              		.thumb
 707              		.syntax unified
 708 0628 BB60     		str	r3, [r7, #8]
 709              		.loc 2 793 0
 710 062a BB68     		ldr	r3, [r7, #8]
 711              	.LBE19:
 712              	.LBE18:
 713              		.loc 1 296 0
 714 062c 9BB2     		uxth	r3, r3
 715 062e 1846     		mov	r0, r3
 716 0630 FFF7FEFF 		bl	cmd_get_SD_file
 297:..\src/command_processing.c ****             break;   
 717              		.loc 1 297 0
 718 0634 0CE0     		b	.L1
 719              	.L36:
 298:..\src/command_processing.c ****             
 299:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 300:..\src/command_processing.c **** 
 301:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 302:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 720              		.loc 1 302 0
 721 0636 084B     		ldr	r3, .L56
 722 0638 1B88     		ldrh	r3, [r3]
 723 063a FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 33


 724              	.LBB20:
 725              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 726              		.loc 2 792 0
 727 063c FB69     		ldr	r3, [r7, #28]
 728              		.syntax unified
 729              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 730 063e 5BBA     		rev16 r3, r3
 731              	@ 0 "" 2
 732              		.thumb
 733              		.syntax unified
 734 0640 7B60     		str	r3, [r7, #4]
 735              		.loc 2 793 0
 736 0642 7B68     		ldr	r3, [r7, #4]
 737              	.LBE21:
 738              	.LBE20:
 739              		.loc 1 302 0
 740 0644 9BB2     		uxth	r3, r3
 741 0646 1846     		mov	r0, r3
 742 0648 FFF7FEFF 		bl	cmd_remove_SD_file
 303:..\src/command_processing.c ****             break;               
 743              		.loc 1 303 0
 744 064c 00E0     		b	.L1
 745              	.L53:
 304:..\src/command_processing.c ****             
 305:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 306:..\src/command_processing.c ****         default:
 307:..\src/command_processing.c ****             break;
 746              		.loc 1 307 0
 747 064e 00BF     		nop
 748              	.L1:
 308:..\src/command_processing.c **** 
 309:..\src/command_processing.c ****     }
 310:..\src/command_processing.c **** }  
 749              		.loc 1 310 0
 750 0650 3037     		adds	r7, r7, #48
 751              		.cfi_def_cfa_offset 8
 752 0652 BD46     		mov	sp, r7
 753              		.cfi_def_cfa_register 13
 754              		@ sp needed
 755 0654 80BD     		pop	{r7, pc}
 756              	.L57:
 757 0656 00BF     		.align	2
 758              	.L56:
 759 0658 01000000 		.word	g_rx+1
 760 065c 00000000 		.word	g_rx
 761 0660 00000000 		.word	calib
 762 0664 00000000 		.word	g_refNew
 763              		.cfi_endproc
 764              	.LFE64:
 765              		.size	commProcess, .-commProcess
 766              		.section	.text.infoSend,"ax",%progbits
 767              		.align	2
 768              		.global	infoSend
 769              		.thumb
 770              		.thumb_func
 771              		.type	infoSend, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 34


 772              	infoSend:
 773              	.LFB65:
 311:..\src/command_processing.c **** 
 312:..\src/command_processing.c **** //==============================================================================
 313:..\src/command_processing.c **** //                                                                     INFO SEND
 314:..\src/command_processing.c **** //==============================================================================
 315:..\src/command_processing.c **** 
 316:..\src/command_processing.c **** void infoSend(void){
 774              		.loc 1 316 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 1504
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778 0000 80B5     		push	{r7, lr}
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 ADF5BC6D 		sub	sp, sp, #1504
 783              		.cfi_def_cfa_offset 1512
 784 0006 00AF     		add	r7, sp, #0
 785              		.cfi_def_cfa_register 7
 317:..\src/command_processing.c ****     char packet_string[1500];
 318:..\src/command_processing.c ****     
 319:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 786              		.loc 1 319 0
 787 0008 3B1D     		adds	r3, r7, #4
 788 000a 1846     		mov	r0, r3
 789 000c FFF7FEFF 		bl	prepare_generic_info
 320:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 790              		.loc 1 320 0
 791 0010 3B1D     		adds	r3, r7, #4
 792 0012 1846     		mov	r0, r3
 793 0014 FFF7FEFF 		bl	UART_RS485_PutString
 321:..\src/command_processing.c **** }
 794              		.loc 1 321 0
 795 0018 00BF     		nop
 796 001a 07F5BC67 		add	r7, r7, #1504
 797              		.cfi_def_cfa_offset 8
 798 001e BD46     		mov	sp, r7
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 0020 80BD     		pop	{r7, pc}
 802              		.cfi_endproc
 803              	.LFE65:
 804              		.size	infoSend, .-infoSend
 805 0022 00BF     		.section	.text.num_of_bytes,"ax",%progbits
 806              		.align	2
 807              		.global	num_of_bytes
 808              		.thumb
 809              		.thumb_func
 810              		.type	num_of_bytes, %function
 811              	num_of_bytes:
 812              	.LFB66:
 322:..\src/command_processing.c **** //==============================================================================
 323:..\src/command_processing.c **** //                                                                  NUM_OF_BYTES
 324:..\src/command_processing.c **** //==============================================================================
 325:..\src/command_processing.c ****                     
 326:..\src/command_processing.c **** uint8 num_of_bytes (uint8 TYPE){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 35


 813              		.loc 1 326 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 16
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818 0000 80B4     		push	{r7}
 819              		.cfi_def_cfa_offset 4
 820              		.cfi_offset 7, -4
 821 0002 85B0     		sub	sp, sp, #20
 822              		.cfi_def_cfa_offset 24
 823 0004 00AF     		add	r7, sp, #0
 824              		.cfi_def_cfa_register 7
 825 0006 0346     		mov	r3, r0
 826 0008 FB71     		strb	r3, [r7, #7]
 327:..\src/command_processing.c ****     uint8 sod;
 328:..\src/command_processing.c ****     switch (TYPE) {
 827              		.loc 1 328 0
 828 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 829 000c 092B     		cmp	r3, #9
 830 000e 20D8     		bhi	.L60
 831 0010 01A2     		adr	r2, .L62
 832 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 833 0016 00BF     		.p2align 2
 834              	.L62:
 835 0018 41000000 		.word	.L61+1
 836 001c 41000000 		.word	.L61+1
 837 0020 41000000 		.word	.L61+1
 838 0024 47000000 		.word	.L63+1
 839 0028 47000000 		.word	.L63+1
 840 002c 4D000000 		.word	.L64+1
 841 0030 4D000000 		.word	.L64+1
 842 0034 4D000000 		.word	.L64+1
 843 0038 53000000 		.word	.L60+1
 844 003c 41000000 		.word	.L61+1
 845              		.p2align 1
 846              	.L61:
 329:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 330:..\src/command_processing.c ****                 sod = 1; break;
 847              		.loc 1 330 0
 848 0040 0123     		movs	r3, #1
 849 0042 FB73     		strb	r3, [r7, #15]
 850 0044 05E0     		b	.L60
 851              	.L63:
 331:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 332:..\src/command_processing.c ****                 sod = 2; break;
 852              		.loc 1 332 0
 853 0046 0223     		movs	r3, #2
 854 0048 FB73     		strb	r3, [r7, #15]
 855 004a 02E0     		b	.L60
 856              	.L64:
 333:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 334:..\src/command_processing.c ****                 sod = 4; break;
 857              		.loc 1 334 0
 858 004c 0423     		movs	r3, #4
 859 004e FB73     		strb	r3, [r7, #15]
 860 0050 00BF     		nop
 861              	.L60:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 36


 335:..\src/command_processing.c ****     }  
 336:..\src/command_processing.c ****     return sod;
 862              		.loc 1 336 0
 863 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 337:..\src/command_processing.c **** }
 864              		.loc 1 337 0
 865 0054 1846     		mov	r0, r3
 866 0056 1437     		adds	r7, r7, #20
 867              		.cfi_def_cfa_offset 4
 868 0058 BD46     		mov	sp, r7
 869              		.cfi_def_cfa_register 13
 870              		@ sp needed
 871 005a 80BC     		pop	{r7}
 872              		.cfi_restore 7
 873              		.cfi_def_cfa_offset 0
 874 005c 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE66:
 877              		.size	num_of_bytes, .-num_of_bytes
 878 005e 00BF     		.section	.text.infoGet,"ax",%progbits
 879              		.align	2
 880              		.global	infoGet
 881              		.thumb
 882              		.thumb_func
 883              		.type	infoGet, %function
 884              	infoGet:
 885              	.LFB67:
 338:..\src/command_processing.c **** 
 339:..\src/command_processing.c **** //==============================================================================
 340:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 341:..\src/command_processing.c **** //==============================================================================
 342:..\src/command_processing.c **** 
 343:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 886              		.loc 1 343 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 24008
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890 0000 80B5     		push	{r7, lr}
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 ADF5BB4D 		sub	sp, sp, #23936
 895              		.cfi_def_cfa_offset 23944
 896 0006 92B0     		sub	sp, sp, #72
 897              		.cfi_def_cfa_offset 24016
 898 0008 00AF     		add	r7, sp, #0
 899              		.cfi_def_cfa_register 7
 900 000a 0246     		mov	r2, r0
 901 000c 07F14803 		add	r3, r7, #72
 902 0010 423B     		subs	r3, r3, #66
 903 0012 1A80     		strh	r2, [r3]	@ movhi
 344:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 904              		.loc 1 344 0
 905 0014 07F59C43 		add	r3, r7, #19968
 906 0018 03F12803 		add	r3, r3, #40
 907 001c 0022     		movs	r2, #0
 908 001e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 37


 909 0020 0433     		adds	r3, r3, #4
 910 0022 40F69C72 		movw	r2, #3996
 911 0026 0021     		movs	r1, #0
 912 0028 1846     		mov	r0, r3
 913 002a FFF7FEFF 		bl	memset
 345:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 914              		.loc 1 345 0
 915 002e 07F14803 		add	r3, r7, #72
 916 0032 403B     		subs	r3, r3, #64
 917 0034 0022     		movs	r2, #0
 918 0036 1A60     		str	r2, [r3]
 919 0038 0433     		adds	r3, r3, #4
 920 003a 44F61C62 		movw	r2, #19996
 921 003e 0021     		movs	r1, #0
 922 0040 1846     		mov	r0, r3
 923 0042 FFF7FEFF 		bl	memset
 346:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 347:..\src/command_processing.c **** 
 348:..\src/command_processing.c ****     switch (info_type) {
 924              		.loc 1 348 0
 925 0046 07F14803 		add	r3, r7, #72
 926 004a 423B     		subs	r3, r3, #66
 927 004c 1B88     		ldrh	r3, [r3]
 928 004e 062B     		cmp	r3, #6
 929 0050 7DD8     		bhi	.L77
 930 0052 01A2     		adr	r2, .L69
 931 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 932              		.p2align 2
 933              	.L69:
 934 0058 75000000 		.word	.L68+1
 935 005c 97000000 		.word	.L70+1
 936 0060 B9000000 		.word	.L71+1
 937 0064 E1000000 		.word	.L72+1
 938 0068 03010000 		.word	.L73+1
 939 006c 21010000 		.word	.L74+1
 940 0070 27010000 		.word	.L75+1
 941              		.p2align 1
 942              	.L68:
 349:..\src/command_processing.c ****         case INFO_ALL:
 350:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 943              		.loc 1 350 0
 944 0074 07F59C43 		add	r3, r7, #19968
 945 0078 03F12803 		add	r3, r3, #40
 946 007c 1846     		mov	r0, r3
 947 007e FFF7FEFF 		bl	prepare_generic_info
 351:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 948              		.loc 1 351 0
 949 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 352:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 950              		.loc 1 352 0
 951 0086 07F59C43 		add	r3, r7, #19968
 952 008a 03F12803 		add	r3, r3, #40
 953 008e 1846     		mov	r0, r3
 954 0090 FFF7FEFF 		bl	UART_RS485_PutString
 353:..\src/command_processing.c ****             break;
 955              		.loc 1 353 0
 956 0094 5CE0     		b	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 38


 957              	.L70:
 354:..\src/command_processing.c ****         case CYCLES_INFO:
 355:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 958              		.loc 1 355 0
 959 0096 07F59C43 		add	r3, r7, #19968
 960 009a 03F12803 		add	r3, r3, #40
 961 009e 1846     		mov	r0, r3
 962 00a0 FFF7FEFF 		bl	prepare_counter_info
 356:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 963              		.loc 1 356 0
 964 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 357:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 965              		.loc 1 357 0
 966 00a8 07F59C43 		add	r3, r7, #19968
 967 00ac 03F12803 		add	r3, r3, #40
 968 00b0 1846     		mov	r0, r3
 969 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 358:..\src/command_processing.c ****             break;
 970              		.loc 1 358 0
 971 00b6 4BE0     		b	.L76
 972              	.L71:
 359:..\src/command_processing.c ****         case GET_SD_PARAM:
 360:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 973              		.loc 1 360 0
 974 00b8 07F59C43 		add	r3, r7, #19968
 975 00bc 03F12803 		add	r3, r3, #40
 976 00c0 4FF47A62 		mov	r2, #4000
 977 00c4 1946     		mov	r1, r3
 978 00c6 2548     		ldr	r0, .L78
 979 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 361:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 980              		.loc 1 361 0
 981 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 362:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 982              		.loc 1 362 0
 983 00d0 07F59C43 		add	r3, r7, #19968
 984 00d4 03F12803 		add	r3, r3, #40
 985 00d8 1846     		mov	r0, r3
 986 00da FFF7FEFF 		bl	UART_RS485_PutString
 363:..\src/command_processing.c ****             break;
 987              		.loc 1 363 0
 988 00de 37E0     		b	.L76
 989              	.L72:
 364:..\src/command_processing.c ****         case GET_SD_DATA:
 365:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 990              		.loc 1 365 0
 991 00e0 07F14803 		add	r3, r7, #72
 992 00e4 403B     		subs	r3, r3, #64
 993 00e6 44F62061 		movw	r1, #20000
 994 00ea 1846     		mov	r0, r3
 995 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 366:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 996              		.loc 1 366 0
 997 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 367:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 998              		.loc 1 367 0
 999 00f4 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 39


 1000 00f8 403B     		subs	r3, r3, #64
 1001 00fa 1846     		mov	r0, r3
 1002 00fc FFF7FEFF 		bl	UART_RS485_PutString
 368:..\src/command_processing.c ****             break;
 1003              		.loc 1 368 0
 1004 0100 26E0     		b	.L76
 1005              	.L73:
 369:..\src/command_processing.c ****         case GET_SD_FS_TREE:
 370:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 1006              		.loc 1 370 0
 1007 0102 07F14803 		add	r3, r7, #72
 1008 0106 403B     		subs	r3, r3, #64
 1009 0108 1846     		mov	r0, r3
 1010 010a FFF7FEFF 		bl	Get_SD_FS
 371:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 1011              		.loc 1 371 0
 1012 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 372:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 1013              		.loc 1 372 0
 1014 0112 07F14803 		add	r3, r7, #72
 1015 0116 403B     		subs	r3, r3, #64
 1016 0118 1846     		mov	r0, r3
 1017 011a FFF7FEFF 		bl	UART_RS485_PutString
 373:..\src/command_processing.c ****             break;
 1018              		.loc 1 373 0
 1019 011e 17E0     		b	.L76
 1020              	.L74:
 374:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 375:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 376:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 1021              		.loc 1 376 0
 1022 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 377:..\src/command_processing.c ****             break;
 1023              		.loc 1 377 0
 1024 0124 14E0     		b	.L76
 1025              	.L75:
 378:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 379:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 1026              		.loc 1 379 0
 1027 0126 07F59C43 		add	r3, r7, #19968
 1028 012a 03F12803 		add	r3, r3, #40
 1029 012e 4FF47A62 		mov	r2, #4000
 1030 0132 1946     		mov	r1, r3
 1031 0134 0A48     		ldr	r0, .L78+4
 1032 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 380:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 1033              		.loc 1 380 0
 1034 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 381:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 1035              		.loc 1 381 0
 1036 013e 07F59C43 		add	r3, r7, #19968
 1037 0142 03F12803 		add	r3, r3, #40
 1038 0146 1846     		mov	r0, r3
 1039 0148 FFF7FEFF 		bl	UART_RS485_PutString
 382:..\src/command_processing.c ****             break;            
 1040              		.loc 1 382 0
 1041 014c 00E0     		b	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 40


 1042              	.L77:
 383:..\src/command_processing.c ****         default:
 384:..\src/command_processing.c ****             break;
 1043              		.loc 1 384 0
 1044 014e 00BF     		nop
 1045              	.L76:
 385:..\src/command_processing.c ****     }
 386:..\src/command_processing.c **** }
 1046              		.loc 1 386 0 discriminator 1
 1047 0150 00BF     		nop
 1048 0152 07F5BB47 		add	r7, r7, #23936
 1049 0156 4837     		adds	r7, r7, #72
 1050              		.cfi_def_cfa_offset 8
 1051 0158 BD46     		mov	sp, r7
 1052              		.cfi_def_cfa_register 13
 1053              		@ sp needed
 1054 015a 80BD     		pop	{r7, pc}
 1055              	.L79:
 1056              		.align	2
 1057              	.L78:
 1058 015c 00000000 		.word	sdParam
 1059 0160 00000000 		.word	sdR01File
 1060              		.cfi_endproc
 1061              	.LFE67:
 1062              		.size	infoGet, .-infoGet
 1063              		.section	.rodata
 1064              		.align	2
 1065              	.LC8:
 1066 0000 00       		.ascii	"\000"
 1067 0001 000000   		.align	2
 1068              	.LC14:
 1069 0004 202D2000 		.ascii	" - \000"
 1070              		.align	2
 1071              	.LC15:
 1072 0008 54686520 		.ascii	"The board will reset\012\000"
 1072      626F6172 
 1072      64207769 
 1072      6C6C2072 
 1072      65736574 
 1073 001e 0000     		.align	2
 1074              	.LC16:
 1075 0020 202D3E20 		.ascii	" -> \000"
 1075      00
 1076 0025 000000   		.align	2
 1077              	.LC17:
 1078 0028 0A00     		.ascii	"\012\000"
 1079              		.section	.text.get_param_list,"ax",%progbits
 1080              		.align	2
 1081              		.global	get_param_list
 1082              		.thumb
 1083              		.thumb_func
 1084              		.type	get_param_list, %function
 1085              	get_param_list:
 1086              	.LFB68:
 387:..\src/command_processing.c **** 
 388:..\src/command_processing.c **** 
 389:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 41


 390:..\src/command_processing.c **** //                                                                GET PARAM LIST
 391:..\src/command_processing.c **** //==============================================================================
 392:..\src/command_processing.c **** 
 393:..\src/command_processing.c **** void get_param_list ( uint8 num_params, uint8 num_menus, const struct parameter PARAM_LIST[], const
 1087              		.loc 1 393 0
 1088              		.cfi_startproc
 1089              		@ args = 4, pretend = 0, frame = 608
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
 1091 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1092              		.cfi_def_cfa_offset 28
 1093              		.cfi_offset 4, -28
 1094              		.cfi_offset 5, -24
 1095              		.cfi_offset 6, -20
 1096              		.cfi_offset 7, -16
 1097              		.cfi_offset 8, -12
 1098              		.cfi_offset 9, -8
 1099              		.cfi_offset 14, -4
 1100 0004 ADF5197D 		sub	sp, sp, #612
 1101              		.cfi_def_cfa_offset 640
 1102 0008 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 000a 0646     		mov	r6, r0
 1105 000c 0846     		mov	r0, r1
 1106 000e 07F10801 		add	r1, r7, #8
 1107 0012 0A60     		str	r2, [r1]
 1108 0014 3A1D     		adds	r2, r7, #4
 1109 0016 1360     		str	r3, [r2]
 1110 0018 07F10F03 		add	r3, r7, #15
 1111 001c 3246     		mov	r2, r6
 1112 001e 1A70     		strb	r2, [r3]
 1113 0020 07F10E03 		add	r3, r7, #14
 1114 0024 0246     		mov	r2, r0
 1115 0026 1A70     		strb	r2, [r3]
 1116              		.loc 1 393 0
 1117 0028 6B46     		mov	r3, sp
 1118 002a 1E46     		mov	r6, r3
 394:..\src/command_processing.c ****     //Auxiliary variables
 395:..\src/command_processing.c ****     uint8 CYDATA idx = 0;       //Parameter number
 1119              		.loc 1 395 0
 1120 002c 0023     		movs	r3, #0
 1121 002e 87F85F32 		strb	r3, [r7, #607]
 396:..\src/command_processing.c ****     uint8* m_addr = (uint8*)PARAM_LIST[0].VAR_P;
 1122              		.loc 1 396 0
 1123 0032 07F10803 		add	r3, r7, #8
 1124 0036 1B68     		ldr	r3, [r3]
 1125 0038 1B68     		ldr	r3, [r3]
 1126 003a C7F85032 		str	r3, [r7, #592]
 397:..\src/command_processing.c ****     uint8 CYDATA string_length;
 398:..\src/command_processing.c ****     char CYDATA aux_str[250] = "";
 1127              		.loc 1 398 0
 1128 003e 07F5A473 		add	r3, r7, #328
 1129 0042 0022     		movs	r2, #0
 1130 0044 1A60     		str	r2, [r3]
 1131 0046 0433     		adds	r3, r3, #4
 1132 0048 F622     		movs	r2, #246
 1133 004a 0021     		movs	r1, #0
 1134 004c 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 42


 1135 004e FFF7FEFF 		bl	memset
 399:..\src/command_processing.c ****     char CYDATA aux_str1[250] = ""; 
 1136              		.loc 1 399 0
 1137 0052 07F14C03 		add	r3, r7, #76
 1138 0056 0022     		movs	r2, #0
 1139 0058 1A60     		str	r2, [r3]
 1140 005a 0433     		adds	r3, r3, #4
 1141 005c F622     		movs	r2, #246
 1142 005e 0021     		movs	r1, #0
 1143 0060 1846     		mov	r0, r3
 1144 0062 FFF7FEFF 		bl	memset
 400:..\src/command_processing.c ****     
 401:..\src/command_processing.c ****     
 402:..\src/command_processing.c ****     int32 aux_int32;
 403:..\src/command_processing.c ****     uint8 i, j;
 404:..\src/command_processing.c ****     uint8 count;
 405:..\src/command_processing.c ****     char aux_char[50];
 406:..\src/command_processing.c ****     
 407:..\src/command_processing.c ****     
 408:..\src/command_processing.c ****     
 409:..\src/command_processing.c **** 
 410:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT*num_params + PARAM_MENU_SLOT*num_menus + PARAM_BYTE_SLOT
 1145              		.loc 1 410 0
 1146 0066 07F10F03 		add	r3, r7, #15
 1147 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1148 006c 9BB2     		uxth	r3, r3
 1149 006e 1A46     		mov	r2, r3	@ movhi
 1150 0070 9200     		lsls	r2, r2, #2
 1151 0072 1344     		add	r3, r3, r2
 1152 0074 1A46     		mov	r2, r3	@ movhi
 1153 0076 9100     		lsls	r1, r2, #2
 1154 0078 1A46     		mov	r2, r3	@ movhi
 1155 007a 0B46     		mov	r3, r1	@ movhi
 1156 007c 1344     		add	r3, r3, r2
 1157 007e 5B00     		lsls	r3, r3, #1
 1158 0080 9AB2     		uxth	r2, r3
 1159 0082 07F10E03 		add	r3, r7, #14
 1160 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1161 0088 9BB2     		uxth	r3, r3
 1162 008a 1946     		mov	r1, r3	@ movhi
 1163 008c 8900     		lsls	r1, r1, #2
 1164 008e 0B44     		add	r3, r3, r1
 1165 0090 1946     		mov	r1, r3	@ movhi
 1166 0092 0901     		lsls	r1, r1, #4
 1167 0094 CB1A     		subs	r3, r1, r3
 1168 0096 5B00     		lsls	r3, r3, #1
 1169 0098 9BB2     		uxth	r3, r3
 1170 009a 1344     		add	r3, r3, r2
 1171 009c 9BB2     		uxth	r3, r3
 1172 009e 3233     		adds	r3, r3, #50
 1173 00a0 A7F84E32 		strh	r3, [r7, #590]	@ movhi
 411:..\src/command_processing.c ****     uint8 packet_data[packet_length];
 1174              		.loc 1 411 0
 1175 00a4 B7F84E12 		ldrh	r1, [r7, #590]
 1176 00a8 0B46     		mov	r3, r1
 1177 00aa 013B     		subs	r3, r3, #1
 1178 00ac C7F84832 		str	r3, [r7, #584]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 43


 1179 00b0 8AB2     		uxth	r2, r1
 1180 00b2 4FF00003 		mov	r3, #0
 1181 00b6 4FEAC309 		lsl	r9, r3, #3
 1182 00ba 49EA5279 		orr	r9, r9, r2, lsr #29
 1183 00be 4FEAC208 		lsl	r8, r2, #3
 1184 00c2 8AB2     		uxth	r2, r1
 1185 00c4 4FF00003 		mov	r3, #0
 1186 00c8 DD00     		lsls	r5, r3, #3
 1187 00ca 45EA5275 		orr	r5, r5, r2, lsr #29
 1188 00ce D400     		lsls	r4, r2, #3
 1189 00d0 0B46     		mov	r3, r1
 1190 00d2 0733     		adds	r3, r3, #7
 1191 00d4 DB08     		lsrs	r3, r3, #3
 1192 00d6 DB00     		lsls	r3, r3, #3
 1193 00d8 ADEB030D 		sub	sp, sp, r3
 1194 00dc 6B46     		mov	r3, sp
 1195 00de 0033     		adds	r3, r3, #0
 1196 00e0 C7F84432 		str	r3, [r7, #580]
 1197              	.LBB22:
 412:..\src/command_processing.c ****     for (int ii = 0; ii < packet_length; ii++) packet_data[ii] = 0;
 1198              		.loc 1 412 0
 1199 00e4 0023     		movs	r3, #0
 1200 00e6 C7F85432 		str	r3, [r7, #596]
 1201 00ea 0BE0     		b	.L81
 1202              	.L82:
 1203              		.loc 1 412 0 is_stmt 0 discriminator 3
 1204 00ec D7F84422 		ldr	r2, [r7, #580]
 1205 00f0 D7F85432 		ldr	r3, [r7, #596]
 1206 00f4 1344     		add	r3, r3, r2
 1207 00f6 0022     		movs	r2, #0
 1208 00f8 1A70     		strb	r2, [r3]
 1209 00fa D7F85432 		ldr	r3, [r7, #596]
 1210 00fe 0133     		adds	r3, r3, #1
 1211 0100 C7F85432 		str	r3, [r7, #596]
 1212              	.L81:
 1213              		.loc 1 412 0 discriminator 1
 1214 0104 B7F84E22 		ldrh	r2, [r7, #590]
 1215 0108 D7F85432 		ldr	r3, [r7, #596]
 1216 010c 9A42     		cmp	r2, r3
 1217 010e EDDC     		bgt	.L82
 1218              	.LBE22:
 413:..\src/command_processing.c **** 
 414:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1219              		.loc 1 414 0 is_stmt 1
 1220 0110 D7F84432 		ldr	r3, [r7, #580]
 1221 0114 0C22     		movs	r2, #12
 1222 0116 1A70     		strb	r2, [r3]
 415:..\src/command_processing.c ****     packet_data[1] = num_params;
 1223              		.loc 1 415 0
 1224 0118 D7F84432 		ldr	r3, [r7, #580]
 1225 011c 07F10F02 		add	r2, r7, #15
 1226 0120 1278     		ldrb	r2, [r2]
 1227 0122 5A70     		strb	r2, [r3, #1]
 416:..\src/command_processing.c ****     
 417:..\src/command_processing.c ****     for (idx = 0; idx < num_params; idx ++) {
 1228              		.loc 1 417 0
 1229 0124 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 44


 1230 0126 87F85F32 		strb	r3, [r7, #607]
 1231 012a 44E2     		b	.L83
 1232              	.L106:
 1233              	.LBB23:
 418:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1234              		.loc 1 418 0
 1235 012c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1236 0130 1B01     		lsls	r3, r3, #4
 1237 0132 07F10802 		add	r2, r7, #8
 1238 0136 1268     		ldr	r2, [r2]
 1239 0138 1344     		add	r3, r3, r2
 1240 013a 1B68     		ldr	r3, [r3]
 1241 013c C7F85032 		str	r3, [r7, #592]
 419:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[idx].TYPES);
 1242              		.loc 1 419 0
 1243 0140 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1244 0144 1B01     		lsls	r3, r3, #4
 1245 0146 07F10802 		add	r2, r7, #8
 1246 014a 1268     		ldr	r2, [r2]
 1247 014c 1344     		add	r3, r3, r2
 1248 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1249 0150 1846     		mov	r0, r3
 1250 0152 FFF7FEFF 		bl	num_of_bytes
 1251 0156 0346     		mov	r3, r0
 1252 0158 87F84332 		strb	r3, [r7, #579]
 420:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].TYPES;
 1253              		.loc 1 420 0
 1254 015c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1255 0160 3222     		movs	r2, #50
 1256 0162 02FB03F3 		mul	r3, r2, r3
 1257 0166 0233     		adds	r3, r3, #2
 1258 0168 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1259 016c 1201     		lsls	r2, r2, #4
 1260 016e 07F10801 		add	r1, r7, #8
 1261 0172 0968     		ldr	r1, [r1]
 1262 0174 0A44     		add	r2, r2, r1
 1263 0176 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1264 0178 D7F84422 		ldr	r2, [r7, #580]
 1265 017c D154     		strb	r1, [r2, r3]
 421:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = PARAM_LIST[idx].NUM_ITEMS;        
 1266              		.loc 1 421 0
 1267 017e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1268 0182 3222     		movs	r2, #50
 1269 0184 02FB03F3 		mul	r3, r2, r3
 1270 0188 0333     		adds	r3, r3, #3
 1271 018a 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1272 018e 1201     		lsls	r2, r2, #4
 1273 0190 07F10801 		add	r1, r7, #8
 1274 0194 0968     		ldr	r1, [r1]
 1275 0196 0A44     		add	r2, r2, r1
 1276 0198 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1277 019a D7F84422 		ldr	r2, [r7, #580]
 1278 019e D154     		strb	r1, [r2, r3]
 422:..\src/command_processing.c **** 
 423:..\src/command_processing.c **** 
 424:..\src/command_processing.c ****     switch(PARAM_LIST[idx].custom){
 1279              		.loc 1 424 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 45


 1280 01a0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1281 01a4 1B01     		lsls	r3, r3, #4
 1282 01a6 07F10802 		add	r2, r7, #8
 1283 01aa 1268     		ldr	r2, [r2]
 1284 01ac 1344     		add	r3, r3, r2
 1285 01ae 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1286 01b0 052B     		cmp	r3, #5
 1287 01b2 61D1     		bne	.L117
 425:..\src/command_processing.c **** 
 426:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 427:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_inf >> c_mem.SH_config.res);
 1288              		.loc 1 427 0
 1289 01b4 B74B     		ldr	r3, .L118
 1290 01b6 1B6A     		ldr	r3, [r3, #32]
 1291 01b8 B64A     		ldr	r2, .L118
 1292 01ba 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1293 01be 43FA02F2 		asr	r2, r3, r2
 1294 01c2 07F14803 		add	r3, r7, #72
 1295 01c6 1A60     		str	r2, [r3]
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1296              		.loc 1 428 0
 1297 01c8 0023     		movs	r3, #0
 1298 01ca 87F85C32 		strb	r3, [r7, #604]
 1299 01ce 1AE0     		b	.L86
 1300              	.L87:
 429:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int32))[j];
 1301              		.loc 1 429 0 discriminator 3
 1302 01d0 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1303 01d4 3222     		movs	r2, #50
 1304 01d6 02FB03F3 		mul	r3, r2, r3
 1305 01da 1A1D     		adds	r2, r3, #4
 1306 01dc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1307 01e0 1A44     		add	r2, r2, r3
 1308 01e2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1309 01e6 D31A     		subs	r3, r2, r3
 1310 01e8 013B     		subs	r3, r3, #1
 1311 01ea 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1312 01ee 07F14801 		add	r1, r7, #72
 1313 01f2 0A44     		add	r2, r2, r1
 1314 01f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1315 01f6 D7F84422 		ldr	r2, [r7, #580]
 1316 01fa D154     		strb	r1, [r2, r3]
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1317              		.loc 1 428 0 discriminator 3
 1318 01fc 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1319 0200 0133     		adds	r3, r3, #1
 1320 0202 87F85C32 		strb	r3, [r7, #604]
 1321              	.L86:
 428:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1322              		.loc 1 428 0 is_stmt 0 discriminator 1
 1323 0206 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1324 020a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1325 020e 9A42     		cmp	r2, r3
 1326 0210 DED3     		bcc	.L87
 430:..\src/command_processing.c ****             }
 431:..\src/command_processing.c ****             aux_int32 = (c_mem.SH_config.pos_lim_sup >> c_mem.SH_config.res);
 1327              		.loc 1 431 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 46


 1328 0212 A04B     		ldr	r3, .L118
 1329 0214 5B6A     		ldr	r3, [r3, #36]
 1330 0216 9F4A     		ldr	r2, .L118
 1331 0218 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 1332 021c 43FA02F2 		asr	r2, r3, r2
 1333 0220 07F14803 		add	r3, r7, #72
 1334 0224 1A60     		str	r2, [r3]
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1335              		.loc 1 432 0
 1336 0226 0023     		movs	r3, #0
 1337 0228 87F85C32 		strb	r3, [r7, #604]
 1338 022c 1DE0     		b	.L88
 1339              	.L89:
 433:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&aux_int32))[j
 1340              		.loc 1 433 0 discriminator 3
 1341 022e 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1342 0232 3222     		movs	r2, #50
 1343 0234 02FB03F3 		mul	r3, r2, r3
 1344 0238 1A1D     		adds	r2, r3, #4
 1345 023a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1346 023e 1A44     		add	r2, r2, r3
 1347 0240 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1348 0244 1A44     		add	r2, r2, r3
 1349 0246 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1350 024a D31A     		subs	r3, r2, r3
 1351 024c 013B     		subs	r3, r3, #1
 1352 024e 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1353 0252 07F14801 		add	r1, r7, #72
 1354 0256 0A44     		add	r2, r2, r1
 1355 0258 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1356 025a D7F84422 		ldr	r2, [r7, #580]
 1357 025e D154     		strb	r1, [r2, r3]
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1358              		.loc 1 432 0 discriminator 3
 1359 0260 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1360 0264 0133     		adds	r3, r3, #1
 1361 0266 87F85C32 		strb	r3, [r7, #604]
 1362              	.L88:
 432:..\src/command_processing.c ****             for(j = 0; j < sod; j++) {
 1363              		.loc 1 432 0 is_stmt 0 discriminator 1
 1364 026a 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1365 026e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1366 0272 9A42     		cmp	r2, r3
 1367 0274 DBD3     		bcc	.L89
 434:..\src/command_processing.c ****             }
 435:..\src/command_processing.c ****             break;            
 1368              		.loc 1 435 0 is_stmt 1
 1369 0276 48E0     		b	.L90
 1370              	.L117:
 436:..\src/command_processing.c ****             
 437:..\src/command_processing.c **** 
 438:..\src/command_processing.c ****         case 0:  // Not custom parameter
 439:..\src/command_processing.c ****         default: // Parameters that are only custom for SET
 440:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[idx].NUM_ITEMS * sod; i+=sod){
 1371              		.loc 1 440 0
 1372 0278 0023     		movs	r3, #0
 1373 027a 87F85D32 		strb	r3, [r7, #605]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 47


 1374 027e 32E0     		b	.L91
 1375              	.L94:
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1376              		.loc 1 441 0
 1377 0280 0023     		movs	r3, #0
 1378 0282 87F85C32 		strb	r3, [r7, #604]
 1379 0286 21E0     		b	.L92
 1380              	.L93:
 442:..\src/command_processing.c ****                     packet_data[(4 + PARAM_BYTE_SLOT*idx + i) + sod - j -1] = m_addr[i+j];
 1381              		.loc 1 442 0 discriminator 3
 1382 0288 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1383 028c 3222     		movs	r2, #50
 1384 028e 02FB03F3 		mul	r3, r2, r3
 1385 0292 1A1D     		adds	r2, r3, #4
 1386 0294 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1387 0298 1A44     		add	r2, r2, r3
 1388 029a 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1389 029e 1A44     		add	r2, r2, r3
 1390 02a0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1391 02a4 D31A     		subs	r3, r2, r3
 1392 02a6 013B     		subs	r3, r3, #1
 1393 02a8 97F85D12 		ldrb	r1, [r7, #605]	@ zero_extendqisi2
 1394 02ac 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1395 02b0 0A44     		add	r2, r2, r1
 1396 02b2 1146     		mov	r1, r2
 1397 02b4 D7F85022 		ldr	r2, [r7, #592]
 1398 02b8 0A44     		add	r2, r2, r1
 1399 02ba 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1400 02bc D7F84422 		ldr	r2, [r7, #580]
 1401 02c0 D154     		strb	r1, [r2, r3]
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1402              		.loc 1 441 0 discriminator 3
 1403 02c2 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1404 02c6 0133     		adds	r3, r3, #1
 1405 02c8 87F85C32 		strb	r3, [r7, #604]
 1406              	.L92:
 441:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1407              		.loc 1 441 0 is_stmt 0 discriminator 1
 1408 02cc 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1409 02d0 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1410 02d4 9A42     		cmp	r2, r3
 1411 02d6 D7D3     		bcc	.L93
 440:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1412              		.loc 1 440 0 is_stmt 1 discriminator 2
 1413 02d8 97F85D22 		ldrb	r2, [r7, #605]
 1414 02dc 97F84332 		ldrb	r3, [r7, #579]
 1415 02e0 1344     		add	r3, r3, r2
 1416 02e2 87F85D32 		strb	r3, [r7, #605]
 1417              	.L91:
 440:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 1418              		.loc 1 440 0 is_stmt 0 discriminator 1
 1419 02e6 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1420 02ea 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1421 02ee 1B01     		lsls	r3, r3, #4
 1422 02f0 07F10801 		add	r1, r7, #8
 1423 02f4 0968     		ldr	r1, [r1]
 1424 02f6 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 48


 1425 02f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1426 02fa 1946     		mov	r1, r3
 1427 02fc 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1428 0300 03FB01F3 		mul	r3, r3, r1
 1429 0304 9A42     		cmp	r2, r3
 1430 0306 BBDB     		blt	.L94
 443:..\src/command_processing.c ****                 }
 444:..\src/command_processing.c ****             }
 445:..\src/command_processing.c ****             break;
 1431              		.loc 1 445 0 is_stmt 1
 1432 0308 00BF     		nop
 1433              	.L90:
 446:..\src/command_processing.c ****     }
 447:..\src/command_processing.c ****        
 448:..\src/command_processing.c ****         sprintf(aux_str,"");
 1434              		.loc 1 448 0
 1435 030a 634B     		ldr	r3, .L118+4
 1436 030c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1437 030e 07F5A473 		add	r3, r7, #328
 1438 0312 1A70     		strb	r2, [r3]
 449:..\src/command_processing.c ****         itoa(idx + 1, aux_char, 10);
 1439              		.loc 1 449 0
 1440 0314 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1441 0318 0133     		adds	r3, r3, #1
 1442 031a 07F11401 		add	r1, r7, #20
 1443 031e 0A22     		movs	r2, #10
 1444 0320 1846     		mov	r0, r3
 1445 0322 FFF7FEFF 		bl	itoa
 450:..\src/command_processing.c ****         strcat(aux_str ,aux_char);
 1446              		.loc 1 450 0
 1447 0326 07F11402 		add	r2, r7, #20
 1448 032a 07F5A473 		add	r3, r7, #328
 1449 032e 1146     		mov	r1, r2
 1450 0330 1846     		mov	r0, r3
 1451 0332 FFF7FEFF 		bl	strcat
 451:..\src/command_processing.c ****         strcat(aux_str," - ");
 1452              		.loc 1 451 0
 1453 0336 07F5A473 		add	r3, r7, #328
 1454 033a 1846     		mov	r0, r3
 1455 033c FFF7FEFF 		bl	strlen
 1456 0340 0346     		mov	r3, r0
 1457 0342 1A46     		mov	r2, r3
 1458 0344 07F5A473 		add	r3, r7, #328
 1459 0348 1344     		add	r3, r3, r2
 1460 034a 544A     		ldr	r2, .L118+8
 1461 034c 1068     		ldr	r0, [r2]	@ unaligned
 1462 034e 1860     		str	r0, [r3]	@ unaligned
 452:..\src/command_processing.c ****         strcat(aux_str,(char*)PARAM_LIST[idx].PARAM_STR);                
 1463              		.loc 1 452 0
 1464 0350 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1465 0354 1B01     		lsls	r3, r3, #4
 1466 0356 07F10802 		add	r2, r7, #8
 1467 035a 1268     		ldr	r2, [r2]
 1468 035c 1344     		add	r3, r3, r2
 1469 035e 9A68     		ldr	r2, [r3, #8]
 1470 0360 07F5A473 		add	r3, r7, #328
 1471 0364 1146     		mov	r1, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 49


 1472 0366 1846     		mov	r0, r3
 1473 0368 FFF7FEFF 		bl	strcat
 453:..\src/command_processing.c ****         string_length = strlen(aux_str);
 1474              		.loc 1 453 0
 1475 036c 07F5A473 		add	r3, r7, #328
 1476 0370 1846     		mov	r0, r3
 1477 0372 FFF7FEFF 		bl	strlen
 1478 0376 0346     		mov	r3, r0
 1479 0378 87F85E32 		strb	r3, [r7, #606]
 454:..\src/command_processing.c ****         
 455:..\src/command_processing.c ****         // Parameters with a menu
 456:..\src/command_processing.c ****         if (PARAM_LIST[idx].MENU != 0){
 1480              		.loc 1 456 0
 1481 037c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1482 0380 1B01     		lsls	r3, r3, #4
 1483 0382 07F10802 		add	r2, r7, #8
 1484 0386 1268     		ldr	r2, [r2]
 1485 0388 1344     		add	r3, r3, r2
 1486 038a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1487 038c 002B     		cmp	r3, #0
 1488 038e 40D0     		beq	.L95
 457:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1489              		.loc 1 457 0
 1490 0390 0023     		movs	r3, #0
 1491 0392 87F85D32 		strb	r3, [r7, #605]
 1492 0396 35E0     		b	.L96
 1493              	.L98:
 458:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1494              		.loc 1 458 0
 1495 0398 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1496 039c 2C22     		movs	r2, #44
 1497 039e 02FB03F3 		mul	r3, r2, r3
 1498 03a2 3A1D     		adds	r2, r7, #4
 1499 03a4 1268     		ldr	r2, [r2]
 1500 03a6 1344     		add	r3, r3, r2
 1501 03a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1502 03aa 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1503 03ae 1B01     		lsls	r3, r3, #4
 1504 03b0 07F10801 		add	r1, r7, #8
 1505 03b4 0968     		ldr	r1, [r1]
 1506 03b6 0B44     		add	r3, r3, r1
 1507 03b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1508 03ba 9A42     		cmp	r2, r3
 1509 03bc 13D1     		bne	.L97
 459:..\src/command_processing.c ****                 strcat(aux_str, MENU_LIST[i].choice[*m_addr]);
 1510              		.loc 1 459 0
 1511 03be 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1512 03c2 2C22     		movs	r2, #44
 1513 03c4 02FB03F3 		mul	r3, r2, r3
 1514 03c8 3A1D     		adds	r2, r7, #4
 1515 03ca 1268     		ldr	r2, [r2]
 1516 03cc 1A44     		add	r2, r2, r3
 1517 03ce D7F85032 		ldr	r3, [r7, #592]
 1518 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1519 03d4 9B00     		lsls	r3, r3, #2
 1520 03d6 1344     		add	r3, r3, r2
 1521 03d8 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 50


 1522 03da 07F5A473 		add	r3, r7, #328
 1523 03de 1146     		mov	r1, r2
 1524 03e0 1846     		mov	r0, r3
 1525 03e2 FFF7FEFF 		bl	strcat
 1526              	.L97:
 460:..\src/command_processing.c ****                 }              
 461:..\src/command_processing.c ****             //Recomputes string length
 462:..\src/command_processing.c ****             string_length = strlen(aux_str)+1;
 1527              		.loc 1 462 0 discriminator 2
 1528 03e6 07F5A473 		add	r3, r7, #328
 1529 03ea 1846     		mov	r0, r3
 1530 03ec FFF7FEFF 		bl	strlen
 1531 03f0 0346     		mov	r3, r0
 1532 03f2 DBB2     		uxtb	r3, r3
 1533 03f4 0133     		adds	r3, r3, #1
 1534 03f6 87F85E32 		strb	r3, [r7, #606]
 457:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1535              		.loc 1 457 0 discriminator 2
 1536 03fa 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1537 03fe 0133     		adds	r3, r3, #1
 1538 0400 87F85D32 		strb	r3, [r7, #605]
 1539              	.L96:
 457:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1540              		.loc 1 457 0 is_stmt 0 discriminator 1
 1541 0404 07F10E03 		add	r3, r7, #14
 1542 0408 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1543 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1544 040e 9A42     		cmp	r2, r3
 1545 0410 C2D3     		bcc	.L98
 1546              	.L95:
 463:..\src/command_processing.c ****             }
 464:..\src/command_processing.c ****         }
 465:..\src/command_processing.c **** 
 466:..\src/command_processing.c ****         // Add parameter string to packet
 467:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1547              		.loc 1 467 0 is_stmt 1
 1548 0412 97F85E32 		ldrb	r3, [r7, #606]
 1549 0416 87F85D32 		strb	r3, [r7, #605]
 1550 041a 28E0     		b	.L99
 1551              	.L100:
 468:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1552              		.loc 1 468 0 discriminator 3
 1553 041c 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1554 0420 3222     		movs	r2, #50
 1555 0422 02FB03F3 		mul	r3, r2, r3
 1556 0426 1A1D     		adds	r2, r3, #4
 1557 0428 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1558 042c 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1559 0430 0901     		lsls	r1, r1, #4
 1560 0432 07F10800 		add	r0, r7, #8
 1561 0436 0068     		ldr	r0, [r0]
 1562 0438 0144     		add	r1, r1, r0
 1563 043a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1564 043c 01FB03F3 		mul	r3, r1, r3
 1565 0440 1A44     		add	r2, r2, r3
 1566 0442 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1567 0446 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 51


 1568 0448 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1569 044c D31A     		subs	r3, r2, r3
 1570 044e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1571 0452 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1572 0456 8A1A     		subs	r2, r1, r2
 1573 0458 07F5A471 		add	r1, r7, #328
 1574 045c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1575 045e D7F84422 		ldr	r2, [r7, #580]
 1576 0462 D154     		strb	r1, [r2, r3]
 467:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1577              		.loc 1 467 0 discriminator 3
 1578 0464 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1579 0468 013B     		subs	r3, r3, #1
 1580 046a 87F85D32 		strb	r3, [r7, #605]
 1581              	.L99:
 467:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1582              		.loc 1 467 0 is_stmt 0 discriminator 1
 1583 046e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1584 0472 002B     		cmp	r3, #0
 1585 0474 D2D1     		bne	.L100
 469:..\src/command_processing.c ****         
 470:..\src/command_processing.c ****         
 471:..\src/command_processing.c ****         if (PARAM_LIST[idx].TYPES == TYPE_FLAG){
 1586              		.loc 1 471 0 is_stmt 1
 1587 0476 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1588 047a 1B01     		lsls	r3, r3, #4
 1589 047c 07F10802 		add	r2, r7, #8
 1590 0480 1268     		ldr	r2, [r2]
 1591 0482 1344     		add	r3, r3, r2
 1592 0484 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1593 0486 002B     		cmp	r3, #0
 1594 0488 6ED1     		bne	.L101
 472:..\src/command_processing.c ****             //Send the number of menus          
 473:..\src/command_processing.c ****             for (i = 0; i < num_menus ; i++){
 1595              		.loc 1 473 0
 1596 048a 0023     		movs	r3, #0
 1597 048c 87F85D32 		strb	r3, [r7, #605]
 1598 0490 40E0     		b	.L102
 1599              	.L119:
 1600 0492 00BF     		.align	2
 1601              	.L118:
 1602 0494 00000000 		.word	c_mem
 1603 0498 00000000 		.word	.LC8
 1604 049c 04000000 		.word	.LC14
 1605              	.L104:
 474:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1606              		.loc 1 474 0
 1607 04a0 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1608 04a4 2C22     		movs	r2, #44
 1609 04a6 02FB03F3 		mul	r3, r2, r3
 1610 04aa 3A1D     		adds	r2, r7, #4
 1611 04ac 1268     		ldr	r2, [r2]
 1612 04ae 1344     		add	r3, r3, r2
 1613 04b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1614 04b2 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1615 04b6 1B01     		lsls	r3, r3, #4
 1616 04b8 07F10801 		add	r1, r7, #8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 52


 1617 04bc 0968     		ldr	r1, [r1]
 1618 04be 0B44     		add	r3, r3, r1
 1619 04c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1620 04c2 9A42     		cmp	r2, r3
 1621 04c4 21D1     		bne	.L103
 475:..\src/command_processing.c ****                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_le
 1622              		.loc 1 475 0
 1623 04c6 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1624 04ca 3222     		movs	r2, #50
 1625 04cc 02FB03F3 		mul	r3, r2, r3
 1626 04d0 1A1D     		adds	r2, r3, #4
 1627 04d2 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1628 04d6 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1629 04da 0901     		lsls	r1, r1, #4
 1630 04dc 07F10800 		add	r0, r7, #8
 1631 04e0 0068     		ldr	r0, [r0]
 1632 04e2 0144     		add	r1, r1, r0
 1633 04e4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1634 04e6 01FB03F3 		mul	r3, r1, r3
 1635 04ea 1A44     		add	r2, r2, r3
 1636 04ec 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1637 04f0 1344     		add	r3, r3, r2
 1638 04f2 97F85D22 		ldrb	r2, [r7, #605]
 1639 04f6 0132     		adds	r2, r2, #1
 1640 04f8 D1B2     		uxtb	r1, r2
 1641 04fa D7F84422 		ldr	r2, [r7, #580]
 1642 04fe D154     		strb	r1, [r2, r3]
 476:..\src/command_processing.c ****                 i = num_menus;}              
 1643              		.loc 1 476 0
 1644 0500 07F10E03 		add	r3, r7, #14
 1645 0504 1B78     		ldrb	r3, [r3]
 1646 0506 87F85D32 		strb	r3, [r7, #605]
 1647              	.L103:
 473:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1648              		.loc 1 473 0 discriminator 2
 1649 050a 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1650 050e 0133     		adds	r3, r3, #1
 1651 0510 87F85D32 		strb	r3, [r7, #605]
 1652              	.L102:
 473:..\src/command_processing.c ****                 if (MENU_LIST[i].name == PARAM_LIST[idx].MENU){
 1653              		.loc 1 473 0 is_stmt 0 discriminator 1
 1654 0514 07F10E03 		add	r3, r7, #14
 1655 0518 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1656 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1657 051e 9A42     		cmp	r2, r3
 1658 0520 BED3     		bcc	.L104
 477:..\src/command_processing.c ****             }
 478:..\src/command_processing.c ****             // Add empty bit + struct number
 479:..\src/command_processing.c ****             // Note: added here at the end of packets is transparent to old parameters retrieving v
 480:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1659              		.loc 1 480 0 is_stmt 1
 1660 0522 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1661 0526 3222     		movs	r2, #50
 1662 0528 02FB03F3 		mul	r3, r2, r3
 1663 052c 1A1D     		adds	r2, r3, #4
 1664 052e 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1665 0532 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 53


 1666 0536 0901     		lsls	r1, r1, #4
 1667 0538 07F10800 		add	r0, r7, #8
 1668 053c 0068     		ldr	r0, [r0]
 1669 053e 0144     		add	r1, r1, r0
 1670 0540 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1671 0542 01FB03F3 		mul	r3, r1, r3
 1672 0546 1A44     		add	r2, r2, r3
 1673 0548 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1674 054c 1344     		add	r3, r3, r2
 1675 054e 0233     		adds	r3, r3, #2
 1676 0550 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1677 0554 1201     		lsls	r2, r2, #4
 1678 0556 07F10801 		add	r1, r7, #8
 1679 055a 0968     		ldr	r1, [r1]
 1680 055c 0A44     		add	r2, r2, r1
 1681 055e 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1682 0560 D7F84422 		ldr	r2, [r7, #580]
 1683 0564 D154     		strb	r1, [r2, r3]
 1684 0566 21E0     		b	.L105
 1685              	.L101:
 481:..\src/command_processing.c ****         }
 482:..\src/command_processing.c ****         else {
 483:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*PARAM_LIST[idx].NUM_ITEMS) + string_length
 1686              		.loc 1 483 0
 1687 0568 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1688 056c 3222     		movs	r2, #50
 1689 056e 02FB03F3 		mul	r3, r2, r3
 1690 0572 1A1D     		adds	r2, r3, #4
 1691 0574 97F84332 		ldrb	r3, [r7, #579]	@ zero_extendqisi2
 1692 0578 97F85F12 		ldrb	r1, [r7, #607]	@ zero_extendqisi2
 1693 057c 0901     		lsls	r1, r1, #4
 1694 057e 07F10800 		add	r0, r7, #8
 1695 0582 0068     		ldr	r0, [r0]
 1696 0584 0144     		add	r1, r1, r0
 1697 0586 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 1698 0588 01FB03F3 		mul	r3, r1, r3
 1699 058c 1A44     		add	r2, r2, r3
 1700 058e 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1701 0592 1344     		add	r3, r3, r2
 1702 0594 0133     		adds	r3, r3, #1
 1703 0596 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1704 059a 1201     		lsls	r2, r2, #4
 1705 059c 07F10801 		add	r1, r7, #8
 1706 05a0 0968     		ldr	r1, [r1]
 1707 05a2 0A44     		add	r2, r2, r1
 1708 05a4 517B     		ldrb	r1, [r2, #13]	@ zero_extendqisi2
 1709 05a6 D7F84422 		ldr	r2, [r7, #580]
 1710 05aa D154     		strb	r1, [r2, r3]
 1711              	.L105:
 1712              	.LBE23:
 417:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
 1713              		.loc 1 417 0 discriminator 2
 1714 05ac 97F85F32 		ldrb	r3, [r7, #607]	@ zero_extendqisi2
 1715 05b0 0133     		adds	r3, r3, #1
 1716 05b2 87F85F32 		strb	r3, [r7, #607]
 1717              	.L83:
 417:..\src/command_processing.c ****         m_addr = (uint8*)PARAM_LIST[idx].VAR_P;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 54


 1718              		.loc 1 417 0 is_stmt 0 discriminator 1
 1719 05b6 07F10F03 		add	r3, r7, #15
 1720 05ba 97F85F22 		ldrb	r2, [r7, #607]	@ zero_extendqisi2
 1721 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1722 05c0 9A42     		cmp	r2, r3
 1723 05c2 FFF4B3AD 		bcc	.L106
 484:..\src/command_processing.c ****         }
 485:..\src/command_processing.c ****     }
 486:..\src/command_processing.c ****     
 487:..\src/command_processing.c ****     // Add menu
 488:..\src/command_processing.c ****     for (j = 0; j < num_menus; j++) {
 1724              		.loc 1 488 0 is_stmt 1
 1725 05c6 0023     		movs	r3, #0
 1726 05c8 87F85C32 		strb	r3, [r7, #604]
 1727 05cc C0E0     		b	.L107
 1728              	.L115:
 489:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1729              		.loc 1 489 0
 1730 05ce 774B     		ldr	r3, .L120
 1731 05d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1732 05d2 07F14C03 		add	r3, r7, #76
 1733 05d6 1A70     		strb	r2, [r3]
 490:..\src/command_processing.c ****         for (count = 0; count <10 ; count++){            
 1734              		.loc 1 490 0
 1735 05d8 0023     		movs	r3, #0
 1736 05da 87F85B32 		strb	r3, [r7, #603]
 1737 05de 7AE0     		b	.L108
 1738              	.L112:
 491:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1739              		.loc 1 491 0
 1740 05e0 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1741 05e4 2C22     		movs	r2, #44
 1742 05e6 02FB03F3 		mul	r3, r2, r3
 1743 05ea 3A1D     		adds	r2, r7, #4
 1744 05ec 1268     		ldr	r2, [r2]
 1745 05ee 1A44     		add	r2, r2, r3
 1746 05f0 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1747 05f4 9B00     		lsls	r3, r3, #2
 1748 05f6 1344     		add	r3, r3, r2
 1749 05f8 5B68     		ldr	r3, [r3, #4]
 1750 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1751 05fc 002B     		cmp	r3, #0
 1752 05fe 24D1     		bne	.L109
 492:..\src/command_processing.c ****                 if (MENU_LIST[j].reset == TRUE){
 1753              		.loc 1 492 0
 1754 0600 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1755 0604 2C22     		movs	r2, #44
 1756 0606 02FB03F3 		mul	r3, r2, r3
 1757 060a 3A1D     		adds	r2, r7, #4
 1758 060c 1268     		ldr	r2, [r2]
 1759 060e 1344     		add	r3, r3, r2
 1760 0610 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1761 0612 012B     		cmp	r3, #1
 1762 0614 15D1     		bne	.L110
 493:..\src/command_processing.c ****                     strcat(aux_str1,"The board will reset\n");
 1763              		.loc 1 493 0
 1764 0616 07F14C03 		add	r3, r7, #76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 55


 1765 061a 1846     		mov	r0, r3
 1766 061c FFF7FEFF 		bl	strlen
 1767 0620 0346     		mov	r3, r0
 1768 0622 1A46     		mov	r2, r3
 1769 0624 07F14C03 		add	r3, r7, #76
 1770 0628 1344     		add	r3, r3, r2
 1771 062a 614A     		ldr	r2, .L120+4
 1772 062c 1D46     		mov	r5, r3
 1773 062e 1446     		mov	r4, r2
 1774 0630 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1775 0632 2860     		str	r0, [r5]	@ unaligned
 1776 0634 6960     		str	r1, [r5, #4]	@ unaligned
 1777 0636 AA60     		str	r2, [r5, #8]	@ unaligned
 1778 0638 EB60     		str	r3, [r5, #12]	@ unaligned
 1779 063a 2068     		ldr	r0, [r4]	@ unaligned
 1780 063c 2861     		str	r0, [r5, #16]	@ unaligned
 1781 063e A388     		ldrh	r3, [r4, #4]	@ unaligned
 1782 0640 AB82     		strh	r3, [r5, #20]	@ unaligned
 1783              	.L110:
 494:..\src/command_processing.c ****                 }
 495:..\src/command_processing.c ****                 count = 10;
 1784              		.loc 1 495 0
 1785 0642 0A23     		movs	r3, #10
 1786 0644 87F85B32 		strb	r3, [r7, #603]
 1787 0648 40E0     		b	.L111
 1788              	.L109:
 496:..\src/command_processing.c ****             }            
 497:..\src/command_processing.c ****             else {
 498:..\src/command_processing.c ****                 itoa(count, aux_char, 10);
 1789              		.loc 1 498 0
 1790 064a 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1791 064e 07F11401 		add	r1, r7, #20
 1792 0652 0A22     		movs	r2, #10
 1793 0654 1846     		mov	r0, r3
 1794 0656 FFF7FEFF 		bl	itoa
 499:..\src/command_processing.c ****                 strcat(aux_str1,aux_char);
 1795              		.loc 1 499 0
 1796 065a 07F11402 		add	r2, r7, #20
 1797 065e 07F14C03 		add	r3, r7, #76
 1798 0662 1146     		mov	r1, r2
 1799 0664 1846     		mov	r0, r3
 1800 0666 FFF7FEFF 		bl	strcat
 500:..\src/command_processing.c ****                 strcat(aux_str1," -> ");
 1801              		.loc 1 500 0
 1802 066a 07F14C03 		add	r3, r7, #76
 1803 066e 1846     		mov	r0, r3
 1804 0670 FFF7FEFF 		bl	strlen
 1805 0674 0346     		mov	r3, r0
 1806 0676 1A46     		mov	r2, r3
 1807 0678 07F14C03 		add	r3, r7, #76
 1808 067c 1344     		add	r3, r3, r2
 1809 067e 4D4A     		ldr	r2, .L120+8
 1810 0680 1068     		ldr	r0, [r2]	@ unaligned
 1811 0682 1860     		str	r0, [r3]	@ unaligned
 1812 0684 1279     		ldrb	r2, [r2, #4]
 1813 0686 1A71     		strb	r2, [r3, #4]
 501:..\src/command_processing.c ****                 strcat(aux_str1,(char*)MENU_LIST[j].choice[count]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 56


 1814              		.loc 1 501 0
 1815 0688 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1816 068c 2C22     		movs	r2, #44
 1817 068e 02FB03F3 		mul	r3, r2, r3
 1818 0692 3A1D     		adds	r2, r7, #4
 1819 0694 1268     		ldr	r2, [r2]
 1820 0696 1A44     		add	r2, r2, r3
 1821 0698 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1822 069c 9B00     		lsls	r3, r3, #2
 1823 069e 1344     		add	r3, r3, r2
 1824 06a0 5A68     		ldr	r2, [r3, #4]
 1825 06a2 07F14C03 		add	r3, r7, #76
 1826 06a6 1146     		mov	r1, r2
 1827 06a8 1846     		mov	r0, r3
 1828 06aa FFF7FEFF 		bl	strcat
 502:..\src/command_processing.c ****                 strcat(aux_str1,"\n");
 1829              		.loc 1 502 0
 1830 06ae 07F14C03 		add	r3, r7, #76
 1831 06b2 1846     		mov	r0, r3
 1832 06b4 FFF7FEFF 		bl	strlen
 1833 06b8 0346     		mov	r3, r0
 1834 06ba 1A46     		mov	r2, r3
 1835 06bc 07F14C03 		add	r3, r7, #76
 1836 06c0 1344     		add	r3, r3, r2
 1837 06c2 3D49     		ldr	r1, .L120+12
 1838 06c4 1A46     		mov	r2, r3
 1839 06c6 0B46     		mov	r3, r1
 1840 06c8 1B88     		ldrh	r3, [r3]	@ unaligned
 1841 06ca 1380     		strh	r3, [r2]	@ unaligned
 1842              	.L111:
 490:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1843              		.loc 1 490 0 discriminator 2
 1844 06cc 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1845 06d0 0133     		adds	r3, r3, #1
 1846 06d2 87F85B32 		strb	r3, [r7, #603]
 1847              	.L108:
 490:..\src/command_processing.c ****             if (!strcmp(MENU_LIST[j].choice[count],"")){
 1848              		.loc 1 490 0 is_stmt 0 discriminator 1
 1849 06d6 97F85B32 		ldrb	r3, [r7, #603]	@ zero_extendqisi2
 1850 06da 092B     		cmp	r3, #9
 1851 06dc 80D9     		bls	.L112
 503:..\src/command_processing.c ****             }    
 504:..\src/command_processing.c ****         }
 505:..\src/command_processing.c ****         string_length = strlen(aux_str1);
 1852              		.loc 1 505 0 is_stmt 1
 1853 06de 07F14C03 		add	r3, r7, #76
 1854 06e2 1846     		mov	r0, r3
 1855 06e4 FFF7FEFF 		bl	strlen
 1856 06e8 0346     		mov	r3, r0
 1857 06ea 87F85E32 		strb	r3, [r7, #606]
 506:..\src/command_processing.c ****         
 507:..\src/command_processing.c ****         for(i = string_length; i != 0; i--)
 1858              		.loc 1 507 0
 1859 06ee 97F85E32 		ldrb	r3, [r7, #606]
 1860 06f2 87F85D32 		strb	r3, [r7, #605]
 1861 06f6 22E0     		b	.L113
 1862              	.L114:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 57


 508:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1863              		.loc 1 508 0 discriminator 3
 1864 06f8 07F10F03 		add	r3, r7, #15
 1865 06fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1866 06fe 3222     		movs	r2, #50
 1867 0700 02FB03F3 		mul	r3, r2, r3
 1868 0704 9A1C     		adds	r2, r3, #2
 1869 0706 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1870 070a 9621     		movs	r1, #150
 1871 070c 01FB03F3 		mul	r3, r1, r3
 1872 0710 1A44     		add	r2, r2, r3
 1873 0712 97F85E32 		ldrb	r3, [r7, #606]	@ zero_extendqisi2
 1874 0716 1A44     		add	r2, r2, r3
 1875 0718 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1876 071c D31A     		subs	r3, r2, r3
 1877 071e 97F85E12 		ldrb	r1, [r7, #606]	@ zero_extendqisi2
 1878 0722 97F85D22 		ldrb	r2, [r7, #605]	@ zero_extendqisi2
 1879 0726 8A1A     		subs	r2, r1, r2
 1880 0728 07F14C01 		add	r1, r7, #76
 1881 072c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1882 072e D7F84422 		ldr	r2, [r7, #580]
 1883 0732 D154     		strb	r1, [r2, r3]
 507:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1884              		.loc 1 507 0 discriminator 3
 1885 0734 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1886 0738 013B     		subs	r3, r3, #1
 1887 073a 87F85D32 		strb	r3, [r7, #605]
 1888              	.L113:
 507:..\src/command_processing.c ****         packet_data[PARAM_BYTE_SLOT*num_params + 2 + j*PARAM_MENU_SLOT + string_length - i] = aux_s
 1889              		.loc 1 507 0 is_stmt 0 discriminator 1
 1890 073e 97F85D32 		ldrb	r3, [r7, #605]	@ zero_extendqisi2
 1891 0742 002B     		cmp	r3, #0
 1892 0744 D8D1     		bne	.L114
 488:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1893              		.loc 1 488 0 is_stmt 1 discriminator 2
 1894 0746 97F85C32 		ldrb	r3, [r7, #604]	@ zero_extendqisi2
 1895 074a 0133     		adds	r3, r3, #1
 1896 074c 87F85C32 		strb	r3, [r7, #604]
 1897              	.L107:
 488:..\src/command_processing.c ****         sprintf(aux_str1,"");
 1898              		.loc 1 488 0 is_stmt 0 discriminator 1
 1899 0750 07F10E03 		add	r3, r7, #14
 1900 0754 97F85C22 		ldrb	r2, [r7, #604]	@ zero_extendqisi2
 1901 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 075a 9A42     		cmp	r2, r3
 1903 075c FFF437AF 		bcc	.L115
 509:..\src/command_processing.c ****     }
 510:..\src/command_processing.c ****         
 511:..\src/command_processing.c ****     packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 1904              		.loc 1 511 0 is_stmt 1
 1905 0760 B7F84E32 		ldrh	r3, [r7, #590]
 1906 0764 5C1E     		subs	r4, r3, #1
 1907 0766 D7F84422 		ldr	r2, [r7, #580]
 1908 076a B7F84E32 		ldrh	r3, [r7, #590]	@ movhi
 1909 076e DBB2     		uxtb	r3, r3
 1910 0770 013B     		subs	r3, r3, #1
 1911 0772 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 58


 1912 0774 1946     		mov	r1, r3
 1913 0776 1046     		mov	r0, r2
 1914 0778 FFF7FEFF 		bl	LCRChecksum
 1915 077c 0346     		mov	r3, r0
 1916 077e 1A46     		mov	r2, r3
 1917 0780 D7F84432 		ldr	r3, [r7, #580]
 1918 0784 1A55     		strb	r2, [r3, r4]
 512:..\src/command_processing.c ****     
 513:..\src/command_processing.c ****     if (sendToDevice)
 1919              		.loc 1 513 0
 1920 0786 97F88032 		ldrb	r3, [r7, #640]	@ zero_extendqisi2
 1921 078a 002B     		cmp	r3, #0
 1922 078c 07D0     		beq	.L116
 514:..\src/command_processing.c ****     {commWrite(packet_data, packet_length);  
 1923              		.loc 1 514 0
 1924 078e D7F84432 		ldr	r3, [r7, #580]
 1925 0792 B7F84E22 		ldrh	r2, [r7, #590]
 1926 0796 1146     		mov	r1, r2
 1927 0798 1846     		mov	r0, r3
 1928 079a FFF7FEFF 		bl	commWrite
 1929              	.L116:
 1930 079e B546     		mov	sp, r6
 515:..\src/command_processing.c ****     }
 516:..\src/command_processing.c ****     else {
 517:..\src/command_processing.c ****        //Update pointer (Bad choice since pointing to dead variable in another function, to fix)
 518:..\src/command_processing.c ****       // longPkgP = (char*)&packet_data[0];
 519:..\src/command_processing.c ****       // longPkgSize = packet_length;
 520:..\src/command_processing.c ****     }
 521:..\src/command_processing.c **** }
 1931              		.loc 1 521 0
 1932 07a0 00BF     		nop
 1933 07a2 07F51977 		add	r7, r7, #612
 1934              		.cfi_def_cfa_offset 28
 1935 07a6 BD46     		mov	sp, r7
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 07a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1939              	.L121:
 1940              		.align	2
 1941              	.L120:
 1942 07ac 00000000 		.word	.LC8
 1943 07b0 08000000 		.word	.LC15
 1944 07b4 20000000 		.word	.LC16
 1945 07b8 28000000 		.word	.LC17
 1946              		.cfi_endproc
 1947              	.LFE68:
 1948              		.size	get_param_list, .-get_param_list
 1949              		.section	.rodata
 1950 002a 0000     		.align	2
 1951              	.LC19:
 1952 002c 44657669 		.ascii	"Device ID:\000"
 1952      63652049 
 1952      443A00
 1953 0037 00       		.align	2
 1954              	.LC20:
 1955 0038 454D4720 		.ascii	"EMG thresholds:\000"
 1955      74687265 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 59


 1955      73686F6C 
 1955      64733A00 
 1956              		.align	2
 1957              	.LC21:
 1958 0048 454D4720 		.ascii	"EMG max values:\000"
 1958      6D617820 
 1958      76616C75 
 1958      65733A00 
 1959              		.align	2
 1960              	.LC22:
 1961 0058 454D4720 		.ascii	"EMG max speeds:\000"
 1961      6D617820 
 1961      73706565 
 1961      64733A00 
 1962              		.align	2
 1963              	.LC23:
 1964 0068 454D4720 		.ascii	"EMG inversion:\000"
 1964      696E7665 
 1964      7273696F 
 1964      6E3A00
 1965 0077 00       		.align	2
 1966              	.LC24:
 1967 0078 4D617374 		.ascii	"Master Mode:\000"
 1967      6572204D 
 1967      6F64653A 
 1967      00
 1968 0085 000000   		.align	2
 1969              	.LC25:
 1970 0088 536C6176 		.ascii	"Slave ID:\000"
 1970      65204944 
 1970      3A00
 1971 0092 0000     		.align	2
 1972              	.LC26:
 1973 0094 536C6176 		.ascii	"Slave resolution:\000"
 1973      65207265 
 1973      736F6C75 
 1973      74696F6E 
 1973      3A00
 1974 00a6 0000     		.align	2
 1975              	.LC27:
 1976 00a8 496E7075 		.ascii	"Input mode:\000"
 1976      74206D6F 
 1976      64653A00 
 1977              		.align	2
 1978              	.LC28:
 1979 00b4 506F732E 		.ascii	"Pos. limits [inf, sup]:\000"
 1979      206C696D 
 1979      69747320 
 1979      5B696E66 
 1979      2C207375 
 1980              		.align	2
 1981              	.LC29:
 1982 00cc 56696272 		.ascii	"Vibrotactile Feedback:\000"
 1982      6F746163 
 1982      74696C65 
 1982      20466565 
 1982      64626163 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 60


 1983 00e3 00       		.align	2
 1984              	.LC30:
 1985 00e4 41697220 		.ascii	"Air Chamber Feedback:\000"
 1985      4368616D 
 1985      62657220 
 1985      46656564 
 1985      6261636B 
 1986 00fa 0000     		.align	2
 1987              	.LC31:
 1988 00fc 4D617869 		.ascii	"Maximum slave residual current:\000"
 1988      6D756D20 
 1988      736C6176 
 1988      65207265 
 1988      73696475 
 1989              		.align	2
 1990              	.LC32:
 1991 011c 4D617869 		.ascii	"Maximum pressure feedback (kPa):\000"
 1991      6D756D20 
 1991      70726573 
 1991      73757265 
 1991      20666565 
 1992 013d 000000   		.align	2
 1993              	.LC33:
 1994 0140 50726F70 		.ascii	"Proportional pressure error gain:\000"
 1994      6F727469 
 1994      6F6E616C 
 1994      20707265 
 1994      73737572 
 1995 0162 0000     		.align	2
 1996              	.LC0:
 1997 0164 20557362 		.ascii	" Usb\000"
 1997      00
 1998 0169 000000   		.align	2
 1999              	.LC1:
 2000 016c 2048616E 		.ascii	" Handle\000"
 2000      646C6500 
 2001              		.align	2
 2002              	.LC2:
 2003 0174 20454D47 		.ascii	" EMG proportional\000"
 2003      2070726F 
 2003      706F7274 
 2003      696F6E61 
 2003      6C00
 2004 0186 0000     		.align	2
 2005              	.LC3:
 2006 0188 20454D47 		.ascii	" EMG Integral\000"
 2006      20496E74 
 2006      65677261 
 2006      6C00
 2007 0196 0000     		.align	2
 2008              	.LC4:
 2009 0198 20454D47 		.ascii	" EMG FCFS\000"
 2009      20464346 
 2009      5300
 2010 01a2 0000     		.align	2
 2011              	.LC5:
 2012 01a4 20454D47 		.ascii	" EMG FCFS Advanced\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 61


 2012      20464346 
 2012      53204164 
 2012      76616E63 
 2012      656400
 2013 01b7 00       		.align	2
 2014              	.LC6:
 2015 01b8 204A6F79 		.ascii	" Joystick\000"
 2015      73746963 
 2015      6B00
 2016 01c2 0000     		.align	2
 2017              	.LC7:
 2018 01c4 20454D47 		.ascii	" EMG proportional NC\000"
 2018      2070726F 
 2018      706F7274 
 2018      696F6E61 
 2018      6C204E43 
 2019 01d9 000000   		.align	2
 2020              	.LC9:
 2021 01dc 204E4F00 		.ascii	" NO\000"
 2022              		.align	2
 2023              	.LC10:
 2024 01e0 20594553 		.ascii	" YES\000"
 2024      00
 2025 01e5 000000   		.align	2
 2026              	.LC11:
 2027 01e8 204F4646 		.ascii	" OFF\000"
 2027      00
 2028 01ed 000000   		.align	2
 2029              	.LC12:
 2030 01f0 204F4E00 		.ascii	" ON\000"
 2031              		.align	2
 2032              	.LC18:
 2033 01f4 01       		.byte	1
 2034 01f5 00       		.byte	0
 2035 01f6 0000     		.space	2
 2036 01f8 64010000 		.word	.LC0
 2037 01fc 6C010000 		.word	.LC1
 2038 0200 74010000 		.word	.LC2
 2039 0204 88010000 		.word	.LC3
 2040 0208 98010000 		.word	.LC4
 2041 020c A4010000 		.word	.LC5
 2042 0210 B8010000 		.word	.LC6
 2043 0214 C4010000 		.word	.LC7
 2044 0218 00000000 		.word	.LC8
 2045 021c 00000000 		.word	.LC8
 2046 0220 03       		.byte	3
 2047 0221 00       		.byte	0
 2048 0222 0000     		.space	2
 2049 0224 DC010000 		.word	.LC9
 2050 0228 E0010000 		.word	.LC10
 2051 022c 00000000 		.word	.LC8
 2052 0230 00000000 		.word	.LC8
 2053 0234 00000000 		.word	.LC8
 2054 0238 00000000 		.word	.LC8
 2055 023c 00000000 		.word	.LC8
 2056 0240 00000000 		.word	.LC8
 2057 0244 00000000 		.word	.LC8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 62


 2058 0248 00000000 		.word	.LC8
 2059 024c 05       		.byte	5
 2060 024d 01       		.byte	1
 2061 024e 0000     		.space	2
 2062 0250 E8010000 		.word	.LC11
 2063 0254 F0010000 		.word	.LC12
 2064 0258 00000000 		.word	.LC8
 2065 025c 00000000 		.word	.LC8
 2066 0260 00000000 		.word	.LC8
 2067 0264 00000000 		.word	.LC8
 2068 0268 00000000 		.word	.LC8
 2069 026c 00000000 		.word	.LC8
 2070 0270 00000000 		.word	.LC8
 2071 0274 00000000 		.word	.LC8
 2072              		.section	.text.manage_param_list,"ax",%progbits
 2073              		.align	2
 2074              		.global	manage_param_list
 2075              		.thumb
 2076              		.thumb_func
 2077              		.type	manage_param_list, %function
 2078              	manage_param_list:
 2079              	.LFB69:
 522:..\src/command_processing.c **** 
 523:..\src/command_processing.c **** //==============================================================================
 524:..\src/command_processing.c **** // MANAGE PARAM LIST
 525:..\src/command_processing.c **** //==============================================================================
 526:..\src/command_processing.c **** void manage_param_list(uint16 index, uint8 sendToDevice) {
 2080              		.loc 1 526 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 456
 2083              		@ frame_needed = 1, uses_anonymous_args = 0
 2084 0000 90B5     		push	{r4, r7, lr}
 2085              		.cfi_def_cfa_offset 12
 2086              		.cfi_offset 4, -12
 2087              		.cfi_offset 7, -8
 2088              		.cfi_offset 14, -4
 2089 0002 F5B0     		sub	sp, sp, #468
 2090              		.cfi_def_cfa_offset 480
 2091 0004 02AF     		add	r7, sp, #8
 2092              		.cfi_def_cfa 7, 472
 2093 0006 0246     		mov	r2, r0
 2094 0008 BB1D     		adds	r3, r7, #6
 2095 000a 1A80     		strh	r2, [r3]	@ movhi
 2096 000c 7B1D     		adds	r3, r7, #5
 2097 000e 0A46     		mov	r2, r1
 2098 0010 1A70     		strb	r2, [r3]
 527:..\src/command_processing.c ****     uint8 CYDATA i, j;
 528:..\src/command_processing.c ****     
 529:..\src/command_processing.c ****     uint8 PARAM_IDX;
 530:..\src/command_processing.c ****          
 531:..\src/command_processing.c ****     // Arrays
 532:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 2099              		.loc 1 532 0
 2100 0012 ED4B     		ldr	r3, .L137
 2101 0014 C7F8C031 		str	r3, [r7, #448]
 533:..\src/command_processing.c ****     
 534:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 63


 2102              		.loc 1 534 0
 2103 0018 BB1D     		adds	r3, r7, #6
 2104 001a 1B88     		ldrh	r3, [r3]
 2105 001c 002B     		cmp	r3, #0
 2106 001e 02D0     		beq	.L123
 535:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 2107              		.loc 1 535 0
 2108 0020 EA4B     		ldr	r3, .L137+4
 2109 0022 C7F8C031 		str	r3, [r7, #448]
 2110              	.L123:
 536:..\src/command_processing.c ****     }
 537:..\src/command_processing.c **** 
 538:..\src/command_processing.c ****     struct menu menu_type;
 539:..\src/command_processing.c ****     
 540:..\src/command_processing.c ****     //------------------ BEGIN OF MENU LIST --------------------//  
 541:..\src/command_processing.c ****         const struct menu MENU_LIST[] = {
 2111              		.loc 1 541 0
 2112 0026 EA4A     		ldr	r2, .L137+8
 2113 0028 07F58673 		add	r3, r7, #268
 2114 002c 1146     		mov	r1, r2
 2115 002e 8422     		movs	r2, #132
 2116 0030 1846     		mov	r0, r3
 2117 0032 FFF7FEFF 		bl	memcpy
 542:..\src/command_processing.c ****     //  {num            , RESET     , { choice_0                  , choice_1                , choic
 543:..\src/command_processing.c ****         {MENU_INPUT     , FALSE     , { " Usb"                    , " Handle"               , " EMG
 544:..\src/command_processing.c ****         {MENU_Y_N       , FALSE     , { " NO"                     , " YES"                  , ""   
 545:..\src/command_processing.c ****         {MENU_ON_OFF    , TRUE      , { " OFF"                    , " ON"                   , ""   
 546:..\src/command_processing.c ****        };
 547:..\src/command_processing.c ****     //------------------ END  OF MENU LIST --------------------//  
 548:..\src/command_processing.c ****         
 549:..\src/command_processing.c ****     uint8 NUM_MENUs = sizeof(MENU_LIST)/sizeof(menu_type);  
 2118              		.loc 1 549 0
 2119 0036 0323     		movs	r3, #3
 2120 0038 87F8BF31 		strb	r3, [r7, #447]
 550:..\src/command_processing.c ****     
 551:..\src/command_processing.c ****     struct parameter param_type;
 552:..\src/command_processing.c ****     
 553:..\src/command_processing.c ****     const struct parameter PARAM_LIST[]=
 554:..\src/command_processing.c ****     {
 555:..\src/command_processing.c ****     //  {VAR_P                                              , TYPES           , NUM_ITEMS , PARAM_S
 556:..\src/command_processing.c ****         {(uint8*)&(MEM_P->dev.id)                         , TYPE_UINT8      , 1         , "Device I
 2121              		.loc 1 556 0
 2122 003c D7F8C031 		ldr	r3, [r7, #448]
 2123 0040 03F11002 		add	r2, r3, #16
 553:..\src/command_processing.c ****     {
 2124              		.loc 1 553 0
 2125 0044 07F10C03 		add	r3, r7, #12
 2126 0048 1A60     		str	r2, [r3]
 2127 004a 07F10C03 		add	r3, r7, #12
 2128 004e 0222     		movs	r2, #2
 2129 0050 1A71     		strb	r2, [r3, #4]
 2130 0052 07F10C03 		add	r3, r7, #12
 2131 0056 0122     		movs	r2, #1
 2132 0058 5A71     		strb	r2, [r3, #5]
 2133 005a 07F10C03 		add	r3, r7, #12
 2134 005e DD4A     		ldr	r2, .L137+12
 2135 0060 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 64


 2136 0062 07F10C03 		add	r3, r7, #12
 2137 0066 0022     		movs	r2, #0
 2138 0068 1A73     		strb	r2, [r3, #12]
 2139 006a 07F10C03 		add	r3, r7, #12
 2140 006e 0022     		movs	r2, #0
 2141 0070 5A73     		strb	r2, [r3, #13]
 2142 0072 07F10C03 		add	r3, r7, #12
 2143 0076 0022     		movs	r2, #0
 2144 0078 9A73     		strb	r2, [r3, #14]
 557:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_threshold[0])             , TYPE_UINT16     , 2         , "EMG th
 2145              		.loc 1 557 0
 2146 007a D7F8C031 		ldr	r3, [r7, #448]
 2147 007e 03F13002 		add	r2, r3, #48
 553:..\src/command_processing.c ****     {
 2148              		.loc 1 553 0
 2149 0082 07F10C03 		add	r3, r7, #12
 2150 0086 1A61     		str	r2, [r3, #16]
 2151 0088 07F10C03 		add	r3, r7, #12
 2152 008c 0422     		movs	r2, #4
 2153 008e 1A75     		strb	r2, [r3, #20]
 2154 0090 07F10C03 		add	r3, r7, #12
 2155 0094 0222     		movs	r2, #2
 2156 0096 5A75     		strb	r2, [r3, #21]
 2157 0098 07F10C03 		add	r3, r7, #12
 2158 009c CE4A     		ldr	r2, .L137+16
 2159 009e 9A61     		str	r2, [r3, #24]
 2160 00a0 07F10C03 		add	r3, r7, #12
 2161 00a4 0022     		movs	r2, #0
 2162 00a6 1A77     		strb	r2, [r3, #28]
 2163 00a8 07F10C03 		add	r3, r7, #12
 2164 00ac 1E22     		movs	r2, #30
 2165 00ae 5A77     		strb	r2, [r3, #29]
 2166 00b0 07F10C03 		add	r3, r7, #12
 2167 00b4 0022     		movs	r2, #0
 2168 00b6 9A77     		strb	r2, [r3, #30]
 558:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_max_value[0])             , TYPE_UINT32     , 2         , "EMG ma
 2169              		.loc 1 558 0
 2170 00b8 D7F8C031 		ldr	r3, [r7, #448]
 2171 00bc 03F13402 		add	r2, r3, #52
 553:..\src/command_processing.c ****     {
 2172              		.loc 1 553 0
 2173 00c0 07F10C03 		add	r3, r7, #12
 2174 00c4 1A62     		str	r2, [r3, #32]
 2175 00c6 07F10C03 		add	r3, r7, #12
 2176 00ca 0622     		movs	r2, #6
 2177 00cc 83F82420 		strb	r2, [r3, #36]
 2178 00d0 07F10C03 		add	r3, r7, #12
 2179 00d4 0222     		movs	r2, #2
 2180 00d6 83F82520 		strb	r2, [r3, #37]
 2181 00da 07F10C03 		add	r3, r7, #12
 2182 00de BF4A     		ldr	r2, .L137+20
 2183 00e0 9A62     		str	r2, [r3, #40]
 2184 00e2 07F10C03 		add	r3, r7, #12
 2185 00e6 0022     		movs	r2, #0
 2186 00e8 83F82C20 		strb	r2, [r3, #44]
 2187 00ec 07F10C03 		add	r3, r7, #12
 2188 00f0 1E22     		movs	r2, #30
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 65


 2189 00f2 83F82D20 		strb	r2, [r3, #45]
 2190 00f6 07F10C03 		add	r3, r7, #12
 2191 00fa 0022     		movs	r2, #0
 2192 00fc 83F82E20 		strb	r2, [r3, #46]
 559:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.emg_speed[0])                 , TYPE_UINT8      , 2         , "EMG ma
 2193              		.loc 1 559 0
 2194 0100 D7F8C031 		ldr	r3, [r7, #448]
 2195 0104 03F13C02 		add	r2, r3, #60
 553:..\src/command_processing.c ****     {
 2196              		.loc 1 553 0
 2197 0108 07F10C03 		add	r3, r7, #12
 2198 010c 1A63     		str	r2, [r3, #48]
 2199 010e 07F10C03 		add	r3, r7, #12
 2200 0112 0222     		movs	r2, #2
 2201 0114 83F83420 		strb	r2, [r3, #52]
 2202 0118 07F10C03 		add	r3, r7, #12
 2203 011c 0222     		movs	r2, #2
 2204 011e 83F83520 		strb	r2, [r3, #53]
 2205 0122 07F10C03 		add	r3, r7, #12
 2206 0126 AE4A     		ldr	r2, .L137+24
 2207 0128 9A63     		str	r2, [r3, #56]
 2208 012a 07F10C03 		add	r3, r7, #12
 2209 012e 0022     		movs	r2, #0
 2210 0130 83F83C20 		strb	r2, [r3, #60]
 2211 0134 07F10C03 		add	r3, r7, #12
 2212 0138 1E22     		movs	r2, #30
 2213 013a 83F83D20 		strb	r2, [r3, #61]
 2214 013e 07F10C03 		add	r3, r7, #12
 2215 0142 0022     		movs	r2, #0
 2216 0144 83F83E20 		strb	r2, [r3, #62]
 560:..\src/command_processing.c ****         {(uint8*)&(MEM_P->emg.switch_emg)                   , TYPE_FLAG       , 1         , "EMG in
 2217              		.loc 1 560 0
 2218 0148 D7F8C031 		ldr	r3, [r7, #448]
 2219 014c 03F13E02 		add	r2, r3, #62
 553:..\src/command_processing.c ****     {
 2220              		.loc 1 553 0
 2221 0150 07F10C03 		add	r3, r7, #12
 2222 0154 1A64     		str	r2, [r3, #64]
 2223 0156 07F10C03 		add	r3, r7, #12
 2224 015a 0022     		movs	r2, #0
 2225 015c 83F84420 		strb	r2, [r3, #68]
 2226 0160 07F10C03 		add	r3, r7, #12
 2227 0164 0122     		movs	r2, #1
 2228 0166 83F84520 		strb	r2, [r3, #69]
 2229 016a 07F10C03 		add	r3, r7, #12
 2230 016e 9D4A     		ldr	r2, .L137+28
 2231 0170 9A64     		str	r2, [r3, #72]
 2232 0172 07F10C03 		add	r3, r7, #12
 2233 0176 0322     		movs	r2, #3
 2234 0178 83F84C20 		strb	r2, [r3, #76]
 2235 017c 07F10C03 		add	r3, r7, #12
 2236 0180 1E22     		movs	r2, #30
 2237 0182 83F84D20 		strb	r2, [r3, #77]
 2238 0186 07F10C03 		add	r3, r7, #12
 2239 018a 0022     		movs	r2, #0
 2240 018c 83F84E20 		strb	r2, [r3, #78]
 561:..\src/command_processing.c ****         {(uint8*)&(MEM_P->MS.master_mode_active)            , TYPE_FLAG       , 1         , "Master
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 66


 2241              		.loc 1 561 0
 2242 0190 D7F8C031 		ldr	r3, [r7, #448]
 2243 0194 03F14002 		add	r2, r3, #64
 553:..\src/command_processing.c ****     {
 2244              		.loc 1 553 0
 2245 0198 07F10C03 		add	r3, r7, #12
 2246 019c 1A65     		str	r2, [r3, #80]
 2247 019e 07F10C03 		add	r3, r7, #12
 2248 01a2 0022     		movs	r2, #0
 2249 01a4 83F85420 		strb	r2, [r3, #84]
 2250 01a8 07F10C03 		add	r3, r7, #12
 2251 01ac 0122     		movs	r2, #1
 2252 01ae 83F85520 		strb	r2, [r3, #85]
 2253 01b2 07F10C03 		add	r3, r7, #12
 2254 01b6 8C4A     		ldr	r2, .L137+32
 2255 01b8 9A65     		str	r2, [r3, #88]
 2256 01ba 07F10C03 		add	r3, r7, #12
 2257 01be 0522     		movs	r2, #5
 2258 01c0 83F85C20 		strb	r2, [r3, #92]
 2259 01c4 07F10C03 		add	r3, r7, #12
 2260 01c8 5022     		movs	r2, #80
 2261 01ca 83F85D20 		strb	r2, [r3, #93]
 2262 01ce 07F10C03 		add	r3, r7, #12
 2263 01d2 0022     		movs	r2, #0
 2264 01d4 83F85E20 		strb	r2, [r3, #94]
 562:..\src/command_processing.c ****         {(uint8*)&(MEM_P->MS.slave_ID)                      , TYPE_UINT8      , 1         , "Slave 
 2265              		.loc 1 562 0
 2266 01d8 D7F8C031 		ldr	r3, [r7, #448]
 2267 01dc 03F14102 		add	r2, r3, #65
 553:..\src/command_processing.c ****     {
 2268              		.loc 1 553 0
 2269 01e0 07F10C03 		add	r3, r7, #12
 2270 01e4 1A66     		str	r2, [r3, #96]
 2271 01e6 07F10C03 		add	r3, r7, #12
 2272 01ea 0222     		movs	r2, #2
 2273 01ec 83F86420 		strb	r2, [r3, #100]
 2274 01f0 07F10C03 		add	r3, r7, #12
 2275 01f4 0122     		movs	r2, #1
 2276 01f6 83F86520 		strb	r2, [r3, #101]
 2277 01fa 07F10C03 		add	r3, r7, #12
 2278 01fe 7B4A     		ldr	r2, .L137+36
 2279 0200 9A66     		str	r2, [r3, #104]
 2280 0202 07F10C03 		add	r3, r7, #12
 2281 0206 0022     		movs	r2, #0
 2282 0208 83F86C20 		strb	r2, [r3, #108]
 2283 020c 07F10C03 		add	r3, r7, #12
 2284 0210 5022     		movs	r2, #80
 2285 0212 83F86D20 		strb	r2, [r3, #109]
 2286 0216 07F10C03 		add	r3, r7, #12
 2287 021a 0022     		movs	r2, #0
 2288 021c 83F86E20 		strb	r2, [r3, #110]
 563:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.res)                    , TYPE_UINT8      , 1         , "Slave 
 2289              		.loc 1 563 0
 2290 0220 D7F8C031 		ldr	r3, [r7, #448]
 2291 0224 03F12902 		add	r2, r3, #41
 553:..\src/command_processing.c ****     {
 2292              		.loc 1 553 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 67


 2293 0228 07F10C03 		add	r3, r7, #12
 2294 022c 1A67     		str	r2, [r3, #112]
 2295 022e 07F10C03 		add	r3, r7, #12
 2296 0232 0222     		movs	r2, #2
 2297 0234 83F87420 		strb	r2, [r3, #116]
 2298 0238 07F10C03 		add	r3, r7, #12
 2299 023c 0122     		movs	r2, #1
 2300 023e 83F87520 		strb	r2, [r3, #117]
 2301 0242 07F10C03 		add	r3, r7, #12
 2302 0246 6A4A     		ldr	r2, .L137+40
 2303 0248 9A67     		str	r2, [r3, #120]
 2304 024a 07F10C03 		add	r3, r7, #12
 2305 024e 0022     		movs	r2, #0
 2306 0250 83F87C20 		strb	r2, [r3, #124]
 2307 0254 07F10C03 		add	r3, r7, #12
 2308 0258 5022     		movs	r2, #80
 2309 025a 83F87D20 		strb	r2, [r3, #125]
 2310 025e 07F10C03 		add	r3, r7, #12
 2311 0262 0022     		movs	r2, #0
 2312 0264 83F87E20 		strb	r2, [r3, #126]
 564:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.input_mode)             , TYPE_FLAG       , 1         , "Input 
 2313              		.loc 1 564 0
 2314 0268 D7F8C031 		ldr	r3, [r7, #448]
 2315 026c 03F12802 		add	r2, r3, #40
 553:..\src/command_processing.c ****     {
 2316              		.loc 1 553 0
 2317 0270 07F10C03 		add	r3, r7, #12
 2318 0274 C3F88020 		str	r2, [r3, #128]
 2319 0278 07F10C03 		add	r3, r7, #12
 2320 027c 0022     		movs	r2, #0
 2321 027e 83F88420 		strb	r2, [r3, #132]
 2322 0282 07F10C03 		add	r3, r7, #12
 2323 0286 0122     		movs	r2, #1
 2324 0288 83F88520 		strb	r2, [r3, #133]
 2325 028c 07F10C03 		add	r3, r7, #12
 2326 0290 584A     		ldr	r2, .L137+44
 2327 0292 C3F88820 		str	r2, [r3, #136]
 2328 0296 07F10C03 		add	r3, r7, #12
 2329 029a 0122     		movs	r2, #1
 2330 029c 83F88C20 		strb	r2, [r3, #140]
 2331 02a0 07F10C03 		add	r3, r7, #12
 2332 02a4 5022     		movs	r2, #80
 2333 02a6 83F88D20 		strb	r2, [r3, #141]
 2334 02aa 07F10C03 		add	r3, r7, #12
 2335 02ae 0322     		movs	r2, #3
 2336 02b0 83F88E20 		strb	r2, [r3, #142]
 565:..\src/command_processing.c ****         {(uint8*)&(MEM_P->SH_config.pos_lim_inf)            , TYPE_INT32      , 2         , "Pos. l
 2337              		.loc 1 565 0
 2338 02b4 D7F8C031 		ldr	r3, [r7, #448]
 2339 02b8 03F12002 		add	r2, r3, #32
 553:..\src/command_processing.c ****     {
 2340              		.loc 1 553 0
 2341 02bc 07F10C03 		add	r3, r7, #12
 2342 02c0 C3F89020 		str	r2, [r3, #144]
 2343 02c4 07F10C03 		add	r3, r7, #12
 2344 02c8 0522     		movs	r2, #5
 2345 02ca 83F89420 		strb	r2, [r3, #148]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 68


 2346 02ce 07F10C03 		add	r3, r7, #12
 2347 02d2 0222     		movs	r2, #2
 2348 02d4 83F89520 		strb	r2, [r3, #149]
 2349 02d8 07F10C03 		add	r3, r7, #12
 2350 02dc 464A     		ldr	r2, .L137+48
 2351 02de C3F89820 		str	r2, [r3, #152]
 2352 02e2 07F10C03 		add	r3, r7, #12
 2353 02e6 0022     		movs	r2, #0
 2354 02e8 83F89C20 		strb	r2, [r3, #156]
 2355 02ec 07F10C03 		add	r3, r7, #12
 2356 02f0 5022     		movs	r2, #80
 2357 02f2 83F89D20 		strb	r2, [r3, #157]
 2358 02f6 07F10C03 		add	r3, r7, #12
 2359 02fa 0522     		movs	r2, #5
 2360 02fc 83F89E20 		strb	r2, [r3, #158]
 566:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.vibrotactile_feedback_active)  , TYPE_FLAG       , 1         , "Vibrot
 2361              		.loc 1 566 0
 2362 0300 D7F8C031 		ldr	r3, [r7, #448]
 2363 0304 03F15C02 		add	r2, r3, #92
 553:..\src/command_processing.c ****     {
 2364              		.loc 1 553 0
 2365 0308 07F10C03 		add	r3, r7, #12
 2366 030c C3F8A020 		str	r2, [r3, #160]
 2367 0310 07F10C03 		add	r3, r7, #12
 2368 0314 0022     		movs	r2, #0
 2369 0316 83F8A420 		strb	r2, [r3, #164]
 2370 031a 07F10C03 		add	r3, r7, #12
 2371 031e 0122     		movs	r2, #1
 2372 0320 83F8A520 		strb	r2, [r3, #165]
 2373 0324 07F10C03 		add	r3, r7, #12
 2374 0328 344A     		ldr	r2, .L137+52
 2375 032a C3F8A820 		str	r2, [r3, #168]
 2376 032e 07F10C03 		add	r3, r7, #12
 2377 0332 0522     		movs	r2, #5
 2378 0334 83F8AC20 		strb	r2, [r3, #172]
 2379 0338 07F10C03 		add	r3, r7, #12
 2380 033c 5022     		movs	r2, #80
 2381 033e 83F8AD20 		strb	r2, [r3, #173]
 2382 0342 07F10C03 		add	r3, r7, #12
 2383 0346 0022     		movs	r2, #0
 2384 0348 83F8AE20 		strb	r2, [r3, #174]
 567:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.airchamber_feedback_active)    , TYPE_FLAG       , 1         , "Air Ch
 2385              		.loc 1 567 0
 2386 034c D7F8C031 		ldr	r3, [r7, #448]
 2387 0350 03F15D02 		add	r2, r3, #93
 553:..\src/command_processing.c ****     {
 2388              		.loc 1 553 0
 2389 0354 07F10C03 		add	r3, r7, #12
 2390 0358 C3F8B020 		str	r2, [r3, #176]
 2391 035c 07F10C03 		add	r3, r7, #12
 2392 0360 0022     		movs	r2, #0
 2393 0362 83F8B420 		strb	r2, [r3, #180]
 2394 0366 07F10C03 		add	r3, r7, #12
 2395 036a 0122     		movs	r2, #1
 2396 036c 83F8B520 		strb	r2, [r3, #181]
 2397 0370 07F10C03 		add	r3, r7, #12
 2398 0374 224A     		ldr	r2, .L137+56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 69


 2399 0376 C3F8B820 		str	r2, [r3, #184]
 2400 037a 07F10C03 		add	r3, r7, #12
 2401 037e 0522     		movs	r2, #5
 2402 0380 83F8BC20 		strb	r2, [r3, #188]
 2403 0384 07F10C03 		add	r3, r7, #12
 2404 0388 5022     		movs	r2, #80
 2405 038a 83F8BD20 		strb	r2, [r3, #189]
 2406 038e 07F10C03 		add	r3, r7, #12
 2407 0392 0022     		movs	r2, #0
 2408 0394 83F8BE20 		strb	r2, [r3, #190]
 568:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.max_residual_current)          , TYPE_INT32      , 1         , "Maximu
 2409              		.loc 1 568 0
 2410 0398 D7F8C031 		ldr	r3, [r7, #448]
 2411 039c 03F15002 		add	r2, r3, #80
 553:..\src/command_processing.c ****     {
 2412              		.loc 1 553 0
 2413 03a0 07F10C03 		add	r3, r7, #12
 2414 03a4 C3F8C020 		str	r2, [r3, #192]
 2415 03a8 07F10C03 		add	r3, r7, #12
 2416 03ac 0522     		movs	r2, #5
 2417 03ae 83F8C420 		strb	r2, [r3, #196]
 2418 03b2 07F10C03 		add	r3, r7, #12
 2419 03b6 0122     		movs	r2, #1
 2420 03b8 83F8C520 		strb	r2, [r3, #197]
 2421 03bc 07F10C03 		add	r3, r7, #12
 2422 03c0 104A     		ldr	r2, .L137+60
 2423 03c2 C3F8C820 		str	r2, [r3, #200]
 2424 03c6 1FE0     		b	.L138
 2425              	.L139:
 2426              		.align	2
 2427              	.L137:
 2428 03c8 00000000 		.word	c_mem
 2429 03cc 00000000 		.word	g_mem
 2430 03d0 F4010000 		.word	.LC18
 2431 03d4 2C000000 		.word	.LC19
 2432 03d8 38000000 		.word	.LC20
 2433 03dc 48000000 		.word	.LC21
 2434 03e0 58000000 		.word	.LC22
 2435 03e4 68000000 		.word	.LC23
 2436 03e8 78000000 		.word	.LC24
 2437 03ec 88000000 		.word	.LC25
 2438 03f0 94000000 		.word	.LC26
 2439 03f4 A8000000 		.word	.LC27
 2440 03f8 B4000000 		.word	.LC28
 2441 03fc CC000000 		.word	.LC29
 2442 0400 E4000000 		.word	.LC30
 2443 0404 FC000000 		.word	.LC31
 2444              	.L138:
 2445 0408 07F10C03 		add	r3, r7, #12
 2446 040c 0022     		movs	r2, #0
 2447 040e 83F8CC20 		strb	r2, [r3, #204]
 2448 0412 07F10C03 		add	r3, r7, #12
 2449 0416 5022     		movs	r2, #80
 2450 0418 83F8CD20 		strb	r2, [r3, #205]
 2451 041c 07F10C03 		add	r3, r7, #12
 2452 0420 0022     		movs	r2, #0
 2453 0422 83F8CE20 		strb	r2, [r3, #206]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 70


 569:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.maximum_pressure_kPa)          , TYPE_FLOAT      , 1         , "Maximu
 2454              		.loc 1 569 0
 2455 0426 D7F8C031 		ldr	r3, [r7, #448]
 2456 042a 03F15402 		add	r2, r3, #84
 553:..\src/command_processing.c ****     {
 2457              		.loc 1 553 0
 2458 042e 07F10C03 		add	r3, r7, #12
 2459 0432 C3F8D020 		str	r2, [r3, #208]
 2460 0436 07F10C03 		add	r3, r7, #12
 2461 043a 0722     		movs	r2, #7
 2462 043c 83F8D420 		strb	r2, [r3, #212]
 2463 0440 07F10C03 		add	r3, r7, #12
 2464 0444 0122     		movs	r2, #1
 2465 0446 83F8D520 		strb	r2, [r3, #213]
 2466 044a 07F10C03 		add	r3, r7, #12
 2467 044e 894A     		ldr	r2, .L140
 2468 0450 C3F8D820 		str	r2, [r3, #216]
 2469 0454 07F10C03 		add	r3, r7, #12
 2470 0458 0022     		movs	r2, #0
 2471 045a 83F8DC20 		strb	r2, [r3, #220]
 2472 045e 07F10C03 		add	r3, r7, #12
 2473 0462 5022     		movs	r2, #80
 2474 0464 83F8DD20 		strb	r2, [r3, #221]
 2475 0468 07F10C03 		add	r3, r7, #12
 2476 046c 0022     		movs	r2, #0
 2477 046e 83F8DE20 		strb	r2, [r3, #222]
 570:..\src/command_processing.c ****         {(uint8*)&(MEM_P->FB.prop_err_fb_gain)              , TYPE_FLOAT      , 1         , "Propor
 2478              		.loc 1 570 0
 2479 0472 D7F8C031 		ldr	r3, [r7, #448]
 2480 0476 03F15802 		add	r2, r3, #88
 553:..\src/command_processing.c ****     {
 2481              		.loc 1 553 0
 2482 047a 07F10C03 		add	r3, r7, #12
 2483 047e C3F8E020 		str	r2, [r3, #224]
 2484 0482 07F10C03 		add	r3, r7, #12
 2485 0486 0722     		movs	r2, #7
 2486 0488 83F8E420 		strb	r2, [r3, #228]
 2487 048c 07F10C03 		add	r3, r7, #12
 2488 0490 0122     		movs	r2, #1
 2489 0492 83F8E520 		strb	r2, [r3, #229]
 2490 0496 07F10C03 		add	r3, r7, #12
 2491 049a 774A     		ldr	r2, .L140+4
 2492 049c C3F8E820 		str	r2, [r3, #232]
 2493 04a0 07F10C03 		add	r3, r7, #12
 2494 04a4 0022     		movs	r2, #0
 2495 04a6 83F8EC20 		strb	r2, [r3, #236]
 2496 04aa 07F10C03 		add	r3, r7, #12
 2497 04ae 5022     		movs	r2, #80
 2498 04b0 83F8ED20 		strb	r2, [r3, #237]
 2499 04b4 07F10C03 		add	r3, r7, #12
 2500 04b8 0022     		movs	r2, #0
 2501 04ba 83F8EE20 		strb	r2, [r3, #238]
 571:..\src/command_processing.c ****     };
 572:..\src/command_processing.c ****     uint8 NUM_PARAMs = sizeof(PARAM_LIST)/sizeof(param_type);    
 2502              		.loc 1 572 0
 2503 04be 0F23     		movs	r3, #15
 2504 04c0 87F8BE31 		strb	r3, [r7, #446]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 71


 573:..\src/command_processing.c **** 
 574:..\src/command_processing.c ****     if (!index) {
 2505              		.loc 1 574 0
 2506 04c4 BB1D     		adds	r3, r7, #6
 2507 04c6 1B88     		ldrh	r3, [r3]
 2508 04c8 002B     		cmp	r3, #0
 2509 04ca 0ED1     		bne	.L124
 575:..\src/command_processing.c ****         // Get parameters list with relative types
 576:..\src/command_processing.c ****         get_param_list(NUM_PARAMs, NUM_MENUs, PARAM_LIST, MENU_LIST, sendToDevice);
 2510              		.loc 1 576 0
 2511 04cc 07F58674 		add	r4, r7, #268
 2512 04d0 07F10C02 		add	r2, r7, #12
 2513 04d4 97F8BF11 		ldrb	r1, [r7, #447]	@ zero_extendqisi2
 2514 04d8 97F8BE01 		ldrb	r0, [r7, #446]	@ zero_extendqisi2
 2515 04dc 7B1D     		adds	r3, r7, #5
 2516 04de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2517 04e0 0093     		str	r3, [sp]
 2518 04e2 2346     		mov	r3, r4
 2519 04e4 FFF7FEFF 		bl	get_param_list
 577:..\src/command_processing.c ****     }
 578:..\src/command_processing.c ****     else {
 579:..\src/command_processing.c ****          // Set specific parameter        
 580:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
 581:..\src/command_processing.c ****         
 582:..\src/command_processing.c ****         // Find size of data
 583:..\src/command_processing.c ****         uint8 sod = num_of_bytes(PARAM_LIST[PARAM_IDX].TYPES);
 584:..\src/command_processing.c ****    
 585:..\src/command_processing.c ****         if (PARAM_LIST[PARAM_IDX].custom == 0) {
 586:..\src/command_processing.c ****             // Use default specifications for param setting
 587:..\src/command_processing.c ****             for (i = 0; i < PARAM_LIST[PARAM_IDX].NUM_ITEMS * sod; i += sod){
 588:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 589:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 590:..\src/command_processing.c ****                 }
 591:..\src/command_processing.c ****             } 
 592:..\src/command_processing.c ****             if( PARAM_LIST[PARAM_IDX].TYPES == TYPE_STRING)                   
 593:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 594:..\src/command_processing.c ****         }
 595:..\src/command_processing.c ****         
 596:..\src/command_processing.c ****         else {  
 597:..\src/command_processing.c ****             // Use custom specifications for param setting
 598:..\src/command_processing.c ****             set_custom_param(PARAM_IDX, PARAM_LIST);
 599:..\src/command_processing.c ****         }
 600:..\src/command_processing.c ****         
 601:..\src/command_processing.c ****         
 602:..\src/command_processing.c ****         // Perform chip reset if needed
 603:..\src/command_processing.c ****         for (i=0; i< NUM_MENUs;i++){
 604:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 605:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 606:..\src/command_processing.c ****             }   
 607:..\src/command_processing.c ****         }
 608:..\src/command_processing.c ****     }
 609:..\src/command_processing.c **** } 
 2520              		.loc 1 609 0
 2521 04e8 BEE0     		b	.L136
 2522              	.L124:
 2523              	.LBB24:
 580:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 72


 2524              		.loc 1 580 0
 2525 04ea BB1D     		adds	r3, r7, #6
 2526 04ec 1B88     		ldrh	r3, [r3]	@ movhi
 2527 04ee DBB2     		uxtb	r3, r3
 2528 04f0 013B     		subs	r3, r3, #1
 2529 04f2 87F8BD31 		strb	r3, [r7, #445]
 583:..\src/command_processing.c ****    
 2530              		.loc 1 583 0
 2531 04f6 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2532 04fa 07F10C02 		add	r2, r7, #12
 2533 04fe 1B01     		lsls	r3, r3, #4
 2534 0500 1344     		add	r3, r3, r2
 2535 0502 0433     		adds	r3, r3, #4
 2536 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2537 0506 1846     		mov	r0, r3
 2538 0508 FFF7FEFF 		bl	num_of_bytes
 2539 050c 0346     		mov	r3, r0
 2540 050e 87F8BC31 		strb	r3, [r7, #444]
 585:..\src/command_processing.c ****             // Use default specifications for param setting
 2541              		.loc 1 585 0
 2542 0512 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2543 0516 07F10C02 		add	r2, r7, #12
 2544 051a 1B01     		lsls	r3, r3, #4
 2545 051c 1344     		add	r3, r3, r2
 2546 051e 0E33     		adds	r3, r3, #14
 2547 0520 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2548 0522 002B     		cmp	r3, #0
 2549 0524 5BD1     		bne	.L126
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2550              		.loc 1 587 0
 2551 0526 0023     		movs	r3, #0
 2552 0528 87F8C731 		strb	r3, [r7, #455]
 2553 052c 2FE0     		b	.L127
 2554              	.L130:
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2555              		.loc 1 588 0
 2556 052e 0023     		movs	r3, #0
 2557 0530 87F8C631 		strb	r3, [r7, #454]
 2558 0534 1EE0     		b	.L128
 2559              	.L129:
 589:..\src/command_processing.c ****                 }
 2560              		.loc 1 589 0 discriminator 3
 2561 0536 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2562 053a 07F10C02 		add	r2, r7, #12
 2563 053e 1B01     		lsls	r3, r3, #4
 2564 0540 1344     		add	r3, r3, r2
 2565 0542 1A68     		ldr	r2, [r3]
 2566 0544 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2567 0548 97F8BC01 		ldrb	r0, [r7, #444]	@ zero_extendqisi2
 2568 054c 97F8C611 		ldrb	r1, [r7, #454]	@ zero_extendqisi2
 2569 0550 411A     		subs	r1, r0, r1
 2570 0552 0B44     		add	r3, r3, r1
 2571 0554 013B     		subs	r3, r3, #1
 2572 0556 1344     		add	r3, r3, r2
 2573 0558 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2574 055c D11C     		adds	r1, r2, #3
 2575 055e 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 73


 2576 0562 0A44     		add	r2, r2, r1
 2577 0564 4549     		ldr	r1, .L140+8
 2578 0566 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2579 0568 1A70     		strb	r2, [r3]
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2580              		.loc 1 588 0 discriminator 3
 2581 056a 97F8C631 		ldrb	r3, [r7, #454]	@ zero_extendqisi2
 2582 056e 0133     		adds	r3, r3, #1
 2583 0570 87F8C631 		strb	r3, [r7, #454]
 2584              	.L128:
 588:..\src/command_processing.c ****                     ((char*)(PARAM_LIST[PARAM_IDX].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2585              		.loc 1 588 0 is_stmt 0 discriminator 1
 2586 0574 97F8C621 		ldrb	r2, [r7, #454]	@ zero_extendqisi2
 2587 0578 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2588 057c 9A42     		cmp	r2, r3
 2589 057e DAD3     		bcc	.L129
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2590              		.loc 1 587 0 is_stmt 1 discriminator 2
 2591 0580 97F8C721 		ldrb	r2, [r7, #455]
 2592 0584 97F8BC31 		ldrb	r3, [r7, #444]
 2593 0588 1344     		add	r3, r3, r2
 2594 058a 87F8C731 		strb	r3, [r7, #455]
 2595              	.L127:
 587:..\src/command_processing.c ****                 for(j = 0; j < sod; j++) {
 2596              		.loc 1 587 0 is_stmt 0 discriminator 1
 2597 058e 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2598 0592 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2599 0596 07F10C01 		add	r1, r7, #12
 2600 059a 1B01     		lsls	r3, r3, #4
 2601 059c 0B44     		add	r3, r3, r1
 2602 059e 0533     		adds	r3, r3, #5
 2603 05a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2604 05a2 1946     		mov	r1, r3
 2605 05a4 97F8BC31 		ldrb	r3, [r7, #444]	@ zero_extendqisi2
 2606 05a8 03FB01F3 		mul	r3, r3, r1
 2607 05ac 9A42     		cmp	r2, r3
 2608 05ae BEDB     		blt	.L130
 592:..\src/command_processing.c ****                *(PARAM_LIST[PARAM_IDX].VAR_P + i) = '\0';        
 2609              		.loc 1 592 0 is_stmt 1
 2610 05b0 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2611 05b4 07F10C02 		add	r2, r7, #12
 2612 05b8 1B01     		lsls	r3, r3, #4
 2613 05ba 1344     		add	r3, r3, r2
 2614 05bc 0433     		adds	r3, r3, #4
 2615 05be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2616 05c0 092B     		cmp	r3, #9
 2617 05c2 15D1     		bne	.L132
 593:..\src/command_processing.c ****         }
 2618              		.loc 1 593 0
 2619 05c4 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2620 05c8 07F10C02 		add	r2, r7, #12
 2621 05cc 1B01     		lsls	r3, r3, #4
 2622 05ce 1344     		add	r3, r3, r2
 2623 05d0 1A68     		ldr	r2, [r3]
 2624 05d2 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2625 05d6 1344     		add	r3, r3, r2
 2626 05d8 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 74


 2627 05da 1A70     		strb	r2, [r3]
 2628 05dc 08E0     		b	.L132
 2629              	.L126:
 598:..\src/command_processing.c ****         }
 2630              		.loc 1 598 0
 2631 05de 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2632 05e2 9BB2     		uxth	r3, r3
 2633 05e4 07F10C02 		add	r2, r7, #12
 2634 05e8 1146     		mov	r1, r2
 2635 05ea 1846     		mov	r0, r3
 2636 05ec FFF7FEFF 		bl	set_custom_param
 2637              	.L132:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2638              		.loc 1 603 0
 2639 05f0 0023     		movs	r3, #0
 2640 05f2 87F8C731 		strb	r3, [r7, #455]
 2641 05f6 31E0     		b	.L133
 2642              	.L135:
 604:..\src/command_processing.c ****              reset_PSoC_flag = TRUE;
 2643              		.loc 1 604 0
 2644 05f8 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2645 05fc 2C22     		movs	r2, #44
 2646 05fe 02FB03F3 		mul	r3, r2, r3
 2647 0602 07F5E472 		add	r2, r7, #456
 2648 0606 1344     		add	r3, r3, r2
 2649 0608 BC3B     		subs	r3, r3, #188
 2650 060a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2651 060c 97F8BD31 		ldrb	r3, [r7, #445]	@ zero_extendqisi2
 2652 0610 07F10C01 		add	r1, r7, #12
 2653 0614 1B01     		lsls	r3, r3, #4
 2654 0616 0B44     		add	r3, r3, r1
 2655 0618 0C33     		adds	r3, r3, #12
 2656 061a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2657 061c 9A42     		cmp	r2, r3
 2658 061e 0CBF     		ite	eq
 2659 0620 0123     		moveq	r3, #1
 2660 0622 0023     		movne	r3, #0
 2661 0624 DAB2     		uxtb	r2, r3
 2662 0626 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2663 062a 2C21     		movs	r1, #44
 2664 062c 01FB03F3 		mul	r3, r1, r3
 2665 0630 07F5E471 		add	r1, r7, #456
 2666 0634 0B44     		add	r3, r3, r1
 2667 0636 BB3B     		subs	r3, r3, #187
 2668 0638 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2669 063a 012B     		cmp	r3, #1
 2670 063c 0CBF     		ite	eq
 2671 063e 0123     		moveq	r3, #1
 2672 0640 0023     		movne	r3, #0
 2673 0642 DBB2     		uxtb	r3, r3
 2674 0644 1340     		ands	r3, r3, r2
 2675 0646 DBB2     		uxtb	r3, r3
 2676 0648 002B     		cmp	r3, #0
 2677 064a 02D0     		beq	.L134
 605:..\src/command_processing.c ****             }   
 2678              		.loc 1 605 0
 2679 064c 0C4B     		ldr	r3, .L140+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 75


 2680 064e 0122     		movs	r2, #1
 2681 0650 1A70     		strb	r2, [r3]
 2682              	.L134:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2683              		.loc 1 603 0 discriminator 2
 2684 0652 97F8C731 		ldrb	r3, [r7, #455]	@ zero_extendqisi2
 2685 0656 0133     		adds	r3, r3, #1
 2686 0658 87F8C731 		strb	r3, [r7, #455]
 2687              	.L133:
 603:..\src/command_processing.c ****             if ((MENU_LIST[i].name == PARAM_LIST[PARAM_IDX].MENU) & (MENU_LIST[i].reset == TRUE)){
 2688              		.loc 1 603 0 is_stmt 0 discriminator 1
 2689 065c 97F8C721 		ldrb	r2, [r7, #455]	@ zero_extendqisi2
 2690 0660 97F8BF31 		ldrb	r3, [r7, #447]	@ zero_extendqisi2
 2691 0664 9A42     		cmp	r2, r3
 2692 0666 C7D3     		bcc	.L135
 2693              	.L136:
 2694              	.LBE24:
 2695              		.loc 1 609 0 is_stmt 1
 2696 0668 00BF     		nop
 2697 066a 07F5E677 		add	r7, r7, #460
 2698              		.cfi_def_cfa_offset 12
 2699 066e BD46     		mov	sp, r7
 2700              		.cfi_def_cfa_register 13
 2701              		@ sp needed
 2702 0670 90BD     		pop	{r4, r7, pc}
 2703              	.L141:
 2704 0672 00BF     		.align	2
 2705              	.L140:
 2706 0674 1C010000 		.word	.LC32
 2707 0678 40010000 		.word	.LC33
 2708 067c 00000000 		.word	g_rx
 2709 0680 00000000 		.word	reset_PSoC_flag
 2710              		.cfi_endproc
 2711              	.LFE69:
 2712              		.size	manage_param_list, .-manage_param_list
 2713              		.section	.text.set_custom_param,"ax",%progbits
 2714              		.align	2
 2715              		.global	set_custom_param
 2716              		.thumb
 2717              		.thumb_func
 2718              		.type	set_custom_param, %function
 2719              	set_custom_param:
 2720              	.LFB70:
 610:..\src/command_processing.c **** 
 611:..\src/command_processing.c **** 
 612:..\src/command_processing.c **** //==============================================================================
 613:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
 614:..\src/command_processing.c **** //==============================================================================
 615:..\src/command_processing.c **** 
 616:..\src/command_processing.c **** void set_custom_param(uint16 index, const struct parameter PARAM_LIST[]) {
 2721              		.loc 1 616 0
 2722              		.cfi_startproc
 2723              		@ args = 0, pretend = 0, frame = 16
 2724              		@ frame_needed = 1, uses_anonymous_args = 0
 2725 0000 80B5     		push	{r7, lr}
 2726              		.cfi_def_cfa_offset 8
 2727              		.cfi_offset 7, -8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 76


 2728              		.cfi_offset 14, -4
 2729 0002 84B0     		sub	sp, sp, #16
 2730              		.cfi_def_cfa_offset 24
 2731 0004 00AF     		add	r7, sp, #0
 2732              		.cfi_def_cfa_register 7
 2733 0006 0346     		mov	r3, r0
 2734 0008 3960     		str	r1, [r7]
 2735 000a FB80     		strh	r3, [r7, #6]	@ movhi
 617:..\src/command_processing.c ****     uint8 sod =   num_of_bytes(PARAM_LIST[index].TYPES);
 2736              		.loc 1 617 0
 2737 000c FB88     		ldrh	r3, [r7, #6]
 2738 000e 1B01     		lsls	r3, r3, #4
 2739 0010 3A68     		ldr	r2, [r7]
 2740 0012 1344     		add	r3, r3, r2
 2741 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2742 0016 1846     		mov	r0, r3
 2743 0018 FFF7FEFF 		bl	num_of_bytes
 2744 001c 0346     		mov	r3, r0
 2745 001e 7B73     		strb	r3, [r7, #13]
 618:..\src/command_processing.c **** 
 619:..\src/command_processing.c ****     uint8 CYDATA i, j;
 620:..\src/command_processing.c ****         
 621:..\src/command_processing.c ****     switch(PARAM_LIST[index].custom){
 2746              		.loc 1 621 0
 2747 0020 FB88     		ldrh	r3, [r7, #6]
 2748 0022 1B01     		lsls	r3, r3, #4
 2749 0024 3A68     		ldr	r2, [r7]
 2750 0026 1344     		add	r3, r3, r2
 2751 0028 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2752 002a 032B     		cmp	r3, #3
 2753 002c 02D0     		beq	.L144
 2754 002e 052B     		cmp	r3, #5
 2755 0030 06D0     		beq	.L145
 2756 0032 36E0     		b	.L152
 2757              	.L144:
 622:..\src/command_processing.c ****         
 623:..\src/command_processing.c ****             
 624:..\src/command_processing.c ****         case CUSTOM_INPUT:         //Input mode
 625:..\src/command_processing.c ****             g_mem.SH_config.input_mode = g_rx.buffer[3];            //In this specific FW, input mo
 2758              		.loc 1 625 0
 2759 0034 3D4B     		ldr	r3, .L154
 2760 0036 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2761 0038 3D4B     		ldr	r3, .L154+4
 2762 003a 83F82820 		strb	r2, [r3, #40]
 626:..\src/command_processing.c ****             break;   
 2763              		.loc 1 626 0
 2764 003e 71E0     		b	.L146
 2765              	.L145:
 627:..\src/command_processing.c **** 
 628:..\src/command_processing.c ****         
 629:..\src/command_processing.c ****         case CUSTOM_POS_LIM:        //Position limits
 630:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.bu
 2766              		.loc 1 630 0
 2767 0040 3A4B     		ldr	r3, .L154
 2768 0042 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2769 0044 1A06     		lsls	r2, r3, #24
 2770 0046 394B     		ldr	r3, .L154
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 77


 2771 0048 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2772 004a 1B04     		lsls	r3, r3, #16
 2773 004c 1A43     		orrs	r2, r2, r3
 2774 004e 374B     		ldr	r3, .L154
 2775 0050 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2776 0052 1B02     		lsls	r3, r3, #8
 2777 0054 1343     		orrs	r3, r3, r2
 2778 0056 354A     		ldr	r2, .L154
 2779 0058 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2780 005a 1343     		orrs	r3, r3, r2
 2781 005c 344A     		ldr	r2, .L154+4
 2782 005e 1362     		str	r3, [r2, #32]
 631:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | g_rx.bu
 2783              		.loc 1 631 0
 2784 0060 324B     		ldr	r3, .L154
 2785 0062 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2786 0064 1A06     		lsls	r2, r3, #24
 2787 0066 314B     		ldr	r3, .L154
 2788 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2789 006a 1B04     		lsls	r3, r3, #16
 2790 006c 1A43     		orrs	r2, r2, r3
 2791 006e 2F4B     		ldr	r3, .L154
 2792 0070 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2793 0072 1B02     		lsls	r3, r3, #8
 2794 0074 1343     		orrs	r3, r3, r2
 2795 0076 2D4A     		ldr	r2, .L154
 2796 0078 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 2797 007a 1343     		orrs	r3, r3, r2
 2798 007c 2C4A     		ldr	r2, .L154+4
 2799 007e 5362     		str	r3, [r2, #36]
 632:..\src/command_processing.c **** 
 633:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_inf = g_mem.SH_config.pos_lim_inf << g_mem.SH_config.res;
 2800              		.loc 1 633 0
 2801 0080 2B4B     		ldr	r3, .L154+4
 2802 0082 1B6A     		ldr	r3, [r3, #32]
 2803 0084 2A4A     		ldr	r2, .L154+4
 2804 0086 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2805 008a 9340     		lsls	r3, r3, r2
 2806 008c 284A     		ldr	r2, .L154+4
 2807 008e 1362     		str	r3, [r2, #32]
 634:..\src/command_processing.c ****             g_mem.SH_config.pos_lim_sup = g_mem.SH_config.pos_lim_sup << g_mem.SH_config.res;
 2808              		.loc 1 634 0
 2809 0090 274B     		ldr	r3, .L154+4
 2810 0092 5B6A     		ldr	r3, [r3, #36]
 2811 0094 264A     		ldr	r2, .L154+4
 2812 0096 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 2813 009a 9340     		lsls	r3, r3, r2
 2814 009c 244A     		ldr	r2, .L154+4
 2815 009e 5362     		str	r3, [r2, #36]
 635:..\src/command_processing.c ****             break;            
 2816              		.loc 1 635 0
 2817 00a0 40E0     		b	.L146
 2818              	.L152:
 636:..\src/command_processing.c ****             default:
 637:..\src/command_processing.c **** 
 638:..\src/command_processing.c ****                 for (i = 0; i < PARAM_LIST[index].NUM_ITEMS * sod; i += sod){
 2819              		.loc 1 638 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 78


 2820 00a2 0023     		movs	r3, #0
 2821 00a4 FB73     		strb	r3, [r7, #15]
 2822 00a6 20E0     		b	.L147
 2823              	.L150:
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2824              		.loc 1 639 0
 2825 00a8 0023     		movs	r3, #0
 2826 00aa BB73     		strb	r3, [r7, #14]
 2827 00ac 15E0     		b	.L148
 2828              	.L149:
 640:..\src/command_processing.c ****                         ((char*)(PARAM_LIST[index].VAR_P + i))[sod - j -1] = g_rx.buffer[3+i+j];   
 2829              		.loc 1 640 0 discriminator 3
 2830 00ae FB88     		ldrh	r3, [r7, #6]
 2831 00b0 1B01     		lsls	r3, r3, #4
 2832 00b2 3A68     		ldr	r2, [r7]
 2833 00b4 1344     		add	r3, r3, r2
 2834 00b6 1A68     		ldr	r2, [r3]
 2835 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2836 00ba 787B     		ldrb	r0, [r7, #13]	@ zero_extendqisi2
 2837 00bc B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 2838 00be 411A     		subs	r1, r0, r1
 2839 00c0 0B44     		add	r3, r3, r1
 2840 00c2 013B     		subs	r3, r3, #1
 2841 00c4 1344     		add	r3, r3, r2
 2842 00c6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2843 00c8 D11C     		adds	r1, r2, #3
 2844 00ca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2845 00cc 0A44     		add	r2, r2, r1
 2846 00ce 1749     		ldr	r1, .L154
 2847 00d0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2848 00d2 1A70     		strb	r2, [r3]
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2849              		.loc 1 639 0 discriminator 3
 2850 00d4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2851 00d6 0133     		adds	r3, r3, #1
 2852 00d8 BB73     		strb	r3, [r7, #14]
 2853              	.L148:
 639:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2854              		.loc 1 639 0 is_stmt 0 discriminator 1
 2855 00da BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2856 00dc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2857 00de 9A42     		cmp	r2, r3
 2858 00e0 E5D3     		bcc	.L149
 638:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2859              		.loc 1 638 0 is_stmt 1 discriminator 2
 2860 00e2 FA7B     		ldrb	r2, [r7, #15]
 2861 00e4 7B7B     		ldrb	r3, [r7, #13]
 2862 00e6 1344     		add	r3, r3, r2
 2863 00e8 FB73     		strb	r3, [r7, #15]
 2864              	.L147:
 638:..\src/command_processing.c ****                     for(j = 0; j < sod; j++) {
 2865              		.loc 1 638 0 is_stmt 0 discriminator 1
 2866 00ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2867 00ec FB88     		ldrh	r3, [r7, #6]
 2868 00ee 1B01     		lsls	r3, r3, #4
 2869 00f0 3968     		ldr	r1, [r7]
 2870 00f2 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 79


 2871 00f4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2872 00f6 1946     		mov	r1, r3
 2873 00f8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2874 00fa 03FB01F3 		mul	r3, r3, r1
 2875 00fe 9A42     		cmp	r2, r3
 2876 0100 D2DB     		blt	.L150
 641:..\src/command_processing.c ****                     }
 642:..\src/command_processing.c ****                 } 
 643:..\src/command_processing.c ****                 if( PARAM_LIST[index].TYPES == TYPE_STRING)                   
 2877              		.loc 1 643 0 is_stmt 1
 2878 0102 FB88     		ldrh	r3, [r7, #6]
 2879 0104 1B01     		lsls	r3, r3, #4
 2880 0106 3A68     		ldr	r2, [r7]
 2881 0108 1344     		add	r3, r3, r2
 2882 010a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2883 010c 092B     		cmp	r3, #9
 2884 010e 08D1     		bne	.L153
 644:..\src/command_processing.c ****                    *(PARAM_LIST[index].VAR_P + i) = '\0';   
 2885              		.loc 1 644 0
 2886 0110 FB88     		ldrh	r3, [r7, #6]
 2887 0112 1B01     		lsls	r3, r3, #4
 2888 0114 3A68     		ldr	r2, [r7]
 2889 0116 1344     		add	r3, r3, r2
 2890 0118 1A68     		ldr	r2, [r3]
 2891 011a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2892 011c 1344     		add	r3, r3, r2
 2893 011e 0022     		movs	r2, #0
 2894 0120 1A70     		strb	r2, [r3]
 2895              	.L153:
 645:..\src/command_processing.c ****             break;
 2896              		.loc 1 645 0
 2897 0122 00BF     		nop
 2898              	.L146:
 646:..\src/command_processing.c ****     }
 647:..\src/command_processing.c **** 
 648:..\src/command_processing.c ****       
 649:..\src/command_processing.c **** }
 2899              		.loc 1 649 0
 2900 0124 00BF     		nop
 2901 0126 1037     		adds	r7, r7, #16
 2902              		.cfi_def_cfa_offset 8
 2903 0128 BD46     		mov	sp, r7
 2904              		.cfi_def_cfa_register 13
 2905              		@ sp needed
 2906 012a 80BD     		pop	{r7, pc}
 2907              	.L155:
 2908              		.align	2
 2909              	.L154:
 2910 012c 00000000 		.word	g_rx
 2911 0130 00000000 		.word	g_mem
 2912              		.cfi_endproc
 2913              	.LFE70:
 2914              		.size	set_custom_param, .-set_custom_param
 2915              		.section	.text.get_IMU_param_list,"ax",%progbits
 2916              		.align	2
 2917              		.global	get_IMU_param_list
 2918              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 80


 2919              		.thumb_func
 2920              		.type	get_IMU_param_list, %function
 2921              	get_IMU_param_list:
 2922              	.LFB71:
 650:..\src/command_processing.c **** 
 651:..\src/command_processing.c **** //==============================================================================
 652:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
 653:..\src/command_processing.c **** //==============================================================================
 654:..\src/command_processing.c **** 
 655:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
 656:..\src/command_processing.c **** {
 2923              		.loc 1 656 0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 8
 2926              		@ frame_needed = 1, uses_anonymous_args = 0
 2927              		@ link register save eliminated.
 2928 0000 80B4     		push	{r7}
 2929              		.cfi_def_cfa_offset 4
 2930              		.cfi_offset 7, -4
 2931 0002 83B0     		sub	sp, sp, #12
 2932              		.cfi_def_cfa_offset 16
 2933 0004 00AF     		add	r7, sp, #0
 2934              		.cfi_def_cfa_register 7
 2935 0006 0346     		mov	r3, r0
 2936 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 657:..\src/command_processing.c **** }
 2937              		.loc 1 657 0
 2938 000a 00BF     		nop
 2939 000c 0C37     		adds	r7, r7, #12
 2940              		.cfi_def_cfa_offset 4
 2941 000e BD46     		mov	sp, r7
 2942              		.cfi_def_cfa_register 13
 2943              		@ sp needed
 2944 0010 80BC     		pop	{r7}
 2945              		.cfi_restore 7
 2946              		.cfi_def_cfa_offset 0
 2947 0012 7047     		bx	lr
 2948              		.cfi_endproc
 2949              	.LFE71:
 2950              		.size	get_IMU_param_list, .-get_IMU_param_list
 2951              		.section	.text.setZeros,"ax",%progbits
 2952              		.align	2
 2953              		.global	setZeros
 2954              		.thumb
 2955              		.thumb_func
 2956              		.type	setZeros, %function
 2957              	setZeros:
 2958              	.LFB72:
 658:..\src/command_processing.c **** 
 659:..\src/command_processing.c **** //==============================================================================
 660:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
 661:..\src/command_processing.c **** //==============================================================================
 662:..\src/command_processing.c **** 
 663:..\src/command_processing.c **** void setZeros()
 664:..\src/command_processing.c **** {
 2959              		.loc 1 664 0
 2960              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 81


 2961              		@ args = 0, pretend = 0, frame = 0
 2962              		@ frame_needed = 1, uses_anonymous_args = 0
 2963              		@ link register save eliminated.
 2964 0000 80B4     		push	{r7}
 2965              		.cfi_def_cfa_offset 4
 2966              		.cfi_offset 7, -4
 2967 0002 00AF     		add	r7, sp, #0
 2968              		.cfi_def_cfa_register 7
 665:..\src/command_processing.c **** }
 2969              		.loc 1 665 0
 2970 0004 00BF     		nop
 2971 0006 BD46     		mov	sp, r7
 2972              		.cfi_def_cfa_register 13
 2973              		@ sp needed
 2974 0008 80BC     		pop	{r7}
 2975              		.cfi_restore 7
 2976              		.cfi_def_cfa_offset 0
 2977 000a 7047     		bx	lr
 2978              		.cfi_endproc
 2979              	.LFE72:
 2980              		.size	setZeros, .-setZeros
 2981              		.section	.rodata
 2982              		.align	2
 2983              	.LC34:
 2984 0278 0D0A00   		.ascii	"\015\012\000"
 2985 027b 00       		.align	2
 2986              	.LC35:
 2987 027c 4669726D 		.ascii	"Firmware version: \000"
 2987      77617265 
 2987      20766572 
 2987      73696F6E 
 2987      3A2000
 2988 028f 00       		.align	2
 2989              	.LC36:
 2990 0290 4149525F 		.ascii	"AIR_CHAMBERS_and_VIBROTACTILE_FB\000"
 2990      4348414D 
 2990      42455253 
 2990      5F616E64 
 2990      5F564942 
 2991 02b1 000000   		.align	2
 2992              	.LC37:
 2993 02b4 2E0D0A0D 		.ascii	".\015\012\015\012\000"
 2993      0A00
 2994 02ba 0000     		.align	2
 2995              	.LC38:
 2996 02bc 44455649 		.ascii	"DEVICE INFO\015\012\000"
 2996      43452049 
 2996      4E464F0D 
 2996      0A00
 2997 02ca 0000     		.align	2
 2998              	.LC39:
 2999 02cc 49443A20 		.ascii	"ID: %d\015\012\000"
 2999      25640D0A 
 2999      00
 3000 02d5 000000   		.align	2
 3001              	.LC40:
 3002 02d8 44657669 		.ascii	"Device: PULSE\015\012\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 82


 3002      63653A20 
 3002      50554C53 
 3002      450D0A00 
 3003              		.align	2
 3004              	.LC41:
 3005 02e8 496E7075 		.ascii	"Input mode: USB\015\012\000"
 3005      74206D6F 
 3005      64653A20 
 3005      5553420D 
 3005      0A00
 3006 02fa 0000     		.align	2
 3007              	.LC42:
 3008 02fc 496E7075 		.ascii	"Input mode: Handle\015\012\000"
 3008      74206D6F 
 3008      64653A20 
 3008      48616E64 
 3008      6C650D0A 
 3009 0311 000000   		.align	2
 3010              	.LC43:
 3011 0314 496E7075 		.ascii	"Input mode: EMG proportional\015\012\000"
 3011      74206D6F 
 3011      64653A20 
 3011      454D4720 
 3011      70726F70 
 3012 0333 00       		.align	2
 3013              	.LC44:
 3014 0334 496E7075 		.ascii	"Input mode: EMG integral\015\012\000"
 3014      74206D6F 
 3014      64653A20 
 3014      454D4720 
 3014      696E7465 
 3015 034f 00       		.align	2
 3016              	.LC45:
 3017 0350 496E7075 		.ascii	"Input mode: EMG FCFS\015\012\000"
 3017      74206D6F 
 3017      64653A20 
 3017      454D4720 
 3017      46434653 
 3018 0367 00       		.align	2
 3019              	.LC46:
 3020 0368 496E7075 		.ascii	"Input mode: EMG FCFS ADV\015\012\000"
 3020      74206D6F 
 3020      64653A20 
 3020      454D4720 
 3020      46434653 
 3021 0383 00       		.align	2
 3022              	.LC47:
 3023 0384 496E7075 		.ascii	"Input mode: Joystick\015\012\000"
 3023      74206D6F 
 3023      64653A20 
 3023      4A6F7973 
 3023      7469636B 
 3024 039b 00       		.align	2
 3025              	.LC48:
 3026 039c 496E7075 		.ascii	"Input mode: EMG proportional Normally Closed\015\012"
 3026      74206D6F 
 3026      64653A20 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 83


 3026      454D4720 
 3026      70726F70 
 3027 03ca 00       		.ascii	"\000"
 3028 03cb 00       		.align	2
 3029              	.LC49:
 3030 03cc 536F6674 		.ascii	"SoftHand sensor resolution: \000"
 3030      48616E64 
 3030      2073656E 
 3030      736F7220 
 3030      7265736F 
 3031 03e9 000000   		.align	2
 3032              	.LC50:
 3033 03ec 25640D0A 		.ascii	"%d\015\012\000"
 3033      00
 3034 03f1 000000   		.align	2
 3035              	.LC51:
 3036 03f4 506F7369 		.ascii	"Position limit SoftHand: inf -> %ld  \000"
 3036      74696F6E 
 3036      206C696D 
 3036      69742053 
 3036      6F667448 
 3037 041a 0000     		.align	2
 3038              	.LC52:
 3039 041c 73757020 		.ascii	"sup -> %ld\015\012\000"
 3039      2D3E2025 
 3039      6C640D0A 
 3039      00
 3040 0429 000000   		.align	2
 3041              	.LC53:
 3042 042c 454D4720 		.ascii	"EMG CONFIGURATION\015\012\000"
 3042      434F4E46 
 3042      49475552 
 3042      4154494F 
 3042      4E0D0A00 
 3043              		.align	2
 3044              	.LC54:
 3045 0440 454D4720 		.ascii	"EMG thresholds [0 - 1024]: %u, %u\000"
 3045      74687265 
 3045      73686F6C 
 3045      6473205B 
 3045      30202D20 
 3046 0462 0000     		.align	2
 3047              	.LC55:
 3048 0464 454D4720 		.ascii	"EMG max values [0 - 4096]: %lu, %lu\000"
 3048      6D617820 
 3048      76616C75 
 3048      6573205B 
 3048      30202D20 
 3049              		.align	2
 3050              	.LC56:
 3051 0488 454D4720 		.ascii	"EMG inversion: YES\015\012\000"
 3051      696E7665 
 3051      7273696F 
 3051      6E3A2059 
 3051      45530D0A 
 3052 049d 000000   		.align	2
 3053              	.LC57:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 84


 3054 04a0 454D4720 		.ascii	"EMG inversion: NO\015\012\000"
 3054      696E7665 
 3054      7273696F 
 3054      6E3A204E 
 3054      4F0D0A00 
 3055              		.align	2
 3056              	.LC58:
 3057 04b4 454D4720 		.ascii	"EMG max speed: %d %d\000"
 3057      6D617820 
 3057      73706565 
 3057      643A2025 
 3057      64202564 
 3058 04c9 000000   		.align	2
 3059              	.LC59:
 3060 04cc 454D4720 		.ascii	"EMG input %d -> %d\000"
 3060      696E7075 
 3060      74202564 
 3060      202D3E20 
 3060      256400
 3061 04df 00       		.align	2
 3062              	.LC60:
 3063 04e0 4D617374 		.ascii	"Master Mode active: YES\015\012\000"
 3063      6572204D 
 3063      6F646520 
 3063      61637469 
 3063      76653A20 
 3064 04fa 0000     		.align	2
 3065              	.LC61:
 3066 04fc 4D617374 		.ascii	"Master Mode active: NO\015\012\000"
 3066      6572204D 
 3066      6F646520 
 3066      61637469 
 3066      76653A20 
 3067 0515 000000   		.align	2
 3068              	.LC62:
 3069 0518 536C6176 		.ascii	"Slave ID: %d\015\012\000"
 3069      65204944 
 3069      3A202564 
 3069      0D0A00
 3070 0527 00       		.align	2
 3071              	.LC63:
 3072 0528 41697263 		.ascii	"Airchamber FB active: YES\015\012\000"
 3072      68616D62 
 3072      65722046 
 3072      42206163 
 3072      74697665 
 3073              		.align	2
 3074              	.LC64:
 3075 0544 41697263 		.ascii	"Airchamber FB active: NO\015\012\000"
 3075      68616D62 
 3075      65722046 
 3075      42206163 
 3075      74697665 
 3076 055f 00       		.align	2
 3077              	.LC65:
 3078 0560 56696272 		.ascii	"Vibrotactile FB active: YES\015\012\000"
 3078      6F746163 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 85


 3078      74696C65 
 3078      20464220 
 3078      61637469 
 3079 057e 0000     		.align	2
 3080              	.LC66:
 3081 0580 56696272 		.ascii	"Vibrotactile FB active: NO\015\012\000"
 3081      6F746163 
 3081      74696C65 
 3081      20464220 
 3081      61637469 
 3082 059d 000000   		.align	2
 3083              	.LC67:
 3084 05a0 4C617374 		.ascii	"Last FW cycle time: %u us\015\012\000"
 3084      20465720 
 3084      6379636C 
 3084      65207469 
 3084      6D653A20 
 3085              		.align	2
 3086              	.LC68:
 3087 05bc 0D0A0000 		.ascii	"\015\012\000\000"
 3088              		.section	.text.prepare_generic_info,"ax",%progbits
 3089              		.align	2
 3090              		.global	prepare_generic_info
 3091              		.thumb
 3092              		.thumb_func
 3093              		.type	prepare_generic_info, %function
 3094              	prepare_generic_info:
 3095              	.LFB73:
 666:..\src/command_processing.c **** 
 667:..\src/command_processing.c **** //==============================================================================
 668:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
 669:..\src/command_processing.c **** //==============================================================================
 670:..\src/command_processing.c **** 
 671:..\src/command_processing.c **** void prepare_generic_info(char *info_string)
 672:..\src/command_processing.c **** {  int i;
 3096              		.loc 1 672 0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 120
 3099              		@ frame_needed = 1, uses_anonymous_args = 0
 3100 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3101              		.cfi_def_cfa_offset 20
 3102              		.cfi_offset 4, -20
 3103              		.cfi_offset 5, -16
 3104              		.cfi_offset 6, -12
 3105              		.cfi_offset 7, -8
 3106              		.cfi_offset 14, -4
 3107 0002 9FB0     		sub	sp, sp, #124
 3108              		.cfi_def_cfa_offset 144
 3109 0004 00AF     		add	r7, sp, #0
 3110              		.cfi_def_cfa_register 7
 3111 0006 7860     		str	r0, [r7, #4]
 673:..\src/command_processing.c **** 
 674:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 3112              		.loc 1 674 0
 3113 0008 A14B     		ldr	r3, .L183
 3114 000a 3B67     		str	r3, [r7, #112]
 675:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 86


 676:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 3115              		.loc 1 676 0
 3116 000c A04B     		ldr	r3, .L183
 3117 000e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3118 0010 FA2B     		cmp	r3, #250
 3119 0012 00F06083 		beq	.L182
 3120              	.LBB25:
 677:..\src/command_processing.c ****         char str[100];
 678:..\src/command_processing.c ****         strcpy(info_string, "");
 3121              		.loc 1 678 0
 3122 0016 7B68     		ldr	r3, [r7, #4]
 3123 0018 0022     		movs	r2, #0
 3124 001a 1A70     		strb	r2, [r3]
 679:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3125              		.loc 1 679 0
 3126 001c 7868     		ldr	r0, [r7, #4]
 3127 001e FFF7FEFF 		bl	strlen
 3128 0022 0346     		mov	r3, r0
 3129 0024 1A46     		mov	r2, r3
 3130 0026 7B68     		ldr	r3, [r7, #4]
 3131 0028 1344     		add	r3, r3, r2
 3132 002a 9A4A     		ldr	r2, .L183+4
 3133 002c 1188     		ldrh	r1, [r2]	@ unaligned
 3134 002e 9278     		ldrb	r2, [r2, #2]
 3135 0030 1980     		strh	r1, [r3]	@ unaligned
 3136 0032 9A70     		strb	r2, [r3, #2]
 680:..\src/command_processing.c ****         strcat(info_string, "Firmware version: ");
 3137              		.loc 1 680 0
 3138 0034 7868     		ldr	r0, [r7, #4]
 3139 0036 FFF7FEFF 		bl	strlen
 3140 003a 0346     		mov	r3, r0
 3141 003c 1A46     		mov	r2, r3
 3142 003e 7B68     		ldr	r3, [r7, #4]
 3143 0040 1344     		add	r3, r3, r2
 3144 0042 954A     		ldr	r2, .L183+8
 3145 0044 1D46     		mov	r5, r3
 3146 0046 1446     		mov	r4, r2
 3147 0048 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3148 004a 2860     		str	r0, [r5]	@ unaligned
 3149 004c 6960     		str	r1, [r5, #4]	@ unaligned
 3150 004e AA60     		str	r2, [r5, #8]	@ unaligned
 3151 0050 EB60     		str	r3, [r5, #12]	@ unaligned
 3152 0052 2388     		ldrh	r3, [r4]	@ unaligned
 3153 0054 A278     		ldrb	r2, [r4, #2]
 3154 0056 2B82     		strh	r3, [r5, #16]	@ unaligned
 3155 0058 1346     		mov	r3, r2
 3156 005a AB74     		strb	r3, [r5, #18]
 681:..\src/command_processing.c ****         strcat(info_string, VERSION);
 3157              		.loc 1 681 0
 3158 005c 7868     		ldr	r0, [r7, #4]
 3159 005e FFF7FEFF 		bl	strlen
 3160 0062 0346     		mov	r3, r0
 3161 0064 1A46     		mov	r2, r3
 3162 0066 7B68     		ldr	r3, [r7, #4]
 3163 0068 1344     		add	r3, r3, r2
 3164 006a 8C4A     		ldr	r2, .L183+12
 3165 006c 1446     		mov	r4, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 87


 3166 006e 9E46     		mov	lr, r3
 3167 0070 04F1200C 		add	ip, r4, #32
 3168              	.L160:
 3169 0074 7546     		mov	r5, lr
 3170 0076 2646     		mov	r6, r4
 3171 0078 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 3172 007a 2860     		str	r0, [r5]	@ unaligned
 3173 007c 6960     		str	r1, [r5, #4]	@ unaligned
 3174 007e AA60     		str	r2, [r5, #8]	@ unaligned
 3175 0080 EB60     		str	r3, [r5, #12]	@ unaligned
 3176 0082 1034     		adds	r4, r4, #16
 3177 0084 0EF1100E 		add	lr, lr, #16
 3178 0088 6445     		cmp	r4, ip
 3179 008a F3D1     		bne	.L160
 3180 008c 7346     		mov	r3, lr
 3181 008e 2246     		mov	r2, r4
 3182 0090 1278     		ldrb	r2, [r2]
 3183 0092 1A70     		strb	r2, [r3]
 682:..\src/command_processing.c ****         strcat(info_string, ".\r\n\r\n");      
 3184              		.loc 1 682 0
 3185 0094 7868     		ldr	r0, [r7, #4]
 3186 0096 FFF7FEFF 		bl	strlen
 3187 009a 0346     		mov	r3, r0
 3188 009c 1A46     		mov	r2, r3
 3189 009e 7B68     		ldr	r3, [r7, #4]
 3190 00a0 1344     		add	r3, r3, r2
 3191 00a2 7F4A     		ldr	r2, .L183+16
 3192 00a4 1068     		ldr	r0, [r2]	@ unaligned
 3193 00a6 1860     		str	r0, [r3]	@ unaligned
 3194 00a8 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3195 00aa 9A80     		strh	r2, [r3, #4]	@ unaligned
 683:..\src/command_processing.c **** 
 684:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 3196              		.loc 1 684 0
 3197 00ac 7868     		ldr	r0, [r7, #4]
 3198 00ae FFF7FEFF 		bl	strlen
 3199 00b2 0346     		mov	r3, r0
 3200 00b4 1A46     		mov	r2, r3
 3201 00b6 7B68     		ldr	r3, [r7, #4]
 3202 00b8 1344     		add	r3, r3, r2
 3203 00ba 7A4A     		ldr	r2, .L183+20
 3204 00bc 1C46     		mov	r4, r3
 3205 00be 1346     		mov	r3, r2
 3206 00c0 07CB     		ldmia	r3!, {r0, r1, r2}
 3207 00c2 2060     		str	r0, [r4]	@ unaligned
 3208 00c4 6160     		str	r1, [r4, #4]	@ unaligned
 3209 00c6 A260     		str	r2, [r4, #8]	@ unaligned
 3210 00c8 1B88     		ldrh	r3, [r3]	@ unaligned
 3211 00ca A381     		strh	r3, [r4, #12]	@ unaligned
 685:..\src/command_processing.c ****         sprintf(str, "ID: %d\r\n", (int) MEM_P->dev.id);
 3212              		.loc 1 685 0
 3213 00cc 3B6F     		ldr	r3, [r7, #112]
 3214 00ce 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3215 00d0 1A46     		mov	r2, r3
 3216 00d2 07F10C03 		add	r3, r7, #12
 3217 00d6 7449     		ldr	r1, .L183+24
 3218 00d8 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 88


 3219 00da FFF7FEFF 		bl	sprintf
 686:..\src/command_processing.c ****         strcat(info_string, str);
 3220              		.loc 1 686 0
 3221 00de 07F10C03 		add	r3, r7, #12
 3222 00e2 1946     		mov	r1, r3
 3223 00e4 7868     		ldr	r0, [r7, #4]
 3224 00e6 FFF7FEFF 		bl	strcat
 687:..\src/command_processing.c **** 
 688:..\src/command_processing.c ****         strcat(info_string, "Device: PULSE\r\n");
 3225              		.loc 1 688 0
 3226 00ea 7868     		ldr	r0, [r7, #4]
 3227 00ec FFF7FEFF 		bl	strlen
 3228 00f0 0346     		mov	r3, r0
 3229 00f2 1A46     		mov	r2, r3
 3230 00f4 7B68     		ldr	r3, [r7, #4]
 3231 00f6 1344     		add	r3, r3, r2
 3232 00f8 6C4A     		ldr	r2, .L183+28
 3233 00fa 1C46     		mov	r4, r3
 3234 00fc 1546     		mov	r5, r2
 3235 00fe 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3236 0100 2060     		str	r0, [r4]	@ unaligned
 3237 0102 6160     		str	r1, [r4, #4]	@ unaligned
 3238 0104 A260     		str	r2, [r4, #8]	@ unaligned
 3239 0106 E360     		str	r3, [r4, #12]	@ unaligned
 689:..\src/command_processing.c ****            
 690:..\src/command_processing.c ****         strcat(info_string, "\r\n");  
 3240              		.loc 1 690 0
 3241 0108 7868     		ldr	r0, [r7, #4]
 3242 010a FFF7FEFF 		bl	strlen
 3243 010e 0346     		mov	r3, r0
 3244 0110 1A46     		mov	r2, r3
 3245 0112 7B68     		ldr	r3, [r7, #4]
 3246 0114 1344     		add	r3, r3, r2
 3247 0116 5F4A     		ldr	r2, .L183+4
 3248 0118 1188     		ldrh	r1, [r2]	@ unaligned
 3249 011a 9278     		ldrb	r2, [r2, #2]
 3250 011c 1980     		strh	r1, [r3]	@ unaligned
 3251 011e 9A70     		strb	r2, [r3, #2]
 691:..\src/command_processing.c ****         
 692:..\src/command_processing.c ****        
 693:..\src/command_processing.c **** 
 694:..\src/command_processing.c ****             switch(MEM_P->SH_config.input_mode) {
 3252              		.loc 1 694 0
 3253 0120 3B6F     		ldr	r3, [r7, #112]
 3254 0122 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 3255 0126 072B     		cmp	r3, #7
 3256 0128 00F2F380 		bhi	.L161
 3257 012c 01A2     		adr	r2, .L163
 3258 012e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3259 0132 00BF     		.p2align 2
 3260              	.L163:
 3261 0134 55010000 		.word	.L162+1
 3262 0138 79010000 		.word	.L164+1
 3263 013c A1010000 		.word	.L165+1
 3264 0140 D3010000 		.word	.L166+1
 3265 0144 03020000 		.word	.L167+1
 3266 0148 31020000 		.word	.L168+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 89


 3267 014c 61020000 		.word	.L169+1
 3268 0150 CD020000 		.word	.L170+1
 3269              		.p2align 1
 3270              	.L162:
 695:..\src/command_processing.c ****                 case INPUT_MODE_EXTERNAL:
 696:..\src/command_processing.c ****                     strcat(info_string, "Input mode: USB\r\n");
 3271              		.loc 1 696 0
 3272 0154 7868     		ldr	r0, [r7, #4]
 3273 0156 FFF7FEFF 		bl	strlen
 3274 015a 0346     		mov	r3, r0
 3275 015c 1A46     		mov	r2, r3
 3276 015e 7B68     		ldr	r3, [r7, #4]
 3277 0160 1344     		add	r3, r3, r2
 3278 0162 534A     		ldr	r2, .L183+32
 3279 0164 1D46     		mov	r5, r3
 3280 0166 1446     		mov	r4, r2
 3281 0168 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3282 016a 2860     		str	r0, [r5]	@ unaligned
 3283 016c 6960     		str	r1, [r5, #4]	@ unaligned
 3284 016e AA60     		str	r2, [r5, #8]	@ unaligned
 3285 0170 EB60     		str	r3, [r5, #12]	@ unaligned
 3286 0172 2388     		ldrh	r3, [r4]	@ unaligned
 3287 0174 2B82     		strh	r3, [r5, #16]	@ unaligned
 697:..\src/command_processing.c ****                     break;
 3288              		.loc 1 697 0
 3289 0176 CCE0     		b	.L161
 3290              	.L164:
 698:..\src/command_processing.c ****                 case INPUT_MODE_ENCODER3:
 699:..\src/command_processing.c ****                     strcat(info_string, "Input mode: Handle\r\n");
 3291              		.loc 1 699 0
 3292 0178 7868     		ldr	r0, [r7, #4]
 3293 017a FFF7FEFF 		bl	strlen
 3294 017e 0346     		mov	r3, r0
 3295 0180 1A46     		mov	r2, r3
 3296 0182 7B68     		ldr	r3, [r7, #4]
 3297 0184 1344     		add	r3, r3, r2
 3298 0186 4B4A     		ldr	r2, .L183+36
 3299 0188 1D46     		mov	r5, r3
 3300 018a 1446     		mov	r4, r2
 3301 018c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3302 018e 2860     		str	r0, [r5]	@ unaligned
 3303 0190 6960     		str	r1, [r5, #4]	@ unaligned
 3304 0192 AA60     		str	r2, [r5, #8]	@ unaligned
 3305 0194 EB60     		str	r3, [r5, #12]	@ unaligned
 3306 0196 2068     		ldr	r0, [r4]	@ unaligned
 3307 0198 2861     		str	r0, [r5, #16]	@ unaligned
 3308 019a 2379     		ldrb	r3, [r4, #4]
 3309 019c 2B75     		strb	r3, [r5, #20]
 700:..\src/command_processing.c ****                     break;
 3310              		.loc 1 700 0
 3311 019e B8E0     		b	.L161
 3312              	.L165:
 701:..\src/command_processing.c ****                 case INPUT_MODE_EMG_PROPORTIONAL:
 702:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG proportional\r\n");
 3313              		.loc 1 702 0
 3314 01a0 7868     		ldr	r0, [r7, #4]
 3315 01a2 FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 90


 3316 01a6 0346     		mov	r3, r0
 3317 01a8 1A46     		mov	r2, r3
 3318 01aa 7B68     		ldr	r3, [r7, #4]
 3319 01ac 1344     		add	r3, r3, r2
 3320 01ae 424A     		ldr	r2, .L183+40
 3321 01b0 1D46     		mov	r5, r3
 3322 01b2 1446     		mov	r4, r2
 3323 01b4 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3324 01b6 2860     		str	r0, [r5]	@ unaligned
 3325 01b8 6960     		str	r1, [r5, #4]	@ unaligned
 3326 01ba AA60     		str	r2, [r5, #8]	@ unaligned
 3327 01bc EB60     		str	r3, [r5, #12]	@ unaligned
 3328 01be 07CC     		ldmia	r4!, {r0, r1, r2}
 3329 01c0 2861     		str	r0, [r5, #16]	@ unaligned
 3330 01c2 6961     		str	r1, [r5, #20]	@ unaligned
 3331 01c4 AA61     		str	r2, [r5, #24]	@ unaligned
 3332 01c6 2388     		ldrh	r3, [r4]	@ unaligned
 3333 01c8 A278     		ldrb	r2, [r4, #2]
 3334 01ca AB83     		strh	r3, [r5, #28]	@ unaligned
 3335 01cc 1346     		mov	r3, r2
 3336 01ce AB77     		strb	r3, [r5, #30]
 703:..\src/command_processing.c ****                     break;
 3337              		.loc 1 703 0
 3338 01d0 9FE0     		b	.L161
 3339              	.L166:
 704:..\src/command_processing.c ****                 case INPUT_MODE_EMG_INTEGRAL:
 705:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG integral\r\n");
 3340              		.loc 1 705 0
 3341 01d2 7868     		ldr	r0, [r7, #4]
 3342 01d4 FFF7FEFF 		bl	strlen
 3343 01d8 0346     		mov	r3, r0
 3344 01da 1A46     		mov	r2, r3
 3345 01dc 7B68     		ldr	r3, [r7, #4]
 3346 01de 1344     		add	r3, r3, r2
 3347 01e0 364A     		ldr	r2, .L183+44
 3348 01e2 1D46     		mov	r5, r3
 3349 01e4 1446     		mov	r4, r2
 3350 01e6 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3351 01e8 2860     		str	r0, [r5]	@ unaligned
 3352 01ea 6960     		str	r1, [r5, #4]	@ unaligned
 3353 01ec AA60     		str	r2, [r5, #8]	@ unaligned
 3354 01ee EB60     		str	r3, [r5, #12]	@ unaligned
 3355 01f0 03CC     		ldmia	r4!, {r0, r1}
 3356 01f2 2861     		str	r0, [r5, #16]	@ unaligned
 3357 01f4 6961     		str	r1, [r5, #20]	@ unaligned
 3358 01f6 2388     		ldrh	r3, [r4]	@ unaligned
 3359 01f8 A278     		ldrb	r2, [r4, #2]
 3360 01fa 2B83     		strh	r3, [r5, #24]	@ unaligned
 3361 01fc 1346     		mov	r3, r2
 3362 01fe AB76     		strb	r3, [r5, #26]
 706:..\src/command_processing.c ****                     break;
 3363              		.loc 1 706 0
 3364 0200 87E0     		b	.L161
 3365              	.L167:
 707:..\src/command_processing.c ****                 case INPUT_MODE_EMG_FCFS:
 708:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG FCFS\r\n");
 3366              		.loc 1 708 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 91


 3367 0202 7868     		ldr	r0, [r7, #4]
 3368 0204 FFF7FEFF 		bl	strlen
 3369 0208 0346     		mov	r3, r0
 3370 020a 1A46     		mov	r2, r3
 3371 020c 7B68     		ldr	r3, [r7, #4]
 3372 020e 1344     		add	r3, r3, r2
 3373 0210 2B4A     		ldr	r2, .L183+48
 3374 0212 1C46     		mov	r4, r3
 3375 0214 1546     		mov	r5, r2
 3376 0216 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3377 0218 2060     		str	r0, [r4]	@ unaligned
 3378 021a 6160     		str	r1, [r4, #4]	@ unaligned
 3379 021c A260     		str	r2, [r4, #8]	@ unaligned
 3380 021e E360     		str	r3, [r4, #12]	@ unaligned
 3381 0220 2868     		ldr	r0, [r5]	@ unaligned
 3382 0222 2061     		str	r0, [r4, #16]	@ unaligned
 3383 0224 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 3384 0226 AA79     		ldrb	r2, [r5, #6]
 3385 0228 A382     		strh	r3, [r4, #20]	@ unaligned
 3386 022a 1346     		mov	r3, r2
 3387 022c A375     		strb	r3, [r4, #22]
 709:..\src/command_processing.c ****                     break;
 3388              		.loc 1 709 0
 3389 022e 70E0     		b	.L161
 3390              	.L168:
 710:..\src/command_processing.c ****                 case INPUT_MODE_EMG_FCFS_ADV:
 711:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG FCFS ADV\r\n");
 3391              		.loc 1 711 0
 3392 0230 7868     		ldr	r0, [r7, #4]
 3393 0232 FFF7FEFF 		bl	strlen
 3394 0236 0346     		mov	r3, r0
 3395 0238 1A46     		mov	r2, r3
 3396 023a 7B68     		ldr	r3, [r7, #4]
 3397 023c 1344     		add	r3, r3, r2
 3398 023e 214A     		ldr	r2, .L183+52
 3399 0240 1D46     		mov	r5, r3
 3400 0242 1446     		mov	r4, r2
 3401 0244 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3402 0246 2860     		str	r0, [r5]	@ unaligned
 3403 0248 6960     		str	r1, [r5, #4]	@ unaligned
 3404 024a AA60     		str	r2, [r5, #8]	@ unaligned
 3405 024c EB60     		str	r3, [r5, #12]	@ unaligned
 3406 024e 03CC     		ldmia	r4!, {r0, r1}
 3407 0250 2861     		str	r0, [r5, #16]	@ unaligned
 3408 0252 6961     		str	r1, [r5, #20]	@ unaligned
 3409 0254 2388     		ldrh	r3, [r4]	@ unaligned
 3410 0256 A278     		ldrb	r2, [r4, #2]
 3411 0258 2B83     		strh	r3, [r5, #24]	@ unaligned
 3412 025a 1346     		mov	r3, r2
 3413 025c AB76     		strb	r3, [r5, #26]
 712:..\src/command_processing.c ****                     break;
 3414              		.loc 1 712 0
 3415 025e 58E0     		b	.L161
 3416              	.L169:
 713:..\src/command_processing.c ****                 case INPUT_MODE_JOYSTICK:
 714:..\src/command_processing.c ****                     strcat(info_string, "Input mode: Joystick\r\n");
 3417              		.loc 1 714 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 92


 3418 0260 7868     		ldr	r0, [r7, #4]
 3419 0262 FFF7FEFF 		bl	strlen
 3420 0266 0346     		mov	r3, r0
 3421 0268 1A46     		mov	r2, r3
 3422 026a 7B68     		ldr	r3, [r7, #4]
 3423 026c 1344     		add	r3, r3, r2
 3424 026e 164A     		ldr	r2, .L183+56
 3425 0270 1C46     		mov	r4, r3
 3426 0272 1546     		mov	r5, r2
 3427 0274 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3428 0276 2060     		str	r0, [r4]	@ unaligned
 3429 0278 6160     		str	r1, [r4, #4]	@ unaligned
 3430 027a A260     		str	r2, [r4, #8]	@ unaligned
 3431 027c E360     		str	r3, [r4, #12]	@ unaligned
 3432 027e 2868     		ldr	r0, [r5]	@ unaligned
 3433 0280 2061     		str	r0, [r4, #16]	@ unaligned
 3434 0282 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 3435 0284 AA79     		ldrb	r2, [r5, #6]
 3436 0286 A382     		strh	r3, [r4, #20]	@ unaligned
 3437 0288 1346     		mov	r3, r2
 3438 028a A375     		strb	r3, [r4, #22]
 715:..\src/command_processing.c ****                     break;
 3439              		.loc 1 715 0
 3440 028c 41E0     		b	.L161
 3441              	.L184:
 3442 028e 00BF     		.align	2
 3443              	.L183:
 3444 0290 00000000 		.word	c_mem
 3445 0294 78020000 		.word	.LC34
 3446 0298 7C020000 		.word	.LC35
 3447 029c 90020000 		.word	.LC36
 3448 02a0 B4020000 		.word	.LC37
 3449 02a4 BC020000 		.word	.LC38
 3450 02a8 CC020000 		.word	.LC39
 3451 02ac D8020000 		.word	.LC40
 3452 02b0 E8020000 		.word	.LC41
 3453 02b4 FC020000 		.word	.LC42
 3454 02b8 14030000 		.word	.LC43
 3455 02bc 34030000 		.word	.LC44
 3456 02c0 50030000 		.word	.LC45
 3457 02c4 68030000 		.word	.LC46
 3458 02c8 84030000 		.word	.LC47
 3459              	.L170:
 716:..\src/command_processing.c ****                 case INPUT_MODE_EMG_PROPORTIONAL_NC:
 717:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG proportional Normally Closed\r\n");
 3460              		.loc 1 717 0
 3461 02cc 7868     		ldr	r0, [r7, #4]
 3462 02ce FFF7FEFF 		bl	strlen
 3463 02d2 0346     		mov	r3, r0
 3464 02d4 1A46     		mov	r2, r3
 3465 02d6 7B68     		ldr	r3, [r7, #4]
 3466 02d8 1344     		add	r3, r3, r2
 3467 02da BA4A     		ldr	r2, .L185
 3468 02dc 1546     		mov	r5, r2
 3469 02de 9E46     		mov	lr, r3
 3470 02e0 05F1200C 		add	ip, r5, #32
 3471              	.L171:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 93


 3472 02e4 7446     		mov	r4, lr
 3473 02e6 2E46     		mov	r6, r5
 3474 02e8 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 3475 02ea 2060     		str	r0, [r4]	@ unaligned
 3476 02ec 6160     		str	r1, [r4, #4]	@ unaligned
 3477 02ee A260     		str	r2, [r4, #8]	@ unaligned
 3478 02f0 E360     		str	r3, [r4, #12]	@ unaligned
 3479 02f2 1035     		adds	r5, r5, #16
 3480 02f4 0EF1100E 		add	lr, lr, #16
 3481 02f8 6545     		cmp	r5, ip
 3482 02fa F3D1     		bne	.L171
 3483 02fc 7446     		mov	r4, lr
 3484 02fe 2B46     		mov	r3, r5
 3485 0300 07CB     		ldmia	r3!, {r0, r1, r2}
 3486 0302 2060     		str	r0, [r4]	@ unaligned
 3487 0304 6160     		str	r1, [r4, #4]	@ unaligned
 3488 0306 A260     		str	r2, [r4, #8]	@ unaligned
 3489 0308 1A88     		ldrh	r2, [r3]	@ unaligned
 3490 030a 9B78     		ldrb	r3, [r3, #2]
 3491 030c A281     		strh	r2, [r4, #12]	@ unaligned
 3492 030e A373     		strb	r3, [r4, #14]
 718:..\src/command_processing.c ****                     break;
 3493              		.loc 1 718 0
 3494 0310 00BF     		nop
 3495              	.L161:
 719:..\src/command_processing.c ****             }
 720:..\src/command_processing.c **** 
 721:..\src/command_processing.c **** 
 722:..\src/command_processing.c ****             strcat(info_string, "SoftHand sensor resolution: ");
 3496              		.loc 1 722 0
 3497 0312 7868     		ldr	r0, [r7, #4]
 3498 0314 FFF7FEFF 		bl	strlen
 3499 0318 0346     		mov	r3, r0
 3500 031a 1A46     		mov	r2, r3
 3501 031c 7B68     		ldr	r3, [r7, #4]
 3502 031e 1344     		add	r3, r3, r2
 3503 0320 A94A     		ldr	r2, .L185+4
 3504 0322 1D46     		mov	r5, r3
 3505 0324 1446     		mov	r4, r2
 3506 0326 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3507 0328 2860     		str	r0, [r5]	@ unaligned
 3508 032a 6960     		str	r1, [r5, #4]	@ unaligned
 3509 032c AA60     		str	r2, [r5, #8]	@ unaligned
 3510 032e EB60     		str	r3, [r5, #12]	@ unaligned
 3511 0330 07CC     		ldmia	r4!, {r0, r1, r2}
 3512 0332 2861     		str	r0, [r5, #16]	@ unaligned
 3513 0334 6961     		str	r1, [r5, #20]	@ unaligned
 3514 0336 AA61     		str	r2, [r5, #24]	@ unaligned
 3515 0338 2378     		ldrb	r3, [r4]
 3516 033a 2B77     		strb	r3, [r5, #28]
 723:..\src/command_processing.c ****             
 724:..\src/command_processing.c ****                 sprintf(str, "%d\r\n", (int) MEM_P->SH_config.res);
 3517              		.loc 1 724 0
 3518 033c 3B6F     		ldr	r3, [r7, #112]
 3519 033e 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 3520 0342 1A46     		mov	r2, r3
 3521 0344 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 94


 3522 0348 A049     		ldr	r1, .L185+8
 3523 034a 1846     		mov	r0, r3
 3524 034c FFF7FEFF 		bl	sprintf
 725:..\src/command_processing.c ****                 strcat(info_string, str);
 3525              		.loc 1 725 0
 3526 0350 07F10C03 		add	r3, r7, #12
 3527 0354 1946     		mov	r1, r3
 3528 0356 7868     		ldr	r0, [r7, #4]
 3529 0358 FFF7FEFF 		bl	strcat
 726:..\src/command_processing.c ****                 
 727:..\src/command_processing.c **** 
 728:..\src/command_processing.c ****             sprintf(str, "Position limit SoftHand: inf -> %ld  ", (int32)MEM_P->SH_config.pos_lim_i
 3530              		.loc 1 728 0
 3531 035c 3B6F     		ldr	r3, [r7, #112]
 3532 035e 1B6A     		ldr	r3, [r3, #32]
 3533 0360 3A6F     		ldr	r2, [r7, #112]
 3534 0362 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3535 0366 43FA02F2 		asr	r2, r3, r2
 3536 036a 07F10C03 		add	r3, r7, #12
 3537 036e 9849     		ldr	r1, .L185+12
 3538 0370 1846     		mov	r0, r3
 3539 0372 FFF7FEFF 		bl	sprintf
 729:..\src/command_processing.c ****             strcat(info_string, str);
 3540              		.loc 1 729 0
 3541 0376 07F10C03 		add	r3, r7, #12
 3542 037a 1946     		mov	r1, r3
 3543 037c 7868     		ldr	r0, [r7, #4]
 3544 037e FFF7FEFF 		bl	strcat
 730:..\src/command_processing.c ****             sprintf(str, "sup -> %ld\r\n", (int32)MEM_P->SH_config.pos_lim_sup >> MEM_P->SH_config.
 3545              		.loc 1 730 0
 3546 0382 3B6F     		ldr	r3, [r7, #112]
 3547 0384 5B6A     		ldr	r3, [r3, #36]
 3548 0386 3A6F     		ldr	r2, [r7, #112]
 3549 0388 92F82920 		ldrb	r2, [r2, #41]	@ zero_extendqisi2
 3550 038c 43FA02F2 		asr	r2, r3, r2
 3551 0390 07F10C03 		add	r3, r7, #12
 3552 0394 8F49     		ldr	r1, .L185+16
 3553 0396 1846     		mov	r0, r3
 3554 0398 FFF7FEFF 		bl	sprintf
 731:..\src/command_processing.c ****             strcat(info_string, str);
 3555              		.loc 1 731 0
 3556 039c 07F10C03 		add	r3, r7, #12
 3557 03a0 1946     		mov	r1, r3
 3558 03a2 7868     		ldr	r0, [r7, #4]
 3559 03a4 FFF7FEFF 		bl	strcat
 732:..\src/command_processing.c **** 
 733:..\src/command_processing.c ****          
 734:..\src/command_processing.c ****       
 735:..\src/command_processing.c ****         strcat(info_string, "EMG CONFIGURATION\r\n");
 3560              		.loc 1 735 0
 3561 03a8 7868     		ldr	r0, [r7, #4]
 3562 03aa FFF7FEFF 		bl	strlen
 3563 03ae 0346     		mov	r3, r0
 3564 03b0 1A46     		mov	r2, r3
 3565 03b2 7B68     		ldr	r3, [r7, #4]
 3566 03b4 1344     		add	r3, r3, r2
 3567 03b6 884A     		ldr	r2, .L185+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 95


 3568 03b8 1D46     		mov	r5, r3
 3569 03ba 1446     		mov	r4, r2
 3570 03bc 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3571 03be 2860     		str	r0, [r5]	@ unaligned
 3572 03c0 6960     		str	r1, [r5, #4]	@ unaligned
 3573 03c2 AA60     		str	r2, [r5, #8]	@ unaligned
 3574 03c4 EB60     		str	r3, [r5, #12]	@ unaligned
 3575 03c6 2068     		ldr	r0, [r4]	@ unaligned
 3576 03c8 2861     		str	r0, [r5, #16]	@ unaligned
 736:..\src/command_processing.c ****         sprintf(str, "EMG thresholds [0 - 1024]: %u, %u", MEM_P->emg.emg_threshold[0], MEM_P->emg.e
 3577              		.loc 1 736 0
 3578 03ca 3B6F     		ldr	r3, [r7, #112]
 3579 03cc 1B8E     		ldrh	r3, [r3, #48]
 3580 03ce 1A46     		mov	r2, r3
 3581 03d0 3B6F     		ldr	r3, [r7, #112]
 3582 03d2 5B8E     		ldrh	r3, [r3, #50]
 3583 03d4 07F10C00 		add	r0, r7, #12
 3584 03d8 8049     		ldr	r1, .L185+24
 3585 03da FFF7FEFF 		bl	sprintf
 737:..\src/command_processing.c ****         strcat(info_string, str);
 3586              		.loc 1 737 0
 3587 03de 07F10C03 		add	r3, r7, #12
 3588 03e2 1946     		mov	r1, r3
 3589 03e4 7868     		ldr	r0, [r7, #4]
 3590 03e6 FFF7FEFF 		bl	strcat
 738:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3591              		.loc 1 738 0
 3592 03ea 7868     		ldr	r0, [r7, #4]
 3593 03ec FFF7FEFF 		bl	strlen
 3594 03f0 0346     		mov	r3, r0
 3595 03f2 1A46     		mov	r2, r3
 3596 03f4 7B68     		ldr	r3, [r7, #4]
 3597 03f6 1344     		add	r3, r3, r2
 3598 03f8 794A     		ldr	r2, .L185+28
 3599 03fa 1188     		ldrh	r1, [r2]	@ unaligned
 3600 03fc 9278     		ldrb	r2, [r2, #2]
 3601 03fe 1980     		strh	r1, [r3]	@ unaligned
 3602 0400 9A70     		strb	r2, [r3, #2]
 739:..\src/command_processing.c **** 
 740:..\src/command_processing.c ****         sprintf(str, "EMG max values [0 - 4096]: %lu, %lu", MEM_P->emg.emg_max_value[0], MEM_P->emg
 3603              		.loc 1 740 0
 3604 0402 3B6F     		ldr	r3, [r7, #112]
 3605 0404 5A6B     		ldr	r2, [r3, #52]
 3606 0406 3B6F     		ldr	r3, [r7, #112]
 3607 0408 9B6B     		ldr	r3, [r3, #56]
 3608 040a 07F10C00 		add	r0, r7, #12
 3609 040e 7549     		ldr	r1, .L185+32
 3610 0410 FFF7FEFF 		bl	sprintf
 741:..\src/command_processing.c ****         strcat(info_string, str);
 3611              		.loc 1 741 0
 3612 0414 07F10C03 		add	r3, r7, #12
 3613 0418 1946     		mov	r1, r3
 3614 041a 7868     		ldr	r0, [r7, #4]
 3615 041c FFF7FEFF 		bl	strcat
 742:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3616              		.loc 1 742 0
 3617 0420 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 96


 3618 0422 FFF7FEFF 		bl	strlen
 3619 0426 0346     		mov	r3, r0
 3620 0428 1A46     		mov	r2, r3
 3621 042a 7B68     		ldr	r3, [r7, #4]
 3622 042c 1344     		add	r3, r3, r2
 3623 042e 6C4A     		ldr	r2, .L185+28
 3624 0430 1188     		ldrh	r1, [r2]	@ unaligned
 3625 0432 9278     		ldrb	r2, [r2, #2]
 3626 0434 1980     		strh	r1, [r3]	@ unaligned
 3627 0436 9A70     		strb	r2, [r3, #2]
 743:..\src/command_processing.c **** 
 744:..\src/command_processing.c ****         if (MEM_P->emg.switch_emg)
 3628              		.loc 1 744 0
 3629 0438 3B6F     		ldr	r3, [r7, #112]
 3630 043a 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 3631 043e 002B     		cmp	r3, #0
 3632 0440 13D0     		beq	.L172
 745:..\src/command_processing.c ****             strcat(info_string, "EMG inversion: YES\r\n");
 3633              		.loc 1 745 0
 3634 0442 7868     		ldr	r0, [r7, #4]
 3635 0444 FFF7FEFF 		bl	strlen
 3636 0448 0346     		mov	r3, r0
 3637 044a 1A46     		mov	r2, r3
 3638 044c 7B68     		ldr	r3, [r7, #4]
 3639 044e 1344     		add	r3, r3, r2
 3640 0450 654A     		ldr	r2, .L185+36
 3641 0452 1D46     		mov	r5, r3
 3642 0454 1446     		mov	r4, r2
 3643 0456 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3644 0458 2860     		str	r0, [r5]	@ unaligned
 3645 045a 6960     		str	r1, [r5, #4]	@ unaligned
 3646 045c AA60     		str	r2, [r5, #8]	@ unaligned
 3647 045e EB60     		str	r3, [r5, #12]	@ unaligned
 3648 0460 2068     		ldr	r0, [r4]	@ unaligned
 3649 0462 2861     		str	r0, [r5, #16]	@ unaligned
 3650 0464 2379     		ldrb	r3, [r4, #4]
 3651 0466 2B75     		strb	r3, [r5, #20]
 3652 0468 10E0     		b	.L173
 3653              	.L172:
 746:..\src/command_processing.c ****         else
 747:..\src/command_processing.c ****             strcat(info_string, "EMG inversion: NO\r\n");
 3654              		.loc 1 747 0
 3655 046a 7868     		ldr	r0, [r7, #4]
 3656 046c FFF7FEFF 		bl	strlen
 3657 0470 0346     		mov	r3, r0
 3658 0472 1A46     		mov	r2, r3
 3659 0474 7B68     		ldr	r3, [r7, #4]
 3660 0476 1344     		add	r3, r3, r2
 3661 0478 5C4A     		ldr	r2, .L185+40
 3662 047a 1D46     		mov	r5, r3
 3663 047c 1446     		mov	r4, r2
 3664 047e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3665 0480 2860     		str	r0, [r5]	@ unaligned
 3666 0482 6960     		str	r1, [r5, #4]	@ unaligned
 3667 0484 AA60     		str	r2, [r5, #8]	@ unaligned
 3668 0486 EB60     		str	r3, [r5, #12]	@ unaligned
 3669 0488 2068     		ldr	r0, [r4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 97


 3670 048a 2861     		str	r0, [r5, #16]	@ unaligned
 3671              	.L173:
 748:..\src/command_processing.c ****         
 749:..\src/command_processing.c **** 
 750:..\src/command_processing.c ****         sprintf(str, "EMG max speed: %d %d", (int)MEM_P->emg.emg_speed[0], (int)MEM_P->emg.emg_spee
 3672              		.loc 1 750 0
 3673 048c 3B6F     		ldr	r3, [r7, #112]
 3674 048e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3675 0492 1A46     		mov	r2, r3
 3676 0494 3B6F     		ldr	r3, [r7, #112]
 3677 0496 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 3678 049a 07F10C00 		add	r0, r7, #12
 3679 049e 5449     		ldr	r1, .L185+44
 3680 04a0 FFF7FEFF 		bl	sprintf
 751:..\src/command_processing.c ****         strcat(info_string, str);
 3681              		.loc 1 751 0
 3682 04a4 07F10C03 		add	r3, r7, #12
 3683 04a8 1946     		mov	r1, r3
 3684 04aa 7868     		ldr	r0, [r7, #4]
 3685 04ac FFF7FEFF 		bl	strcat
 752:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 3686              		.loc 1 752 0
 3687 04b0 7868     		ldr	r0, [r7, #4]
 3688 04b2 FFF7FEFF 		bl	strlen
 3689 04b6 0346     		mov	r3, r0
 3690 04b8 1A46     		mov	r2, r3
 3691 04ba 7B68     		ldr	r3, [r7, #4]
 3692 04bc 1344     		add	r3, r3, r2
 3693 04be 484A     		ldr	r2, .L185+28
 3694 04c0 1188     		ldrh	r1, [r2]	@ unaligned
 3695 04c2 9278     		ldrb	r2, [r2, #2]
 3696 04c4 1980     		strh	r1, [r3]	@ unaligned
 3697 04c6 9A70     		strb	r2, [r3, #2]
 753:..\src/command_processing.c **** 
 754:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 3698              		.loc 1 754 0
 3699 04c8 0023     		movs	r3, #0
 3700 04ca 7B67     		str	r3, [r7, #116]
 3701 04cc 20E0     		b	.L174
 3702              	.L175:
 755:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3703              		.loc 1 755 0 discriminator 3
 3704 04ce 7B6F     		ldr	r3, [r7, #116]
 3705 04d0 591C     		adds	r1, r3, #1
 3706 04d2 484A     		ldr	r2, .L185+48
 3707 04d4 7B6F     		ldr	r3, [r7, #116]
 3708 04d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3709 04da 07F10C00 		add	r0, r7, #12
 3710 04de 0A46     		mov	r2, r1
 3711 04e0 4549     		ldr	r1, .L185+52
 3712 04e2 FFF7FEFF 		bl	sprintf
 756:..\src/command_processing.c ****                 strcat(info_string, str);
 3713              		.loc 1 756 0 discriminator 3
 3714 04e6 07F10C03 		add	r3, r7, #12
 3715 04ea 1946     		mov	r1, r3
 3716 04ec 7868     		ldr	r0, [r7, #4]
 3717 04ee FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 98


 757:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 3718              		.loc 1 757 0 discriminator 3
 3719 04f2 7868     		ldr	r0, [r7, #4]
 3720 04f4 FFF7FEFF 		bl	strlen
 3721 04f8 0346     		mov	r3, r0
 3722 04fa 1A46     		mov	r2, r3
 3723 04fc 7B68     		ldr	r3, [r7, #4]
 3724 04fe 1344     		add	r3, r3, r2
 3725 0500 374A     		ldr	r2, .L185+28
 3726 0502 1188     		ldrh	r1, [r2]	@ unaligned
 3727 0504 9278     		ldrb	r2, [r2, #2]
 3728 0506 1980     		strh	r1, [r3]	@ unaligned
 3729 0508 9A70     		strb	r2, [r3, #2]
 754:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3730              		.loc 1 754 0 discriminator 3
 3731 050a 7B6F     		ldr	r3, [r7, #116]
 3732 050c 0133     		adds	r3, r3, #1
 3733 050e 7B67     		str	r3, [r7, #116]
 3734              	.L174:
 754:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 3735              		.loc 1 754 0 is_stmt 0 discriminator 1
 3736 0510 7B6F     		ldr	r3, [r7, #116]
 3737 0512 012B     		cmp	r3, #1
 3738 0514 DBDD     		ble	.L175
 758:..\src/command_processing.c ****             }
 759:..\src/command_processing.c ****          
 760:..\src/command_processing.c **** 
 761:..\src/command_processing.c ****         if (MEM_P->MS.master_mode_active)
 3739              		.loc 1 761 0 is_stmt 1
 3740 0516 3B6F     		ldr	r3, [r7, #112]
 3741 0518 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 3742 051c 002B     		cmp	r3, #0
 3743 051e 14D0     		beq	.L176
 762:..\src/command_processing.c ****             strcat(info_string, "Master Mode active: YES\r\n");
 3744              		.loc 1 762 0
 3745 0520 7868     		ldr	r0, [r7, #4]
 3746 0522 FFF7FEFF 		bl	strlen
 3747 0526 0346     		mov	r3, r0
 3748 0528 1A46     		mov	r2, r3
 3749 052a 7B68     		ldr	r3, [r7, #4]
 3750 052c 1344     		add	r3, r3, r2
 3751 052e 334A     		ldr	r2, .L185+56
 3752 0530 1D46     		mov	r5, r3
 3753 0532 1446     		mov	r4, r2
 3754 0534 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3755 0536 2860     		str	r0, [r5]	@ unaligned
 3756 0538 6960     		str	r1, [r5, #4]	@ unaligned
 3757 053a AA60     		str	r2, [r5, #8]	@ unaligned
 3758 053c EB60     		str	r3, [r5, #12]	@ unaligned
 3759 053e 03CC     		ldmia	r4!, {r0, r1}
 3760 0540 2861     		str	r0, [r5, #16]	@ unaligned
 3761 0542 6961     		str	r1, [r5, #20]	@ unaligned
 3762 0544 2388     		ldrh	r3, [r4]	@ unaligned
 3763 0546 2B83     		strh	r3, [r5, #24]	@ unaligned
 3764 0548 13E0     		b	.L177
 3765              	.L176:
 763:..\src/command_processing.c ****         else
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 99


 764:..\src/command_processing.c ****             strcat(info_string, "Master Mode active: NO\r\n");
 3766              		.loc 1 764 0
 3767 054a 7868     		ldr	r0, [r7, #4]
 3768 054c FFF7FEFF 		bl	strlen
 3769 0550 0346     		mov	r3, r0
 3770 0552 1A46     		mov	r2, r3
 3771 0554 7B68     		ldr	r3, [r7, #4]
 3772 0556 1344     		add	r3, r3, r2
 3773 0558 294A     		ldr	r2, .L185+60
 3774 055a 1D46     		mov	r5, r3
 3775 055c 1446     		mov	r4, r2
 3776 055e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3777 0560 2860     		str	r0, [r5]	@ unaligned
 3778 0562 6960     		str	r1, [r5, #4]	@ unaligned
 3779 0564 AA60     		str	r2, [r5, #8]	@ unaligned
 3780 0566 EB60     		str	r3, [r5, #12]	@ unaligned
 3781 0568 03CC     		ldmia	r4!, {r0, r1}
 3782 056a 2861     		str	r0, [r5, #16]	@ unaligned
 3783 056c 6961     		str	r1, [r5, #20]	@ unaligned
 3784 056e 2378     		ldrb	r3, [r4]
 3785 0570 2B76     		strb	r3, [r5, #24]
 3786              	.L177:
 765:..\src/command_processing.c **** 
 766:..\src/command_processing.c ****         sprintf(str, "Slave ID: %d\r\n", (int)MEM_P->MS.slave_ID);
 3787              		.loc 1 766 0
 3788 0572 3B6F     		ldr	r3, [r7, #112]
 3789 0574 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3790 0578 1A46     		mov	r2, r3
 3791 057a 07F10C03 		add	r3, r7, #12
 3792 057e 2149     		ldr	r1, .L185+64
 3793 0580 1846     		mov	r0, r3
 3794 0582 FFF7FEFF 		bl	sprintf
 767:..\src/command_processing.c ****         strcat(info_string, str);
 3795              		.loc 1 767 0
 3796 0586 07F10C03 		add	r3, r7, #12
 3797 058a 1946     		mov	r1, r3
 3798 058c 7868     		ldr	r0, [r7, #4]
 3799 058e FFF7FEFF 		bl	strcat
 768:..\src/command_processing.c **** 
 769:..\src/command_processing.c ****         if (MEM_P->FB.airchamber_feedback_active)
 3800              		.loc 1 769 0
 3801 0592 3B6F     		ldr	r3, [r7, #112]
 3802 0594 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 3803 0598 002B     		cmp	r3, #0
 3804 059a 37D0     		beq	.L178
 770:..\src/command_processing.c ****             strcat(info_string, "Airchamber FB active: YES\r\n");
 3805              		.loc 1 770 0
 3806 059c 7868     		ldr	r0, [r7, #4]
 3807 059e FFF7FEFF 		bl	strlen
 3808 05a2 0346     		mov	r3, r0
 3809 05a4 1A46     		mov	r2, r3
 3810 05a6 7B68     		ldr	r3, [r7, #4]
 3811 05a8 1344     		add	r3, r3, r2
 3812 05aa 174A     		ldr	r2, .L185+68
 3813 05ac 1D46     		mov	r5, r3
 3814 05ae 1446     		mov	r4, r2
 3815 05b0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 100


 3816 05b2 2860     		str	r0, [r5]	@ unaligned
 3817 05b4 6960     		str	r1, [r5, #4]	@ unaligned
 3818 05b6 AA60     		str	r2, [r5, #8]	@ unaligned
 3819 05b8 EB60     		str	r3, [r5, #12]	@ unaligned
 3820 05ba 07CC     		ldmia	r4!, {r0, r1, r2}
 3821 05bc 2861     		str	r0, [r5, #16]	@ unaligned
 3822 05be 6961     		str	r1, [r5, #20]	@ unaligned
 3823 05c0 AA61     		str	r2, [r5, #24]	@ unaligned
 3824 05c2 3AE0     		b	.L179
 3825              	.L186:
 3826              		.align	2
 3827              	.L185:
 3828 05c4 9C030000 		.word	.LC48
 3829 05c8 CC030000 		.word	.LC49
 3830 05cc EC030000 		.word	.LC50
 3831 05d0 F4030000 		.word	.LC51
 3832 05d4 1C040000 		.word	.LC52
 3833 05d8 2C040000 		.word	.LC53
 3834 05dc 40040000 		.word	.LC54
 3835 05e0 78020000 		.word	.LC34
 3836 05e4 64040000 		.word	.LC55
 3837 05e8 88040000 		.word	.LC56
 3838 05ec A0040000 		.word	.LC57
 3839 05f0 B4040000 		.word	.LC58
 3840 05f4 00000000 		.word	g_adc_meas
 3841 05f8 CC040000 		.word	.LC59
 3842 05fc E0040000 		.word	.LC60
 3843 0600 FC040000 		.word	.LC61
 3844 0604 18050000 		.word	.LC62
 3845 0608 28050000 		.word	.LC63
 3846              	.L178:
 771:..\src/command_processing.c ****         else
 772:..\src/command_processing.c ****             strcat(info_string, "Airchamber FB active: NO\r\n");
 3847              		.loc 1 772 0
 3848 060c 7868     		ldr	r0, [r7, #4]
 3849 060e FFF7FEFF 		bl	strlen
 3850 0612 0346     		mov	r3, r0
 3851 0614 1A46     		mov	r2, r3
 3852 0616 7B68     		ldr	r3, [r7, #4]
 3853 0618 1344     		add	r3, r3, r2
 3854 061a 314A     		ldr	r2, .L187
 3855 061c 1D46     		mov	r5, r3
 3856 061e 1446     		mov	r4, r2
 3857 0620 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3858 0622 2860     		str	r0, [r5]	@ unaligned
 3859 0624 6960     		str	r1, [r5, #4]	@ unaligned
 3860 0626 AA60     		str	r2, [r5, #8]	@ unaligned
 3861 0628 EB60     		str	r3, [r5, #12]	@ unaligned
 3862 062a 03CC     		ldmia	r4!, {r0, r1}
 3863 062c 2861     		str	r0, [r5, #16]	@ unaligned
 3864 062e 6961     		str	r1, [r5, #20]	@ unaligned
 3865 0630 2388     		ldrh	r3, [r4]	@ unaligned
 3866 0632 A278     		ldrb	r2, [r4, #2]
 3867 0634 2B83     		strh	r3, [r5, #24]	@ unaligned
 3868 0636 1346     		mov	r3, r2
 3869 0638 AB76     		strb	r3, [r5, #26]
 3870              	.L179:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 101


 773:..\src/command_processing.c ****             
 774:..\src/command_processing.c ****         if (MEM_P->FB.vibrotactile_feedback_active)
 3871              		.loc 1 774 0
 3872 063a 3B6F     		ldr	r3, [r7, #112]
 3873 063c 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 3874 0640 002B     		cmp	r3, #0
 3875 0642 15D0     		beq	.L180
 775:..\src/command_processing.c ****             strcat(info_string, "Vibrotactile FB active: YES\r\n");
 3876              		.loc 1 775 0
 3877 0644 7868     		ldr	r0, [r7, #4]
 3878 0646 FFF7FEFF 		bl	strlen
 3879 064a 0346     		mov	r3, r0
 3880 064c 1A46     		mov	r2, r3
 3881 064e 7B68     		ldr	r3, [r7, #4]
 3882 0650 1344     		add	r3, r3, r2
 3883 0652 244A     		ldr	r2, .L187+4
 3884 0654 1D46     		mov	r5, r3
 3885 0656 1446     		mov	r4, r2
 3886 0658 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3887 065a 2860     		str	r0, [r5]	@ unaligned
 3888 065c 6960     		str	r1, [r5, #4]	@ unaligned
 3889 065e AA60     		str	r2, [r5, #8]	@ unaligned
 3890 0660 EB60     		str	r3, [r5, #12]	@ unaligned
 3891 0662 07CC     		ldmia	r4!, {r0, r1, r2}
 3892 0664 2861     		str	r0, [r5, #16]	@ unaligned
 3893 0666 6961     		str	r1, [r5, #20]	@ unaligned
 3894 0668 AA61     		str	r2, [r5, #24]	@ unaligned
 3895 066a 2388     		ldrh	r3, [r4]	@ unaligned
 3896 066c AB83     		strh	r3, [r5, #28]	@ unaligned
 3897 066e 14E0     		b	.L181
 3898              	.L180:
 776:..\src/command_processing.c ****         else
 777:..\src/command_processing.c ****             strcat(info_string, "Vibrotactile FB active: NO\r\n");
 3899              		.loc 1 777 0
 3900 0670 7868     		ldr	r0, [r7, #4]
 3901 0672 FFF7FEFF 		bl	strlen
 3902 0676 0346     		mov	r3, r0
 3903 0678 1A46     		mov	r2, r3
 3904 067a 7B68     		ldr	r3, [r7, #4]
 3905 067c 1344     		add	r3, r3, r2
 3906 067e 1A4A     		ldr	r2, .L187+8
 3907 0680 1D46     		mov	r5, r3
 3908 0682 1446     		mov	r4, r2
 3909 0684 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3910 0686 2860     		str	r0, [r5]	@ unaligned
 3911 0688 6960     		str	r1, [r5, #4]	@ unaligned
 3912 068a AA60     		str	r2, [r5, #8]	@ unaligned
 3913 068c EB60     		str	r3, [r5, #12]	@ unaligned
 3914 068e 07CC     		ldmia	r4!, {r0, r1, r2}
 3915 0690 2861     		str	r0, [r5, #16]	@ unaligned
 3916 0692 6961     		str	r1, [r5, #20]	@ unaligned
 3917 0694 AA61     		str	r2, [r5, #24]	@ unaligned
 3918 0696 2378     		ldrb	r3, [r4]
 3919 0698 2B77     		strb	r3, [r5, #28]
 3920              	.L181:
 778:..\src/command_processing.c **** 
 779:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 102


 780:..\src/command_processing.c ****         sprintf(str, "Last FW cycle time: %u us\r\n", (uint16)timer_value0 - (uint16)timer_value);
 3921              		.loc 1 780 0
 3922 069a 144B     		ldr	r3, .L187+12
 3923 069c 1B88     		ldrh	r3, [r3]
 3924 069e 1A46     		mov	r2, r3
 3925 06a0 134B     		ldr	r3, .L187+16
 3926 06a2 1B88     		ldrh	r3, [r3]
 3927 06a4 D21A     		subs	r2, r2, r3
 3928 06a6 07F10C03 		add	r3, r7, #12
 3929 06aa 1249     		ldr	r1, .L187+20
 3930 06ac 1846     		mov	r0, r3
 3931 06ae FFF7FEFF 		bl	sprintf
 781:..\src/command_processing.c ****         strcat(info_string, str);
 3932              		.loc 1 781 0
 3933 06b2 07F10C03 		add	r3, r7, #12
 3934 06b6 1946     		mov	r1, r3
 3935 06b8 7868     		ldr	r0, [r7, #4]
 3936 06ba FFF7FEFF 		bl	strcat
 782:..\src/command_processing.c ****   
 783:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 3937              		.loc 1 783 0
 3938 06be 7868     		ldr	r0, [r7, #4]
 3939 06c0 FFF7FEFF 		bl	strlen
 3940 06c4 0346     		mov	r3, r0
 3941 06c6 1A46     		mov	r2, r3
 3942 06c8 7B68     		ldr	r3, [r7, #4]
 3943 06ca 1344     		add	r3, r3, r2
 3944 06cc 0A4A     		ldr	r2, .L187+24
 3945 06ce 1188     		ldrh	r1, [r2]	@ unaligned
 3946 06d0 9278     		ldrb	r2, [r2, #2]
 3947 06d2 1980     		strh	r1, [r3]	@ unaligned
 3948 06d4 9A70     		strb	r2, [r3, #2]
 3949              	.L182:
 3950              	.LBE25:
 784:..\src/command_processing.c ****     }
 785:..\src/command_processing.c **** }
 3951              		.loc 1 785 0
 3952 06d6 00BF     		nop
 3953 06d8 7C37     		adds	r7, r7, #124
 3954              		.cfi_def_cfa_offset 20
 3955 06da BD46     		mov	sp, r7
 3956              		.cfi_def_cfa_register 13
 3957              		@ sp needed
 3958 06dc F0BD     		pop	{r4, r5, r6, r7, pc}
 3959              	.L188:
 3960 06de 00BF     		.align	2
 3961              	.L187:
 3962 06e0 44050000 		.word	.LC64
 3963 06e4 60050000 		.word	.LC65
 3964 06e8 80050000 		.word	.LC66
 3965 06ec 00000000 		.word	timer_value0
 3966 06f0 00000000 		.word	timer_value
 3967 06f4 A0050000 		.word	.LC67
 3968 06f8 BC050000 		.word	.LC68
 3969              		.cfi_endproc
 3970              	.LFE73:
 3971              		.size	prepare_generic_info, .-prepare_generic_info
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 103


 3972              		.section	.text.prepare_counter_info,"ax",%progbits
 3973              		.align	2
 3974              		.global	prepare_counter_info
 3975              		.thumb
 3976              		.thumb_func
 3977              		.type	prepare_counter_info, %function
 3978              	prepare_counter_info:
 3979              	.LFB74:
 786:..\src/command_processing.c **** 
 787:..\src/command_processing.c **** //==============================================================================
 788:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 789:..\src/command_processing.c **** //==============================================================================
 790:..\src/command_processing.c **** 
 791:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
 792:..\src/command_processing.c **** {
 3980              		.loc 1 792 0
 3981              		.cfi_startproc
 3982              		@ args = 0, pretend = 0, frame = 8
 3983              		@ frame_needed = 1, uses_anonymous_args = 0
 3984              		@ link register save eliminated.
 3985 0000 80B4     		push	{r7}
 3986              		.cfi_def_cfa_offset 4
 3987              		.cfi_offset 7, -4
 3988 0002 83B0     		sub	sp, sp, #12
 3989              		.cfi_def_cfa_offset 16
 3990 0004 00AF     		add	r7, sp, #0
 3991              		.cfi_def_cfa_register 7
 3992 0006 7860     		str	r0, [r7, #4]
 793:..\src/command_processing.c **** }
 3993              		.loc 1 793 0
 3994 0008 00BF     		nop
 3995 000a 0C37     		adds	r7, r7, #12
 3996              		.cfi_def_cfa_offset 4
 3997 000c BD46     		mov	sp, r7
 3998              		.cfi_def_cfa_register 13
 3999              		@ sp needed
 4000 000e 80BC     		pop	{r7}
 4001              		.cfi_restore 7
 4002              		.cfi_def_cfa_offset 0
 4003 0010 7047     		bx	lr
 4004              		.cfi_endproc
 4005              	.LFE74:
 4006              		.size	prepare_counter_info, .-prepare_counter_info
 4007 0012 00BF     		.section	.text.prepare_R01_info,"ax",%progbits
 4008              		.align	2
 4009              		.global	prepare_R01_info
 4010              		.thumb
 4011              		.thumb_func
 4012              		.type	prepare_R01_info, %function
 4013              	prepare_R01_info:
 4014              	.LFB75:
 794:..\src/command_processing.c **** 
 795:..\src/command_processing.c **** //==============================================================================
 796:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
 797:..\src/command_processing.c **** //==============================================================================
 798:..\src/command_processing.c **** 
 799:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 104


 800:..\src/command_processing.c **** {
 4015              		.loc 1 800 0
 4016              		.cfi_startproc
 4017              		@ args = 0, pretend = 0, frame = 8
 4018              		@ frame_needed = 1, uses_anonymous_args = 0
 4019              		@ link register save eliminated.
 4020 0000 80B4     		push	{r7}
 4021              		.cfi_def_cfa_offset 4
 4022              		.cfi_offset 7, -4
 4023 0002 83B0     		sub	sp, sp, #12
 4024              		.cfi_def_cfa_offset 16
 4025 0004 00AF     		add	r7, sp, #0
 4026              		.cfi_def_cfa_register 7
 4027 0006 7860     		str	r0, [r7, #4]
 801:..\src/command_processing.c **** }
 4028              		.loc 1 801 0
 4029 0008 00BF     		nop
 4030 000a 0C37     		adds	r7, r7, #12
 4031              		.cfi_def_cfa_offset 4
 4032 000c BD46     		mov	sp, r7
 4033              		.cfi_def_cfa_register 13
 4034              		@ sp needed
 4035 000e 80BC     		pop	{r7}
 4036              		.cfi_restore 7
 4037              		.cfi_def_cfa_offset 0
 4038 0010 7047     		bx	lr
 4039              		.cfi_endproc
 4040              	.LFE75:
 4041              		.size	prepare_R01_info, .-prepare_R01_info
 4042 0012 00BF     		.section	.text.prepare_SD_param_info,"ax",%progbits
 4043              		.align	2
 4044              		.global	prepare_SD_param_info
 4045              		.thumb
 4046              		.thumb_func
 4047              		.type	prepare_SD_param_info, %function
 4048              	prepare_SD_param_info:
 4049              	.LFB76:
 802:..\src/command_processing.c **** 
 803:..\src/command_processing.c **** //==============================================================================
 804:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
 805:..\src/command_processing.c **** //==============================================================================
 806:..\src/command_processing.c **** 
 807:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
 808:..\src/command_processing.c **** {
 4050              		.loc 1 808 0
 4051              		.cfi_startproc
 4052              		@ args = 0, pretend = 0, frame = 8
 4053              		@ frame_needed = 1, uses_anonymous_args = 0
 4054              		@ link register save eliminated.
 4055 0000 80B4     		push	{r7}
 4056              		.cfi_def_cfa_offset 4
 4057              		.cfi_offset 7, -4
 4058 0002 83B0     		sub	sp, sp, #12
 4059              		.cfi_def_cfa_offset 16
 4060 0004 00AF     		add	r7, sp, #0
 4061              		.cfi_def_cfa_register 7
 4062 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 105


 809:..\src/command_processing.c **** }
 4063              		.loc 1 809 0
 4064 0008 00BF     		nop
 4065 000a 0C37     		adds	r7, r7, #12
 4066              		.cfi_def_cfa_offset 4
 4067 000c BD46     		mov	sp, r7
 4068              		.cfi_def_cfa_register 13
 4069              		@ sp needed
 4070 000e 80BC     		pop	{r7}
 4071              		.cfi_restore 7
 4072              		.cfi_def_cfa_offset 0
 4073 0010 7047     		bx	lr
 4074              		.cfi_endproc
 4075              	.LFE76:
 4076              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 4077 0012 00BF     		.section	.text.prepare_SD_legend,"ax",%progbits
 4078              		.align	2
 4079              		.global	prepare_SD_legend
 4080              		.thumb
 4081              		.thumb_func
 4082              		.type	prepare_SD_legend, %function
 4083              	prepare_SD_legend:
 4084              	.LFB77:
 810:..\src/command_processing.c **** 
 811:..\src/command_processing.c **** 
 812:..\src/command_processing.c **** //==============================================================================
 813:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
 814:..\src/command_processing.c **** //==============================================================================
 815:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
 816:..\src/command_processing.c **** {
 4085              		.loc 1 816 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 8
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089              		@ link register save eliminated.
 4090 0000 80B4     		push	{r7}
 4091              		.cfi_def_cfa_offset 4
 4092              		.cfi_offset 7, -4
 4093 0002 83B0     		sub	sp, sp, #12
 4094              		.cfi_def_cfa_offset 16
 4095 0004 00AF     		add	r7, sp, #0
 4096              		.cfi_def_cfa_register 7
 4097 0006 7860     		str	r0, [r7, #4]
 817:..\src/command_processing.c **** }
 4098              		.loc 1 817 0
 4099 0008 00BF     		nop
 4100 000a 0C37     		adds	r7, r7, #12
 4101              		.cfi_def_cfa_offset 4
 4102 000c BD46     		mov	sp, r7
 4103              		.cfi_def_cfa_register 13
 4104              		@ sp needed
 4105 000e 80BC     		pop	{r7}
 4106              		.cfi_restore 7
 4107              		.cfi_def_cfa_offset 0
 4108 0010 7047     		bx	lr
 4109              		.cfi_endproc
 4110              	.LFE77:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 106


 4111              		.size	prepare_SD_legend, .-prepare_SD_legend
 4112 0012 00BF     		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 4113              		.align	2
 4114              		.global	prepare_SD_EMG_History_legend
 4115              		.thumb
 4116              		.thumb_func
 4117              		.type	prepare_SD_EMG_History_legend, %function
 4118              	prepare_SD_EMG_History_legend:
 4119              	.LFB78:
 818:..\src/command_processing.c **** 
 819:..\src/command_processing.c **** //==============================================================================
 820:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
 821:..\src/command_processing.c **** //==============================================================================
 822:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
 823:..\src/command_processing.c **** {
 4120              		.loc 1 823 0
 4121              		.cfi_startproc
 4122              		@ args = 0, pretend = 0, frame = 8
 4123              		@ frame_needed = 1, uses_anonymous_args = 0
 4124              		@ link register save eliminated.
 4125 0000 80B4     		push	{r7}
 4126              		.cfi_def_cfa_offset 4
 4127              		.cfi_offset 7, -4
 4128 0002 83B0     		sub	sp, sp, #12
 4129              		.cfi_def_cfa_offset 16
 4130 0004 00AF     		add	r7, sp, #0
 4131              		.cfi_def_cfa_register 7
 4132 0006 7860     		str	r0, [r7, #4]
 824:..\src/command_processing.c ****     
 825:..\src/command_processing.c **** }
 4133              		.loc 1 825 0
 4134 0008 00BF     		nop
 4135 000a 0C37     		adds	r7, r7, #12
 4136              		.cfi_def_cfa_offset 4
 4137 000c BD46     		mov	sp, r7
 4138              		.cfi_def_cfa_register 13
 4139              		@ sp needed
 4140 000e 80BC     		pop	{r7}
 4141              		.cfi_restore 7
 4142              		.cfi_def_cfa_offset 0
 4143 0010 7047     		bx	lr
 4144              		.cfi_endproc
 4145              	.LFE78:
 4146              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 4147 0012 00BF     		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 4148              		.align	2
 4149              		.global	prepare_SD_EMG_history
 4150              		.thumb
 4151              		.thumb_func
 4152              		.type	prepare_SD_EMG_history, %function
 4153              	prepare_SD_EMG_history:
 4154              	.LFB79:
 826:..\src/command_processing.c **** 
 827:..\src/command_processing.c **** //==============================================================================
 828:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
 829:..\src/command_processing.c **** //==============================================================================
 830:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 107


 831:..\src/command_processing.c **** {
 4155              		.loc 1 831 0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 8
 4158              		@ frame_needed = 1, uses_anonymous_args = 0
 4159              		@ link register save eliminated.
 4160 0000 80B4     		push	{r7}
 4161              		.cfi_def_cfa_offset 4
 4162              		.cfi_offset 7, -4
 4163 0002 83B0     		sub	sp, sp, #12
 4164              		.cfi_def_cfa_offset 16
 4165 0004 00AF     		add	r7, sp, #0
 4166              		.cfi_def_cfa_register 7
 4167 0006 7860     		str	r0, [r7, #4]
 832:..\src/command_processing.c ****         
 833:..\src/command_processing.c **** }
 4168              		.loc 1 833 0
 4169 0008 00BF     		nop
 4170 000a 0C37     		adds	r7, r7, #12
 4171              		.cfi_def_cfa_offset 4
 4172 000c BD46     		mov	sp, r7
 4173              		.cfi_def_cfa_register 13
 4174              		@ sp needed
 4175 000e 80BC     		pop	{r7}
 4176              		.cfi_restore 7
 4177              		.cfi_def_cfa_offset 0
 4178 0010 7047     		bx	lr
 4179              		.cfi_endproc
 4180              	.LFE79:
 4181              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 4182 0012 00BF     		.section	.text.IMU_reading_info,"ax",%progbits
 4183              		.align	2
 4184              		.global	IMU_reading_info
 4185              		.thumb
 4186              		.thumb_func
 4187              		.type	IMU_reading_info, %function
 4188              	IMU_reading_info:
 4189              	.LFB80:
 834:..\src/command_processing.c **** 
 835:..\src/command_processing.c **** //==============================================================================
 836:..\src/command_processing.c **** //                                                              IMU READING INFO
 837:..\src/command_processing.c **** //==============================================================================
 838:..\src/command_processing.c **** 
 839:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
 840:..\src/command_processing.c **** {
 4190              		.loc 1 840 0
 4191              		.cfi_startproc
 4192              		@ args = 0, pretend = 0, frame = 8
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194              		@ link register save eliminated.
 4195 0000 80B4     		push	{r7}
 4196              		.cfi_def_cfa_offset 4
 4197              		.cfi_offset 7, -4
 4198 0002 83B0     		sub	sp, sp, #12
 4199              		.cfi_def_cfa_offset 16
 4200 0004 00AF     		add	r7, sp, #0
 4201              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 108


 4202 0006 7860     		str	r0, [r7, #4]
 841:..\src/command_processing.c **** }
 4203              		.loc 1 841 0
 4204 0008 00BF     		nop
 4205 000a 0C37     		adds	r7, r7, #12
 4206              		.cfi_def_cfa_offset 4
 4207 000c BD46     		mov	sp, r7
 4208              		.cfi_def_cfa_register 13
 4209              		@ sp needed
 4210 000e 80BC     		pop	{r7}
 4211              		.cfi_restore 7
 4212              		.cfi_def_cfa_offset 0
 4213 0010 7047     		bx	lr
 4214              		.cfi_endproc
 4215              	.LFE80:
 4216              		.size	IMU_reading_info, .-IMU_reading_info
 4217 0012 00BF     		.section	.text.commWrite_old_id,"ax",%progbits
 4218              		.align	2
 4219              		.global	commWrite_old_id
 4220              		.thumb
 4221              		.thumb_func
 4222              		.type	commWrite_old_id, %function
 4223              	commWrite_old_id:
 4224              	.LFB81:
 842:..\src/command_processing.c **** 
 843:..\src/command_processing.c **** //==============================================================================
 844:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
 845:..\src/command_processing.c **** //==============================================================================
 846:..\src/command_processing.c **** 
 847:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_length, uint8 old_id)
 848:..\src/command_processing.c **** {
 4225              		.loc 1 848 0
 4226              		.cfi_startproc
 4227              		@ args = 0, pretend = 0, frame = 16
 4228              		@ frame_needed = 1, uses_anonymous_args = 0
 4229 0000 80B5     		push	{r7, lr}
 4230              		.cfi_def_cfa_offset 8
 4231              		.cfi_offset 7, -8
 4232              		.cfi_offset 14, -4
 4233 0002 84B0     		sub	sp, sp, #16
 4234              		.cfi_def_cfa_offset 24
 4235 0004 00AF     		add	r7, sp, #0
 4236              		.cfi_def_cfa_register 7
 4237 0006 7860     		str	r0, [r7, #4]
 4238 0008 0B46     		mov	r3, r1
 4239 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4240 000c 1346     		mov	r3, r2
 4241 000e 7B70     		strb	r3, [r7, #1]
 849:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 850:..\src/command_processing.c **** 
 851:..\src/command_processing.c ****     // frame - start
 852:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4242              		.loc 1 852 0
 4243 0010 3A20     		movs	r0, #58
 4244 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 853:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4245              		.loc 1 853 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 109


 4246 0016 3A20     		movs	r0, #58
 4247 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 854:..\src/command_processing.c ****     // frame - ID
 855:..\src/command_processing.c ****     //if(old_id)
 856:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 4248              		.loc 1 856 0
 4249 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4250 001e 1846     		mov	r0, r3
 4251 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 857:..\src/command_processing.c ****     //else
 858:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
 859:..\src/command_processing.c ****         
 860:..\src/command_processing.c ****     // frame - length
 861:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4252              		.loc 1 861 0
 4253 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4254 0026 DBB2     		uxtb	r3, r3
 4255 0028 1846     		mov	r0, r3
 4256 002a FFF7FEFF 		bl	UART_RS485_PutChar
 862:..\src/command_processing.c ****     // frame - packet data
 863:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4257              		.loc 1 863 0
 4258 002e 0023     		movs	r3, #0
 4259 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 4260 0032 09E0     		b	.L197
 4261              	.L198:
 864:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4262              		.loc 1 864 0 discriminator 3
 4263 0034 FB89     		ldrh	r3, [r7, #14]
 4264 0036 7A68     		ldr	r2, [r7, #4]
 4265 0038 1344     		add	r3, r3, r2
 4266 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4267 003c 1846     		mov	r0, r3
 4268 003e FFF7FEFF 		bl	UART_RS485_PutChar
 863:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4269              		.loc 1 863 0 discriminator 3
 4270 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4271 0044 0133     		adds	r3, r3, #1
 4272 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4273              	.L197:
 863:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4274              		.loc 1 863 0 is_stmt 0 discriminator 1
 4275 0048 FA89     		ldrh	r2, [r7, #14]
 4276 004a 7B88     		ldrh	r3, [r7, #2]
 4277 004c 9A42     		cmp	r2, r3
 4278 004e F1D3     		bcc	.L198
 865:..\src/command_processing.c ****     }
 866:..\src/command_processing.c **** 
 867:..\src/command_processing.c ****     index = 0;
 4279              		.loc 1 867 0 is_stmt 1
 4280 0050 0023     		movs	r3, #0
 4281 0052 FB81     		strh	r3, [r7, #14]	@ movhi
 868:..\src/command_processing.c **** 
 869:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4282              		.loc 1 869 0
 4283 0054 00BF     		nop
 4284              	.L200:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 110


 4285              		.loc 1 869 0 is_stmt 0 discriminator 2
 4286 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4287 005a 0346     		mov	r3, r0
 4288 005c 03F00103 		and	r3, r3, #1
 4289 0060 002B     		cmp	r3, #0
 4290 0062 05D1     		bne	.L199
 4291              		.loc 1 869 0 discriminator 1
 4292 0064 FB89     		ldrh	r3, [r7, #14]
 4293 0066 5A1C     		adds	r2, r3, #1
 4294 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 4295 006a B3F57A7F 		cmp	r3, #1000
 4296 006e F2D9     		bls	.L200
 4297              	.L199:
 870:..\src/command_processing.c **** 
 871:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4298              		.loc 1 871 0 is_stmt 1
 4299 0070 0120     		movs	r0, #1
 4300 0072 FFF7FEFF 		bl	RS485_CTS_Write
 872:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4301              		.loc 1 872 0
 4302 0076 0020     		movs	r0, #0
 4303 0078 FFF7FEFF 		bl	RS485_CTS_Write
 873:..\src/command_processing.c **** }
 4304              		.loc 1 873 0
 4305 007c 00BF     		nop
 4306 007e 1037     		adds	r7, r7, #16
 4307              		.cfi_def_cfa_offset 8
 4308 0080 BD46     		mov	sp, r7
 4309              		.cfi_def_cfa_register 13
 4310              		@ sp needed
 4311 0082 80BD     		pop	{r7, pc}
 4312              		.cfi_endproc
 4313              	.LFE81:
 4314              		.size	commWrite_old_id, .-commWrite_old_id
 4315              		.section	.text.commWrite,"ax",%progbits
 4316              		.align	2
 4317              		.global	commWrite
 4318              		.thumb
 4319              		.thumb_func
 4320              		.type	commWrite, %function
 4321              	commWrite:
 4322              	.LFB82:
 874:..\src/command_processing.c **** 
 875:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_length)
 876:..\src/command_processing.c **** {
 4323              		.loc 1 876 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 16
 4326              		@ frame_needed = 1, uses_anonymous_args = 0
 4327 0000 80B5     		push	{r7, lr}
 4328              		.cfi_def_cfa_offset 8
 4329              		.cfi_offset 7, -8
 4330              		.cfi_offset 14, -4
 4331 0002 84B0     		sub	sp, sp, #16
 4332              		.cfi_def_cfa_offset 24
 4333 0004 00AF     		add	r7, sp, #0
 4334              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 111


 4335 0006 7860     		str	r0, [r7, #4]
 4336 0008 0B46     		mov	r3, r1
 4337 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 877:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
 878:..\src/command_processing.c **** 
 879:..\src/command_processing.c ****     // frame - start
 880:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4338              		.loc 1 880 0
 4339 000c 3A20     		movs	r0, #58
 4340 000e FFF7FEFF 		bl	UART_RS485_PutChar
 881:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4341              		.loc 1 881 0
 4342 0012 3A20     		movs	r0, #58
 4343 0014 FFF7FEFF 		bl	UART_RS485_PutChar
 882:..\src/command_processing.c ****     // frame - ID
 883:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 4344              		.loc 1 883 0
 4345 0018 1A4B     		ldr	r3, .L206
 4346 001a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 4347 001c 1846     		mov	r0, r3
 4348 001e FFF7FEFF 		bl	UART_RS485_PutChar
 884:..\src/command_processing.c ****     // frame - length
 885:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4349              		.loc 1 885 0
 4350 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4351 0024 DBB2     		uxtb	r3, r3
 4352 0026 1846     		mov	r0, r3
 4353 0028 FFF7FEFF 		bl	UART_RS485_PutChar
 886:..\src/command_processing.c ****     // frame - packet data
 887:..\src/command_processing.c ****     for(index = 0; index < packet_length; ++index) {
 4354              		.loc 1 887 0
 4355 002c 0023     		movs	r3, #0
 4356 002e FB81     		strh	r3, [r7, #14]	@ movhi
 4357 0030 09E0     		b	.L202
 4358              	.L203:
 888:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4359              		.loc 1 888 0 discriminator 3
 4360 0032 FB89     		ldrh	r3, [r7, #14]
 4361 0034 7A68     		ldr	r2, [r7, #4]
 4362 0036 1344     		add	r3, r3, r2
 4363 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4364 003a 1846     		mov	r0, r3
 4365 003c FFF7FEFF 		bl	UART_RS485_PutChar
 887:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4366              		.loc 1 887 0 discriminator 3
 4367 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4368 0042 0133     		adds	r3, r3, #1
 4369 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 4370              	.L202:
 887:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 4371              		.loc 1 887 0 is_stmt 0 discriminator 1
 4372 0046 FA89     		ldrh	r2, [r7, #14]
 4373 0048 7B88     		ldrh	r3, [r7, #2]
 4374 004a 9A42     		cmp	r2, r3
 4375 004c F1D3     		bcc	.L203
 889:..\src/command_processing.c ****     }
 890:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 112


 891:..\src/command_processing.c ****     index = 0;
 4376              		.loc 1 891 0 is_stmt 1
 4377 004e 0023     		movs	r3, #0
 4378 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 892:..\src/command_processing.c **** 
 893:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 4379              		.loc 1 893 0
 4380 0052 00BF     		nop
 4381              	.L205:
 4382              		.loc 1 893 0 is_stmt 0 discriminator 2
 4383 0054 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4384 0058 0346     		mov	r3, r0
 4385 005a 03F00103 		and	r3, r3, #1
 4386 005e 002B     		cmp	r3, #0
 4387 0060 05D1     		bne	.L204
 4388              		.loc 1 893 0 discriminator 1
 4389 0062 FB89     		ldrh	r3, [r7, #14]
 4390 0064 5A1C     		adds	r2, r3, #1
 4391 0066 FA81     		strh	r2, [r7, #14]	@ movhi
 4392 0068 B3F57A7F 		cmp	r3, #1000
 4393 006c F2D9     		bls	.L205
 4394              	.L204:
 894:..\src/command_processing.c **** 
 895:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4395              		.loc 1 895 0 is_stmt 1
 4396 006e 0120     		movs	r0, #1
 4397 0070 FFF7FEFF 		bl	RS485_CTS_Write
 896:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4398              		.loc 1 896 0
 4399 0074 0020     		movs	r0, #0
 4400 0076 FFF7FEFF 		bl	RS485_CTS_Write
 897:..\src/command_processing.c **** }
 4401              		.loc 1 897 0
 4402 007a 00BF     		nop
 4403 007c 1037     		adds	r7, r7, #16
 4404              		.cfi_def_cfa_offset 8
 4405 007e BD46     		mov	sp, r7
 4406              		.cfi_def_cfa_register 13
 4407              		@ sp needed
 4408 0080 80BD     		pop	{r7, pc}
 4409              	.L207:
 4410 0082 00BF     		.align	2
 4411              	.L206:
 4412 0084 00000000 		.word	g_mem
 4413              		.cfi_endproc
 4414              	.LFE82:
 4415              		.size	commWrite, .-commWrite
 4416              		.section	.text.commWriteID,"ax",%progbits
 4417              		.align	2
 4418              		.global	commWriteID
 4419              		.thumb
 4420              		.thumb_func
 4421              		.type	commWriteID, %function
 4422              	commWriteID:
 4423              	.LFB83:
 898:..\src/command_processing.c **** 
 899:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 113


 900:..\src/command_processing.c **** //==============================================================================
 901:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
 902:..\src/command_processing.c **** //==============================================================================
 903:..\src/command_processing.c **** 
 904:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_length, uint8 id)
 905:..\src/command_processing.c **** {
 4424              		.loc 1 905 0
 4425              		.cfi_startproc
 4426              		@ args = 0, pretend = 0, frame = 8
 4427              		@ frame_needed = 1, uses_anonymous_args = 0
 4428 0000 80B5     		push	{r7, lr}
 4429              		.cfi_def_cfa_offset 8
 4430              		.cfi_offset 7, -8
 4431              		.cfi_offset 14, -4
 4432 0002 82B0     		sub	sp, sp, #8
 4433              		.cfi_def_cfa_offset 16
 4434 0004 00AF     		add	r7, sp, #0
 4435              		.cfi_def_cfa_register 7
 4436 0006 7860     		str	r0, [r7, #4]
 4437 0008 0B46     		mov	r3, r1
 4438 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4439 000c 1346     		mov	r3, r2
 4440 000e 7B70     		strb	r3, [r7, #1]
 906:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
 907:..\src/command_processing.c **** 
 908:..\src/command_processing.c ****     // frame - start
 909:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4441              		.loc 1 909 0
 4442 0010 3A20     		movs	r0, #58
 4443 0012 FFF7FEFF 		bl	UART_RS485_PutChar
 910:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 4444              		.loc 1 910 0
 4445 0016 3A20     		movs	r0, #58
 4446 0018 FFF7FEFF 		bl	UART_RS485_PutChar
 911:..\src/command_processing.c ****     // frame - ID
 912:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 4447              		.loc 1 912 0
 4448 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4449 001e 1846     		mov	r0, r3
 4450 0020 FFF7FEFF 		bl	UART_RS485_PutChar
 913:..\src/command_processing.c ****     // frame - length
 914:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_length);
 4451              		.loc 1 914 0
 4452 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4453 0026 DBB2     		uxtb	r3, r3
 4454 0028 1846     		mov	r0, r3
 4455 002a FFF7FEFF 		bl	UART_RS485_PutChar
 915:..\src/command_processing.c ****     // frame - packet data
 916:..\src/command_processing.c ****     for(i = 0; i < packet_length; ++i) {
 4456              		.loc 1 916 0
 4457 002e 1B4B     		ldr	r3, .L213
 4458 0030 0022     		movs	r2, #0
 4459 0032 1A80     		strh	r2, [r3]	@ movhi
 4460 0034 0EE0     		b	.L209
 4461              	.L210:
 917:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4462              		.loc 1 917 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 114


 4463 0036 194B     		ldr	r3, .L213
 4464 0038 1B88     		ldrh	r3, [r3]
 4465 003a 1A46     		mov	r2, r3
 4466 003c 7B68     		ldr	r3, [r7, #4]
 4467 003e 1344     		add	r3, r3, r2
 4468 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4469 0042 1846     		mov	r0, r3
 4470 0044 FFF7FEFF 		bl	UART_RS485_PutChar
 916:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4471              		.loc 1 916 0 discriminator 3
 4472 0048 144B     		ldr	r3, .L213
 4473 004a 1B88     		ldrh	r3, [r3]
 4474 004c 0133     		adds	r3, r3, #1
 4475 004e 9AB2     		uxth	r2, r3
 4476 0050 124B     		ldr	r3, .L213
 4477 0052 1A80     		strh	r2, [r3]	@ movhi
 4478              	.L209:
 916:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 4479              		.loc 1 916 0 is_stmt 0 discriminator 1
 4480 0054 114B     		ldr	r3, .L213
 4481 0056 1B88     		ldrh	r3, [r3]
 4482 0058 7A88     		ldrh	r2, [r7, #2]
 4483 005a 9A42     		cmp	r2, r3
 4484 005c EBD8     		bhi	.L210
 918:..\src/command_processing.c ****     }
 919:..\src/command_processing.c **** 
 920:..\src/command_processing.c ****     i = 0;
 4485              		.loc 1 920 0 is_stmt 1
 4486 005e 0F4B     		ldr	r3, .L213
 4487 0060 0022     		movs	r2, #0
 4488 0062 1A80     		strh	r2, [r3]	@ movhi
 921:..\src/command_processing.c **** 
 922:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 4489              		.loc 1 922 0
 4490 0064 00BF     		nop
 4491              	.L212:
 4492              		.loc 1 922 0 is_stmt 0 discriminator 2
 4493 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 4494 006a 0346     		mov	r3, r0
 4495 006c 03F00103 		and	r3, r3, #1
 4496 0070 002B     		cmp	r3, #0
 4497 0072 08D1     		bne	.L211
 4498              		.loc 1 922 0 discriminator 1
 4499 0074 094B     		ldr	r3, .L213
 4500 0076 1B88     		ldrh	r3, [r3]
 4501 0078 5A1C     		adds	r2, r3, #1
 4502 007a 91B2     		uxth	r1, r2
 4503 007c 074A     		ldr	r2, .L213
 4504 007e 1180     		strh	r1, [r2]	@ movhi
 4505 0080 B3F57A7F 		cmp	r3, #1000
 4506 0084 EFD9     		bls	.L212
 4507              	.L211:
 923:..\src/command_processing.c ****     
 924:..\src/command_processing.c ****     RS485_CTS_Write(1);
 4508              		.loc 1 924 0 is_stmt 1
 4509 0086 0120     		movs	r0, #1
 4510 0088 FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 115


 925:..\src/command_processing.c ****     RS485_CTS_Write(0);
 4511              		.loc 1 925 0
 4512 008c 0020     		movs	r0, #0
 4513 008e FFF7FEFF 		bl	RS485_CTS_Write
 926:..\src/command_processing.c **** }
 4514              		.loc 1 926 0
 4515 0092 00BF     		nop
 4516 0094 0837     		adds	r7, r7, #8
 4517              		.cfi_def_cfa_offset 8
 4518 0096 BD46     		mov	sp, r7
 4519              		.cfi_def_cfa_register 13
 4520              		@ sp needed
 4521 0098 80BD     		pop	{r7, pc}
 4522              	.L214:
 4523 009a 00BF     		.align	2
 4524              	.L213:
 4525 009c 00000000 		.word	i.10070
 4526              		.cfi_endproc
 4527              	.LFE83:
 4528              		.size	commWriteID, .-commWriteID
 4529              		.section	.text.LCRChecksum,"ax",%progbits
 4530              		.align	2
 4531              		.global	LCRChecksum
 4532              		.thumb
 4533              		.thumb_func
 4534              		.type	LCRChecksum, %function
 4535              	LCRChecksum:
 4536              	.LFB84:
 927:..\src/command_processing.c **** 
 928:..\src/command_processing.c **** //==============================================================================
 929:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
 930:..\src/command_processing.c **** //==============================================================================
 931:..\src/command_processing.c **** 
 932:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
 933:..\src/command_processing.c **** 
 934:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 4537              		.loc 1 934 0
 4538              		.cfi_startproc
 4539              		@ args = 0, pretend = 0, frame = 16
 4540              		@ frame_needed = 1, uses_anonymous_args = 0
 4541              		@ link register save eliminated.
 4542 0000 80B4     		push	{r7}
 4543              		.cfi_def_cfa_offset 4
 4544              		.cfi_offset 7, -4
 4545 0002 85B0     		sub	sp, sp, #20
 4546              		.cfi_def_cfa_offset 24
 4547 0004 00AF     		add	r7, sp, #0
 4548              		.cfi_def_cfa_register 7
 4549 0006 7860     		str	r0, [r7, #4]
 4550 0008 0B46     		mov	r3, r1
 4551 000a FB70     		strb	r3, [r7, #3]
 935:..\src/command_processing.c ****     
 936:..\src/command_processing.c ****     uint8 CYDATA i;
 937:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
 4552              		.loc 1 937 0
 4553 000c 0023     		movs	r3, #0
 4554 000e BB73     		strb	r3, [r7, #14]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 116


 938:..\src/command_processing.c ****     
 939:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 4555              		.loc 1 939 0
 4556 0010 0023     		movs	r3, #0
 4557 0012 FB73     		strb	r3, [r7, #15]
 4558 0014 09E0     		b	.L216
 4559              	.L217:
 940:..\src/command_processing.c ****        checksum ^= data_array[i];
 4560              		.loc 1 940 0 discriminator 3
 4561 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4562 0018 7A68     		ldr	r2, [r7, #4]
 4563 001a 1344     		add	r3, r3, r2
 4564 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4565 001e BB7B     		ldrb	r3, [r7, #14]
 4566 0020 5340     		eors	r3, r3, r2
 4567 0022 BB73     		strb	r3, [r7, #14]
 939:..\src/command_processing.c ****        checksum ^= data_array[i];
 4568              		.loc 1 939 0 discriminator 3
 4569 0024 FB7B     		ldrb	r3, [r7, #15]
 4570 0026 0133     		adds	r3, r3, #1
 4571 0028 FB73     		strb	r3, [r7, #15]
 4572              	.L216:
 939:..\src/command_processing.c ****        checksum ^= data_array[i];
 4573              		.loc 1 939 0 is_stmt 0 discriminator 1
 4574 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4575 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4576 002e 9A42     		cmp	r2, r3
 4577 0030 F1D3     		bcc	.L217
 941:..\src/command_processing.c ****   
 942:..\src/command_processing.c ****     return checksum;
 4578              		.loc 1 942 0 is_stmt 1
 4579 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 943:..\src/command_processing.c **** }
 4580              		.loc 1 943 0
 4581 0034 1846     		mov	r0, r3
 4582 0036 1437     		adds	r7, r7, #20
 4583              		.cfi_def_cfa_offset 4
 4584 0038 BD46     		mov	sp, r7
 4585              		.cfi_def_cfa_register 13
 4586              		@ sp needed
 4587 003a 80BC     		pop	{r7}
 4588              		.cfi_restore 7
 4589              		.cfi_def_cfa_offset 0
 4590 003c 7047     		bx	lr
 4591              		.cfi_endproc
 4592              	.LFE84:
 4593              		.size	LCRChecksum, .-LCRChecksum
 4594 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 4595              		.align	2
 4596              		.global	sendAcknowledgment
 4597              		.thumb
 4598              		.thumb_func
 4599              		.type	sendAcknowledgment, %function
 4600              	sendAcknowledgment:
 4601              	.LFB85:
 944:..\src/command_processing.c **** 
 945:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 117


 946:..\src/command_processing.c **** //==============================================================================
 947:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
 948:..\src/command_processing.c **** //==============================================================================
 949:..\src/command_processing.c **** 
 950:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 4602              		.loc 1 950 0
 4603              		.cfi_startproc
 4604              		@ args = 0, pretend = 0, frame = 16
 4605              		@ frame_needed = 1, uses_anonymous_args = 0
 4606 0000 80B5     		push	{r7, lr}
 4607              		.cfi_def_cfa_offset 8
 4608              		.cfi_offset 7, -8
 4609              		.cfi_offset 14, -4
 4610 0002 84B0     		sub	sp, sp, #16
 4611              		.cfi_def_cfa_offset 24
 4612 0004 00AF     		add	r7, sp, #0
 4613              		.cfi_def_cfa_register 7
 4614 0006 0346     		mov	r3, r0
 4615 0008 FB71     		strb	r3, [r7, #7]
 951:..\src/command_processing.c ****     int packet_length = 2;
 4616              		.loc 1 951 0
 4617 000a 0223     		movs	r3, #2
 4618 000c FB60     		str	r3, [r7, #12]
 952:..\src/command_processing.c ****     uint8 packet_data[2];
 953:..\src/command_processing.c **** 
 954:..\src/command_processing.c ****     packet_data[0] = value;
 4619              		.loc 1 954 0
 4620 000e FB79     		ldrb	r3, [r7, #7]
 4621 0010 3B72     		strb	r3, [r7, #8]
 955:..\src/command_processing.c ****     packet_data[1] = value;
 4622              		.loc 1 955 0
 4623 0012 FB79     		ldrb	r3, [r7, #7]
 4624 0014 7B72     		strb	r3, [r7, #9]
 956:..\src/command_processing.c **** 
 957:..\src/command_processing.c ****     commWrite(packet_data, packet_length);
 4625              		.loc 1 957 0
 4626 0016 FB68     		ldr	r3, [r7, #12]
 4627 0018 9AB2     		uxth	r2, r3
 4628 001a 07F10803 		add	r3, r7, #8
 4629 001e 1146     		mov	r1, r2
 4630 0020 1846     		mov	r0, r3
 4631 0022 FFF7FEFF 		bl	commWrite
 958:..\src/command_processing.c **** }
 4632              		.loc 1 958 0
 4633 0026 00BF     		nop
 4634 0028 1037     		adds	r7, r7, #16
 4635              		.cfi_def_cfa_offset 8
 4636 002a BD46     		mov	sp, r7
 4637              		.cfi_def_cfa_register 13
 4638              		@ sp needed
 4639 002c 80BD     		pop	{r7, pc}
 4640              		.cfi_endproc
 4641              	.LFE85:
 4642              		.size	sendAcknowledgment, .-sendAcknowledgment
 4643 002e 00BF     		.section	.text.memStore,"ax",%progbits
 4644              		.align	2
 4645              		.global	memStore
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 118


 4646              		.thumb
 4647              		.thumb_func
 4648              		.type	memStore, %function
 4649              	memStore:
 4650              	.LFB86:
 959:..\src/command_processing.c **** 
 960:..\src/command_processing.c **** //==============================================================================
 961:..\src/command_processing.c **** //                                                                  STORE MEMORY
 962:..\src/command_processing.c **** //==============================================================================
 963:..\src/command_processing.c **** 
 964:..\src/command_processing.c **** 
 965:..\src/command_processing.c **** uint8 memStore(int displacement)
 966:..\src/command_processing.c **** {
 4651              		.loc 1 966 0
 4652              		.cfi_startproc
 4653              		@ args = 0, pretend = 0, frame = 24
 4654              		@ frame_needed = 1, uses_anonymous_args = 0
 4655 0000 80B5     		push	{r7, lr}
 4656              		.cfi_def_cfa_offset 8
 4657              		.cfi_offset 7, -8
 4658              		.cfi_offset 14, -4
 4659 0002 86B0     		sub	sp, sp, #24
 4660              		.cfi_def_cfa_offset 32
 4661 0004 00AF     		add	r7, sp, #0
 4662              		.cfi_def_cfa_register 7
 4663 0006 7860     		str	r0, [r7, #4]
 967:..\src/command_processing.c ****     int i;  // iterator
 968:..\src/command_processing.c ****     uint8 writeStatus;
 969:..\src/command_processing.c ****     int pages;
 970:..\src/command_processing.c ****     uint8 ret_val = 1;
 4664              		.loc 1 970 0
 4665 0008 0123     		movs	r3, #1
 4666 000a FB74     		strb	r3, [r7, #19]
 971:..\src/command_processing.c **** 
 972:..\src/command_processing.c ****     // Disable Interrupt
 973:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 4667              		.loc 1 973 0
 4668 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
 974:..\src/command_processing.c **** 
 975:..\src/command_processing.c ****     // Stop motor
 976:..\src/command_processing.c ****     //PWM_MOTORS_WriteCompare1(0);
 977:..\src/command_processing.c **** 
 978:..\src/command_processing.c ****     // Update temperature information for better writing performance
 979:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 4669              		.loc 1 979 0
 4670 0010 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 980:..\src/command_processing.c **** 
 981:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 4671              		.loc 1 981 0
 4672 0014 1C4A     		ldr	r2, .L226
 4673 0016 1D4B     		ldr	r3, .L226+4
 4674 0018 1046     		mov	r0, r2
 4675 001a 1946     		mov	r1, r3
 4676 001c 6023     		movs	r3, #96
 4677 001e 1A46     		mov	r2, r3
 4678 0020 FFF7FEFF 		bl	memcpy
 982:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 119


 983:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 4679              		.loc 1 983 0
 4680 0024 0623     		movs	r3, #6
 4681 0026 FB60     		str	r3, [r7, #12]
 984:..\src/command_processing.c **** 
 985:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 4682              		.loc 1 985 0
 4683 0028 0023     		movs	r3, #0
 4684 002a 7B61     		str	r3, [r7, #20]
 4685 002c 18E0     		b	.L221
 4686              	.L224:
 986:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4687              		.loc 1 986 0
 4688 002e 7B69     		ldr	r3, [r7, #20]
 4689 0030 1B01     		lsls	r3, r3, #4
 4690 0032 1A46     		mov	r2, r3
 4691 0034 154B     		ldr	r3, .L226+4
 4692 0036 D018     		adds	r0, r2, r3
 4693 0038 7B69     		ldr	r3, [r7, #20]
 4694 003a DAB2     		uxtb	r2, r3
 4695 003c 7B68     		ldr	r3, [r7, #4]
 4696 003e DBB2     		uxtb	r3, r3
 4697 0040 1344     		add	r3, r3, r2
 4698 0042 DBB2     		uxtb	r3, r3
 4699 0044 1946     		mov	r1, r3
 4700 0046 FFF7FEFF 		bl	EEPROM_Write
 4701 004a 0346     		mov	r3, r0
 4702 004c FB72     		strb	r3, [r7, #11]
 987:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 4703              		.loc 1 987 0
 4704 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4705 0050 002B     		cmp	r3, #0
 4706 0052 02D0     		beq	.L222
 988:..\src/command_processing.c ****             ret_val = 0;
 4707              		.loc 1 988 0
 4708 0054 0023     		movs	r3, #0
 4709 0056 FB74     		strb	r3, [r7, #19]
 989:..\src/command_processing.c ****             break;
 4710              		.loc 1 989 0
 4711 0058 06E0     		b	.L223
 4712              	.L222:
 985:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4713              		.loc 1 985 0 discriminator 2
 4714 005a 7B69     		ldr	r3, [r7, #20]
 4715 005c 0133     		adds	r3, r3, #1
 4716 005e 7B61     		str	r3, [r7, #20]
 4717              	.L221:
 985:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 4718              		.loc 1 985 0 is_stmt 0 discriminator 1
 4719 0060 7A69     		ldr	r2, [r7, #20]
 4720 0062 FB68     		ldr	r3, [r7, #12]
 4721 0064 9A42     		cmp	r2, r3
 4722 0066 E2DB     		blt	.L224
 4723              	.L223:
 990:..\src/command_processing.c ****         }
 991:..\src/command_processing.c ****     }
 992:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 120


 993:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 4724              		.loc 1 993 0 is_stmt 1
 4725 0068 084A     		ldr	r2, .L226+4
 4726 006a 074B     		ldr	r3, .L226
 4727 006c 1046     		mov	r0, r2
 4728 006e 1946     		mov	r1, r3
 4729 0070 6023     		movs	r3, #96
 4730 0072 1A46     		mov	r2, r3
 4731 0074 FFF7FEFF 		bl	memcpy
 994:..\src/command_processing.c **** 
 995:..\src/command_processing.c ****     // Re-Enable Interrupt
 996:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 4732              		.loc 1 996 0
 4733 0078 FFF7FEFF 		bl	ISR_RS485_RX_Enable
 997:..\src/command_processing.c **** 
 998:..\src/command_processing.c ****     return ret_val;
 4734              		.loc 1 998 0
 4735 007c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 999:..\src/command_processing.c **** }
 4736              		.loc 1 999 0
 4737 007e 1846     		mov	r0, r3
 4738 0080 1837     		adds	r7, r7, #24
 4739              		.cfi_def_cfa_offset 8
 4740 0082 BD46     		mov	sp, r7
 4741              		.cfi_def_cfa_register 13
 4742              		@ sp needed
 4743 0084 80BD     		pop	{r7, pc}
 4744              	.L227:
 4745 0086 00BF     		.align	2
 4746              	.L226:
 4747 0088 00000000 		.word	c_mem
 4748 008c 00000000 		.word	g_mem
 4749              		.cfi_endproc
 4750              	.LFE86:
 4751              		.size	memStore, .-memStore
 4752              		.section	.text.memRecall,"ax",%progbits
 4753              		.align	2
 4754              		.global	memRecall
 4755              		.thumb
 4756              		.thumb_func
 4757              		.type	memRecall, %function
 4758              	memRecall:
 4759              	.LFB87:
1000:..\src/command_processing.c **** 
1001:..\src/command_processing.c **** 
1002:..\src/command_processing.c **** //==============================================================================
1003:..\src/command_processing.c **** //                                                                 RECALL MEMORY
1004:..\src/command_processing.c **** //==============================================================================
1005:..\src/command_processing.c **** 
1006:..\src/command_processing.c **** 
1007:..\src/command_processing.c **** void memRecall(void)
1008:..\src/command_processing.c **** {  
 4760              		.loc 1 1008 0
 4761              		.cfi_startproc
 4762              		@ args = 0, pretend = 0, frame = 8
 4763              		@ frame_needed = 1, uses_anonymous_args = 0
 4764 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 121


 4765              		.cfi_def_cfa_offset 8
 4766              		.cfi_offset 7, -8
 4767              		.cfi_offset 14, -4
 4768 0002 82B0     		sub	sp, sp, #8
 4769              		.cfi_def_cfa_offset 16
 4770 0004 00AF     		add	r7, sp, #0
 4771              		.cfi_def_cfa_register 7
1009:..\src/command_processing.c ****     uint16 i;
1010:..\src/command_processing.c **** 
1011:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 4772              		.loc 1 1011 0
 4773 0006 0023     		movs	r3, #0
 4774 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4775 000a 0CE0     		b	.L229
 4776              	.L230:
1012:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4777              		.loc 1 1012 0 discriminator 3
 4778 000c FB88     		ldrh	r3, [r7, #6]
 4779 000e 114A     		ldr	r2, .L234
 4780 0010 1344     		add	r3, r3, r2
 4781 0012 114A     		ldr	r2, .L234+4
 4782 0014 1168     		ldr	r1, [r2]
 4783 0016 FA88     		ldrh	r2, [r7, #6]
 4784 0018 0A44     		add	r2, r2, r1
 4785 001a 1278     		ldrb	r2, [r2]
 4786 001c D2B2     		uxtb	r2, r2
 4787 001e 1A70     		strb	r2, [r3]
1011:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4788              		.loc 1 1011 0 discriminator 3
 4789 0020 FB88     		ldrh	r3, [r7, #6]
 4790 0022 0133     		adds	r3, r3, #1
 4791 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 4792              	.L229:
1011:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 4793              		.loc 1 1011 0 is_stmt 0 discriminator 1
 4794 0026 FB88     		ldrh	r3, [r7, #6]
 4795 0028 5F2B     		cmp	r3, #95
 4796 002a EFD9     		bls	.L230
1013:..\src/command_processing.c ****     }
1014:..\src/command_processing.c ****        //check for initialization
1015:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4797              		.loc 1 1015 0 is_stmt 1
 4798 002c 094B     		ldr	r3, .L234
 4799 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4800 0030 002B     		cmp	r3, #0
 4801 0032 02D1     		bne	.L231
1016:..\src/command_processing.c ****         memRestore();
 4802              		.loc 1 1016 0
 4803 0034 FFF7FEFF 		bl	memRestore
1017:..\src/command_processing.c ****     } else {
1018:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
1019:..\src/command_processing.c ****     }   
1020:..\src/command_processing.c **** }
 4804              		.loc 1 1020 0
 4805 0038 07E0     		b	.L233
 4806              	.L231:
1018:..\src/command_processing.c ****     }   
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 122


 4807              		.loc 1 1018 0
 4808 003a 084A     		ldr	r2, .L234+8
 4809 003c 054B     		ldr	r3, .L234
 4810 003e 1046     		mov	r0, r2
 4811 0040 1946     		mov	r1, r3
 4812 0042 6023     		movs	r3, #96
 4813 0044 1A46     		mov	r2, r3
 4814 0046 FFF7FEFF 		bl	memcpy
 4815              	.L233:
 4816              		.loc 1 1020 0
 4817 004a 00BF     		nop
 4818 004c 0837     		adds	r7, r7, #8
 4819              		.cfi_def_cfa_offset 8
 4820 004e BD46     		mov	sp, r7
 4821              		.cfi_def_cfa_register 13
 4822              		@ sp needed
 4823 0050 80BD     		pop	{r7, pc}
 4824              	.L235:
 4825 0052 00BF     		.align	2
 4826              	.L234:
 4827 0054 00000000 		.word	g_mem
 4828 0058 00000000 		.word	EEPROM_ADDR
 4829 005c 00000000 		.word	c_mem
 4830              		.cfi_endproc
 4831              	.LFE87:
 4832              		.size	memRecall, .-memRecall
 4833              		.section	.text.memRestore,"ax",%progbits
 4834              		.align	2
 4835              		.global	memRestore
 4836              		.thumb
 4837              		.thumb_func
 4838              		.type	memRestore, %function
 4839              	memRestore:
 4840              	.LFB88:
1021:..\src/command_processing.c **** 
1022:..\src/command_processing.c **** 
1023:..\src/command_processing.c **** //==============================================================================
1024:..\src/command_processing.c **** //                                                                RESTORE MEMORY
1025:..\src/command_processing.c **** //==============================================================================
1026:..\src/command_processing.c **** 
1027:..\src/command_processing.c **** 
1028:..\src/command_processing.c **** uint8 memRestore(void) {
 4841              		.loc 1 1028 0
 4842              		.cfi_startproc
 4843              		@ args = 0, pretend = 0, frame = 8
 4844              		@ frame_needed = 1, uses_anonymous_args = 0
 4845 0000 80B5     		push	{r7, lr}
 4846              		.cfi_def_cfa_offset 8
 4847              		.cfi_offset 7, -8
 4848              		.cfi_offset 14, -4
 4849 0002 82B0     		sub	sp, sp, #8
 4850              		.cfi_def_cfa_offset 16
 4851 0004 00AF     		add	r7, sp, #0
 4852              		.cfi_def_cfa_register 7
1029:..\src/command_processing.c ****     uint16 i;
1030:..\src/command_processing.c **** 
1031:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 123


 4853              		.loc 1 1031 0
 4854 0006 0023     		movs	r3, #0
 4855 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 4856 000a 0EE0     		b	.L237
 4857              	.L238:
1032:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4858              		.loc 1 1032 0 discriminator 3
 4859 000c FB88     		ldrh	r3, [r7, #6]
 4860 000e 104A     		ldr	r2, .L241
 4861 0010 1344     		add	r3, r3, r2
 4862 0012 104A     		ldr	r2, .L241+4
 4863 0014 1168     		ldr	r1, [r2]
 4864 0016 FA88     		ldrh	r2, [r7, #6]
 4865 0018 02F54872 		add	r2, r2, #800
 4866 001c 0A44     		add	r2, r2, r1
 4867 001e 1278     		ldrb	r2, [r2]
 4868 0020 D2B2     		uxtb	r2, r2
 4869 0022 1A70     		strb	r2, [r3]
1031:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4870              		.loc 1 1031 0 discriminator 3
 4871 0024 FB88     		ldrh	r3, [r7, #6]
 4872 0026 0133     		adds	r3, r3, #1
 4873 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 4874              	.L237:
1031:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 4875              		.loc 1 1031 0 is_stmt 0 discriminator 1
 4876 002a FB88     		ldrh	r3, [r7, #6]
 4877 002c 5F2B     		cmp	r3, #95
 4878 002e EDD9     		bls	.L238
1033:..\src/command_processing.c ****     }
1034:..\src/command_processing.c **** 
1035:..\src/command_processing.c ****     //check for initialization
1036:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 4879              		.loc 1 1036 0 is_stmt 1
 4880 0030 074B     		ldr	r3, .L241
 4881 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4882 0034 002B     		cmp	r3, #0
 4883 0036 03D1     		bne	.L239
1037:..\src/command_processing.c ****         return memInit();
 4884              		.loc 1 1037 0
 4885 0038 FFF7FEFF 		bl	memInit
 4886 003c 0346     		mov	r3, r0
 4887 003e 03E0     		b	.L240
 4888              	.L239:
1038:..\src/command_processing.c ****     } else {
1039:..\src/command_processing.c ****         return memStore(0);
 4889              		.loc 1 1039 0
 4890 0040 0020     		movs	r0, #0
 4891 0042 FFF7FEFF 		bl	memStore
 4892 0046 0346     		mov	r3, r0
 4893              	.L240:
1040:..\src/command_processing.c ****     }  
1041:..\src/command_processing.c **** }
 4894              		.loc 1 1041 0
 4895 0048 1846     		mov	r0, r3
 4896 004a 0837     		adds	r7, r7, #8
 4897              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 124


 4898 004c BD46     		mov	sp, r7
 4899              		.cfi_def_cfa_register 13
 4900              		@ sp needed
 4901 004e 80BD     		pop	{r7, pc}
 4902              	.L242:
 4903              		.align	2
 4904              	.L241:
 4905 0050 00000000 		.word	g_mem
 4906 0054 00000000 		.word	EEPROM_ADDR
 4907              		.cfi_endproc
 4908              	.LFE88:
 4909              		.size	memRestore, .-memRestore
 4910              		.section	.text.memInit,"ax",%progbits
 4911              		.align	2
 4912              		.global	memInit
 4913              		.thumb
 4914              		.thumb_func
 4915              		.type	memInit, %function
 4916              	memInit:
 4917              	.LFB89:
1042:..\src/command_processing.c **** 
1043:..\src/command_processing.c **** //==============================================================================
1044:..\src/command_processing.c **** //                                                                   MEMORY INIT
1045:..\src/command_processing.c **** //==============================================================================
1046:..\src/command_processing.c **** 
1047:..\src/command_processing.c **** uint8 memInit(void)
1048:..\src/command_processing.c **** {
 4918              		.loc 1 1048 0
 4919              		.cfi_startproc
 4920              		@ args = 0, pretend = 0, frame = 0
 4921              		@ frame_needed = 1, uses_anonymous_args = 0
 4922 0000 80B5     		push	{r7, lr}
 4923              		.cfi_def_cfa_offset 8
 4924              		.cfi_offset 7, -8
 4925              		.cfi_offset 14, -4
 4926 0002 00AF     		add	r7, sp, #0
 4927              		.cfi_def_cfa_register 7
1049:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
1050:..\src/command_processing.c ****     g_mem.flag = TRUE;
 4928              		.loc 1 1050 0
 4929 0004 304B     		ldr	r3, .L247
 4930 0006 0122     		movs	r2, #1
 4931 0008 1A70     		strb	r2, [r3]
1051:..\src/command_processing.c ****     
1052:..\src/command_processing.c ****     // DEV STRUCT
1053:..\src/command_processing.c ****     g_mem.dev.id = 2;
 4932              		.loc 1 1053 0
 4933 000a 2F4B     		ldr	r3, .L247
 4934 000c 0222     		movs	r2, #2
 4935 000e 1A74     		strb	r2, [r3, #16]
1054:..\src/command_processing.c ****     
1055:..\src/command_processing.c ****     // SH STRUCT
1056:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_inf = 0;
 4936              		.loc 1 1056 0
 4937 0010 2D4B     		ldr	r3, .L247
 4938 0012 0022     		movs	r2, #0
 4939 0014 1A62     		str	r2, [r3, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 125


1057:..\src/command_processing.c ****     g_mem.SH_config.pos_lim_sup = (int32)16000 << g_mem.SH_config.res;
 4940              		.loc 1 1057 0
 4941 0016 2C4B     		ldr	r3, .L247
 4942 0018 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 4943 001c 1A46     		mov	r2, r3
 4944 001e 4FF47A53 		mov	r3, #16000
 4945 0022 9340     		lsls	r3, r3, r2
 4946 0024 284A     		ldr	r2, .L247
 4947 0026 5362     		str	r3, [r2, #36]
1058:..\src/command_processing.c ****     g_mem.SH_config.input_mode = INPUT_MODE_EMG_FCFS;
 4948              		.loc 1 1058 0
 4949 0028 274B     		ldr	r3, .L247
 4950 002a 0422     		movs	r2, #4
 4951 002c 83F82820 		strb	r2, [r3, #40]
1059:..\src/command_processing.c ****     g_mem.SH_config.res = 3;
 4952              		.loc 1 1059 0
 4953 0030 254B     		ldr	r3, .L247
 4954 0032 0322     		movs	r2, #3
 4955 0034 83F82920 		strb	r2, [r3, #41]
1060:..\src/command_processing.c **** 
1061:..\src/command_processing.c ****     // EMG STRUCT     
1062:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 4956              		.loc 1 1062 0
 4957 0038 234B     		ldr	r3, .L247
 4958 003a C822     		movs	r2, #200
 4959 003c 1A86     		strh	r2, [r3, #48]	@ movhi
1063:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 4960              		.loc 1 1063 0
 4961 003e 224B     		ldr	r3, .L247
 4962 0040 C822     		movs	r2, #200
 4963 0042 5A86     		strh	r2, [r3, #50]	@ movhi
1064:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 4964              		.loc 1 1064 0
 4965 0044 204B     		ldr	r3, .L247
 4966 0046 4FF48062 		mov	r2, #1024
 4967 004a 5A63     		str	r2, [r3, #52]
1065:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 4968              		.loc 1 1065 0
 4969 004c 1E4B     		ldr	r3, .L247
 4970 004e 4FF48062 		mov	r2, #1024
 4971 0052 9A63     		str	r2, [r3, #56]
1066:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 4972              		.loc 1 1066 0
 4973 0054 1C4B     		ldr	r3, .L247
 4974 0056 6422     		movs	r2, #100
 4975 0058 83F83C20 		strb	r2, [r3, #60]
1067:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 4976              		.loc 1 1067 0
 4977 005c 1A4B     		ldr	r3, .L247
 4978 005e 6422     		movs	r2, #100
 4979 0060 83F83D20 		strb	r2, [r3, #61]
1068:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 4980              		.loc 1 1068 0
 4981 0064 184B     		ldr	r3, .L247
 4982 0066 0022     		movs	r2, #0
 4983 0068 83F83E20 		strb	r2, [r3, #62]
1069:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 126


1070:..\src/command_processing.c ****     // MASTER_SLAVE STRUCT
1071:..\src/command_processing.c ****     g_mem.MS.master_mode_active = FALSE;
 4984              		.loc 1 1071 0
 4985 006c 164B     		ldr	r3, .L247
 4986 006e 0022     		movs	r2, #0
 4987 0070 83F84020 		strb	r2, [r3, #64]
1072:..\src/command_processing.c ****     g_mem.MS.master_mode_active = 1;
 4988              		.loc 1 1072 0
 4989 0074 144B     		ldr	r3, .L247
 4990 0076 0122     		movs	r2, #1
 4991 0078 83F84020 		strb	r2, [r3, #64]
1073:..\src/command_processing.c ****     
1074:..\src/command_processing.c ****     //FEEDBACK STRUCT
1075:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 4992              		.loc 1 1075 0
 4993 007c 124B     		ldr	r3, .L247
 4994 007e 4FF4E172 		mov	r2, #450
 4995 0082 1A65     		str	r2, [r3, #80]
1076:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 4996              		.loc 1 1076 0
 4997 0084 104B     		ldr	r3, .L247
 4998 0086 114A     		ldr	r2, .L247+4
 4999 0088 5A65     		str	r2, [r3, #84]	@ float
1077:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 5000              		.loc 1 1077 0
 5001 008a 0F4B     		ldr	r3, .L247
 5002 008c 4FF07E52 		mov	r2, #1065353216
 5003 0090 9A65     		str	r2, [r3, #88]	@ float
1078:..\src/command_processing.c ****     g_mem.FB.vibrotactile_feedback_active = FALSE;
 5004              		.loc 1 1078 0
 5005 0092 0D4B     		ldr	r3, .L247
 5006 0094 0022     		movs	r2, #0
 5007 0096 83F85C20 		strb	r2, [r3, #92]
1079:..\src/command_processing.c ****     g_mem.FB.airchamber_feedback_active = FALSE;
 5008              		.loc 1 1079 0
 5009 009a 0B4B     		ldr	r3, .L247
 5010 009c 0022     		movs	r2, #0
 5011 009e 83F85D20 		strb	r2, [r3, #93]
1080:..\src/command_processing.c ****     
1081:..\src/command_processing.c ****     //write that configuration to EEPROM
1082:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );}
 5012              		.loc 1 1082 0
 5013 00a2 0020     		movs	r0, #0
 5014 00a4 FFF7FEFF 		bl	memStore
 5015 00a8 0346     		mov	r3, r0
 5016 00aa 002B     		cmp	r3, #0
 5017 00ac 07D0     		beq	.L244
 5018              		.loc 1 1082 0 is_stmt 0 discriminator 1
 5019 00ae 3220     		movs	r0, #50
 5020 00b0 FFF7FEFF 		bl	memStore
 5021 00b4 0346     		mov	r3, r0
 5022 00b6 002B     		cmp	r3, #0
 5023 00b8 01D0     		beq	.L244
 5024              		.loc 1 1082 0 discriminator 3
 5025 00ba 0123     		movs	r3, #1
 5026 00bc 00E0     		b	.L245
 5027              	.L244:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 127


 5028              		.loc 1 1082 0 discriminator 4
 5029 00be 0023     		movs	r3, #0
 5030              	.L245:
 5031              		.loc 1 1082 0 discriminator 6
 5032 00c0 DBB2     		uxtb	r3, r3
 5033 00c2 1846     		mov	r0, r3
 5034 00c4 80BD     		pop	{r7, pc}
 5035              	.L248:
 5036 00c6 00BF     		.align	2
 5037              	.L247:
 5038 00c8 00000000 		.word	g_mem
 5039 00cc 0000C841 		.word	1103626240
 5040              		.cfi_endproc
 5041              	.LFE89:
 5042              		.size	memInit, .-memInit
 5043              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 5044              		.align	2
 5045              		.global	memInit_SoftHandPro
 5046              		.thumb
 5047              		.thumb_func
 5048              		.type	memInit_SoftHandPro, %function
 5049              	memInit_SoftHandPro:
 5050              	.LFB90:
1083:..\src/command_processing.c **** 
1084:..\src/command_processing.c **** //==============================================================================
1085:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
1086:..\src/command_processing.c **** //==============================================================================
1087:..\src/command_processing.c **** void memInit_SoftHandPro(void)
1088:..\src/command_processing.c **** {
 5051              		.loc 1 1088 0 is_stmt 1
 5052              		.cfi_startproc
 5053              		@ args = 0, pretend = 0, frame = 0
 5054              		@ frame_needed = 1, uses_anonymous_args = 0
 5055              		@ link register save eliminated.
 5056 0000 80B4     		push	{r7}
 5057              		.cfi_def_cfa_offset 4
 5058              		.cfi_offset 7, -4
 5059 0002 00AF     		add	r7, sp, #0
 5060              		.cfi_def_cfa_register 7
1089:..\src/command_processing.c **** }
 5061              		.loc 1 1089 0
 5062 0004 00BF     		nop
 5063 0006 BD46     		mov	sp, r7
 5064              		.cfi_def_cfa_register 13
 5065              		@ sp needed
 5066 0008 80BC     		pop	{r7}
 5067              		.cfi_restore 7
 5068              		.cfi_def_cfa_offset 0
 5069 000a 7047     		bx	lr
 5070              		.cfi_endproc
 5071              	.LFE90:
 5072              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 5073              		.section	.text.memInit_Master,"ax",%progbits
 5074              		.align	2
 5075              		.global	memInit_Master
 5076              		.thumb
 5077              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 128


 5078              		.type	memInit_Master, %function
 5079              	memInit_Master:
 5080              	.LFB91:
1090:..\src/command_processing.c **** 
1091:..\src/command_processing.c **** //==============================================================================
1092:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
1093:..\src/command_processing.c **** //==============================================================================
1094:..\src/command_processing.c **** void memInit_Master(void)
1095:..\src/command_processing.c **** {
 5081              		.loc 1 1095 0
 5082              		.cfi_startproc
 5083              		@ args = 0, pretend = 0, frame = 0
 5084              		@ frame_needed = 1, uses_anonymous_args = 0
 5085              		@ link register save eliminated.
 5086 0000 80B4     		push	{r7}
 5087              		.cfi_def_cfa_offset 4
 5088              		.cfi_offset 7, -4
 5089 0002 00AF     		add	r7, sp, #0
 5090              		.cfi_def_cfa_register 7
1096:..\src/command_processing.c **** }
 5091              		.loc 1 1096 0
 5092 0004 00BF     		nop
 5093 0006 BD46     		mov	sp, r7
 5094              		.cfi_def_cfa_register 13
 5095              		@ sp needed
 5096 0008 80BC     		pop	{r7}
 5097              		.cfi_restore 7
 5098              		.cfi_def_cfa_offset 0
 5099 000a 7047     		bx	lr
 5100              		.cfi_endproc
 5101              	.LFE91:
 5102              		.size	memInit_Master, .-memInit_Master
 5103              		.section	.text.memInit_AirChambers_Vibrotactile_Fb,"ax",%progbits
 5104              		.align	2
 5105              		.global	memInit_AirChambers_Vibrotactile_Fb
 5106              		.thumb
 5107              		.thumb_func
 5108              		.type	memInit_AirChambers_Vibrotactile_Fb, %function
 5109              	memInit_AirChambers_Vibrotactile_Fb:
 5110              	.LFB92:
1097:..\src/command_processing.c **** 
1098:..\src/command_processing.c **** //==============================================================================
1099:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
1100:..\src/command_processing.c **** //==============================================================================
1101:..\src/command_processing.c **** void memInit_AirChambers_Vibrotactile_Fb()
1102:..\src/command_processing.c **** {
 5111              		.loc 1 1102 0
 5112              		.cfi_startproc
 5113              		@ args = 0, pretend = 0, frame = 0
 5114              		@ frame_needed = 1, uses_anonymous_args = 0
 5115              		@ link register save eliminated.
 5116 0000 80B4     		push	{r7}
 5117              		.cfi_def_cfa_offset 4
 5118              		.cfi_offset 7, -4
 5119 0002 00AF     		add	r7, sp, #0
 5120              		.cfi_def_cfa_register 7
1103:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 129


 5121              		.loc 1 1103 0
 5122 0004 00BF     		nop
 5123 0006 BD46     		mov	sp, r7
 5124              		.cfi_def_cfa_register 13
 5125              		@ sp needed
 5126 0008 80BC     		pop	{r7}
 5127              		.cfi_restore 7
 5128              		.cfi_def_cfa_offset 0
 5129 000a 7047     		bx	lr
 5130              		.cfi_endproc
 5131              	.LFE92:
 5132              		.size	memInit_AirChambers_Vibrotactile_Fb, .-memInit_AirChambers_Vibrotactile_Fb
 5133              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 5134              		.align	2
 5135              		.global	memInit_OtbkActWristMs
 5136              		.thumb
 5137              		.thumb_func
 5138              		.type	memInit_OtbkActWristMs, %function
 5139              	memInit_OtbkActWristMs:
 5140              	.LFB93:
1104:..\src/command_processing.c **** 
1105:..\src/command_processing.c **** //==============================================================================
1106:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
1107:..\src/command_processing.c **** //==============================================================================
1108:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
1109:..\src/command_processing.c **** {
 5141              		.loc 1 1109 0
 5142              		.cfi_startproc
 5143              		@ args = 0, pretend = 0, frame = 0
 5144              		@ frame_needed = 1, uses_anonymous_args = 0
 5145              		@ link register save eliminated.
 5146 0000 80B4     		push	{r7}
 5147              		.cfi_def_cfa_offset 4
 5148              		.cfi_offset 7, -4
 5149 0002 00AF     		add	r7, sp, #0
 5150              		.cfi_def_cfa_register 7
1110:..\src/command_processing.c **** }
 5151              		.loc 1 1110 0
 5152 0004 00BF     		nop
 5153 0006 BD46     		mov	sp, r7
 5154              		.cfi_def_cfa_register 13
 5155              		@ sp needed
 5156 0008 80BC     		pop	{r7}
 5157              		.cfi_restore 7
 5158              		.cfi_def_cfa_offset 0
 5159 000a 7047     		bx	lr
 5160              		.cfi_endproc
 5161              	.LFE93:
 5162              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 5163              		.section	.text.cmd_get_measurements,"ax",%progbits
 5164              		.align	2
 5165              		.global	cmd_get_measurements
 5166              		.thumb
 5167              		.thumb_func
 5168              		.type	cmd_get_measurements, %function
 5169              	cmd_get_measurements:
 5170              	.LFB94:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 130


1111:..\src/command_processing.c **** 
1112:..\src/command_processing.c **** //==============================================================================
1113:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
1114:..\src/command_processing.c **** //==============================================================================
1115:..\src/command_processing.c **** /**
1116:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
1117:..\src/command_processing.c **** **/
1118:..\src/command_processing.c **** 
1119:..\src/command_processing.c **** void cmd_get_measurements(){
 5171              		.loc 1 1119 0
 5172              		.cfi_startproc
 5173              		@ args = 0, pretend = 0, frame = 0
 5174              		@ frame_needed = 1, uses_anonymous_args = 0
 5175              		@ link register save eliminated.
 5176 0000 80B4     		push	{r7}
 5177              		.cfi_def_cfa_offset 4
 5178              		.cfi_offset 7, -4
 5179 0002 00AF     		add	r7, sp, #0
 5180              		.cfi_def_cfa_register 7
1120:..\src/command_processing.c ****  
1121:..\src/command_processing.c ****    
1122:..\src/command_processing.c **** }
 5181              		.loc 1 1122 0
 5182 0004 00BF     		nop
 5183 0006 BD46     		mov	sp, r7
 5184              		.cfi_def_cfa_register 13
 5185              		@ sp needed
 5186 0008 80BC     		pop	{r7}
 5187              		.cfi_restore 7
 5188              		.cfi_def_cfa_offset 0
 5189 000a 7047     		bx	lr
 5190              		.cfi_endproc
 5191              	.LFE94:
 5192              		.size	cmd_get_measurements, .-cmd_get_measurements
 5193              		.section	.text.cmd_get_velocities,"ax",%progbits
 5194              		.align	2
 5195              		.global	cmd_get_velocities
 5196              		.thumb
 5197              		.thumb_func
 5198              		.type	cmd_get_velocities, %function
 5199              	cmd_get_velocities:
 5200              	.LFB95:
1123:..\src/command_processing.c **** 
1124:..\src/command_processing.c **** void cmd_get_velocities(){
 5201              		.loc 1 1124 0
 5202              		.cfi_startproc
 5203              		@ args = 0, pretend = 0, frame = 0
 5204              		@ frame_needed = 1, uses_anonymous_args = 0
 5205              		@ link register save eliminated.
 5206 0000 80B4     		push	{r7}
 5207              		.cfi_def_cfa_offset 4
 5208              		.cfi_offset 7, -4
 5209 0002 00AF     		add	r7, sp, #0
 5210              		.cfi_def_cfa_register 7
1125:..\src/command_processing.c ****  
1126:..\src/command_processing.c **** }
 5211              		.loc 1 1126 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 131


 5212 0004 00BF     		nop
 5213 0006 BD46     		mov	sp, r7
 5214              		.cfi_def_cfa_register 13
 5215              		@ sp needed
 5216 0008 80BC     		pop	{r7}
 5217              		.cfi_restore 7
 5218              		.cfi_def_cfa_offset 0
 5219 000a 7047     		bx	lr
 5220              		.cfi_endproc
 5221              	.LFE95:
 5222              		.size	cmd_get_velocities, .-cmd_get_velocities
 5223              		.section	.text.cmd_get_accelerations,"ax",%progbits
 5224              		.align	2
 5225              		.global	cmd_get_accelerations
 5226              		.thumb
 5227              		.thumb_func
 5228              		.type	cmd_get_accelerations, %function
 5229              	cmd_get_accelerations:
 5230              	.LFB96:
1127:..\src/command_processing.c **** 
1128:..\src/command_processing.c **** void cmd_get_accelerations(){
 5231              		.loc 1 1128 0
 5232              		.cfi_startproc
 5233              		@ args = 0, pretend = 0, frame = 0
 5234              		@ frame_needed = 1, uses_anonymous_args = 0
 5235              		@ link register save eliminated.
 5236 0000 80B4     		push	{r7}
 5237              		.cfi_def_cfa_offset 4
 5238              		.cfi_offset 7, -4
 5239 0002 00AF     		add	r7, sp, #0
 5240              		.cfi_def_cfa_register 7
1129:..\src/command_processing.c ****  
1130:..\src/command_processing.c **** }
 5241              		.loc 1 1130 0
 5242 0004 00BF     		nop
 5243 0006 BD46     		mov	sp, r7
 5244              		.cfi_def_cfa_register 13
 5245              		@ sp needed
 5246 0008 80BC     		pop	{r7}
 5247              		.cfi_restore 7
 5248              		.cfi_def_cfa_offset 0
 5249 000a 7047     		bx	lr
 5250              		.cfi_endproc
 5251              	.LFE96:
 5252              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 5253              		.section	.text.cmd_get_joystick,"ax",%progbits
 5254              		.align	2
 5255              		.global	cmd_get_joystick
 5256              		.thumb
 5257              		.thumb_func
 5258              		.type	cmd_get_joystick, %function
 5259              	cmd_get_joystick:
 5260              	.LFB97:
1131:..\src/command_processing.c **** 
1132:..\src/command_processing.c **** void cmd_get_joystick() {
 5261              		.loc 1 1132 0
 5262              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 132


 5263              		@ args = 0, pretend = 0, frame = 0
 5264              		@ frame_needed = 1, uses_anonymous_args = 0
 5265              		@ link register save eliminated.
 5266 0000 80B4     		push	{r7}
 5267              		.cfi_def_cfa_offset 4
 5268              		.cfi_offset 7, -4
 5269 0002 00AF     		add	r7, sp, #0
 5270              		.cfi_def_cfa_register 7
1133:..\src/command_processing.c ****  
1134:..\src/command_processing.c **** }
 5271              		.loc 1 1134 0
 5272 0004 00BF     		nop
 5273 0006 BD46     		mov	sp, r7
 5274              		.cfi_def_cfa_register 13
 5275              		@ sp needed
 5276 0008 80BC     		pop	{r7}
 5277              		.cfi_restore 7
 5278              		.cfi_def_cfa_offset 0
 5279 000a 7047     		bx	lr
 5280              		.cfi_endproc
 5281              	.LFE97:
 5282              		.size	cmd_get_joystick, .-cmd_get_joystick
 5283              		.section	.text.cmd_set_inputs,"ax",%progbits
 5284              		.align	2
 5285              		.global	cmd_set_inputs
 5286              		.thumb
 5287              		.thumb_func
 5288              		.type	cmd_set_inputs, %function
 5289              	cmd_set_inputs:
 5290              	.LFB98:
1135:..\src/command_processing.c **** 
1136:..\src/command_processing.c **** void cmd_set_inputs(){
 5291              		.loc 1 1136 0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 0
 5294              		@ frame_needed = 1, uses_anonymous_args = 0
 5295              		@ link register save eliminated.
 5296 0000 80B4     		push	{r7}
 5297              		.cfi_def_cfa_offset 4
 5298              		.cfi_offset 7, -4
 5299 0002 00AF     		add	r7, sp, #0
 5300              		.cfi_def_cfa_register 7
1137:..\src/command_processing.c ****     
1138:..\src/command_processing.c **** }
 5301              		.loc 1 1138 0
 5302 0004 00BF     		nop
 5303 0006 BD46     		mov	sp, r7
 5304              		.cfi_def_cfa_register 13
 5305              		@ sp needed
 5306 0008 80BC     		pop	{r7}
 5307              		.cfi_restore 7
 5308              		.cfi_def_cfa_offset 0
 5309 000a 7047     		bx	lr
 5310              		.cfi_endproc
 5311              	.LFE98:
 5312              		.size	cmd_set_inputs, .-cmd_set_inputs
 5313              		.section	.text.cmd_activate,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 133


 5314              		.align	2
 5315              		.global	cmd_activate
 5316              		.thumb
 5317              		.thumb_func
 5318              		.type	cmd_activate, %function
 5319              	cmd_activate:
 5320              	.LFB99:
1139:..\src/command_processing.c **** 
1140:..\src/command_processing.c **** void cmd_activate(){
 5321              		.loc 1 1140 0
 5322              		.cfi_startproc
 5323              		@ args = 0, pretend = 0, frame = 0
 5324              		@ frame_needed = 1, uses_anonymous_args = 0
 5325              		@ link register save eliminated.
 5326 0000 80B4     		push	{r7}
 5327              		.cfi_def_cfa_offset 4
 5328              		.cfi_offset 7, -4
 5329 0002 00AF     		add	r7, sp, #0
 5330              		.cfi_def_cfa_register 7
1141:..\src/command_processing.c ****     
1142:..\src/command_processing.c **** }
 5331              		.loc 1 1142 0
 5332 0004 00BF     		nop
 5333 0006 BD46     		mov	sp, r7
 5334              		.cfi_def_cfa_register 13
 5335              		@ sp needed
 5336 0008 80BC     		pop	{r7}
 5337              		.cfi_restore 7
 5338              		.cfi_def_cfa_offset 0
 5339 000a 7047     		bx	lr
 5340              		.cfi_endproc
 5341              	.LFE99:
 5342              		.size	cmd_activate, .-cmd_activate
 5343              		.section	.text.cmd_get_activate,"ax",%progbits
 5344              		.align	2
 5345              		.global	cmd_get_activate
 5346              		.thumb
 5347              		.thumb_func
 5348              		.type	cmd_get_activate, %function
 5349              	cmd_get_activate:
 5350              	.LFB100:
1143:..\src/command_processing.c **** 
1144:..\src/command_processing.c **** void cmd_get_activate(){
 5351              		.loc 1 1144 0
 5352              		.cfi_startproc
 5353              		@ args = 0, pretend = 0, frame = 0
 5354              		@ frame_needed = 1, uses_anonymous_args = 0
 5355              		@ link register save eliminated.
 5356 0000 80B4     		push	{r7}
 5357              		.cfi_def_cfa_offset 4
 5358              		.cfi_offset 7, -4
 5359 0002 00AF     		add	r7, sp, #0
 5360              		.cfi_def_cfa_register 7
1145:..\src/command_processing.c ****     
1146:..\src/command_processing.c **** }
 5361              		.loc 1 1146 0
 5362 0004 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 134


 5363 0006 BD46     		mov	sp, r7
 5364              		.cfi_def_cfa_register 13
 5365              		@ sp needed
 5366 0008 80BC     		pop	{r7}
 5367              		.cfi_restore 7
 5368              		.cfi_def_cfa_offset 0
 5369 000a 7047     		bx	lr
 5370              		.cfi_endproc
 5371              	.LFE100:
 5372              		.size	cmd_get_activate, .-cmd_get_activate
 5373              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 5374              		.align	2
 5375              		.global	cmd_get_curr_and_meas
 5376              		.thumb
 5377              		.thumb_func
 5378              		.type	cmd_get_curr_and_meas, %function
 5379              	cmd_get_curr_and_meas:
 5380              	.LFB101:
1147:..\src/command_processing.c **** 
1148:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 5381              		.loc 1 1148 0
 5382              		.cfi_startproc
 5383              		@ args = 0, pretend = 0, frame = 0
 5384              		@ frame_needed = 1, uses_anonymous_args = 0
 5385              		@ link register save eliminated.
 5386 0000 80B4     		push	{r7}
 5387              		.cfi_def_cfa_offset 4
 5388              		.cfi_offset 7, -4
 5389 0002 00AF     		add	r7, sp, #0
 5390              		.cfi_def_cfa_register 7
1149:..\src/command_processing.c ****    
1150:..\src/command_processing.c ****    
1151:..\src/command_processing.c **** }
 5391              		.loc 1 1151 0
 5392 0004 00BF     		nop
 5393 0006 BD46     		mov	sp, r7
 5394              		.cfi_def_cfa_register 13
 5395              		@ sp needed
 5396 0008 80BC     		pop	{r7}
 5397              		.cfi_restore 7
 5398              		.cfi_def_cfa_offset 0
 5399 000a 7047     		bx	lr
 5400              		.cfi_endproc
 5401              	.LFE101:
 5402              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 5403              		.section	.text.cmd_get_currents,"ax",%progbits
 5404              		.align	2
 5405              		.global	cmd_get_currents
 5406              		.thumb
 5407              		.thumb_func
 5408              		.type	cmd_get_currents, %function
 5409              	cmd_get_currents:
 5410              	.LFB102:
1152:..\src/command_processing.c **** 
1153:..\src/command_processing.c **** void cmd_get_currents(){
 5411              		.loc 1 1153 0
 5412              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 135


 5413              		@ args = 0, pretend = 0, frame = 0
 5414              		@ frame_needed = 1, uses_anonymous_args = 0
 5415              		@ link register save eliminated.
 5416 0000 80B4     		push	{r7}
 5417              		.cfi_def_cfa_offset 4
 5418              		.cfi_offset 7, -4
 5419 0002 00AF     		add	r7, sp, #0
 5420              		.cfi_def_cfa_register 7
1154:..\src/command_processing.c ****    
1155:..\src/command_processing.c **** }
 5421              		.loc 1 1155 0
 5422 0004 00BF     		nop
 5423 0006 BD46     		mov	sp, r7
 5424              		.cfi_def_cfa_register 13
 5425              		@ sp needed
 5426 0008 80BC     		pop	{r7}
 5427              		.cfi_restore 7
 5428              		.cfi_def_cfa_offset 0
 5429 000a 7047     		bx	lr
 5430              		.cfi_endproc
 5431              	.LFE102:
 5432              		.size	cmd_get_currents, .-cmd_get_currents
 5433              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 5434              		.align	2
 5435              		.global	cmd_get_currents_for_cuff
 5436              		.thumb
 5437              		.thumb_func
 5438              		.type	cmd_get_currents_for_cuff, %function
 5439              	cmd_get_currents_for_cuff:
 5440              	.LFB103:
1156:..\src/command_processing.c **** 
1157:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 5441              		.loc 1 1157 0
 5442              		.cfi_startproc
 5443              		@ args = 0, pretend = 0, frame = 0
 5444              		@ frame_needed = 1, uses_anonymous_args = 0
 5445              		@ link register save eliminated.
 5446 0000 80B4     		push	{r7}
 5447              		.cfi_def_cfa_offset 4
 5448              		.cfi_offset 7, -4
 5449 0002 00AF     		add	r7, sp, #0
 5450              		.cfi_def_cfa_register 7
1158:..\src/command_processing.c ****    
1159:..\src/command_processing.c **** }
 5451              		.loc 1 1159 0
 5452 0004 00BF     		nop
 5453 0006 BD46     		mov	sp, r7
 5454              		.cfi_def_cfa_register 13
 5455              		@ sp needed
 5456 0008 80BC     		pop	{r7}
 5457              		.cfi_restore 7
 5458              		.cfi_def_cfa_offset 0
 5459 000a 7047     		bx	lr
 5460              		.cfi_endproc
 5461              	.LFE103:
 5462              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 5463              		.section	.text.cmd_get_vibrotactile_inputs,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 136


 5464              		.align	2
 5465              		.global	cmd_get_vibrotactile_inputs
 5466              		.thumb
 5467              		.thumb_func
 5468              		.type	cmd_get_vibrotactile_inputs, %function
 5469              	cmd_get_vibrotactile_inputs:
 5470              	.LFB104:
1160:..\src/command_processing.c **** 
1161:..\src/command_processing.c **** void cmd_get_vibrotactile_inputs(){
 5471              		.loc 1 1161 0
 5472              		.cfi_startproc
 5473              		@ args = 0, pretend = 0, frame = 0
 5474              		@ frame_needed = 1, uses_anonymous_args = 0
 5475              		@ link register save eliminated.
 5476 0000 80B4     		push	{r7}
 5477              		.cfi_def_cfa_offset 4
 5478              		.cfi_offset 7, -4
 5479 0002 00AF     		add	r7, sp, #0
 5480              		.cfi_def_cfa_register 7
1162:..\src/command_processing.c ****     
1163:..\src/command_processing.c **** }
 5481              		.loc 1 1163 0
 5482 0004 00BF     		nop
 5483 0006 BD46     		mov	sp, r7
 5484              		.cfi_def_cfa_register 13
 5485              		@ sp needed
 5486 0008 80BC     		pop	{r7}
 5487              		.cfi_restore 7
 5488              		.cfi_def_cfa_offset 0
 5489 000a 7047     		bx	lr
 5490              		.cfi_endproc
 5491              	.LFE104:
 5492              		.size	cmd_get_vibrotactile_inputs, .-cmd_get_vibrotactile_inputs
 5493              		.section	.text.commReadIMUFromSH,"ax",%progbits
 5494              		.align	2
 5495              		.global	commReadIMUFromSH
 5496              		.thumb
 5497              		.thumb_func
 5498              		.type	commReadIMUFromSH, %function
 5499              	commReadIMUFromSH:
 5500              	.LFB105:
1164:..\src/command_processing.c **** 
1165:..\src/command_processing.c **** //==============================================================================
1166:..\src/command_processing.c **** //                                                 READ IMU VALUES FROM SOFTHAND
1167:..\src/command_processing.c **** //==============================================================================
1168:..\src/command_processing.c **** void commReadIMUFromSH(){
 5501              		.loc 1 1168 0
 5502              		.cfi_startproc
 5503              		@ args = 0, pretend = 0, frame = 32
 5504              		@ frame_needed = 1, uses_anonymous_args = 0
 5505 0000 80B5     		push	{r7, lr}
 5506              		.cfi_def_cfa_offset 8
 5507              		.cfi_offset 7, -8
 5508              		.cfi_offset 14, -4
 5509 0002 88B0     		sub	sp, sp, #32
 5510              		.cfi_def_cfa_offset 40
 5511 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 137


 5512              		.cfi_def_cfa_register 7
1169:..\src/command_processing.c **** 
1170:..\src/command_processing.c ****     // Send CMD_GET_VIBROTACTILE_INPUTS to the slave and gets the PWM control values for the vibrot
1171:..\src/command_processing.c ****     // resulted from the processed IMU values.
1172:..\src/command_processing.c ****     
1173:..\src/command_processing.c ****     uint8 packet_data[16];
1174:..\src/command_processing.c ****     uint8 packet_length;
1175:..\src/command_processing.c ****    
1176:..\src/command_processing.c ****     uint32 t_start, t_end;
1177:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5513              		.loc 1 1177 0
 5514 0006 0123     		movs	r3, #1
 5515 0008 FB77     		strb	r3, [r7, #31]
1178:..\src/command_processing.c **** 
1179:..\src/command_processing.c ****     packet_length = 2;
 5516              		.loc 1 1179 0
 5517 000a 0223     		movs	r3, #2
 5518 000c BB77     		strb	r3, [r7, #30]
1180:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VIBROTACTILE_INPUTS;
 5519              		.loc 1 1180 0
 5520 000e FA23     		movs	r3, #250
 5521 0010 3B71     		strb	r3, [r7, #4]
1181:..\src/command_processing.c ****     packet_data[1] = CMD_GET_VIBROTACTILE_INPUTS;
 5522              		.loc 1 1181 0
 5523 0012 FA23     		movs	r3, #250
 5524 0014 7B71     		strb	r3, [r7, #5]
1182:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5525              		.loc 1 1182 0
 5526 0016 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 5527 0018 99B2     		uxth	r1, r3
 5528 001a 234B     		ldr	r3, .L271
 5529 001c 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5530 0020 3B1D     		adds	r3, r7, #4
 5531 0022 1846     		mov	r0, r3
 5532 0024 FFF7FEFF 		bl	commWriteID
1183:..\src/command_processing.c **** 
1184:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5533              		.loc 1 1184 0
 5534 0028 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5535 002c 0346     		mov	r3, r0
 5536 002e BB61     		str	r3, [r7, #24]
1185:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_VIBROTACTILE_INPUTS) {
 5537              		.loc 1 1185 0
 5538 0030 18E0     		b	.L265
 5539              	.L268:
1186:..\src/command_processing.c ****         if (interrupt_flag){
 5540              		.loc 1 1186 0
 5541 0032 1E4B     		ldr	r3, .L271+4
 5542 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5543 0036 002B     		cmp	r3, #0
 5544 0038 04D0     		beq	.L266
1187:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5545              		.loc 1 1187 0
 5546 003a 1C4B     		ldr	r3, .L271+4
 5547 003c 0022     		movs	r2, #0
 5548 003e 1A70     		strb	r2, [r3]
1188:..\src/command_processing.c ****             interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 138


 5549              		.loc 1 1188 0
 5550 0040 FFF7FEFF 		bl	interrupt_manager
 5551              	.L266:
1189:..\src/command_processing.c ****         }
1190:..\src/command_processing.c **** 
1191:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5552              		.loc 1 1191 0
 5553 0044 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5554 0048 0346     		mov	r3, r0
 5555 004a 7B61     		str	r3, [r7, #20]
1192:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5556              		.loc 1 1192 0
 5557 004c BA69     		ldr	r2, [r7, #24]
 5558 004e 7B69     		ldr	r3, [r7, #20]
 5559 0050 D31A     		subs	r3, r2, r3
 5560 0052 174A     		ldr	r2, .L271+8
 5561 0054 9342     		cmp	r3, r2
 5562 0056 05D9     		bls	.L265
1193:..\src/command_processing.c ****             read_flag = FALSE;
 5563              		.loc 1 1193 0
 5564 0058 0023     		movs	r3, #0
 5565 005a FB77     		strb	r3, [r7, #31]
1194:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5566              		.loc 1 1194 0
 5567 005c 154B     		ldr	r3, .L271+12
 5568 005e 0022     		movs	r2, #0
 5569 0060 1A70     		strb	r2, [r3]
1195:..\src/command_processing.c ****             break;
 5570              		.loc 1 1195 0
 5571 0062 03E0     		b	.L267
 5572              	.L265:
1185:..\src/command_processing.c ****         if (interrupt_flag){
 5573              		.loc 1 1185 0
 5574 0064 144B     		ldr	r3, .L271+16
 5575 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5576 0068 FB2B     		cmp	r3, #251
 5577 006a E2D1     		bne	.L268
 5578              	.L267:
1196:..\src/command_processing.c ****         }
1197:..\src/command_processing.c ****     }
1198:..\src/command_processing.c **** 
1199:..\src/command_processing.c ****         if (read_flag) {
 5579              		.loc 1 1199 0
 5580 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5581 006e 002B     		cmp	r3, #0
 5582 0070 15D0     		beq	.L270
1200:..\src/command_processing.c ****         PWM_IMU_1 = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);      
 5583              		.loc 1 1200 0
 5584 0072 114B     		ldr	r3, .L271+16
 5585 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5586 0076 1B02     		lsls	r3, r3, #8
 5587 0078 1AB2     		sxth	r2, r3
 5588 007a 0F4B     		ldr	r3, .L271+16
 5589 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5590 007e 1BB2     		sxth	r3, r3
 5591 0080 1343     		orrs	r3, r3, r2
 5592 0082 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 139


 5593 0084 0D4B     		ldr	r3, .L271+20
 5594 0086 1A80     		strh	r2, [r3]	@ movhi
1201:..\src/command_processing.c ****         PWM_IMU_2 = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);      
 5595              		.loc 1 1201 0
 5596 0088 0B4B     		ldr	r3, .L271+16
 5597 008a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5598 008c 1B02     		lsls	r3, r3, #8
 5599 008e 1AB2     		sxth	r2, r3
 5600 0090 094B     		ldr	r3, .L271+16
 5601 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5602 0094 1BB2     		sxth	r3, r3
 5603 0096 1343     		orrs	r3, r3, r2
 5604 0098 1AB2     		sxth	r2, r3
 5605 009a 094B     		ldr	r3, .L271+24
 5606 009c 1A80     		strh	r2, [r3]	@ movhi
 5607              	.L270:
1202:..\src/command_processing.c ****     }
1203:..\src/command_processing.c ****     
1204:..\src/command_processing.c **** }
 5608              		.loc 1 1204 0
 5609 009e 00BF     		nop
 5610 00a0 2037     		adds	r7, r7, #32
 5611              		.cfi_def_cfa_offset 8
 5612 00a2 BD46     		mov	sp, r7
 5613              		.cfi_def_cfa_register 13
 5614              		@ sp needed
 5615 00a4 80BD     		pop	{r7, pc}
 5616              	.L272:
 5617 00a6 00BF     		.align	2
 5618              	.L271:
 5619 00a8 00000000 		.word	c_mem
 5620 00ac 00000000 		.word	interrupt_flag
 5621 00b0 20AA4400 		.word	4500000
 5622 00b4 00000000 		.word	master_mode
 5623 00b8 00000000 		.word	g_rx
 5624 00bc 00000000 		.word	PWM_IMU_1
 5625 00c0 00000000 		.word	PWM_IMU_2
 5626              		.cfi_endproc
 5627              	.LFE105:
 5628              		.size	commReadIMUFromSH, .-commReadIMUFromSH
 5629              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 5630              		.align	2
 5631              		.global	commReadResCurrFromSH
 5632              		.thumb
 5633              		.thumb_func
 5634              		.type	commReadResCurrFromSH, %function
 5635              	commReadResCurrFromSH:
 5636              	.LFB106:
1205:..\src/command_processing.c **** 
1206:..\src/command_processing.c **** //==============================================================================
1207:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
1208:..\src/command_processing.c **** //==============================================================================
1209:..\src/command_processing.c **** 
1210:..\src/command_processing.c **** int16 commReadResCurrFromSH()
1211:..\src/command_processing.c **** {
 5637              		.loc 1 1211 0
 5638              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 140


 5639              		@ args = 0, pretend = 0, frame = 32
 5640              		@ frame_needed = 1, uses_anonymous_args = 0
 5641 0000 80B5     		push	{r7, lr}
 5642              		.cfi_def_cfa_offset 8
 5643              		.cfi_offset 7, -8
 5644              		.cfi_offset 14, -4
 5645 0002 88B0     		sub	sp, sp, #32
 5646              		.cfi_def_cfa_offset 40
 5647 0004 00AF     		add	r7, sp, #0
 5648              		.cfi_def_cfa_register 7
1212:..\src/command_processing.c ****     uint8 packet_data[16];
1213:..\src/command_processing.c ****     uint8 packet_length;
1214:..\src/command_processing.c ****     int16 curr_diff = 0;
 5649              		.loc 1 1214 0
 5650 0006 0023     		movs	r3, #0
 5651 0008 FB83     		strh	r3, [r7, #30]	@ movhi
1215:..\src/command_processing.c ****     uint32 t_start, t_end;
1216:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 5652              		.loc 1 1216 0
 5653 000a 0123     		movs	r3, #1
 5654 000c 7B77     		strb	r3, [r7, #29]
1217:..\src/command_processing.c **** 
1218:..\src/command_processing.c ****     packet_length = 2;
 5655              		.loc 1 1218 0
 5656 000e 0223     		movs	r3, #2
 5657 0010 3B77     		strb	r3, [r7, #28]
1219:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 5658              		.loc 1 1219 0
 5659 0012 8C23     		movs	r3, #140
 5660 0014 3B71     		strb	r3, [r7, #4]
1220:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 5661              		.loc 1 1220 0
 5662 0016 8C23     		movs	r3, #140
 5663 0018 7B71     		strb	r3, [r7, #5]
1221:..\src/command_processing.c ****     commWriteID(packet_data, packet_length, c_mem.MS.slave_ID);
 5664              		.loc 1 1221 0
 5665 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 5666 001c 99B2     		uxth	r1, r3
 5667 001e 1D4B     		ldr	r3, .L280
 5668 0020 93F84120 		ldrb	r2, [r3, #65]	@ zero_extendqisi2
 5669 0024 3B1D     		adds	r3, r7, #4
 5670 0026 1846     		mov	r0, r3
 5671 0028 FFF7FEFF 		bl	commWriteID
1222:..\src/command_processing.c **** 
1223:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 5672              		.loc 1 1223 0
 5673 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5674 0030 0346     		mov	r3, r0
 5675 0032 BB61     		str	r3, [r7, #24]
1224:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 5676              		.loc 1 1224 0
 5677 0034 18E0     		b	.L274
 5678              	.L277:
1225:..\src/command_processing.c ****         if (interrupt_flag){
 5679              		.loc 1 1225 0
 5680 0036 184B     		ldr	r3, .L280+4
 5681 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 141


 5682 003a 002B     		cmp	r3, #0
 5683 003c 04D0     		beq	.L275
1226:..\src/command_processing.c ****             interrupt_flag = FALSE;
 5684              		.loc 1 1226 0
 5685 003e 164B     		ldr	r3, .L280+4
 5686 0040 0022     		movs	r2, #0
 5687 0042 1A70     		strb	r2, [r3]
1227:..\src/command_processing.c ****             interrupt_manager();
 5688              		.loc 1 1227 0
 5689 0044 FFF7FEFF 		bl	interrupt_manager
 5690              	.L275:
1228:..\src/command_processing.c ****         }
1229:..\src/command_processing.c **** 
1230:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 5691              		.loc 1 1230 0
 5692 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 5693 004c 0346     		mov	r3, r0
 5694 004e 7B61     		str	r3, [r7, #20]
1231:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 5695              		.loc 1 1231 0
 5696 0050 BA69     		ldr	r2, [r7, #24]
 5697 0052 7B69     		ldr	r3, [r7, #20]
 5698 0054 D31A     		subs	r3, r2, r3
 5699 0056 114A     		ldr	r2, .L280+8
 5700 0058 9342     		cmp	r3, r2
 5701 005a 05D9     		bls	.L274
1232:..\src/command_processing.c ****             read_flag = FALSE;
 5702              		.loc 1 1232 0
 5703 005c 0023     		movs	r3, #0
 5704 005e 7B77     		strb	r3, [r7, #29]
1233:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 5705              		.loc 1 1233 0
 5706 0060 0F4B     		ldr	r3, .L280+12
 5707 0062 0022     		movs	r2, #0
 5708 0064 1A70     		strb	r2, [r3]
1234:..\src/command_processing.c ****             break;
 5709              		.loc 1 1234 0
 5710 0066 03E0     		b	.L276
 5711              	.L274:
1224:..\src/command_processing.c ****         if (interrupt_flag){
 5712              		.loc 1 1224 0
 5713 0068 0E4B     		ldr	r3, .L280+16
 5714 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5715 006c 8E2B     		cmp	r3, #142
 5716 006e E2D1     		bne	.L277
 5717              	.L276:
1235:..\src/command_processing.c ****         }
1236:..\src/command_processing.c ****     }
1237:..\src/command_processing.c **** 
1238:..\src/command_processing.c ****     if (read_flag) {
 5718              		.loc 1 1238 0
 5719 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 5720 0072 002B     		cmp	r3, #0
 5721 0074 08D0     		beq	.L278
1239:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 5722              		.loc 1 1239 0
 5723 0076 0B4B     		ldr	r3, .L280+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 142


 5724 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5725 007a 1B02     		lsls	r3, r3, #8
 5726 007c 1AB2     		sxth	r2, r3
 5727 007e 094B     		ldr	r3, .L280+16
 5728 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5729 0082 1BB2     		sxth	r3, r3
 5730 0084 1343     		orrs	r3, r3, r2
 5731 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 5732              	.L278:
1240:..\src/command_processing.c ****     }
1241:..\src/command_processing.c ****     
1242:..\src/command_processing.c ****     return curr_diff;
 5733              		.loc 1 1242 0
 5734 0088 B7F91E30 		ldrsh	r3, [r7, #30]
1243:..\src/command_processing.c **** }
 5735              		.loc 1 1243 0
 5736 008c 1846     		mov	r0, r3
 5737 008e 2037     		adds	r7, r7, #32
 5738              		.cfi_def_cfa_offset 8
 5739 0090 BD46     		mov	sp, r7
 5740              		.cfi_def_cfa_register 13
 5741              		@ sp needed
 5742 0092 80BD     		pop	{r7, pc}
 5743              	.L281:
 5744              		.align	2
 5745              	.L280:
 5746 0094 00000000 		.word	c_mem
 5747 0098 00000000 		.word	interrupt_flag
 5748 009c 20AA4400 		.word	4500000
 5749 00a0 00000000 		.word	master_mode
 5750 00a4 00000000 		.word	g_rx
 5751              		.cfi_endproc
 5752              	.LFE106:
 5753              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 5754              		.section	.text.cmd_set_baudrate,"ax",%progbits
 5755              		.align	2
 5756              		.global	cmd_set_baudrate
 5757              		.thumb
 5758              		.thumb_func
 5759              		.type	cmd_set_baudrate, %function
 5760              	cmd_set_baudrate:
 5761              	.LFB107:
1244:..\src/command_processing.c **** 
1245:..\src/command_processing.c **** 
1246:..\src/command_processing.c **** /////////////////////////////////////////////////////////////////////////////////////
1247:..\src/command_processing.c **** 
1248:..\src/command_processing.c **** void cmd_set_baudrate(){
 5762              		.loc 1 1248 0
 5763              		.cfi_startproc
 5764              		@ args = 0, pretend = 0, frame = 0
 5765              		@ frame_needed = 1, uses_anonymous_args = 0
 5766              		@ link register save eliminated.
 5767 0000 80B4     		push	{r7}
 5768              		.cfi_def_cfa_offset 4
 5769              		.cfi_offset 7, -4
 5770 0002 00AF     		add	r7, sp, #0
 5771              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 143


1249:..\src/command_processing.c ****     
1250:..\src/command_processing.c **** }
 5772              		.loc 1 1250 0
 5773 0004 00BF     		nop
 5774 0006 BD46     		mov	sp, r7
 5775              		.cfi_def_cfa_register 13
 5776              		@ sp needed
 5777 0008 80BC     		pop	{r7}
 5778              		.cfi_restore 7
 5779              		.cfi_def_cfa_offset 0
 5780 000a 7047     		bx	lr
 5781              		.cfi_endproc
 5782              	.LFE107:
 5783              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 5784              		.section	.text.cmd_ping,"ax",%progbits
 5785              		.align	2
 5786              		.global	cmd_ping
 5787              		.thumb
 5788              		.thumb_func
 5789              		.type	cmd_ping, %function
 5790              	cmd_ping:
 5791              	.LFB108:
1251:..\src/command_processing.c **** 
1252:..\src/command_processing.c **** void cmd_ping(){
 5792              		.loc 1 1252 0
 5793              		.cfi_startproc
 5794              		@ args = 0, pretend = 0, frame = 8
 5795              		@ frame_needed = 1, uses_anonymous_args = 0
 5796 0000 80B5     		push	{r7, lr}
 5797              		.cfi_def_cfa_offset 8
 5798              		.cfi_offset 7, -8
 5799              		.cfi_offset 14, -4
 5800 0002 82B0     		sub	sp, sp, #8
 5801              		.cfi_def_cfa_offset 16
 5802 0004 00AF     		add	r7, sp, #0
 5803              		.cfi_def_cfa_register 7
1253:..\src/command_processing.c **** 
1254:..\src/command_processing.c ****     uint8 packet_data[2];
1255:..\src/command_processing.c **** 
1256:..\src/command_processing.c ****     // Header
1257:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 5804              		.loc 1 1257 0
 5805 0006 0023     		movs	r3, #0
 5806 0008 3B71     		strb	r3, [r7, #4]
1258:..\src/command_processing.c ****     
1259:..\src/command_processing.c ****     // Load Payload
1260:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 5807              		.loc 1 1260 0
 5808 000a 0023     		movs	r3, #0
 5809 000c 7B71     		strb	r3, [r7, #5]
1261:..\src/command_processing.c **** 
1262:..\src/command_processing.c ****     // Send Package to uart
1263:..\src/command_processing.c ****     commWrite(packet_data, 2);
 5810              		.loc 1 1263 0
 5811 000e 3B1D     		adds	r3, r7, #4
 5812 0010 0221     		movs	r1, #2
 5813 0012 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 144


 5814 0014 FFF7FEFF 		bl	commWrite
1264:..\src/command_processing.c **** }
 5815              		.loc 1 1264 0
 5816 0018 00BF     		nop
 5817 001a 0837     		adds	r7, r7, #8
 5818              		.cfi_def_cfa_offset 8
 5819 001c BD46     		mov	sp, r7
 5820              		.cfi_def_cfa_register 13
 5821              		@ sp needed
 5822 001e 80BD     		pop	{r7, pc}
 5823              		.cfi_endproc
 5824              	.LFE108:
 5825              		.size	cmd_ping, .-cmd_ping
 5826              		.section	.text.cmd_get_inputs,"ax",%progbits
 5827              		.align	2
 5828              		.global	cmd_get_inputs
 5829              		.thumb
 5830              		.thumb_func
 5831              		.type	cmd_get_inputs, %function
 5832              	cmd_get_inputs:
 5833              	.LFB109:
1265:..\src/command_processing.c **** 
1266:..\src/command_processing.c **** void cmd_get_inputs(){
 5834              		.loc 1 1266 0
 5835              		.cfi_startproc
 5836              		@ args = 0, pretend = 0, frame = 0
 5837              		@ frame_needed = 1, uses_anonymous_args = 0
 5838              		@ link register save eliminated.
 5839 0000 80B4     		push	{r7}
 5840              		.cfi_def_cfa_offset 4
 5841              		.cfi_offset 7, -4
 5842 0002 00AF     		add	r7, sp, #0
 5843              		.cfi_def_cfa_register 7
1267:..\src/command_processing.c **** 
1268:..\src/command_processing.c **** }
 5844              		.loc 1 1268 0
 5845 0004 00BF     		nop
 5846 0006 BD46     		mov	sp, r7
 5847              		.cfi_def_cfa_register 13
 5848              		@ sp needed
 5849 0008 80BC     		pop	{r7}
 5850              		.cfi_restore 7
 5851              		.cfi_def_cfa_offset 0
 5852 000a 7047     		bx	lr
 5853              		.cfi_endproc
 5854              	.LFE109:
 5855              		.size	cmd_get_inputs, .-cmd_get_inputs
 5856              		.section	.text.cmd_store_params,"ax",%progbits
 5857              		.align	2
 5858              		.global	cmd_store_params
 5859              		.thumb
 5860              		.thumb_func
 5861              		.type	cmd_store_params, %function
 5862              	cmd_store_params:
 5863              	.LFB110:
1269:..\src/command_processing.c **** 
1270:..\src/command_processing.c **** void cmd_store_params(){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 145


 5864              		.loc 1 1270 0
 5865              		.cfi_startproc
 5866              		@ args = 0, pretend = 0, frame = 0
 5867              		@ frame_needed = 1, uses_anonymous_args = 0
 5868              		@ link register save eliminated.
 5869 0000 80B4     		push	{r7}
 5870              		.cfi_def_cfa_offset 4
 5871              		.cfi_offset 7, -4
 5872 0002 00AF     		add	r7, sp, #0
 5873              		.cfi_def_cfa_register 7
1271:..\src/command_processing.c ****   
1272:..\src/command_processing.c **** }
 5874              		.loc 1 1272 0
 5875 0004 00BF     		nop
 5876 0006 BD46     		mov	sp, r7
 5877              		.cfi_def_cfa_register 13
 5878              		@ sp needed
 5879 0008 80BC     		pop	{r7}
 5880              		.cfi_restore 7
 5881              		.cfi_def_cfa_offset 0
 5882 000a 7047     		bx	lr
 5883              		.cfi_endproc
 5884              	.LFE110:
 5885              		.size	cmd_store_params, .-cmd_store_params
 5886              		.section	.text.cmd_get_emg,"ax",%progbits
 5887              		.align	2
 5888              		.global	cmd_get_emg
 5889              		.thumb
 5890              		.thumb_func
 5891              		.type	cmd_get_emg, %function
 5892              	cmd_get_emg:
 5893              	.LFB111:
1273:..\src/command_processing.c **** 
1274:..\src/command_processing.c **** void cmd_get_emg(){
 5894              		.loc 1 1274 0
 5895              		.cfi_startproc
 5896              		@ args = 0, pretend = 0, frame = 16
 5897              		@ frame_needed = 1, uses_anonymous_args = 0
 5898 0000 80B5     		push	{r7, lr}
 5899              		.cfi_def_cfa_offset 8
 5900              		.cfi_offset 7, -8
 5901              		.cfi_offset 14, -4
 5902 0002 84B0     		sub	sp, sp, #16
 5903              		.cfi_def_cfa_offset 24
 5904 0004 00AF     		add	r7, sp, #0
 5905              		.cfi_def_cfa_register 7
1275:..\src/command_processing.c ****     
1276:..\src/command_processing.c ****     uint8 packet_data[6];
1277:..\src/command_processing.c ****     int16 aux_int16;
1278:..\src/command_processing.c ****     
1279:..\src/command_processing.c ****     // Header        
1280:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 5906              		.loc 1 1280 0
 5907 0006 8823     		movs	r3, #136
 5908 0008 3B72     		strb	r3, [r7, #8]
1281:..\src/command_processing.c ****     
1282:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 146


 5909              		.loc 1 1282 0
 5910 000a 144B     		ldr	r3, .L287
 5911 000c 1B68     		ldr	r3, [r3]
 5912 000e 1BB2     		sxth	r3, r3
 5913 0010 FB80     		strh	r3, [r7, #6]	@ movhi
1283:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 5914              		.loc 1 1283 0
 5915 0012 BB1D     		adds	r3, r7, #6
 5916 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5917 0016 BB72     		strb	r3, [r7, #10]
1284:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 5918              		.loc 1 1284 0
 5919 0018 BB1D     		adds	r3, r7, #6
 5920 001a 0133     		adds	r3, r3, #1
 5921 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5922 001e 7B72     		strb	r3, [r7, #9]
1285:..\src/command_processing.c ****     
1286:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 5923              		.loc 1 1286 0
 5924 0020 0E4B     		ldr	r3, .L287
 5925 0022 5B68     		ldr	r3, [r3, #4]
 5926 0024 1BB2     		sxth	r3, r3
 5927 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1287:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 5928              		.loc 1 1287 0
 5929 0028 BB1D     		adds	r3, r7, #6
 5930 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5931 002c 3B73     		strb	r3, [r7, #12]
1288:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 5932              		.loc 1 1288 0
 5933 002e BB1D     		adds	r3, r7, #6
 5934 0030 0133     		adds	r3, r3, #1
 5935 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5936 0034 FB72     		strb	r3, [r7, #11]
1289:..\src/command_processing.c **** 
1290:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 5937              		.loc 1 1290 0
 5938 0036 07F10803 		add	r3, r7, #8
 5939 003a 0521     		movs	r1, #5
 5940 003c 1846     		mov	r0, r3
 5941 003e FFF7FEFF 		bl	LCRChecksum
 5942 0042 0346     		mov	r3, r0
 5943 0044 7B73     		strb	r3, [r7, #13]
1291:..\src/command_processing.c **** 
1292:..\src/command_processing.c ****     commWrite(packet_data, 6);
 5944              		.loc 1 1292 0
 5945 0046 07F10803 		add	r3, r7, #8
 5946 004a 0621     		movs	r1, #6
 5947 004c 1846     		mov	r0, r3
 5948 004e FFF7FEFF 		bl	commWrite
1293:..\src/command_processing.c **** 
1294:..\src/command_processing.c **** }
 5949              		.loc 1 1294 0
 5950 0052 00BF     		nop
 5951 0054 1037     		adds	r7, r7, #16
 5952              		.cfi_def_cfa_offset 8
 5953 0056 BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 147


 5954              		.cfi_def_cfa_register 13
 5955              		@ sp needed
 5956 0058 80BD     		pop	{r7, pc}
 5957              	.L288:
 5958 005a 00BF     		.align	2
 5959              	.L287:
 5960 005c 00000000 		.word	g_adc_measOld
 5961              		.cfi_endproc
 5962              	.LFE111:
 5963              		.size	cmd_get_emg, .-cmd_get_emg
 5964              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 5965              		.align	2
 5966              		.global	cmd_get_imu_readings
 5967              		.thumb
 5968              		.thumb_func
 5969              		.type	cmd_get_imu_readings, %function
 5970              	cmd_get_imu_readings:
 5971              	.LFB112:
1295:..\src/command_processing.c **** 
1296:..\src/command_processing.c **** void cmd_get_imu_readings(){
 5972              		.loc 1 1296 0
 5973              		.cfi_startproc
 5974              		@ args = 0, pretend = 0, frame = 0
 5975              		@ frame_needed = 1, uses_anonymous_args = 0
 5976              		@ link register save eliminated.
 5977 0000 80B4     		push	{r7}
 5978              		.cfi_def_cfa_offset 4
 5979              		.cfi_offset 7, -4
 5980 0002 00AF     		add	r7, sp, #0
 5981              		.cfi_def_cfa_register 7
1297:..\src/command_processing.c ****  
1298:..\src/command_processing.c **** }
 5982              		.loc 1 1298 0
 5983 0004 00BF     		nop
 5984 0006 BD46     		mov	sp, r7
 5985              		.cfi_def_cfa_register 13
 5986              		@ sp needed
 5987 0008 80BC     		pop	{r7}
 5988              		.cfi_restore 7
 5989              		.cfi_def_cfa_offset 0
 5990 000a 7047     		bx	lr
 5991              		.cfi_endproc
 5992              	.LFE112:
 5993              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 5994              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 5995              		.align	2
 5996              		.global	cmd_get_encoder_map
 5997              		.thumb
 5998              		.thumb_func
 5999              		.type	cmd_get_encoder_map, %function
 6000              	cmd_get_encoder_map:
 6001              	.LFB113:
1299:..\src/command_processing.c **** 
1300:..\src/command_processing.c **** void cmd_get_encoder_map(){
 6002              		.loc 1 1300 0
 6003              		.cfi_startproc
 6004              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 148


 6005              		@ frame_needed = 1, uses_anonymous_args = 0
 6006              		@ link register save eliminated.
 6007 0000 80B4     		push	{r7}
 6008              		.cfi_def_cfa_offset 4
 6009              		.cfi_offset 7, -4
 6010 0002 00AF     		add	r7, sp, #0
 6011              		.cfi_def_cfa_register 7
1301:..\src/command_processing.c ****    }
 6012              		.loc 1 1301 0
 6013 0004 00BF     		nop
 6014 0006 BD46     		mov	sp, r7
 6015              		.cfi_def_cfa_register 13
 6016              		@ sp needed
 6017 0008 80BC     		pop	{r7}
 6018              		.cfi_restore 7
 6019              		.cfi_def_cfa_offset 0
 6020 000a 7047     		bx	lr
 6021              		.cfi_endproc
 6022              	.LFE113:
 6023              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 6024              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 6025              		.align	2
 6026              		.global	cmd_get_encoder_raw
 6027              		.thumb
 6028              		.thumb_func
 6029              		.type	cmd_get_encoder_raw, %function
 6030              	cmd_get_encoder_raw:
 6031              	.LFB114:
1302:..\src/command_processing.c **** 
1303:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 6032              		.loc 1 1303 0
 6033              		.cfi_startproc
 6034              		@ args = 0, pretend = 0, frame = 0
 6035              		@ frame_needed = 1, uses_anonymous_args = 0
 6036              		@ link register save eliminated.
 6037 0000 80B4     		push	{r7}
 6038              		.cfi_def_cfa_offset 4
 6039              		.cfi_offset 7, -4
 6040 0002 00AF     		add	r7, sp, #0
 6041              		.cfi_def_cfa_register 7
1304:..\src/command_processing.c ****    }
 6042              		.loc 1 1304 0
 6043 0004 00BF     		nop
 6044 0006 BD46     		mov	sp, r7
 6045              		.cfi_def_cfa_register 13
 6046              		@ sp needed
 6047 0008 80BC     		pop	{r7}
 6048              		.cfi_restore 7
 6049              		.cfi_def_cfa_offset 0
 6050 000a 7047     		bx	lr
 6051              		.cfi_endproc
 6052              	.LFE114:
 6053              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 6054              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 6055              		.align	2
 6056              		.global	cmd_get_ADC_map
 6057              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 149


 6058              		.thumb_func
 6059              		.type	cmd_get_ADC_map, %function
 6060              	cmd_get_ADC_map:
 6061              	.LFB115:
1305:..\src/command_processing.c **** 
1306:..\src/command_processing.c **** void cmd_get_ADC_map(){
 6062              		.loc 1 1306 0
 6063              		.cfi_startproc
 6064              		@ args = 0, pretend = 0, frame = 0
 6065              		@ frame_needed = 1, uses_anonymous_args = 0
 6066              		@ link register save eliminated.
 6067 0000 80B4     		push	{r7}
 6068              		.cfi_def_cfa_offset 4
 6069              		.cfi_offset 7, -4
 6070 0002 00AF     		add	r7, sp, #0
 6071              		.cfi_def_cfa_register 7
1307:..\src/command_processing.c ****    }
 6072              		.loc 1 1307 0
 6073 0004 00BF     		nop
 6074 0006 BD46     		mov	sp, r7
 6075              		.cfi_def_cfa_register 13
 6076              		@ sp needed
 6077 0008 80BC     		pop	{r7}
 6078              		.cfi_restore 7
 6079              		.cfi_def_cfa_offset 0
 6080 000a 7047     		bx	lr
 6081              		.cfi_endproc
 6082              	.LFE115:
 6083              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 6084              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 6085              		.align	2
 6086              		.global	cmd_get_ADC_raw
 6087              		.thumb
 6088              		.thumb_func
 6089              		.type	cmd_get_ADC_raw, %function
 6090              	cmd_get_ADC_raw:
 6091              	.LFB116:
1308:..\src/command_processing.c **** 
1309:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 6092              		.loc 1 1309 0
 6093              		.cfi_startproc
 6094              		@ args = 0, pretend = 0, frame = 0
 6095              		@ frame_needed = 1, uses_anonymous_args = 0
 6096              		@ link register save eliminated.
 6097 0000 80B4     		push	{r7}
 6098              		.cfi_def_cfa_offset 4
 6099              		.cfi_offset 7, -4
 6100 0002 00AF     		add	r7, sp, #0
 6101              		.cfi_def_cfa_register 7
1310:..\src/command_processing.c ****    
1311:..\src/command_processing.c **** }
 6102              		.loc 1 1311 0
 6103 0004 00BF     		nop
 6104 0006 BD46     		mov	sp, r7
 6105              		.cfi_def_cfa_register 13
 6106              		@ sp needed
 6107 0008 80BC     		pop	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 150


 6108              		.cfi_restore 7
 6109              		.cfi_def_cfa_offset 0
 6110 000a 7047     		bx	lr
 6111              		.cfi_endproc
 6112              	.LFE116:
 6113              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 6114              		.section	.text.cmd_get_SD_file,"ax",%progbits
 6115              		.align	2
 6116              		.global	cmd_get_SD_file
 6117              		.thumb
 6118              		.thumb_func
 6119              		.type	cmd_get_SD_file, %function
 6120              	cmd_get_SD_file:
 6121              	.LFB117:
1312:..\src/command_processing.c **** 
1313:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 6122              		.loc 1 1313 0
 6123              		.cfi_startproc
 6124              		@ args = 0, pretend = 0, frame = 20064
 6125              		@ frame_needed = 1, uses_anonymous_args = 0
 6126 0000 80B5     		push	{r7, lr}
 6127              		.cfi_def_cfa_offset 8
 6128              		.cfi_offset 7, -8
 6129              		.cfi_offset 14, -4
 6130 0002 ADF59C4D 		sub	sp, sp, #19968
 6131              		.cfi_def_cfa_offset 19976
 6132 0006 98B0     		sub	sp, sp, #96
 6133              		.cfi_def_cfa_offset 20072
 6134 0008 00AF     		add	r7, sp, #0
 6135              		.cfi_def_cfa_register 7
 6136 000a 0246     		mov	r2, r0
 6137 000c 07F16003 		add	r3, r7, #96
 6138 0010 5A3B     		subs	r3, r3, #90
 6139 0012 1A80     		strh	r2, [r3]	@ movhi
1314:..\src/command_processing.c ****     
1315:..\src/command_processing.c ****     uint8 i = 0;
 6140              		.loc 1 1315 0
 6141 0014 0023     		movs	r3, #0
 6142 0016 07F59C42 		add	r2, r7, #19968
 6143 001a 02F15F02 		add	r2, r2, #95
 6144 001e 1370     		strb	r3, [r2]
1316:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 6145              		.loc 1 1316 0
 6146 0020 0023     		movs	r3, #0
 6147 0022 07F59C42 		add	r2, r7, #19968
 6148 0026 02F12C02 		add	r2, r2, #44
 6149 002a 1360     		str	r3, [r2]
 6150 002c 07F59C43 		add	r3, r7, #19968
 6151 0030 03F13003 		add	r3, r3, #48
 6152 0034 2E22     		movs	r2, #46
 6153 0036 0021     		movs	r1, #0
 6154 0038 1846     		mov	r0, r3
 6155 003a FFF7FEFF 		bl	memset
1317:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 6156              		.loc 1 1317 0
 6157 003e 07F16003 		add	r3, r7, #96
 6158 0042 543B     		subs	r3, r3, #84
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 151


 6159 0044 0022     		movs	r2, #0
 6160 0046 1A60     		str	r2, [r3]
 6161 0048 0433     		adds	r3, r3, #4
 6162 004a 44F61C62 		movw	r2, #19996
 6163 004e 0021     		movs	r1, #0
 6164 0050 1846     		mov	r0, r3
 6165 0052 FFF7FEFF 		bl	memset
1318:..\src/command_processing.c ****     strcpy(filename, "");
 6166              		.loc 1 1318 0
 6167 0056 3C4B     		ldr	r3, .L299
 6168 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6169 005a 07F59C42 		add	r2, r7, #19968
 6170 005e 02F12C02 		add	r2, r2, #44
 6171 0062 1370     		strb	r3, [r2]
1319:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 6172              		.loc 1 1319 0
 6173 0064 384B     		ldr	r3, .L299
 6174 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6175 0068 07F16003 		add	r3, r7, #96
 6176 006c 543B     		subs	r3, r3, #84
 6177 006e 1A70     		strb	r2, [r3]
1320:..\src/command_processing.c ****     
1321:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 6178              		.loc 1 1321 0
 6179 0070 0023     		movs	r3, #0
 6180 0072 07F59C42 		add	r2, r7, #19968
 6181 0076 02F15F02 		add	r2, r2, #95
 6182 007a 1370     		strb	r3, [r2]
 6183 007c 1DE0     		b	.L295
 6184              	.L296:
1322:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6185              		.loc 1 1322 0 discriminator 3
 6186 007e 07F59C43 		add	r3, r7, #19968
 6187 0082 03F15F03 		add	r3, r3, #95
 6188 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6189 0088 07F59C42 		add	r2, r7, #19968
 6190 008c 02F12C02 		add	r2, r2, #44
 6191 0090 1344     		add	r3, r3, r2
 6192 0092 07F59C42 		add	r2, r7, #19968
 6193 0096 02F15F02 		add	r2, r2, #95
 6194 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6195 009c 0332     		adds	r2, r2, #3
 6196 009e 2B49     		ldr	r1, .L299+4
 6197 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 6198 00a2 1A70     		strb	r2, [r3]
1321:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6199              		.loc 1 1321 0 discriminator 3
 6200 00a4 07F59C43 		add	r3, r7, #19968
 6201 00a8 03F15F03 		add	r3, r3, #95
 6202 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6203 00ae 0133     		adds	r3, r3, #1
 6204 00b0 07F59C42 		add	r2, r7, #19968
 6205 00b4 02F15F02 		add	r2, r2, #95
 6206 00b8 1370     		strb	r3, [r2]
 6207              	.L295:
1321:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 6208              		.loc 1 1321 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 152


 6209 00ba 07F59C43 		add	r3, r7, #19968
 6210 00be 03F15F03 		add	r3, r3, #95
 6211 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6212 00c4 9AB2     		uxth	r2, r3
 6213 00c6 07F16003 		add	r3, r7, #96
 6214 00ca 5A3B     		subs	r3, r3, #90
 6215 00cc 1B88     		ldrh	r3, [r3]
 6216 00ce 9342     		cmp	r3, r2
 6217 00d0 D5D8     		bhi	.L296
1323:..\src/command_processing.c ****     }
1324:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 6218              		.loc 1 1324 0 is_stmt 1
 6219 00d2 07F59C43 		add	r3, r7, #19968
 6220 00d6 03F15F03 		add	r3, r3, #95
 6221 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6222 00dc 07F59C42 		add	r2, r7, #19968
 6223 00e0 02F12C02 		add	r2, r2, #44
 6224 00e4 1344     		add	r3, r3, r2
 6225 00e6 0022     		movs	r2, #0
 6226 00e8 1A70     		strb	r2, [r3]
1325:..\src/command_processing.c ****      
1326:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
1327:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 6227              		.loc 1 1327 0
 6228 00ea 07F59C43 		add	r3, r7, #19968
 6229 00ee 03F12C03 		add	r3, r3, #44
 6230 00f2 1749     		ldr	r1, .L299+8
 6231 00f4 1846     		mov	r0, r3
 6232 00f6 FFF7FEFF 		bl	strcmp
 6233 00fa 0346     		mov	r3, r0
 6234 00fc 002B     		cmp	r3, #0
 6235 00fe 0CD0     		beq	.L297
1328:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 6236              		.loc 1 1328 0
 6237 0100 07F16003 		add	r3, r7, #96
 6238 0104 543B     		subs	r3, r3, #84
 6239 0106 07F59C40 		add	r0, r7, #19968
 6240 010a 00F12C00 		add	r0, r0, #44
 6241 010e 44F62062 		movw	r2, #20000
 6242 0112 1946     		mov	r1, r3
 6243 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 6244 0118 07E0     		b	.L298
 6245              	.L297:
1329:..\src/command_processing.c ****     }
1330:..\src/command_processing.c ****     else {
1331:..\src/command_processing.c ****         //It is the currently open working file
1332:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 6246              		.loc 1 1332 0
 6247 011a 07F16003 		add	r3, r7, #96
 6248 011e 543B     		subs	r3, r3, #84
 6249 0120 44F62061 		movw	r1, #20000
 6250 0124 1846     		mov	r0, r3
 6251 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 6252              	.L298:
1333:..\src/command_processing.c ****     }
1334:..\src/command_processing.c **** 
1335:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 153


1336:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
1337:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 6253              		.loc 1 1337 0
 6254 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1338:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 6255              		.loc 1 1338 0
 6256 012e 07F16003 		add	r3, r7, #96
 6257 0132 543B     		subs	r3, r3, #84
 6258 0134 1846     		mov	r0, r3
 6259 0136 FFF7FEFF 		bl	UART_RS485_PutString
1339:..\src/command_processing.c **** }
 6260              		.loc 1 1339 0
 6261 013a 00BF     		nop
 6262 013c 07F59C47 		add	r7, r7, #19968
 6263 0140 6037     		adds	r7, r7, #96
 6264              		.cfi_def_cfa_offset 8
 6265 0142 BD46     		mov	sp, r7
 6266              		.cfi_def_cfa_register 13
 6267              		@ sp needed
 6268 0144 80BD     		pop	{r7, pc}
 6269              	.L300:
 6270 0146 00BF     		.align	2
 6271              	.L299:
 6272 0148 00000000 		.word	.LC8
 6273 014c 00000000 		.word	g_rx
 6274 0150 00000000 		.word	sdFile
 6275              		.cfi_endproc
 6276              	.LFE117:
 6277              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 6278              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 6279              		.align	2
 6280              		.global	cmd_remove_SD_file
 6281              		.thumb
 6282              		.thumb_func
 6283              		.type	cmd_remove_SD_file, %function
 6284              	cmd_remove_SD_file:
 6285              	.LFB118:
1340:..\src/command_processing.c **** 
1341:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 6286              		.loc 1 1341 0
 6287              		.cfi_startproc
 6288              		@ args = 0, pretend = 0, frame = 8
 6289              		@ frame_needed = 1, uses_anonymous_args = 0
 6290              		@ link register save eliminated.
 6291 0000 80B4     		push	{r7}
 6292              		.cfi_def_cfa_offset 4
 6293              		.cfi_offset 7, -4
 6294 0002 83B0     		sub	sp, sp, #12
 6295              		.cfi_def_cfa_offset 16
 6296 0004 00AF     		add	r7, sp, #0
 6297              		.cfi_def_cfa_register 7
 6298 0006 0346     		mov	r3, r0
 6299 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1342:..\src/command_processing.c ****   
1343:..\src/command_processing.c **** }
 6300              		.loc 1 1343 0
 6301 000a 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 154


 6302 000c 0C37     		adds	r7, r7, #12
 6303              		.cfi_def_cfa_offset 4
 6304 000e BD46     		mov	sp, r7
 6305              		.cfi_def_cfa_register 13
 6306              		@ sp needed
 6307 0010 80BC     		pop	{r7}
 6308              		.cfi_restore 7
 6309              		.cfi_def_cfa_offset 0
 6310 0012 7047     		bx	lr
 6311              		.cfi_endproc
 6312              	.LFE118:
 6313              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 6314              		.global	__aeabi_i2f
 6315              		.global	__aeabi_f2d
 6316              		.global	__aeabi_ddiv
 6317              		.global	__aeabi_dmul
 6318              		.global	__aeabi_d2iz
 6319              		.section	.text.vibrotactile_control,"ax",%progbits
 6320              		.align	2
 6321              		.global	vibrotactile_control
 6322              		.thumb
 6323              		.thumb_func
 6324              		.type	vibrotactile_control, %function
 6325              	vibrotactile_control:
 6326              	.LFB119:
1344:..\src/command_processing.c **** 
1345:..\src/command_processing.c **** //==============================================================================
1346:..\src/command_processing.c **** //                                                          VIBROTACTILE CONTROL
1347:..\src/command_processing.c **** //==============================================================================
1348:..\src/command_processing.c **** /* It asks IMU values to the SoftHand and sets vibrotactile feedback device inputs proportionally.*
1349:..\src/command_processing.c **** 
1350:..\src/command_processing.c **** void vibrotactile_control() {
 6327              		.loc 1 1350 0
 6328              		.cfi_startproc
 6329              		@ args = 0, pretend = 0, frame = 8
 6330              		@ frame_needed = 1, uses_anonymous_args = 0
 6331 0000 90B5     		push	{r4, r7, lr}
 6332              		.cfi_def_cfa_offset 12
 6333              		.cfi_offset 4, -12
 6334              		.cfi_offset 7, -8
 6335              		.cfi_offset 14, -4
 6336 0002 83B0     		sub	sp, sp, #12
 6337              		.cfi_def_cfa_offset 24
 6338 0004 00AF     		add	r7, sp, #0
 6339              		.cfi_def_cfa_register 7
1351:..\src/command_processing.c ****     
1352:..\src/command_processing.c ****     uint8 i;
1353:..\src/command_processing.c ****     
1354:..\src/command_processing.c ****     commReadIMUFromSH();    
 6340              		.loc 1 1354 0
 6341 0006 FFF7FEFF 		bl	commReadIMUFromSH
1355:..\src/command_processing.c ****     // Ask to the slave the reference commands to drive the vibrotactile devices. 
1356:..\src/command_processing.c ****     // Values received are already the PWM commands computed by the slave board proportional to the
1357:..\src/command_processing.c ****     
1358:..\src/command_processing.c ****     PWM_IMU_1 = (int16)(((float)PWM_IMU_1/50.0) * SCALA);
 6342              		.loc 1 1358 0
 6343 000a 4B4B     		ldr	r3, .L310
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 155


 6344 000c B3F90030 		ldrsh	r3, [r3]
 6345 0010 1846     		mov	r0, r3
 6346 0012 FFF7FEFF 		bl	__aeabi_i2f
 6347 0016 0346     		mov	r3, r0
 6348 0018 1846     		mov	r0, r3
 6349 001a FFF7FEFF 		bl	__aeabi_f2d
 6350 001e 4FF00002 		mov	r2, #0
 6351 0022 464B     		ldr	r3, .L310+4
 6352 0024 FFF7FEFF 		bl	__aeabi_ddiv
 6353 0028 0346     		mov	r3, r0
 6354 002a 0C46     		mov	r4, r1
 6355 002c 1846     		mov	r0, r3
 6356 002e 2146     		mov	r1, r4
 6357 0030 4FF00002 		mov	r2, #0
 6358 0034 424B     		ldr	r3, .L310+8
 6359 0036 FFF7FEFF 		bl	__aeabi_dmul
 6360 003a 0346     		mov	r3, r0
 6361 003c 0C46     		mov	r4, r1
 6362 003e 1846     		mov	r0, r3
 6363 0040 2146     		mov	r1, r4
 6364 0042 FFF7FEFF 		bl	__aeabi_d2iz
 6365 0046 0346     		mov	r3, r0
 6366 0048 1AB2     		sxth	r2, r3
 6367 004a 3B4B     		ldr	r3, .L310
 6368 004c 1A80     		strh	r2, [r3]	@ movhi
1359:..\src/command_processing.c ****     if (PWM_IMU_1 > MAX_INPUT_PWM) PWM_IMU_1 = MAX_INPUT_PWM;
 6369              		.loc 1 1359 0
 6370 004e 3A4B     		ldr	r3, .L310
 6371 0050 B3F90030 		ldrsh	r3, [r3]
 6372 0054 642B     		cmp	r3, #100
 6373 0056 02DD     		ble	.L303
 6374              		.loc 1 1359 0 is_stmt 0 discriminator 1
 6375 0058 374B     		ldr	r3, .L310
 6376 005a 6422     		movs	r2, #100
 6377 005c 1A80     		strh	r2, [r3]	@ movhi
 6378              	.L303:
1360:..\src/command_processing.c ****     if (PWM_IMU_1 < MIN_INPUT_PWM) PWM_IMU_1 = 0;
 6379              		.loc 1 1360 0 is_stmt 1
 6380 005e 364B     		ldr	r3, .L310
 6381 0060 B3F90030 		ldrsh	r3, [r3]
 6382 0064 092B     		cmp	r3, #9
 6383 0066 02DC     		bgt	.L304
 6384              		.loc 1 1360 0 is_stmt 0 discriminator 1
 6385 0068 334B     		ldr	r3, .L310
 6386 006a 0022     		movs	r2, #0
 6387 006c 1A80     		strh	r2, [r3]	@ movhi
 6388              	.L304:
1361:..\src/command_processing.c ****     
1362:..\src/command_processing.c ****     PWM_IMU_2 = (int16) (((float)PWM_IMU_2/50.0) * SCALA);
 6389              		.loc 1 1362 0 is_stmt 1
 6390 006e 354B     		ldr	r3, .L310+12
 6391 0070 B3F90030 		ldrsh	r3, [r3]
 6392 0074 1846     		mov	r0, r3
 6393 0076 FFF7FEFF 		bl	__aeabi_i2f
 6394 007a 0346     		mov	r3, r0
 6395 007c 1846     		mov	r0, r3
 6396 007e FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 156


 6397 0082 4FF00002 		mov	r2, #0
 6398 0086 2D4B     		ldr	r3, .L310+4
 6399 0088 FFF7FEFF 		bl	__aeabi_ddiv
 6400 008c 0346     		mov	r3, r0
 6401 008e 0C46     		mov	r4, r1
 6402 0090 1846     		mov	r0, r3
 6403 0092 2146     		mov	r1, r4
 6404 0094 4FF00002 		mov	r2, #0
 6405 0098 294B     		ldr	r3, .L310+8
 6406 009a FFF7FEFF 		bl	__aeabi_dmul
 6407 009e 0346     		mov	r3, r0
 6408 00a0 0C46     		mov	r4, r1
 6409 00a2 1846     		mov	r0, r3
 6410 00a4 2146     		mov	r1, r4
 6411 00a6 FFF7FEFF 		bl	__aeabi_d2iz
 6412 00aa 0346     		mov	r3, r0
 6413 00ac 1AB2     		sxth	r2, r3
 6414 00ae 254B     		ldr	r3, .L310+12
 6415 00b0 1A80     		strh	r2, [r3]	@ movhi
1363:..\src/command_processing.c ****     if (PWM_IMU_2 > MAX_INPUT_PWM) PWM_IMU_2 = MAX_INPUT_PWM;
 6416              		.loc 1 1363 0
 6417 00b2 244B     		ldr	r3, .L310+12
 6418 00b4 B3F90030 		ldrsh	r3, [r3]
 6419 00b8 642B     		cmp	r3, #100
 6420 00ba 02DD     		ble	.L305
 6421              		.loc 1 1363 0 is_stmt 0 discriminator 1
 6422 00bc 214B     		ldr	r3, .L310+12
 6423 00be 6422     		movs	r2, #100
 6424 00c0 1A80     		strh	r2, [r3]	@ movhi
 6425              	.L305:
1364:..\src/command_processing.c ****     if (PWM_IMU_2 < MIN_INPUT_PWM) PWM_IMU_2 = 0;
 6426              		.loc 1 1364 0 is_stmt 1
 6427 00c2 204B     		ldr	r3, .L310+12
 6428 00c4 B3F90030 		ldrsh	r3, [r3]
 6429 00c8 092B     		cmp	r3, #9
 6430 00ca 02DC     		bgt	.L306
 6431              		.loc 1 1364 0 is_stmt 0 discriminator 1
 6432 00cc 1D4B     		ldr	r3, .L310+12
 6433 00ce 0022     		movs	r2, #0
 6434 00d0 1A80     		strh	r2, [r3]	@ movhi
 6435              	.L306:
1365:..\src/command_processing.c ****     
1366:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6436              		.loc 1 1366 0 is_stmt 1
 6437 00d2 194B     		ldr	r3, .L310
 6438 00d4 B3F90030 		ldrsh	r3, [r3]
 6439 00d8 DAB2     		uxtb	r2, r3
 6440 00da 1B4B     		ldr	r3, .L310+16
 6441 00dc 1A70     		strb	r2, [r3]
1367:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6442              		.loc 1 1367 0
 6443 00de 194B     		ldr	r3, .L310+12
 6444 00e0 B3F90030 		ldrsh	r3, [r3]
 6445 00e4 DAB2     		uxtb	r2, r3
 6446 00e6 184B     		ldr	r3, .L310+16
 6447 00e8 5A70     		strb	r2, [r3, #1]
1368:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 157


1369:..\src/command_processing.c ****     VT_ref[0] = PWM_IMU_1;
 6448              		.loc 1 1369 0
 6449 00ea 134B     		ldr	r3, .L310
 6450 00ec B3F90030 		ldrsh	r3, [r3]
 6451 00f0 DAB2     		uxtb	r2, r3
 6452 00f2 154B     		ldr	r3, .L310+16
 6453 00f4 1A70     		strb	r2, [r3]
1370:..\src/command_processing.c ****     VT_ref[1] = PWM_IMU_2;
 6454              		.loc 1 1370 0
 6455 00f6 134B     		ldr	r3, .L310+12
 6456 00f8 B3F90030 		ldrsh	r3, [r3]
 6457 00fc DAB2     		uxtb	r2, r3
 6458 00fe 124B     		ldr	r3, .L310+16
 6459 0100 5A70     		strb	r2, [r3, #1]
1371:..\src/command_processing.c **** 
1372:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_VT_ACTUATORS; i++){       
 6460              		.loc 1 1372 0
 6461 0102 0023     		movs	r3, #0
 6462 0104 FB71     		strb	r3, [r7, #7]
 6463 0106 0FE0     		b	.L307
 6464              	.L309:
1373:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6465              		.loc 1 1373 0
 6466 0108 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6467 010a 1846     		mov	r0, r3
 6468 010c FFF7FEFF 		bl	vibrotactile_control_generic
1374:..\src/command_processing.c ****         
1375:..\src/command_processing.c ****         if (interrupt_flag){
 6469              		.loc 1 1375 0
 6470 0110 0E4B     		ldr	r3, .L310+20
 6471 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6472 0114 002B     		cmp	r3, #0
 6473 0116 04D0     		beq	.L308
1376:..\src/command_processing.c ****             interrupt_flag = FALSE;
 6474              		.loc 1 1376 0
 6475 0118 0C4B     		ldr	r3, .L310+20
 6476 011a 0022     		movs	r2, #0
 6477 011c 1A70     		strb	r2, [r3]
1377:..\src/command_processing.c ****             interrupt_manager();
 6478              		.loc 1 1377 0
 6479 011e FFF7FEFF 		bl	interrupt_manager
 6480              	.L308:
1372:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6481              		.loc 1 1372 0 discriminator 2
 6482 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6483 0124 0133     		adds	r3, r3, #1
 6484 0126 FB71     		strb	r3, [r7, #7]
 6485              	.L307:
1372:..\src/command_processing.c ****         vibrotactile_control_generic(i); // Control the PWM_VT blocks and drive the vibrotactile de
 6486              		.loc 1 1372 0 is_stmt 0 discriminator 1
 6487 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6488 012a 012B     		cmp	r3, #1
 6489 012c ECD9     		bls	.L309
1378:..\src/command_processing.c ****         }
1379:..\src/command_processing.c ****     } 
1380:..\src/command_processing.c **** }
 6490              		.loc 1 1380 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 158


 6491 012e 00BF     		nop
 6492 0130 0C37     		adds	r7, r7, #12
 6493              		.cfi_def_cfa_offset 12
 6494 0132 BD46     		mov	sp, r7
 6495              		.cfi_def_cfa_register 13
 6496              		@ sp needed
 6497 0134 90BD     		pop	{r4, r7, pc}
 6498              	.L311:
 6499 0136 00BF     		.align	2
 6500              	.L310:
 6501 0138 00000000 		.word	PWM_IMU_1
 6502 013c 00004940 		.word	1078525952
 6503 0140 00003E40 		.word	1077805056
 6504 0144 00000000 		.word	PWM_IMU_2
 6505 0148 00000000 		.word	VT_ref
 6506 014c 00000000 		.word	interrupt_flag
 6507              		.cfi_endproc
 6508              	.LFE119:
 6509              		.size	vibrotactile_control, .-vibrotactile_control
 6510              		.global	__aeabi_i2d
 6511              		.global	__aeabi_dsub
 6512              		.global	__aeabi_dadd
 6513              		.global	__aeabi_fcmpgt
 6514              		.global	__aeabi_f2iz
 6515              		.global	__aeabi_fmul
 6516              		.section	.text.air_chambers_control,"ax",%progbits
 6517              		.align	2
 6518              		.global	air_chambers_control
 6519              		.thumb
 6520              		.thumb_func
 6521              		.type	air_chambers_control, %function
 6522              	air_chambers_control:
 6523              	.LFB120:
1381:..\src/command_processing.c **** 
1382:..\src/command_processing.c **** 
1383:..\src/command_processing.c **** //==============================================================================
1384:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
1385:..\src/command_processing.c **** //==============================================================================
1386:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
1387:..\src/command_processing.c **** 
1388:..\src/command_processing.c **** 
1389:..\src/command_processing.c **** void air_chambers_control() {
 6524              		.loc 1 1389 0
 6525              		.cfi_startproc
 6526              		@ args = 0, pretend = 0, frame = 24
 6527              		@ frame_needed = 1, uses_anonymous_args = 0
 6528 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 6529              		.cfi_def_cfa_offset 24
 6530              		.cfi_offset 4, -24
 6531              		.cfi_offset 5, -20
 6532              		.cfi_offset 7, -16
 6533              		.cfi_offset 8, -12
 6534              		.cfi_offset 9, -8
 6535              		.cfi_offset 14, -4
 6536 0004 86B0     		sub	sp, sp, #24
 6537              		.cfi_def_cfa_offset 48
 6538 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 159


 6539              		.cfi_def_cfa_register 7
1390:..\src/command_processing.c **** 
1391:..\src/command_processing.c ****     int16 curr_diff;
1392:..\src/command_processing.c ****     int32 pressure_reference;
1393:..\src/command_processing.c ****     int32 err_pressure, pressure_value;
1394:..\src/command_processing.c ****     int32 valve_command;
1395:..\src/command_processing.c ****     int16 x_value;
1396:..\src/command_processing.c **** 
1397:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
1398:..\src/command_processing.c ****     
1399:..\src/command_processing.c ****     curr_diff = (int16)commReadResCurrFromSH();
 6540              		.loc 1 1399 0
 6541 0008 FFF7FEFF 		bl	commReadResCurrFromSH
 6542 000c 0346     		mov	r3, r0
 6543 000e BB81     		strh	r3, [r7, #12]	@ movhi
1400:..\src/command_processing.c **** 
1401:..\src/command_processing.c ****     // Compute pressure reference
1402:..\src/command_processing.c **** 
1403:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
 6544              		.loc 1 1403 0
 6545 0010 B7F90C30 		ldrsh	r3, [r7, #12]
 6546 0014 1846     		mov	r0, r3
 6547 0016 FFF7FEFF 		bl	__aeabi_i2d
 6548 001a 4FF00002 		mov	r2, #0
 6549 001e 594B     		ldr	r3, .L322
 6550 0020 FFF7FEFF 		bl	__aeabi_dsub
 6551 0024 0346     		mov	r3, r0
 6552 0026 0C46     		mov	r4, r1
 6553 0028 1846     		mov	r0, r3
 6554 002a 2146     		mov	r1, r4
 6555 002c FFF7FEFF 		bl	__aeabi_d2iz
 6556 0030 0346     		mov	r3, r0
 6557 0032 FB81     		strh	r3, [r7, #14]	@ movhi
1404:..\src/command_processing.c ****     if (x_value < 0)
 6558              		.loc 1 1404 0
 6559 0034 B7F90E30 		ldrsh	r3, [r7, #14]
 6560 0038 002B     		cmp	r3, #0
 6561 003a 01DA     		bge	.L313
1405:..\src/command_processing.c ****         x_value = 0;
 6562              		.loc 1 1405 0
 6563 003c 0023     		movs	r3, #0
 6564 003e FB81     		strh	r3, [r7, #14]	@ movhi
 6565              	.L313:
1406:..\src/command_processing.c ****     
1407:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
 6566              		.loc 1 1407 0
 6567 0040 B7F90E30 		ldrsh	r3, [r7, #14]
 6568 0044 1846     		mov	r0, r3
 6569 0046 FFF7FEFF 		bl	__aeabi_i2d
 6570 004a 4FF00002 		mov	r2, #0
 6571 004e 4E4B     		ldr	r3, .L322+4
 6572 0050 FFF7FEFF 		bl	__aeabi_dmul
 6573 0054 0346     		mov	r3, r0
 6574 0056 0C46     		mov	r4, r1
 6575 0058 2546     		mov	r5, r4
 6576 005a 1C46     		mov	r4, r3
 6577 005c B7F90E30 		ldrsh	r3, [r7, #14]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 160


 6578 0060 1846     		mov	r0, r3
 6579 0062 FFF7FEFF 		bl	__aeabi_i2d
 6580 0066 0246     		mov	r2, r0
 6581 0068 0B46     		mov	r3, r1
 6582 006a 2046     		mov	r0, r4
 6583 006c 2946     		mov	r1, r5
 6584 006e FFF7FEFF 		bl	__aeabi_dmul
 6585 0072 0346     		mov	r3, r0
 6586 0074 0C46     		mov	r4, r1
 6587 0076 2546     		mov	r5, r4
 6588 0078 1C46     		mov	r4, r3
 6589 007a 444B     		ldr	r3, .L322+8
 6590 007c 1B6D     		ldr	r3, [r3, #80]
 6591 007e 1846     		mov	r0, r3
 6592 0080 FFF7FEFF 		bl	__aeabi_i2d
 6593 0084 4FF00002 		mov	r2, #0
 6594 0088 414B     		ldr	r3, .L322+12
 6595 008a FFF7FEFF 		bl	__aeabi_dmul
 6596 008e 0246     		mov	r2, r0
 6597 0090 0B46     		mov	r3, r1
 6598 0092 9046     		mov	r8, r2
 6599 0094 9946     		mov	r9, r3
 6600 0096 B7F90E30 		ldrsh	r3, [r7, #14]
 6601 009a 1846     		mov	r0, r3
 6602 009c FFF7FEFF 		bl	__aeabi_i2d
 6603 00a0 0246     		mov	r2, r0
 6604 00a2 0B46     		mov	r3, r1
 6605 00a4 4046     		mov	r0, r8
 6606 00a6 4946     		mov	r1, r9
 6607 00a8 FFF7FEFF 		bl	__aeabi_dmul
 6608 00ac 0246     		mov	r2, r0
 6609 00ae 0B46     		mov	r3, r1
 6610 00b0 2046     		mov	r0, r4
 6611 00b2 2946     		mov	r1, r5
 6612 00b4 FFF7FEFF 		bl	__aeabi_dadd
 6613 00b8 0346     		mov	r3, r0
 6614 00ba 0C46     		mov	r4, r1
 6615 00bc 1846     		mov	r0, r3
 6616 00be 2146     		mov	r1, r4
 6617 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 6618 00c4 0146     		mov	r1, r0
 6619 00c6 314B     		ldr	r3, .L322+8
 6620 00c8 1B6D     		ldr	r3, [r3, #80]
 6621 00ca 304A     		ldr	r2, .L322+8
 6622 00cc 126D     		ldr	r2, [r2, #80]
 6623 00ce 02FB03F3 		mul	r3, r2, r3
 6624 00d2 91FBF3F3 		sdiv	r3, r1, r3
 6625 00d6 7B61     		str	r3, [r7, #20]
1408:..\src/command_processing.c ****     if (pressure_reference < 0)
 6626              		.loc 1 1408 0
 6627 00d8 7B69     		ldr	r3, [r7, #20]
 6628 00da 002B     		cmp	r3, #0
 6629 00dc 01DA     		bge	.L314
1409:..\src/command_processing.c ****         pressure_reference = 0;
 6630              		.loc 1 1409 0
 6631 00de 0023     		movs	r3, #0
 6632 00e0 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 161


 6633              	.L314:
1410:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
 6634              		.loc 1 1410 0
 6635 00e2 7869     		ldr	r0, [r7, #20]
 6636 00e4 FFF7FEFF 		bl	__aeabi_i2f
 6637 00e8 0246     		mov	r2, r0
 6638 00ea 284B     		ldr	r3, .L322+8
 6639 00ec 5B6D     		ldr	r3, [r3, #84]	@ float
 6640 00ee 1946     		mov	r1, r3
 6641 00f0 1046     		mov	r0, r2
 6642 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 6643 00f6 0346     		mov	r3, r0
 6644 00f8 002B     		cmp	r3, #0
 6645 00fa 06D0     		beq	.L315
1411:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
 6646              		.loc 1 1411 0
 6647 00fc 234B     		ldr	r3, .L322+8
 6648 00fe 5B6D     		ldr	r3, [r3, #84]	@ float
 6649 0100 1846     		mov	r0, r3
 6650 0102 FFF7FEFF 		bl	__aeabi_f2iz
 6651 0106 0346     		mov	r3, r0
 6652 0108 7B61     		str	r3, [r7, #20]
 6653              	.L315:
1412:..\src/command_processing.c ****     
1413:..\src/command_processing.c ****     pressure_value = (int32)g_fb_meas.pressure;
 6654              		.loc 1 1413 0
 6655 010a 224B     		ldr	r3, .L322+16
 6656 010c 1B68     		ldr	r3, [r3]	@ float
 6657 010e 1846     		mov	r0, r3
 6658 0110 FFF7FEFF 		bl	__aeabi_f2iz
 6659 0114 0346     		mov	r3, r0
 6660 0116 BB60     		str	r3, [r7, #8]
1414:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
 6661              		.loc 1 1414 0
 6662 0118 7A69     		ldr	r2, [r7, #20]
 6663 011a BB68     		ldr	r3, [r7, #8]
 6664 011c D31A     		subs	r3, r2, r3
 6665 011e 7B60     		str	r3, [r7, #4]
1415:..\src/command_processing.c **** 
1416:..\src/command_processing.c ****     if (x_value <= 0){
 6666              		.loc 1 1416 0
 6667 0120 B7F90E30 		ldrsh	r3, [r7, #14]
 6668 0124 002B     		cmp	r3, #0
 6669 0126 02DC     		bgt	.L317
1417:..\src/command_processing.c ****         //i.e the hand is opening
1418:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
 6670              		.loc 1 1418 0
 6671 0128 0023     		movs	r3, #0
 6672 012a 3B61     		str	r3, [r7, #16]
 6673 012c 01E0     		b	.L318
 6674              	.L317:
1419:..\src/command_processing.c ****     }
1420:..\src/command_processing.c ****     else {
1421:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
1422:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
1423:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
1424:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 162


 6675              		.loc 1 1424 0
 6676 012e 0123     		movs	r3, #1
 6677 0130 3B61     		str	r3, [r7, #16]
 6678              	.L318:
1425:..\src/command_processing.c ****     }
1426:..\src/command_processing.c ****     
1427:..\src/command_processing.c ****     // Pump control*/
1428:..\src/command_processing.c ****    
1429:..\src/command_processing.c ****     g_refNew[0].pwm = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
 6679              		.loc 1 1429 0
 6680 0132 164B     		ldr	r3, .L322+8
 6681 0134 9C6D     		ldr	r4, [r3, #88]	@ float
 6682 0136 7868     		ldr	r0, [r7, #4]
 6683 0138 FFF7FEFF 		bl	__aeabi_i2f
 6684 013c 0346     		mov	r3, r0
 6685 013e 1946     		mov	r1, r3
 6686 0140 2046     		mov	r0, r4
 6687 0142 FFF7FEFF 		bl	__aeabi_fmul
 6688 0146 0346     		mov	r3, r0
 6689 0148 1846     		mov	r0, r3
 6690 014a FFF7FEFF 		bl	__aeabi_f2iz
 6691 014e 0246     		mov	r2, r0
 6692 0150 114B     		ldr	r3, .L322+20
 6693 0152 9A60     		str	r2, [r3, #8]
1430:..\src/command_processing.c **** 
1431:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
1432:..\src/command_processing.c ****     
1433:..\src/command_processing.c ****     // Limit output voltage
1434:..\src/command_processing.c ****     if (g_refNew[0].pwm > 80) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
 6694              		.loc 1 1434 0
 6695 0154 104B     		ldr	r3, .L322+20
 6696 0156 9B68     		ldr	r3, [r3, #8]
 6697 0158 502B     		cmp	r3, #80
 6698 015a 02DD     		ble	.L319
1435:..\src/command_processing.c ****         g_refNew[0].pwm = 80; // 80
 6699              		.loc 1 1435 0
 6700 015c 0E4B     		ldr	r3, .L322+20
 6701 015e 5022     		movs	r2, #80
 6702 0160 9A60     		str	r2, [r3, #8]
 6703              	.L319:
1436:..\src/command_processing.c ****     if (g_refNew[0].pwm < 20)
 6704              		.loc 1 1436 0
 6705 0162 0D4B     		ldr	r3, .L322+20
 6706 0164 9B68     		ldr	r3, [r3, #8]
 6707 0166 132B     		cmp	r3, #19
 6708 0168 02DC     		bgt	.L320
1437:..\src/command_processing.c ****         g_refNew[0].pwm = 0;
 6709              		.loc 1 1437 0
 6710 016a 0B4B     		ldr	r3, .L322+20
 6711 016c 0022     		movs	r2, #0
 6712 016e 9A60     		str	r2, [r3, #8]
 6713              	.L320:
1438:..\src/command_processing.c ****         
1439:..\src/command_processing.c ****     VALVE_Write(valve_command);
 6714              		.loc 1 1439 0
 6715 0170 3B69     		ldr	r3, [r7, #16]
 6716 0172 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 163


 6717 0174 1846     		mov	r0, r3
 6718 0176 FFF7FEFF 		bl	VALVE_Write
1440:..\src/command_processing.c ****     
1441:..\src/command_processing.c ****     
1442:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
1443:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
1444:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
1445:..\src/command_processing.c ****     // motor_control_generic(slave_motor_idx);
1446:..\src/command_processing.c **** 
1447:..\src/command_processing.c **** }
 6719              		.loc 1 1447 0
 6720 017a 00BF     		nop
 6721 017c 1837     		adds	r7, r7, #24
 6722              		.cfi_def_cfa_offset 24
 6723 017e BD46     		mov	sp, r7
 6724              		.cfi_def_cfa_register 13
 6725              		@ sp needed
 6726 0180 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 6727              	.L323:
 6728              		.align	2
 6729              	.L322:
 6730 0184 00004940 		.word	1078525952
 6731 0188 00003EC0 		.word	-1069678592
 6732 018c 00000000 		.word	c_mem
 6733 0190 00804B40 		.word	1078689792
 6734 0194 00000000 		.word	g_fb_meas
 6735 0198 00000000 		.word	g_refNew
 6736              		.cfi_endproc
 6737              	.LFE120:
 6738              		.size	air_chambers_control, .-air_chambers_control
 6739              		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 6740              		.align	2
 6741              		.global	emg_activation_velocity_fsm
 6742              		.thumb
 6743              		.thumb_func
 6744              		.type	emg_activation_velocity_fsm, %function
 6745              	emg_activation_velocity_fsm:
 6746              	.LFB121:
1448:..\src/command_processing.c **** 
1449:..\src/command_processing.c **** 
1450:..\src/command_processing.c **** //==============================================================================
1451:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
1452:..\src/command_processing.c **** //==============================================================================
1453:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
1454:..\src/command_processing.c **** 
1455:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 6747              		.loc 1 1455 0
 6748              		.cfi_startproc
 6749              		@ args = 0, pretend = 0, frame = 0
 6750              		@ frame_needed = 1, uses_anonymous_args = 0
 6751              		@ link register save eliminated.
 6752 0000 80B4     		push	{r7}
 6753              		.cfi_def_cfa_offset 4
 6754              		.cfi_offset 7, -4
 6755 0002 00AF     		add	r7, sp, #0
 6756              		.cfi_def_cfa_register 7
1456:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 164


1457:..\src/command_processing.c **** return 0;
 6757              		.loc 1 1457 0
 6758 0004 0023     		movs	r3, #0
1458:..\src/command_processing.c **** }
 6759              		.loc 1 1458 0
 6760 0006 1846     		mov	r0, r3
 6761 0008 BD46     		mov	sp, r7
 6762              		.cfi_def_cfa_register 13
 6763              		@ sp needed
 6764 000a 80BC     		pop	{r7}
 6765              		.cfi_restore 7
 6766              		.cfi_def_cfa_offset 0
 6767 000c 7047     		bx	lr
 6768              		.cfi_endproc
 6769              	.LFE121:
 6770              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 6771 000e 00BF     		.section	.text.otbk_act_wrist_control,"ax",%progbits
 6772              		.align	2
 6773              		.global	otbk_act_wrist_control
 6774              		.thumb
 6775              		.thumb_func
 6776              		.type	otbk_act_wrist_control, %function
 6777              	otbk_act_wrist_control:
 6778              	.LFB122:
1459:..\src/command_processing.c **** 
1460:..\src/command_processing.c **** //==============================================================================
1461:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
1462:..\src/command_processing.c **** //==============================================================================
1463:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
1464:..\src/command_processing.c **** 
1465:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 6779              		.loc 1 1465 0
 6780              		.cfi_startproc
 6781              		@ args = 0, pretend = 0, frame = 8
 6782              		@ frame_needed = 1, uses_anonymous_args = 0
 6783              		@ link register save eliminated.
 6784 0000 80B4     		push	{r7}
 6785              		.cfi_def_cfa_offset 4
 6786              		.cfi_offset 7, -4
 6787 0002 83B0     		sub	sp, sp, #12
 6788              		.cfi_def_cfa_offset 16
 6789 0004 00AF     		add	r7, sp, #0
 6790              		.cfi_def_cfa_register 7
 6791 0006 7860     		str	r0, [r7, #4]
1466:..\src/command_processing.c ****     
1467:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
1468:..\src/command_processing.c ****     
1469:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
1470:..\src/command_processing.c ****         
1471:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
1472:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
1473:..\src/command_processing.c ****     switch (fsm_state){
1474:..\src/command_processing.c ****         case RELAX_STATE:
1475:..\src/command_processing.c ****             
1476:..\src/command_processing.c ****             // Wrist stop
1477:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1478:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 165


1479:..\src/command_processing.c ****             // Softhand stop
1480:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1481:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1482:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1483:..\src/command_processing.c ****             
1484:..\src/command_processing.c ****             break;
1485:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
1486:..\src/command_processing.c ****                 
1487:..\src/command_processing.c ****             break;
1488:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
1489:..\src/command_processing.c ****             
1490:..\src/command_processing.c ****             // Wrist movement
1491:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
1492:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1493:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1494:..\src/command_processing.c ****                 }
1495:..\src/command_processing.c ****                 else {
1496:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1497:..\src/command_processing.c ****                 }
1498:..\src/command_processing.c ****             }
1499:..\src/command_processing.c ****             else {
1500:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
1501:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
1502:..\src/command_processing.c ****                 }
1503:..\src/command_processing.c ****                 else {
1504:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
1505:..\src/command_processing.c ****                 }
1506:..\src/command_processing.c ****             }
1507:..\src/command_processing.c ****             
1508:..\src/command_processing.c ****             // Softhand stop
1509:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
1510:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
1511:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
1512:..\src/command_processing.c ****             
1513:..\src/command_processing.c ****             break;
1514:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
1515:..\src/command_processing.c ****             
1516:..\src/command_processing.c ****             // Wrist stop
1517:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
1518:..\src/command_processing.c ****             
1519:..\src/command_processing.c ****             // SoftHand movement
1520:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
1521:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
1522:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
1523:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
1524:..\src/command_processing.c ****             
1525:..\src/command_processing.c ****             break;
1526:..\src/command_processing.c ****     }
1527:..\src/command_processing.c ****         
1528:..\src/command_processing.c ****     // Limit output voltage
1529:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
1530:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
1531:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
1532:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
1533:..\src/command_processing.c ****     
1534:..\src/command_processing.c **** #endif
1535:..\src/command_processing.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 166


 6792              		.loc 1 1535 0
 6793 0008 00BF     		nop
 6794 000a 0C37     		adds	r7, r7, #12
 6795              		.cfi_def_cfa_offset 4
 6796 000c BD46     		mov	sp, r7
 6797              		.cfi_def_cfa_register 13
 6798              		@ sp needed
 6799 000e 80BC     		pop	{r7}
 6800              		.cfi_restore 7
 6801              		.cfi_def_cfa_offset 0
 6802 0010 7047     		bx	lr
 6803              		.cfi_endproc
 6804              	.LFE122:
 6805              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 6806 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 6807              		.align	2
 6808              		.global	drive_slave
 6809              		.thumb
 6810              		.thumb_func
 6811              		.type	drive_slave, %function
 6812              	drive_slave:
 6813              	.LFB123:
1536:..\src/command_processing.c **** 
1537:..\src/command_processing.c **** //==============================================================================
1538:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
1539:..\src/command_processing.c **** //==============================================================================
1540:..\src/command_processing.c ****  
1541:..\src/command_processing.c ****  
1542:..\src/command_processing.c **** void drive_slave(uint8 slave_motor_idx, uint8 slave_ID) {
 6814              		.loc 1 1542 0
 6815              		.cfi_startproc
 6816              		@ args = 0, pretend = 0, frame = 8
 6817              		@ frame_needed = 1, uses_anonymous_args = 0
 6818              		@ link register save eliminated.
 6819 0000 80B4     		push	{r7}
 6820              		.cfi_def_cfa_offset 4
 6821              		.cfi_offset 7, -4
 6822 0002 83B0     		sub	sp, sp, #12
 6823              		.cfi_def_cfa_offset 16
 6824 0004 00AF     		add	r7, sp, #0
 6825              		.cfi_def_cfa_register 7
 6826 0006 0346     		mov	r3, r0
 6827 0008 0A46     		mov	r2, r1
 6828 000a FB71     		strb	r3, [r7, #7]
 6829 000c 1346     		mov	r3, r2
 6830 000e BB71     		strb	r3, [r7, #6]
1543:..\src/command_processing.c **** 
1544:..\src/command_processing.c **** 
1545:..\src/command_processing.c **** }
 6831              		.loc 1 1545 0
 6832 0010 00BF     		nop
 6833 0012 0C37     		adds	r7, r7, #12
 6834              		.cfi_def_cfa_offset 4
 6835 0014 BD46     		mov	sp, r7
 6836              		.cfi_def_cfa_register 13
 6837              		@ sp needed
 6838 0016 80BC     		pop	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 167


 6839              		.cfi_restore 7
 6840              		.cfi_def_cfa_offset 0
 6841 0018 7047     		bx	lr
 6842              		.cfi_endproc
 6843              	.LFE123:
 6844              		.size	drive_slave, .-drive_slave
 6845 001a 00BF     		.section	.text.stop_master_device,"ax",%progbits
 6846              		.align	2
 6847              		.global	stop_master_device
 6848              		.thumb
 6849              		.thumb_func
 6850              		.type	stop_master_device, %function
 6851              	stop_master_device:
 6852              	.LFB124:
1546:..\src/command_processing.c **** 
1547:..\src/command_processing.c **** //==============================================================================
1548:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
1549:..\src/command_processing.c **** //==============================================================================
1550:..\src/command_processing.c ****  
1551:..\src/command_processing.c **** void stop_master_device() {
 6853              		.loc 1 1551 0
 6854              		.cfi_startproc
 6855              		@ args = 0, pretend = 0, frame = 0
 6856              		@ frame_needed = 1, uses_anonymous_args = 0
 6857 0000 80B5     		push	{r7, lr}
 6858              		.cfi_def_cfa_offset 8
 6859              		.cfi_offset 7, -8
 6860              		.cfi_offset 14, -4
 6861 0002 00AF     		add	r7, sp, #0
 6862              		.cfi_def_cfa_register 7
1552:..\src/command_processing.c ****     
1553:..\src/command_processing.c ****         // Stop pump and open valve
1554:..\src/command_processing.c ****         g_refNew[0].pwm = 0;    
 6863              		.loc 1 1554 0
 6864 0004 074B     		ldr	r3, .L329
 6865 0006 0022     		movs	r2, #0
 6866 0008 9A60     		str	r2, [r3, #8]
1555:..\src/command_processing.c ****         VALVE_Write(OPEN);
 6867              		.loc 1 1555 0
 6868 000a 0020     		movs	r0, #0
 6869 000c FFF7FEFF 		bl	VALVE_Write
1556:..\src/command_processing.c ****         master_mode = 0; 
 6870              		.loc 1 1556 0
 6871 0010 054B     		ldr	r3, .L329+4
 6872 0012 0022     		movs	r2, #0
 6873 0014 1A70     		strb	r2, [r3]
1557:..\src/command_processing.c ****         g_mem.MS.master_mode_active = FALSE;
 6874              		.loc 1 1557 0
 6875 0016 054B     		ldr	r3, .L329+8
 6876 0018 0022     		movs	r2, #0
 6877 001a 83F84020 		strb	r2, [r3, #64]
1558:..\src/command_processing.c **** 
1559:..\src/command_processing.c **** }
 6878              		.loc 1 1559 0
 6879 001e 00BF     		nop
 6880 0020 80BD     		pop	{r7, pc}
 6881              	.L330:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 168


 6882 0022 00BF     		.align	2
 6883              	.L329:
 6884 0024 00000000 		.word	g_refNew
 6885 0028 00000000 		.word	master_mode
 6886 002c 00000000 		.word	g_mem
 6887              		.cfi_endproc
 6888              	.LFE124:
 6889              		.size	stop_master_device, .-stop_master_device
 6890              		.section	.text.deactivate_slaves,"ax",%progbits
 6891              		.align	2
 6892              		.global	deactivate_slaves
 6893              		.thumb
 6894              		.thumb_func
 6895              		.type	deactivate_slaves, %function
 6896              	deactivate_slaves:
 6897              	.LFB125:
1560:..\src/command_processing.c **** 
1561:..\src/command_processing.c **** //==============================================================================
1562:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
1563:..\src/command_processing.c **** //==============================================================================
1564:..\src/command_processing.c ****  
1565:..\src/command_processing.c **** void deactivate_slaves() {
 6898              		.loc 1 1565 0
 6899              		.cfi_startproc
 6900              		@ args = 0, pretend = 0, frame = 0
 6901              		@ frame_needed = 1, uses_anonymous_args = 0
 6902              		@ link register save eliminated.
 6903 0000 80B4     		push	{r7}
 6904              		.cfi_def_cfa_offset 4
 6905              		.cfi_offset 7, -4
 6906 0002 00AF     		add	r7, sp, #0
 6907              		.cfi_def_cfa_register 7
1566:..\src/command_processing.c ****    
1567:..\src/command_processing.c **** }
 6908              		.loc 1 1567 0
 6909 0004 00BF     		nop
 6910 0006 BD46     		mov	sp, r7
 6911              		.cfi_def_cfa_register 13
 6912              		@ sp needed
 6913 0008 80BC     		pop	{r7}
 6914              		.cfi_restore 7
 6915              		.cfi_def_cfa_offset 0
 6916 000a 7047     		bx	lr
 6917              		.cfi_endproc
 6918              	.LFE125:
 6919              		.size	deactivate_slaves, .-deactivate_slaves
 6920              		.bss
 6921              		.align	1
 6922              	i.10070:
 6923 0000 0000     		.space	2
 6924              		.text
 6925              	.Letext0:
 6926              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 6927              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 6928              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 6929              		.file 6 "..\\src\\commands.h"
 6930              		.file 7 "..\\src\\globals.h"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 169


 6931              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 6932              		.section	.debug_info,"",%progbits
 6933              	.Ldebug_info0:
 6934 0000 3A160000 		.4byte	0x163a
 6935 0004 0400     		.2byte	0x4
 6936 0006 00000000 		.4byte	.Ldebug_abbrev0
 6937 000a 04       		.byte	0x4
 6938 000b 01       		.uleb128 0x1
 6939 000c 3B080000 		.4byte	.LASF295
 6940 0010 0C       		.byte	0xc
 6941 0011 66100000 		.4byte	.LASF296
 6942 0015 3F060000 		.4byte	.LASF297
 6943 0019 00000000 		.4byte	.Ldebug_ranges0+0
 6944 001d 00000000 		.4byte	0
 6945 0021 00000000 		.4byte	.Ldebug_line0
 6946 0025 02       		.uleb128 0x2
 6947 0026 01       		.byte	0x1
 6948 0027 06       		.byte	0x6
 6949 0028 46030000 		.4byte	.LASF0
 6950 002c 02       		.uleb128 0x2
 6951 002d 01       		.byte	0x1
 6952 002e 08       		.byte	0x8
 6953 002f AE030000 		.4byte	.LASF1
 6954 0033 02       		.uleb128 0x2
 6955 0034 02       		.byte	0x2
 6956 0035 05       		.byte	0x5
 6957 0036 540E0000 		.4byte	.LASF2
 6958 003a 02       		.uleb128 0x2
 6959 003b 02       		.byte	0x2
 6960 003c 07       		.byte	0x7
 6961 003d D90F0000 		.4byte	.LASF3
 6962 0041 03       		.uleb128 0x3
 6963 0042 3C100000 		.4byte	.LASF5
 6964 0046 03       		.byte	0x3
 6965 0047 3F       		.byte	0x3f
 6966 0048 4C000000 		.4byte	0x4c
 6967 004c 02       		.uleb128 0x2
 6968 004d 04       		.byte	0x4
 6969 004e 05       		.byte	0x5
 6970 004f 3B020000 		.4byte	.LASF4
 6971 0053 03       		.uleb128 0x3
 6972 0054 FB080000 		.4byte	.LASF6
 6973 0058 03       		.byte	0x3
 6974 0059 41       		.byte	0x41
 6975 005a 5E000000 		.4byte	0x5e
 6976 005e 02       		.uleb128 0x2
 6977 005f 04       		.byte	0x4
 6978 0060 07       		.byte	0x7
 6979 0061 F8060000 		.4byte	.LASF7
 6980 0065 02       		.uleb128 0x2
 6981 0066 08       		.byte	0x8
 6982 0067 05       		.byte	0x5
 6983 0068 06090000 		.4byte	.LASF8
 6984 006c 02       		.uleb128 0x2
 6985 006d 08       		.byte	0x8
 6986 006e 07       		.byte	0x7
 6987 006f E90B0000 		.4byte	.LASF9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 170


 6988 0073 04       		.uleb128 0x4
 6989 0074 04       		.byte	0x4
 6990 0075 05       		.byte	0x5
 6991 0076 696E7400 		.ascii	"int\000"
 6992 007a 02       		.uleb128 0x2
 6993 007b 04       		.byte	0x4
 6994 007c 07       		.byte	0x7
 6995 007d E6090000 		.4byte	.LASF10
 6996 0081 03       		.uleb128 0x3
 6997 0082 6C000000 		.4byte	.LASF11
 6998 0086 04       		.byte	0x4
 6999 0087 2C       		.byte	0x2c
 7000 0088 41000000 		.4byte	0x41
 7001 008c 03       		.uleb128 0x3
 7002 008d 480F0000 		.4byte	.LASF12
 7003 0091 04       		.byte	0x4
 7004 0092 30       		.byte	0x30
 7005 0093 53000000 		.4byte	0x53
 7006 0097 05       		.uleb128 0x5
 7007 0098 420E0000 		.4byte	.LASF13
 7008 009c 05       		.byte	0x5
 7009 009d E401     		.2byte	0x1e4
 7010 009f 2C000000 		.4byte	0x2c
 7011 00a3 05       		.uleb128 0x5
 7012 00a4 BA100000 		.4byte	.LASF14
 7013 00a8 05       		.byte	0x5
 7014 00a9 E501     		.2byte	0x1e5
 7015 00ab 3A000000 		.4byte	0x3a
 7016 00af 05       		.uleb128 0x5
 7017 00b0 8D000000 		.4byte	.LASF15
 7018 00b4 05       		.byte	0x5
 7019 00b5 E601     		.2byte	0x1e6
 7020 00b7 5E000000 		.4byte	0x5e
 7021 00bb 05       		.uleb128 0x5
 7022 00bc 040F0000 		.4byte	.LASF16
 7023 00c0 05       		.byte	0x5
 7024 00c1 E801     		.2byte	0x1e8
 7025 00c3 33000000 		.4byte	0x33
 7026 00c7 05       		.uleb128 0x5
 7027 00c8 22100000 		.4byte	.LASF17
 7028 00cc 05       		.byte	0x5
 7029 00cd E901     		.2byte	0x1e9
 7030 00cf 4C000000 		.4byte	0x4c
 7031 00d3 02       		.uleb128 0x2
 7032 00d4 04       		.byte	0x4
 7033 00d5 04       		.byte	0x4
 7034 00d6 8F090000 		.4byte	.LASF18
 7035 00da 02       		.uleb128 0x2
 7036 00db 08       		.byte	0x8
 7037 00dc 04       		.byte	0x4
 7038 00dd 58090000 		.4byte	.LASF19
 7039 00e1 02       		.uleb128 0x2
 7040 00e2 01       		.byte	0x1
 7041 00e3 08       		.byte	0x8
 7042 00e4 54040000 		.4byte	.LASF20
 7043 00e8 05       		.uleb128 0x5
 7044 00e9 8C0C0000 		.4byte	.LASF21
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 171


 7045 00ed 05       		.byte	0x5
 7046 00ee 8E02     		.2byte	0x28e
 7047 00f0 F4000000 		.4byte	0xf4
 7048 00f4 06       		.uleb128 0x6
 7049 00f5 97000000 		.4byte	0x97
 7050 00f9 02       		.uleb128 0x2
 7051 00fa 08       		.byte	0x8
 7052 00fb 04       		.byte	0x4
 7053 00fc 5F0B0000 		.4byte	.LASF22
 7054 0100 02       		.uleb128 0x2
 7055 0101 04       		.byte	0x4
 7056 0102 07       		.byte	0x7
 7057 0103 20000000 		.4byte	.LASF23
 7058 0107 07       		.uleb128 0x7
 7059 0108 04       		.byte	0x4
 7060 0109 E1000000 		.4byte	0xe1
 7061 010d 07       		.uleb128 0x7
 7062 010e 04       		.byte	0x4
 7063 010f 13010000 		.4byte	0x113
 7064 0113 08       		.uleb128 0x8
 7065 0114 E1000000 		.4byte	0xe1
 7066 0118 09       		.uleb128 0x9
 7067 0119 F9050000 		.4byte	.LASF42
 7068 011d 01       		.byte	0x1
 7069 011e 2C000000 		.4byte	0x2c
 7070 0122 06       		.byte	0x6
 7071 0123 43       		.byte	0x43
 7072 0124 95010000 		.4byte	0x195
 7073 0128 0A       		.uleb128 0xa
 7074 0129 90100000 		.4byte	.LASF24
 7075 012d 01       		.byte	0x1
 7076 012e 0A       		.uleb128 0xa
 7077 012f B80E0000 		.4byte	.LASF25
 7078 0133 02       		.byte	0x2
 7079 0134 0A       		.uleb128 0xa
 7080 0135 05030000 		.4byte	.LASF26
 7081 0139 03       		.byte	0x3
 7082 013a 0A       		.uleb128 0xa
 7083 013b 240F0000 		.4byte	.LASF27
 7084 013f 04       		.byte	0x4
 7085 0140 0A       		.uleb128 0xa
 7086 0141 D2010000 		.4byte	.LASF28
 7087 0145 05       		.byte	0x5
 7088 0146 0A       		.uleb128 0xa
 7089 0147 97070000 		.4byte	.LASF29
 7090 014b 06       		.byte	0x6
 7091 014c 0A       		.uleb128 0xa
 7092 014d 5E0E0000 		.4byte	.LASF30
 7093 0151 07       		.byte	0x7
 7094 0152 0A       		.uleb128 0xa
 7095 0153 23040000 		.4byte	.LASF31
 7096 0157 08       		.byte	0x8
 7097 0158 0A       		.uleb128 0xa
 7098 0159 F1000000 		.4byte	.LASF32
 7099 015d 09       		.byte	0x9
 7100 015e 0A       		.uleb128 0xa
 7101 015f AE040000 		.4byte	.LASF33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 172


 7102 0163 0A       		.byte	0xa
 7103 0164 0A       		.uleb128 0xa
 7104 0165 160F0000 		.4byte	.LASF34
 7105 0169 0B       		.byte	0xb
 7106 016a 0A       		.uleb128 0xa
 7107 016b DC020000 		.4byte	.LASF35
 7108 016f 0C       		.byte	0xc
 7109 0170 0A       		.uleb128 0xa
 7110 0171 44020000 		.4byte	.LASF36
 7111 0175 0D       		.byte	0xd
 7112 0176 0A       		.uleb128 0xa
 7113 0177 300A0000 		.4byte	.LASF37
 7114 017b 0E       		.byte	0xe
 7115 017c 0A       		.uleb128 0xa
 7116 017d AA010000 		.4byte	.LASF38
 7117 0181 0F       		.byte	0xf
 7118 0182 0A       		.uleb128 0xa
 7119 0183 DE0A0000 		.4byte	.LASF39
 7120 0187 10       		.byte	0x10
 7121 0188 0A       		.uleb128 0xa
 7122 0189 36030000 		.4byte	.LASF40
 7123 018d 11       		.byte	0x11
 7124 018e 0A       		.uleb128 0xa
 7125 018f 2B0B0000 		.4byte	.LASF41
 7126 0193 12       		.byte	0x12
 7127 0194 00       		.byte	0
 7128 0195 09       		.uleb128 0x9
 7129 0196 3D050000 		.4byte	.LASF43
 7130 019a 01       		.byte	0x1
 7131 019b 2C000000 		.4byte	0x2c
 7132 019f 06       		.byte	0x6
 7133 01a0 5A       		.byte	0x5a
 7134 01a1 EE010000 		.4byte	0x1ee
 7135 01a5 0A       		.uleb128 0xa
 7136 01a6 4E000000 		.4byte	.LASF44
 7137 01aa 01       		.byte	0x1
 7138 01ab 0A       		.uleb128 0xa
 7139 01ac A4030000 		.4byte	.LASF45
 7140 01b0 02       		.byte	0x2
 7141 01b1 0A       		.uleb128 0xa
 7142 01b2 09000000 		.4byte	.LASF46
 7143 01b6 03       		.byte	0x3
 7144 01b7 0A       		.uleb128 0xa
 7145 01b8 560A0000 		.4byte	.LASF47
 7146 01bc 04       		.byte	0x4
 7147 01bd 0A       		.uleb128 0xa
 7148 01be 0A0F0000 		.4byte	.LASF48
 7149 01c2 05       		.byte	0x5
 7150 01c3 0A       		.uleb128 0xa
 7151 01c4 D80C0000 		.4byte	.LASF49
 7152 01c8 06       		.byte	0x6
 7153 01c9 0A       		.uleb128 0xa
 7154 01ca 82040000 		.4byte	.LASF50
 7155 01ce 07       		.byte	0x7
 7156 01cf 0A       		.uleb128 0xa
 7157 01d0 070C0000 		.4byte	.LASF51
 7158 01d4 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 173


 7159 01d5 0A       		.uleb128 0xa
 7160 01d6 FC070000 		.4byte	.LASF52
 7161 01da 09       		.byte	0x9
 7162 01db 0A       		.uleb128 0xa
 7163 01dc 47050000 		.4byte	.LASF53
 7164 01e0 0A       		.byte	0xa
 7165 01e1 0A       		.uleb128 0xa
 7166 01e2 700D0000 		.4byte	.LASF54
 7167 01e6 0B       		.byte	0xb
 7168 01e7 0A       		.uleb128 0xa
 7169 01e8 34060000 		.4byte	.LASF55
 7170 01ec 0C       		.byte	0xc
 7171 01ed 00       		.byte	0
 7172 01ee 09       		.uleb128 0x9
 7173 01ef 140A0000 		.4byte	.LASF56
 7174 01f3 01       		.byte	0x1
 7175 01f4 2C000000 		.4byte	0x2c
 7176 01f8 06       		.byte	0x6
 7177 01f9 68       		.byte	0x68
 7178 01fa CB020000 		.4byte	0x2cb
 7179 01fe 0A       		.uleb128 0xa
 7180 01ff C9100000 		.4byte	.LASF57
 7181 0203 00       		.byte	0
 7182 0204 0A       		.uleb128 0xa
 7183 0205 940E0000 		.4byte	.LASF58
 7184 0209 01       		.byte	0x1
 7185 020a 0A       		.uleb128 0xa
 7186 020b E7060000 		.4byte	.LASF59
 7187 020f 03       		.byte	0x3
 7188 0210 0A       		.uleb128 0xa
 7189 0211 0A040000 		.4byte	.LASF60
 7190 0215 04       		.byte	0x4
 7191 0216 0A       		.uleb128 0xa
 7192 0217 C50C0000 		.4byte	.LASF61
 7193 021b 05       		.byte	0x5
 7194 021c 0A       		.uleb128 0xa
 7195 021d D7070000 		.4byte	.LASF62
 7196 0221 06       		.byte	0x6
 7197 0222 0A       		.uleb128 0xa
 7198 0223 0A070000 		.4byte	.LASF63
 7199 0227 09       		.byte	0x9
 7200 0228 0A       		.uleb128 0xa
 7201 0229 29000000 		.4byte	.LASF64
 7202 022d 0A       		.byte	0xa
 7203 022e 0A       		.uleb128 0xa
 7204 022f E60E0000 		.4byte	.LASF65
 7205 0233 0C       		.byte	0xc
 7206 0234 0A       		.uleb128 0xa
 7207 0235 8B0B0000 		.4byte	.LASF66
 7208 0239 0D       		.byte	0xd
 7209 023a 0A       		.uleb128 0xa
 7210 023b F4030000 		.4byte	.LASF67
 7211 023f 80       		.byte	0x80
 7212 0240 0A       		.uleb128 0xa
 7213 0241 43040000 		.4byte	.LASF68
 7214 0245 81       		.byte	0x81
 7215 0246 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 174


 7216 0247 53050000 		.4byte	.LASF69
 7217 024b 82       		.byte	0x82
 7218 024c 0A       		.uleb128 0xa
 7219 024d 740E0000 		.4byte	.LASF70
 7220 0251 83       		.byte	0x83
 7221 0252 0A       		.uleb128 0xa
 7222 0253 F00D0000 		.4byte	.LASF71
 7223 0257 84       		.byte	0x84
 7224 0258 0A       		.uleb128 0xa
 7225 0259 9C020000 		.4byte	.LASF72
 7226 025d 85       		.byte	0x85
 7227 025e 0A       		.uleb128 0xa
 7228 025f 25080000 		.4byte	.LASF73
 7229 0263 86       		.byte	0x86
 7230 0264 0A       		.uleb128 0xa
 7231 0265 B7070000 		.4byte	.LASF74
 7232 0269 88       		.byte	0x88
 7233 026a 0A       		.uleb128 0xa
 7234 026b D30E0000 		.4byte	.LASF75
 7235 026f 89       		.byte	0x89
 7236 0270 0A       		.uleb128 0xa
 7237 0271 360C0000 		.4byte	.LASF76
 7238 0275 8B       		.byte	0x8b
 7239 0276 0A       		.uleb128 0xa
 7240 0277 190B0000 		.4byte	.LASF77
 7241 027b 8C       		.byte	0x8c
 7242 027c 0A       		.uleb128 0xa
 7243 027d E1080000 		.4byte	.LASF78
 7244 0281 8E       		.byte	0x8e
 7245 0282 0A       		.uleb128 0xa
 7246 0283 BC030000 		.4byte	.LASF79
 7247 0287 FB       		.byte	0xfb
 7248 0288 0A       		.uleb128 0xa
 7249 0289 D8030000 		.4byte	.LASF80
 7250 028d FA       		.byte	0xfa
 7251 028e 0A       		.uleb128 0xa
 7252 028f 7B0C0000 		.4byte	.LASF81
 7253 0293 90       		.byte	0x90
 7254 0294 0A       		.uleb128 0xa
 7255 0295 E1010000 		.4byte	.LASF82
 7256 0299 92       		.byte	0x92
 7257 029a 0A       		.uleb128 0xa
 7258 029b A30F0000 		.4byte	.LASF83
 7259 029f A1       		.byte	0xa1
 7260 02a0 0A       		.uleb128 0xa
 7261 02a1 A80D0000 		.4byte	.LASF84
 7262 02a5 A2       		.byte	0xa2
 7263 02a6 0A       		.uleb128 0xa
 7264 02a7 890A0000 		.4byte	.LASF85
 7265 02ab A3       		.byte	0xa3
 7266 02ac 0A       		.uleb128 0xa
 7267 02ad D10D0000 		.4byte	.LASF86
 7268 02b1 A4       		.byte	0xa4
 7269 02b2 0A       		.uleb128 0xa
 7270 02b3 830E0000 		.4byte	.LASF87
 7271 02b7 A5       		.byte	0xa5
 7272 02b8 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 175


 7273 02b9 790D0000 		.4byte	.LASF88
 7274 02bd A6       		.byte	0xa6
 7275 02be 0A       		.uleb128 0xa
 7276 02bf 5F090000 		.4byte	.LASF89
 7277 02c3 A7       		.byte	0xa7
 7278 02c4 0A       		.uleb128 0xa
 7279 02c5 95090000 		.4byte	.LASF90
 7280 02c9 A8       		.byte	0xa8
 7281 02ca 00       		.byte	0
 7282 02cb 09       		.uleb128 0x9
 7283 02cc 82100000 		.4byte	.LASF91
 7284 02d0 01       		.byte	0x1
 7285 02d1 2C000000 		.4byte	0x2c
 7286 02d5 06       		.byte	0x6
 7287 02d6 BA       		.byte	0xba
 7288 02d7 0C030000 		.4byte	0x30c
 7289 02db 0A       		.uleb128 0xa
 7290 02dc CA050000 		.4byte	.LASF92
 7291 02e0 00       		.byte	0
 7292 02e1 0A       		.uleb128 0xa
 7293 02e2 690A0000 		.4byte	.LASF93
 7294 02e6 01       		.byte	0x1
 7295 02e7 0A       		.uleb128 0xa
 7296 02e8 F2010000 		.4byte	.LASF94
 7297 02ec 02       		.byte	0x2
 7298 02ed 0A       		.uleb128 0xa
 7299 02ee 50010000 		.4byte	.LASF95
 7300 02f2 03       		.byte	0x3
 7301 02f3 0A       		.uleb128 0xa
 7302 02f4 04010000 		.4byte	.LASF96
 7303 02f8 04       		.byte	0x4
 7304 02f9 0A       		.uleb128 0xa
 7305 02fa 36000000 		.4byte	.LASF97
 7306 02fe 05       		.byte	0x5
 7307 02ff 0A       		.uleb128 0xa
 7308 0300 26070000 		.4byte	.LASF98
 7309 0304 06       		.byte	0x6
 7310 0305 0A       		.uleb128 0xa
 7311 0306 890D0000 		.4byte	.LASF99
 7312 030a 07       		.byte	0x7
 7313 030b 00       		.byte	0
 7314 030c 09       		.uleb128 0x9
 7315 030d B10B0000 		.4byte	.LASF100
 7316 0311 01       		.byte	0x1
 7317 0312 2C000000 		.4byte	0x2c
 7318 0316 06       		.byte	0x6
 7319 0317 DD       		.byte	0xdd
 7320 0318 29030000 		.4byte	0x329
 7321 031c 0A       		.uleb128 0xa
 7322 031d C0050000 		.4byte	.LASF101
 7323 0321 00       		.byte	0
 7324 0322 0A       		.uleb128 0xa
 7325 0323 78070000 		.4byte	.LASF102
 7326 0327 01       		.byte	0x1
 7327 0328 00       		.byte	0
 7328 0329 09       		.uleb128 0x9
 7329 032a F90E0000 		.4byte	.LASF103
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 176


 7330 032e 01       		.byte	0x1
 7331 032f 2C000000 		.4byte	0x2c
 7332 0333 06       		.byte	0x6
 7333 0334 E5       		.byte	0xe5
 7334 0335 76030000 		.4byte	0x376
 7335 0339 0A       		.uleb128 0xa
 7336 033a 7F070000 		.4byte	.LASF104
 7337 033e 00       		.byte	0
 7338 033f 0A       		.uleb128 0xa
 7339 0340 9F100000 		.4byte	.LASF105
 7340 0344 01       		.byte	0x1
 7341 0345 0A       		.uleb128 0xa
 7342 0346 32090000 		.4byte	.LASF106
 7343 034a 02       		.byte	0x2
 7344 034b 0A       		.uleb128 0xa
 7345 034c 000B0000 		.4byte	.LASF107
 7346 0350 03       		.byte	0x3
 7347 0351 0A       		.uleb128 0xa
 7348 0352 1F0A0000 		.4byte	.LASF108
 7349 0356 04       		.byte	0x4
 7350 0357 0A       		.uleb128 0xa
 7351 0358 110C0000 		.4byte	.LASF109
 7352 035c 05       		.byte	0x5
 7353 035d 0A       		.uleb128 0xa
 7354 035e 6B0B0000 		.4byte	.LASF110
 7355 0362 06       		.byte	0x6
 7356 0363 0A       		.uleb128 0xa
 7357 0364 D30A0000 		.4byte	.LASF111
 7358 0368 07       		.byte	0x7
 7359 0369 0A       		.uleb128 0xa
 7360 036a 95050000 		.4byte	.LASF112
 7361 036e 08       		.byte	0x8
 7362 036f 0A       		.uleb128 0xa
 7363 0370 DB060000 		.4byte	.LASF113
 7364 0374 09       		.byte	0x9
 7365 0375 00       		.byte	0
 7366 0376 0B       		.uleb128 0xb
 7367 0377 C9080000 		.4byte	.LASF116
 7368 037b 10       		.byte	0x10
 7369 037c 07       		.byte	0x7
 7370 037d F8       		.byte	0xf8
 7371 037e B3030000 		.4byte	0x3b3
 7372 0382 0C       		.uleb128 0xc
 7373 0383 706F7300 		.ascii	"pos\000"
 7374 0387 07       		.byte	0x7
 7375 0388 F9       		.byte	0xf9
 7376 0389 C7000000 		.4byte	0xc7
 7377 038d 00       		.byte	0
 7378 038e 0D       		.uleb128 0xd
 7379 038f A7070000 		.4byte	.LASF114
 7380 0393 07       		.byte	0x7
 7381 0394 FA       		.byte	0xfa
 7382 0395 C7000000 		.4byte	0xc7
 7383 0399 04       		.byte	0x4
 7384 039a 0C       		.uleb128 0xc
 7385 039b 70776D00 		.ascii	"pwm\000"
 7386 039f 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 177


 7387 03a0 FB       		.byte	0xfb
 7388 03a1 C7000000 		.4byte	0xc7
 7389 03a5 08       		.byte	0x8
 7390 03a6 0D       		.uleb128 0xd
 7391 03a7 300C0000 		.4byte	.LASF115
 7392 03ab 07       		.byte	0x7
 7393 03ac FC       		.byte	0xfc
 7394 03ad 97000000 		.4byte	0x97
 7395 03b1 0C       		.byte	0xc
 7396 03b2 00       		.byte	0
 7397 03b3 0E       		.uleb128 0xe
 7398 03b4 95040000 		.4byte	.LASF117
 7399 03b8 04       		.byte	0x4
 7400 03b9 07       		.byte	0x7
 7401 03ba 0E01     		.2byte	0x10e
 7402 03bc CE030000 		.4byte	0x3ce
 7403 03c0 0F       		.uleb128 0xf
 7404 03c1 3A040000 		.4byte	.LASF118
 7405 03c5 07       		.byte	0x7
 7406 03c6 0F01     		.2byte	0x10f
 7407 03c8 D3000000 		.4byte	0xd3
 7408 03cc 00       		.byte	0
 7409 03cd 00       		.byte	0
 7410 03ce 0E       		.uleb128 0xe
 7411 03cf 79000000 		.4byte	.LASF119
 7412 03d3 86       		.byte	0x86
 7413 03d4 07       		.byte	0x7
 7414 03d5 1601     		.2byte	0x116
 7415 03d7 10040000 		.4byte	0x410
 7416 03db 0F       		.uleb128 0xf
 7417 03dc 62050000 		.4byte	.LASF120
 7418 03e0 07       		.byte	0x7
 7419 03e1 1701     		.2byte	0x117
 7420 03e3 10040000 		.4byte	0x410
 7421 03e7 00       		.byte	0
 7422 03e8 0F       		.uleb128 0xf
 7423 03e9 1C0C0000 		.4byte	.LASF121
 7424 03ed 07       		.byte	0x7
 7425 03ee 1801     		.2byte	0x118
 7426 03f0 BB000000 		.4byte	0xbb
 7427 03f4 80       		.byte	0x80
 7428 03f5 10       		.uleb128 0x10
 7429 03f6 696E6400 		.ascii	"ind\000"
 7430 03fa 07       		.byte	0x7
 7431 03fb 1901     		.2byte	0x119
 7432 03fd BB000000 		.4byte	0xbb
 7433 0401 82       		.byte	0x82
 7434 0402 0F       		.uleb128 0xf
 7435 0403 C3010000 		.4byte	.LASF122
 7436 0407 07       		.byte	0x7
 7437 0408 1A01     		.2byte	0x11a
 7438 040a 97000000 		.4byte	0x97
 7439 040e 84       		.byte	0x84
 7440 040f 00       		.byte	0
 7441 0410 11       		.uleb128 0x11
 7442 0411 97000000 		.4byte	0x97
 7443 0415 20040000 		.4byte	0x420
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 178


 7444 0419 12       		.uleb128 0x12
 7445 041a 00010000 		.4byte	0x100
 7446 041e 7F       		.byte	0x7f
 7447 041f 00       		.byte	0
 7448 0420 0E       		.uleb128 0xe
 7449 0421 09050000 		.4byte	.LASF123
 7450 0425 10       		.byte	0x10
 7451 0426 07       		.byte	0x7
 7452 0427 2801     		.2byte	0x128
 7453 0429 54040000 		.4byte	0x454
 7454 042d 10       		.uleb128 0x10
 7455 042e 696400   		.ascii	"id\000"
 7456 0431 07       		.byte	0x7
 7457 0432 2901     		.2byte	0x129
 7458 0434 97000000 		.4byte	0x97
 7459 0438 00       		.byte	0
 7460 0439 0F       		.uleb128 0xf
 7461 043a 790F0000 		.4byte	.LASF124
 7462 043e 07       		.byte	0x7
 7463 043f 2A01     		.2byte	0x12a
 7464 0441 97000000 		.4byte	0x97
 7465 0445 01       		.byte	0x1
 7466 0446 0F       		.uleb128 0xf
 7467 0447 6F020000 		.4byte	.LASF125
 7468 044b 07       		.byte	0x7
 7469 044c 2B01     		.2byte	0x12b
 7470 044e 54040000 		.4byte	0x454
 7471 0452 02       		.byte	0x2
 7472 0453 00       		.byte	0
 7473 0454 11       		.uleb128 0x11
 7474 0455 97000000 		.4byte	0x97
 7475 0459 64040000 		.4byte	0x464
 7476 045d 12       		.uleb128 0x12
 7477 045e 00010000 		.4byte	0x100
 7478 0462 0D       		.byte	0xd
 7479 0463 00       		.byte	0
 7480 0464 0E       		.uleb128 0xe
 7481 0465 14090000 		.4byte	.LASF126
 7482 0469 10       		.byte	0x10
 7483 046a 07       		.byte	0x7
 7484 046b 3201     		.2byte	0x132
 7485 046d B3040000 		.4byte	0x4b3
 7486 0471 0F       		.uleb128 0xf
 7487 0472 D9000000 		.4byte	.LASF127
 7488 0476 07       		.byte	0x7
 7489 0477 3401     		.2byte	0x134
 7490 0479 C7000000 		.4byte	0xc7
 7491 047d 00       		.byte	0
 7492 047e 0F       		.uleb128 0xf
 7493 047f D0040000 		.4byte	.LASF128
 7494 0483 07       		.byte	0x7
 7495 0484 3501     		.2byte	0x135
 7496 0486 C7000000 		.4byte	0xc7
 7497 048a 04       		.byte	0x4
 7498 048b 0F       		.uleb128 0xf
 7499 048c AC070000 		.4byte	.LASF129
 7500 0490 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 179


 7501 0491 3601     		.2byte	0x136
 7502 0493 97000000 		.4byte	0x97
 7503 0497 08       		.byte	0x8
 7504 0498 10       		.uleb128 0x10
 7505 0499 72657300 		.ascii	"res\000"
 7506 049d 07       		.byte	0x7
 7507 049e 3701     		.2byte	0x137
 7508 04a0 97000000 		.4byte	0x97
 7509 04a4 09       		.byte	0x9
 7510 04a5 0F       		.uleb128 0xf
 7511 04a6 6F020000 		.4byte	.LASF125
 7512 04aa 07       		.byte	0x7
 7513 04ab 3801     		.2byte	0x138
 7514 04ad B3040000 		.4byte	0x4b3
 7515 04b1 0A       		.byte	0xa
 7516 04b2 00       		.byte	0
 7517 04b3 11       		.uleb128 0x11
 7518 04b4 97000000 		.4byte	0x97
 7519 04b8 C3040000 		.4byte	0x4c3
 7520 04bc 12       		.uleb128 0x12
 7521 04bd 00010000 		.4byte	0x100
 7522 04c1 05       		.byte	0x5
 7523 04c2 00       		.byte	0
 7524 04c3 0E       		.uleb128 0xe
 7525 04c4 A3010000 		.4byte	.LASF130
 7526 04c8 10       		.byte	0x10
 7527 04c9 07       		.byte	0x7
 7528 04ca 4001     		.2byte	0x140
 7529 04cc 12050000 		.4byte	0x512
 7530 04d0 0F       		.uleb128 0xf
 7531 04d1 0B0B0000 		.4byte	.LASF131
 7532 04d5 07       		.byte	0x7
 7533 04d6 4101     		.2byte	0x141
 7534 04d8 12050000 		.4byte	0x512
 7535 04dc 00       		.byte	0
 7536 04dd 0F       		.uleb128 0xf
 7537 04de 46100000 		.4byte	.LASF132
 7538 04e2 07       		.byte	0x7
 7539 04e3 4201     		.2byte	0x142
 7540 04e5 22050000 		.4byte	0x522
 7541 04e9 04       		.byte	0x4
 7542 04ea 0F       		.uleb128 0xf
 7543 04eb F3040000 		.4byte	.LASF133
 7544 04ef 07       		.byte	0x7
 7545 04f0 4301     		.2byte	0x143
 7546 04f2 32050000 		.4byte	0x532
 7547 04f6 0C       		.byte	0xc
 7548 04f7 0F       		.uleb128 0xf
 7549 04f8 80030000 		.4byte	.LASF134
 7550 04fc 07       		.byte	0x7
 7551 04fd 4401     		.2byte	0x144
 7552 04ff 97000000 		.4byte	0x97
 7553 0503 0E       		.byte	0xe
 7554 0504 0F       		.uleb128 0xf
 7555 0505 6F020000 		.4byte	.LASF125
 7556 0509 07       		.byte	0x7
 7557 050a 4501     		.2byte	0x145
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 180


 7558 050c 42050000 		.4byte	0x542
 7559 0510 0F       		.byte	0xf
 7560 0511 00       		.byte	0
 7561 0512 11       		.uleb128 0x11
 7562 0513 A3000000 		.4byte	0xa3
 7563 0517 22050000 		.4byte	0x522
 7564 051b 12       		.uleb128 0x12
 7565 051c 00010000 		.4byte	0x100
 7566 0520 01       		.byte	0x1
 7567 0521 00       		.byte	0
 7568 0522 11       		.uleb128 0x11
 7569 0523 AF000000 		.4byte	0xaf
 7570 0527 32050000 		.4byte	0x532
 7571 052b 12       		.uleb128 0x12
 7572 052c 00010000 		.4byte	0x100
 7573 0530 01       		.byte	0x1
 7574 0531 00       		.byte	0
 7575 0532 11       		.uleb128 0x11
 7576 0533 97000000 		.4byte	0x97
 7577 0537 42050000 		.4byte	0x542
 7578 053b 12       		.uleb128 0x12
 7579 053c 00010000 		.4byte	0x100
 7580 0540 01       		.byte	0x1
 7581 0541 00       		.byte	0
 7582 0542 11       		.uleb128 0x11
 7583 0543 97000000 		.4byte	0x97
 7584 0547 52050000 		.4byte	0x552
 7585 054b 12       		.uleb128 0x12
 7586 054c 00010000 		.4byte	0x100
 7587 0550 00       		.byte	0
 7588 0551 00       		.byte	0
 7589 0552 0E       		.uleb128 0xe
 7590 0553 37010000 		.4byte	.LASF135
 7591 0557 10       		.byte	0x10
 7592 0558 07       		.byte	0x7
 7593 0559 4C01     		.2byte	0x14c
 7594 055b 87050000 		.4byte	0x587
 7595 055f 0F       		.uleb128 0xf
 7596 0560 52030000 		.4byte	.LASF136
 7597 0564 07       		.byte	0x7
 7598 0565 4D01     		.2byte	0x14d
 7599 0567 97000000 		.4byte	0x97
 7600 056b 00       		.byte	0
 7601 056c 0F       		.uleb128 0xf
 7602 056d 6F070000 		.4byte	.LASF137
 7603 0571 07       		.byte	0x7
 7604 0572 4E01     		.2byte	0x14e
 7605 0574 97000000 		.4byte	0x97
 7606 0578 01       		.byte	0x1
 7607 0579 0F       		.uleb128 0xf
 7608 057a 6F020000 		.4byte	.LASF125
 7609 057e 07       		.byte	0x7
 7610 057f 4F01     		.2byte	0x14f
 7611 0581 54040000 		.4byte	0x454
 7612 0585 02       		.byte	0x2
 7613 0586 00       		.byte	0
 7614 0587 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 181


 7615 0588 770B0000 		.4byte	.LASF138
 7616 058c 10       		.byte	0x10
 7617 058d 07       		.byte	0x7
 7618 058e 5601     		.2byte	0x156
 7619 0590 E3050000 		.4byte	0x5e3
 7620 0594 0F       		.uleb128 0xf
 7621 0595 FD0F0000 		.4byte	.LASF139
 7622 0599 07       		.byte	0x7
 7623 059a 5701     		.2byte	0x157
 7624 059c C7000000 		.4byte	0xc7
 7625 05a0 00       		.byte	0
 7626 05a1 0F       		.uleb128 0xf
 7627 05a2 E4050000 		.4byte	.LASF140
 7628 05a6 07       		.byte	0x7
 7629 05a7 5801     		.2byte	0x158
 7630 05a9 D3000000 		.4byte	0xd3
 7631 05ad 04       		.byte	0x4
 7632 05ae 0F       		.uleb128 0xf
 7633 05af 910C0000 		.4byte	.LASF141
 7634 05b3 07       		.byte	0x7
 7635 05b4 5901     		.2byte	0x159
 7636 05b6 D3000000 		.4byte	0xd3
 7637 05ba 08       		.byte	0x8
 7638 05bb 0F       		.uleb128 0xf
 7639 05bc 08080000 		.4byte	.LASF142
 7640 05c0 07       		.byte	0x7
 7641 05c1 5A01     		.2byte	0x15a
 7642 05c3 97000000 		.4byte	0x97
 7643 05c7 0C       		.byte	0xc
 7644 05c8 0F       		.uleb128 0xf
 7645 05c9 050E0000 		.4byte	.LASF143
 7646 05cd 07       		.byte	0x7
 7647 05ce 5B01     		.2byte	0x15b
 7648 05d0 97000000 		.4byte	0x97
 7649 05d4 0D       		.byte	0xd
 7650 05d5 0F       		.uleb128 0xf
 7651 05d6 6F020000 		.4byte	.LASF125
 7652 05da 07       		.byte	0x7
 7653 05db 5C01     		.2byte	0x15c
 7654 05dd 32050000 		.4byte	0x532
 7655 05e1 0E       		.byte	0xe
 7656 05e2 00       		.byte	0
 7657 05e3 0E       		.uleb128 0xe
 7658 05e4 12100000 		.4byte	.LASF144
 7659 05e8 60       		.byte	0x60
 7660 05e9 07       		.byte	0x7
 7661 05ea 6601     		.2byte	0x166
 7662 05ec 4A060000 		.4byte	0x64a
 7663 05f0 0F       		.uleb128 0xf
 7664 05f1 2B0A0000 		.4byte	.LASF145
 7665 05f5 07       		.byte	0x7
 7666 05f6 6701     		.2byte	0x167
 7667 05f8 97000000 		.4byte	0x97
 7668 05fc 00       		.byte	0
 7669 05fd 0F       		.uleb128 0xf
 7670 05fe 6F020000 		.4byte	.LASF125
 7671 0602 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 182


 7672 0603 6801     		.2byte	0x168
 7673 0605 4A060000 		.4byte	0x64a
 7674 0609 01       		.byte	0x1
 7675 060a 10       		.uleb128 0x10
 7676 060b 64657600 		.ascii	"dev\000"
 7677 060f 07       		.byte	0x7
 7678 0610 6901     		.2byte	0x169
 7679 0612 20040000 		.4byte	0x420
 7680 0616 10       		.byte	0x10
 7681 0617 0F       		.uleb128 0xf
 7682 0618 3D090000 		.4byte	.LASF146
 7683 061c 07       		.byte	0x7
 7684 061d 6A01     		.2byte	0x16a
 7685 061f 64040000 		.4byte	0x464
 7686 0623 20       		.byte	0x20
 7687 0624 10       		.uleb128 0x10
 7688 0625 656D6700 		.ascii	"emg\000"
 7689 0629 07       		.byte	0x7
 7690 062a 6B01     		.2byte	0x16b
 7691 062c C3040000 		.4byte	0x4c3
 7692 0630 30       		.byte	0x30
 7693 0631 10       		.uleb128 0x10
 7694 0632 4D5300   		.ascii	"MS\000"
 7695 0635 07       		.byte	0x7
 7696 0636 6C01     		.2byte	0x16c
 7697 0638 52050000 		.4byte	0x552
 7698 063c 40       		.byte	0x40
 7699 063d 10       		.uleb128 0x10
 7700 063e 464200   		.ascii	"FB\000"
 7701 0641 07       		.byte	0x7
 7702 0642 6D01     		.2byte	0x16d
 7703 0644 87050000 		.4byte	0x587
 7704 0648 50       		.byte	0x50
 7705 0649 00       		.byte	0
 7706 064a 11       		.uleb128 0x11
 7707 064b 97000000 		.4byte	0x97
 7708 064f 5A060000 		.4byte	0x65a
 7709 0653 12       		.uleb128 0x12
 7710 0654 00010000 		.4byte	0x100
 7711 0658 0E       		.byte	0xe
 7712 0659 00       		.byte	0
 7713 065a 0E       		.uleb128 0xe
 7714 065b 65030000 		.4byte	.LASF147
 7715 065f 06       		.byte	0x6
 7716 0660 07       		.byte	0x7
 7717 0661 8A01     		.2byte	0x18a
 7718 0663 9C060000 		.4byte	0x69c
 7719 0667 0F       		.uleb128 0xf
 7720 0668 16060000 		.4byte	.LASF148
 7721 066c 07       		.byte	0x7
 7722 066d 8B01     		.2byte	0x18b
 7723 066f 97000000 		.4byte	0x97
 7724 0673 00       		.byte	0
 7725 0674 0F       		.uleb128 0xf
 7726 0675 18010000 		.4byte	.LASF149
 7727 0679 07       		.byte	0x7
 7728 067a 8C01     		.2byte	0x18c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 183


 7729 067c 97000000 		.4byte	0x97
 7730 0680 01       		.byte	0x1
 7731 0681 0F       		.uleb128 0xf
 7732 0682 88050000 		.4byte	.LASF150
 7733 0686 07       		.byte	0x7
 7734 0687 8D01     		.2byte	0x18d
 7735 0689 BB000000 		.4byte	0xbb
 7736 068d 02       		.byte	0x2
 7737 068e 0F       		.uleb128 0xf
 7738 068f 76090000 		.4byte	.LASF151
 7739 0693 07       		.byte	0x7
 7740 0694 8E01     		.2byte	0x18e
 7741 0696 BB000000 		.4byte	0xbb
 7742 069a 04       		.byte	0x4
 7743 069b 00       		.byte	0
 7744 069c 0E       		.uleb128 0xe
 7745 069d 16020000 		.4byte	.LASF152
 7746 06a1 2C       		.byte	0x2c
 7747 06a2 07       		.byte	0x7
 7748 06a3 0002     		.2byte	0x200
 7749 06a5 D1060000 		.4byte	0x6d1
 7750 06a9 0F       		.uleb128 0xf
 7751 06aa EB0D0000 		.4byte	.LASF153
 7752 06ae 07       		.byte	0x7
 7753 06af 0102     		.2byte	0x201
 7754 06b1 97000000 		.4byte	0x97
 7755 06b5 00       		.byte	0
 7756 06b6 0F       		.uleb128 0xf
 7757 06b7 E50D0000 		.4byte	.LASF154
 7758 06bb 07       		.byte	0x7
 7759 06bc 0202     		.2byte	0x202
 7760 06be 97000000 		.4byte	0x97
 7761 06c2 01       		.byte	0x1
 7762 06c3 0F       		.uleb128 0xf
 7763 06c4 EA000000 		.4byte	.LASF155
 7764 06c8 07       		.byte	0x7
 7765 06c9 0302     		.2byte	0x203
 7766 06cb D1060000 		.4byte	0x6d1
 7767 06cf 04       		.byte	0x4
 7768 06d0 00       		.byte	0
 7769 06d1 11       		.uleb128 0x11
 7770 06d2 0D010000 		.4byte	0x10d
 7771 06d6 E1060000 		.4byte	0x6e1
 7772 06da 12       		.uleb128 0x12
 7773 06db 00010000 		.4byte	0x100
 7774 06df 09       		.byte	0x9
 7775 06e0 00       		.byte	0
 7776 06e1 0E       		.uleb128 0xe
 7777 06e2 8B040000 		.4byte	.LASF156
 7778 06e6 10       		.byte	0x10
 7779 06e7 07       		.byte	0x7
 7780 06e8 0602     		.2byte	0x206
 7781 06ea 4A070000 		.4byte	0x74a
 7782 06ee 0F       		.uleb128 0xf
 7783 06ef 4A0D0000 		.4byte	.LASF157
 7784 06f3 07       		.byte	0x7
 7785 06f4 0702     		.2byte	0x207
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 184


 7786 06f6 4A070000 		.4byte	0x74a
 7787 06fa 00       		.byte	0
 7788 06fb 0F       		.uleb128 0xf
 7789 06fc 1C100000 		.4byte	.LASF158
 7790 0700 07       		.byte	0x7
 7791 0701 0802     		.2byte	0x208
 7792 0703 97000000 		.4byte	0x97
 7793 0707 04       		.byte	0x4
 7794 0708 0F       		.uleb128 0xf
 7795 0709 7C020000 		.4byte	.LASF159
 7796 070d 07       		.byte	0x7
 7797 070e 0902     		.2byte	0x209
 7798 0710 97000000 		.4byte	0x97
 7799 0714 05       		.byte	0x5
 7800 0715 0F       		.uleb128 0xf
 7801 0716 46010000 		.4byte	.LASF160
 7802 071a 07       		.byte	0x7
 7803 071b 0A02     		.2byte	0x20a
 7804 071d 0D010000 		.4byte	0x10d
 7805 0721 08       		.byte	0x8
 7806 0722 0F       		.uleb128 0xf
 7807 0723 F7070000 		.4byte	.LASF161
 7808 0727 07       		.byte	0x7
 7809 0728 0B02     		.2byte	0x20b
 7810 072a 97000000 		.4byte	0x97
 7811 072e 0C       		.byte	0xc
 7812 072f 0F       		.uleb128 0xf
 7813 0730 9E0A0000 		.4byte	.LASF162
 7814 0734 07       		.byte	0x7
 7815 0735 0C02     		.2byte	0x20c
 7816 0737 97000000 		.4byte	0x97
 7817 073b 0D       		.byte	0xd
 7818 073c 0F       		.uleb128 0xf
 7819 073d 000C0000 		.4byte	.LASF163
 7820 0741 07       		.byte	0x7
 7821 0742 0D02     		.2byte	0x20d
 7822 0744 97000000 		.4byte	0x97
 7823 0748 0E       		.byte	0xe
 7824 0749 00       		.byte	0
 7825 074a 07       		.uleb128 0x7
 7826 074b 04       		.byte	0x4
 7827 074c 97000000 		.4byte	0x97
 7828 0750 0E       		.uleb128 0xe
 7829 0751 C2090000 		.4byte	.LASF164
 7830 0755 0C       		.byte	0xc
 7831 0756 07       		.byte	0x7
 7832 0757 2202     		.2byte	0x222
 7833 0759 78070000 		.4byte	0x778
 7834 075d 10       		.uleb128 0x10
 7835 075e 656D6700 		.ascii	"emg\000"
 7836 0762 07       		.byte	0x7
 7837 0763 2302     		.2byte	0x223
 7838 0765 78070000 		.4byte	0x778
 7839 0769 00       		.byte	0
 7840 076a 0F       		.uleb128 0xf
 7841 076b 3A040000 		.4byte	.LASF118
 7842 076f 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 185


 7843 0770 2402     		.2byte	0x224
 7844 0772 D3000000 		.4byte	0xd3
 7845 0776 08       		.byte	0x8
 7846 0777 00       		.byte	0
 7847 0778 11       		.uleb128 0x11
 7848 0779 C7000000 		.4byte	0xc7
 7849 077d 88070000 		.4byte	0x788
 7850 0781 12       		.uleb128 0x12
 7851 0782 00010000 		.4byte	0x100
 7852 0786 01       		.byte	0x1
 7853 0787 00       		.byte	0
 7854 0788 13       		.uleb128 0x13
 7855 0789 420D0000 		.4byte	.LASF298
 7856 078d 02       		.byte	0x2
 7857 078e 1403     		.2byte	0x314
 7858 0790 8C000000 		.4byte	0x8c
 7859 0794 03       		.byte	0x3
 7860 0795 B2070000 		.4byte	0x7b2
 7861 0799 14       		.uleb128 0x14
 7862 079a 34040000 		.4byte	.LASF216
 7863 079e 02       		.byte	0x2
 7864 079f 1403     		.2byte	0x314
 7865 07a1 8C000000 		.4byte	0x8c
 7866 07a5 15       		.uleb128 0x15
 7867 07a6 BC010000 		.4byte	.LASF299
 7868 07aa 02       		.byte	0x2
 7869 07ab 1603     		.2byte	0x316
 7870 07ad 8C000000 		.4byte	0x8c
 7871 07b1 00       		.byte	0
 7872 07b2 16       		.uleb128 0x16
 7873 07b3 480E0000 		.4byte	.LASF165
 7874 07b7 01       		.byte	0x1
 7875 07b8 3D       		.byte	0x3d
 7876 07b9 00000000 		.4byte	.LFB64
 7877 07bd 68060000 		.4byte	.LFE64-.LFB64
 7878 07c1 01       		.uleb128 0x1
 7879 07c2 9C       		.byte	0x9c
 7880 07c3 BB080000 		.4byte	0x8bb
 7881 07c7 17       		.uleb128 0x17
 7882 07c8 8E050000 		.4byte	.LASF167
 7883 07cc 01       		.byte	0x1
 7884 07cd 3F       		.byte	0x3f
 7885 07ce 97000000 		.4byte	0x97
 7886 07d2 02       		.uleb128 0x2
 7887 07d3 91       		.byte	0x91
 7888 07d4 77       		.sleb128 -9
 7889 07d5 18       		.uleb128 0x18
 7890 07d6 88070000 		.4byte	0x788
 7891 07da 9A040000 		.4byte	.LBB12
 7892 07de 08000000 		.4byte	.LBE12-.LBB12
 7893 07e2 01       		.byte	0x1
 7894 07e3 A2       		.byte	0xa2
 7895 07e4 03080000 		.4byte	0x803
 7896 07e8 19       		.uleb128 0x19
 7897 07e9 99070000 		.4byte	0x799
 7898 07ed 02       		.uleb128 0x2
 7899 07ee 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 186


 7900 07ef 60       		.sleb128 -32
 7901 07f0 1A       		.uleb128 0x1a
 7902 07f1 9A040000 		.4byte	.LBB13
 7903 07f5 08000000 		.4byte	.LBE13-.LBB13
 7904 07f9 1B       		.uleb128 0x1b
 7905 07fa A5070000 		.4byte	0x7a5
 7906 07fe 02       		.uleb128 0x2
 7907 07ff 91       		.byte	0x91
 7908 0800 5C       		.sleb128 -36
 7909 0801 00       		.byte	0
 7910 0802 00       		.byte	0
 7911 0803 18       		.uleb128 0x18
 7912 0804 88070000 		.4byte	0x788
 7913 0808 B8040000 		.4byte	.LBB14
 7914 080c 08000000 		.4byte	.LBE14-.LBB14
 7915 0810 01       		.byte	0x1
 7916 0811 AE       		.byte	0xae
 7917 0812 31080000 		.4byte	0x831
 7918 0816 19       		.uleb128 0x19
 7919 0817 99070000 		.4byte	0x799
 7920 081b 02       		.uleb128 0x2
 7921 081c 91       		.byte	0x91
 7922 081d 70       		.sleb128 -16
 7923 081e 1A       		.uleb128 0x1a
 7924 081f B8040000 		.4byte	.LBB15
 7925 0823 08000000 		.4byte	.LBE15-.LBB15
 7926 0827 1B       		.uleb128 0x1b
 7927 0828 A5070000 		.4byte	0x7a5
 7928 082c 02       		.uleb128 0x2
 7929 082d 91       		.byte	0x91
 7930 082e 58       		.sleb128 -40
 7931 082f 00       		.byte	0
 7932 0830 00       		.byte	0
 7933 0831 1C       		.uleb128 0x1c
 7934 0832 88070000 		.4byte	0x788
 7935 0836 F4050000 		.4byte	.LBB16
 7936 083a 08000000 		.4byte	.LBE16-.LBB16
 7937 083e 01       		.byte	0x1
 7938 083f 0A01     		.2byte	0x10a
 7939 0841 60080000 		.4byte	0x860
 7940 0845 19       		.uleb128 0x19
 7941 0846 99070000 		.4byte	0x799
 7942 084a 02       		.uleb128 0x2
 7943 084b 91       		.byte	0x91
 7944 084c 6C       		.sleb128 -20
 7945 084d 1A       		.uleb128 0x1a
 7946 084e F4050000 		.4byte	.LBB17
 7947 0852 08000000 		.4byte	.LBE17-.LBB17
 7948 0856 1B       		.uleb128 0x1b
 7949 0857 A5070000 		.4byte	0x7a5
 7950 085b 02       		.uleb128 0x2
 7951 085c 91       		.byte	0x91
 7952 085d 54       		.sleb128 -44
 7953 085e 00       		.byte	0
 7954 085f 00       		.byte	0
 7955 0860 1C       		.uleb128 0x1c
 7956 0861 88070000 		.4byte	0x788
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 187


 7957 0865 24060000 		.4byte	.LBB18
 7958 0869 08000000 		.4byte	.LBE18-.LBB18
 7959 086d 01       		.byte	0x1
 7960 086e 2801     		.2byte	0x128
 7961 0870 8F080000 		.4byte	0x88f
 7962 0874 19       		.uleb128 0x19
 7963 0875 99070000 		.4byte	0x799
 7964 0879 02       		.uleb128 0x2
 7965 087a 91       		.byte	0x91
 7966 087b 68       		.sleb128 -24
 7967 087c 1A       		.uleb128 0x1a
 7968 087d 24060000 		.4byte	.LBB19
 7969 0881 08000000 		.4byte	.LBE19-.LBB19
 7970 0885 1B       		.uleb128 0x1b
 7971 0886 A5070000 		.4byte	0x7a5
 7972 088a 02       		.uleb128 0x2
 7973 088b 91       		.byte	0x91
 7974 088c 50       		.sleb128 -48
 7975 088d 00       		.byte	0
 7976 088e 00       		.byte	0
 7977 088f 1D       		.uleb128 0x1d
 7978 0890 88070000 		.4byte	0x788
 7979 0894 3C060000 		.4byte	.LBB20
 7980 0898 08000000 		.4byte	.LBE20-.LBB20
 7981 089c 01       		.byte	0x1
 7982 089d 2E01     		.2byte	0x12e
 7983 089f 19       		.uleb128 0x19
 7984 08a0 99070000 		.4byte	0x799
 7985 08a4 02       		.uleb128 0x2
 7986 08a5 91       		.byte	0x91
 7987 08a6 64       		.sleb128 -28
 7988 08a7 1A       		.uleb128 0x1a
 7989 08a8 3C060000 		.4byte	.LBB21
 7990 08ac 08000000 		.4byte	.LBE21-.LBB21
 7991 08b0 1B       		.uleb128 0x1b
 7992 08b1 A5070000 		.4byte	0x7a5
 7993 08b5 02       		.uleb128 0x2
 7994 08b6 91       		.byte	0x91
 7995 08b7 4C       		.sleb128 -52
 7996 08b8 00       		.byte	0
 7997 08b9 00       		.byte	0
 7998 08ba 00       		.byte	0
 7999 08bb 1E       		.uleb128 0x1e
 8000 08bc 00000000 		.4byte	.LASF166
 8001 08c0 01       		.byte	0x1
 8002 08c1 3C01     		.2byte	0x13c
 8003 08c3 00000000 		.4byte	.LFB65
 8004 08c7 22000000 		.4byte	.LFE65-.LFB65
 8005 08cb 01       		.uleb128 0x1
 8006 08cc 9C       		.byte	0x9c
 8007 08cd E2080000 		.4byte	0x8e2
 8008 08d1 1F       		.uleb128 0x1f
 8009 08d2 A0040000 		.4byte	.LASF168
 8010 08d6 01       		.byte	0x1
 8011 08d7 3D01     		.2byte	0x13d
 8012 08d9 E2080000 		.4byte	0x8e2
 8013 08dd 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 188


 8014 08de 91       		.byte	0x91
 8015 08df 9C74     		.sleb128 -1508
 8016 08e1 00       		.byte	0
 8017 08e2 11       		.uleb128 0x11
 8018 08e3 E1000000 		.4byte	0xe1
 8019 08e7 F3080000 		.4byte	0x8f3
 8020 08eb 20       		.uleb128 0x20
 8021 08ec 00010000 		.4byte	0x100
 8022 08f0 DB05     		.2byte	0x5db
 8023 08f2 00       		.byte	0
 8024 08f3 21       		.uleb128 0x21
 8025 08f4 19070000 		.4byte	.LASF210
 8026 08f8 01       		.byte	0x1
 8027 08f9 4601     		.2byte	0x146
 8028 08fb 97000000 		.4byte	0x97
 8029 08ff 00000000 		.4byte	.LFB66
 8030 0903 5E000000 		.4byte	.LFE66-.LFB66
 8031 0907 01       		.uleb128 0x1
 8032 0908 9C       		.byte	0x9c
 8033 0909 2C090000 		.4byte	0x92c
 8034 090d 22       		.uleb128 0x22
 8035 090e E5000000 		.4byte	.LASF170
 8036 0912 01       		.byte	0x1
 8037 0913 4601     		.2byte	0x146
 8038 0915 97000000 		.4byte	0x97
 8039 0919 02       		.uleb128 0x2
 8040 091a 91       		.byte	0x91
 8041 091b 6F       		.sleb128 -17
 8042 091c 23       		.uleb128 0x23
 8043 091d 736F6400 		.ascii	"sod\000"
 8044 0921 01       		.byte	0x1
 8045 0922 4701     		.2byte	0x147
 8046 0924 97000000 		.4byte	0x97
 8047 0928 02       		.uleb128 0x2
 8048 0929 91       		.byte	0x91
 8049 092a 77       		.sleb128 -9
 8050 092b 00       		.byte	0
 8051 092c 1E       		.uleb128 0x1e
 8052 092d 28100000 		.4byte	.LASF169
 8053 0931 01       		.byte	0x1
 8054 0932 5701     		.2byte	0x157
 8055 0934 00000000 		.4byte	.LFB67
 8056 0938 64010000 		.4byte	.LFE67-.LFB67
 8057 093c 01       		.uleb128 0x1
 8058 093d 9C       		.byte	0x9c
 8059 093e 75090000 		.4byte	0x975
 8060 0942 22       		.uleb128 0x22
 8061 0943 660D0000 		.4byte	.LASF171
 8062 0947 01       		.byte	0x1
 8063 0948 5701     		.2byte	0x157
 8064 094a A3000000 		.4byte	0xa3
 8065 094e 04       		.uleb128 0x4
 8066 094f 91       		.byte	0x91
 8067 0950 B6C47E   		.sleb128 -24010
 8068 0953 1F       		.uleb128 0x1f
 8069 0954 A0040000 		.4byte	.LASF168
 8070 0958 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 189


 8071 0959 5801     		.2byte	0x158
 8072 095b 75090000 		.4byte	0x975
 8073 095f 03       		.uleb128 0x3
 8074 0960 91       		.byte	0x91
 8075 0961 D860     		.sleb128 -4008
 8076 0963 1F       		.uleb128 0x1f
 8077 0964 63070000 		.4byte	.LASF172
 8078 0968 01       		.byte	0x1
 8079 0969 5901     		.2byte	0x159
 8080 096b 86090000 		.4byte	0x986
 8081 096f 04       		.uleb128 0x4
 8082 0970 91       		.byte	0x91
 8083 0971 B8C47E   		.sleb128 -24008
 8084 0974 00       		.byte	0
 8085 0975 11       		.uleb128 0x11
 8086 0976 E1000000 		.4byte	0xe1
 8087 097a 86090000 		.4byte	0x986
 8088 097e 20       		.uleb128 0x20
 8089 097f 00010000 		.4byte	0x100
 8090 0983 9F0F     		.2byte	0xf9f
 8091 0985 00       		.byte	0
 8092 0986 11       		.uleb128 0x11
 8093 0987 E1000000 		.4byte	0xe1
 8094 098b 97090000 		.4byte	0x997
 8095 098f 20       		.uleb128 0x20
 8096 0990 00010000 		.4byte	0x100
 8097 0994 1F4E     		.2byte	0x4e1f
 8098 0996 00       		.byte	0
 8099 0997 1E       		.uleb128 0x1e
 8100 0998 72010000 		.4byte	.LASF173
 8101 099c 01       		.byte	0x1
 8102 099d 8901     		.2byte	0x189
 8103 099f 00000000 		.4byte	.LFB68
 8104 09a3 BC070000 		.4byte	.LFE68-.LFB68
 8105 09a7 01       		.uleb128 0x1
 8106 09a8 9C       		.byte	0x9c
 8107 09a9 E70A0000 		.4byte	0xae7
 8108 09ad 22       		.uleb128 0x22
 8109 09ae DE0B0000 		.4byte	.LASF174
 8110 09b2 01       		.byte	0x1
 8111 09b3 8901     		.2byte	0x189
 8112 09b5 97000000 		.4byte	0x97
 8113 09b9 03       		.uleb128 0x3
 8114 09ba 91       		.byte	0x91
 8115 09bb 8F7B     		.sleb128 -625
 8116 09bd 22       		.uleb128 0x22
 8117 09be E80C0000 		.4byte	.LASF175
 8118 09c2 01       		.byte	0x1
 8119 09c3 8901     		.2byte	0x189
 8120 09c5 97000000 		.4byte	0x97
 8121 09c9 03       		.uleb128 0x3
 8122 09ca 91       		.byte	0x91
 8123 09cb 8E7B     		.sleb128 -626
 8124 09cd 22       		.uleb128 0x22
 8125 09ce 510F0000 		.4byte	.LASF176
 8126 09d2 01       		.byte	0x1
 8127 09d3 8901     		.2byte	0x189
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 190


 8128 09d5 E70A0000 		.4byte	0xae7
 8129 09d9 03       		.uleb128 0x3
 8130 09da 91       		.byte	0x91
 8131 09db 887B     		.sleb128 -632
 8132 09dd 22       		.uleb128 0x22
 8133 09de 5F0A0000 		.4byte	.LASF177
 8134 09e2 01       		.byte	0x1
 8135 09e3 8901     		.2byte	0x189
 8136 09e5 F20A0000 		.4byte	0xaf2
 8137 09e9 03       		.uleb128 0x3
 8138 09ea 91       		.byte	0x91
 8139 09eb 847B     		.sleb128 -636
 8140 09ed 22       		.uleb128 0x22
 8141 09ee 230C0000 		.4byte	.LASF178
 8142 09f2 01       		.byte	0x1
 8143 09f3 8901     		.2byte	0x189
 8144 09f5 97000000 		.4byte	0x97
 8145 09f9 02       		.uleb128 0x2
 8146 09fa 91       		.byte	0x91
 8147 09fb 00       		.sleb128 0
 8148 09fc 23       		.uleb128 0x23
 8149 09fd 69647800 		.ascii	"idx\000"
 8150 0a01 01       		.byte	0x1
 8151 0a02 8B01     		.2byte	0x18b
 8152 0a04 97000000 		.4byte	0x97
 8153 0a08 02       		.uleb128 0x2
 8154 0a09 91       		.byte	0x91
 8155 0a0a 5F       		.sleb128 -33
 8156 0a0b 1F       		.uleb128 0x1f
 8157 0a0c CE090000 		.4byte	.LASF179
 8158 0a10 01       		.byte	0x1
 8159 0a11 8C01     		.2byte	0x18c
 8160 0a13 4A070000 		.4byte	0x74a
 8161 0a17 02       		.uleb128 0x2
 8162 0a18 91       		.byte	0x91
 8163 0a19 50       		.sleb128 -48
 8164 0a1a 1F       		.uleb128 0x1f
 8165 0a1b 12000000 		.4byte	.LASF180
 8166 0a1f 01       		.byte	0x1
 8167 0a20 8D01     		.2byte	0x18d
 8168 0a22 97000000 		.4byte	0x97
 8169 0a26 02       		.uleb128 0x2
 8170 0a27 91       		.byte	0x91
 8171 0a28 5E       		.sleb128 -34
 8172 0a29 1F       		.uleb128 0x1f
 8173 0a2a C1100000 		.4byte	.LASF181
 8174 0a2e 01       		.byte	0x1
 8175 0a2f 8E01     		.2byte	0x18e
 8176 0a31 FD0A0000 		.4byte	0xafd
 8177 0a35 03       		.uleb128 0x3
 8178 0a36 91       		.byte	0x91
 8179 0a37 C87D     		.sleb128 -312
 8180 0a39 1F       		.uleb128 0x1f
 8181 0a3a C9010000 		.4byte	.LASF182
 8182 0a3e 01       		.byte	0x1
 8183 0a3f 8F01     		.2byte	0x18f
 8184 0a41 FD0A0000 		.4byte	0xafd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 191


 8185 0a45 03       		.uleb128 0x3
 8186 0a46 91       		.byte	0x91
 8187 0a47 CC7B     		.sleb128 -564
 8188 0a49 1F       		.uleb128 0x1f
 8189 0a4a 6F0F0000 		.4byte	.LASF183
 8190 0a4e 01       		.byte	0x1
 8191 0a4f 9201     		.2byte	0x192
 8192 0a51 C7000000 		.4byte	0xc7
 8193 0a55 03       		.uleb128 0x3
 8194 0a56 91       		.byte	0x91
 8195 0a57 C87B     		.sleb128 -568
 8196 0a59 23       		.uleb128 0x23
 8197 0a5a 6900     		.ascii	"i\000"
 8198 0a5c 01       		.byte	0x1
 8199 0a5d 9301     		.2byte	0x193
 8200 0a5f 97000000 		.4byte	0x97
 8201 0a63 02       		.uleb128 0x2
 8202 0a64 91       		.byte	0x91
 8203 0a65 5D       		.sleb128 -35
 8204 0a66 23       		.uleb128 0x23
 8205 0a67 6A00     		.ascii	"j\000"
 8206 0a69 01       		.byte	0x1
 8207 0a6a 9301     		.2byte	0x193
 8208 0a6c 97000000 		.4byte	0x97
 8209 0a70 02       		.uleb128 0x2
 8210 0a71 91       		.byte	0x91
 8211 0a72 5C       		.sleb128 -36
 8212 0a73 1F       		.uleb128 0x1f
 8213 0a74 BC090000 		.4byte	.LASF184
 8214 0a78 01       		.byte	0x1
 8215 0a79 9401     		.2byte	0x194
 8216 0a7b 97000000 		.4byte	0x97
 8217 0a7f 02       		.uleb128 0x2
 8218 0a80 91       		.byte	0x91
 8219 0a81 5B       		.sleb128 -37
 8220 0a82 1F       		.uleb128 0x1f
 8221 0a83 720C0000 		.4byte	.LASF185
 8222 0a87 01       		.byte	0x1
 8223 0a88 9501     		.2byte	0x195
 8224 0a8a 0D0B0000 		.4byte	0xb0d
 8225 0a8e 03       		.uleb128 0x3
 8226 0a8f 91       		.byte	0x91
 8227 0a90 947B     		.sleb128 -620
 8228 0a92 1F       		.uleb128 0x1f
 8229 0a93 89070000 		.4byte	.LASF186
 8230 0a97 01       		.byte	0x1
 8231 0a98 9A01     		.2byte	0x19a
 8232 0a9a A3000000 		.4byte	0xa3
 8233 0a9e 02       		.uleb128 0x2
 8234 0a9f 91       		.byte	0x91
 8235 0aa0 4E       		.sleb128 -50
 8236 0aa1 1F       		.uleb128 0x1f
 8237 0aa2 FD040000 		.4byte	.LASF187
 8238 0aa6 01       		.byte	0x1
 8239 0aa7 9B01     		.2byte	0x19b
 8240 0aa9 1D0B0000 		.4byte	0xb1d
 8241 0aad 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 192


 8242 0aae 91       		.byte	0x91
 8243 0aaf 44       		.sleb128 -60
 8244 0ab0 06       		.byte	0x6
 8245 0ab1 24       		.uleb128 0x24
 8246 0ab2 E4000000 		.4byte	.LBB22
 8247 0ab6 2C000000 		.4byte	.LBE22-.LBB22
 8248 0aba CD0A0000 		.4byte	0xacd
 8249 0abe 23       		.uleb128 0x23
 8250 0abf 696900   		.ascii	"ii\000"
 8251 0ac2 01       		.byte	0x1
 8252 0ac3 9C01     		.2byte	0x19c
 8253 0ac5 73000000 		.4byte	0x73
 8254 0ac9 02       		.uleb128 0x2
 8255 0aca 91       		.byte	0x91
 8256 0acb 54       		.sleb128 -44
 8257 0acc 00       		.byte	0
 8258 0acd 1A       		.uleb128 0x1a
 8259 0ace 2C010000 		.4byte	.LBB23
 8260 0ad2 80040000 		.4byte	.LBE23-.LBB23
 8261 0ad6 23       		.uleb128 0x23
 8262 0ad7 736F6400 		.ascii	"sod\000"
 8263 0adb 01       		.byte	0x1
 8264 0adc A301     		.2byte	0x1a3
 8265 0ade 97000000 		.4byte	0x97
 8266 0ae2 02       		.uleb128 0x2
 8267 0ae3 91       		.byte	0x91
 8268 0ae4 43       		.sleb128 -61
 8269 0ae5 00       		.byte	0
 8270 0ae6 00       		.byte	0
 8271 0ae7 07       		.uleb128 0x7
 8272 0ae8 04       		.byte	0x4
 8273 0ae9 ED0A0000 		.4byte	0xaed
 8274 0aed 08       		.uleb128 0x8
 8275 0aee E1060000 		.4byte	0x6e1
 8276 0af2 07       		.uleb128 0x7
 8277 0af3 04       		.byte	0x4
 8278 0af4 F80A0000 		.4byte	0xaf8
 8279 0af8 08       		.uleb128 0x8
 8280 0af9 9C060000 		.4byte	0x69c
 8281 0afd 11       		.uleb128 0x11
 8282 0afe E1000000 		.4byte	0xe1
 8283 0b02 0D0B0000 		.4byte	0xb0d
 8284 0b06 12       		.uleb128 0x12
 8285 0b07 00010000 		.4byte	0x100
 8286 0b0b F9       		.byte	0xf9
 8287 0b0c 00       		.byte	0
 8288 0b0d 11       		.uleb128 0x11
 8289 0b0e E1000000 		.4byte	0xe1
 8290 0b12 1D0B0000 		.4byte	0xb1d
 8291 0b16 12       		.uleb128 0x12
 8292 0b17 00010000 		.4byte	0x100
 8293 0b1b 31       		.byte	0x31
 8294 0b1c 00       		.byte	0
 8295 0b1d 11       		.uleb128 0x11
 8296 0b1e 97000000 		.4byte	0x97
 8297 0b22 300B0000 		.4byte	0xb30
 8298 0b26 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 193


 8299 0b27 00010000 		.4byte	0x100
 8300 0b2b 03       		.uleb128 0x3
 8301 0b2c 91       		.byte	0x91
 8302 0b2d 48       		.sleb128 -56
 8303 0b2e 06       		.byte	0x6
 8304 0b2f 00       		.byte	0
 8305 0b30 1E       		.uleb128 0x1e
 8306 0b31 B30C0000 		.4byte	.LASF188
 8307 0b35 01       		.byte	0x1
 8308 0b36 0E02     		.2byte	0x20e
 8309 0b38 00000000 		.4byte	.LFB69
 8310 0b3c 84060000 		.4byte	.LFE69-.LFB69
 8311 0b40 01       		.uleb128 0x1
 8312 0b41 9C       		.byte	0x9c
 8313 0b42 160C0000 		.4byte	0xc16
 8314 0b46 22       		.uleb128 0x22
 8315 0b47 DE050000 		.4byte	.LASF189
 8316 0b4b 01       		.byte	0x1
 8317 0b4c 0E02     		.2byte	0x20e
 8318 0b4e A3000000 		.4byte	0xa3
 8319 0b52 03       		.uleb128 0x3
 8320 0b53 91       		.byte	0x91
 8321 0b54 AE7C     		.sleb128 -466
 8322 0b56 22       		.uleb128 0x22
 8323 0b57 230C0000 		.4byte	.LASF178
 8324 0b5b 01       		.byte	0x1
 8325 0b5c 0E02     		.2byte	0x20e
 8326 0b5e 97000000 		.4byte	0x97
 8327 0b62 03       		.uleb128 0x3
 8328 0b63 91       		.byte	0x91
 8329 0b64 AD7C     		.sleb128 -467
 8330 0b66 23       		.uleb128 0x23
 8331 0b67 6900     		.ascii	"i\000"
 8332 0b69 01       		.byte	0x1
 8333 0b6a 0F02     		.2byte	0x20f
 8334 0b6c 97000000 		.4byte	0x97
 8335 0b70 02       		.uleb128 0x2
 8336 0b71 91       		.byte	0x91
 8337 0b72 6F       		.sleb128 -17
 8338 0b73 23       		.uleb128 0x23
 8339 0b74 6A00     		.ascii	"j\000"
 8340 0b76 01       		.byte	0x1
 8341 0b77 0F02     		.2byte	0x20f
 8342 0b79 97000000 		.4byte	0x97
 8343 0b7d 02       		.uleb128 0x2
 8344 0b7e 91       		.byte	0x91
 8345 0b7f 6E       		.sleb128 -18
 8346 0b80 1F       		.uleb128 0x1f
 8347 0b81 68010000 		.4byte	.LASF190
 8348 0b85 01       		.byte	0x1
 8349 0b86 1102     		.2byte	0x211
 8350 0b88 97000000 		.4byte	0x97
 8351 0b8c 02       		.uleb128 0x2
 8352 0b8d 91       		.byte	0x91
 8353 0b8e 65       		.sleb128 -27
 8354 0b8f 1F       		.uleb128 0x1f
 8355 0b90 86020000 		.4byte	.LASF191
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 194


 8356 0b94 01       		.byte	0x1
 8357 0b95 1402     		.2byte	0x214
 8358 0b97 160C0000 		.4byte	0xc16
 8359 0b9b 02       		.uleb128 0x2
 8360 0b9c 91       		.byte	0x91
 8361 0b9d 68       		.sleb128 -24
 8362 0b9e 1F       		.uleb128 0x1f
 8363 0b9f 3D050000 		.4byte	.LASF43
 8364 0ba3 01       		.byte	0x1
 8365 0ba4 1A02     		.2byte	0x21a
 8366 0ba6 9C060000 		.4byte	0x69c
 8367 0baa 03       		.uleb128 0x3
 8368 0bab 91       		.byte	0x91
 8369 0bac B87F     		.sleb128 -72
 8370 0bae 1F       		.uleb128 0x1f
 8371 0baf 5F0A0000 		.4byte	.LASF177
 8372 0bb3 01       		.byte	0x1
 8373 0bb4 1D02     		.2byte	0x21d
 8374 0bb6 2C0C0000 		.4byte	0xc2c
 8375 0bba 03       		.uleb128 0x3
 8376 0bbb 91       		.byte	0x91
 8377 0bbc B47E     		.sleb128 -204
 8378 0bbe 1F       		.uleb128 0x1f
 8379 0bbf CF000000 		.4byte	.LASF192
 8380 0bc3 01       		.byte	0x1
 8381 0bc4 2502     		.2byte	0x225
 8382 0bc6 97000000 		.4byte	0x97
 8383 0bca 02       		.uleb128 0x2
 8384 0bcb 91       		.byte	0x91
 8385 0bcc 67       		.sleb128 -25
 8386 0bcd 1F       		.uleb128 0x1f
 8387 0bce B80F0000 		.4byte	.LASF193
 8388 0bd2 01       		.byte	0x1
 8389 0bd3 2702     		.2byte	0x227
 8390 0bd5 E1060000 		.4byte	0x6e1
 8391 0bd9 03       		.uleb128 0x3
 8392 0bda 91       		.byte	0x91
 8393 0bdb A47E     		.sleb128 -220
 8394 0bdd 1F       		.uleb128 0x1f
 8395 0bde 510F0000 		.4byte	.LASF176
 8396 0be2 01       		.byte	0x1
 8397 0be3 2902     		.2byte	0x229
 8398 0be5 410C0000 		.4byte	0xc41
 8399 0be9 03       		.uleb128 0x3
 8400 0bea 91       		.byte	0x91
 8401 0beb B47C     		.sleb128 -460
 8402 0bed 1F       		.uleb128 0x1f
 8403 0bee C80E0000 		.4byte	.LASF194
 8404 0bf2 01       		.byte	0x1
 8405 0bf3 3C02     		.2byte	0x23c
 8406 0bf5 97000000 		.4byte	0x97
 8407 0bf9 02       		.uleb128 0x2
 8408 0bfa 91       		.byte	0x91
 8409 0bfb 66       		.sleb128 -26
 8410 0bfc 1A       		.uleb128 0x1a
 8411 0bfd EA040000 		.4byte	.LBB24
 8412 0c01 7E010000 		.4byte	.LBE24-.LBB24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 195


 8413 0c05 23       		.uleb128 0x23
 8414 0c06 736F6400 		.ascii	"sod\000"
 8415 0c0a 01       		.byte	0x1
 8416 0c0b 4702     		.2byte	0x247
 8417 0c0d 97000000 		.4byte	0x97
 8418 0c11 02       		.uleb128 0x2
 8419 0c12 91       		.byte	0x91
 8420 0c13 64       		.sleb128 -28
 8421 0c14 00       		.byte	0
 8422 0c15 00       		.byte	0
 8423 0c16 07       		.uleb128 0x7
 8424 0c17 04       		.byte	0x4
 8425 0c18 E3050000 		.4byte	0x5e3
 8426 0c1c 11       		.uleb128 0x11
 8427 0c1d F80A0000 		.4byte	0xaf8
 8428 0c21 2C0C0000 		.4byte	0xc2c
 8429 0c25 12       		.uleb128 0x12
 8430 0c26 00010000 		.4byte	0x100
 8431 0c2a 02       		.byte	0x2
 8432 0c2b 00       		.byte	0
 8433 0c2c 08       		.uleb128 0x8
 8434 0c2d 1C0C0000 		.4byte	0xc1c
 8435 0c31 11       		.uleb128 0x11
 8436 0c32 ED0A0000 		.4byte	0xaed
 8437 0c36 410C0000 		.4byte	0xc41
 8438 0c3a 12       		.uleb128 0x12
 8439 0c3b 00010000 		.4byte	0x100
 8440 0c3f 0E       		.byte	0xe
 8441 0c40 00       		.byte	0
 8442 0c41 08       		.uleb128 0x8
 8443 0c42 310C0000 		.4byte	0xc31
 8444 0c46 1E       		.uleb128 0x1e
 8445 0c47 12030000 		.4byte	.LASF195
 8446 0c4b 01       		.byte	0x1
 8447 0c4c 6802     		.2byte	0x268
 8448 0c4e 00000000 		.4byte	.LFB70
 8449 0c52 34010000 		.4byte	.LFE70-.LFB70
 8450 0c56 01       		.uleb128 0x1
 8451 0c57 9C       		.byte	0x9c
 8452 0c58 A40C0000 		.4byte	0xca4
 8453 0c5c 22       		.uleb128 0x22
 8454 0c5d DE050000 		.4byte	.LASF189
 8455 0c61 01       		.byte	0x1
 8456 0c62 6802     		.2byte	0x268
 8457 0c64 A3000000 		.4byte	0xa3
 8458 0c68 02       		.uleb128 0x2
 8459 0c69 91       		.byte	0x91
 8460 0c6a 6E       		.sleb128 -18
 8461 0c6b 22       		.uleb128 0x22
 8462 0c6c 510F0000 		.4byte	.LASF176
 8463 0c70 01       		.byte	0x1
 8464 0c71 6802     		.2byte	0x268
 8465 0c73 E70A0000 		.4byte	0xae7
 8466 0c77 02       		.uleb128 0x2
 8467 0c78 91       		.byte	0x91
 8468 0c79 68       		.sleb128 -24
 8469 0c7a 23       		.uleb128 0x23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 196


 8470 0c7b 736F6400 		.ascii	"sod\000"
 8471 0c7f 01       		.byte	0x1
 8472 0c80 6902     		.2byte	0x269
 8473 0c82 97000000 		.4byte	0x97
 8474 0c86 02       		.uleb128 0x2
 8475 0c87 91       		.byte	0x91
 8476 0c88 75       		.sleb128 -11
 8477 0c89 23       		.uleb128 0x23
 8478 0c8a 6900     		.ascii	"i\000"
 8479 0c8c 01       		.byte	0x1
 8480 0c8d 6B02     		.2byte	0x26b
 8481 0c8f 97000000 		.4byte	0x97
 8482 0c93 02       		.uleb128 0x2
 8483 0c94 91       		.byte	0x91
 8484 0c95 77       		.sleb128 -9
 8485 0c96 23       		.uleb128 0x23
 8486 0c97 6A00     		.ascii	"j\000"
 8487 0c99 01       		.byte	0x1
 8488 0c9a 6B02     		.2byte	0x26b
 8489 0c9c 97000000 		.4byte	0x97
 8490 0ca0 02       		.uleb128 0x2
 8491 0ca1 91       		.byte	0x91
 8492 0ca2 76       		.sleb128 -10
 8493 0ca3 00       		.byte	0
 8494 0ca4 26       		.uleb128 0x26
 8495 0ca5 E4070000 		.4byte	.LASF196
 8496 0ca9 01       		.byte	0x1
 8497 0caa 8F02     		.2byte	0x28f
 8498 0cac 00000000 		.4byte	.LFB71
 8499 0cb0 14000000 		.4byte	.LFE71-.LFB71
 8500 0cb4 01       		.uleb128 0x1
 8501 0cb5 9C       		.byte	0x9c
 8502 0cb6 CA0C0000 		.4byte	0xcca
 8503 0cba 22       		.uleb128 0x22
 8504 0cbb DE050000 		.4byte	.LASF189
 8505 0cbf 01       		.byte	0x1
 8506 0cc0 8F02     		.2byte	0x28f
 8507 0cc2 A3000000 		.4byte	0xa3
 8508 0cc6 02       		.uleb128 0x2
 8509 0cc7 91       		.byte	0x91
 8510 0cc8 76       		.sleb128 -10
 8511 0cc9 00       		.byte	0
 8512 0cca 27       		.uleb128 0x27
 8513 0ccb 66020000 		.4byte	.LASF226
 8514 0ccf 01       		.byte	0x1
 8515 0cd0 9702     		.2byte	0x297
 8516 0cd2 00000000 		.4byte	.LFB72
 8517 0cd6 0C000000 		.4byte	.LFE72-.LFB72
 8518 0cda 01       		.uleb128 0x1
 8519 0cdb 9C       		.byte	0x9c
 8520 0cdc 1E       		.uleb128 0x1e
 8521 0cdd BA000000 		.4byte	.LASF197
 8522 0ce1 01       		.byte	0x1
 8523 0ce2 9F02     		.2byte	0x29f
 8524 0ce4 00000000 		.4byte	.LFB73
 8525 0ce8 FC060000 		.4byte	.LFE73-.LFB73
 8526 0cec 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 197


 8527 0ced 9C       		.byte	0x9c
 8528 0cee 390D0000 		.4byte	0xd39
 8529 0cf2 22       		.uleb128 0x22
 8530 0cf3 D20B0000 		.4byte	.LASF198
 8531 0cf7 01       		.byte	0x1
 8532 0cf8 9F02     		.2byte	0x29f
 8533 0cfa 07010000 		.4byte	0x107
 8534 0cfe 03       		.uleb128 0x3
 8535 0cff 91       		.byte	0x91
 8536 0d00 F47E     		.sleb128 -140
 8537 0d02 23       		.uleb128 0x23
 8538 0d03 6900     		.ascii	"i\000"
 8539 0d05 01       		.byte	0x1
 8540 0d06 A002     		.2byte	0x2a0
 8541 0d08 73000000 		.4byte	0x73
 8542 0d0c 02       		.uleb128 0x2
 8543 0d0d 91       		.byte	0x91
 8544 0d0e 64       		.sleb128 -28
 8545 0d0f 1F       		.uleb128 0x1f
 8546 0d10 86020000 		.4byte	.LASF191
 8547 0d14 01       		.byte	0x1
 8548 0d15 A202     		.2byte	0x2a2
 8549 0d17 160C0000 		.4byte	0xc16
 8550 0d1b 02       		.uleb128 0x2
 8551 0d1c 91       		.byte	0x91
 8552 0d1d 60       		.sleb128 -32
 8553 0d1e 1A       		.uleb128 0x1a
 8554 0d1f 16000000 		.4byte	.LBB25
 8555 0d23 C0060000 		.4byte	.LBE25-.LBB25
 8556 0d27 23       		.uleb128 0x23
 8557 0d28 73747200 		.ascii	"str\000"
 8558 0d2c 01       		.byte	0x1
 8559 0d2d A502     		.2byte	0x2a5
 8560 0d2f 390D0000 		.4byte	0xd39
 8561 0d33 03       		.uleb128 0x3
 8562 0d34 91       		.byte	0x91
 8563 0d35 FC7E     		.sleb128 -132
 8564 0d37 00       		.byte	0
 8565 0d38 00       		.byte	0
 8566 0d39 11       		.uleb128 0x11
 8567 0d3a E1000000 		.4byte	0xe1
 8568 0d3e 490D0000 		.4byte	0xd49
 8569 0d42 12       		.uleb128 0x12
 8570 0d43 00010000 		.4byte	0x100
 8571 0d47 63       		.byte	0x63
 8572 0d48 00       		.byte	0
 8573 0d49 26       		.uleb128 0x26
 8574 0d4a 080D0000 		.4byte	.LASF199
 8575 0d4e 01       		.byte	0x1
 8576 0d4f 1703     		.2byte	0x317
 8577 0d51 00000000 		.4byte	.LFB74
 8578 0d55 12000000 		.4byte	.LFE74-.LFB74
 8579 0d59 01       		.uleb128 0x1
 8580 0d5a 9C       		.byte	0x9c
 8581 0d5b 6F0D0000 		.4byte	0xd6f
 8582 0d5f 22       		.uleb128 0x22
 8583 0d60 D20B0000 		.4byte	.LASF198
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 198


 8584 0d64 01       		.byte	0x1
 8585 0d65 1703     		.2byte	0x317
 8586 0d67 07010000 		.4byte	0x107
 8587 0d6b 02       		.uleb128 0x2
 8588 0d6c 91       		.byte	0x91
 8589 0d6d 74       		.sleb128 -12
 8590 0d6e 00       		.byte	0
 8591 0d6f 26       		.uleb128 0x26
 8592 0d70 EF0A0000 		.4byte	.LASF200
 8593 0d74 01       		.byte	0x1
 8594 0d75 1F03     		.2byte	0x31f
 8595 0d77 00000000 		.4byte	.LFB75
 8596 0d7b 12000000 		.4byte	.LFE75-.LFB75
 8597 0d7f 01       		.uleb128 0x1
 8598 0d80 9C       		.byte	0x9c
 8599 0d81 950D0000 		.4byte	0xd95
 8600 0d85 22       		.uleb128 0x22
 8601 0d86 D20B0000 		.4byte	.LASF198
 8602 0d8a 01       		.byte	0x1
 8603 0d8b 1F03     		.2byte	0x31f
 8604 0d8d 07010000 		.4byte	0x107
 8605 0d91 02       		.uleb128 0x2
 8606 0d92 91       		.byte	0x91
 8607 0d93 74       		.sleb128 -12
 8608 0d94 00       		.byte	0
 8609 0d95 26       		.uleb128 0x26
 8610 0d96 F20C0000 		.4byte	.LASF201
 8611 0d9a 01       		.byte	0x1
 8612 0d9b 2703     		.2byte	0x327
 8613 0d9d 00000000 		.4byte	.LFB76
 8614 0da1 12000000 		.4byte	.LFE76-.LFB76
 8615 0da5 01       		.uleb128 0x1
 8616 0da6 9C       		.byte	0x9c
 8617 0da7 BB0D0000 		.4byte	0xdbb
 8618 0dab 22       		.uleb128 0x22
 8619 0dac D20B0000 		.4byte	.LASF198
 8620 0db0 01       		.byte	0x1
 8621 0db1 2703     		.2byte	0x327
 8622 0db3 07010000 		.4byte	0x107
 8623 0db7 02       		.uleb128 0x2
 8624 0db8 91       		.byte	0x91
 8625 0db9 74       		.sleb128 -12
 8626 0dba 00       		.byte	0
 8627 0dbb 26       		.uleb128 0x26
 8628 0dbc 020A0000 		.4byte	.LASF202
 8629 0dc0 01       		.byte	0x1
 8630 0dc1 2F03     		.2byte	0x32f
 8631 0dc3 00000000 		.4byte	.LFB77
 8632 0dc7 12000000 		.4byte	.LFE77-.LFB77
 8633 0dcb 01       		.uleb128 0x1
 8634 0dcc 9C       		.byte	0x9c
 8635 0dcd E10D0000 		.4byte	0xde1
 8636 0dd1 22       		.uleb128 0x22
 8637 0dd2 D20B0000 		.4byte	.LASF198
 8638 0dd6 01       		.byte	0x1
 8639 0dd7 2F03     		.2byte	0x32f
 8640 0dd9 07010000 		.4byte	0x107
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 199


 8641 0ddd 02       		.uleb128 0x2
 8642 0dde 91       		.byte	0x91
 8643 0ddf 74       		.sleb128 -12
 8644 0de0 00       		.byte	0
 8645 0de1 26       		.uleb128 0x26
 8646 0de2 1D0D0000 		.4byte	.LASF203
 8647 0de6 01       		.byte	0x1
 8648 0de7 3603     		.2byte	0x336
 8649 0de9 00000000 		.4byte	.LFB78
 8650 0ded 12000000 		.4byte	.LFE78-.LFB78
 8651 0df1 01       		.uleb128 0x1
 8652 0df2 9C       		.byte	0x9c
 8653 0df3 070E0000 		.4byte	0xe07
 8654 0df7 22       		.uleb128 0x22
 8655 0df8 D20B0000 		.4byte	.LASF198
 8656 0dfc 01       		.byte	0x1
 8657 0dfd 3603     		.2byte	0x336
 8658 0dff 07010000 		.4byte	0x107
 8659 0e03 02       		.uleb128 0x2
 8660 0e04 91       		.byte	0x91
 8661 0e05 74       		.sleb128 -12
 8662 0e06 00       		.byte	0
 8663 0e07 26       		.uleb128 0x26
 8664 0e08 AD020000 		.4byte	.LASF204
 8665 0e0c 01       		.byte	0x1
 8666 0e0d 3E03     		.2byte	0x33e
 8667 0e0f 00000000 		.4byte	.LFB79
 8668 0e13 12000000 		.4byte	.LFE79-.LFB79
 8669 0e17 01       		.uleb128 0x1
 8670 0e18 9C       		.byte	0x9c
 8671 0e19 2D0E0000 		.4byte	0xe2d
 8672 0e1d 22       		.uleb128 0x22
 8673 0e1e D20B0000 		.4byte	.LASF198
 8674 0e22 01       		.byte	0x1
 8675 0e23 3E03     		.2byte	0x33e
 8676 0e25 07010000 		.4byte	0x107
 8677 0e29 02       		.uleb128 0x2
 8678 0e2a 91       		.byte	0x91
 8679 0e2b 74       		.sleb128 -12
 8680 0e2c 00       		.byte	0
 8681 0e2d 26       		.uleb128 0x26
 8682 0e2e A9100000 		.4byte	.LASF205
 8683 0e32 01       		.byte	0x1
 8684 0e33 4703     		.2byte	0x347
 8685 0e35 00000000 		.4byte	.LFB80
 8686 0e39 12000000 		.4byte	.LFE80-.LFB80
 8687 0e3d 01       		.uleb128 0x1
 8688 0e3e 9C       		.byte	0x9c
 8689 0e3f 530E0000 		.4byte	0xe53
 8690 0e43 22       		.uleb128 0x22
 8691 0e44 D20B0000 		.4byte	.LASF198
 8692 0e48 01       		.byte	0x1
 8693 0e49 4703     		.2byte	0x347
 8694 0e4b 07010000 		.4byte	0x107
 8695 0e4f 02       		.uleb128 0x2
 8696 0e50 91       		.byte	0x91
 8697 0e51 74       		.sleb128 -12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 200


 8698 0e52 00       		.byte	0
 8699 0e53 1E       		.uleb128 0x1e
 8700 0e54 A20C0000 		.4byte	.LASF206
 8701 0e58 01       		.byte	0x1
 8702 0e59 4F03     		.2byte	0x34f
 8703 0e5b 00000000 		.4byte	.LFB81
 8704 0e5f 84000000 		.4byte	.LFE81-.LFB81
 8705 0e63 01       		.uleb128 0x1
 8706 0e64 9C       		.byte	0x9c
 8707 0e65 A60E0000 		.4byte	0xea6
 8708 0e69 22       		.uleb128 0x22
 8709 0e6a FD040000 		.4byte	.LASF187
 8710 0e6e 01       		.byte	0x1
 8711 0e6f 4F03     		.2byte	0x34f
 8712 0e71 4A070000 		.4byte	0x74a
 8713 0e75 02       		.uleb128 0x2
 8714 0e76 91       		.byte	0x91
 8715 0e77 6C       		.sleb128 -20
 8716 0e78 22       		.uleb128 0x22
 8717 0e79 89070000 		.4byte	.LASF186
 8718 0e7d 01       		.byte	0x1
 8719 0e7e 4F03     		.2byte	0x34f
 8720 0e80 A3000000 		.4byte	0xa3
 8721 0e84 02       		.uleb128 0x2
 8722 0e85 91       		.byte	0x91
 8723 0e86 6A       		.sleb128 -22
 8724 0e87 22       		.uleb128 0x22
 8725 0e88 3B0D0000 		.4byte	.LASF207
 8726 0e8c 01       		.byte	0x1
 8727 0e8d 4F03     		.2byte	0x34f
 8728 0e8f 97000000 		.4byte	0x97
 8729 0e93 02       		.uleb128 0x2
 8730 0e94 91       		.byte	0x91
 8731 0e95 69       		.sleb128 -23
 8732 0e96 1F       		.uleb128 0x1f
 8733 0e97 DE050000 		.4byte	.LASF189
 8734 0e9b 01       		.byte	0x1
 8735 0e9c 5103     		.2byte	0x351
 8736 0e9e A3000000 		.4byte	0xa3
 8737 0ea2 02       		.uleb128 0x2
 8738 0ea3 91       		.byte	0x91
 8739 0ea4 76       		.sleb128 -10
 8740 0ea5 00       		.byte	0
 8741 0ea6 1E       		.uleb128 0x1e
 8742 0ea7 13050000 		.4byte	.LASF208
 8743 0eab 01       		.byte	0x1
 8744 0eac 6B03     		.2byte	0x36b
 8745 0eae 00000000 		.4byte	.LFB82
 8746 0eb2 88000000 		.4byte	.LFE82-.LFB82
 8747 0eb6 01       		.uleb128 0x1
 8748 0eb7 9C       		.byte	0x9c
 8749 0eb8 EA0E0000 		.4byte	0xeea
 8750 0ebc 22       		.uleb128 0x22
 8751 0ebd FD040000 		.4byte	.LASF187
 8752 0ec1 01       		.byte	0x1
 8753 0ec2 6B03     		.2byte	0x36b
 8754 0ec4 4A070000 		.4byte	0x74a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 201


 8755 0ec8 02       		.uleb128 0x2
 8756 0ec9 91       		.byte	0x91
 8757 0eca 6C       		.sleb128 -20
 8758 0ecb 22       		.uleb128 0x22
 8759 0ecc 89070000 		.4byte	.LASF186
 8760 0ed0 01       		.byte	0x1
 8761 0ed1 6B03     		.2byte	0x36b
 8762 0ed3 A3000000 		.4byte	0xa3
 8763 0ed7 02       		.uleb128 0x2
 8764 0ed8 91       		.byte	0x91
 8765 0ed9 6A       		.sleb128 -22
 8766 0eda 1F       		.uleb128 0x1f
 8767 0edb DE050000 		.4byte	.LASF189
 8768 0edf 01       		.byte	0x1
 8769 0ee0 6D03     		.2byte	0x36d
 8770 0ee2 A3000000 		.4byte	0xa3
 8771 0ee6 02       		.uleb128 0x2
 8772 0ee7 91       		.byte	0x91
 8773 0ee8 76       		.sleb128 -10
 8774 0ee9 00       		.byte	0
 8775 0eea 1E       		.uleb128 0x1e
 8776 0eeb 7D0A0000 		.4byte	.LASF209
 8777 0eef 01       		.byte	0x1
 8778 0ef0 8803     		.2byte	0x388
 8779 0ef2 00000000 		.4byte	.LFB83
 8780 0ef6 A0000000 		.4byte	.LFE83-.LFB83
 8781 0efa 01       		.uleb128 0x1
 8782 0efb 9C       		.byte	0x9c
 8783 0efc 3D0F0000 		.4byte	0xf3d
 8784 0f00 22       		.uleb128 0x22
 8785 0f01 FD040000 		.4byte	.LASF187
 8786 0f05 01       		.byte	0x1
 8787 0f06 8803     		.2byte	0x388
 8788 0f08 4A070000 		.4byte	0x74a
 8789 0f0c 02       		.uleb128 0x2
 8790 0f0d 91       		.byte	0x91
 8791 0f0e 74       		.sleb128 -12
 8792 0f0f 22       		.uleb128 0x22
 8793 0f10 89070000 		.4byte	.LASF186
 8794 0f14 01       		.byte	0x1
 8795 0f15 8803     		.2byte	0x388
 8796 0f17 A3000000 		.4byte	0xa3
 8797 0f1b 02       		.uleb128 0x2
 8798 0f1c 91       		.byte	0x91
 8799 0f1d 72       		.sleb128 -14
 8800 0f1e 28       		.uleb128 0x28
 8801 0f1f 696400   		.ascii	"id\000"
 8802 0f22 01       		.byte	0x1
 8803 0f23 8803     		.2byte	0x388
 8804 0f25 97000000 		.4byte	0x97
 8805 0f29 02       		.uleb128 0x2
 8806 0f2a 91       		.byte	0x91
 8807 0f2b 71       		.sleb128 -15
 8808 0f2c 23       		.uleb128 0x23
 8809 0f2d 6900     		.ascii	"i\000"
 8810 0f2f 01       		.byte	0x1
 8811 0f30 8A03     		.2byte	0x38a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 202


 8812 0f32 A3000000 		.4byte	0xa3
 8813 0f36 05       		.uleb128 0x5
 8814 0f37 03       		.byte	0x3
 8815 0f38 00000000 		.4byte	i.10070
 8816 0f3c 00       		.byte	0
 8817 0f3d 21       		.uleb128 0x21
 8818 0f3e CD0F0000 		.4byte	.LASF211
 8819 0f42 01       		.byte	0x1
 8820 0f43 A603     		.2byte	0x3a6
 8821 0f45 97000000 		.4byte	0x97
 8822 0f49 00000000 		.4byte	.LFB84
 8823 0f4d 3E000000 		.4byte	.LFE84-.LFB84
 8824 0f51 01       		.uleb128 0x1
 8825 0f52 9C       		.byte	0x9c
 8826 0f53 920F0000 		.4byte	0xf92
 8827 0f57 22       		.uleb128 0x22
 8828 0f58 DB090000 		.4byte	.LASF212
 8829 0f5c 01       		.byte	0x1
 8830 0f5d A603     		.2byte	0x3a6
 8831 0f5f 4A070000 		.4byte	0x74a
 8832 0f63 02       		.uleb128 0x2
 8833 0f64 91       		.byte	0x91
 8834 0f65 6C       		.sleb128 -20
 8835 0f66 22       		.uleb128 0x22
 8836 0f67 C4040000 		.4byte	.LASF213
 8837 0f6b 01       		.byte	0x1
 8838 0f6c A603     		.2byte	0x3a6
 8839 0f6e 97000000 		.4byte	0x97
 8840 0f72 02       		.uleb128 0x2
 8841 0f73 91       		.byte	0x91
 8842 0f74 6B       		.sleb128 -21
 8843 0f75 23       		.uleb128 0x23
 8844 0f76 6900     		.ascii	"i\000"
 8845 0f78 01       		.byte	0x1
 8846 0f79 A803     		.2byte	0x3a8
 8847 0f7b 97000000 		.4byte	0x97
 8848 0f7f 02       		.uleb128 0x2
 8849 0f80 91       		.byte	0x91
 8850 0f81 77       		.sleb128 -9
 8851 0f82 1F       		.uleb128 0x1f
 8852 0f83 820B0000 		.4byte	.LASF214
 8853 0f87 01       		.byte	0x1
 8854 0f88 A903     		.2byte	0x3a9
 8855 0f8a 97000000 		.4byte	0x97
 8856 0f8e 02       		.uleb128 0x2
 8857 0f8f 91       		.byte	0x91
 8858 0f90 76       		.sleb128 -10
 8859 0f91 00       		.byte	0
 8860 0f92 1E       		.uleb128 0x1e
 8861 0f93 5C0F0000 		.4byte	.LASF215
 8862 0f97 01       		.byte	0x1
 8863 0f98 B603     		.2byte	0x3b6
 8864 0f9a 00000000 		.4byte	.LFB85
 8865 0f9e 2E000000 		.4byte	.LFE85-.LFB85
 8866 0fa2 01       		.uleb128 0x1
 8867 0fa3 9C       		.byte	0x9c
 8868 0fa4 D60F0000 		.4byte	0xfd6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 203


 8869 0fa8 22       		.uleb128 0x22
 8870 0fa9 34040000 		.4byte	.LASF216
 8871 0fad 01       		.byte	0x1
 8872 0fae B603     		.2byte	0x3b6
 8873 0fb0 97000000 		.4byte	0x97
 8874 0fb4 02       		.uleb128 0x2
 8875 0fb5 91       		.byte	0x91
 8876 0fb6 6F       		.sleb128 -17
 8877 0fb7 1F       		.uleb128 0x1f
 8878 0fb8 89070000 		.4byte	.LASF186
 8879 0fbc 01       		.byte	0x1
 8880 0fbd B703     		.2byte	0x3b7
 8881 0fbf 73000000 		.4byte	0x73
 8882 0fc3 02       		.uleb128 0x2
 8883 0fc4 91       		.byte	0x91
 8884 0fc5 74       		.sleb128 -12
 8885 0fc6 1F       		.uleb128 0x1f
 8886 0fc7 FD040000 		.4byte	.LASF187
 8887 0fcb 01       		.byte	0x1
 8888 0fcc B803     		.2byte	0x3b8
 8889 0fce 32050000 		.4byte	0x532
 8890 0fd2 02       		.uleb128 0x2
 8891 0fd3 91       		.byte	0x91
 8892 0fd4 70       		.sleb128 -16
 8893 0fd5 00       		.byte	0
 8894 0fd6 29       		.uleb128 0x29
 8895 0fd7 6E030000 		.4byte	.LASF217
 8896 0fdb 01       		.byte	0x1
 8897 0fdc C503     		.2byte	0x3c5
 8898 0fde 97000000 		.4byte	0x97
 8899 0fe2 00000000 		.4byte	.LFB86
 8900 0fe6 90000000 		.4byte	.LFE86-.LFB86
 8901 0fea 01       		.uleb128 0x1
 8902 0feb 9C       		.byte	0x9c
 8903 0fec 3A100000 		.4byte	0x103a
 8904 0ff0 22       		.uleb128 0x22
 8905 0ff1 3A070000 		.4byte	.LASF218
 8906 0ff5 01       		.byte	0x1
 8907 0ff6 C503     		.2byte	0x3c5
 8908 0ff8 73000000 		.4byte	0x73
 8909 0ffc 02       		.uleb128 0x2
 8910 0ffd 91       		.byte	0x91
 8911 0ffe 64       		.sleb128 -28
 8912 0fff 23       		.uleb128 0x23
 8913 1000 6900     		.ascii	"i\000"
 8914 1002 01       		.byte	0x1
 8915 1003 C703     		.2byte	0x3c7
 8916 1005 73000000 		.4byte	0x73
 8917 1009 02       		.uleb128 0x2
 8918 100a 91       		.byte	0x91
 8919 100b 74       		.sleb128 -12
 8920 100c 1F       		.uleb128 0x1f
 8921 100d 81000000 		.4byte	.LASF219
 8922 1011 01       		.byte	0x1
 8923 1012 C803     		.2byte	0x3c8
 8924 1014 97000000 		.4byte	0x97
 8925 1018 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 204


 8926 1019 91       		.byte	0x91
 8927 101a 6B       		.sleb128 -21
 8928 101b 1F       		.uleb128 0x1f
 8929 101c 2F050000 		.4byte	.LASF220
 8930 1020 01       		.byte	0x1
 8931 1021 C903     		.2byte	0x3c9
 8932 1023 73000000 		.4byte	0x73
 8933 1027 02       		.uleb128 0x2
 8934 1028 91       		.byte	0x91
 8935 1029 6C       		.sleb128 -20
 8936 102a 1F       		.uleb128 0x1f
 8937 102b 7A040000 		.4byte	.LASF221
 8938 102f 01       		.byte	0x1
 8939 1030 CA03     		.2byte	0x3ca
 8940 1032 97000000 		.4byte	0x97
 8941 1036 02       		.uleb128 0x2
 8942 1037 91       		.byte	0x91
 8943 1038 73       		.sleb128 -13
 8944 1039 00       		.byte	0
 8945 103a 1E       		.uleb128 0x1e
 8946 103b 570C0000 		.4byte	.LASF222
 8947 103f 01       		.byte	0x1
 8948 1040 EF03     		.2byte	0x3ef
 8949 1042 00000000 		.4byte	.LFB87
 8950 1046 60000000 		.4byte	.LFE87-.LFB87
 8951 104a 01       		.uleb128 0x1
 8952 104b 9C       		.byte	0x9c
 8953 104c 5E100000 		.4byte	0x105e
 8954 1050 23       		.uleb128 0x23
 8955 1051 6900     		.ascii	"i\000"
 8956 1053 01       		.byte	0x1
 8957 1054 F103     		.2byte	0x3f1
 8958 1056 A3000000 		.4byte	0xa3
 8959 105a 02       		.uleb128 0x2
 8960 105b 91       		.byte	0x91
 8961 105c 76       		.sleb128 -10
 8962 105d 00       		.byte	0
 8963 105e 29       		.uleb128 0x29
 8964 105f C70B0000 		.4byte	.LASF223
 8965 1063 01       		.byte	0x1
 8966 1064 0404     		.2byte	0x404
 8967 1066 97000000 		.4byte	0x97
 8968 106a 00000000 		.4byte	.LFB88
 8969 106e 58000000 		.4byte	.LFE88-.LFB88
 8970 1072 01       		.uleb128 0x1
 8971 1073 9C       		.byte	0x9c
 8972 1074 86100000 		.4byte	0x1086
 8973 1078 23       		.uleb128 0x23
 8974 1079 6900     		.ascii	"i\000"
 8975 107b 01       		.byte	0x1
 8976 107c 0504     		.2byte	0x405
 8977 107e A3000000 		.4byte	0xa3
 8978 1082 02       		.uleb128 0x2
 8979 1083 91       		.byte	0x91
 8980 1084 76       		.sleb128 -10
 8981 1085 00       		.byte	0
 8982 1086 2A       		.uleb128 0x2a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 205


 8983 1087 35050000 		.4byte	.LASF300
 8984 108b 01       		.byte	0x1
 8985 108c 1704     		.2byte	0x417
 8986 108e 97000000 		.4byte	0x97
 8987 1092 00000000 		.4byte	.LFB89
 8988 1096 D0000000 		.4byte	.LFE89-.LFB89
 8989 109a 01       		.uleb128 0x1
 8990 109b 9C       		.byte	0x9c
 8991 109c 2B       		.uleb128 0x2b
 8992 109d C3070000 		.4byte	.LASF224
 8993 10a1 01       		.byte	0x1
 8994 10a2 3F04     		.2byte	0x43f
 8995 10a4 00000000 		.4byte	.LFB90
 8996 10a8 0C000000 		.4byte	.LFE90-.LFB90
 8997 10ac 01       		.uleb128 0x1
 8998 10ad 9C       		.byte	0x9c
 8999 10ae 2B       		.uleb128 0x2b
 9000 10af F3090000 		.4byte	.LASF225
 9001 10b3 01       		.byte	0x1
 9002 10b4 4604     		.2byte	0x446
 9003 10b6 00000000 		.4byte	.LFB91
 9004 10ba 0C000000 		.4byte	.LFE91-.LFB91
 9005 10be 01       		.uleb128 0x1
 9006 10bf 9C       		.byte	0x9c
 9007 10c0 27       		.uleb128 0x27
 9008 10c1 3B0B0000 		.4byte	.LASF227
 9009 10c5 01       		.byte	0x1
 9010 10c6 4D04     		.2byte	0x44d
 9011 10c8 00000000 		.4byte	.LFB92
 9012 10cc 0C000000 		.4byte	.LFE92-.LFB92
 9013 10d0 01       		.uleb128 0x1
 9014 10d1 9C       		.byte	0x9c
 9015 10d2 2B       		.uleb128 0x2b
 9016 10d3 DC040000 		.4byte	.LASF228
 9017 10d7 01       		.byte	0x1
 9018 10d8 5404     		.2byte	0x454
 9019 10da 00000000 		.4byte	.LFB93
 9020 10de 0C000000 		.4byte	.LFE93-.LFB93
 9021 10e2 01       		.uleb128 0x1
 9022 10e3 9C       		.byte	0x9c
 9023 10e4 27       		.uleb128 0x27
 9024 10e5 73050000 		.4byte	.LASF229
 9025 10e9 01       		.byte	0x1
 9026 10ea 5F04     		.2byte	0x45f
 9027 10ec 00000000 		.4byte	.LFB94
 9028 10f0 0C000000 		.4byte	.LFE94-.LFB94
 9029 10f4 01       		.uleb128 0x1
 9030 10f5 9C       		.byte	0x9c
 9031 10f6 27       		.uleb128 0x27
 9032 10f7 440C0000 		.4byte	.LASF230
 9033 10fb 01       		.byte	0x1
 9034 10fc 6404     		.2byte	0x464
 9035 10fe 00000000 		.4byte	.LFB95
 9036 1102 0C000000 		.4byte	.LFE95-.LFB95
 9037 1106 01       		.uleb128 0x1
 9038 1107 9C       		.byte	0x9c
 9039 1108 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 206


 9040 1109 81010000 		.4byte	.LASF231
 9041 110d 01       		.byte	0x1
 9042 110e 6804     		.2byte	0x468
 9043 1110 00000000 		.4byte	.LFB96
 9044 1114 0C000000 		.4byte	.LFE96-.LFB96
 9045 1118 01       		.uleb128 0x1
 9046 1119 9C       		.byte	0x9c
 9047 111a 27       		.uleb128 0x27
 9048 111b D0080000 		.4byte	.LASF232
 9049 111f 01       		.byte	0x1
 9050 1120 6C04     		.2byte	0x46c
 9051 1122 00000000 		.4byte	.LFB97
 9052 1126 0C000000 		.4byte	.LFE97-.LFB97
 9053 112a 01       		.uleb128 0x1
 9054 112b 9C       		.byte	0x9c
 9055 112c 27       		.uleb128 0x27
 9056 112d 470A0000 		.4byte	.LASF233
 9057 1131 01       		.byte	0x1
 9058 1132 7004     		.2byte	0x470
 9059 1134 00000000 		.4byte	.LFB98
 9060 1138 0C000000 		.4byte	.LFE98-.LFB98
 9061 113c 01       		.uleb128 0x1
 9062 113d 9C       		.byte	0x9c
 9063 113e 27       		.uleb128 0x27
 9064 113f D2100000 		.4byte	.LASF234
 9065 1143 01       		.byte	0x1
 9066 1144 7404     		.2byte	0x474
 9067 1146 00000000 		.4byte	.LFB99
 9068 114a 0C000000 		.4byte	.LFE99-.LFB99
 9069 114e 01       		.uleb128 0x1
 9070 114f 9C       		.byte	0x9c
 9071 1150 27       		.uleb128 0x27
 9072 1151 A60A0000 		.4byte	.LASF235
 9073 1155 01       		.byte	0x1
 9074 1156 7804     		.2byte	0x478
 9075 1158 00000000 		.4byte	.LFB100
 9076 115c 0C000000 		.4byte	.LFE100-.LFB100
 9077 1160 01       		.uleb128 0x1
 9078 1161 9C       		.byte	0x9c
 9079 1162 27       		.uleb128 0x27
 9080 1163 500D0000 		.4byte	.LASF236
 9081 1167 01       		.byte	0x1
 9082 1168 7C04     		.2byte	0x47c
 9083 116a 00000000 		.4byte	.LFB101
 9084 116e 0C000000 		.4byte	.LFE101-.LFB101
 9085 1172 01       		.uleb128 0x1
 9086 1173 9C       		.byte	0x9c
 9087 1174 27       		.uleb128 0x27
 9088 1175 47090000 		.4byte	.LASF237
 9089 1179 01       		.byte	0x1
 9090 117a 8104     		.2byte	0x481
 9091 117c 00000000 		.4byte	.LFB102
 9092 1180 0C000000 		.4byte	.LFE102-.LFB102
 9093 1184 01       		.uleb128 0x1
 9094 1185 9C       		.byte	0x9c
 9095 1186 27       		.uleb128 0x27
 9096 1187 890F0000 		.4byte	.LASF238
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 207


 9097 118b 01       		.byte	0x1
 9098 118c 8504     		.2byte	0x485
 9099 118e 00000000 		.4byte	.LFB103
 9100 1192 0C000000 		.4byte	.LFE103-.LFB103
 9101 1196 01       		.uleb128 0x1
 9102 1197 9C       		.byte	0x9c
 9103 1198 27       		.uleb128 0x27
 9104 1199 47070000 		.4byte	.LASF239
 9105 119d 01       		.byte	0x1
 9106 119e 8904     		.2byte	0x489
 9107 11a0 00000000 		.4byte	.LFB104
 9108 11a4 0C000000 		.4byte	.LFE104-.LFB104
 9109 11a8 01       		.uleb128 0x1
 9110 11a9 9C       		.byte	0x9c
 9111 11aa 2C       		.uleb128 0x2c
 9112 11ab 54100000 		.4byte	.LASF246
 9113 11af 01       		.byte	0x1
 9114 11b0 9004     		.2byte	0x490
 9115 11b2 00000000 		.4byte	.LFB105
 9116 11b6 C4000000 		.4byte	.LFE105-.LFB105
 9117 11ba 01       		.uleb128 0x1
 9118 11bb 9C       		.byte	0x9c
 9119 11bc 0C120000 		.4byte	0x120c
 9120 11c0 1F       		.uleb128 0x1f
 9121 11c1 FD040000 		.4byte	.LASF187
 9122 11c5 01       		.byte	0x1
 9123 11c6 9504     		.2byte	0x495
 9124 11c8 0C120000 		.4byte	0x120c
 9125 11cc 02       		.uleb128 0x2
 9126 11cd 91       		.byte	0x91
 9127 11ce 5C       		.sleb128 -36
 9128 11cf 1F       		.uleb128 0x1f
 9129 11d0 89070000 		.4byte	.LASF186
 9130 11d4 01       		.byte	0x1
 9131 11d5 9604     		.2byte	0x496
 9132 11d7 97000000 		.4byte	0x97
 9133 11db 02       		.uleb128 0x2
 9134 11dc 91       		.byte	0x91
 9135 11dd 76       		.sleb128 -10
 9136 11de 1F       		.uleb128 0x1f
 9137 11df 0E020000 		.4byte	.LASF240
 9138 11e3 01       		.byte	0x1
 9139 11e4 9804     		.2byte	0x498
 9140 11e6 AF000000 		.4byte	0xaf
 9141 11ea 02       		.uleb128 0x2
 9142 11eb 91       		.byte	0x91
 9143 11ec 70       		.sleb128 -16
 9144 11ed 1F       		.uleb128 0x1f
 9145 11ee 830F0000 		.4byte	.LASF241
 9146 11f2 01       		.byte	0x1
 9147 11f3 9804     		.2byte	0x498
 9148 11f5 AF000000 		.4byte	0xaf
 9149 11f9 02       		.uleb128 0x2
 9150 11fa 91       		.byte	0x91
 9151 11fb 6C       		.sleb128 -20
 9152 11fc 1F       		.uleb128 0x1f
 9153 11fd 8B030000 		.4byte	.LASF242
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 208


 9154 1201 01       		.byte	0x1
 9155 1202 9904     		.2byte	0x499
 9156 1204 97000000 		.4byte	0x97
 9157 1208 02       		.uleb128 0x2
 9158 1209 91       		.byte	0x91
 9159 120a 77       		.sleb128 -9
 9160 120b 00       		.byte	0
 9161 120c 11       		.uleb128 0x11
 9162 120d 97000000 		.4byte	0x97
 9163 1211 1C120000 		.4byte	0x121c
 9164 1215 12       		.uleb128 0x12
 9165 1216 00010000 		.4byte	0x100
 9166 121a 0F       		.byte	0xf
 9167 121b 00       		.byte	0
 9168 121c 2D       		.uleb128 0x2d
 9169 121d 1E060000 		.4byte	.LASF243
 9170 1221 01       		.byte	0x1
 9171 1222 BA04     		.2byte	0x4ba
 9172 1224 BB000000 		.4byte	0xbb
 9173 1228 00000000 		.4byte	.LFB106
 9174 122c A8000000 		.4byte	.LFE106-.LFB106
 9175 1230 01       		.uleb128 0x1
 9176 1231 9C       		.byte	0x9c
 9177 1232 91120000 		.4byte	0x1291
 9178 1236 1F       		.uleb128 0x1f
 9179 1237 FD040000 		.4byte	.LASF187
 9180 123b 01       		.byte	0x1
 9181 123c BC04     		.2byte	0x4bc
 9182 123e 0C120000 		.4byte	0x120c
 9183 1242 02       		.uleb128 0x2
 9184 1243 91       		.byte	0x91
 9185 1244 5C       		.sleb128 -36
 9186 1245 1F       		.uleb128 0x1f
 9187 1246 89070000 		.4byte	.LASF186
 9188 124a 01       		.byte	0x1
 9189 124b BD04     		.2byte	0x4bd
 9190 124d 97000000 		.4byte	0x97
 9191 1251 02       		.uleb128 0x2
 9192 1252 91       		.byte	0x91
 9193 1253 74       		.sleb128 -12
 9194 1254 1F       		.uleb128 0x1f
 9195 1255 69050000 		.4byte	.LASF244
 9196 1259 01       		.byte	0x1
 9197 125a BE04     		.2byte	0x4be
 9198 125c BB000000 		.4byte	0xbb
 9199 1260 02       		.uleb128 0x2
 9200 1261 91       		.byte	0x91
 9201 1262 76       		.sleb128 -10
 9202 1263 1F       		.uleb128 0x1f
 9203 1264 0E020000 		.4byte	.LASF240
 9204 1268 01       		.byte	0x1
 9205 1269 BF04     		.2byte	0x4bf
 9206 126b AF000000 		.4byte	0xaf
 9207 126f 02       		.uleb128 0x2
 9208 1270 91       		.byte	0x91
 9209 1271 70       		.sleb128 -16
 9210 1272 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 209


 9211 1273 830F0000 		.4byte	.LASF241
 9212 1277 01       		.byte	0x1
 9213 1278 BF04     		.2byte	0x4bf
 9214 127a AF000000 		.4byte	0xaf
 9215 127e 02       		.uleb128 0x2
 9216 127f 91       		.byte	0x91
 9217 1280 6C       		.sleb128 -20
 9218 1281 1F       		.uleb128 0x1f
 9219 1282 8B030000 		.4byte	.LASF242
 9220 1286 01       		.byte	0x1
 9221 1287 C004     		.2byte	0x4c0
 9222 1289 97000000 		.4byte	0x97
 9223 128d 02       		.uleb128 0x2
 9224 128e 91       		.byte	0x91
 9225 128f 75       		.sleb128 -11
 9226 1290 00       		.byte	0
 9227 1291 27       		.uleb128 0x27
 9228 1292 94000000 		.4byte	.LASF245
 9229 1296 01       		.byte	0x1
 9230 1297 E004     		.2byte	0x4e0
 9231 1299 00000000 		.4byte	.LFB107
 9232 129d 0C000000 		.4byte	.LFE107-.LFB107
 9233 12a1 01       		.uleb128 0x1
 9234 12a2 9C       		.byte	0x9c
 9235 12a3 2C       		.uleb128 0x2c
 9236 12a4 FC020000 		.4byte	.LASF247
 9237 12a8 01       		.byte	0x1
 9238 12a9 E404     		.2byte	0x4e4
 9239 12ab 00000000 		.4byte	.LFB108
 9240 12af 20000000 		.4byte	.LFE108-.LFB108
 9241 12b3 01       		.uleb128 0x1
 9242 12b4 9C       		.byte	0x9c
 9243 12b5 C9120000 		.4byte	0x12c9
 9244 12b9 1F       		.uleb128 0x1f
 9245 12ba FD040000 		.4byte	.LASF187
 9246 12be 01       		.byte	0x1
 9247 12bf E604     		.2byte	0x4e6
 9248 12c1 32050000 		.4byte	0x532
 9249 12c5 02       		.uleb128 0x2
 9250 12c6 91       		.byte	0x91
 9251 12c7 74       		.sleb128 -12
 9252 12c8 00       		.byte	0
 9253 12c9 27       		.uleb128 0x27
 9254 12ca B1050000 		.4byte	.LASF248
 9255 12ce 01       		.byte	0x1
 9256 12cf F204     		.2byte	0x4f2
 9257 12d1 00000000 		.4byte	.LFB109
 9258 12d5 0C000000 		.4byte	.LFE109-.LFB109
 9259 12d9 01       		.uleb128 0x1
 9260 12da 9C       		.byte	0x9c
 9261 12db 27       		.uleb128 0x27
 9262 12dc 610C0000 		.4byte	.LASF249
 9263 12e0 01       		.byte	0x1
 9264 12e1 F604     		.2byte	0x4f6
 9265 12e3 00000000 		.4byte	.LFB110
 9266 12e7 0C000000 		.4byte	.LFE110-.LFB110
 9267 12eb 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 210


 9268 12ec 9C       		.byte	0x9c
 9269 12ed 2C       		.uleb128 0x2c
 9270 12ee 97010000 		.4byte	.LASF250
 9271 12f2 01       		.byte	0x1
 9272 12f3 FA04     		.2byte	0x4fa
 9273 12f5 00000000 		.4byte	.LFB111
 9274 12f9 60000000 		.4byte	.LFE111-.LFB111
 9275 12fd 01       		.uleb128 0x1
 9276 12fe 9C       		.byte	0x9c
 9277 12ff 22130000 		.4byte	0x1322
 9278 1303 1F       		.uleb128 0x1f
 9279 1304 FD040000 		.4byte	.LASF187
 9280 1308 01       		.byte	0x1
 9281 1309 FC04     		.2byte	0x4fc
 9282 130b B3040000 		.4byte	0x4b3
 9283 130f 02       		.uleb128 0x2
 9284 1310 91       		.byte	0x91
 9285 1311 70       		.sleb128 -16
 9286 1312 1F       		.uleb128 0x1f
 9287 1313 A20E0000 		.4byte	.LASF251
 9288 1317 01       		.byte	0x1
 9289 1318 FD04     		.2byte	0x4fd
 9290 131a BB000000 		.4byte	0xbb
 9291 131e 02       		.uleb128 0x2
 9292 131f 91       		.byte	0x91
 9293 1320 6E       		.sleb128 -18
 9294 1321 00       		.byte	0
 9295 1322 27       		.uleb128 0x27
 9296 1323 22010000 		.4byte	.LASF252
 9297 1327 01       		.byte	0x1
 9298 1328 1005     		.2byte	0x510
 9299 132a 00000000 		.4byte	.LFB112
 9300 132e 0C000000 		.4byte	.LFE112-.LFB112
 9301 1332 01       		.uleb128 0x1
 9302 1333 9C       		.byte	0x9c
 9303 1334 27       		.uleb128 0x27
 9304 1335 340F0000 		.4byte	.LASF253
 9305 1339 01       		.byte	0x1
 9306 133a 1405     		.2byte	0x514
 9307 133c 00000000 		.4byte	.LFB113
 9308 1340 0C000000 		.4byte	.LFE113-.LFB113
 9309 1344 01       		.uleb128 0x1
 9310 1345 9C       		.byte	0x9c
 9311 1346 27       		.uleb128 0x27
 9312 1347 2E0E0000 		.4byte	.LASF254
 9313 134b 01       		.byte	0x1
 9314 134c 1705     		.2byte	0x517
 9315 134e 00000000 		.4byte	.LFB114
 9316 1352 0C000000 		.4byte	.LFE114-.LFB114
 9317 1356 01       		.uleb128 0x1
 9318 1357 9C       		.byte	0x9c
 9319 1358 27       		.uleb128 0x27
 9320 1359 8C020000 		.4byte	.LASF255
 9321 135d 01       		.byte	0x1
 9322 135e 1A05     		.2byte	0x51a
 9323 1360 00000000 		.4byte	.LFB115
 9324 1364 0C000000 		.4byte	.LFE115-.LFB115
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 211


 9325 1368 01       		.uleb128 0x1
 9326 1369 9C       		.byte	0x9c
 9327 136a 27       		.uleb128 0x27
 9328 136b C4020000 		.4byte	.LASF256
 9329 136f 01       		.byte	0x1
 9330 1370 1D05     		.2byte	0x51d
 9331 1372 00000000 		.4byte	.LFB116
 9332 1376 0C000000 		.4byte	.LFE116-.LFB116
 9333 137a 01       		.uleb128 0x1
 9334 137b 9C       		.byte	0x9c
 9335 137c 1E       		.uleb128 0x1e
 9336 137d 56020000 		.4byte	.LASF257
 9337 1381 01       		.byte	0x1
 9338 1382 2105     		.2byte	0x521
 9339 1384 00000000 		.4byte	.LFB117
 9340 1388 54010000 		.4byte	.LFE117-.LFB117
 9341 138c 01       		.uleb128 0x1
 9342 138d 9C       		.byte	0x9c
 9343 138e D1130000 		.4byte	0x13d1
 9344 1392 22       		.uleb128 0x22
 9345 1393 06060000 		.4byte	.LASF258
 9346 1397 01       		.byte	0x1
 9347 1398 2105     		.2byte	0x521
 9348 139a A3000000 		.4byte	0xa3
 9349 139e 04       		.uleb128 0x4
 9350 139f 91       		.byte	0x91
 9351 13a0 9EE37E   		.sleb128 -20066
 9352 13a3 23       		.uleb128 0x23
 9353 13a4 6900     		.ascii	"i\000"
 9354 13a6 01       		.byte	0x1
 9355 13a7 2305     		.2byte	0x523
 9356 13a9 97000000 		.4byte	0x97
 9357 13ad 02       		.uleb128 0x2
 9358 13ae 91       		.byte	0x91
 9359 13af 77       		.sleb128 -9
 9360 13b0 1F       		.uleb128 0x1f
 9361 13b1 77030000 		.4byte	.LASF259
 9362 13b5 01       		.byte	0x1
 9363 13b6 2405     		.2byte	0x524
 9364 13b8 0D0B0000 		.4byte	0xb0d
 9365 13bc 02       		.uleb128 0x2
 9366 13bd 91       		.byte	0x91
 9367 13be 44       		.sleb128 -60
 9368 13bf 1F       		.uleb128 0x1f
 9369 13c0 63070000 		.4byte	.LASF172
 9370 13c4 01       		.byte	0x1
 9371 13c5 2505     		.2byte	0x525
 9372 13c7 86090000 		.4byte	0x986
 9373 13cb 04       		.uleb128 0x4
 9374 13cc 91       		.byte	0x91
 9375 13cd A4E37E   		.sleb128 -20060
 9376 13d0 00       		.byte	0
 9377 13d1 26       		.uleb128 0x26
 9378 13d2 23030000 		.4byte	.LASF260
 9379 13d6 01       		.byte	0x1
 9380 13d7 3D05     		.2byte	0x53d
 9381 13d9 00000000 		.4byte	.LFB118
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 212


 9382 13dd 14000000 		.4byte	.LFE118-.LFB118
 9383 13e1 01       		.uleb128 0x1
 9384 13e2 9C       		.byte	0x9c
 9385 13e3 F7130000 		.4byte	0x13f7
 9386 13e7 22       		.uleb128 0x22
 9387 13e8 06060000 		.4byte	.LASF258
 9388 13ec 01       		.byte	0x1
 9389 13ed 3D05     		.2byte	0x53d
 9390 13ef A3000000 		.4byte	0xa3
 9391 13f3 02       		.uleb128 0x2
 9392 13f4 91       		.byte	0x91
 9393 13f5 76       		.sleb128 -10
 9394 13f6 00       		.byte	0
 9395 13f7 2C       		.uleb128 0x2c
 9396 13f8 1D090000 		.4byte	.LASF261
 9397 13fc 01       		.byte	0x1
 9398 13fd 4605     		.2byte	0x546
 9399 13ff 00000000 		.4byte	.LFB119
 9400 1403 50010000 		.4byte	.LFE119-.LFB119
 9401 1407 01       		.uleb128 0x1
 9402 1408 9C       		.byte	0x9c
 9403 1409 1B140000 		.4byte	0x141b
 9404 140d 23       		.uleb128 0x23
 9405 140e 6900     		.ascii	"i\000"
 9406 1410 01       		.byte	0x1
 9407 1411 4805     		.2byte	0x548
 9408 1413 97000000 		.4byte	0x97
 9409 1417 02       		.uleb128 0x2
 9410 1418 91       		.byte	0x91
 9411 1419 6F       		.sleb128 -17
 9412 141a 00       		.byte	0
 9413 141b 2C       		.uleb128 0x2c
 9414 141c A5000000 		.4byte	.LASF262
 9415 1420 01       		.byte	0x1
 9416 1421 6D05     		.2byte	0x56d
 9417 1423 00000000 		.4byte	.LFB120
 9418 1427 9C010000 		.4byte	.LFE120-.LFB120
 9419 142b 01       		.uleb128 0x1
 9420 142c 9C       		.byte	0x9c
 9421 142d 8C140000 		.4byte	0x148c
 9422 1431 1F       		.uleb128 0x1f
 9423 1432 69050000 		.4byte	.LASF244
 9424 1436 01       		.byte	0x1
 9425 1437 6F05     		.2byte	0x56f
 9426 1439 BB000000 		.4byte	0xbb
 9427 143d 02       		.uleb128 0x2
 9428 143e 91       		.byte	0x91
 9429 143f 5C       		.sleb128 -36
 9430 1440 1F       		.uleb128 0x1f
 9431 1441 67040000 		.4byte	.LASF263
 9432 1445 01       		.byte	0x1
 9433 1446 7005     		.2byte	0x570
 9434 1448 C7000000 		.4byte	0xc7
 9435 144c 02       		.uleb128 0x2
 9436 144d 91       		.byte	0x91
 9437 144e 64       		.sleb128 -28
 9438 144f 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 213


 9439 1450 AF090000 		.4byte	.LASF264
 9440 1454 01       		.byte	0x1
 9441 1455 7105     		.2byte	0x571
 9442 1457 C7000000 		.4byte	0xc7
 9443 145b 02       		.uleb128 0x2
 9444 145c 91       		.byte	0x91
 9445 145d 54       		.sleb128 -44
 9446 145e 1F       		.uleb128 0x1f
 9447 145f ED020000 		.4byte	.LASF265
 9448 1463 01       		.byte	0x1
 9449 1464 7105     		.2byte	0x571
 9450 1466 C7000000 		.4byte	0xc7
 9451 146a 02       		.uleb128 0x2
 9452 146b 91       		.byte	0x91
 9453 146c 58       		.sleb128 -40
 9454 146d 1F       		.uleb128 0x1f
 9455 146e 59040000 		.4byte	.LASF266
 9456 1472 01       		.byte	0x1
 9457 1473 7205     		.2byte	0x572
 9458 1475 C7000000 		.4byte	0xc7
 9459 1479 02       		.uleb128 0x2
 9460 147a 91       		.byte	0x91
 9461 147b 60       		.sleb128 -32
 9462 147c 1F       		.uleb128 0x1f
 9463 147d 3F0A0000 		.4byte	.LASF267
 9464 1481 01       		.byte	0x1
 9465 1482 7305     		.2byte	0x573
 9466 1484 BB000000 		.4byte	0xbb
 9467 1488 02       		.uleb128 0x2
 9468 1489 91       		.byte	0x91
 9469 148a 5E       		.sleb128 -34
 9470 148b 00       		.byte	0
 9471 148c 2E       		.uleb128 0x2e
 9472 148d B70A0000 		.4byte	.LASF268
 9473 1491 01       		.byte	0x1
 9474 1492 AF05     		.2byte	0x5af
 9475 1494 97000000 		.4byte	0x97
 9476 1498 00000000 		.4byte	.LFB121
 9477 149c 0E000000 		.4byte	.LFE121-.LFB121
 9478 14a0 01       		.uleb128 0x1
 9479 14a1 9C       		.byte	0x9c
 9480 14a2 26       		.uleb128 0x26
 9481 14a3 C4060000 		.4byte	.LASF269
 9482 14a7 01       		.byte	0x1
 9483 14a8 B905     		.2byte	0x5b9
 9484 14aa 00000000 		.4byte	.LFB122
 9485 14ae 12000000 		.4byte	.LFE122-.LFB122
 9486 14b2 01       		.uleb128 0x1
 9487 14b3 9C       		.byte	0x9c
 9488 14b4 C8140000 		.4byte	0x14c8
 9489 14b8 22       		.uleb128 0x22
 9490 14b9 A1050000 		.4byte	.LASF270
 9491 14bd 01       		.byte	0x1
 9492 14be B905     		.2byte	0x5b9
 9493 14c0 73000000 		.4byte	0x73
 9494 14c4 02       		.uleb128 0x2
 9495 14c5 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 214


 9496 14c6 74       		.sleb128 -12
 9497 14c7 00       		.byte	0
 9498 14c8 26       		.uleb128 0x26
 9499 14c9 A50B0000 		.4byte	.LASF271
 9500 14cd 01       		.byte	0x1
 9501 14ce 0606     		.2byte	0x606
 9502 14d0 00000000 		.4byte	.LFB123
 9503 14d4 1A000000 		.4byte	.LFE123-.LFB123
 9504 14d8 01       		.uleb128 0x1
 9505 14d9 9C       		.byte	0x9c
 9506 14da FD140000 		.4byte	0x14fd
 9507 14de 22       		.uleb128 0x22
 9508 14df A1050000 		.4byte	.LASF270
 9509 14e3 01       		.byte	0x1
 9510 14e4 0606     		.2byte	0x606
 9511 14e6 97000000 		.4byte	0x97
 9512 14ea 02       		.uleb128 0x2
 9513 14eb 91       		.byte	0x91
 9514 14ec 77       		.sleb128 -9
 9515 14ed 22       		.uleb128 0x22
 9516 14ee 6F070000 		.4byte	.LASF137
 9517 14f2 01       		.byte	0x1
 9518 14f3 0606     		.2byte	0x606
 9519 14f5 97000000 		.4byte	0x97
 9520 14f9 02       		.uleb128 0x2
 9521 14fa 91       		.byte	0x91
 9522 14fb 76       		.sleb128 -10
 9523 14fc 00       		.byte	0
 9524 14fd 2F       		.uleb128 0x2f
 9525 14fe 59000000 		.4byte	.LASF272
 9526 1502 01       		.byte	0x1
 9527 1503 0F06     		.2byte	0x60f
 9528 1505 00000000 		.4byte	.LFB124
 9529 1509 30000000 		.4byte	.LFE124-.LFB124
 9530 150d 01       		.uleb128 0x1
 9531 150e 9C       		.byte	0x9c
 9532 150f 27       		.uleb128 0x27
 9533 1510 1D050000 		.4byte	.LASF273
 9534 1514 01       		.byte	0x1
 9535 1515 1D06     		.2byte	0x61d
 9536 1517 00000000 		.4byte	.LFB125
 9537 151b 0C000000 		.4byte	.LFE125-.LFB125
 9538 151f 01       		.uleb128 0x1
 9539 1520 9C       		.byte	0x9c
 9540 1521 30       		.uleb128 0x30
 9541 1522 82090000 		.4byte	.LASF274
 9542 1526 08       		.byte	0x8
 9543 1527 1207     		.2byte	0x712
 9544 1529 2D150000 		.4byte	0x152d
 9545 152d 06       		.uleb128 0x6
 9546 152e 81000000 		.4byte	0x81
 9547 1532 11       		.uleb128 0x11
 9548 1533 76030000 		.4byte	0x376
 9549 1537 42150000 		.4byte	0x1542
 9550 153b 12       		.uleb128 0x12
 9551 153c 00010000 		.4byte	0x100
 9552 1540 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 215


 9553 1541 00       		.byte	0
 9554 1542 30       		.uleb128 0x30
 9555 1543 01040000 		.4byte	.LASF275
 9556 1547 07       		.byte	0x7
 9557 1548 A801     		.2byte	0x1a8
 9558 154a 32150000 		.4byte	0x1532
 9559 154e 30       		.uleb128 0x30
 9560 154f F20F0000 		.4byte	.LASF276
 9561 1553 07       		.byte	0x7
 9562 1554 3A02     		.2byte	0x23a
 9563 1556 50070000 		.4byte	0x750
 9564 155a 30       		.uleb128 0x30
 9565 155b 200E0000 		.4byte	.LASF277
 9566 155f 07       		.byte	0x7
 9567 1560 3A02     		.2byte	0x23a
 9568 1562 50070000 		.4byte	0x750
 9569 1566 30       		.uleb128 0x30
 9570 1567 BA0D0000 		.4byte	.LASF278
 9571 156b 07       		.byte	0x7
 9572 156c AB01     		.2byte	0x1ab
 9573 156e B3030000 		.4byte	0x3b3
 9574 1572 30       		.uleb128 0x30
 9575 1573 74000000 		.4byte	.LASF279
 9576 1577 07       		.byte	0x7
 9577 1578 3302     		.2byte	0x233
 9578 157a CE030000 		.4byte	0x3ce
 9579 157e 30       		.uleb128 0x30
 9580 157f EC0F0000 		.4byte	.LASF280
 9581 1583 07       		.byte	0x7
 9582 1584 3902     		.2byte	0x239
 9583 1586 E3050000 		.4byte	0x5e3
 9584 158a 30       		.uleb128 0x30
 9585 158b D5090000 		.4byte	.LASF281
 9586 158f 07       		.byte	0x7
 9587 1590 3902     		.2byte	0x239
 9588 1592 E3050000 		.4byte	0x5e3
 9589 1596 30       		.uleb128 0x30
 9590 1597 F5080000 		.4byte	.LASF282
 9591 159b 07       		.byte	0x7
 9592 159c AE01     		.2byte	0x1ae
 9593 159e 5A060000 		.4byte	0x65a
 9594 15a2 30       		.uleb128 0x30
 9595 15a3 2F020000 		.4byte	.LASF283
 9596 15a7 07       		.byte	0x7
 9597 15a8 3B02     		.2byte	0x23b
 9598 15aa A3000000 		.4byte	0xa3
 9599 15ae 30       		.uleb128 0x30
 9600 15af C40D0000 		.4byte	.LASF284
 9601 15b3 07       		.byte	0x7
 9602 15b4 3C02     		.2byte	0x23c
 9603 15b6 A3000000 		.4byte	0xa3
 9604 15ba 30       		.uleb128 0x30
 9605 15bb 95030000 		.4byte	.LASF285
 9606 15bf 07       		.byte	0x7
 9607 15c0 3402     		.2byte	0x234
 9608 15c2 97000000 		.4byte	0x97
 9609 15c6 30       		.uleb128 0x30
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 216


 9610 15c7 B4060000 		.4byte	.LASF286
 9611 15cb 07       		.byte	0x7
 9612 15cc 3502     		.2byte	0x235
 9613 15ce 97000000 		.4byte	0x97
 9614 15d2 30       		.uleb128 0x30
 9615 15d3 E10C0000 		.4byte	.LASF287
 9616 15d7 07       		.byte	0x7
 9617 15d8 E601     		.2byte	0x1e6
 9618 15da 390D0000 		.4byte	0xd39
 9619 15de 30       		.uleb128 0x30
 9620 15df D4020000 		.4byte	.LASF288
 9621 15e3 07       		.byte	0x7
 9622 15e4 E701     		.2byte	0x1e7
 9623 15e6 390D0000 		.4byte	0xd39
 9624 15ea 30       		.uleb128 0x30
 9625 15eb C30F0000 		.4byte	.LASF289
 9626 15ef 07       		.byte	0x7
 9627 15f0 EA01     		.2byte	0x1ea
 9628 15f2 390D0000 		.4byte	0xd39
 9629 15f6 30       		.uleb128 0x30
 9630 15f7 30100000 		.4byte	.LASF290
 9631 15fb 07       		.byte	0x7
 9632 15fc 3702     		.2byte	0x237
 9633 15fe 97000000 		.4byte	0x97
 9634 1602 30       		.uleb128 0x30
 9635 1603 9E0B0000 		.4byte	.LASF291
 9636 1607 07       		.byte	0x7
 9637 1608 2F02     		.2byte	0x22f
 9638 160a 32050000 		.4byte	0x532
 9639 160e 30       		.uleb128 0x30
 9640 160f 1B020000 		.4byte	.LASF292
 9641 1613 07       		.byte	0x7
 9642 1614 4E02     		.2byte	0x24e
 9643 1616 BB000000 		.4byte	0xbb
 9644 161a 30       		.uleb128 0x30
 9645 161b 25020000 		.4byte	.LASF293
 9646 161f 07       		.byte	0x7
 9647 1620 4F02     		.2byte	0x24f
 9648 1622 BB000000 		.4byte	0xbb
 9649 1626 31       		.uleb128 0x31
 9650 1627 AC0E0000 		.4byte	.LASF294
 9651 162b 01       		.byte	0x1
 9652 162c 33       		.byte	0x33
 9653 162d 37160000 		.4byte	0x1637
 9654 1631 05       		.uleb128 0x5
 9655 1632 03       		.byte	0x3
 9656 1633 00000000 		.4byte	EEPROM_ADDR
 9657 1637 07       		.uleb128 0x7
 9658 1638 04       		.byte	0x4
 9659 1639 E8000000 		.4byte	0xe8
 9660 163d 00       		.byte	0
 9661              		.section	.debug_abbrev,"",%progbits
 9662              	.Ldebug_abbrev0:
 9663 0000 01       		.uleb128 0x1
 9664 0001 11       		.uleb128 0x11
 9665 0002 01       		.byte	0x1
 9666 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 217


 9667 0004 0E       		.uleb128 0xe
 9668 0005 13       		.uleb128 0x13
 9669 0006 0B       		.uleb128 0xb
 9670 0007 03       		.uleb128 0x3
 9671 0008 0E       		.uleb128 0xe
 9672 0009 1B       		.uleb128 0x1b
 9673 000a 0E       		.uleb128 0xe
 9674 000b 55       		.uleb128 0x55
 9675 000c 17       		.uleb128 0x17
 9676 000d 11       		.uleb128 0x11
 9677 000e 01       		.uleb128 0x1
 9678 000f 10       		.uleb128 0x10
 9679 0010 17       		.uleb128 0x17
 9680 0011 00       		.byte	0
 9681 0012 00       		.byte	0
 9682 0013 02       		.uleb128 0x2
 9683 0014 24       		.uleb128 0x24
 9684 0015 00       		.byte	0
 9685 0016 0B       		.uleb128 0xb
 9686 0017 0B       		.uleb128 0xb
 9687 0018 3E       		.uleb128 0x3e
 9688 0019 0B       		.uleb128 0xb
 9689 001a 03       		.uleb128 0x3
 9690 001b 0E       		.uleb128 0xe
 9691 001c 00       		.byte	0
 9692 001d 00       		.byte	0
 9693 001e 03       		.uleb128 0x3
 9694 001f 16       		.uleb128 0x16
 9695 0020 00       		.byte	0
 9696 0021 03       		.uleb128 0x3
 9697 0022 0E       		.uleb128 0xe
 9698 0023 3A       		.uleb128 0x3a
 9699 0024 0B       		.uleb128 0xb
 9700 0025 3B       		.uleb128 0x3b
 9701 0026 0B       		.uleb128 0xb
 9702 0027 49       		.uleb128 0x49
 9703 0028 13       		.uleb128 0x13
 9704 0029 00       		.byte	0
 9705 002a 00       		.byte	0
 9706 002b 04       		.uleb128 0x4
 9707 002c 24       		.uleb128 0x24
 9708 002d 00       		.byte	0
 9709 002e 0B       		.uleb128 0xb
 9710 002f 0B       		.uleb128 0xb
 9711 0030 3E       		.uleb128 0x3e
 9712 0031 0B       		.uleb128 0xb
 9713 0032 03       		.uleb128 0x3
 9714 0033 08       		.uleb128 0x8
 9715 0034 00       		.byte	0
 9716 0035 00       		.byte	0
 9717 0036 05       		.uleb128 0x5
 9718 0037 16       		.uleb128 0x16
 9719 0038 00       		.byte	0
 9720 0039 03       		.uleb128 0x3
 9721 003a 0E       		.uleb128 0xe
 9722 003b 3A       		.uleb128 0x3a
 9723 003c 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 218


 9724 003d 3B       		.uleb128 0x3b
 9725 003e 05       		.uleb128 0x5
 9726 003f 49       		.uleb128 0x49
 9727 0040 13       		.uleb128 0x13
 9728 0041 00       		.byte	0
 9729 0042 00       		.byte	0
 9730 0043 06       		.uleb128 0x6
 9731 0044 35       		.uleb128 0x35
 9732 0045 00       		.byte	0
 9733 0046 49       		.uleb128 0x49
 9734 0047 13       		.uleb128 0x13
 9735 0048 00       		.byte	0
 9736 0049 00       		.byte	0
 9737 004a 07       		.uleb128 0x7
 9738 004b 0F       		.uleb128 0xf
 9739 004c 00       		.byte	0
 9740 004d 0B       		.uleb128 0xb
 9741 004e 0B       		.uleb128 0xb
 9742 004f 49       		.uleb128 0x49
 9743 0050 13       		.uleb128 0x13
 9744 0051 00       		.byte	0
 9745 0052 00       		.byte	0
 9746 0053 08       		.uleb128 0x8
 9747 0054 26       		.uleb128 0x26
 9748 0055 00       		.byte	0
 9749 0056 49       		.uleb128 0x49
 9750 0057 13       		.uleb128 0x13
 9751 0058 00       		.byte	0
 9752 0059 00       		.byte	0
 9753 005a 09       		.uleb128 0x9
 9754 005b 04       		.uleb128 0x4
 9755 005c 01       		.byte	0x1
 9756 005d 03       		.uleb128 0x3
 9757 005e 0E       		.uleb128 0xe
 9758 005f 0B       		.uleb128 0xb
 9759 0060 0B       		.uleb128 0xb
 9760 0061 49       		.uleb128 0x49
 9761 0062 13       		.uleb128 0x13
 9762 0063 3A       		.uleb128 0x3a
 9763 0064 0B       		.uleb128 0xb
 9764 0065 3B       		.uleb128 0x3b
 9765 0066 0B       		.uleb128 0xb
 9766 0067 01       		.uleb128 0x1
 9767 0068 13       		.uleb128 0x13
 9768 0069 00       		.byte	0
 9769 006a 00       		.byte	0
 9770 006b 0A       		.uleb128 0xa
 9771 006c 28       		.uleb128 0x28
 9772 006d 00       		.byte	0
 9773 006e 03       		.uleb128 0x3
 9774 006f 0E       		.uleb128 0xe
 9775 0070 1C       		.uleb128 0x1c
 9776 0071 0B       		.uleb128 0xb
 9777 0072 00       		.byte	0
 9778 0073 00       		.byte	0
 9779 0074 0B       		.uleb128 0xb
 9780 0075 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 219


 9781 0076 01       		.byte	0x1
 9782 0077 03       		.uleb128 0x3
 9783 0078 0E       		.uleb128 0xe
 9784 0079 0B       		.uleb128 0xb
 9785 007a 0B       		.uleb128 0xb
 9786 007b 3A       		.uleb128 0x3a
 9787 007c 0B       		.uleb128 0xb
 9788 007d 3B       		.uleb128 0x3b
 9789 007e 0B       		.uleb128 0xb
 9790 007f 01       		.uleb128 0x1
 9791 0080 13       		.uleb128 0x13
 9792 0081 00       		.byte	0
 9793 0082 00       		.byte	0
 9794 0083 0C       		.uleb128 0xc
 9795 0084 0D       		.uleb128 0xd
 9796 0085 00       		.byte	0
 9797 0086 03       		.uleb128 0x3
 9798 0087 08       		.uleb128 0x8
 9799 0088 3A       		.uleb128 0x3a
 9800 0089 0B       		.uleb128 0xb
 9801 008a 3B       		.uleb128 0x3b
 9802 008b 0B       		.uleb128 0xb
 9803 008c 49       		.uleb128 0x49
 9804 008d 13       		.uleb128 0x13
 9805 008e 38       		.uleb128 0x38
 9806 008f 0B       		.uleb128 0xb
 9807 0090 00       		.byte	0
 9808 0091 00       		.byte	0
 9809 0092 0D       		.uleb128 0xd
 9810 0093 0D       		.uleb128 0xd
 9811 0094 00       		.byte	0
 9812 0095 03       		.uleb128 0x3
 9813 0096 0E       		.uleb128 0xe
 9814 0097 3A       		.uleb128 0x3a
 9815 0098 0B       		.uleb128 0xb
 9816 0099 3B       		.uleb128 0x3b
 9817 009a 0B       		.uleb128 0xb
 9818 009b 49       		.uleb128 0x49
 9819 009c 13       		.uleb128 0x13
 9820 009d 38       		.uleb128 0x38
 9821 009e 0B       		.uleb128 0xb
 9822 009f 00       		.byte	0
 9823 00a0 00       		.byte	0
 9824 00a1 0E       		.uleb128 0xe
 9825 00a2 13       		.uleb128 0x13
 9826 00a3 01       		.byte	0x1
 9827 00a4 03       		.uleb128 0x3
 9828 00a5 0E       		.uleb128 0xe
 9829 00a6 0B       		.uleb128 0xb
 9830 00a7 0B       		.uleb128 0xb
 9831 00a8 3A       		.uleb128 0x3a
 9832 00a9 0B       		.uleb128 0xb
 9833 00aa 3B       		.uleb128 0x3b
 9834 00ab 05       		.uleb128 0x5
 9835 00ac 01       		.uleb128 0x1
 9836 00ad 13       		.uleb128 0x13
 9837 00ae 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 220


 9838 00af 00       		.byte	0
 9839 00b0 0F       		.uleb128 0xf
 9840 00b1 0D       		.uleb128 0xd
 9841 00b2 00       		.byte	0
 9842 00b3 03       		.uleb128 0x3
 9843 00b4 0E       		.uleb128 0xe
 9844 00b5 3A       		.uleb128 0x3a
 9845 00b6 0B       		.uleb128 0xb
 9846 00b7 3B       		.uleb128 0x3b
 9847 00b8 05       		.uleb128 0x5
 9848 00b9 49       		.uleb128 0x49
 9849 00ba 13       		.uleb128 0x13
 9850 00bb 38       		.uleb128 0x38
 9851 00bc 0B       		.uleb128 0xb
 9852 00bd 00       		.byte	0
 9853 00be 00       		.byte	0
 9854 00bf 10       		.uleb128 0x10
 9855 00c0 0D       		.uleb128 0xd
 9856 00c1 00       		.byte	0
 9857 00c2 03       		.uleb128 0x3
 9858 00c3 08       		.uleb128 0x8
 9859 00c4 3A       		.uleb128 0x3a
 9860 00c5 0B       		.uleb128 0xb
 9861 00c6 3B       		.uleb128 0x3b
 9862 00c7 05       		.uleb128 0x5
 9863 00c8 49       		.uleb128 0x49
 9864 00c9 13       		.uleb128 0x13
 9865 00ca 38       		.uleb128 0x38
 9866 00cb 0B       		.uleb128 0xb
 9867 00cc 00       		.byte	0
 9868 00cd 00       		.byte	0
 9869 00ce 11       		.uleb128 0x11
 9870 00cf 01       		.uleb128 0x1
 9871 00d0 01       		.byte	0x1
 9872 00d1 49       		.uleb128 0x49
 9873 00d2 13       		.uleb128 0x13
 9874 00d3 01       		.uleb128 0x1
 9875 00d4 13       		.uleb128 0x13
 9876 00d5 00       		.byte	0
 9877 00d6 00       		.byte	0
 9878 00d7 12       		.uleb128 0x12
 9879 00d8 21       		.uleb128 0x21
 9880 00d9 00       		.byte	0
 9881 00da 49       		.uleb128 0x49
 9882 00db 13       		.uleb128 0x13
 9883 00dc 2F       		.uleb128 0x2f
 9884 00dd 0B       		.uleb128 0xb
 9885 00de 00       		.byte	0
 9886 00df 00       		.byte	0
 9887 00e0 13       		.uleb128 0x13
 9888 00e1 2E       		.uleb128 0x2e
 9889 00e2 01       		.byte	0x1
 9890 00e3 03       		.uleb128 0x3
 9891 00e4 0E       		.uleb128 0xe
 9892 00e5 3A       		.uleb128 0x3a
 9893 00e6 0B       		.uleb128 0xb
 9894 00e7 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 221


 9895 00e8 05       		.uleb128 0x5
 9896 00e9 27       		.uleb128 0x27
 9897 00ea 19       		.uleb128 0x19
 9898 00eb 49       		.uleb128 0x49
 9899 00ec 13       		.uleb128 0x13
 9900 00ed 20       		.uleb128 0x20
 9901 00ee 0B       		.uleb128 0xb
 9902 00ef 01       		.uleb128 0x1
 9903 00f0 13       		.uleb128 0x13
 9904 00f1 00       		.byte	0
 9905 00f2 00       		.byte	0
 9906 00f3 14       		.uleb128 0x14
 9907 00f4 05       		.uleb128 0x5
 9908 00f5 00       		.byte	0
 9909 00f6 03       		.uleb128 0x3
 9910 00f7 0E       		.uleb128 0xe
 9911 00f8 3A       		.uleb128 0x3a
 9912 00f9 0B       		.uleb128 0xb
 9913 00fa 3B       		.uleb128 0x3b
 9914 00fb 05       		.uleb128 0x5
 9915 00fc 49       		.uleb128 0x49
 9916 00fd 13       		.uleb128 0x13
 9917 00fe 00       		.byte	0
 9918 00ff 00       		.byte	0
 9919 0100 15       		.uleb128 0x15
 9920 0101 34       		.uleb128 0x34
 9921 0102 00       		.byte	0
 9922 0103 03       		.uleb128 0x3
 9923 0104 0E       		.uleb128 0xe
 9924 0105 3A       		.uleb128 0x3a
 9925 0106 0B       		.uleb128 0xb
 9926 0107 3B       		.uleb128 0x3b
 9927 0108 05       		.uleb128 0x5
 9928 0109 49       		.uleb128 0x49
 9929 010a 13       		.uleb128 0x13
 9930 010b 00       		.byte	0
 9931 010c 00       		.byte	0
 9932 010d 16       		.uleb128 0x16
 9933 010e 2E       		.uleb128 0x2e
 9934 010f 01       		.byte	0x1
 9935 0110 3F       		.uleb128 0x3f
 9936 0111 19       		.uleb128 0x19
 9937 0112 03       		.uleb128 0x3
 9938 0113 0E       		.uleb128 0xe
 9939 0114 3A       		.uleb128 0x3a
 9940 0115 0B       		.uleb128 0xb
 9941 0116 3B       		.uleb128 0x3b
 9942 0117 0B       		.uleb128 0xb
 9943 0118 27       		.uleb128 0x27
 9944 0119 19       		.uleb128 0x19
 9945 011a 11       		.uleb128 0x11
 9946 011b 01       		.uleb128 0x1
 9947 011c 12       		.uleb128 0x12
 9948 011d 06       		.uleb128 0x6
 9949 011e 40       		.uleb128 0x40
 9950 011f 18       		.uleb128 0x18
 9951 0120 9642     		.uleb128 0x2116
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 222


 9952 0122 19       		.uleb128 0x19
 9953 0123 01       		.uleb128 0x1
 9954 0124 13       		.uleb128 0x13
 9955 0125 00       		.byte	0
 9956 0126 00       		.byte	0
 9957 0127 17       		.uleb128 0x17
 9958 0128 34       		.uleb128 0x34
 9959 0129 00       		.byte	0
 9960 012a 03       		.uleb128 0x3
 9961 012b 0E       		.uleb128 0xe
 9962 012c 3A       		.uleb128 0x3a
 9963 012d 0B       		.uleb128 0xb
 9964 012e 3B       		.uleb128 0x3b
 9965 012f 0B       		.uleb128 0xb
 9966 0130 49       		.uleb128 0x49
 9967 0131 13       		.uleb128 0x13
 9968 0132 02       		.uleb128 0x2
 9969 0133 18       		.uleb128 0x18
 9970 0134 00       		.byte	0
 9971 0135 00       		.byte	0
 9972 0136 18       		.uleb128 0x18
 9973 0137 1D       		.uleb128 0x1d
 9974 0138 01       		.byte	0x1
 9975 0139 31       		.uleb128 0x31
 9976 013a 13       		.uleb128 0x13
 9977 013b 11       		.uleb128 0x11
 9978 013c 01       		.uleb128 0x1
 9979 013d 12       		.uleb128 0x12
 9980 013e 06       		.uleb128 0x6
 9981 013f 58       		.uleb128 0x58
 9982 0140 0B       		.uleb128 0xb
 9983 0141 59       		.uleb128 0x59
 9984 0142 0B       		.uleb128 0xb
 9985 0143 01       		.uleb128 0x1
 9986 0144 13       		.uleb128 0x13
 9987 0145 00       		.byte	0
 9988 0146 00       		.byte	0
 9989 0147 19       		.uleb128 0x19
 9990 0148 05       		.uleb128 0x5
 9991 0149 00       		.byte	0
 9992 014a 31       		.uleb128 0x31
 9993 014b 13       		.uleb128 0x13
 9994 014c 02       		.uleb128 0x2
 9995 014d 18       		.uleb128 0x18
 9996 014e 00       		.byte	0
 9997 014f 00       		.byte	0
 9998 0150 1A       		.uleb128 0x1a
 9999 0151 0B       		.uleb128 0xb
 10000 0152 01       		.byte	0x1
 10001 0153 11       		.uleb128 0x11
 10002 0154 01       		.uleb128 0x1
 10003 0155 12       		.uleb128 0x12
 10004 0156 06       		.uleb128 0x6
 10005 0157 00       		.byte	0
 10006 0158 00       		.byte	0
 10007 0159 1B       		.uleb128 0x1b
 10008 015a 34       		.uleb128 0x34
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 223


 10009 015b 00       		.byte	0
 10010 015c 31       		.uleb128 0x31
 10011 015d 13       		.uleb128 0x13
 10012 015e 02       		.uleb128 0x2
 10013 015f 18       		.uleb128 0x18
 10014 0160 00       		.byte	0
 10015 0161 00       		.byte	0
 10016 0162 1C       		.uleb128 0x1c
 10017 0163 1D       		.uleb128 0x1d
 10018 0164 01       		.byte	0x1
 10019 0165 31       		.uleb128 0x31
 10020 0166 13       		.uleb128 0x13
 10021 0167 11       		.uleb128 0x11
 10022 0168 01       		.uleb128 0x1
 10023 0169 12       		.uleb128 0x12
 10024 016a 06       		.uleb128 0x6
 10025 016b 58       		.uleb128 0x58
 10026 016c 0B       		.uleb128 0xb
 10027 016d 59       		.uleb128 0x59
 10028 016e 05       		.uleb128 0x5
 10029 016f 01       		.uleb128 0x1
 10030 0170 13       		.uleb128 0x13
 10031 0171 00       		.byte	0
 10032 0172 00       		.byte	0
 10033 0173 1D       		.uleb128 0x1d
 10034 0174 1D       		.uleb128 0x1d
 10035 0175 01       		.byte	0x1
 10036 0176 31       		.uleb128 0x31
 10037 0177 13       		.uleb128 0x13
 10038 0178 11       		.uleb128 0x11
 10039 0179 01       		.uleb128 0x1
 10040 017a 12       		.uleb128 0x12
 10041 017b 06       		.uleb128 0x6
 10042 017c 58       		.uleb128 0x58
 10043 017d 0B       		.uleb128 0xb
 10044 017e 59       		.uleb128 0x59
 10045 017f 05       		.uleb128 0x5
 10046 0180 00       		.byte	0
 10047 0181 00       		.byte	0
 10048 0182 1E       		.uleb128 0x1e
 10049 0183 2E       		.uleb128 0x2e
 10050 0184 01       		.byte	0x1
 10051 0185 3F       		.uleb128 0x3f
 10052 0186 19       		.uleb128 0x19
 10053 0187 03       		.uleb128 0x3
 10054 0188 0E       		.uleb128 0xe
 10055 0189 3A       		.uleb128 0x3a
 10056 018a 0B       		.uleb128 0xb
 10057 018b 3B       		.uleb128 0x3b
 10058 018c 05       		.uleb128 0x5
 10059 018d 27       		.uleb128 0x27
 10060 018e 19       		.uleb128 0x19
 10061 018f 11       		.uleb128 0x11
 10062 0190 01       		.uleb128 0x1
 10063 0191 12       		.uleb128 0x12
 10064 0192 06       		.uleb128 0x6
 10065 0193 40       		.uleb128 0x40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 224


 10066 0194 18       		.uleb128 0x18
 10067 0195 9642     		.uleb128 0x2116
 10068 0197 19       		.uleb128 0x19
 10069 0198 01       		.uleb128 0x1
 10070 0199 13       		.uleb128 0x13
 10071 019a 00       		.byte	0
 10072 019b 00       		.byte	0
 10073 019c 1F       		.uleb128 0x1f
 10074 019d 34       		.uleb128 0x34
 10075 019e 00       		.byte	0
 10076 019f 03       		.uleb128 0x3
 10077 01a0 0E       		.uleb128 0xe
 10078 01a1 3A       		.uleb128 0x3a
 10079 01a2 0B       		.uleb128 0xb
 10080 01a3 3B       		.uleb128 0x3b
 10081 01a4 05       		.uleb128 0x5
 10082 01a5 49       		.uleb128 0x49
 10083 01a6 13       		.uleb128 0x13
 10084 01a7 02       		.uleb128 0x2
 10085 01a8 18       		.uleb128 0x18
 10086 01a9 00       		.byte	0
 10087 01aa 00       		.byte	0
 10088 01ab 20       		.uleb128 0x20
 10089 01ac 21       		.uleb128 0x21
 10090 01ad 00       		.byte	0
 10091 01ae 49       		.uleb128 0x49
 10092 01af 13       		.uleb128 0x13
 10093 01b0 2F       		.uleb128 0x2f
 10094 01b1 05       		.uleb128 0x5
 10095 01b2 00       		.byte	0
 10096 01b3 00       		.byte	0
 10097 01b4 21       		.uleb128 0x21
 10098 01b5 2E       		.uleb128 0x2e
 10099 01b6 01       		.byte	0x1
 10100 01b7 3F       		.uleb128 0x3f
 10101 01b8 19       		.uleb128 0x19
 10102 01b9 03       		.uleb128 0x3
 10103 01ba 0E       		.uleb128 0xe
 10104 01bb 3A       		.uleb128 0x3a
 10105 01bc 0B       		.uleb128 0xb
 10106 01bd 3B       		.uleb128 0x3b
 10107 01be 05       		.uleb128 0x5
 10108 01bf 27       		.uleb128 0x27
 10109 01c0 19       		.uleb128 0x19
 10110 01c1 49       		.uleb128 0x49
 10111 01c2 13       		.uleb128 0x13
 10112 01c3 11       		.uleb128 0x11
 10113 01c4 01       		.uleb128 0x1
 10114 01c5 12       		.uleb128 0x12
 10115 01c6 06       		.uleb128 0x6
 10116 01c7 40       		.uleb128 0x40
 10117 01c8 18       		.uleb128 0x18
 10118 01c9 9742     		.uleb128 0x2117
 10119 01cb 19       		.uleb128 0x19
 10120 01cc 01       		.uleb128 0x1
 10121 01cd 13       		.uleb128 0x13
 10122 01ce 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 225


 10123 01cf 00       		.byte	0
 10124 01d0 22       		.uleb128 0x22
 10125 01d1 05       		.uleb128 0x5
 10126 01d2 00       		.byte	0
 10127 01d3 03       		.uleb128 0x3
 10128 01d4 0E       		.uleb128 0xe
 10129 01d5 3A       		.uleb128 0x3a
 10130 01d6 0B       		.uleb128 0xb
 10131 01d7 3B       		.uleb128 0x3b
 10132 01d8 05       		.uleb128 0x5
 10133 01d9 49       		.uleb128 0x49
 10134 01da 13       		.uleb128 0x13
 10135 01db 02       		.uleb128 0x2
 10136 01dc 18       		.uleb128 0x18
 10137 01dd 00       		.byte	0
 10138 01de 00       		.byte	0
 10139 01df 23       		.uleb128 0x23
 10140 01e0 34       		.uleb128 0x34
 10141 01e1 00       		.byte	0
 10142 01e2 03       		.uleb128 0x3
 10143 01e3 08       		.uleb128 0x8
 10144 01e4 3A       		.uleb128 0x3a
 10145 01e5 0B       		.uleb128 0xb
 10146 01e6 3B       		.uleb128 0x3b
 10147 01e7 05       		.uleb128 0x5
 10148 01e8 49       		.uleb128 0x49
 10149 01e9 13       		.uleb128 0x13
 10150 01ea 02       		.uleb128 0x2
 10151 01eb 18       		.uleb128 0x18
 10152 01ec 00       		.byte	0
 10153 01ed 00       		.byte	0
 10154 01ee 24       		.uleb128 0x24
 10155 01ef 0B       		.uleb128 0xb
 10156 01f0 01       		.byte	0x1
 10157 01f1 11       		.uleb128 0x11
 10158 01f2 01       		.uleb128 0x1
 10159 01f3 12       		.uleb128 0x12
 10160 01f4 06       		.uleb128 0x6
 10161 01f5 01       		.uleb128 0x1
 10162 01f6 13       		.uleb128 0x13
 10163 01f7 00       		.byte	0
 10164 01f8 00       		.byte	0
 10165 01f9 25       		.uleb128 0x25
 10166 01fa 21       		.uleb128 0x21
 10167 01fb 00       		.byte	0
 10168 01fc 49       		.uleb128 0x49
 10169 01fd 13       		.uleb128 0x13
 10170 01fe 2F       		.uleb128 0x2f
 10171 01ff 18       		.uleb128 0x18
 10172 0200 00       		.byte	0
 10173 0201 00       		.byte	0
 10174 0202 26       		.uleb128 0x26
 10175 0203 2E       		.uleb128 0x2e
 10176 0204 01       		.byte	0x1
 10177 0205 3F       		.uleb128 0x3f
 10178 0206 19       		.uleb128 0x19
 10179 0207 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 226


 10180 0208 0E       		.uleb128 0xe
 10181 0209 3A       		.uleb128 0x3a
 10182 020a 0B       		.uleb128 0xb
 10183 020b 3B       		.uleb128 0x3b
 10184 020c 05       		.uleb128 0x5
 10185 020d 27       		.uleb128 0x27
 10186 020e 19       		.uleb128 0x19
 10187 020f 11       		.uleb128 0x11
 10188 0210 01       		.uleb128 0x1
 10189 0211 12       		.uleb128 0x12
 10190 0212 06       		.uleb128 0x6
 10191 0213 40       		.uleb128 0x40
 10192 0214 18       		.uleb128 0x18
 10193 0215 9742     		.uleb128 0x2117
 10194 0217 19       		.uleb128 0x19
 10195 0218 01       		.uleb128 0x1
 10196 0219 13       		.uleb128 0x13
 10197 021a 00       		.byte	0
 10198 021b 00       		.byte	0
 10199 021c 27       		.uleb128 0x27
 10200 021d 2E       		.uleb128 0x2e
 10201 021e 00       		.byte	0
 10202 021f 3F       		.uleb128 0x3f
 10203 0220 19       		.uleb128 0x19
 10204 0221 03       		.uleb128 0x3
 10205 0222 0E       		.uleb128 0xe
 10206 0223 3A       		.uleb128 0x3a
 10207 0224 0B       		.uleb128 0xb
 10208 0225 3B       		.uleb128 0x3b
 10209 0226 05       		.uleb128 0x5
 10210 0227 11       		.uleb128 0x11
 10211 0228 01       		.uleb128 0x1
 10212 0229 12       		.uleb128 0x12
 10213 022a 06       		.uleb128 0x6
 10214 022b 40       		.uleb128 0x40
 10215 022c 18       		.uleb128 0x18
 10216 022d 9742     		.uleb128 0x2117
 10217 022f 19       		.uleb128 0x19
 10218 0230 00       		.byte	0
 10219 0231 00       		.byte	0
 10220 0232 28       		.uleb128 0x28
 10221 0233 05       		.uleb128 0x5
 10222 0234 00       		.byte	0
 10223 0235 03       		.uleb128 0x3
 10224 0236 08       		.uleb128 0x8
 10225 0237 3A       		.uleb128 0x3a
 10226 0238 0B       		.uleb128 0xb
 10227 0239 3B       		.uleb128 0x3b
 10228 023a 05       		.uleb128 0x5
 10229 023b 49       		.uleb128 0x49
 10230 023c 13       		.uleb128 0x13
 10231 023d 02       		.uleb128 0x2
 10232 023e 18       		.uleb128 0x18
 10233 023f 00       		.byte	0
 10234 0240 00       		.byte	0
 10235 0241 29       		.uleb128 0x29
 10236 0242 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 227


 10237 0243 01       		.byte	0x1
 10238 0244 3F       		.uleb128 0x3f
 10239 0245 19       		.uleb128 0x19
 10240 0246 03       		.uleb128 0x3
 10241 0247 0E       		.uleb128 0xe
 10242 0248 3A       		.uleb128 0x3a
 10243 0249 0B       		.uleb128 0xb
 10244 024a 3B       		.uleb128 0x3b
 10245 024b 05       		.uleb128 0x5
 10246 024c 27       		.uleb128 0x27
 10247 024d 19       		.uleb128 0x19
 10248 024e 49       		.uleb128 0x49
 10249 024f 13       		.uleb128 0x13
 10250 0250 11       		.uleb128 0x11
 10251 0251 01       		.uleb128 0x1
 10252 0252 12       		.uleb128 0x12
 10253 0253 06       		.uleb128 0x6
 10254 0254 40       		.uleb128 0x40
 10255 0255 18       		.uleb128 0x18
 10256 0256 9642     		.uleb128 0x2116
 10257 0258 19       		.uleb128 0x19
 10258 0259 01       		.uleb128 0x1
 10259 025a 13       		.uleb128 0x13
 10260 025b 00       		.byte	0
 10261 025c 00       		.byte	0
 10262 025d 2A       		.uleb128 0x2a
 10263 025e 2E       		.uleb128 0x2e
 10264 025f 00       		.byte	0
 10265 0260 3F       		.uleb128 0x3f
 10266 0261 19       		.uleb128 0x19
 10267 0262 03       		.uleb128 0x3
 10268 0263 0E       		.uleb128 0xe
 10269 0264 3A       		.uleb128 0x3a
 10270 0265 0B       		.uleb128 0xb
 10271 0266 3B       		.uleb128 0x3b
 10272 0267 05       		.uleb128 0x5
 10273 0268 27       		.uleb128 0x27
 10274 0269 19       		.uleb128 0x19
 10275 026a 49       		.uleb128 0x49
 10276 026b 13       		.uleb128 0x13
 10277 026c 11       		.uleb128 0x11
 10278 026d 01       		.uleb128 0x1
 10279 026e 12       		.uleb128 0x12
 10280 026f 06       		.uleb128 0x6
 10281 0270 40       		.uleb128 0x40
 10282 0271 18       		.uleb128 0x18
 10283 0272 9642     		.uleb128 0x2116
 10284 0274 19       		.uleb128 0x19
 10285 0275 00       		.byte	0
 10286 0276 00       		.byte	0
 10287 0277 2B       		.uleb128 0x2b
 10288 0278 2E       		.uleb128 0x2e
 10289 0279 00       		.byte	0
 10290 027a 3F       		.uleb128 0x3f
 10291 027b 19       		.uleb128 0x19
 10292 027c 03       		.uleb128 0x3
 10293 027d 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 228


 10294 027e 3A       		.uleb128 0x3a
 10295 027f 0B       		.uleb128 0xb
 10296 0280 3B       		.uleb128 0x3b
 10297 0281 05       		.uleb128 0x5
 10298 0282 27       		.uleb128 0x27
 10299 0283 19       		.uleb128 0x19
 10300 0284 11       		.uleb128 0x11
 10301 0285 01       		.uleb128 0x1
 10302 0286 12       		.uleb128 0x12
 10303 0287 06       		.uleb128 0x6
 10304 0288 40       		.uleb128 0x40
 10305 0289 18       		.uleb128 0x18
 10306 028a 9742     		.uleb128 0x2117
 10307 028c 19       		.uleb128 0x19
 10308 028d 00       		.byte	0
 10309 028e 00       		.byte	0
 10310 028f 2C       		.uleb128 0x2c
 10311 0290 2E       		.uleb128 0x2e
 10312 0291 01       		.byte	0x1
 10313 0292 3F       		.uleb128 0x3f
 10314 0293 19       		.uleb128 0x19
 10315 0294 03       		.uleb128 0x3
 10316 0295 0E       		.uleb128 0xe
 10317 0296 3A       		.uleb128 0x3a
 10318 0297 0B       		.uleb128 0xb
 10319 0298 3B       		.uleb128 0x3b
 10320 0299 05       		.uleb128 0x5
 10321 029a 11       		.uleb128 0x11
 10322 029b 01       		.uleb128 0x1
 10323 029c 12       		.uleb128 0x12
 10324 029d 06       		.uleb128 0x6
 10325 029e 40       		.uleb128 0x40
 10326 029f 18       		.uleb128 0x18
 10327 02a0 9642     		.uleb128 0x2116
 10328 02a2 19       		.uleb128 0x19
 10329 02a3 01       		.uleb128 0x1
 10330 02a4 13       		.uleb128 0x13
 10331 02a5 00       		.byte	0
 10332 02a6 00       		.byte	0
 10333 02a7 2D       		.uleb128 0x2d
 10334 02a8 2E       		.uleb128 0x2e
 10335 02a9 01       		.byte	0x1
 10336 02aa 3F       		.uleb128 0x3f
 10337 02ab 19       		.uleb128 0x19
 10338 02ac 03       		.uleb128 0x3
 10339 02ad 0E       		.uleb128 0xe
 10340 02ae 3A       		.uleb128 0x3a
 10341 02af 0B       		.uleb128 0xb
 10342 02b0 3B       		.uleb128 0x3b
 10343 02b1 05       		.uleb128 0x5
 10344 02b2 49       		.uleb128 0x49
 10345 02b3 13       		.uleb128 0x13
 10346 02b4 11       		.uleb128 0x11
 10347 02b5 01       		.uleb128 0x1
 10348 02b6 12       		.uleb128 0x12
 10349 02b7 06       		.uleb128 0x6
 10350 02b8 40       		.uleb128 0x40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 229


 10351 02b9 18       		.uleb128 0x18
 10352 02ba 9642     		.uleb128 0x2116
 10353 02bc 19       		.uleb128 0x19
 10354 02bd 01       		.uleb128 0x1
 10355 02be 13       		.uleb128 0x13
 10356 02bf 00       		.byte	0
 10357 02c0 00       		.byte	0
 10358 02c1 2E       		.uleb128 0x2e
 10359 02c2 2E       		.uleb128 0x2e
 10360 02c3 00       		.byte	0
 10361 02c4 3F       		.uleb128 0x3f
 10362 02c5 19       		.uleb128 0x19
 10363 02c6 03       		.uleb128 0x3
 10364 02c7 0E       		.uleb128 0xe
 10365 02c8 3A       		.uleb128 0x3a
 10366 02c9 0B       		.uleb128 0xb
 10367 02ca 3B       		.uleb128 0x3b
 10368 02cb 05       		.uleb128 0x5
 10369 02cc 49       		.uleb128 0x49
 10370 02cd 13       		.uleb128 0x13
 10371 02ce 11       		.uleb128 0x11
 10372 02cf 01       		.uleb128 0x1
 10373 02d0 12       		.uleb128 0x12
 10374 02d1 06       		.uleb128 0x6
 10375 02d2 40       		.uleb128 0x40
 10376 02d3 18       		.uleb128 0x18
 10377 02d4 9742     		.uleb128 0x2117
 10378 02d6 19       		.uleb128 0x19
 10379 02d7 00       		.byte	0
 10380 02d8 00       		.byte	0
 10381 02d9 2F       		.uleb128 0x2f
 10382 02da 2E       		.uleb128 0x2e
 10383 02db 00       		.byte	0
 10384 02dc 3F       		.uleb128 0x3f
 10385 02dd 19       		.uleb128 0x19
 10386 02de 03       		.uleb128 0x3
 10387 02df 0E       		.uleb128 0xe
 10388 02e0 3A       		.uleb128 0x3a
 10389 02e1 0B       		.uleb128 0xb
 10390 02e2 3B       		.uleb128 0x3b
 10391 02e3 05       		.uleb128 0x5
 10392 02e4 11       		.uleb128 0x11
 10393 02e5 01       		.uleb128 0x1
 10394 02e6 12       		.uleb128 0x12
 10395 02e7 06       		.uleb128 0x6
 10396 02e8 40       		.uleb128 0x40
 10397 02e9 18       		.uleb128 0x18
 10398 02ea 9642     		.uleb128 0x2116
 10399 02ec 19       		.uleb128 0x19
 10400 02ed 00       		.byte	0
 10401 02ee 00       		.byte	0
 10402 02ef 30       		.uleb128 0x30
 10403 02f0 34       		.uleb128 0x34
 10404 02f1 00       		.byte	0
 10405 02f2 03       		.uleb128 0x3
 10406 02f3 0E       		.uleb128 0xe
 10407 02f4 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 230


 10408 02f5 0B       		.uleb128 0xb
 10409 02f6 3B       		.uleb128 0x3b
 10410 02f7 05       		.uleb128 0x5
 10411 02f8 49       		.uleb128 0x49
 10412 02f9 13       		.uleb128 0x13
 10413 02fa 3F       		.uleb128 0x3f
 10414 02fb 19       		.uleb128 0x19
 10415 02fc 3C       		.uleb128 0x3c
 10416 02fd 19       		.uleb128 0x19
 10417 02fe 00       		.byte	0
 10418 02ff 00       		.byte	0
 10419 0300 31       		.uleb128 0x31
 10420 0301 34       		.uleb128 0x34
 10421 0302 00       		.byte	0
 10422 0303 03       		.uleb128 0x3
 10423 0304 0E       		.uleb128 0xe
 10424 0305 3A       		.uleb128 0x3a
 10425 0306 0B       		.uleb128 0xb
 10426 0307 3B       		.uleb128 0x3b
 10427 0308 0B       		.uleb128 0xb
 10428 0309 49       		.uleb128 0x49
 10429 030a 13       		.uleb128 0x13
 10430 030b 3F       		.uleb128 0x3f
 10431 030c 19       		.uleb128 0x19
 10432 030d 02       		.uleb128 0x2
 10433 030e 18       		.uleb128 0x18
 10434 030f 00       		.byte	0
 10435 0310 00       		.byte	0
 10436 0311 00       		.byte	0
 10437              		.section	.debug_aranges,"",%progbits
 10438 0000 04020000 		.4byte	0x204
 10439 0004 0200     		.2byte	0x2
 10440 0006 00000000 		.4byte	.Ldebug_info0
 10441 000a 04       		.byte	0x4
 10442 000b 00       		.byte	0
 10443 000c 0000     		.2byte	0
 10444 000e 0000     		.2byte	0
 10445 0010 00000000 		.4byte	.LFB64
 10446 0014 68060000 		.4byte	.LFE64-.LFB64
 10447 0018 00000000 		.4byte	.LFB65
 10448 001c 22000000 		.4byte	.LFE65-.LFB65
 10449 0020 00000000 		.4byte	.LFB66
 10450 0024 5E000000 		.4byte	.LFE66-.LFB66
 10451 0028 00000000 		.4byte	.LFB67
 10452 002c 64010000 		.4byte	.LFE67-.LFB67
 10453 0030 00000000 		.4byte	.LFB68
 10454 0034 BC070000 		.4byte	.LFE68-.LFB68
 10455 0038 00000000 		.4byte	.LFB69
 10456 003c 84060000 		.4byte	.LFE69-.LFB69
 10457 0040 00000000 		.4byte	.LFB70
 10458 0044 34010000 		.4byte	.LFE70-.LFB70
 10459 0048 00000000 		.4byte	.LFB71
 10460 004c 14000000 		.4byte	.LFE71-.LFB71
 10461 0050 00000000 		.4byte	.LFB72
 10462 0054 0C000000 		.4byte	.LFE72-.LFB72
 10463 0058 00000000 		.4byte	.LFB73
 10464 005c FC060000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 231


 10465 0060 00000000 		.4byte	.LFB74
 10466 0064 12000000 		.4byte	.LFE74-.LFB74
 10467 0068 00000000 		.4byte	.LFB75
 10468 006c 12000000 		.4byte	.LFE75-.LFB75
 10469 0070 00000000 		.4byte	.LFB76
 10470 0074 12000000 		.4byte	.LFE76-.LFB76
 10471 0078 00000000 		.4byte	.LFB77
 10472 007c 12000000 		.4byte	.LFE77-.LFB77
 10473 0080 00000000 		.4byte	.LFB78
 10474 0084 12000000 		.4byte	.LFE78-.LFB78
 10475 0088 00000000 		.4byte	.LFB79
 10476 008c 12000000 		.4byte	.LFE79-.LFB79
 10477 0090 00000000 		.4byte	.LFB80
 10478 0094 12000000 		.4byte	.LFE80-.LFB80
 10479 0098 00000000 		.4byte	.LFB81
 10480 009c 84000000 		.4byte	.LFE81-.LFB81
 10481 00a0 00000000 		.4byte	.LFB82
 10482 00a4 88000000 		.4byte	.LFE82-.LFB82
 10483 00a8 00000000 		.4byte	.LFB83
 10484 00ac A0000000 		.4byte	.LFE83-.LFB83
 10485 00b0 00000000 		.4byte	.LFB84
 10486 00b4 3E000000 		.4byte	.LFE84-.LFB84
 10487 00b8 00000000 		.4byte	.LFB85
 10488 00bc 2E000000 		.4byte	.LFE85-.LFB85
 10489 00c0 00000000 		.4byte	.LFB86
 10490 00c4 90000000 		.4byte	.LFE86-.LFB86
 10491 00c8 00000000 		.4byte	.LFB87
 10492 00cc 60000000 		.4byte	.LFE87-.LFB87
 10493 00d0 00000000 		.4byte	.LFB88
 10494 00d4 58000000 		.4byte	.LFE88-.LFB88
 10495 00d8 00000000 		.4byte	.LFB89
 10496 00dc D0000000 		.4byte	.LFE89-.LFB89
 10497 00e0 00000000 		.4byte	.LFB90
 10498 00e4 0C000000 		.4byte	.LFE90-.LFB90
 10499 00e8 00000000 		.4byte	.LFB91
 10500 00ec 0C000000 		.4byte	.LFE91-.LFB91
 10501 00f0 00000000 		.4byte	.LFB92
 10502 00f4 0C000000 		.4byte	.LFE92-.LFB92
 10503 00f8 00000000 		.4byte	.LFB93
 10504 00fc 0C000000 		.4byte	.LFE93-.LFB93
 10505 0100 00000000 		.4byte	.LFB94
 10506 0104 0C000000 		.4byte	.LFE94-.LFB94
 10507 0108 00000000 		.4byte	.LFB95
 10508 010c 0C000000 		.4byte	.LFE95-.LFB95
 10509 0110 00000000 		.4byte	.LFB96
 10510 0114 0C000000 		.4byte	.LFE96-.LFB96
 10511 0118 00000000 		.4byte	.LFB97
 10512 011c 0C000000 		.4byte	.LFE97-.LFB97
 10513 0120 00000000 		.4byte	.LFB98
 10514 0124 0C000000 		.4byte	.LFE98-.LFB98
 10515 0128 00000000 		.4byte	.LFB99
 10516 012c 0C000000 		.4byte	.LFE99-.LFB99
 10517 0130 00000000 		.4byte	.LFB100
 10518 0134 0C000000 		.4byte	.LFE100-.LFB100
 10519 0138 00000000 		.4byte	.LFB101
 10520 013c 0C000000 		.4byte	.LFE101-.LFB101
 10521 0140 00000000 		.4byte	.LFB102
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 232


 10522 0144 0C000000 		.4byte	.LFE102-.LFB102
 10523 0148 00000000 		.4byte	.LFB103
 10524 014c 0C000000 		.4byte	.LFE103-.LFB103
 10525 0150 00000000 		.4byte	.LFB104
 10526 0154 0C000000 		.4byte	.LFE104-.LFB104
 10527 0158 00000000 		.4byte	.LFB105
 10528 015c C4000000 		.4byte	.LFE105-.LFB105
 10529 0160 00000000 		.4byte	.LFB106
 10530 0164 A8000000 		.4byte	.LFE106-.LFB106
 10531 0168 00000000 		.4byte	.LFB107
 10532 016c 0C000000 		.4byte	.LFE107-.LFB107
 10533 0170 00000000 		.4byte	.LFB108
 10534 0174 20000000 		.4byte	.LFE108-.LFB108
 10535 0178 00000000 		.4byte	.LFB109
 10536 017c 0C000000 		.4byte	.LFE109-.LFB109
 10537 0180 00000000 		.4byte	.LFB110
 10538 0184 0C000000 		.4byte	.LFE110-.LFB110
 10539 0188 00000000 		.4byte	.LFB111
 10540 018c 60000000 		.4byte	.LFE111-.LFB111
 10541 0190 00000000 		.4byte	.LFB112
 10542 0194 0C000000 		.4byte	.LFE112-.LFB112
 10543 0198 00000000 		.4byte	.LFB113
 10544 019c 0C000000 		.4byte	.LFE113-.LFB113
 10545 01a0 00000000 		.4byte	.LFB114
 10546 01a4 0C000000 		.4byte	.LFE114-.LFB114
 10547 01a8 00000000 		.4byte	.LFB115
 10548 01ac 0C000000 		.4byte	.LFE115-.LFB115
 10549 01b0 00000000 		.4byte	.LFB116
 10550 01b4 0C000000 		.4byte	.LFE116-.LFB116
 10551 01b8 00000000 		.4byte	.LFB117
 10552 01bc 54010000 		.4byte	.LFE117-.LFB117
 10553 01c0 00000000 		.4byte	.LFB118
 10554 01c4 14000000 		.4byte	.LFE118-.LFB118
 10555 01c8 00000000 		.4byte	.LFB119
 10556 01cc 50010000 		.4byte	.LFE119-.LFB119
 10557 01d0 00000000 		.4byte	.LFB120
 10558 01d4 9C010000 		.4byte	.LFE120-.LFB120
 10559 01d8 00000000 		.4byte	.LFB121
 10560 01dc 0E000000 		.4byte	.LFE121-.LFB121
 10561 01e0 00000000 		.4byte	.LFB122
 10562 01e4 12000000 		.4byte	.LFE122-.LFB122
 10563 01e8 00000000 		.4byte	.LFB123
 10564 01ec 1A000000 		.4byte	.LFE123-.LFB123
 10565 01f0 00000000 		.4byte	.LFB124
 10566 01f4 30000000 		.4byte	.LFE124-.LFB124
 10567 01f8 00000000 		.4byte	.LFB125
 10568 01fc 0C000000 		.4byte	.LFE125-.LFB125
 10569 0200 00000000 		.4byte	0
 10570 0204 00000000 		.4byte	0
 10571              		.section	.debug_ranges,"",%progbits
 10572              	.Ldebug_ranges0:
 10573 0000 00000000 		.4byte	.LFB64
 10574 0004 68060000 		.4byte	.LFE64
 10575 0008 00000000 		.4byte	.LFB65
 10576 000c 22000000 		.4byte	.LFE65
 10577 0010 00000000 		.4byte	.LFB66
 10578 0014 5E000000 		.4byte	.LFE66
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 233


 10579 0018 00000000 		.4byte	.LFB67
 10580 001c 64010000 		.4byte	.LFE67
 10581 0020 00000000 		.4byte	.LFB68
 10582 0024 BC070000 		.4byte	.LFE68
 10583 0028 00000000 		.4byte	.LFB69
 10584 002c 84060000 		.4byte	.LFE69
 10585 0030 00000000 		.4byte	.LFB70
 10586 0034 34010000 		.4byte	.LFE70
 10587 0038 00000000 		.4byte	.LFB71
 10588 003c 14000000 		.4byte	.LFE71
 10589 0040 00000000 		.4byte	.LFB72
 10590 0044 0C000000 		.4byte	.LFE72
 10591 0048 00000000 		.4byte	.LFB73
 10592 004c FC060000 		.4byte	.LFE73
 10593 0050 00000000 		.4byte	.LFB74
 10594 0054 12000000 		.4byte	.LFE74
 10595 0058 00000000 		.4byte	.LFB75
 10596 005c 12000000 		.4byte	.LFE75
 10597 0060 00000000 		.4byte	.LFB76
 10598 0064 12000000 		.4byte	.LFE76
 10599 0068 00000000 		.4byte	.LFB77
 10600 006c 12000000 		.4byte	.LFE77
 10601 0070 00000000 		.4byte	.LFB78
 10602 0074 12000000 		.4byte	.LFE78
 10603 0078 00000000 		.4byte	.LFB79
 10604 007c 12000000 		.4byte	.LFE79
 10605 0080 00000000 		.4byte	.LFB80
 10606 0084 12000000 		.4byte	.LFE80
 10607 0088 00000000 		.4byte	.LFB81
 10608 008c 84000000 		.4byte	.LFE81
 10609 0090 00000000 		.4byte	.LFB82
 10610 0094 88000000 		.4byte	.LFE82
 10611 0098 00000000 		.4byte	.LFB83
 10612 009c A0000000 		.4byte	.LFE83
 10613 00a0 00000000 		.4byte	.LFB84
 10614 00a4 3E000000 		.4byte	.LFE84
 10615 00a8 00000000 		.4byte	.LFB85
 10616 00ac 2E000000 		.4byte	.LFE85
 10617 00b0 00000000 		.4byte	.LFB86
 10618 00b4 90000000 		.4byte	.LFE86
 10619 00b8 00000000 		.4byte	.LFB87
 10620 00bc 60000000 		.4byte	.LFE87
 10621 00c0 00000000 		.4byte	.LFB88
 10622 00c4 58000000 		.4byte	.LFE88
 10623 00c8 00000000 		.4byte	.LFB89
 10624 00cc D0000000 		.4byte	.LFE89
 10625 00d0 00000000 		.4byte	.LFB90
 10626 00d4 0C000000 		.4byte	.LFE90
 10627 00d8 00000000 		.4byte	.LFB91
 10628 00dc 0C000000 		.4byte	.LFE91
 10629 00e0 00000000 		.4byte	.LFB92
 10630 00e4 0C000000 		.4byte	.LFE92
 10631 00e8 00000000 		.4byte	.LFB93
 10632 00ec 0C000000 		.4byte	.LFE93
 10633 00f0 00000000 		.4byte	.LFB94
 10634 00f4 0C000000 		.4byte	.LFE94
 10635 00f8 00000000 		.4byte	.LFB95
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 234


 10636 00fc 0C000000 		.4byte	.LFE95
 10637 0100 00000000 		.4byte	.LFB96
 10638 0104 0C000000 		.4byte	.LFE96
 10639 0108 00000000 		.4byte	.LFB97
 10640 010c 0C000000 		.4byte	.LFE97
 10641 0110 00000000 		.4byte	.LFB98
 10642 0114 0C000000 		.4byte	.LFE98
 10643 0118 00000000 		.4byte	.LFB99
 10644 011c 0C000000 		.4byte	.LFE99
 10645 0120 00000000 		.4byte	.LFB100
 10646 0124 0C000000 		.4byte	.LFE100
 10647 0128 00000000 		.4byte	.LFB101
 10648 012c 0C000000 		.4byte	.LFE101
 10649 0130 00000000 		.4byte	.LFB102
 10650 0134 0C000000 		.4byte	.LFE102
 10651 0138 00000000 		.4byte	.LFB103
 10652 013c 0C000000 		.4byte	.LFE103
 10653 0140 00000000 		.4byte	.LFB104
 10654 0144 0C000000 		.4byte	.LFE104
 10655 0148 00000000 		.4byte	.LFB105
 10656 014c C4000000 		.4byte	.LFE105
 10657 0150 00000000 		.4byte	.LFB106
 10658 0154 A8000000 		.4byte	.LFE106
 10659 0158 00000000 		.4byte	.LFB107
 10660 015c 0C000000 		.4byte	.LFE107
 10661 0160 00000000 		.4byte	.LFB108
 10662 0164 20000000 		.4byte	.LFE108
 10663 0168 00000000 		.4byte	.LFB109
 10664 016c 0C000000 		.4byte	.LFE109
 10665 0170 00000000 		.4byte	.LFB110
 10666 0174 0C000000 		.4byte	.LFE110
 10667 0178 00000000 		.4byte	.LFB111
 10668 017c 60000000 		.4byte	.LFE111
 10669 0180 00000000 		.4byte	.LFB112
 10670 0184 0C000000 		.4byte	.LFE112
 10671 0188 00000000 		.4byte	.LFB113
 10672 018c 0C000000 		.4byte	.LFE113
 10673 0190 00000000 		.4byte	.LFB114
 10674 0194 0C000000 		.4byte	.LFE114
 10675 0198 00000000 		.4byte	.LFB115
 10676 019c 0C000000 		.4byte	.LFE115
 10677 01a0 00000000 		.4byte	.LFB116
 10678 01a4 0C000000 		.4byte	.LFE116
 10679 01a8 00000000 		.4byte	.LFB117
 10680 01ac 54010000 		.4byte	.LFE117
 10681 01b0 00000000 		.4byte	.LFB118
 10682 01b4 14000000 		.4byte	.LFE118
 10683 01b8 00000000 		.4byte	.LFB119
 10684 01bc 50010000 		.4byte	.LFE119
 10685 01c0 00000000 		.4byte	.LFB120
 10686 01c4 9C010000 		.4byte	.LFE120
 10687 01c8 00000000 		.4byte	.LFB121
 10688 01cc 0E000000 		.4byte	.LFE121
 10689 01d0 00000000 		.4byte	.LFB122
 10690 01d4 12000000 		.4byte	.LFE122
 10691 01d8 00000000 		.4byte	.LFB123
 10692 01dc 1A000000 		.4byte	.LFE123
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 235


 10693 01e0 00000000 		.4byte	.LFB124
 10694 01e4 30000000 		.4byte	.LFE124
 10695 01e8 00000000 		.4byte	.LFB125
 10696 01ec 0C000000 		.4byte	.LFE125
 10697 01f0 00000000 		.4byte	0
 10698 01f4 00000000 		.4byte	0
 10699              		.section	.debug_line,"",%progbits
 10700              	.Ldebug_line0:
 10701 0000 8B0A0000 		.section	.debug_str,"MS",%progbits,1
 10701      02008B01 
 10701      00000201 
 10701      FB0E0D00 
 10701      01010101 
 10702              	.LASF166:
 10703 0000 696E666F 		.ascii	"infoSend\000"
 10703      53656E64 
 10703      00
 10704              	.LASF46:
 10705 0009 4D454E55 		.ascii	"MENU_Y_N\000"
 10705      5F595F4E 
 10705      00
 10706              	.LASF180:
 10707 0012 73747269 		.ascii	"string_length\000"
 10707      6E675F6C 
 10707      656E6774 
 10707      6800
 10708              	.LASF23:
 10709 0020 73697A65 		.ascii	"sizetype\000"
 10709      74797065 
 10709      00
 10710              	.LASF64:
 10711 0029 434D445F 		.ascii	"CMD_INIT_MEM\000"
 10711      494E4954 
 10711      5F4D454D 
 10711      00
 10712              	.LASF97:
 10713 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 10713      545F4D4F 
 10713      44455F45 
 10713      4D475F46 
 10713      4346535F 
 10714              	.LASF44:
 10715 004e 4D454E55 		.ascii	"MENU_INPUT\000"
 10715      5F494E50 
 10715      555400
 10716              	.LASF272:
 10717 0059 73746F70 		.ascii	"stop_master_device\000"
 10717      5F6D6173 
 10717      7465725F 
 10717      64657669 
 10717      636500
 10718              	.LASF11:
 10719 006c 696E7433 		.ascii	"int32_t\000"
 10719      325F7400 
 10720              	.LASF279:
 10721 0074 675F7278 		.ascii	"g_rx\000"
 10721      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 236


 10722              	.LASF119:
 10723 0079 73745F64 		.ascii	"st_data\000"
 10723      61746100 
 10724              	.LASF219:
 10725 0081 77726974 		.ascii	"writeStatus\000"
 10725      65537461 
 10725      74757300 
 10726              	.LASF15:
 10727 008d 75696E74 		.ascii	"uint32\000"
 10727      333200
 10728              	.LASF245:
 10729 0094 636D645F 		.ascii	"cmd_set_baudrate\000"
 10729      7365745F 
 10729      62617564 
 10729      72617465 
 10729      00
 10730              	.LASF262:
 10731 00a5 6169725F 		.ascii	"air_chambers_control\000"
 10731      6368616D 
 10731      62657273 
 10731      5F636F6E 
 10731      74726F6C 
 10732              	.LASF197:
 10733 00ba 70726570 		.ascii	"prepare_generic_info\000"
 10733      6172655F 
 10733      67656E65 
 10733      7269635F 
 10733      696E666F 
 10734              	.LASF192:
 10735 00cf 4E554D5F 		.ascii	"NUM_MENUs\000"
 10735      4D454E55 
 10735      7300
 10736              	.LASF127:
 10737 00d9 706F735F 		.ascii	"pos_lim_inf\000"
 10737      6C696D5F 
 10737      696E6600 
 10738              	.LASF170:
 10739 00e5 54595045 		.ascii	"TYPE\000"
 10739      00
 10740              	.LASF155:
 10741 00ea 63686F69 		.ascii	"choice\000"
 10741      636500
 10742              	.LASF32:
 10743 00f1 43555354 		.ascii	"CUSTOM_RESET_COUNT\000"
 10743      4F4D5F52 
 10743      45534554 
 10743      5F434F55 
 10743      4E5400
 10744              	.LASF96:
 10745 0104 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 10745      545F4D4F 
 10745      44455F45 
 10745      4D475F46 
 10745      43465300 
 10746              	.LASF149:
 10747 0118 64697265 		.ascii	"direction\000"
 10747      6374696F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 237


 10747      6E00
 10748              	.LASF252:
 10749 0122 636D645F 		.ascii	"cmd_get_imu_readings\000"
 10749      6765745F 
 10749      696D755F 
 10749      72656164 
 10749      696E6773 
 10750              	.LASF135:
 10751 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 10751      41535445 
 10751      525F7370 
 10751      656300
 10752              	.LASF160:
 10753 0146 50415241 		.ascii	"PARAM_STR\000"
 10753      4D5F5354 
 10753      5200
 10754              	.LASF95:
 10755 0150 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 10755      545F4D4F 
 10755      44455F45 
 10755      4D475F49 
 10755      4E544547 
 10756              	.LASF190:
 10757 0168 50415241 		.ascii	"PARAM_IDX\000"
 10757      4D5F4944 
 10757      5800
 10758              	.LASF173:
 10759 0172 6765745F 		.ascii	"get_param_list\000"
 10759      70617261 
 10759      6D5F6C69 
 10759      737400
 10760              	.LASF231:
 10761 0181 636D645F 		.ascii	"cmd_get_accelerations\000"
 10761      6765745F 
 10761      61636365 
 10761      6C657261 
 10761      74696F6E 
 10762              	.LASF250:
 10763 0197 636D645F 		.ascii	"cmd_get_emg\000"
 10763      6765745F 
 10763      656D6700 
 10764              	.LASF130:
 10765 01a3 73745F65 		.ascii	"st_emg\000"
 10765      6D6700
 10766              	.LASF38:
 10767 01aa 43555354 		.ascii	"CUSTOM_MEAS_OFF_2\000"
 10767      4F4D5F4D 
 10767      4541535F 
 10767      4F46465F 
 10767      3200
 10768              	.LASF299:
 10769 01bc 72657375 		.ascii	"result\000"
 10769      6C7400
 10770              	.LASF122:
 10771 01c3 72656164 		.ascii	"ready\000"
 10771      7900
 10772              	.LASF182:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 238


 10773 01c9 6175785F 		.ascii	"aux_str1\000"
 10773      73747231 
 10773      00
 10774              	.LASF28:
 10775 01d2 43555354 		.ascii	"CUSTOM_POS_LIM\000"
 10775      4F4D5F50 
 10775      4F535F4C 
 10775      494D00
 10776              	.LASF82:
 10777 01e1 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 10777      4745545F 
 10777      4A4F5953 
 10777      5449434B 
 10777      00
 10778              	.LASF94:
 10779 01f2 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 10779      545F4D4F 
 10779      44455F45 
 10779      4D475F50 
 10779      524F504F 
 10780              	.LASF240:
 10781 020e 745F7374 		.ascii	"t_start\000"
 10781      61727400 
 10782              	.LASF152:
 10783 0216 6D656E75 		.ascii	"menu\000"
 10783      00
 10784              	.LASF292:
 10785 021b 50574D5F 		.ascii	"PWM_IMU_1\000"
 10785      494D555F 
 10785      3100
 10786              	.LASF293:
 10787 0225 50574D5F 		.ascii	"PWM_IMU_2\000"
 10787      494D555F 
 10787      3200
 10788              	.LASF283:
 10789 022f 74696D65 		.ascii	"timer_value\000"
 10789      725F7661 
 10789      6C756500 
 10790              	.LASF4:
 10791 023b 6C6F6E67 		.ascii	"long int\000"
 10791      20696E74 
 10791      00
 10792              	.LASF36:
 10793 0244 43555354 		.ascii	"CUSTOM_CURR_PID_2\000"
 10793      4F4D5F43 
 10793      5552525F 
 10793      5049445F 
 10793      3200
 10794              	.LASF257:
 10795 0256 636D645F 		.ascii	"cmd_get_SD_file\000"
 10795      6765745F 
 10795      53445F66 
 10795      696C6500 
 10796              	.LASF226:
 10797 0266 7365745A 		.ascii	"setZeros\000"
 10797      65726F73 
 10797      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 239


 10798              	.LASF125:
 10799 026f 756E7573 		.ascii	"unused_bytes\000"
 10799      65645F62 
 10799      79746573 
 10799      00
 10800              	.LASF159:
 10801 027c 4E554D5F 		.ascii	"NUM_ITEMS\000"
 10801      4954454D 
 10801      5300
 10802              	.LASF191:
 10803 0286 4D454D5F 		.ascii	"MEM_P\000"
 10803      5000
 10804              	.LASF255:
 10805 028c 636D645F 		.ascii	"cmd_get_ADC_map\000"
 10805      6765745F 
 10805      4144435F 
 10805      6D617000 
 10806              	.LASF72:
 10807 029c 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 10807      4745545F 
 10807      43555252 
 10807      454E5453 
 10807      00
 10808              	.LASF204:
 10809 02ad 70726570 		.ascii	"prepare_SD_EMG_history\000"
 10809      6172655F 
 10809      53445F45 
 10809      4D475F68 
 10809      6973746F 
 10810              	.LASF256:
 10811 02c4 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 10811      6765745F 
 10811      4144435F 
 10811      72617700 
 10812              	.LASF288:
 10813 02d4 73645061 		.ascii	"sdParam\000"
 10813      72616D00 
 10814              	.LASF35:
 10815 02dc 43555354 		.ascii	"CUSTOM_POS_PID_2\000"
 10815      4F4D5F50 
 10815      4F535F50 
 10815      49445F32 
 10815      00
 10816              	.LASF265:
 10817 02ed 70726573 		.ascii	"pressure_value\000"
 10817      73757265 
 10817      5F76616C 
 10817      756500
 10818              	.LASF247:
 10819 02fc 636D645F 		.ascii	"cmd_ping\000"
 10819      70696E67 
 10819      00
 10820              	.LASF26:
 10821 0305 43555354 		.ascii	"CUSTOM_INPUT\000"
 10821      4F4D5F49 
 10821      4E505554 
 10821      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 240


 10822              	.LASF195:
 10823 0312 7365745F 		.ascii	"set_custom_param\000"
 10823      63757374 
 10823      6F6D5F70 
 10823      6172616D 
 10823      00
 10824              	.LASF260:
 10825 0323 636D645F 		.ascii	"cmd_remove_SD_file\000"
 10825      72656D6F 
 10825      76655F53 
 10825      445F6669 
 10825      6C6500
 10826              	.LASF40:
 10827 0336 43555354 		.ascii	"CUSTOM_DRIVER_2\000"
 10827      4F4D5F44 
 10827      52495645 
 10827      525F3200 
 10828              	.LASF0:
 10829 0346 7369676E 		.ascii	"signed char\000"
 10829      65642063 
 10829      68617200 
 10830              	.LASF136:
 10831 0352 6D617374 		.ascii	"master_mode_active\000"
 10831      65725F6D 
 10831      6F64655F 
 10831      61637469 
 10831      766500
 10832              	.LASF147:
 10833 0365 73745F63 		.ascii	"st_calib\000"
 10833      616C6962 
 10833      00
 10834              	.LASF217:
 10835 036e 6D656D53 		.ascii	"memStore\000"
 10835      746F7265 
 10835      00
 10836              	.LASF259:
 10837 0377 66696C65 		.ascii	"filename\000"
 10837      6E616D65 
 10837      00
 10838              	.LASF134:
 10839 0380 73776974 		.ascii	"switch_emg\000"
 10839      63685F65 
 10839      6D6700
 10840              	.LASF242:
 10841 038b 72656164 		.ascii	"read_flag\000"
 10841      5F666C61 
 10841      6700
 10842              	.LASF285:
 10843 0395 696E7465 		.ascii	"interrupt_flag\000"
 10843      72727570 
 10843      745F666C 
 10843      616700
 10844              	.LASF45:
 10845 03a4 4D454E55 		.ascii	"MENU_CTRL\000"
 10845      5F435452 
 10845      4C00
 10846              	.LASF1:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 241


 10847 03ae 756E7369 		.ascii	"unsigned char\000"
 10847      676E6564 
 10847      20636861 
 10847      7200
 10848              	.LASF79:
 10849 03bc 434D445F 		.ascii	"CMD_SET_VIBROTACTILE_INPUTS\000"
 10849      5345545F 
 10849      56494252 
 10849      4F544143 
 10849      54494C45 
 10850              	.LASF80:
 10851 03d8 434D445F 		.ascii	"CMD_GET_VIBROTACTILE_INPUTS\000"
 10851      4745545F 
 10851      56494252 
 10851      4F544143 
 10851      54494C45 
 10852              	.LASF67:
 10853 03f4 434D445F 		.ascii	"CMD_ACTIVATE\000"
 10853      41435449 
 10853      56415445 
 10853      00
 10854              	.LASF275:
 10855 0401 675F7265 		.ascii	"g_refNew\000"
 10855      664E6577 
 10855      00
 10856              	.LASF60:
 10857 040a 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 10857      53544F52 
 10857      455F4445 
 10857      4641554C 
 10857      545F5041 
 10858              	.LASF31:
 10859 0423 43555354 		.ascii	"CUSTOM_HAND_SIDE\000"
 10859      4F4D5F48 
 10859      414E445F 
 10859      53494445 
 10859      00
 10860              	.LASF216:
 10861 0434 76616C75 		.ascii	"value\000"
 10861      6500
 10862              	.LASF118:
 10863 043a 70726573 		.ascii	"pressure\000"
 10863      73757265 
 10863      00
 10864              	.LASF68:
 10865 0443 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 10865      4745545F 
 10865      41435449 
 10865      56415445 
 10865      00
 10866              	.LASF20:
 10867 0454 63686172 		.ascii	"char\000"
 10867      00
 10868              	.LASF266:
 10869 0459 76616C76 		.ascii	"valve_command\000"
 10869      655F636F 
 10869      6D6D616E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 242


 10869      6400
 10870              	.LASF263:
 10871 0467 70726573 		.ascii	"pressure_reference\000"
 10871      73757265 
 10871      5F726566 
 10871      6572656E 
 10871      636500
 10872              	.LASF221:
 10873 047a 7265745F 		.ascii	"ret_val\000"
 10873      76616C00 
 10874              	.LASF50:
 10875 0482 4D454E55 		.ascii	"MENU_SPI\000"
 10875      5F535049 
 10875      00
 10876              	.LASF156:
 10877 048b 70617261 		.ascii	"parameter\000"
 10877      6D657465 
 10877      7200
 10878              	.LASF117:
 10879 0495 73745F66 		.ascii	"st_fb_meas\000"
 10879      625F6D65 
 10879      617300
 10880              	.LASF168:
 10881 04a0 7061636B 		.ascii	"packet_string\000"
 10881      65745F73 
 10881      7472696E 
 10881      6700
 10882              	.LASF33:
 10883 04ae 43555354 		.ascii	"CUSTOM_LAST_CHECKED_t\000"
 10883      4F4D5F4C 
 10883      4153545F 
 10883      43484543 
 10883      4B45445F 
 10884              	.LASF213:
 10885 04c4 64617461 		.ascii	"data_length\000"
 10885      5F6C656E 
 10885      67746800 
 10886              	.LASF128:
 10887 04d0 706F735F 		.ascii	"pos_lim_sup\000"
 10887      6C696D5F 
 10887      73757000 
 10888              	.LASF228:
 10889 04dc 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 10889      6E69745F 
 10889      4F74626B 
 10889      41637457 
 10889      72697374 
 10890              	.LASF133:
 10891 04f3 656D675F 		.ascii	"emg_speed\000"
 10891      73706565 
 10891      6400
 10892              	.LASF187:
 10893 04fd 7061636B 		.ascii	"packet_data\000"
 10893      65745F64 
 10893      61746100 
 10894              	.LASF123:
 10895 0509 73745F64 		.ascii	"st_device\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 243


 10895      65766963 
 10895      6500
 10896              	.LASF208:
 10897 0513 636F6D6D 		.ascii	"commWrite\000"
 10897      57726974 
 10897      6500
 10898              	.LASF273:
 10899 051d 64656163 		.ascii	"deactivate_slaves\000"
 10899      74697661 
 10899      74655F73 
 10899      6C617665 
 10899      7300
 10900              	.LASF220:
 10901 052f 70616765 		.ascii	"pages\000"
 10901      7300
 10902              	.LASF300:
 10903 0535 6D656D49 		.ascii	"memInit\000"
 10903      6E697400 
 10904              	.LASF43:
 10905 053d 6D656E75 		.ascii	"menu_type\000"
 10905      5F747970 
 10905      6500
 10906              	.LASF53:
 10907 0547 4D454E55 		.ascii	"MENU_DEVICE\000"
 10907      5F444556 
 10907      49434500 
 10908              	.LASF69:
 10909 0553 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 10909      5345545F 
 10909      494E5055 
 10909      545300
 10910              	.LASF120:
 10911 0562 62756666 		.ascii	"buffer\000"
 10911      657200
 10912              	.LASF244:
 10913 0569 63757272 		.ascii	"curr_diff\000"
 10913      5F646966 
 10913      6600
 10914              	.LASF229:
 10915 0573 636D645F 		.ascii	"cmd_get_measurements\000"
 10915      6765745F 
 10915      6D656173 
 10915      7572656D 
 10915      656E7473 
 10916              	.LASF150:
 10917 0588 73706565 		.ascii	"speed\000"
 10917      6400
 10918              	.LASF167:
 10919 058e 72785F63 		.ascii	"rx_cmd\000"
 10919      6D6400
 10920              	.LASF112:
 10921 0595 54595045 		.ascii	"TYPE_DOUBLE\000"
 10921      5F444F55 
 10921      424C4500 
 10922              	.LASF270:
 10923 05a1 736C6176 		.ascii	"slave_motor_idx\000"
 10923      655F6D6F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 244


 10923      746F725F 
 10923      69647800 
 10924              	.LASF248:
 10925 05b1 636D645F 		.ascii	"cmd_get_inputs\000"
 10925      6765745F 
 10925      696E7075 
 10925      747300
 10926              	.LASF101:
 10927 05c0 41434B5F 		.ascii	"ACK_ERROR\000"
 10927      4552524F 
 10927      5200
 10928              	.LASF92:
 10929 05ca 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 10929      545F4D4F 
 10929      44455F45 
 10929      58544552 
 10929      4E414C00 
 10930              	.LASF189:
 10931 05de 696E6465 		.ascii	"index\000"
 10931      7800
 10932              	.LASF140:
 10933 05e4 6D617869 		.ascii	"maximum_pressure_kPa\000"
 10933      6D756D5F 
 10933      70726573 
 10933      73757265 
 10933      5F6B5061 
 10934              	.LASF42:
 10935 05f9 63757374 		.ascii	"custom_param\000"
 10935      6F6D5F70 
 10935      6172616D 
 10935      00
 10936              	.LASF258:
 10937 0606 66696C65 		.ascii	"filename_length\000"
 10937      6E616D65 
 10937      5F6C656E 
 10937      67746800 
 10938              	.LASF148:
 10939 0616 656E6162 		.ascii	"enabled\000"
 10939      6C656400 
 10940              	.LASF243:
 10941 061e 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 10941      52656164 
 10941      52657343 
 10941      75727246 
 10941      726F6D53 
 10942              	.LASF55:
 10943 0634 4D454E55 		.ascii	"MENU_WRIST\000"
 10943      5F575249 
 10943      535400
 10944              	.LASF297:
 10945 063f 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 10945      73657273 
 10945      5C6D676E 
 10945      6F63636F 
 10945      5C446F63 
 10946 066c 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 10946      485F5649 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 245


 10946      4245535C 
 10946      46575F57 
 10946      65617261 
 10947 069d 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 10947      56494245 
 10947      535F536F 
 10947      636B6574 
 10947      2E637964 
 10948              	.LASF286:
 10949 06b4 72657365 		.ascii	"reset_PSoC_flag\000"
 10949      745F5053 
 10949      6F435F66 
 10949      6C616700 
 10950              	.LASF269:
 10951 06c4 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 10951      5F616374 
 10951      5F777269 
 10951      73745F63 
 10951      6F6E7472 
 10952              	.LASF113:
 10953 06db 54595045 		.ascii	"TYPE_STRING\000"
 10953      5F535452 
 10953      494E4700 
 10954              	.LASF59:
 10955 06e7 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 10955      53544F52 
 10955      455F5041 
 10955      52414D53 
 10955      00
 10956              	.LASF7:
 10957 06f8 6C6F6E67 		.ascii	"long unsigned int\000"
 10957      20756E73 
 10957      69676E65 
 10957      6420696E 
 10957      7400
 10958              	.LASF63:
 10959 070a 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 10959      424F4F54 
 10959      4C4F4144 
 10959      455200
 10960              	.LASF210:
 10961 0719 6E756D5F 		.ascii	"num_of_bytes\000"
 10961      6F665F62 
 10961      79746573 
 10961      00
 10962              	.LASF98:
 10963 0726 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 10963      545F4D4F 
 10963      44455F4A 
 10963      4F595354 
 10963      49434B00 
 10964              	.LASF218:
 10965 073a 64697370 		.ascii	"displacement\000"
 10965      6C616365 
 10965      6D656E74 
 10965      00
 10966              	.LASF239:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 246


 10967 0747 636D645F 		.ascii	"cmd_get_vibrotactile_inputs\000"
 10967      6765745F 
 10967      76696272 
 10967      6F746163 
 10967      74696C65 
 10968              	.LASF172:
 10969 0763 7374725F 		.ascii	"str_sd_data\000"
 10969      73645F64 
 10969      61746100 
 10970              	.LASF137:
 10971 076f 736C6176 		.ascii	"slave_ID\000"
 10971      655F4944 
 10971      00
 10972              	.LASF102:
 10973 0778 41434B5F 		.ascii	"ACK_OK\000"
 10973      4F4B00
 10974              	.LASF104:
 10975 077f 54595045 		.ascii	"TYPE_FLAG\000"
 10975      5F464C41 
 10975      4700
 10976              	.LASF186:
 10977 0789 7061636B 		.ascii	"packet_length\000"
 10977      65745F6C 
 10977      656E6774 
 10977      6800
 10978              	.LASF29:
 10979 0797 43555354 		.ascii	"CUSTOM_REST_POS\000"
 10979      4F4D5F52 
 10979      4553545F 
 10979      504F5300 
 10980              	.LASF114:
 10981 07a7 63757272 		.ascii	"curr\000"
 10981      00
 10982              	.LASF129:
 10983 07ac 696E7075 		.ascii	"input_mode\000"
 10983      745F6D6F 
 10983      646500
 10984              	.LASF74:
 10985 07b7 434D445F 		.ascii	"CMD_GET_EMG\000"
 10985      4745545F 
 10985      454D4700 
 10986              	.LASF224:
 10987 07c3 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 10987      6E69745F 
 10987      536F6674 
 10987      48616E64 
 10987      50726F00 
 10988              	.LASF62:
 10989 07d7 434D445F 		.ascii	"CMD_GET_INFO\000"
 10989      4745545F 
 10989      494E464F 
 10989      00
 10990              	.LASF196:
 10991 07e4 6765745F 		.ascii	"get_IMU_param_list\000"
 10991      494D555F 
 10991      70617261 
 10991      6D5F6C69 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 247


 10991      737400
 10992              	.LASF161:
 10993 07f7 4D454E55 		.ascii	"MENU\000"
 10993      00
 10994              	.LASF52:
 10995 07fc 4D454E55 		.ascii	"MENU_DRIVER\000"
 10995      5F445249 
 10995      56455200 
 10996              	.LASF142:
 10997 0808 76696272 		.ascii	"vibrotactile_feedback_active\000"
 10997      6F746163 
 10997      74696C65 
 10997      5F666565 
 10997      64626163 
 10998              	.LASF73:
 10999 0825 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 10999      4745545F 
 10999      43555252 
 10999      5F414E44 
 10999      5F4D4541 
 11000              	.LASF295:
 11001 083b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11001      43313120 
 11001      352E342E 
 11001      31203230 
 11001      31363036 
 11002 086e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11002      20726576 
 11002      6973696F 
 11002      6E203233 
 11002      37373135 
 11003 08a1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11003      66756E63 
 11003      74696F6E 
 11003      2D736563 
 11003      74696F6E 
 11004              	.LASF116:
 11005 08c9 73745F72 		.ascii	"st_ref\000"
 11005      656600
 11006              	.LASF232:
 11007 08d0 636D645F 		.ascii	"cmd_get_joystick\000"
 11007      6765745F 
 11007      6A6F7973 
 11007      7469636B 
 11007      00
 11008              	.LASF78:
 11009 08e1 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 11009      5345545F 
 11009      43554646 
 11009      5F494E50 
 11009      55545300 
 11010              	.LASF282:
 11011 08f5 63616C69 		.ascii	"calib\000"
 11011      6200
 11012              	.LASF6:
 11013 08fb 5F5F7569 		.ascii	"__uint32_t\000"
 11013      6E743332 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 248


 11013      5F7400
 11014              	.LASF8:
 11015 0906 6C6F6E67 		.ascii	"long long int\000"
 11015      206C6F6E 
 11015      6720696E 
 11015      7400
 11016              	.LASF126:
 11017 0914 73745F73 		.ascii	"st_slave\000"
 11017      6C617665 
 11017      00
 11018              	.LASF261:
 11019 091d 76696272 		.ascii	"vibrotactile_control\000"
 11019      6F746163 
 11019      74696C65 
 11019      5F636F6E 
 11019      74726F6C 
 11020              	.LASF106:
 11021 0932 54595045 		.ascii	"TYPE_UINT8\000"
 11021      5F55494E 
 11021      543800
 11022              	.LASF146:
 11023 093d 53485F63 		.ascii	"SH_config\000"
 11023      6F6E6669 
 11023      6700
 11024              	.LASF237:
 11025 0947 636D645F 		.ascii	"cmd_get_currents\000"
 11025      6765745F 
 11025      63757272 
 11025      656E7473 
 11025      00
 11026              	.LASF19:
 11027 0958 646F7562 		.ascii	"double\000"
 11027      6C6500
 11028              	.LASF89:
 11029 095f 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 11029      4745545F 
 11029      53445F53 
 11029      494E474C 
 11029      455F4649 
 11030              	.LASF151:
 11031 0976 72657065 		.ascii	"repetitions\000"
 11031      74697469 
 11031      6F6E7300 
 11032              	.LASF274:
 11033 0982 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11033      52784275 
 11033      66666572 
 11033      00
 11034              	.LASF18:
 11035 098f 666C6F61 		.ascii	"float\000"
 11035      7400
 11036              	.LASF90:
 11037 0995 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 11037      52454D4F 
 11037      56455F53 
 11037      445F5349 
 11037      4E474C45 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 249


 11038              	.LASF264:
 11039 09af 6572725F 		.ascii	"err_pressure\000"
 11039      70726573 
 11039      73757265 
 11039      00
 11040              	.LASF184:
 11041 09bc 636F756E 		.ascii	"count\000"
 11041      7400
 11042              	.LASF164:
 11043 09c2 73745F61 		.ascii	"st_adc_meas\000"
 11043      64635F6D 
 11043      65617300 
 11044              	.LASF179:
 11045 09ce 6D5F6164 		.ascii	"m_addr\000"
 11045      647200
 11046              	.LASF281:
 11047 09d5 635F6D65 		.ascii	"c_mem\000"
 11047      6D00
 11048              	.LASF212:
 11049 09db 64617461 		.ascii	"data_array\000"
 11049      5F617272 
 11049      617900
 11050              	.LASF10:
 11051 09e6 756E7369 		.ascii	"unsigned int\000"
 11051      676E6564 
 11051      20696E74 
 11051      00
 11052              	.LASF225:
 11053 09f3 6D656D49 		.ascii	"memInit_Master\000"
 11053      6E69745F 
 11053      4D617374 
 11053      657200
 11054              	.LASF202:
 11055 0a02 70726570 		.ascii	"prepare_SD_legend\000"
 11055      6172655F 
 11055      53445F6C 
 11055      6567656E 
 11055      6400
 11056              	.LASF56:
 11057 0a14 53485F63 		.ascii	"SH_command\000"
 11057      6F6D6D61 
 11057      6E6400
 11058              	.LASF108:
 11059 0a1f 54595045 		.ascii	"TYPE_UINT16\000"
 11059      5F55494E 
 11059      54313600 
 11060              	.LASF145:
 11061 0a2b 666C6167 		.ascii	"flag\000"
 11061      00
 11062              	.LASF37:
 11063 0a30 43555354 		.ascii	"CUSTOM_INPUT_2\000"
 11063      4F4D5F49 
 11063      4E505554 
 11063      5F3200
 11064              	.LASF267:
 11065 0a3f 785F7661 		.ascii	"x_value\000"
 11065      6C756500 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 250


 11066              	.LASF233:
 11067 0a47 636D645F 		.ascii	"cmd_set_inputs\000"
 11067      7365745F 
 11067      696E7075 
 11067      747300
 11068              	.LASF47:
 11069 0a56 4D454E55 		.ascii	"MENU_R_L\000"
 11069      5F525F4C 
 11069      00
 11070              	.LASF177:
 11071 0a5f 4D454E55 		.ascii	"MENU_LIST\000"
 11071      5F4C4953 
 11071      5400
 11072              	.LASF93:
 11073 0a69 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 11073      545F4D4F 
 11073      44455F45 
 11073      4E434F44 
 11073      45523300 
 11074              	.LASF209:
 11075 0a7d 636F6D6D 		.ascii	"commWriteID\000"
 11075      57726974 
 11075      65494400 
 11076              	.LASF85:
 11077 0a89 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 11077      4745545F 
 11077      454E434F 
 11077      4445525F 
 11077      434F4E46 
 11078              	.LASF162:
 11079 0a9e 4E554D5F 		.ascii	"NUM_STR\000"
 11079      53545200 
 11080              	.LASF235:
 11081 0aa6 636D645F 		.ascii	"cmd_get_activate\000"
 11081      6765745F 
 11081      61637469 
 11081      76617465 
 11081      00
 11082              	.LASF268:
 11083 0ab7 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 11083      61637469 
 11083      76617469 
 11083      6F6E5F76 
 11083      656C6F63 
 11084              	.LASF111:
 11085 0ad3 54595045 		.ascii	"TYPE_FLOAT\000"
 11085      5F464C4F 
 11085      415400
 11086              	.LASF39:
 11087 0ade 43555354 		.ascii	"CUSTOM_POS_LIM_2\000"
 11087      4F4D5F50 
 11087      4F535F4C 
 11087      494D5F32 
 11087      00
 11088              	.LASF200:
 11089 0aef 70726570 		.ascii	"prepare_R01_info\000"
 11089      6172655F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 251


 11089      5230315F 
 11089      696E666F 
 11089      00
 11090              	.LASF107:
 11091 0b00 54595045 		.ascii	"TYPE_INT16\000"
 11091      5F494E54 
 11091      313600
 11092              	.LASF131:
 11093 0b0b 656D675F 		.ascii	"emg_threshold\000"
 11093      74687265 
 11093      73686F6C 
 11093      6400
 11094              	.LASF77:
 11095 0b19 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 11095      4745545F 
 11095      43555252 
 11095      5F444946 
 11095      4600
 11096              	.LASF41:
 11097 0b2b 43555354 		.ascii	"CUSTOM_DEV_TYPE\000"
 11097      4F4D5F44 
 11097      45565F54 
 11097      59504500 
 11098              	.LASF227:
 11099 0b3b 6D656D49 		.ascii	"memInit_AirChambers_Vibrotactile_Fb\000"
 11099      6E69745F 
 11099      41697243 
 11099      68616D62 
 11099      6572735F 
 11100              	.LASF22:
 11101 0b5f 6C6F6E67 		.ascii	"long double\000"
 11101      20646F75 
 11101      626C6500 
 11102              	.LASF110:
 11103 0b6b 54595045 		.ascii	"TYPE_UINT32\000"
 11103      5F55494E 
 11103      54333200 
 11104              	.LASF138:
 11105 0b77 73745F46 		.ascii	"st_FB_spec\000"
 11105      425F7370 
 11105      656300
 11106              	.LASF214:
 11107 0b82 63686563 		.ascii	"checksum\000"
 11107      6B73756D 
 11107      00
 11108              	.LASF66:
 11109 0b8b 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 11109      48414E44 
 11109      5F43414C 
 11109      49425241 
 11109      544500
 11110              	.LASF291:
 11111 0b9e 56545F72 		.ascii	"VT_ref\000"
 11111      656600
 11112              	.LASF271:
 11113 0ba5 64726976 		.ascii	"drive_slave\000"
 11113      655F736C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 252


 11113      61766500 
 11114              	.LASF100:
 11115 0bb1 61636B6E 		.ascii	"acknowledgment_values\000"
 11115      6F776C65 
 11115      64676D65 
 11115      6E745F76 
 11115      616C7565 
 11116              	.LASF223:
 11117 0bc7 6D656D52 		.ascii	"memRestore\000"
 11117      6573746F 
 11117      726500
 11118              	.LASF198:
 11119 0bd2 696E666F 		.ascii	"info_string\000"
 11119      5F737472 
 11119      696E6700 
 11120              	.LASF174:
 11121 0bde 6E756D5F 		.ascii	"num_params\000"
 11121      70617261 
 11121      6D7300
 11122              	.LASF9:
 11123 0be9 6C6F6E67 		.ascii	"long long unsigned int\000"
 11123      206C6F6E 
 11123      6720756E 
 11123      7369676E 
 11123      65642069 
 11124              	.LASF163:
 11125 0c00 63757374 		.ascii	"custom\000"
 11125      6F6D00
 11126              	.LASF51:
 11127 0c07 4D454E55 		.ascii	"MENU_USER\000"
 11127      5F555345 
 11127      5200
 11128              	.LASF109:
 11129 0c11 54595045 		.ascii	"TYPE_INT32\000"
 11129      5F494E54 
 11129      333200
 11130              	.LASF121:
 11131 0c1c 6C656E67 		.ascii	"length\000"
 11131      746800
 11132              	.LASF178:
 11133 0c23 73656E64 		.ascii	"sendToDevice\000"
 11133      546F4465 
 11133      76696365 
 11133      00
 11134              	.LASF115:
 11135 0c30 6F6E6F66 		.ascii	"onoff\000"
 11135      6600
 11136              	.LASF76:
 11137 0c36 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 11137      4745545F 
 11137      41434345 
 11137      4C00
 11138              	.LASF230:
 11139 0c44 636D645F 		.ascii	"cmd_get_velocities\000"
 11139      6765745F 
 11139      76656C6F 
 11139      63697469 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 253


 11139      657300
 11140              	.LASF222:
 11141 0c57 6D656D52 		.ascii	"memRecall\000"
 11141      6563616C 
 11141      6C00
 11142              	.LASF249:
 11143 0c61 636D645F 		.ascii	"cmd_store_params\000"
 11143      73746F72 
 11143      655F7061 
 11143      72616D73 
 11143      00
 11144              	.LASF185:
 11145 0c72 6175785F 		.ascii	"aux_char\000"
 11145      63686172 
 11145      00
 11146              	.LASF81:
 11147 0c7b 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 11147      5345545F 
 11147      42415544 
 11147      52415445 
 11147      00
 11148              	.LASF21:
 11149 0c8c 72656738 		.ascii	"reg8\000"
 11149      00
 11150              	.LASF141:
 11151 0c91 70726F70 		.ascii	"prop_err_fb_gain\000"
 11151      5F657272 
 11151      5F66625F 
 11151      6761696E 
 11151      00
 11152              	.LASF206:
 11153 0ca2 636F6D6D 		.ascii	"commWrite_old_id\000"
 11153      57726974 
 11153      655F6F6C 
 11153      645F6964 
 11153      00
 11154              	.LASF188:
 11155 0cb3 6D616E61 		.ascii	"manage_param_list\000"
 11155      67655F70 
 11155      6172616D 
 11155      5F6C6973 
 11155      7400
 11156              	.LASF61:
 11157 0cc5 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 11157      52455354 
 11157      4F52455F 
 11157      50415241 
 11157      4D5300
 11158              	.LASF49:
 11159 0cd8 4D454E55 		.ascii	"MENU_EXP\000"
 11159      5F455850 
 11159      00
 11160              	.LASF287:
 11161 0ce1 73644669 		.ascii	"sdFile\000"
 11161      6C6500
 11162              	.LASF175:
 11163 0ce8 6E756D5F 		.ascii	"num_menus\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 254


 11163      6D656E75 
 11163      7300
 11164              	.LASF201:
 11165 0cf2 70726570 		.ascii	"prepare_SD_param_info\000"
 11165      6172655F 
 11165      53445F70 
 11165      6172616D 
 11165      5F696E66 
 11166              	.LASF199:
 11167 0d08 70726570 		.ascii	"prepare_counter_info\000"
 11167      6172655F 
 11167      636F756E 
 11167      7465725F 
 11167      696E666F 
 11168              	.LASF203:
 11169 0d1d 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 11169      6172655F 
 11169      53445F45 
 11169      4D475F48 
 11169      6973746F 
 11170              	.LASF207:
 11171 0d3b 6F6C645F 		.ascii	"old_id\000"
 11171      696400
 11172              	.LASF298:
 11173 0d42 5F5F5245 		.ascii	"__REV16\000"
 11173      56313600 
 11174              	.LASF157:
 11175 0d4a 5641525F 		.ascii	"VAR_P\000"
 11175      5000
 11176              	.LASF236:
 11177 0d50 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 11177      6765745F 
 11177      63757272 
 11177      5F616E64 
 11177      5F6D6561 
 11178              	.LASF171:
 11179 0d66 696E666F 		.ascii	"info_type\000"
 11179      5F747970 
 11179      6500
 11180              	.LASF54:
 11181 0d70 4D454E55 		.ascii	"MENU_FSM\000"
 11181      5F46534D 
 11181      00
 11182              	.LASF88:
 11183 0d79 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 11183      4745545F 
 11183      4144435F 
 11183      52415700 
 11184              	.LASF99:
 11185 0d89 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 11185      545F4D4F 
 11185      44455F45 
 11185      4D475F50 
 11185      524F504F 
 11186              	.LASF84:
 11187 0da8 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 11187      4745545F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 255


 11187      494D555F 
 11187      50415241 
 11187      4D00
 11188              	.LASF278:
 11189 0dba 675F6662 		.ascii	"g_fb_meas\000"
 11189      5F6D6561 
 11189      7300
 11190              	.LASF284:
 11191 0dc4 74696D65 		.ascii	"timer_value0\000"
 11191      725F7661 
 11191      6C756530 
 11191      00
 11192              	.LASF86:
 11193 0dd1 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 11193      4745545F 
 11193      454E434F 
 11193      4445525F 
 11193      52415700 
 11194              	.LASF154:
 11195 0de5 72657365 		.ascii	"reset\000"
 11195      7400
 11196              	.LASF153:
 11197 0deb 6E616D65 		.ascii	"name\000"
 11197      00
 11198              	.LASF71:
 11199 0df0 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 11199      4745545F 
 11199      4D454153 
 11199      5552454D 
 11199      454E5453 
 11200              	.LASF143:
 11201 0e05 61697263 		.ascii	"airchamber_feedback_active\000"
 11201      68616D62 
 11201      65725F66 
 11201      65656462 
 11201      61636B5F 
 11202              	.LASF277:
 11203 0e20 675F6164 		.ascii	"g_adc_measOld\000"
 11203      635F6D65 
 11203      61734F6C 
 11203      6400
 11204              	.LASF254:
 11205 0e2e 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 11205      6765745F 
 11205      656E636F 
 11205      6465725F 
 11205      72617700 
 11206              	.LASF13:
 11207 0e42 75696E74 		.ascii	"uint8\000"
 11207      3800
 11208              	.LASF165:
 11209 0e48 636F6D6D 		.ascii	"commProcess\000"
 11209      50726F63 
 11209      65737300 
 11210              	.LASF2:
 11211 0e54 73686F72 		.ascii	"short int\000"
 11211      7420696E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 256


 11211      7400
 11212              	.LASF30:
 11213 0e5e 43555354 		.ascii	"CUSTOM_REST_POS_DELAY\000"
 11213      4F4D5F52 
 11213      4553545F 
 11213      504F535F 
 11213      44454C41 
 11214              	.LASF70:
 11215 0e74 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 11215      4745545F 
 11215      494E5055 
 11215      545300
 11216              	.LASF87:
 11217 0e83 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 11217      4745545F 
 11217      4144435F 
 11217      434F4E46 
 11217      00
 11218              	.LASF58:
 11219 0e94 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 11219      5345545F 
 11219      5A45524F 
 11219      5300
 11220              	.LASF251:
 11221 0ea2 6175785F 		.ascii	"aux_int16\000"
 11221      696E7431 
 11221      3600
 11222              	.LASF294:
 11223 0eac 45455052 		.ascii	"EEPROM_ADDR\000"
 11223      4F4D5F41 
 11223      44445200 
 11224              	.LASF25:
 11225 0eb8 43555354 		.ascii	"CUSTOM_CURR_PID\000"
 11225      4F4D5F43 
 11225      5552525F 
 11225      50494400 
 11226              	.LASF194:
 11227 0ec8 4E554D5F 		.ascii	"NUM_PARAMs\000"
 11227      50415241 
 11227      4D7300
 11228              	.LASF75:
 11229 0ed3 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 11229      4745545F 
 11229      56454C4F 
 11229      43495449 
 11229      455300
 11230              	.LASF65:
 11231 0ee6 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 11231      4745545F 
 11231      50415241 
 11231      4D5F4C49 
 11231      535400
 11232              	.LASF103:
 11233 0ef9 64617461 		.ascii	"data_types\000"
 11233      5F747970 
 11233      657300
 11234              	.LASF16:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 257


 11235 0f04 696E7431 		.ascii	"int16\000"
 11235      3600
 11236              	.LASF48:
 11237 0f0a 4D454E55 		.ascii	"MENU_ON_OFF\000"
 11237      5F4F4E5F 
 11237      4F464600 
 11238              	.LASF34:
 11239 0f16 43555354 		.ascii	"CUSTOM_DRIVER\000"
 11239      4F4D5F44 
 11239      52495645 
 11239      5200
 11240              	.LASF27:
 11241 0f24 43555354 		.ascii	"CUSTOM_MEAS_OFF\000"
 11241      4F4D5F4D 
 11241      4541535F 
 11241      4F464600 
 11242              	.LASF253:
 11243 0f34 636D645F 		.ascii	"cmd_get_encoder_map\000"
 11243      6765745F 
 11243      656E636F 
 11243      6465725F 
 11243      6D617000 
 11244              	.LASF12:
 11245 0f48 75696E74 		.ascii	"uint32_t\000"
 11245      33325F74 
 11245      00
 11246              	.LASF176:
 11247 0f51 50415241 		.ascii	"PARAM_LIST\000"
 11247      4D5F4C49 
 11247      535400
 11248              	.LASF215:
 11249 0f5c 73656E64 		.ascii	"sendAcknowledgment\000"
 11249      41636B6E 
 11249      6F776C65 
 11249      64676D65 
 11249      6E7400
 11250              	.LASF183:
 11251 0f6f 6175785F 		.ascii	"aux_int32\000"
 11251      696E7433 
 11251      3200
 11252              	.LASF124:
 11253 0f79 62617564 		.ascii	"baud_rate\000"
 11253      5F726174 
 11253      6500
 11254              	.LASF241:
 11255 0f83 745F656E 		.ascii	"t_end\000"
 11255      6400
 11256              	.LASF238:
 11257 0f89 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 11257      6765745F 
 11257      63757272 
 11257      656E7473 
 11257      5F666F72 
 11258              	.LASF83:
 11259 0fa3 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 11259      4745545F 
 11259      494D555F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 258


 11259      52454144 
 11259      494E4753 
 11260              	.LASF193:
 11261 0fb8 70617261 		.ascii	"param_type\000"
 11261      6D5F7479 
 11261      706500
 11262              	.LASF289:
 11263 0fc3 73645230 		.ascii	"sdR01File\000"
 11263      3146696C 
 11263      6500
 11264              	.LASF211:
 11265 0fcd 4C435243 		.ascii	"LCRChecksum\000"
 11265      6865636B 
 11265      73756D00 
 11266              	.LASF3:
 11267 0fd9 73686F72 		.ascii	"short unsigned int\000"
 11267      7420756E 
 11267      7369676E 
 11267      65642069 
 11267      6E7400
 11268              	.LASF280:
 11269 0fec 675F6D65 		.ascii	"g_mem\000"
 11269      6D00
 11270              	.LASF276:
 11271 0ff2 675F6164 		.ascii	"g_adc_meas\000"
 11271      635F6D65 
 11271      617300
 11272              	.LASF139:
 11273 0ffd 6D61785F 		.ascii	"max_residual_current\000"
 11273      72657369 
 11273      6475616C 
 11273      5F637572 
 11273      72656E74 
 11274              	.LASF144:
 11275 1012 73745F65 		.ascii	"st_eeprom\000"
 11275      6570726F 
 11275      6D00
 11276              	.LASF158:
 11277 101c 54595045 		.ascii	"TYPES\000"
 11277      5300
 11278              	.LASF17:
 11279 1022 696E7433 		.ascii	"int32\000"
 11279      3200
 11280              	.LASF169:
 11281 1028 696E666F 		.ascii	"infoGet\000"
 11281      47657400 
 11282              	.LASF290:
 11283 1030 6D617374 		.ascii	"master_mode\000"
 11283      65725F6D 
 11283      6F646500 
 11284              	.LASF5:
 11285 103c 5F5F696E 		.ascii	"__int32_t\000"
 11285      7433325F 
 11285      7400
 11286              	.LASF132:
 11287 1046 656D675F 		.ascii	"emg_max_value\000"
 11287      6D61785F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccqWKcdu.s 			page 259


 11287      76616C75 
 11287      6500
 11288              	.LASF246:
 11289 1054 636F6D6D 		.ascii	"commReadIMUFromSH\000"
 11289      52656164 
 11289      494D5546 
 11289      726F6D53 
 11289      4800
 11290              	.LASF296:
 11291 1066 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 11291      72635C63 
 11291      6F6D6D61 
 11291      6E645F70 
 11291      726F6365 
 11292              	.LASF91:
 11293 1082 53485F69 		.ascii	"SH_input_mode\000"
 11293      6E707574 
 11293      5F6D6F64 
 11293      6500
 11294              	.LASF24:
 11295 1090 43555354 		.ascii	"CUSTOM_POS_PID\000"
 11295      4F4D5F50 
 11295      4F535F50 
 11295      494400
 11296              	.LASF105:
 11297 109f 54595045 		.ascii	"TYPE_INT8\000"
 11297      5F494E54 
 11297      3800
 11298              	.LASF205:
 11299 10a9 494D555F 		.ascii	"IMU_reading_info\000"
 11299      72656164 
 11299      696E675F 
 11299      696E666F 
 11299      00
 11300              	.LASF14:
 11301 10ba 75696E74 		.ascii	"uint16\000"
 11301      313600
 11302              	.LASF181:
 11303 10c1 6175785F 		.ascii	"aux_str\000"
 11303      73747200 
 11304              	.LASF57:
 11305 10c9 434D445F 		.ascii	"CMD_PING\000"
 11305      50494E47 
 11305      00
 11306              	.LASF234:
 11307 10d2 636D645F 		.ascii	"cmd_activate\000"
 11307      61637469 
 11307      76617465 
 11307      00
 11308              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
