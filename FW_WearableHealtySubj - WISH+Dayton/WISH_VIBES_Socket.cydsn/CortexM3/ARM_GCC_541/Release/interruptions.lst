ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e E0E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 744B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D880 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 E1000000 		.word	.L12+1
 179 0034 2F010000 		.word	.L13+1
 180 0038 99010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6C4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6B4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6A4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 694B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 684A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 674B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 654B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 634B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 614B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 604B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5D4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 8


 225              		.loc 1 175 0
 226 007c 5C4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A680 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5A4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A180 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 574B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09C80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 97E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (master_mode && rx_data == c_mem.MS.
 249              		.loc 1 186 0
 250 00a2 544B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 0CD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 09D0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b4 504B     		ldr	r3, .L31+12
 261 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 262 00b8 002B     		cmp	r3, #0
 263 00ba 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00bc 4D4B     		ldr	r3, .L31+8
 266 00be 93F8C132 		ldrb	r3, [r3, #705]	@ zero_extendqisi2
 267 00c2 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 9


 269 00c6 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00c8 0023     		movs	r3, #0
 273 00ca FB71     		strb	r3, [r7, #7]
 274 00cc 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00ce 0123     		movs	r3, #1
 278 00d0 FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d2 4A4B     		ldr	r3, .L31+16
 282 00d4 0022     		movs	r2, #0
 283 00d6 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00d8 444B     		ldr	r3, .L31
 286 00da 0222     		movs	r2, #2
 287 00dc 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00de 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00e0 464A     		ldr	r2, .L31+16
 293 00e2 7B79     		ldrb	r3, [r7, #5]
 294 00e4 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e6 454B     		ldr	r3, .L31+16
 297 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00ea 012B     		cmp	r3, #1
 299 00ec 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00ee 434B     		ldr	r3, .L31+16
 302 00f0 0022     		movs	r2, #0
 303 00f2 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 10


 305 00f4 3D4B     		ldr	r3, .L31
 306 00f6 0022     		movs	r2, #0
 307 00f8 1A70     		strb	r2, [r3]
 308 00fa 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fc 3F4B     		ldr	r3, .L31+16
 312 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0100 802B     		cmp	r3, #128
 314 0102 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0104 3D4B     		ldr	r3, .L31+16
 317 0106 0022     		movs	r2, #0
 318 0108 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 010a 384B     		ldr	r3, .L31
 321 010c 0022     		movs	r2, #0
 322 010e 1A70     		strb	r2, [r3]
 323 0110 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0112 3B4B     		ldr	r3, .L31+20
 327 0114 0022     		movs	r2, #0
 328 0116 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 0118 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 011a 002B     		cmp	r3, #0
 332 011c 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 011e 334B     		ldr	r3, .L31
 335 0120 0322     		movs	r2, #3
 336 0122 1A70     		strb	r2, [r3]
 337 0124 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0126 314B     		ldr	r3, .L31
 341 0128 0422     		movs	r2, #4
 342 012a 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012c 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 012e 344B     		ldr	r3, .L31+20
 348 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0132 1946     		mov	r1, r3
 350 0134 334A     		ldr	r2, .L31+24
 351 0136 7B79     		ldrb	r3, [r7, #5]
 352 0138 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 013a 314B     		ldr	r3, .L31+20
 355 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 013e 0133     		adds	r3, r3, #1
 357 0140 DAB2     		uxtb	r2, r3
 358 0142 2F4B     		ldr	r3, .L31+20
 359 0144 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0146 2E4B     		ldr	r3, .L31+20
 362 0148 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 014a 2C4B     		ldr	r3, .L31+16
 364 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 014e 9A42     		cmp	r2, r3
 366 0150 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0152 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0154 002B     		cmp	r3, #0
 370 0156 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 0158 284B     		ldr	r3, .L31+16
 373 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015c 1A46     		mov	r2, r3
 375 015e 2949     		ldr	r1, .L31+24
 376 0160 2948     		ldr	r0, .L31+28
 377 0162 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0166 254B     		ldr	r3, .L31+16
 380 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 016a 1AB2     		sxth	r2, r3
 382 016c 264B     		ldr	r3, .L31+28
 383 016e A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0172 254B     		ldr	r3, .L31+28
 386 0174 0122     		movs	r2, #1
 387 0176 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 017a FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 017e 204B     		ldr	r3, .L31+20
 393 0180 0022     		movs	r2, #0
 394 0182 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0184 1D4B     		ldr	r3, .L31+16
 397 0186 0022     		movs	r2, #0
 398 0188 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 018a 184B     		ldr	r3, .L31
 401 018c 0022     		movs	r2, #0
 402 018e 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 0190 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0192 0133     		adds	r3, r3, #1
 406 0194 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0196 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 0198 184B     		ldr	r3, .L31+16
 412 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019c 013B     		subs	r3, r3, #1
 414 019e DAB2     		uxtb	r2, r3
 415 01a0 164B     		ldr	r3, .L31+16
 416 01a2 1A70     		strb	r2, [r3]
 417 01a4 154B     		ldr	r3, .L31+16
 418 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01a8 002B     		cmp	r3, #0
 420 01aa 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01ac 144B     		ldr	r3, .L31+20
 423 01ae 0022     		movs	r2, #0
 424 01b0 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b2 124B     		ldr	r3, .L31+16
 427 01b4 0022     		movs	r2, #0
 428 01b6 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01b8 0120     		movs	r0, #1
 431 01ba FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01be 0020     		movs	r0, #0
 434 01c0 FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c4 094B     		ldr	r3, .L31
 437 01c6 0022     		movs	r2, #0
 438 01c8 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01ca BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01cc 0133     		adds	r3, r3, #1
 442 01ce BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01d0 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d2 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d6 0346     		mov	r3, r0
 450 01d8 002B     		cmp	r3, #0
 451 01da 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01de 632B     		cmp	r3, #99
 455 01e0 7FF616AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e4 00BF     		nop
 459 01e6 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01e8 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01ea 80BD     		pop	{r7, pc}
 465              	.L32:
 466              		.align	2
 467              	.L31:
 468 01ec 00000000 		.word	state.10225
 469 01f0 04000000 		.word	rx_queue.10229
 470 01f4 00000000 		.word	c_mem
 471 01f8 00000000 		.word	master_mode
 472 01fc 07000000 		.word	data_packet_length.10227
 473 0200 08000000 		.word	data_packet_index.10226
 474 0204 0C000000 		.word	data_packet_buffer.10228
 475 0208 00000000 		.word	g_rx
 476              		.cfi_endproc
 477              	.LFE66:
 478              		.size	interrupt_manager, .-interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 14


 479              		.section	.rodata
 480 001d 000000   		.align	2
 481              	.LC0:
 482 0020 00       		.ascii	"\000"
 483              		.global	__aeabi_i2f
 484              		.global	__aeabi_fdiv
 485              		.section	.text.function_scheduler,"ax",%progbits
 486              		.align	2
 487              		.global	function_scheduler
 488              		.thumb
 489              		.thumb_func
 490              		.type	function_scheduler, %function
 491              	function_scheduler:
 492              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 493              		.loc 1 268 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 17504
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 B0B5     		push	{r4, r5, r7, lr}
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 4, -16
 500              		.cfi_offset 5, -12
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 ADF5884D 		sub	sp, sp, #17408
 504              		.cfi_def_cfa_offset 17424
 505 0006 98B0     		sub	sp, sp, #96
 506              		.cfi_def_cfa_offset 17520
 507 0008 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 509              		.loc 1 272 0
 510 000a 07F56A53 		add	r3, r7, #14976
 511 000e 03F11803 		add	r3, r3, #24
 512 0012 0022     		movs	r2, #0
 513 0014 1A60     		str	r2, [r3]
 514 0016 0433     		adds	r3, r3, #4
 515 0018 4FF41C62 		mov	r2, #2496
 516 001c 0021     		movs	r1, #0
 517 001e 1846     		mov	r0, r3
 518 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 519              		.loc 1 274 0
 520 0024 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 15


 521 0026 07F58842 		add	r2, r7, #17408
 522 002a 02F15F02 		add	r2, r2, #95
 523 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 524              		.loc 1 275 0
 525 0030 0123     		movs	r3, #1
 526 0032 07F58842 		add	r2, r7, #17408
 527 0036 02F15E02 		add	r2, r2, #94
 528 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 529              		.loc 1 277 0
 530 003c 0020     		movs	r0, #0
 531 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 532              		.loc 1 278 0
 533 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 534 0046 0346     		mov	r3, r0
 535 0048 1A46     		mov	r2, r3
 536 004a B34B     		ldr	r3, .L64
 537 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 538              		.loc 1 281 0
 539 004e 0120     		movs	r0, #1
 540 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 541              		.loc 1 285 0
 542 0054 B14B     		ldr	r3, .L64+4
 543 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 544 0058 002B     		cmp	r3, #0
 545 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 546              		.loc 1 286 0
 547 005c AF4B     		ldr	r3, .L64+4
 548 005e 0022     		movs	r2, #0
 549 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 550              		.loc 1 287 0
 551 0062 FFF7FEFF 		bl	interrupt_manager
 552              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****    
 290:..\src/interruptions.c ****             // if master_mode parameter is set to 1
 291:..\src/interruptions.c ****             if (g_mem.MS.master_mode_active){  
 553              		.loc 1 291 0
 554 0066 AE4B     		ldr	r3, .L64+8
 555 0068 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 556 006c 002B     		cmp	r3, #0
 557 006e 11D0     		beq	.L35
 292:..\src/interruptions.c ****                 
 293:..\src/interruptions.c ****                 // Check if voltage on pin MASTER MODE VOLTAGE, set by a physical switch, is HIGH o
 294:..\src/interruptions.c ****                 // This is a way to force exit from master_mode during execution, since USB command
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 16


 295:..\src/interruptions.c ****                 // are hampered by the communications between the two boards (slave and master)
 296:..\src/interruptions.c ****                 
 297:..\src/interruptions.c ****                 if (flag_master < 2000)       // if voltage is LOW, exit master mode
 558              		.loc 1 297 0
 559 0070 AC4B     		ldr	r3, .L64+12
 560 0072 1B68     		ldr	r3, [r3]
 561 0074 B3F5FA6F 		cmp	r3, #2000
 562 0078 03DA     		bge	.L36
 298:..\src/interruptions.c ****                     master_mode = 0;
 563              		.loc 1 298 0
 564 007a AB4B     		ldr	r3, .L64+16
 565 007c 0022     		movs	r2, #0
 566 007e 1A70     		strb	r2, [r3]
 567 0080 0BE0     		b	.L38
 568              	.L36:
 299:..\src/interruptions.c ****                 
 300:..\src/interruptions.c ****                 else if (flag_master > 2000)  // if voltage is HIGH, enter master mode
 569              		.loc 1 300 0
 570 0082 A84B     		ldr	r3, .L64+12
 571 0084 1B68     		ldr	r3, [r3]
 572 0086 B3F5FA6F 		cmp	r3, #2000
 573 008a 06DD     		ble	.L38
 301:..\src/interruptions.c ****                     master_mode = 1;
 574              		.loc 1 301 0
 575 008c A64B     		ldr	r3, .L64+16
 576 008e 0122     		movs	r2, #1
 577 0090 1A70     		strb	r2, [r3]
 578 0092 02E0     		b	.L38
 579              	.L35:
 302:..\src/interruptions.c ****             }
 303:..\src/interruptions.c ****             
 304:..\src/interruptions.c ****             else{
 305:..\src/interruptions.c ****                 master_mode = 0;
 580              		.loc 1 305 0
 581 0094 A44B     		ldr	r3, .L64+16
 582 0096 0022     		movs	r2, #0
 583 0098 1A70     		strb	r2, [r3]
 584              	.L38:
 306:..\src/interruptions.c ****             }
 307:..\src/interruptions.c ****                     
 308:..\src/interruptions.c ****             if (master_mode){
 585              		.loc 1 308 0
 586 009a A34B     		ldr	r3, .L64+16
 587 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 009e 002B     		cmp	r3, #0
 589 00a0 56D0     		beq	.L39
 309:..\src/interruptions.c ****                 
 310:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber and Vi
 311:..\src/interruptions.c ****                 if (g_mem.FB.vibrotactile_feedback_active && g_mem.FB.airchamber_feedback_active){ 
 590              		.loc 1 311 0
 591 00a2 9F4B     		ldr	r3, .L64+8
 592 00a4 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 593 00a8 002B     		cmp	r3, #0
 594 00aa 0FD0     		beq	.L40
 595              		.loc 1 311 0 is_stmt 0 discriminator 1
 596 00ac 9C4B     		ldr	r3, .L64+8
 597 00ae 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 17


 598 00b2 002B     		cmp	r3, #0
 599 00b4 0AD0     		beq	.L40
 312:..\src/interruptions.c ****                     
 313:..\src/interruptions.c ****                     LED_CTRL_Write(GREEN);
 600              		.loc 1 313 0 is_stmt 1
 601 00b6 0220     		movs	r0, #2
 602 00b8 FFF7FEFF 		bl	LED_CTRL_Write
 314:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 603              		.loc 1 314 0
 604 00bc 0020     		movs	r0, #0
 605 00be FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 315:..\src/interruptions.c ****                 
 316:..\src/interruptions.c ****                     air_chambers_control();
 606              		.loc 1 316 0
 607 00c2 FFF7FEFF 		bl	air_chambers_control
 317:..\src/interruptions.c ****                     vibrotactile_control();
 608              		.loc 1 317 0
 609 00c6 FFF7FEFF 		bl	vibrotactile_control
 610 00ca 1AE0     		b	.L41
 611              	.L40:
 318:..\src/interruptions.c ****                   
 319:..\src/interruptions.c ****                 }
 320:..\src/interruptions.c ****                 
 321:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber contro
 322:..\src/interruptions.c ****                 else if (g_mem.FB.airchamber_feedback_active){
 612              		.loc 1 322 0
 613 00cc 944B     		ldr	r3, .L64+8
 614 00ce 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
 615 00d2 002B     		cmp	r3, #0
 616 00d4 08D0     		beq	.L42
 323:..\src/interruptions.c ****                     
 324:..\src/interruptions.c ****                     LED_CTRL_Write(RED);
 617              		.loc 1 324 0
 618 00d6 0120     		movs	r0, #1
 619 00d8 FFF7FEFF 		bl	LED_CTRL_Write
 325:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 620              		.loc 1 325 0
 621 00dc 0020     		movs	r0, #0
 622 00de FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 326:..\src/interruptions.c ****                     
 327:..\src/interruptions.c ****                     air_chambers_control();
 623              		.loc 1 327 0
 624 00e2 FFF7FEFF 		bl	air_chambers_control
 625 00e6 0CE0     		b	.L41
 626              	.L42:
 328:..\src/interruptions.c ****                     
 329:..\src/interruptions.c ****                 }
 330:..\src/interruptions.c ****             
 331:..\src/interruptions.c ****                 //-------------------------------------------------------------- Vibrotactile contr
 332:..\src/interruptions.c ****                 else if (g_mem.FB.vibrotactile_feedback_active){
 627              		.loc 1 332 0
 628 00e8 8D4B     		ldr	r3, .L64+8
 629 00ea 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 630 00ee 002B     		cmp	r3, #0
 631 00f0 07D0     		beq	.L41
 333:..\src/interruptions.c ****                     
 334:..\src/interruptions.c ****                     LED_CTRL_Write(YELLOW);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 18


 632              		.loc 1 334 0
 633 00f2 0320     		movs	r0, #3
 634 00f4 FFF7FEFF 		bl	LED_CTRL_Write
 335:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 635              		.loc 1 335 0
 636 00f8 0020     		movs	r0, #0
 637 00fa FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 336:..\src/interruptions.c ****                     
 337:..\src/interruptions.c ****                     vibrotactile_control();
 638              		.loc 1 337 0
 639 00fe FFF7FEFF 		bl	vibrotactile_control
 640              	.L41:
 338:..\src/interruptions.c ****                 }
 339:..\src/interruptions.c ****                 
 340:..\src/interruptions.c ****                 if (interrupt_flag){
 641              		.loc 1 340 0
 642 0102 864B     		ldr	r3, .L64+4
 643 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 644 0106 002B     		cmp	r3, #0
 645 0108 04D0     		beq	.L43
 341:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 646              		.loc 1 341 0
 647 010a 844B     		ldr	r3, .L64+4
 648 010c 0022     		movs	r2, #0
 649 010e 1A70     		strb	r2, [r3]
 342:..\src/interruptions.c ****                     interrupt_manager();
 650              		.loc 1 342 0
 651 0110 FFF7FEFF 		bl	interrupt_manager
 652              	.L43:
 343:..\src/interruptions.c ****                 }
 344:..\src/interruptions.c ****                     
 345:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX); // Compute reference for the SH starting f
 653              		.loc 1 345 0
 654 0114 07F58843 		add	r3, r7, #17408
 655 0118 03F15E03 		add	r3, r3, #94
 656 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 657 011e 1846     		mov	r0, r3
 658 0120 FFF7FEFF 		bl	motor_control_generic
 346:..\src/interruptions.c ****                     
 347:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID); // Send reference to the SH calli
 659              		.loc 1 347 0
 660 0124 814B     		ldr	r3, .L64+20
 661 0126 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 662 012a 07F58843 		add	r3, r7, #17408
 663 012e 03F15E03 		add	r3, r3, #94
 664 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 665 0134 1146     		mov	r1, r2
 666 0136 1846     		mov	r0, r3
 667 0138 FFF7FEFF 		bl	drive_slave
 348:..\src/interruptions.c ****                     
 349:..\src/interruptions.c ****                 if (interrupt_flag){
 668              		.loc 1 349 0
 669 013c 774B     		ldr	r3, .L64+4
 670 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 671 0140 002B     		cmp	r3, #0
 672 0142 14D0     		beq	.L45
 350:..\src/interruptions.c ****                     interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 19


 673              		.loc 1 350 0
 674 0144 754B     		ldr	r3, .L64+4
 675 0146 0022     		movs	r2, #0
 676 0148 1A70     		strb	r2, [r3]
 351:..\src/interruptions.c ****                     interrupt_manager();
 677              		.loc 1 351 0
 678 014a FFF7FEFF 		bl	interrupt_manager
 679 014e 0EE0     		b	.L45
 680              	.L39:
 352:..\src/interruptions.c ****                 }
 353:..\src/interruptions.c ****             }
 354:..\src/interruptions.c ****             
 355:..\src/interruptions.c ****            
 356:..\src/interruptions.c ****             else {
 357:..\src/interruptions.c ****                 
 358:..\src/interruptions.c ****                 LED_CTRL_Write(0);
 681              		.loc 1 358 0
 682 0150 0020     		movs	r0, #0
 683 0152 FFF7FEFF 		bl	LED_CTRL_Write
 359:..\src/interruptions.c ****                 BLINK_CTRL_EN_Write(0);
 684              		.loc 1 359 0
 685 0156 0020     		movs	r0, #0
 686 0158 FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 360:..\src/interruptions.c ****                     
 361:..\src/interruptions.c ****                 // Check Interrupt 
 362:..\src/interruptions.c ****                 if (interrupt_flag){
 687              		.loc 1 362 0
 688 015c 6F4B     		ldr	r3, .L64+4
 689 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 690 0160 002B     		cmp	r3, #0
 691 0162 04D0     		beq	.L45
 363:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 692              		.loc 1 363 0
 693 0164 6D4B     		ldr	r3, .L64+4
 694 0166 0022     		movs	r2, #0
 695 0168 1A70     		strb	r2, [r3]
 364:..\src/interruptions.c ****                     interrupt_manager();
 696              		.loc 1 364 0
 697 016a FFF7FEFF 		bl	interrupt_manager
 698              	.L45:
 365:..\src/interruptions.c ****                 } 
 366:..\src/interruptions.c ****             }
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);  // Compute references and drive air pump
 699              		.loc 1 368 0
 700 016e 07F58843 		add	r3, r7, #17408
 701 0172 03F15F03 		add	r3, r3, #95
 702 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 703 0178 1846     		mov	r0, r3
 704 017a FFF7FEFF 		bl	motor_control_generic
 369:..\src/interruptions.c ****     
 370:..\src/interruptions.c ****             if (interrupt_flag){
 705              		.loc 1 370 0
 706 017e 674B     		ldr	r3, .L64+4
 707 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 708 0182 002B     		cmp	r3, #0
 709 0184 04D0     		beq	.L46
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 20


 371:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 710              		.loc 1 371 0
 711 0186 654B     		ldr	r3, .L64+4
 712 0188 0022     		movs	r2, #0
 713 018a 1A70     		strb	r2, [r3]
 372:..\src/interruptions.c ****                 interrupt_manager();
 714              		.loc 1 372 0
 715 018c FFF7FEFF 		bl	interrupt_manager
 716              	.L46:
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****     
 375:..\src/interruptions.c ****            
 376:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 377:..\src/interruptions.c **** 
 378:..\src/interruptions.c ****     analog_read_end();
 717              		.loc 1 378 0
 718 0190 FFF7FEFF 		bl	analog_read_end
 379:..\src/interruptions.c **** 
 380:..\src/interruptions.c ****     if (interrupt_flag){
 719              		.loc 1 380 0
 720 0194 614B     		ldr	r3, .L64+4
 721 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 722 0198 002B     		cmp	r3, #0
 723 019a 04D0     		beq	.L47
 381:..\src/interruptions.c ****         interrupt_flag = FALSE;
 724              		.loc 1 381 0
 725 019c 5F4B     		ldr	r3, .L64+4
 726 019e 0022     		movs	r2, #0
 727 01a0 1A70     		strb	r2, [r3]
 382:..\src/interruptions.c ****         interrupt_manager();
 728              		.loc 1 382 0
 729 01a2 FFF7FEFF 		bl	interrupt_manager
 730              	.L47:
 383:..\src/interruptions.c ****     }
 384:..\src/interruptions.c **** 
 385:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 386:..\src/interruptions.c **** 
 387:..\src/interruptions.c ****     overcurrent_control();
 731              		.loc 1 387 0
 732 01a6 FFF7FEFF 		bl	overcurrent_control
 388:..\src/interruptions.c ****     
 389:..\src/interruptions.c ****     // Check Interrupt 
 390:..\src/interruptions.c ****     
 391:..\src/interruptions.c ****     if (interrupt_flag){
 733              		.loc 1 391 0
 734 01aa 5C4B     		ldr	r3, .L64+4
 735 01ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 736 01ae 002B     		cmp	r3, #0
 737 01b0 04D0     		beq	.L48
 392:..\src/interruptions.c ****         interrupt_flag = FALSE;
 738              		.loc 1 392 0
 739 01b2 5A4B     		ldr	r3, .L64+4
 740 01b4 0022     		movs	r2, #0
 741 01b6 1A70     		strb	r2, [r3]
 393:..\src/interruptions.c ****         interrupt_manager();
 742              		.loc 1 393 0
 743 01b8 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 21


 744              	.L48:
 394:..\src/interruptions.c ****     }
 395:..\src/interruptions.c **** 
 396:..\src/interruptions.c ****     //---------------------------------- Calibration 
 397:..\src/interruptions.c **** 
 398:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 399:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 745              		.loc 1 399 0
 746 01bc 5C4B     		ldr	r3, .L64+24
 747 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748 01c0 012B     		cmp	r3, #1
 749 01c2 0ED1     		bne	.L49
 400:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 750              		.loc 1 400 0
 751 01c4 5B4B     		ldr	r3, .L64+28
 752 01c6 1B88     		ldrh	r3, [r3]
 753 01c8 0A2B     		cmp	r3, #10
 754 01ca 04D1     		bne	.L50
 401:..\src/interruptions.c ****             calibration();
 755              		.loc 1 401 0
 756 01cc FFF7FEFF 		bl	calibration
 402:..\src/interruptions.c ****             counter_calibration = 0;
 757              		.loc 1 402 0
 758 01d0 584B     		ldr	r3, .L64+28
 759 01d2 0022     		movs	r2, #0
 760 01d4 1A80     		strh	r2, [r3]	@ movhi
 761              	.L50:
 403:..\src/interruptions.c ****         }
 404:..\src/interruptions.c ****         counter_calibration++;
 762              		.loc 1 404 0
 763 01d6 574B     		ldr	r3, .L64+28
 764 01d8 1B88     		ldrh	r3, [r3]
 765 01da 0133     		adds	r3, r3, #1
 766 01dc 9AB2     		uxth	r2, r3
 767 01de 554B     		ldr	r3, .L64+28
 768 01e0 1A80     		strh	r2, [r3]	@ movhi
 769              	.L49:
 405:..\src/interruptions.c ****     }
 406:..\src/interruptions.c **** 
 407:..\src/interruptions.c ****     // Check Interrupt 
 408:..\src/interruptions.c ****     
 409:..\src/interruptions.c ****     if (interrupt_flag){
 770              		.loc 1 409 0
 771 01e2 4E4B     		ldr	r3, .L64+4
 772 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 773 01e6 002B     		cmp	r3, #0
 774 01e8 04D0     		beq	.L51
 410:..\src/interruptions.c ****         interrupt_flag = FALSE;
 775              		.loc 1 410 0
 776 01ea 4C4B     		ldr	r3, .L64+4
 777 01ec 0022     		movs	r2, #0
 778 01ee 1A70     		strb	r2, [r3]
 411:..\src/interruptions.c ****         interrupt_manager();
 779              		.loc 1 411 0
 780 01f0 FFF7FEFF 		bl	interrupt_manager
 781              	.L51:
 412:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 22


 413:..\src/interruptions.c ****     
 414:..\src/interruptions.c **** 
 415:..\src/interruptions.c ****     
 416:..\src/interruptions.c ****      
 417:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 418:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 782              		.loc 1 418 0
 783 01f4 4D4B     		ldr	r3, .L64+20
 784 01f6 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 785 01fa 002B     		cmp	r3, #0
 786 01fc 0AD0     		beq	.L52
 419:..\src/interruptions.c ****         
 420:..\src/interruptions.c ****         update_EMG_history();
 787              		.loc 1 420 0
 788 01fe FFF7FEFF 		bl	update_EMG_history
 421:..\src/interruptions.c **** 
 422:..\src/interruptions.c ****         // Check Interrupt 
 423:..\src/interruptions.c **** 
 424:..\src/interruptions.c ****         if (interrupt_flag){
 789              		.loc 1 424 0
 790 0202 464B     		ldr	r3, .L64+4
 791 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 792 0206 002B     		cmp	r3, #0
 793 0208 04D0     		beq	.L52
 425:..\src/interruptions.c ****             interrupt_flag = FALSE;
 794              		.loc 1 425 0
 795 020a 444B     		ldr	r3, .L64+4
 796 020c 0022     		movs	r2, #0
 797 020e 1A70     		strb	r2, [r3]
 426:..\src/interruptions.c ****             interrupt_manager();
 798              		.loc 1 426 0
 799 0210 FFF7FEFF 		bl	interrupt_manager
 800              	.L52:
 427:..\src/interruptions.c ****         }
 428:..\src/interruptions.c ****     }
 429:..\src/interruptions.c **** 
 430:..\src/interruptions.c ****     
 431:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 432:..\src/interruptions.c **** 
 433:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 801              		.loc 1 433 0
 802 0214 454B     		ldr	r3, .L64+20
 803 0216 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 804 021a 1A46     		mov	r2, r3
 805 021c 464B     		ldr	r3, .L64+32
 806 021e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 807 0220 002B     		cmp	r3, #0
 808 0222 01D0     		beq	.L53
 434:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 809              		.loc 1 434 0
 810 0224 FFF7FEFF 		bl	cycles_counter_update
 811              	.L53:
 435:..\src/interruptions.c ****     }
 436:..\src/interruptions.c **** 
 437:..\src/interruptions.c ****     // Check Cycles Interrupt 
 438:..\src/interruptions.c ****     
 439:..\src/interruptions.c ****     if (cycles_interrupt_flag){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 23


 812              		.loc 1 439 0
 813 0228 444B     		ldr	r3, .L64+36
 814 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 022c 002B     		cmp	r3, #0
 816 022e 00F0A280 		beq	.L54
 440:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 817              		.loc 1 440 0
 818 0232 424B     		ldr	r3, .L64+36
 819 0234 0022     		movs	r2, #0
 820 0236 1A70     		strb	r2, [r3]
 441:..\src/interruptions.c **** 
 442:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 443:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 444:..\src/interruptions.c ****         if(can_write) {
 821              		.loc 1 444 0
 822 0238 414B     		ldr	r3, .L64+40
 823 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 023c 002B     		cmp	r3, #0
 825 023e 54D0     		beq	.L55
 445:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 826              		.loc 1 445 0
 827 0240 404B     		ldr	r3, .L64+44
 828 0242 0022     		movs	r2, #0
 829 0244 1A70     		strb	r2, [r3]
 446:..\src/interruptions.c ****             
 447:..\src/interruptions.c ****             //Update time variable
 448:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 830              		.loc 1 448 0
 831 0246 364B     		ldr	r3, .L64+8
 832 0248 9B6D     		ldr	r3, [r3, #88]
 833 024a 7833     		adds	r3, r3, #120
 834 024c 344A     		ldr	r2, .L64+8
 835 024e 9365     		str	r3, [r2, #88]
 449:..\src/interruptions.c ****             
 450:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 836              		.loc 1 450 0
 837 0250 364B     		ldr	r3, .L64+20
 838 0252 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 839 0256 012B     		cmp	r3, #1
 840 0258 47D1     		bne	.L55
 451:..\src/interruptions.c ****                 
 452:..\src/interruptions.c ****                 store_RTC_current_time();
 841              		.loc 1 452 0
 842 025a FFF7FEFF 		bl	store_RTC_current_time
 453:..\src/interruptions.c ****                 
 454:..\src/interruptions.c ****                 //Write in SD card
 455:..\src/interruptions.c ****                 prepare_SD_info(info_);
 843              		.loc 1 455 0
 844 025e 07F56A53 		add	r3, r7, #14976
 845 0262 03F11803 		add	r3, r3, #24
 846 0266 1846     		mov	r0, r3
 847 0268 FFF7FEFF 		bl	prepare_SD_info
 456:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 848              		.loc 1 456 0
 849 026c 364B     		ldr	r3, .L64+48
 850 026e 1C68     		ldr	r4, [r3]
 851 0270 07F56A53 		add	r3, r7, #14976
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 24


 852 0274 03F11803 		add	r3, r3, #24
 853 0278 1846     		mov	r0, r3
 854 027a FFF7FEFF 		bl	strlen
 855 027e 0246     		mov	r2, r0
 856 0280 07F56A53 		add	r3, r7, #14976
 857 0284 03F11803 		add	r3, r3, #24
 858 0288 1946     		mov	r1, r3
 859 028a 2046     		mov	r0, r4
 860 028c FFF7FEFF 		bl	FS_Write
 457:..\src/interruptions.c ****                 
 458:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 861              		.loc 1 458 0
 862 0290 264B     		ldr	r3, .L64+20
 863 0292 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 864 0296 002B     		cmp	r3, #0
 865 0298 27D0     		beq	.L55
 866              	.LBB2:
 459:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 867              		.loc 1 459 0
 868 029a 07F16003 		add	r3, r7, #96
 869 029e 603B     		subs	r3, r3, #96
 870 02a0 0022     		movs	r2, #0
 871 02a2 1A60     		str	r2, [r3]
 872 02a4 0433     		adds	r3, r3, #4
 873 02a6 43F69422 		movw	r2, #14996
 874 02aa 0021     		movs	r1, #0
 875 02ac 1846     		mov	r0, r3
 876 02ae FFF7FEFF 		bl	memset
 460:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 877              		.loc 1 460 0
 878 02b2 264B     		ldr	r3, .L64+52
 879 02b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 880 02b6 07F16003 		add	r3, r7, #96
 881 02ba 603B     		subs	r3, r3, #96
 882 02bc 1A70     		strb	r2, [r3]
 461:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 883              		.loc 1 461 0
 884 02be 07F16003 		add	r3, r7, #96
 885 02c2 603B     		subs	r3, r3, #96
 886 02c4 1846     		mov	r0, r3
 887 02c6 FFF7FEFF 		bl	prepare_SD_EMG_history
 462:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 888              		.loc 1 462 0
 889 02ca 214B     		ldr	r3, .L64+56
 890 02cc 1C68     		ldr	r4, [r3]
 891 02ce 07F16003 		add	r3, r7, #96
 892 02d2 603B     		subs	r3, r3, #96
 893 02d4 1846     		mov	r0, r3
 894 02d6 FFF7FEFF 		bl	strlen
 895 02da 0246     		mov	r2, r0
 896 02dc 07F16003 		add	r3, r7, #96
 897 02e0 603B     		subs	r3, r3, #96
 898 02e2 1946     		mov	r1, r3
 899 02e4 2046     		mov	r0, r4
 900 02e6 FFF7FEFF 		bl	FS_Write
 901              	.L55:
 902              	.LBE2:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 25


 463:..\src/interruptions.c ****                 }
 464:..\src/interruptions.c ****             }
 465:..\src/interruptions.c ****         }
 466:..\src/interruptions.c ****         
 467:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 468:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 903              		.loc 1 468 0
 904 02ea 164B     		ldr	r3, .L64+44
 905 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 02ee 012B     		cmp	r3, #1
 907 02f0 03D0     		beq	.L56
 908              		.loc 1 468 0 is_stmt 0 discriminator 1
 909 02f2 144B     		ldr	r3, .L64+44
 910 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 911 02f6 022B     		cmp	r3, #2
 912 02f8 2CD1     		bne	.L57
 913              	.L56:
 469:..\src/interruptions.c ****             // Deactivate motors
 470:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 914              		.loc 1 470 0 is_stmt 1
 915 02fa 0021     		movs	r1, #0
 916 02fc 0020     		movs	r0, #0
 917 02fe FFF7FEFF 		bl	enable_motor
 471:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 918              		.loc 1 471 0
 919 0302 074B     		ldr	r3, .L64+8
 920 0304 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 921 0308 012B     		cmp	r3, #1
 922 030a 34D1     		bne	.L54
 472:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 923              		.loc 1 472 0
 924 030c 0021     		movs	r1, #0
 925 030e 0120     		movs	r0, #1
 926 0310 FFF7FEFF 		bl	enable_motor
 471:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 927              		.loc 1 471 0
 928 0314 2FE0     		b	.L54
 929              	.L65:
 930 0316 00BF     		.align	2
 931              	.L64:
 932 0318 00000000 		.word	timer_value0
 933 031c 00000000 		.word	interrupt_flag
 934 0320 00000000 		.word	g_mem
 935 0324 00000000 		.word	flag_master
 936 0328 00000000 		.word	master_mode
 937 032c 00000000 		.word	c_mem
 938 0330 00000000 		.word	calib
 939 0334 00000000 		.word	counter_calibration.10245
 940 0338 00000000 		.word	pos_reconstruct
 941 033c 00000000 		.word	cycles_interrupt_flag
 942 0340 00000000 		.word	can_write
 943 0344 00000000 		.word	cycles_status
 944 0348 00000000 		.word	pFile
 945 034c 20000000 		.word	.LC0
 946 0350 00000000 		.word	pEMGHFile
 947              	.L57:
 473:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 26


 474:..\src/interruptions.c ****         }
 475:..\src/interruptions.c ****         else {
 476:..\src/interruptions.c ****             // Activate/Deactivate motors
 477:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 948              		.loc 1 477 0
 949 0354 4D4B     		ldr	r3, .L66
 950 0356 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 951 0358 1946     		mov	r1, r3
 952 035a 0020     		movs	r0, #0
 953 035c FFF7FEFF 		bl	enable_motor
 478:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 954              		.loc 1 478 0
 955 0360 4B4B     		ldr	r3, .L66+4
 956 0362 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 957 0366 012B     		cmp	r3, #1
 958 0368 05D1     		bne	.L54
 479:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
 959              		.loc 1 479 0
 960 036a 484B     		ldr	r3, .L66
 961 036c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 962 036e 1946     		mov	r1, r3
 963 0370 0120     		movs	r0, #1
 964 0372 FFF7FEFF 		bl	enable_motor
 965              	.L54:
 480:..\src/interruptions.c ****             }
 481:..\src/interruptions.c ****         }
 482:..\src/interruptions.c ****     }
 483:..\src/interruptions.c ****     
 484:..\src/interruptions.c ****     // Check Interrupt 
 485:..\src/interruptions.c ****     
 486:..\src/interruptions.c ****     if (interrupt_flag){
 966              		.loc 1 486 0
 967 0376 474B     		ldr	r3, .L66+8
 968 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 037a 002B     		cmp	r3, #0
 970 037c 04D0     		beq	.L59
 487:..\src/interruptions.c ****         interrupt_flag = FALSE;
 971              		.loc 1 487 0
 972 037e 454B     		ldr	r3, .L66+8
 973 0380 0022     		movs	r2, #0
 974 0382 1A70     		strb	r2, [r3]
 488:..\src/interruptions.c ****         interrupt_manager();
 975              		.loc 1 488 0
 976 0384 FFF7FEFF 		bl	interrupt_manager
 977              	.L59:
 489:..\src/interruptions.c ****     }
 490:..\src/interruptions.c ****     
 491:..\src/interruptions.c ****     
 492:..\src/interruptions.c ****     //---------------------------------- Check battery
 493:..\src/interruptions.c **** 
 494:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 495:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 978              		.loc 1 495 0
 979 0388 434B     		ldr	r3, .L66+12
 980 038a 1B88     		ldrh	r3, [r3]
 981 038c 0A2B     		cmp	r3, #10
 982 038e 04D1     		bne	.L60
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 27


 496:..\src/interruptions.c ****         battery_management();   
 983              		.loc 1 496 0
 984 0390 FFF7FEFF 		bl	battery_management
 497:..\src/interruptions.c ****         counter_tension_func = 0;
 985              		.loc 1 497 0
 986 0394 404B     		ldr	r3, .L66+12
 987 0396 0022     		movs	r2, #0
 988 0398 1A80     		strh	r2, [r3]	@ movhi
 989              	.L60:
 498:..\src/interruptions.c ****     }
 499:..\src/interruptions.c ****     counter_tension_func++;
 990              		.loc 1 499 0
 991 039a 3F4B     		ldr	r3, .L66+12
 992 039c 1B88     		ldrh	r3, [r3]
 993 039e 0133     		adds	r3, r3, #1
 994 03a0 9AB2     		uxth	r2, r3
 995 03a2 3D4B     		ldr	r3, .L66+12
 996 03a4 1A80     		strh	r2, [r3]	@ movhi
 500:..\src/interruptions.c **** 
 501:..\src/interruptions.c ****     // Check Interrupt 
 502:..\src/interruptions.c ****     
 503:..\src/interruptions.c ****     if (interrupt_flag){
 997              		.loc 1 503 0
 998 03a6 3B4B     		ldr	r3, .L66+8
 999 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 03aa 002B     		cmp	r3, #0
 1001 03ac 04D0     		beq	.L61
 504:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1002              		.loc 1 504 0
 1003 03ae 394B     		ldr	r3, .L66+8
 1004 03b0 0022     		movs	r2, #0
 1005 03b2 1A70     		strb	r2, [r3]
 505:..\src/interruptions.c ****         interrupt_manager();
 1006              		.loc 1 505 0
 1007 03b4 FFF7FEFF 		bl	interrupt_manager
 1008              	.L61:
 506:..\src/interruptions.c ****     }
 507:..\src/interruptions.c ****    
 508:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 509:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1009              		.loc 1 509 0
 1010 03b8 384B     		ldr	r3, .L66+16
 1011 03ba 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1012 03be 002B     		cmp	r3, #0
 1013 03c0 0AD0     		beq	.L62
 510:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1014              		.loc 1 510 0
 1015 03c2 FFF7FEFF 		bl	ReadAllIMUs
 511:..\src/interruptions.c ****         
 512:..\src/interruptions.c ****         if (interrupt_flag){
 1016              		.loc 1 512 0
 1017 03c6 334B     		ldr	r3, .L66+8
 1018 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 03ca 002B     		cmp	r3, #0
 1020 03cc 04D0     		beq	.L62
 513:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1021              		.loc 1 513 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 28


 1022 03ce 314B     		ldr	r3, .L66+8
 1023 03d0 0022     		movs	r2, #0
 1024 03d2 1A70     		strb	r2, [r3]
 514:..\src/interruptions.c ****             interrupt_manager();
 1025              		.loc 1 514 0
 1026 03d4 FFF7FEFF 		bl	interrupt_manager
 1027              	.L62:
 515:..\src/interruptions.c ****         }
 516:..\src/interruptions.c ****     }
 517:..\src/interruptions.c ****    
 518:..\src/interruptions.c ****     //---------------------------------- Update States
 519:..\src/interruptions.c ****     
 520:..\src/interruptions.c ****     // Load k-1 state
 521:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1028              		.loc 1 521 0
 1029 03d8 314A     		ldr	r2, .L66+20
 1030 03da 324B     		ldr	r3, .L66+24
 1031 03dc 1446     		mov	r4, r2
 1032 03de 1D46     		mov	r5, r3
 1033 03e0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1034 03e2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1035 03e4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1036 03e6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1037 03e8 95E80300 		ldmia	r5, {r0, r1}
 1038 03ec 84E80300 		stmia	r4, {r0, r1}
 522:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1039              		.loc 1 522 0
 1040 03f0 2D4A     		ldr	r2, .L66+28
 1041 03f2 2E4B     		ldr	r3, .L66+32
 1042 03f4 1046     		mov	r0, r2
 1043 03f6 1946     		mov	r1, r3
 1044 03f8 6823     		movs	r3, #104
 1045 03fa 1A46     		mov	r2, r3
 1046 03fc FFF7FEFF 		bl	memcpy
 523:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1047              		.loc 1 523 0
 1048 0400 2B4A     		ldr	r2, .L66+36
 1049 0402 224B     		ldr	r3, .L66
 1050 0404 1446     		mov	r4, r2
 1051 0406 1D46     		mov	r5, r3
 1052 0408 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1053 040a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1054 040c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1055 0410 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 524:..\src/interruptions.c **** 
 525:..\src/interruptions.c ****     // Load k+1 state        
 526:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1056              		.loc 1 526 0
 1057 0414 1D4A     		ldr	r2, .L66
 1058 0416 274B     		ldr	r3, .L66+40
 1059 0418 1446     		mov	r4, r2
 1060 041a 1D46     		mov	r5, r3
 1061 041c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1062 041e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1063 0420 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1064 0424 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 527:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 29


 1065              		.loc 1 527 0
 1066 0428 234A     		ldr	r2, .L66+44
 1067 042a 244B     		ldr	r3, .L66+48
 1068 042c 1046     		mov	r0, r2
 1069 042e 1946     		mov	r1, r3
 1070 0430 C823     		movs	r3, #200
 1071 0432 1A46     		mov	r2, r3
 1072 0434 FFF7FEFF 		bl	memcpy
 528:..\src/interruptions.c ****                     
 529:..\src/interruptions.c ****     if (interrupt_flag){
 1073              		.loc 1 529 0
 1074 0438 164B     		ldr	r3, .L66+8
 1075 043a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1076 043c 002B     		cmp	r3, #0
 1077 043e 04D0     		beq	.L63
 530:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1078              		.loc 1 530 0
 1079 0440 144B     		ldr	r3, .L66+8
 1080 0442 0022     		movs	r2, #0
 1081 0444 1A70     		strb	r2, [r3]
 531:..\src/interruptions.c ****         interrupt_manager();
 1082              		.loc 1 531 0
 1083 0446 FFF7FEFF 		bl	interrupt_manager
 1084              	.L63:
 532:..\src/interruptions.c ****     }
 533:..\src/interruptions.c **** 
 534:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1085              		.loc 1 534 0
 1086 044a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1087 044e 0346     		mov	r3, r0
 1088 0450 1A46     		mov	r2, r3
 1089 0452 1B4B     		ldr	r3, .L66+52
 1090 0454 1A80     		strh	r2, [r3]	@ movhi
 535:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1091              		.loc 1 535 0
 1092 0456 1B4B     		ldr	r3, .L66+56
 1093 0458 1B88     		ldrh	r3, [r3]
 1094 045a 1A46     		mov	r2, r3
 1095 045c 184B     		ldr	r3, .L66+52
 1096 045e 1B88     		ldrh	r3, [r3]
 1097 0460 D31A     		subs	r3, r2, r3
 1098 0462 1846     		mov	r0, r3
 1099 0464 FFF7FEFF 		bl	__aeabi_i2f
 1100 0468 0346     		mov	r3, r0
 1101 046a 1749     		ldr	r1, .L66+60
 1102 046c 1846     		mov	r0, r3
 1103 046e FFF7FEFF 		bl	__aeabi_fdiv
 1104 0472 0346     		mov	r3, r0
 1105 0474 1A46     		mov	r2, r3
 1106 0476 154B     		ldr	r3, .L66+64
 1107 0478 1A60     		str	r2, [r3]	@ float
 536:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1108              		.loc 1 536 0
 1109 047a 0120     		movs	r0, #1
 1110 047c FFF7FEFF 		bl	MY_TIMER_REG_Write
 537:..\src/interruptions.c **** 
 538:..\src/interruptions.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 30


 1111              		.loc 1 538 0
 1112 0480 00BF     		nop
 1113 0482 07F58847 		add	r7, r7, #17408
 1114 0486 6037     		adds	r7, r7, #96
 1115              		.cfi_def_cfa_offset 16
 1116 0488 BD46     		mov	sp, r7
 1117              		.cfi_def_cfa_register 13
 1118              		@ sp needed
 1119 048a B0BD     		pop	{r4, r5, r7, pc}
 1120              	.L67:
 1121              		.align	2
 1122              	.L66:
 1123 048c 00000000 		.word	g_ref
 1124 0490 00000000 		.word	g_mem
 1125 0494 00000000 		.word	interrupt_flag
 1126 0498 02000000 		.word	counter_tension_func.10246
 1127 049c 00000000 		.word	c_mem
 1128 04a0 00000000 		.word	g_adc_measOld
 1129 04a4 00000000 		.word	g_adc_meas
 1130 04a8 00000000 		.word	g_measOld
 1131 04ac 00000000 		.word	g_meas
 1132 04b0 00000000 		.word	g_refOld
 1133 04b4 00000000 		.word	g_refNew
 1134 04b8 00000000 		.word	g_imu
 1135 04bc 00000000 		.word	g_imuNew
 1136 04c0 00000000 		.word	timer_value
 1137 04c4 00000000 		.word	timer_value0
 1138 04c8 00247449 		.word	1232348160
 1139 04cc 00000000 		.word	cycle_time
 1140              		.cfi_endproc
 1141              	.LFE67:
 1142              		.size	function_scheduler, .-function_scheduler
 1143              		.section	.text.compute_reference,"ax",%progbits
 1144              		.align	2
 1145              		.global	compute_reference
 1146              		.thumb
 1147              		.thumb_func
 1148              		.type	compute_reference, %function
 1149              	compute_reference:
 1150              	.LFB68:
 539:..\src/interruptions.c **** 
 540:..\src/interruptions.c **** //==============================================================================
 541:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 542:..\src/interruptions.c **** //==============================================================================
 543:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1151              		.loc 1 543 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 40
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155 0000 80B5     		push	{r7, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 8CB0     		sub	sp, sp, #48
 1160              		.cfi_def_cfa_offset 56
 1161 0004 02AF     		add	r7, sp, #8
 1162              		.cfi_def_cfa 7, 48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 31


 1163 0006 0346     		mov	r3, r0
 1164 0008 B960     		str	r1, [r7, #8]
 1165 000a 7A60     		str	r2, [r7, #4]
 1166 000c FB73     		strb	r3, [r7, #15]
 544:..\src/interruptions.c ****     
 545:..\src/interruptions.c ****     int32 CYDATA handle_value;
 546:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 547:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1167              		.loc 1 547 0
 1168 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1169 0010 1346     		mov	r3, r2
 1170 0012 DB00     		lsls	r3, r3, #3
 1171 0014 9B1A     		subs	r3, r3, r2
 1172 0016 1B01     		lsls	r3, r3, #4
 1173 0018 B033     		adds	r3, r3, #176
 1174 001a A74A     		ldr	r2, .L132
 1175 001c 1344     		add	r3, r3, r2
 1176 001e 3B62     		str	r3, [r7, #32]
 548:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1177              		.loc 1 548 0
 1178 0020 3B6A     		ldr	r3, [r7, #32]
 1179 0022 93F86030 		ldrb	r3, [r3, #96]
 1180 0026 FB77     		strb	r3, [r7, #31]
 549:..\src/interruptions.c ****     
 550:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 551:..\src/interruptions.c ****                                                         // 1 EMG 1
 552:..\src/interruptions.c ****                                                         // 2 EMG 2
 553:..\src/interruptions.c ****                                                         // wait for both to get down
 554:..\src/interruptions.c ****     
 555:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1181              		.loc 1 555 0
 1182 0028 A44B     		ldr	r3, .L132+4
 1183 002a 1B68     		ldr	r3, [r3]
 1184 002c A24A     		ldr	r2, .L132
 1185 002e B2F8F021 		ldrh	r2, [r2, #496]
 1186 0032 9B1A     		subs	r3, r3, r2
 1187 0034 BB61     		str	r3, [r7, #24]
 556:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1188              		.loc 1 556 0
 1189 0036 A14B     		ldr	r3, .L132+4
 1190 0038 5B68     		ldr	r3, [r3, #4]
 1191 003a 9F4A     		ldr	r2, .L132
 1192 003c B2F8F221 		ldrh	r2, [r2, #498]
 1193 0040 9B1A     		subs	r3, r3, r2
 1194 0042 7B61     		str	r3, [r7, #20]
 557:..\src/interruptions.c ****     
 558:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 559:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1195              		.loc 1 559 0
 1196 0044 3B6A     		ldr	r3, [r7, #32]
 1197 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1198 004a 013B     		subs	r3, r3, #1
 1199 004c 062B     		cmp	r3, #6
 1200 004e 00F25182 		bhi	.L124
 1201 0052 01A2     		adr	r2, .L71
 1202 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1203              		.p2align 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 32


 1204              	.L71:
 1205 0058 75000000 		.word	.L70+1
 1206 005c 21020000 		.word	.L72+1
 1207 0060 C9020000 		.word	.L73+1
 1208 0064 31030000 		.word	.L74+1
 1209 0068 11040000 		.word	.L75+1
 1210 006c 4D010000 		.word	.L76+1
 1211 0070 5B020000 		.word	.L77+1
 1212              		.p2align 1
 1213              	.L70:
 560:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 561:..\src/interruptions.c **** 
 562:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 563:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 564:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1214              		.loc 1 564 0
 1215 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1216 0076 9049     		ldr	r1, .L132
 1217 0078 1346     		mov	r3, r2
 1218 007a 5B00     		lsls	r3, r3, #1
 1219 007c 1344     		add	r3, r3, r2
 1220 007e 1B01     		lsls	r3, r3, #4
 1221 0080 0B44     		add	r3, r3, r1
 1222 0082 03F5D873 		add	r3, r3, #432
 1223 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1224 0088 002B     		cmp	r3, #0
 1225 008a 19D0     		beq	.L78
 565:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1226              		.loc 1 565 0
 1227 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1228 008e 8C4A     		ldr	r2, .L132+8
 1229 0090 3421     		movs	r1, #52
 1230 0092 01FB03F3 		mul	r3, r1, r3
 1231 0096 1344     		add	r3, r3, r2
 1232 0098 0833     		adds	r3, r3, #8
 1233 009a 1968     		ldr	r1, [r3]
 1234 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1235 009e 8648     		ldr	r0, .L132
 1236 00a0 1346     		mov	r3, r2
 1237 00a2 5B00     		lsls	r3, r3, #1
 1238 00a4 1344     		add	r3, r3, r2
 1239 00a6 1B01     		lsls	r3, r3, #4
 1240 00a8 0344     		add	r3, r3, r0
 1241 00aa 03F5DA73 		add	r3, r3, #436
 1242 00ae 93F90030 		ldrsb	r3, [r3]
 1243 00b2 03FB01F2 		mul	r2, r3, r1
 1244 00b6 3B6A     		ldr	r3, [r7, #32]
 1245 00b8 5B6B     		ldr	r3, [r3, #52]
 1246 00ba 1344     		add	r3, r3, r2
 1247 00bc 7B62     		str	r3, [r7, #36]
 1248 00be 18E0     		b	.L79
 1249              	.L78:
 566:..\src/interruptions.c ****             else
 567:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1250              		.loc 1 567 0
 1251 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1252 00c2 7F4A     		ldr	r2, .L132+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 33


 1253 00c4 3421     		movs	r1, #52
 1254 00c6 01FB03F3 		mul	r3, r1, r3
 1255 00ca 1344     		add	r3, r3, r2
 1256 00cc 0433     		adds	r3, r3, #4
 1257 00ce 1968     		ldr	r1, [r3]
 1258 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1259 00d2 7948     		ldr	r0, .L132
 1260 00d4 1346     		mov	r3, r2
 1261 00d6 5B00     		lsls	r3, r3, #1
 1262 00d8 1344     		add	r3, r3, r2
 1263 00da 1B01     		lsls	r3, r3, #4
 1264 00dc 0344     		add	r3, r3, r0
 1265 00de 03F5DA73 		add	r3, r3, #436
 1266 00e2 93F90030 		ldrsb	r3, [r3]
 1267 00e6 03FB01F2 		mul	r2, r3, r1
 1268 00ea 3B6A     		ldr	r3, [r7, #32]
 1269 00ec 5B6B     		ldr	r3, [r3, #52]
 1270 00ee 1344     		add	r3, r3, r2
 1271 00f0 7B62     		str	r3, [r7, #36]
 1272              	.L79:
 568:..\src/interruptions.c ****             
 569:..\src/interruptions.c **** 
 570:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 571:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1273              		.loc 1 571 0
 1274 00f2 7B68     		ldr	r3, [r7, #4]
 1275 00f4 1B68     		ldr	r3, [r3]
 1276 00f6 7A6A     		ldr	r2, [r7, #36]
 1277 00f8 D21A     		subs	r2, r2, r3
 1278 00fa 3B6A     		ldr	r3, [r7, #32]
 1279 00fc 1B6C     		ldr	r3, [r3, #64]
 1280 00fe 9A42     		cmp	r2, r3
 1281 0100 0BDD     		ble	.L80
 1282              		.loc 1 571 0 is_stmt 0 discriminator 1
 1283 0102 3B6A     		ldr	r3, [r7, #32]
 1284 0104 1B6C     		ldr	r3, [r3, #64]
 1285 0106 002B     		cmp	r3, #0
 1286 0108 07D0     		beq	.L80
 572:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1287              		.loc 1 572 0 is_stmt 1
 1288 010a BB68     		ldr	r3, [r7, #8]
 1289 010c 1A68     		ldr	r2, [r3]
 1290 010e 3B6A     		ldr	r3, [r7, #32]
 1291 0110 1B6C     		ldr	r3, [r3, #64]
 1292 0112 1A44     		add	r2, r2, r3
 1293 0114 BB68     		ldr	r3, [r7, #8]
 1294 0116 1A60     		str	r2, [r3]
 1295 0118 17E0     		b	.L81
 1296              	.L80:
 573:..\src/interruptions.c ****             else {
 574:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1297              		.loc 1 574 0
 1298 011a 7B68     		ldr	r3, [r7, #4]
 1299 011c 1B68     		ldr	r3, [r3]
 1300 011e 7A6A     		ldr	r2, [r7, #36]
 1301 0120 D21A     		subs	r2, r2, r3
 1302 0122 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 34


 1303 0124 DB6B     		ldr	r3, [r3, #60]
 1304 0126 9A42     		cmp	r2, r3
 1305 0128 0BDA     		bge	.L82
 1306              		.loc 1 574 0 is_stmt 0 discriminator 1
 1307 012a 3B6A     		ldr	r3, [r7, #32]
 1308 012c DB6B     		ldr	r3, [r3, #60]
 1309 012e 002B     		cmp	r3, #0
 1310 0130 07D0     		beq	.L82
 575:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1311              		.loc 1 575 0 is_stmt 1
 1312 0132 BB68     		ldr	r3, [r7, #8]
 1313 0134 1A68     		ldr	r2, [r3]
 1314 0136 3B6A     		ldr	r3, [r7, #32]
 1315 0138 DB6B     		ldr	r3, [r3, #60]
 1316 013a 1A44     		add	r2, r2, r3
 1317 013c BB68     		ldr	r3, [r7, #8]
 1318 013e 1A60     		str	r2, [r3]
 1319 0140 03E0     		b	.L81
 1320              	.L82:
 576:..\src/interruptions.c ****                 else
 577:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1321              		.loc 1 577 0
 1322 0142 BB68     		ldr	r3, [r7, #8]
 1323 0144 7A6A     		ldr	r2, [r7, #36]
 1324 0146 1A60     		str	r2, [r3]
 578:..\src/interruptions.c ****             }
 579:..\src/interruptions.c ****             break;
 1325              		.loc 1 579 0
 1326 0148 DFE1     		b	.L83
 1327              	.L81:
 1328 014a DEE1     		b	.L83
 1329              	.L76:
 580:..\src/interruptions.c ****         
 581:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 582:..\src/interruptions.c ****             
 583:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1330              		.loc 1 583 0
 1331 014c 5A4B     		ldr	r3, .L132
 1332 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1333 0152 002B     		cmp	r3, #0
 1334 0154 57D1     		bne	.L84
 584:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 585:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1335              		.loc 1 585 0
 1336 0156 7B68     		ldr	r3, [r7, #4]
 1337 0158 1A68     		ldr	r2, [r3]
 1338 015a BB68     		ldr	r3, [r7, #8]
 1339 015c 1A60     		str	r2, [r3]
 586:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1340              		.loc 1 586 0
 1341 015e 574B     		ldr	r3, .L132+4
 1342 0160 1B6A     		ldr	r3, [r3, #32]
 1343 0162 B3F52F7F 		cmp	r3, #700
 1344 0166 45DC     		bgt	.L85
 1345              	.LBB3:
 587:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1346              		.loc 1 587 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 35


 1347 0168 544B     		ldr	r3, .L132+4
 1348 016a 1B6A     		ldr	r3, [r3, #32]
 1349 016c 524A     		ldr	r2, .L132
 1350 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1351 0172 9B1A     		subs	r3, r3, r2
 1352 0174 3B61     		str	r3, [r7, #16]
 588:..\src/interruptions.c **** 
 589:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1353              		.loc 1 589 0
 1354 0176 514B     		ldr	r3, .L132+4
 1355 0178 1B6A     		ldr	r3, [r3, #32]
 1356 017a 4F4A     		ldr	r2, .L132
 1357 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1358 0180 9342     		cmp	r3, r2
 1359 0182 13DD     		ble	.L86
 590:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1360              		.loc 1 590 0
 1361 0184 BB68     		ldr	r3, [r7, #8]
 1362 0186 1A68     		ldr	r2, [r3]
 1363 0188 4B4B     		ldr	r3, .L132
 1364 018a B3F8B032 		ldrh	r3, [r3, #688]
 1365 018e 1946     		mov	r1, r3
 1366 0190 3B69     		ldr	r3, [r7, #16]
 1367 0192 03FB01F1 		mul	r1, r3, r1
 1368 0196 484B     		ldr	r3, .L132
 1369 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1370 019c C3F58063 		rsb	r3, r3, #1024
 1371 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1372 01a4 1A44     		add	r2, r2, r3
 1373 01a6 BB68     		ldr	r3, [r7, #8]
 1374 01a8 1A60     		str	r2, [r3]
 1375              	.LBE3:
 591:..\src/interruptions.c ****                     }
 592:..\src/interruptions.c ****                     else {
 593:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 594:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 595:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 596:..\src/interruptions.c ****                         }
 597:..\src/interruptions.c ****                     }
 598:..\src/interruptions.c ****                 }
 599:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 600:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 601:..\src/interruptions.c ****                 }
 602:..\src/interruptions.c ****             }
 603:..\src/interruptions.c ****             else {
 604:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 605:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 606:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 607:..\src/interruptions.c ****                 }
 608:..\src/interruptions.c ****             }
 609:..\src/interruptions.c ****             break;
 1376              		.loc 1 609 0
 1377 01aa A5E1     		b	.L125
 1378              	.L86:
 1379              	.LBB4:
 593:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1380              		.loc 1 593 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 36


 1381 01ac 434B     		ldr	r3, .L132+4
 1382 01ae 1B6A     		ldr	r3, [r3, #32]
 1383 01b0 414A     		ldr	r2, .L132
 1384 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1385 01b6 1344     		add	r3, r3, r2
 1386 01b8 3B61     		str	r3, [r7, #16]
 594:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1387              		.loc 1 594 0
 1388 01ba 404B     		ldr	r3, .L132+4
 1389 01bc 1A6A     		ldr	r2, [r3, #32]
 1390 01be 3E4B     		ldr	r3, .L132
 1391 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1392 01c4 5B42     		negs	r3, r3
 1393 01c6 9A42     		cmp	r2, r3
 1394 01c8 80F29681 		bge	.L125
 595:..\src/interruptions.c ****                         }
 1395              		.loc 1 595 0
 1396 01cc BB68     		ldr	r3, [r7, #8]
 1397 01ce 1A68     		ldr	r2, [r3]
 1398 01d0 394B     		ldr	r3, .L132
 1399 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1400 01d6 1946     		mov	r1, r3
 1401 01d8 3B69     		ldr	r3, [r7, #16]
 1402 01da 03FB01F1 		mul	r1, r3, r1
 1403 01de 364B     		ldr	r3, .L132
 1404 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1405 01e4 C3F58063 		rsb	r3, r3, #1024
 1406 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1407 01ec 1A44     		add	r2, r2, r3
 1408 01ee BB68     		ldr	r3, [r7, #8]
 1409 01f0 1A60     		str	r2, [r3]
 1410              	.LBE4:
 1411              		.loc 1 609 0
 1412 01f2 81E1     		b	.L125
 1413              	.L85:
 600:..\src/interruptions.c ****                 }
 1414              		.loc 1 600 0
 1415 01f4 BB68     		ldr	r3, [r7, #8]
 1416 01f6 1B68     		ldr	r3, [r3]
 1417 01f8 324A     		ldr	r2, .L132+12
 1418 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1419 01fe 9A1A     		subs	r2, r3, r2
 1420 0200 BB68     		ldr	r3, [r7, #8]
 1421 0202 1A60     		str	r2, [r3]
 1422              		.loc 1 609 0
 1423 0204 78E1     		b	.L125
 1424              	.L84:
 605:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1425              		.loc 1 605 0
 1426 0206 2C4B     		ldr	r3, .L132
 1427 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1428 020c 042B     		cmp	r3, #4
 1429 020e 40F07381 		bne	.L125
 606:..\src/interruptions.c ****                 }
 1430              		.loc 1 606 0
 1431 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1432 0214 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 37


 1433 0216 B968     		ldr	r1, [r7, #8]
 1434 0218 1846     		mov	r0, r3
 1435 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1436              		.loc 1 609 0
 1437 021e 6BE1     		b	.L125
 1438              	.L72:
 610:..\src/interruptions.c ****             
 611:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 612:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1439              		.loc 1 612 0
 1440 0220 BB69     		ldr	r3, [r7, #24]
 1441 0222 002B     		cmp	r3, #0
 1442 0224 15DD     		ble	.L90
 613:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1443              		.loc 1 613 0
 1444 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1445 0228 2649     		ldr	r1, .L132+12
 1446 022a 1346     		mov	r3, r2
 1447 022c DB00     		lsls	r3, r3, #3
 1448 022e 9B1A     		subs	r3, r3, r2
 1449 0230 1B01     		lsls	r3, r3, #4
 1450 0232 0B44     		add	r3, r3, r1
 1451 0234 E833     		adds	r3, r3, #232
 1452 0236 1B68     		ldr	r3, [r3]
 1453 0238 BA69     		ldr	r2, [r7, #24]
 1454 023a 02FB03F2 		mul	r2, r2, r3
 1455 023e 1E4B     		ldr	r3, .L132
 1456 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1457 0244 C3F58063 		rsb	r3, r3, #1024
 1458 0248 92FBF3F2 		sdiv	r2, r2, r3
 1459 024c BB68     		ldr	r3, [r7, #8]
 1460 024e 1A60     		str	r2, [r3]
 614:..\src/interruptions.c ****             else
 615:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 616:..\src/interruptions.c ****             break;
 1461              		.loc 1 616 0
 1462 0250 5BE1     		b	.L83
 1463              	.L90:
 615:..\src/interruptions.c ****             break;
 1464              		.loc 1 615 0
 1465 0252 BB68     		ldr	r3, [r7, #8]
 1466 0254 0022     		movs	r2, #0
 1467 0256 1A60     		str	r2, [r3]
 1468              		.loc 1 616 0
 1469 0258 57E1     		b	.L83
 1470              	.L77:
 617:..\src/interruptions.c ****         
 618:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 619:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1471              		.loc 1 619 0
 1472 025a BB69     		ldr	r3, [r7, #24]
 1473 025c 002B     		cmp	r3, #0
 1474 025e 1FDD     		ble	.L92
 620:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1475              		.loc 1 620 0
 1476 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1477 0262 1849     		ldr	r1, .L132+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 38


 1478 0264 1346     		mov	r3, r2
 1479 0266 DB00     		lsls	r3, r3, #3
 1480 0268 9B1A     		subs	r3, r3, r2
 1481 026a 1B01     		lsls	r3, r3, #4
 1482 026c 0B44     		add	r3, r3, r1
 1483 026e E833     		adds	r3, r3, #232
 1484 0270 1968     		ldr	r1, [r3]
 1485 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1486 0274 1348     		ldr	r0, .L132+12
 1487 0276 1346     		mov	r3, r2
 1488 0278 DB00     		lsls	r3, r3, #3
 1489 027a 9B1A     		subs	r3, r3, r2
 1490 027c 1B01     		lsls	r3, r3, #4
 1491 027e 0344     		add	r3, r3, r0
 1492 0280 E833     		adds	r3, r3, #232
 1493 0282 1B68     		ldr	r3, [r3]
 1494 0284 BA69     		ldr	r2, [r7, #24]
 1495 0286 02FB03F2 		mul	r2, r2, r3
 1496 028a 0B4B     		ldr	r3, .L132
 1497 028c B3F8F031 		ldrh	r3, [r3, #496]
 1498 0290 C3F58063 		rsb	r3, r3, #1024
 1499 0294 92FBF3F3 		sdiv	r3, r2, r3
 1500 0298 CA1A     		subs	r2, r1, r3
 1501 029a BB68     		ldr	r3, [r7, #8]
 1502 029c 1A60     		str	r2, [r3]
 621:..\src/interruptions.c ****             else
 622:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 623:..\src/interruptions.c ****             break;
 1503              		.loc 1 623 0
 1504 029e 34E1     		b	.L83
 1505              	.L92:
 622:..\src/interruptions.c ****             break;
 1506              		.loc 1 622 0
 1507 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1508 02a2 0849     		ldr	r1, .L132+12
 1509 02a4 1346     		mov	r3, r2
 1510 02a6 DB00     		lsls	r3, r3, #3
 1511 02a8 9B1A     		subs	r3, r3, r2
 1512 02aa 1B01     		lsls	r3, r3, #4
 1513 02ac 0B44     		add	r3, r3, r1
 1514 02ae E833     		adds	r3, r3, #232
 1515 02b0 1A68     		ldr	r2, [r3]
 1516 02b2 BB68     		ldr	r3, [r7, #8]
 1517 02b4 1A60     		str	r2, [r3]
 1518              		.loc 1 623 0
 1519 02b6 28E1     		b	.L83
 1520              	.L133:
 1521              		.align	2
 1522              	.L132:
 1523 02b8 00000000 		.word	c_mem
 1524 02bc 00000000 		.word	g_adc_meas
 1525 02c0 00000000 		.word	g_meas
 1526 02c4 00000000 		.word	g_mem
 1527              	.L73:
 624:..\src/interruptions.c **** 
 625:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 626:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 39


 1528              		.loc 1 626 0
 1529 02c8 7B68     		ldr	r3, [r7, #4]
 1530 02ca 1A68     		ldr	r2, [r3]
 1531 02cc BB68     		ldr	r3, [r7, #8]
 1532 02ce 1A60     		str	r2, [r3]
 627:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1533              		.loc 1 627 0
 1534 02d0 BB69     		ldr	r3, [r7, #24]
 1535 02d2 002B     		cmp	r3, #0
 1536 02d4 13DD     		ble	.L94
 628:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1537              		.loc 1 628 0
 1538 02d6 7B68     		ldr	r3, [r7, #4]
 1539 02d8 1A68     		ldr	r2, [r3]
 1540 02da 884B     		ldr	r3, .L134
 1541 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1542 02e0 1946     		mov	r1, r3
 1543 02e2 BB69     		ldr	r3, [r7, #24]
 1544 02e4 03FB01F3 		mul	r3, r3, r1
 1545 02e8 5900     		lsls	r1, r3, #1
 1546 02ea 854B     		ldr	r3, .L134+4
 1547 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1548 02f0 C3F58063 		rsb	r3, r3, #1024
 1549 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1550 02f8 1A44     		add	r2, r2, r3
 1551 02fa BB68     		ldr	r3, [r7, #8]
 1552 02fc 1A60     		str	r2, [r3]
 1553              	.L94:
 629:..\src/interruptions.c ****             }
 630:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1554              		.loc 1 630 0
 1555 02fe 7B69     		ldr	r3, [r7, #20]
 1556 0300 002B     		cmp	r3, #0
 1557 0302 40F30181 		ble	.L126
 631:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1558              		.loc 1 631 0
 1559 0306 7B68     		ldr	r3, [r7, #4]
 1560 0308 1A68     		ldr	r2, [r3]
 1561 030a 7C4B     		ldr	r3, .L134
 1562 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1563 0310 1946     		mov	r1, r3
 1564 0312 7B69     		ldr	r3, [r7, #20]
 1565 0314 03FB01F3 		mul	r3, r3, r1
 1566 0318 5900     		lsls	r1, r3, #1
 1567 031a 794B     		ldr	r3, .L134+4
 1568 031c B3F8F231 		ldrh	r3, [r3, #498]
 1569 0320 C3F58063 		rsb	r3, r3, #1024
 1570 0324 91FBF3F3 		sdiv	r3, r1, r3
 1571 0328 D21A     		subs	r2, r2, r3
 1572 032a BB68     		ldr	r3, [r7, #8]
 1573 032c 1A60     		str	r2, [r3]
 632:..\src/interruptions.c ****             }
 633:..\src/interruptions.c ****             break;
 1574              		.loc 1 633 0
 1575 032e EBE0     		b	.L126
 1576              	.L74:
 634:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 40


 635:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 636:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1577              		.loc 1 636 0
 1578 0330 7B68     		ldr	r3, [r7, #4]
 1579 0332 1A68     		ldr	r2, [r3]
 1580 0334 BB68     		ldr	r3, [r7, #8]
 1581 0336 1A60     		str	r2, [r3]
 637:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1582              		.loc 1 637 0
 1583 0338 714B     		ldr	r3, .L134+4
 1584 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1585 033e 042B     		cmp	r3, #4
 1586 0340 5BD0     		beq	.L96
 638:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1587              		.loc 1 638 0
 1588 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1589 0344 6F4A     		ldr	r2, .L134+8
 1590 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1591 0348 012B     		cmp	r3, #1
 1592 034a 1CD0     		beq	.L98
 1593 034c 022B     		cmp	r3, #2
 1594 034e 37D0     		beq	.L99
 1595 0350 002B     		cmp	r3, #0
 1596 0352 00D0     		beq	.L100
 639:..\src/interruptions.c ****                     case 0:
 640:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 641:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 642:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 643:..\src/interruptions.c ****                             break;
 644:..\src/interruptions.c ****                         }
 645:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 646:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 647:..\src/interruptions.c ****                             break;
 648:..\src/interruptions.c ****                         }
 649:..\src/interruptions.c ****                         break;
 650:..\src/interruptions.c **** 
 651:..\src/interruptions.c ****                     case 1:
 652:..\src/interruptions.c ****                         // EMG 1 is first
 653:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 654:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 655:..\src/interruptions.c ****                             break;
 656:..\src/interruptions.c ****                         }
 657:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 658:..\src/interruptions.c ****                         break;
 659:..\src/interruptions.c **** 
 660:..\src/interruptions.c ****                     case 2:
 661:..\src/interruptions.c ****                         // EMG 2 is first
 662:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 663:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 664:..\src/interruptions.c ****                             break;
 665:..\src/interruptions.c ****                         }
 666:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 667:..\src/interruptions.c ****                         break;
 668:..\src/interruptions.c **** 
 669:..\src/interruptions.c ****                     default:
 670:..\src/interruptions.c ****                         break;
 1597              		.loc 1 670 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 41


 1598 0354 5BE0     		b	.L106
 1599              	.L100:
 641:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1600              		.loc 1 641 0
 1601 0356 BB69     		ldr	r3, [r7, #24]
 1602 0358 002B     		cmp	r3, #0
 1603 035a 08DD     		ble	.L101
 641:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1604              		.loc 1 641 0 is_stmt 0 discriminator 1
 1605 035c BA69     		ldr	r2, [r7, #24]
 1606 035e 7B69     		ldr	r3, [r7, #20]
 1607 0360 9A42     		cmp	r2, r3
 1608 0362 04DD     		ble	.L101
 642:..\src/interruptions.c ****                             break;
 1609              		.loc 1 642 0 is_stmt 1
 1610 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1611 0366 674A     		ldr	r2, .L134+8
 1612 0368 0121     		movs	r1, #1
 1613 036a D154     		strb	r1, [r2, r3]
 643:..\src/interruptions.c ****                         }
 1614              		.loc 1 643 0
 1615 036c 4FE0     		b	.L106
 1616              	.L101:
 645:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1617              		.loc 1 645 0
 1618 036e 7B69     		ldr	r3, [r7, #20]
 1619 0370 002B     		cmp	r3, #0
 1620 0372 4BDD     		ble	.L127
 645:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1621              		.loc 1 645 0 is_stmt 0 discriminator 1
 1622 0374 7A69     		ldr	r2, [r7, #20]
 1623 0376 BB69     		ldr	r3, [r7, #24]
 1624 0378 9A42     		cmp	r2, r3
 1625 037a 47DD     		ble	.L127
 646:..\src/interruptions.c ****                             break;
 1626              		.loc 1 646 0 is_stmt 1
 1627 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1628 037e 614A     		ldr	r2, .L134+8
 1629 0380 0221     		movs	r1, #2
 1630 0382 D154     		strb	r1, [r2, r3]
 647:..\src/interruptions.c ****                         }
 1631              		.loc 1 647 0
 1632 0384 43E0     		b	.L106
 1633              	.L98:
 653:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1634              		.loc 1 653 0
 1635 0386 BB69     		ldr	r3, [r7, #24]
 1636 0388 002B     		cmp	r3, #0
 1637 038a 04DA     		bge	.L104
 654:..\src/interruptions.c ****                             break;
 1638              		.loc 1 654 0
 1639 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1640 038e 5D4A     		ldr	r2, .L134+8
 1641 0390 0021     		movs	r1, #0
 1642 0392 D154     		strb	r1, [r2, r3]
 655:..\src/interruptions.c ****                         }
 1643              		.loc 1 655 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 42


 1644 0394 3BE0     		b	.L106
 1645              	.L104:
 657:..\src/interruptions.c ****                         break;
 1646              		.loc 1 657 0
 1647 0396 7B68     		ldr	r3, [r7, #4]
 1648 0398 1A68     		ldr	r2, [r3]
 1649 039a 584B     		ldr	r3, .L134
 1650 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1651 03a0 1946     		mov	r1, r3
 1652 03a2 BB69     		ldr	r3, [r7, #24]
 1653 03a4 03FB01F3 		mul	r3, r3, r1
 1654 03a8 9900     		lsls	r1, r3, #2
 1655 03aa 554B     		ldr	r3, .L134+4
 1656 03ac B3F8F031 		ldrh	r3, [r3, #496]
 1657 03b0 C3F58063 		rsb	r3, r3, #1024
 1658 03b4 91FBF3F3 		sdiv	r3, r1, r3
 1659 03b8 1A44     		add	r2, r2, r3
 1660 03ba BB68     		ldr	r3, [r7, #8]
 1661 03bc 1A60     		str	r2, [r3]
 658:..\src/interruptions.c **** 
 1662              		.loc 1 658 0
 1663 03be 26E0     		b	.L106
 1664              	.L99:
 662:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1665              		.loc 1 662 0
 1666 03c0 7B69     		ldr	r3, [r7, #20]
 1667 03c2 002B     		cmp	r3, #0
 1668 03c4 04DA     		bge	.L105
 663:..\src/interruptions.c ****                             break;
 1669              		.loc 1 663 0
 1670 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1671 03c8 4E4A     		ldr	r2, .L134+8
 1672 03ca 0021     		movs	r1, #0
 1673 03cc D154     		strb	r1, [r2, r3]
 664:..\src/interruptions.c ****                         }
 1674              		.loc 1 664 0
 1675 03ce 1EE0     		b	.L106
 1676              	.L105:
 666:..\src/interruptions.c ****                         break;
 1677              		.loc 1 666 0
 1678 03d0 7B68     		ldr	r3, [r7, #4]
 1679 03d2 1A68     		ldr	r2, [r3]
 1680 03d4 494B     		ldr	r3, .L134
 1681 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1682 03da 1946     		mov	r1, r3
 1683 03dc 7B69     		ldr	r3, [r7, #20]
 1684 03de 03FB01F3 		mul	r3, r3, r1
 1685 03e2 9900     		lsls	r1, r3, #2
 1686 03e4 464B     		ldr	r3, .L134+4
 1687 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 1688 03ea C3F58063 		rsb	r3, r3, #1024
 1689 03ee 91FBF3F3 		sdiv	r3, r1, r3
 1690 03f2 D21A     		subs	r2, r2, r3
 1691 03f4 BB68     		ldr	r3, [r7, #8]
 1692 03f6 1A60     		str	r2, [r3]
 667:..\src/interruptions.c **** 
 1693              		.loc 1 667 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 43


 1694 03f8 09E0     		b	.L106
 1695              	.L96:
 671:..\src/interruptions.c ****                 }
 672:..\src/interruptions.c ****             }
 673:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 674:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 675:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 1696              		.loc 1 675 0
 1697 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 1698 03fc 7B69     		ldr	r3, [r7, #20]
 1699 03fe 0093     		str	r3, [sp]
 1700 0400 BB69     		ldr	r3, [r7, #24]
 1701 0402 7A68     		ldr	r2, [r7, #4]
 1702 0404 B968     		ldr	r1, [r7, #8]
 1703 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 676:..\src/interruptions.c ****             }
 677:..\src/interruptions.c ****             break;
 1704              		.loc 1 677 0
 1705 040a 7EE0     		b	.L83
 1706              	.L127:
 649:..\src/interruptions.c **** 
 1707              		.loc 1 649 0
 1708 040c 00BF     		nop
 1709              	.L106:
 1710              		.loc 1 677 0 discriminator 5
 1711 040e 7CE0     		b	.L83
 1712              	.L75:
 678:..\src/interruptions.c **** 
 679:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 680:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1713              		.loc 1 680 0
 1714 0410 7B68     		ldr	r3, [r7, #4]
 1715 0412 1A68     		ldr	r2, [r3]
 1716 0414 BB68     		ldr	r3, [r7, #8]
 1717 0416 1A60     		str	r2, [r3]
 681:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1718              		.loc 1 681 0
 1719 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1720 041a 3A4A     		ldr	r2, .L134+8
 1721 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1722 041e 012B     		cmp	r3, #1
 1723 0420 1CD0     		beq	.L108
 1724 0422 022B     		cmp	r3, #2
 1725 0424 3DD0     		beq	.L109
 1726 0426 002B     		cmp	r3, #0
 1727 0428 00D0     		beq	.L110
 682:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 683:..\src/interruptions.c ****                 case 0:
 684:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 685:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 686:..\src/interruptions.c ****                         break;
 687:..\src/interruptions.c ****                     }
 688:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 689:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 690:..\src/interruptions.c ****                         break;
 691:..\src/interruptions.c ****                     }
 692:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 44


 693:..\src/interruptions.c **** 
 694:..\src/interruptions.c ****                 // EMG 1 is first
 695:..\src/interruptions.c ****                 case 1:
 696:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 697:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 698:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 699:..\src/interruptions.c ****                         break;
 700:..\src/interruptions.c ****                     }
 701:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 702:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 703:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 704:..\src/interruptions.c ****                     
 705:..\src/interruptions.c ****                     break;
 706:..\src/interruptions.c **** 
 707:..\src/interruptions.c ****                 // EMG 2 is first
 708:..\src/interruptions.c ****                 case 2:
 709:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 710:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 711:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 712:..\src/interruptions.c ****                         break;
 713:..\src/interruptions.c ****                     }
 714:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 715:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 716:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 717:..\src/interruptions.c ****                     }
 718:..\src/interruptions.c ****                     break;
 719:..\src/interruptions.c **** 
 720:..\src/interruptions.c ****                 default:
 721:..\src/interruptions.c ****                     break;
 1728              		.loc 1 721 0
 1729 042a 62E0     		b	.L112
 1730              	.L110:
 684:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1731              		.loc 1 684 0
 1732 042c BB69     		ldr	r3, [r7, #24]
 1733 042e 002B     		cmp	r3, #0
 1734 0430 08DD     		ble	.L111
 684:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1735              		.loc 1 684 0 is_stmt 0 discriminator 1
 1736 0432 BA69     		ldr	r2, [r7, #24]
 1737 0434 7B69     		ldr	r3, [r7, #20]
 1738 0436 9A42     		cmp	r2, r3
 1739 0438 04DD     		ble	.L111
 685:..\src/interruptions.c ****                         break;
 1740              		.loc 1 685 0 is_stmt 1
 1741 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1742 043c 314A     		ldr	r2, .L134+8
 1743 043e 0121     		movs	r1, #1
 1744 0440 D154     		strb	r1, [r2, r3]
 686:..\src/interruptions.c ****                     }
 1745              		.loc 1 686 0
 1746 0442 56E0     		b	.L112
 1747              	.L111:
 688:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1748              		.loc 1 688 0
 1749 0444 7B69     		ldr	r3, [r7, #20]
 1750 0446 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 45


 1751 0448 4EDD     		ble	.L128
 688:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1752              		.loc 1 688 0 is_stmt 0 discriminator 1
 1753 044a 7A69     		ldr	r2, [r7, #20]
 1754 044c BB69     		ldr	r3, [r7, #24]
 1755 044e 9A42     		cmp	r2, r3
 1756 0450 4ADD     		ble	.L128
 689:..\src/interruptions.c ****                         break;
 1757              		.loc 1 689 0 is_stmt 1
 1758 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1759 0454 2B4A     		ldr	r2, .L134+8
 1760 0456 0221     		movs	r1, #2
 1761 0458 D154     		strb	r1, [r2, r3]
 690:..\src/interruptions.c ****                     }
 1762              		.loc 1 690 0
 1763 045a 4AE0     		b	.L112
 1764              	.L108:
 697:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1765              		.loc 1 697 0
 1766 045c BB69     		ldr	r3, [r7, #24]
 1767 045e 002B     		cmp	r3, #0
 1768 0460 07DA     		bge	.L114
 697:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1769              		.loc 1 697 0 is_stmt 0 discriminator 1
 1770 0462 7B69     		ldr	r3, [r7, #20]
 1771 0464 002B     		cmp	r3, #0
 1772 0466 04DA     		bge	.L114
 698:..\src/interruptions.c ****                         break;
 1773              		.loc 1 698 0 is_stmt 1
 1774 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1775 046a 264A     		ldr	r2, .L134+8
 1776 046c 0021     		movs	r1, #0
 1777 046e D154     		strb	r1, [r2, r3]
 699:..\src/interruptions.c ****                     }
 1778              		.loc 1 699 0
 1779 0470 3FE0     		b	.L112
 1780              	.L114:
 702:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 1781              		.loc 1 702 0
 1782 0472 BB69     		ldr	r3, [r7, #24]
 1783 0474 002B     		cmp	r3, #0
 1784 0476 39DD     		ble	.L129
 703:..\src/interruptions.c ****                     
 1785              		.loc 1 703 0
 1786 0478 7B68     		ldr	r3, [r7, #4]
 1787 047a 1A68     		ldr	r2, [r3]
 1788 047c 1F4B     		ldr	r3, .L134
 1789 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1790 0482 1946     		mov	r1, r3
 1791 0484 BB69     		ldr	r3, [r7, #24]
 1792 0486 03FB01F3 		mul	r3, r3, r1
 1793 048a 9900     		lsls	r1, r3, #2
 1794 048c 1C4B     		ldr	r3, .L134+4
 1795 048e B3F8F031 		ldrh	r3, [r3, #496]
 1796 0492 C3F58063 		rsb	r3, r3, #1024
 1797 0496 91FBF3F3 		sdiv	r3, r1, r3
 1798 049a 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 46


 1799 049c BB68     		ldr	r3, [r7, #8]
 1800 049e 1A60     		str	r2, [r3]
 705:..\src/interruptions.c **** 
 1801              		.loc 1 705 0
 1802 04a0 24E0     		b	.L129
 1803              	.L109:
 710:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1804              		.loc 1 710 0
 1805 04a2 BB69     		ldr	r3, [r7, #24]
 1806 04a4 002B     		cmp	r3, #0
 1807 04a6 07DA     		bge	.L116
 710:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1808              		.loc 1 710 0 is_stmt 0 discriminator 1
 1809 04a8 7B69     		ldr	r3, [r7, #20]
 1810 04aa 002B     		cmp	r3, #0
 1811 04ac 04DA     		bge	.L116
 711:..\src/interruptions.c ****                         break;
 1812              		.loc 1 711 0 is_stmt 1
 1813 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1814 04b0 144A     		ldr	r2, .L134+8
 1815 04b2 0021     		movs	r1, #0
 1816 04b4 D154     		strb	r1, [r2, r3]
 712:..\src/interruptions.c ****                     }
 1817              		.loc 1 712 0
 1818 04b6 1CE0     		b	.L112
 1819              	.L116:
 715:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 1820              		.loc 1 715 0
 1821 04b8 7B69     		ldr	r3, [r7, #20]
 1822 04ba 002B     		cmp	r3, #0
 1823 04bc 18DD     		ble	.L130
 716:..\src/interruptions.c ****                     }
 1824              		.loc 1 716 0
 1825 04be 7B68     		ldr	r3, [r7, #4]
 1826 04c0 1A68     		ldr	r2, [r3]
 1827 04c2 0F4B     		ldr	r3, .L134+4
 1828 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1829 04c8 1946     		mov	r1, r3
 1830 04ca 7B69     		ldr	r3, [r7, #20]
 1831 04cc 03FB01F3 		mul	r3, r3, r1
 1832 04d0 9900     		lsls	r1, r3, #2
 1833 04d2 0B4B     		ldr	r3, .L134+4
 1834 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 1835 04d8 C3F58063 		rsb	r3, r3, #1024
 1836 04dc 91FBF3F3 		sdiv	r3, r1, r3
 1837 04e0 D21A     		subs	r2, r2, r3
 1838 04e2 BB68     		ldr	r3, [r7, #8]
 1839 04e4 1A60     		str	r2, [r3]
 718:..\src/interruptions.c **** 
 1840              		.loc 1 718 0
 1841 04e6 03E0     		b	.L130
 1842              	.L128:
 692:..\src/interruptions.c **** 
 1843              		.loc 1 692 0
 1844 04e8 00BF     		nop
 1845 04ea 0EE0     		b	.L83
 1846              	.L129:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 47


 705:..\src/interruptions.c **** 
 1847              		.loc 1 705 0
 1848 04ec 00BF     		nop
 1849 04ee 0CE0     		b	.L83
 1850              	.L130:
 718:..\src/interruptions.c **** 
 1851              		.loc 1 718 0
 1852 04f0 00BF     		nop
 1853              	.L112:
 722:..\src/interruptions.c ****             }
 723:..\src/interruptions.c ****             break;
 1854              		.loc 1 723 0 discriminator 6
 1855 04f2 0AE0     		b	.L83
 1856              	.L124:
 724:..\src/interruptions.c **** 
 725:..\src/interruptions.c ****         default:
 726:..\src/interruptions.c ****             break;
 1857              		.loc 1 726 0
 1858 04f4 00BF     		nop
 1859 04f6 08E0     		b	.L83
 1860              	.L125:
 609:..\src/interruptions.c ****             
 1861              		.loc 1 609 0
 1862 04f8 00BF     		nop
 1863 04fa 06E0     		b	.L83
 1864              	.L135:
 1865              		.align	2
 1866              	.L134:
 1867 04fc 00000000 		.word	g_mem
 1868 0500 00000000 		.word	c_mem
 1869 0504 8C000000 		.word	current_emg.10261
 1870              	.L126:
 633:..\src/interruptions.c **** 
 1871              		.loc 1 633 0
 1872 0508 00BF     		nop
 1873              	.L83:
 727:..\src/interruptions.c ****     }
 728:..\src/interruptions.c **** 
 729:..\src/interruptions.c ****     // Position limit saturation
 730:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 1874              		.loc 1 730 0
 1875 050a 3B6A     		ldr	r3, [r7, #32]
 1876 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1877 0510 002B     		cmp	r3, #0
 1878 0512 13D0     		beq	.L118
 731:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 1879              		.loc 1 731 0
 1880 0514 BB68     		ldr	r3, [r7, #8]
 1881 0516 1A68     		ldr	r2, [r3]
 1882 0518 3B6A     		ldr	r3, [r7, #32]
 1883 051a 5B6B     		ldr	r3, [r3, #52]
 1884 051c 9A42     		cmp	r2, r3
 1885 051e 03DA     		bge	.L119
 732:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 1886              		.loc 1 732 0
 1887 0520 3B6A     		ldr	r3, [r7, #32]
 1888 0522 5A6B     		ldr	r2, [r3, #52]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 48


 1889 0524 BB68     		ldr	r3, [r7, #8]
 1890 0526 1A60     		str	r2, [r3]
 1891              	.L119:
 733:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 1892              		.loc 1 733 0
 1893 0528 BB68     		ldr	r3, [r7, #8]
 1894 052a 1A68     		ldr	r2, [r3]
 1895 052c 3B6A     		ldr	r3, [r7, #32]
 1896 052e 9B6B     		ldr	r3, [r3, #56]
 1897 0530 9A42     		cmp	r2, r3
 1898 0532 03DD     		ble	.L118
 734:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 1899              		.loc 1 734 0
 1900 0534 3B6A     		ldr	r3, [r7, #32]
 1901 0536 9A6B     		ldr	r2, [r3, #56]
 1902 0538 BB68     		ldr	r3, [r7, #8]
 1903 053a 1A60     		str	r2, [r3]
 1904              	.L118:
 735:..\src/interruptions.c ****     }
 736:..\src/interruptions.c ****     
 737:..\src/interruptions.c ****     // SAFETY
 738:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1905              		.loc 1 738 0
 1906 053c 1D4B     		ldr	r3, .L136
 1907 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1908 0540 012B     		cmp	r3, #1
 1909 0542 02D1     		bne	.L120
 739:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 740:..\src/interruptions.c ****         st_ref_p->pos = 0;
 1910              		.loc 1 740 0
 1911 0544 BB68     		ldr	r3, [r7, #8]
 1912 0546 0022     		movs	r2, #0
 1913 0548 1A60     		str	r2, [r3]
 1914              	.L120:
 741:..\src/interruptions.c ****     }      
 742:..\src/interruptions.c ****     
 743:..\src/interruptions.c ****        
 744:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1915              		.loc 1 744 0
 1916 054a 1B4B     		ldr	r3, .L136+4
 1917 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1918 0550 012B     		cmp	r3, #1
 1919 0552 2AD1     		bne	.L131
 745:..\src/interruptions.c ****         if (rest_enabled == 1){
 1920              		.loc 1 745 0
 1921 0554 194B     		ldr	r3, .L136+8
 1922 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1923 0558 012B     		cmp	r3, #1
 1924 055a 03D1     		bne	.L122
 746:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 747:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 1925              		.loc 1 747 0
 1926 055c 184B     		ldr	r3, .L136+12
 1927 055e 1A68     		ldr	r2, [r3]
 1928 0560 BB68     		ldr	r3, [r7, #8]
 1929 0562 1A60     		str	r2, [r3]
 1930              	.L122:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 49


 748:..\src/interruptions.c ****         }
 749:..\src/interruptions.c ****         
 750:..\src/interruptions.c ****         if (forced_open == 1) {
 1931              		.loc 1 750 0
 1932 0564 174B     		ldr	r3, .L136+16
 1933 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1934 0568 012B     		cmp	r3, #1
 1935 056a 1ED1     		bne	.L131
 751:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 752:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1936              		.loc 1 752 0
 1937 056c 7B69     		ldr	r3, [r7, #20]
 1938 056e 002B     		cmp	r3, #0
 1939 0570 13DD     		ble	.L123
 753:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 1940              		.loc 1 753 0
 1941 0572 154B     		ldr	r3, .L136+20
 1942 0574 D3F8A022 		ldr	r2, [r3, #672]
 1943 0578 134B     		ldr	r3, .L136+20
 1944 057a D3F8A032 		ldr	r3, [r3, #672]
 1945 057e 7969     		ldr	r1, [r7, #20]
 1946 0580 01FB03F1 		mul	r1, r1, r3
 1947 0584 0C4B     		ldr	r3, .L136+4
 1948 0586 B3F8F231 		ldrh	r3, [r3, #498]
 1949 058a C3F58063 		rsb	r3, r3, #1024
 1950 058e 91FBF3F3 		sdiv	r3, r1, r3
 1951 0592 D21A     		subs	r2, r2, r3
 1952 0594 BB68     		ldr	r3, [r7, #8]
 1953 0596 1A60     		str	r2, [r3]
 754:..\src/interruptions.c ****             else {
 755:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 756:..\src/interruptions.c ****                 forced_open = 0;
 757:..\src/interruptions.c ****             }
 758:..\src/interruptions.c ****         }
 759:..\src/interruptions.c ****     }
 760:..\src/interruptions.c **** }
 1954              		.loc 1 760 0
 1955 0598 07E0     		b	.L131
 1956              	.L123:
 755:..\src/interruptions.c ****                 forced_open = 0;
 1957              		.loc 1 755 0
 1958 059a 0B4B     		ldr	r3, .L136+20
 1959 059c D3F8A022 		ldr	r2, [r3, #672]
 1960 05a0 BB68     		ldr	r3, [r7, #8]
 1961 05a2 1A60     		str	r2, [r3]
 756:..\src/interruptions.c ****             }
 1962              		.loc 1 756 0
 1963 05a4 074B     		ldr	r3, .L136+16
 1964 05a6 0022     		movs	r2, #0
 1965 05a8 1A70     		strb	r2, [r3]
 1966              	.L131:
 1967              		.loc 1 760 0
 1968 05aa 00BF     		nop
 1969 05ac 2837     		adds	r7, r7, #40
 1970              		.cfi_def_cfa_offset 8
 1971 05ae BD46     		mov	sp, r7
 1972              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 50


 1973              		@ sp needed
 1974 05b0 80BD     		pop	{r7, pc}
 1975              	.L137:
 1976 05b2 00BF     		.align	2
 1977              	.L136:
 1978 05b4 00000000 		.word	battery_low_SoC
 1979 05b8 00000000 		.word	c_mem
 1980 05bc 00000000 		.word	rest_enabled
 1981 05c0 00000000 		.word	rest_pos_curr_ref
 1982 05c4 00000000 		.word	forced_open
 1983 05c8 00000000 		.word	g_mem
 1984              		.cfi_endproc
 1985              	.LFE68:
 1986              		.size	compute_reference, .-compute_reference
 1987              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 1988              		.align	2
 1989              		.global	compute_SoftHand_2_motors_joystick_reference
 1990              		.thumb
 1991              		.thumb_func
 1992              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 1993              	compute_SoftHand_2_motors_joystick_reference:
 1994              	.LFB69:
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c **** 
 763:..\src/interruptions.c **** //==============================================================================
 764:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 765:..\src/interruptions.c **** //==============================================================================
 766:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 1995              		.loc 1 766 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 32
 1998              		@ frame_needed = 1, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 2000 0000 80B4     		push	{r7}
 2001              		.cfi_def_cfa_offset 4
 2002              		.cfi_offset 7, -4
 2003 0002 89B0     		sub	sp, sp, #36
 2004              		.cfi_def_cfa_offset 40
 2005 0004 00AF     		add	r7, sp, #0
 2006              		.cfi_def_cfa_register 7
 2007 0006 0346     		mov	r3, r0
 2008 0008 B960     		str	r1, [r7, #8]
 2009 000a 7A60     		str	r2, [r7, #4]
 2010 000c FB73     		strb	r3, [r7, #15]
 767:..\src/interruptions.c ****     
 768:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2011              		.loc 1 768 0
 2012 000e B04B     		ldr	r3, .L159
 2013 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2014 0014 062B     		cmp	r3, #6
 2015 0016 40F08581 		bne	.L157
 2016              		.loc 1 768 0 is_stmt 0 discriminator 1
 2017 001a AD4B     		ldr	r3, .L159
 2018 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2019 0020 062B     		cmp	r3, #6
 2020 0022 40F07F81 		bne	.L157
 769:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 51


 2021              		.loc 1 769 0 is_stmt 1
 2022 0026 7B68     		ldr	r3, [r7, #4]
 2023 0028 1A68     		ldr	r2, [r3]
 2024 002a BB68     		ldr	r3, [r7, #8]
 2025 002c 1A60     		str	r2, [r3]
 770:..\src/interruptions.c ****     
 771:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2026              		.loc 1 771 0
 2027 002e A94B     		ldr	r3, .L159+4
 2028 0030 1B6A     		ldr	r3, [r3, #32]
 2029 0032 B3F52F7F 		cmp	r3, #700
 2030 0036 00F3C280 		bgt	.L140
 2031              	.LBB5:
 772:..\src/interruptions.c ****              
 773:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2032              		.loc 1 773 0
 2033 003a 0023     		movs	r3, #0
 2034 003c FB61     		str	r3, [r7, #28]
 774:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2035              		.loc 1 774 0
 2036 003e 0023     		movs	r3, #0
 2037 0040 BB61     		str	r3, [r7, #24]
 775:..\src/interruptions.c ****         
 776:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2038              		.loc 1 776 0
 2039 0042 A44B     		ldr	r3, .L159+4
 2040 0044 1B6A     		ldr	r3, [r3, #32]
 2041 0046 A24A     		ldr	r2, .L159
 2042 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2043 004c 9342     		cmp	r3, r2
 2044 004e 1ADD     		ble	.L141
 777:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2045              		.loc 1 777 0
 2046 0050 A04B     		ldr	r3, .L159+4
 2047 0052 1B6A     		ldr	r3, [r3, #32]
 2048 0054 9E4A     		ldr	r2, .L159
 2049 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2050 005a 9B1A     		subs	r3, r3, r2
 2051 005c FB61     		str	r3, [r7, #28]
 778:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2052              		.loc 1 778 0
 2053 005e BB68     		ldr	r3, [r7, #8]
 2054 0060 1A68     		ldr	r2, [r3]
 2055 0062 9B4B     		ldr	r3, .L159
 2056 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2057 0068 1946     		mov	r1, r3
 2058 006a FB69     		ldr	r3, [r7, #28]
 2059 006c 03FB01F1 		mul	r1, r3, r1
 2060 0070 974B     		ldr	r3, .L159
 2061 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2062 0076 C3F58063 		rsb	r3, r3, #1024
 2063 007a 91FBF3F3 		sdiv	r3, r1, r3
 2064 007e 1A44     		add	r2, r2, r3
 2065 0080 BB68     		ldr	r3, [r7, #8]
 2066 0082 1A60     		str	r2, [r3]
 2067 0084 21E0     		b	.L142
 2068              	.L141:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 52


 779:..\src/interruptions.c ****             }
 780:..\src/interruptions.c ****             else {
 781:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2069              		.loc 1 781 0
 2070 0086 934B     		ldr	r3, .L159+4
 2071 0088 1A6A     		ldr	r2, [r3, #32]
 2072 008a 914B     		ldr	r3, .L159
 2073 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2074 0090 5B42     		negs	r3, r3
 2075 0092 9A42     		cmp	r2, r3
 2076 0094 19DA     		bge	.L142
 782:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2077              		.loc 1 782 0
 2078 0096 8F4B     		ldr	r3, .L159+4
 2079 0098 1B6A     		ldr	r3, [r3, #32]
 2080 009a 8D4A     		ldr	r2, .L159
 2081 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2082 00a0 1344     		add	r3, r3, r2
 2083 00a2 FB61     		str	r3, [r7, #28]
 783:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2084              		.loc 1 783 0
 2085 00a4 BB68     		ldr	r3, [r7, #8]
 2086 00a6 1A68     		ldr	r2, [r3]
 2087 00a8 894B     		ldr	r3, .L159
 2088 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2089 00ae 1946     		mov	r1, r3
 2090 00b0 FB69     		ldr	r3, [r7, #28]
 2091 00b2 03FB01F1 		mul	r1, r3, r1
 2092 00b6 864B     		ldr	r3, .L159
 2093 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2094 00bc C3F58063 		rsb	r3, r3, #1024
 2095 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2096 00c4 1A44     		add	r2, r2, r3
 2097 00c6 BB68     		ldr	r3, [r7, #8]
 2098 00c8 1A60     		str	r2, [r3]
 2099              	.L142:
 784:..\src/interruptions.c ****                 }
 785:..\src/interruptions.c ****             }
 786:..\src/interruptions.c **** 
 787:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2100              		.loc 1 787 0
 2101 00ca 824B     		ldr	r3, .L159+4
 2102 00cc 5B6A     		ldr	r3, [r3, #36]
 2103 00ce 804A     		ldr	r2, .L159
 2104 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2105 00d4 9342     		cmp	r3, r2
 2106 00d6 34DD     		ble	.L143
 788:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2107              		.loc 1 788 0
 2108 00d8 7E4B     		ldr	r3, .L159+4
 2109 00da 5B6A     		ldr	r3, [r3, #36]
 2110 00dc 7C4A     		ldr	r2, .L159
 2111 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2112 00e2 9B1A     		subs	r3, r3, r2
 2113 00e4 BB61     		str	r3, [r7, #24]
 789:..\src/interruptions.c ****                 if (motor_idx == 0){
 2114              		.loc 1 789 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 53


 2115 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2116 00e8 002B     		cmp	r3, #0
 2117 00ea 12D1     		bne	.L144
 790:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2118              		.loc 1 790 0
 2119 00ec BB68     		ldr	r3, [r7, #8]
 2120 00ee 1A68     		ldr	r2, [r3]
 2121 00f0 774B     		ldr	r3, .L159
 2122 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2123 00f6 1946     		mov	r1, r3
 2124 00f8 BB69     		ldr	r3, [r7, #24]
 2125 00fa 03FB01F1 		mul	r1, r3, r1
 2126 00fe 744B     		ldr	r3, .L159
 2127 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2128 0104 C3F58063 		rsb	r3, r3, #1024
 2129 0108 91FBF3F3 		sdiv	r3, r1, r3
 2130 010c 1A44     		add	r2, r2, r3
 2131 010e BB68     		ldr	r3, [r7, #8]
 2132 0110 1A60     		str	r2, [r3]
 2133              	.L144:
 791:..\src/interruptions.c ****                 }
 792:..\src/interruptions.c ****                 if (motor_idx == 1){
 2134              		.loc 1 792 0
 2135 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2136 0114 012B     		cmp	r3, #1
 2137 0116 40F00581 		bne	.L157
 793:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2138              		.loc 1 793 0
 2139 011a BB68     		ldr	r3, [r7, #8]
 2140 011c 1A68     		ldr	r2, [r3]
 2141 011e 6C4B     		ldr	r3, .L159
 2142 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2143 0124 1946     		mov	r1, r3
 2144 0126 BB69     		ldr	r3, [r7, #24]
 2145 0128 03FB01F1 		mul	r1, r3, r1
 2146 012c 684B     		ldr	r3, .L159
 2147 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2148 0132 C3F58063 		rsb	r3, r3, #1024
 2149 0136 91FBF3F3 		sdiv	r3, r1, r3
 2150 013a D21A     		subs	r2, r2, r3
 2151 013c BB68     		ldr	r3, [r7, #8]
 2152 013e 1A60     		str	r2, [r3]
 2153              	.LBE5:
 794:..\src/interruptions.c ****                 }          
 795:..\src/interruptions.c ****             }
 796:..\src/interruptions.c ****             else {
 797:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 798:..\src/interruptions.c ****                     
 799:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 800:..\src/interruptions.c ****                     if (motor_idx == 0){
 801:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 802:..\src/interruptions.c ****                     }
 803:..\src/interruptions.c ****                     if (motor_idx == 1){
 804:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 805:..\src/interruptions.c ****                     }
 806:..\src/interruptions.c ****                 }
 807:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 54


 808:..\src/interruptions.c ****         }
 809:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 810:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 811:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 812:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 813:..\src/interruptions.c **** 
 814:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 815:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 816:..\src/interruptions.c ****                     if (motor_idx == 1){
 817:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 818:..\src/interruptions.c ****                     }
 819:..\src/interruptions.c ****                     if (motor_idx == 0){
 820:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 821:..\src/interruptions.c ****                     }                    
 822:..\src/interruptions.c ****                 }
 823:..\src/interruptions.c ****                 else {
 824:..\src/interruptions.c ****                     if (motor_idx == 0){
 825:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 826:..\src/interruptions.c ****                     }
 827:..\src/interruptions.c ****                     if (motor_idx == 1){
 828:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 829:..\src/interruptions.c ****                     }
 830:..\src/interruptions.c ****                 }
 831:..\src/interruptions.c ****                 
 832:..\src/interruptions.c ****             }
 833:..\src/interruptions.c ****             else {
 834:..\src/interruptions.c ****                 if(pos_sum > 0) {
 835:..\src/interruptions.c ****                     if (motor_idx == 0){
 836:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 837:..\src/interruptions.c ****                     }
 838:..\src/interruptions.c ****                     if (motor_idx == 1){
 839:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 840:..\src/interruptions.c ****                     }
 841:..\src/interruptions.c ****                     
 842:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 843:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 844:..\src/interruptions.c ****                     }
 845:..\src/interruptions.c ****                 }
 846:..\src/interruptions.c ****             }
 847:..\src/interruptions.c ****         }
 848:..\src/interruptions.c ****     }           
 849:..\src/interruptions.c **** }
 2154              		.loc 1 849 0
 2155 0140 F0E0     		b	.L157
 2156              	.L143:
 2157              	.LBB6:
 797:..\src/interruptions.c ****                     
 2158              		.loc 1 797 0
 2159 0142 644B     		ldr	r3, .L159+4
 2160 0144 5A6A     		ldr	r2, [r3, #36]
 2161 0146 624B     		ldr	r3, .L159
 2162 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2163 014c 5B42     		negs	r3, r3
 2164 014e 9A42     		cmp	r2, r3
 2165 0150 80F2E880 		bge	.L157
 799:..\src/interruptions.c ****                     if (motor_idx == 0){
 2166              		.loc 1 799 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 55


 2167 0154 5F4B     		ldr	r3, .L159+4
 2168 0156 5B6A     		ldr	r3, [r3, #36]
 2169 0158 5D4A     		ldr	r2, .L159
 2170 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2171 015e 1344     		add	r3, r3, r2
 2172 0160 BB61     		str	r3, [r7, #24]
 800:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2173              		.loc 1 800 0
 2174 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2175 0164 002B     		cmp	r3, #0
 2176 0166 12D1     		bne	.L147
 801:..\src/interruptions.c ****                     }
 2177              		.loc 1 801 0
 2178 0168 BB68     		ldr	r3, [r7, #8]
 2179 016a 1A68     		ldr	r2, [r3]
 2180 016c 584B     		ldr	r3, .L159
 2181 016e B3F8B032 		ldrh	r3, [r3, #688]
 2182 0172 1946     		mov	r1, r3
 2183 0174 BB69     		ldr	r3, [r7, #24]
 2184 0176 03FB01F1 		mul	r1, r3, r1
 2185 017a 554B     		ldr	r3, .L159
 2186 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2187 0180 C3F58063 		rsb	r3, r3, #1024
 2188 0184 91FBF3F3 		sdiv	r3, r1, r3
 2189 0188 1A44     		add	r2, r2, r3
 2190 018a BB68     		ldr	r3, [r7, #8]
 2191 018c 1A60     		str	r2, [r3]
 2192              	.L147:
 803:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2193              		.loc 1 803 0
 2194 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2195 0190 012B     		cmp	r3, #1
 2196 0192 40F0C780 		bne	.L157
 804:..\src/interruptions.c ****                     }
 2197              		.loc 1 804 0
 2198 0196 BB68     		ldr	r3, [r7, #8]
 2199 0198 1A68     		ldr	r2, [r3]
 2200 019a 4D4B     		ldr	r3, .L159
 2201 019c B3F8B032 		ldrh	r3, [r3, #688]
 2202 01a0 1946     		mov	r1, r3
 2203 01a2 BB69     		ldr	r3, [r7, #24]
 2204 01a4 03FB01F1 		mul	r1, r3, r1
 2205 01a8 494B     		ldr	r3, .L159
 2206 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2207 01ae C3F58063 		rsb	r3, r3, #1024
 2208 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2209 01b6 D21A     		subs	r2, r2, r3
 2210 01b8 BB68     		ldr	r3, [r7, #8]
 2211 01ba 1A60     		str	r2, [r3]
 2212              	.LBE6:
 2213              		.loc 1 849 0
 2214 01bc B2E0     		b	.L157
 2215              	.L140:
 2216              	.LBB7:
 811:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2217              		.loc 1 811 0
 2218 01be 444B     		ldr	r3, .L159
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 56


 2219 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2220 01c4 1946     		mov	r1, r3
 2221 01c6 444A     		ldr	r2, .L159+8
 2222 01c8 3423     		movs	r3, #52
 2223 01ca 03FB01F3 		mul	r3, r3, r1
 2224 01ce 1344     		add	r3, r3, r2
 2225 01d0 1A68     		ldr	r2, [r3]
 2226 01d2 3F4B     		ldr	r3, .L159
 2227 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2228 01d8 1846     		mov	r0, r3
 2229 01da 3F49     		ldr	r1, .L159+8
 2230 01dc 3423     		movs	r3, #52
 2231 01de 03FB00F3 		mul	r3, r3, r0
 2232 01e2 0B44     		add	r3, r3, r1
 2233 01e4 0433     		adds	r3, r3, #4
 2234 01e6 1B68     		ldr	r3, [r3]
 2235 01e8 D21A     		subs	r2, r2, r3
 2236 01ea 394B     		ldr	r3, .L159
 2237 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2238 01f0 1846     		mov	r0, r3
 2239 01f2 3749     		ldr	r1, .L159
 2240 01f4 0346     		mov	r3, r0
 2241 01f6 5B00     		lsls	r3, r3, #1
 2242 01f8 0344     		add	r3, r3, r0
 2243 01fa 1B01     		lsls	r3, r3, #4
 2244 01fc 0B44     		add	r3, r3, r1
 2245 01fe 03F29513 		addw	r3, r3, #405
 2246 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2247 0204 42FA03F3 		asr	r3, r2, r3
 2248 0208 7B61     		str	r3, [r7, #20]
 812:..\src/interruptions.c **** 
 2249              		.loc 1 812 0
 2250 020a 314B     		ldr	r3, .L159
 2251 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2252 0210 1946     		mov	r1, r3
 2253 0212 314A     		ldr	r2, .L159+8
 2254 0214 3423     		movs	r3, #52
 2255 0216 03FB01F3 		mul	r3, r3, r1
 2256 021a 1344     		add	r3, r3, r2
 2257 021c 1A68     		ldr	r2, [r3]
 2258 021e 2C4B     		ldr	r3, .L159
 2259 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2260 0224 1846     		mov	r0, r3
 2261 0226 2C49     		ldr	r1, .L159+8
 2262 0228 3423     		movs	r3, #52
 2263 022a 03FB00F3 		mul	r3, r3, r0
 2264 022e 0B44     		add	r3, r3, r1
 2265 0230 0433     		adds	r3, r3, #4
 2266 0232 1B68     		ldr	r3, [r3]
 2267 0234 1A44     		add	r2, r2, r3
 2268 0236 264B     		ldr	r3, .L159
 2269 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2270 023c 1846     		mov	r0, r3
 2271 023e 2449     		ldr	r1, .L159
 2272 0240 0346     		mov	r3, r0
 2273 0242 5B00     		lsls	r3, r3, #1
 2274 0244 0344     		add	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 57


 2275 0246 1B01     		lsls	r3, r3, #4
 2276 0248 0B44     		add	r3, r3, r1
 2277 024a 03F29513 		addw	r3, r3, #405
 2278 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2279 0250 42FA03F3 		asr	r3, r2, r3
 2280 0254 3B61     		str	r3, [r7, #16]
 814:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2281              		.loc 1 814 0
 2282 0256 7B69     		ldr	r3, [r7, #20]
 2283 0258 B3F5FA7F 		cmp	r3, #500
 2284 025c 03DC     		bgt	.L148
 814:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2285              		.loc 1 814 0 is_stmt 0 discriminator 1
 2286 025e 7B69     		ldr	r3, [r7, #20]
 2287 0260 13F5FA7F 		cmn	r3, #500
 2288 0264 3ADA     		bge	.L149
 2289              	.L148:
 815:..\src/interruptions.c ****                     if (motor_idx == 1){
 2290              		.loc 1 815 0 is_stmt 1
 2291 0266 7B69     		ldr	r3, [r7, #20]
 2292 0268 002B     		cmp	r3, #0
 2293 026a 18DB     		blt	.L150
 816:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2294              		.loc 1 816 0
 2295 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2296 026e 012B     		cmp	r3, #1
 2297 0270 07D1     		bne	.L151
 817:..\src/interruptions.c ****                     }
 2298              		.loc 1 817 0
 2299 0272 BB68     		ldr	r3, [r7, #8]
 2300 0274 1B68     		ldr	r3, [r3]
 2301 0276 164A     		ldr	r2, .L159
 2302 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2303 027c 1A44     		add	r2, r2, r3
 2304 027e BB68     		ldr	r3, [r7, #8]
 2305 0280 1A60     		str	r2, [r3]
 2306              	.L151:
 819:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2307              		.loc 1 819 0
 2308 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2309 0284 002B     		cmp	r3, #0
 2310 0286 4CD1     		bne	.L158
 820:..\src/interruptions.c ****                     }                    
 2311              		.loc 1 820 0
 2312 0288 BB68     		ldr	r3, [r7, #8]
 2313 028a 1B68     		ldr	r3, [r3]
 2314 028c 104A     		ldr	r2, .L159
 2315 028e B2F8B022 		ldrh	r2, [r2, #688]
 2316 0292 5208     		lsrs	r2, r2, #1
 2317 0294 92B2     		uxth	r2, r2
 2318 0296 9A1A     		subs	r2, r3, r2
 2319 0298 BB68     		ldr	r3, [r7, #8]
 2320 029a 1A60     		str	r2, [r3]
 815:..\src/interruptions.c ****                     if (motor_idx == 1){
 2321              		.loc 1 815 0
 2322 029c 41E0     		b	.L158
 2323              	.L150:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 58


 824:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2324              		.loc 1 824 0
 2325 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2326 02a0 002B     		cmp	r3, #0
 2327 02a2 07D1     		bne	.L154
 825:..\src/interruptions.c ****                     }
 2328              		.loc 1 825 0
 2329 02a4 BB68     		ldr	r3, [r7, #8]
 2330 02a6 1B68     		ldr	r3, [r3]
 2331 02a8 094A     		ldr	r2, .L159
 2332 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2333 02ae 1A44     		add	r2, r2, r3
 2334 02b0 BB68     		ldr	r3, [r7, #8]
 2335 02b2 1A60     		str	r2, [r3]
 2336              	.L154:
 827:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2337              		.loc 1 827 0
 2338 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2339 02b6 012B     		cmp	r3, #1
 2340 02b8 33D1     		bne	.L158
 828:..\src/interruptions.c ****                     }
 2341              		.loc 1 828 0
 2342 02ba BB68     		ldr	r3, [r7, #8]
 2343 02bc 1B68     		ldr	r3, [r3]
 2344 02be 044A     		ldr	r2, .L159
 2345 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2346 02c4 5208     		lsrs	r2, r2, #1
 2347 02c6 92B2     		uxth	r2, r2
 2348 02c8 9A1A     		subs	r2, r3, r2
 2349 02ca BB68     		ldr	r3, [r7, #8]
 2350 02cc 1A60     		str	r2, [r3]
 815:..\src/interruptions.c ****                     if (motor_idx == 1){
 2351              		.loc 1 815 0
 2352 02ce 28E0     		b	.L158
 2353              	.L160:
 2354              		.align	2
 2355              	.L159:
 2356 02d0 00000000 		.word	c_mem
 2357 02d4 00000000 		.word	g_adc_meas
 2358 02d8 00000000 		.word	g_meas
 2359              	.L149:
 834:..\src/interruptions.c ****                     if (motor_idx == 0){
 2360              		.loc 1 834 0
 2361 02dc 3B69     		ldr	r3, [r7, #16]
 2362 02de 002B     		cmp	r3, #0
 2363 02e0 20DD     		ble	.L157
 835:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2364              		.loc 1 835 0
 2365 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2366 02e4 002B     		cmp	r3, #0
 2367 02e6 08D1     		bne	.L155
 836:..\src/interruptions.c ****                     }
 2368              		.loc 1 836 0
 2369 02e8 BB68     		ldr	r3, [r7, #8]
 2370 02ea 1A68     		ldr	r2, [r3]
 2371 02ec 104B     		ldr	r3, .L161
 2372 02ee B3F8B032 		ldrh	r3, [r3, #688]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 59


 2373 02f2 5B00     		lsls	r3, r3, #1
 2374 02f4 D21A     		subs	r2, r2, r3
 2375 02f6 BB68     		ldr	r3, [r7, #8]
 2376 02f8 1A60     		str	r2, [r3]
 2377              	.L155:
 838:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2378              		.loc 1 838 0
 2379 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2380 02fc 012B     		cmp	r3, #1
 2381 02fe 08D1     		bne	.L156
 839:..\src/interruptions.c ****                     }
 2382              		.loc 1 839 0
 2383 0300 BB68     		ldr	r3, [r7, #8]
 2384 0302 1A68     		ldr	r2, [r3]
 2385 0304 0A4B     		ldr	r3, .L161
 2386 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2387 030a 5B00     		lsls	r3, r3, #1
 2388 030c D21A     		subs	r2, r2, r3
 2389 030e BB68     		ldr	r3, [r7, #8]
 2390 0310 1A60     		str	r2, [r3]
 2391              	.L156:
 842:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2392              		.loc 1 842 0
 2393 0312 BB68     		ldr	r3, [r7, #8]
 2394 0314 1B68     		ldr	r3, [r3]
 2395 0316 002B     		cmp	r3, #0
 2396 0318 04DA     		bge	.L157
 843:..\src/interruptions.c ****                     }
 2397              		.loc 1 843 0
 2398 031a BB68     		ldr	r3, [r7, #8]
 2399 031c 0022     		movs	r2, #0
 2400 031e 1A60     		str	r2, [r3]
 2401              	.LBE7:
 2402              		.loc 1 849 0
 2403 0320 00E0     		b	.L157
 2404              	.L158:
 2405              	.LBB8:
 815:..\src/interruptions.c ****                     if (motor_idx == 1){
 2406              		.loc 1 815 0
 2407 0322 00BF     		nop
 2408              	.L157:
 2409              	.LBE8:
 2410              		.loc 1 849 0
 2411 0324 00BF     		nop
 2412 0326 2437     		adds	r7, r7, #36
 2413              		.cfi_def_cfa_offset 4
 2414 0328 BD46     		mov	sp, r7
 2415              		.cfi_def_cfa_register 13
 2416              		@ sp needed
 2417 032a 80BC     		pop	{r7}
 2418              		.cfi_restore 7
 2419              		.cfi_def_cfa_offset 0
 2420 032c 7047     		bx	lr
 2421              	.L162:
 2422 032e 00BF     		.align	2
 2423              	.L161:
 2424 0330 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 60


 2425              		.cfi_endproc
 2426              	.LFE69:
 2427              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2428              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2429              		.align	2
 2430              		.global	compute_SoftHand_2_motors_emg_reference
 2431              		.thumb
 2432              		.thumb_func
 2433              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2434              	compute_SoftHand_2_motors_emg_reference:
 2435              	.LFB70:
 850:..\src/interruptions.c **** 
 851:..\src/interruptions.c **** 
 852:..\src/interruptions.c **** //==============================================================================
 853:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 854:..\src/interruptions.c **** //==============================================================================
 855:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 856:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2436              		.loc 1 856 0
 2437              		.cfi_startproc
 2438              		@ args = 4, pretend = 0, frame = 16
 2439              		@ frame_needed = 1, uses_anonymous_args = 0
 2440 0000 80B5     		push	{r7, lr}
 2441              		.cfi_def_cfa_offset 8
 2442              		.cfi_offset 7, -8
 2443              		.cfi_offset 14, -4
 2444 0002 84B0     		sub	sp, sp, #16
 2445              		.cfi_def_cfa_offset 24
 2446 0004 00AF     		add	r7, sp, #0
 2447              		.cfi_def_cfa_register 7
 2448 0006 B960     		str	r1, [r7, #8]
 2449 0008 7A60     		str	r2, [r7, #4]
 2450 000a 3B60     		str	r3, [r7]
 2451 000c 0346     		mov	r3, r0
 2452 000e FB73     		strb	r3, [r7, #15]
 857:..\src/interruptions.c ****     
 858:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 859:..\src/interruptions.c ****     static uint8 fsm_state;     
 860:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2453              		.loc 1 860 0
 2454 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2455 0012 002B     		cmp	r3, #0
 2456 0014 05D1     		bne	.L164
 861:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2457              		.loc 1 861 0
 2458 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2459 001a 0346     		mov	r3, r0
 2460 001c 1A46     		mov	r2, r3
 2461 001e 614B     		ldr	r3, .L179
 2462 0020 1A70     		strb	r2, [r3]
 2463              	.L164:
 862:..\src/interruptions.c ****     }
 863:..\src/interruptions.c ****        
 864:..\src/interruptions.c ****     switch (fsm_state){
 2464              		.loc 1 864 0
 2465 0022 604B     		ldr	r3, .L179
 2466 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 61


 2467 0026 032B     		cmp	r3, #3
 2468 0028 00F2B780 		bhi	.L176
 2469 002c 01A2     		adr	r2, .L167
 2470 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2471 0032 00BF     		.p2align 2
 2472              	.L167:
 2473 0034 45000000 		.word	.L166+1
 2474 0038 45000000 		.word	.L166+1
 2475 003c BF000000 		.word	.L168+1
 2476 0040 4F000000 		.word	.L169+1
 2477              		.p2align 1
 2478              	.L166:
 865:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 866:..\src/interruptions.c ****              
 867:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2479              		.loc 1 867 0
 2480 0044 7B68     		ldr	r3, [r7, #4]
 2481 0046 1A68     		ldr	r2, [r3]
 2482 0048 BB68     		ldr	r3, [r7, #8]
 2483 004a 1A60     		str	r2, [r3]
 868:..\src/interruptions.c ****     
 869:..\src/interruptions.c ****             break;
 2484              		.loc 1 869 0
 2485 004c A5E0     		b	.L165
 2486              	.L169:
 870:..\src/interruptions.c ****         
 871:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 872:..\src/interruptions.c **** 
 873:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2487              		.loc 1 873 0
 2488 004e 3B68     		ldr	r3, [r7]
 2489 0050 002B     		cmp	r3, #0
 2490 0052 17DD     		ble	.L170
 2491              		.loc 1 873 0 is_stmt 0 discriminator 1
 2492 0054 3A68     		ldr	r2, [r7]
 2493 0056 BB69     		ldr	r3, [r7, #24]
 2494 0058 9A42     		cmp	r2, r3
 2495 005a 13DD     		ble	.L170
 874:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2496              		.loc 1 874 0 is_stmt 1
 2497 005c 7B68     		ldr	r3, [r7, #4]
 2498 005e 1A68     		ldr	r2, [r3]
 2499 0060 514B     		ldr	r3, .L179+4
 2500 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2501 0066 1946     		mov	r1, r3
 2502 0068 3B68     		ldr	r3, [r7]
 2503 006a 03FB01F3 		mul	r3, r3, r1
 2504 006e 9900     		lsls	r1, r3, #2
 2505 0070 4E4B     		ldr	r3, .L179+8
 2506 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2507 0076 C3F58063 		rsb	r3, r3, #1024
 2508 007a 91FBF3F3 		sdiv	r3, r1, r3
 2509 007e 1A44     		add	r2, r2, r3
 2510 0080 BB68     		ldr	r3, [r7, #8]
 2511 0082 1A60     		str	r2, [r3]
 2512              	.L170:
 875:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 62


 876:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2513              		.loc 1 876 0
 2514 0084 BB69     		ldr	r3, [r7, #24]
 2515 0086 002B     		cmp	r3, #0
 2516 0088 40F38480 		ble	.L177
 2517              		.loc 1 876 0 is_stmt 0 discriminator 1
 2518 008c BA69     		ldr	r2, [r7, #24]
 2519 008e 3B68     		ldr	r3, [r7]
 2520 0090 9A42     		cmp	r2, r3
 2521 0092 7FDD     		ble	.L177
 877:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2522              		.loc 1 877 0 is_stmt 1
 2523 0094 7B68     		ldr	r3, [r7, #4]
 2524 0096 1A68     		ldr	r2, [r3]
 2525 0098 434B     		ldr	r3, .L179+4
 2526 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2527 009e 1946     		mov	r1, r3
 2528 00a0 BB69     		ldr	r3, [r7, #24]
 2529 00a2 03FB01F3 		mul	r3, r3, r1
 2530 00a6 9900     		lsls	r1, r3, #2
 2531 00a8 404B     		ldr	r3, .L179+8
 2532 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2533 00ae C3F58063 		rsb	r3, r3, #1024
 2534 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2535 00b6 D21A     		subs	r2, r2, r3
 2536 00b8 BB68     		ldr	r3, [r7, #8]
 2537 00ba 1A60     		str	r2, [r3]
 878:..\src/interruptions.c ****             }
 879:..\src/interruptions.c ****             
 880:..\src/interruptions.c ****             break;
 2538              		.loc 1 880 0
 2539 00bc 6AE0     		b	.L177
 2540              	.L168:
 881:..\src/interruptions.c ****             
 882:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 883:..\src/interruptions.c ****             
 884:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2541              		.loc 1 884 0
 2542 00be 3B68     		ldr	r3, [r7]
 2543 00c0 002B     		cmp	r3, #0
 2544 00c2 31DD     		ble	.L172
 2545              		.loc 1 884 0 is_stmt 0 discriminator 1
 2546 00c4 3A68     		ldr	r2, [r7]
 2547 00c6 BB69     		ldr	r3, [r7, #24]
 2548 00c8 9A42     		cmp	r2, r3
 2549 00ca 2DDD     		ble	.L172
 885:..\src/interruptions.c ****                 if (motor_idx == 0){
 2550              		.loc 1 885 0 is_stmt 1
 2551 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2552 00ce 002B     		cmp	r3, #0
 2553 00d0 13D1     		bne	.L173
 886:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2554              		.loc 1 886 0
 2555 00d2 7B68     		ldr	r3, [r7, #4]
 2556 00d4 1A68     		ldr	r2, [r3]
 2557 00d6 344B     		ldr	r3, .L179+4
 2558 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 63


 2559 00dc 1946     		mov	r1, r3
 2560 00de 3B68     		ldr	r3, [r7]
 2561 00e0 03FB01F3 		mul	r3, r3, r1
 2562 00e4 9900     		lsls	r1, r3, #2
 2563 00e6 314B     		ldr	r3, .L179+8
 2564 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2565 00ec C3F58063 		rsb	r3, r3, #1024
 2566 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2567 00f4 1A44     		add	r2, r2, r3
 2568 00f6 BB68     		ldr	r3, [r7, #8]
 2569 00f8 1A60     		str	r2, [r3]
 2570              	.L173:
 887:..\src/interruptions.c ****                 }
 888:..\src/interruptions.c ****                 if (motor_idx == 1){
 2571              		.loc 1 888 0
 2572 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2573 00fc 012B     		cmp	r3, #1
 2574 00fe 13D1     		bne	.L172
 889:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2575              		.loc 1 889 0
 2576 0100 7B68     		ldr	r3, [r7, #4]
 2577 0102 1A68     		ldr	r2, [r3]
 2578 0104 284B     		ldr	r3, .L179+4
 2579 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2580 010a 1946     		mov	r1, r3
 2581 010c 3B68     		ldr	r3, [r7]
 2582 010e 03FB01F3 		mul	r3, r3, r1
 2583 0112 9900     		lsls	r1, r3, #2
 2584 0114 254B     		ldr	r3, .L179+8
 2585 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2586 011a C3F58063 		rsb	r3, r3, #1024
 2587 011e 91FBF3F3 		sdiv	r3, r1, r3
 2588 0122 D21A     		subs	r2, r2, r3
 2589 0124 BB68     		ldr	r3, [r7, #8]
 2590 0126 1A60     		str	r2, [r3]
 2591              	.L172:
 890:..\src/interruptions.c ****                 }   
 891:..\src/interruptions.c ****             }
 892:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2592              		.loc 1 892 0
 2593 0128 BB69     		ldr	r3, [r7, #24]
 2594 012a 002B     		cmp	r3, #0
 2595 012c 34DD     		ble	.L178
 2596              		.loc 1 892 0 is_stmt 0 discriminator 1
 2597 012e BA69     		ldr	r2, [r7, #24]
 2598 0130 3B68     		ldr	r3, [r7]
 2599 0132 9A42     		cmp	r2, r3
 2600 0134 30DD     		ble	.L178
 893:..\src/interruptions.c ****                 if (motor_idx == 0){
 2601              		.loc 1 893 0 is_stmt 1
 2602 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2603 0138 002B     		cmp	r3, #0
 2604 013a 13D1     		bne	.L175
 894:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2605              		.loc 1 894 0
 2606 013c 7B68     		ldr	r3, [r7, #4]
 2607 013e 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 64


 2608 0140 194B     		ldr	r3, .L179+4
 2609 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2610 0146 1946     		mov	r1, r3
 2611 0148 BB69     		ldr	r3, [r7, #24]
 2612 014a 03FB01F3 		mul	r3, r3, r1
 2613 014e 9900     		lsls	r1, r3, #2
 2614 0150 164B     		ldr	r3, .L179+8
 2615 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2616 0156 C3F58063 		rsb	r3, r3, #1024
 2617 015a 91FBF3F3 		sdiv	r3, r1, r3
 2618 015e D21A     		subs	r2, r2, r3
 2619 0160 BB68     		ldr	r3, [r7, #8]
 2620 0162 1A60     		str	r2, [r3]
 2621              	.L175:
 895:..\src/interruptions.c ****                 }
 896:..\src/interruptions.c ****                 if (motor_idx == 1){
 2622              		.loc 1 896 0
 2623 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2624 0166 012B     		cmp	r3, #1
 2625 0168 16D1     		bne	.L178
 897:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2626              		.loc 1 897 0
 2627 016a 7B68     		ldr	r3, [r7, #4]
 2628 016c 1A68     		ldr	r2, [r3]
 2629 016e 0E4B     		ldr	r3, .L179+4
 2630 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2631 0174 1946     		mov	r1, r3
 2632 0176 BB69     		ldr	r3, [r7, #24]
 2633 0178 03FB01F3 		mul	r3, r3, r1
 2634 017c 9900     		lsls	r1, r3, #2
 2635 017e 0B4B     		ldr	r3, .L179+8
 2636 0180 B3F8F231 		ldrh	r3, [r3, #498]
 2637 0184 C3F58063 		rsb	r3, r3, #1024
 2638 0188 91FBF3F3 		sdiv	r3, r1, r3
 2639 018c 1A44     		add	r2, r2, r3
 2640 018e BB68     		ldr	r3, [r7, #8]
 2641 0190 1A60     		str	r2, [r3]
 898:..\src/interruptions.c ****                 }
 899:..\src/interruptions.c ****             }
 900:..\src/interruptions.c ****             
 901:..\src/interruptions.c ****             break;
 2642              		.loc 1 901 0
 2643 0192 01E0     		b	.L178
 2644              	.L177:
 880:..\src/interruptions.c ****             
 2645              		.loc 1 880 0
 2646 0194 00BF     		nop
 2647 0196 00E0     		b	.L176
 2648              	.L178:
 2649              		.loc 1 901 0
 2650 0198 00BF     		nop
 2651              	.L165:
 2652              	.L176:
 902:..\src/interruptions.c ****     }
 903:..\src/interruptions.c ****  
 904:..\src/interruptions.c **** }
 2653              		.loc 1 904 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 65


 2654 019a 00BF     		nop
 2655 019c 1037     		adds	r7, r7, #16
 2656              		.cfi_def_cfa_offset 8
 2657 019e BD46     		mov	sp, r7
 2658              		.cfi_def_cfa_register 13
 2659              		@ sp needed
 2660 01a0 80BD     		pop	{r7, pc}
 2661              	.L180:
 2662 01a2 00BF     		.align	2
 2663              	.L179:
 2664 01a4 8E000000 		.word	fsm_state.10298
 2665 01a8 00000000 		.word	g_mem
 2666 01ac 00000000 		.word	c_mem
 2667              		.cfi_endproc
 2668              	.LFE70:
 2669              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 2670              		.section	.text.motor_control_SH,"ax",%progbits
 2671              		.align	2
 2672              		.global	motor_control_SH
 2673              		.thumb
 2674              		.thumb_func
 2675              		.type	motor_control_SH, %function
 2676              	motor_control_SH:
 2677              	.LFB71:
 905:..\src/interruptions.c **** 
 906:..\src/interruptions.c **** //==============================================================================
 907:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 908:..\src/interruptions.c **** //==============================================================================
 909:..\src/interruptions.c **** void motor_control_SH() {
 2678              		.loc 1 909 0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 80
 2681              		@ frame_needed = 1, uses_anonymous_args = 0
 2682 0000 80B5     		push	{r7, lr}
 2683              		.cfi_def_cfa_offset 8
 2684              		.cfi_offset 7, -8
 2685              		.cfi_offset 14, -4
 2686 0002 94B0     		sub	sp, sp, #80
 2687              		.cfi_def_cfa_offset 88
 2688 0004 00AF     		add	r7, sp, #0
 2689              		.cfi_def_cfa_register 7
 910:..\src/interruptions.c **** 
 911:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2690              		.loc 1 911 0
 2691 0006 0023     		movs	r3, #0
 2692 0008 FB64     		str	r3, [r7, #76]
 912:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 913:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 914:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 915:..\src/interruptions.c ****  
 916:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 2693              		.loc 1 916 0
 2694 000a 0023     		movs	r3, #0
 2695 000c 87F84730 		strb	r3, [r7, #71]
 917:..\src/interruptions.c ****     
 918:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 2696              		.loc 1 918 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 66


 2697 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 2698 0014 1346     		mov	r3, r2
 2699 0016 DB00     		lsls	r3, r3, #3
 2700 0018 9B1A     		subs	r3, r3, r2
 2701 001a 1B01     		lsls	r3, r3, #4
 2702 001c B033     		adds	r3, r3, #176
 2703 001e 9D4A     		ldr	r2, .L242
 2704 0020 1344     		add	r3, r3, r2
 2705 0022 3B64     		str	r3, [r7, #64]
 919:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 2706              		.loc 1 919 0
 2707 0024 3B6C     		ldr	r3, [r7, #64]
 2708 0026 93F86030 		ldrb	r3, [r3, #96]
 2709 002a 87F83F30 		strb	r3, [r7, #63]
 920:..\src/interruptions.c ****     
 921:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 2710              		.loc 1 921 0
 2711 002e 3B6C     		ldr	r3, [r7, #64]
 2712 0030 1B68     		ldr	r3, [r3]
 2713 0032 BB63     		str	r3, [r7, #56]
 922:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 2714              		.loc 1 922 0
 2715 0034 3B6C     		ldr	r3, [r7, #64]
 2716 0036 5B68     		ldr	r3, [r3, #4]
 2717 0038 7B63     		str	r3, [r7, #52]
 923:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 2718              		.loc 1 923 0
 2719 003a 3B6C     		ldr	r3, [r7, #64]
 2720 003c 9B68     		ldr	r3, [r3, #8]
 2721 003e 3B63     		str	r3, [r7, #48]
 924:..\src/interruptions.c **** 
 925:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 2722              		.loc 1 925 0
 2723 0040 3B6C     		ldr	r3, [r7, #64]
 2724 0042 DB68     		ldr	r3, [r3, #12]
 2725 0044 FB62     		str	r3, [r7, #44]
 926:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 2726              		.loc 1 926 0
 2727 0046 3B6C     		ldr	r3, [r7, #64]
 2728 0048 1B69     		ldr	r3, [r3, #16]
 2729 004a BB62     		str	r3, [r7, #40]
 927:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 2730              		.loc 1 927 0
 2731 004c 3B6C     		ldr	r3, [r7, #64]
 2732 004e 5B69     		ldr	r3, [r3, #20]
 2733 0050 7B62     		str	r3, [r7, #36]
 928:..\src/interruptions.c **** 
 929:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 2734              		.loc 1 929 0
 2735 0052 3B6C     		ldr	r3, [r7, #64]
 2736 0054 9B69     		ldr	r3, [r3, #24]
 2737 0056 3B62     		str	r3, [r7, #32]
 930:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 2738              		.loc 1 930 0
 2739 0058 3B6C     		ldr	r3, [r7, #64]
 2740 005a DB69     		ldr	r3, [r3, #28]
 2741 005c FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 67


 931:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 2742              		.loc 1 931 0
 2743 005e 3B6C     		ldr	r3, [r7, #64]
 2744 0060 1B6A     		ldr	r3, [r3, #32]
 2745 0062 BB61     		str	r3, [r7, #24]
 932:..\src/interruptions.c ****     
 933:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 2746              		.loc 1 933 0
 2747 0064 3B6C     		ldr	r3, [r7, #64]
 2748 0066 5B6A     		ldr	r3, [r3, #36]
 2749 0068 7B61     		str	r3, [r7, #20]
 934:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 2750              		.loc 1 934 0
 2751 006a 3B6C     		ldr	r3, [r7, #64]
 2752 006c 9B6A     		ldr	r3, [r3, #40]
 2753 006e 3B61     		str	r3, [r7, #16]
 935:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 2754              		.loc 1 935 0
 2755 0070 3B6C     		ldr	r3, [r7, #64]
 2756 0072 DB6A     		ldr	r3, [r3, #44]
 2757 0074 FB60     		str	r3, [r7, #12]
 936:..\src/interruptions.c **** 
 937:..\src/interruptions.c ****     // Static Variables
 938:..\src/interruptions.c **** 
 939:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 940:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 941:..\src/interruptions.c ****     
 942:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 943:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 944:..\src/interruptions.c ****     static int32 prev_pwm;
 945:..\src/interruptions.c **** 
 946:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 947:..\src/interruptions.c ****     static uint32 position_counter = 0;
 948:..\src/interruptions.c ****   
 949:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 950:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 2758              		.loc 1 950 0
 2759 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2760 007a 1B01     		lsls	r3, r3, #4
 2761 007c 864A     		ldr	r2, .L242+4
 2762 007e 9918     		adds	r1, r3, r2
 2763 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2764 0084 1B01     		lsls	r3, r3, #4
 2765 0086 854A     		ldr	r2, .L242+8
 2766 0088 1A44     		add	r2, r2, r3
 2767 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2768 008e 1846     		mov	r0, r3
 2769 0090 FFF7FEFF 		bl	compute_reference
 951:..\src/interruptions.c ****      
 952:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 2770              		.loc 1 952 0
 2771 0094 3B6C     		ldr	r3, [r7, #64]
 2772 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2773 009a 032B     		cmp	r3, #3
 2774 009c 00F2F781 		bhi	.L182
 2775 00a0 01A2     		adr	r2, .L184
 2776 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 68


 2777 00a6 00BF     		.p2align 2
 2778              	.L184:
 2779 00a8 55020000 		.word	.L183+1
 2780 00ac 49040000 		.word	.L185+1
 2781 00b0 3B030000 		.word	.L186+1
 2782 00b4 B9000000 		.word	.L187+1
 2783              		.p2align 1
 2784              	.L187:
 953:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 954:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 955:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2785              		.loc 1 955 0
 2786 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2787 00bc 764A     		ldr	r2, .L242+4
 2788 00be 1B01     		lsls	r3, r3, #4
 2789 00c0 1344     		add	r3, r3, r2
 2790 00c2 1A68     		ldr	r2, [r3]
 2791 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2792 00c8 7549     		ldr	r1, .L242+12
 2793 00ca 3420     		movs	r0, #52
 2794 00cc 00FB03F3 		mul	r3, r0, r3
 2795 00d0 0B44     		add	r3, r3, r1
 2796 00d2 1B68     		ldr	r3, [r3]
 2797 00d4 D31A     		subs	r3, r2, r3
 2798 00d6 BB60     		str	r3, [r7, #8]
 956:..\src/interruptions.c **** 
 957:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2799              		.loc 1 957 0
 2800 00d8 724B     		ldr	r3, .L242+16
 2801 00da 1A68     		ldr	r2, [r3]
 2802 00dc BB68     		ldr	r3, [r7, #8]
 2803 00de 1344     		add	r3, r3, r2
 2804 00e0 704A     		ldr	r2, .L242+16
 2805 00e2 1360     		str	r3, [r2]
 958:..\src/interruptions.c **** 
 959:..\src/interruptions.c ****             // error_sum saturation
 960:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2806              		.loc 1 960 0
 2807 00e4 6F4B     		ldr	r3, .L242+16
 2808 00e6 1B68     		ldr	r3, [r3]
 2809 00e8 6F4A     		ldr	r2, .L242+20
 2810 00ea 9342     		cmp	r3, r2
 2811 00ec 03DD     		ble	.L188
 961:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2812              		.loc 1 961 0
 2813 00ee 6D4B     		ldr	r3, .L242+16
 2814 00f0 6D4A     		ldr	r2, .L242+20
 2815 00f2 1A60     		str	r2, [r3]
 2816 00f4 07E0     		b	.L189
 2817              	.L188:
 962:..\src/interruptions.c ****             else {
 963:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2818              		.loc 1 963 0
 2819 00f6 6B4B     		ldr	r3, .L242+16
 2820 00f8 1B68     		ldr	r3, [r3]
 2821 00fa 6C4A     		ldr	r2, .L242+24
 2822 00fc 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 69


 2823 00fe 02DA     		bge	.L189
 964:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2824              		.loc 1 964 0
 2825 0100 684B     		ldr	r3, .L242+16
 2826 0102 6A4A     		ldr	r2, .L242+24
 2827 0104 1A60     		str	r2, [r3]
 2828              	.L189:
 965:..\src/interruptions.c ****             }
 966:..\src/interruptions.c ****             
 967:..\src/interruptions.c ****             // ------ position PID control ------
 968:..\src/interruptions.c **** 
 969:..\src/interruptions.c ****             i_ref = 0;
 2829              		.loc 1 969 0
 2830 0106 0023     		movs	r3, #0
 2831 0108 BB64     		str	r3, [r7, #72]
 970:..\src/interruptions.c ****             
 971:..\src/interruptions.c ****             // Proportional
 972:..\src/interruptions.c ****             if (k_p_dl != 0)
 2832              		.loc 1 972 0
 2833 010a 3B6A     		ldr	r3, [r7, #32]
 2834 010c 002B     		cmp	r3, #0
 2835 010e 07D0     		beq	.L190
 973:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2836              		.loc 1 973 0
 2837 0110 3B6A     		ldr	r3, [r7, #32]
 2838 0112 BA68     		ldr	r2, [r7, #8]
 2839 0114 02FB03F3 		mul	r3, r2, r3
 2840 0118 1B14     		asrs	r3, r3, #16
 2841 011a BA6C     		ldr	r2, [r7, #72]
 2842 011c 1344     		add	r3, r3, r2
 2843 011e BB64     		str	r3, [r7, #72]
 2844              	.L190:
 974:..\src/interruptions.c **** 
 975:..\src/interruptions.c ****             // Integral
 976:..\src/interruptions.c ****             if (k_i_dl != 0)
 2845              		.loc 1 976 0
 2846 0120 FB69     		ldr	r3, [r7, #28]
 2847 0122 002B     		cmp	r3, #0
 2848 0124 08D0     		beq	.L191
 977:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2849              		.loc 1 977 0
 2850 0126 5F4B     		ldr	r3, .L242+16
 2851 0128 1B68     		ldr	r3, [r3]
 2852 012a FA69     		ldr	r2, [r7, #28]
 2853 012c 02FB03F3 		mul	r3, r2, r3
 2854 0130 1B14     		asrs	r3, r3, #16
 2855 0132 BA6C     		ldr	r2, [r7, #72]
 2856 0134 1344     		add	r3, r3, r2
 2857 0136 BB64     		str	r3, [r7, #72]
 2858              	.L191:
 978:..\src/interruptions.c **** 
 979:..\src/interruptions.c ****             // Derivative
 980:..\src/interruptions.c ****             if (k_d_dl != 0)
 2859              		.loc 1 980 0
 2860 0138 BB69     		ldr	r3, [r7, #24]
 2861 013a 002B     		cmp	r3, #0
 2862 013c 0AD0     		beq	.L192
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 70


 981:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2863              		.loc 1 981 0
 2864 013e 5C4B     		ldr	r3, .L242+28
 2865 0140 1B68     		ldr	r3, [r3]
 2866 0142 BA68     		ldr	r2, [r7, #8]
 2867 0144 D31A     		subs	r3, r2, r3
 2868 0146 BA69     		ldr	r2, [r7, #24]
 2869 0148 02FB03F3 		mul	r3, r2, r3
 2870 014c 1B14     		asrs	r3, r3, #16
 2871 014e BA6C     		ldr	r2, [r7, #72]
 2872 0150 1344     		add	r3, r3, r2
 2873 0152 BB64     		str	r3, [r7, #72]
 2874              	.L192:
 982:..\src/interruptions.c ****                         
 983:..\src/interruptions.c ****             // Update previous position
 984:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2875              		.loc 1 984 0
 2876 0154 564A     		ldr	r2, .L242+28
 2877 0156 BB68     		ldr	r3, [r7, #8]
 2878 0158 1360     		str	r3, [r2]
 985:..\src/interruptions.c **** 
 986:..\src/interruptions.c ****             // motor direction depends on i_ref
 987:..\src/interruptions.c ****             if (i_ref >= 0)
 2879              		.loc 1 987 0
 2880 015a BB6C     		ldr	r3, [r7, #72]
 2881 015c 002B     		cmp	r3, #0
 2882 015e 03DB     		blt	.L193
 988:..\src/interruptions.c ****                 motor_dir = TRUE;
 2883              		.loc 1 988 0
 2884 0160 544B     		ldr	r3, .L242+32
 2885 0162 0122     		movs	r2, #1
 2886 0164 1A70     		strb	r2, [r3]
 2887 0166 02E0     		b	.L194
 2888              	.L193:
 989:..\src/interruptions.c ****             else
 990:..\src/interruptions.c ****                 motor_dir = FALSE;
 2889              		.loc 1 990 0
 2890 0168 524B     		ldr	r3, .L242+32
 2891 016a 0022     		movs	r2, #0
 2892 016c 1A70     		strb	r2, [r3]
 2893              	.L194:
 991:..\src/interruptions.c **** 
 992:..\src/interruptions.c ****             // saturate max current
 993:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2894              		.loc 1 993 0
 2895 016e 3B6C     		ldr	r3, [r7, #64]
 2896 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 2897 0174 1A46     		mov	r2, r3
 2898 0176 BB6C     		ldr	r3, [r7, #72]
 2899 0178 9A42     		cmp	r2, r3
 2900 017a 04DA     		bge	.L195
 994:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2901              		.loc 1 994 0
 2902 017c 3B6C     		ldr	r3, [r7, #64]
 2903 017e B3F95C30 		ldrsh	r3, [r3, #92]
 2904 0182 BB64     		str	r3, [r7, #72]
 2905 0184 0BE0     		b	.L196
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 71


 2906              	.L195:
 995:..\src/interruptions.c ****             else {
 996:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2907              		.loc 1 996 0
 2908 0186 3B6C     		ldr	r3, [r7, #64]
 2909 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 2910 018c 5A42     		negs	r2, r3
 2911 018e BB6C     		ldr	r3, [r7, #72]
 2912 0190 9A42     		cmp	r2, r3
 2913 0192 04DD     		ble	.L196
 997:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2914              		.loc 1 997 0
 2915 0194 3B6C     		ldr	r3, [r7, #64]
 2916 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 2917 019a 5B42     		negs	r3, r3
 2918 019c BB64     		str	r3, [r7, #72]
 2919              	.L196:
 998:..\src/interruptions.c ****         	}
 999:..\src/interruptions.c **** 
1000:..\src/interruptions.c ****             // current error and curr error sum
1001:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2920              		.loc 1 1001 0
 2921 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2922 01a2 3F4A     		ldr	r2, .L242+12
 2923 01a4 3421     		movs	r1, #52
 2924 01a6 01FB03F3 		mul	r3, r1, r3
 2925 01aa 1344     		add	r3, r3, r2
 2926 01ac 0C33     		adds	r3, r3, #12
 2927 01ae 1B68     		ldr	r3, [r3]
 2928 01b0 BA6C     		ldr	r2, [r7, #72]
 2929 01b2 D31A     		subs	r3, r2, r3
 2930 01b4 7B60     		str	r3, [r7, #4]
1002:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2931              		.loc 1 1002 0
 2932 01b6 404B     		ldr	r3, .L242+36
 2933 01b8 1A68     		ldr	r2, [r3]
 2934 01ba 7B68     		ldr	r3, [r7, #4]
 2935 01bc 1344     		add	r3, r3, r2
 2936 01be 3E4A     		ldr	r2, .L242+36
 2937 01c0 1360     		str	r3, [r2]
1003:..\src/interruptions.c ****             
1004:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2938              		.loc 1 1004 0
 2939 01c2 3D4B     		ldr	r3, .L242+36
 2940 01c4 1B68     		ldr	r3, [r3]
 2941 01c6 3D4A     		ldr	r2, .L242+40
 2942 01c8 9342     		cmp	r3, r2
 2943 01ca 03DD     		ble	.L197
1005:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2944              		.loc 1 1005 0
 2945 01cc 3A4B     		ldr	r3, .L242+36
 2946 01ce 3B4A     		ldr	r2, .L242+40
 2947 01d0 1A60     		str	r2, [r3]
 2948 01d2 07E0     		b	.L198
 2949              	.L197:
1006:..\src/interruptions.c ****             else {
1007:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 72


 2950              		.loc 1 1007 0
 2951 01d4 384B     		ldr	r3, .L242+36
 2952 01d6 1B68     		ldr	r3, [r3]
 2953 01d8 394A     		ldr	r2, .L242+44
 2954 01da 9342     		cmp	r3, r2
 2955 01dc 02DA     		bge	.L198
1008:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2956              		.loc 1 1008 0
 2957 01de 364B     		ldr	r3, .L242+36
 2958 01e0 374A     		ldr	r2, .L242+44
 2959 01e2 1A60     		str	r2, [r3]
 2960              	.L198:
1009:..\src/interruptions.c ****             }
1010:..\src/interruptions.c **** 
1011:..\src/interruptions.c ****             // ----- current PID control -----
1012:..\src/interruptions.c **** 
1013:..\src/interruptions.c ****             pwm_input = 0;
 2961              		.loc 1 1013 0
 2962 01e4 0023     		movs	r3, #0
 2963 01e6 FB64     		str	r3, [r7, #76]
1014:..\src/interruptions.c **** 
1015:..\src/interruptions.c ****             // Proportional
1016:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2964              		.loc 1 1016 0
 2965 01e8 7B69     		ldr	r3, [r7, #20]
 2966 01ea 002B     		cmp	r3, #0
 2967 01ec 07D0     		beq	.L199
1017:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2968              		.loc 1 1017 0
 2969 01ee 7B69     		ldr	r3, [r7, #20]
 2970 01f0 7A68     		ldr	r2, [r7, #4]
 2971 01f2 02FB03F3 		mul	r3, r2, r3
 2972 01f6 1B14     		asrs	r3, r3, #16
 2973 01f8 FA6C     		ldr	r2, [r7, #76]
 2974 01fa 1344     		add	r3, r3, r2
 2975 01fc FB64     		str	r3, [r7, #76]
 2976              	.L199:
1018:..\src/interruptions.c **** 
1019:..\src/interruptions.c ****             // Integral
1020:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2977              		.loc 1 1020 0
 2978 01fe 3B69     		ldr	r3, [r7, #16]
 2979 0200 002B     		cmp	r3, #0
 2980 0202 08D0     		beq	.L200
1021:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2981              		.loc 1 1021 0
 2982 0204 2C4B     		ldr	r3, .L242+36
 2983 0206 1B68     		ldr	r3, [r3]
 2984 0208 3A69     		ldr	r2, [r7, #16]
 2985 020a 02FB03F3 		mul	r3, r2, r3
 2986 020e 1B14     		asrs	r3, r3, #16
 2987 0210 FA6C     		ldr	r2, [r7, #76]
 2988 0212 1344     		add	r3, r3, r2
 2989 0214 FB64     		str	r3, [r7, #76]
 2990              	.L200:
1022:..\src/interruptions.c **** 
1023:..\src/interruptions.c ****             // Derivative
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 73


1024:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2991              		.loc 1 1024 0
 2992 0216 FB68     		ldr	r3, [r7, #12]
 2993 0218 002B     		cmp	r3, #0
 2994 021a 0AD0     		beq	.L201
1025:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2995              		.loc 1 1025 0
 2996 021c 294B     		ldr	r3, .L242+48
 2997 021e 1B68     		ldr	r3, [r3]
 2998 0220 7A68     		ldr	r2, [r7, #4]
 2999 0222 D31A     		subs	r3, r2, r3
 3000 0224 FA68     		ldr	r2, [r7, #12]
 3001 0226 02FB03F3 		mul	r3, r2, r3
 3002 022a 1B14     		asrs	r3, r3, #16
 3003 022c FA6C     		ldr	r2, [r7, #76]
 3004 022e 1344     		add	r3, r3, r2
 3005 0230 FB64     		str	r3, [r7, #76]
 3006              	.L201:
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c ****             // pwm_input saturation
1028:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3007              		.loc 1 1028 0
 3008 0232 FB6C     		ldr	r3, [r7, #76]
 3009 0234 13F1640F 		cmn	r3, #100
 3010 0238 03DA     		bge	.L202
1029:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3011              		.loc 1 1029 0
 3012 023a 6FF06303 		mvn	r3, #99
 3013 023e FB64     		str	r3, [r7, #76]
 3014 0240 04E0     		b	.L203
 3015              	.L202:
1030:..\src/interruptions.c ****             else {
1031:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3016              		.loc 1 1031 0
 3017 0242 FB6C     		ldr	r3, [r7, #76]
 3018 0244 642B     		cmp	r3, #100
 3019 0246 01DD     		ble	.L203
1032:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3020              		.loc 1 1032 0
 3021 0248 6423     		movs	r3, #100
 3022 024a FB64     		str	r3, [r7, #76]
 3023              	.L203:
1033:..\src/interruptions.c ****             }
1034:..\src/interruptions.c **** 
1035:..\src/interruptions.c ****             // Update previous current
1036:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3024              		.loc 1 1036 0
 3025 024c 1D4A     		ldr	r2, .L242+48
 3026 024e 7B68     		ldr	r3, [r7, #4]
 3027 0250 1360     		str	r3, [r2]
1037:..\src/interruptions.c **** 
1038:..\src/interruptions.c ****         break;
 3028              		.loc 1 1038 0
 3029 0252 1CE1     		b	.L182
 3030              	.L183:
1039:..\src/interruptions.c **** 
1040:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 74


1041:..\src/interruptions.c ****         case CONTROL_ANGLE:
1042:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3031              		.loc 1 1042 0
 3032 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3033 0258 0F4A     		ldr	r2, .L242+4
 3034 025a 1B01     		lsls	r3, r3, #4
 3035 025c 1344     		add	r3, r3, r2
 3036 025e 1A68     		ldr	r2, [r3]
 3037 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3038 0264 0E49     		ldr	r1, .L242+12
 3039 0266 3420     		movs	r0, #52
 3040 0268 00FB03F3 		mul	r3, r0, r3
 3041 026c 0B44     		add	r3, r3, r1
 3042 026e 1B68     		ldr	r3, [r3]
 3043 0270 D31A     		subs	r3, r2, r3
 3044 0272 BB60     		str	r3, [r7, #8]
1043:..\src/interruptions.c **** 
1044:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3045              		.loc 1 1044 0
 3046 0274 0B4B     		ldr	r3, .L242+16
 3047 0276 1A68     		ldr	r2, [r3]
 3048 0278 BB68     		ldr	r3, [r7, #8]
 3049 027a 1344     		add	r3, r3, r2
 3050 027c 094A     		ldr	r2, .L242+16
 3051 027e 1360     		str	r3, [r2]
1045:..\src/interruptions.c **** 
1046:..\src/interruptions.c ****             // anti-windup (for integral control)
1047:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3052              		.loc 1 1047 0
 3053 0280 084B     		ldr	r3, .L242+16
 3054 0282 1B68     		ldr	r3, [r3]
 3055 0284 B3F57A7F 		cmp	r3, #1000
 3056 0288 1EDD     		ble	.L204
1048:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3057              		.loc 1 1048 0
 3058 028a 064B     		ldr	r3, .L242+16
 3059 028c 4FF47A72 		mov	r2, #1000
 3060 0290 1A60     		str	r2, [r3]
 3061 0292 21E0     		b	.L205
 3062              	.L243:
 3063              		.align	2
 3064              	.L242:
 3065 0294 00000000 		.word	c_mem
 3066 0298 00000000 		.word	g_ref
 3067 029c 00000000 		.word	g_refOld
 3068 02a0 00000000 		.word	g_meas
 3069 02a4 90000000 		.word	pos_error_sum.10325
 3070 02a8 80F0FA02 		.word	50000000
 3071 02ac 800F05FD 		.word	-50000000
 3072 02b0 94000000 		.word	prev_pos_err.10327
 3073 02b4 98000000 		.word	motor_dir.10330
 3074 02b8 9C000000 		.word	curr_error_sum.10326
 3075 02bc A0860100 		.word	100000
 3076 02c0 6079FEFF 		.word	-100000
 3077 02c4 A0000000 		.word	prev_curr_err.10328
 3078              	.L204:
1049:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 75


1050:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3079              		.loc 1 1050 0
 3080 02c8 9D4B     		ldr	r3, .L244
 3081 02ca 1B68     		ldr	r3, [r3]
 3082 02cc 13F57A7F 		cmn	r3, #1000
 3083 02d0 02DA     		bge	.L205
1051:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3084              		.loc 1 1051 0
 3085 02d2 9B4B     		ldr	r3, .L244
 3086 02d4 9B4A     		ldr	r2, .L244+4
 3087 02d6 1A60     		str	r2, [r3]
 3088              	.L205:
1052:..\src/interruptions.c ****             }
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****             // Proportional
1055:..\src/interruptions.c ****             if (k_p != 0) 
 3089              		.loc 1 1055 0
 3090 02d8 BB6B     		ldr	r3, [r7, #56]
 3091 02da 002B     		cmp	r3, #0
 3092 02dc 05D0     		beq	.L206
1056:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3093              		.loc 1 1056 0
 3094 02de BB6B     		ldr	r3, [r7, #56]
 3095 02e0 BA68     		ldr	r2, [r7, #8]
 3096 02e2 02FB03F3 		mul	r3, r2, r3
 3097 02e6 1B14     		asrs	r3, r3, #16
 3098 02e8 FB64     		str	r3, [r7, #76]
 3099              	.L206:
1057:..\src/interruptions.c ****             
1058:..\src/interruptions.c **** 
1059:..\src/interruptions.c ****             // Integral
1060:..\src/interruptions.c ****             if (k_i != 0) 
 3100              		.loc 1 1060 0
 3101 02ea 7B6B     		ldr	r3, [r7, #52]
 3102 02ec 002B     		cmp	r3, #0
 3103 02ee 08D0     		beq	.L207
1061:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3104              		.loc 1 1061 0
 3105 02f0 934B     		ldr	r3, .L244
 3106 02f2 1B68     		ldr	r3, [r3]
 3107 02f4 7A6B     		ldr	r2, [r7, #52]
 3108 02f6 02FB03F3 		mul	r3, r2, r3
 3109 02fa 1B14     		asrs	r3, r3, #16
 3110 02fc FA6C     		ldr	r2, [r7, #76]
 3111 02fe 1344     		add	r3, r3, r2
 3112 0300 FB64     		str	r3, [r7, #76]
 3113              	.L207:
1062:..\src/interruptions.c ****             
1063:..\src/interruptions.c **** 
1064:..\src/interruptions.c ****             // Derivative
1065:..\src/interruptions.c ****             if (k_d != 0) 
 3114              		.loc 1 1065 0
 3115 0302 3B6B     		ldr	r3, [r7, #48]
 3116 0304 002B     		cmp	r3, #0
 3117 0306 0AD0     		beq	.L208
1066:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3118              		.loc 1 1066 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 76


 3119 0308 8F4B     		ldr	r3, .L244+8
 3120 030a 1B68     		ldr	r3, [r3]
 3121 030c BA68     		ldr	r2, [r7, #8]
 3122 030e D31A     		subs	r3, r2, r3
 3123 0310 3A6B     		ldr	r2, [r7, #48]
 3124 0312 02FB03F3 		mul	r3, r2, r3
 3125 0316 1B14     		asrs	r3, r3, #16
 3126 0318 FA6C     		ldr	r2, [r7, #76]
 3127 031a 1344     		add	r3, r3, r2
 3128 031c FB64     		str	r3, [r7, #76]
 3129              	.L208:
1067:..\src/interruptions.c ****             
1068:..\src/interruptions.c **** 
1069:..\src/interruptions.c ****             // Update measure
1070:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3130              		.loc 1 1070 0
 3131 031e 8A4A     		ldr	r2, .L244+8
 3132 0320 BB68     		ldr	r3, [r7, #8]
 3133 0322 1360     		str	r3, [r2]
1071:..\src/interruptions.c **** 
1072:..\src/interruptions.c ****             if (pwm_input > 0)
 3134              		.loc 1 1072 0
 3135 0324 FB6C     		ldr	r3, [r7, #76]
 3136 0326 002B     		cmp	r3, #0
 3137 0328 03DD     		ble	.L209
1073:..\src/interruptions.c ****                 motor_dir = TRUE;
 3138              		.loc 1 1073 0
 3139 032a 884B     		ldr	r3, .L244+12
 3140 032c 0122     		movs	r2, #1
 3141 032e 1A70     		strb	r2, [r3]
1074:..\src/interruptions.c ****             else
1075:..\src/interruptions.c ****                 motor_dir = FALSE;
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****         break;
 3142              		.loc 1 1077 0
 3143 0330 ADE0     		b	.L182
 3144              	.L209:
1075:..\src/interruptions.c **** 
 3145              		.loc 1 1075 0
 3146 0332 864B     		ldr	r3, .L244+12
 3147 0334 0022     		movs	r2, #0
 3148 0336 1A70     		strb	r2, [r3]
 3149              		.loc 1 1077 0
 3150 0338 A9E0     		b	.L182
 3151              	.L186:
1078:..\src/interruptions.c **** 
1079:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1080:..\src/interruptions.c ****         case CONTROL_CURRENT:
1081:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3152              		.loc 1 1081 0
 3153 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3154 033e 844A     		ldr	r2, .L244+16
 3155 0340 1B01     		lsls	r3, r3, #4
 3156 0342 1344     		add	r3, r3, r2
 3157 0344 0C33     		adds	r3, r3, #12
 3158 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3159 0348 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 77


 3160 034a 00F09D80 		beq	.L240
 3161              		.loc 1 1081 0 is_stmt 0 discriminator 1
 3162 034e 814B     		ldr	r3, .L244+20
 3163 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3164 0352 002B     		cmp	r3, #0
 3165 0354 00F09880 		beq	.L240
1082:..\src/interruptions.c ****                 
1083:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3166              		.loc 1 1083 0 is_stmt 1
 3167 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3168 035c 7C4A     		ldr	r2, .L244+16
 3169 035e 1B01     		lsls	r3, r3, #4
 3170 0360 1344     		add	r3, r3, r2
 3171 0362 0433     		adds	r3, r3, #4
 3172 0364 1B68     		ldr	r3, [r3]
 3173 0366 BB64     		str	r3, [r7, #72]
1084:..\src/interruptions.c **** 
1085:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3174              		.loc 1 1085 0
 3175 0368 3B6C     		ldr	r3, [r7, #64]
 3176 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3177 036e 1A46     		mov	r2, r3
 3178 0370 BB6C     		ldr	r3, [r7, #72]
 3179 0372 9A42     		cmp	r2, r3
 3180 0374 04DA     		bge	.L212
1086:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3181              		.loc 1 1086 0
 3182 0376 3B6C     		ldr	r3, [r7, #64]
 3183 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3184 037c BB64     		str	r3, [r7, #72]
 3185 037e 0BE0     		b	.L213
 3186              	.L212:
1087:..\src/interruptions.c ****                 else {
1088:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3187              		.loc 1 1088 0
 3188 0380 3B6C     		ldr	r3, [r7, #64]
 3189 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3190 0386 5A42     		negs	r2, r3
 3191 0388 BB6C     		ldr	r3, [r7, #72]
 3192 038a 9A42     		cmp	r2, r3
 3193 038c 04DD     		ble	.L213
1089:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3194              		.loc 1 1089 0
 3195 038e 3B6C     		ldr	r3, [r7, #64]
 3196 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3197 0394 5B42     		negs	r3, r3
 3198 0396 BB64     		str	r3, [r7, #72]
 3199              	.L213:
1090:..\src/interruptions.c ****                 }
1091:..\src/interruptions.c ****                 
1092:..\src/interruptions.c ****                 // current error
1093:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3200              		.loc 1 1093 0
 3201 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3202 039c 6E4A     		ldr	r2, .L244+24
 3203 039e 3421     		movs	r1, #52
 3204 03a0 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 78


 3205 03a4 1344     		add	r3, r3, r2
 3206 03a6 0C33     		adds	r3, r3, #12
 3207 03a8 1B68     		ldr	r3, [r3]
 3208 03aa BA6C     		ldr	r2, [r7, #72]
 3209 03ac D31A     		subs	r3, r2, r3
 3210 03ae 7B60     		str	r3, [r7, #4]
1094:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3211              		.loc 1 1094 0
 3212 03b0 6A4B     		ldr	r3, .L244+28
 3213 03b2 1A68     		ldr	r2, [r3]
 3214 03b4 7B68     		ldr	r3, [r7, #4]
 3215 03b6 1344     		add	r3, r3, r2
 3216 03b8 684A     		ldr	r2, .L244+28
 3217 03ba 1360     		str	r3, [r2]
1095:..\src/interruptions.c ****                 
1096:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3218              		.loc 1 1096 0
 3219 03bc 674B     		ldr	r3, .L244+28
 3220 03be 1B68     		ldr	r3, [r3]
 3221 03c0 674A     		ldr	r2, .L244+32
 3222 03c2 9342     		cmp	r3, r2
 3223 03c4 03DD     		ble	.L214
1097:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3224              		.loc 1 1097 0
 3225 03c6 654B     		ldr	r3, .L244+28
 3226 03c8 654A     		ldr	r2, .L244+32
 3227 03ca 1A60     		str	r2, [r3]
 3228 03cc 07E0     		b	.L215
 3229              	.L214:
1098:..\src/interruptions.c ****                 else {
1099:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3230              		.loc 1 1099 0
 3231 03ce 634B     		ldr	r3, .L244+28
 3232 03d0 1B68     		ldr	r3, [r3]
 3233 03d2 644A     		ldr	r2, .L244+36
 3234 03d4 9342     		cmp	r3, r2
 3235 03d6 02DA     		bge	.L215
1100:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3236              		.loc 1 1100 0
 3237 03d8 604B     		ldr	r3, .L244+28
 3238 03da 624A     		ldr	r2, .L244+36
 3239 03dc 1A60     		str	r2, [r3]
 3240              	.L215:
1101:..\src/interruptions.c ****                 }
1102:..\src/interruptions.c **** 
1103:..\src/interruptions.c ****                 pwm_input = 0;
 3241              		.loc 1 1103 0
 3242 03de 0023     		movs	r3, #0
 3243 03e0 FB64     		str	r3, [r7, #76]
1104:..\src/interruptions.c **** 
1105:..\src/interruptions.c ****                 // Proportional
1106:..\src/interruptions.c ****                 if (k_p_c != 0)
 3244              		.loc 1 1106 0
 3245 03e2 FB6A     		ldr	r3, [r7, #44]
 3246 03e4 002B     		cmp	r3, #0
 3247 03e6 07D0     		beq	.L216
1107:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 79


 3248              		.loc 1 1107 0
 3249 03e8 FB6A     		ldr	r3, [r7, #44]
 3250 03ea 7A68     		ldr	r2, [r7, #4]
 3251 03ec 02FB03F3 		mul	r3, r2, r3
 3252 03f0 1B14     		asrs	r3, r3, #16
 3253 03f2 FA6C     		ldr	r2, [r7, #76]
 3254 03f4 1344     		add	r3, r3, r2
 3255 03f6 FB64     		str	r3, [r7, #76]
 3256              	.L216:
1108:..\src/interruptions.c **** 
1109:..\src/interruptions.c ****                 // Integral
1110:..\src/interruptions.c ****                 if (k_i_c != 0)
 3257              		.loc 1 1110 0
 3258 03f8 BB6A     		ldr	r3, [r7, #40]
 3259 03fa 002B     		cmp	r3, #0
 3260 03fc 08D0     		beq	.L217
1111:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3261              		.loc 1 1111 0
 3262 03fe 574B     		ldr	r3, .L244+28
 3263 0400 1B68     		ldr	r3, [r3]
 3264 0402 BA6A     		ldr	r2, [r7, #40]
 3265 0404 02FB03F3 		mul	r3, r2, r3
 3266 0408 1B14     		asrs	r3, r3, #16
 3267 040a FA6C     		ldr	r2, [r7, #76]
 3268 040c 1344     		add	r3, r3, r2
 3269 040e FB64     		str	r3, [r7, #76]
 3270              	.L217:
1112:..\src/interruptions.c **** 
1113:..\src/interruptions.c ****                 // Derivative
1114:..\src/interruptions.c ****                 if (k_d_c != 0)
 3271              		.loc 1 1114 0
 3272 0410 7B6A     		ldr	r3, [r7, #36]
 3273 0412 002B     		cmp	r3, #0
 3274 0414 0AD0     		beq	.L218
1115:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3275              		.loc 1 1115 0
 3276 0416 544B     		ldr	r3, .L244+40
 3277 0418 1B68     		ldr	r3, [r3]
 3278 041a 7A68     		ldr	r2, [r7, #4]
 3279 041c D31A     		subs	r3, r2, r3
 3280 041e 7A6A     		ldr	r2, [r7, #36]
 3281 0420 02FB03F3 		mul	r3, r2, r3
 3282 0424 1B14     		asrs	r3, r3, #16
 3283 0426 FA6C     		ldr	r2, [r7, #76]
 3284 0428 1344     		add	r3, r3, r2
 3285 042a FB64     		str	r3, [r7, #76]
 3286              	.L218:
1116:..\src/interruptions.c ****                 
1117:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3287              		.loc 1 1117 0
 3288 042c 4E4A     		ldr	r2, .L244+40
 3289 042e 7B68     		ldr	r3, [r7, #4]
 3290 0430 1360     		str	r3, [r2]
1118:..\src/interruptions.c ****                 
1119:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3291              		.loc 1 1119 0
 3292 0432 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 80


 3293 0434 002B     		cmp	r3, #0
 3294 0436 03DB     		blt	.L219
1120:..\src/interruptions.c ****                     motor_dir = TRUE;
 3295              		.loc 1 1120 0
 3296 0438 444B     		ldr	r3, .L244+12
 3297 043a 0122     		movs	r2, #1
 3298 043c 1A70     		strb	r2, [r3]
1121:..\src/interruptions.c ****                 else
1122:..\src/interruptions.c ****                     motor_dir = FALSE;
1123:..\src/interruptions.c ****             }
1124:..\src/interruptions.c ****         break;
 3299              		.loc 1 1124 0
 3300 043e 23E0     		b	.L240
 3301              	.L219:
1122:..\src/interruptions.c ****             }
 3302              		.loc 1 1122 0
 3303 0440 424B     		ldr	r3, .L244+12
 3304 0442 0022     		movs	r2, #0
 3305 0444 1A70     		strb	r2, [r3]
 3306              		.loc 1 1124 0
 3307 0446 1FE0     		b	.L240
 3308              	.L185:
1125:..\src/interruptions.c ****         
1126:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1127:..\src/interruptions.c ****         case CONTROL_PWM:
1128:..\src/interruptions.c **** 
1129:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3309              		.loc 1 1129 0
 3310 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3311 044c 404A     		ldr	r2, .L244+16
 3312 044e 1B01     		lsls	r3, r3, #4
 3313 0450 1344     		add	r3, r3, r2
 3314 0452 0833     		adds	r3, r3, #8
 3315 0454 1B68     		ldr	r3, [r3]
 3316 0456 FB64     		str	r3, [r7, #76]
1130:..\src/interruptions.c **** 
1131:..\src/interruptions.c ****             if (pwm_input > 0) 
 3317              		.loc 1 1131 0
 3318 0458 FB6C     		ldr	r3, [r7, #76]
 3319 045a 002B     		cmp	r3, #0
 3320 045c 03DD     		ble	.L220
1132:..\src/interruptions.c ****                 motor_dir = TRUE;
 3321              		.loc 1 1132 0
 3322 045e 3B4B     		ldr	r3, .L244+12
 3323 0460 0122     		movs	r2, #1
 3324 0462 1A70     		strb	r2, [r3]
 3325 0464 02E0     		b	.L221
 3326              	.L220:
1133:..\src/interruptions.c ****             else 
1134:..\src/interruptions.c ****                 motor_dir = FALSE;
 3327              		.loc 1 1134 0
 3328 0466 394B     		ldr	r3, .L244+12
 3329 0468 0022     		movs	r2, #0
 3330 046a 1A70     		strb	r2, [r3]
 3331              	.L221:
1135:..\src/interruptions.c ****             
1136:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 81


1137:..\src/interruptions.c ****             // pwm_input saturation
1138:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3332              		.loc 1 1138 0
 3333 046c FB6C     		ldr	r3, [r7, #76]
 3334 046e 13F1640F 		cmn	r3, #100
 3335 0472 03DA     		bge	.L222
1139:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3336              		.loc 1 1139 0
 3337 0474 6FF06303 		mvn	r3, #99
 3338 0478 FB64     		str	r3, [r7, #76]
1140:..\src/interruptions.c ****             else {
1141:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1142:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1143:..\src/interruptions.c ****         	}
1144:..\src/interruptions.c **** 
1145:..\src/interruptions.c ****         break;
 3339              		.loc 1 1145 0
 3340 047a 07E0     		b	.L241
 3341              	.L222:
1141:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3342              		.loc 1 1141 0
 3343 047c FB6C     		ldr	r3, [r7, #76]
 3344 047e 642B     		cmp	r3, #100
 3345 0480 04DD     		ble	.L241
1142:..\src/interruptions.c ****         	}
 3346              		.loc 1 1142 0
 3347 0482 6423     		movs	r3, #100
 3348 0484 FB64     		str	r3, [r7, #76]
 3349              		.loc 1 1145 0
 3350 0486 01E0     		b	.L241
 3351              	.L240:
1124:..\src/interruptions.c ****         
 3352              		.loc 1 1124 0
 3353 0488 00BF     		nop
 3354 048a 00E0     		b	.L182
 3355              	.L241:
 3356              		.loc 1 1145 0
 3357 048c 00BF     		nop
 3358              	.L182:
1146:..\src/interruptions.c ****             
1147:..\src/interruptions.c ****     }
1148:..\src/interruptions.c **** 
1149:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1150:..\src/interruptions.c **** 
1151:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3359              		.loc 1 1151 0
 3360 048e FB6C     		ldr	r3, [r7, #76]
 3361 0490 642B     		cmp	r3, #100
 3362 0492 01DD     		ble	.L224
1152:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3363              		.loc 1 1152 0
 3364 0494 6423     		movs	r3, #100
 3365 0496 FB64     		str	r3, [r7, #76]
 3366              	.L224:
1153:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3367              		.loc 1 1153 0
 3368 0498 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 82


 3369 049a 13F1640F 		cmn	r3, #100
 3370 049e 02DA     		bge	.L225
1154:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3371              		.loc 1 1154 0
 3372 04a0 6FF06303 		mvn	r3, #99
 3373 04a4 FB64     		str	r3, [r7, #76]
 3374              	.L225:
1155:..\src/interruptions.c **** 
1156:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3375              		.loc 1 1156 0
 3376 04a6 3B6C     		ldr	r3, [r7, #64]
 3377 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3378 04ac 012B     		cmp	r3, #1
 3379 04ae 0DD0     		beq	.L226
1157:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3380              		.loc 1 1157 0
 3381 04b0 FB6C     		ldr	r3, [r7, #76]
 3382 04b2 9B02     		lsls	r3, r3, #10
 3383 04b4 2D4A     		ldr	r2, .L244+44
 3384 04b6 82FB0312 		smull	r1, r2, r2, r3
 3385 04ba 5211     		asrs	r2, r2, #5
 3386 04bc DB17     		asrs	r3, r3, #31
 3387 04be D31A     		subs	r3, r2, r3
 3388 04c0 2B4A     		ldr	r2, .L244+48
 3389 04c2 1288     		ldrh	r2, [r2]
 3390 04c4 02FB03F3 		mul	r3, r2, r3
 3391 04c8 9B12     		asrs	r3, r3, #10
 3392 04ca FB64     		str	r3, [r7, #76]
 3393              	.L226:
1158:..\src/interruptions.c ****  
1159:..\src/interruptions.c ****     //// RATE LIMITER ////
1160:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3394              		.loc 1 1160 0
 3395 04cc 294B     		ldr	r3, .L244+52
 3396 04ce 1B68     		ldr	r3, [r3]
 3397 04d0 FA6C     		ldr	r2, [r7, #76]
 3398 04d2 D31A     		subs	r3, r2, r3
 3399 04d4 3A6C     		ldr	r2, [r7, #64]
 3400 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3401 04da 9342     		cmp	r3, r2
 3402 04dc 08DD     		ble	.L227
1161:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3403              		.loc 1 1161 0
 3404 04de 3B6C     		ldr	r3, [r7, #64]
 3405 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3406 04e4 1A46     		mov	r2, r3
 3407 04e6 234B     		ldr	r3, .L244+52
 3408 04e8 1B68     		ldr	r3, [r3]
 3409 04ea 1344     		add	r3, r3, r2
 3410 04ec FB64     		str	r3, [r7, #76]
 3411 04ee 10E0     		b	.L228
 3412              	.L227:
1162:..\src/interruptions.c ****     }
1163:..\src/interruptions.c ****     else {
1164:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3413              		.loc 1 1164 0
 3414 04f0 204B     		ldr	r3, .L244+52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 83


 3415 04f2 1B68     		ldr	r3, [r3]
 3416 04f4 FA6C     		ldr	r2, [r7, #76]
 3417 04f6 D21A     		subs	r2, r2, r3
 3418 04f8 3B6C     		ldr	r3, [r7, #64]
 3419 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3420 04fe 5B42     		negs	r3, r3
 3421 0500 9A42     		cmp	r2, r3
 3422 0502 06DA     		bge	.L228
1165:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3423              		.loc 1 1165 0
 3424 0504 1B4B     		ldr	r3, .L244+52
 3425 0506 1B68     		ldr	r3, [r3]
 3426 0508 3A6C     		ldr	r2, [r7, #64]
 3427 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3428 050e 9B1A     		subs	r3, r3, r2
 3429 0510 FB64     		str	r3, [r7, #76]
 3430              	.L228:
1166:..\src/interruptions.c ****     }
1167:..\src/interruptions.c ****     
1168:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3431              		.loc 1 1168 0
 3432 0512 FB6C     		ldr	r3, [r7, #76]
 3433 0514 642B     		cmp	r3, #100
 3434 0516 01DD     		ble	.L229
1169:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3435              		.loc 1 1169 0
 3436 0518 6423     		movs	r3, #100
 3437 051a FB64     		str	r3, [r7, #76]
 3438              	.L229:
1170:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3439              		.loc 1 1170 0
 3440 051c FB6C     		ldr	r3, [r7, #76]
 3441 051e 13F1640F 		cmn	r3, #100
 3442 0522 02DA     		bge	.L230
1171:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3443              		.loc 1 1171 0
 3444 0524 6FF06303 		mvn	r3, #99
 3445 0528 FB64     		str	r3, [r7, #76]
 3446              	.L230:
1172:..\src/interruptions.c ****     
1173:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3447              		.loc 1 1173 0
 3448 052a 124A     		ldr	r2, .L244+52
 3449 052c FB6C     		ldr	r3, [r7, #76]
 3450 052e 1360     		str	r3, [r2]
1174:..\src/interruptions.c **** 	
1175:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3451              		.loc 1 1175 0
 3452 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3453 0534 FA6C     		ldr	r2, [r7, #76]
 3454 0536 002A     		cmp	r2, #0
 3455 0538 1EDB     		blt	.L231
 3456              		.loc 1 1175 0 is_stmt 0 discriminator 1
 3457 053a 0121     		movs	r1, #1
 3458 053c 1EE0     		b	.L232
 3459              	.L245:
 3460 053e 00BF     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 84


 3461              	.L244:
 3462 0540 90000000 		.word	pos_error_sum.10325
 3463 0544 18FCFFFF 		.word	-1000
 3464 0548 94000000 		.word	prev_pos_err.10327
 3465 054c 98000000 		.word	motor_dir.10330
 3466 0550 00000000 		.word	g_ref
 3467 0554 00000000 		.word	tension_valid
 3468 0558 00000000 		.word	g_meas
 3469 055c 9C000000 		.word	curr_error_sum.10326
 3470 0560 A0860100 		.word	100000
 3471 0564 6079FEFF 		.word	-100000
 3472 0568 A0000000 		.word	prev_curr_err.10328
 3473 056c 1F85EB51 		.word	1374389535
 3474 0570 00000000 		.word	dev_pwm_limit
 3475 0574 A4000000 		.word	prev_pwm.10329
 3476              	.L231:
 3477              		.loc 1 1175 0 discriminator 2
 3478 0578 4FF0FF31 		mov	r1, #-1
 3479              	.L232:
 3480              		.loc 1 1175 0 discriminator 4
 3481 057c 5A4A     		ldr	r2, .L246
 3482 057e D154     		strb	r1, [r2, r3]
1176:..\src/interruptions.c ****     
1177:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3483              		.loc 1 1177 0 is_stmt 1 discriminator 4
 3484 0580 3B6C     		ldr	r3, [r7, #64]
 3485 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3486 0586 012B     		cmp	r3, #1
 3487 0588 40F09680 		bne	.L233
1178:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1179:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3488              		.loc 1 1179 0
 3489 058c 3B6C     		ldr	r3, [r7, #64]
 3490 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3491 0592 012B     		cmp	r3, #1
 3492 0594 00F08D80 		beq	.L234
 3493              		.loc 1 1179 0 is_stmt 0 discriminator 1
 3494 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3495 059c 534A     		ldr	r2, .L246+4
 3496 059e 3421     		movs	r1, #52
 3497 05a0 01FB03F3 		mul	r3, r1, r3
 3498 05a4 1344     		add	r3, r3, r2
 3499 05a6 1A68     		ldr	r2, [r3]
 3500 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3501 05ac 5049     		ldr	r1, .L246+8
 3502 05ae 3420     		movs	r0, #52
 3503 05b0 00FB03F3 		mul	r3, r0, r3
 3504 05b4 0B44     		add	r3, r3, r1
 3505 05b6 1B68     		ldr	r3, [r3]
 3506 05b8 D31A     		subs	r3, r2, r3
 3507 05ba 312B     		cmp	r3, #49
 3508 05bc 79DC     		bgt	.L234
1180:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3509              		.loc 1 1180 0 is_stmt 1 discriminator 2
 3510 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3511 05c2 4A4A     		ldr	r2, .L246+4
 3512 05c4 3421     		movs	r1, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 85


 3513 05c6 01FB03F3 		mul	r3, r1, r3
 3514 05ca 1344     		add	r3, r3, r2
 3515 05cc 1A68     		ldr	r2, [r3]
 3516 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3517 05d2 4749     		ldr	r1, .L246+8
 3518 05d4 3420     		movs	r0, #52
 3519 05d6 00FB03F3 		mul	r3, r0, r3
 3520 05da 0B44     		add	r3, r3, r1
 3521 05dc 1B68     		ldr	r3, [r3]
 3522 05de D31A     		subs	r3, r2, r3
1179:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3523              		.loc 1 1179 0 discriminator 2
 3524 05e0 13F1310F 		cmn	r3, #49
 3525 05e4 65DB     		blt	.L234
1181:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3526              		.loc 1 1181 0
 3527 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3528 05ea 424A     		ldr	r2, .L246+12
 3529 05ec 1B01     		lsls	r3, r3, #4
 3530 05ee 1344     		add	r3, r3, r2
 3531 05f0 1A68     		ldr	r2, [r3]
 3532 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3533 05f6 4049     		ldr	r1, .L246+16
 3534 05f8 1B01     		lsls	r3, r3, #4
 3535 05fa 0B44     		add	r3, r3, r1
 3536 05fc 1B68     		ldr	r3, [r3]
 3537 05fe D31A     		subs	r3, r2, r3
1180:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3538              		.loc 1 1180 0
 3539 0600 632B     		cmp	r3, #99
 3540 0602 56DC     		bgt	.L234
 3541              		.loc 1 1181 0
 3542 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3543 0608 3A4A     		ldr	r2, .L246+12
 3544 060a 1B01     		lsls	r3, r3, #4
 3545 060c 1344     		add	r3, r3, r2
 3546 060e 1A68     		ldr	r2, [r3]
 3547 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3548 0614 3849     		ldr	r1, .L246+16
 3549 0616 1B01     		lsls	r3, r3, #4
 3550 0618 0B44     		add	r3, r3, r1
 3551 061a 1B68     		ldr	r3, [r3]
 3552 061c D31A     		subs	r3, r2, r3
 3553 061e 13F1630F 		cmn	r3, #99
 3554 0622 46DB     		blt	.L234
1182:..\src/interruptions.c ****             position_counter++;
 3555              		.loc 1 1182 0
 3556 0624 354B     		ldr	r3, .L246+20
 3557 0626 1B68     		ldr	r3, [r3]
 3558 0628 0133     		adds	r3, r3, #1
 3559 062a 344A     		ldr	r2, .L246+20
 3560 062c 1360     		str	r3, [r2]
1183:..\src/interruptions.c ****             
1184:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3561              		.loc 1 1184 0
 3562 062e 334B     		ldr	r3, .L246+20
 3563 0630 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 86


 3564 0632 F92B     		cmp	r3, #249
 3565 0634 40D9     		bls	.L233
1185:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3566              		.loc 1 1185 0
 3567 0636 3B6C     		ldr	r3, [r7, #64]
 3568 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3569 063c 002B     		cmp	r3, #0
 3570 063e 11D1     		bne	.L236
 3571              		.loc 1 1185 0 is_stmt 0 discriminator 1
 3572 0640 2F4B     		ldr	r3, .L246+24
 3573 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3574 0644 002B     		cmp	r3, #0
 3575 0646 0DD1     		bne	.L236
1186:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3576              		.loc 1 1186 0 is_stmt 1
 3577 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3578 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3579 0650 2749     		ldr	r1, .L246+8
 3580 0652 3420     		movs	r0, #52
 3581 0654 00FB02F2 		mul	r2, r0, r2
 3582 0658 0A44     		add	r2, r2, r1
 3583 065a 1268     		ldr	r2, [r2]
 3584 065c 2949     		ldr	r1, .L246+28
 3585 065e 1B01     		lsls	r3, r3, #4
 3586 0660 0B44     		add	r3, r3, r1
 3587 0662 1A60     		str	r2, [r3]
 3588              	.L236:
1187:..\src/interruptions.c ****                 }
1188:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3589              		.loc 1 1188 0
 3590 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3591 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3592 066c 2049     		ldr	r1, .L246+8
 3593 066e 3420     		movs	r0, #52
 3594 0670 00FB02F2 		mul	r2, r0, r2
 3595 0674 0A44     		add	r2, r2, r1
 3596 0676 1268     		ldr	r2, [r2]
 3597 0678 1F49     		ldr	r1, .L246+16
 3598 067a 1B01     		lsls	r3, r3, #4
 3599 067c 0B44     		add	r3, r3, r1
 3600 067e 1A60     		str	r2, [r3]
1189:..\src/interruptions.c ****                 
1190:..\src/interruptions.c ****                 if (position_counter == 250){
 3601              		.loc 1 1190 0
 3602 0680 1E4B     		ldr	r3, .L246+20
 3603 0682 1B68     		ldr	r3, [r3]
 3604 0684 FA2B     		cmp	r3, #250
 3605 0686 11D1     		bne	.L237
1191:..\src/interruptions.c ****                     // To do only once
1192:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3606              		.loc 1 1192 0
 3607 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3608 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3609 0690 1749     		ldr	r1, .L246+8
 3610 0692 3420     		movs	r0, #52
 3611 0694 00FB02F2 		mul	r2, r0, r2
 3612 0698 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 87


 3613 069a 0C32     		adds	r2, r2, #12
 3614 069c 1268     		ldr	r2, [r2]
 3615 069e 1449     		ldr	r1, .L246+8
 3616 06a0 3420     		movs	r0, #52
 3617 06a2 00FB03F3 		mul	r3, r0, r3
 3618 06a6 0B44     		add	r3, r3, r1
 3619 06a8 1433     		adds	r3, r3, #20
 3620 06aa 1A60     		str	r2, [r3]
 3621              	.L237:
1193:..\src/interruptions.c ****                 }
1194:..\src/interruptions.c ****                 pwm_input = 0;            
 3622              		.loc 1 1194 0
 3623 06ac 0023     		movs	r3, #0
 3624 06ae FB64     		str	r3, [r7, #76]
1184:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3625              		.loc 1 1184 0
 3626 06b0 02E0     		b	.L233
 3627              	.L234:
1195:..\src/interruptions.c ****             }
1196:..\src/interruptions.c ****         }
1197:..\src/interruptions.c ****         else {
1198:..\src/interruptions.c ****             position_counter = 0;
 3628              		.loc 1 1198 0
 3629 06b2 124B     		ldr	r3, .L246+20
 3630 06b4 0022     		movs	r2, #0
 3631 06b6 1A60     		str	r2, [r3]
 3632              	.L233:
1199:..\src/interruptions.c ****         }
1200:..\src/interruptions.c ****     }
1201:..\src/interruptions.c ****     
1202:..\src/interruptions.c ****     if (motor_dir)
 3633              		.loc 1 1202 0
 3634 06b8 134B     		ldr	r3, .L246+32
 3635 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3636 06bc 002B     		cmp	r3, #0
 3637 06be 03D0     		beq	.L238
1203:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3638              		.loc 1 1203 0
 3639 06c0 0120     		movs	r0, #1
 3640 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3641 06c6 02E0     		b	.L239
 3642              	.L238:
1204:..\src/interruptions.c ****     else
1205:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 3643              		.loc 1 1205 0
 3644 06c8 0020     		movs	r0, #0
 3645 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3646              	.L239:
1206:..\src/interruptions.c **** 
1207:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3647              		.loc 1 1207 0
 3648 06ce FB6C     		ldr	r3, [r7, #76]
 3649 06d0 002B     		cmp	r3, #0
 3650 06d2 B8BF     		it	lt
 3651 06d4 5B42     		rsblt	r3, r3, #0
 3652 06d6 DBB2     		uxtb	r3, r3
 3653 06d8 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 88


 3654 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1208:..\src/interruptions.c **** }
 3655              		.loc 1 1208 0
 3656 06de 00BF     		nop
 3657 06e0 5037     		adds	r7, r7, #80
 3658              		.cfi_def_cfa_offset 8
 3659 06e2 BD46     		mov	sp, r7
 3660              		.cfi_def_cfa_register 13
 3661              		@ sp needed
 3662 06e4 80BD     		pop	{r7, pc}
 3663              	.L247:
 3664 06e6 00BF     		.align	2
 3665              	.L246:
 3666 06e8 00000000 		.word	pwm_sign
 3667 06ec 00000000 		.word	g_measOld
 3668 06f0 00000000 		.word	g_meas
 3669 06f4 00000000 		.word	g_refOld
 3670 06f8 00000000 		.word	g_ref
 3671 06fc A8000000 		.word	position_counter.10331
 3672 0700 00000000 		.word	change_ext_ref_flag
 3673 0704 00000000 		.word	g_refNew
 3674 0708 98000000 		.word	motor_dir.10330
 3675              		.cfi_endproc
 3676              	.LFE71:
 3677              		.size	motor_control_SH, .-motor_control_SH
 3678              		.section	.text.motor_control_generic,"ax",%progbits
 3679              		.align	2
 3680              		.global	motor_control_generic
 3681              		.thumb
 3682              		.thumb_func
 3683              		.type	motor_control_generic, %function
 3684              	motor_control_generic:
 3685              	.LFB72:
1209:..\src/interruptions.c **** 
1210:..\src/interruptions.c **** //==============================================================================
1211:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1212:..\src/interruptions.c **** //==============================================================================
1213:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 3686              		.loc 1 1213 0
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 80
 3689              		@ frame_needed = 1, uses_anonymous_args = 0
 3690 0000 90B5     		push	{r4, r7, lr}
 3691              		.cfi_def_cfa_offset 12
 3692              		.cfi_offset 4, -12
 3693              		.cfi_offset 7, -8
 3694              		.cfi_offset 14, -4
 3695 0002 95B0     		sub	sp, sp, #84
 3696              		.cfi_def_cfa_offset 96
 3697 0004 00AF     		add	r7, sp, #0
 3698              		.cfi_def_cfa_register 7
 3699 0006 0346     		mov	r3, r0
 3700 0008 FB71     		strb	r3, [r7, #7]
1214:..\src/interruptions.c ****     
1215:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3701              		.loc 1 1215 0
 3702 000a 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 89


 3703 000c FB64     		str	r3, [r7, #76]
1216:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1217:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1218:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1219:..\src/interruptions.c **** 
1220:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 3704              		.loc 1 1220 0
 3705 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3706 0010 1346     		mov	r3, r2
 3707 0012 DB00     		lsls	r3, r3, #3
 3708 0014 9B1A     		subs	r3, r3, r2
 3709 0016 1B01     		lsls	r3, r3, #4
 3710 0018 B033     		adds	r3, r3, #176
 3711 001a 9D4A     		ldr	r2, .L339
 3712 001c 1344     		add	r3, r3, r2
 3713 001e 7B64     		str	r3, [r7, #68]
1221:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 3714              		.loc 1 1221 0
 3715 0020 7B6C     		ldr	r3, [r7, #68]
 3716 0022 93F86030 		ldrb	r3, [r3, #96]
 3717 0026 87F84330 		strb	r3, [r7, #67]
1222:..\src/interruptions.c ****     
1223:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 3718              		.loc 1 1223 0
 3719 002a 7B6C     		ldr	r3, [r7, #68]
 3720 002c 1B68     		ldr	r3, [r3]
 3721 002e FB63     		str	r3, [r7, #60]
1224:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 3722              		.loc 1 1224 0
 3723 0030 7B6C     		ldr	r3, [r7, #68]
 3724 0032 5B68     		ldr	r3, [r3, #4]
 3725 0034 BB63     		str	r3, [r7, #56]
1225:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 3726              		.loc 1 1225 0
 3727 0036 7B6C     		ldr	r3, [r7, #68]
 3728 0038 9B68     		ldr	r3, [r3, #8]
 3729 003a 7B63     		str	r3, [r7, #52]
1226:..\src/interruptions.c **** 
1227:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 3730              		.loc 1 1227 0
 3731 003c 7B6C     		ldr	r3, [r7, #68]
 3732 003e DB68     		ldr	r3, [r3, #12]
 3733 0040 3B63     		str	r3, [r7, #48]
1228:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 3734              		.loc 1 1228 0
 3735 0042 7B6C     		ldr	r3, [r7, #68]
 3736 0044 1B69     		ldr	r3, [r3, #16]
 3737 0046 FB62     		str	r3, [r7, #44]
1229:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 3738              		.loc 1 1229 0
 3739 0048 7B6C     		ldr	r3, [r7, #68]
 3740 004a 5B69     		ldr	r3, [r3, #20]
 3741 004c BB62     		str	r3, [r7, #40]
1230:..\src/interruptions.c **** 
1231:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 3742              		.loc 1 1231 0
 3743 004e 7B6C     		ldr	r3, [r7, #68]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 90


 3744 0050 9B69     		ldr	r3, [r3, #24]
 3745 0052 7B62     		str	r3, [r7, #36]
1232:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 3746              		.loc 1 1232 0
 3747 0054 7B6C     		ldr	r3, [r7, #68]
 3748 0056 DB69     		ldr	r3, [r3, #28]
 3749 0058 3B62     		str	r3, [r7, #32]
1233:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 3750              		.loc 1 1233 0
 3751 005a 7B6C     		ldr	r3, [r7, #68]
 3752 005c 1B6A     		ldr	r3, [r3, #32]
 3753 005e FB61     		str	r3, [r7, #28]
1234:..\src/interruptions.c ****     
1235:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 3754              		.loc 1 1235 0
 3755 0060 7B6C     		ldr	r3, [r7, #68]
 3756 0062 5B6A     		ldr	r3, [r3, #36]
 3757 0064 BB61     		str	r3, [r7, #24]
1236:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 3758              		.loc 1 1236 0
 3759 0066 7B6C     		ldr	r3, [r7, #68]
 3760 0068 9B6A     		ldr	r3, [r3, #40]
 3761 006a 7B61     		str	r3, [r7, #20]
1237:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 3762              		.loc 1 1237 0
 3763 006c 7B6C     		ldr	r3, [r7, #68]
 3764 006e DB6A     		ldr	r3, [r3, #44]
 3765 0070 3B61     		str	r3, [r7, #16]
1238:..\src/interruptions.c **** 
1239:..\src/interruptions.c ****     // Static Variables
1240:..\src/interruptions.c **** 
1241:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1242:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1243:..\src/interruptions.c ****     
1244:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1245:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1246:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1247:..\src/interruptions.c **** 
1248:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1249:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1250:..\src/interruptions.c **** 
1251:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1252:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 3766              		.loc 1 1252 0
 3767 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3768 0074 1B01     		lsls	r3, r3, #4
 3769 0076 874A     		ldr	r2, .L339+4
 3770 0078 9918     		adds	r1, r3, r2
 3771 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3772 007c 1B01     		lsls	r3, r3, #4
 3773 007e 864A     		ldr	r2, .L339+8
 3774 0080 1A44     		add	r2, r2, r3
 3775 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3776 0084 1846     		mov	r0, r3
 3777 0086 FFF7FEFF 		bl	compute_reference
1253:..\src/interruptions.c ****     
1254:..\src/interruptions.c ****    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 91


1255:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3778              		.loc 1 1255 0
 3779 008a 7B6C     		ldr	r3, [r7, #68]
 3780 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3781 0090 032B     		cmp	r3, #3
 3782 0092 00F28082 		bhi	.L249
 3783 0096 01A2     		adr	r2, .L251
 3784 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3785              		.p2align 2
 3786              	.L251:
 3787 009c ED020000 		.word	.L250+1
 3788 00a0 F7040000 		.word	.L252+1
 3789 00a4 C5030000 		.word	.L253+1
 3790 00a8 AD000000 		.word	.L254+1
 3791              		.p2align 1
 3792              	.L254:
1256:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1257:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1258:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3793              		.loc 1 1258 0
 3794 00ac 794B     		ldr	r3, .L339+4
 3795 00ae 1A68     		ldr	r2, [r3]
 3796 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3797 00b4 7949     		ldr	r1, .L339+12
 3798 00b6 3420     		movs	r0, #52
 3799 00b8 00FB03F3 		mul	r3, r0, r3
 3800 00bc 0B44     		add	r3, r3, r1
 3801 00be 1B68     		ldr	r3, [r3]
 3802 00c0 D31A     		subs	r3, r2, r3
 3803 00c2 FB60     		str	r3, [r7, #12]
1259:..\src/interruptions.c **** 
1260:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3804              		.loc 1 1260 0
 3805 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3806 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3807 00c8 7549     		ldr	r1, .L339+16
 3808 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3809 00ce FA68     		ldr	r2, [r7, #12]
 3810 00d0 0A44     		add	r2, r2, r1
 3811 00d2 7349     		ldr	r1, .L339+16
 3812 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****             // error_sum saturation
1263:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3813              		.loc 1 1263 0
 3814 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3815 00da 714A     		ldr	r2, .L339+16
 3816 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3817 00e0 704A     		ldr	r2, .L339+20
 3818 00e2 9342     		cmp	r3, r2
 3819 00e4 05DD     		ble	.L255
1264:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3820              		.loc 1 1264 0
 3821 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3822 00e8 6D4A     		ldr	r2, .L339+16
 3823 00ea 6E49     		ldr	r1, .L339+20
 3824 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 92


 3825 00f0 0BE0     		b	.L256
 3826              	.L255:
1265:..\src/interruptions.c ****             else {
1266:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3827              		.loc 1 1266 0
 3828 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3829 00f4 6A4A     		ldr	r2, .L339+16
 3830 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3831 00fa 6B4A     		ldr	r2, .L339+24
 3832 00fc 9342     		cmp	r3, r2
 3833 00fe 04DA     		bge	.L256
1267:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3834              		.loc 1 1267 0
 3835 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3836 0102 674A     		ldr	r2, .L339+16
 3837 0104 6849     		ldr	r1, .L339+24
 3838 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 3839              	.L256:
1268:..\src/interruptions.c ****             }
1269:..\src/interruptions.c ****             
1270:..\src/interruptions.c ****             // ------ position PID control ------
1271:..\src/interruptions.c **** 
1272:..\src/interruptions.c ****             i_ref = 0;
 3840              		.loc 1 1272 0
 3841 010a 0023     		movs	r3, #0
 3842 010c BB64     		str	r3, [r7, #72]
1273:..\src/interruptions.c ****             
1274:..\src/interruptions.c ****             // Proportional
1275:..\src/interruptions.c ****             if (k_p_dl != 0)
 3843              		.loc 1 1275 0
 3844 010e 7B6A     		ldr	r3, [r7, #36]
 3845 0110 002B     		cmp	r3, #0
 3846 0112 07D0     		beq	.L257
1276:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3847              		.loc 1 1276 0
 3848 0114 7B6A     		ldr	r3, [r7, #36]
 3849 0116 FA68     		ldr	r2, [r7, #12]
 3850 0118 02FB03F3 		mul	r3, r2, r3
 3851 011c 1B14     		asrs	r3, r3, #16
 3852 011e BA6C     		ldr	r2, [r7, #72]
 3853 0120 1344     		add	r3, r3, r2
 3854 0122 BB64     		str	r3, [r7, #72]
 3855              	.L257:
1277:..\src/interruptions.c **** 
1278:..\src/interruptions.c ****             // Integral
1279:..\src/interruptions.c ****             if (k_i_dl != 0)
 3856              		.loc 1 1279 0
 3857 0124 3B6A     		ldr	r3, [r7, #32]
 3858 0126 002B     		cmp	r3, #0
 3859 0128 0AD0     		beq	.L258
1280:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3860              		.loc 1 1280 0
 3861 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3862 012c 5C4A     		ldr	r2, .L339+16
 3863 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3864 0132 3A6A     		ldr	r2, [r7, #32]
 3865 0134 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 93


 3866 0138 1B14     		asrs	r3, r3, #16
 3867 013a BA6C     		ldr	r2, [r7, #72]
 3868 013c 1344     		add	r3, r3, r2
 3869 013e BB64     		str	r3, [r7, #72]
 3870              	.L258:
1281:..\src/interruptions.c **** 
1282:..\src/interruptions.c ****             // Derivative
1283:..\src/interruptions.c ****             if (k_d_dl != 0)
 3871              		.loc 1 1283 0
 3872 0140 FB69     		ldr	r3, [r7, #28]
 3873 0142 002B     		cmp	r3, #0
 3874 0144 0CD0     		beq	.L259
1284:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3875              		.loc 1 1284 0
 3876 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3877 0148 584A     		ldr	r2, .L339+28
 3878 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3879 014e FA68     		ldr	r2, [r7, #12]
 3880 0150 D31A     		subs	r3, r2, r3
 3881 0152 FA69     		ldr	r2, [r7, #28]
 3882 0154 02FB03F3 		mul	r3, r2, r3
 3883 0158 1B14     		asrs	r3, r3, #16
 3884 015a BA6C     		ldr	r2, [r7, #72]
 3885 015c 1344     		add	r3, r3, r2
 3886 015e BB64     		str	r3, [r7, #72]
 3887              	.L259:
1285:..\src/interruptions.c ****                         
1286:..\src/interruptions.c ****             // Update previous position
1287:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3888              		.loc 1 1287 0
 3889 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3890 0162 5249     		ldr	r1, .L339+28
 3891 0164 FA68     		ldr	r2, [r7, #12]
 3892 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1288:..\src/interruptions.c **** 
1289:..\src/interruptions.c ****             // motor direction depends on i_ref
1290:..\src/interruptions.c ****             if (i_ref >= 0)
 3893              		.loc 1 1290 0
 3894 016a BB6C     		ldr	r3, [r7, #72]
 3895 016c 002B     		cmp	r3, #0
 3896 016e 04DB     		blt	.L260
1291:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3897              		.loc 1 1291 0
 3898 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3899 0172 4F4A     		ldr	r2, .L339+32
 3900 0174 0121     		movs	r1, #1
 3901 0176 D154     		strb	r1, [r2, r3]
 3902 0178 03E0     		b	.L261
 3903              	.L260:
1292:..\src/interruptions.c ****             else
1293:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3904              		.loc 1 1293 0
 3905 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3906 017c 4C4A     		ldr	r2, .L339+32
 3907 017e 0021     		movs	r1, #0
 3908 0180 D154     		strb	r1, [r2, r3]
 3909              	.L261:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 94


1294:..\src/interruptions.c **** 
1295:..\src/interruptions.c ****             // saturate max current
1296:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3910              		.loc 1 1296 0
 3911 0182 7B6C     		ldr	r3, [r7, #68]
 3912 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3913 0188 1A46     		mov	r2, r3
 3914 018a BB6C     		ldr	r3, [r7, #72]
 3915 018c 9A42     		cmp	r2, r3
 3916 018e 04DA     		bge	.L262
1297:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3917              		.loc 1 1297 0
 3918 0190 7B6C     		ldr	r3, [r7, #68]
 3919 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3920 0196 BB64     		str	r3, [r7, #72]
 3921 0198 0BE0     		b	.L263
 3922              	.L262:
1298:..\src/interruptions.c ****             else {
1299:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3923              		.loc 1 1299 0
 3924 019a 7B6C     		ldr	r3, [r7, #68]
 3925 019c B3F95C30 		ldrsh	r3, [r3, #92]
 3926 01a0 5A42     		negs	r2, r3
 3927 01a2 BB6C     		ldr	r3, [r7, #72]
 3928 01a4 9A42     		cmp	r2, r3
 3929 01a6 04DD     		ble	.L263
1300:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3930              		.loc 1 1300 0
 3931 01a8 7B6C     		ldr	r3, [r7, #68]
 3932 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 3933 01ae 5B42     		negs	r3, r3
 3934 01b0 BB64     		str	r3, [r7, #72]
 3935              	.L263:
1301:..\src/interruptions.c ****         	}
1302:..\src/interruptions.c **** 
1303:..\src/interruptions.c ****             // current error and curr error sum
1304:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3936              		.loc 1 1304 0
 3937 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3938 01b6 394A     		ldr	r2, .L339+12
 3939 01b8 3421     		movs	r1, #52
 3940 01ba 01FB03F3 		mul	r3, r1, r3
 3941 01be 1344     		add	r3, r3, r2
 3942 01c0 0C33     		adds	r3, r3, #12
 3943 01c2 1B68     		ldr	r3, [r3]
 3944 01c4 BA6C     		ldr	r2, [r7, #72]
 3945 01c6 D31A     		subs	r3, r2, r3
 3946 01c8 BB60     		str	r3, [r7, #8]
1305:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3947              		.loc 1 1305 0
 3948 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3949 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3950 01ce 3949     		ldr	r1, .L339+36
 3951 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3952 01d4 BA68     		ldr	r2, [r7, #8]
 3953 01d6 0A44     		add	r2, r2, r1
 3954 01d8 3649     		ldr	r1, .L339+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 95


 3955 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1306:..\src/interruptions.c ****             
1307:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3956              		.loc 1 1307 0
 3957 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3958 01e0 344A     		ldr	r2, .L339+36
 3959 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3960 01e6 344A     		ldr	r2, .L339+40
 3961 01e8 9342     		cmp	r3, r2
 3962 01ea 05DD     		ble	.L264
1308:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3963              		.loc 1 1308 0
 3964 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3965 01ee 314A     		ldr	r2, .L339+36
 3966 01f0 3149     		ldr	r1, .L339+40
 3967 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 3968 01f6 0BE0     		b	.L265
 3969              	.L264:
1309:..\src/interruptions.c ****             else {
1310:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3970              		.loc 1 1310 0
 3971 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3972 01fa 2E4A     		ldr	r2, .L339+36
 3973 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3974 0200 2E4A     		ldr	r2, .L339+44
 3975 0202 9342     		cmp	r3, r2
 3976 0204 04DA     		bge	.L265
1311:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3977              		.loc 1 1311 0
 3978 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3979 0208 2A4A     		ldr	r2, .L339+36
 3980 020a 2C49     		ldr	r1, .L339+44
 3981 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 3982              	.L265:
1312:..\src/interruptions.c ****             }
1313:..\src/interruptions.c **** 
1314:..\src/interruptions.c ****             // ----- current PID control -----
1315:..\src/interruptions.c **** 
1316:..\src/interruptions.c ****             pwm_input = 0;
 3983              		.loc 1 1316 0
 3984 0210 0023     		movs	r3, #0
 3985 0212 FB64     		str	r3, [r7, #76]
1317:..\src/interruptions.c **** 
1318:..\src/interruptions.c ****             // Proportional
1319:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3986              		.loc 1 1319 0
 3987 0214 BB69     		ldr	r3, [r7, #24]
 3988 0216 002B     		cmp	r3, #0
 3989 0218 07D0     		beq	.L266
1320:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3990              		.loc 1 1320 0
 3991 021a BB69     		ldr	r3, [r7, #24]
 3992 021c BA68     		ldr	r2, [r7, #8]
 3993 021e 02FB03F3 		mul	r3, r2, r3
 3994 0222 1B14     		asrs	r3, r3, #16
 3995 0224 FA6C     		ldr	r2, [r7, #76]
 3996 0226 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 96


 3997 0228 FB64     		str	r3, [r7, #76]
 3998              	.L266:
1321:..\src/interruptions.c **** 
1322:..\src/interruptions.c ****             // Integral
1323:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3999              		.loc 1 1323 0
 4000 022a 7B69     		ldr	r3, [r7, #20]
 4001 022c 002B     		cmp	r3, #0
 4002 022e 0AD0     		beq	.L267
1324:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4003              		.loc 1 1324 0
 4004 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4005 0232 204A     		ldr	r2, .L339+36
 4006 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4007 0238 7A69     		ldr	r2, [r7, #20]
 4008 023a 02FB03F3 		mul	r3, r2, r3
 4009 023e 1B14     		asrs	r3, r3, #16
 4010 0240 FA6C     		ldr	r2, [r7, #76]
 4011 0242 1344     		add	r3, r3, r2
 4012 0244 FB64     		str	r3, [r7, #76]
 4013              	.L267:
1325:..\src/interruptions.c **** 
1326:..\src/interruptions.c ****             // Derivative
1327:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4014              		.loc 1 1327 0
 4015 0246 3B69     		ldr	r3, [r7, #16]
 4016 0248 002B     		cmp	r3, #0
 4017 024a 0CD0     		beq	.L268
1328:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4018              		.loc 1 1328 0
 4019 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4020 024e 1C4A     		ldr	r2, .L339+48
 4021 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4022 0254 BA68     		ldr	r2, [r7, #8]
 4023 0256 D31A     		subs	r3, r2, r3
 4024 0258 3A69     		ldr	r2, [r7, #16]
 4025 025a 02FB03F3 		mul	r3, r2, r3
 4026 025e 1B14     		asrs	r3, r3, #16
 4027 0260 FA6C     		ldr	r2, [r7, #76]
 4028 0262 1344     		add	r3, r3, r2
 4029 0264 FB64     		str	r3, [r7, #76]
 4030              	.L268:
1329:..\src/interruptions.c ****              
1330:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1331:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4031              		.loc 1 1331 0
 4032 0266 7B6C     		ldr	r3, [r7, #68]
 4033 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4034 026c 022B     		cmp	r3, #2
 4035 026e 2BD1     		bne	.L269
1332:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4036              		.loc 1 1332 0
 4037 0270 FB6C     		ldr	r3, [r7, #76]
 4038 0272 40F6A932 		movw	r2, #2985
 4039 0276 9342     		cmp	r3, r2
 4040 0278 02DD     		ble	.L270
1333:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 97


 4041              		.loc 1 1333 0
 4042 027a 40F6A933 		movw	r3, #2985
 4043 027e FB64     		str	r3, [r7, #76]
 4044              	.L270:
1334:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4045              		.loc 1 1334 0
 4046 0280 FB6C     		ldr	r3, [r7, #76]
 4047 0282 104A     		ldr	r2, .L339+52
 4048 0284 9342     		cmp	r3, r2
 4049 0286 2BDA     		bge	.L272
1335:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4050              		.loc 1 1335 0
 4051 0288 0E4B     		ldr	r3, .L339+52
 4052 028a FB64     		str	r3, [r7, #76]
 4053 028c 28E0     		b	.L272
 4054              	.L340:
 4055 028e 00BF     		.align	2
 4056              	.L339:
 4057 0290 00000000 		.word	c_mem
 4058 0294 00000000 		.word	g_ref
 4059 0298 00000000 		.word	g_refOld
 4060 029c 00000000 		.word	g_meas
 4061 02a0 AC000000 		.word	pos_error_sum.10358
 4062 02a4 80F0FA02 		.word	50000000
 4063 02a8 800F05FD 		.word	-50000000
 4064 02ac B4000000 		.word	prev_pos_err.10360
 4065 02b0 BC000000 		.word	motor_dir.10363
 4066 02b4 C0000000 		.word	curr_error_sum.10359
 4067 02b8 A0860100 		.word	100000
 4068 02bc 6079FEFF 		.word	-100000
 4069 02c0 C8000000 		.word	prev_curr_err.10361
 4070 02c4 57F4FFFF 		.word	-2985
 4071              	.L269:
1336:..\src/interruptions.c ****             }
1337:..\src/interruptions.c ****             else {
1338:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4072              		.loc 1 1338 0
 4073 02c8 FB6C     		ldr	r3, [r7, #76]
 4074 02ca 642B     		cmp	r3, #100
 4075 02cc 01DD     		ble	.L273
1339:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4076              		.loc 1 1339 0
 4077 02ce 6423     		movs	r3, #100
 4078 02d0 FB64     		str	r3, [r7, #76]
 4079              	.L273:
1340:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4080              		.loc 1 1340 0
 4081 02d2 FB6C     		ldr	r3, [r7, #76]
 4082 02d4 13F1640F 		cmn	r3, #100
 4083 02d8 02DA     		bge	.L272
1341:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4084              		.loc 1 1341 0
 4085 02da 6FF06303 		mvn	r3, #99
 4086 02de FB64     		str	r3, [r7, #76]
 4087              	.L272:
1342:..\src/interruptions.c ****             }
1343:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 98


1344:..\src/interruptions.c ****             // Update previous current
1345:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4088              		.loc 1 1345 0
 4089 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4090 02e2 A049     		ldr	r1, .L341
 4091 02e4 BA68     		ldr	r2, [r7, #8]
 4092 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1346:..\src/interruptions.c **** 
1347:..\src/interruptions.c ****         break;
 4093              		.loc 1 1347 0
 4094 02ea 54E1     		b	.L249
 4095              	.L250:
1348:..\src/interruptions.c **** 
1349:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1350:..\src/interruptions.c ****         case CONTROL_ANGLE:
1351:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4096              		.loc 1 1351 0
 4097 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4098 02ee 9E4A     		ldr	r2, .L341+4
 4099 02f0 1B01     		lsls	r3, r3, #4
 4100 02f2 1344     		add	r3, r3, r2
 4101 02f4 1A68     		ldr	r2, [r3]
 4102 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4103 02fa 9C49     		ldr	r1, .L341+8
 4104 02fc 3420     		movs	r0, #52
 4105 02fe 00FB03F3 		mul	r3, r0, r3
 4106 0302 0B44     		add	r3, r3, r1
 4107 0304 1B68     		ldr	r3, [r3]
 4108 0306 D31A     		subs	r3, r2, r3
 4109 0308 FB60     		str	r3, [r7, #12]
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4110              		.loc 1 1353 0
 4111 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4112 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4113 030e 9849     		ldr	r1, .L341+12
 4114 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4115 0314 FA68     		ldr	r2, [r7, #12]
 4116 0316 0A44     		add	r2, r2, r1
 4117 0318 9549     		ldr	r1, .L341+12
 4118 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1354:..\src/interruptions.c **** 
1355:..\src/interruptions.c ****             // anti-windup (for integral control)
1356:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4119              		.loc 1 1356 0
 4120 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4121 0320 934A     		ldr	r2, .L341+12
 4122 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4123 0326 B3F57A7F 		cmp	r3, #1000
 4124 032a 06DD     		ble	.L274
1357:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4125              		.loc 1 1357 0
 4126 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4127 032e 904A     		ldr	r2, .L341+12
 4128 0330 4FF47A71 		mov	r1, #1000
 4129 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4130 0338 0BE0     		b	.L275
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 99


 4131              	.L274:
1358:..\src/interruptions.c ****             else {
1359:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4132              		.loc 1 1359 0
 4133 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4134 033c 8C4A     		ldr	r2, .L341+12
 4135 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4136 0342 13F57A7F 		cmn	r3, #1000
 4137 0346 04DA     		bge	.L275
1360:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4138              		.loc 1 1360 0
 4139 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4140 034a 894A     		ldr	r2, .L341+12
 4141 034c 8949     		ldr	r1, .L341+16
 4142 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4143              	.L275:
1361:..\src/interruptions.c ****             }
1362:..\src/interruptions.c **** 
1363:..\src/interruptions.c ****             // Proportional
1364:..\src/interruptions.c ****             if (k_p != 0) 
 4144              		.loc 1 1364 0
 4145 0352 FB6B     		ldr	r3, [r7, #60]
 4146 0354 002B     		cmp	r3, #0
 4147 0356 05D0     		beq	.L276
1365:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4148              		.loc 1 1365 0
 4149 0358 FB6B     		ldr	r3, [r7, #60]
 4150 035a FA68     		ldr	r2, [r7, #12]
 4151 035c 02FB03F3 		mul	r3, r2, r3
 4152 0360 1B14     		asrs	r3, r3, #16
 4153 0362 FB64     		str	r3, [r7, #76]
 4154              	.L276:
1366:..\src/interruptions.c ****             
1367:..\src/interruptions.c **** 
1368:..\src/interruptions.c ****             // Integral
1369:..\src/interruptions.c ****             if (k_i != 0) 
 4155              		.loc 1 1369 0
 4156 0364 BB6B     		ldr	r3, [r7, #56]
 4157 0366 002B     		cmp	r3, #0
 4158 0368 0AD0     		beq	.L277
1370:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4159              		.loc 1 1370 0
 4160 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4161 036c 804A     		ldr	r2, .L341+12
 4162 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4163 0372 BA6B     		ldr	r2, [r7, #56]
 4164 0374 02FB03F3 		mul	r3, r2, r3
 4165 0378 1B14     		asrs	r3, r3, #16
 4166 037a FA6C     		ldr	r2, [r7, #76]
 4167 037c 1344     		add	r3, r3, r2
 4168 037e FB64     		str	r3, [r7, #76]
 4169              	.L277:
1371:..\src/interruptions.c ****             
1372:..\src/interruptions.c **** 
1373:..\src/interruptions.c ****             // Derivative
1374:..\src/interruptions.c ****             if (k_d != 0) 
 4170              		.loc 1 1374 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 100


 4171 0380 7B6B     		ldr	r3, [r7, #52]
 4172 0382 002B     		cmp	r3, #0
 4173 0384 0CD0     		beq	.L278
1375:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4174              		.loc 1 1375 0
 4175 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4176 0388 7B4A     		ldr	r2, .L341+20
 4177 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4178 038e FA68     		ldr	r2, [r7, #12]
 4179 0390 D31A     		subs	r3, r2, r3
 4180 0392 7A6B     		ldr	r2, [r7, #52]
 4181 0394 02FB03F3 		mul	r3, r2, r3
 4182 0398 1B14     		asrs	r3, r3, #16
 4183 039a FA6C     		ldr	r2, [r7, #76]
 4184 039c 1344     		add	r3, r3, r2
 4185 039e FB64     		str	r3, [r7, #76]
 4186              	.L278:
1376:..\src/interruptions.c ****             
1377:..\src/interruptions.c **** 
1378:..\src/interruptions.c ****             // Update measure
1379:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4187              		.loc 1 1379 0
 4188 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4189 03a2 7549     		ldr	r1, .L341+20
 4190 03a4 FA68     		ldr	r2, [r7, #12]
 4191 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1380:..\src/interruptions.c **** 
1381:..\src/interruptions.c ****             if (pwm_input > 0)
 4192              		.loc 1 1381 0
 4193 03aa FB6C     		ldr	r3, [r7, #76]
 4194 03ac 002B     		cmp	r3, #0
 4195 03ae 04DD     		ble	.L279
1382:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4196              		.loc 1 1382 0
 4197 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4198 03b2 724A     		ldr	r2, .L341+24
 4199 03b4 0121     		movs	r1, #1
 4200 03b6 D154     		strb	r1, [r2, r3]
1383:..\src/interruptions.c ****             else
1384:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1385:..\src/interruptions.c **** 
1386:..\src/interruptions.c ****         break;
 4201              		.loc 1 1386 0
 4202 03b8 EDE0     		b	.L249
 4203              	.L279:
1384:..\src/interruptions.c **** 
 4204              		.loc 1 1384 0
 4205 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4206 03bc 6F4A     		ldr	r2, .L341+24
 4207 03be 0021     		movs	r1, #0
 4208 03c0 D154     		strb	r1, [r2, r3]
 4209              		.loc 1 1386 0
 4210 03c2 E8E0     		b	.L249
 4211              	.L253:
1387:..\src/interruptions.c **** 
1388:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1389:..\src/interruptions.c ****         case CONTROL_CURRENT:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 101


1390:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4212              		.loc 1 1390 0
 4213 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4214 03c6 684A     		ldr	r2, .L341+4
 4215 03c8 1B01     		lsls	r3, r3, #4
 4216 03ca 1344     		add	r3, r3, r2
 4217 03cc 0C33     		adds	r3, r3, #12
 4218 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4219 03d0 002B     		cmp	r3, #0
 4220 03d2 00F0C480 		beq	.L336
 4221              		.loc 1 1390 0 is_stmt 0 discriminator 1
 4222 03d6 6A4B     		ldr	r3, .L341+28
 4223 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4224 03da 002B     		cmp	r3, #0
 4225 03dc 00F0BF80 		beq	.L336
1391:..\src/interruptions.c ****                 
1392:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4226              		.loc 1 1392 0 is_stmt 1
 4227 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4228 03e2 614A     		ldr	r2, .L341+4
 4229 03e4 1B01     		lsls	r3, r3, #4
 4230 03e6 1344     		add	r3, r3, r2
 4231 03e8 0433     		adds	r3, r3, #4
 4232 03ea 1B68     		ldr	r3, [r3]
 4233 03ec BB64     		str	r3, [r7, #72]
1393:..\src/interruptions.c **** 
1394:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4234              		.loc 1 1394 0
 4235 03ee 7B6C     		ldr	r3, [r7, #68]
 4236 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4237 03f4 1A46     		mov	r2, r3
 4238 03f6 BB6C     		ldr	r3, [r7, #72]
 4239 03f8 9A42     		cmp	r2, r3
 4240 03fa 04DA     		bge	.L282
1395:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4241              		.loc 1 1395 0
 4242 03fc 7B6C     		ldr	r3, [r7, #68]
 4243 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4244 0402 BB64     		str	r3, [r7, #72]
 4245 0404 0BE0     		b	.L283
 4246              	.L282:
1396:..\src/interruptions.c ****                 else {
1397:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4247              		.loc 1 1397 0
 4248 0406 7B6C     		ldr	r3, [r7, #68]
 4249 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4250 040c 5A42     		negs	r2, r3
 4251 040e BB6C     		ldr	r3, [r7, #72]
 4252 0410 9A42     		cmp	r2, r3
 4253 0412 04DD     		ble	.L283
1398:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4254              		.loc 1 1398 0
 4255 0414 7B6C     		ldr	r3, [r7, #68]
 4256 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4257 041a 5B42     		negs	r3, r3
 4258 041c BB64     		str	r3, [r7, #72]
 4259              	.L283:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 102


1399:..\src/interruptions.c ****                 }
1400:..\src/interruptions.c ****                 
1401:..\src/interruptions.c ****                 // current error
1402:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4260              		.loc 1 1402 0
 4261 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4262 0422 524A     		ldr	r2, .L341+8
 4263 0424 3421     		movs	r1, #52
 4264 0426 01FB03F3 		mul	r3, r1, r3
 4265 042a 1344     		add	r3, r3, r2
 4266 042c 0C33     		adds	r3, r3, #12
 4267 042e 1B68     		ldr	r3, [r3]
 4268 0430 BA6C     		ldr	r2, [r7, #72]
 4269 0432 D31A     		subs	r3, r2, r3
 4270 0434 BB60     		str	r3, [r7, #8]
1403:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4271              		.loc 1 1403 0
 4272 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4273 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4274 043a 5249     		ldr	r1, .L341+32
 4275 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4276 0440 BA68     		ldr	r2, [r7, #8]
 4277 0442 0A44     		add	r2, r2, r1
 4278 0444 4F49     		ldr	r1, .L341+32
 4279 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1404:..\src/interruptions.c ****                 
1405:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4280              		.loc 1 1405 0
 4281 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4282 044c 4D4A     		ldr	r2, .L341+32
 4283 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4284 0452 4D4A     		ldr	r2, .L341+36
 4285 0454 9342     		cmp	r3, r2
 4286 0456 05DD     		ble	.L284
1406:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4287              		.loc 1 1406 0
 4288 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4289 045a 4A4A     		ldr	r2, .L341+32
 4290 045c 4A49     		ldr	r1, .L341+36
 4291 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4292 0462 0BE0     		b	.L285
 4293              	.L284:
1407:..\src/interruptions.c ****                 else {
1408:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4294              		.loc 1 1408 0
 4295 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4296 0466 474A     		ldr	r2, .L341+32
 4297 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4298 046c 474A     		ldr	r2, .L341+40
 4299 046e 9342     		cmp	r3, r2
 4300 0470 04DA     		bge	.L285
1409:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4301              		.loc 1 1409 0
 4302 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4303 0474 434A     		ldr	r2, .L341+32
 4304 0476 4549     		ldr	r1, .L341+40
 4305 0478 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 103


 4306              	.L285:
1410:..\src/interruptions.c ****                 }
1411:..\src/interruptions.c **** 
1412:..\src/interruptions.c ****                 pwm_input = 0;
 4307              		.loc 1 1412 0
 4308 047c 0023     		movs	r3, #0
 4309 047e FB64     		str	r3, [r7, #76]
1413:..\src/interruptions.c **** 
1414:..\src/interruptions.c ****                 // Proportional
1415:..\src/interruptions.c ****                 if (k_p_c != 0)
 4310              		.loc 1 1415 0
 4311 0480 3B6B     		ldr	r3, [r7, #48]
 4312 0482 002B     		cmp	r3, #0
 4313 0484 07D0     		beq	.L286
1416:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4314              		.loc 1 1416 0
 4315 0486 3B6B     		ldr	r3, [r7, #48]
 4316 0488 BA68     		ldr	r2, [r7, #8]
 4317 048a 02FB03F3 		mul	r3, r2, r3
 4318 048e 1B14     		asrs	r3, r3, #16
 4319 0490 FA6C     		ldr	r2, [r7, #76]
 4320 0492 1344     		add	r3, r3, r2
 4321 0494 FB64     		str	r3, [r7, #76]
 4322              	.L286:
1417:..\src/interruptions.c **** 
1418:..\src/interruptions.c ****                 // Integral
1419:..\src/interruptions.c ****                 if (k_i_c != 0)
 4323              		.loc 1 1419 0
 4324 0496 FB6A     		ldr	r3, [r7, #44]
 4325 0498 002B     		cmp	r3, #0
 4326 049a 0AD0     		beq	.L287
1420:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4327              		.loc 1 1420 0
 4328 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4329 049e 394A     		ldr	r2, .L341+32
 4330 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4331 04a4 FA6A     		ldr	r2, [r7, #44]
 4332 04a6 02FB03F3 		mul	r3, r2, r3
 4333 04aa 1B14     		asrs	r3, r3, #16
 4334 04ac FA6C     		ldr	r2, [r7, #76]
 4335 04ae 1344     		add	r3, r3, r2
 4336 04b0 FB64     		str	r3, [r7, #76]
 4337              	.L287:
1421:..\src/interruptions.c **** 
1422:..\src/interruptions.c ****                 // Derivative
1423:..\src/interruptions.c ****                 if (k_d_c != 0)
 4338              		.loc 1 1423 0
 4339 04b2 BB6A     		ldr	r3, [r7, #40]
 4340 04b4 002B     		cmp	r3, #0
 4341 04b6 0CD0     		beq	.L288
1424:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4342              		.loc 1 1424 0
 4343 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4344 04ba 2A4A     		ldr	r2, .L341
 4345 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4346 04c0 BA68     		ldr	r2, [r7, #8]
 4347 04c2 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 104


 4348 04c4 BA6A     		ldr	r2, [r7, #40]
 4349 04c6 02FB03F3 		mul	r3, r2, r3
 4350 04ca 1B14     		asrs	r3, r3, #16
 4351 04cc FA6C     		ldr	r2, [r7, #76]
 4352 04ce 1344     		add	r3, r3, r2
 4353 04d0 FB64     		str	r3, [r7, #76]
 4354              	.L288:
1425:..\src/interruptions.c ****                 
1426:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4355              		.loc 1 1426 0
 4356 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4357 04d4 2349     		ldr	r1, .L341
 4358 04d6 BA68     		ldr	r2, [r7, #8]
 4359 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1427:..\src/interruptions.c ****                 
1428:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4360              		.loc 1 1428 0
 4361 04dc FB6C     		ldr	r3, [r7, #76]
 4362 04de 002B     		cmp	r3, #0
 4363 04e0 04DB     		blt	.L289
1429:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4364              		.loc 1 1429 0
 4365 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4366 04e4 254A     		ldr	r2, .L341+24
 4367 04e6 0121     		movs	r1, #1
 4368 04e8 D154     		strb	r1, [r2, r3]
1430:..\src/interruptions.c ****                 else
1431:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1432:..\src/interruptions.c ****             }
1433:..\src/interruptions.c ****         break;
 4369              		.loc 1 1433 0
 4370 04ea 38E0     		b	.L336
 4371              	.L289:
1431:..\src/interruptions.c ****             }
 4372              		.loc 1 1431 0
 4373 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4374 04ee 234A     		ldr	r2, .L341+24
 4375 04f0 0021     		movs	r1, #0
 4376 04f2 D154     		strb	r1, [r2, r3]
 4377              		.loc 1 1433 0
 4378 04f4 33E0     		b	.L336
 4379              	.L252:
1434:..\src/interruptions.c ****         
1435:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1436:..\src/interruptions.c ****         case CONTROL_PWM:
1437:..\src/interruptions.c **** 
1438:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4380              		.loc 1 1438 0
 4381 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4382 04f8 1B4A     		ldr	r2, .L341+4
 4383 04fa 1B01     		lsls	r3, r3, #4
 4384 04fc 1344     		add	r3, r3, r2
 4385 04fe 0833     		adds	r3, r3, #8
 4386 0500 1B68     		ldr	r3, [r3]
 4387 0502 FB64     		str	r3, [r7, #76]
1439:..\src/interruptions.c **** 
1440:..\src/interruptions.c ****             if (pwm_input > 0) 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 105


 4388              		.loc 1 1440 0
 4389 0504 FB6C     		ldr	r3, [r7, #76]
 4390 0506 002B     		cmp	r3, #0
 4391 0508 04DD     		ble	.L290
1441:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4392              		.loc 1 1441 0
 4393 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4394 050c 1B4A     		ldr	r2, .L341+24
 4395 050e 0121     		movs	r1, #1
 4396 0510 D154     		strb	r1, [r2, r3]
 4397 0512 03E0     		b	.L291
 4398              	.L290:
1442:..\src/interruptions.c ****             else 
1443:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4399              		.loc 1 1443 0
 4400 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4401 0516 194A     		ldr	r2, .L341+24
 4402 0518 0021     		movs	r1, #0
 4403 051a D154     		strb	r1, [r2, r3]
 4404              	.L291:
1444:..\src/interruptions.c ****             
1445:..\src/interruptions.c ****           
1446:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1447:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4405              		.loc 1 1447 0
 4406 051c 7B6C     		ldr	r3, [r7, #68]
 4407 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4408 0522 022B     		cmp	r3, #2
 4409 0524 0ED1     		bne	.L292
1448:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4410              		.loc 1 1448 0
 4411 0526 FB6C     		ldr	r3, [r7, #76]
 4412 0528 40F6A932 		movw	r2, #2985
 4413 052c 9342     		cmp	r3, r2
 4414 052e 02DD     		ble	.L293
1449:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4415              		.loc 1 1449 0
 4416 0530 40F6A933 		movw	r3, #2985
 4417 0534 FB64     		str	r3, [r7, #76]
 4418              	.L293:
1450:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4419              		.loc 1 1450 0
 4420 0536 FB6C     		ldr	r3, [r7, #76]
 4421 0538 154A     		ldr	r2, .L341+44
 4422 053a 9342     		cmp	r3, r2
 4423 053c 2ADA     		bge	.L337
1451:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4424              		.loc 1 1451 0
 4425 053e 144B     		ldr	r3, .L341+44
 4426 0540 FB64     		str	r3, [r7, #76]
1452:..\src/interruptions.c ****             }
1453:..\src/interruptions.c ****             else {
1454:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1455:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1456:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1457:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1458:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 106


1459:..\src/interruptions.c **** 
1460:..\src/interruptions.c ****         break;
 4427              		.loc 1 1460 0
 4428 0542 27E0     		b	.L337
 4429              	.L292:
1454:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4430              		.loc 1 1454 0
 4431 0544 FB6C     		ldr	r3, [r7, #76]
 4432 0546 642B     		cmp	r3, #100
 4433 0548 01DD     		ble	.L296
1455:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4434              		.loc 1 1455 0
 4435 054a 6423     		movs	r3, #100
 4436 054c FB64     		str	r3, [r7, #76]
 4437              	.L296:
1456:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4438              		.loc 1 1456 0
 4439 054e FB6C     		ldr	r3, [r7, #76]
 4440 0550 13F1640F 		cmn	r3, #100
 4441 0554 1EDA     		bge	.L337
1457:..\src/interruptions.c ****             }
 4442              		.loc 1 1457 0
 4443 0556 6FF06303 		mvn	r3, #99
 4444 055a FB64     		str	r3, [r7, #76]
 4445              		.loc 1 1460 0
 4446 055c 1AE0     		b	.L337
 4447              	.L336:
1433:..\src/interruptions.c ****         
 4448              		.loc 1 1433 0
 4449 055e 00BF     		nop
 4450 0560 19E0     		b	.L249
 4451              	.L342:
 4452 0562 00BF     		.align	2
 4453              	.L341:
 4454 0564 C8000000 		.word	prev_curr_err.10361
 4455 0568 00000000 		.word	g_ref
 4456 056c 00000000 		.word	g_meas
 4457 0570 AC000000 		.word	pos_error_sum.10358
 4458 0574 18FCFFFF 		.word	-1000
 4459 0578 B4000000 		.word	prev_pos_err.10360
 4460 057c BC000000 		.word	motor_dir.10363
 4461 0580 00000000 		.word	tension_valid
 4462 0584 C0000000 		.word	curr_error_sum.10359
 4463 0588 A0860100 		.word	100000
 4464 058c 6079FEFF 		.word	-100000
 4465 0590 57F4FFFF 		.word	-2985
 4466              	.L337:
 4467              		.loc 1 1460 0
 4468 0594 00BF     		nop
 4469              	.L249:
1461:..\src/interruptions.c ****             
1462:..\src/interruptions.c ****     }
1463:..\src/interruptions.c **** 
1464:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1465:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1466:..\src/interruptions.c **** 
1467:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 107


1468:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4470              		.loc 1 1468 0
 4471 0596 7B6C     		ldr	r3, [r7, #68]
 4472 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4473 059c 022B     		cmp	r3, #2
 4474 059e 23D1     		bne	.L297
1469:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4475              		.loc 1 1469 0
 4476 05a0 FB6C     		ldr	r3, [r7, #76]
 4477 05a2 40F6A932 		movw	r2, #2985
 4478 05a6 9342     		cmp	r3, r2
 4479 05a8 02DD     		ble	.L298
1470:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4480              		.loc 1 1470 0
 4481 05aa 40F6A933 		movw	r3, #2985
 4482 05ae FB64     		str	r3, [r7, #76]
 4483              	.L298:
1471:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4484              		.loc 1 1471 0
 4485 05b0 FB6C     		ldr	r3, [r7, #76]
 4486 05b2 B34A     		ldr	r2, .L343
 4487 05b4 9342     		cmp	r3, r2
 4488 05b6 01DA     		bge	.L299
1472:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4489              		.loc 1 1472 0
 4490 05b8 B14B     		ldr	r3, .L343
 4491 05ba FB64     		str	r3, [r7, #76]
 4492              	.L299:
1473:..\src/interruptions.c ****         
1474:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4493              		.loc 1 1474 0
 4494 05bc 7B6C     		ldr	r3, [r7, #68]
 4495 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4496 05c2 012B     		cmp	r3, #1
 4497 05c4 31D0     		beq	.L301
1475:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4498              		.loc 1 1475 0
 4499 05c6 FB6C     		ldr	r3, [r7, #76]
 4500 05c8 9B02     		lsls	r3, r3, #10
 4501 05ca AE4A     		ldr	r2, .L343+4
 4502 05cc 82FB0312 		smull	r1, r2, r2, r3
 4503 05d0 9211     		asrs	r2, r2, #6
 4504 05d2 DB17     		asrs	r3, r3, #31
 4505 05d4 D31A     		subs	r3, r2, r3
 4506 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4507 05d8 AB49     		ldr	r1, .L343+8
 4508 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4509 05de 02FB03F3 		mul	r3, r2, r3
 4510 05e2 9B12     		asrs	r3, r3, #10
 4511 05e4 FB64     		str	r3, [r7, #76]
 4512 05e6 20E0     		b	.L301
 4513              	.L297:
1476:..\src/interruptions.c ****     }
1477:..\src/interruptions.c ****     else {
1478:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4514              		.loc 1 1478 0
 4515 05e8 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 108


 4516 05ea 642B     		cmp	r3, #100
 4517 05ec 01DD     		ble	.L302
1479:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4518              		.loc 1 1479 0
 4519 05ee 6423     		movs	r3, #100
 4520 05f0 FB64     		str	r3, [r7, #76]
 4521              	.L302:
1480:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4522              		.loc 1 1480 0
 4523 05f2 FB6C     		ldr	r3, [r7, #76]
 4524 05f4 13F1640F 		cmn	r3, #100
 4525 05f8 02DA     		bge	.L303
1481:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4526              		.loc 1 1481 0
 4527 05fa 6FF06303 		mvn	r3, #99
 4528 05fe FB64     		str	r3, [r7, #76]
 4529              	.L303:
1482:..\src/interruptions.c ****         
1483:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4530              		.loc 1 1483 0
 4531 0600 7B6C     		ldr	r3, [r7, #68]
 4532 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4533 0606 012B     		cmp	r3, #1
 4534 0608 0FD0     		beq	.L301
1484:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4535              		.loc 1 1484 0
 4536 060a FB6C     		ldr	r3, [r7, #76]
 4537 060c 9B02     		lsls	r3, r3, #10
 4538 060e 9F4A     		ldr	r2, .L343+12
 4539 0610 82FB0312 		smull	r1, r2, r2, r3
 4540 0614 5211     		asrs	r2, r2, #5
 4541 0616 DB17     		asrs	r3, r3, #31
 4542 0618 D31A     		subs	r3, r2, r3
 4543 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4544 061c 9A49     		ldr	r1, .L343+8
 4545 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4546 0622 02FB03F3 		mul	r3, r2, r3
 4547 0626 9B12     		asrs	r3, r3, #10
 4548 0628 FB64     		str	r3, [r7, #76]
 4549              	.L301:
1485:..\src/interruptions.c ****     }
1486:..\src/interruptions.c **** 
1487:..\src/interruptions.c ****     //// RATE LIMITER ////
1488:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4550              		.loc 1 1488 0
 4551 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4552 062c 984A     		ldr	r2, .L343+16
 4553 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4554 0632 FA6C     		ldr	r2, [r7, #76]
 4555 0634 D31A     		subs	r3, r2, r3
 4556 0636 7A6C     		ldr	r2, [r7, #68]
 4557 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4558 063c 9342     		cmp	r3, r2
 4559 063e 09DD     		ble	.L304
1489:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4560              		.loc 1 1489 0
 4561 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 109


 4562 0642 934A     		ldr	r2, .L343+16
 4563 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4564 0648 7A6C     		ldr	r2, [r7, #68]
 4565 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4566 064e 1344     		add	r3, r3, r2
 4567 0650 FB64     		str	r3, [r7, #76]
 4568 0652 14E0     		b	.L305
 4569              	.L304:
1490:..\src/interruptions.c ****     }
1491:..\src/interruptions.c ****     else {
1492:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4570              		.loc 1 1492 0
 4571 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4572 0656 8E4A     		ldr	r2, .L343+16
 4573 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4574 065c FA6C     		ldr	r2, [r7, #76]
 4575 065e D21A     		subs	r2, r2, r3
 4576 0660 7B6C     		ldr	r3, [r7, #68]
 4577 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4578 0666 5B42     		negs	r3, r3
 4579 0668 9A42     		cmp	r2, r3
 4580 066a 08DA     		bge	.L305
1493:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4581              		.loc 1 1493 0
 4582 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4583 066e 884A     		ldr	r2, .L343+16
 4584 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4585 0674 7A6C     		ldr	r2, [r7, #68]
 4586 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4587 067a 9B1A     		subs	r3, r3, r2
 4588 067c FB64     		str	r3, [r7, #76]
 4589              	.L305:
1494:..\src/interruptions.c ****     }
1495:..\src/interruptions.c ****    
1496:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1497:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4590              		.loc 1 1497 0
 4591 067e 7B6C     		ldr	r3, [r7, #68]
 4592 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4593 0684 022B     		cmp	r3, #2
 4594 0686 0ED1     		bne	.L306
1498:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4595              		.loc 1 1498 0
 4596 0688 FB6C     		ldr	r3, [r7, #76]
 4597 068a 40F6A932 		movw	r2, #2985
 4598 068e 9342     		cmp	r3, r2
 4599 0690 02DD     		ble	.L307
1499:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4600              		.loc 1 1499 0
 4601 0692 40F6A933 		movw	r3, #2985
 4602 0696 FB64     		str	r3, [r7, #76]
 4603              	.L307:
1500:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4604              		.loc 1 1500 0
 4605 0698 FB6C     		ldr	r3, [r7, #76]
 4606 069a 794A     		ldr	r2, .L343
 4607 069c 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 110


 4608 069e 0EDA     		bge	.L309
1501:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4609              		.loc 1 1501 0
 4610 06a0 774B     		ldr	r3, .L343
 4611 06a2 FB64     		str	r3, [r7, #76]
 4612 06a4 0BE0     		b	.L309
 4613              	.L306:
1502:..\src/interruptions.c ****     }
1503:..\src/interruptions.c ****     else {
1504:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4614              		.loc 1 1504 0
 4615 06a6 FB6C     		ldr	r3, [r7, #76]
 4616 06a8 642B     		cmp	r3, #100
 4617 06aa 01DD     		ble	.L310
1505:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4618              		.loc 1 1505 0
 4619 06ac 6423     		movs	r3, #100
 4620 06ae FB64     		str	r3, [r7, #76]
 4621              	.L310:
1506:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4622              		.loc 1 1506 0
 4623 06b0 FB6C     		ldr	r3, [r7, #76]
 4624 06b2 13F1640F 		cmn	r3, #100
 4625 06b6 02DA     		bge	.L309
1507:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4626              		.loc 1 1507 0
 4627 06b8 6FF06303 		mvn	r3, #99
 4628 06bc FB64     		str	r3, [r7, #76]
 4629              	.L309:
1508:..\src/interruptions.c ****     }
1509:..\src/interruptions.c **** 
1510:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4630              		.loc 1 1510 0
 4631 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4632 06c0 7349     		ldr	r1, .L343+16
 4633 06c2 FA6C     		ldr	r2, [r7, #76]
 4634 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1511:..\src/interruptions.c ****            
1512:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 4635              		.loc 1 1512 0
 4636 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4637 06ca FA6C     		ldr	r2, [r7, #76]
 4638 06cc 002A     		cmp	r2, #0
 4639 06ce 01DB     		blt	.L311
 4640              		.loc 1 1512 0 is_stmt 0 discriminator 1
 4641 06d0 0121     		movs	r1, #1
 4642 06d2 01E0     		b	.L312
 4643              	.L311:
 4644              		.loc 1 1512 0 discriminator 2
 4645 06d4 4FF0FF31 		mov	r1, #-1
 4646              	.L312:
 4647              		.loc 1 1512 0 discriminator 4
 4648 06d8 6E4A     		ldr	r2, .L343+20
 4649 06da D154     		strb	r1, [r2, r3]
1513:..\src/interruptions.c ****     
1514:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4650              		.loc 1 1514 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 111


 4651 06dc 7B6C     		ldr	r3, [r7, #68]
 4652 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4653 06e2 012B     		cmp	r3, #1
 4654 06e4 40F0AA80 		bne	.L313
1515:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1516:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4655              		.loc 1 1516 0
 4656 06e8 7B6C     		ldr	r3, [r7, #68]
 4657 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4658 06ee 012B     		cmp	r3, #1
 4659 06f0 00F09F80 		beq	.L314
 4660              		.loc 1 1516 0 is_stmt 0 discriminator 1
 4661 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4662 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4663 06fa 6748     		ldr	r0, .L343+24
 4664 06fc 1346     		mov	r3, r2
 4665 06fe 5B00     		lsls	r3, r3, #1
 4666 0700 1344     		add	r3, r3, r2
 4667 0702 9B00     		lsls	r3, r3, #2
 4668 0704 1344     		add	r3, r3, r2
 4669 0706 0B44     		add	r3, r3, r1
 4670 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4671 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4672 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4673 0712 624C     		ldr	r4, .L343+28
 4674 0714 1346     		mov	r3, r2
 4675 0716 5B00     		lsls	r3, r3, #1
 4676 0718 1344     		add	r3, r3, r2
 4677 071a 9B00     		lsls	r3, r3, #2
 4678 071c 1344     		add	r3, r3, r2
 4679 071e 0344     		add	r3, r3, r0
 4680 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4681 0724 CB1A     		subs	r3, r1, r3
 4682 0726 312B     		cmp	r3, #49
 4683 0728 00F38380 		bgt	.L314
1517:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4684              		.loc 1 1517 0 is_stmt 1 discriminator 2
 4685 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4686 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4687 0732 5948     		ldr	r0, .L343+24
 4688 0734 1346     		mov	r3, r2
 4689 0736 5B00     		lsls	r3, r3, #1
 4690 0738 1344     		add	r3, r3, r2
 4691 073a 9B00     		lsls	r3, r3, #2
 4692 073c 1344     		add	r3, r3, r2
 4693 073e 0B44     		add	r3, r3, r1
 4694 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4695 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4696 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4697 074a 544C     		ldr	r4, .L343+28
 4698 074c 1346     		mov	r3, r2
 4699 074e 5B00     		lsls	r3, r3, #1
 4700 0750 1344     		add	r3, r3, r2
 4701 0752 9B00     		lsls	r3, r3, #2
 4702 0754 1344     		add	r3, r3, r2
 4703 0756 0344     		add	r3, r3, r0
 4704 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 112


 4705 075c CB1A     		subs	r3, r1, r3
1516:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4706              		.loc 1 1516 0 discriminator 2
 4707 075e 13F1310F 		cmn	r3, #49
 4708 0762 66DB     		blt	.L314
1518:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4709              		.loc 1 1518 0
 4710 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4711 0766 4E4A     		ldr	r2, .L343+32
 4712 0768 1B01     		lsls	r3, r3, #4
 4713 076a 1344     		add	r3, r3, r2
 4714 076c 1A68     		ldr	r2, [r3]
 4715 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4716 0770 4C49     		ldr	r1, .L343+36
 4717 0772 1B01     		lsls	r3, r3, #4
 4718 0774 0B44     		add	r3, r3, r1
 4719 0776 1B68     		ldr	r3, [r3]
 4720 0778 D31A     		subs	r3, r2, r3
1517:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4721              		.loc 1 1517 0
 4722 077a 632B     		cmp	r3, #99
 4723 077c 59DC     		bgt	.L314
 4724              		.loc 1 1518 0
 4725 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4726 0780 474A     		ldr	r2, .L343+32
 4727 0782 1B01     		lsls	r3, r3, #4
 4728 0784 1344     		add	r3, r3, r2
 4729 0786 1A68     		ldr	r2, [r3]
 4730 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4731 078a 4649     		ldr	r1, .L343+36
 4732 078c 1B01     		lsls	r3, r3, #4
 4733 078e 0B44     		add	r3, r3, r1
 4734 0790 1B68     		ldr	r3, [r3]
 4735 0792 D31A     		subs	r3, r2, r3
 4736 0794 13F1630F 		cmn	r3, #99
 4737 0798 4BDB     		blt	.L314
1519:..\src/interruptions.c ****             position_counter[idx]++;
 4738              		.loc 1 1519 0
 4739 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4740 079c 424A     		ldr	r2, .L343+40
 4741 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4742 07a2 0132     		adds	r2, r2, #1
 4743 07a4 4049     		ldr	r1, .L343+40
 4744 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1520:..\src/interruptions.c ****             
1521:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4745              		.loc 1 1521 0
 4746 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4747 07ac 3E4A     		ldr	r2, .L343+40
 4748 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4749 07b2 F92B     		cmp	r3, #249
 4750 07b4 42D9     		bls	.L313
1522:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4751              		.loc 1 1522 0
 4752 07b6 7B6C     		ldr	r3, [r7, #68]
 4753 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4754 07bc 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 113


 4755 07be 10D1     		bne	.L316
 4756              		.loc 1 1522 0 is_stmt 0 discriminator 1
 4757 07c0 3A4B     		ldr	r3, .L343+44
 4758 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4759 07c4 002B     		cmp	r3, #0
 4760 07c6 0CD1     		bne	.L316
1523:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4761              		.loc 1 1523 0 is_stmt 1
 4762 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4763 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4764 07ce 3349     		ldr	r1, .L343+28
 4765 07d0 3420     		movs	r0, #52
 4766 07d2 00FB02F2 		mul	r2, r0, r2
 4767 07d6 0A44     		add	r2, r2, r1
 4768 07d8 1268     		ldr	r2, [r2]
 4769 07da 3549     		ldr	r1, .L343+48
 4770 07dc 1B01     		lsls	r3, r3, #4
 4771 07de 0B44     		add	r3, r3, r1
 4772 07e0 1A60     		str	r2, [r3]
 4773              	.L316:
1524:..\src/interruptions.c ****                 }
1525:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4774              		.loc 1 1525 0
 4775 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4776 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4777 07e8 2C49     		ldr	r1, .L343+28
 4778 07ea 3420     		movs	r0, #52
 4779 07ec 00FB02F2 		mul	r2, r0, r2
 4780 07f0 0A44     		add	r2, r2, r1
 4781 07f2 1268     		ldr	r2, [r2]
 4782 07f4 2B49     		ldr	r1, .L343+36
 4783 07f6 1B01     		lsls	r3, r3, #4
 4784 07f8 0B44     		add	r3, r3, r1
 4785 07fa 1A60     		str	r2, [r3]
1526:..\src/interruptions.c ****                 
1527:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4786              		.loc 1 1527 0
 4787 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4788 07fe 2A4A     		ldr	r2, .L343+40
 4789 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4790 0804 FA2B     		cmp	r3, #250
 4791 0806 11D1     		bne	.L317
1528:..\src/interruptions.c ****                     // To do only once
1529:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4792              		.loc 1 1529 0
 4793 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4794 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4795 0810 2249     		ldr	r1, .L343+28
 4796 0812 3420     		movs	r0, #52
 4797 0814 00FB02F2 		mul	r2, r0, r2
 4798 0818 0A44     		add	r2, r2, r1
 4799 081a 0C32     		adds	r2, r2, #12
 4800 081c 1268     		ldr	r2, [r2]
 4801 081e 1F49     		ldr	r1, .L343+28
 4802 0820 3420     		movs	r0, #52
 4803 0822 00FB03F3 		mul	r3, r0, r3
 4804 0826 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 114


 4805 0828 1433     		adds	r3, r3, #20
 4806 082a 1A60     		str	r2, [r3]
 4807              	.L317:
1530:..\src/interruptions.c ****                 }
1531:..\src/interruptions.c ****                 pwm_input = 0;            
 4808              		.loc 1 1531 0
 4809 082c 0023     		movs	r3, #0
 4810 082e FB64     		str	r3, [r7, #76]
1521:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4811              		.loc 1 1521 0
 4812 0830 04E0     		b	.L313
 4813              	.L314:
1532:..\src/interruptions.c ****             }
1533:..\src/interruptions.c ****         }
1534:..\src/interruptions.c ****         else {
1535:..\src/interruptions.c ****             position_counter[idx] = 0;
 4814              		.loc 1 1535 0
 4815 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4816 0834 1C4A     		ldr	r2, .L343+40
 4817 0836 0021     		movs	r1, #0
 4818 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 4819              	.L313:
1536:..\src/interruptions.c ****         }
1537:..\src/interruptions.c ****     }
1538:..\src/interruptions.c ****     
1539:..\src/interruptions.c ****     
1540:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1541:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 4820              		.loc 1 1541 0
 4821 083c 7B6C     		ldr	r3, [r7, #68]
 4822 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4823 0842 022B     		cmp	r3, #2
 4824 0844 3BD1     		bne	.L318
1542:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1543:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 4825              		.loc 1 1543 0
 4826 0846 FB6C     		ldr	r3, [r7, #76]
 4827 0848 002B     		cmp	r3, #0
 4828 084a B8BF     		it	lt
 4829 084c 5B42     		rsblt	r3, r3, #0
 4830 084e 40F68C22 		movw	r2, #2700
 4831 0852 9342     		cmp	r3, r2
 4832 0854 07DD     		ble	.L319
1544:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 4833              		.loc 1 1544 0
 4834 0856 FB6C     		ldr	r3, [r7, #76]
 4835 0858 002B     		cmp	r3, #0
 4836 085a 02DB     		blt	.L320
 4837              		.loc 1 1544 0 is_stmt 0 discriminator 1
 4838 085c 40F68C23 		movw	r3, #2700
 4839 0860 00E0     		b	.L321
 4840              	.L320:
 4841              		.loc 1 1544 0 discriminator 2
 4842 0862 144B     		ldr	r3, .L343+52
 4843              	.L321:
 4844              		.loc 1 1544 0 discriminator 4
 4845 0864 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 115


 4846              	.L319:
1545:..\src/interruptions.c ****         }
1546:..\src/interruptions.c ****         
1547:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 4847              		.loc 1 1547 0 is_stmt 1
 4848 0866 FB6C     		ldr	r3, [r7, #76]
 4849 0868 13F1C70F 		cmn	r3, #199
 4850 086c 27DB     		blt	.L318
 4851              		.loc 1 1547 0 is_stmt 0 discriminator 1
 4852 086e FB6C     		ldr	r3, [r7, #76]
 4853 0870 C72B     		cmp	r3, #199
 4854 0872 24DC     		bgt	.L318
1548:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 4855              		.loc 1 1548 0 is_stmt 1
 4856 0874 FB6C     		ldr	r3, [r7, #76]
 4857 0876 002B     		cmp	r3, #0
 4858 0878 1EDB     		blt	.L322
 4859              		.loc 1 1548 0 is_stmt 0 discriminator 1
 4860 087a C823     		movs	r3, #200
 4861 087c 1EE0     		b	.L323
 4862              	.L344:
 4863 087e 00BF     		.align	2
 4864              	.L343:
 4865 0880 57F4FFFF 		.word	-2985
 4866 0884 81207D05 		.word	92086401
 4867 0888 00000000 		.word	dev_pwm_limit
 4868 088c 1F85EB51 		.word	1374389535
 4869 0890 D0000000 		.word	prev_pwm.10362
 4870 0894 00000000 		.word	pwm_sign
 4871 0898 00000000 		.word	g_measOld
 4872 089c 00000000 		.word	g_meas
 4873 08a0 00000000 		.word	g_refOld
 4874 08a4 00000000 		.word	g_ref
 4875 08a8 D8000000 		.word	position_counter.10364
 4876 08ac 00000000 		.word	change_ext_ref_flag
 4877 08b0 00000000 		.word	g_refNew
 4878 08b4 74F5FFFF 		.word	-2700
 4879              	.L322:
 4880              		.loc 1 1548 0 discriminator 2
 4881 08b8 6FF0C703 		mvn	r3, #199
 4882              	.L323:
 4883              		.loc 1 1548 0 discriminator 4
 4884 08bc FB64     		str	r3, [r7, #76]
 4885              	.L318:
1549:..\src/interruptions.c ****         }
1550:..\src/interruptions.c ****        
1551:..\src/interruptions.c ****     }
1552:..\src/interruptions.c ****     
1553:..\src/interruptions.c ****     // Set motor direction and write pwm value
1554:..\src/interruptions.c ****     switch (idx) {
 4886              		.loc 1 1554 0 is_stmt 1
 4887 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4888 08c0 002B     		cmp	r3, #0
 4889 08c2 02D0     		beq	.L325
 4890 08c4 012B     		cmp	r3, #1
 4891 08c6 26D0     		beq	.L326
1555:..\src/interruptions.c ****         case 0:         // Motor 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 116


1556:..\src/interruptions.c ****             if (motor_dir[idx])
1557:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1558:..\src/interruptions.c ****             else
1559:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1560:..\src/interruptions.c ****             
1561:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1562:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1563:..\src/interruptions.c ****             }
1564:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1565:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1566:..\src/interruptions.c ****             }
1567:..\src/interruptions.c ****             
1568:..\src/interruptions.c ****             break;
1569:..\src/interruptions.c ****         case 1:         // Motor 2
1570:..\src/interruptions.c ****             
1571:..\src/interruptions.c ****             if (motor_dir[idx])
1572:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1573:..\src/interruptions.c ****             else
1574:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1575:..\src/interruptions.c ****             
1576:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1577:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1578:..\src/interruptions.c ****             }
1579:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1580:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1581:..\src/interruptions.c ****             }
1582:..\src/interruptions.c ****             
1583:..\src/interruptions.c ****             break;
1584:..\src/interruptions.c ****         default:
1585:..\src/interruptions.c ****             break;
 4892              		.loc 1 1585 0
 4893 08c8 4BE0     		b	.L331
 4894              	.L325:
1556:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4895              		.loc 1 1556 0
 4896 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4897 08cc 274A     		ldr	r2, .L345
 4898 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4899 08d0 002B     		cmp	r3, #0
 4900 08d2 03D0     		beq	.L327
1557:..\src/interruptions.c ****             else
 4901              		.loc 1 1557 0
 4902 08d4 0120     		movs	r0, #1
 4903 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4904 08da 02E0     		b	.L328
 4905              	.L327:
1559:..\src/interruptions.c ****             
 4906              		.loc 1 1559 0
 4907 08dc 0020     		movs	r0, #0
 4908 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4909              	.L328:
1561:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 4910              		.loc 1 1561 0
 4911 08e2 7B6C     		ldr	r3, [r7, #68]
 4912 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4913 08e8 012B     		cmp	r3, #1
 4914 08ea 0BD1     		bne	.L329
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 117


1562:..\src/interruptions.c ****             }
 4915              		.loc 1 1562 0
 4916 08ec FB6C     		ldr	r3, [r7, #76]
 4917 08ee 002B     		cmp	r3, #0
 4918 08f0 B8BF     		it	lt
 4919 08f2 5B42     		rsblt	r3, r3, #0
 4920 08f4 DBB2     		uxtb	r3, r3
 4921 08f6 C3F16403 		rsb	r3, r3, #100
 4922 08fa DBB2     		uxtb	r3, r3
 4923 08fc 1846     		mov	r0, r3
 4924 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1568:..\src/interruptions.c ****         case 1:         // Motor 2
 4925              		.loc 1 1568 0
 4926 0902 2EE0     		b	.L331
 4927              	.L329:
1565:..\src/interruptions.c ****             }
 4928              		.loc 1 1565 0
 4929 0904 FB6C     		ldr	r3, [r7, #76]
 4930 0906 002B     		cmp	r3, #0
 4931 0908 B8BF     		it	lt
 4932 090a 5B42     		rsblt	r3, r3, #0
 4933 090c DBB2     		uxtb	r3, r3
 4934 090e 1846     		mov	r0, r3
 4935 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1568:..\src/interruptions.c ****         case 1:         // Motor 2
 4936              		.loc 1 1568 0
 4937 0914 25E0     		b	.L331
 4938              	.L326:
1571:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4939              		.loc 1 1571 0
 4940 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4941 0918 144A     		ldr	r2, .L345
 4942 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4943 091c 002B     		cmp	r3, #0
 4944 091e 03D0     		beq	.L332
1572:..\src/interruptions.c ****             else
 4945              		.loc 1 1572 0
 4946 0920 0120     		movs	r0, #1
 4947 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4948 0926 02E0     		b	.L333
 4949              	.L332:
1574:..\src/interruptions.c ****             
 4950              		.loc 1 1574 0
 4951 0928 0020     		movs	r0, #0
 4952 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4953              	.L333:
1576:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 4954              		.loc 1 1576 0
 4955 092e 7B6C     		ldr	r3, [r7, #68]
 4956 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4957 0934 012B     		cmp	r3, #1
 4958 0936 0BD1     		bne	.L334
1577:..\src/interruptions.c ****             }
 4959              		.loc 1 1577 0
 4960 0938 FB6C     		ldr	r3, [r7, #76]
 4961 093a 002B     		cmp	r3, #0
 4962 093c B8BF     		it	lt
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 118


 4963 093e 5B42     		rsblt	r3, r3, #0
 4964 0940 DBB2     		uxtb	r3, r3
 4965 0942 C3F16403 		rsb	r3, r3, #100
 4966 0946 DBB2     		uxtb	r3, r3
 4967 0948 1846     		mov	r0, r3
 4968 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1583:..\src/interruptions.c ****         default:
 4969              		.loc 1 1583 0
 4970 094e 07E0     		b	.L338
 4971              	.L334:
1580:..\src/interruptions.c ****             }
 4972              		.loc 1 1580 0
 4973 0950 FB6C     		ldr	r3, [r7, #76]
 4974 0952 002B     		cmp	r3, #0
 4975 0954 B8BF     		it	lt
 4976 0956 5B42     		rsblt	r3, r3, #0
 4977 0958 DBB2     		uxtb	r3, r3
 4978 095a 1846     		mov	r0, r3
 4979 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4980              	.L338:
1583:..\src/interruptions.c ****         default:
 4981              		.loc 1 1583 0
 4982 0960 00BF     		nop
 4983              	.L331:
1586:..\src/interruptions.c ****     }
1587:..\src/interruptions.c ****     
1588:..\src/interruptions.c **** }
 4984              		.loc 1 1588 0
 4985 0962 00BF     		nop
 4986 0964 5437     		adds	r7, r7, #84
 4987              		.cfi_def_cfa_offset 12
 4988 0966 BD46     		mov	sp, r7
 4989              		.cfi_def_cfa_register 13
 4990              		@ sp needed
 4991 0968 90BD     		pop	{r4, r7, pc}
 4992              	.L346:
 4993 096a 00BF     		.align	2
 4994              	.L345:
 4995 096c BC000000 		.word	motor_dir.10363
 4996              		.cfi_endproc
 4997              	.LFE72:
 4998              		.size	motor_control_generic, .-motor_control_generic
 4999              		.section	.text.vibrotactile_control_generic,"ax",%progbits
 5000              		.align	2
 5001              		.global	vibrotactile_control_generic
 5002              		.thumb
 5003              		.thumb_func
 5004              		.type	vibrotactile_control_generic, %function
 5005              	vibrotactile_control_generic:
 5006              	.LFB73:
1589:..\src/interruptions.c **** 
1590:..\src/interruptions.c **** //==============================================================================
1591:..\src/interruptions.c **** //                                                  VIBROTACTILE CONTROL GENERIC
1592:..\src/interruptions.c **** //==============================================================================
1593:..\src/interruptions.c **** void vibrotactile_control_generic(uint8 idx) {
 5007              		.loc 1 1593 0
 5008              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 119


 5009              		@ args = 0, pretend = 0, frame = 16
 5010              		@ frame_needed = 1, uses_anonymous_args = 0
 5011 0000 80B5     		push	{r7, lr}
 5012              		.cfi_def_cfa_offset 8
 5013              		.cfi_offset 7, -8
 5014              		.cfi_offset 14, -4
 5015 0002 84B0     		sub	sp, sp, #16
 5016              		.cfi_def_cfa_offset 24
 5017 0004 00AF     		add	r7, sp, #0
 5018              		.cfi_def_cfa_register 7
 5019 0006 0346     		mov	r3, r0
 5020 0008 FB71     		strb	r3, [r7, #7]
1594:..\src/interruptions.c ****     uint8 i;
1595:..\src/interruptions.c ****     int16 CYDATA pwm_input = 0;
 5021              		.loc 1 1595 0
 5022 000a 0023     		movs	r3, #0
 5023 000c FB81     		strh	r3, [r7, #14]	@ movhi
1596:..\src/interruptions.c **** 
1597:..\src/interruptions.c ****     // Static Variables
1598:..\src/interruptions.c ****    
1599:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS]; 
1600:..\src/interruptions.c **** 
1601:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1602:..\src/interruptions.c **** 
1603:..\src/interruptions.c ****     pwm_input = g_ref_vibrotactile[idx].pwm;
 5024              		.loc 1 1603 0
 5025 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5026 0010 2F4A     		ldr	r2, .L362
 5027 0012 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 5028 0016 FB81     		strh	r3, [r7, #14]	@ movhi
1604:..\src/interruptions.c **** 
1605:..\src/interruptions.c ****     if (pwm_input > 0) 
 5029              		.loc 1 1605 0
 5030 0018 B7F90E30 		ldrsh	r3, [r7, #14]
 5031 001c 002B     		cmp	r3, #0
 5032 001e 04DD     		ble	.L348
1606:..\src/interruptions.c ****         motor_dir[idx] = TRUE;
 5033              		.loc 1 1606 0
 5034 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5035 0022 2C4A     		ldr	r2, .L362+4
 5036 0024 0121     		movs	r1, #1
 5037 0026 D154     		strb	r1, [r2, r3]
 5038 0028 03E0     		b	.L349
 5039              	.L348:
1607:..\src/interruptions.c ****     else 
1608:..\src/interruptions.c ****         motor_dir[idx] = FALSE;
 5040              		.loc 1 1608 0
 5041 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5042 002c 294A     		ldr	r2, .L362+4
 5043 002e 0021     		movs	r1, #0
 5044 0030 D154     		strb	r1, [r2, r3]
 5045              	.L349:
1609:..\src/interruptions.c ****         
1610:..\src/interruptions.c ****     if(pwm_input > PWM_MAX_VALUE_DC) 
 5046              		.loc 1 1610 0
 5047 0032 B7F90E30 		ldrsh	r3, [r7, #14]
 5048 0036 642B     		cmp	r3, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 120


 5049 0038 01DD     		ble	.L350
1611:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 5050              		.loc 1 1611 0
 5051 003a 6423     		movs	r3, #100
 5052 003c FB81     		strh	r3, [r7, #14]	@ movhi
 5053              	.L350:
1612:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 5054              		.loc 1 1612 0
 5055 003e B7F90E30 		ldrsh	r3, [r7, #14]
 5056 0042 13F1640F 		cmn	r3, #100
 5057 0046 02DA     		bge	.L351
1613:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 5058              		.loc 1 1613 0
 5059 0048 4FF69C73 		movw	r3, #65436
 5060 004c FB81     		strh	r3, [r7, #14]	@ movhi
 5061              	.L351:
1614:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5062              		.loc 1 1614 0
 5063 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5064 0050 B7F90E20 		ldrsh	r2, [r7, #14]
 5065 0054 002A     		cmp	r2, #0
 5066 0056 01DB     		blt	.L352
 5067              		.loc 1 1614 0 is_stmt 0 discriminator 1
 5068 0058 0121     		movs	r1, #1
 5069 005a 01E0     		b	.L353
 5070              	.L352:
 5071              		.loc 1 1614 0 discriminator 2
 5072 005c 4FF0FF31 		mov	r1, #-1
 5073              	.L353:
 5074              		.loc 1 1614 0 discriminator 4
 5075 0060 1D4A     		ldr	r2, .L362+8
 5076 0062 D154     		strb	r1, [r2, r3]
1615:..\src/interruptions.c ****  
1616:..\src/interruptions.c ****     // Set motor direction and write pwm value
1617:..\src/interruptions.c ****     switch (idx) {
 5077              		.loc 1 1617 0 is_stmt 1 discriminator 4
 5078 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5079 0066 002B     		cmp	r3, #0
 5080 0068 02D0     		beq	.L355
 5081 006a 012B     		cmp	r3, #1
 5082 006c 16D0     		beq	.L356
1618:..\src/interruptions.c ****         case 0:         // Motor 1
1619:..\src/interruptions.c ****         
1620:..\src/interruptions.c ****             if (motor_dir[idx])
1621:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
1622:..\src/interruptions.c ****             else
1623:..\src/interruptions.c ****                 VT1_DIR_Write(0x01);
1624:..\src/interruptions.c ****          
1625:..\src/interruptions.c ****                PWM_VT_WriteCompare1(abs(pwm_input));    
1626:..\src/interruptions.c ****             
1627:..\src/interruptions.c ****             break;
1628:..\src/interruptions.c ****         case 1:         // Motor 2
1629:..\src/interruptions.c ****             
1630:..\src/interruptions.c ****             if (motor_dir[idx])
1631:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
1632:..\src/interruptions.c ****             else
1633:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 121


1634:..\src/interruptions.c ****             
1635:..\src/interruptions.c ****             PWM_VT_WriteCompare2(abs(pwm_input));    
1636:..\src/interruptions.c ****         break;
1637:..\src/interruptions.c ****     }
1638:..\src/interruptions.c ****        
1639:..\src/interruptions.c ****     
1640:..\src/interruptions.c **** }
 5083              		.loc 1 1640 0 discriminator 4
 5084 006e 2BE0     		b	.L361
 5085              	.L355:
1620:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 5086              		.loc 1 1620 0
 5087 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5088 0072 184A     		ldr	r2, .L362+4
 5089 0074 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5090 0076 002B     		cmp	r3, #0
 5091 0078 03D0     		beq	.L357
1621:..\src/interruptions.c ****             else
 5092              		.loc 1 1621 0
 5093 007a 0020     		movs	r0, #0
 5094 007c FFF7FEFF 		bl	VT1_DIR_Write
 5095 0080 02E0     		b	.L358
 5096              	.L357:
1623:..\src/interruptions.c ****          
 5097              		.loc 1 1623 0
 5098 0082 0120     		movs	r0, #1
 5099 0084 FFF7FEFF 		bl	VT1_DIR_Write
 5100              	.L358:
1625:..\src/interruptions.c ****             
 5101              		.loc 1 1625 0
 5102 0088 B7F90E30 		ldrsh	r3, [r7, #14]
 5103 008c 002B     		cmp	r3, #0
 5104 008e B8BF     		it	lt
 5105 0090 5B42     		rsblt	r3, r3, #0
 5106 0092 9BB2     		uxth	r3, r3
 5107 0094 1846     		mov	r0, r3
 5108 0096 FFF7FEFF 		bl	PWM_VT_WriteCompare1
1627:..\src/interruptions.c ****         case 1:         // Motor 2
 5109              		.loc 1 1627 0
 5110 009a 15E0     		b	.L354
 5111              	.L356:
1630:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
 5112              		.loc 1 1630 0
 5113 009c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5114 009e 0D4A     		ldr	r2, .L362+4
 5115 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5116 00a2 002B     		cmp	r3, #0
 5117 00a4 03D0     		beq	.L359
1631:..\src/interruptions.c ****             else
 5118              		.loc 1 1631 0
 5119 00a6 0020     		movs	r0, #0
 5120 00a8 FFF7FEFF 		bl	VT2_DIR_Write
 5121 00ac 02E0     		b	.L360
 5122              	.L359:
1633:..\src/interruptions.c ****             
 5123              		.loc 1 1633 0
 5124 00ae 0120     		movs	r0, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 122


 5125 00b0 FFF7FEFF 		bl	VT2_DIR_Write
 5126              	.L360:
1635:..\src/interruptions.c ****         break;
 5127              		.loc 1 1635 0
 5128 00b4 B7F90E30 		ldrsh	r3, [r7, #14]
 5129 00b8 002B     		cmp	r3, #0
 5130 00ba B8BF     		it	lt
 5131 00bc 5B42     		rsblt	r3, r3, #0
 5132 00be 9BB2     		uxth	r3, r3
 5133 00c0 1846     		mov	r0, r3
 5134 00c2 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1636:..\src/interruptions.c ****     }
 5135              		.loc 1 1636 0
 5136 00c6 00BF     		nop
 5137              	.L354:
 5138              	.L361:
 5139              		.loc 1 1640 0
 5140 00c8 00BF     		nop
 5141 00ca 1037     		adds	r7, r7, #16
 5142              		.cfi_def_cfa_offset 8
 5143 00cc BD46     		mov	sp, r7
 5144              		.cfi_def_cfa_register 13
 5145              		@ sp needed
 5146 00ce 80BD     		pop	{r7, pc}
 5147              	.L363:
 5148              		.align	2
 5149              	.L362:
 5150 00d0 00000000 		.word	g_ref_vibrotactile
 5151 00d4 E0000000 		.word	motor_dir.10379
 5152 00d8 00000000 		.word	pwm_sign
 5153              		.cfi_endproc
 5154              	.LFE73:
 5155              		.size	vibrotactile_control_generic, .-vibrotactile_control_generic
 5156              		.global	__aeabi_fcmpeq
 5157              		.global	__aeabi_fmul
 5158              		.global	__aeabi_f2iz
 5159              		.global	__aeabi_fcmplt
 5160              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5161              		.align	2
 5162              		.global	encoder_reading_SPI
 5163              		.thumb
 5164              		.thumb_func
 5165              		.type	encoder_reading_SPI, %function
 5166              	encoder_reading_SPI:
 5167              	.LFB74:
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c **** //==============================================================================
1643:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1644:..\src/interruptions.c **** //==============================================================================
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5168              		.loc 1 1646 0
 5169              		.cfi_startproc
 5170              		@ args = 0, pretend = 0, frame = 48
 5171              		@ frame_needed = 1, uses_anonymous_args = 0
 5172 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5173              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 123


 5174              		.cfi_offset 4, -20
 5175              		.cfi_offset 5, -16
 5176              		.cfi_offset 6, -12
 5177              		.cfi_offset 7, -8
 5178              		.cfi_offset 14, -4
 5179 0002 8FB0     		sub	sp, sp, #60
 5180              		.cfi_def_cfa_offset 80
 5181 0004 02AF     		add	r7, sp, #8
 5182              		.cfi_def_cfa 7, 72
 5183 0006 0346     		mov	r3, r0
 5184 0008 0A46     		mov	r2, r1
 5185 000a FB71     		strb	r3, [r7, #7]
 5186 000c 1346     		mov	r3, r2
 5187 000e BB71     		strb	r3, [r7, #6]
1647:..\src/interruptions.c **** 
1648:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5188              		.loc 1 1648 0
 5189 0010 0023     		movs	r3, #0
 5190 0012 87F82F30 		strb	r3, [r7, #47]
1649:..\src/interruptions.c ****     
1650:..\src/interruptions.c ****     // Encoder Variables  
1651:..\src/interruptions.c ****     uint8 jj;
1652:..\src/interruptions.c ****      
1653:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1654:..\src/interruptions.c ****     int16 tmp_value_encoder;
1655:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1656:..\src/interruptions.c ****     int32 value_encoder;
1657:..\src/interruptions.c ****     int32 speed_encoder;
1658:..\src/interruptions.c ****     int32 value_diff;
1659:..\src/interruptions.c **** 	int8 init_rot = 0;
 5191              		.loc 1 1659 0
 5192 0016 0023     		movs	r3, #0
 5193 0018 87F82730 		strb	r3, [r7, #39]
1660:..\src/interruptions.c **** 
1661:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1662:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1663:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1664:..\src/interruptions.c ****     
1665:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1666:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1667:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1668:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1669:..\src/interruptions.c **** 
1670:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1671:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1672:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1673:..\src/interruptions.c ****     
1674:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5194              		.loc 1 1674 0
 5195 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5196 001e 8D4A     		ldr	r2, .L401
 5197 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5198 0022 002B     		cmp	r3, #0
 5199 0024 19D0     		beq	.L365
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5200              		.loc 1 1675 0
 5201 0026 0323     		movs	r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 124


 5202 0028 87F82E30 		strb	r3, [r7, #46]
 5203 002c 0AE0     		b	.L366
 5204              	.L367:
1676:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5205              		.loc 1 1676 0
 5206 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5207 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5208 0034 8848     		ldr	r0, .L401+4
 5209 0036 1346     		mov	r3, r2
 5210 0038 5B00     		lsls	r3, r3, #1
 5211 003a 1344     		add	r3, r3, r2
 5212 003c 0B44     		add	r3, r3, r1
 5213 003e 0022     		movs	r2, #0
 5214 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5215              	.L366:
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5216              		.loc 1 1675 0 discriminator 1
 5217 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5218 0048 5A1E     		subs	r2, r3, #1
 5219 004a 87F82E20 		strb	r2, [r7, #46]
 5220 004e 002B     		cmp	r3, #0
 5221 0050 EDD1     		bne	.L367
1677:..\src/interruptions.c ****         
1678:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5222              		.loc 1 1678 0
 5223 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5224 0054 7F4A     		ldr	r2, .L401
 5225 0056 0021     		movs	r1, #0
 5226 0058 D154     		strb	r1, [r2, r3]
 5227              	.L365:
1679:..\src/interruptions.c ****     }
1680:..\src/interruptions.c **** 
1681:..\src/interruptions.c ****     //======================================================     reading sensors
1682:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5228              		.loc 1 1682 0
 5229 005a 0023     		movs	r3, #0
 5230 005c 87F82F30 		strb	r3, [r7, #47]
 5231 0060 0DE0     		b	.L368
 5232              	.L369:
1683:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5233              		.loc 1 1683 0 discriminator 3
 5234 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5235 0066 9B00     		lsls	r3, r3, #2
 5236 0068 07F13002 		add	r2, r7, #48
 5237 006c 1344     		add	r3, r3, r2
 5238 006e 0022     		movs	r2, #0
 5239 0070 43F8282C 		str	r2, [r3, #-40]
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5240              		.loc 1 1682 0 discriminator 3
 5241 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5242 0078 0133     		adds	r3, r3, #1
 5243 007a 87F82F30 		strb	r3, [r7, #47]
 5244              	.L368:
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5245              		.loc 1 1682 0 is_stmt 0 discriminator 1
 5246 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5247 0082 022B     		cmp	r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 125


 5248 0084 EDD9     		bls	.L369
 5249              	.LBB9:
1684:..\src/interruptions.c ****     }   
1685:..\src/interruptions.c ****     
1686:..\src/interruptions.c ****     
1687:..\src/interruptions.c ****                                                                         //CS1 for left hand
1688:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5250              		.loc 1 1688 0 is_stmt 1
 5251 0086 0023     		movs	r3, #0
 5252 0088 3B62     		str	r3, [r7, #32]
 5253 008a 2EE0     		b	.L370
 5254              	.L372:
1689:..\src/interruptions.c ****         
1690:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1691:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5255              		.loc 1 1691 0
 5256 008c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5257 008e 7349     		ldr	r1, .L401+8
 5258 0090 1346     		mov	r3, r2
 5259 0092 5B00     		lsls	r3, r3, #1
 5260 0094 1344     		add	r3, r3, r2
 5261 0096 1B01     		lsls	r3, r3, #4
 5262 0098 CA18     		adds	r2, r1, r3
 5263 009a 3B6A     		ldr	r3, [r7, #32]
 5264 009c 1344     		add	r3, r3, r2
 5265 009e 03F2B113 		addw	r3, r3, #433
 5266 00a2 1B78     		ldrb	r3, [r3]
 5267 00a4 87F82F30 		strb	r3, [r7, #47]
1692:..\src/interruptions.c ****         
1693:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5268              		.loc 1 1693 0
 5269 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5270 00aa 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5271 00ae 6C48     		ldr	r0, .L401+12
 5272 00b0 1346     		mov	r3, r2
 5273 00b2 9B00     		lsls	r3, r3, #2
 5274 00b4 1344     		add	r3, r3, r2
 5275 00b6 0344     		add	r3, r3, r0
 5276 00b8 0B44     		add	r3, r3, r1
 5277 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5278 00bc 0F2B     		cmp	r3, #15
 5279 00be 11D9     		bls	.L371
1694:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5280              		.loc 1 1694 0
 5281 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5282 00c2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5283 00c6 6748     		ldr	r0, .L401+16
 5284 00c8 1346     		mov	r3, r2
 5285 00ca 9B00     		lsls	r3, r3, #2
 5286 00cc 1344     		add	r3, r3, r2
 5287 00ce 0B44     		add	r3, r3, r1
 5288 00d0 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5289 00d4 1A46     		mov	r2, r3
 5290 00d6 3B6A     		ldr	r3, [r7, #32]
 5291 00d8 9B00     		lsls	r3, r3, #2
 5292 00da 07F13001 		add	r1, r7, #48
 5293 00de 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 126


 5294 00e0 43F8282C 		str	r2, [r3, #-40]
 5295              	.L371:
1688:..\src/interruptions.c ****         
 5296              		.loc 1 1688 0 discriminator 2
 5297 00e4 3B6A     		ldr	r3, [r7, #32]
 5298 00e6 0133     		adds	r3, r3, #1
 5299 00e8 3B62     		str	r3, [r7, #32]
 5300              	.L370:
1688:..\src/interruptions.c ****         
 5301              		.loc 1 1688 0 is_stmt 0 discriminator 1
 5302 00ea 3B6A     		ldr	r3, [r7, #32]
 5303 00ec 022B     		cmp	r3, #2
 5304 00ee CDDD     		ble	.L372
 5305              	.LBE9:
1695:..\src/interruptions.c ****         }
1696:..\src/interruptions.c ****     }
1697:..\src/interruptions.c ****     
1698:..\src/interruptions.c ****     // S = SIGN BIT
1699:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1700:..\src/interruptions.c ****     // 0 = 0 BIT
1701:..\src/interruptions.c ****     // C = CONTROL BIT
1702:..\src/interruptions.c ****     
1703:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5306              		.loc 1 1703 0 is_stmt 1
 5307 00f0 0023     		movs	r3, #0
 5308 00f2 87F82F30 		strb	r3, [r7, #47]
 5309 00f6 32E3     		b	.L373
 5310              	.L394:
1704:..\src/interruptions.c ****         
1705:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5311              		.loc 1 1705 0
 5312 00f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5313 00fa 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5314 00fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5315 0102 9B00     		lsls	r3, r3, #2
 5316 0104 07F13001 		add	r1, r7, #48
 5317 0108 0B44     		add	r3, r3, r1
 5318 010a 53F8281C 		ldr	r1, [r3, #-40]
 5319 010e 564C     		ldr	r4, .L401+20
 5320 0110 1346     		mov	r3, r2
 5321 0112 9B00     		lsls	r3, r3, #2
 5322 0114 1344     		add	r3, r3, r2
 5323 0116 0344     		add	r3, r3, r0
 5324 0118 44F82310 		str	r1, [r4, r3, lsl #2]
1706:..\src/interruptions.c ****         
1707:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5325              		.loc 1 1707 0
 5326 011c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5327 0120 9B00     		lsls	r3, r3, #2
 5328 0122 07F13002 		add	r2, r7, #48
 5329 0126 1344     		add	r3, r3, r2
 5330 0128 53F8283C 		ldr	r3, [r3, #-40]
 5331 012c 99B2     		uxth	r1, r3
 5332 012e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5333 0130 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5334 0134 4D4C     		ldr	r4, .L401+24
 5335 0136 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 127


 5336 0138 5B00     		lsls	r3, r3, #1
 5337 013a 1344     		add	r3, r3, r2
 5338 013c 9B00     		lsls	r3, r3, #2
 5339 013e 0344     		add	r3, r3, r0
 5340 0140 6633     		adds	r3, r3, #102
 5341 0142 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5342 0146 9BB2     		uxth	r3, r3
 5343 0148 CB1A     		subs	r3, r1, r3
 5344 014a 9BB2     		uxth	r3, r3
 5345 014c BB85     		strh	r3, [r7, #44]	@ movhi
1708:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5346              		.loc 1 1708 0
 5347 014e B7F92C30 		ldrsh	r3, [r7, #44]
 5348 0152 002B     		cmp	r3, #0
 5349 0154 04DA     		bge	.L374
1709:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5350              		.loc 1 1709 0
 5351 0156 BB8D     		ldrh	r3, [r7, #44]
 5352 0158 03F58053 		add	r3, r3, #4096
 5353 015c 9BB2     		uxth	r3, r3
 5354 015e BB85     		strh	r3, [r7, #44]	@ movhi
 5355              	.L374:
1710:..\src/interruptions.c ****         }       // Range [0, 4096]
1711:..\src/interruptions.c **** 
1712:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5356              		.loc 1 1712 0
 5357 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5358 0164 B3F5006F 		cmp	r3, #2048
 5359 0168 04DB     		blt	.L375
1713:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5360              		.loc 1 1713 0
 5361 016a BB8D     		ldrh	r3, [r7, #44]
 5362 016c A3F58053 		sub	r3, r3, #4096
 5363 0170 9BB2     		uxth	r3, r3
 5364 0172 BB85     		strh	r3, [r7, #44]	@ movhi
 5365              	.L375:
1714:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1715:..\src/interruptions.c **** 
1716:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5366              		.loc 1 1716 0
 5367 0174 B7F92C30 		ldrsh	r3, [r7, #44]
 5368 0178 1B01     		lsls	r3, r3, #4
 5369 017a FB61     		str	r3, [r7, #28]
1717:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5370              		.loc 1 1717 0
 5371 017c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5372 017e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5373 0182 3B48     		ldr	r0, .L401+28
 5374 0184 1346     		mov	r3, r2
 5375 0186 5B00     		lsls	r3, r3, #1
 5376 0188 1344     		add	r3, r3, r2
 5377 018a 0B44     		add	r3, r3, r1
 5378 018c FA69     		ldr	r2, [r7, #28]
 5379 018e 40F82320 		str	r2, [r0, r3, lsl #2]
1718:..\src/interruptions.c **** 
1719:..\src/interruptions.c ****         // Initialize last_value_encoder
1720:..\src/interruptions.c ****         if (only_first_time[n_line]) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 128


 5380              		.loc 1 1720 0
 5381 0192 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5382 0194 374A     		ldr	r2, .L401+32
 5383 0196 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5384 0198 002B     		cmp	r3, #0
 5385 019a 12D0     		beq	.L376
1721:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5386              		.loc 1 1721 0
 5387 019c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5388 019e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5389 01a2 2D48     		ldr	r0, .L401+4
 5390 01a4 1346     		mov	r3, r2
 5391 01a6 5B00     		lsls	r3, r3, #1
 5392 01a8 1344     		add	r3, r3, r2
 5393 01aa 0B44     		add	r3, r3, r1
 5394 01ac FA69     		ldr	r2, [r7, #28]
 5395 01ae 40F82320 		str	r2, [r0, r3, lsl #2]
1722:..\src/interruptions.c ****             if (index == 2)
 5396              		.loc 1 1722 0
 5397 01b2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5398 01b6 022B     		cmp	r3, #2
 5399 01b8 03D1     		bne	.L376
1723:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5400              		.loc 1 1723 0
 5401 01ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5402 01bc 2D4A     		ldr	r2, .L401+32
 5403 01be 0021     		movs	r1, #0
 5404 01c0 D154     		strb	r1, [r2, r3]
 5405              	.L376:
1724:..\src/interruptions.c ****         }
1725:..\src/interruptions.c **** 
1726:..\src/interruptions.c ****         // Take care of rotations
1727:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5406              		.loc 1 1727 0
 5407 01c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5408 01c4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5409 01c8 2348     		ldr	r0, .L401+4
 5410 01ca 1346     		mov	r3, r2
 5411 01cc 5B00     		lsls	r3, r3, #1
 5412 01ce 1344     		add	r3, r3, r2
 5413 01d0 0B44     		add	r3, r3, r1
 5414 01d2 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5415 01d6 FA69     		ldr	r2, [r7, #28]
 5416 01d8 D31A     		subs	r3, r2, r3
 5417 01da BB61     		str	r3, [r7, #24]
1728:..\src/interruptions.c **** 
1729:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1730:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1731:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1732:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1733:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1734:..\src/interruptions.c ****         //                                               |           |
1735:..\src/interruptions.c ****         //                                           24575           -24576
1736:..\src/interruptions.c ****         //                                               |___________|
1737:..\src/interruptions.c ****         //                                                   49152
1738:..\src/interruptions.c **** 
1739:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 129


1740:..\src/interruptions.c ****         // and update the variable only if the difference between
1741:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1742:..\src/interruptions.c **** 
1743:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1744:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1745:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1746:..\src/interruptions.c **** 
1747:..\src/interruptions.c ****         if (value_diff > 49152)
 5418              		.loc 1 1747 0
 5419 01dc BB69     		ldr	r3, [r7, #24]
 5420 01de B3F5404F 		cmp	r3, #49152
 5421 01e2 19DD     		ble	.L377
1748:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5422              		.loc 1 1748 0
 5423 01e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5424 01e6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5425 01ea 2348     		ldr	r0, .L401+36
 5426 01ec 3421     		movs	r1, #52
 5427 01ee 01FB02F1 		mul	r1, r1, r2
 5428 01f2 0144     		add	r1, r1, r0
 5429 01f4 1944     		add	r1, r1, r3
 5430 01f6 1831     		adds	r1, r1, #24
 5431 01f8 91F90010 		ldrsb	r1, [r1]
 5432 01fc C9B2     		uxtb	r1, r1
 5433 01fe 0139     		subs	r1, r1, #1
 5434 0200 C9B2     		uxtb	r1, r1
 5435 0202 4CB2     		sxtb	r4, r1
 5436 0204 1C49     		ldr	r1, .L401+36
 5437 0206 3420     		movs	r0, #52
 5438 0208 00FB02F2 		mul	r2, r0, r2
 5439 020c 0A44     		add	r2, r2, r1
 5440 020e 1344     		add	r3, r3, r2
 5441 0210 1833     		adds	r3, r3, #24
 5442 0212 2246     		mov	r2, r4
 5443 0214 1A70     		strb	r2, [r3]
 5444 0216 59E0     		b	.L378
 5445              	.L377:
1749:..\src/interruptions.c ****         else{ 
1750:..\src/interruptions.c ****             if (value_diff < -49152)
 5446              		.loc 1 1750 0
 5447 0218 BB69     		ldr	r3, [r7, #24]
 5448 021a 13F5404F 		cmn	r3, #49152
 5449 021e 2DDA     		bge	.L379
1751:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5450              		.loc 1 1751 0
 5451 0220 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5452 0222 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5453 0226 1448     		ldr	r0, .L401+36
 5454 0228 3421     		movs	r1, #52
 5455 022a 01FB02F1 		mul	r1, r1, r2
 5456 022e 0144     		add	r1, r1, r0
 5457 0230 1944     		add	r1, r1, r3
 5458 0232 1831     		adds	r1, r1, #24
 5459 0234 91F90010 		ldrsb	r1, [r1]
 5460 0238 C9B2     		uxtb	r1, r1
 5461 023a 0131     		adds	r1, r1, #1
 5462 023c C9B2     		uxtb	r1, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 130


 5463 023e 4CB2     		sxtb	r4, r1
 5464 0240 0D49     		ldr	r1, .L401+36
 5465 0242 3420     		movs	r0, #52
 5466 0244 00FB02F2 		mul	r2, r0, r2
 5467 0248 0A44     		add	r2, r2, r1
 5468 024a 1344     		add	r3, r3, r2
 5469 024c 1833     		adds	r3, r3, #24
 5470 024e 2246     		mov	r2, r4
 5471 0250 1A70     		strb	r2, [r3]
 5472 0252 3BE0     		b	.L378
 5473              	.L402:
 5474              		.align	2
 5475              	.L401:
 5476 0254 00000000 		.word	reset_last_value_flag
 5477 0258 E4000000 		.word	last_value_encoder.10396
 5478 025c 00000000 		.word	c_mem
 5479 0260 00000000 		.word	Encoder_Check
 5480 0264 00000000 		.word	Encoder_Value
 5481 0268 00000000 		.word	data_encoder_raw
 5482 026c 00000000 		.word	g_mem
 5483 0270 FC000000 		.word	comp_value_encoder.10397
 5484 0274 04000000 		.word	only_first_time.10399
 5485 0278 00000000 		.word	g_meas
 5486              	.L379:
1752:..\src/interruptions.c ****             else{
1753:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5487              		.loc 1 1753 0
 5488 027c BB69     		ldr	r3, [r7, #24]
 5489 027e 002B     		cmp	r3, #0
 5490 0280 B8BF     		it	lt
 5491 0282 5B42     		rsblt	r3, r3, #0
 5492 0284 B3F5804F 		cmp	r3, #16384
 5493 0288 20DD     		ble	.L378
1754:..\src/interruptions.c ****                     error[n_line][index]++;
 5494              		.loc 1 1754 0
 5495 028a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5496 028c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5497 0290 9B48     		ldr	r0, .L403
 5498 0292 1346     		mov	r3, r2
 5499 0294 5B00     		lsls	r3, r3, #1
 5500 0296 1344     		add	r3, r3, r2
 5501 0298 0344     		add	r3, r3, r0
 5502 029a 0B44     		add	r3, r3, r1
 5503 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5504 029e 0133     		adds	r3, r3, #1
 5505 02a0 DCB2     		uxtb	r4, r3
 5506 02a2 9748     		ldr	r0, .L403
 5507 02a4 1346     		mov	r3, r2
 5508 02a6 5B00     		lsls	r3, r3, #1
 5509 02a8 1344     		add	r3, r3, r2
 5510 02aa 0344     		add	r3, r3, r0
 5511 02ac 0B44     		add	r3, r3, r1
 5512 02ae 2246     		mov	r2, r4
 5513 02b0 1A70     		strb	r2, [r3]
1755:..\src/interruptions.c ****                                 
1756:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5514              		.loc 1 1756 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 131


 5515 02b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5516 02b4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5517 02b8 9148     		ldr	r0, .L403
 5518 02ba 1346     		mov	r3, r2
 5519 02bc 5B00     		lsls	r3, r3, #1
 5520 02be 1344     		add	r3, r3, r2
 5521 02c0 0344     		add	r3, r3, r0
 5522 02c2 0B44     		add	r3, r3, r1
 5523 02c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5524 02c6 092B     		cmp	r3, #9
 5525 02c8 40F28882 		bls	.L400
 5526              	.L378:
1757:..\src/interruptions.c ****                         // Discard
1758:..\src/interruptions.c ****                         return;
1759:..\src/interruptions.c ****                 }
1760:..\src/interruptions.c ****             }
1761:..\src/interruptions.c ****         }
1762:..\src/interruptions.c **** 
1763:..\src/interruptions.c ****         error[n_line][index] = 0;
 5527              		.loc 1 1763 0
 5528 02cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5529 02ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5530 02d2 8B48     		ldr	r0, .L403
 5531 02d4 1346     		mov	r3, r2
 5532 02d6 5B00     		lsls	r3, r3, #1
 5533 02d8 1344     		add	r3, r3, r2
 5534 02da 0344     		add	r3, r3, r0
 5535 02dc 0B44     		add	r3, r3, r1
 5536 02de 0022     		movs	r2, #0
 5537 02e0 1A70     		strb	r2, [r3]
1764:..\src/interruptions.c ****         
1765:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5538              		.loc 1 1765 0
 5539 02e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5540 02e4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5541 02e8 8648     		ldr	r0, .L403+4
 5542 02ea 1346     		mov	r3, r2
 5543 02ec 5B00     		lsls	r3, r3, #1
 5544 02ee 1344     		add	r3, r3, r2
 5545 02f0 0B44     		add	r3, r3, r1
 5546 02f2 FA69     		ldr	r2, [r7, #28]
 5547 02f4 40F82320 		str	r2, [r0, r3, lsl #2]
1766:..\src/interruptions.c **** 
1767:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5548              		.loc 1 1767 0
 5549 02f8 FB69     		ldr	r3, [r7, #28]
 5550 02fa BB62     		str	r3, [r7, #40]
1768:..\src/interruptions.c **** 
1769:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5551              		.loc 1 1769 0
 5552 02fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5553 02fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5554 0302 8149     		ldr	r1, .L403+8
 5555 0304 3420     		movs	r0, #52
 5556 0306 00FB02F2 		mul	r2, r0, r2
 5557 030a 0A44     		add	r2, r2, r1
 5558 030c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 132


 5559 030e 1833     		adds	r3, r3, #24
 5560 0310 93F90030 		ldrsb	r3, [r3]
 5561 0314 1B04     		lsls	r3, r3, #16
 5562 0316 BA6A     		ldr	r2, [r7, #40]
 5563 0318 1344     		add	r3, r3, r2
 5564 031a BB62     		str	r3, [r7, #40]
1770:..\src/interruptions.c ****         
1771:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5565              		.loc 1 1771 0
 5566 031c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5567 031e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5568 0322 7A48     		ldr	r0, .L403+12
 5569 0324 1346     		mov	r3, r2
 5570 0326 5B00     		lsls	r3, r3, #1
 5571 0328 1344     		add	r3, r3, r2
 5572 032a 9B00     		lsls	r3, r3, #2
 5573 032c 0B44     		add	r3, r3, r1
 5574 032e 6833     		adds	r3, r3, #104
 5575 0330 9B00     		lsls	r3, r3, #2
 5576 0332 0344     		add	r3, r3, r0
 5577 0334 5B68     		ldr	r3, [r3, #4]	@ float
 5578 0336 4FF07E51 		mov	r1, #1065353216
 5579 033a 1846     		mov	r0, r3
 5580 033c FFF7FEFF 		bl	__aeabi_fcmpeq
 5581 0340 0346     		mov	r3, r0
 5582 0342 002B     		cmp	r3, #0
 5583 0344 1AD1     		bne	.L381
1772:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5584              		.loc 1 1772 0
 5585 0346 B86A     		ldr	r0, [r7, #40]
 5586 0348 FFF7FEFF 		bl	__aeabi_i2f
 5587 034c 0446     		mov	r4, r0
 5588 034e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5589 0350 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5590 0354 6D48     		ldr	r0, .L403+12
 5591 0356 1346     		mov	r3, r2
 5592 0358 5B00     		lsls	r3, r3, #1
 5593 035a 1344     		add	r3, r3, r2
 5594 035c 9B00     		lsls	r3, r3, #2
 5595 035e 0B44     		add	r3, r3, r1
 5596 0360 6833     		adds	r3, r3, #104
 5597 0362 9B00     		lsls	r3, r3, #2
 5598 0364 0344     		add	r3, r3, r0
 5599 0366 5B68     		ldr	r3, [r3, #4]	@ float
 5600 0368 1946     		mov	r1, r3
 5601 036a 2046     		mov	r0, r4
 5602 036c FFF7FEFF 		bl	__aeabi_fmul
 5603 0370 0346     		mov	r3, r0
 5604 0372 1846     		mov	r0, r3
 5605 0374 FFF7FEFF 		bl	__aeabi_f2iz
 5606 0378 0346     		mov	r3, r0
 5607 037a BB62     		str	r3, [r7, #40]
 5608              	.L381:
1773:..\src/interruptions.c ****         }
1774:..\src/interruptions.c **** 
1775:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5609              		.loc 1 1775 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 133


 5610 037c 634B     		ldr	r3, .L403+12
 5611 037e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5612 0382 002B     		cmp	r3, #0
 5613 0384 0BD1     		bne	.L383
1776:..\src/interruptions.c ****             // Right / Left hand turn
1777:..\src/interruptions.c ****             if (index == 0) {
 5614              		.loc 1 1777 0
 5615 0386 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5616 038a 002B     		cmp	r3, #0
 5617 038c 07D1     		bne	.L383
1778:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5618              		.loc 1 1778 0
 5619 038e 5F4B     		ldr	r3, .L403+12
 5620 0390 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5621 0394 002B     		cmp	r3, #0
 5622 0396 02D1     		bne	.L383
1779:..\src/interruptions.c ****                     value_encoder *= -1;        
 5623              		.loc 1 1779 0
 5624 0398 BB6A     		ldr	r3, [r7, #40]
 5625 039a 5B42     		negs	r3, r3
 5626 039c BB62     		str	r3, [r7, #40]
 5627              	.L383:
1780:..\src/interruptions.c ****                 }
1781:..\src/interruptions.c ****             }
1782:..\src/interruptions.c ****         } 
1783:..\src/interruptions.c ****         
1784:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5628              		.loc 1 1784 0
 5629 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5630 03a0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5631 03a4 5848     		ldr	r0, .L403+8
 5632 03a6 1346     		mov	r3, r2
 5633 03a8 5B00     		lsls	r3, r3, #1
 5634 03aa 1344     		add	r3, r3, r2
 5635 03ac 9B00     		lsls	r3, r3, #2
 5636 03ae 1344     		add	r3, r3, r2
 5637 03b0 0B44     		add	r3, r3, r1
 5638 03b2 BA6A     		ldr	r2, [r7, #40]
 5639 03b4 40F82320 		str	r2, [r0, r3, lsl #2]
1785:..\src/interruptions.c ****     
1786:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5640              		.loc 1 1786 0
 5641 03b8 BA6A     		ldr	r2, [r7, #40]
 5642 03ba 1346     		mov	r3, r2
 5643 03bc 9B00     		lsls	r3, r3, #2
 5644 03be 1344     		add	r3, r3, r2
 5645 03c0 5B00     		lsls	r3, r3, #1
 5646 03c2 9918     		adds	r1, r3, r2
 5647 03c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5648 03c6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5649 03ca 514C     		ldr	r4, .L403+16
 5650 03cc 1346     		mov	r3, r2
 5651 03ce 5B00     		lsls	r3, r3, #1
 5652 03d0 1344     		add	r3, r3, r2
 5653 03d2 0344     		add	r3, r3, r0
 5654 03d4 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5655 03d8 6FF01102 		mvn	r2, #17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 134


 5656 03dc 02FB03F3 		mul	r3, r2, r3
 5657 03e0 1944     		add	r1, r1, r3
 5658 03e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5659 03e4 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5660 03e8 4A4C     		ldr	r4, .L403+20
 5661 03ea 1346     		mov	r3, r2
 5662 03ec 5B00     		lsls	r3, r3, #1
 5663 03ee 1344     		add	r3, r3, r2
 5664 03f0 0344     		add	r3, r3, r0
 5665 03f2 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5666 03f6 1346     		mov	r3, r2
 5667 03f8 DB00     		lsls	r3, r3, #3
 5668 03fa 1344     		add	r3, r3, r2
 5669 03fc 1944     		add	r1, r1, r3
 5670 03fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5671 0400 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5672 0404 444C     		ldr	r4, .L403+24
 5673 0406 1346     		mov	r3, r2
 5674 0408 5B00     		lsls	r3, r3, #1
 5675 040a 1344     		add	r3, r3, r2
 5676 040c 0344     		add	r3, r3, r0
 5677 040e 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5678 0412 5B00     		lsls	r3, r3, #1
 5679 0414 C81A     		subs	r0, r1, r3
 5680 0416 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5681 041a DB00     		lsls	r3, r3, #3
 5682 041c 3F4A     		ldr	r2, .L403+28
 5683 041e 1344     		add	r3, r3, r2
 5684 0420 1946     		mov	r1, r3
 5685 0422 FFF7FEFF 		bl	filter
 5686 0426 0346     		mov	r3, r0
 5687 0428 1BB2     		sxth	r3, r3
 5688 042a 7B61     		str	r3, [r7, #20]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         //Update current speed
1789:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5689              		.loc 1 1789 0
 5690 042c 7869     		ldr	r0, [r7, #20]
 5691 042e FFF7FEFF 		bl	__aeabi_i2f
 5692 0432 0446     		mov	r4, r0
 5693 0434 3A4B     		ldr	r3, .L403+32
 5694 0436 1B68     		ldr	r3, [r3]	@ float
 5695 0438 3A49     		ldr	r1, .L403+36
 5696 043a 1846     		mov	r0, r3
 5697 043c FFF7FEFF 		bl	__aeabi_fmul
 5698 0440 0346     		mov	r3, r0
 5699 0442 1946     		mov	r1, r3
 5700 0444 2046     		mov	r0, r4
 5701 0446 FFF7FEFF 		bl	__aeabi_fdiv
 5702 044a 0346     		mov	r3, r0
 5703 044c 1846     		mov	r0, r3
 5704 044e FFF7FEFF 		bl	__aeabi_f2iz
 5705 0452 0346     		mov	r3, r0
 5706 0454 7B61     		str	r3, [r7, #20]
1790:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5707              		.loc 1 1790 0
 5708 0456 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 135


 5709 0458 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5710 045c 2A48     		ldr	r0, .L403+8
 5711 045e 1346     		mov	r3, r2
 5712 0460 5B00     		lsls	r3, r3, #1
 5713 0462 1344     		add	r3, r3, r2
 5714 0464 9B00     		lsls	r3, r3, #2
 5715 0466 1344     		add	r3, r3, r2
 5716 0468 0B44     		add	r3, r3, r1
 5717 046a 0633     		adds	r3, r3, #6
 5718 046c 9B00     		lsls	r3, r3, #2
 5719 046e 0344     		add	r3, r3, r0
 5720 0470 7A69     		ldr	r2, [r7, #20]
 5721 0472 5A60     		str	r2, [r3, #4]
1791:..\src/interruptions.c **** 
1792:..\src/interruptions.c ****         // update old velocity and acceleration values
1793:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5722              		.loc 1 1793 0
 5723 0474 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5724 0476 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5725 047a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5726 047c 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5727 0480 244D     		ldr	r5, .L403+20
 5728 0482 0B46     		mov	r3, r1
 5729 0484 5B00     		lsls	r3, r3, #1
 5730 0486 0B44     		add	r3, r3, r1
 5731 0488 2344     		add	r3, r3, r4
 5732 048a 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5733 048e 224C     		ldr	r4, .L403+24
 5734 0490 1346     		mov	r3, r2
 5735 0492 5B00     		lsls	r3, r3, #1
 5736 0494 1344     		add	r3, r3, r2
 5737 0496 0344     		add	r3, r3, r0
 5738 0498 44F82310 		str	r1, [r4, r3, lsl #2]
1794:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5739              		.loc 1 1794 0
 5740 049c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5741 049e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5742 04a2 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5743 04a4 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5744 04a8 194D     		ldr	r5, .L403+16
 5745 04aa 0B46     		mov	r3, r1
 5746 04ac 5B00     		lsls	r3, r3, #1
 5747 04ae 0B44     		add	r3, r3, r1
 5748 04b0 2344     		add	r3, r3, r4
 5749 04b2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5750 04b6 174C     		ldr	r4, .L403+20
 5751 04b8 1346     		mov	r3, r2
 5752 04ba 5B00     		lsls	r3, r3, #1
 5753 04bc 1344     		add	r3, r3, r2
 5754 04be 0344     		add	r3, r3, r0
 5755 04c0 44F82310 		str	r1, [r4, r3, lsl #2]
1795:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5756              		.loc 1 1795 0
 5757 04c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5758 04c6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5759 04ca 1148     		ldr	r0, .L403+16
 5760 04cc 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 136


 5761 04ce 5B00     		lsls	r3, r3, #1
 5762 04d0 1344     		add	r3, r3, r2
 5763 04d2 0B44     		add	r3, r3, r1
 5764 04d4 BA6A     		ldr	r2, [r7, #40]
 5765 04d6 40F82320 		str	r2, [r0, r3, lsl #2]
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1798:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5766              		.loc 1 1798 0
 5767 04da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5768 04dc 124A     		ldr	r2, .L403+40
 5769 04de D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5770 04e0 002B     		cmp	r3, #0
 5771 04e2 40F03781 		bne	.L384
1799:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 5772              		.loc 1 1799 0
 5773 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5774 04e8 104A     		ldr	r2, .L403+44
 5775 04ea D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5776 04ec 352B     		cmp	r3, #53
 5777 04ee 1FD8     		bhi	.L385
1800:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5778              		.loc 1 1800 0
 5779 04f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5780 04f2 0E4A     		ldr	r2, .L403+44
 5781 04f4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5782 04f6 0132     		adds	r2, r2, #1
 5783 04f8 D1B2     		uxtb	r1, r2
 5784 04fa 0C4A     		ldr	r2, .L403+44
 5785 04fc D154     		strb	r1, [r2, r3]
 5786 04fe 29E1     		b	.L384
 5787              	.L404:
 5788              		.align	2
 5789              	.L403:
 5790 0500 14010000 		.word	error.10398
 5791 0504 E4000000 		.word	last_value_encoder.10396
 5792 0508 00000000 		.word	g_meas
 5793 050c 00000000 		.word	c_mem
 5794 0510 1C010000 		.word	v_value.10403
 5795 0514 34010000 		.word	vv_value.10404
 5796 0518 4C010000 		.word	vvv_value.10405
 5797 051c 00000000 		.word	filt_vel
 5798 0520 00000000 		.word	cycle_time
 5799 0524 0000C040 		.word	1086324736
 5800 0528 00000000 		.word	pos_reconstruct
 5801 052c 64010000 		.word	one_time_execute.10401
 5802              	.L385:
1801:..\src/interruptions.c ****             else {
1802:..\src/interruptions.c **** 
1803:..\src/interruptions.c ****                 //Double encoder translation
1804:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5803              		.loc 1 1804 0
 5804 0530 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5805 0532 AC49     		ldr	r1, .L405
 5806 0534 1346     		mov	r3, r2
 5807 0536 5B00     		lsls	r3, r3, #1
 5808 0538 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 137


 5809 053a 1B01     		lsls	r3, r3, #4
 5810 053c 0B44     		add	r3, r3, r1
 5811 053e 03F5D873 		add	r3, r3, #432
 5812 0542 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5813 0544 002B     		cmp	r3, #0
 5814 0546 5ED0     		beq	.L386
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5815              		.loc 1 1805 0
 5816 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5817 054a A749     		ldr	r1, .L405+4
 5818 054c 1346     		mov	r3, r2
 5819 054e 5B00     		lsls	r3, r3, #1
 5820 0550 1344     		add	r3, r3, r2
 5821 0552 9B00     		lsls	r3, r3, #2
 5822 0554 0B44     		add	r3, r3, r1
 5823 0556 1868     		ldr	r0, [r3]
 5824 0558 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5825 055a A349     		ldr	r1, .L405+4
 5826 055c 1346     		mov	r3, r2
 5827 055e 5B00     		lsls	r3, r3, #1
 5828 0560 1344     		add	r3, r3, r2
 5829 0562 9B00     		lsls	r3, r3, #2
 5830 0564 0B44     		add	r3, r3, r1
 5831 0566 0433     		adds	r3, r3, #4
 5832 0568 1C68     		ldr	r4, [r3]
1806:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5833              		.loc 1 1806 0
 5834 056a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5835 056c 9D49     		ldr	r1, .L405
 5836 056e 1346     		mov	r3, r2
 5837 0570 5B00     		lsls	r3, r3, #1
 5838 0572 1344     		add	r3, r3, r2
 5839 0574 1B01     		lsls	r3, r3, #4
 5840 0576 0B44     		add	r3, r3, r1
 5841 0578 03F2B513 		addw	r3, r3, #437
 5842 057c 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5843              		.loc 1 1805 0
 5844 0580 1D46     		mov	r5, r3
 5845              		.loc 1 1806 0
 5846 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5847 0584 9749     		ldr	r1, .L405
 5848 0586 1346     		mov	r3, r2
 5849 0588 5B00     		lsls	r3, r3, #1
 5850 058a 1344     		add	r3, r3, r2
 5851 058c 1B01     		lsls	r3, r3, #4
 5852 058e 0B44     		add	r3, r3, r1
 5853 0590 03F5DB73 		add	r3, r3, #438
 5854 0594 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5855              		.loc 1 1805 0
 5856 0598 1E46     		mov	r6, r3
 5857              		.loc 1 1806 0
 5858 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5859 059c 9149     		ldr	r1, .L405
 5860 059e 1346     		mov	r3, r2
 5861 05a0 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 138


 5862 05a2 1344     		add	r3, r3, r2
 5863 05a4 1B01     		lsls	r3, r3, #4
 5864 05a6 0B44     		add	r3, r3, r1
 5865 05a8 03F2B713 		addw	r3, r3, #439
 5866 05ac 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5867              		.loc 1 1805 0
 5868 05b0 0093     		str	r3, [sp]
 5869 05b2 3346     		mov	r3, r6
 5870 05b4 2A46     		mov	r2, r5
 5871 05b6 2146     		mov	r1, r4
 5872 05b8 FFF7FEFF 		bl	calc_turns_fcn
 5873 05bc 0346     		mov	r3, r0
 5874 05be 87F82730 		strb	r3, [r7, #39]
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c **** 
1809:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5875              		.loc 1 1809 0
 5876 05c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5877 05c4 8749     		ldr	r1, .L405
 5878 05c6 1346     		mov	r3, r2
 5879 05c8 5B00     		lsls	r3, r3, #1
 5880 05ca 1344     		add	r3, r3, r2
 5881 05cc 1B01     		lsls	r3, r3, #4
 5882 05ce 0B44     		add	r3, r3, r1
 5883 05d0 03F5D273 		add	r3, r3, #420
 5884 05d4 1B68     		ldr	r3, [r3]	@ float
 5885 05d6 4FF00001 		mov	r1, #0
 5886 05da 1846     		mov	r0, r3
 5887 05dc FFF7FEFF 		bl	__aeabi_fcmplt
 5888 05e0 0346     		mov	r3, r0
 5889 05e2 002B     		cmp	r3, #0
 5890 05e4 05D0     		beq	.L387
1810:..\src/interruptions.c ****                         init_rot = -init_rot;
 5891              		.loc 1 1810 0
 5892 05e6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5893 05ea 5B42     		negs	r3, r3
 5894 05ec DBB2     		uxtb	r3, r3
 5895 05ee 87F82730 		strb	r3, [r7, #39]
 5896              	.L387:
1811:..\src/interruptions.c ****                     
1812:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5897              		.loc 1 1812 0
 5898 05f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5899 05f4 7D4A     		ldr	r2, .L405+8
 5900 05f6 3421     		movs	r1, #52
 5901 05f8 01FB03F3 		mul	r3, r1, r3
 5902 05fc 1344     		add	r3, r3, r2
 5903 05fe 1833     		adds	r3, r3, #24
 5904 0600 97F82720 		ldrb	r2, [r7, #39]
 5905 0604 1A70     		strb	r2, [r3]
 5906              	.L386:
1813:..\src/interruptions.c ****                 }    
1814:..\src/interruptions.c **** 
1815:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5907              		.loc 1 1815 0
 5908 0606 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 139


 5909 0608 7649     		ldr	r1, .L405
 5910 060a 1346     		mov	r3, r2
 5911 060c 5B00     		lsls	r3, r3, #1
 5912 060e 1344     		add	r3, r3, r2
 5913 0610 1B01     		lsls	r3, r3, #4
 5914 0612 0B44     		add	r3, r3, r1
 5915 0614 03F5D273 		add	r3, r3, #420
 5916 0618 1B68     		ldr	r3, [r3]	@ float
 5917 061a 4FF07E51 		mov	r1, #1065353216
 5918 061e 1846     		mov	r0, r3
 5919 0620 FFF7FEFF 		bl	__aeabi_fcmpeq
 5920 0624 0346     		mov	r3, r0
 5921 0626 002B     		cmp	r3, #0
 5922 0628 22D1     		bne	.L389
1816:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5923              		.loc 1 1816 0
 5924 062a FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5925 062c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5926 062e 6F4A     		ldr	r2, .L405+8
 5927 0630 3421     		movs	r1, #52
 5928 0632 01FB03F3 		mul	r3, r1, r3
 5929 0636 1344     		add	r3, r3, r2
 5930 0638 1B68     		ldr	r3, [r3]
 5931 063a 1846     		mov	r0, r3
 5932 063c FFF7FEFF 		bl	__aeabi_i2f
 5933 0640 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5934 0642 6849     		ldr	r1, .L405
 5935 0644 1346     		mov	r3, r2
 5936 0646 5B00     		lsls	r3, r3, #1
 5937 0648 1344     		add	r3, r3, r2
 5938 064a 1B01     		lsls	r3, r3, #4
 5939 064c 0B44     		add	r3, r3, r1
 5940 064e 03F5D273 		add	r3, r3, #420
 5941 0652 1B68     		ldr	r3, [r3]	@ float
 5942 0654 1946     		mov	r1, r3
 5943 0656 FFF7FEFF 		bl	__aeabi_fdiv
 5944 065a 0346     		mov	r3, r0
 5945 065c 1846     		mov	r0, r3
 5946 065e FFF7FEFF 		bl	__aeabi_f2iz
 5947 0662 0146     		mov	r1, r0
 5948 0664 614A     		ldr	r2, .L405+8
 5949 0666 3423     		movs	r3, #52
 5950 0668 03FB04F3 		mul	r3, r3, r4
 5951 066c 1344     		add	r3, r3, r2
 5952 066e 1960     		str	r1, [r3]
 5953              	.L389:
1817:..\src/interruptions.c ****                 
1818:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 5954              		.loc 1 1818 0
 5955 0670 97F92730 		ldrsb	r3, [r7, #39]
 5956 0674 1B04     		lsls	r3, r3, #16
 5957 0676 BA6A     		ldr	r2, [r7, #40]
 5958 0678 1344     		add	r3, r3, r2
 5959 067a BB62     		str	r3, [r7, #40]
1819:..\src/interruptions.c ****        
1820:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 5960              		.loc 1 1820 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 140


 5961 067c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5962 067e 5949     		ldr	r1, .L405
 5963 0680 1346     		mov	r3, r2
 5964 0682 5B00     		lsls	r3, r3, #1
 5965 0684 1344     		add	r3, r3, r2
 5966 0686 1B01     		lsls	r3, r3, #4
 5967 0688 0B44     		add	r3, r3, r1
 5968 068a 03F5D273 		add	r3, r3, #420
 5969 068e 1B68     		ldr	r3, [r3]	@ float
 5970 0690 4FF07E51 		mov	r1, #1065353216
 5971 0694 1846     		mov	r0, r3
 5972 0696 FFF7FEFF 		bl	__aeabi_fcmpeq
 5973 069a 0346     		mov	r3, r0
 5974 069c 002B     		cmp	r3, #0
 5975 069e 15D1     		bne	.L391
1821:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 5976              		.loc 1 1821 0
 5977 06a0 B86A     		ldr	r0, [r7, #40]
 5978 06a2 FFF7FEFF 		bl	__aeabi_i2f
 5979 06a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5980 06a8 4E49     		ldr	r1, .L405
 5981 06aa 1346     		mov	r3, r2
 5982 06ac 5B00     		lsls	r3, r3, #1
 5983 06ae 1344     		add	r3, r3, r2
 5984 06b0 1B01     		lsls	r3, r3, #4
 5985 06b2 0B44     		add	r3, r3, r1
 5986 06b4 03F5D273 		add	r3, r3, #420
 5987 06b8 1B68     		ldr	r3, [r3]	@ float
 5988 06ba 1946     		mov	r1, r3
 5989 06bc FFF7FEFF 		bl	__aeabi_fmul
 5990 06c0 0346     		mov	r3, r0
 5991 06c2 1846     		mov	r0, r3
 5992 06c4 FFF7FEFF 		bl	__aeabi_f2iz
 5993 06c8 0346     		mov	r3, r0
 5994 06ca BB62     		str	r3, [r7, #40]
 5995              	.L391:
1822:..\src/interruptions.c ****                 }
1823:..\src/interruptions.c **** 
1824:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5996              		.loc 1 1824 0
 5997 06cc 454B     		ldr	r3, .L405
 5998 06ce 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5999 06d2 002B     		cmp	r3, #0
 6000 06d4 07D1     		bne	.L393
1825:..\src/interruptions.c ****                     // Right / Left hand turn
1826:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6001              		.loc 1 1826 0
 6002 06d6 434B     		ldr	r3, .L405
 6003 06d8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6004 06dc 002B     		cmp	r3, #0
 6005 06de 02D1     		bne	.L393
1827:..\src/interruptions.c ****                         value_encoder *= -1;        
 6006              		.loc 1 1827 0
 6007 06e0 BB6A     		ldr	r3, [r7, #40]
 6008 06e2 5B42     		negs	r3, r3
 6009 06e4 BB62     		str	r3, [r7, #40]
 6010              	.L393:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 141


1828:..\src/interruptions.c ****                     }
1829:..\src/interruptions.c ****                 }
1830:..\src/interruptions.c ****          
1831:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6011              		.loc 1 1831 0
 6012 06e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6013 06e8 404A     		ldr	r2, .L405+8
 6014 06ea 3421     		movs	r1, #52
 6015 06ec 01FB03F3 		mul	r3, r1, r3
 6016 06f0 1344     		add	r3, r3, r2
 6017 06f2 BA6A     		ldr	r2, [r7, #40]
 6018 06f4 1A60     		str	r2, [r3]
1832:..\src/interruptions.c ****                 
1833:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6019              		.loc 1 1833 0
 6020 06f6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6021 06f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6022 06fa 3C49     		ldr	r1, .L405+8
 6023 06fc 3420     		movs	r0, #52
 6024 06fe 00FB02F2 		mul	r2, r0, r2
 6025 0702 0A44     		add	r2, r2, r1
 6026 0704 1268     		ldr	r2, [r2]
 6027 0706 3A49     		ldr	r1, .L405+12
 6028 0708 1B01     		lsls	r3, r3, #4
 6029 070a 0B44     		add	r3, r3, r1
 6030 070c 1A60     		str	r2, [r3]
1834:..\src/interruptions.c **** 
1835:..\src/interruptions.c ****                 // If necessary activate motor
1836:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6031              		.loc 1 1836 0
 6032 070e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6033 0710 384A     		ldr	r2, .L405+16
 6034 0712 0121     		movs	r1, #1
 6035 0714 D154     		strb	r1, [r2, r3]
1837:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1838:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6036              		.loc 1 1838 0
 6037 0716 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6038 0718 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6039 071a 3248     		ldr	r0, .L405
 6040 071c 1346     		mov	r3, r2
 6041 071e DB00     		lsls	r3, r3, #3
 6042 0720 9B1A     		subs	r3, r3, r2
 6043 0722 1B01     		lsls	r3, r3, #4
 6044 0724 0344     		add	r3, r3, r0
 6045 0726 E033     		adds	r3, r3, #224
 6046 0728 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6047 072a 314A     		ldr	r2, .L405+12
 6048 072c 0B01     		lsls	r3, r1, #4
 6049 072e 1344     		add	r3, r3, r2
 6050 0730 0C33     		adds	r3, r3, #12
 6051 0732 0246     		mov	r2, r0
 6052 0734 1A70     		strb	r2, [r3]
1839:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6053              		.loc 1 1839 0
 6054 0736 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6055 0738 2D4A     		ldr	r2, .L405+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 142


 6056 073a 1B01     		lsls	r3, r3, #4
 6057 073c 1344     		add	r3, r3, r2
 6058 073e 0C33     		adds	r3, r3, #12
 6059 0740 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6060 0742 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6061 0744 1146     		mov	r1, r2
 6062 0746 1846     		mov	r0, r3
 6063 0748 FFF7FEFF 		bl	enable_motor
1840:..\src/interruptions.c ****                 
1841:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6064              		.loc 1 1841 0
 6065 074c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6066 074e 2A4A     		ldr	r2, .L405+20
 6067 0750 0121     		movs	r1, #1
 6068 0752 D154     		strb	r1, [r2, r3]
 6069              	.L384:
1703:..\src/interruptions.c ****         
 6070              		.loc 1 1703 0 discriminator 2
 6071 0754 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6072 0758 0133     		adds	r3, r3, #1
 6073 075a 87F82F30 		strb	r3, [r7, #47]
 6074              	.L373:
1703:..\src/interruptions.c ****         
 6075              		.loc 1 1703 0 is_stmt 0 discriminator 1
 6076 075e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6077 0762 022B     		cmp	r3, #2
 6078 0764 7FF6C8AC 		bls	.L394
1842:..\src/interruptions.c ****             }
1843:..\src/interruptions.c ****         }
1844:..\src/interruptions.c ****     } 
1845:..\src/interruptions.c **** 
1846:..\src/interruptions.c **** 	
1847:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1848:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6079              		.loc 1 1848 0 is_stmt 1
 6080 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6081 076a 224A     		ldr	r2, .L405+16
 6082 076c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6083 076e 002B     		cmp	r3, #0
 6084 0770 35D0     		beq	.L364
1849:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6085              		.loc 1 1849 0
 6086 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6087 0774 214A     		ldr	r2, .L405+24
 6088 0776 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6089 077a 0132     		adds	r2, r2, #1
 6090 077c 1F49     		ldr	r1, .L405+24
 6091 077e 41F82320 		str	r2, [r1, r3, lsl #2]
1850:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6092              		.loc 1 1850 0
 6093 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6094 0784 1D4A     		ldr	r2, .L405+24
 6095 0786 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6096 078a B3F5FA5F 		cmp	r3, #8000
 6097 078e 26D3     		bcc	.L364
1851:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6098              		.loc 1 1851 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 143


 6099 0790 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6100 0792 174A     		ldr	r2, .L405+12
 6101 0794 1B01     		lsls	r3, r3, #4
 6102 0796 1344     		add	r3, r3, r2
 6103 0798 0022     		movs	r2, #0
 6104 079a 1A60     		str	r2, [r3]
1852:..\src/interruptions.c ****             
1853:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1854:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6105              		.loc 1 1854 0
 6106 079c B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6107 079e BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6108 07a0 1048     		ldr	r0, .L405
 6109 07a2 1346     		mov	r3, r2
 6110 07a4 DB00     		lsls	r3, r3, #3
 6111 07a6 9B1A     		subs	r3, r3, r2
 6112 07a8 1B01     		lsls	r3, r3, #4
 6113 07aa 0344     		add	r3, r3, r0
 6114 07ac E033     		adds	r3, r3, #224
 6115 07ae 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6116 07b0 0F4A     		ldr	r2, .L405+12
 6117 07b2 0B01     		lsls	r3, r1, #4
 6118 07b4 1344     		add	r3, r3, r2
 6119 07b6 0C33     		adds	r3, r3, #12
 6120 07b8 0246     		mov	r2, r0
 6121 07ba 1A70     		strb	r2, [r3]
1855:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6122              		.loc 1 1855 0
 6123 07bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6124 07be 0C4A     		ldr	r2, .L405+12
 6125 07c0 1B01     		lsls	r3, r3, #4
 6126 07c2 1344     		add	r3, r3, r2
 6127 07c4 0C33     		adds	r3, r3, #12
 6128 07c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6129 07c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6130 07ca 1146     		mov	r1, r2
 6131 07cc 1846     		mov	r0, r3
 6132 07ce FFF7FEFF 		bl	enable_motor
1856:..\src/interruptions.c ****                         
1857:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6133              		.loc 1 1857 0
 6134 07d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6135 07d4 074A     		ldr	r2, .L405+16
 6136 07d6 0021     		movs	r1, #0
 6137 07d8 D154     		strb	r1, [r2, r3]
 6138 07da 00E0     		b	.L364
 6139              	.L400:
1758:..\src/interruptions.c ****                 }
 6140              		.loc 1 1758 0
 6141 07dc 00BF     		nop
 6142              	.L364:
1858:..\src/interruptions.c ****         }
1859:..\src/interruptions.c ****     }
1860:..\src/interruptions.c ****  
1861:..\src/interruptions.c **** }
 6143              		.loc 1 1861 0
 6144 07de 3437     		adds	r7, r7, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 144


 6145              		.cfi_def_cfa_offset 20
 6146 07e0 BD46     		mov	sp, r7
 6147              		.cfi_def_cfa_register 13
 6148              		@ sp needed
 6149 07e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 6150              	.L406:
 6151              		.align	2
 6152              	.L405:
 6153 07e4 00000000 		.word	c_mem
 6154 07e8 FC000000 		.word	comp_value_encoder.10397
 6155 07ec 00000000 		.word	g_meas
 6156 07f0 00000000 		.word	g_refNew
 6157 07f4 68010000 		.word	safe_startup_motor_activation.10400
 6158 07f8 00000000 		.word	pos_reconstruct
 6159 07fc 6C010000 		.word	count_startup_motor.10402
 6160              		.cfi_endproc
 6161              	.LFE74:
 6162              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6163              		.global	__aeabi_f2d
 6164              		.global	__aeabi_ddiv
 6165              		.global	__aeabi_dsub
 6166              		.global	__aeabi_d2f
 6167              		.global	__aeabi_i2d
 6168              		.global	__aeabi_dmul
 6169              		.global	__aeabi_d2iz
 6170              		.section	.text.analog_read_end,"ax",%progbits
 6171              		.align	2
 6172              		.global	analog_read_end
 6173              		.thumb
 6174              		.thumb_func
 6175              		.type	analog_read_end, %function
 6176              	analog_read_end:
 6177              	.LFB75:
1862:..\src/interruptions.c **** 
1863:..\src/interruptions.c **** //==============================================================================
1864:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1865:..\src/interruptions.c **** //==============================================================================
1866:..\src/interruptions.c **** 
1867:..\src/interruptions.c **** void analog_read_end() {
 6178              		.loc 1 1867 0
 6179              		.cfi_startproc
 6180              		@ args = 0, pretend = 0, frame = 8
 6181              		@ frame_needed = 1, uses_anonymous_args = 0
 6182 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6183              		.cfi_def_cfa_offset 20
 6184              		.cfi_offset 4, -20
 6185              		.cfi_offset 5, -16
 6186              		.cfi_offset 6, -12
 6187              		.cfi_offset 7, -8
 6188              		.cfi_offset 14, -4
 6189 0002 83B0     		sub	sp, sp, #12
 6190              		.cfi_def_cfa_offset 32
 6191 0004 00AF     		add	r7, sp, #0
 6192              		.cfi_def_cfa_register 7
1868:..\src/interruptions.c **** 
1869:..\src/interruptions.c ****     /* =========================================================================
1870:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 145


1871:..\src/interruptions.c ****     /
1872:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1873:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1874:..\src/interruptions.c ****     /
1875:..\src/interruptions.c ****     /   Definition:
1876:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1877:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1878:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1879:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1880:..\src/interruptions.c ****     /
1881:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1882:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1883:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1884:..\src/interruptions.c ****     /  =========================================================================
1885:..\src/interruptions.c ****     */
1886:..\src/interruptions.c **** 
1887:..\src/interruptions.c ****     int32 CYDATA i_aux;
1888:..\src/interruptions.c **** 
1889:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1890:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1891:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1892:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1893:..\src/interruptions.c ****     static int32 UD_mean_value;
1894:..\src/interruptions.c ****     static int32 LR_mean_value;
1895:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1896:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1897:..\src/interruptions.c ****     static uint16 count = 0;
1898:..\src/interruptions.c ****     static uint32 v_count = 0;
1899:..\src/interruptions.c ****     static uint8 idx = 0;
1900:..\src/interruptions.c ****     
1901:..\src/interruptions.c ****     
1902:..\src/interruptions.c ****     // Wait for conversion end
1903:..\src/interruptions.c ****     
1904:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6193              		.loc 1 1904 0
 6194 0006 08E0     		b	.L408
 6195              	.L409:
1905:..\src/interruptions.c ****         
1906:..\src/interruptions.c ****         if (interrupt_flag){
 6196              		.loc 1 1906 0
 6197 0008 934B     		ldr	r3, .L566+24
 6198 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6199 000c 002B     		cmp	r3, #0
 6200 000e 04D0     		beq	.L408
1907:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6201              		.loc 1 1907 0
 6202 0010 914B     		ldr	r3, .L566+24
 6203 0012 0022     		movs	r2, #0
 6204 0014 1A70     		strb	r2, [r3]
1908:..\src/interruptions.c ****             interrupt_manager();
 6205              		.loc 1 1908 0
 6206 0016 FFF7FEFF 		bl	interrupt_manager
 6207              	.L408:
1904:..\src/interruptions.c ****         
 6208              		.loc 1 1904 0
 6209 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6210 001e 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 146


 6211 0020 002B     		cmp	r3, #0
 6212 0022 F1D0     		beq	.L409
1909:..\src/interruptions.c ****         }
1910:..\src/interruptions.c ****     }
1911:..\src/interruptions.c ****     
1912:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1913:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6213              		.loc 1 1913 0
 6214 0024 8D4B     		ldr	r3, .L566+28
 6215 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6216 002a 022B     		cmp	r3, #2
 6217 002c 3BD1     		bne	.L410
1914:..\src/interruptions.c ****         // Read pressure in any case
1915:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] );    //0 - 4096  
 6218              		.loc 1 1915 0
 6219 002e 8C4B     		ldr	r3, .L566+32
 6220 0030 B3F90030 		ldrsh	r3, [r3]
 6221 0034 1846     		mov	r0, r3
 6222 0036 FFF7FEFF 		bl	__aeabi_i2f
 6223 003a 0246     		mov	r2, r0
 6224 003c 894B     		ldr	r3, .L566+36
 6225 003e 1A60     		str	r2, [r3]	@ float
1916:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.002421)-101.325;       // datash
 6226              		.loc 1 1916 0
 6227 0040 884B     		ldr	r3, .L566+36
 6228 0042 1B68     		ldr	r3, [r3]	@ float
 6229 0044 1846     		mov	r0, r3
 6230 0046 FFF7FEFF 		bl	__aeabi_f2d
 6231 004a 4FF00002 		mov	r2, #0
 6232 004e 864B     		ldr	r3, .L566+40
 6233 0050 FFF7FEFF 		bl	__aeabi_ddiv
 6234 0054 0346     		mov	r3, r0
 6235 0056 0C46     		mov	r4, r1
 6236 0058 1846     		mov	r0, r3
 6237 005a 2146     		mov	r1, r4
 6238 005c 78A3     		adr	r3, .L566
 6239 005e D3E90023 		ldrd	r2, [r3]
 6240 0062 FFF7FEFF 		bl	__aeabi_ddiv
 6241 0066 0346     		mov	r3, r0
 6242 0068 0C46     		mov	r4, r1
 6243 006a 1846     		mov	r0, r3
 6244 006c 2146     		mov	r1, r4
 6245 006e 76A3     		adr	r3, .L566+8
 6246 0070 D3E90023 		ldrd	r2, [r3]
 6247 0074 FFF7FEFF 		bl	__aeabi_dsub
 6248 0078 0346     		mov	r3, r0
 6249 007a 0C46     		mov	r4, r1
 6250 007c 1846     		mov	r0, r3
 6251 007e 2146     		mov	r1, r4
 6252 0080 FFF7FEFF 		bl	__aeabi_d2f
 6253 0084 0246     		mov	r2, r0
 6254 0086 774B     		ldr	r3, .L566+36
 6255 0088 1A60     		str	r2, [r3]	@ float
1917:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
 6256              		.loc 1 1917 0
 6257 008a 764B     		ldr	r3, .L566+36
 6258 008c 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 147


 6259 008e 4FF00001 		mov	r1, #0
 6260 0092 1846     		mov	r0, r3
 6261 0094 FFF7FEFF 		bl	__aeabi_fcmplt
 6262 0098 0346     		mov	r3, r0
 6263 009a 002B     		cmp	r3, #0
 6264 009c 03D0     		beq	.L410
 6265              		.loc 1 1917 0 is_stmt 0 discriminator 1
 6266 009e 714B     		ldr	r3, .L566+36
 6267 00a0 4FF00002 		mov	r2, #0
 6268 00a4 1A60     		str	r2, [r3]	@ float
 6269              	.L410:
1918:..\src/interruptions.c ****     }
1919:..\src/interruptions.c **** #endif
1920:..\src/interruptions.c ****  
1921:..\src/interruptions.c **** flag_master =  (int32)((ADC_buf[1]/4096.0)*5000);
 6270              		.loc 1 1921 0 is_stmt 1
 6271 00a6 6E4B     		ldr	r3, .L566+32
 6272 00a8 B3F90230 		ldrsh	r3, [r3, #2]
 6273 00ac 1846     		mov	r0, r3
 6274 00ae FFF7FEFF 		bl	__aeabi_i2d
 6275 00b2 4FF00002 		mov	r2, #0
 6276 00b6 6C4B     		ldr	r3, .L566+40
 6277 00b8 FFF7FEFF 		bl	__aeabi_ddiv
 6278 00bc 0346     		mov	r3, r0
 6279 00be 0C46     		mov	r4, r1
 6280 00c0 1846     		mov	r0, r3
 6281 00c2 2146     		mov	r1, r4
 6282 00c4 62A3     		adr	r3, .L566+16
 6283 00c6 D3E90023 		ldrd	r2, [r3]
 6284 00ca FFF7FEFF 		bl	__aeabi_dmul
 6285 00ce 0346     		mov	r3, r0
 6286 00d0 0C46     		mov	r4, r1
 6287 00d2 1846     		mov	r0, r3
 6288 00d4 2146     		mov	r1, r4
 6289 00d6 FFF7FEFF 		bl	__aeabi_d2iz
 6290 00da 0246     		mov	r2, r0
 6291 00dc 634B     		ldr	r3, .L566+44
 6292 00de 1A60     		str	r2, [r3]
1922:..\src/interruptions.c ****     
1923:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1924:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6293              		.loc 1 1924 0
 6294 00e0 634B     		ldr	r3, .L566+48
 6295 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6296 00e4 042B     		cmp	r3, #4
 6297 00e6 0BD9     		bls	.L412
1925:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6298              		.loc 1 1925 0
 6299 00e8 5D4B     		ldr	r3, .L566+32
 6300 00ea B3F90830 		ldrsh	r3, [r3, #8]
 6301 00ee A3F25563 		subw	r3, r3, #1621
 6302 00f2 40F2C672 		movw	r2, #1990
 6303 00f6 02FB03F3 		mul	r3, r2, r3
 6304 00fa DB11     		asrs	r3, r3, #7
 6305 00fc 5D4A     		ldr	r2, .L566+52
 6306 00fe 5360     		str	r3, [r2, #4]
 6307              	.L412:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 148


1926:..\src/interruptions.c ****     }
1927:..\src/interruptions.c ****     
1928:..\src/interruptions.c ****     if (interrupt_flag){
 6308              		.loc 1 1928 0
 6309 0100 554B     		ldr	r3, .L566+24
 6310 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6311 0104 002B     		cmp	r3, #0
 6312 0106 04D0     		beq	.L413
1929:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6313              		.loc 1 1929 0
 6314 0108 534B     		ldr	r3, .L566+24
 6315 010a 0022     		movs	r2, #0
 6316 010c 1A70     		strb	r2, [r3]
1930:..\src/interruptions.c ****         interrupt_manager();
 6317              		.loc 1 1930 0
 6318 010e FFF7FEFF 		bl	interrupt_manager
 6319              	.L413:
1931:..\src/interruptions.c ****     }
1932:..\src/interruptions.c ****     
1933:..\src/interruptions.c ****     // Update cycle power value
1934:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6320              		.loc 1 1934 0
 6321 0112 584B     		ldr	r3, .L566+52
 6322 0114 1B68     		ldr	r3, [r3]
 6323 0116 584A     		ldr	r2, .L566+56
 6324 0118 82FB0312 		smull	r1, r2, r2, r3
 6325 011c D211     		asrs	r2, r2, #7
 6326 011e DB17     		asrs	r3, r3, #31
 6327 0120 D31A     		subs	r3, r2, r3
 6328 0122 5649     		ldr	r1, .L566+60
 6329 0124 1846     		mov	r0, r3
 6330 0126 FFF7FEFF 		bl	filter
 6331 012a 0246     		mov	r2, r0
 6332 012c 544B     		ldr	r3, .L566+64
 6333 012e 1A60     		str	r2, [r3]
1935:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6334              		.loc 1 1935 0
 6335 0130 544B     		ldr	r3, .L566+68
 6336 0132 1B68     		ldr	r3, [r3]
 6337 0134 002B     		cmp	r3, #0
 6338 0136 08DA     		bge	.L414
 6339              		.loc 1 1935 0 is_stmt 0 discriminator 1
 6340 0138 514B     		ldr	r3, .L566+64
 6341 013a 1B68     		ldr	r3, [r3]
 6342 013c 002B     		cmp	r3, #0
 6343 013e 04DB     		blt	.L414
1936:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6344              		.loc 1 1936 0 is_stmt 1
 6345 0140 514B     		ldr	r3, .L566+72
 6346 0142 1B6E     		ldr	r3, [r3, #96]
 6347 0144 0133     		adds	r3, r3, #1
 6348 0146 504A     		ldr	r2, .L566+72
 6349 0148 1366     		str	r3, [r2, #96]
 6350              	.L414:
1937:..\src/interruptions.c ****     }
1938:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6351              		.loc 1 1938 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 149


 6352 014a 4D4B     		ldr	r3, .L566+64
 6353 014c 1B68     		ldr	r3, [r3]
 6354 014e 4D4A     		ldr	r2, .L566+68
 6355 0150 1360     		str	r3, [r2]
1939:..\src/interruptions.c ****   
1940:..\src/interruptions.c ****     
1941:..\src/interruptions.c ****     // VOLTAGE READING
1942:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1943:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1944:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1945:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1946:..\src/interruptions.c ****     
1947:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6356              		.loc 1 1947 0
 6357 0152 4E4B     		ldr	r3, .L566+76
 6358 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6359 0156 002B     		cmp	r3, #0
 6360 0158 4DD0     		beq	.L415
 6361              		.loc 1 1947 0 is_stmt 0 discriminator 1
 6362 015a 4D4B     		ldr	r3, .L566+80
 6363 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6364 015e 002B     		cmp	r3, #0
 6365 0160 49D0     		beq	.L415
1948:..\src/interruptions.c ****         count = count + 1;
 6366              		.loc 1 1948 0 is_stmt 1
 6367 0162 4C4B     		ldr	r3, .L566+84
 6368 0164 1B88     		ldrh	r3, [r3]
 6369 0166 0133     		adds	r3, r3, #1
 6370 0168 9AB2     		uxth	r2, r3
 6371 016a 4A4B     		ldr	r3, .L566+84
 6372 016c 1A80     		strh	r2, [r3]	@ movhi
1949:..\src/interruptions.c ****         
1950:..\src/interruptions.c ****         if (count == 1000){
 6373              		.loc 1 1950 0
 6374 016e 494B     		ldr	r3, .L566+84
 6375 0170 1B88     		ldrh	r3, [r3]
 6376 0172 B3F57A7F 		cmp	r3, #1000
 6377 0176 3ED1     		bne	.L415
1951:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6378              		.loc 1 1951 0
 6379 0178 474B     		ldr	r3, .L566+88
 6380 017a 0022     		movs	r2, #0
 6381 017c 1A70     		strb	r2, [r3]
 6382 017e 33E0     		b	.L416
 6383              	.L420:
1952:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6384              		.loc 1 1952 0
 6385 0180 454B     		ldr	r3, .L566+88
 6386 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6387 0184 1A46     		mov	r2, r3
 6388 0186 3B4B     		ldr	r3, .L566+52
 6389 0188 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6390 018c 42F22732 		movw	r2, #8999
 6391 0190 9342     		cmp	r3, r2
 6392 0192 08DC     		bgt	.L417
1953:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6393              		.loc 1 1953 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 150


 6394 0194 404B     		ldr	r3, .L566+88
 6395 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6396 0198 1946     		mov	r1, r3
 6397 019a 404B     		ldr	r3, .L566+92
 6398 019c 4FF4FA52 		mov	r2, #8000
 6399 01a0 43F82120 		str	r2, [r3, r1, lsl #2]
 6400 01a4 1AE0     		b	.L418
 6401              	.L417:
1954:..\src/interruptions.c ****                 }
1955:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1956:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6402              		.loc 1 1956 0
 6403 01a6 3C4B     		ldr	r3, .L566+88
 6404 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6405 01aa 1A46     		mov	r2, r3
 6406 01ac 314B     		ldr	r3, .L566+52
 6407 01ae 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6408 01b2 43F2C722 		movw	r2, #12999
 6409 01b6 9342     		cmp	r3, r2
 6410 01b8 08DC     		bgt	.L419
1957:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6411              		.loc 1 1957 0
 6412 01ba 374B     		ldr	r3, .L566+88
 6413 01bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6414 01be 1946     		mov	r1, r3
 6415 01c0 364B     		ldr	r3, .L566+92
 6416 01c2 42F6E062 		movw	r2, #12000
 6417 01c6 43F82120 		str	r2, [r3, r1, lsl #2]
 6418 01ca 07E0     		b	.L418
 6419              	.L419:
1958:..\src/interruptions.c ****                     }
1959:..\src/interruptions.c ****                     else
1960:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6420              		.loc 1 1960 0
 6421 01cc 324B     		ldr	r3, .L566+88
 6422 01ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6423 01d0 1946     		mov	r1, r3
 6424 01d2 324B     		ldr	r3, .L566+92
 6425 01d4 45F6C052 		movw	r2, #24000
 6426 01d8 43F82120 		str	r2, [r3, r1, lsl #2]
 6427              	.L418:
1951:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6428              		.loc 1 1951 0 discriminator 2
 6429 01dc 2E4B     		ldr	r3, .L566+88
 6430 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6431 01e0 0133     		adds	r3, r3, #1
 6432 01e2 DAB2     		uxtb	r2, r3
 6433 01e4 2C4B     		ldr	r3, .L566+88
 6434 01e6 1A70     		strb	r2, [r3]
 6435              	.L416:
1951:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6436              		.loc 1 1951 0 is_stmt 0 discriminator 1
 6437 01e8 2B4B     		ldr	r3, .L566+88
 6438 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6439 01ec 012B     		cmp	r3, #1
 6440 01ee C7D9     		bls	.L420
1961:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 151


1962:..\src/interruptions.c ****             }
1963:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6441              		.loc 1 1963 0 is_stmt 1
 6442 01f0 264B     		ldr	r3, .L566+76
 6443 01f2 0022     		movs	r2, #0
 6444 01f4 1A70     		strb	r2, [r3]
 6445              	.L415:
1964:..\src/interruptions.c ****         }
1965:..\src/interruptions.c ****     }
1966:..\src/interruptions.c **** 
1967:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1968:..\src/interruptions.c **** 
1969:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6446              		.loc 1 1969 0
 6447 01f6 1F4B     		ldr	r3, .L566+52
 6448 01f8 1B68     		ldr	r3, [r3]
 6449 01fa 41F66312 		movw	r2, #6499
 6450 01fe 9342     		cmp	r3, r2
 6451 0200 00F30681 		bgt	.L421
 6452              		.loc 1 1969 0 is_stmt 0 discriminator 1
 6453 0204 1A4B     		ldr	r3, .L566+48
 6454 0206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6455 0208 042B     		cmp	r3, #4
 6456 020a 06D9     		bls	.L422
 6457              		.loc 1 1969 0 discriminator 2
 6458 020c 194B     		ldr	r3, .L566+52
 6459 020e 5B68     		ldr	r3, [r3, #4]
 6460 0210 41F66312 		movw	r2, #6499
 6461 0214 9342     		cmp	r3, r2
 6462 0216 00F3FB80 		bgt	.L421
 6463              	.L422:
1970:..\src/interruptions.c ****         // PSoC is powered through uUSB
1971:..\src/interruptions.c ****         
1972:..\src/interruptions.c ****         tension_valid = FALSE;
 6464              		.loc 1 1972 0 is_stmt 1
 6465 021a 1D4B     		ldr	r3, .L566+80
 6466 021c 0022     		movs	r2, #0
 6467 021e 1A70     		strb	r2, [r3]
1973:..\src/interruptions.c ****             
1974:..\src/interruptions.c ****         if (interrupt_flag){
 6468              		.loc 1 1974 0
 6469 0220 0D4B     		ldr	r3, .L566+24
 6470 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6471 0224 002B     		cmp	r3, #0
 6472 0226 04D0     		beq	.L423
1975:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6473              		.loc 1 1975 0
 6474 0228 0B4B     		ldr	r3, .L566+24
 6475 022a 0022     		movs	r2, #0
 6476 022c 1A70     		strb	r2, [r3]
1976:..\src/interruptions.c ****             interrupt_manager();
 6477              		.loc 1 1976 0
 6478 022e FFF7FEFF 		bl	interrupt_manager
 6479              	.L423:
1977:..\src/interruptions.c ****         }
1978:..\src/interruptions.c ****         
1979:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 152


 6480              		.loc 1 1979 0
 6481 0232 194B     		ldr	r3, .L566+88
 6482 0234 0022     		movs	r2, #0
 6483 0236 1A70     		strb	r2, [r3]
 6484 0238 B4E0     		b	.L424
 6485              	.L567:
 6486 023a 00BFAFF3 		.align	3
 6486      0080
 6487              	.L566:
 6488 0240 F10F5B7A 		.word	2052788209
 6489 0244 34D5633F 		.word	1063507252
 6490 0248 CDCCCCCC 		.word	-858993459
 6491 024c CC545940 		.word	1079596236
 6492 0250 00000000 		.word	0
 6493 0254 0088B340 		.word	1085507584
 6494 0258 00000000 		.word	interrupt_flag
 6495 025c 00000000 		.word	c_mem
 6496 0260 00000000 		.word	ADC_buf
 6497 0264 00000000 		.word	g_fb_meas
 6498 0268 0000B040 		.word	1085276160
 6499 026c 00000000 		.word	flag_master
 6500 0270 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6501 0274 00000000 		.word	dev_tension
 6502 0278 F1197605 		.word	91625969
 6503 027c 00000000 		.word	filt_detect_pc
 6504 0280 00000000 		.word	detect_power_cycle
 6505 0284 08000000 		.word	detect_power_cycle_prev.10429
 6506 0288 00000000 		.word	g_mem
 6507 028c 0C000000 		.word	first_tension_valid.10428
 6508 0290 00000000 		.word	tension_valid
 6509 0294 74010000 		.word	count.10430
 6510 0298 76010000 		.word	idx.10432
 6511 029c 00000000 		.word	pow_tension
 6512              	.L427:
1980:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6513              		.loc 1 1980 0
 6514 02a0 9F4B     		ldr	r3, .L568
 6515 02a2 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6516 02a6 002B     		cmp	r3, #0
 6517 02a8 59D0     		beq	.L425
1981:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6518              		.loc 1 1981 0
 6519 02aa 9E4B     		ldr	r3, .L568+4
 6520 02ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6521 02ae 1946     		mov	r1, r3
 6522 02b0 9B4A     		ldr	r2, .L568
 6523 02b2 0B46     		mov	r3, r1
 6524 02b4 DB00     		lsls	r3, r3, #3
 6525 02b6 5B1A     		subs	r3, r3, r1
 6526 02b8 1B01     		lsls	r3, r3, #4
 6527 02ba 1344     		add	r3, r3, r2
 6528 02bc 03F58773 		add	r3, r3, #270
 6529 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6530 02c2 022B     		cmp	r3, #2
 6531 02c4 37D0     		beq	.L426
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6532              		.loc 1 1982 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 153


 6533 02c6 974B     		ldr	r3, .L568+4
 6534 02c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6535 02ca 1946     		mov	r1, r3
 6536 02cc 944A     		ldr	r2, .L568
 6537 02ce 0B46     		mov	r3, r1
 6538 02d0 DB00     		lsls	r3, r3, #3
 6539 02d2 5B1A     		subs	r3, r3, r1
 6540 02d4 1B01     		lsls	r3, r3, #4
 6541 02d6 1344     		add	r3, r3, r2
 6542 02d8 03F58773 		add	r3, r3, #270
 6543 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1981:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6544              		.loc 1 1981 0 discriminator 1
 6545 02de 032B     		cmp	r3, #3
 6546 02e0 29D0     		beq	.L426
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6547              		.loc 1 1983 0
 6548 02e2 904B     		ldr	r3, .L568+4
 6549 02e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6550 02e6 1946     		mov	r1, r3
 6551 02e8 8D4A     		ldr	r2, .L568
 6552 02ea 0B46     		mov	r3, r1
 6553 02ec DB00     		lsls	r3, r3, #3
 6554 02ee 5B1A     		subs	r3, r3, r1
 6555 02f0 1B01     		lsls	r3, r3, #4
 6556 02f2 1344     		add	r3, r3, r2
 6557 02f4 03F58773 		add	r3, r3, #270
 6558 02f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6559              		.loc 1 1982 0
 6560 02fa 042B     		cmp	r3, #4
 6561 02fc 1BD0     		beq	.L426
1984:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6562              		.loc 1 1984 0
 6563 02fe 894B     		ldr	r3, .L568+4
 6564 0300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6565 0302 1946     		mov	r1, r3
 6566 0304 864A     		ldr	r2, .L568
 6567 0306 0B46     		mov	r3, r1
 6568 0308 DB00     		lsls	r3, r3, #3
 6569 030a 5B1A     		subs	r3, r3, r1
 6570 030c 1B01     		lsls	r3, r3, #4
 6571 030e 1344     		add	r3, r3, r2
 6572 0310 03F58773 		add	r3, r3, #270
 6573 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6574              		.loc 1 1983 0
 6575 0316 052B     		cmp	r3, #5
 6576 0318 0DD0     		beq	.L426
1985:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6577              		.loc 1 1985 0
 6578 031a 824B     		ldr	r3, .L568+4
 6579 031c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6580 031e 1946     		mov	r1, r3
 6581 0320 7F4A     		ldr	r2, .L568
 6582 0322 0B46     		mov	r3, r1
 6583 0324 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 154


 6584 0326 5B1A     		subs	r3, r3, r1
 6585 0328 1B01     		lsls	r3, r3, #4
 6586 032a 1344     		add	r3, r3, r2
 6587 032c 03F58773 		add	r3, r3, #270
 6588 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1984:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6589              		.loc 1 1984 0
 6590 0332 072B     		cmp	r3, #7
 6591 0334 13D1     		bne	.L425
 6592              	.L426:
1986:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6593              		.loc 1 1986 0
 6594 0336 7B4B     		ldr	r3, .L568+4
 6595 0338 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6596 033a 7B4A     		ldr	r2, .L568+8
 6597 033c 1B01     		lsls	r3, r3, #4
 6598 033e 1344     		add	r3, r3, r2
 6599 0340 0C33     		adds	r3, r3, #12
 6600 0342 0022     		movs	r2, #0
 6601 0344 1A70     		strb	r2, [r3]
1987:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6602              		.loc 1 1987 0
 6603 0346 774B     		ldr	r3, .L568+4
 6604 0348 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6605 034a 764B     		ldr	r3, .L568+4
 6606 034c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6607 034e 764A     		ldr	r2, .L568+8
 6608 0350 1B01     		lsls	r3, r3, #4
 6609 0352 1344     		add	r3, r3, r2
 6610 0354 0C33     		adds	r3, r3, #12
 6611 0356 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6612 0358 1946     		mov	r1, r3
 6613 035a FFF7FEFF 		bl	enable_motor
 6614              	.L425:
1988:..\src/interruptions.c ****                     
1989:..\src/interruptions.c ****                 }
1990:..\src/interruptions.c ****             }
1991:..\src/interruptions.c **** 
1992:..\src/interruptions.c ****             // Assign dev_tension and reset current
1993:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6615              		.loc 1 1993 0 discriminator 2
 6616 035e 714B     		ldr	r3, .L568+4
 6617 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6618 0362 1946     		mov	r1, r3
 6619 0364 714B     		ldr	r3, .L568+12
 6620 0366 41F28832 		movw	r2, #5000
 6621 036a 43F82120 		str	r2, [r3, r1, lsl #2]
1994:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6622              		.loc 1 1994 0 discriminator 2
 6623 036e 6D4B     		ldr	r3, .L568+4
 6624 0370 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6625 0372 1946     		mov	r1, r3
 6626 0374 6E4A     		ldr	r2, .L568+16
 6627 0376 0B46     		mov	r3, r1
 6628 0378 DB00     		lsls	r3, r3, #3
 6629 037a 5B1A     		subs	r3, r3, r1
 6630 037c 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 155


 6631 037e 1344     		add	r3, r3, r2
 6632 0380 03F58873 		add	r3, r3, #272
 6633 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6634 0386 1946     		mov	r1, r3
 6635 0388 6A4A     		ldr	r2, .L568+20
 6636 038a 3423     		movs	r3, #52
 6637 038c 03FB01F3 		mul	r3, r3, r1
 6638 0390 1344     		add	r3, r3, r2
 6639 0392 0C33     		adds	r3, r3, #12
 6640 0394 0022     		movs	r2, #0
 6641 0396 1A60     		str	r2, [r3]
1979:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6642              		.loc 1 1979 0 discriminator 2
 6643 0398 624B     		ldr	r3, .L568+4
 6644 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6645 039c 0133     		adds	r3, r3, #1
 6646 039e DAB2     		uxtb	r2, r3
 6647 03a0 604B     		ldr	r3, .L568+4
 6648 03a2 1A70     		strb	r2, [r3]
 6649              	.L424:
1979:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6650              		.loc 1 1979 0 is_stmt 0 discriminator 1
 6651 03a4 5F4B     		ldr	r3, .L568+4
 6652 03a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6653 03a8 012B     		cmp	r3, #1
 6654 03aa 7FF679AF 		bls	.L427
1995:..\src/interruptions.c ****         }
1996:..\src/interruptions.c ****         
1997:..\src/interruptions.c ****         // Reset emg
1998:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6655              		.loc 1 1998 0 is_stmt 1
 6656 03ae 5D4B     		ldr	r3, .L568+4
 6657 03b0 0022     		movs	r2, #0
 6658 03b2 1A70     		strb	r2, [r3]
 6659 03b4 0CE0     		b	.L428
 6660              	.L429:
1999:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6661              		.loc 1 1999 0 discriminator 3
 6662 03b6 5B4B     		ldr	r3, .L568+4
 6663 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6664 03ba 1946     		mov	r1, r3
 6665 03bc 5E4B     		ldr	r3, .L568+24
 6666 03be 0022     		movs	r2, #0
 6667 03c0 43F82120 		str	r2, [r3, r1, lsl #2]
1998:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6668              		.loc 1 1998 0 discriminator 3
 6669 03c4 574B     		ldr	r3, .L568+4
 6670 03c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6671 03c8 0133     		adds	r3, r3, #1
 6672 03ca DAB2     		uxtb	r2, r3
 6673 03cc 554B     		ldr	r3, .L568+4
 6674 03ce 1A70     		strb	r2, [r3]
 6675              	.L428:
1998:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6676              		.loc 1 1998 0 is_stmt 0 discriminator 1
 6677 03d0 544B     		ldr	r3, .L568+4
 6678 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 156


 6679 03d4 012B     		cmp	r3, #1
 6680 03d6 EED9     		bls	.L429
2000:..\src/interruptions.c ****         }
2001:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6681              		.loc 1 2001 0 is_stmt 1
 6682 03d8 524B     		ldr	r3, .L568+4
 6683 03da 0022     		movs	r2, #0
 6684 03dc 1A70     		strb	r2, [r3]
 6685 03de 0CE0     		b	.L430
 6686              	.L432:
2002:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6687              		.loc 1 2002 0 discriminator 4
 6688 03e0 504B     		ldr	r3, .L568+4
 6689 03e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6690 03e4 544A     		ldr	r2, .L568+24
 6691 03e6 0233     		adds	r3, r3, #2
 6692 03e8 0021     		movs	r1, #0
 6693 03ea 42F82310 		str	r1, [r2, r3, lsl #2]
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6694              		.loc 1 2001 0 discriminator 4
 6695 03ee 4D4B     		ldr	r3, .L568+4
 6696 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6697 03f2 0133     		adds	r3, r3, #1
 6698 03f4 DAB2     		uxtb	r2, r3
 6699 03f6 4B4B     		ldr	r3, .L568+4
 6700 03f8 1A70     		strb	r2, [r3]
 6701              	.L430:
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6702              		.loc 1 2001 0 is_stmt 0 discriminator 1
 6703 03fa 494B     		ldr	r3, .L568
 6704 03fc 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6705 0400 002B     		cmp	r3, #0
 6706 0402 00F04D82 		beq	.L548
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6707              		.loc 1 2001 0 discriminator 3
 6708 0406 474B     		ldr	r3, .L568+4
 6709 0408 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6710 040a 052B     		cmp	r3, #5
 6711 040c E8D9     		bls	.L432
1969:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6712              		.loc 1 1969 0 is_stmt 1
 6713 040e 47E2     		b	.L548
 6714              	.L421:
2003:..\src/interruptions.c ****         }
2004:..\src/interruptions.c ****         
2005:..\src/interruptions.c ****     }
2006:..\src/interruptions.c ****     else {
2007:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2008:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2009:..\src/interruptions.c ****         
2010:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2011:..\src/interruptions.c ****         
2012:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6715              		.loc 1 2012 0
 6716 0410 4A4B     		ldr	r3, .L568+28
 6717 0412 1B68     		ldr	r3, [r3]
 6718 0414 B3F57A7F 		cmp	r3, #1000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 157


 6719 0418 0DD1     		bne	.L434
 6720              		.loc 1 2012 0 is_stmt 0 discriminator 1
 6721 041a 494B     		ldr	r3, .L568+32
 6722 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6723 041e 002B     		cmp	r3, #0
 6724 0420 09D1     		bne	.L434
2013:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2014:..\src/interruptions.c ****             tension_valid = TRUE;   
 6725              		.loc 1 2014 0 is_stmt 1
 6726 0422 474B     		ldr	r3, .L568+32
 6727 0424 0122     		movs	r2, #1
 6728 0426 1A70     		strb	r2, [r3]
2015:..\src/interruptions.c ****             count = 0;
 6729              		.loc 1 2015 0
 6730 0428 464B     		ldr	r3, .L568+36
 6731 042a 0022     		movs	r2, #0
 6732 042c 1A80     		strh	r2, [r3]	@ movhi
2016:..\src/interruptions.c ****             v_count = 0;            
 6733              		.loc 1 2016 0
 6734 042e 434B     		ldr	r3, .L568+28
 6735 0430 0022     		movs	r2, #0
 6736 0432 1A60     		str	r2, [r3]
 6737 0434 2CE0     		b	.L435
 6738              	.L434:
2017:..\src/interruptions.c ****         }
2018:..\src/interruptions.c ****         else {  
2019:..\src/interruptions.c ****             // wait for battery voltage stabilization
2020:..\src/interruptions.c ****             if (v_count < 1000) {
 6739              		.loc 1 2020 0
 6740 0436 414B     		ldr	r3, .L568+28
 6741 0438 1B68     		ldr	r3, [r3]
 6742 043a B3F57A7F 		cmp	r3, #1000
 6743 043e 04D2     		bcs	.L436
2021:..\src/interruptions.c ****                 v_count = v_count + 1;
 6744              		.loc 1 2021 0
 6745 0440 3E4B     		ldr	r3, .L568+28
 6746 0442 1B68     		ldr	r3, [r3]
 6747 0444 0133     		adds	r3, r3, #1
 6748 0446 3D4A     		ldr	r2, .L568+28
 6749 0448 1360     		str	r3, [r2]
 6750              	.L436:
2022:..\src/interruptions.c ****             }
2023:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6751              		.loc 1 2023 0
 6752 044a 364B     		ldr	r3, .L568+4
 6753 044c 0022     		movs	r2, #0
 6754 044e 1A70     		strb	r2, [r3]
 6755 0450 1AE0     		b	.L437
 6756              	.L438:
2024:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6757              		.loc 1 2024 0 discriminator 3
 6758 0452 344B     		ldr	r3, .L568+4
 6759 0454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6760 0456 1C46     		mov	r4, r3
 6761 0458 324B     		ldr	r3, .L568+4
 6762 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6763 045c 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 158


 6764 045e 334B     		ldr	r3, .L568+12
 6765 0460 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6766 0464 2F4B     		ldr	r3, .L568+4
 6767 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6768 0468 DB00     		lsls	r3, r3, #3
 6769 046a 374A     		ldr	r2, .L568+40
 6770 046c 1344     		add	r3, r3, r2
 6771 046e 1946     		mov	r1, r3
 6772 0470 FFF7FEFF 		bl	filter
 6773 0474 0246     		mov	r2, r0
 6774 0476 354B     		ldr	r3, .L568+44
 6775 0478 43F82420 		str	r2, [r3, r4, lsl #2]
2023:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6776              		.loc 1 2023 0 discriminator 3
 6777 047c 294B     		ldr	r3, .L568+4
 6778 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6779 0480 0133     		adds	r3, r3, #1
 6780 0482 DAB2     		uxtb	r2, r3
 6781 0484 274B     		ldr	r3, .L568+4
 6782 0486 1A70     		strb	r2, [r3]
 6783              	.L437:
2023:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6784              		.loc 1 2023 0 is_stmt 0 discriminator 1
 6785 0488 264B     		ldr	r3, .L568+4
 6786 048a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6787 048c 012B     		cmp	r3, #1
 6788 048e E0D9     		bls	.L438
 6789              	.L435:
2025:..\src/interruptions.c ****             }
2026:..\src/interruptions.c ****         }
2027:..\src/interruptions.c **** 
2028:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6790              		.loc 1 2028 0 is_stmt 1
 6791 0490 244B     		ldr	r3, .L568+4
 6792 0492 0022     		movs	r2, #0
 6793 0494 1A70     		strb	r2, [r3]
 6794 0496 17E0     		b	.L439
 6795              	.L441:
2029:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6796              		.loc 1 2029 0
 6797 0498 224B     		ldr	r3, .L568+4
 6798 049a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6799 049c 1946     		mov	r1, r3
 6800 049e 244A     		ldr	r2, .L568+16
 6801 04a0 0B46     		mov	r3, r1
 6802 04a2 DB00     		lsls	r3, r3, #3
 6803 04a4 5B1A     		subs	r3, r3, r1
 6804 04a6 1B01     		lsls	r3, r3, #4
 6805 04a8 1344     		add	r3, r3, r2
 6806 04aa E133     		adds	r3, r3, #225
 6807 04ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6808 04ae 002B     		cmp	r3, #0
 6809 04b0 04D0     		beq	.L440
2030:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6810              		.loc 1 2030 0
 6811 04b2 1C4B     		ldr	r3, .L568+4
 6812 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 159


 6813 04b6 1846     		mov	r0, r3
 6814 04b8 FFF7FEFF 		bl	pwm_limit_search
 6815              	.L440:
2028:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6816              		.loc 1 2028 0 discriminator 2
 6817 04bc 194B     		ldr	r3, .L568+4
 6818 04be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6819 04c0 0133     		adds	r3, r3, #1
 6820 04c2 DAB2     		uxtb	r2, r3
 6821 04c4 174B     		ldr	r3, .L568+4
 6822 04c6 1A70     		strb	r2, [r3]
 6823              	.L439:
2028:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6824              		.loc 1 2028 0 is_stmt 0 discriminator 1
 6825 04c8 164B     		ldr	r3, .L568+4
 6826 04ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6827 04cc 012B     		cmp	r3, #1
 6828 04ce E3D9     		bls	.L441
2031:..\src/interruptions.c ****         }
2032:..\src/interruptions.c ****         
2033:..\src/interruptions.c ****         // Filter and Set currents
2034:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6829              		.loc 1 2034 0 is_stmt 1
 6830 04d0 174B     		ldr	r3, .L568+16
 6831 04d2 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6832 04d6 002B     		cmp	r3, #0
 6833 04d8 40D1     		bne	.L442
2035:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6834              		.loc 1 2035 0
 6835 04da 154B     		ldr	r3, .L568+16
 6836 04dc 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6837 04e0 1C46     		mov	r4, r3
 6838 04e2 1B4B     		ldr	r3, .L568+48
 6839 04e4 B3F90230 		ldrsh	r3, [r3, #2]
 6840 04e8 A3F5CE63 		sub	r3, r3, #1648
 6841 04ec 45F66A02 		movw	r2, #22634
 6842 04f0 02FB03F3 		mul	r3, r2, r3
 6843 04f4 5B13     		asrs	r3, r3, #13
 6844 04f6 1BB2     		sxth	r3, r3
 6845 04f8 1A46     		mov	r2, r3
 6846 04fa 164B     		ldr	r3, .L568+52
 6847 04fc 93F90030 		ldrsb	r3, [r3]
 6848 0500 03FB02F3 		mul	r3, r3, r2
 6849 0504 1449     		ldr	r1, .L568+56
 6850 0506 1846     		mov	r0, r3
 6851 0508 FFF7FEFF 		bl	filter
 6852 050c 0146     		mov	r1, r0
 6853 050e 094A     		ldr	r2, .L568+20
 6854 0510 3423     		movs	r3, #52
 6855 0512 03FB04F3 		mul	r3, r3, r4
 6856 0516 1344     		add	r3, r3, r2
 6857 0518 0C33     		adds	r3, r3, #12
 6858 051a 1960     		str	r1, [r3]
 6859 051c 61E0     		b	.L443
 6860              	.L569:
 6861 051e 00BF     		.align	2
 6862              	.L568:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 160


 6863 0520 00000000 		.word	c_mem
 6864 0524 76010000 		.word	idx.10432
 6865 0528 00000000 		.word	g_ref
 6866 052c 00000000 		.word	dev_tension
 6867 0530 00000000 		.word	g_mem
 6868 0534 00000000 		.word	g_meas
 6869 0538 00000000 		.word	g_adc_meas
 6870 053c 78010000 		.word	v_count.10431
 6871 0540 00000000 		.word	tension_valid
 6872 0544 74010000 		.word	count.10430
 6873 0548 00000000 		.word	filt_v
 6874 054c 00000000 		.word	dev_tension_f
 6875 0550 00000000 		.word	ADC_buf
 6876 0554 00000000 		.word	pwm_sign
 6877 0558 00000000 		.word	filt_i
 6878              	.L442:
2036:..\src/interruptions.c ****         } 
2037:..\src/interruptions.c ****         else {
2038:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 6879              		.loc 1 2038 0
 6880 055c C54B     		ldr	r3, .L570
 6881 055e 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6882 0562 022B     		cmp	r3, #2
 6883 0564 21D1     		bne	.L444
2039:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2040:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 6884              		.loc 1 2040 0
 6885 0566 C34B     		ldr	r3, .L570
 6886 0568 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6887 056c 1C46     		mov	r4, r3
 6888 056e C24B     		ldr	r3, .L570+4
 6889 0570 B3F90230 		ldrsh	r3, [r3, #2]
 6890 0574 A3F28F63 		subw	r3, r3, #1679
 6891 0578 45F65072 		movw	r2, #24400
 6892 057c 02FB03F3 		mul	r3, r2, r3
 6893 0580 5B13     		asrs	r3, r3, #13
 6894 0582 1BB2     		sxth	r3, r3
 6895 0584 1A46     		mov	r2, r3
 6896 0586 BD4B     		ldr	r3, .L570+8
 6897 0588 93F90030 		ldrsb	r3, [r3]
 6898 058c 03FB02F3 		mul	r3, r3, r2
 6899 0590 BB49     		ldr	r1, .L570+12
 6900 0592 1846     		mov	r0, r3
 6901 0594 FFF7FEFF 		bl	filter
 6902 0598 0146     		mov	r1, r0
 6903 059a BA4A     		ldr	r2, .L570+16
 6904 059c 3423     		movs	r3, #52
 6905 059e 03FB04F3 		mul	r3, r3, r4
 6906 05a2 1344     		add	r3, r3, r2
 6907 05a4 0C33     		adds	r3, r3, #12
 6908 05a6 1960     		str	r1, [r3]
 6909 05a8 1BE0     		b	.L443
 6910              	.L444:
2041:..\src/interruptions.c ****             } else { // [GS]
2042:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 6911              		.loc 1 2042 0
 6912 05aa B24B     		ldr	r3, .L570
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 161


 6913 05ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6914 05b0 1846     		mov	r0, r3
 6915 05b2 B14B     		ldr	r3, .L570+4
 6916 05b4 B3F90230 		ldrsh	r3, [r3, #2]
 6917 05b8 A3F26362 		subw	r2, r3, #1635
 6918 05bc 1346     		mov	r3, r2
 6919 05be 1B01     		lsls	r3, r3, #4
 6920 05c0 9B1A     		subs	r3, r3, r2
 6921 05c2 5B01     		lsls	r3, r3, #5
 6922 05c4 1B11     		asrs	r3, r3, #4
 6923 05c6 1BB2     		sxth	r3, r3
 6924 05c8 1A46     		mov	r2, r3
 6925 05ca AC4B     		ldr	r3, .L570+8
 6926 05cc 93F90030 		ldrsb	r3, [r3]
 6927 05d0 03FB02F2 		mul	r2, r3, r2
 6928 05d4 AB49     		ldr	r1, .L570+16
 6929 05d6 3423     		movs	r3, #52
 6930 05d8 03FB00F3 		mul	r3, r3, r0
 6931 05dc 0B44     		add	r3, r3, r1
 6932 05de 0C33     		adds	r3, r3, #12
 6933 05e0 1A60     		str	r2, [r3]
 6934              	.L443:
2043:..\src/interruptions.c ****             }
2044:..\src/interruptions.c ****         }
2045:..\src/interruptions.c ****         
2046:..\src/interruptions.c **** 
2047:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2048:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6935              		.loc 1 2048 0
 6936 05e2 A44B     		ldr	r3, .L570
 6937 05e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6938 05e8 1D46     		mov	r5, r3
 6939 05ea A24B     		ldr	r3, .L570
 6940 05ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6941 05f0 1946     		mov	r1, r3
 6942 05f2 A44A     		ldr	r2, .L570+16
 6943 05f4 3423     		movs	r3, #52
 6944 05f6 03FB01F3 		mul	r3, r3, r1
 6945 05fa 1344     		add	r3, r3, r2
 6946 05fc 0C33     		adds	r3, r3, #12
 6947 05fe 1C68     		ldr	r4, [r3]
 6948 0600 9C4B     		ldr	r3, .L570
 6949 0602 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6950 0606 1946     		mov	r1, r3
 6951 0608 9E4A     		ldr	r2, .L570+16
 6952 060a 3423     		movs	r3, #52
 6953 060c 03FB01F3 		mul	r3, r3, r1
 6954 0610 1344     		add	r3, r3, r2
 6955 0612 1A68     		ldr	r2, [r3]
 6956 0614 974B     		ldr	r3, .L570
 6957 0616 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6958 061a 1846     		mov	r0, r3
 6959 061c 9549     		ldr	r1, .L570
 6960 061e 0346     		mov	r3, r0
 6961 0620 5B00     		lsls	r3, r3, #1
 6962 0622 0344     		add	r3, r3, r0
 6963 0624 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 162


 6964 0626 0B44     		add	r3, r3, r1
 6965 0628 03F29513 		addw	r3, r3, #405
 6966 062c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6967 062e 42FA03F6 		asr	r6, r2, r3
 6968 0632 904B     		ldr	r3, .L570
 6969 0634 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6970 0638 1946     		mov	r1, r3
 6971 063a 924A     		ldr	r2, .L570+16
 6972 063c 3423     		movs	r3, #52
 6973 063e 03FB01F3 		mul	r3, r3, r1
 6974 0642 1344     		add	r3, r3, r2
 6975 0644 1C33     		adds	r3, r3, #28
 6976 0646 1A68     		ldr	r2, [r3]
 6977 0648 8A4B     		ldr	r3, .L570
 6978 064a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6979 064e 1846     		mov	r0, r3
 6980 0650 8849     		ldr	r1, .L570
 6981 0652 0346     		mov	r3, r0
 6982 0654 5B00     		lsls	r3, r3, #1
 6983 0656 0344     		add	r3, r3, r0
 6984 0658 1B01     		lsls	r3, r3, #4
 6985 065a 0B44     		add	r3, r3, r1
 6986 065c 03F29513 		addw	r3, r3, #405
 6987 0660 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6988 0662 42FA03FE 		asr	lr, r2, r3
 6989 0666 884B     		ldr	r3, .L570+20
 6990 0668 1A68     		ldr	r2, [r3]
 6991 066a 824B     		ldr	r3, .L570
 6992 066c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6993 0670 1846     		mov	r0, r3
 6994 0672 8049     		ldr	r1, .L570
 6995 0674 0346     		mov	r3, r0
 6996 0676 5B00     		lsls	r3, r3, #1
 6997 0678 0344     		add	r3, r3, r0
 6998 067a 1B01     		lsls	r3, r3, #4
 6999 067c 0B44     		add	r3, r3, r1
 7000 067e 03F29513 		addw	r3, r3, #405
 7001 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7002 0684 42FA03F3 		asr	r3, r2, r3
 7003 0688 7246     		mov	r2, lr
 7004 068a 3146     		mov	r1, r6
 7005 068c 0020     		movs	r0, #0
 7006 068e FFF7FEFF 		bl	curr_estim
 7007 0692 0346     		mov	r3, r0
 7008 0694 E31A     		subs	r3, r4, r3
 7009 0696 7D49     		ldr	r1, .L570+24
 7010 0698 1846     		mov	r0, r3
 7011 069a FFF7FEFF 		bl	filter
 7012 069e 0346     		mov	r3, r0
 7013 06a0 1BB2     		sxth	r3, r3
 7014 06a2 1946     		mov	r1, r3
 7015 06a4 774A     		ldr	r2, .L570+16
 7016 06a6 3423     		movs	r3, #52
 7017 06a8 03FB05F3 		mul	r3, r3, r5
 7018 06ac 1344     		add	r3, r3, r2
 7019 06ae 1033     		adds	r3, r3, #16
 7020 06b0 1960     		str	r1, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 163


2049:..\src/interruptions.c ****         
2050:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2051:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7021              		.loc 1 2051 0
 7022 06b2 774B     		ldr	r3, .L570+28
 7023 06b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7024 06b6 042B     		cmp	r3, #4
 7025 06b8 40F2D280 		bls	.L445
2052:..\src/interruptions.c ****             // Filter and Set currents
2053:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 7026              		.loc 1 2053 0
 7027 06bc 6D4B     		ldr	r3, .L570
 7028 06be 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7029 06c2 002B     		cmp	r3, #0
 7030 06c4 21D1     		bne	.L446
2054:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7031              		.loc 1 2054 0
 7032 06c6 6B4B     		ldr	r3, .L570
 7033 06c8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7034 06cc 1C46     		mov	r4, r3
 7035 06ce 6A4B     		ldr	r3, .L570+4
 7036 06d0 B3F90A30 		ldrsh	r3, [r3, #10]
 7037 06d4 A3F5CE63 		sub	r3, r3, #1648
 7038 06d8 45F66A02 		movw	r2, #22634
 7039 06dc 02FB03F3 		mul	r3, r2, r3
 7040 06e0 5B13     		asrs	r3, r3, #13
 7041 06e2 1BB2     		sxth	r3, r3
 7042 06e4 1A46     		mov	r2, r3
 7043 06e6 654B     		ldr	r3, .L570+8
 7044 06e8 93F90130 		ldrsb	r3, [r3, #1]
 7045 06ec 03FB02F3 		mul	r3, r3, r2
 7046 06f0 6849     		ldr	r1, .L570+32
 7047 06f2 1846     		mov	r0, r3
 7048 06f4 FFF7FEFF 		bl	filter
 7049 06f8 0146     		mov	r1, r0
 7050 06fa 624A     		ldr	r2, .L570+16
 7051 06fc 3423     		movs	r3, #52
 7052 06fe 03FB04F3 		mul	r3, r3, r4
 7053 0702 1344     		add	r3, r3, r2
 7054 0704 0C33     		adds	r3, r3, #12
 7055 0706 1960     		str	r1, [r3]
 7056 0708 42E0     		b	.L447
 7057              	.L446:
2055:..\src/interruptions.c ****             } 
2056:..\src/interruptions.c ****             else {
2057:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7058              		.loc 1 2057 0
 7059 070a 5A4B     		ldr	r3, .L570
 7060 070c 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7061 0710 022B     		cmp	r3, #2
 7062 0712 21D1     		bne	.L448
2058:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2059:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7063              		.loc 1 2059 0
 7064 0714 574B     		ldr	r3, .L570
 7065 0716 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7066 071a 1C46     		mov	r4, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 164


 7067 071c 564B     		ldr	r3, .L570+4
 7068 071e B3F90A30 		ldrsh	r3, [r3, #10]
 7069 0722 A3F28F63 		subw	r3, r3, #1679
 7070 0726 45F65072 		movw	r2, #24400
 7071 072a 02FB03F3 		mul	r3, r2, r3
 7072 072e 5B13     		asrs	r3, r3, #13
 7073 0730 1BB2     		sxth	r3, r3
 7074 0732 1A46     		mov	r2, r3
 7075 0734 514B     		ldr	r3, .L570+8
 7076 0736 93F90130 		ldrsb	r3, [r3, #1]
 7077 073a 03FB02F3 		mul	r3, r3, r2
 7078 073e 5549     		ldr	r1, .L570+32
 7079 0740 1846     		mov	r0, r3
 7080 0742 FFF7FEFF 		bl	filter
 7081 0746 0146     		mov	r1, r0
 7082 0748 4E4A     		ldr	r2, .L570+16
 7083 074a 3423     		movs	r3, #52
 7084 074c 03FB04F3 		mul	r3, r3, r4
 7085 0750 1344     		add	r3, r3, r2
 7086 0752 0C33     		adds	r3, r3, #12
 7087 0754 1960     		str	r1, [r3]
 7088 0756 1BE0     		b	.L447
 7089              	.L448:
2060:..\src/interruptions.c ****                 } else { // [GS]
2061:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7090              		.loc 1 2061 0
 7091 0758 464B     		ldr	r3, .L570
 7092 075a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7093 075e 1846     		mov	r0, r3
 7094 0760 454B     		ldr	r3, .L570+4
 7095 0762 B3F90A30 		ldrsh	r3, [r3, #10]
 7096 0766 A3F26362 		subw	r2, r3, #1635
 7097 076a 1346     		mov	r3, r2
 7098 076c 1B01     		lsls	r3, r3, #4
 7099 076e 9B1A     		subs	r3, r3, r2
 7100 0770 5B01     		lsls	r3, r3, #5
 7101 0772 1B11     		asrs	r3, r3, #4
 7102 0774 1BB2     		sxth	r3, r3
 7103 0776 1A46     		mov	r2, r3
 7104 0778 404B     		ldr	r3, .L570+8
 7105 077a 93F90130 		ldrsb	r3, [r3, #1]
 7106 077e 03FB02F2 		mul	r2, r3, r2
 7107 0782 4049     		ldr	r1, .L570+16
 7108 0784 3423     		movs	r3, #52
 7109 0786 03FB00F3 		mul	r3, r3, r0
 7110 078a 0B44     		add	r3, r3, r1
 7111 078c 0C33     		adds	r3, r3, #12
 7112 078e 1A60     		str	r2, [r3]
 7113              	.L447:
2062:..\src/interruptions.c ****                 }
2063:..\src/interruptions.c ****             }
2064:..\src/interruptions.c ****             
2065:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7114              		.loc 1 2065 0
 7115 0790 384B     		ldr	r3, .L570
 7116 0792 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7117 0796 1D46     		mov	r5, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 165


 7118 0798 364B     		ldr	r3, .L570
 7119 079a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7120 079e 1946     		mov	r1, r3
 7121 07a0 384A     		ldr	r2, .L570+16
 7122 07a2 3423     		movs	r3, #52
 7123 07a4 03FB01F3 		mul	r3, r3, r1
 7124 07a8 1344     		add	r3, r3, r2
 7125 07aa 0C33     		adds	r3, r3, #12
 7126 07ac 1C68     		ldr	r4, [r3]
 7127 07ae 314B     		ldr	r3, .L570
 7128 07b0 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7129 07b4 1946     		mov	r1, r3
 7130 07b6 334A     		ldr	r2, .L570+16
 7131 07b8 3423     		movs	r3, #52
 7132 07ba 03FB01F3 		mul	r3, r3, r1
 7133 07be 1344     		add	r3, r3, r2
 7134 07c0 1A68     		ldr	r2, [r3]
 7135 07c2 2C4B     		ldr	r3, .L570
 7136 07c4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7137 07c8 1846     		mov	r0, r3
 7138 07ca 2A49     		ldr	r1, .L570
 7139 07cc 0346     		mov	r3, r0
 7140 07ce 5B00     		lsls	r3, r3, #1
 7141 07d0 0344     		add	r3, r3, r0
 7142 07d2 1B01     		lsls	r3, r3, #4
 7143 07d4 0B44     		add	r3, r3, r1
 7144 07d6 03F29513 		addw	r3, r3, #405
 7145 07da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7146 07dc 42FA03F6 		asr	r6, r2, r3
 7147 07e0 244B     		ldr	r3, .L570
 7148 07e2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7149 07e6 1946     		mov	r1, r3
 7150 07e8 264A     		ldr	r2, .L570+16
 7151 07ea 3423     		movs	r3, #52
 7152 07ec 03FB01F3 		mul	r3, r3, r1
 7153 07f0 1344     		add	r3, r3, r2
 7154 07f2 1C33     		adds	r3, r3, #28
 7155 07f4 1A68     		ldr	r2, [r3]
 7156 07f6 1F4B     		ldr	r3, .L570
 7157 07f8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7158 07fc 1846     		mov	r0, r3
 7159 07fe 1D49     		ldr	r1, .L570
 7160 0800 0346     		mov	r3, r0
 7161 0802 5B00     		lsls	r3, r3, #1
 7162 0804 0344     		add	r3, r3, r0
 7163 0806 1B01     		lsls	r3, r3, #4
 7164 0808 0B44     		add	r3, r3, r1
 7165 080a 03F29513 		addw	r3, r3, #405
 7166 080e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7167 0810 42FA03FE 		asr	lr, r2, r3
 7168 0814 1C4B     		ldr	r3, .L570+20
 7169 0816 1A69     		ldr	r2, [r3, #16]
 7170 0818 164B     		ldr	r3, .L570
 7171 081a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7172 081e 1846     		mov	r0, r3
 7173 0820 1449     		ldr	r1, .L570
 7174 0822 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 166


 7175 0824 5B00     		lsls	r3, r3, #1
 7176 0826 0344     		add	r3, r3, r0
 7177 0828 1B01     		lsls	r3, r3, #4
 7178 082a 0B44     		add	r3, r3, r1
 7179 082c 03F29513 		addw	r3, r3, #405
 7180 0830 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7181 0832 42FA03F3 		asr	r3, r2, r3
 7182 0836 7246     		mov	r2, lr
 7183 0838 3146     		mov	r1, r6
 7184 083a 0120     		movs	r0, #1
 7185 083c FFF7FEFF 		bl	curr_estim
 7186 0840 0346     		mov	r3, r0
 7187 0842 E31A     		subs	r3, r4, r3
 7188 0844 1449     		ldr	r1, .L570+36
 7189 0846 1846     		mov	r0, r3
 7190 0848 FFF7FEFF 		bl	filter
 7191 084c 0346     		mov	r3, r0
 7192 084e 1BB2     		sxth	r3, r3
 7193 0850 1946     		mov	r1, r3
 7194 0852 0C4A     		ldr	r2, .L570+16
 7195 0854 3423     		movs	r3, #52
 7196 0856 03FB05F3 		mul	r3, r3, r5
 7197 085a 1344     		add	r3, r3, r2
 7198 085c 1033     		adds	r3, r3, #16
 7199 085e 1960     		str	r1, [r3]
 7200              	.L445:
2066:..\src/interruptions.c ****         }
2067:..\src/interruptions.c ****     
2068:..\src/interruptions.c ****         // Check Interrupt 
2069:..\src/interruptions.c ****     
2070:..\src/interruptions.c ****         if (interrupt_flag){
 7201              		.loc 1 2070 0
 7202 0860 0E4B     		ldr	r3, .L570+40
 7203 0862 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7204 0864 002B     		cmp	r3, #0
 7205 0866 1CD0     		beq	.L433
2071:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7206              		.loc 1 2071 0
 7207 0868 0C4B     		ldr	r3, .L570+40
 7208 086a 0022     		movs	r2, #0
 7209 086c 1A70     		strb	r2, [r3]
2072:..\src/interruptions.c ****             interrupt_manager();
 7210              		.loc 1 2072 0
 7211 086e FFF7FEFF 		bl	interrupt_manager
 7212 0872 16E0     		b	.L433
 7213              	.L571:
 7214              		.align	2
 7215              	.L570:
 7216 0874 00000000 		.word	g_mem
 7217 0878 00000000 		.word	ADC_buf
 7218 087c 00000000 		.word	pwm_sign
 7219 0880 00000000 		.word	filt_i
 7220 0884 00000000 		.word	g_meas
 7221 0888 00000000 		.word	g_ref
 7222 088c 00000000 		.word	filt_curr_diff
 7223 0890 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7224 0894 08000000 		.word	filt_i+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 167


 7225 0898 08000000 		.word	filt_curr_diff+8
 7226 089c 00000000 		.word	interrupt_flag
 7227              	.L548:
1969:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7228              		.loc 1 1969 0
 7229 08a0 00BF     		nop
 7230              	.L433:
2073:..\src/interruptions.c ****         }
2074:..\src/interruptions.c **** 
2075:..\src/interruptions.c ****     }
2076:..\src/interruptions.c ****     
2077:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2078:..\src/interruptions.c ****         
2079:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2080:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7231              		.loc 1 2080 0
 7232 08a2 B24B     		ldr	r3, .L572
 7233 08a4 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7234 08a8 002B     		cmp	r3, #0
 7235 08aa 05D1     		bne	.L449
2081:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7236              		.loc 1 2081 0
 7237 08ac B04B     		ldr	r3, .L572+4
 7238 08ae 0022     		movs	r2, #0
 7239 08b0 1A70     		strb	r2, [r3]
2082:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7240              		.loc 1 2082 0
 7241 08b2 B04B     		ldr	r3, .L572+8
 7242 08b4 0022     		movs	r2, #0
 7243 08b6 1A70     		strb	r2, [r3]
 7244              	.L449:
2083:..\src/interruptions.c ****     }
2084:..\src/interruptions.c **** 
2085:..\src/interruptions.c ****     // EMG 1 calibration state machine
2086:..\src/interruptions.c ****    
2087:..\src/interruptions.c ****     // Calibration state machine
2088:..\src/interruptions.c ****     switch(emg_1_status) {
 7245              		.loc 1 2088 0
 7246 08b8 AD4B     		ldr	r3, .L572+4
 7247 08ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7248 08bc 032B     		cmp	r3, #3
 7249 08be 00F2E180 		bhi	.L549
 7250 08c2 01A2     		adr	r2, .L452
 7251 08c4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7252              		.p2align 2
 7253              	.L452:
 7254 08c8 D9080000 		.word	.L451+1
 7255 08cc 89090000 		.word	.L453+1
 7256 08d0 9F090000 		.word	.L454+1
 7257 08d4 DB090000 		.word	.L455+1
 7258              		.p2align 1
 7259              	.L451:
2089:..\src/interruptions.c ****         case NORMAL: // normal execution
2090:..\src/interruptions.c ****             
2091:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7260              		.loc 1 2091 0
 7261 08d8 A74B     		ldr	r3, .L572+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 168


 7262 08da 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7263 08de 022B     		cmp	r3, #2
 7264 08e0 13D0     		beq	.L456
 7265              		.loc 1 2091 0 is_stmt 0 discriminator 1
 7266 08e2 A54B     		ldr	r3, .L572+12
 7267 08e4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7268 08e8 032B     		cmp	r3, #3
 7269 08ea 0ED0     		beq	.L456
2092:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7270              		.loc 1 2092 0 is_stmt 1
 7271 08ec 9F4B     		ldr	r3, .L572
 7272 08ee 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7273 08f2 0233     		adds	r3, r3, #2
 7274 08f4 A14A     		ldr	r2, .L572+16
 7275 08f6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7276 08fa A3F26763 		subw	r3, r3, #1639
 7277 08fe 5722     		movs	r2, #87
 7278 0900 02FB03F3 		mul	r3, r2, r3
 7279 0904 5B11     		asrs	r3, r3, #5
 7280 0906 7B60     		str	r3, [r7, #4]
 7281 0908 07E0     		b	.L457
 7282              	.L456:
2093:..\src/interruptions.c ****             }
2094:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2095:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7283              		.loc 1 2095 0
 7284 090a 984B     		ldr	r3, .L572
 7285 090c 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7286 0910 0233     		adds	r3, r3, #2
 7287 0912 9A4A     		ldr	r2, .L572+16
 7288 0914 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7289 0918 7B60     		str	r3, [r7, #4]
 7290              	.L457:
2096:..\src/interruptions.c ****             }
2097:..\src/interruptions.c ****             
2098:..\src/interruptions.c ****             if (i_aux < 0) 
 7291              		.loc 1 2098 0
 7292 091a 7B68     		ldr	r3, [r7, #4]
 7293 091c 002B     		cmp	r3, #0
 7294 091e 01DA     		bge	.L458
2099:..\src/interruptions.c ****                 i_aux = 0;
 7295              		.loc 1 2099 0
 7296 0920 0023     		movs	r3, #0
 7297 0922 7B60     		str	r3, [r7, #4]
 7298              	.L458:
2100:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7299              		.loc 1 2100 0
 7300 0924 9649     		ldr	r1, .L572+20
 7301 0926 7868     		ldr	r0, [r7, #4]
 7302 0928 FFF7FEFF 		bl	filter
 7303 092c 7860     		str	r0, [r7, #4]
2101:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7304              		.loc 1 2101 0
 7305 092e 7B68     		ldr	r3, [r7, #4]
 7306 0930 9B02     		lsls	r3, r3, #10
 7307 0932 1A46     		mov	r2, r3
 7308 0934 904B     		ldr	r3, .L572+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 169


 7309 0936 D3F8F431 		ldr	r3, [r3, #500]
 7310 093a B2FBF3F3 		udiv	r3, r2, r3
 7311 093e 7B60     		str	r3, [r7, #4]
2102:..\src/interruptions.c **** 
2103:..\src/interruptions.c ****             if (interrupt_flag){
 7312              		.loc 1 2103 0
 7313 0940 904B     		ldr	r3, .L572+24
 7314 0942 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7315 0944 002B     		cmp	r3, #0
 7316 0946 04D0     		beq	.L459
2104:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7317              		.loc 1 2104 0
 7318 0948 8E4B     		ldr	r3, .L572+24
 7319 094a 0022     		movs	r2, #0
 7320 094c 1A70     		strb	r2, [r3]
2105:..\src/interruptions.c ****                 interrupt_manager();
 7321              		.loc 1 2105 0
 7322 094e FFF7FEFF 		bl	interrupt_manager
 7323              	.L459:
2106:..\src/interruptions.c ****             }
2107:..\src/interruptions.c ****             //Saturation
2108:..\src/interruptions.c ****             if (i_aux < 0)
 7324              		.loc 1 2108 0
 7325 0952 7B68     		ldr	r3, [r7, #4]
 7326 0954 002B     		cmp	r3, #0
 7327 0956 02DA     		bge	.L460
2109:..\src/interruptions.c ****                 i_aux = 0;
 7328              		.loc 1 2109 0
 7329 0958 0023     		movs	r3, #0
 7330 095a 7B60     		str	r3, [r7, #4]
 7331 095c 06E0     		b	.L461
 7332              	.L460:
2110:..\src/interruptions.c ****             else 
2111:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7333              		.loc 1 2111 0
 7334 095e 7B68     		ldr	r3, [r7, #4]
 7335 0960 B3F5806F 		cmp	r3, #1024
 7336 0964 02DD     		ble	.L461
2112:..\src/interruptions.c ****                     i_aux = 1024;
 7337              		.loc 1 2112 0
 7338 0966 4FF48063 		mov	r3, #1024
 7339 096a 7B60     		str	r3, [r7, #4]
 7340              	.L461:
2113:..\src/interruptions.c ****             
2114:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7341              		.loc 1 2114 0
 7342 096c 864A     		ldr	r2, .L572+28
 7343 096e 7B68     		ldr	r3, [r7, #4]
 7344 0970 1360     		str	r3, [r2]
2115:..\src/interruptions.c **** 
2116:..\src/interruptions.c ****             if (interrupt_flag){
 7345              		.loc 1 2116 0
 7346 0972 844B     		ldr	r3, .L572+24
 7347 0974 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7348 0976 002B     		cmp	r3, #0
 7349 0978 00F08680 		beq	.L550
2117:..\src/interruptions.c ****                 interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 170


 7350              		.loc 1 2117 0
 7351 097c 814B     		ldr	r3, .L572+24
 7352 097e 0022     		movs	r2, #0
 7353 0980 1A70     		strb	r2, [r3]
2118:..\src/interruptions.c ****                 interrupt_manager();
 7354              		.loc 1 2118 0
 7355 0982 FFF7FEFF 		bl	interrupt_manager
2119:..\src/interruptions.c ****             }
2120:..\src/interruptions.c ****             
2121:..\src/interruptions.c ****             break;
 7356              		.loc 1 2121 0
 7357 0986 7FE0     		b	.L550
 7358              	.L453:
2122:..\src/interruptions.c **** 
2123:..\src/interruptions.c ****         case RESET: // reset variables
2124:..\src/interruptions.c ****             emg_counter_1 = 0;
 7359              		.loc 1 2124 0
 7360 0988 804B     		ldr	r3, .L572+32
 7361 098a 0022     		movs	r2, #0
 7362 098c 1A80     		strh	r2, [r3]	@ movhi
2125:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7363              		.loc 1 2125 0
 7364 098e 7A4B     		ldr	r3, .L572+12
 7365 0990 0022     		movs	r2, #0
 7366 0992 C3F8F421 		str	r2, [r3, #500]
2126:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7367              		.loc 1 2126 0
 7368 0996 764B     		ldr	r3, .L572+4
 7369 0998 0222     		movs	r2, #2
 7370 099a 1A70     		strb	r2, [r3]
2127:..\src/interruptions.c ****             break;
 7371              		.loc 1 2127 0
 7372 099c 79E0     		b	.L463
 7373              	.L454:
2128:..\src/interruptions.c **** 
2129:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2130:..\src/interruptions.c ****             emg_counter_1++;
 7374              		.loc 1 2130 0
 7375 099e 7B4B     		ldr	r3, .L572+32
 7376 09a0 1B88     		ldrh	r3, [r3]
 7377 09a2 0133     		adds	r3, r3, #1
 7378 09a4 9AB2     		uxth	r2, r3
 7379 09a6 794B     		ldr	r3, .L572+32
 7380 09a8 1A80     		strh	r2, [r3]	@ movhi
2131:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7381              		.loc 1 2131 0
 7382 09aa 784B     		ldr	r3, .L572+32
 7383 09ac 1B88     		ldrh	r3, [r3]
 7384 09ae B3F5FA7F 		cmp	r3, #500
 7385 09b2 6BD1     		bne	.L551
2132:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7386              		.loc 1 2132 0
 7387 09b4 754B     		ldr	r3, .L572+32
 7388 09b6 0022     		movs	r2, #0
 7389 09b8 1A80     		strh	r2, [r3]	@ movhi
2133:..\src/interruptions.c ****                 LED_control(1);
 7390              		.loc 1 2133 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 171


 7391 09ba 0120     		movs	r0, #1
 7392 09bc FFF7FEFF 		bl	LED_control
2134:..\src/interruptions.c **** 				
2135:..\src/interruptions.c ****                 if (interrupt_flag){
 7393              		.loc 1 2135 0
 7394 09c0 704B     		ldr	r3, .L572+24
 7395 09c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7396 09c4 002B     		cmp	r3, #0
 7397 09c6 04D0     		beq	.L465
2136:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7398              		.loc 1 2136 0
 7399 09c8 6E4B     		ldr	r3, .L572+24
 7400 09ca 0022     		movs	r2, #0
 7401 09cc 1A70     		strb	r2, [r3]
2137:..\src/interruptions.c ****                     interrupt_manager();
 7402              		.loc 1 2137 0
 7403 09ce FFF7FEFF 		bl	interrupt_manager
 7404              	.L465:
2138:..\src/interruptions.c ****                 }
2139:..\src/interruptions.c ****                 
2140:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7405              		.loc 1 2140 0
 7406 09d2 674B     		ldr	r3, .L572+4
 7407 09d4 0322     		movs	r2, #3
 7408 09d6 1A70     		strb	r2, [r3]
2141:..\src/interruptions.c ****             }
2142:..\src/interruptions.c ****             break;
 7409              		.loc 1 2142 0
 7410 09d8 58E0     		b	.L551
 7411              	.L455:
2143:..\src/interruptions.c **** 
2144:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2145:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2146:..\src/interruptions.c ****             emg_counter_1++;
 7412              		.loc 1 2146 0
 7413 09da 6C4B     		ldr	r3, .L572+32
 7414 09dc 1B88     		ldrh	r3, [r3]
 7415 09de 0133     		adds	r3, r3, #1
 7416 09e0 9AB2     		uxth	r2, r3
 7417 09e2 6A4B     		ldr	r3, .L572+32
 7418 09e4 1A80     		strh	r2, [r3]	@ movhi
2147:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7419              		.loc 1 2147 0
 7420 09e6 614B     		ldr	r3, .L572
 7421 09e8 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7422 09ec 0233     		adds	r3, r3, #2
 7423 09ee 634A     		ldr	r2, .L572+16
 7424 09f0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7425 09f4 002B     		cmp	r3, #0
 7426 09f6 07DA     		bge	.L466
2148:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7427              		.loc 1 2148 0
 7428 09f8 5C4B     		ldr	r3, .L572
 7429 09fa 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7430 09fe 0233     		adds	r3, r3, #2
 7431 0a00 5E4A     		ldr	r2, .L572+16
 7432 0a02 0021     		movs	r1, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 172


 7433 0a04 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7434              	.L466:
2149:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7435              		.loc 1 2149 0
 7436 0a08 584B     		ldr	r3, .L572
 7437 0a0a 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7438 0a0e 0233     		adds	r3, r3, #2
 7439 0a10 5A4A     		ldr	r2, .L572+16
 7440 0a12 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7441 0a16 5A49     		ldr	r1, .L572+20
 7442 0a18 1846     		mov	r0, r3
 7443 0a1a FFF7FEFF 		bl	filter
 7444 0a1e 0246     		mov	r2, r0
 7445 0a20 554B     		ldr	r3, .L572+12
 7446 0a22 D3F8F431 		ldr	r3, [r3, #500]
 7447 0a26 1344     		add	r3, r3, r2
 7448 0a28 534A     		ldr	r2, .L572+12
 7449 0a2a C2F8F431 		str	r3, [r2, #500]
2150:..\src/interruptions.c ****             
2151:..\src/interruptions.c ****             if (interrupt_flag){
 7450              		.loc 1 2151 0
 7451 0a2e 554B     		ldr	r3, .L572+24
 7452 0a30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7453 0a32 002B     		cmp	r3, #0
 7454 0a34 04D0     		beq	.L467
2152:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7455              		.loc 1 2152 0
 7456 0a36 534B     		ldr	r3, .L572+24
 7457 0a38 0022     		movs	r2, #0
 7458 0a3a 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****                 interrupt_manager();
 7459              		.loc 1 2153 0
 7460 0a3c FFF7FEFF 		bl	interrupt_manager
 7461              	.L467:
2154:..\src/interruptions.c ****             }
2155:..\src/interruptions.c ****             
2156:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7462              		.loc 1 2156 0
 7463 0a40 524B     		ldr	r3, .L572+32
 7464 0a42 1B88     		ldrh	r3, [r3]
 7465 0a44 B3F57A7F 		cmp	r3, #1000
 7466 0a48 22D1     		bne	.L552
2157:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7467              		.loc 1 2157 0
 7468 0a4a 4B4B     		ldr	r3, .L572+12
 7469 0a4c D3F8F431 		ldr	r3, [r3, #500]
 7470 0a50 4F4A     		ldr	r2, .L572+36
 7471 0a52 A2FB0323 		umull	r2, r3, r2, r3
 7472 0a56 9B09     		lsrs	r3, r3, #6
 7473 0a58 474A     		ldr	r2, .L572+12
 7474 0a5a C2F8F431 		str	r3, [r2, #500]
2158:..\src/interruptions.c **** 
2159:..\src/interruptions.c ****                 if (interrupt_flag){
 7475              		.loc 1 2159 0
 7476 0a5e 494B     		ldr	r3, .L572+24
 7477 0a60 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7478 0a62 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 173


 7479 0a64 04D0     		beq	.L469
2160:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7480              		.loc 1 2160 0
 7481 0a66 474B     		ldr	r3, .L572+24
 7482 0a68 0022     		movs	r2, #0
 7483 0a6a 1A70     		strb	r2, [r3]
2161:..\src/interruptions.c ****                     interrupt_manager();
 7484              		.loc 1 2161 0
 7485 0a6c FFF7FEFF 		bl	interrupt_manager
 7486              	.L469:
2162:..\src/interruptions.c ****                 }                    
2163:..\src/interruptions.c ****                 
2164:..\src/interruptions.c ****                 LED_control(0);
 7487              		.loc 1 2164 0
 7488 0a70 0020     		movs	r0, #0
 7489 0a72 FFF7FEFF 		bl	LED_control
2165:..\src/interruptions.c **** 				
2166:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7490              		.loc 1 2166 0
 7491 0a76 454B     		ldr	r3, .L572+32
 7492 0a78 0022     		movs	r2, #0
 7493 0a7a 1A80     		strh	r2, [r3]	@ movhi
2167:..\src/interruptions.c **** 
2168:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7494              		.loc 1 2168 0
 7495 0a7c 3C4B     		ldr	r3, .L572+4
 7496 0a7e 0022     		movs	r2, #0
 7497 0a80 1A70     		strb	r2, [r3]
2169:..\src/interruptions.c ****             }
2170:..\src/interruptions.c ****             break;
 7498              		.loc 1 2170 0
 7499 0a82 05E0     		b	.L552
 7500              	.L549:
2171:..\src/interruptions.c **** 
2172:..\src/interruptions.c ****         default:
2173:..\src/interruptions.c ****             break;
 7501              		.loc 1 2173 0
 7502 0a84 00BF     		nop
 7503 0a86 04E0     		b	.L463
 7504              	.L550:
2121:..\src/interruptions.c **** 
 7505              		.loc 1 2121 0
 7506 0a88 00BF     		nop
 7507 0a8a 02E0     		b	.L463
 7508              	.L551:
2142:..\src/interruptions.c **** 
 7509              		.loc 1 2142 0
 7510 0a8c 00BF     		nop
 7511 0a8e 00E0     		b	.L463
 7512              	.L552:
2170:..\src/interruptions.c **** 
 7513              		.loc 1 2170 0
 7514 0a90 00BF     		nop
 7515              	.L463:
2174:..\src/interruptions.c ****     }
2175:..\src/interruptions.c **** 
2176:..\src/interruptions.c ****     if (interrupt_flag){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 174


 7516              		.loc 1 2176 0
 7517 0a92 3C4B     		ldr	r3, .L572+24
 7518 0a94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7519 0a96 002B     		cmp	r3, #0
 7520 0a98 04D0     		beq	.L470
2177:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7521              		.loc 1 2177 0
 7522 0a9a 3A4B     		ldr	r3, .L572+24
 7523 0a9c 0022     		movs	r2, #0
 7524 0a9e 1A70     		strb	r2, [r3]
2178:..\src/interruptions.c ****         interrupt_manager();
 7525              		.loc 1 2178 0
 7526 0aa0 FFF7FEFF 		bl	interrupt_manager
 7527              	.L470:
2179:..\src/interruptions.c ****     }
2180:..\src/interruptions.c ****     // EMG 2 calibration state machine
2181:..\src/interruptions.c ****     switch(emg_2_status) {
 7528              		.loc 1 2181 0
 7529 0aa4 334B     		ldr	r3, .L572+8
 7530 0aa6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7531 0aa8 052B     		cmp	r3, #5
 7532 0aaa 00F2C681 		bhi	.L553
 7533 0aae 01A2     		adr	r2, .L473
 7534 0ab0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7535              		.p2align 2
 7536              	.L473:
 7537 0ab4 CD0A0000 		.word	.L472+1
 7538 0ab8 990B0000 		.word	.L474+1
 7539 0abc C10B0000 		.word	.L475+1
 7540 0ac0 FF0B0000 		.word	.L476+1
 7541 0ac4 B10C0000 		.word	.L477+1
 7542 0ac8 C30C0000 		.word	.L478+1
 7543              		.p2align 1
 7544              	.L472:
2182:..\src/interruptions.c ****         case NORMAL: // normal execution
2183:..\src/interruptions.c ****         
2184:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7545              		.loc 1 2184 0
 7546 0acc 2A4B     		ldr	r3, .L572+12
 7547 0ace 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7548 0ad2 022B     		cmp	r3, #2
 7549 0ad4 14D0     		beq	.L479
 7550              		.loc 1 2184 0 is_stmt 0 discriminator 1
 7551 0ad6 284B     		ldr	r3, .L572+12
 7552 0ad8 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7553 0adc 032B     		cmp	r3, #3
 7554 0ade 0FD0     		beq	.L479
2185:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7555              		.loc 1 2185 0 is_stmt 1
 7556 0ae0 224B     		ldr	r3, .L572
 7557 0ae2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7558 0ae6 C3F10303 		rsb	r3, r3, #3
 7559 0aea 244A     		ldr	r2, .L572+16
 7560 0aec 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7561 0af0 A3F26763 		subw	r3, r3, #1639
 7562 0af4 5722     		movs	r2, #87
 7563 0af6 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 175


 7564 0afa 5B11     		asrs	r3, r3, #5
 7565 0afc 7B60     		str	r3, [r7, #4]
 7566 0afe 08E0     		b	.L480
 7567              	.L479:
2186:..\src/interruptions.c ****             }
2187:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2188:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7568              		.loc 1 2188 0
 7569 0b00 1A4B     		ldr	r3, .L572
 7570 0b02 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7571 0b06 C3F10303 		rsb	r3, r3, #3
 7572 0b0a 1C4A     		ldr	r2, .L572+16
 7573 0b0c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7574 0b10 7B60     		str	r3, [r7, #4]
 7575              	.L480:
2189:..\src/interruptions.c ****             }
2190:..\src/interruptions.c **** 
2191:..\src/interruptions.c ****             if (i_aux < 0)
 7576              		.loc 1 2191 0
 7577 0b12 7B68     		ldr	r3, [r7, #4]
 7578 0b14 002B     		cmp	r3, #0
 7579 0b16 01DA     		bge	.L481
2192:..\src/interruptions.c ****                 i_aux = 0;
 7580              		.loc 1 2192 0
 7581 0b18 0023     		movs	r3, #0
 7582 0b1a 7B60     		str	r3, [r7, #4]
 7583              	.L481:
2193:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7584              		.loc 1 2193 0
 7585 0b1c 1D49     		ldr	r1, .L572+40
 7586 0b1e 7868     		ldr	r0, [r7, #4]
 7587 0b20 FFF7FEFF 		bl	filter
 7588 0b24 7860     		str	r0, [r7, #4]
2194:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7589              		.loc 1 2194 0
 7590 0b26 7B68     		ldr	r3, [r7, #4]
 7591 0b28 9B02     		lsls	r3, r3, #10
 7592 0b2a 1A46     		mov	r2, r3
 7593 0b2c 124B     		ldr	r3, .L572+12
 7594 0b2e D3F8F831 		ldr	r3, [r3, #504]
 7595 0b32 B2FBF3F3 		udiv	r3, r2, r3
 7596 0b36 7B60     		str	r3, [r7, #4]
2195:..\src/interruptions.c **** 
2196:..\src/interruptions.c ****             if (interrupt_flag){
 7597              		.loc 1 2196 0
 7598 0b38 124B     		ldr	r3, .L572+24
 7599 0b3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7600 0b3c 002B     		cmp	r3, #0
 7601 0b3e 04D0     		beq	.L482
2197:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7602              		.loc 1 2197 0
 7603 0b40 104B     		ldr	r3, .L572+24
 7604 0b42 0022     		movs	r2, #0
 7605 0b44 1A70     		strb	r2, [r3]
2198:..\src/interruptions.c ****                 interrupt_manager();
 7606              		.loc 1 2198 0
 7607 0b46 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 176


 7608              	.L482:
2199:..\src/interruptions.c ****             }
2200:..\src/interruptions.c ****             
2201:..\src/interruptions.c ****             if (i_aux < 0) 
 7609              		.loc 1 2201 0
 7610 0b4a 7B68     		ldr	r3, [r7, #4]
 7611 0b4c 002B     		cmp	r3, #0
 7612 0b4e 02DA     		bge	.L483
2202:..\src/interruptions.c ****                 i_aux = 0;
 7613              		.loc 1 2202 0
 7614 0b50 0023     		movs	r3, #0
 7615 0b52 7B60     		str	r3, [r7, #4]
 7616 0b54 06E0     		b	.L484
 7617              	.L483:
2203:..\src/interruptions.c ****             else 
2204:..\src/interruptions.c ****                 if (i_aux > 1024)
 7618              		.loc 1 2204 0
 7619 0b56 7B68     		ldr	r3, [r7, #4]
 7620 0b58 B3F5806F 		cmp	r3, #1024
 7621 0b5c 02DD     		ble	.L484
2205:..\src/interruptions.c ****                     i_aux = 1024;
 7622              		.loc 1 2205 0
 7623 0b5e 4FF48063 		mov	r3, #1024
 7624 0b62 7B60     		str	r3, [r7, #4]
 7625              	.L484:
2206:..\src/interruptions.c ****             
2207:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7626              		.loc 1 2207 0
 7627 0b64 084A     		ldr	r2, .L572+28
 7628 0b66 7B68     		ldr	r3, [r7, #4]
 7629 0b68 5360     		str	r3, [r2, #4]
2208:..\src/interruptions.c **** 
2209:..\src/interruptions.c ****             break;
 7630              		.loc 1 2209 0
 7631 0b6a 88E1     		b	.L485
 7632              	.L573:
 7633              		.align	2
 7634              	.L572:
 7635 0b6c 00000000 		.word	c_mem
 7636 0b70 00000000 		.word	emg_1_status
 7637 0b74 00000000 		.word	emg_2_status
 7638 0b78 00000000 		.word	g_mem
 7639 0b7c 00000000 		.word	ADC_buf
 7640 0b80 00000000 		.word	filt_emg
 7641 0b84 00000000 		.word	interrupt_flag
 7642 0b88 00000000 		.word	g_adc_meas
 7643 0b8c 7C010000 		.word	emg_counter_1.10422
 7644 0b90 D34D6210 		.word	274877907
 7645 0b94 08000000 		.word	filt_emg+8
 7646              	.L474:
2210:..\src/interruptions.c **** 
2211:..\src/interruptions.c ****         case RESET: // reset variables
2212:..\src/interruptions.c ****             emg_counter_2 = 0;
 7647              		.loc 1 2212 0
 7648 0b98 AC4B     		ldr	r3, .L574
 7649 0b9a 0022     		movs	r2, #0
 7650 0b9c 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 177


2213:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7651              		.loc 1 2213 0
 7652 0b9e AC4B     		ldr	r3, .L574+4
 7653 0ba0 0022     		movs	r2, #0
 7654 0ba2 C3F8F821 		str	r2, [r3, #504]
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****             if (interrupt_flag){
 7655              		.loc 1 2215 0
 7656 0ba6 AB4B     		ldr	r3, .L574+8
 7657 0ba8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7658 0baa 002B     		cmp	r3, #0
 7659 0bac 04D0     		beq	.L486
2216:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7660              		.loc 1 2216 0
 7661 0bae A94B     		ldr	r3, .L574+8
 7662 0bb0 0022     		movs	r2, #0
 7663 0bb2 1A70     		strb	r2, [r3]
2217:..\src/interruptions.c ****                 interrupt_manager();
 7664              		.loc 1 2217 0
 7665 0bb4 FFF7FEFF 		bl	interrupt_manager
 7666              	.L486:
2218:..\src/interruptions.c ****             }
2219:..\src/interruptions.c ****             
2220:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7667              		.loc 1 2220 0
 7668 0bb8 A74B     		ldr	r3, .L574+12
 7669 0bba 0422     		movs	r2, #4
 7670 0bbc 1A70     		strb	r2, [r3]
2221:..\src/interruptions.c ****             break;
 7671              		.loc 1 2221 0
 7672 0bbe 5EE1     		b	.L485
 7673              	.L475:
2222:..\src/interruptions.c **** 
2223:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2224:..\src/interruptions.c ****             emg_counter_2++;
 7674              		.loc 1 2224 0
 7675 0bc0 A24B     		ldr	r3, .L574
 7676 0bc2 1B88     		ldrh	r3, [r3]
 7677 0bc4 0133     		adds	r3, r3, #1
 7678 0bc6 9AB2     		uxth	r2, r3
 7679 0bc8 A04B     		ldr	r3, .L574
 7680 0bca 1A80     		strh	r2, [r3]	@ movhi
2225:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7681              		.loc 1 2225 0
 7682 0bcc 9F4B     		ldr	r3, .L574
 7683 0bce 1B88     		ldrh	r3, [r3]
 7684 0bd0 B3F5FA7F 		cmp	r3, #500
 7685 0bd4 40F03381 		bne	.L554
2226:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7686              		.loc 1 2226 0
 7687 0bd8 9C4B     		ldr	r3, .L574
 7688 0bda 0022     		movs	r2, #0
 7689 0bdc 1A80     		strh	r2, [r3]	@ movhi
2227:..\src/interruptions.c ****                 LED_control(1);
 7690              		.loc 1 2227 0
 7691 0bde 0120     		movs	r0, #1
 7692 0be0 FFF7FEFF 		bl	LED_control
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 178


2228:..\src/interruptions.c **** 
2229:..\src/interruptions.c ****                 if (interrupt_flag){
 7693              		.loc 1 2229 0
 7694 0be4 9B4B     		ldr	r3, .L574+8
 7695 0be6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7696 0be8 002B     		cmp	r3, #0
 7697 0bea 04D0     		beq	.L488
2230:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7698              		.loc 1 2230 0
 7699 0bec 994B     		ldr	r3, .L574+8
 7700 0bee 0022     		movs	r2, #0
 7701 0bf0 1A70     		strb	r2, [r3]
2231:..\src/interruptions.c ****                     interrupt_manager();
 7702              		.loc 1 2231 0
 7703 0bf2 FFF7FEFF 		bl	interrupt_manager
 7704              	.L488:
2232:..\src/interruptions.c ****                 }
2233:..\src/interruptions.c ****                 
2234:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7705              		.loc 1 2234 0
 7706 0bf6 984B     		ldr	r3, .L574+12
 7707 0bf8 0322     		movs	r2, #3
 7708 0bfa 1A70     		strb	r2, [r3]
2235:..\src/interruptions.c ****             }
2236:..\src/interruptions.c ****             break;
 7709              		.loc 1 2236 0
 7710 0bfc 1FE1     		b	.L554
 7711              	.L476:
2237:..\src/interruptions.c **** 
2238:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2239:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2240:..\src/interruptions.c ****             emg_counter_2++;
 7712              		.loc 1 2240 0
 7713 0bfe 934B     		ldr	r3, .L574
 7714 0c00 1B88     		ldrh	r3, [r3]
 7715 0c02 0133     		adds	r3, r3, #1
 7716 0c04 9AB2     		uxth	r2, r3
 7717 0c06 914B     		ldr	r3, .L574
 7718 0c08 1A80     		strh	r2, [r3]	@ movhi
2241:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7719              		.loc 1 2241 0
 7720 0c0a 944B     		ldr	r3, .L574+16
 7721 0c0c 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7722 0c10 C3F10303 		rsb	r3, r3, #3
 7723 0c14 924A     		ldr	r2, .L574+20
 7724 0c16 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7725 0c1a 002B     		cmp	r3, #0
 7726 0c1c 08DA     		bge	.L489
2242:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7727              		.loc 1 2242 0
 7728 0c1e 8F4B     		ldr	r3, .L574+16
 7729 0c20 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7730 0c24 C3F10303 		rsb	r3, r3, #3
 7731 0c28 8D4A     		ldr	r2, .L574+20
 7732 0c2a 0021     		movs	r1, #0
 7733 0c2c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7734              	.L489:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 179


2243:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7735              		.loc 1 2243 0
 7736 0c30 8A4B     		ldr	r3, .L574+16
 7737 0c32 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7738 0c36 C3F10303 		rsb	r3, r3, #3
 7739 0c3a 894A     		ldr	r2, .L574+20
 7740 0c3c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7741 0c40 8849     		ldr	r1, .L574+24
 7742 0c42 1846     		mov	r0, r3
 7743 0c44 FFF7FEFF 		bl	filter
 7744 0c48 0246     		mov	r2, r0
 7745 0c4a 814B     		ldr	r3, .L574+4
 7746 0c4c D3F8F831 		ldr	r3, [r3, #504]
 7747 0c50 1344     		add	r3, r3, r2
 7748 0c52 7F4A     		ldr	r2, .L574+4
 7749 0c54 C2F8F831 		str	r3, [r2, #504]
2244:..\src/interruptions.c **** 
2245:..\src/interruptions.c ****             if (interrupt_flag){
 7750              		.loc 1 2245 0
 7751 0c58 7E4B     		ldr	r3, .L574+8
 7752 0c5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7753 0c5c 002B     		cmp	r3, #0
 7754 0c5e 04D0     		beq	.L490
2246:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7755              		.loc 1 2246 0
 7756 0c60 7C4B     		ldr	r3, .L574+8
 7757 0c62 0022     		movs	r2, #0
 7758 0c64 1A70     		strb	r2, [r3]
2247:..\src/interruptions.c ****                 interrupt_manager();
 7759              		.loc 1 2247 0
 7760 0c66 FFF7FEFF 		bl	interrupt_manager
 7761              	.L490:
2248:..\src/interruptions.c ****             }
2249:..\src/interruptions.c ****             
2250:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7762              		.loc 1 2250 0
 7763 0c6a 784B     		ldr	r3, .L574
 7764 0c6c 1B88     		ldrh	r3, [r3]
 7765 0c6e B3F57A7F 		cmp	r3, #1000
 7766 0c72 40F0E680 		bne	.L555
2251:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7767              		.loc 1 2251 0
 7768 0c76 764B     		ldr	r3, .L574+4
 7769 0c78 D3F8F831 		ldr	r3, [r3, #504]
 7770 0c7c 7A4A     		ldr	r2, .L574+28
 7771 0c7e A2FB0323 		umull	r2, r3, r2, r3
 7772 0c82 9B09     		lsrs	r3, r3, #6
 7773 0c84 724A     		ldr	r2, .L574+4
 7774 0c86 C2F8F831 		str	r3, [r2, #504]
2252:..\src/interruptions.c ****                 LED_control(0);
 7775              		.loc 1 2252 0
 7776 0c8a 0020     		movs	r0, #0
 7777 0c8c FFF7FEFF 		bl	LED_control
2253:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7778              		.loc 1 2253 0
 7779 0c90 6E4B     		ldr	r3, .L574
 7780 0c92 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 180


 7781 0c94 1A80     		strh	r2, [r3]	@ movhi
2254:..\src/interruptions.c ****             
2255:..\src/interruptions.c ****                 if (interrupt_flag){
 7782              		.loc 1 2255 0
 7783 0c96 6F4B     		ldr	r3, .L574+8
 7784 0c98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7785 0c9a 002B     		cmp	r3, #0
 7786 0c9c 04D0     		beq	.L492
2256:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7787              		.loc 1 2256 0
 7788 0c9e 6D4B     		ldr	r3, .L574+8
 7789 0ca0 0022     		movs	r2, #0
 7790 0ca2 1A70     		strb	r2, [r3]
2257:..\src/interruptions.c ****                     interrupt_manager();
 7791              		.loc 1 2257 0
 7792 0ca4 FFF7FEFF 		bl	interrupt_manager
 7793              	.L492:
2258:..\src/interruptions.c ****                 }
2259:..\src/interruptions.c ****                 
2260:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7794              		.loc 1 2260 0
 7795 0ca8 6B4B     		ldr	r3, .L574+12
 7796 0caa 0522     		movs	r2, #5
 7797 0cac 1A70     		strb	r2, [r3]
2261:..\src/interruptions.c ****             }
2262:..\src/interruptions.c ****             break;
 7798              		.loc 1 2262 0
 7799 0cae C8E0     		b	.L555
 7800              	.L477:
2263:..\src/interruptions.c **** 
2264:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2265:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7801              		.loc 1 2265 0
 7802 0cb0 6E4B     		ldr	r3, .L574+32
 7803 0cb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7804 0cb4 002B     		cmp	r3, #0
 7805 0cb6 40F0C680 		bne	.L556
2266:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7806              		.loc 1 2266 0
 7807 0cba 674B     		ldr	r3, .L574+12
 7808 0cbc 0222     		movs	r2, #2
 7809 0cbe 1A70     		strb	r2, [r3]
2267:..\src/interruptions.c ****             break;
 7810              		.loc 1 2267 0
 7811 0cc0 C1E0     		b	.L556
 7812              	.L478:
2268:..\src/interruptions.c **** 
2269:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2270:..\src/interruptions.c ****             emg_counter_2++;
 7813              		.loc 1 2270 0
 7814 0cc2 624B     		ldr	r3, .L574
 7815 0cc4 1B88     		ldrh	r3, [r3]
 7816 0cc6 0133     		adds	r3, r3, #1
 7817 0cc8 9AB2     		uxth	r2, r3
 7818 0cca 604B     		ldr	r3, .L574
 7819 0ccc 1A80     		strh	r2, [r3]	@ movhi
2271:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 181


 7820              		.loc 1 2271 0
 7821 0cce 5F4B     		ldr	r3, .L574
 7822 0cd0 1B88     		ldrh	r3, [r3]
 7823 0cd2 B3F5FA7F 		cmp	r3, #500
 7824 0cd6 40F0D180 		bne	.L557
2272:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7825              		.loc 1 2272 0
 7826 0cda 5C4B     		ldr	r3, .L574
 7827 0cdc 0022     		movs	r2, #0
 7828 0cde 1A80     		strh	r2, [r3]	@ movhi
2273:..\src/interruptions.c ****                 
2274:..\src/interruptions.c ****                 if (interrupt_flag){
 7829              		.loc 1 2274 0
 7830 0ce0 5C4B     		ldr	r3, .L574+8
 7831 0ce2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7832 0ce4 002B     		cmp	r3, #0
 7833 0ce6 04D0     		beq	.L495
2275:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7834              		.loc 1 2275 0
 7835 0ce8 5A4B     		ldr	r3, .L574+8
 7836 0cea 0022     		movs	r2, #0
 7837 0cec 1A70     		strb	r2, [r3]
2276:..\src/interruptions.c ****                     interrupt_manager();
 7838              		.loc 1 2276 0
 7839 0cee FFF7FEFF 		bl	interrupt_manager
 7840              	.L495:
2277:..\src/interruptions.c ****                 }
2278:..\src/interruptions.c ****                 
2279:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7841              		.loc 1 2279 0
 7842 0cf2 5F4B     		ldr	r3, .L574+36
 7843 0cf4 0022     		movs	r2, #0
 7844 0cf6 1A70     		strb	r2, [r3]
 7845 0cf8 93E0     		b	.L496
 7846              	.L500:
2280:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7847              		.loc 1 2280 0
 7848 0cfa 5D4B     		ldr	r3, .L574+36
 7849 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7850 0cfe 1946     		mov	r1, r3
 7851 0d00 564A     		ldr	r2, .L574+16
 7852 0d02 0B46     		mov	r3, r1
 7853 0d04 DB00     		lsls	r3, r3, #3
 7854 0d06 5B1A     		subs	r3, r3, r1
 7855 0d08 1B01     		lsls	r3, r3, #4
 7856 0d0a 1344     		add	r3, r3, r2
 7857 0d0c 03F58773 		add	r3, r3, #270
 7858 0d10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7859 0d12 022B     		cmp	r3, #2
 7860 0d14 37D0     		beq	.L497
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7861              		.loc 1 2281 0 discriminator 1
 7862 0d16 564B     		ldr	r3, .L574+36
 7863 0d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7864 0d1a 1946     		mov	r1, r3
 7865 0d1c 4F4A     		ldr	r2, .L574+16
 7866 0d1e 0B46     		mov	r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 182


 7867 0d20 DB00     		lsls	r3, r3, #3
 7868 0d22 5B1A     		subs	r3, r3, r1
 7869 0d24 1B01     		lsls	r3, r3, #4
 7870 0d26 1344     		add	r3, r3, r2
 7871 0d28 03F58773 		add	r3, r3, #270
 7872 0d2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2280:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7873              		.loc 1 2280 0 discriminator 1
 7874 0d2e 032B     		cmp	r3, #3
 7875 0d30 29D0     		beq	.L497
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7876              		.loc 1 2282 0
 7877 0d32 4F4B     		ldr	r3, .L574+36
 7878 0d34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7879 0d36 1946     		mov	r1, r3
 7880 0d38 484A     		ldr	r2, .L574+16
 7881 0d3a 0B46     		mov	r3, r1
 7882 0d3c DB00     		lsls	r3, r3, #3
 7883 0d3e 5B1A     		subs	r3, r3, r1
 7884 0d40 1B01     		lsls	r3, r3, #4
 7885 0d42 1344     		add	r3, r3, r2
 7886 0d44 03F58773 		add	r3, r3, #270
 7887 0d48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7888              		.loc 1 2281 0
 7889 0d4a 042B     		cmp	r3, #4
 7890 0d4c 1BD0     		beq	.L497
2283:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7891              		.loc 1 2283 0
 7892 0d4e 484B     		ldr	r3, .L574+36
 7893 0d50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7894 0d52 1946     		mov	r1, r3
 7895 0d54 414A     		ldr	r2, .L574+16
 7896 0d56 0B46     		mov	r3, r1
 7897 0d58 DB00     		lsls	r3, r3, #3
 7898 0d5a 5B1A     		subs	r3, r3, r1
 7899 0d5c 1B01     		lsls	r3, r3, #4
 7900 0d5e 1344     		add	r3, r3, r2
 7901 0d60 03F58773 		add	r3, r3, #270
 7902 0d64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7903              		.loc 1 2282 0
 7904 0d66 052B     		cmp	r3, #5
 7905 0d68 0DD0     		beq	.L497
2284:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7906              		.loc 1 2284 0
 7907 0d6a 414B     		ldr	r3, .L574+36
 7908 0d6c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7909 0d6e 1946     		mov	r1, r3
 7910 0d70 3A4A     		ldr	r2, .L574+16
 7911 0d72 0B46     		mov	r3, r1
 7912 0d74 DB00     		lsls	r3, r3, #3
 7913 0d76 5B1A     		subs	r3, r3, r1
 7914 0d78 1B01     		lsls	r3, r3, #4
 7915 0d7a 1344     		add	r3, r3, r2
 7916 0d7c 03F58773 		add	r3, r3, #270
 7917 0d80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 183


2283:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7918              		.loc 1 2283 0
 7919 0d82 072B     		cmp	r3, #7
 7920 0d84 47D1     		bne	.L498
 7921              	.L497:
2285:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7922              		.loc 1 2285 0
 7923 0d86 3A4B     		ldr	r3, .L574+36
 7924 0d88 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7925 0d8a 1946     		mov	r1, r3
 7926 0d8c 334A     		ldr	r2, .L574+16
 7927 0d8e 0B46     		mov	r3, r1
 7928 0d90 DB00     		lsls	r3, r3, #3
 7929 0d92 5B1A     		subs	r3, r3, r1
 7930 0d94 1B01     		lsls	r3, r3, #4
 7931 0d96 1344     		add	r3, r3, r2
 7932 0d98 03F20F13 		addw	r3, r3, #271
 7933 0d9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7934 0d9e 002B     		cmp	r3, #0
 7935 0da0 19D1     		bne	.L499
2286:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7936              		.loc 1 2286 0
 7937 0da2 334B     		ldr	r3, .L574+36
 7938 0da4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7939 0da6 1846     		mov	r0, r3
 7940 0da8 314B     		ldr	r3, .L574+36
 7941 0daa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7942 0dac 1946     		mov	r1, r3
 7943 0dae 284A     		ldr	r2, .L574+4
 7944 0db0 0B46     		mov	r3, r1
 7945 0db2 DB00     		lsls	r3, r3, #3
 7946 0db4 5B1A     		subs	r3, r3, r1
 7947 0db6 1B01     		lsls	r3, r3, #4
 7948 0db8 1344     		add	r3, r3, r2
 7949 0dba 03F58873 		add	r3, r3, #272
 7950 0dbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7951 0dc0 1946     		mov	r1, r3
 7952 0dc2 2C4A     		ldr	r2, .L574+40
 7953 0dc4 3423     		movs	r3, #52
 7954 0dc6 03FB01F3 		mul	r3, r3, r1
 7955 0dca 1344     		add	r3, r3, r2
 7956 0dcc 1A68     		ldr	r2, [r3]
 7957 0dce 2A49     		ldr	r1, .L574+44
 7958 0dd0 0301     		lsls	r3, r0, #4
 7959 0dd2 0B44     		add	r3, r3, r1
 7960 0dd4 1A60     		str	r2, [r3]
 7961              	.L499:
2287:..\src/interruptions.c ****                         }
2288:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7962              		.loc 1 2288 0
 7963 0dd6 264B     		ldr	r3, .L574+36
 7964 0dd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7965 0dda 1846     		mov	r0, r3
 7966 0ddc 244B     		ldr	r3, .L574+36
 7967 0dde 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7968 0de0 1946     		mov	r1, r3
 7969 0de2 1E4A     		ldr	r2, .L574+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 184


 7970 0de4 0B46     		mov	r3, r1
 7971 0de6 DB00     		lsls	r3, r3, #3
 7972 0de8 5B1A     		subs	r3, r3, r1
 7973 0dea 1B01     		lsls	r3, r3, #4
 7974 0dec 1344     		add	r3, r3, r2
 7975 0dee E033     		adds	r3, r3, #224
 7976 0df0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7977 0df2 214A     		ldr	r2, .L574+44
 7978 0df4 0301     		lsls	r3, r0, #4
 7979 0df6 1344     		add	r3, r3, r2
 7980 0df8 0C33     		adds	r3, r3, #12
 7981 0dfa 0A46     		mov	r2, r1
 7982 0dfc 1A70     		strb	r2, [r3]
2289:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7983              		.loc 1 2289 0
 7984 0dfe 1C4B     		ldr	r3, .L574+36
 7985 0e00 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7986 0e02 1B4B     		ldr	r3, .L574+36
 7987 0e04 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7988 0e06 1C4A     		ldr	r2, .L574+44
 7989 0e08 1B01     		lsls	r3, r3, #4
 7990 0e0a 1344     		add	r3, r3, r2
 7991 0e0c 0C33     		adds	r3, r3, #12
 7992 0e0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7993 0e10 1946     		mov	r1, r3
 7994 0e12 FFF7FEFF 		bl	enable_motor
 7995              	.L498:
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7996              		.loc 1 2279 0 discriminator 2
 7997 0e16 164B     		ldr	r3, .L574+36
 7998 0e18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7999 0e1a 0133     		adds	r3, r3, #1
 8000 0e1c DAB2     		uxtb	r2, r3
 8001 0e1e 144B     		ldr	r3, .L574+36
 8002 0e20 1A70     		strb	r2, [r3]
 8003              	.L496:
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8004              		.loc 1 2279 0 is_stmt 0 discriminator 1
 8005 0e22 134B     		ldr	r3, .L574+36
 8006 0e24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8007 0e26 012B     		cmp	r3, #1
 8008 0e28 7FF667AF 		bls	.L500
2290:..\src/interruptions.c ****                     }
2291:..\src/interruptions.c ****                 }
2292:..\src/interruptions.c ****                     
2293:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8009              		.loc 1 2293 0 is_stmt 1
 8010 0e2c 0020     		movs	r0, #0
 8011 0e2e FFF7FEFF 		bl	memStore
2294:..\src/interruptions.c ****                     
2295:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8012              		.loc 1 2295 0
 8013 0e32 094B     		ldr	r3, .L574+12
 8014 0e34 0022     		movs	r2, #0
 8015 0e36 1A70     		strb	r2, [r3]
2296:..\src/interruptions.c ****             }
2297:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 185


 8016              		.loc 1 2297 0
 8017 0e38 20E0     		b	.L557
 8018              	.L553:
2298:..\src/interruptions.c ****         default:
2299:..\src/interruptions.c ****             break;
 8019              		.loc 1 2299 0
 8020 0e3a 00BF     		nop
 8021 0e3c 1FE0     		b	.L485
 8022              	.L554:
2236:..\src/interruptions.c **** 
 8023              		.loc 1 2236 0
 8024 0e3e 00BF     		nop
 8025 0e40 1DE0     		b	.L485
 8026              	.L555:
2262:..\src/interruptions.c **** 
 8027              		.loc 1 2262 0
 8028 0e42 00BF     		nop
 8029 0e44 1BE0     		b	.L485
 8030              	.L556:
2267:..\src/interruptions.c **** 
 8031              		.loc 1 2267 0
 8032 0e46 00BF     		nop
 8033 0e48 19E0     		b	.L485
 8034              	.L575:
 8035 0e4a 00BF     		.align	2
 8036              	.L574:
 8037 0e4c 7E010000 		.word	emg_counter_2.10423
 8038 0e50 00000000 		.word	g_mem
 8039 0e54 00000000 		.word	interrupt_flag
 8040 0e58 00000000 		.word	emg_2_status
 8041 0e5c 00000000 		.word	c_mem
 8042 0e60 00000000 		.word	ADC_buf
 8043 0e64 08000000 		.word	filt_emg+8
 8044 0e68 D34D6210 		.word	274877907
 8045 0e6c 00000000 		.word	emg_1_status
 8046 0e70 76010000 		.word	idx.10432
 8047 0e74 00000000 		.word	g_meas
 8048 0e78 00000000 		.word	g_ref
 8049              	.L557:
2297:..\src/interruptions.c ****         default:
 8050              		.loc 1 2297 0
 8051 0e7c 00BF     		nop
 8052              	.L485:
2300:..\src/interruptions.c ****     }
2301:..\src/interruptions.c ****         
2302:..\src/interruptions.c ****     if (interrupt_flag){
 8053              		.loc 1 2302 0
 8054 0e7e A74B     		ldr	r3, .L576
 8055 0e80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8056 0e82 002B     		cmp	r3, #0
 8057 0e84 04D0     		beq	.L501
2303:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8058              		.loc 1 2303 0
 8059 0e86 A54B     		ldr	r3, .L576
 8060 0e88 0022     		movs	r2, #0
 8061 0e8a 1A70     		strb	r2, [r3]
2304:..\src/interruptions.c ****         interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 186


 8062              		.loc 1 2304 0
 8063 0e8c FFF7FEFF 		bl	interrupt_manager
 8064              	.L501:
2305:..\src/interruptions.c ****     }
2306:..\src/interruptions.c ****     
2307:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8065              		.loc 1 2307 0
 8066 0e90 A34B     		ldr	r3, .L576+4
 8067 0e92 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8068 0e96 062B     		cmp	r3, #6
 8069 0e98 05D0     		beq	.L502
 8070              		.loc 1 2307 0 is_stmt 0 discriminator 1
 8071 0e9a A14B     		ldr	r3, .L576+4
 8072 0e9c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8073 0ea0 062B     		cmp	r3, #6
 8074 0ea2 40F0C481 		bne	.L503
 8075              	.L502:
2308:..\src/interruptions.c ****         // Read joystick
2309:..\src/interruptions.c ****         
2310:..\src/interruptions.c ****         switch (joy_UD_status) {
 8076              		.loc 1 2310 0 is_stmt 1
 8077 0ea6 9F4B     		ldr	r3, .L576+8
 8078 0ea8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8079 0eaa 052B     		cmp	r3, #5
 8080 0eac 00F2CB80 		bhi	.L504
 8081 0eb0 01A2     		adr	r2, .L506
 8082 0eb2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8083 0eb6 00BF     		.p2align 2
 8084              	.L506:
 8085 0eb8 D10E0000 		.word	.L505+1
 8086 0ebc 6D0F0000 		.word	.L507+1
 8087 0ec0 810F0000 		.word	.L508+1
 8088 0ec4 B50F0000 		.word	.L509+1
 8089 0ec8 21100000 		.word	.L510+1
 8090 0ecc 21100000 		.word	.L510+1
 8091              		.p2align 1
 8092              	.L505:
2311:..\src/interruptions.c ****             case NORMAL:
2312:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8093              		.loc 1 2312 0
 8094 0ed0 954B     		ldr	r3, .L576+12
 8095 0ed2 B3F90430 		ldrsh	r3, [r3, #4]
 8096 0ed6 7B60     		str	r3, [r7, #4]
2313:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2314:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8097              		.loc 1 2314 0
 8098 0ed8 944B     		ldr	r3, .L576+16
 8099 0eda 1B68     		ldr	r3, [r3]
 8100 0edc 7A68     		ldr	r2, [r7, #4]
 8101 0ede D31A     		subs	r3, r2, r3
 8102 0ee0 1846     		mov	r0, r3
 8103 0ee2 FFF7FEFF 		bl	__aeabi_i2f
 8104 0ee6 0446     		mov	r4, r0
 8105 0ee8 904B     		ldr	r3, .L576+16
 8106 0eea 1B68     		ldr	r3, [r3]
 8107 0eec 1846     		mov	r0, r3
 8108 0eee FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 187


 8109 0ef2 0346     		mov	r3, r0
 8110 0ef4 1946     		mov	r1, r3
 8111 0ef6 2046     		mov	r0, r4
 8112 0ef8 FFF7FEFF 		bl	__aeabi_fdiv
 8113 0efc 0346     		mov	r3, r0
 8114 0efe 1C46     		mov	r4, r3
 8115 0f00 874B     		ldr	r3, .L576+4
 8116 0f02 B3F8B632 		ldrh	r3, [r3, #694]
 8117 0f06 1846     		mov	r0, r3
 8118 0f08 FFF7FEFF 		bl	__aeabi_i2f
 8119 0f0c 0346     		mov	r3, r0
 8120 0f0e 1946     		mov	r1, r3
 8121 0f10 2046     		mov	r0, r4
 8122 0f12 FFF7FEFF 		bl	__aeabi_fmul
 8123 0f16 0346     		mov	r3, r0
 8124 0f18 1846     		mov	r0, r3
 8125 0f1a FFF7FEFF 		bl	__aeabi_f2iz
 8126 0f1e 0346     		mov	r3, r0
 8127 0f20 7B60     		str	r3, [r7, #4]
2315:..\src/interruptions.c ****                 
2316:..\src/interruptions.c ****                 if (interrupt_flag){
 8128              		.loc 1 2316 0
 8129 0f22 7E4B     		ldr	r3, .L576
 8130 0f24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8131 0f26 002B     		cmp	r3, #0
 8132 0f28 04D0     		beq	.L511
2317:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8133              		.loc 1 2317 0
 8134 0f2a 7C4B     		ldr	r3, .L576
 8135 0f2c 0022     		movs	r2, #0
 8136 0f2e 1A70     		strb	r2, [r3]
2318:..\src/interruptions.c ****                     interrupt_manager();
 8137              		.loc 1 2318 0
 8138 0f30 FFF7FEFF 		bl	interrupt_manager
 8139              	.L511:
2319:..\src/interruptions.c ****                 }
2320:..\src/interruptions.c **** 
2321:..\src/interruptions.c ****                 //Saturation
2322:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8140              		.loc 1 2322 0
 8141 0f34 7B68     		ldr	r3, [r7, #4]
 8142 0f36 13F5806F 		cmn	r3, #1024
 8143 0f3a 01DA     		bge	.L512
2323:..\src/interruptions.c ****                     i_aux = -1024;
 8144              		.loc 1 2323 0
 8145 0f3c 7C4B     		ldr	r3, .L576+20
 8146 0f3e 7B60     		str	r3, [r7, #4]
 8147              	.L512:
2324:..\src/interruptions.c ****                 if (i_aux > 1024)
 8148              		.loc 1 2324 0
 8149 0f40 7B68     		ldr	r3, [r7, #4]
 8150 0f42 B3F5806F 		cmp	r3, #1024
 8151 0f46 02DD     		ble	.L513
2325:..\src/interruptions.c ****                     i_aux = 1024;
 8152              		.loc 1 2325 0
 8153 0f48 4FF48063 		mov	r3, #1024
 8154 0f4c 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 188


 8155              	.L513:
2326:..\src/interruptions.c **** 
2327:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8156              		.loc 1 2327 0
 8157 0f4e 7B68     		ldr	r3, [r7, #4]
 8158 0f50 1BB2     		sxth	r3, r3
 8159 0f52 1A46     		mov	r2, r3
 8160 0f54 774B     		ldr	r3, .L576+24
 8161 0f56 5A62     		str	r2, [r3, #36]
2328:..\src/interruptions.c **** 
2329:..\src/interruptions.c ****                 if (interrupt_flag){
 8162              		.loc 1 2329 0
 8163 0f58 704B     		ldr	r3, .L576
 8164 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8165 0f5c 002B     		cmp	r3, #0
 8166 0f5e 6BD0     		beq	.L558
2330:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8167              		.loc 1 2330 0
 8168 0f60 6E4B     		ldr	r3, .L576
 8169 0f62 0022     		movs	r2, #0
 8170 0f64 1A70     		strb	r2, [r3]
2331:..\src/interruptions.c ****                     interrupt_manager();
 8171              		.loc 1 2331 0
 8172 0f66 FFF7FEFF 		bl	interrupt_manager
2332:..\src/interruptions.c ****                 }
2333:..\src/interruptions.c **** 
2334:..\src/interruptions.c ****             break;
 8173              		.loc 1 2334 0
 8174 0f6a 65E0     		b	.L558
 8175              	.L507:
2335:..\src/interruptions.c **** 
2336:..\src/interruptions.c ****             case RESET: // reset variables
2337:..\src/interruptions.c ****                 UD_counter = 0;
 8176              		.loc 1 2337 0
 8177 0f6c 724B     		ldr	r3, .L576+28
 8178 0f6e 0022     		movs	r2, #0
 8179 0f70 1A80     		strh	r2, [r3]	@ movhi
2338:..\src/interruptions.c ****                 UD_mean_value = 0;
 8180              		.loc 1 2338 0
 8181 0f72 6E4B     		ldr	r3, .L576+16
 8182 0f74 0022     		movs	r2, #0
 8183 0f76 1A60     		str	r2, [r3]
2339:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8184              		.loc 1 2339 0
 8185 0f78 6A4B     		ldr	r3, .L576+8
 8186 0f7a 0422     		movs	r2, #4
 8187 0f7c 1A70     		strb	r2, [r3]
2340:..\src/interruptions.c **** 
2341:..\src/interruptions.c ****             break;
 8188              		.loc 1 2341 0
 8189 0f7e 62E0     		b	.L504
 8190              	.L508:
2342:..\src/interruptions.c **** 
2343:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2344:..\src/interruptions.c ****                 UD_counter++;
 8191              		.loc 1 2344 0
 8192 0f80 6D4B     		ldr	r3, .L576+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 189


 8193 0f82 1B88     		ldrh	r3, [r3]
 8194 0f84 0133     		adds	r3, r3, #1
 8195 0f86 9AB2     		uxth	r2, r3
 8196 0f88 6B4B     		ldr	r3, .L576+28
 8197 0f8a 1A80     		strh	r2, [r3]	@ movhi
2345:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8198              		.loc 1 2345 0
 8199 0f8c 6A4B     		ldr	r3, .L576+28
 8200 0f8e 1B88     		ldrh	r3, [r3]
 8201 0f90 642B     		cmp	r3, #100
 8202 0f92 53D1     		bne	.L559
2346:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8203              		.loc 1 2346 0
 8204 0f94 684B     		ldr	r3, .L576+28
 8205 0f96 0022     		movs	r2, #0
 8206 0f98 1A80     		strh	r2, [r3]	@ movhi
2347:..\src/interruptions.c **** 
2348:..\src/interruptions.c ****                     if (interrupt_flag){
 8207              		.loc 1 2348 0
 8208 0f9a 604B     		ldr	r3, .L576
 8209 0f9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8210 0f9e 002B     		cmp	r3, #0
 8211 0fa0 04D0     		beq	.L516
2349:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8212              		.loc 1 2349 0
 8213 0fa2 5E4B     		ldr	r3, .L576
 8214 0fa4 0022     		movs	r2, #0
 8215 0fa6 1A70     		strb	r2, [r3]
2350:..\src/interruptions.c ****                         interrupt_manager();
 8216              		.loc 1 2350 0
 8217 0fa8 FFF7FEFF 		bl	interrupt_manager
 8218              	.L516:
2351:..\src/interruptions.c ****                     }
2352:..\src/interruptions.c **** 
2353:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8219              		.loc 1 2353 0
 8220 0fac 5D4B     		ldr	r3, .L576+8
 8221 0fae 0322     		movs	r2, #3
 8222 0fb0 1A70     		strb	r2, [r3]
2354:..\src/interruptions.c ****                 }
2355:..\src/interruptions.c **** 
2356:..\src/interruptions.c ****             break;
 8223              		.loc 1 2356 0
 8224 0fb2 43E0     		b	.L559
 8225              	.L509:
2357:..\src/interruptions.c **** 
2358:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2359:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2360:..\src/interruptions.c ****                 UD_counter++;
 8226              		.loc 1 2360 0
 8227 0fb4 604B     		ldr	r3, .L576+28
 8228 0fb6 1B88     		ldrh	r3, [r3]
 8229 0fb8 0133     		adds	r3, r3, #1
 8230 0fba 9AB2     		uxth	r2, r3
 8231 0fbc 5E4B     		ldr	r3, .L576+28
 8232 0fbe 1A80     		strh	r2, [r3]	@ movhi
2361:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 190


 8233              		.loc 1 2361 0
 8234 0fc0 594B     		ldr	r3, .L576+12
 8235 0fc2 B3F90430 		ldrsh	r3, [r3, #4]
 8236 0fc6 1A46     		mov	r2, r3
 8237 0fc8 584B     		ldr	r3, .L576+16
 8238 0fca 1B68     		ldr	r3, [r3]
 8239 0fcc 1344     		add	r3, r3, r2
 8240 0fce 574A     		ldr	r2, .L576+16
 8241 0fd0 1360     		str	r3, [r2]
2362:..\src/interruptions.c **** 
2363:..\src/interruptions.c ****                 if (interrupt_flag){
 8242              		.loc 1 2363 0
 8243 0fd2 524B     		ldr	r3, .L576
 8244 0fd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8245 0fd6 002B     		cmp	r3, #0
 8246 0fd8 04D0     		beq	.L517
2364:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8247              		.loc 1 2364 0
 8248 0fda 504B     		ldr	r3, .L576
 8249 0fdc 0022     		movs	r2, #0
 8250 0fde 1A70     		strb	r2, [r3]
2365:..\src/interruptions.c ****                     interrupt_manager();
 8251              		.loc 1 2365 0
 8252 0fe0 FFF7FEFF 		bl	interrupt_manager
 8253              	.L517:
2366:..\src/interruptions.c ****                 }
2367:..\src/interruptions.c **** 
2368:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8254              		.loc 1 2368 0
 8255 0fe4 544B     		ldr	r3, .L576+28
 8256 0fe6 1B88     		ldrh	r3, [r3]
 8257 0fe8 C82B     		cmp	r3, #200
 8258 0fea 29D1     		bne	.L560
2369:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8259              		.loc 1 2369 0
 8260 0fec 4F4B     		ldr	r3, .L576+16
 8261 0fee 1B68     		ldr	r3, [r3]
 8262 0ff0 524A     		ldr	r2, .L576+32
 8263 0ff2 82FB0312 		smull	r1, r2, r2, r3
 8264 0ff6 9211     		asrs	r2, r2, #6
 8265 0ff8 DB17     		asrs	r3, r3, #31
 8266 0ffa D31A     		subs	r3, r2, r3
 8267 0ffc 4B4A     		ldr	r2, .L576+16
 8268 0ffe 1360     		str	r3, [r2]
2370:..\src/interruptions.c **** 
2371:..\src/interruptions.c ****                     if (interrupt_flag){
 8269              		.loc 1 2371 0
 8270 1000 464B     		ldr	r3, .L576
 8271 1002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8272 1004 002B     		cmp	r3, #0
 8273 1006 04D0     		beq	.L519
2372:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8274              		.loc 1 2372 0
 8275 1008 444B     		ldr	r3, .L576
 8276 100a 0022     		movs	r2, #0
 8277 100c 1A70     		strb	r2, [r3]
2373:..\src/interruptions.c ****                         interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 191


 8278              		.loc 1 2373 0
 8279 100e FFF7FEFF 		bl	interrupt_manager
 8280              	.L519:
2374:..\src/interruptions.c ****                     }
2375:..\src/interruptions.c **** 
2376:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8281              		.loc 1 2376 0
 8282 1012 494B     		ldr	r3, .L576+28
 8283 1014 0022     		movs	r2, #0
 8284 1016 1A80     		strh	r2, [r3]	@ movhi
2377:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8285              		.loc 1 2377 0
 8286 1018 424B     		ldr	r3, .L576+8
 8287 101a 0022     		movs	r2, #0
 8288 101c 1A70     		strb	r2, [r3]
2378:..\src/interruptions.c ****                 }
2379:..\src/interruptions.c ****             break;
 8289              		.loc 1 2379 0
 8290 101e 0FE0     		b	.L560
 8291              	.L510:
2380:..\src/interruptions.c **** 
2381:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2382:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8292              		.loc 1 2382 0
 8293 1020 474B     		ldr	r3, .L576+36
 8294 1022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8295 1024 002B     		cmp	r3, #0
 8296 1026 0DD1     		bne	.L561
 8297              		.loc 1 2382 0 is_stmt 0 discriminator 1
 8298 1028 464B     		ldr	r3, .L576+40
 8299 102a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8300 102c 002B     		cmp	r3, #0
 8301 102e 09D1     		bne	.L561
2383:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8302              		.loc 1 2383 0 is_stmt 1
 8303 1030 3C4B     		ldr	r3, .L576+8
 8304 1032 0222     		movs	r2, #2
 8305 1034 1A70     		strb	r2, [r3]
2384:..\src/interruptions.c ****             break;
 8306              		.loc 1 2384 0
 8307 1036 05E0     		b	.L561
 8308              	.L558:
2334:..\src/interruptions.c **** 
 8309              		.loc 1 2334 0
 8310 1038 00BF     		nop
 8311 103a 04E0     		b	.L504
 8312              	.L559:
2356:..\src/interruptions.c **** 
 8313              		.loc 1 2356 0
 8314 103c 00BF     		nop
 8315 103e 02E0     		b	.L504
 8316              	.L560:
2379:..\src/interruptions.c **** 
 8317              		.loc 1 2379 0
 8318 1040 00BF     		nop
 8319 1042 00E0     		b	.L504
 8320              	.L561:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 192


 8321              		.loc 1 2384 0
 8322 1044 00BF     		nop
 8323              	.L504:
2385:..\src/interruptions.c ****         }
2386:..\src/interruptions.c **** 
2387:..\src/interruptions.c ****         if (interrupt_flag){
 8324              		.loc 1 2387 0
 8325 1046 354B     		ldr	r3, .L576
 8326 1048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8327 104a 002B     		cmp	r3, #0
 8328 104c 04D0     		beq	.L521
2388:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8329              		.loc 1 2388 0
 8330 104e 334B     		ldr	r3, .L576
 8331 1050 0022     		movs	r2, #0
 8332 1052 1A70     		strb	r2, [r3]
2389:..\src/interruptions.c ****             interrupt_manager();
 8333              		.loc 1 2389 0
 8334 1054 FFF7FEFF 		bl	interrupt_manager
 8335              	.L521:
2390:..\src/interruptions.c ****         }
2391:..\src/interruptions.c ****             
2392:..\src/interruptions.c ****         switch (joy_LR_status) {
 8336              		.loc 1 2392 0
 8337 1058 3B4B     		ldr	r3, .L576+44
 8338 105a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8339 105c 052B     		cmp	r3, #5
 8340 105e 00F2DD80 		bhi	.L522
 8341 1062 01A2     		adr	r2, .L524
 8342 1064 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8343              		.p2align 2
 8344              	.L524:
 8345 1068 81100000 		.word	.L523+1
 8346 106c 51110000 		.word	.L525+1
 8347 1070 65110000 		.word	.L526+1
 8348 1074 99110000 		.word	.L527+1
 8349 1078 F3110000 		.word	.L528+1
 8350 107c F3110000 		.word	.L528+1
 8351              		.p2align 1
 8352              	.L523:
2393:..\src/interruptions.c ****             case NORMAL:
2394:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8353              		.loc 1 2394 0
 8354 1080 294B     		ldr	r3, .L576+12
 8355 1082 B3F90630 		ldrsh	r3, [r3, #6]
 8356 1086 7B60     		str	r3, [r7, #4]
2395:..\src/interruptions.c **** 
2396:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8357              		.loc 1 2396 0
 8358 1088 304B     		ldr	r3, .L576+48
 8359 108a 1B68     		ldr	r3, [r3]
 8360 108c 7A68     		ldr	r2, [r7, #4]
 8361 108e D31A     		subs	r3, r2, r3
 8362 1090 1846     		mov	r0, r3
 8363 1092 FFF7FEFF 		bl	__aeabi_i2f
 8364 1096 0446     		mov	r4, r0
 8365 1098 2C4B     		ldr	r3, .L576+48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 193


 8366 109a 1B68     		ldr	r3, [r3]
 8367 109c 1846     		mov	r0, r3
 8368 109e FFF7FEFF 		bl	__aeabi_i2f
 8369 10a2 0346     		mov	r3, r0
 8370 10a4 1946     		mov	r1, r3
 8371 10a6 2046     		mov	r0, r4
 8372 10a8 FFF7FEFF 		bl	__aeabi_fdiv
 8373 10ac 0346     		mov	r3, r0
 8374 10ae 1C46     		mov	r4, r3
 8375 10b0 1B4B     		ldr	r3, .L576+4
 8376 10b2 B3F8B432 		ldrh	r3, [r3, #692]
 8377 10b6 1846     		mov	r0, r3
 8378 10b8 FFF7FEFF 		bl	__aeabi_i2f
 8379 10bc 0346     		mov	r3, r0
 8380 10be 1946     		mov	r1, r3
 8381 10c0 2046     		mov	r0, r4
 8382 10c2 FFF7FEFF 		bl	__aeabi_fmul
 8383 10c6 0346     		mov	r3, r0
 8384 10c8 1846     		mov	r0, r3
 8385 10ca FFF7FEFF 		bl	__aeabi_f2iz
 8386 10ce 0346     		mov	r3, r0
 8387 10d0 7B60     		str	r3, [r7, #4]
2397:..\src/interruptions.c ****                 
2398:..\src/interruptions.c ****                 if (interrupt_flag){
 8388              		.loc 1 2398 0
 8389 10d2 124B     		ldr	r3, .L576
 8390 10d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8391 10d6 002B     		cmp	r3, #0
 8392 10d8 04D0     		beq	.L529
2399:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8393              		.loc 1 2399 0
 8394 10da 104B     		ldr	r3, .L576
 8395 10dc 0022     		movs	r2, #0
 8396 10de 1A70     		strb	r2, [r3]
2400:..\src/interruptions.c ****                     interrupt_manager();
 8397              		.loc 1 2400 0
 8398 10e0 FFF7FEFF 		bl	interrupt_manager
 8399              	.L529:
2401:..\src/interruptions.c ****                 }
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****                 //Saturation
2404:..\src/interruptions.c ****                 if (i_aux < -1024)
 8400              		.loc 1 2404 0
 8401 10e4 7B68     		ldr	r3, [r7, #4]
 8402 10e6 13F5806F 		cmn	r3, #1024
 8403 10ea 01DA     		bge	.L530
2405:..\src/interruptions.c ****                     i_aux = -1024;
 8404              		.loc 1 2405 0
 8405 10ec 104B     		ldr	r3, .L576+20
 8406 10ee 7B60     		str	r3, [r7, #4]
 8407              	.L530:
2406:..\src/interruptions.c ****                 if (i_aux > 1024)
 8408              		.loc 1 2406 0
 8409 10f0 7B68     		ldr	r3, [r7, #4]
 8410 10f2 B3F5806F 		cmp	r3, #1024
 8411 10f6 02DD     		ble	.L531
2407:..\src/interruptions.c ****                     i_aux = 1024;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 194


 8412              		.loc 1 2407 0
 8413 10f8 4FF48063 		mov	r3, #1024
 8414 10fc 7B60     		str	r3, [r7, #4]
 8415              	.L531:
2408:..\src/interruptions.c **** 
2409:..\src/interruptions.c ****                 if (interrupt_flag){
 8416              		.loc 1 2409 0
 8417 10fe 074B     		ldr	r3, .L576
 8418 1100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8419 1102 002B     		cmp	r3, #0
 8420 1104 04D0     		beq	.L532
2410:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8421              		.loc 1 2410 0
 8422 1106 054B     		ldr	r3, .L576
 8423 1108 0022     		movs	r2, #0
 8424 110a 1A70     		strb	r2, [r3]
2411:..\src/interruptions.c ****                     interrupt_manager();
 8425              		.loc 1 2411 0
 8426 110c FFF7FEFF 		bl	interrupt_manager
 8427              	.L532:
2412:..\src/interruptions.c ****                 }
2413:..\src/interruptions.c **** 
2414:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8428              		.loc 1 2414 0
 8429 1110 7B68     		ldr	r3, [r7, #4]
 8430 1112 1BB2     		sxth	r3, r3
 8431 1114 1A46     		mov	r2, r3
 8432 1116 074B     		ldr	r3, .L576+24
 8433 1118 1A62     		str	r2, [r3, #32]
2415:..\src/interruptions.c **** 
2416:..\src/interruptions.c ****             break;
 8434              		.loc 1 2416 0
 8435 111a 7FE0     		b	.L522
 8436              	.L577:
 8437              		.align	2
 8438              	.L576:
 8439 111c 00000000 		.word	interrupt_flag
 8440 1120 00000000 		.word	c_mem
 8441 1124 00000000 		.word	joy_UD_status
 8442 1128 00000000 		.word	ADC_buf
 8443 112c 80010000 		.word	UD_mean_value.10426
 8444 1130 00FCFFFF 		.word	-1024
 8445 1134 00000000 		.word	g_adc_meas
 8446 1138 84010000 		.word	UD_counter.10424
 8447 113c 1F85EB51 		.word	1374389535
 8448 1140 00000000 		.word	emg_1_status
 8449 1144 00000000 		.word	emg_2_status
 8450 1148 00000000 		.word	joy_LR_status
 8451 114c 88010000 		.word	LR_mean_value.10427
 8452              	.L525:
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****             case RESET: // reset variables
2419:..\src/interruptions.c ****                 LR_counter = 0;
 8453              		.loc 1 2419 0
 8454 1150 644B     		ldr	r3, .L578
 8455 1152 0022     		movs	r2, #0
 8456 1154 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 195


2420:..\src/interruptions.c ****                 LR_mean_value = 0;
 8457              		.loc 1 2420 0
 8458 1156 644B     		ldr	r3, .L578+4
 8459 1158 0022     		movs	r2, #0
 8460 115a 1A60     		str	r2, [r3]
2421:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8461              		.loc 1 2421 0
 8462 115c 634B     		ldr	r3, .L578+8
 8463 115e 0422     		movs	r2, #4
 8464 1160 1A70     		strb	r2, [r3]
2422:..\src/interruptions.c ****             break;
 8465              		.loc 1 2422 0
 8466 1162 5BE0     		b	.L522
 8467              	.L526:
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2425:..\src/interruptions.c ****                 LR_counter++;
 8468              		.loc 1 2425 0
 8469 1164 5F4B     		ldr	r3, .L578
 8470 1166 1B88     		ldrh	r3, [r3]
 8471 1168 0133     		adds	r3, r3, #1
 8472 116a 9AB2     		uxth	r2, r3
 8473 116c 5D4B     		ldr	r3, .L578
 8474 116e 1A80     		strh	r2, [r3]	@ movhi
2426:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8475              		.loc 1 2426 0
 8476 1170 5C4B     		ldr	r3, .L578
 8477 1172 1B88     		ldrh	r3, [r3]
 8478 1174 642B     		cmp	r3, #100
 8479 1176 4CD1     		bne	.L562
2427:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8480              		.loc 1 2427 0
 8481 1178 5A4B     		ldr	r3, .L578
 8482 117a 0022     		movs	r2, #0
 8483 117c 1A80     		strh	r2, [r3]	@ movhi
2428:..\src/interruptions.c **** 
2429:..\src/interruptions.c ****                     if (interrupt_flag){
 8484              		.loc 1 2429 0
 8485 117e 5C4B     		ldr	r3, .L578+12
 8486 1180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8487 1182 002B     		cmp	r3, #0
 8488 1184 04D0     		beq	.L534
2430:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8489              		.loc 1 2430 0
 8490 1186 5A4B     		ldr	r3, .L578+12
 8491 1188 0022     		movs	r2, #0
 8492 118a 1A70     		strb	r2, [r3]
2431:..\src/interruptions.c ****                         interrupt_manager();
 8493              		.loc 1 2431 0
 8494 118c FFF7FEFF 		bl	interrupt_manager
 8495              	.L534:
2432:..\src/interruptions.c ****                     }
2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8496              		.loc 1 2434 0
 8497 1190 564B     		ldr	r3, .L578+8
 8498 1192 0322     		movs	r2, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 196


 8499 1194 1A70     		strb	r2, [r3]
2435:..\src/interruptions.c ****                 }
2436:..\src/interruptions.c ****             break;
 8500              		.loc 1 2436 0
 8501 1196 3CE0     		b	.L562
 8502              	.L527:
2437:..\src/interruptions.c **** 
2438:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2439:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2440:..\src/interruptions.c ****                 LR_counter++;
 8503              		.loc 1 2440 0
 8504 1198 524B     		ldr	r3, .L578
 8505 119a 1B88     		ldrh	r3, [r3]
 8506 119c 0133     		adds	r3, r3, #1
 8507 119e 9AB2     		uxth	r2, r3
 8508 11a0 504B     		ldr	r3, .L578
 8509 11a2 1A80     		strh	r2, [r3]	@ movhi
2441:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8510              		.loc 1 2441 0
 8511 11a4 534B     		ldr	r3, .L578+16
 8512 11a6 B3F90630 		ldrsh	r3, [r3, #6]
 8513 11aa 1A46     		mov	r2, r3
 8514 11ac 4E4B     		ldr	r3, .L578+4
 8515 11ae 1B68     		ldr	r3, [r3]
 8516 11b0 1344     		add	r3, r3, r2
 8517 11b2 4D4A     		ldr	r2, .L578+4
 8518 11b4 1360     		str	r3, [r2]
2442:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8519              		.loc 1 2442 0
 8520 11b6 4B4B     		ldr	r3, .L578
 8521 11b8 1B88     		ldrh	r3, [r3]
 8522 11ba C82B     		cmp	r3, #200
 8523 11bc 2BD1     		bne	.L563
2443:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8524              		.loc 1 2443 0
 8525 11be 4A4B     		ldr	r3, .L578+4
 8526 11c0 1B68     		ldr	r3, [r3]
 8527 11c2 4D4A     		ldr	r2, .L578+20
 8528 11c4 82FB0312 		smull	r1, r2, r2, r3
 8529 11c8 9211     		asrs	r2, r2, #6
 8530 11ca DB17     		asrs	r3, r3, #31
 8531 11cc D31A     		subs	r3, r2, r3
 8532 11ce 464A     		ldr	r2, .L578+4
 8533 11d0 1360     		str	r3, [r2]
2444:..\src/interruptions.c ****                     
2445:..\src/interruptions.c ****                     if (interrupt_flag){
 8534              		.loc 1 2445 0
 8535 11d2 474B     		ldr	r3, .L578+12
 8536 11d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8537 11d6 002B     		cmp	r3, #0
 8538 11d8 04D0     		beq	.L536
2446:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8539              		.loc 1 2446 0
 8540 11da 454B     		ldr	r3, .L578+12
 8541 11dc 0022     		movs	r2, #0
 8542 11de 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****                         interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 197


 8543              		.loc 1 2447 0
 8544 11e0 FFF7FEFF 		bl	interrupt_manager
 8545              	.L536:
2448:..\src/interruptions.c ****                     }
2449:..\src/interruptions.c **** 
2450:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8546              		.loc 1 2450 0
 8547 11e4 3F4B     		ldr	r3, .L578
 8548 11e6 0022     		movs	r2, #0
 8549 11e8 1A80     		strh	r2, [r3]	@ movhi
2451:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8550              		.loc 1 2451 0
 8551 11ea 404B     		ldr	r3, .L578+8
 8552 11ec 0022     		movs	r2, #0
 8553 11ee 1A70     		strb	r2, [r3]
2452:..\src/interruptions.c ****                 }
2453:..\src/interruptions.c ****             break;
 8554              		.loc 1 2453 0
 8555 11f0 11E0     		b	.L563
 8556              	.L528:
2454:..\src/interruptions.c **** 
2455:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2456:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8557              		.loc 1 2456 0
 8558 11f2 424B     		ldr	r3, .L578+24
 8559 11f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8560 11f6 002B     		cmp	r3, #0
 8561 11f8 0FD1     		bne	.L564
 8562              		.loc 1 2456 0 is_stmt 0 discriminator 1
 8563 11fa 414B     		ldr	r3, .L578+28
 8564 11fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8565 11fe 002B     		cmp	r3, #0
 8566 1200 0BD1     		bne	.L564
 8567              		.loc 1 2456 0 discriminator 2
 8568 1202 404B     		ldr	r3, .L578+32
 8569 1204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8570 1206 002B     		cmp	r3, #0
 8571 1208 07D1     		bne	.L564
2457:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8572              		.loc 1 2457 0 is_stmt 1
 8573 120a 384B     		ldr	r3, .L578+8
 8574 120c 0222     		movs	r2, #2
 8575 120e 1A70     		strb	r2, [r3]
2458:..\src/interruptions.c ****             break;
 8576              		.loc 1 2458 0
 8577 1210 03E0     		b	.L564
 8578              	.L562:
2436:..\src/interruptions.c **** 
 8579              		.loc 1 2436 0
 8580 1212 00BF     		nop
 8581 1214 02E0     		b	.L522
 8582              	.L563:
2453:..\src/interruptions.c **** 
 8583              		.loc 1 2453 0
 8584 1216 00BF     		nop
 8585 1218 00E0     		b	.L522
 8586              	.L564:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 198


 8587              		.loc 1 2458 0
 8588 121a 00BF     		nop
 8589              	.L522:
2459:..\src/interruptions.c ****         }
2460:..\src/interruptions.c ****        
2461:..\src/interruptions.c ****         if (interrupt_flag){
 8590              		.loc 1 2461 0
 8591 121c 344B     		ldr	r3, .L578+12
 8592 121e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8593 1220 002B     		cmp	r3, #0
 8594 1222 04D0     		beq	.L503
2462:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8595              		.loc 1 2462 0
 8596 1224 324B     		ldr	r3, .L578+12
 8597 1226 0022     		movs	r2, #0
 8598 1228 1A70     		strb	r2, [r3]
2463:..\src/interruptions.c ****             interrupt_manager();
 8599              		.loc 1 2463 0
 8600 122a FFF7FEFF 		bl	interrupt_manager
 8601              	.L503:
2464:..\src/interruptions.c ****         }
2465:..\src/interruptions.c ****     }
2466:..\src/interruptions.c ****     
2467:..\src/interruptions.c ****     // Read also EMG additional sensors port
2468:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8602              		.loc 1 2468 0
 8603 122e 364B     		ldr	r3, .L578+36
 8604 1230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8605 1232 062B     		cmp	r3, #6
 8606 1234 52D9     		bls	.L565
2469:..\src/interruptions.c ****         
2470:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8607              		.loc 1 2470 0
 8608 1236 354B     		ldr	r3, .L578+40
 8609 1238 0022     		movs	r2, #0
 8610 123a 1A70     		strb	r2, [r3]
 8611 123c 4AE0     		b	.L539
 8612              	.L546:
2471:..\src/interruptions.c ****             
2472:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8613              		.loc 1 2472 0
 8614 123e 334B     		ldr	r3, .L578+40
 8615 1240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8616 1242 0633     		adds	r3, r3, #6
 8617 1244 2B4A     		ldr	r2, .L578+16
 8618 1246 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8619 124a 7B60     		str	r3, [r7, #4]
2473:..\src/interruptions.c ****             if (i_aux < 0) 
 8620              		.loc 1 2473 0
 8621 124c 7B68     		ldr	r3, [r7, #4]
 8622 124e 002B     		cmp	r3, #0
 8623 1250 01DA     		bge	.L540
2474:..\src/interruptions.c ****                 i_aux = 0;
 8624              		.loc 1 2474 0
 8625 1252 0023     		movs	r3, #0
 8626 1254 7B60     		str	r3, [r7, #4]
 8627              	.L540:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 199


2475:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8628              		.loc 1 2475 0
 8629 1256 2D4B     		ldr	r3, .L578+40
 8630 1258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8631 125a 0233     		adds	r3, r3, #2
 8632 125c DB00     		lsls	r3, r3, #3
 8633 125e 2C4A     		ldr	r2, .L578+44
 8634 1260 1344     		add	r3, r3, r2
 8635 1262 1946     		mov	r1, r3
 8636 1264 7868     		ldr	r0, [r7, #4]
 8637 1266 FFF7FEFF 		bl	filter
 8638 126a 7860     		str	r0, [r7, #4]
2476:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8639              		.loc 1 2476 0
 8640 126c 7B68     		ldr	r3, [r7, #4]
 8641 126e 9B02     		lsls	r3, r3, #10
 8642 1270 002B     		cmp	r3, #0
 8643 1272 01DA     		bge	.L541
 8644 1274 03F2FF33 		addw	r3, r3, #1023
 8645              	.L541:
 8646 1278 9B12     		asrs	r3, r3, #10
 8647 127a 7B60     		str	r3, [r7, #4]
2477:..\src/interruptions.c **** 
2478:..\src/interruptions.c ****             if (interrupt_flag){
 8648              		.loc 1 2478 0
 8649 127c 1C4B     		ldr	r3, .L578+12
 8650 127e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8651 1280 002B     		cmp	r3, #0
 8652 1282 04D0     		beq	.L542
2479:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8653              		.loc 1 2479 0
 8654 1284 1A4B     		ldr	r3, .L578+12
 8655 1286 0022     		movs	r2, #0
 8656 1288 1A70     		strb	r2, [r3]
2480:..\src/interruptions.c ****                 interrupt_manager();
 8657              		.loc 1 2480 0
 8658 128a FFF7FEFF 		bl	interrupt_manager
 8659              	.L542:
2481:..\src/interruptions.c ****             }
2482:..\src/interruptions.c ****             //Saturation
2483:..\src/interruptions.c ****             if (i_aux < 0)
 8660              		.loc 1 2483 0
 8661 128e 7B68     		ldr	r3, [r7, #4]
 8662 1290 002B     		cmp	r3, #0
 8663 1292 02DA     		bge	.L543
2484:..\src/interruptions.c ****                 i_aux = 0;
 8664              		.loc 1 2484 0
 8665 1294 0023     		movs	r3, #0
 8666 1296 7B60     		str	r3, [r7, #4]
 8667 1298 06E0     		b	.L544
 8668              	.L543:
2485:..\src/interruptions.c ****             else 
2486:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8669              		.loc 1 2486 0
 8670 129a 7B68     		ldr	r3, [r7, #4]
 8671 129c B3F5806F 		cmp	r3, #1024
 8672 12a0 02DD     		ble	.L544
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 200


2487:..\src/interruptions.c ****                     i_aux = 1024;
 8673              		.loc 1 2487 0
 8674 12a2 4FF48063 		mov	r3, #1024
 8675 12a6 7B60     		str	r3, [r7, #4]
 8676              	.L544:
2488:..\src/interruptions.c ****             
2489:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8677              		.loc 1 2489 0
 8678 12a8 184B     		ldr	r3, .L578+40
 8679 12aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8680 12ac 1949     		ldr	r1, .L578+48
 8681 12ae 0233     		adds	r3, r3, #2
 8682 12b0 7A68     		ldr	r2, [r7, #4]
 8683 12b2 41F82320 		str	r2, [r1, r3, lsl #2]
2490:..\src/interruptions.c **** 
2491:..\src/interruptions.c ****             if (interrupt_flag){
 8684              		.loc 1 2491 0
 8685 12b6 0E4B     		ldr	r3, .L578+12
 8686 12b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8687 12ba 002B     		cmp	r3, #0
 8688 12bc 04D0     		beq	.L545
2492:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8689              		.loc 1 2492 0
 8690 12be 0C4B     		ldr	r3, .L578+12
 8691 12c0 0022     		movs	r2, #0
 8692 12c2 1A70     		strb	r2, [r3]
2493:..\src/interruptions.c ****                 interrupt_manager();
 8693              		.loc 1 2493 0
 8694 12c4 FFF7FEFF 		bl	interrupt_manager
 8695              	.L545:
2470:..\src/interruptions.c ****             
 8696              		.loc 1 2470 0 discriminator 2
 8697 12c8 104B     		ldr	r3, .L578+40
 8698 12ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8699 12cc 0133     		adds	r3, r3, #1
 8700 12ce DAB2     		uxtb	r2, r3
 8701 12d0 0E4B     		ldr	r3, .L578+40
 8702 12d2 1A70     		strb	r2, [r3]
 8703              	.L539:
2470:..\src/interruptions.c ****             
 8704              		.loc 1 2470 0 is_stmt 0 discriminator 1
 8705 12d4 0D4B     		ldr	r3, .L578+40
 8706 12d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8707 12d8 052B     		cmp	r3, #5
 8708 12da B0D9     		bls	.L546
 8709              	.L565:
2494:..\src/interruptions.c ****             }
2495:..\src/interruptions.c ****         }
2496:..\src/interruptions.c ****     }
2497:..\src/interruptions.c ****     
2498:..\src/interruptions.c **** }
 8710              		.loc 1 2498 0 is_stmt 1
 8711 12dc 00BF     		nop
 8712 12de 0C37     		adds	r7, r7, #12
 8713              		.cfi_def_cfa_offset 20
 8714 12e0 BD46     		mov	sp, r7
 8715              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 201


 8716              		@ sp needed
 8717 12e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 8718              	.L579:
 8719              		.align	2
 8720              	.L578:
 8721 12e4 8C010000 		.word	LR_counter.10425
 8722 12e8 88010000 		.word	LR_mean_value.10427
 8723 12ec 00000000 		.word	joy_LR_status
 8724 12f0 00000000 		.word	interrupt_flag
 8725 12f4 00000000 		.word	ADC_buf
 8726 12f8 1F85EB51 		.word	1374389535
 8727 12fc 00000000 		.word	emg_1_status
 8728 1300 00000000 		.word	emg_2_status
 8729 1304 00000000 		.word	joy_UD_status
 8730 1308 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8731 130c 76010000 		.word	idx.10432
 8732 1310 00000000 		.word	filt_emg
 8733 1314 00000000 		.word	g_adc_meas
 8734              		.cfi_endproc
 8735              	.LFE75:
 8736              		.size	analog_read_end, .-analog_read_end
 8737              		.section	.text.overcurrent_control,"ax",%progbits
 8738              		.align	2
 8739              		.global	overcurrent_control
 8740              		.thumb
 8741              		.thumb_func
 8742              		.type	overcurrent_control, %function
 8743              	overcurrent_control:
 8744              	.LFB76:
2499:..\src/interruptions.c **** 
2500:..\src/interruptions.c **** //==============================================================================
2501:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2502:..\src/interruptions.c **** //==============================================================================
2503:..\src/interruptions.c **** 
2504:..\src/interruptions.c **** void overcurrent_control() {
 8745              		.loc 1 2504 0
 8746              		.cfi_startproc
 8747              		@ args = 0, pretend = 0, frame = 8
 8748              		@ frame_needed = 1, uses_anonymous_args = 0
 8749              		@ link register save eliminated.
 8750 0000 80B4     		push	{r7}
 8751              		.cfi_def_cfa_offset 4
 8752              		.cfi_offset 7, -4
 8753 0002 83B0     		sub	sp, sp, #12
 8754              		.cfi_def_cfa_offset 16
 8755 0004 00AF     		add	r7, sp, #0
 8756              		.cfi_def_cfa_register 7
 8757              	.LBB10:
2505:..\src/interruptions.c ****     
2506:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8758              		.loc 1 2506 0
 8759 0006 0023     		movs	r3, #0
 8760 0008 FB71     		strb	r3, [r7, #7]
 8761 000a 6CE0     		b	.L581
 8762              	.L586:
2507:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8763              		.loc 1 2507 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 202


 8764 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8765 000e 3A49     		ldr	r1, .L588
 8766 0010 1346     		mov	r3, r2
 8767 0012 DB00     		lsls	r3, r3, #3
 8768 0014 9B1A     		subs	r3, r3, r2
 8769 0016 1B01     		lsls	r3, r3, #4
 8770 0018 0B44     		add	r3, r3, r1
 8771 001a 03F58673 		add	r3, r3, #268
 8772 001e B3F90030 		ldrsh	r3, [r3]
 8773 0022 002B     		cmp	r3, #0
 8774 0024 5CD0     		beq	.L582
 8775              	.LBB11:
2508:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8776              		.loc 1 2508 0
 8777 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8778 0028 3449     		ldr	r1, .L588+4
 8779 002a 1346     		mov	r3, r2
 8780 002c DB00     		lsls	r3, r3, #3
 8781 002e 9B1A     		subs	r3, r3, r2
 8782 0030 1B01     		lsls	r3, r3, #4
 8783 0032 0B44     		add	r3, r3, r1
 8784 0034 03F58873 		add	r3, r3, #272
 8785 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8786 003a 1946     		mov	r1, r3
 8787 003c 304A     		ldr	r2, .L588+8
 8788 003e 3423     		movs	r3, #52
 8789 0040 03FB01F3 		mul	r3, r3, r1
 8790 0044 1344     		add	r3, r3, r2
 8791 0046 0C33     		adds	r3, r3, #12
 8792 0048 1B68     		ldr	r3, [r3]
 8793 004a 3B60     		str	r3, [r7]
2509:..\src/interruptions.c ****             // check if the current is over the limit
2510:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2511:..\src/interruptions.c ****                 if (curr < 0){
 8794              		.loc 1 2511 0
 8795 004c 3B68     		ldr	r3, [r7]
 8796 004e 002B     		cmp	r3, #0
 8797 0050 02DA     		bge	.L583
2512:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8798              		.loc 1 2512 0
 8799 0052 3B68     		ldr	r3, [r7]
 8800 0054 5B42     		negs	r3, r3
 8801 0056 3B60     		str	r3, [r7]
 8802              	.L583:
2513:..\src/interruptions.c ****                 }
2514:..\src/interruptions.c ****          //   }
2515:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8803              		.loc 1 2515 0
 8804 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8805 005a 2749     		ldr	r1, .L588
 8806 005c 1346     		mov	r3, r2
 8807 005e DB00     		lsls	r3, r3, #3
 8808 0060 9B1A     		subs	r3, r3, r2
 8809 0062 1B01     		lsls	r3, r3, #4
 8810 0064 0B44     		add	r3, r3, r1
 8811 0066 03F58673 		add	r3, r3, #268
 8812 006a B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 203


 8813 006e 1A46     		mov	r2, r3
 8814 0070 3B68     		ldr	r3, [r7]
 8815 0072 9A42     		cmp	r2, r3
 8816 0074 09DA     		bge	.L584
2516:..\src/interruptions.c ****                 //decrease pwm_limit
2517:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8817              		.loc 1 2517 0
 8818 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8819 0078 224A     		ldr	r2, .L588+12
 8820 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8821 007e 013A     		subs	r2, r2, #1
 8822 0080 91B2     		uxth	r1, r2
 8823 0082 204A     		ldr	r2, .L588+12
 8824 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8825 0088 18E0     		b	.L587
 8826              	.L584:
2518:..\src/interruptions.c ****             // check if the current is in the safe zone
2519:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8827              		.loc 1 2519 0
 8828 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8829 008c 1A49     		ldr	r1, .L588
 8830 008e 1346     		mov	r3, r2
 8831 0090 DB00     		lsls	r3, r3, #3
 8832 0092 9B1A     		subs	r3, r3, r2
 8833 0094 1B01     		lsls	r3, r3, #4
 8834 0096 0B44     		add	r3, r3, r1
 8835 0098 03F58673 		add	r3, r3, #268
 8836 009c B3F90030 		ldrsh	r3, [r3]
 8837 00a0 A3F10A02 		sub	r2, r3, #10
 8838 00a4 3B68     		ldr	r3, [r7]
 8839 00a6 9A42     		cmp	r2, r3
 8840 00a8 08DD     		ble	.L587
2520:..\src/interruptions.c ****                 //increase pwm_limit
2521:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8841              		.loc 1 2521 0
 8842 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8843 00ac 154A     		ldr	r2, .L588+12
 8844 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8845 00b2 0132     		adds	r2, r2, #1
 8846 00b4 91B2     		uxth	r1, r2
 8847 00b6 134A     		ldr	r2, .L588+12
 8848 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8849              	.L587:
2522:..\src/interruptions.c ****             }
2523:..\src/interruptions.c **** 
2524:..\src/interruptions.c ****             // Bound pwm_limit
2525:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2526:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2527:..\src/interruptions.c ****             else 
2528:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8850              		.loc 1 2528 0
 8851 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8852 00be 114A     		ldr	r2, .L588+12
 8853 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8854 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8855 00c6 1049     		ldr	r1, .L588+16
 8856 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 204


 8857 00cc 9A42     		cmp	r2, r3
 8858 00ce 07D9     		bls	.L582
2529:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8859              		.loc 1 2529 0
 8860 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8861 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8862 00d4 0C49     		ldr	r1, .L588+16
 8863 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8864 00da 0A4A     		ldr	r2, .L588+12
 8865 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8866              	.L582:
 8867              	.LBE11:
2506:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8868              		.loc 1 2506 0 discriminator 2
 8869 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8870 00e2 0133     		adds	r3, r3, #1
 8871 00e4 FB71     		strb	r3, [r7, #7]
 8872              	.L581:
2506:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8873              		.loc 1 2506 0 is_stmt 0 discriminator 1
 8874 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8875 00e8 012B     		cmp	r3, #1
 8876 00ea 8FD9     		bls	.L586
 8877              	.LBE10:
2530:..\src/interruptions.c ****         }
2531:..\src/interruptions.c ****     }
2532:..\src/interruptions.c **** }
 8878              		.loc 1 2532 0 is_stmt 1
 8879 00ec 00BF     		nop
 8880 00ee 0C37     		adds	r7, r7, #12
 8881              		.cfi_def_cfa_offset 4
 8882 00f0 BD46     		mov	sp, r7
 8883              		.cfi_def_cfa_register 13
 8884              		@ sp needed
 8885 00f2 80BC     		pop	{r7}
 8886              		.cfi_restore 7
 8887              		.cfi_def_cfa_offset 0
 8888 00f4 7047     		bx	lr
 8889              	.L589:
 8890 00f6 00BF     		.align	2
 8891              	.L588:
 8892 00f8 00000000 		.word	c_mem
 8893 00fc 00000000 		.word	g_mem
 8894 0100 00000000 		.word	g_meas
 8895 0104 00000000 		.word	dev_pwm_limit
 8896 0108 00000000 		.word	dev_pwm_sat
 8897              		.cfi_endproc
 8898              	.LFE76:
 8899              		.size	overcurrent_control, .-overcurrent_control
 8900              		.section	.text.pwm_limit_search,"ax",%progbits
 8901              		.align	2
 8902              		.global	pwm_limit_search
 8903              		.thumb
 8904              		.thumb_func
 8905              		.type	pwm_limit_search, %function
 8906              	pwm_limit_search:
 8907              	.LFB77:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 205


2533:..\src/interruptions.c **** 
2534:..\src/interruptions.c **** //==============================================================================
2535:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2536:..\src/interruptions.c **** //==============================================================================
2537:..\src/interruptions.c **** 
2538:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8908              		.loc 1 2538 0
 8909              		.cfi_startproc
 8910              		@ args = 0, pretend = 0, frame = 16
 8911              		@ frame_needed = 1, uses_anonymous_args = 0
 8912              		@ link register save eliminated.
 8913 0000 80B4     		push	{r7}
 8914              		.cfi_def_cfa_offset 4
 8915              		.cfi_offset 7, -4
 8916 0002 85B0     		sub	sp, sp, #20
 8917              		.cfi_def_cfa_offset 24
 8918 0004 00AF     		add	r7, sp, #0
 8919              		.cfi_def_cfa_register 7
 8920 0006 0346     		mov	r3, r0
 8921 0008 FB71     		strb	r3, [r7, #7]
2539:..\src/interruptions.c **** 
2540:..\src/interruptions.c ****     uint8 CYDATA index;
2541:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 8922              		.loc 1 2541 0
 8923 000a 46F28473 		movw	r3, #26500
 8924 000e FB81     		strh	r3, [r7, #14]	@ movhi
2542:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8925              		.loc 1 2542 0
 8926 0010 42F6EC43 		movw	r3, #11500
 8927 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2543:..\src/interruptions.c ****     
2544:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8928              		.loc 1 2544 0
 8929 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8930 0018 1F4A     		ldr	r2, .L597
 8931 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8932 001e FB89     		ldrh	r3, [r7, #14]
 8933 0020 9A42     		cmp	r2, r3
 8934 0022 05DD     		ble	.L591
2545:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8935              		.loc 1 2545 0
 8936 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8937 0026 1D4A     		ldr	r2, .L597+4
 8938 0028 0021     		movs	r1, #0
 8939 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2546:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2547:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2548:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2549:..\src/interruptions.c ****         } else {
2550:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2551:..\src/interruptions.c ****         }
2552:..\src/interruptions.c ****     } else {
2553:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2554:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2555:..\src/interruptions.c ****     }
2556:..\src/interruptions.c **** }
 8940              		.loc 1 2556 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 206


 8941 002e 2EE0     		b	.L596
 8942              	.L591:
2546:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8943              		.loc 1 2546 0
 8944 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8945 0032 194A     		ldr	r2, .L597
 8946 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8947 0038 BB89     		ldrh	r3, [r7, #12]
 8948 003a 9A42     		cmp	r2, r3
 8949 003c 17DA     		bge	.L593
2547:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 8950              		.loc 1 2547 0
 8951 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8952 0040 1749     		ldr	r1, .L597+8
 8953 0042 1346     		mov	r3, r2
 8954 0044 DB00     		lsls	r3, r3, #3
 8955 0046 9B1A     		subs	r3, r3, r2
 8956 0048 1B01     		lsls	r3, r3, #4
 8957 004a 0B44     		add	r3, r3, r1
 8958 004c E233     		adds	r3, r3, #226
 8959 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8960 0050 022B     		cmp	r3, #2
 8961 0052 06D1     		bne	.L594
2548:..\src/interruptions.c ****         } else {
 8962              		.loc 1 2548 0
 8963 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8964 0056 114A     		ldr	r2, .L597+4
 8965 0058 40F6A931 		movw	r1, #2985
 8966 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8967              		.loc 1 2556 0
 8968 0060 15E0     		b	.L596
 8969              	.L594:
2550:..\src/interruptions.c ****         }
 8970              		.loc 1 2550 0
 8971 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8972 0064 0D4A     		ldr	r2, .L597+4
 8973 0066 6421     		movs	r1, #100
 8974 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8975              		.loc 1 2556 0
 8976 006c 0FE0     		b	.L596
 8977              	.L593:
2553:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8978              		.loc 1 2553 0
 8979 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8980 0070 094A     		ldr	r2, .L597
 8981 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8982 0076 BB89     		ldrh	r3, [r7, #12]
 8983 0078 D31A     		subs	r3, r2, r3
 8984 007a 5B12     		asrs	r3, r3, #9
 8985 007c FB72     		strb	r3, [r7, #11]
2554:..\src/interruptions.c ****     }
 8986              		.loc 1 2554 0
 8987 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8988 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8989 0082 0849     		ldr	r1, .L597+12
 8990 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8991 0086 91B2     		uxth	r1, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 207


 8992 0088 044A     		ldr	r2, .L597+4
 8993 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8994              	.L596:
 8995              		.loc 1 2556 0
 8996 008e 00BF     		nop
 8997 0090 1437     		adds	r7, r7, #20
 8998              		.cfi_def_cfa_offset 4
 8999 0092 BD46     		mov	sp, r7
 9000              		.cfi_def_cfa_register 13
 9001              		@ sp needed
 9002 0094 80BC     		pop	{r7}
 9003              		.cfi_restore 7
 9004              		.cfi_def_cfa_offset 0
 9005 0096 7047     		bx	lr
 9006              	.L598:
 9007              		.align	2
 9008              	.L597:
 9009 0098 00000000 		.word	dev_tension
 9010 009c 00000000 		.word	dev_pwm_sat
 9011 00a0 00000000 		.word	c_mem
 9012 00a4 00000000 		.word	pwm_preload_values
 9013              		.cfi_endproc
 9014              	.LFE77:
 9015              		.size	pwm_limit_search, .-pwm_limit_search
 9016              		.global	__aeabi_ui2f
 9017              		.global	__aeabi_dcmpgt
 9018              		.section	.text.cycles_counter_update,"ax",%progbits
 9019              		.align	2
 9020              		.global	cycles_counter_update
 9021              		.thumb
 9022              		.thumb_func
 9023              		.type	cycles_counter_update, %function
 9024              	cycles_counter_update:
 9025              	.LFB78:
2557:..\src/interruptions.c **** 
2558:..\src/interruptions.c **** //==============================================================================
2559:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2560:..\src/interruptions.c **** //==============================================================================
2561:..\src/interruptions.c **** 
2562:..\src/interruptions.c **** void cycles_counter_update() {
 9026              		.loc 1 2562 0
 9027              		.cfi_startproc
 9028              		@ args = 0, pretend = 0, frame = 24
 9029              		@ frame_needed = 1, uses_anonymous_args = 0
 9030 0000 90B5     		push	{r4, r7, lr}
 9031              		.cfi_def_cfa_offset 12
 9032              		.cfi_offset 4, -12
 9033              		.cfi_offset 7, -8
 9034              		.cfi_offset 14, -4
 9035 0002 87B0     		sub	sp, sp, #28
 9036              		.cfi_def_cfa_offset 40
 9037 0004 00AF     		add	r7, sp, #0
 9038              		.cfi_def_cfa_register 7
2563:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2564:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2565:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2566:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 208


2567:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2568:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2569:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2570:..\src/interruptions.c ****     static int32 thr_pos = 0;
2571:..\src/interruptions.c ****     static int32 max_pos = 0;
2572:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2573:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9039              		.loc 1 2573 0
 9040 0006 0023     		movs	r3, #0
 9041 0008 FB60     		str	r3, [r7, #12]
 9042 000a 0023     		movs	r3, #0
 9043 000c BB60     		str	r3, [r7, #8]
 9044 000e 0023     		movs	r3, #0
 9045 0010 3B61     		str	r3, [r7, #16]
2574:..\src/interruptions.c ****     int32 step;
2575:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2576:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2577:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2578:..\src/interruptions.c **** 
2579:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9046              		.loc 1 2579 0
 9047 0012 A64B     		ldr	r3, .L677
 9048 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9049 0018 1946     		mov	r1, r3
 9050 001a A54A     		ldr	r2, .L677+4
 9051 001c 3423     		movs	r3, #52
 9052 001e 03FB01F3 		mul	r3, r3, r1
 9053 0022 1344     		add	r3, r3, r2
 9054 0024 1A68     		ldr	r2, [r3]
 9055 0026 A14B     		ldr	r3, .L677
 9056 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9057 002c 1846     		mov	r0, r3
 9058 002e 9F49     		ldr	r1, .L677
 9059 0030 0346     		mov	r3, r0
 9060 0032 5B00     		lsls	r3, r3, #1
 9061 0034 0344     		add	r3, r3, r0
 9062 0036 1B01     		lsls	r3, r3, #4
 9063 0038 0B44     		add	r3, r3, r1
 9064 003a 03F29513 		addw	r3, r3, #405
 9065 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9066 0040 42FA03F3 		asr	r3, r2, r3
 9067 0044 FB60     		str	r3, [r7, #12]
2580:..\src/interruptions.c ****         
2581:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2582:..\src/interruptions.c ****     switch (pos_cycle_status){
 9068              		.loc 1 2582 0
 9069 0046 9B4B     		ldr	r3, .L677+8
 9070 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9071 004a 012B     		cmp	r3, #1
 9072 004c 3DD0     		beq	.L601
 9073 004e 022B     		cmp	r3, #2
 9074 0050 74D0     		beq	.L602
 9075 0052 002B     		cmp	r3, #0
 9076 0054 40F02781 		bne	.L600
2583:..\src/interruptions.c ****         case STATE_INACTIVE:
2584:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9077              		.loc 1 2584 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 209


 9078 0058 944B     		ldr	r3, .L677
 9079 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9080 005e 072B     		cmp	r3, #7
 9081 0060 04D0     		beq	.L604
 9082              		.loc 1 2584 0 is_stmt 0 discriminator 1
 9083 0062 954B     		ldr	r3, .L677+12
 9084 0064 93F90030 		ldrsb	r3, [r3]
 9085 0068 012B     		cmp	r3, #1
 9086 006a 0CD0     		beq	.L605
 9087              	.L604:
 9088              		.loc 1 2584 0 discriminator 3
 9089 006c 8F4B     		ldr	r3, .L677
 9090 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9091 0072 072B     		cmp	r3, #7
 9092 0074 40F01481 		bne	.L667
 9093              		.loc 1 2584 0 discriminator 4
 9094 0078 8F4B     		ldr	r3, .L677+12
 9095 007a 93F90030 		ldrsb	r3, [r3]
 9096 007e B3F1FF3F 		cmp	r3, #-1
 9097 0082 40F00D81 		bne	.L667
 9098              	.L605:
2585:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9099              		.loc 1 2585 0 is_stmt 1
 9100 0086 8D4A     		ldr	r2, .L677+16
 9101 0088 FB68     		ldr	r3, [r7, #12]
 9102 008a 1360     		str	r3, [r2]
2586:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9103              		.loc 1 2586 0
 9104 008c 8C4B     		ldr	r3, .L677+20
 9105 008e 1A68     		ldr	r2, [r3]
 9106 0090 8A4B     		ldr	r3, .L677+16
 9107 0092 1B68     		ldr	r3, [r3]
 9108 0094 9A42     		cmp	r2, r3
 9109 0096 05DD     		ble	.L607
 9110              		.loc 1 2586 0 is_stmt 0 discriminator 1
 9111 0098 894B     		ldr	r3, .L677+20
 9112 009a 1A68     		ldr	r2, [r3]
 9113 009c 874B     		ldr	r3, .L677+16
 9114 009e 1B68     		ldr	r3, [r3]
 9115 00a0 D31A     		subs	r3, r2, r3
 9116 00a2 04E0     		b	.L608
 9117              	.L607:
 9118              		.loc 1 2586 0 discriminator 2
 9119 00a4 854B     		ldr	r3, .L677+16
 9120 00a6 1A68     		ldr	r2, [r3]
 9121 00a8 854B     		ldr	r3, .L677+20
 9122 00aa 1B68     		ldr	r3, [r3]
 9123 00ac D31A     		subs	r3, r2, r3
 9124              	.L608:
 9125              		.loc 1 2586 0 discriminator 4
 9126 00ae BB60     		str	r3, [r7, #8]
2587:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9127              		.loc 1 2587 0 is_stmt 1 discriminator 4
 9128 00b0 BB68     		ldr	r3, [r7, #8]
 9129 00b2 142B     		cmp	r3, #20
 9130 00b4 05DD     		ble	.L609
2588:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 210


 9131              		.loc 1 2588 0
 9132 00b6 7D4B     		ldr	r3, .L677
 9133 00b8 5A6D     		ldr	r2, [r3, #84]
 9134 00ba BB68     		ldr	r3, [r7, #8]
 9135 00bc 1344     		add	r3, r3, r2
 9136 00be 7B4A     		ldr	r2, .L677
 9137 00c0 5365     		str	r3, [r2, #84]
 9138              	.L609:
2589:..\src/interruptions.c ****                 }
2590:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9139              		.loc 1 2590 0
 9140 00c2 7C4B     		ldr	r3, .L677+8
 9141 00c4 0122     		movs	r2, #1
 9142 00c6 1A70     		strb	r2, [r3]
2591:..\src/interruptions.c ****             }
2592:..\src/interruptions.c ****             break;
 9143              		.loc 1 2592 0
 9144 00c8 EAE0     		b	.L667
 9145              	.L601:
2593:..\src/interruptions.c ****         case STATE_ACTIVE:
2594:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9146              		.loc 1 2594 0
 9147 00ca 784B     		ldr	r3, .L677
 9148 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9149 00d0 072B     		cmp	r3, #7
 9150 00d2 05D0     		beq	.L610
 9151              		.loc 1 2594 0 is_stmt 0 discriminator 1
 9152 00d4 784B     		ldr	r3, .L677+12
 9153 00d6 93F90030 		ldrsb	r3, [r3]
 9154 00da B3F1FF3F 		cmp	r3, #-1
 9155 00de 0BD0     		beq	.L611
 9156              	.L610:
 9157              		.loc 1 2594 0 discriminator 3
 9158 00e0 724B     		ldr	r3, .L677
 9159 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9160 00e6 072B     		cmp	r3, #7
 9161 00e8 40F0DC80 		bne	.L668
 9162              		.loc 1 2594 0 discriminator 4
 9163 00ec 724B     		ldr	r3, .L677+12
 9164 00ee 93F90030 		ldrsb	r3, [r3]
 9165 00f2 012B     		cmp	r3, #1
 9166 00f4 40F0D680 		bne	.L668
 9167              	.L611:
2595:..\src/interruptions.c ****                 max_pos = curr_pos;
 9168              		.loc 1 2595 0 is_stmt 1
 9169 00f8 714A     		ldr	r2, .L677+20
 9170 00fa FB68     		ldr	r3, [r7, #12]
 9171 00fc 1360     		str	r3, [r2]
2596:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9172              		.loc 1 2596 0
 9173 00fe 704B     		ldr	r3, .L677+20
 9174 0100 1A68     		ldr	r2, [r3]
 9175 0102 6E4B     		ldr	r3, .L677+16
 9176 0104 1B68     		ldr	r3, [r3]
 9177 0106 9A42     		cmp	r2, r3
 9178 0108 05DD     		ble	.L613
 9179              		.loc 1 2596 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 211


 9180 010a 6D4B     		ldr	r3, .L677+20
 9181 010c 1A68     		ldr	r2, [r3]
 9182 010e 6B4B     		ldr	r3, .L677+16
 9183 0110 1B68     		ldr	r3, [r3]
 9184 0112 D31A     		subs	r3, r2, r3
 9185 0114 04E0     		b	.L614
 9186              	.L613:
 9187              		.loc 1 2596 0 discriminator 2
 9188 0116 694B     		ldr	r3, .L677+16
 9189 0118 1A68     		ldr	r2, [r3]
 9190 011a 694B     		ldr	r3, .L677+20
 9191 011c 1B68     		ldr	r3, [r3]
 9192 011e D31A     		subs	r3, r2, r3
 9193              	.L614:
 9194              		.loc 1 2596 0 discriminator 4
 9195 0120 BB60     		str	r3, [r7, #8]
2597:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9196              		.loc 1 2597 0 is_stmt 1 discriminator 4
 9197 0122 BB68     		ldr	r3, [r7, #8]
 9198 0124 142B     		cmp	r3, #20
 9199 0126 05DD     		ble	.L615
2598:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9200              		.loc 1 2598 0
 9201 0128 604B     		ldr	r3, .L677
 9202 012a 5A6D     		ldr	r2, [r3, #84]
 9203 012c BB68     		ldr	r3, [r7, #8]
 9204 012e 1344     		add	r3, r3, r2
 9205 0130 5E4A     		ldr	r2, .L677
 9206 0132 5365     		str	r3, [r2, #84]
 9207              	.L615:
2599:..\src/interruptions.c ****                 }
2600:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9208              		.loc 1 2600 0
 9209 0134 5F4B     		ldr	r3, .L677+8
 9210 0136 0222     		movs	r2, #2
 9211 0138 1A70     		strb	r2, [r3]
2601:..\src/interruptions.c ****             }
2602:..\src/interruptions.c ****             break;
 9212              		.loc 1 2602 0
 9213 013a B3E0     		b	.L668
 9214              	.L602:
2603:..\src/interruptions.c ****         case COUNTER_INC:
2604:..\src/interruptions.c **** 
2605:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9215              		.loc 1 2605 0
 9216 013c 604B     		ldr	r3, .L677+20
 9217 013e 1A68     		ldr	r2, [r3]
 9218 0140 5E4B     		ldr	r3, .L677+16
 9219 0142 1B68     		ldr	r3, [r3]
 9220 0144 9A42     		cmp	r2, r3
 9221 0146 05DD     		ble	.L616
 9222              		.loc 1 2605 0 is_stmt 0 discriminator 1
 9223 0148 5D4B     		ldr	r3, .L677+20
 9224 014a 1A68     		ldr	r2, [r3]
 9225 014c 5B4B     		ldr	r3, .L677+16
 9226 014e 1B68     		ldr	r3, [r3]
 9227 0150 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 212


 9228 0152 04E0     		b	.L617
 9229              	.L616:
 9230              		.loc 1 2605 0 discriminator 2
 9231 0154 594B     		ldr	r3, .L677+16
 9232 0156 1A68     		ldr	r2, [r3]
 9233 0158 594B     		ldr	r3, .L677+20
 9234 015a 1B68     		ldr	r3, [r3]
 9235 015c D31A     		subs	r3, r2, r3
 9236              	.L617:
 9237              		.loc 1 2605 0 discriminator 4
 9238 015e BB60     		str	r3, [r7, #8]
2606:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9239              		.loc 1 2606 0 is_stmt 1 discriminator 4
 9240 0160 584B     		ldr	r3, .L677+24
 9241 0162 1B68     		ldr	r3, [r3]
 9242 0164 BA68     		ldr	r2, [r7, #8]
 9243 0166 9A42     		cmp	r2, r3
 9244 0168 40F39680 		ble	.L618
2607:..\src/interruptions.c ****                 //update position histogram
2608:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9245              		.loc 1 2608 0
 9246 016c 4F4B     		ldr	r3, .L677
 9247 016e D3F8E820 		ldr	r2, [r3, #232]
 9248 0172 4E4B     		ldr	r3, .L677
 9249 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9250 0178 1846     		mov	r0, r3
 9251 017a 4C49     		ldr	r1, .L677
 9252 017c 0346     		mov	r3, r0
 9253 017e 5B00     		lsls	r3, r3, #1
 9254 0180 0344     		add	r3, r3, r0
 9255 0182 1B01     		lsls	r3, r3, #4
 9256 0184 0B44     		add	r3, r3, r1
 9257 0186 03F29513 		addw	r3, r3, #405
 9258 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9259 018c 42FA03F3 		asr	r3, r2, r3
 9260 0190 4D4A     		ldr	r2, .L677+28
 9261 0192 82FB0312 		smull	r1, r2, r2, r3
 9262 0196 9210     		asrs	r2, r2, #2
 9263 0198 DB17     		asrs	r3, r3, #31
 9264 019a D31A     		subs	r3, r2, r3
 9265 019c 7B60     		str	r3, [r7, #4]
2609:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9266              		.loc 1 2609 0
 9267 019e 474B     		ldr	r3, .L677+16
 9268 01a0 1A68     		ldr	r2, [r3]
 9269 01a2 7B68     		ldr	r3, [r7, #4]
 9270 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9271 01a8 FB70     		strb	r3, [r7, #3]
2610:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9272              		.loc 1 2610 0
 9273 01aa 454B     		ldr	r3, .L677+20
 9274 01ac 1A68     		ldr	r2, [r3]
 9275 01ae 7B68     		ldr	r3, [r7, #4]
 9276 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9277 01b4 BB70     		strb	r3, [r7, #2]
2611:..\src/interruptions.c ****                 
2612:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 213


2613:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9278              		.loc 1 2613 0
 9279 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9280 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9281 01ba 9342     		cmp	r3, r2
 9282 01bc 28BF     		it	cs
 9283 01be 1346     		movcs	r3, r2
 9284 01c0 7B70     		strb	r3, [r7, #1]
2614:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9285              		.loc 1 2614 0
 9286 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9287 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9288 01c6 9342     		cmp	r3, r2
 9289 01c8 38BF     		it	cc
 9290 01ca 1346     		movcc	r3, r2
 9291 01cc 3B70     		strb	r3, [r7]
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9292              		.loc 1 2615 0
 9293 01ce 7B78     		ldrb	r3, [r7, #1]
 9294 01d0 FB75     		strb	r3, [r7, #23]
 9295 01d2 0DE0     		b	.L619
 9296              	.L621:
2616:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2617:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9297              		.loc 1 2617 0 discriminator 4
 9298 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9299 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9300 01d8 3449     		ldr	r1, .L677
 9301 01da 0632     		adds	r2, r2, #6
 9302 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9303 01e0 0132     		adds	r2, r2, #1
 9304 01e2 3249     		ldr	r1, .L677
 9305 01e4 0633     		adds	r3, r3, #6
 9306 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9307              		.loc 1 2615 0 discriminator 4
 9308 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9309 01ec 0133     		adds	r3, r3, #1
 9310 01ee FB75     		strb	r3, [r7, #23]
 9311              	.L619:
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9312              		.loc 1 2615 0 is_stmt 0 discriminator 1
 9313 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9314 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9315 01f4 9A42     		cmp	r2, r3
 9316 01f6 02D8     		bhi	.L620
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9317              		.loc 1 2615 0 discriminator 3
 9318 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9319 01fa 092B     		cmp	r3, #9
 9320 01fc EAD9     		bls	.L621
 9321              	.L620:
2618:..\src/interruptions.c ****                 }
2619:..\src/interruptions.c ****                 
2620:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2621:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9322              		.loc 1 2621 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 214


 9323 01fe 2B4B     		ldr	r3, .L677
 9324 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9325 0204 002B     		cmp	r3, #0
 9326 0206 00DA     		bge	.L622
 9327 0208 0333     		adds	r3, r3, #3
 9328              	.L622:
 9329 020a 9B10     		asrs	r3, r3, #2
 9330 020c 1BB2     		sxth	r3, r3
 9331 020e 7B60     		str	r3, [r7, #4]
2622:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9332              		.loc 1 2622 0
 9333 0210 264B     		ldr	r3, .L677
 9334 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9335 0216 012B     		cmp	r3, #1
 9336 0218 0CD1     		bne	.L623
2623:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9337              		.loc 1 2623 0
 9338 021a 244B     		ldr	r3, .L677
 9339 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9340 0220 1946     		mov	r1, r3
 9341 0222 234A     		ldr	r2, .L677+4
 9342 0224 3423     		movs	r3, #52
 9343 0226 03FB01F3 		mul	r3, r3, r1
 9344 022a 1344     		add	r3, r3, r2
 9345 022c 1433     		adds	r3, r3, #20
 9346 022e 1B68     		ldr	r3, [r3]
 9347 0230 3B61     		str	r3, [r7, #16]
 9348 0232 0BE0     		b	.L624
 9349              	.L623:
2624:..\src/interruptions.c ****                 else
2625:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9350              		.loc 1 2625 0
 9351 0234 1D4B     		ldr	r3, .L677
 9352 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9353 023a 1946     		mov	r1, r3
 9354 023c 1C4A     		ldr	r2, .L677+4
 9355 023e 3423     		movs	r3, #52
 9356 0240 03FB01F3 		mul	r3, r3, r1
 9357 0244 1344     		add	r3, r3, r2
 9358 0246 0C33     		adds	r3, r3, #12
 9359 0248 1B68     		ldr	r3, [r3]
 9360 024a 3B61     		str	r3, [r7, #16]
 9361              	.L624:
2626:..\src/interruptions.c **** 
2627:..\src/interruptions.c ****                 if (curr_ref < 0){
 9362              		.loc 1 2627 0
 9363 024c 3B69     		ldr	r3, [r7, #16]
 9364 024e 002B     		cmp	r3, #0
 9365 0250 02DA     		bge	.L625
2628:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9366              		.loc 1 2628 0
 9367 0252 3B69     		ldr	r3, [r7, #16]
 9368 0254 5B42     		negs	r3, r3
 9369 0256 3B61     		str	r3, [r7, #16]
 9370              	.L625:
2629:..\src/interruptions.c ****                 }
2630:..\src/interruptions.c ****                 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 215


2631:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9371              		.loc 1 2631 0
 9372 0258 144B     		ldr	r3, .L677
 9373 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9374 025e 1A46     		mov	r2, r3
 9375 0260 3B69     		ldr	r3, [r7, #16]
 9376 0262 9A42     		cmp	r2, r3
 9377 0264 05DA     		bge	.L626
2632:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9378              		.loc 1 2632 0
 9379 0266 114B     		ldr	r3, .L677
 9380 0268 DB6C     		ldr	r3, [r3, #76]
 9381 026a 0133     		adds	r3, r3, #1
 9382 026c 0F4A     		ldr	r2, .L677
 9383 026e D364     		str	r3, [r2, #76]
 9384 0270 12E0     		b	.L618
 9385              	.L626:
2633:..\src/interruptions.c ****                 else
2634:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9386              		.loc 1 2634 0
 9387 0272 3A69     		ldr	r2, [r7, #16]
 9388 0274 7B68     		ldr	r3, [r7, #4]
 9389 0276 92FBF3F3 		sdiv	r3, r2, r3
 9390 027a DBB2     		uxtb	r3, r3
 9391 027c 3969     		ldr	r1, [r7, #16]
 9392 027e 7A68     		ldr	r2, [r7, #4]
 9393 0280 91FBF2F2 		sdiv	r2, r1, r2
 9394 0284 D2B2     		uxtb	r2, r2
 9395 0286 0949     		ldr	r1, .L677
 9396 0288 1032     		adds	r2, r2, #16
 9397 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9398 028e 0132     		adds	r2, r2, #1
 9399 0290 0649     		ldr	r1, .L677
 9400 0292 1033     		adds	r3, r3, #16
 9401 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9402              	.L618:
2635:..\src/interruptions.c ****             }
2636:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9403              		.loc 1 2636 0
 9404 0298 064B     		ldr	r3, .L677+8
 9405 029a 0022     		movs	r2, #0
 9406 029c 1A70     		strb	r2, [r3]
2637:..\src/interruptions.c ****             break;
 9407              		.loc 1 2637 0
 9408 029e 02E0     		b	.L600
 9409              	.L667:
2592:..\src/interruptions.c ****         case STATE_ACTIVE:
 9410              		.loc 1 2592 0
 9411 02a0 00BF     		nop
 9412 02a2 00E0     		b	.L600
 9413              	.L668:
2602:..\src/interruptions.c ****         case COUNTER_INC:
 9414              		.loc 1 2602 0
 9415 02a4 00BF     		nop
 9416              	.L600:
2638:..\src/interruptions.c ****     }
2639:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 216


2640:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2641:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9417              		.loc 1 2641 0
 9418 02a6 0023     		movs	r3, #0
 9419 02a8 FB75     		strb	r3, [r7, #23]
 9420 02aa 4FE0     		b	.L627
 9421              	.L678:
 9422              		.align	2
 9423              	.L677:
 9424 02ac 00000000 		.word	g_mem
 9425 02b0 00000000 		.word	g_meas
 9426 02b4 8E010000 		.word	pos_cycle_status.10503
 9427 02b8 00000000 		.word	pwm_sign
 9428 02bc 90010000 		.word	thr_pos.10510
 9429 02c0 94010000 		.word	max_pos.10511
 9430 02c4 10000000 		.word	bin_threshold.10508
 9431 02c8 67666666 		.word	1717986919
 9432              	.L635:
2642:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9433              		.loc 1 2642 0
 9434 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9435 02ce 9C4A     		ldr	r2, .L679
 9436 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9437 02d2 012B     		cmp	r3, #1
 9438 02d4 13D0     		beq	.L629
 9439 02d6 022B     		cmp	r3, #2
 9440 02d8 22D0     		beq	.L630
 9441 02da 002B     		cmp	r3, #0
 9442 02dc 33D1     		bne	.L628
2643:..\src/interruptions.c ****             case STATE_INACTIVE:
2644:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9443              		.loc 1 2644 0
 9444 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9445 02e0 984A     		ldr	r2, .L679+4
 9446 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9447 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9448 02e8 9749     		ldr	r1, .L679+8
 9449 02ea F832     		adds	r2, r2, #248
 9450 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9451 02f0 9342     		cmp	r3, r2
 9452 02f2 25DD     		ble	.L669
2645:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9453              		.loc 1 2645 0
 9454 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9455 02f6 924A     		ldr	r2, .L679
 9456 02f8 0121     		movs	r1, #1
 9457 02fa D154     		strb	r1, [r2, r3]
2646:..\src/interruptions.c ****                 }
2647:..\src/interruptions.c ****                 break;
 9458              		.loc 1 2647 0
 9459 02fc 20E0     		b	.L669
 9460              	.L629:
2648:..\src/interruptions.c ****             case STATE_ACTIVE:
2649:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9461              		.loc 1 2649 0
 9462 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9463 0300 904A     		ldr	r2, .L679+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 217


 9464 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9465 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9466 0308 8F49     		ldr	r1, .L679+8
 9467 030a F833     		adds	r3, r3, #248
 9468 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9469 0310 0A3B     		subs	r3, r3, #10
 9470 0312 9A42     		cmp	r2, r3
 9471 0314 16DA     		bge	.L670
2650:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9472              		.loc 1 2650 0
 9473 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9474 0318 894A     		ldr	r2, .L679
 9475 031a 0221     		movs	r1, #2
 9476 031c D154     		strb	r1, [r2, r3]
2651:..\src/interruptions.c ****                 }
2652:..\src/interruptions.c ****                 break;
 9477              		.loc 1 2652 0
 9478 031e 11E0     		b	.L670
 9479              	.L630:
2653:..\src/interruptions.c ****             case COUNTER_INC:
2654:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9480              		.loc 1 2654 0
 9481 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9482 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9483 0324 8849     		ldr	r1, .L679+8
 9484 0326 0432     		adds	r2, r2, #4
 9485 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9486 032c 0132     		adds	r2, r2, #1
 9487 032e 8649     		ldr	r1, .L679+8
 9488 0330 0433     		adds	r3, r3, #4
 9489 0332 41F82320 		str	r2, [r1, r3, lsl #2]
2655:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9490              		.loc 1 2655 0
 9491 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9492 0338 814A     		ldr	r2, .L679
 9493 033a 0021     		movs	r1, #0
 9494 033c D154     		strb	r1, [r2, r3]
2656:..\src/interruptions.c ****                 break;
 9495              		.loc 1 2656 0
 9496 033e 02E0     		b	.L628
 9497              	.L669:
2647:..\src/interruptions.c ****             case STATE_ACTIVE:
 9498              		.loc 1 2647 0
 9499 0340 00BF     		nop
 9500 0342 00E0     		b	.L628
 9501              	.L670:
2652:..\src/interruptions.c ****             case COUNTER_INC:
 9502              		.loc 1 2652 0
 9503 0344 00BF     		nop
 9504              	.L628:
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9505              		.loc 1 2641 0 discriminator 2
 9506 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9507 0348 0133     		adds	r3, r3, #1
 9508 034a FB75     		strb	r3, [r7, #23]
 9509              	.L627:
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 218


 9510              		.loc 1 2641 0 is_stmt 0 discriminator 1
 9511 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9512 034e 012B     		cmp	r3, #1
 9513 0350 07D8     		bhi	.L634
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9514              		.loc 1 2641 0 discriminator 3
 9515 0352 7E4B     		ldr	r3, .L679+12
 9516 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9517 0356 002B     		cmp	r3, #0
 9518 0358 03D1     		bne	.L634
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9519              		.loc 1 2641 0 discriminator 4
 9520 035a 7D4B     		ldr	r3, .L679+16
 9521 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9522 035e 002B     		cmp	r3, #0
 9523 0360 B4D0     		beq	.L635
 9524              	.L634:
2657:..\src/interruptions.c ****         }
2658:..\src/interruptions.c ****     }
2659:..\src/interruptions.c ****     
2660:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2661:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9525              		.loc 1 2661 0 is_stmt 1
 9526 0362 0023     		movs	r3, #0
 9527 0364 FB75     		strb	r3, [r7, #23]
 9528 0366 57E0     		b	.L636
 9529              	.L645:
2662:..\src/interruptions.c ****         switch (motion_status[i]){
 9530              		.loc 1 2662 0
 9531 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9532 036a 7A4A     		ldr	r2, .L679+20
 9533 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9534 036e 012B     		cmp	r3, #1
 9535 0370 18D0     		beq	.L638
 9536 0372 022B     		cmp	r3, #2
 9537 0374 37D0     		beq	.L639
 9538 0376 002B     		cmp	r3, #0
 9539 0378 4BD1     		bne	.L637
2663:..\src/interruptions.c ****             case STATE_INACTIVE:
2664:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9540              		.loc 1 2664 0
 9541 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9542 037c 714A     		ldr	r2, .L679+4
 9543 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9544 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9545 0384 7049     		ldr	r1, .L679+8
 9546 0386 F832     		adds	r2, r2, #248
 9547 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9548 038c 9342     		cmp	r3, r2
 9549 038e 3DDD     		ble	.L671
2665:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9550              		.loc 1 2665 0
 9551 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9552 0392 7149     		ldr	r1, .L679+24
 9553 0394 FA68     		ldr	r2, [r7, #12]
 9554 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2666:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 219


 9555              		.loc 1 2666 0
 9556 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9557 039c 6D4A     		ldr	r2, .L679+20
 9558 039e 0121     		movs	r1, #1
 9559 03a0 D154     		strb	r1, [r2, r3]
2667:..\src/interruptions.c ****                 }
2668:..\src/interruptions.c ****                 break;
 9560              		.loc 1 2668 0
 9561 03a2 33E0     		b	.L671
 9562              	.L638:
2669:..\src/interruptions.c ****             case STATE_ACTIVE:
2670:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9563              		.loc 1 2670 0
 9564 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9565 03a6 674A     		ldr	r2, .L679+4
 9566 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9567 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9568 03ae 6649     		ldr	r1, .L679+8
 9569 03b0 F833     		adds	r3, r3, #248
 9570 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9571 03b6 0A3B     		subs	r3, r3, #10
 9572 03b8 9A42     		cmp	r2, r3
 9573 03ba 29DA     		bge	.L672
2671:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9574              		.loc 1 2671 0
 9575 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9576 03be 664A     		ldr	r2, .L679+24
 9577 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9578 03c4 FB68     		ldr	r3, [r7, #12]
 9579 03c6 D31A     		subs	r3, r2, r3
 9580 03c8 002B     		cmp	r3, #0
 9581 03ca B8BF     		it	lt
 9582 03cc 5B42     		rsblt	r3, r3, #0
 9583 03ce C82B     		cmp	r3, #200
 9584 03d0 04DD     		ble	.L643
2672:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9585              		.loc 1 2672 0
 9586 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9587 03d4 5F4A     		ldr	r2, .L679+20
 9588 03d6 0221     		movs	r1, #2
 9589 03d8 D154     		strb	r1, [r2, r3]
2673:..\src/interruptions.c ****                     }
2674:..\src/interruptions.c ****                     else {
2675:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2676:..\src/interruptions.c ****                     }
2677:..\src/interruptions.c ****                 }
2678:..\src/interruptions.c ****                 break;
 9590              		.loc 1 2678 0
 9591 03da 19E0     		b	.L672
 9592              	.L643:
2675:..\src/interruptions.c ****                     }
 9593              		.loc 1 2675 0
 9594 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9595 03de 5D4A     		ldr	r2, .L679+20
 9596 03e0 0021     		movs	r1, #0
 9597 03e2 D154     		strb	r1, [r2, r3]
 9598              		.loc 1 2678 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 220


 9599 03e4 14E0     		b	.L672
 9600              	.L639:
2679:..\src/interruptions.c ****             case COUNTER_INC:
2680:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9601              		.loc 1 2680 0
 9602 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9603 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9604 03ea 574A     		ldr	r2, .L679+8
 9605 03ec 1A33     		adds	r3, r3, #26
 9606 03ee 9B00     		lsls	r3, r3, #2
 9607 03f0 1344     		add	r3, r3, r2
 9608 03f2 5B68     		ldr	r3, [r3, #4]
 9609 03f4 5A1C     		adds	r2, r3, #1
 9610 03f6 5448     		ldr	r0, .L679+8
 9611 03f8 01F11A03 		add	r3, r1, #26
 9612 03fc 9B00     		lsls	r3, r3, #2
 9613 03fe 0344     		add	r3, r3, r0
 9614 0400 5A60     		str	r2, [r3, #4]
2681:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9615              		.loc 1 2681 0
 9616 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9617 0404 534A     		ldr	r2, .L679+20
 9618 0406 0021     		movs	r1, #0
 9619 0408 D154     		strb	r1, [r2, r3]
2682:..\src/interruptions.c ****                 break;
 9620              		.loc 1 2682 0
 9621 040a 02E0     		b	.L637
 9622              	.L671:
2668:..\src/interruptions.c ****             case STATE_ACTIVE:
 9623              		.loc 1 2668 0
 9624 040c 00BF     		nop
 9625 040e 00E0     		b	.L637
 9626              	.L672:
2678:..\src/interruptions.c ****             case COUNTER_INC:
 9627              		.loc 1 2678 0
 9628 0410 00BF     		nop
 9629              	.L637:
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9630              		.loc 1 2661 0 discriminator 2
 9631 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9632 0414 0133     		adds	r3, r3, #1
 9633 0416 FB75     		strb	r3, [r7, #23]
 9634              	.L636:
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9635              		.loc 1 2661 0 is_stmt 0 discriminator 1
 9636 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9637 041a 012B     		cmp	r3, #1
 9638 041c 07D8     		bhi	.L644
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9639              		.loc 1 2661 0 discriminator 3
 9640 041e 4B4B     		ldr	r3, .L679+12
 9641 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9642 0422 002B     		cmp	r3, #0
 9643 0424 03D1     		bne	.L644
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9644              		.loc 1 2661 0 discriminator 4
 9645 0426 4A4B     		ldr	r3, .L679+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 221


 9646 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9647 042a 002B     		cmp	r3, #0
 9648 042c 9CD0     		beq	.L645
 9649              	.L644:
2683:..\src/interruptions.c ****         }
2684:..\src/interruptions.c ****     }
2685:..\src/interruptions.c ****     
2686:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2687:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9650              		.loc 1 2687 0 is_stmt 1
 9651 042e 0023     		movs	r3, #0
 9652 0430 FB75     		strb	r3, [r7, #23]
 9653 0432 A3E0     		b	.L646
 9654              	.L657:
2688:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9655              		.loc 1 2688 0
 9656 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9657 0436 494A     		ldr	r2, .L679+28
 9658 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9659 043a 012B     		cmp	r3, #1
 9660 043c 19D0     		beq	.L648
 9661 043e 022B     		cmp	r3, #2
 9662 0440 68D0     		beq	.L649
 9663 0442 002B     		cmp	r3, #0
 9664 0444 40F09780 		bne	.L647
2689:..\src/interruptions.c ****             case STATE_INACTIVE:
2690:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9665              		.loc 1 2690 0
 9666 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9667 044a 3E4A     		ldr	r2, .L679+4
 9668 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9669 0450 434B     		ldr	r3, .L679+32
 9670 0452 1B68     		ldr	r3, [r3]
 9671 0454 9A42     		cmp	r2, r3
 9672 0456 70DD     		ble	.L673
2691:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9673              		.loc 1 2691 0
 9674 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9675 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9676 045e 0346     		mov	r3, r0
 9677 0460 1A46     		mov	r2, r3
 9678 0462 404B     		ldr	r3, .L679+36
 9679 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2692:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9680              		.loc 1 2692 0
 9681 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9682 046a 3C4A     		ldr	r2, .L679+28
 9683 046c 0121     		movs	r1, #1
 9684 046e D154     		strb	r1, [r2, r3]
2693:..\src/interruptions.c ****                 }
2694:..\src/interruptions.c ****                 break;
 9685              		.loc 1 2694 0
 9686 0470 63E0     		b	.L673
 9687              	.L648:
2695:..\src/interruptions.c ****             case STATE_ACTIVE:
2696:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9688              		.loc 1 2696 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 222


 9689 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9690 0474 334A     		ldr	r2, .L679+4
 9691 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9692 047a 394B     		ldr	r3, .L679+32
 9693 047c 1B68     		ldr	r3, [r3]
 9694 047e 0A3B     		subs	r3, r3, #10
 9695 0480 9A42     		cmp	r2, r3
 9696 0482 77DA     		bge	.L674
2697:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9697              		.loc 1 2697 0
 9698 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9699 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9700 048a 0346     		mov	r3, r0
 9701 048c 1A46     		mov	r2, r3
 9702 048e 364B     		ldr	r3, .L679+40
 9703 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2698:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9704              		.loc 1 2698 0
 9705 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9706 0496 334A     		ldr	r2, .L679+36
 9707 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9708 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9709 049e 3249     		ldr	r1, .L679+40
 9710 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9711 04a4 9A42     		cmp	r2, r3
 9712 04a6 0AD2     		bcs	.L653
2699:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9713              		.loc 1 2699 0
 9714 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9715 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9716 04ac 2D49     		ldr	r1, .L679+36
 9717 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9718 04b2 03F5BB53 		add	r3, r3, #5984
 9719 04b6 1033     		adds	r3, r3, #16
 9720 04b8 2A49     		ldr	r1, .L679+36
 9721 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9722              	.L653:
2700:..\src/interruptions.c ****                     }
2701:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9723              		.loc 1 2701 0
 9724 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9725 04c0 284A     		ldr	r2, .L679+36
 9726 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9727 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9728 04c8 2749     		ldr	r1, .L679+40
 9729 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9730 04ce D31A     		subs	r3, r2, r3
 9731 04d0 1846     		mov	r0, r3
 9732 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9733 04d6 0346     		mov	r3, r0
 9734 04d8 1846     		mov	r0, r3
 9735 04da FFF7FEFF 		bl	__aeabi_f2d
 9736 04de 4FF00002 		mov	r2, #0
 9737 04e2 224B     		ldr	r3, .L679+44
 9738 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9739 04e8 0346     		mov	r3, r0
 9740 04ea 0C46     		mov	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 223


 9741 04ec 1846     		mov	r0, r3
 9742 04ee 2146     		mov	r1, r4
 9743 04f0 4FF00002 		mov	r2, #0
 9744 04f4 1E4B     		ldr	r3, .L679+48
 9745 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 9746 04fa 0346     		mov	r3, r0
 9747 04fc 002B     		cmp	r3, #0
 9748 04fe 04D0     		beq	.L666
2702:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9749              		.loc 1 2702 0
 9750 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9751 0502 164A     		ldr	r2, .L679+28
 9752 0504 0221     		movs	r1, #2
 9753 0506 D154     		strb	r1, [r2, r3]
2703:..\src/interruptions.c ****                     }
2704:..\src/interruptions.c ****                     else {
2705:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2706:..\src/interruptions.c ****                     }
2707:..\src/interruptions.c ****                 }
2708:..\src/interruptions.c ****                 break;
 9754              		.loc 1 2708 0
 9755 0508 34E0     		b	.L674
 9756              	.L666:
2705:..\src/interruptions.c ****                     }
 9757              		.loc 1 2705 0
 9758 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9759 050c 134A     		ldr	r2, .L679+28
 9760 050e 0021     		movs	r1, #0
 9761 0510 D154     		strb	r1, [r2, r3]
 9762              		.loc 1 2708 0
 9763 0512 2FE0     		b	.L674
 9764              	.L649:
2709:..\src/interruptions.c ****             case COUNTER_INC:
2710:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9765              		.loc 1 2710 0
 9766 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9767 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9768 0518 0B4A     		ldr	r2, .L679+8
 9769 051a 1833     		adds	r3, r3, #24
 9770 051c 9B00     		lsls	r3, r3, #2
 9771 051e 1344     		add	r3, r3, r2
 9772 0520 5B68     		ldr	r3, [r3, #4]
 9773 0522 5A1C     		adds	r2, r3, #1
 9774 0524 0848     		ldr	r0, .L679+8
 9775 0526 01F11803 		add	r3, r1, #24
 9776 052a 9B00     		lsls	r3, r3, #2
 9777 052c 0344     		add	r3, r3, r0
 9778 052e 5A60     		str	r2, [r3, #4]
2711:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9779              		.loc 1 2711 0
 9780 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9781 0532 0A4A     		ldr	r2, .L679+28
 9782 0534 0021     		movs	r1, #0
 9783 0536 D154     		strb	r1, [r2, r3]
2712:..\src/interruptions.c ****                 break;
 9784              		.loc 1 2712 0
 9785 0538 1DE0     		b	.L647
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 224


 9786              	.L673:
2694:..\src/interruptions.c ****             case STATE_ACTIVE:
 9787              		.loc 1 2694 0
 9788 053a 00BF     		nop
 9789 053c 1BE0     		b	.L647
 9790              	.L680:
 9791 053e 00BF     		.align	2
 9792              	.L679:
 9793 0540 98010000 		.word	emg_cycle_status.10504
 9794 0544 00000000 		.word	g_adc_meas
 9795 0548 00000000 		.word	g_mem
 9796 054c 00000000 		.word	emg_1_status
 9797 0550 00000000 		.word	emg_2_status
 9798 0554 9C010000 		.word	motion_status.10505
 9799 0558 A0010000 		.word	start_emg_pos.10525
 9800 055c A8010000 		.word	emg_excess_status.10506
 9801 0560 14000000 		.word	exc_act_thr.10509
 9802 0564 AC010000 		.word	timer_exc_s.10523
 9803 0568 B4010000 		.word	timer_exc_e.10524
 9804 056c 00004940 		.word	1078525952
 9805 0570 00001040 		.word	1074790400
 9806              	.L674:
2708:..\src/interruptions.c ****             case COUNTER_INC:
 9807              		.loc 1 2708 0
 9808 0574 00BF     		nop
 9809              	.L647:
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9810              		.loc 1 2687 0 discriminator 2
 9811 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9812 0578 0133     		adds	r3, r3, #1
 9813 057a FB75     		strb	r3, [r7, #23]
 9814              	.L646:
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9815              		.loc 1 2687 0 is_stmt 0 discriminator 1
 9816 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9817 057e 012B     		cmp	r3, #1
 9818 0580 08D8     		bhi	.L656
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9819              		.loc 1 2687 0 discriminator 3
 9820 0582 2D4B     		ldr	r3, .L681
 9821 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9822 0586 002B     		cmp	r3, #0
 9823 0588 04D1     		bne	.L656
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9824              		.loc 1 2687 0 discriminator 4
 9825 058a 2C4B     		ldr	r3, .L681+4
 9826 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9827 058e 002B     		cmp	r3, #0
 9828 0590 3FF450AF 		beq	.L657
 9829              	.L656:
2713:..\src/interruptions.c ****         }
2714:..\src/interruptions.c ****     }
2715:..\src/interruptions.c ****     
2716:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2717:..\src/interruptions.c ****     switch (rest_cycle_status){
 9830              		.loc 1 2717 0 is_stmt 1
 9831 0594 2A4B     		ldr	r3, .L681+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 225


 9832 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9833 0598 012B     		cmp	r3, #1
 9834 059a 11D0     		beq	.L659
 9835 059c 022B     		cmp	r3, #2
 9836 059e 2AD0     		beq	.L660
 9837 05a0 002B     		cmp	r3, #0
 9838 05a2 42D1     		bne	.L658
2718:..\src/interruptions.c ****         case STATE_INACTIVE:
2719:..\src/interruptions.c ****             if (rest_enabled){
 9839              		.loc 1 2719 0
 9840 05a4 274B     		ldr	r3, .L681+12
 9841 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9842 05a8 002B     		cmp	r3, #0
 9843 05aa 3BD0     		beq	.L675
2720:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9844              		.loc 1 2720 0
 9845 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9846 05b0 0346     		mov	r3, r0
 9847 05b2 1A46     		mov	r2, r3
 9848 05b4 244B     		ldr	r3, .L681+16
 9849 05b6 1A60     		str	r2, [r3]
2721:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9850              		.loc 1 2721 0
 9851 05b8 214B     		ldr	r3, .L681+8
 9852 05ba 0122     		movs	r2, #1
 9853 05bc 1A70     		strb	r2, [r3]
2722:..\src/interruptions.c ****             }
2723:..\src/interruptions.c ****             break;
 9854              		.loc 1 2723 0
 9855 05be 31E0     		b	.L675
 9856              	.L659:
2724:..\src/interruptions.c ****         case STATE_ACTIVE:
2725:..\src/interruptions.c ****             if (!rest_enabled){
 9857              		.loc 1 2725 0
 9858 05c0 204B     		ldr	r3, .L681+12
 9859 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9860 05c4 002B     		cmp	r3, #0
 9861 05c6 2FD1     		bne	.L676
2726:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9862              		.loc 1 2726 0
 9863 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9864 05cc 0346     		mov	r3, r0
 9865 05ce 1A46     		mov	r2, r3
 9866 05d0 1E4B     		ldr	r3, .L681+20
 9867 05d2 1A60     		str	r2, [r3]
2727:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9868              		.loc 1 2727 0
 9869 05d4 1C4B     		ldr	r3, .L681+16
 9870 05d6 1A68     		ldr	r2, [r3]
 9871 05d8 1C4B     		ldr	r3, .L681+20
 9872 05da 1B68     		ldr	r3, [r3]
 9873 05dc 9A42     		cmp	r2, r3
 9874 05de 06D2     		bcs	.L664
2728:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9875              		.loc 1 2728 0
 9876 05e0 194B     		ldr	r3, .L681+16
 9877 05e2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 226


 9878 05e4 03F5BB53 		add	r3, r3, #5984
 9879 05e8 1033     		adds	r3, r3, #16
 9880 05ea 174A     		ldr	r2, .L681+16
 9881 05ec 1360     		str	r3, [r2]
 9882              	.L664:
2729:..\src/interruptions.c ****                 }
2730:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9883              		.loc 1 2730 0
 9884 05ee 144B     		ldr	r3, .L681+8
 9885 05f0 0222     		movs	r2, #2
 9886 05f2 1A70     		strb	r2, [r3]
2731:..\src/interruptions.c ****             }
2732:..\src/interruptions.c ****             break;
 9887              		.loc 1 2732 0
 9888 05f4 18E0     		b	.L676
 9889              	.L660:
2733:..\src/interruptions.c ****         case COUNTER_INC: 
2734:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9890              		.loc 1 2734 0
 9891 05f6 164B     		ldr	r3, .L681+24
 9892 05f8 DA6D     		ldr	r2, [r3, #92]
 9893 05fa 134B     		ldr	r3, .L681+16
 9894 05fc 1968     		ldr	r1, [r3]
 9895 05fe 134B     		ldr	r3, .L681+20
 9896 0600 1B68     		ldr	r3, [r3]
 9897 0602 CB1A     		subs	r3, r1, r3
 9898 0604 1349     		ldr	r1, .L681+28
 9899 0606 A1FB0313 		umull	r1, r3, r1, r3
 9900 060a 1B09     		lsrs	r3, r3, #4
 9901 060c 1344     		add	r3, r3, r2
 9902 060e 104A     		ldr	r2, .L681+24
 9903 0610 D365     		str	r3, [r2, #92]
2735:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9904              		.loc 1 2735 0
 9905 0612 0F4B     		ldr	r3, .L681+24
 9906 0614 1B6D     		ldr	r3, [r3, #80]
 9907 0616 0133     		adds	r3, r3, #1
 9908 0618 0D4A     		ldr	r2, .L681+24
 9909 061a 1365     		str	r3, [r2, #80]
2736:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9910              		.loc 1 2736 0
 9911 061c 084B     		ldr	r3, .L681+8
 9912 061e 0022     		movs	r2, #0
 9913 0620 1A70     		strb	r2, [r3]
2737:..\src/interruptions.c ****             break;
 9914              		.loc 1 2737 0
 9915 0622 02E0     		b	.L658
 9916              	.L675:
2723:..\src/interruptions.c ****         case STATE_ACTIVE:
 9917              		.loc 1 2723 0
 9918 0624 00BF     		nop
 9919 0626 00E0     		b	.L658
 9920              	.L676:
2732:..\src/interruptions.c ****         case COUNTER_INC: 
 9921              		.loc 1 2732 0
 9922 0628 00BF     		nop
 9923              	.L658:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 227


2738:..\src/interruptions.c ****     }
2739:..\src/interruptions.c ****           
2740:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2741:..\src/interruptions.c ****     save_cycles_eeprom();
 9924              		.loc 1 2741 0
 9925 062a FFF7FEFF 		bl	save_cycles_eeprom
2742:..\src/interruptions.c ****     
2743:..\src/interruptions.c **** }
 9926              		.loc 1 2743 0
 9927 062e 00BF     		nop
 9928 0630 1C37     		adds	r7, r7, #28
 9929              		.cfi_def_cfa_offset 12
 9930 0632 BD46     		mov	sp, r7
 9931              		.cfi_def_cfa_register 13
 9932              		@ sp needed
 9933 0634 90BD     		pop	{r4, r7, pc}
 9934              	.L682:
 9935 0636 00BF     		.align	2
 9936              	.L681:
 9937 0638 00000000 		.word	emg_1_status
 9938 063c 00000000 		.word	emg_2_status
 9939 0640 BC010000 		.word	rest_cycle_status.10507
 9940 0644 00000000 		.word	rest_enabled
 9941 0648 C0010000 		.word	timer_value_s.10521
 9942 064c C4010000 		.word	timer_value_e.10522
 9943 0650 00000000 		.word	g_mem
 9944 0654 1F85EB51 		.word	1374389535
 9945              		.cfi_endproc
 9946              	.LFE78:
 9947              		.size	cycles_counter_update, .-cycles_counter_update
 9948              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9949              		.align	2
 9950              		.global	save_cycles_eeprom
 9951              		.thumb
 9952              		.thumb_func
 9953              		.type	save_cycles_eeprom, %function
 9954              	save_cycles_eeprom:
 9955              	.LFB79:
2744:..\src/interruptions.c **** 
2745:..\src/interruptions.c **** //==============================================================================
2746:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2747:..\src/interruptions.c **** //==============================================================================
2748:..\src/interruptions.c **** 
2749:..\src/interruptions.c **** void save_cycles_eeprom() {
 9956              		.loc 1 2749 0
 9957              		.cfi_startproc
 9958              		@ args = 0, pretend = 0, frame = 24
 9959              		@ frame_needed = 1, uses_anonymous_args = 0
 9960 0000 80B5     		push	{r7, lr}
 9961              		.cfi_def_cfa_offset 8
 9962              		.cfi_offset 7, -8
 9963              		.cfi_offset 14, -4
 9964 0002 86B0     		sub	sp, sp, #24
 9965              		.cfi_def_cfa_offset 32
 9966 0004 00AF     		add	r7, sp, #0
 9967              		.cfi_def_cfa_register 7
2750:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 228


2751:..\src/interruptions.c ****     cystatus status;
2752:..\src/interruptions.c ****     static uint8 row_number;
2753:..\src/interruptions.c ****     uint8 row_start = 1;
 9968              		.loc 1 2753 0
 9969 0006 0123     		movs	r3, #1
 9970 0008 FB75     		strb	r3, [r7, #23]
2754:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 9971              		.loc 1 2754 0
 9972 000a 394B     		ldr	r3, .L699
 9973 000c 3B61     		str	r3, [r7, #16]
2755:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 9974              		.loc 1 2755 0
 9975 000e 394B     		ldr	r3, .L699+4
 9976 0010 FB60     		str	r3, [r7, #12]
2756:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9977              		.loc 1 2756 0
 9978 0012 FB7D     		ldrb	r3, [r7, #23]
 9979 0014 0633     		adds	r3, r3, #6
 9980 0016 FB72     		strb	r3, [r7, #11]
2757:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2758:..\src/interruptions.c **** 
2759:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2760:..\src/interruptions.c ****     switch(cycles_status) {
 9981              		.loc 1 2760 0
 9982 0018 374B     		ldr	r3, .L699+8
 9983 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9984 001c 042B     		cmp	r3, #4
 9985 001e 63D8     		bhi	.L695
 9986 0020 01A2     		adr	r2, .L686
 9987 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9988 0026 00BF     		.p2align 2
 9989              	.L686:
 9990 0028 3D000000 		.word	.L685+1
 9991 002c 5B000000 		.word	.L687+1
 9992 0030 8B000000 		.word	.L688+1
 9993 0034 C7000000 		.word	.L689+1
 9994 0038 DF000000 		.word	.L696+1
 9995              		.p2align 1
 9996              	.L685:
2761:..\src/interruptions.c ****         case PREPARE_DATA:
2762:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2763:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9997              		.loc 1 2763 0
 9998 003c 7022     		movs	r2, #112
 9999 003e 3969     		ldr	r1, [r7, #16]
 10000 0040 F868     		ldr	r0, [r7, #12]
 10001 0042 FFF7FEFF 		bl	memcpy
2764:..\src/interruptions.c ****             m_addr = addr_start;
 10002              		.loc 1 2764 0
 10003 0046 2D4A     		ldr	r2, .L699+12
 10004 0048 3B69     		ldr	r3, [r7, #16]
 10005 004a 1360     		str	r3, [r2]
2765:..\src/interruptions.c ****             row_number = row_start;
 10006              		.loc 1 2765 0
 10007 004c 2C4A     		ldr	r2, .L699+16
 10008 004e FB7D     		ldrb	r3, [r7, #23]
 10009 0050 1370     		strb	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 229


2766:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 10010              		.loc 1 2766 0
 10011 0052 294B     		ldr	r3, .L699+8
 10012 0054 0122     		movs	r2, #1
 10013 0056 1A70     		strb	r2, [r3]
2767:..\src/interruptions.c ****             break;
 10014              		.loc 1 2767 0
 10015 0058 46E0     		b	.L684
 10016              	.L687:
2768:..\src/interruptions.c ****             
2769:..\src/interruptions.c ****         case WRITE_CYCLES:
2770:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 10017              		.loc 1 2770 0
 10018 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2771:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 10019              		.loc 1 2771 0
 10020 005e 274B     		ldr	r3, .L699+12
 10021 0060 1A68     		ldr	r2, [r3]
 10022 0062 274B     		ldr	r3, .L699+16
 10023 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10024 0066 1946     		mov	r1, r3
 10025 0068 1046     		mov	r0, r2
 10026 006a FFF7FEFF 		bl	EEPROM_StartWrite
 10027 006e 7860     		str	r0, [r7, #4]
2772:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10028              		.loc 1 2772 0
 10029 0070 7B68     		ldr	r3, [r7, #4]
 10030 0072 072B     		cmp	r3, #7
 10031 0074 02D0     		beq	.L691
 10032              		.loc 1 2772 0 is_stmt 0 discriminator 1
 10033 0076 7B68     		ldr	r3, [r7, #4]
 10034 0078 002B     		cmp	r3, #0
 10035 007a 32D1     		bne	.L697
 10036              	.L691:
2773:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10037              		.loc 1 2773 0 is_stmt 1
 10038 007c 1E4B     		ldr	r3, .L699+8
 10039 007e 0222     		movs	r2, #2
 10040 0080 1A70     		strb	r2, [r3]
2774:..\src/interruptions.c ****                 can_write = FALSE;
 10041              		.loc 1 2774 0
 10042 0082 204B     		ldr	r3, .L699+20
 10043 0084 0022     		movs	r2, #0
 10044 0086 1A70     		strb	r2, [r3]
2775:..\src/interruptions.c ****             }
2776:..\src/interruptions.c ****             break;
 10045              		.loc 1 2776 0
 10046 0088 2BE0     		b	.L697
 10047              	.L688:
2777:..\src/interruptions.c ****             
2778:..\src/interruptions.c ****         case WAIT_QUERY:
2779:..\src/interruptions.c ****             status = EEPROM_Query();
 10048              		.loc 1 2779 0
 10049 008a FFF7FEFF 		bl	EEPROM_Query
 10050 008e 7860     		str	r0, [r7, #4]
2780:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10051              		.loc 1 2780 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 230


 10052 0090 7B68     		ldr	r3, [r7, #4]
 10053 0092 002B     		cmp	r3, #0
 10054 0094 27D1     		bne	.L698
2781:..\src/interruptions.c ****                 if (row_number < row_end) {
 10055              		.loc 1 2781 0
 10056 0096 1A4B     		ldr	r3, .L699+16
 10057 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10058 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10059 009c 9A42     		cmp	r2, r3
 10060 009e 0ED9     		bls	.L694
2782:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10061              		.loc 1 2782 0
 10062 00a0 164B     		ldr	r3, .L699+12
 10063 00a2 1B68     		ldr	r3, [r3]
 10064 00a4 1033     		adds	r3, r3, #16
 10065 00a6 154A     		ldr	r2, .L699+12
 10066 00a8 1360     		str	r3, [r2]
2783:..\src/interruptions.c ****                     row_number = row_number + 1;
 10067              		.loc 1 2783 0
 10068 00aa 154B     		ldr	r3, .L699+16
 10069 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10070 00ae 0133     		adds	r3, r3, #1
 10071 00b0 DAB2     		uxtb	r2, r3
 10072 00b2 134B     		ldr	r3, .L699+16
 10073 00b4 1A70     		strb	r2, [r3]
2784:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10074              		.loc 1 2784 0
 10075 00b6 104B     		ldr	r3, .L699+8
 10076 00b8 0122     		movs	r2, #1
 10077 00ba 1A70     		strb	r2, [r3]
2785:..\src/interruptions.c ****                 }
2786:..\src/interruptions.c ****                 else {
2787:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2788:..\src/interruptions.c ****                 }
2789:..\src/interruptions.c ****             }
2790:..\src/interruptions.c ****             break;
 10078              		.loc 1 2790 0
 10079 00bc 13E0     		b	.L698
 10080              	.L694:
2787:..\src/interruptions.c ****                 }
 10081              		.loc 1 2787 0
 10082 00be 0E4B     		ldr	r3, .L699+8
 10083 00c0 0322     		movs	r2, #3
 10084 00c2 1A70     		strb	r2, [r3]
 10085              		.loc 1 2790 0
 10086 00c4 0FE0     		b	.L698
 10087              	.L689:
2791:..\src/interruptions.c ****            
2792:..\src/interruptions.c ****         case WRITE_END:
2793:..\src/interruptions.c ****             can_write = TRUE;            
 10088              		.loc 1 2793 0
 10089 00c6 0F4B     		ldr	r3, .L699+20
 10090 00c8 0122     		movs	r2, #1
 10091 00ca 1A70     		strb	r2, [r3]
2794:..\src/interruptions.c ****             cycles_status = NONE;
 10092              		.loc 1 2794 0
 10093 00cc 0A4B     		ldr	r3, .L699+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 231


 10094 00ce 0422     		movs	r2, #4
 10095 00d0 1A70     		strb	r2, [r3]
2795:..\src/interruptions.c ****             
2796:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2797:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10096              		.loc 1 2797 0
 10097 00d2 7022     		movs	r2, #112
 10098 00d4 F968     		ldr	r1, [r7, #12]
 10099 00d6 3869     		ldr	r0, [r7, #16]
 10100 00d8 FFF7FEFF 		bl	memcpy
2798:..\src/interruptions.c ****             break;
 10101              		.loc 1 2798 0
 10102 00dc 04E0     		b	.L684
 10103              	.L696:
2799:..\src/interruptions.c ****             
2800:..\src/interruptions.c ****         case NONE:
2801:..\src/interruptions.c ****             break;
 10104              		.loc 1 2801 0
 10105 00de 00BF     		nop
 10106 00e0 02E0     		b	.L695
 10107              	.L697:
2776:..\src/interruptions.c ****             
 10108              		.loc 1 2776 0
 10109 00e2 00BF     		nop
 10110 00e4 00E0     		b	.L695
 10111              	.L698:
2790:..\src/interruptions.c ****            
 10112              		.loc 1 2790 0
 10113 00e6 00BF     		nop
 10114              	.L684:
 10115              	.L695:
2802:..\src/interruptions.c ****     }
2803:..\src/interruptions.c ****     
2804:..\src/interruptions.c **** }
 10116              		.loc 1 2804 0
 10117 00e8 00BF     		nop
 10118 00ea 1837     		adds	r7, r7, #24
 10119              		.cfi_def_cfa_offset 8
 10120 00ec BD46     		mov	sp, r7
 10121              		.cfi_def_cfa_register 13
 10122              		@ sp needed
 10123 00ee 80BD     		pop	{r7, pc}
 10124              	.L700:
 10125              		.align	2
 10126              	.L699:
 10127 00f0 10000000 		.word	g_mem+16
 10128 00f4 10000000 		.word	c_mem+16
 10129 00f8 00000000 		.word	cycles_status
 10130 00fc C8010000 		.word	m_addr.10566
 10131 0100 CC010000 		.word	row_number.10561
 10132 0104 00000000 		.word	can_write
 10133              		.cfi_endproc
 10134              	.LFE79:
 10135              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10136              		.bss
 10137              	state.10225:
 10138 0000 00       		.space	1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 232


 10139 0001 000000   		.align	2
 10140              	rx_queue.10229:
 10141 0004 000000   		.space	3
 10142              	data_packet_length.10227:
 10143 0007 00       		.space	1
 10144              	data_packet_index.10226:
 10145 0008 00       		.space	1
 10146 0009 000000   		.align	2
 10147              	data_packet_buffer.10228:
 10148 000c 00000000 		.space	128
 10148      00000000 
 10148      00000000 
 10148      00000000 
 10148      00000000 
 10149              		.data
 10150              		.align	1
 10151              		.type	counter_calibration.10245, %object
 10152              		.size	counter_calibration.10245, 2
 10153              	counter_calibration.10245:
 10154 0000 0100     		.short	1
 10155              		.align	1
 10156              		.type	counter_tension_func.10246, %object
 10157              		.size	counter_tension_func.10246, 2
 10158              	counter_tension_func.10246:
 10159 0002 0100     		.short	1
 10160              		.bss
 10161              		.align	2
 10162              	current_emg.10261:
 10163 008c 0000     		.space	2
 10164              	fsm_state.10298:
 10165 008e 00       		.space	1
 10166 008f 00       		.align	2
 10167              	pos_error_sum.10325:
 10168 0090 00000000 		.space	4
 10169              		.align	2
 10170              	prev_pos_err.10327:
 10171 0094 00000000 		.space	4
 10172              	motor_dir.10330:
 10173 0098 00       		.space	1
 10174 0099 000000   		.align	2
 10175              	curr_error_sum.10326:
 10176 009c 00000000 		.space	4
 10177              		.align	2
 10178              	prev_curr_err.10328:
 10179 00a0 00000000 		.space	4
 10180              		.align	2
 10181              	prev_pwm.10329:
 10182 00a4 00000000 		.space	4
 10183              		.align	2
 10184              	position_counter.10331:
 10185 00a8 00000000 		.space	4
 10186              		.align	2
 10187              	pos_error_sum.10358:
 10188 00ac 00000000 		.space	8
 10188      00000000 
 10189              		.align	2
 10190              	prev_pos_err.10360:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 233


 10191 00b4 00000000 		.space	8
 10191      00000000 
 10192              		.align	2
 10193              	motor_dir.10363:
 10194 00bc 0000     		.space	2
 10195 00be 0000     		.align	2
 10196              	curr_error_sum.10359:
 10197 00c0 00000000 		.space	8
 10197      00000000 
 10198              		.align	2
 10199              	prev_curr_err.10361:
 10200 00c8 00000000 		.space	8
 10200      00000000 
 10201              		.align	2
 10202              	prev_pwm.10362:
 10203 00d0 00000000 		.space	8
 10203      00000000 
 10204              		.align	2
 10205              	position_counter.10364:
 10206 00d8 00000000 		.space	8
 10206      00000000 
 10207              		.align	2
 10208              	motor_dir.10379:
 10209 00e0 0000     		.space	2
 10210 00e2 0000     		.align	2
 10211              	last_value_encoder.10396:
 10212 00e4 00000000 		.space	24
 10212      00000000 
 10212      00000000 
 10212      00000000 
 10212      00000000 
 10213              		.align	2
 10214              	comp_value_encoder.10397:
 10215 00fc 00000000 		.space	24
 10215      00000000 
 10215      00000000 
 10215      00000000 
 10215      00000000 
 10216              		.data
 10217              		.align	2
 10218              		.type	only_first_time.10399, %object
 10219              		.size	only_first_time.10399, 2
 10220              	only_first_time.10399:
 10221 0004 01       		.byte	1
 10222 0005 01       		.byte	1
 10223              		.bss
 10224              		.align	2
 10225              	error.10398:
 10226 0114 00000000 		.space	6
 10226      0000
 10227 011a 0000     		.align	2
 10228              	v_value.10403:
 10229 011c 00000000 		.space	24
 10229      00000000 
 10229      00000000 
 10229      00000000 
 10229      00000000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 234


 10230              		.align	2
 10231              	vv_value.10404:
 10232 0134 00000000 		.space	24
 10232      00000000 
 10232      00000000 
 10232      00000000 
 10232      00000000 
 10233              		.align	2
 10234              	vvv_value.10405:
 10235 014c 00000000 		.space	24
 10235      00000000 
 10235      00000000 
 10235      00000000 
 10235      00000000 
 10236              		.align	2
 10237              	one_time_execute.10401:
 10238 0164 0000     		.space	2
 10239 0166 0000     		.align	2
 10240              	safe_startup_motor_activation.10400:
 10241 0168 0000     		.space	2
 10242 016a 0000     		.align	2
 10243              	count_startup_motor.10402:
 10244 016c 00000000 		.space	8
 10244      00000000 
 10245              		.data
 10246 0006 0000     		.align	2
 10247              		.type	detect_power_cycle_prev.10429, %object
 10248              		.size	detect_power_cycle_prev.10429, 4
 10249              	detect_power_cycle_prev.10429:
 10250 0008 FDFFFFFF 		.word	-3
 10251              		.type	first_tension_valid.10428, %object
 10252              		.size	first_tension_valid.10428, 1
 10253              	first_tension_valid.10428:
 10254 000c 01       		.byte	1
 10255              		.bss
 10256              		.align	1
 10257              	count.10430:
 10258 0174 0000     		.space	2
 10259              	idx.10432:
 10260 0176 00       		.space	1
 10261 0177 00       		.align	2
 10262              	v_count.10431:
 10263 0178 00000000 		.space	4
 10264              		.align	1
 10265              	emg_counter_1.10422:
 10266 017c 0000     		.space	2
 10267              		.align	1
 10268              	emg_counter_2.10423:
 10269 017e 0000     		.space	2
 10270              		.align	2
 10271              	UD_mean_value.10426:
 10272 0180 00000000 		.space	4
 10273              		.align	1
 10274              	UD_counter.10424:
 10275 0184 0000     		.space	2
 10276 0186 0000     		.align	2
 10277              	LR_mean_value.10427:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 235


 10278 0188 00000000 		.space	4
 10279              		.align	1
 10280              	LR_counter.10425:
 10281 018c 0000     		.space	2
 10282              	pos_cycle_status.10503:
 10283 018e 00       		.space	1
 10284 018f 00       		.align	2
 10285              	thr_pos.10510:
 10286 0190 00000000 		.space	4
 10287              		.align	2
 10288              	max_pos.10511:
 10289 0194 00000000 		.space	4
 10290              		.data
 10291 000d 000000   		.align	2
 10292              		.type	bin_threshold.10508, %object
 10293              		.size	bin_threshold.10508, 4
 10294              	bin_threshold.10508:
 10295 0010 FA000000 		.word	250
 10296              		.bss
 10297              		.align	2
 10298              	emg_cycle_status.10504:
 10299 0198 0000     		.space	2
 10300 019a 0000     		.align	2
 10301              	motion_status.10505:
 10302 019c 0000     		.space	2
 10303 019e 0000     		.align	2
 10304              	start_emg_pos.10525:
 10305 01a0 00000000 		.space	8
 10305      00000000 
 10306              		.align	2
 10307              	emg_excess_status.10506:
 10308 01a8 0000     		.space	2
 10309              		.data
 10310              		.align	2
 10311              		.type	exc_act_thr.10509, %object
 10312              		.size	exc_act_thr.10509, 4
 10313              	exc_act_thr.10509:
 10314 0014 D4030000 		.word	980
 10315              		.bss
 10316 01aa 0000     		.align	2
 10317              	timer_exc_s.10523:
 10318 01ac 00000000 		.space	8
 10318      00000000 
 10319              		.align	2
 10320              	timer_exc_e.10524:
 10321 01b4 00000000 		.space	8
 10321      00000000 
 10322              	rest_cycle_status.10507:
 10323 01bc 00       		.space	1
 10324 01bd 000000   		.align	2
 10325              	timer_value_s.10521:
 10326 01c0 00000000 		.space	4
 10327              		.align	2
 10328              	timer_value_e.10522:
 10329 01c4 00000000 		.space	4
 10330              		.align	2
 10331              	m_addr.10566:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 236


 10332 01c8 00000000 		.space	4
 10333              	row_number.10561:
 10334 01cc 00       		.space	1
 10335              		.text
 10336              	.Letext0:
 10337              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10338              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10339              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10340              		.file 5 "..\\src\\commands.h"
 10341              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10342              		.file 7 "..\\src\\globals.h"
 10343              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10344              		.section	.debug_info,"",%progbits
 10345              	.Ldebug_info0:
 10346 0000 9B1C0000 		.4byte	0x1c9b
 10347 0004 0400     		.2byte	0x4
 10348 0006 00000000 		.4byte	.Ldebug_abbrev0
 10349 000a 04       		.byte	0x4
 10350 000b 01       		.uleb128 0x1
 10351 000c 9A090000 		.4byte	.LASF362
 10352 0010 0C       		.byte	0xc
 10353 0011 1C120000 		.4byte	.LASF363
 10354 0015 DE070000 		.4byte	.LASF364
 10355 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10356 001d 00000000 		.4byte	0
 10357 0021 00000000 		.4byte	.Ldebug_line0
 10358 0025 02       		.uleb128 0x2
 10359 0026 01       		.byte	0x1
 10360 0027 06       		.byte	0x6
 10361 0028 F9030000 		.4byte	.LASF0
 10362 002c 02       		.uleb128 0x2
 10363 002d 01       		.byte	0x1
 10364 002e 08       		.byte	0x8
 10365 002f 89040000 		.4byte	.LASF1
 10366 0033 02       		.uleb128 0x2
 10367 0034 02       		.byte	0x2
 10368 0035 05       		.byte	0x5
 10369 0036 ED0F0000 		.4byte	.LASF2
 10370 003a 02       		.uleb128 0x2
 10371 003b 02       		.byte	0x2
 10372 003c 07       		.byte	0x7
 10373 003d C0110000 		.4byte	.LASF3
 10374 0041 03       		.uleb128 0x3
 10375 0042 B2120000 		.4byte	.LASF9
 10376 0046 02       		.byte	0x2
 10377 0047 3F       		.byte	0x3f
 10378 0048 4C000000 		.4byte	0x4c
 10379 004c 02       		.uleb128 0x2
 10380 004d 04       		.byte	0x4
 10381 004e 05       		.byte	0x5
 10382 004f D6020000 		.4byte	.LASF4
 10383 0053 02       		.uleb128 0x2
 10384 0054 04       		.byte	0x4
 10385 0055 07       		.byte	0x7
 10386 0056 7E080000 		.4byte	.LASF5
 10387 005a 02       		.uleb128 0x2
 10388 005b 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 237


 10389 005c 05       		.byte	0x5
 10390 005d 600A0000 		.4byte	.LASF6
 10391 0061 02       		.uleb128 0x2
 10392 0062 08       		.byte	0x8
 10393 0063 07       		.byte	0x7
 10394 0064 600D0000 		.4byte	.LASF7
 10395 0068 04       		.uleb128 0x4
 10396 0069 04       		.byte	0x4
 10397 006a 05       		.byte	0x5
 10398 006b 696E7400 		.ascii	"int\000"
 10399 006f 02       		.uleb128 0x2
 10400 0070 04       		.byte	0x4
 10401 0071 07       		.byte	0x7
 10402 0072 880B0000 		.4byte	.LASF8
 10403 0076 03       		.uleb128 0x3
 10404 0077 8B000000 		.4byte	.LASF10
 10405 007b 03       		.byte	0x3
 10406 007c 2C       		.byte	0x2c
 10407 007d 41000000 		.4byte	0x41
 10408 0081 05       		.uleb128 0x5
 10409 0082 C70F0000 		.4byte	.LASF11
 10410 0086 04       		.byte	0x4
 10411 0087 E401     		.2byte	0x1e4
 10412 0089 2C000000 		.4byte	0x2c
 10413 008d 05       		.uleb128 0x5
 10414 008e 0F130000 		.4byte	.LASF12
 10415 0092 04       		.byte	0x4
 10416 0093 E501     		.2byte	0x1e5
 10417 0095 3A000000 		.4byte	0x3a
 10418 0099 05       		.uleb128 0x5
 10419 009a BF000000 		.4byte	.LASF13
 10420 009e 04       		.byte	0x4
 10421 009f E601     		.2byte	0x1e6
 10422 00a1 53000000 		.4byte	0x53
 10423 00a5 05       		.uleb128 0x5
 10424 00a6 A3010000 		.4byte	.LASF14
 10425 00aa 04       		.byte	0x4
 10426 00ab E701     		.2byte	0x1e7
 10427 00ad 25000000 		.4byte	0x25
 10428 00b1 05       		.uleb128 0x5
 10429 00b2 AC100000 		.4byte	.LASF15
 10430 00b6 04       		.byte	0x4
 10431 00b7 E801     		.2byte	0x1e8
 10432 00b9 33000000 		.4byte	0x33
 10433 00bd 05       		.uleb128 0x5
 10434 00be 3F120000 		.4byte	.LASF16
 10435 00c2 04       		.byte	0x4
 10436 00c3 E901     		.2byte	0x1e9
 10437 00c5 4C000000 		.4byte	0x4c
 10438 00c9 05       		.uleb128 0x5
 10439 00ca A1030000 		.4byte	.LASF17
 10440 00ce 04       		.byte	0x4
 10441 00cf EA01     		.2byte	0x1ea
 10442 00d1 D5000000 		.4byte	0xd5
 10443 00d5 02       		.uleb128 0x2
 10444 00d6 04       		.byte	0x4
 10445 00d7 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 238


 10446 00d8 480B0000 		.4byte	.LASF18
 10447 00dc 02       		.uleb128 0x2
 10448 00dd 08       		.byte	0x8
 10449 00de 04       		.byte	0x4
 10450 00df A30A0000 		.4byte	.LASF19
 10451 00e3 02       		.uleb128 0x2
 10452 00e4 01       		.byte	0x1
 10453 00e5 08       		.byte	0x8
 10454 00e6 24050000 		.4byte	.LASF20
 10455 00ea 05       		.uleb128 0x5
 10456 00eb C10B0000 		.4byte	.LASF21
 10457 00ef 04       		.byte	0x4
 10458 00f0 8602     		.2byte	0x286
 10459 00f2 53000000 		.4byte	0x53
 10460 00f6 05       		.uleb128 0x5
 10461 00f7 2C0E0000 		.4byte	.LASF22
 10462 00fb 04       		.byte	0x4
 10463 00fc 8E02     		.2byte	0x28e
 10464 00fe 02010000 		.4byte	0x102
 10465 0102 06       		.uleb128 0x6
 10466 0103 81000000 		.4byte	0x81
 10467 0107 02       		.uleb128 0x2
 10468 0108 08       		.byte	0x8
 10469 0109 04       		.byte	0x4
 10470 010a 730C0000 		.4byte	.LASF23
 10471 010e 02       		.uleb128 0x2
 10472 010f 04       		.byte	0x4
 10473 0110 07       		.byte	0x7
 10474 0111 10000000 		.4byte	.LASF24
 10475 0115 07       		.uleb128 0x7
 10476 0116 E3000000 		.4byte	0xe3
 10477 011a 25010000 		.4byte	0x125
 10478 011e 08       		.uleb128 0x8
 10479 011f 0E010000 		.4byte	0x10e
 10480 0123 07       		.byte	0x7
 10481 0124 00       		.byte	0
 10482 0125 09       		.uleb128 0x9
 10483 0126 EC120000 		.4byte	.LASF33
 10484 012a 01       		.byte	0x1
 10485 012b 2C000000 		.4byte	0x2c
 10486 012f 05       		.byte	0x5
 10487 0130 94       		.byte	0x94
 10488 0131 66010000 		.4byte	0x166
 10489 0135 0A       		.uleb128 0xa
 10490 0136 7C070000 		.4byte	.LASF25
 10491 013a 00       		.byte	0
 10492 013b 0A       		.uleb128 0xa
 10493 013c CA0B0000 		.4byte	.LASF26
 10494 0140 01       		.byte	0x1
 10495 0141 0A       		.uleb128 0xa
 10496 0142 2E020000 		.4byte	.LASF27
 10497 0146 02       		.byte	0x2
 10498 0147 0A       		.uleb128 0xa
 10499 0148 71010000 		.4byte	.LASF28
 10500 014c 03       		.byte	0x3
 10501 014d 0A       		.uleb128 0xa
 10502 014e 2B010000 		.4byte	.LASF29
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 239


 10503 0152 04       		.byte	0x4
 10504 0153 0A       		.uleb128 0xa
 10505 0154 53000000 		.4byte	.LASF30
 10506 0158 05       		.byte	0x5
 10507 0159 0A       		.uleb128 0xa
 10508 015a C0080000 		.4byte	.LASF31
 10509 015e 06       		.byte	0x6
 10510 015f 0A       		.uleb128 0xa
 10511 0160 420F0000 		.4byte	.LASF32
 10512 0164 07       		.byte	0x7
 10513 0165 00       		.byte	0
 10514 0166 09       		.uleb128 0x9
 10515 0167 6E0A0000 		.4byte	.LASF34
 10516 016b 01       		.byte	0x1
 10517 016c 2C000000 		.4byte	0x2c
 10518 0170 05       		.byte	0x5
 10519 0171 A8       		.byte	0xa8
 10520 0172 8F010000 		.4byte	0x18f
 10521 0176 0A       		.uleb128 0xa
 10522 0177 A4120000 		.4byte	.LASF35
 10523 017b 00       		.byte	0
 10524 017c 0A       		.uleb128 0xa
 10525 017d 5B090000 		.4byte	.LASF36
 10526 0181 01       		.byte	0x1
 10527 0182 0A       		.uleb128 0xa
 10528 0183 630C0000 		.4byte	.LASF37
 10529 0187 02       		.byte	0x2
 10530 0188 0A       		.uleb128 0xa
 10531 0189 61080000 		.4byte	.LASF38
 10532 018d 03       		.byte	0x3
 10533 018e 00       		.byte	0
 10534 018f 03       		.uleb128 0x3
 10535 0190 6F120000 		.4byte	.LASF39
 10536 0194 06       		.byte	0x6
 10537 0195 7E       		.byte	0x7e
 10538 0196 9A010000 		.4byte	0x19a
 10539 019a 0B       		.uleb128 0xb
 10540 019b 6F120000 		.4byte	.LASF39
 10541 019f 0C       		.uleb128 0xc
 10542 01a0 04       		.byte	0x4
 10543 01a1 8F010000 		.4byte	0x18f
 10544 01a5 0D       		.uleb128 0xd
 10545 01a6 280A0000 		.4byte	.LASF42
 10546 01aa 10       		.byte	0x10
 10547 01ab 07       		.byte	0x7
 10548 01ac F5       		.byte	0xf5
 10549 01ad E2010000 		.4byte	0x1e2
 10550 01b1 0E       		.uleb128 0xe
 10551 01b2 706F7300 		.ascii	"pos\000"
 10552 01b6 07       		.byte	0x7
 10553 01b7 F6       		.byte	0xf6
 10554 01b8 BD000000 		.4byte	0xbd
 10555 01bc 00       		.byte	0
 10556 01bd 0F       		.uleb128 0xf
 10557 01be 40090000 		.4byte	.LASF40
 10558 01c2 07       		.byte	0x7
 10559 01c3 F7       		.byte	0xf7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 240


 10560 01c4 BD000000 		.4byte	0xbd
 10561 01c8 04       		.byte	0x4
 10562 01c9 0E       		.uleb128 0xe
 10563 01ca 70776D00 		.ascii	"pwm\000"
 10564 01ce 07       		.byte	0x7
 10565 01cf F8       		.byte	0xf8
 10566 01d0 BD000000 		.4byte	0xbd
 10567 01d4 08       		.byte	0x8
 10568 01d5 0F       		.uleb128 0xf
 10569 01d6 C30D0000 		.4byte	.LASF41
 10570 01da 07       		.byte	0x7
 10571 01db F9       		.byte	0xf9
 10572 01dc 81000000 		.4byte	0x81
 10573 01e0 0C       		.byte	0xc
 10574 01e1 00       		.byte	0
 10575 01e2 10       		.uleb128 0x10
 10576 01e3 090F0000 		.4byte	.LASF43
 10577 01e7 34       		.byte	0x34
 10578 01e8 07       		.byte	0x7
 10579 01e9 0001     		.2byte	0x100
 10580 01eb 4B020000 		.4byte	0x24b
 10581 01ef 11       		.uleb128 0x11
 10582 01f0 706F7300 		.ascii	"pos\000"
 10583 01f4 07       		.byte	0x7
 10584 01f5 0101     		.2byte	0x101
 10585 01f7 4B020000 		.4byte	0x24b
 10586 01fb 00       		.byte	0
 10587 01fc 12       		.uleb128 0x12
 10588 01fd 40090000 		.4byte	.LASF40
 10589 0201 07       		.byte	0x7
 10590 0202 0201     		.2byte	0x102
 10591 0204 BD000000 		.4byte	0xbd
 10592 0208 0C       		.byte	0xc
 10593 0209 12       		.uleb128 0x12
 10594 020a EF100000 		.4byte	.LASF44
 10595 020e 07       		.byte	0x7
 10596 020f 0301     		.2byte	0x103
 10597 0211 BD000000 		.4byte	0xbd
 10598 0215 10       		.byte	0x10
 10599 0216 12       		.uleb128 0x12
 10600 0217 B6080000 		.4byte	.LASF45
 10601 021b 07       		.byte	0x7
 10602 021c 0401     		.2byte	0x104
 10603 021e BD000000 		.4byte	0xbd
 10604 0222 14       		.byte	0x14
 10605 0223 11       		.uleb128 0x11
 10606 0224 726F7400 		.ascii	"rot\000"
 10607 0228 07       		.byte	0x7
 10608 0229 0501     		.2byte	0x105
 10609 022b 5B020000 		.4byte	0x25b
 10610 022f 18       		.byte	0x18
 10611 0230 11       		.uleb128 0x11
 10612 0231 76656C00 		.ascii	"vel\000"
 10613 0235 07       		.byte	0x7
 10614 0236 0601     		.2byte	0x106
 10615 0238 4B020000 		.4byte	0x24b
 10616 023c 1C       		.byte	0x1c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 241


 10617 023d 11       		.uleb128 0x11
 10618 023e 61636300 		.ascii	"acc\000"
 10619 0242 07       		.byte	0x7
 10620 0243 0701     		.2byte	0x107
 10621 0245 4B020000 		.4byte	0x24b
 10622 0249 28       		.byte	0x28
 10623 024a 00       		.byte	0
 10624 024b 07       		.uleb128 0x7
 10625 024c BD000000 		.4byte	0xbd
 10626 0250 5B020000 		.4byte	0x25b
 10627 0254 08       		.uleb128 0x8
 10628 0255 0E010000 		.4byte	0x10e
 10629 0259 02       		.byte	0x2
 10630 025a 00       		.byte	0
 10631 025b 07       		.uleb128 0x7
 10632 025c A5000000 		.4byte	0xa5
 10633 0260 6B020000 		.4byte	0x26b
 10634 0264 08       		.uleb128 0x8
 10635 0265 0E010000 		.4byte	0x10e
 10636 0269 02       		.byte	0x2
 10637 026a 00       		.byte	0
 10638 026b 10       		.uleb128 0x10
 10639 026c 5D0B0000 		.4byte	.LASF46
 10640 0270 28       		.byte	0x28
 10641 0271 07       		.byte	0x7
 10642 0272 0A01     		.2byte	0x10a
 10643 0274 A0020000 		.4byte	0x2a0
 10644 0278 11       		.uleb128 0x11
 10645 0279 656D6700 		.ascii	"emg\000"
 10646 027d 07       		.byte	0x7
 10647 027e 0B01     		.2byte	0x10b
 10648 0280 A0020000 		.4byte	0x2a0
 10649 0284 00       		.byte	0
 10650 0285 12       		.uleb128 0x12
 10651 0286 140C0000 		.4byte	.LASF47
 10652 028a 07       		.byte	0x7
 10653 028b 0C01     		.2byte	0x10c
 10654 028d B0020000 		.4byte	0x2b0
 10655 0291 08       		.byte	0x8
 10656 0292 12       		.uleb128 0x12
 10657 0293 0C100000 		.4byte	.LASF48
 10658 0297 07       		.byte	0x7
 10659 0298 0D01     		.2byte	0x10d
 10660 029a A0020000 		.4byte	0x2a0
 10661 029e 20       		.byte	0x20
 10662 029f 00       		.byte	0
 10663 02a0 07       		.uleb128 0x7
 10664 02a1 BD000000 		.4byte	0xbd
 10665 02a5 B0020000 		.4byte	0x2b0
 10666 02a9 08       		.uleb128 0x8
 10667 02aa 0E010000 		.4byte	0x10e
 10668 02ae 01       		.byte	0x1
 10669 02af 00       		.byte	0
 10670 02b0 07       		.uleb128 0x7
 10671 02b1 BD000000 		.4byte	0xbd
 10672 02b5 C0020000 		.4byte	0x2c0
 10673 02b9 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 242


 10674 02ba 0E010000 		.4byte	0x10e
 10675 02be 05       		.byte	0x5
 10676 02bf 00       		.byte	0
 10677 02c0 10       		.uleb128 0x10
 10678 02c1 BD050000 		.4byte	.LASF49
 10679 02c5 04       		.byte	0x4
 10680 02c6 07       		.byte	0x7
 10681 02c7 1001     		.2byte	0x110
 10682 02c9 DB020000 		.4byte	0x2db
 10683 02cd 12       		.uleb128 0x12
 10684 02ce 1B050000 		.4byte	.LASF50
 10685 02d2 07       		.byte	0x7
 10686 02d3 1101     		.2byte	0x111
 10687 02d5 D5000000 		.4byte	0xd5
 10688 02d9 00       		.byte	0
 10689 02da 00       		.byte	0
 10690 02db 10       		.uleb128 0x10
 10691 02dc A9000000 		.4byte	.LASF51
 10692 02e0 86       		.byte	0x86
 10693 02e1 07       		.byte	0x7
 10694 02e2 1801     		.2byte	0x118
 10695 02e4 1D030000 		.4byte	0x31d
 10696 02e8 12       		.uleb128 0x12
 10697 02e9 86060000 		.4byte	.LASF52
 10698 02ed 07       		.byte	0x7
 10699 02ee 1901     		.2byte	0x119
 10700 02f0 1D030000 		.4byte	0x31d
 10701 02f4 00       		.byte	0
 10702 02f5 12       		.uleb128 0x12
 10703 02f6 A60D0000 		.4byte	.LASF53
 10704 02fa 07       		.byte	0x7
 10705 02fb 1A01     		.2byte	0x11a
 10706 02fd B1000000 		.4byte	0xb1
 10707 0301 80       		.byte	0x80
 10708 0302 11       		.uleb128 0x11
 10709 0303 696E6400 		.ascii	"ind\000"
 10710 0307 07       		.byte	0x7
 10711 0308 1B01     		.2byte	0x11b
 10712 030a B1000000 		.4byte	0xb1
 10713 030e 82       		.byte	0x82
 10714 030f 12       		.uleb128 0x12
 10715 0310 01020000 		.4byte	.LASF54
 10716 0314 07       		.byte	0x7
 10717 0315 1C01     		.2byte	0x11c
 10718 0317 81000000 		.4byte	0x81
 10719 031b 84       		.byte	0x84
 10720 031c 00       		.byte	0
 10721 031d 07       		.uleb128 0x7
 10722 031e 81000000 		.4byte	0x81
 10723 0322 2D030000 		.4byte	0x32d
 10724 0326 08       		.uleb128 0x8
 10725 0327 0E010000 		.4byte	0x10e
 10726 032b 7F       		.byte	0x7f
 10727 032c 00       		.byte	0
 10728 032d 10       		.uleb128 0x10
 10729 032e 7F030000 		.4byte	.LASF55
 10730 0332 70       		.byte	0x70
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 243


 10731 0333 07       		.byte	0x7
 10732 0334 2501     		.2byte	0x125
 10733 0336 CA030000 		.4byte	0x3ca
 10734 033a 12       		.uleb128 0x12
 10735 033b 00000000 		.4byte	.LASF56
 10736 033f 07       		.byte	0x7
 10737 0340 2601     		.2byte	0x126
 10738 0342 CA030000 		.4byte	0x3ca
 10739 0346 00       		.byte	0
 10740 0347 12       		.uleb128 0x12
 10741 0348 BE010000 		.4byte	.LASF57
 10742 034c 07       		.byte	0x7
 10743 034d 2701     		.2byte	0x127
 10744 034f DA030000 		.4byte	0x3da
 10745 0353 08       		.byte	0x8
 10746 0354 12       		.uleb128 0x12
 10747 0355 560C0000 		.4byte	.LASF58
 10748 0359 07       		.byte	0x7
 10749 035a 2801     		.2byte	0x128
 10750 035c EA030000 		.4byte	0x3ea
 10751 0360 30       		.byte	0x30
 10752 0361 12       		.uleb128 0x12
 10753 0362 55010000 		.4byte	.LASF59
 10754 0366 07       		.byte	0x7
 10755 0367 2901     		.2byte	0x129
 10756 0369 99000000 		.4byte	0x99
 10757 036d 40       		.byte	0x40
 10758 036e 12       		.uleb128 0x12
 10759 036f BC120000 		.4byte	.LASF60
 10760 0373 07       		.byte	0x7
 10761 0374 2A01     		.2byte	0x12a
 10762 0376 99000000 		.4byte	0x99
 10763 037a 44       		.byte	0x44
 10764 037b 12       		.uleb128 0x12
 10765 037c B1000000 		.4byte	.LASF61
 10766 0380 07       		.byte	0x7
 10767 0381 2B01     		.2byte	0x12b
 10768 0383 99000000 		.4byte	0x99
 10769 0387 48       		.byte	0x48
 10770 0388 12       		.uleb128 0x12
 10771 0389 D4080000 		.4byte	.LASF62
 10772 038d 07       		.byte	0x7
 10773 038e 2C01     		.2byte	0x12c
 10774 0390 99000000 		.4byte	0x99
 10775 0394 4C       		.byte	0x4c
 10776 0395 12       		.uleb128 0x12
 10777 0396 19000000 		.4byte	.LASF63
 10778 039a 07       		.byte	0x7
 10779 039b 2D01     		.2byte	0x12d
 10780 039d 99000000 		.4byte	0x99
 10781 03a1 50       		.byte	0x50
 10782 03a2 12       		.uleb128 0x12
 10783 03a3 68020000 		.4byte	.LASF64
 10784 03a7 07       		.byte	0x7
 10785 03a8 2E01     		.2byte	0x12e
 10786 03aa CA030000 		.4byte	0x3ca
 10787 03ae 54       		.byte	0x54
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 244


 10788 03af 12       		.uleb128 0x12
 10789 03b0 AC0C0000 		.4byte	.LASF65
 10790 03b4 07       		.byte	0x7
 10791 03b5 2F01     		.2byte	0x12f
 10792 03b7 CA030000 		.4byte	0x3ca
 10793 03bb 5C       		.byte	0x5c
 10794 03bc 12       		.uleb128 0x12
 10795 03bd 4C030000 		.4byte	.LASF66
 10796 03c1 07       		.byte	0x7
 10797 03c2 3001     		.2byte	0x130
 10798 03c4 FA030000 		.4byte	0x3fa
 10799 03c8 64       		.byte	0x64
 10800 03c9 00       		.byte	0
 10801 03ca 07       		.uleb128 0x7
 10802 03cb 99000000 		.4byte	0x99
 10803 03cf DA030000 		.4byte	0x3da
 10804 03d3 08       		.uleb128 0x8
 10805 03d4 0E010000 		.4byte	0x10e
 10806 03d8 01       		.byte	0x1
 10807 03d9 00       		.byte	0
 10808 03da 07       		.uleb128 0x7
 10809 03db 99000000 		.4byte	0x99
 10810 03df EA030000 		.4byte	0x3ea
 10811 03e3 08       		.uleb128 0x8
 10812 03e4 0E010000 		.4byte	0x10e
 10813 03e8 09       		.byte	0x9
 10814 03e9 00       		.byte	0
 10815 03ea 07       		.uleb128 0x7
 10816 03eb 99000000 		.4byte	0x99
 10817 03ef FA030000 		.4byte	0x3fa
 10818 03f3 08       		.uleb128 0x8
 10819 03f4 0E010000 		.4byte	0x10e
 10820 03f8 03       		.byte	0x3
 10821 03f9 00       		.byte	0
 10822 03fa 07       		.uleb128 0x7
 10823 03fb 81000000 		.4byte	0x81
 10824 03ff 0A040000 		.4byte	0x40a
 10825 0403 08       		.uleb128 0x8
 10826 0404 0E010000 		.4byte	0x10e
 10827 0408 0B       		.byte	0xb
 10828 0409 00       		.byte	0
 10829 040a 10       		.uleb128 0x10
 10830 040b 24020000 		.4byte	.LASF67
 10831 040f 10       		.byte	0x10
 10832 0410 07       		.byte	0x7
 10833 0411 3701     		.2byte	0x137
 10834 0413 99040000 		.4byte	0x499
 10835 0417 11       		.uleb128 0x11
 10836 0418 696400   		.ascii	"id\000"
 10837 041b 07       		.byte	0x7
 10838 041c 3801     		.2byte	0x138
 10839 041e 81000000 		.4byte	0x81
 10840 0422 00       		.byte	0
 10841 0423 12       		.uleb128 0x12
 10842 0424 27100000 		.4byte	.LASF68
 10843 0428 07       		.byte	0x7
 10844 0429 3901     		.2byte	0x139
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 245


 10845 042b 99040000 		.4byte	0x499
 10846 042f 01       		.byte	0x1
 10847 0430 12       		.uleb128 0x12
 10848 0431 63100000 		.4byte	.LASF69
 10849 0435 07       		.byte	0x7
 10850 0436 3A01     		.2byte	0x13a
 10851 0438 99040000 		.4byte	0x499
 10852 043c 04       		.byte	0x4
 10853 043d 12       		.uleb128 0x12
 10854 043e E3040000 		.4byte	.LASF70
 10855 0442 07       		.byte	0x7
 10856 0443 3B01     		.2byte	0x13b
 10857 0445 81000000 		.4byte	0x81
 10858 0449 07       		.byte	0x7
 10859 044a 12       		.uleb128 0x12
 10860 044b 08030000 		.4byte	.LASF71
 10861 044f 07       		.byte	0x7
 10862 0450 3C01     		.2byte	0x13c
 10863 0452 81000000 		.4byte	0x81
 10864 0456 08       		.byte	0x8
 10865 0457 12       		.uleb128 0x12
 10866 0458 4A020000 		.4byte	.LASF72
 10867 045c 07       		.byte	0x7
 10868 045d 3D01     		.2byte	0x13d
 10869 045f 81000000 		.4byte	0x81
 10870 0463 09       		.byte	0x9
 10871 0464 12       		.uleb128 0x12
 10872 0465 94110000 		.4byte	.LASF73
 10873 0469 07       		.byte	0x7
 10874 046a 3E01     		.2byte	0x13e
 10875 046c 81000000 		.4byte	0x81
 10876 0470 0A       		.byte	0xa
 10877 0471 12       		.uleb128 0x12
 10878 0472 28110000 		.4byte	.LASF74
 10879 0476 07       		.byte	0x7
 10880 0477 3F01     		.2byte	0x13f
 10881 0479 81000000 		.4byte	0x81
 10882 047d 0B       		.byte	0xb
 10883 047e 12       		.uleb128 0x12
 10884 047f 9B0E0000 		.4byte	.LASF75
 10885 0483 07       		.byte	0x7
 10886 0484 4001     		.2byte	0x140
 10887 0486 81000000 		.4byte	0x81
 10888 048a 0C       		.byte	0xc
 10889 048b 12       		.uleb128 0x12
 10890 048c 4C030000 		.4byte	.LASF66
 10891 0490 07       		.byte	0x7
 10892 0491 4101     		.2byte	0x141
 10893 0493 99040000 		.4byte	0x499
 10894 0497 0D       		.byte	0xd
 10895 0498 00       		.byte	0
 10896 0499 07       		.uleb128 0x7
 10897 049a 81000000 		.4byte	0x81
 10898 049e A9040000 		.4byte	0x4a9
 10899 04a2 08       		.uleb128 0x8
 10900 04a3 0E010000 		.4byte	0x10e
 10901 04a7 02       		.byte	0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 246


 10902 04a8 00       		.byte	0
 10903 04a9 10       		.uleb128 0x10
 10904 04aa 5A120000 		.4byte	.LASF76
 10905 04ae 70       		.byte	0x70
 10906 04af 07       		.byte	0x7
 10907 04b0 4801     		.2byte	0x148
 10908 04b2 23060000 		.4byte	0x623
 10909 04b6 11       		.uleb128 0x11
 10910 04b7 6B5F7000 		.ascii	"k_p\000"
 10911 04bb 07       		.byte	0x7
 10912 04bc 4901     		.2byte	0x149
 10913 04be BD000000 		.4byte	0xbd
 10914 04c2 00       		.byte	0
 10915 04c3 11       		.uleb128 0x11
 10916 04c4 6B5F6900 		.ascii	"k_i\000"
 10917 04c8 07       		.byte	0x7
 10918 04c9 4A01     		.2byte	0x14a
 10919 04cb BD000000 		.4byte	0xbd
 10920 04cf 04       		.byte	0x4
 10921 04d0 11       		.uleb128 0x11
 10922 04d1 6B5F6400 		.ascii	"k_d\000"
 10923 04d5 07       		.byte	0x7
 10924 04d6 4B01     		.2byte	0x14b
 10925 04d8 BD000000 		.4byte	0xbd
 10926 04dc 08       		.byte	0x8
 10927 04dd 12       		.uleb128 0x12
 10928 04de FF0D0000 		.4byte	.LASF77
 10929 04e2 07       		.byte	0x7
 10930 04e3 4C01     		.2byte	0x14c
 10931 04e5 BD000000 		.4byte	0xbd
 10932 04e9 0C       		.byte	0xc
 10933 04ea 12       		.uleb128 0x12
 10934 04eb CF050000 		.4byte	.LASF78
 10935 04ef 07       		.byte	0x7
 10936 04f0 4D01     		.2byte	0x14d
 10937 04f2 BD000000 		.4byte	0xbd
 10938 04f6 10       		.byte	0x10
 10939 04f7 12       		.uleb128 0x12
 10940 04f8 A0050000 		.4byte	.LASF79
 10941 04fc 07       		.byte	0x7
 10942 04fd 4E01     		.2byte	0x14e
 10943 04ff BD000000 		.4byte	0xbd
 10944 0503 14       		.byte	0x14
 10945 0504 12       		.uleb128 0x12
 10946 0505 E8100000 		.4byte	.LASF80
 10947 0509 07       		.byte	0x7
 10948 050a 4F01     		.2byte	0x14f
 10949 050c BD000000 		.4byte	0xbd
 10950 0510 18       		.byte	0x18
 10951 0511 12       		.uleb128 0x12
 10952 0512 7F060000 		.4byte	.LASF81
 10953 0516 07       		.byte	0x7
 10954 0517 5001     		.2byte	0x150
 10955 0519 BD000000 		.4byte	0xbd
 10956 051d 1C       		.byte	0x1c
 10957 051e 12       		.uleb128 0x12
 10958 051f F70F0000 		.4byte	.LASF82
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 247


 10959 0523 07       		.byte	0x7
 10960 0524 5101     		.2byte	0x151
 10961 0526 BD000000 		.4byte	0xbd
 10962 052a 20       		.byte	0x20
 10963 052b 12       		.uleb128 0x12
 10964 052c 8D060000 		.4byte	.LASF83
 10965 0530 07       		.byte	0x7
 10966 0531 5201     		.2byte	0x152
 10967 0533 BD000000 		.4byte	0xbd
 10968 0537 24       		.byte	0x24
 10969 0538 12       		.uleb128 0x12
 10970 0539 D5070000 		.4byte	.LASF84
 10971 053d 07       		.byte	0x7
 10972 053e 5301     		.2byte	0x153
 10973 0540 BD000000 		.4byte	0xbd
 10974 0544 28       		.byte	0x28
 10975 0545 12       		.uleb128 0x12
 10976 0546 34130000 		.4byte	.LASF85
 10977 054a 07       		.byte	0x7
 10978 054b 5401     		.2byte	0x154
 10979 054d BD000000 		.4byte	0xbd
 10980 0551 2C       		.byte	0x2c
 10981 0552 12       		.uleb128 0x12
 10982 0553 E4080000 		.4byte	.LASF86
 10983 0557 07       		.byte	0x7
 10984 0558 5501     		.2byte	0x155
 10985 055a 81000000 		.4byte	0x81
 10986 055e 30       		.byte	0x30
 10987 055f 12       		.uleb128 0x12
 10988 0560 D1100000 		.4byte	.LASF87
 10989 0564 07       		.byte	0x7
 10990 0565 5601     		.2byte	0x156
 10991 0567 81000000 		.4byte	0x81
 10992 056b 31       		.byte	0x31
 10993 056c 12       		.uleb128 0x12
 10994 056d 110E0000 		.4byte	.LASF88
 10995 0571 07       		.byte	0x7
 10996 0572 5701     		.2byte	0x157
 10997 0574 81000000 		.4byte	0x81
 10998 0578 32       		.byte	0x32
 10999 0579 12       		.uleb128 0x12
 11000 057a 77120000 		.4byte	.LASF89
 11001 057e 07       		.byte	0x7
 11002 057f 5801     		.2byte	0x158
 11003 0581 81000000 		.4byte	0x81
 11004 0585 33       		.byte	0x33
 11005 0586 12       		.uleb128 0x12
 11006 0587 D6000000 		.4byte	.LASF90
 11007 058b 07       		.byte	0x7
 11008 058c 5901     		.2byte	0x159
 11009 058e BD000000 		.4byte	0xbd
 11010 0592 34       		.byte	0x34
 11011 0593 12       		.uleb128 0x12
 11012 0594 FF050000 		.4byte	.LASF91
 11013 0598 07       		.byte	0x7
 11014 0599 5A01     		.2byte	0x15a
 11015 059b BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 248


 11016 059f 38       		.byte	0x38
 11017 05a0 12       		.uleb128 0x12
 11018 05a1 190B0000 		.4byte	.LASF92
 11019 05a5 07       		.byte	0x7
 11020 05a6 5B01     		.2byte	0x15b
 11021 05a8 BD000000 		.4byte	0xbd
 11022 05ac 3C       		.byte	0x3c
 11023 05ad 12       		.uleb128 0x12
 11024 05ae 41050000 		.4byte	.LASF93
 11025 05b2 07       		.byte	0x7
 11026 05b3 5C01     		.2byte	0x15c
 11027 05b5 BD000000 		.4byte	0xbd
 11028 05b9 40       		.byte	0x40
 11029 05ba 12       		.uleb128 0x12
 11030 05bb 3F010000 		.4byte	.LASF94
 11031 05bf 07       		.byte	0x7
 11032 05c0 5D01     		.2byte	0x15d
 11033 05c2 23060000 		.4byte	0x623
 11034 05c6 44       		.byte	0x44
 11035 05c7 12       		.uleb128 0x12
 11036 05c8 DE120000 		.4byte	.LASF95
 11037 05cc 07       		.byte	0x7
 11038 05cd 5E01     		.2byte	0x15e
 11039 05cf B1000000 		.4byte	0xb1
 11040 05d3 5C       		.byte	0x5c
 11041 05d4 12       		.uleb128 0x12
 11042 05d5 50090000 		.4byte	.LASF96
 11043 05d9 07       		.byte	0x7
 11044 05da 5F01     		.2byte	0x15f
 11045 05dc 81000000 		.4byte	0x81
 11046 05e0 5E       		.byte	0x5e
 11047 05e1 12       		.uleb128 0x12
 11048 05e2 B40B0000 		.4byte	.LASF97
 11049 05e6 07       		.byte	0x7
 11050 05e7 6001     		.2byte	0x160
 11051 05e9 81000000 		.4byte	0x81
 11052 05ed 5F       		.byte	0x5f
 11053 05ee 12       		.uleb128 0x12
 11054 05ef EE040000 		.4byte	.LASF98
 11055 05f3 07       		.byte	0x7
 11056 05f4 6101     		.2byte	0x161
 11057 05f6 81000000 		.4byte	0x81
 11058 05fa 60       		.byte	0x60
 11059 05fb 12       		.uleb128 0x12
 11060 05fc 8F050000 		.4byte	.LASF99
 11061 0600 07       		.byte	0x7
 11062 0601 6201     		.2byte	0x162
 11063 0603 81000000 		.4byte	0x81
 11064 0607 61       		.byte	0x61
 11065 0608 12       		.uleb128 0x12
 11066 0609 97040000 		.4byte	.LASF100
 11067 060d 07       		.byte	0x7
 11068 060e 6301     		.2byte	0x163
 11069 0610 81000000 		.4byte	0x81
 11070 0614 62       		.byte	0x62
 11071 0615 12       		.uleb128 0x12
 11072 0616 4C030000 		.4byte	.LASF66
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 249


 11073 061a 07       		.byte	0x7
 11074 061b 6401     		.2byte	0x164
 11075 061d 33060000 		.4byte	0x633
 11076 0621 63       		.byte	0x63
 11077 0622 00       		.byte	0
 11078 0623 07       		.uleb128 0x7
 11079 0624 D5000000 		.4byte	0xd5
 11080 0628 33060000 		.4byte	0x633
 11081 062c 08       		.uleb128 0x8
 11082 062d 0E010000 		.4byte	0x10e
 11083 0631 05       		.byte	0x5
 11084 0632 00       		.byte	0
 11085 0633 07       		.uleb128 0x7
 11086 0634 81000000 		.4byte	0x81
 11087 0638 43060000 		.4byte	0x643
 11088 063c 08       		.uleb128 0x8
 11089 063d 0E010000 		.4byte	0x10e
 11090 0641 0C       		.byte	0xc
 11091 0642 00       		.byte	0
 11092 0643 10       		.uleb128 0x10
 11093 0644 D3110000 		.4byte	.LASF101
 11094 0648 30       		.byte	0x30
 11095 0649 07       		.byte	0x7
 11096 064a 6B01     		.2byte	0x16b
 11097 064c C6060000 		.4byte	0x6c6
 11098 0650 12       		.uleb128 0x12
 11099 0651 D30A0000 		.4byte	.LASF102
 11100 0655 07       		.byte	0x7
 11101 0656 6C01     		.2byte	0x16c
 11102 0658 C6060000 		.4byte	0x6c6
 11103 065c 00       		.byte	0
 11104 065d 11       		.uleb128 0x11
 11105 065e 72657300 		.ascii	"res\000"
 11106 0662 07       		.byte	0x7
 11107 0663 6D01     		.2byte	0x16d
 11108 0665 99040000 		.4byte	0x499
 11109 0669 05       		.byte	0x5
 11110 066a 12       		.uleb128 0x12
 11111 066b 10090000 		.4byte	.LASF103
 11112 066f 07       		.byte	0x7
 11113 0670 6E01     		.2byte	0x16e
 11114 0672 4B020000 		.4byte	0x24b
 11115 0676 08       		.byte	0x8
 11116 0677 12       		.uleb128 0x12
 11117 0678 C8050000 		.4byte	.LASF104
 11118 067c 07       		.byte	0x7
 11119 067d 6F01     		.2byte	0x16f
 11120 067f D6060000 		.4byte	0x6d6
 11121 0683 14       		.byte	0x14
 11122 0684 12       		.uleb128 0x12
 11123 0685 F70C0000 		.4byte	.LASF105
 11124 0689 07       		.byte	0x7
 11125 068a 7001     		.2byte	0x170
 11126 068c 81000000 		.4byte	0x81
 11127 0690 20       		.byte	0x20
 11128 0691 12       		.uleb128 0x12
 11129 0692 07020000 		.4byte	.LASF106
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 250


 11130 0696 07       		.byte	0x7
 11131 0697 7101     		.2byte	0x171
 11132 0699 99040000 		.4byte	0x499
 11133 069d 21       		.byte	0x21
 11134 069e 12       		.uleb128 0x12
 11135 069f 430C0000 		.4byte	.LASF107
 11136 06a3 07       		.byte	0x7
 11137 06a4 7201     		.2byte	0x172
 11138 06a6 A5000000 		.4byte	0xa5
 11139 06aa 24       		.byte	0x24
 11140 06ab 12       		.uleb128 0x12
 11141 06ac DA0E0000 		.4byte	.LASF108
 11142 06b0 07       		.byte	0x7
 11143 06b1 7301     		.2byte	0x173
 11144 06b3 5B020000 		.4byte	0x25b
 11145 06b7 25       		.byte	0x25
 11146 06b8 12       		.uleb128 0x12
 11147 06b9 4C030000 		.4byte	.LASF66
 11148 06bd 07       		.byte	0x7
 11149 06be 7401     		.2byte	0x174
 11150 06c0 E6060000 		.4byte	0x6e6
 11151 06c4 28       		.byte	0x28
 11152 06c5 00       		.byte	0
 11153 06c6 07       		.uleb128 0x7
 11154 06c7 81000000 		.4byte	0x81
 11155 06cb D6060000 		.4byte	0x6d6
 11156 06cf 08       		.uleb128 0x8
 11157 06d0 0E010000 		.4byte	0x10e
 11158 06d4 04       		.byte	0x4
 11159 06d5 00       		.byte	0
 11160 06d6 07       		.uleb128 0x7
 11161 06d7 C9000000 		.4byte	0xc9
 11162 06db E6060000 		.4byte	0x6e6
 11163 06df 08       		.uleb128 0x8
 11164 06e0 0E010000 		.4byte	0x10e
 11165 06e4 02       		.byte	0x2
 11166 06e5 00       		.byte	0
 11167 06e6 07       		.uleb128 0x7
 11168 06e7 81000000 		.4byte	0x81
 11169 06eb F6060000 		.4byte	0x6f6
 11170 06ef 08       		.uleb128 0x8
 11171 06f0 0E010000 		.4byte	0x10e
 11172 06f4 07       		.byte	0x7
 11173 06f5 00       		.byte	0
 11174 06f6 10       		.uleb128 0x10
 11175 06f7 B7010000 		.4byte	.LASF109
 11176 06fb 10       		.byte	0x10
 11177 06fc 07       		.byte	0x7
 11178 06fd 7B01     		.2byte	0x17b
 11179 06ff 45070000 		.4byte	0x745
 11180 0703 12       		.uleb128 0x12
 11181 0704 220C0000 		.4byte	.LASF110
 11182 0708 07       		.byte	0x7
 11183 0709 7C01     		.2byte	0x17c
 11184 070b 45070000 		.4byte	0x745
 11185 070f 00       		.byte	0
 11186 0710 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 251


 11187 0711 D0120000 		.4byte	.LASF111
 11188 0715 07       		.byte	0x7
 11189 0716 7D01     		.2byte	0x17d
 11190 0718 CA030000 		.4byte	0x3ca
 11191 071c 04       		.byte	0x4
 11192 071d 12       		.uleb128 0x12
 11193 071e 15060000 		.4byte	.LASF112
 11194 0722 07       		.byte	0x7
 11195 0723 7E01     		.2byte	0x17e
 11196 0725 55070000 		.4byte	0x755
 11197 0729 0C       		.byte	0xc
 11198 072a 12       		.uleb128 0x12
 11199 072b F40E0000 		.4byte	.LASF113
 11200 072f 07       		.byte	0x7
 11201 0730 7F01     		.2byte	0x17f
 11202 0732 81000000 		.4byte	0x81
 11203 0736 0E       		.byte	0xe
 11204 0737 12       		.uleb128 0x12
 11205 0738 46040000 		.4byte	.LASF114
 11206 073c 07       		.byte	0x7
 11207 073d 8001     		.2byte	0x180
 11208 073f 81000000 		.4byte	0x81
 11209 0743 0F       		.byte	0xf
 11210 0744 00       		.byte	0
 11211 0745 07       		.uleb128 0x7
 11212 0746 8D000000 		.4byte	0x8d
 11213 074a 55070000 		.4byte	0x755
 11214 074e 08       		.uleb128 0x8
 11215 074f 0E010000 		.4byte	0x10e
 11216 0753 01       		.byte	0x1
 11217 0754 00       		.byte	0
 11218 0755 07       		.uleb128 0x7
 11219 0756 81000000 		.4byte	0x81
 11220 075a 65070000 		.4byte	0x765
 11221 075e 08       		.uleb128 0x8
 11222 075f 0E010000 		.4byte	0x10e
 11223 0763 01       		.byte	0x1
 11224 0764 00       		.byte	0
 11225 0765 10       		.uleb128 0x10
 11226 0766 DE0B0000 		.4byte	.LASF115
 11227 076a 20       		.byte	0x20
 11228 076b 07       		.byte	0x7
 11229 076c 8701     		.2byte	0x187
 11230 076e A7070000 		.4byte	0x7a7
 11231 0772 12       		.uleb128 0x12
 11232 0773 8F020000 		.4byte	.LASF116
 11233 0777 07       		.byte	0x7
 11234 0778 8801     		.2byte	0x188
 11235 077a 81000000 		.4byte	0x81
 11236 077e 00       		.byte	0
 11237 077f 12       		.uleb128 0x12
 11238 0780 B1110000 		.4byte	.LASF117
 11239 0784 07       		.byte	0x7
 11240 0785 8901     		.2byte	0x189
 11241 0787 81000000 		.4byte	0x81
 11242 078b 01       		.byte	0x1
 11243 078c 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 252


 11244 078d 4E0B0000 		.4byte	.LASF118
 11245 0791 07       		.byte	0x7
 11246 0792 8A01     		.2byte	0x18a
 11247 0794 A7070000 		.4byte	0x7a7
 11248 0798 02       		.byte	0x2
 11249 0799 12       		.uleb128 0x12
 11250 079a 4C030000 		.4byte	.LASF66
 11251 079e 07       		.byte	0x7
 11252 079f 8B01     		.2byte	0x18b
 11253 07a1 C6060000 		.4byte	0x6c6
 11254 07a5 1B       		.byte	0x1b
 11255 07a6 00       		.byte	0
 11256 07a7 07       		.uleb128 0x7
 11257 07a8 81000000 		.4byte	0x81
 11258 07ac BD070000 		.4byte	0x7bd
 11259 07b0 08       		.uleb128 0x8
 11260 07b1 0E010000 		.4byte	0x10e
 11261 07b5 04       		.byte	0x4
 11262 07b6 08       		.uleb128 0x8
 11263 07b7 0E010000 		.4byte	0x10e
 11264 07bb 04       		.byte	0x4
 11265 07bc 00       		.byte	0
 11266 07bd 10       		.uleb128 0x10
 11267 07be E70E0000 		.4byte	.LASF119
 11268 07c2 20       		.byte	0x20
 11269 07c3 07       		.byte	0x7
 11270 07c4 9201     		.2byte	0x192
 11271 07c6 19080000 		.4byte	0x819
 11272 07ca 12       		.uleb128 0x12
 11273 07cb ED0C0000 		.4byte	.LASF120
 11274 07cf 07       		.byte	0x7
 11275 07d0 9301     		.2byte	0x193
 11276 07d2 19080000 		.4byte	0x819
 11277 07d6 00       		.byte	0
 11278 07d7 12       		.uleb128 0x12
 11279 07d8 B2100000 		.4byte	.LASF121
 11280 07dc 07       		.byte	0x7
 11281 07dd 9401     		.2byte	0x194
 11282 07df 81000000 		.4byte	0x81
 11283 07e3 06       		.byte	0x6
 11284 07e4 12       		.uleb128 0x12
 11285 07e5 6B000000 		.4byte	.LASF122
 11286 07e9 07       		.byte	0x7
 11287 07ea 9501     		.2byte	0x195
 11288 07ec 81000000 		.4byte	0x81
 11289 07f0 07       		.byte	0x7
 11290 07f1 12       		.uleb128 0x12
 11291 07f2 54060000 		.4byte	.LASF123
 11292 07f6 07       		.byte	0x7
 11293 07f7 9601     		.2byte	0x196
 11294 07f9 FA030000 		.4byte	0x3fa
 11295 07fd 08       		.byte	0x8
 11296 07fe 12       		.uleb128 0x12
 11297 07ff 9D020000 		.4byte	.LASF124
 11298 0803 07       		.byte	0x7
 11299 0804 9701     		.2byte	0x197
 11300 0806 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 253


 11301 080a 14       		.byte	0x14
 11302 080b 12       		.uleb128 0x12
 11303 080c 4C030000 		.4byte	.LASF66
 11304 0810 07       		.byte	0x7
 11305 0811 9801     		.2byte	0x198
 11306 0813 29080000 		.4byte	0x829
 11307 0817 15       		.byte	0x15
 11308 0818 00       		.byte	0
 11309 0819 07       		.uleb128 0x7
 11310 081a 81000000 		.4byte	0x81
 11311 081e 29080000 		.4byte	0x829
 11312 0822 08       		.uleb128 0x8
 11313 0823 0E010000 		.4byte	0x10e
 11314 0827 05       		.byte	0x5
 11315 0828 00       		.byte	0
 11316 0829 07       		.uleb128 0x7
 11317 082a 81000000 		.4byte	0x81
 11318 082e 39080000 		.4byte	0x839
 11319 0832 08       		.uleb128 0x8
 11320 0833 0E010000 		.4byte	0x10e
 11321 0837 0A       		.byte	0xa
 11322 0838 00       		.byte	0
 11323 0839 10       		.uleb128 0x10
 11324 083a D20E0000 		.4byte	.LASF125
 11325 083e 20       		.byte	0x20
 11326 083f 07       		.byte	0x7
 11327 0840 9F01     		.2byte	0x19f
 11328 0842 6E080000 		.4byte	0x86e
 11329 0846 12       		.uleb128 0x12
 11330 0847 05040000 		.4byte	.LASF126
 11331 084b 07       		.byte	0x7
 11332 084c A001     		.2byte	0x1a0
 11333 084e 15010000 		.4byte	0x115
 11334 0852 00       		.byte	0
 11335 0853 12       		.uleb128 0x12
 11336 0854 25030000 		.4byte	.LASF127
 11337 0858 07       		.byte	0x7
 11338 0859 A101     		.2byte	0x1a1
 11339 085b F6060000 		.4byte	0x6f6
 11340 085f 08       		.byte	0x8
 11341 0860 12       		.uleb128 0x12
 11342 0861 4C030000 		.4byte	.LASF66
 11343 0865 07       		.byte	0x7
 11344 0866 A201     		.2byte	0x1a2
 11345 0868 E6060000 		.4byte	0x6e6
 11346 086c 18       		.byte	0x18
 11347 086d 00       		.byte	0
 11348 086e 10       		.uleb128 0x10
 11349 086f 3C0A0000 		.4byte	.LASF128
 11350 0873 10       		.byte	0x10
 11351 0874 07       		.byte	0x7
 11352 0875 A901     		.2byte	0x1a9
 11353 0877 BD080000 		.4byte	0x8bd
 11354 087b 12       		.uleb128 0x12
 11355 087c 37090000 		.4byte	.LASF129
 11356 0880 07       		.byte	0x7
 11357 0881 AA01     		.2byte	0x1aa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 254


 11358 0883 BD000000 		.4byte	0xbd
 11359 0887 00       		.byte	0
 11360 0888 12       		.uleb128 0x12
 11361 0889 16130000 		.4byte	.LASF130
 11362 088d 07       		.byte	0x7
 11363 088e AB01     		.2byte	0x1ab
 11364 0890 BD000000 		.4byte	0xbd
 11365 0894 04       		.byte	0x4
 11366 0895 12       		.uleb128 0x12
 11367 0896 1F060000 		.4byte	.LASF131
 11368 089a 07       		.byte	0x7
 11369 089b AC01     		.2byte	0x1ac
 11370 089d BD000000 		.4byte	0xbd
 11371 08a1 08       		.byte	0x8
 11372 08a2 12       		.uleb128 0x12
 11373 08a3 AB070000 		.4byte	.LASF132
 11374 08a7 07       		.byte	0x7
 11375 08a8 AD01     		.2byte	0x1ad
 11376 08aa 81000000 		.4byte	0x81
 11377 08ae 0C       		.byte	0xc
 11378 08af 12       		.uleb128 0x12
 11379 08b0 4C030000 		.4byte	.LASF66
 11380 08b4 07       		.byte	0x7
 11381 08b5 AE01     		.2byte	0x1ae
 11382 08b7 99040000 		.4byte	0x499
 11383 08bb 0D       		.byte	0xd
 11384 08bc 00       		.byte	0
 11385 08bd 10       		.uleb128 0x10
 11386 08be CD0F0000 		.4byte	.LASF133
 11387 08c2 10       		.byte	0x10
 11388 08c3 07       		.byte	0x7
 11389 08c4 B501     		.2byte	0x1b5
 11390 08c6 FF080000 		.4byte	0x8ff
 11391 08ca 12       		.uleb128 0x12
 11392 08cb BE070000 		.4byte	.LASF134
 11393 08cf 07       		.byte	0x7
 11394 08d0 B601     		.2byte	0x1b6
 11395 08d2 8D000000 		.4byte	0x8d
 11396 08d6 00       		.byte	0
 11397 08d7 12       		.uleb128 0x12
 11398 08d8 2F0F0000 		.4byte	.LASF135
 11399 08dc 07       		.byte	0x7
 11400 08dd B701     		.2byte	0x1b7
 11401 08df B1000000 		.4byte	0xb1
 11402 08e3 02       		.byte	0x2
 11403 08e4 12       		.uleb128 0x12
 11404 08e5 A7080000 		.4byte	.LASF136
 11405 08e9 07       		.byte	0x7
 11406 08ea B801     		.2byte	0x1b8
 11407 08ec 45070000 		.4byte	0x745
 11408 08f0 04       		.byte	0x4
 11409 08f1 12       		.uleb128 0x12
 11410 08f2 4C030000 		.4byte	.LASF66
 11411 08f6 07       		.byte	0x7
 11412 08f7 B901     		.2byte	0x1b9
 11413 08f9 E6060000 		.4byte	0x6e6
 11414 08fd 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 255


 11415 08fe 00       		.byte	0
 11416 08ff 10       		.uleb128 0x10
 11417 0900 62010000 		.4byte	.LASF137
 11418 0904 10       		.byte	0x10
 11419 0905 07       		.byte	0x7
 11420 0906 C001     		.2byte	0x1c0
 11421 0908 34090000 		.4byte	0x934
 11422 090c 12       		.uleb128 0x12
 11423 090d 16040000 		.4byte	.LASF138
 11424 0911 07       		.byte	0x7
 11425 0912 C101     		.2byte	0x1c1
 11426 0914 81000000 		.4byte	0x81
 11427 0918 00       		.byte	0
 11428 0919 12       		.uleb128 0x12
 11429 091a 3A0B0000 		.4byte	.LASF139
 11430 091e 07       		.byte	0x7
 11431 091f C201     		.2byte	0x1c2
 11432 0921 81000000 		.4byte	0x81
 11433 0925 01       		.byte	0x1
 11434 0926 12       		.uleb128 0x12
 11435 0927 4C030000 		.4byte	.LASF66
 11436 092b 07       		.byte	0x7
 11437 092c C301     		.2byte	0x1c3
 11438 092e 34090000 		.4byte	0x934
 11439 0932 02       		.byte	0x2
 11440 0933 00       		.byte	0
 11441 0934 07       		.uleb128 0x7
 11442 0935 81000000 		.4byte	0x81
 11443 0939 44090000 		.4byte	0x944
 11444 093d 08       		.uleb128 0x8
 11445 093e 0E010000 		.4byte	0x10e
 11446 0942 0D       		.byte	0xd
 11447 0943 00       		.byte	0
 11448 0944 10       		.uleb128 0x10
 11449 0945 550A0000 		.4byte	.LASF140
 11450 0949 10       		.byte	0x10
 11451 094a 07       		.byte	0x7
 11452 094b CA01     		.2byte	0x1ca
 11453 094d A0090000 		.4byte	0x9a0
 11454 0951 12       		.uleb128 0x12
 11455 0952 E9110000 		.4byte	.LASF141
 11456 0956 07       		.byte	0x7
 11457 0957 CC01     		.2byte	0x1cc
 11458 0959 BD000000 		.4byte	0xbd
 11459 095d 00       		.byte	0
 11460 095e 12       		.uleb128 0x12
 11461 095f 96070000 		.4byte	.LASF142
 11462 0963 07       		.byte	0x7
 11463 0964 CD01     		.2byte	0x1cd
 11464 0966 D5000000 		.4byte	0xd5
 11465 096a 04       		.byte	0x4
 11466 096b 12       		.uleb128 0x12
 11467 096c 430E0000 		.4byte	.LASF143
 11468 0970 07       		.byte	0x7
 11469 0971 CE01     		.2byte	0x1ce
 11470 0973 D5000000 		.4byte	0xd5
 11471 0977 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 256


 11472 0978 12       		.uleb128 0x12
 11473 0979 7D090000 		.4byte	.LASF144
 11474 097d 07       		.byte	0x7
 11475 097e CF01     		.2byte	0x1cf
 11476 0980 81000000 		.4byte	0x81
 11477 0984 0C       		.byte	0xc
 11478 0985 12       		.uleb128 0x12
 11479 0986 9C0F0000 		.4byte	.LASF145
 11480 098a 07       		.byte	0x7
 11481 098b D001     		.2byte	0x1d0
 11482 098d 81000000 		.4byte	0x81
 11483 0991 0D       		.byte	0xd
 11484 0992 12       		.uleb128 0x12
 11485 0993 4C030000 		.4byte	.LASF66
 11486 0997 07       		.byte	0x7
 11487 0998 D101     		.2byte	0x1d1
 11488 099a 55070000 		.4byte	0x755
 11489 099e 0E       		.byte	0xe
 11490 099f 00       		.byte	0
 11491 09a0 10       		.uleb128 0x10
 11492 09a1 6B060000 		.4byte	.LASF146
 11493 09a5 02       		.byte	0x2
 11494 09a6 07       		.byte	0x7
 11495 09a7 D401     		.2byte	0x1d4
 11496 09a9 BB090000 		.4byte	0x9bb
 11497 09ad 11       		.uleb128 0x11
 11498 09ae 70776D00 		.ascii	"pwm\000"
 11499 09b2 07       		.byte	0x7
 11500 09b3 D501     		.2byte	0x1d5
 11501 09b5 B1000000 		.4byte	0xb1
 11502 09b9 00       		.byte	0
 11503 09ba 00       		.byte	0
 11504 09bb 10       		.uleb128 0x10
 11505 09bc EC010000 		.4byte	.LASF147
 11506 09c0 12       		.byte	0x12
 11507 09c1 07       		.byte	0x7
 11508 09c2 DB01     		.2byte	0x1db
 11509 09c4 FD090000 		.4byte	0x9fd
 11510 09c8 12       		.uleb128 0x12
 11511 09c9 FF120000 		.4byte	.LASF148
 11512 09cd 07       		.byte	0x7
 11513 09ce DC01     		.2byte	0x1dc
 11514 09d0 81000000 		.4byte	0x81
 11515 09d4 00       		.byte	0
 11516 09d5 12       		.uleb128 0x12
 11517 09d6 9E110000 		.4byte	.LASF149
 11518 09da 07       		.byte	0x7
 11519 09db DD01     		.2byte	0x1dd
 11520 09dd 45070000 		.4byte	0x745
 11521 09e1 02       		.byte	0x2
 11522 09e2 12       		.uleb128 0x12
 11523 09e3 37000000 		.4byte	.LASF150
 11524 09e7 07       		.byte	0x7
 11525 09e8 DE01     		.2byte	0x1de
 11526 09ea 81000000 		.4byte	0x81
 11527 09ee 06       		.byte	0x6
 11528 09ef 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 257


 11529 09f0 4C030000 		.4byte	.LASF66
 11530 09f4 07       		.byte	0x7
 11531 09f5 DF01     		.2byte	0x1df
 11532 09f7 FD090000 		.4byte	0x9fd
 11533 09fb 07       		.byte	0x7
 11534 09fc 00       		.byte	0
 11535 09fd 07       		.uleb128 0x7
 11536 09fe 81000000 		.4byte	0x81
 11537 0a02 0D0A0000 		.4byte	0xa0d
 11538 0a06 08       		.uleb128 0x8
 11539 0a07 0E010000 		.4byte	0x10e
 11540 0a0b 09       		.byte	0x9
 11541 0a0c 00       		.byte	0
 11542 0a0d 13       		.uleb128 0x13
 11543 0a0e 04120000 		.4byte	.LASF151
 11544 0a12 F402     		.2byte	0x2f4
 11545 0a14 07       		.byte	0x7
 11546 0a15 E801     		.2byte	0x1e8
 11547 0a17 F20A0000 		.4byte	0xaf2
 11548 0a1b 12       		.uleb128 0x12
 11549 0a1c AF0B0000 		.4byte	.LASF152
 11550 0a20 07       		.byte	0x7
 11551 0a21 EA01     		.2byte	0x1ea
 11552 0a23 81000000 		.4byte	0x81
 11553 0a27 00       		.byte	0
 11554 0a28 12       		.uleb128 0x12
 11555 0a29 4C030000 		.4byte	.LASF66
 11556 0a2d 07       		.byte	0x7
 11557 0a2e EB01     		.2byte	0x1eb
 11558 0a30 F20A0000 		.4byte	0xaf2
 11559 0a34 01       		.byte	0x1
 11560 0a35 11       		.uleb128 0x11
 11561 0a36 636E7400 		.ascii	"cnt\000"
 11562 0a3a 07       		.byte	0x7
 11563 0a3b EC01     		.2byte	0x1ec
 11564 0a3d 2D030000 		.4byte	0x32d
 11565 0a41 10       		.byte	0x10
 11566 0a42 12       		.uleb128 0x12
 11567 0a43 DF020000 		.4byte	.LASF153
 11568 0a47 07       		.byte	0x7
 11569 0a48 ED01     		.2byte	0x1ed
 11570 0a4a 020B0000 		.4byte	0xb02
 11571 0a4e 80       		.byte	0x80
 11572 0a4f 11       		.uleb128 0x11
 11573 0a50 64657600 		.ascii	"dev\000"
 11574 0a54 07       		.byte	0x7
 11575 0a55 EE01     		.2byte	0x1ee
 11576 0a57 0A040000 		.4byte	0x40a
 11577 0a5b A0       		.byte	0xa0
 11578 0a5c 12       		.uleb128 0x12
 11579 0a5d 15100000 		.4byte	.LASF154
 11580 0a61 07       		.byte	0x7
 11581 0a62 EF01     		.2byte	0x1ef
 11582 0a64 120B0000 		.4byte	0xb12
 11583 0a68 B0       		.byte	0xb0
 11584 0a69 14       		.uleb128 0x14
 11585 0a6a 656E6300 		.ascii	"enc\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 258


 11586 0a6e 07       		.byte	0x7
 11587 0a6f F001     		.2byte	0x1f0
 11588 0a71 220B0000 		.4byte	0xb22
 11589 0a75 9001     		.2byte	0x190
 11590 0a77 14       		.uleb128 0x14
 11591 0a78 656D6700 		.ascii	"emg\000"
 11592 0a7c 07       		.byte	0x7
 11593 0a7d F101     		.2byte	0x1f1
 11594 0a7f F6060000 		.4byte	0x6f6
 11595 0a83 F001     		.2byte	0x1f0
 11596 0a85 14       		.uleb128 0x14
 11597 0a86 696D7500 		.ascii	"imu\000"
 11598 0a8a 07       		.byte	0x7
 11599 0a8b F201     		.2byte	0x1f2
 11600 0a8d 65070000 		.4byte	0x765
 11601 0a91 0002     		.2byte	0x200
 11602 0a93 14       		.uleb128 0x14
 11603 0a94 65787000 		.ascii	"exp\000"
 11604 0a98 07       		.byte	0x7
 11605 0a99 F301     		.2byte	0x1f3
 11606 0a9b BD070000 		.4byte	0x7bd
 11607 0a9f 2002     		.2byte	0x220
 11608 0aa1 15       		.uleb128 0x15
 11609 0aa2 86000000 		.4byte	.LASF155
 11610 0aa6 07       		.byte	0x7
 11611 0aa7 F401     		.2byte	0x1f4
 11612 0aa9 320B0000 		.4byte	0xb32
 11613 0aad 4002     		.2byte	0x240
 11614 0aaf 14       		.uleb128 0x14
 11615 0ab0 534800   		.ascii	"SH\000"
 11616 0ab3 07       		.byte	0x7
 11617 0ab4 F601     		.2byte	0x1f6
 11618 0ab6 6E080000 		.4byte	0x86e
 11619 0aba A002     		.2byte	0x2a0
 11620 0abc 15       		.uleb128 0x15
 11621 0abd CD000000 		.4byte	.LASF156
 11622 0ac1 07       		.byte	0x7
 11623 0ac2 F701     		.2byte	0x1f7
 11624 0ac4 BD080000 		.4byte	0x8bd
 11625 0ac8 B002     		.2byte	0x2b0
 11626 0aca 14       		.uleb128 0x14
 11627 0acb 4D5300   		.ascii	"MS\000"
 11628 0ace 07       		.byte	0x7
 11629 0acf F801     		.2byte	0x1f8
 11630 0ad1 FF080000 		.4byte	0x8ff
 11631 0ad5 C002     		.2byte	0x2c0
 11632 0ad7 14       		.uleb128 0x14
 11633 0ad8 464200   		.ascii	"FB\000"
 11634 0adb 07       		.byte	0x7
 11635 0adc F901     		.2byte	0x1f9
 11636 0ade 44090000 		.4byte	0x944
 11637 0ae2 D002     		.2byte	0x2d0
 11638 0ae4 14       		.uleb128 0x14
 11639 0ae5 575200   		.ascii	"WR\000"
 11640 0ae8 07       		.byte	0x7
 11641 0ae9 FA01     		.2byte	0x1fa
 11642 0aeb BB090000 		.4byte	0x9bb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 259


 11643 0aef E002     		.2byte	0x2e0
 11644 0af1 00       		.byte	0
 11645 0af2 07       		.uleb128 0x7
 11646 0af3 81000000 		.4byte	0x81
 11647 0af7 020B0000 		.4byte	0xb02
 11648 0afb 08       		.uleb128 0x8
 11649 0afc 0E010000 		.4byte	0x10e
 11650 0b00 0E       		.byte	0xe
 11651 0b01 00       		.byte	0
 11652 0b02 07       		.uleb128 0x7
 11653 0b03 81000000 		.4byte	0x81
 11654 0b07 120B0000 		.4byte	0xb12
 11655 0b0b 08       		.uleb128 0x8
 11656 0b0c 0E010000 		.4byte	0x10e
 11657 0b10 1F       		.byte	0x1f
 11658 0b11 00       		.byte	0
 11659 0b12 07       		.uleb128 0x7
 11660 0b13 A9040000 		.4byte	0x4a9
 11661 0b17 220B0000 		.4byte	0xb22
 11662 0b1b 08       		.uleb128 0x8
 11663 0b1c 0E010000 		.4byte	0x10e
 11664 0b20 01       		.byte	0x1
 11665 0b21 00       		.byte	0
 11666 0b22 07       		.uleb128 0x7
 11667 0b23 43060000 		.4byte	0x643
 11668 0b27 320B0000 		.4byte	0xb32
 11669 0b2b 08       		.uleb128 0x8
 11670 0b2c 0E010000 		.4byte	0x10e
 11671 0b30 01       		.byte	0x1
 11672 0b31 00       		.byte	0
 11673 0b32 07       		.uleb128 0x7
 11674 0b33 39080000 		.4byte	0x839
 11675 0b37 420B0000 		.4byte	0xb42
 11676 0b3b 08       		.uleb128 0x8
 11677 0b3c 0E010000 		.4byte	0x10e
 11678 0b40 02       		.byte	0x2
 11679 0b41 00       		.byte	0
 11680 0b42 10       		.uleb128 0x10
 11681 0b43 AD0D0000 		.4byte	.LASF157
 11682 0b47 28       		.byte	0x28
 11683 0b48 07       		.byte	0x7
 11684 0b49 0502     		.2byte	0x205
 11685 0b4b 9E0B0000 		.4byte	0xb9e
 11686 0b4f 12       		.uleb128 0x12
 11687 0b50 08050000 		.4byte	.LASF158
 11688 0b54 07       		.byte	0x7
 11689 0b55 0602     		.2byte	0x206
 11690 0b57 81000000 		.4byte	0x81
 11691 0b5b 00       		.byte	0
 11692 0b5c 12       		.uleb128 0x12
 11693 0b5d 59030000 		.4byte	.LASF159
 11694 0b61 07       		.byte	0x7
 11695 0b62 0702     		.2byte	0x207
 11696 0b64 9E0B0000 		.4byte	0xb9e
 11697 0b68 02       		.byte	0x2
 11698 0b69 12       		.uleb128 0x12
 11699 0b6a E20C0000 		.4byte	.LASF160
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 260


 11700 0b6e 07       		.byte	0x7
 11701 0b6f 0802     		.2byte	0x208
 11702 0b71 9E0B0000 		.4byte	0xb9e
 11703 0b75 08       		.byte	0x8
 11704 0b76 12       		.uleb128 0x12
 11705 0b77 B90D0000 		.4byte	.LASF161
 11706 0b7b 07       		.byte	0x7
 11707 0b7c 0902     		.2byte	0x209
 11708 0b7e 9E0B0000 		.4byte	0xb9e
 11709 0b82 0E       		.byte	0xe
 11710 0b83 12       		.uleb128 0x12
 11711 0b84 2C090000 		.4byte	.LASF162
 11712 0b88 07       		.byte	0x7
 11713 0b89 0A02     		.2byte	0x20a
 11714 0b8b AE0B0000 		.4byte	0xbae
 11715 0b8f 14       		.byte	0x14
 11716 0b90 12       		.uleb128 0x12
 11717 0b91 D9010000 		.4byte	.LASF163
 11718 0b95 07       		.byte	0x7
 11719 0b96 0B02     		.2byte	0x20b
 11720 0b98 B1000000 		.4byte	0xb1
 11721 0b9c 24       		.byte	0x24
 11722 0b9d 00       		.byte	0
 11723 0b9e 07       		.uleb128 0x7
 11724 0b9f B1000000 		.4byte	0xb1
 11725 0ba3 AE0B0000 		.4byte	0xbae
 11726 0ba7 08       		.uleb128 0x8
 11727 0ba8 0E010000 		.4byte	0x10e
 11728 0bac 02       		.byte	0x2
 11729 0bad 00       		.byte	0
 11730 0bae 07       		.uleb128 0x7
 11731 0baf D5000000 		.4byte	0xd5
 11732 0bb3 BE0B0000 		.4byte	0xbbe
 11733 0bb7 08       		.uleb128 0x8
 11734 0bb8 0E010000 		.4byte	0x10e
 11735 0bbc 03       		.byte	0x3
 11736 0bbd 00       		.byte	0
 11737 0bbe 10       		.uleb128 0x10
 11738 0bbf 21130000 		.4byte	.LASF164
 11739 0bc3 08       		.byte	0x8
 11740 0bc4 07       		.byte	0x7
 11741 0bc5 1202     		.2byte	0x212
 11742 0bc7 E60B0000 		.4byte	0xbe6
 11743 0bcb 12       		.uleb128 0x12
 11744 0bcc 0B060000 		.4byte	.LASF165
 11745 0bd0 07       		.byte	0x7
 11746 0bd1 1302     		.2byte	0x213
 11747 0bd3 BD000000 		.4byte	0xbd
 11748 0bd7 00       		.byte	0
 11749 0bd8 12       		.uleb128 0x12
 11750 0bd9 1F020000 		.4byte	.LASF166
 11751 0bdd 07       		.byte	0x7
 11752 0bde 1402     		.2byte	0x214
 11753 0be0 BD000000 		.4byte	0xbd
 11754 0be4 04       		.byte	0x4
 11755 0be5 00       		.byte	0
 11756 0be6 10       		.uleb128 0x10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 261


 11757 0be7 29040000 		.4byte	.LASF167
 11758 0beb 06       		.byte	0x6
 11759 0bec 07       		.byte	0x7
 11760 0bed 1B02     		.2byte	0x21b
 11761 0bef 280C0000 		.4byte	0xc28
 11762 0bf3 12       		.uleb128 0x12
 11763 0bf4 76080000 		.4byte	.LASF168
 11764 0bf8 07       		.byte	0x7
 11765 0bf9 1C02     		.2byte	0x21c
 11766 0bfb 81000000 		.4byte	0x81
 11767 0bff 00       		.byte	0
 11768 0c00 12       		.uleb128 0x12
 11769 0c01 3D130000 		.4byte	.LASF169
 11770 0c05 07       		.byte	0x7
 11771 0c06 1D02     		.2byte	0x21d
 11772 0c08 81000000 		.4byte	0x81
 11773 0c0c 01       		.byte	0x1
 11774 0c0d 12       		.uleb128 0x12
 11775 0c0e AC060000 		.4byte	.LASF170
 11776 0c12 07       		.byte	0x7
 11777 0c13 1E02     		.2byte	0x21e
 11778 0c15 B1000000 		.4byte	0xb1
 11779 0c19 02       		.byte	0x2
 11780 0c1a 12       		.uleb128 0x12
 11781 0c1b 0D0B0000 		.4byte	.LASF171
 11782 0c1f 07       		.byte	0x7
 11783 0c20 1F02     		.2byte	0x21f
 11784 0c22 B1000000 		.4byte	0xb1
 11785 0c26 04       		.byte	0x4
 11786 0c27 00       		.byte	0
 11787 0c28 16       		.uleb128 0x16
 11788 0c29 01       		.byte	0x1
 11789 0c2a 2C000000 		.4byte	0x2c
 11790 0c2e 07       		.byte	0x7
 11791 0c2f 2302     		.2byte	0x223
 11792 0c31 5A0C0000 		.4byte	0xc5a
 11793 0c35 0A       		.uleb128 0xa
 11794 0c36 28060000 		.4byte	.LASF172
 11795 0c3a 00       		.byte	0
 11796 0c3b 0A       		.uleb128 0xa
 11797 0c3c 850E0000 		.4byte	.LASF173
 11798 0c40 01       		.byte	0x1
 11799 0c41 0A       		.uleb128 0xa
 11800 0c42 7F0C0000 		.4byte	.LASF174
 11801 0c46 02       		.byte	0x2
 11802 0c47 0A       		.uleb128 0xa
 11803 0c48 82020000 		.4byte	.LASF175
 11804 0c4c 03       		.byte	0x3
 11805 0c4d 0A       		.uleb128 0xa
 11806 0c4e 430B0000 		.4byte	.LASF176
 11807 0c52 04       		.byte	0x4
 11808 0c53 0A       		.uleb128 0xa
 11809 0c54 230E0000 		.4byte	.LASF177
 11810 0c58 05       		.byte	0x5
 11811 0c59 00       		.byte	0
 11812 0c5a 05       		.uleb128 0x5
 11813 0c5b B2050000 		.4byte	.LASF178
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 262


 11814 0c5f 07       		.byte	0x7
 11815 0c60 2B02     		.2byte	0x22b
 11816 0c62 280C0000 		.4byte	0xc28
 11817 0c66 16       		.uleb128 0x16
 11818 0c67 01       		.byte	0x1
 11819 0c68 2C000000 		.4byte	0x2c
 11820 0c6c 07       		.byte	0x7
 11821 0c6d 2D02     		.2byte	0x22d
 11822 0c6f 920C0000 		.4byte	0xc92
 11823 0c73 0A       		.uleb128 0xa
 11824 0c74 CC010000 		.4byte	.LASF179
 11825 0c78 00       		.byte	0
 11826 0c79 0A       		.uleb128 0xa
 11827 0c7a 9A080000 		.4byte	.LASF180
 11828 0c7e 01       		.byte	0x1
 11829 0c7f 0A       		.uleb128 0xa
 11830 0c80 45090000 		.4byte	.LASF181
 11831 0c84 02       		.byte	0x2
 11832 0c85 0A       		.uleb128 0xa
 11833 0c86 C3030000 		.4byte	.LASF182
 11834 0c8a 03       		.byte	0x3
 11835 0c8b 0A       		.uleb128 0xa
 11836 0c8c FA120000 		.4byte	.LASF183
 11837 0c90 04       		.byte	0x4
 11838 0c91 00       		.byte	0
 11839 0c92 05       		.uleb128 0x5
 11840 0c93 6B0F0000 		.4byte	.LASF184
 11841 0c97 07       		.byte	0x7
 11842 0c98 3402     		.2byte	0x234
 11843 0c9a 660C0000 		.4byte	0xc66
 11844 0c9e 17       		.uleb128 0x17
 11845 0c9f E6050000 		.4byte	.LASF185
 11846 0ca3 01       		.byte	0x1
 11847 0ca4 62       		.byte	0x62
 11848 0ca5 00000000 		.4byte	.LFB64
 11849 0ca9 18000000 		.4byte	.LFE64-.LFB64
 11850 0cad 01       		.uleb128 0x1
 11851 0cae 9C       		.byte	0x9c
 11852 0caf 17       		.uleb128 0x17
 11853 0cb0 81110000 		.4byte	.LASF186
 11854 0cb4 01       		.byte	0x1
 11855 0cb5 6D       		.byte	0x6d
 11856 0cb6 00000000 		.4byte	.LFB65
 11857 0cba 20000000 		.4byte	.LFE65-.LFB65
 11858 0cbe 01       		.uleb128 0x1
 11859 0cbf 9C       		.byte	0x9c
 11860 0cc0 18       		.uleb128 0x18
 11861 0cc1 C10A0000 		.4byte	.LASF218
 11862 0cc5 01       		.byte	0x1
 11863 0cc6 86       		.byte	0x86
 11864 0cc7 00000000 		.4byte	.LFB66
 11865 0ccb 0C020000 		.4byte	.LFE66-.LFB66
 11866 0ccf 01       		.uleb128 0x1
 11867 0cd0 9C       		.byte	0x9c
 11868 0cd1 550D0000 		.4byte	0xd55
 11869 0cd5 19       		.uleb128 0x19
 11870 0cd6 FA000000 		.4byte	.LASF187
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 263


 11871 0cda 01       		.byte	0x1
 11872 0cdb 8B       		.byte	0x8b
 11873 0cdc 81000000 		.4byte	0x81
 11874 0ce0 05       		.uleb128 0x5
 11875 0ce1 03       		.byte	0x3
 11876 0ce2 00000000 		.4byte	state.10225
 11877 0ce6 19       		.uleb128 0x19
 11878 0ce7 D1060000 		.4byte	.LASF188
 11879 0ceb 01       		.byte	0x1
 11880 0cec 8E       		.byte	0x8e
 11881 0ced 81000000 		.4byte	0x81
 11882 0cf1 05       		.uleb128 0x5
 11883 0cf2 03       		.byte	0x3
 11884 0cf3 08000000 		.4byte	data_packet_index.10226
 11885 0cf7 19       		.uleb128 0x19
 11886 0cf8 EC0D0000 		.4byte	.LASF189
 11887 0cfc 01       		.byte	0x1
 11888 0cfd 8F       		.byte	0x8f
 11889 0cfe 81000000 		.4byte	0x81
 11890 0d02 05       		.uleb128 0x5
 11891 0d03 03       		.byte	0x3
 11892 0d04 07000000 		.4byte	data_packet_length.10227
 11893 0d08 19       		.uleb128 0x19
 11894 0d09 E3060000 		.4byte	.LASF190
 11895 0d0d 01       		.byte	0x1
 11896 0d0e 90       		.byte	0x90
 11897 0d0f 1D030000 		.4byte	0x31d
 11898 0d13 05       		.uleb128 0x5
 11899 0d14 03       		.byte	0x3
 11900 0d15 0C000000 		.4byte	data_packet_buffer.10228
 11901 0d19 19       		.uleb128 0x19
 11902 0d1a F10B0000 		.4byte	.LASF191
 11903 0d1e 01       		.byte	0x1
 11904 0d1f 91       		.byte	0x91
 11905 0d20 99040000 		.4byte	0x499
 11906 0d24 05       		.uleb128 0x5
 11907 0d25 03       		.byte	0x3
 11908 0d26 04000000 		.4byte	rx_queue.10229
 11909 0d2a 19       		.uleb128 0x19
 11910 0d2b 91010000 		.4byte	.LASF192
 11911 0d2f 01       		.byte	0x1
 11912 0d30 94       		.byte	0x94
 11913 0d31 81000000 		.4byte	0x81
 11914 0d35 02       		.uleb128 0x2
 11915 0d36 91       		.byte	0x91
 11916 0d37 75       		.sleb128 -11
 11917 0d38 19       		.uleb128 0x19
 11918 0d39 96060000 		.4byte	.LASF193
 11919 0d3d 01       		.byte	0x1
 11920 0d3e 95       		.byte	0x95
 11921 0d3f 81000000 		.4byte	0x81
 11922 0d43 02       		.uleb128 0x2
 11923 0d44 91       		.byte	0x91
 11924 0d45 77       		.sleb128 -9
 11925 0d46 19       		.uleb128 0x19
 11926 0d47 53080000 		.4byte	.LASF194
 11927 0d4b 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 264


 11928 0d4c 96       		.byte	0x96
 11929 0d4d 81000000 		.4byte	0x81
 11930 0d51 02       		.uleb128 0x2
 11931 0d52 91       		.byte	0x91
 11932 0d53 76       		.sleb128 -10
 11933 0d54 00       		.byte	0
 11934 0d55 1A       		.uleb128 0x1a
 11935 0d56 35100000 		.4byte	.LASF201
 11936 0d5a 01       		.byte	0x1
 11937 0d5b 0C01     		.2byte	0x10c
 11938 0d5d 00000000 		.4byte	.LFB67
 11939 0d61 D0040000 		.4byte	.LFE67-.LFB67
 11940 0d65 01       		.uleb128 0x1
 11941 0d66 9C       		.byte	0x9c
 11942 0d67 D90D0000 		.4byte	0xdd9
 11943 0d6b 1B       		.uleb128 0x1b
 11944 0d6c 0D070000 		.4byte	.LASF195
 11945 0d70 01       		.byte	0x1
 11946 0d71 0E01     		.2byte	0x10e
 11947 0d73 8D000000 		.4byte	0x8d
 11948 0d77 05       		.uleb128 0x5
 11949 0d78 03       		.byte	0x3
 11950 0d79 00000000 		.4byte	counter_calibration.10245
 11951 0d7d 1B       		.uleb128 0x1b
 11952 0d7e 360D0000 		.4byte	.LASF196
 11953 0d82 01       		.byte	0x1
 11954 0d83 0F01     		.2byte	0x10f
 11955 0d85 8D000000 		.4byte	0x8d
 11956 0d89 05       		.uleb128 0x5
 11957 0d8a 03       		.byte	0x3
 11958 0d8b 02000000 		.4byte	counter_tension_func.10246
 11959 0d8f 1B       		.uleb128 0x1b
 11960 0d90 A8010000 		.4byte	.LASF197
 11961 0d94 01       		.byte	0x1
 11962 0d95 1001     		.2byte	0x110
 11963 0d97 D90D0000 		.4byte	0xdd9
 11964 0d9b 03       		.uleb128 0x3
 11965 0d9c 91       		.byte	0x91
 11966 0d9d A86C     		.sleb128 -2520
 11967 0d9f 1B       		.uleb128 0x1b
 11968 0da0 190D0000 		.4byte	.LASF198
 11969 0da4 01       		.byte	0x1
 11970 0da5 1201     		.2byte	0x112
 11971 0da7 81000000 		.4byte	0x81
 11972 0dab 02       		.uleb128 0x2
 11973 0dac 91       		.byte	0x91
 11974 0dad 6F       		.sleb128 -17
 11975 0dae 1B       		.uleb128 0x1b
 11976 0daf 7E0A0000 		.4byte	.LASF199
 11977 0db3 01       		.byte	0x1
 11978 0db4 1301     		.2byte	0x113
 11979 0db6 81000000 		.4byte	0x81
 11980 0dba 02       		.uleb128 0x2
 11981 0dbb 91       		.byte	0x91
 11982 0dbc 6E       		.sleb128 -18
 11983 0dbd 1C       		.uleb128 0x1c
 11984 0dbe 9A020000 		.4byte	.LBB2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 265


 11985 0dc2 50000000 		.4byte	.LBE2-.LBB2
 11986 0dc6 1B       		.uleb128 0x1b
 11987 0dc7 ED020000 		.4byte	.LASF200
 11988 0dcb 01       		.byte	0x1
 11989 0dcc CB01     		.2byte	0x1cb
 11990 0dce EA0D0000 		.4byte	0xdea
 11991 0dd2 04       		.uleb128 0x4
 11992 0dd3 91       		.byte	0x91
 11993 0dd4 90F77E   		.sleb128 -17520
 11994 0dd7 00       		.byte	0
 11995 0dd8 00       		.byte	0
 11996 0dd9 07       		.uleb128 0x7
 11997 0dda E3000000 		.4byte	0xe3
 11998 0dde EA0D0000 		.4byte	0xdea
 11999 0de2 1D       		.uleb128 0x1d
 12000 0de3 0E010000 		.4byte	0x10e
 12001 0de7 C309     		.2byte	0x9c3
 12002 0de9 00       		.byte	0
 12003 0dea 07       		.uleb128 0x7
 12004 0deb E3000000 		.4byte	0xe3
 12005 0def FB0D0000 		.4byte	0xdfb
 12006 0df3 1D       		.uleb128 0x1d
 12007 0df4 0E010000 		.4byte	0x10e
 12008 0df8 973A     		.2byte	0x3a97
 12009 0dfa 00       		.byte	0
 12010 0dfb 1A       		.uleb128 0x1a
 12011 0dfc 48100000 		.4byte	.LASF202
 12012 0e00 01       		.byte	0x1
 12013 0e01 1F02     		.2byte	0x21f
 12014 0e03 00000000 		.4byte	.LFB68
 12015 0e07 CC050000 		.4byte	.LFE68-.LFB68
 12016 0e0b 01       		.uleb128 0x1
 12017 0e0c 9C       		.byte	0x9c
 12018 0e0d B10E0000 		.4byte	0xeb1
 12019 0e11 1E       		.uleb128 0x1e
 12020 0e12 06090000 		.4byte	.LASF203
 12021 0e16 01       		.byte	0x1
 12022 0e17 1F02     		.2byte	0x21f
 12023 0e19 81000000 		.4byte	0x81
 12024 0e1d 02       		.uleb128 0x2
 12025 0e1e 91       		.byte	0x91
 12026 0e1f 5F       		.sleb128 -33
 12027 0e20 1E       		.uleb128 0x1e
 12028 0e21 F6060000 		.4byte	.LASF204
 12029 0e25 01       		.byte	0x1
 12030 0e26 1F02     		.2byte	0x21f
 12031 0e28 B10E0000 		.4byte	0xeb1
 12032 0e2c 02       		.uleb128 0x2
 12033 0e2d 91       		.byte	0x91
 12034 0e2e 58       		.sleb128 -40
 12035 0e2f 1E       		.uleb128 0x1e
 12036 0e30 33120000 		.4byte	.LASF205
 12037 0e34 01       		.byte	0x1
 12038 0e35 1F02     		.2byte	0x21f
 12039 0e37 B10E0000 		.4byte	0xeb1
 12040 0e3b 02       		.uleb128 0x2
 12041 0e3c 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 266


 12042 0e3d 54       		.sleb128 -44
 12043 0e3e 1B       		.uleb128 0x1b
 12044 0e3f 0E050000 		.4byte	.LASF206
 12045 0e43 01       		.byte	0x1
 12046 0e44 2102     		.2byte	0x221
 12047 0e46 BD000000 		.4byte	0xbd
 12048 0e4a 02       		.uleb128 0x2
 12049 0e4b 91       		.byte	0x91
 12050 0e4c 74       		.sleb128 -12
 12051 0e4d 1B       		.uleb128 0x1b
 12052 0e4e 32040000 		.4byte	.LASF207
 12053 0e52 01       		.byte	0x1
 12054 0e53 2202     		.2byte	0x222
 12055 0e55 BD000000 		.4byte	0xbd
 12056 0e59 02       		.uleb128 0x2
 12057 0e5a 91       		.byte	0x91
 12058 0e5b 68       		.sleb128 -24
 12059 0e5c 1B       		.uleb128 0x1b
 12060 0e5d 3C040000 		.4byte	.LASF208
 12061 0e61 01       		.byte	0x1
 12062 0e62 2202     		.2byte	0x222
 12063 0e64 BD000000 		.4byte	0xbd
 12064 0e68 02       		.uleb128 0x2
 12065 0e69 91       		.byte	0x91
 12066 0e6a 64       		.sleb128 -28
 12067 0e6b 1F       		.uleb128 0x1f
 12068 0e6c 4D4F5400 		.ascii	"MOT\000"
 12069 0e70 01       		.byte	0x1
 12070 0e71 2302     		.2byte	0x223
 12071 0e73 B70E0000 		.4byte	0xeb7
 12072 0e77 02       		.uleb128 0x2
 12073 0e78 91       		.byte	0x91
 12074 0e79 70       		.sleb128 -16
 12075 0e7a 1B       		.uleb128 0x1b
 12076 0e7b FE110000 		.4byte	.LASF209
 12077 0e7f 01       		.byte	0x1
 12078 0e80 2402     		.2byte	0x224
 12079 0e82 81000000 		.4byte	0x81
 12080 0e86 02       		.uleb128 0x2
 12081 0e87 91       		.byte	0x91
 12082 0e88 6F       		.sleb128 -17
 12083 0e89 1B       		.uleb128 0x1b
 12084 0e8a E50B0000 		.4byte	.LASF210
 12085 0e8e 01       		.byte	0x1
 12086 0e8f 2602     		.2byte	0x226
 12087 0e91 55070000 		.4byte	0x755
 12088 0e95 05       		.uleb128 0x5
 12089 0e96 03       		.byte	0x3
 12090 0e97 8C000000 		.4byte	current_emg.10261
 12091 0e9b 20       		.uleb128 0x20
 12092 0e9c 00000000 		.4byte	.Ldebug_ranges0+0
 12093 0ea0 1B       		.uleb128 0x1b
 12094 0ea1 F0000000 		.4byte	.LASF211
 12095 0ea5 01       		.byte	0x1
 12096 0ea6 4B02     		.2byte	0x24b
 12097 0ea8 BD000000 		.4byte	0xbd
 12098 0eac 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 267


 12099 0ead 91       		.byte	0x91
 12100 0eae 60       		.sleb128 -32
 12101 0eaf 00       		.byte	0
 12102 0eb0 00       		.byte	0
 12103 0eb1 0C       		.uleb128 0xc
 12104 0eb2 04       		.byte	0x4
 12105 0eb3 A5010000 		.4byte	0x1a5
 12106 0eb7 0C       		.uleb128 0xc
 12107 0eb8 04       		.byte	0x4
 12108 0eb9 A9040000 		.4byte	0x4a9
 12109 0ebd 21       		.uleb128 0x21
 12110 0ebe 42110000 		.4byte	.LASF212
 12111 0ec2 01       		.byte	0x1
 12112 0ec3 FE02     		.2byte	0x2fe
 12113 0ec5 00000000 		.4byte	.LFB69
 12114 0ec9 34030000 		.4byte	.LFE69-.LFB69
 12115 0ecd 01       		.uleb128 0x1
 12116 0ece 9C       		.byte	0x9c
 12117 0ecf 4D0F0000 		.4byte	0xf4d
 12118 0ed3 1E       		.uleb128 0x1e
 12119 0ed4 06090000 		.4byte	.LASF203
 12120 0ed8 01       		.byte	0x1
 12121 0ed9 FE02     		.2byte	0x2fe
 12122 0edb 81000000 		.4byte	0x81
 12123 0edf 02       		.uleb128 0x2
 12124 0ee0 91       		.byte	0x91
 12125 0ee1 67       		.sleb128 -25
 12126 0ee2 1E       		.uleb128 0x1e
 12127 0ee3 F6060000 		.4byte	.LASF204
 12128 0ee7 01       		.byte	0x1
 12129 0ee8 FE02     		.2byte	0x2fe
 12130 0eea B10E0000 		.4byte	0xeb1
 12131 0eee 02       		.uleb128 0x2
 12132 0eef 91       		.byte	0x91
 12133 0ef0 60       		.sleb128 -32
 12134 0ef1 1E       		.uleb128 0x1e
 12135 0ef2 33120000 		.4byte	.LASF205
 12136 0ef6 01       		.byte	0x1
 12137 0ef7 FE02     		.2byte	0x2fe
 12138 0ef9 B10E0000 		.4byte	0xeb1
 12139 0efd 02       		.uleb128 0x2
 12140 0efe 91       		.byte	0x91
 12141 0eff 5C       		.sleb128 -36
 12142 0f00 22       		.uleb128 0x22
 12143 0f01 18000000 		.4byte	.Ldebug_ranges0+0x18
 12144 0f05 280F0000 		.4byte	0xf28
 12145 0f09 1B       		.uleb128 0x1b
 12146 0f0a F0000000 		.4byte	.LASF211
 12147 0f0e 01       		.byte	0x1
 12148 0f0f 0503     		.2byte	0x305
 12149 0f11 BD000000 		.4byte	0xbd
 12150 0f15 02       		.uleb128 0x2
 12151 0f16 91       		.byte	0x91
 12152 0f17 74       		.sleb128 -12
 12153 0f18 1B       		.uleb128 0x1b
 12154 0f19 F7010000 		.4byte	.LASF213
 12155 0f1d 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 268


 12156 0f1e 0603     		.2byte	0x306
 12157 0f20 BD000000 		.4byte	0xbd
 12158 0f24 02       		.uleb128 0x2
 12159 0f25 91       		.byte	0x91
 12160 0f26 70       		.sleb128 -16
 12161 0f27 00       		.byte	0
 12162 0f28 20       		.uleb128 0x20
 12163 0f29 30000000 		.4byte	.Ldebug_ranges0+0x30
 12164 0f2d 1B       		.uleb128 0x1b
 12165 0f2e 540E0000 		.4byte	.LASF214
 12166 0f32 01       		.byte	0x1
 12167 0f33 2B03     		.2byte	0x32b
 12168 0f35 BD000000 		.4byte	0xbd
 12169 0f39 02       		.uleb128 0x2
 12170 0f3a 91       		.byte	0x91
 12171 0f3b 6C       		.sleb128 -20
 12172 0f3c 1B       		.uleb128 0x1b
 12173 0f3d B90A0000 		.4byte	.LASF215
 12174 0f41 01       		.byte	0x1
 12175 0f42 2C03     		.2byte	0x32c
 12176 0f44 BD000000 		.4byte	0xbd
 12177 0f48 02       		.uleb128 0x2
 12178 0f49 91       		.byte	0x91
 12179 0f4a 68       		.sleb128 -24
 12180 0f4b 00       		.byte	0
 12181 0f4c 00       		.byte	0
 12182 0f4d 1A       		.uleb128 0x1a
 12183 0f4e E50A0000 		.4byte	.LASF216
 12184 0f52 01       		.byte	0x1
 12185 0f53 5703     		.2byte	0x357
 12186 0f55 00000000 		.4byte	.LFB70
 12187 0f59 B0010000 		.4byte	.LFE70-.LFB70
 12188 0f5d 01       		.uleb128 0x1
 12189 0f5e 9C       		.byte	0x9c
 12190 0f5f C10F0000 		.4byte	0xfc1
 12191 0f63 1E       		.uleb128 0x1e
 12192 0f64 06090000 		.4byte	.LASF203
 12193 0f68 01       		.byte	0x1
 12194 0f69 5703     		.2byte	0x357
 12195 0f6b 81000000 		.4byte	0x81
 12196 0f6f 02       		.uleb128 0x2
 12197 0f70 91       		.byte	0x91
 12198 0f71 77       		.sleb128 -9
 12199 0f72 1E       		.uleb128 0x1e
 12200 0f73 F6060000 		.4byte	.LASF204
 12201 0f77 01       		.byte	0x1
 12202 0f78 5703     		.2byte	0x357
 12203 0f7a B10E0000 		.4byte	0xeb1
 12204 0f7e 02       		.uleb128 0x2
 12205 0f7f 91       		.byte	0x91
 12206 0f80 70       		.sleb128 -16
 12207 0f81 1E       		.uleb128 0x1e
 12208 0f82 33120000 		.4byte	.LASF205
 12209 0f86 01       		.byte	0x1
 12210 0f87 5703     		.2byte	0x357
 12211 0f89 B10E0000 		.4byte	0xeb1
 12212 0f8d 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 269


 12213 0f8e 91       		.byte	0x91
 12214 0f8f 6C       		.sleb128 -20
 12215 0f90 1E       		.uleb128 0x1e
 12216 0f91 32040000 		.4byte	.LASF207
 12217 0f95 01       		.byte	0x1
 12218 0f96 5803     		.2byte	0x358
 12219 0f98 BD000000 		.4byte	0xbd
 12220 0f9c 02       		.uleb128 0x2
 12221 0f9d 91       		.byte	0x91
 12222 0f9e 68       		.sleb128 -24
 12223 0f9f 1E       		.uleb128 0x1e
 12224 0fa0 3C040000 		.4byte	.LASF208
 12225 0fa4 01       		.byte	0x1
 12226 0fa5 5803     		.2byte	0x358
 12227 0fa7 BD000000 		.4byte	0xbd
 12228 0fab 02       		.uleb128 0x2
 12229 0fac 91       		.byte	0x91
 12230 0fad 00       		.sleb128 0
 12231 0fae 1B       		.uleb128 0x1b
 12232 0faf 560D0000 		.4byte	.LASF217
 12233 0fb3 01       		.byte	0x1
 12234 0fb4 5B03     		.2byte	0x35b
 12235 0fb6 81000000 		.4byte	0x81
 12236 0fba 05       		.uleb128 0x5
 12237 0fbb 03       		.byte	0x3
 12238 0fbc 8E000000 		.4byte	fsm_state.10298
 12239 0fc0 00       		.byte	0
 12240 0fc1 23       		.uleb128 0x23
 12241 0fc2 2F060000 		.4byte	.LASF219
 12242 0fc6 01       		.byte	0x1
 12243 0fc7 8D03     		.2byte	0x38d
 12244 0fc9 00000000 		.4byte	.LFB71
 12245 0fcd 0C070000 		.4byte	.LFE71-.LFB71
 12246 0fd1 01       		.uleb128 0x1
 12247 0fd2 9C       		.byte	0x9c
 12248 0fd3 78110000 		.4byte	0x1178
 12249 0fd7 1B       		.uleb128 0x1b
 12250 0fd8 4B010000 		.4byte	.LASF220
 12251 0fdc 01       		.byte	0x1
 12252 0fdd 8F03     		.2byte	0x38f
 12253 0fdf BD000000 		.4byte	0xbd
 12254 0fe3 02       		.uleb128 0x2
 12255 0fe4 91       		.byte	0x91
 12256 0fe5 74       		.sleb128 -12
 12257 0fe6 1B       		.uleb128 0x1b
 12258 0fe7 D80C0000 		.4byte	.LASF221
 12259 0feb 01       		.byte	0x1
 12260 0fec 9003     		.2byte	0x390
 12261 0fee BD000000 		.4byte	0xbd
 12262 0ff2 03       		.uleb128 0x3
 12263 0ff3 91       		.byte	0x91
 12264 0ff4 B07F     		.sleb128 -80
 12265 0ff6 1B       		.uleb128 0x1b
 12266 0ff7 0F110000 		.4byte	.LASF222
 12267 0ffb 01       		.byte	0x1
 12268 0ffc 9103     		.2byte	0x391
 12269 0ffe BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 270


 12270 1002 03       		.uleb128 0x3
 12271 1003 91       		.byte	0x91
 12272 1004 AC7F     		.sleb128 -84
 12273 1006 1B       		.uleb128 0x1b
 12274 1007 1C0C0000 		.4byte	.LASF223
 12275 100b 01       		.byte	0x1
 12276 100c 9203     		.2byte	0x392
 12277 100e BD000000 		.4byte	0xbd
 12278 1012 02       		.uleb128 0x2
 12279 1013 91       		.byte	0x91
 12280 1014 70       		.sleb128 -16
 12281 1015 1B       		.uleb128 0x1b
 12282 1016 190D0000 		.4byte	.LASF198
 12283 101a 01       		.byte	0x1
 12284 101b 9403     		.2byte	0x394
 12285 101d 81000000 		.4byte	0x81
 12286 1021 02       		.uleb128 0x2
 12287 1022 91       		.byte	0x91
 12288 1023 6F       		.sleb128 -17
 12289 1024 1B       		.uleb128 0x1b
 12290 1025 8B030000 		.4byte	.LASF224
 12291 1029 01       		.byte	0x1
 12292 102a 9603     		.2byte	0x396
 12293 102c B70E0000 		.4byte	0xeb7
 12294 1030 02       		.uleb128 0x2
 12295 1031 91       		.byte	0x91
 12296 1032 68       		.sleb128 -24
 12297 1033 1B       		.uleb128 0x1b
 12298 1034 FF020000 		.4byte	.LASF225
 12299 1038 01       		.byte	0x1
 12300 1039 9703     		.2byte	0x397
 12301 103b 81000000 		.4byte	0x81
 12302 103f 02       		.uleb128 0x2
 12303 1040 91       		.byte	0x91
 12304 1041 67       		.sleb128 -25
 12305 1042 1F       		.uleb128 0x1f
 12306 1043 6B5F7000 		.ascii	"k_p\000"
 12307 1047 01       		.byte	0x1
 12308 1048 9903     		.2byte	0x399
 12309 104a BD000000 		.4byte	0xbd
 12310 104e 02       		.uleb128 0x2
 12311 104f 91       		.byte	0x91
 12312 1050 60       		.sleb128 -32
 12313 1051 1F       		.uleb128 0x1f
 12314 1052 6B5F6900 		.ascii	"k_i\000"
 12315 1056 01       		.byte	0x1
 12316 1057 9A03     		.2byte	0x39a
 12317 1059 BD000000 		.4byte	0xbd
 12318 105d 02       		.uleb128 0x2
 12319 105e 91       		.byte	0x91
 12320 105f 5C       		.sleb128 -36
 12321 1060 1F       		.uleb128 0x1f
 12322 1061 6B5F6400 		.ascii	"k_d\000"
 12323 1065 01       		.byte	0x1
 12324 1066 9B03     		.2byte	0x39b
 12325 1068 BD000000 		.4byte	0xbd
 12326 106c 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 271


 12327 106d 91       		.byte	0x91
 12328 106e 58       		.sleb128 -40
 12329 106f 1B       		.uleb128 0x1b
 12330 1070 FF0D0000 		.4byte	.LASF77
 12331 1074 01       		.byte	0x1
 12332 1075 9D03     		.2byte	0x39d
 12333 1077 BD000000 		.4byte	0xbd
 12334 107b 02       		.uleb128 0x2
 12335 107c 91       		.byte	0x91
 12336 107d 54       		.sleb128 -44
 12337 107e 1B       		.uleb128 0x1b
 12338 107f CF050000 		.4byte	.LASF78
 12339 1083 01       		.byte	0x1
 12340 1084 9E03     		.2byte	0x39e
 12341 1086 BD000000 		.4byte	0xbd
 12342 108a 02       		.uleb128 0x2
 12343 108b 91       		.byte	0x91
 12344 108c 50       		.sleb128 -48
 12345 108d 1B       		.uleb128 0x1b
 12346 108e A0050000 		.4byte	.LASF79
 12347 1092 01       		.byte	0x1
 12348 1093 9F03     		.2byte	0x39f
 12349 1095 BD000000 		.4byte	0xbd
 12350 1099 02       		.uleb128 0x2
 12351 109a 91       		.byte	0x91
 12352 109b 4C       		.sleb128 -52
 12353 109c 1B       		.uleb128 0x1b
 12354 109d E8100000 		.4byte	.LASF80
 12355 10a1 01       		.byte	0x1
 12356 10a2 A103     		.2byte	0x3a1
 12357 10a4 BD000000 		.4byte	0xbd
 12358 10a8 02       		.uleb128 0x2
 12359 10a9 91       		.byte	0x91
 12360 10aa 48       		.sleb128 -56
 12361 10ab 1B       		.uleb128 0x1b
 12362 10ac 7F060000 		.4byte	.LASF81
 12363 10b0 01       		.byte	0x1
 12364 10b1 A203     		.2byte	0x3a2
 12365 10b3 BD000000 		.4byte	0xbd
 12366 10b7 02       		.uleb128 0x2
 12367 10b8 91       		.byte	0x91
 12368 10b9 44       		.sleb128 -60
 12369 10ba 1B       		.uleb128 0x1b
 12370 10bb F70F0000 		.4byte	.LASF82
 12371 10bf 01       		.byte	0x1
 12372 10c0 A303     		.2byte	0x3a3
 12373 10c2 BD000000 		.4byte	0xbd
 12374 10c6 02       		.uleb128 0x2
 12375 10c7 91       		.byte	0x91
 12376 10c8 40       		.sleb128 -64
 12377 10c9 1B       		.uleb128 0x1b
 12378 10ca 8D060000 		.4byte	.LASF83
 12379 10ce 01       		.byte	0x1
 12380 10cf A503     		.2byte	0x3a5
 12381 10d1 BD000000 		.4byte	0xbd
 12382 10d5 03       		.uleb128 0x3
 12383 10d6 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 272


 12384 10d7 BC7F     		.sleb128 -68
 12385 10d9 1B       		.uleb128 0x1b
 12386 10da D5070000 		.4byte	.LASF84
 12387 10de 01       		.byte	0x1
 12388 10df A603     		.2byte	0x3a6
 12389 10e1 BD000000 		.4byte	0xbd
 12390 10e5 03       		.uleb128 0x3
 12391 10e6 91       		.byte	0x91
 12392 10e7 B87F     		.sleb128 -72
 12393 10e9 1B       		.uleb128 0x1b
 12394 10ea 34130000 		.4byte	.LASF85
 12395 10ee 01       		.byte	0x1
 12396 10ef A703     		.2byte	0x3a7
 12397 10f1 BD000000 		.4byte	0xbd
 12398 10f5 03       		.uleb128 0x3
 12399 10f6 91       		.byte	0x91
 12400 10f7 B47F     		.sleb128 -76
 12401 10f9 1B       		.uleb128 0x1b
 12402 10fa 46060000 		.4byte	.LASF226
 12403 10fe 01       		.byte	0x1
 12404 10ff AB03     		.2byte	0x3ab
 12405 1101 BD000000 		.4byte	0xbd
 12406 1105 05       		.uleb128 0x5
 12407 1106 03       		.byte	0x3
 12408 1107 90000000 		.4byte	pos_error_sum.10325
 12409 110b 1B       		.uleb128 0x1b
 12410 110c 7A040000 		.4byte	.LASF227
 12411 1110 01       		.byte	0x1
 12412 1111 AC03     		.2byte	0x3ac
 12413 1113 BD000000 		.4byte	0xbd
 12414 1117 05       		.uleb128 0x5
 12415 1118 03       		.byte	0x3
 12416 1119 9C000000 		.4byte	curr_error_sum.10326
 12417 111d 1B       		.uleb128 0x1b
 12418 111e 870C0000 		.4byte	.LASF228
 12419 1122 01       		.byte	0x1
 12420 1123 AE03     		.2byte	0x3ae
 12421 1125 BD000000 		.4byte	0xbd
 12422 1129 05       		.uleb128 0x5
 12423 112a 03       		.byte	0x3
 12424 112b 94000000 		.4byte	prev_pos_err.10327
 12425 112f 1B       		.uleb128 0x1b
 12426 1130 DE0D0000 		.4byte	.LASF229
 12427 1134 01       		.byte	0x1
 12428 1135 AF03     		.2byte	0x3af
 12429 1137 BD000000 		.4byte	0xbd
 12430 113b 05       		.uleb128 0x5
 12431 113c 03       		.byte	0x3
 12432 113d A0000000 		.4byte	prev_curr_err.10328
 12433 1141 1B       		.uleb128 0x1b
 12434 1142 5A100000 		.4byte	.LASF230
 12435 1146 01       		.byte	0x1
 12436 1147 B003     		.2byte	0x3b0
 12437 1149 BD000000 		.4byte	0xbd
 12438 114d 05       		.uleb128 0x5
 12439 114e 03       		.byte	0x3
 12440 114f A4000000 		.4byte	prev_pwm.10329
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 273


 12441 1153 1B       		.uleb128 0x1b
 12442 1154 D5050000 		.4byte	.LASF231
 12443 1158 01       		.byte	0x1
 12444 1159 B203     		.2byte	0x3b2
 12445 115b 81000000 		.4byte	0x81
 12446 115f 05       		.uleb128 0x5
 12447 1160 03       		.byte	0x3
 12448 1161 98000000 		.4byte	motor_dir.10330
 12449 1165 1B       		.uleb128 0x1b
 12450 1166 B2060000 		.4byte	.LASF232
 12451 116a 01       		.byte	0x1
 12452 116b B303     		.2byte	0x3b3
 12453 116d 99000000 		.4byte	0x99
 12454 1171 05       		.uleb128 0x5
 12455 1172 03       		.byte	0x3
 12456 1173 A8000000 		.4byte	position_counter.10331
 12457 1177 00       		.byte	0
 12458 1178 1A       		.uleb128 0x1a
 12459 1179 57050000 		.4byte	.LASF233
 12460 117d 01       		.byte	0x1
 12461 117e BD04     		.2byte	0x4bd
 12462 1180 00000000 		.4byte	.LFB72
 12463 1184 70090000 		.4byte	.LFE72-.LFB72
 12464 1188 01       		.uleb128 0x1
 12465 1189 9C       		.byte	0x9c
 12466 118a 31130000 		.4byte	0x1331
 12467 118e 24       		.uleb128 0x24
 12468 118f 69647800 		.ascii	"idx\000"
 12469 1193 01       		.byte	0x1
 12470 1194 BD04     		.2byte	0x4bd
 12471 1196 81000000 		.4byte	0x81
 12472 119a 03       		.uleb128 0x3
 12473 119b 91       		.byte	0x91
 12474 119c A77F     		.sleb128 -89
 12475 119e 1B       		.uleb128 0x1b
 12476 119f 4B010000 		.4byte	.LASF220
 12477 11a3 01       		.byte	0x1
 12478 11a4 BF04     		.2byte	0x4bf
 12479 11a6 BD000000 		.4byte	0xbd
 12480 11aa 02       		.uleb128 0x2
 12481 11ab 91       		.byte	0x91
 12482 11ac 6C       		.sleb128 -20
 12483 11ad 1B       		.uleb128 0x1b
 12484 11ae D80C0000 		.4byte	.LASF221
 12485 11b2 01       		.byte	0x1
 12486 11b3 C004     		.2byte	0x4c0
 12487 11b5 BD000000 		.4byte	0xbd
 12488 11b9 03       		.uleb128 0x3
 12489 11ba 91       		.byte	0x91
 12490 11bb AC7F     		.sleb128 -84
 12491 11bd 1B       		.uleb128 0x1b
 12492 11be 0F110000 		.4byte	.LASF222
 12493 11c2 01       		.byte	0x1
 12494 11c3 C104     		.2byte	0x4c1
 12495 11c5 BD000000 		.4byte	0xbd
 12496 11c9 03       		.uleb128 0x3
 12497 11ca 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 274


 12498 11cb A87F     		.sleb128 -88
 12499 11cd 1B       		.uleb128 0x1b
 12500 11ce 1C0C0000 		.4byte	.LASF223
 12501 11d2 01       		.byte	0x1
 12502 11d3 C204     		.2byte	0x4c2
 12503 11d5 BD000000 		.4byte	0xbd
 12504 11d9 02       		.uleb128 0x2
 12505 11da 91       		.byte	0x91
 12506 11db 68       		.sleb128 -24
 12507 11dc 1F       		.uleb128 0x1f
 12508 11dd 4D4F5400 		.ascii	"MOT\000"
 12509 11e1 01       		.byte	0x1
 12510 11e2 C404     		.2byte	0x4c4
 12511 11e4 B70E0000 		.4byte	0xeb7
 12512 11e8 02       		.uleb128 0x2
 12513 11e9 91       		.byte	0x91
 12514 11ea 64       		.sleb128 -28
 12515 11eb 1B       		.uleb128 0x1b
 12516 11ec FE110000 		.4byte	.LASF209
 12517 11f0 01       		.byte	0x1
 12518 11f1 C504     		.2byte	0x4c5
 12519 11f3 81000000 		.4byte	0x81
 12520 11f7 02       		.uleb128 0x2
 12521 11f8 91       		.byte	0x91
 12522 11f9 63       		.sleb128 -29
 12523 11fa 1F       		.uleb128 0x1f
 12524 11fb 6B5F7000 		.ascii	"k_p\000"
 12525 11ff 01       		.byte	0x1
 12526 1200 C704     		.2byte	0x4c7
 12527 1202 BD000000 		.4byte	0xbd
 12528 1206 02       		.uleb128 0x2
 12529 1207 91       		.byte	0x91
 12530 1208 5C       		.sleb128 -36
 12531 1209 1F       		.uleb128 0x1f
 12532 120a 6B5F6900 		.ascii	"k_i\000"
 12533 120e 01       		.byte	0x1
 12534 120f C804     		.2byte	0x4c8
 12535 1211 BD000000 		.4byte	0xbd
 12536 1215 02       		.uleb128 0x2
 12537 1216 91       		.byte	0x91
 12538 1217 58       		.sleb128 -40
 12539 1218 1F       		.uleb128 0x1f
 12540 1219 6B5F6400 		.ascii	"k_d\000"
 12541 121d 01       		.byte	0x1
 12542 121e C904     		.2byte	0x4c9
 12543 1220 BD000000 		.4byte	0xbd
 12544 1224 02       		.uleb128 0x2
 12545 1225 91       		.byte	0x91
 12546 1226 54       		.sleb128 -44
 12547 1227 1B       		.uleb128 0x1b
 12548 1228 FF0D0000 		.4byte	.LASF77
 12549 122c 01       		.byte	0x1
 12550 122d CB04     		.2byte	0x4cb
 12551 122f BD000000 		.4byte	0xbd
 12552 1233 02       		.uleb128 0x2
 12553 1234 91       		.byte	0x91
 12554 1235 50       		.sleb128 -48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 275


 12555 1236 1B       		.uleb128 0x1b
 12556 1237 CF050000 		.4byte	.LASF78
 12557 123b 01       		.byte	0x1
 12558 123c CC04     		.2byte	0x4cc
 12559 123e BD000000 		.4byte	0xbd
 12560 1242 02       		.uleb128 0x2
 12561 1243 91       		.byte	0x91
 12562 1244 4C       		.sleb128 -52
 12563 1245 1B       		.uleb128 0x1b
 12564 1246 A0050000 		.4byte	.LASF79
 12565 124a 01       		.byte	0x1
 12566 124b CD04     		.2byte	0x4cd
 12567 124d BD000000 		.4byte	0xbd
 12568 1251 02       		.uleb128 0x2
 12569 1252 91       		.byte	0x91
 12570 1253 48       		.sleb128 -56
 12571 1254 1B       		.uleb128 0x1b
 12572 1255 E8100000 		.4byte	.LASF80
 12573 1259 01       		.byte	0x1
 12574 125a CF04     		.2byte	0x4cf
 12575 125c BD000000 		.4byte	0xbd
 12576 1260 02       		.uleb128 0x2
 12577 1261 91       		.byte	0x91
 12578 1262 44       		.sleb128 -60
 12579 1263 1B       		.uleb128 0x1b
 12580 1264 7F060000 		.4byte	.LASF81
 12581 1268 01       		.byte	0x1
 12582 1269 D004     		.2byte	0x4d0
 12583 126b BD000000 		.4byte	0xbd
 12584 126f 02       		.uleb128 0x2
 12585 1270 91       		.byte	0x91
 12586 1271 40       		.sleb128 -64
 12587 1272 1B       		.uleb128 0x1b
 12588 1273 F70F0000 		.4byte	.LASF82
 12589 1277 01       		.byte	0x1
 12590 1278 D104     		.2byte	0x4d1
 12591 127a BD000000 		.4byte	0xbd
 12592 127e 03       		.uleb128 0x3
 12593 127f 91       		.byte	0x91
 12594 1280 BC7F     		.sleb128 -68
 12595 1282 1B       		.uleb128 0x1b
 12596 1283 8D060000 		.4byte	.LASF83
 12597 1287 01       		.byte	0x1
 12598 1288 D304     		.2byte	0x4d3
 12599 128a BD000000 		.4byte	0xbd
 12600 128e 03       		.uleb128 0x3
 12601 128f 91       		.byte	0x91
 12602 1290 B87F     		.sleb128 -72
 12603 1292 1B       		.uleb128 0x1b
 12604 1293 D5070000 		.4byte	.LASF84
 12605 1297 01       		.byte	0x1
 12606 1298 D404     		.2byte	0x4d4
 12607 129a BD000000 		.4byte	0xbd
 12608 129e 03       		.uleb128 0x3
 12609 129f 91       		.byte	0x91
 12610 12a0 B47F     		.sleb128 -76
 12611 12a2 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 276


 12612 12a3 34130000 		.4byte	.LASF85
 12613 12a7 01       		.byte	0x1
 12614 12a8 D504     		.2byte	0x4d5
 12615 12aa BD000000 		.4byte	0xbd
 12616 12ae 03       		.uleb128 0x3
 12617 12af 91       		.byte	0x91
 12618 12b0 B07F     		.sleb128 -80
 12619 12b2 1B       		.uleb128 0x1b
 12620 12b3 46060000 		.4byte	.LASF226
 12621 12b7 01       		.byte	0x1
 12622 12b8 D904     		.2byte	0x4d9
 12623 12ba A0020000 		.4byte	0x2a0
 12624 12be 05       		.uleb128 0x5
 12625 12bf 03       		.byte	0x3
 12626 12c0 AC000000 		.4byte	pos_error_sum.10358
 12627 12c4 1B       		.uleb128 0x1b
 12628 12c5 7A040000 		.4byte	.LASF227
 12629 12c9 01       		.byte	0x1
 12630 12ca DA04     		.2byte	0x4da
 12631 12cc A0020000 		.4byte	0x2a0
 12632 12d0 05       		.uleb128 0x5
 12633 12d1 03       		.byte	0x3
 12634 12d2 C0000000 		.4byte	curr_error_sum.10359
 12635 12d6 1B       		.uleb128 0x1b
 12636 12d7 870C0000 		.4byte	.LASF228
 12637 12db 01       		.byte	0x1
 12638 12dc DC04     		.2byte	0x4dc
 12639 12de A0020000 		.4byte	0x2a0
 12640 12e2 05       		.uleb128 0x5
 12641 12e3 03       		.byte	0x3
 12642 12e4 B4000000 		.4byte	prev_pos_err.10360
 12643 12e8 1B       		.uleb128 0x1b
 12644 12e9 DE0D0000 		.4byte	.LASF229
 12645 12ed 01       		.byte	0x1
 12646 12ee DD04     		.2byte	0x4dd
 12647 12f0 A0020000 		.4byte	0x2a0
 12648 12f4 05       		.uleb128 0x5
 12649 12f5 03       		.byte	0x3
 12650 12f6 C8000000 		.4byte	prev_curr_err.10361
 12651 12fa 1B       		.uleb128 0x1b
 12652 12fb 5A100000 		.4byte	.LASF230
 12653 12ff 01       		.byte	0x1
 12654 1300 DE04     		.2byte	0x4de
 12655 1302 A0020000 		.4byte	0x2a0
 12656 1306 05       		.uleb128 0x5
 12657 1307 03       		.byte	0x3
 12658 1308 D0000000 		.4byte	prev_pwm.10362
 12659 130c 1B       		.uleb128 0x1b
 12660 130d D5050000 		.4byte	.LASF231
 12661 1311 01       		.byte	0x1
 12662 1312 E004     		.2byte	0x4e0
 12663 1314 55070000 		.4byte	0x755
 12664 1318 05       		.uleb128 0x5
 12665 1319 03       		.byte	0x3
 12666 131a BC000000 		.4byte	motor_dir.10363
 12667 131e 1B       		.uleb128 0x1b
 12668 131f B2060000 		.4byte	.LASF232
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 277


 12669 1323 01       		.byte	0x1
 12670 1324 E104     		.2byte	0x4e1
 12671 1326 CA030000 		.4byte	0x3ca
 12672 132a 05       		.uleb128 0x5
 12673 132b 03       		.byte	0x3
 12674 132c D8000000 		.4byte	position_counter.10364
 12675 1330 00       		.byte	0
 12676 1331 1A       		.uleb128 0x1a
 12677 1332 A40E0000 		.4byte	.LASF234
 12678 1336 01       		.byte	0x1
 12679 1337 3906     		.2byte	0x639
 12680 1339 00000000 		.4byte	.LFB73
 12681 133d DC000000 		.4byte	.LFE73-.LFB73
 12682 1341 01       		.uleb128 0x1
 12683 1342 9C       		.byte	0x9c
 12684 1343 82130000 		.4byte	0x1382
 12685 1347 24       		.uleb128 0x24
 12686 1348 69647800 		.ascii	"idx\000"
 12687 134c 01       		.byte	0x1
 12688 134d 3906     		.2byte	0x639
 12689 134f 81000000 		.4byte	0x81
 12690 1353 02       		.uleb128 0x2
 12691 1354 91       		.byte	0x91
 12692 1355 6F       		.sleb128 -17
 12693 1356 25       		.uleb128 0x25
 12694 1357 6900     		.ascii	"i\000"
 12695 1359 01       		.byte	0x1
 12696 135a 3A06     		.2byte	0x63a
 12697 135c 81000000 		.4byte	0x81
 12698 1360 1B       		.uleb128 0x1b
 12699 1361 4B010000 		.4byte	.LASF220
 12700 1365 01       		.byte	0x1
 12701 1366 3B06     		.2byte	0x63b
 12702 1368 B1000000 		.4byte	0xb1
 12703 136c 02       		.uleb128 0x2
 12704 136d 91       		.byte	0x91
 12705 136e 76       		.sleb128 -10
 12706 136f 1B       		.uleb128 0x1b
 12707 1370 D5050000 		.4byte	.LASF231
 12708 1374 01       		.byte	0x1
 12709 1375 3F06     		.2byte	0x63f
 12710 1377 55070000 		.4byte	0x755
 12711 137b 05       		.uleb128 0x5
 12712 137c 03       		.byte	0x3
 12713 137d E0000000 		.4byte	motor_dir.10379
 12714 1381 00       		.byte	0
 12715 1382 1A       		.uleb128 0x1a
 12716 1383 A9030000 		.4byte	.LASF235
 12717 1387 01       		.byte	0x1
 12718 1388 6E06     		.2byte	0x66e
 12719 138a 00000000 		.4byte	.LFB74
 12720 138e 00080000 		.4byte	.LFE74-.LFB74
 12721 1392 01       		.uleb128 0x1
 12722 1393 9C       		.byte	0x9c
 12723 1394 0A150000 		.4byte	0x150a
 12724 1398 1E       		.uleb128 0x1e
 12725 1399 C6000000 		.4byte	.LASF236
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 278


 12726 139d 01       		.byte	0x1
 12727 139e 6E06     		.2byte	0x66e
 12728 13a0 81000000 		.4byte	0x81
 12729 13a4 03       		.uleb128 0x3
 12730 13a5 91       		.byte	0x91
 12731 13a6 BF7F     		.sleb128 -65
 12732 13a8 1E       		.uleb128 0x1e
 12733 13a9 080C0000 		.4byte	.LASF237
 12734 13ad 01       		.byte	0x1
 12735 13ae 6E06     		.2byte	0x66e
 12736 13b0 81000000 		.4byte	0x81
 12737 13b4 03       		.uleb128 0x3
 12738 13b5 91       		.byte	0x91
 12739 13b6 BE7F     		.sleb128 -66
 12740 13b8 1B       		.uleb128 0x1b
 12741 13b9 90070000 		.4byte	.LASF238
 12742 13bd 01       		.byte	0x1
 12743 13be 7006     		.2byte	0x670
 12744 13c0 81000000 		.4byte	0x81
 12745 13c4 02       		.uleb128 0x2
 12746 13c5 91       		.byte	0x91
 12747 13c6 67       		.sleb128 -25
 12748 13c7 1F       		.uleb128 0x1f
 12749 13c8 6A6A00   		.ascii	"jj\000"
 12750 13cb 01       		.byte	0x1
 12751 13cc 7306     		.2byte	0x673
 12752 13ce 81000000 		.4byte	0x81
 12753 13d2 02       		.uleb128 0x2
 12754 13d3 91       		.byte	0x91
 12755 13d4 66       		.sleb128 -26
 12756 13d5 1B       		.uleb128 0x1b
 12757 13d6 73030000 		.4byte	.LASF239
 12758 13da 01       		.byte	0x1
 12759 13db 7506     		.2byte	0x675
 12760 13dd 0A150000 		.4byte	0x150a
 12761 13e1 02       		.uleb128 0x2
 12762 13e2 91       		.byte	0x91
 12763 13e3 40       		.sleb128 -64
 12764 13e4 1B       		.uleb128 0x1b
 12765 13e5 6F110000 		.4byte	.LASF240
 12766 13e9 01       		.byte	0x1
 12767 13ea 7606     		.2byte	0x676
 12768 13ec B1000000 		.4byte	0xb1
 12769 13f0 02       		.uleb128 0x2
 12770 13f1 91       		.byte	0x91
 12771 13f2 64       		.sleb128 -28
 12772 13f3 1B       		.uleb128 0x1b
 12773 13f4 C90D0000 		.4byte	.LASF241
 12774 13f8 01       		.byte	0x1
 12775 13f9 7706     		.2byte	0x677
 12776 13fb BD000000 		.4byte	0xbd
 12777 13ff 02       		.uleb128 0x2
 12778 1400 91       		.byte	0x91
 12779 1401 54       		.sleb128 -44
 12780 1402 1B       		.uleb128 0x1b
 12781 1403 FE0F0000 		.4byte	.LASF242
 12782 1407 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 279


 12783 1408 7806     		.2byte	0x678
 12784 140a BD000000 		.4byte	0xbd
 12785 140e 02       		.uleb128 0x2
 12786 140f 91       		.byte	0x91
 12787 1410 60       		.sleb128 -32
 12788 1411 1B       		.uleb128 0x1b
 12789 1412 C3040000 		.4byte	.LASF243
 12790 1416 01       		.byte	0x1
 12791 1417 7906     		.2byte	0x679
 12792 1419 BD000000 		.4byte	0xbd
 12793 141d 02       		.uleb128 0x2
 12794 141e 91       		.byte	0x91
 12795 141f 4C       		.sleb128 -52
 12796 1420 1B       		.uleb128 0x1b
 12797 1421 D90F0000 		.4byte	.LASF244
 12798 1425 01       		.byte	0x1
 12799 1426 7A06     		.2byte	0x67a
 12800 1428 BD000000 		.4byte	0xbd
 12801 142c 02       		.uleb128 0x2
 12802 142d 91       		.byte	0x91
 12803 142e 50       		.sleb128 -48
 12804 142f 1B       		.uleb128 0x1b
 12805 1430 940C0000 		.4byte	.LASF245
 12806 1434 01       		.byte	0x1
 12807 1435 7B06     		.2byte	0x67b
 12808 1437 A5000000 		.4byte	0xa5
 12809 143b 02       		.uleb128 0x2
 12810 143c 91       		.byte	0x91
 12811 143d 5F       		.sleb128 -33
 12812 143e 1B       		.uleb128 0x1b
 12813 143f 230D0000 		.4byte	.LASF246
 12814 1443 01       		.byte	0x1
 12815 1444 7D06     		.2byte	0x67d
 12816 1446 1A150000 		.4byte	0x151a
 12817 144a 05       		.uleb128 0x5
 12818 144b 03       		.byte	0x3
 12819 144c E4000000 		.4byte	last_value_encoder.10396
 12820 1450 1B       		.uleb128 0x1b
 12821 1451 44070000 		.4byte	.LASF247
 12822 1455 01       		.byte	0x1
 12823 1456 7E06     		.2byte	0x67e
 12824 1458 1A150000 		.4byte	0x151a
 12825 145c 05       		.uleb128 0x5
 12826 145d 03       		.byte	0x3
 12827 145e FC000000 		.4byte	comp_value_encoder.10397
 12828 1462 1B       		.uleb128 0x1b
 12829 1463 BD030000 		.4byte	.LASF248
 12830 1467 01       		.byte	0x1
 12831 1468 7F06     		.2byte	0x67f
 12832 146a 30150000 		.4byte	0x1530
 12833 146e 05       		.uleb128 0x5
 12834 146f 03       		.byte	0x3
 12835 1470 14010000 		.4byte	error.10398
 12836 1474 1B       		.uleb128 0x1b
 12837 1475 B70F0000 		.4byte	.LASF249
 12838 1479 01       		.byte	0x1
 12839 147a 8106     		.2byte	0x681
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 280


 12840 147c 55070000 		.4byte	0x755
 12841 1480 05       		.uleb128 0x5
 12842 1481 03       		.byte	0x3
 12843 1482 04000000 		.4byte	only_first_time.10399
 12844 1486 1B       		.uleb128 0x1b
 12845 1487 2E030000 		.4byte	.LASF250
 12846 148b 01       		.byte	0x1
 12847 148c 8206     		.2byte	0x682
 12848 148e 55070000 		.4byte	0x755
 12849 1492 05       		.uleb128 0x5
 12850 1493 03       		.byte	0x3
 12851 1494 68010000 		.4byte	safe_startup_motor_activation.10400
 12852 1498 1B       		.uleb128 0x1b
 12853 1499 98000000 		.4byte	.LASF251
 12854 149d 01       		.byte	0x1
 12855 149e 8306     		.2byte	0x683
 12856 14a0 55070000 		.4byte	0x755
 12857 14a4 05       		.uleb128 0x5
 12858 14a5 03       		.byte	0x3
 12859 14a6 64010000 		.4byte	one_time_execute.10401
 12860 14aa 1B       		.uleb128 0x1b
 12861 14ab 260B0000 		.4byte	.LASF252
 12862 14af 01       		.byte	0x1
 12863 14b0 8406     		.2byte	0x684
 12864 14b2 CA030000 		.4byte	0x3ca
 12865 14b6 05       		.uleb128 0x5
 12866 14b7 03       		.byte	0x3
 12867 14b8 6C010000 		.4byte	count_startup_motor.10402
 12868 14bc 1B       		.uleb128 0x1b
 12869 14bd 470A0000 		.4byte	.LASF253
 12870 14c1 01       		.byte	0x1
 12871 14c2 8606     		.2byte	0x686
 12872 14c4 1A150000 		.4byte	0x151a
 12873 14c8 05       		.uleb128 0x5
 12874 14c9 03       		.byte	0x3
 12875 14ca 1C010000 		.4byte	v_value.10403
 12876 14ce 1B       		.uleb128 0x1b
 12877 14cf 2B130000 		.4byte	.LASF254
 12878 14d3 01       		.byte	0x1
 12879 14d4 8706     		.2byte	0x687
 12880 14d6 1A150000 		.4byte	0x151a
 12881 14da 05       		.uleb128 0x5
 12882 14db 03       		.byte	0x3
 12883 14dc 34010000 		.4byte	vv_value.10404
 12884 14e0 1B       		.uleb128 0x1b
 12885 14e1 99010000 		.4byte	.LASF255
 12886 14e5 01       		.byte	0x1
 12887 14e6 8806     		.2byte	0x688
 12888 14e8 1A150000 		.4byte	0x151a
 12889 14ec 05       		.uleb128 0x5
 12890 14ed 03       		.byte	0x3
 12891 14ee 4C010000 		.4byte	vvv_value.10405
 12892 14f2 1C       		.uleb128 0x1c
 12893 14f3 86000000 		.4byte	.LBB9
 12894 14f7 6A000000 		.4byte	.LBE9-.LBB9
 12895 14fb 1F       		.uleb128 0x1f
 12896 14fc 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 281


 12897 14fe 01       		.byte	0x1
 12898 14ff 9806     		.2byte	0x698
 12899 1501 68000000 		.4byte	0x68
 12900 1505 02       		.uleb128 0x2
 12901 1506 91       		.byte	0x91
 12902 1507 58       		.sleb128 -40
 12903 1508 00       		.byte	0
 12904 1509 00       		.byte	0
 12905 150a 07       		.uleb128 0x7
 12906 150b 99000000 		.4byte	0x99
 12907 150f 1A150000 		.4byte	0x151a
 12908 1513 08       		.uleb128 0x8
 12909 1514 0E010000 		.4byte	0x10e
 12910 1518 02       		.byte	0x2
 12911 1519 00       		.byte	0
 12912 151a 07       		.uleb128 0x7
 12913 151b BD000000 		.4byte	0xbd
 12914 151f 30150000 		.4byte	0x1530
 12915 1523 08       		.uleb128 0x8
 12916 1524 0E010000 		.4byte	0x10e
 12917 1528 01       		.byte	0x1
 12918 1529 08       		.uleb128 0x8
 12919 152a 0E010000 		.4byte	0x10e
 12920 152e 02       		.byte	0x2
 12921 152f 00       		.byte	0
 12922 1530 07       		.uleb128 0x7
 12923 1531 81000000 		.4byte	0x81
 12924 1535 46150000 		.4byte	0x1546
 12925 1539 08       		.uleb128 0x8
 12926 153a 0E010000 		.4byte	0x10e
 12927 153e 01       		.byte	0x1
 12928 153f 08       		.uleb128 0x8
 12929 1540 0E010000 		.4byte	0x10e
 12930 1544 02       		.byte	0x2
 12931 1545 00       		.byte	0
 12932 1546 23       		.uleb128 0x23
 12933 1547 8B0E0000 		.4byte	.LASF256
 12934 154b 01       		.byte	0x1
 12935 154c 4B07     		.2byte	0x74b
 12936 154e 00000000 		.4byte	.LFB75
 12937 1552 18130000 		.4byte	.LFE75-.LFB75
 12938 1556 01       		.uleb128 0x1
 12939 1557 9C       		.byte	0x9c
 12940 1558 32160000 		.4byte	0x1632
 12941 155c 1B       		.uleb128 0x1b
 12942 155d 3D0E0000 		.4byte	.LASF257
 12943 1561 01       		.byte	0x1
 12944 1562 5F07     		.2byte	0x75f
 12945 1564 BD000000 		.4byte	0xbd
 12946 1568 02       		.uleb128 0x2
 12947 1569 91       		.byte	0x91
 12948 156a 64       		.sleb128 -28
 12949 156b 1B       		.uleb128 0x1b
 12950 156c 800F0000 		.4byte	.LASF258
 12951 1570 01       		.byte	0x1
 12952 1571 6107     		.2byte	0x761
 12953 1573 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 282


 12954 1577 05       		.uleb128 0x5
 12955 1578 03       		.byte	0x3
 12956 1579 7C010000 		.4byte	emg_counter_1.10422
 12957 157d 1B       		.uleb128 0x1b
 12958 157e 8E0F0000 		.4byte	.LASF259
 12959 1582 01       		.byte	0x1
 12960 1583 6207     		.2byte	0x762
 12961 1585 8D000000 		.4byte	0x8d
 12962 1589 05       		.uleb128 0x5
 12963 158a 03       		.byte	0x3
 12964 158b 7E010000 		.4byte	emg_counter_2.10423
 12965 158f 1B       		.uleb128 0x1b
 12966 1590 5D020000 		.4byte	.LASF260
 12967 1594 01       		.byte	0x1
 12968 1595 6307     		.2byte	0x763
 12969 1597 8D000000 		.4byte	0x8d
 12970 159b 05       		.uleb128 0x5
 12971 159c 03       		.byte	0x3
 12972 159d 84010000 		.4byte	UD_counter.10424
 12973 15a1 1B       		.uleb128 0x1b
 12974 15a2 CD030000 		.4byte	.LASF261
 12975 15a6 01       		.byte	0x1
 12976 15a7 6407     		.2byte	0x764
 12977 15a9 8D000000 		.4byte	0x8d
 12978 15ad 05       		.uleb128 0x5
 12979 15ae 03       		.byte	0x3
 12980 15af 8C010000 		.4byte	LR_counter.10425
 12981 15b3 1B       		.uleb128 0x1b
 12982 15b4 FA0B0000 		.4byte	.LASF262
 12983 15b8 01       		.byte	0x1
 12984 15b9 6507     		.2byte	0x765
 12985 15bb BD000000 		.4byte	0xbd
 12986 15bf 05       		.uleb128 0x5
 12987 15c0 03       		.byte	0x3
 12988 15c1 80010000 		.4byte	UD_mean_value.10426
 12989 15c5 1B       		.uleb128 0x1b
 12990 15c6 84120000 		.4byte	.LASF263
 12991 15ca 01       		.byte	0x1
 12992 15cb 6607     		.2byte	0x766
 12993 15cd BD000000 		.4byte	0xbd
 12994 15d1 05       		.uleb128 0x5
 12995 15d2 03       		.byte	0x3
 12996 15d3 88010000 		.4byte	LR_mean_value.10427
 12997 15d7 1B       		.uleb128 0x1b
 12998 15d8 B6020000 		.4byte	.LASF264
 12999 15dc 01       		.byte	0x1
 13000 15dd 6707     		.2byte	0x767
 13001 15df 81000000 		.4byte	0x81
 13002 15e3 05       		.uleb128 0x5
 13003 15e4 03       		.byte	0x3
 13004 15e5 0C000000 		.4byte	first_tension_valid.10428
 13005 15e9 1B       		.uleb128 0x1b
 13006 15ea 29050000 		.4byte	.LASF265
 13007 15ee 01       		.byte	0x1
 13008 15ef 6807     		.2byte	0x768
 13009 15f1 BD000000 		.4byte	0xbd
 13010 15f5 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 283


 13011 15f6 03       		.byte	0x3
 13012 15f7 08000000 		.4byte	detect_power_cycle_prev.10429
 13013 15fb 1B       		.uleb128 0x1b
 13014 15fc 570B0000 		.4byte	.LASF266
 13015 1600 01       		.byte	0x1
 13016 1601 6907     		.2byte	0x769
 13017 1603 8D000000 		.4byte	0x8d
 13018 1607 05       		.uleb128 0x5
 13019 1608 03       		.byte	0x3
 13020 1609 74010000 		.4byte	count.10430
 13021 160d 1B       		.uleb128 0x1b
 13022 160e 89010000 		.4byte	.LASF267
 13023 1612 01       		.byte	0x1
 13024 1613 6A07     		.2byte	0x76a
 13025 1615 99000000 		.4byte	0x99
 13026 1619 05       		.uleb128 0x5
 13027 161a 03       		.byte	0x3
 13028 161b 78010000 		.4byte	v_count.10431
 13029 161f 1F       		.uleb128 0x1f
 13030 1620 69647800 		.ascii	"idx\000"
 13031 1624 01       		.byte	0x1
 13032 1625 6B07     		.2byte	0x76b
 13033 1627 81000000 		.4byte	0x81
 13034 162b 05       		.uleb128 0x5
 13035 162c 03       		.byte	0x3
 13036 162d 76010000 		.4byte	idx.10432
 13037 1631 00       		.byte	0
 13038 1632 26       		.uleb128 0x26
 13039 1633 680E0000 		.4byte	.LASF268
 13040 1637 01       		.byte	0x1
 13041 1638 C809     		.2byte	0x9c8
 13042 163a 00000000 		.4byte	.LFB76
 13043 163e 0C010000 		.4byte	.LFE76-.LFB76
 13044 1642 01       		.uleb128 0x1
 13045 1643 9C       		.byte	0x9c
 13046 1644 79160000 		.4byte	0x1679
 13047 1648 1C       		.uleb128 0x1c
 13048 1649 06000000 		.4byte	.LBB10
 13049 164d E6000000 		.4byte	.LBE10-.LBB10
 13050 1651 1F       		.uleb128 0x1f
 13051 1652 6900     		.ascii	"i\000"
 13052 1654 01       		.byte	0x1
 13053 1655 CA09     		.2byte	0x9ca
 13054 1657 81000000 		.4byte	0x81
 13055 165b 02       		.uleb128 0x2
 13056 165c 91       		.byte	0x91
 13057 165d 77       		.sleb128 -9
 13058 165e 1C       		.uleb128 0x1c
 13059 165f 26000000 		.4byte	.LBB11
 13060 1663 BA000000 		.4byte	.LBE11-.LBB11
 13061 1667 1B       		.uleb128 0x1b
 13062 1668 40090000 		.4byte	.LASF40
 13063 166c 01       		.byte	0x1
 13064 166d CC09     		.2byte	0x9cc
 13065 166f BD000000 		.4byte	0xbd
 13066 1673 02       		.uleb128 0x2
 13067 1674 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 284


 13068 1675 70       		.sleb128 -16
 13069 1676 00       		.byte	0
 13070 1677 00       		.byte	0
 13071 1678 00       		.byte	0
 13072 1679 21       		.uleb128 0x21
 13073 167a E8030000 		.4byte	.LASF269
 13074 167e 01       		.byte	0x1
 13075 167f EA09     		.2byte	0x9ea
 13076 1681 00000000 		.4byte	.LFB77
 13077 1685 A8000000 		.4byte	.LFE77-.LFB77
 13078 1689 01       		.uleb128 0x1
 13079 168a 9C       		.byte	0x9c
 13080 168b CC160000 		.4byte	0x16cc
 13081 168f 1E       		.uleb128 0x1e
 13082 1690 9D0C0000 		.4byte	.LASF270
 13083 1694 01       		.byte	0x1
 13084 1695 EA09     		.2byte	0x9ea
 13085 1697 81000000 		.4byte	0x81
 13086 169b 02       		.uleb128 0x2
 13087 169c 91       		.byte	0x91
 13088 169d 6F       		.sleb128 -17
 13089 169e 1B       		.uleb128 0x1b
 13090 169f 90070000 		.4byte	.LASF238
 13091 16a3 01       		.byte	0x1
 13092 16a4 EC09     		.2byte	0x9ec
 13093 16a6 81000000 		.4byte	0x81
 13094 16aa 02       		.uleb128 0x2
 13095 16ab 91       		.byte	0x91
 13096 16ac 73       		.sleb128 -13
 13097 16ad 1B       		.uleb128 0x1b
 13098 16ae 0D0D0000 		.4byte	.LASF271
 13099 16b2 01       		.byte	0x1
 13100 16b3 ED09     		.2byte	0x9ed
 13101 16b5 8D000000 		.4byte	0x8d
 13102 16b9 02       		.uleb128 0x2
 13103 16ba 91       		.byte	0x91
 13104 16bb 76       		.sleb128 -10
 13105 16bc 1B       		.uleb128 0x1b
 13106 16bd EA080000 		.4byte	.LASF272
 13107 16c1 01       		.byte	0x1
 13108 16c2 EE09     		.2byte	0x9ee
 13109 16c4 8D000000 		.4byte	0x8d
 13110 16c8 02       		.uleb128 0x2
 13111 16c9 91       		.byte	0x91
 13112 16ca 74       		.sleb128 -12
 13113 16cb 00       		.byte	0
 13114 16cc 23       		.uleb128 0x23
 13115 16cd 67090000 		.4byte	.LASF273
 13116 16d1 01       		.byte	0x1
 13117 16d2 020A     		.2byte	0xa02
 13118 16d4 00000000 		.4byte	.LFB78
 13119 16d8 58060000 		.4byte	.LFE78-.LFB78
 13120 16dc 01       		.uleb128 0x1
 13121 16dd 9C       		.byte	0x9c
 13122 16de 64180000 		.4byte	0x1864
 13123 16e2 1B       		.uleb128 0x1b
 13124 16e3 26000000 		.4byte	.LASF274
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 285


 13125 16e7 01       		.byte	0x1
 13126 16e8 030A     		.2byte	0xa03
 13127 16ea 81000000 		.4byte	0x81
 13128 16ee 05       		.uleb128 0x5
 13129 16ef 03       		.byte	0x3
 13130 16f0 8E010000 		.4byte	pos_cycle_status.10503
 13131 16f4 1B       		.uleb128 0x1b
 13132 16f5 C10E0000 		.4byte	.LASF275
 13133 16f9 01       		.byte	0x1
 13134 16fa 040A     		.2byte	0xa04
 13135 16fc 55070000 		.4byte	0x755
 13136 1700 05       		.uleb128 0x5
 13137 1701 03       		.byte	0x3
 13138 1702 98010000 		.4byte	emg_cycle_status.10504
 13139 1706 1B       		.uleb128 0x1b
 13140 1707 980D0000 		.4byte	.LASF276
 13141 170b 01       		.byte	0x1
 13142 170c 050A     		.2byte	0xa05
 13143 170e 55070000 		.4byte	0x755
 13144 1712 05       		.uleb128 0x5
 13145 1713 03       		.byte	0x3
 13146 1714 9C010000 		.4byte	motion_status.10505
 13147 1718 1B       		.uleb128 0x1b
 13148 1719 690B0000 		.4byte	.LASF277
 13149 171d 01       		.byte	0x1
 13150 171e 060A     		.2byte	0xa06
 13151 1720 55070000 		.4byte	0x755
 13152 1724 05       		.uleb128 0x5
 13153 1725 03       		.byte	0x3
 13154 1726 A8010000 		.4byte	emg_excess_status.10506
 13155 172a 1B       		.uleb128 0x1b
 13156 172b 30110000 		.4byte	.LASF278
 13157 172f 01       		.byte	0x1
 13158 1730 070A     		.2byte	0xa07
 13159 1732 81000000 		.4byte	0x81
 13160 1736 05       		.uleb128 0x5
 13161 1737 03       		.byte	0x3
 13162 1738 BC010000 		.4byte	rest_cycle_status.10507
 13163 173c 1B       		.uleb128 0x1b
 13164 173d 17030000 		.4byte	.LASF279
 13165 1741 01       		.byte	0x1
 13166 1742 080A     		.2byte	0xa08
 13167 1744 BD000000 		.4byte	0xbd
 13168 1748 05       		.uleb128 0x5
 13169 1749 03       		.byte	0x3
 13170 174a 10000000 		.4byte	bin_threshold.10508
 13171 174e 1B       		.uleb128 0x1b
 13172 174f C5100000 		.4byte	.LASF280
 13173 1753 01       		.byte	0x1
 13174 1754 090A     		.2byte	0xa09
 13175 1756 BD000000 		.4byte	0xbd
 13176 175a 05       		.uleb128 0x5
 13177 175b 03       		.byte	0x3
 13178 175c 14000000 		.4byte	exc_act_thr.10509
 13179 1760 1B       		.uleb128 0x1b
 13180 1761 E4010000 		.4byte	.LASF281
 13181 1765 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 286


 13182 1766 0A0A     		.2byte	0xa0a
 13183 1768 BD000000 		.4byte	0xbd
 13184 176c 05       		.uleb128 0x5
 13185 176d 03       		.byte	0x3
 13186 176e 90010000 		.4byte	thr_pos.10510
 13187 1772 1B       		.uleb128 0x1b
 13188 1773 950B0000 		.4byte	.LASF282
 13189 1777 01       		.byte	0x1
 13190 1778 0B0A     		.2byte	0xa0b
 13191 177a BD000000 		.4byte	0xbd
 13192 177e 05       		.uleb128 0x5
 13193 177f 03       		.byte	0x3
 13194 1780 94010000 		.4byte	max_pos.10511
 13195 1784 1F       		.uleb128 0x1f
 13196 1785 6900     		.ascii	"i\000"
 13197 1787 01       		.byte	0x1
 13198 1788 0C0A     		.2byte	0xa0c
 13199 178a 81000000 		.4byte	0x81
 13200 178e 02       		.uleb128 0x2
 13201 178f 91       		.byte	0x91
 13202 1790 6F       		.sleb128 -17
 13203 1791 1B       		.uleb128 0x1b
 13204 1792 DF050000 		.4byte	.LASF283
 13205 1796 01       		.byte	0x1
 13206 1797 0C0A     		.2byte	0xa0c
 13207 1799 81000000 		.4byte	0x81
 13208 179d 02       		.uleb128 0x2
 13209 179e 91       		.byte	0x91
 13210 179f 5B       		.sleb128 -37
 13211 17a0 1B       		.uleb128 0x1b
 13212 17a1 16010000 		.4byte	.LASF284
 13213 17a5 01       		.byte	0x1
 13214 17a6 0C0A     		.2byte	0xa0c
 13215 17a8 81000000 		.4byte	0x81
 13216 17ac 02       		.uleb128 0x2
 13217 17ad 91       		.byte	0x91
 13218 17ae 5A       		.sleb128 -38
 13219 17af 1B       		.uleb128 0x1b
 13220 17b0 310E0000 		.4byte	.LASF285
 13221 17b4 01       		.byte	0x1
 13222 17b5 0C0A     		.2byte	0xa0c
 13223 17b7 81000000 		.4byte	0x81
 13224 17bb 02       		.uleb128 0x2
 13225 17bc 91       		.byte	0x91
 13226 17bd 59       		.sleb128 -39
 13227 17be 1B       		.uleb128 0x1b
 13228 17bf 370E0000 		.4byte	.LASF286
 13229 17c3 01       		.byte	0x1
 13230 17c4 0C0A     		.2byte	0xa0c
 13231 17c6 81000000 		.4byte	0x81
 13232 17ca 02       		.uleb128 0x2
 13233 17cb 91       		.byte	0x91
 13234 17cc 58       		.sleb128 -40
 13235 17cd 1B       		.uleb128 0x1b
 13236 17ce 7C0E0000 		.4byte	.LASF287
 13237 17d2 01       		.byte	0x1
 13238 17d3 0D0A     		.2byte	0xa0d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 287


 13239 17d5 BD000000 		.4byte	0xbd
 13240 17d9 02       		.uleb128 0x2
 13241 17da 91       		.byte	0x91
 13242 17db 64       		.sleb128 -28
 13243 17dc 1B       		.uleb128 0x1b
 13244 17dd DA040000 		.4byte	.LASF288
 13245 17e1 01       		.byte	0x1
 13246 17e2 0D0A     		.2byte	0xa0d
 13247 17e4 BD000000 		.4byte	0xbd
 13248 17e8 02       		.uleb128 0x2
 13249 17e9 91       		.byte	0x91
 13250 17ea 60       		.sleb128 -32
 13251 17eb 1B       		.uleb128 0x1b
 13252 17ec E40F0000 		.4byte	.LASF289
 13253 17f0 01       		.byte	0x1
 13254 17f1 0D0A     		.2byte	0xa0d
 13255 17f3 BD000000 		.4byte	0xbd
 13256 17f7 02       		.uleb128 0x2
 13257 17f8 91       		.byte	0x91
 13258 17f9 68       		.sleb128 -24
 13259 17fa 1B       		.uleb128 0x1b
 13260 17fb 75040000 		.4byte	.LASF290
 13261 17ff 01       		.byte	0x1
 13262 1800 0E0A     		.2byte	0xa0e
 13263 1802 BD000000 		.4byte	0xbd
 13264 1806 02       		.uleb128 0x2
 13265 1807 91       		.byte	0x91
 13266 1808 5C       		.sleb128 -36
 13267 1809 1B       		.uleb128 0x1b
 13268 180a 28070000 		.4byte	.LASF291
 13269 180e 01       		.byte	0x1
 13270 180f 0F0A     		.2byte	0xa0f
 13271 1811 99000000 		.4byte	0x99
 13272 1815 05       		.uleb128 0x5
 13273 1816 03       		.byte	0x3
 13274 1817 C0010000 		.4byte	timer_value_s.10521
 13275 181b 1B       		.uleb128 0x1b
 13276 181c C3060000 		.4byte	.LASF292
 13277 1820 01       		.byte	0x1
 13278 1821 0F0A     		.2byte	0xa0f
 13279 1823 99000000 		.4byte	0x99
 13280 1827 05       		.uleb128 0x5
 13281 1828 03       		.byte	0x3
 13282 1829 C4010000 		.4byte	timer_value_e.10522
 13283 182d 1B       		.uleb128 0x1b
 13284 182e A0100000 		.4byte	.LASF293
 13285 1832 01       		.byte	0x1
 13286 1833 100A     		.2byte	0xa10
 13287 1835 CA030000 		.4byte	0x3ca
 13288 1839 05       		.uleb128 0x5
 13289 183a 03       		.byte	0x3
 13290 183b AC010000 		.4byte	timer_exc_s.10523
 13291 183f 1B       		.uleb128 0x1b
 13292 1840 7B100000 		.4byte	.LASF294
 13293 1844 01       		.byte	0x1
 13294 1845 100A     		.2byte	0xa10
 13295 1847 CA030000 		.4byte	0x3ca
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 288


 13296 184b 05       		.uleb128 0x5
 13297 184c 03       		.byte	0x3
 13298 184d B4010000 		.4byte	timer_exc_e.10524
 13299 1851 1B       		.uleb128 0x1b
 13300 1852 57070000 		.4byte	.LASF295
 13301 1856 01       		.byte	0x1
 13302 1857 110A     		.2byte	0xa11
 13303 1859 A0020000 		.4byte	0x2a0
 13304 185d 05       		.uleb128 0x5
 13305 185e 03       		.byte	0x3
 13306 185f A0010000 		.4byte	start_emg_pos.10525
 13307 1863 00       		.byte	0
 13308 1864 23       		.uleb128 0x23
 13309 1865 300C0000 		.4byte	.LASF296
 13310 1869 01       		.byte	0x1
 13311 186a BD0A     		.2byte	0xabd
 13312 186c 00000000 		.4byte	.LFB79
 13313 1870 08010000 		.4byte	.LFE79-.LFB79
 13314 1874 01       		.uleb128 0x1
 13315 1875 9C       		.byte	0x9c
 13316 1876 EA180000 		.4byte	0x18ea
 13317 187a 1B       		.uleb128 0x1b
 13318 187b 08110000 		.4byte	.LASF297
 13319 187f 01       		.byte	0x1
 13320 1880 BF0A     		.2byte	0xabf
 13321 1882 EA000000 		.4byte	0xea
 13322 1886 02       		.uleb128 0x2
 13323 1887 91       		.byte	0x91
 13324 1888 64       		.sleb128 -28
 13325 1889 1B       		.uleb128 0x1b
 13326 188a 5D0E0000 		.4byte	.LASF298
 13327 188e 01       		.byte	0x1
 13328 188f C00A     		.2byte	0xac0
 13329 1891 81000000 		.4byte	0x81
 13330 1895 05       		.uleb128 0x5
 13331 1896 03       		.byte	0x3
 13332 1897 CC010000 		.4byte	row_number.10561
 13333 189b 1B       		.uleb128 0x1b
 13334 189c AD040000 		.4byte	.LASF299
 13335 18a0 01       		.byte	0x1
 13336 18a1 C10A     		.2byte	0xac1
 13337 18a3 81000000 		.4byte	0x81
 13338 18a7 02       		.uleb128 0x2
 13339 18a8 91       		.byte	0x91
 13340 18a9 77       		.sleb128 -9
 13341 18aa 1B       		.uleb128 0x1b
 13342 18ab 110F0000 		.4byte	.LASF300
 13343 18af 01       		.byte	0x1
 13344 18b0 C20A     		.2byte	0xac2
 13345 18b2 EA180000 		.4byte	0x18ea
 13346 18b6 02       		.uleb128 0x2
 13347 18b7 91       		.byte	0x91
 13348 18b8 70       		.sleb128 -16
 13349 18b9 1B       		.uleb128 0x1b
 13350 18ba 1E010000 		.4byte	.LASF301
 13351 18be 01       		.byte	0x1
 13352 18bf C30A     		.2byte	0xac3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 289


 13353 18c1 EA180000 		.4byte	0x18ea
 13354 18c5 02       		.uleb128 0x2
 13355 18c6 91       		.byte	0x91
 13356 18c7 6C       		.sleb128 -20
 13357 18c8 1B       		.uleb128 0x1b
 13358 18c9 9C120000 		.4byte	.LASF302
 13359 18cd 01       		.byte	0x1
 13360 18ce C40A     		.2byte	0xac4
 13361 18d0 81000000 		.4byte	0x81
 13362 18d4 02       		.uleb128 0x2
 13363 18d5 91       		.byte	0x91
 13364 18d6 6B       		.sleb128 -21
 13365 18d7 1B       		.uleb128 0x1b
 13366 18d8 7B0B0000 		.4byte	.LASF303
 13367 18dc 01       		.byte	0x1
 13368 18dd C50A     		.2byte	0xac5
 13369 18df EA180000 		.4byte	0x18ea
 13370 18e3 05       		.uleb128 0x5
 13371 18e4 03       		.byte	0x3
 13372 18e5 C8010000 		.4byte	m_addr.10566
 13373 18e9 00       		.byte	0
 13374 18ea 0C       		.uleb128 0xc
 13375 18eb 04       		.byte	0x4
 13376 18ec 81000000 		.4byte	0x81
 13377 18f0 07       		.uleb128 0x7
 13378 18f1 00190000 		.4byte	0x1900
 13379 18f5 00190000 		.4byte	0x1900
 13380 18f9 08       		.uleb128 0x8
 13381 18fa 0E010000 		.4byte	0x10e
 13382 18fe 1C       		.byte	0x1c
 13383 18ff 00       		.byte	0
 13384 1900 27       		.uleb128 0x27
 13385 1901 81000000 		.4byte	0x81
 13386 1905 19       		.uleb128 0x19
 13387 1906 1C0F0000 		.4byte	.LASF304
 13388 190a 01       		.byte	0x1
 13389 190b 40       		.byte	0x40
 13390 190c 16190000 		.4byte	0x1916
 13391 1910 05       		.uleb128 0x5
 13392 1911 03       		.byte	0x3
 13393 1912 00000000 		.4byte	pwm_preload_values
 13394 1916 27       		.uleb128 0x27
 13395 1917 F0180000 		.4byte	0x18f0
 13396 191b 28       		.uleb128 0x28
 13397 191c 87100000 		.4byte	.LASF305
 13398 1920 08       		.byte	0x8
 13399 1921 1207     		.2byte	0x712
 13400 1923 27190000 		.4byte	0x1927
 13401 1927 06       		.uleb128 0x6
 13402 1928 76000000 		.4byte	0x76
 13403 192c 07       		.uleb128 0x7
 13404 192d A0090000 		.4byte	0x9a0
 13405 1931 3C190000 		.4byte	0x193c
 13406 1935 08       		.uleb128 0x8
 13407 1936 0E010000 		.4byte	0x10e
 13408 193a 01       		.byte	0x1
 13409 193b 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 290


 13410 193c 28       		.uleb128 0x28
 13411 193d 7C050000 		.4byte	.LASF306
 13412 1941 07       		.byte	0x7
 13413 1942 3802     		.2byte	0x238
 13414 1944 2C190000 		.4byte	0x192c
 13415 1948 07       		.uleb128 0x7
 13416 1949 A5010000 		.4byte	0x1a5
 13417 194d 58190000 		.4byte	0x1958
 13418 1951 08       		.uleb128 0x8
 13419 1952 0E010000 		.4byte	0x10e
 13420 1956 01       		.byte	0x1
 13421 1957 00       		.byte	0
 13422 1958 28       		.uleb128 0x28
 13423 1959 76070000 		.4byte	.LASF307
 13424 195d 07       		.byte	0x7
 13425 195e 3902     		.2byte	0x239
 13426 1960 48190000 		.4byte	0x1948
 13427 1964 28       		.uleb128 0x28
 13428 1965 D1040000 		.4byte	.LASF308
 13429 1969 07       		.byte	0x7
 13430 196a 3902     		.2byte	0x239
 13431 196c 48190000 		.4byte	0x1948
 13432 1970 28       		.uleb128 0x28
 13433 1971 CF0C0000 		.4byte	.LASF309
 13434 1975 07       		.byte	0x7
 13435 1976 3902     		.2byte	0x239
 13436 1978 48190000 		.4byte	0x1948
 13437 197c 07       		.uleb128 0x7
 13438 197d E2010000 		.4byte	0x1e2
 13439 1981 8C190000 		.4byte	0x198c
 13440 1985 08       		.uleb128 0x8
 13441 1986 0E010000 		.4byte	0x10e
 13442 198a 01       		.byte	0x1
 13443 198b 00       		.byte	0
 13444 198c 28       		.uleb128 0x28
 13445 198d 21070000 		.4byte	.LASF310
 13446 1991 07       		.byte	0x7
 13447 1992 3A02     		.2byte	0x23a
 13448 1994 7C190000 		.4byte	0x197c
 13449 1998 28       		.uleb128 0x28
 13450 1999 92120000 		.4byte	.LASF311
 13451 199d 07       		.byte	0x7
 13452 199e 3A02     		.2byte	0x23a
 13453 19a0 7C190000 		.4byte	0x197c
 13454 19a4 28       		.uleb128 0x28
 13455 19a5 DE110000 		.4byte	.LASF312
 13456 19a9 07       		.byte	0x7
 13457 19aa 3B02     		.2byte	0x23b
 13458 19ac 6B020000 		.4byte	0x26b
 13459 19b0 28       		.uleb128 0x28
 13460 19b1 65030000 		.4byte	.LASF313
 13461 19b5 07       		.byte	0x7
 13462 19b6 3B02     		.2byte	0x23b
 13463 19b8 6B020000 		.4byte	0x26b
 13464 19bc 28       		.uleb128 0x28
 13465 19bd 610F0000 		.4byte	.LASF314
 13466 19c1 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 291


 13467 19c2 3C02     		.2byte	0x23c
 13468 19c4 C0020000 		.4byte	0x2c0
 13469 19c8 28       		.uleb128 0x28
 13470 19c9 93000000 		.4byte	.LASF315
 13471 19cd 07       		.byte	0x7
 13472 19ce 3D02     		.2byte	0x23d
 13473 19d0 DB020000 		.4byte	0x2db
 13474 19d4 28       		.uleb128 0x28
 13475 19d5 7A0F0000 		.4byte	.LASF316
 13476 19d9 07       		.byte	0x7
 13477 19da 3E02     		.2byte	0x23e
 13478 19dc 0D0A0000 		.4byte	0xa0d
 13479 19e0 28       		.uleb128 0x28
 13480 19e1 820B0000 		.4byte	.LASF317
 13481 19e5 07       		.byte	0x7
 13482 19e6 3E02     		.2byte	0x23e
 13483 19e8 0D0A0000 		.4byte	0xa0d
 13484 19ec 28       		.uleb128 0x28
 13485 19ed 4F0A0000 		.4byte	.LASF318
 13486 19f1 07       		.byte	0x7
 13487 19f2 3F02     		.2byte	0x23f
 13488 19f4 E60B0000 		.4byte	0xbe6
 13489 19f8 07       		.uleb128 0x7
 13490 19f9 BE0B0000 		.4byte	0xbbe
 13491 19fd 081A0000 		.4byte	0x1a08
 13492 1a01 08       		.uleb128 0x8
 13493 1a02 0E010000 		.4byte	0x10e
 13494 1a06 01       		.byte	0x1
 13495 1a07 00       		.byte	0
 13496 1a08 28       		.uleb128 0x28
 13497 1a09 BB0C0000 		.4byte	.LASF319
 13498 1a0d 07       		.byte	0x7
 13499 1a0e 4002     		.2byte	0x240
 13500 1a10 F8190000 		.4byte	0x19f8
 13501 1a14 28       		.uleb128 0x28
 13502 1a15 AA0A0000 		.4byte	.LASF320
 13503 1a19 07       		.byte	0x7
 13504 1a1a 4002     		.2byte	0x240
 13505 1a1c F8190000 		.4byte	0x19f8
 13506 1a20 28       		.uleb128 0x28
 13507 1a21 A50C0000 		.4byte	.LASF321
 13508 1a25 07       		.byte	0x7
 13509 1a26 4002     		.2byte	0x240
 13510 1a28 F8190000 		.4byte	0x19f8
 13511 1a2c 07       		.uleb128 0x7
 13512 1a2d BE0B0000 		.4byte	0xbbe
 13513 1a31 3C1A0000 		.4byte	0x1a3c
 13514 1a35 08       		.uleb128 0x8
 13515 1a36 0E010000 		.4byte	0x10e
 13516 1a3a 02       		.byte	0x2
 13517 1a3b 00       		.byte	0
 13518 1a3c 28       		.uleb128 0x28
 13519 1a3d 73050000 		.4byte	.LASF322
 13520 1a41 07       		.byte	0x7
 13521 1a42 4102     		.2byte	0x241
 13522 1a44 2C1A0000 		.4byte	0x1a2c
 13523 1a48 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 292


 13524 1a49 BE0B0000 		.4byte	0xbbe
 13525 1a4d 581A0000 		.4byte	0x1a58
 13526 1a51 08       		.uleb128 0x8
 13527 1a52 0E010000 		.4byte	0x10e
 13528 1a56 07       		.byte	0x7
 13529 1a57 00       		.byte	0
 13530 1a58 28       		.uleb128 0x28
 13531 1a59 AE010000 		.4byte	.LASF323
 13532 1a5d 07       		.byte	0x7
 13533 1a5e 4202     		.2byte	0x242
 13534 1a60 481A0000 		.4byte	0x1a48
 13535 1a64 28       		.uleb128 0x28
 13536 1a65 92030000 		.4byte	.LASF324
 13537 1a69 07       		.byte	0x7
 13538 1a6a 4302     		.2byte	0x243
 13539 1a6c BE0B0000 		.4byte	0xbbe
 13540 1a70 28       		.uleb128 0x28
 13541 1a71 CA020000 		.4byte	.LASF325
 13542 1a75 07       		.byte	0x7
 13543 1a76 4502     		.2byte	0x245
 13544 1a78 8D000000 		.4byte	0x8d
 13545 1a7c 28       		.uleb128 0x28
 13546 1a7d 2F0A0000 		.4byte	.LASF326
 13547 1a81 07       		.byte	0x7
 13548 1a82 4602     		.2byte	0x246
 13549 1a84 8D000000 		.4byte	0x8d
 13550 1a88 28       		.uleb128 0x28
 13551 1a89 4B0D0000 		.4byte	.LASF327
 13552 1a8d 07       		.byte	0x7
 13553 1a8e 4702     		.2byte	0x247
 13554 1a90 D5000000 		.4byte	0xd5
 13555 1a94 28       		.uleb128 0x28
 13556 1a95 A6050000 		.4byte	.LASF328
 13557 1a99 07       		.byte	0x7
 13558 1a9a 4902     		.2byte	0x249
 13559 1a9c BD000000 		.4byte	0xbd
 13560 1aa0 28       		.uleb128 0x28
 13561 1aa1 050E0000 		.4byte	.LASF329
 13562 1aa5 07       		.byte	0x7
 13563 1aa6 4A02     		.2byte	0x24a
 13564 1aa8 A0020000 		.4byte	0x2a0
 13565 1aac 28       		.uleb128 0x28
 13566 1aad FA100000 		.4byte	.LASF330
 13567 1ab1 07       		.byte	0x7
 13568 1ab2 4B02     		.2byte	0x24b
 13569 1ab4 45070000 		.4byte	0x745
 13570 1ab8 28       		.uleb128 0x28
 13571 1ab9 1B100000 		.4byte	.LASF331
 13572 1abd 07       		.byte	0x7
 13573 1abe 4C02     		.2byte	0x24c
 13574 1ac0 45070000 		.4byte	0x745
 13575 1ac4 28       		.uleb128 0x28
 13576 1ac5 5D060000 		.4byte	.LASF332
 13577 1ac9 07       		.byte	0x7
 13578 1aca 4D02     		.2byte	0x24d
 13579 1acc A0020000 		.4byte	0x2a0
 13580 1ad0 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 293


 13581 1ad1 94100000 		.4byte	.LASF333
 13582 1ad5 07       		.byte	0x7
 13583 1ad6 4E02     		.2byte	0x24e
 13584 1ad8 A0020000 		.4byte	0x2a0
 13585 1adc 28       		.uleb128 0x28
 13586 1add 770D0000 		.4byte	.LASF334
 13587 1ae1 07       		.byte	0x7
 13588 1ae2 4F02     		.2byte	0x24f
 13589 1ae4 BD000000 		.4byte	0xbd
 13590 1ae8 28       		.uleb128 0x28
 13591 1ae9 FF060000 		.4byte	.LASF335
 13592 1aed 07       		.byte	0x7
 13593 1aee 5102     		.2byte	0x251
 13594 1af0 920C0000 		.4byte	0xc92
 13595 1af4 28       		.uleb128 0x28
 13596 1af5 FB040000 		.4byte	.LASF336
 13597 1af9 07       		.byte	0x7
 13598 1afa 5202     		.2byte	0x252
 13599 1afc 5A0C0000 		.4byte	0xc5a
 13600 1b00 28       		.uleb128 0x28
 13601 1b01 51040000 		.4byte	.LASF337
 13602 1b05 07       		.byte	0x7
 13603 1b06 5302     		.2byte	0x253
 13604 1b08 5A0C0000 		.4byte	0xc5a
 13605 1b0c 28       		.uleb128 0x28
 13606 1b0d 8A0D0000 		.4byte	.LASF338
 13607 1b11 07       		.byte	0x7
 13608 1b12 5402     		.2byte	0x254
 13609 1b14 5A0C0000 		.4byte	0xc5a
 13610 1b18 28       		.uleb128 0x28
 13611 1b19 0E120000 		.4byte	.LASF339
 13612 1b1d 07       		.byte	0x7
 13613 1b1e 5502     		.2byte	0x255
 13614 1b20 5A0C0000 		.4byte	0xc5a
 13615 1b24 28       		.uleb128 0x28
 13616 1b25 16090000 		.4byte	.LASF340
 13617 1b29 07       		.byte	0x7
 13618 1b2a 5802     		.2byte	0x258
 13619 1b2c 55070000 		.4byte	0x755
 13620 1b30 28       		.uleb128 0x28
 13621 1b31 E2000000 		.4byte	.LASF341
 13622 1b35 07       		.byte	0x7
 13623 1b36 5902     		.2byte	0x259
 13624 1b38 81000000 		.4byte	0x81
 13625 1b3c 28       		.uleb128 0x28
 13626 1b3d 66040000 		.4byte	.LASF342
 13627 1b41 07       		.byte	0x7
 13628 1b42 5A02     		.2byte	0x25a
 13629 1b44 81000000 		.4byte	0x81
 13630 1b48 28       		.uleb128 0x28
 13631 1b49 00010000 		.4byte	.LASF343
 13632 1b4d 07       		.byte	0x7
 13633 1b4e 5B02     		.2byte	0x25b
 13634 1b50 81000000 		.4byte	0x81
 13635 1b54 28       		.uleb128 0x28
 13636 1b55 C6120000 		.4byte	.LASF344
 13637 1b59 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 294


 13638 1b5a 5D02     		.2byte	0x25d
 13639 1b5c 81000000 		.4byte	0x81
 13640 1b60 28       		.uleb128 0x28
 13641 1b61 C20C0000 		.4byte	.LASF345
 13642 1b65 07       		.byte	0x7
 13643 1b66 5E02     		.2byte	0x25e
 13644 1b68 81000000 		.4byte	0x81
 13645 1b6c 28       		.uleb128 0x28
 13646 1b6d B7040000 		.4byte	.LASF346
 13647 1b71 07       		.byte	0x7
 13648 1b72 5F02     		.2byte	0x25f
 13649 1b74 81000000 		.4byte	0x81
 13650 1b78 28       		.uleb128 0x28
 13651 1b79 F6080000 		.4byte	.LASF347
 13652 1b7d 07       		.byte	0x7
 13653 1b7e 6002     		.2byte	0x260
 13654 1b80 81000000 		.4byte	0x81
 13655 1b84 28       		.uleb128 0x28
 13656 1b85 8F0A0000 		.4byte	.LASF348
 13657 1b89 07       		.byte	0x7
 13658 1b8a 6102     		.2byte	0x261
 13659 1b8c 81000000 		.4byte	0x81
 13660 1b90 07       		.uleb128 0x7
 13661 1b91 B1000000 		.4byte	0xb1
 13662 1b95 A01B0000 		.4byte	0x1ba0
 13663 1b99 08       		.uleb128 0x8
 13664 1b9a 0E010000 		.4byte	0x10e
 13665 1b9e 0B       		.byte	0xb
 13666 1b9f 00       		.byte	0
 13667 1ba0 28       		.uleb128 0x28
 13668 1ba1 5E040000 		.4byte	.LASF349
 13669 1ba5 07       		.byte	0x7
 13670 1ba6 6502     		.2byte	0x265
 13671 1ba8 901B0000 		.4byte	0x1b90
 13672 1bac 28       		.uleb128 0x28
 13673 1bad 45120000 		.4byte	.LASF350
 13674 1bb1 07       		.byte	0x7
 13675 1bb2 6602     		.2byte	0x266
 13676 1bb4 81000000 		.4byte	0x81
 13677 1bb8 07       		.uleb128 0x7
 13678 1bb9 A5000000 		.4byte	0xa5
 13679 1bbd C81B0000 		.4byte	0x1bc8
 13680 1bc1 08       		.uleb128 0x8
 13681 1bc2 0E010000 		.4byte	0x10e
 13682 1bc6 01       		.byte	0x1
 13683 1bc7 00       		.byte	0
 13684 1bc8 28       		.uleb128 0x28
 13685 1bc9 4E050000 		.4byte	.LASF351
 13686 1bcd 07       		.byte	0x7
 13687 1bce 6902     		.2byte	0x269
 13688 1bd0 B81B0000 		.4byte	0x1bb8
 13689 1bd4 07       		.uleb128 0x7
 13690 1bd5 99000000 		.4byte	0x99
 13691 1bd9 EA1B0000 		.4byte	0x1bea
 13692 1bdd 08       		.uleb128 0x8
 13693 1bde 0E010000 		.4byte	0x10e
 13694 1be2 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 295


 13695 1be3 08       		.uleb128 0x8
 13696 1be4 0E010000 		.4byte	0x10e
 13697 1be8 04       		.byte	0x4
 13698 1be9 00       		.byte	0
 13699 1bea 28       		.uleb128 0x28
 13700 1beb 65070000 		.4byte	.LASF352
 13701 1bef 07       		.byte	0x7
 13702 1bf0 6C02     		.2byte	0x26c
 13703 1bf2 D41B0000 		.4byte	0x1bd4
 13704 1bf6 07       		.uleb128 0x7
 13705 1bf7 8D000000 		.4byte	0x8d
 13706 1bfb 0C1C0000 		.4byte	0x1c0c
 13707 1bff 08       		.uleb128 0x8
 13708 1c00 0E010000 		.4byte	0x10e
 13709 1c04 01       		.byte	0x1
 13710 1c05 08       		.uleb128 0x8
 13711 1c06 0E010000 		.4byte	0x10e
 13712 1c0a 04       		.byte	0x4
 13713 1c0b 00       		.byte	0
 13714 1c0c 28       		.uleb128 0x28
 13715 1c0d 1A110000 		.4byte	.LASF353
 13716 1c11 07       		.byte	0x7
 13717 1c12 6E02     		.2byte	0x26e
 13718 1c14 F61B0000 		.4byte	0x1bf6
 13719 1c18 07       		.uleb128 0x7
 13720 1c19 81000000 		.4byte	0x81
 13721 1c1d 2E1C0000 		.4byte	0x1c2e
 13722 1c21 08       		.uleb128 0x8
 13723 1c22 0E010000 		.4byte	0x10e
 13724 1c26 01       		.byte	0x1
 13725 1c27 08       		.uleb128 0x8
 13726 1c28 0E010000 		.4byte	0x10e
 13727 1c2c 04       		.byte	0x4
 13728 1c2d 00       		.byte	0
 13729 1c2e 28       		.uleb128 0x28
 13730 1c2f 36070000 		.4byte	.LASF354
 13731 1c33 07       		.byte	0x7
 13732 1c34 6F02     		.2byte	0x26f
 13733 1c36 181C0000 		.4byte	0x1c18
 13734 1c3a 28       		.uleb128 0x28
 13735 1c3b D8030000 		.4byte	.LASF355
 13736 1c3f 07       		.byte	0x7
 13737 1c40 7002     		.2byte	0x270
 13738 1c42 55070000 		.4byte	0x755
 13739 1c46 28       		.uleb128 0x28
 13740 1c47 9D0B0000 		.4byte	.LASF356
 13741 1c4b 07       		.byte	0x7
 13742 1c4c 7302     		.2byte	0x273
 13743 1c4e BD000000 		.4byte	0xbd
 13744 1c52 28       		.uleb128 0x28
 13745 1c53 40060000 		.4byte	.LASF357
 13746 1c57 07       		.byte	0x7
 13747 1c58 7602     		.2byte	0x276
 13748 1c5a 9F010000 		.4byte	0x19f
 13749 1c5e 28       		.uleb128 0x28
 13750 1c5f 90080000 		.4byte	.LASF358
 13751 1c63 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 296


 13752 1c64 7902     		.2byte	0x279
 13753 1c66 9F010000 		.4byte	0x19f
 13754 1c6a 07       		.uleb128 0x7
 13755 1c6b 420B0000 		.4byte	0xb42
 13756 1c6f 7A1C0000 		.4byte	0x1c7a
 13757 1c73 08       		.uleb128 0x8
 13758 1c74 0E010000 		.4byte	0x10e
 13759 1c78 04       		.byte	0x4
 13760 1c79 00       		.byte	0
 13761 1c7a 28       		.uleb128 0x28
 13762 1c7b 6D050000 		.4byte	.LASF359
 13763 1c7f 07       		.byte	0x7
 13764 1c80 8202     		.2byte	0x282
 13765 1c82 6A1C0000 		.4byte	0x1c6a
 13766 1c86 28       		.uleb128 0x28
 13767 1c87 A3060000 		.4byte	.LASF360
 13768 1c8b 07       		.byte	0x7
 13769 1c8c 8202     		.2byte	0x282
 13770 1c8e 6A1C0000 		.4byte	0x1c6a
 13771 1c92 28       		.uleb128 0x28
 13772 1c93 63120000 		.4byte	.LASF361
 13773 1c97 07       		.byte	0x7
 13774 1c98 8B02     		.2byte	0x28b
 13775 1c9a 81000000 		.4byte	0x81
 13776 1c9e 00       		.byte	0
 13777              		.section	.debug_abbrev,"",%progbits
 13778              	.Ldebug_abbrev0:
 13779 0000 01       		.uleb128 0x1
 13780 0001 11       		.uleb128 0x11
 13781 0002 01       		.byte	0x1
 13782 0003 25       		.uleb128 0x25
 13783 0004 0E       		.uleb128 0xe
 13784 0005 13       		.uleb128 0x13
 13785 0006 0B       		.uleb128 0xb
 13786 0007 03       		.uleb128 0x3
 13787 0008 0E       		.uleb128 0xe
 13788 0009 1B       		.uleb128 0x1b
 13789 000a 0E       		.uleb128 0xe
 13790 000b 55       		.uleb128 0x55
 13791 000c 17       		.uleb128 0x17
 13792 000d 11       		.uleb128 0x11
 13793 000e 01       		.uleb128 0x1
 13794 000f 10       		.uleb128 0x10
 13795 0010 17       		.uleb128 0x17
 13796 0011 00       		.byte	0
 13797 0012 00       		.byte	0
 13798 0013 02       		.uleb128 0x2
 13799 0014 24       		.uleb128 0x24
 13800 0015 00       		.byte	0
 13801 0016 0B       		.uleb128 0xb
 13802 0017 0B       		.uleb128 0xb
 13803 0018 3E       		.uleb128 0x3e
 13804 0019 0B       		.uleb128 0xb
 13805 001a 03       		.uleb128 0x3
 13806 001b 0E       		.uleb128 0xe
 13807 001c 00       		.byte	0
 13808 001d 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 297


 13809 001e 03       		.uleb128 0x3
 13810 001f 16       		.uleb128 0x16
 13811 0020 00       		.byte	0
 13812 0021 03       		.uleb128 0x3
 13813 0022 0E       		.uleb128 0xe
 13814 0023 3A       		.uleb128 0x3a
 13815 0024 0B       		.uleb128 0xb
 13816 0025 3B       		.uleb128 0x3b
 13817 0026 0B       		.uleb128 0xb
 13818 0027 49       		.uleb128 0x49
 13819 0028 13       		.uleb128 0x13
 13820 0029 00       		.byte	0
 13821 002a 00       		.byte	0
 13822 002b 04       		.uleb128 0x4
 13823 002c 24       		.uleb128 0x24
 13824 002d 00       		.byte	0
 13825 002e 0B       		.uleb128 0xb
 13826 002f 0B       		.uleb128 0xb
 13827 0030 3E       		.uleb128 0x3e
 13828 0031 0B       		.uleb128 0xb
 13829 0032 03       		.uleb128 0x3
 13830 0033 08       		.uleb128 0x8
 13831 0034 00       		.byte	0
 13832 0035 00       		.byte	0
 13833 0036 05       		.uleb128 0x5
 13834 0037 16       		.uleb128 0x16
 13835 0038 00       		.byte	0
 13836 0039 03       		.uleb128 0x3
 13837 003a 0E       		.uleb128 0xe
 13838 003b 3A       		.uleb128 0x3a
 13839 003c 0B       		.uleb128 0xb
 13840 003d 3B       		.uleb128 0x3b
 13841 003e 05       		.uleb128 0x5
 13842 003f 49       		.uleb128 0x49
 13843 0040 13       		.uleb128 0x13
 13844 0041 00       		.byte	0
 13845 0042 00       		.byte	0
 13846 0043 06       		.uleb128 0x6
 13847 0044 35       		.uleb128 0x35
 13848 0045 00       		.byte	0
 13849 0046 49       		.uleb128 0x49
 13850 0047 13       		.uleb128 0x13
 13851 0048 00       		.byte	0
 13852 0049 00       		.byte	0
 13853 004a 07       		.uleb128 0x7
 13854 004b 01       		.uleb128 0x1
 13855 004c 01       		.byte	0x1
 13856 004d 49       		.uleb128 0x49
 13857 004e 13       		.uleb128 0x13
 13858 004f 01       		.uleb128 0x1
 13859 0050 13       		.uleb128 0x13
 13860 0051 00       		.byte	0
 13861 0052 00       		.byte	0
 13862 0053 08       		.uleb128 0x8
 13863 0054 21       		.uleb128 0x21
 13864 0055 00       		.byte	0
 13865 0056 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 298


 13866 0057 13       		.uleb128 0x13
 13867 0058 2F       		.uleb128 0x2f
 13868 0059 0B       		.uleb128 0xb
 13869 005a 00       		.byte	0
 13870 005b 00       		.byte	0
 13871 005c 09       		.uleb128 0x9
 13872 005d 04       		.uleb128 0x4
 13873 005e 01       		.byte	0x1
 13874 005f 03       		.uleb128 0x3
 13875 0060 0E       		.uleb128 0xe
 13876 0061 0B       		.uleb128 0xb
 13877 0062 0B       		.uleb128 0xb
 13878 0063 49       		.uleb128 0x49
 13879 0064 13       		.uleb128 0x13
 13880 0065 3A       		.uleb128 0x3a
 13881 0066 0B       		.uleb128 0xb
 13882 0067 3B       		.uleb128 0x3b
 13883 0068 0B       		.uleb128 0xb
 13884 0069 01       		.uleb128 0x1
 13885 006a 13       		.uleb128 0x13
 13886 006b 00       		.byte	0
 13887 006c 00       		.byte	0
 13888 006d 0A       		.uleb128 0xa
 13889 006e 28       		.uleb128 0x28
 13890 006f 00       		.byte	0
 13891 0070 03       		.uleb128 0x3
 13892 0071 0E       		.uleb128 0xe
 13893 0072 1C       		.uleb128 0x1c
 13894 0073 0B       		.uleb128 0xb
 13895 0074 00       		.byte	0
 13896 0075 00       		.byte	0
 13897 0076 0B       		.uleb128 0xb
 13898 0077 13       		.uleb128 0x13
 13899 0078 00       		.byte	0
 13900 0079 03       		.uleb128 0x3
 13901 007a 0E       		.uleb128 0xe
 13902 007b 3C       		.uleb128 0x3c
 13903 007c 19       		.uleb128 0x19
 13904 007d 00       		.byte	0
 13905 007e 00       		.byte	0
 13906 007f 0C       		.uleb128 0xc
 13907 0080 0F       		.uleb128 0xf
 13908 0081 00       		.byte	0
 13909 0082 0B       		.uleb128 0xb
 13910 0083 0B       		.uleb128 0xb
 13911 0084 49       		.uleb128 0x49
 13912 0085 13       		.uleb128 0x13
 13913 0086 00       		.byte	0
 13914 0087 00       		.byte	0
 13915 0088 0D       		.uleb128 0xd
 13916 0089 13       		.uleb128 0x13
 13917 008a 01       		.byte	0x1
 13918 008b 03       		.uleb128 0x3
 13919 008c 0E       		.uleb128 0xe
 13920 008d 0B       		.uleb128 0xb
 13921 008e 0B       		.uleb128 0xb
 13922 008f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 299


 13923 0090 0B       		.uleb128 0xb
 13924 0091 3B       		.uleb128 0x3b
 13925 0092 0B       		.uleb128 0xb
 13926 0093 01       		.uleb128 0x1
 13927 0094 13       		.uleb128 0x13
 13928 0095 00       		.byte	0
 13929 0096 00       		.byte	0
 13930 0097 0E       		.uleb128 0xe
 13931 0098 0D       		.uleb128 0xd
 13932 0099 00       		.byte	0
 13933 009a 03       		.uleb128 0x3
 13934 009b 08       		.uleb128 0x8
 13935 009c 3A       		.uleb128 0x3a
 13936 009d 0B       		.uleb128 0xb
 13937 009e 3B       		.uleb128 0x3b
 13938 009f 0B       		.uleb128 0xb
 13939 00a0 49       		.uleb128 0x49
 13940 00a1 13       		.uleb128 0x13
 13941 00a2 38       		.uleb128 0x38
 13942 00a3 0B       		.uleb128 0xb
 13943 00a4 00       		.byte	0
 13944 00a5 00       		.byte	0
 13945 00a6 0F       		.uleb128 0xf
 13946 00a7 0D       		.uleb128 0xd
 13947 00a8 00       		.byte	0
 13948 00a9 03       		.uleb128 0x3
 13949 00aa 0E       		.uleb128 0xe
 13950 00ab 3A       		.uleb128 0x3a
 13951 00ac 0B       		.uleb128 0xb
 13952 00ad 3B       		.uleb128 0x3b
 13953 00ae 0B       		.uleb128 0xb
 13954 00af 49       		.uleb128 0x49
 13955 00b0 13       		.uleb128 0x13
 13956 00b1 38       		.uleb128 0x38
 13957 00b2 0B       		.uleb128 0xb
 13958 00b3 00       		.byte	0
 13959 00b4 00       		.byte	0
 13960 00b5 10       		.uleb128 0x10
 13961 00b6 13       		.uleb128 0x13
 13962 00b7 01       		.byte	0x1
 13963 00b8 03       		.uleb128 0x3
 13964 00b9 0E       		.uleb128 0xe
 13965 00ba 0B       		.uleb128 0xb
 13966 00bb 0B       		.uleb128 0xb
 13967 00bc 3A       		.uleb128 0x3a
 13968 00bd 0B       		.uleb128 0xb
 13969 00be 3B       		.uleb128 0x3b
 13970 00bf 05       		.uleb128 0x5
 13971 00c0 01       		.uleb128 0x1
 13972 00c1 13       		.uleb128 0x13
 13973 00c2 00       		.byte	0
 13974 00c3 00       		.byte	0
 13975 00c4 11       		.uleb128 0x11
 13976 00c5 0D       		.uleb128 0xd
 13977 00c6 00       		.byte	0
 13978 00c7 03       		.uleb128 0x3
 13979 00c8 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 300


 13980 00c9 3A       		.uleb128 0x3a
 13981 00ca 0B       		.uleb128 0xb
 13982 00cb 3B       		.uleb128 0x3b
 13983 00cc 05       		.uleb128 0x5
 13984 00cd 49       		.uleb128 0x49
 13985 00ce 13       		.uleb128 0x13
 13986 00cf 38       		.uleb128 0x38
 13987 00d0 0B       		.uleb128 0xb
 13988 00d1 00       		.byte	0
 13989 00d2 00       		.byte	0
 13990 00d3 12       		.uleb128 0x12
 13991 00d4 0D       		.uleb128 0xd
 13992 00d5 00       		.byte	0
 13993 00d6 03       		.uleb128 0x3
 13994 00d7 0E       		.uleb128 0xe
 13995 00d8 3A       		.uleb128 0x3a
 13996 00d9 0B       		.uleb128 0xb
 13997 00da 3B       		.uleb128 0x3b
 13998 00db 05       		.uleb128 0x5
 13999 00dc 49       		.uleb128 0x49
 14000 00dd 13       		.uleb128 0x13
 14001 00de 38       		.uleb128 0x38
 14002 00df 0B       		.uleb128 0xb
 14003 00e0 00       		.byte	0
 14004 00e1 00       		.byte	0
 14005 00e2 13       		.uleb128 0x13
 14006 00e3 13       		.uleb128 0x13
 14007 00e4 01       		.byte	0x1
 14008 00e5 03       		.uleb128 0x3
 14009 00e6 0E       		.uleb128 0xe
 14010 00e7 0B       		.uleb128 0xb
 14011 00e8 05       		.uleb128 0x5
 14012 00e9 3A       		.uleb128 0x3a
 14013 00ea 0B       		.uleb128 0xb
 14014 00eb 3B       		.uleb128 0x3b
 14015 00ec 05       		.uleb128 0x5
 14016 00ed 01       		.uleb128 0x1
 14017 00ee 13       		.uleb128 0x13
 14018 00ef 00       		.byte	0
 14019 00f0 00       		.byte	0
 14020 00f1 14       		.uleb128 0x14
 14021 00f2 0D       		.uleb128 0xd
 14022 00f3 00       		.byte	0
 14023 00f4 03       		.uleb128 0x3
 14024 00f5 08       		.uleb128 0x8
 14025 00f6 3A       		.uleb128 0x3a
 14026 00f7 0B       		.uleb128 0xb
 14027 00f8 3B       		.uleb128 0x3b
 14028 00f9 05       		.uleb128 0x5
 14029 00fa 49       		.uleb128 0x49
 14030 00fb 13       		.uleb128 0x13
 14031 00fc 38       		.uleb128 0x38
 14032 00fd 05       		.uleb128 0x5
 14033 00fe 00       		.byte	0
 14034 00ff 00       		.byte	0
 14035 0100 15       		.uleb128 0x15
 14036 0101 0D       		.uleb128 0xd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 301


 14037 0102 00       		.byte	0
 14038 0103 03       		.uleb128 0x3
 14039 0104 0E       		.uleb128 0xe
 14040 0105 3A       		.uleb128 0x3a
 14041 0106 0B       		.uleb128 0xb
 14042 0107 3B       		.uleb128 0x3b
 14043 0108 05       		.uleb128 0x5
 14044 0109 49       		.uleb128 0x49
 14045 010a 13       		.uleb128 0x13
 14046 010b 38       		.uleb128 0x38
 14047 010c 05       		.uleb128 0x5
 14048 010d 00       		.byte	0
 14049 010e 00       		.byte	0
 14050 010f 16       		.uleb128 0x16
 14051 0110 04       		.uleb128 0x4
 14052 0111 01       		.byte	0x1
 14053 0112 0B       		.uleb128 0xb
 14054 0113 0B       		.uleb128 0xb
 14055 0114 49       		.uleb128 0x49
 14056 0115 13       		.uleb128 0x13
 14057 0116 3A       		.uleb128 0x3a
 14058 0117 0B       		.uleb128 0xb
 14059 0118 3B       		.uleb128 0x3b
 14060 0119 05       		.uleb128 0x5
 14061 011a 01       		.uleb128 0x1
 14062 011b 13       		.uleb128 0x13
 14063 011c 00       		.byte	0
 14064 011d 00       		.byte	0
 14065 011e 17       		.uleb128 0x17
 14066 011f 2E       		.uleb128 0x2e
 14067 0120 00       		.byte	0
 14068 0121 3F       		.uleb128 0x3f
 14069 0122 19       		.uleb128 0x19
 14070 0123 03       		.uleb128 0x3
 14071 0124 0E       		.uleb128 0xe
 14072 0125 3A       		.uleb128 0x3a
 14073 0126 0B       		.uleb128 0xb
 14074 0127 3B       		.uleb128 0x3b
 14075 0128 0B       		.uleb128 0xb
 14076 0129 27       		.uleb128 0x27
 14077 012a 19       		.uleb128 0x19
 14078 012b 11       		.uleb128 0x11
 14079 012c 01       		.uleb128 0x1
 14080 012d 12       		.uleb128 0x12
 14081 012e 06       		.uleb128 0x6
 14082 012f 40       		.uleb128 0x40
 14083 0130 18       		.uleb128 0x18
 14084 0131 9742     		.uleb128 0x2117
 14085 0133 19       		.uleb128 0x19
 14086 0134 00       		.byte	0
 14087 0135 00       		.byte	0
 14088 0136 18       		.uleb128 0x18
 14089 0137 2E       		.uleb128 0x2e
 14090 0138 01       		.byte	0x1
 14091 0139 3F       		.uleb128 0x3f
 14092 013a 19       		.uleb128 0x19
 14093 013b 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 302


 14094 013c 0E       		.uleb128 0xe
 14095 013d 3A       		.uleb128 0x3a
 14096 013e 0B       		.uleb128 0xb
 14097 013f 3B       		.uleb128 0x3b
 14098 0140 0B       		.uleb128 0xb
 14099 0141 11       		.uleb128 0x11
 14100 0142 01       		.uleb128 0x1
 14101 0143 12       		.uleb128 0x12
 14102 0144 06       		.uleb128 0x6
 14103 0145 40       		.uleb128 0x40
 14104 0146 18       		.uleb128 0x18
 14105 0147 9642     		.uleb128 0x2116
 14106 0149 19       		.uleb128 0x19
 14107 014a 01       		.uleb128 0x1
 14108 014b 13       		.uleb128 0x13
 14109 014c 00       		.byte	0
 14110 014d 00       		.byte	0
 14111 014e 19       		.uleb128 0x19
 14112 014f 34       		.uleb128 0x34
 14113 0150 00       		.byte	0
 14114 0151 03       		.uleb128 0x3
 14115 0152 0E       		.uleb128 0xe
 14116 0153 3A       		.uleb128 0x3a
 14117 0154 0B       		.uleb128 0xb
 14118 0155 3B       		.uleb128 0x3b
 14119 0156 0B       		.uleb128 0xb
 14120 0157 49       		.uleb128 0x49
 14121 0158 13       		.uleb128 0x13
 14122 0159 02       		.uleb128 0x2
 14123 015a 18       		.uleb128 0x18
 14124 015b 00       		.byte	0
 14125 015c 00       		.byte	0
 14126 015d 1A       		.uleb128 0x1a
 14127 015e 2E       		.uleb128 0x2e
 14128 015f 01       		.byte	0x1
 14129 0160 3F       		.uleb128 0x3f
 14130 0161 19       		.uleb128 0x19
 14131 0162 03       		.uleb128 0x3
 14132 0163 0E       		.uleb128 0xe
 14133 0164 3A       		.uleb128 0x3a
 14134 0165 0B       		.uleb128 0xb
 14135 0166 3B       		.uleb128 0x3b
 14136 0167 05       		.uleb128 0x5
 14137 0168 27       		.uleb128 0x27
 14138 0169 19       		.uleb128 0x19
 14139 016a 11       		.uleb128 0x11
 14140 016b 01       		.uleb128 0x1
 14141 016c 12       		.uleb128 0x12
 14142 016d 06       		.uleb128 0x6
 14143 016e 40       		.uleb128 0x40
 14144 016f 18       		.uleb128 0x18
 14145 0170 9642     		.uleb128 0x2116
 14146 0172 19       		.uleb128 0x19
 14147 0173 01       		.uleb128 0x1
 14148 0174 13       		.uleb128 0x13
 14149 0175 00       		.byte	0
 14150 0176 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 303


 14151 0177 1B       		.uleb128 0x1b
 14152 0178 34       		.uleb128 0x34
 14153 0179 00       		.byte	0
 14154 017a 03       		.uleb128 0x3
 14155 017b 0E       		.uleb128 0xe
 14156 017c 3A       		.uleb128 0x3a
 14157 017d 0B       		.uleb128 0xb
 14158 017e 3B       		.uleb128 0x3b
 14159 017f 05       		.uleb128 0x5
 14160 0180 49       		.uleb128 0x49
 14161 0181 13       		.uleb128 0x13
 14162 0182 02       		.uleb128 0x2
 14163 0183 18       		.uleb128 0x18
 14164 0184 00       		.byte	0
 14165 0185 00       		.byte	0
 14166 0186 1C       		.uleb128 0x1c
 14167 0187 0B       		.uleb128 0xb
 14168 0188 01       		.byte	0x1
 14169 0189 11       		.uleb128 0x11
 14170 018a 01       		.uleb128 0x1
 14171 018b 12       		.uleb128 0x12
 14172 018c 06       		.uleb128 0x6
 14173 018d 00       		.byte	0
 14174 018e 00       		.byte	0
 14175 018f 1D       		.uleb128 0x1d
 14176 0190 21       		.uleb128 0x21
 14177 0191 00       		.byte	0
 14178 0192 49       		.uleb128 0x49
 14179 0193 13       		.uleb128 0x13
 14180 0194 2F       		.uleb128 0x2f
 14181 0195 05       		.uleb128 0x5
 14182 0196 00       		.byte	0
 14183 0197 00       		.byte	0
 14184 0198 1E       		.uleb128 0x1e
 14185 0199 05       		.uleb128 0x5
 14186 019a 00       		.byte	0
 14187 019b 03       		.uleb128 0x3
 14188 019c 0E       		.uleb128 0xe
 14189 019d 3A       		.uleb128 0x3a
 14190 019e 0B       		.uleb128 0xb
 14191 019f 3B       		.uleb128 0x3b
 14192 01a0 05       		.uleb128 0x5
 14193 01a1 49       		.uleb128 0x49
 14194 01a2 13       		.uleb128 0x13
 14195 01a3 02       		.uleb128 0x2
 14196 01a4 18       		.uleb128 0x18
 14197 01a5 00       		.byte	0
 14198 01a6 00       		.byte	0
 14199 01a7 1F       		.uleb128 0x1f
 14200 01a8 34       		.uleb128 0x34
 14201 01a9 00       		.byte	0
 14202 01aa 03       		.uleb128 0x3
 14203 01ab 08       		.uleb128 0x8
 14204 01ac 3A       		.uleb128 0x3a
 14205 01ad 0B       		.uleb128 0xb
 14206 01ae 3B       		.uleb128 0x3b
 14207 01af 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 304


 14208 01b0 49       		.uleb128 0x49
 14209 01b1 13       		.uleb128 0x13
 14210 01b2 02       		.uleb128 0x2
 14211 01b3 18       		.uleb128 0x18
 14212 01b4 00       		.byte	0
 14213 01b5 00       		.byte	0
 14214 01b6 20       		.uleb128 0x20
 14215 01b7 0B       		.uleb128 0xb
 14216 01b8 01       		.byte	0x1
 14217 01b9 55       		.uleb128 0x55
 14218 01ba 17       		.uleb128 0x17
 14219 01bb 00       		.byte	0
 14220 01bc 00       		.byte	0
 14221 01bd 21       		.uleb128 0x21
 14222 01be 2E       		.uleb128 0x2e
 14223 01bf 01       		.byte	0x1
 14224 01c0 3F       		.uleb128 0x3f
 14225 01c1 19       		.uleb128 0x19
 14226 01c2 03       		.uleb128 0x3
 14227 01c3 0E       		.uleb128 0xe
 14228 01c4 3A       		.uleb128 0x3a
 14229 01c5 0B       		.uleb128 0xb
 14230 01c6 3B       		.uleb128 0x3b
 14231 01c7 05       		.uleb128 0x5
 14232 01c8 27       		.uleb128 0x27
 14233 01c9 19       		.uleb128 0x19
 14234 01ca 11       		.uleb128 0x11
 14235 01cb 01       		.uleb128 0x1
 14236 01cc 12       		.uleb128 0x12
 14237 01cd 06       		.uleb128 0x6
 14238 01ce 40       		.uleb128 0x40
 14239 01cf 18       		.uleb128 0x18
 14240 01d0 9742     		.uleb128 0x2117
 14241 01d2 19       		.uleb128 0x19
 14242 01d3 01       		.uleb128 0x1
 14243 01d4 13       		.uleb128 0x13
 14244 01d5 00       		.byte	0
 14245 01d6 00       		.byte	0
 14246 01d7 22       		.uleb128 0x22
 14247 01d8 0B       		.uleb128 0xb
 14248 01d9 01       		.byte	0x1
 14249 01da 55       		.uleb128 0x55
 14250 01db 17       		.uleb128 0x17
 14251 01dc 01       		.uleb128 0x1
 14252 01dd 13       		.uleb128 0x13
 14253 01de 00       		.byte	0
 14254 01df 00       		.byte	0
 14255 01e0 23       		.uleb128 0x23
 14256 01e1 2E       		.uleb128 0x2e
 14257 01e2 01       		.byte	0x1
 14258 01e3 3F       		.uleb128 0x3f
 14259 01e4 19       		.uleb128 0x19
 14260 01e5 03       		.uleb128 0x3
 14261 01e6 0E       		.uleb128 0xe
 14262 01e7 3A       		.uleb128 0x3a
 14263 01e8 0B       		.uleb128 0xb
 14264 01e9 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 305


 14265 01ea 05       		.uleb128 0x5
 14266 01eb 11       		.uleb128 0x11
 14267 01ec 01       		.uleb128 0x1
 14268 01ed 12       		.uleb128 0x12
 14269 01ee 06       		.uleb128 0x6
 14270 01ef 40       		.uleb128 0x40
 14271 01f0 18       		.uleb128 0x18
 14272 01f1 9642     		.uleb128 0x2116
 14273 01f3 19       		.uleb128 0x19
 14274 01f4 01       		.uleb128 0x1
 14275 01f5 13       		.uleb128 0x13
 14276 01f6 00       		.byte	0
 14277 01f7 00       		.byte	0
 14278 01f8 24       		.uleb128 0x24
 14279 01f9 05       		.uleb128 0x5
 14280 01fa 00       		.byte	0
 14281 01fb 03       		.uleb128 0x3
 14282 01fc 08       		.uleb128 0x8
 14283 01fd 3A       		.uleb128 0x3a
 14284 01fe 0B       		.uleb128 0xb
 14285 01ff 3B       		.uleb128 0x3b
 14286 0200 05       		.uleb128 0x5
 14287 0201 49       		.uleb128 0x49
 14288 0202 13       		.uleb128 0x13
 14289 0203 02       		.uleb128 0x2
 14290 0204 18       		.uleb128 0x18
 14291 0205 00       		.byte	0
 14292 0206 00       		.byte	0
 14293 0207 25       		.uleb128 0x25
 14294 0208 34       		.uleb128 0x34
 14295 0209 00       		.byte	0
 14296 020a 03       		.uleb128 0x3
 14297 020b 08       		.uleb128 0x8
 14298 020c 3A       		.uleb128 0x3a
 14299 020d 0B       		.uleb128 0xb
 14300 020e 3B       		.uleb128 0x3b
 14301 020f 05       		.uleb128 0x5
 14302 0210 49       		.uleb128 0x49
 14303 0211 13       		.uleb128 0x13
 14304 0212 00       		.byte	0
 14305 0213 00       		.byte	0
 14306 0214 26       		.uleb128 0x26
 14307 0215 2E       		.uleb128 0x2e
 14308 0216 01       		.byte	0x1
 14309 0217 3F       		.uleb128 0x3f
 14310 0218 19       		.uleb128 0x19
 14311 0219 03       		.uleb128 0x3
 14312 021a 0E       		.uleb128 0xe
 14313 021b 3A       		.uleb128 0x3a
 14314 021c 0B       		.uleb128 0xb
 14315 021d 3B       		.uleb128 0x3b
 14316 021e 05       		.uleb128 0x5
 14317 021f 11       		.uleb128 0x11
 14318 0220 01       		.uleb128 0x1
 14319 0221 12       		.uleb128 0x12
 14320 0222 06       		.uleb128 0x6
 14321 0223 40       		.uleb128 0x40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 306


 14322 0224 18       		.uleb128 0x18
 14323 0225 9742     		.uleb128 0x2117
 14324 0227 19       		.uleb128 0x19
 14325 0228 01       		.uleb128 0x1
 14326 0229 13       		.uleb128 0x13
 14327 022a 00       		.byte	0
 14328 022b 00       		.byte	0
 14329 022c 27       		.uleb128 0x27
 14330 022d 26       		.uleb128 0x26
 14331 022e 00       		.byte	0
 14332 022f 49       		.uleb128 0x49
 14333 0230 13       		.uleb128 0x13
 14334 0231 00       		.byte	0
 14335 0232 00       		.byte	0
 14336 0233 28       		.uleb128 0x28
 14337 0234 34       		.uleb128 0x34
 14338 0235 00       		.byte	0
 14339 0236 03       		.uleb128 0x3
 14340 0237 0E       		.uleb128 0xe
 14341 0238 3A       		.uleb128 0x3a
 14342 0239 0B       		.uleb128 0xb
 14343 023a 3B       		.uleb128 0x3b
 14344 023b 05       		.uleb128 0x5
 14345 023c 49       		.uleb128 0x49
 14346 023d 13       		.uleb128 0x13
 14347 023e 3F       		.uleb128 0x3f
 14348 023f 19       		.uleb128 0x19
 14349 0240 3C       		.uleb128 0x3c
 14350 0241 19       		.uleb128 0x19
 14351 0242 00       		.byte	0
 14352 0243 00       		.byte	0
 14353 0244 00       		.byte	0
 14354              		.section	.debug_aranges,"",%progbits
 14355 0000 94000000 		.4byte	0x94
 14356 0004 0200     		.2byte	0x2
 14357 0006 00000000 		.4byte	.Ldebug_info0
 14358 000a 04       		.byte	0x4
 14359 000b 00       		.byte	0
 14360 000c 0000     		.2byte	0
 14361 000e 0000     		.2byte	0
 14362 0010 00000000 		.4byte	.LFB64
 14363 0014 18000000 		.4byte	.LFE64-.LFB64
 14364 0018 00000000 		.4byte	.LFB65
 14365 001c 20000000 		.4byte	.LFE65-.LFB65
 14366 0020 00000000 		.4byte	.LFB66
 14367 0024 0C020000 		.4byte	.LFE66-.LFB66
 14368 0028 00000000 		.4byte	.LFB67
 14369 002c D0040000 		.4byte	.LFE67-.LFB67
 14370 0030 00000000 		.4byte	.LFB68
 14371 0034 CC050000 		.4byte	.LFE68-.LFB68
 14372 0038 00000000 		.4byte	.LFB69
 14373 003c 34030000 		.4byte	.LFE69-.LFB69
 14374 0040 00000000 		.4byte	.LFB70
 14375 0044 B0010000 		.4byte	.LFE70-.LFB70
 14376 0048 00000000 		.4byte	.LFB71
 14377 004c 0C070000 		.4byte	.LFE71-.LFB71
 14378 0050 00000000 		.4byte	.LFB72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 307


 14379 0054 70090000 		.4byte	.LFE72-.LFB72
 14380 0058 00000000 		.4byte	.LFB73
 14381 005c DC000000 		.4byte	.LFE73-.LFB73
 14382 0060 00000000 		.4byte	.LFB74
 14383 0064 00080000 		.4byte	.LFE74-.LFB74
 14384 0068 00000000 		.4byte	.LFB75
 14385 006c 18130000 		.4byte	.LFE75-.LFB75
 14386 0070 00000000 		.4byte	.LFB76
 14387 0074 0C010000 		.4byte	.LFE76-.LFB76
 14388 0078 00000000 		.4byte	.LFB77
 14389 007c A8000000 		.4byte	.LFE77-.LFB77
 14390 0080 00000000 		.4byte	.LFB78
 14391 0084 58060000 		.4byte	.LFE78-.LFB78
 14392 0088 00000000 		.4byte	.LFB79
 14393 008c 08010000 		.4byte	.LFE79-.LFB79
 14394 0090 00000000 		.4byte	0
 14395 0094 00000000 		.4byte	0
 14396              		.section	.debug_ranges,"",%progbits
 14397              	.Ldebug_ranges0:
 14398 0000 68010000 		.4byte	.LBB3
 14399 0004 AA010000 		.4byte	.LBE3
 14400 0008 AC010000 		.4byte	.LBB4
 14401 000c F2010000 		.4byte	.LBE4
 14402 0010 00000000 		.4byte	0
 14403 0014 00000000 		.4byte	0
 14404 0018 3A000000 		.4byte	.LBB5
 14405 001c 40010000 		.4byte	.LBE5
 14406 0020 42010000 		.4byte	.LBB6
 14407 0024 BC010000 		.4byte	.LBE6
 14408 0028 00000000 		.4byte	0
 14409 002c 00000000 		.4byte	0
 14410 0030 BE010000 		.4byte	.LBB7
 14411 0034 20030000 		.4byte	.LBE7
 14412 0038 22030000 		.4byte	.LBB8
 14413 003c 24030000 		.4byte	.LBE8
 14414 0040 00000000 		.4byte	0
 14415 0044 00000000 		.4byte	0
 14416 0048 00000000 		.4byte	.LFB64
 14417 004c 18000000 		.4byte	.LFE64
 14418 0050 00000000 		.4byte	.LFB65
 14419 0054 20000000 		.4byte	.LFE65
 14420 0058 00000000 		.4byte	.LFB66
 14421 005c 0C020000 		.4byte	.LFE66
 14422 0060 00000000 		.4byte	.LFB67
 14423 0064 D0040000 		.4byte	.LFE67
 14424 0068 00000000 		.4byte	.LFB68
 14425 006c CC050000 		.4byte	.LFE68
 14426 0070 00000000 		.4byte	.LFB69
 14427 0074 34030000 		.4byte	.LFE69
 14428 0078 00000000 		.4byte	.LFB70
 14429 007c B0010000 		.4byte	.LFE70
 14430 0080 00000000 		.4byte	.LFB71
 14431 0084 0C070000 		.4byte	.LFE71
 14432 0088 00000000 		.4byte	.LFB72
 14433 008c 70090000 		.4byte	.LFE72
 14434 0090 00000000 		.4byte	.LFB73
 14435 0094 DC000000 		.4byte	.LFE73
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 308


 14436 0098 00000000 		.4byte	.LFB74
 14437 009c 00080000 		.4byte	.LFE74
 14438 00a0 00000000 		.4byte	.LFB75
 14439 00a4 18130000 		.4byte	.LFE75
 14440 00a8 00000000 		.4byte	.LFB76
 14441 00ac 0C010000 		.4byte	.LFE76
 14442 00b0 00000000 		.4byte	.LFB77
 14443 00b4 A8000000 		.4byte	.LFE77
 14444 00b8 00000000 		.4byte	.LFB78
 14445 00bc 58060000 		.4byte	.LFE78
 14446 00c0 00000000 		.4byte	.LFB79
 14447 00c4 08010000 		.4byte	.LFE79
 14448 00c8 00000000 		.4byte	0
 14449 00cc 00000000 		.4byte	0
 14450              		.section	.debug_line,"",%progbits
 14451              	.Ldebug_line0:
 14452 0000 4D0C0000 		.section	.debug_str,"MS",%progbits,1
 14452      0200AC01 
 14452      00000201 
 14452      FB0E0D00 
 14452      01010101 
 14453              	.LASF56:
 14454 0000 656D675F 		.ascii	"emg_act_counter\000"
 14454      6163745F 
 14454      636F756E 
 14454      74657200 
 14455              	.LASF24:
 14456 0010 73697A65 		.ascii	"sizetype\000"
 14456      74797065 
 14456      00
 14457              	.LASF63:
 14458 0019 706F7765 		.ascii	"power_cycles\000"
 14458      725F6379 
 14458      636C6573 
 14458      00
 14459              	.LASF274:
 14460 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14460      6379636C 
 14460      655F7374 
 14460      61747573 
 14460      00
 14461              	.LASF150:
 14462 0037 77726973 		.ascii	"wrist_direction_association\000"
 14462      745F6469 
 14462      72656374 
 14462      696F6E5F 
 14462      6173736F 
 14463              	.LASF30:
 14464 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14464      545F4D4F 
 14464      44455F45 
 14464      4D475F46 
 14464      4346535F 
 14465              	.LASF122:
 14466 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14466      5F414443 
 14466      5F73656E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 309


 14466      736F7273 
 14466      5F706F72 
 14467              	.LASF155:
 14468 0086 75736572 		.ascii	"user\000"
 14468      00
 14469              	.LASF10:
 14470 008b 696E7433 		.ascii	"int32_t\000"
 14470      325F7400 
 14471              	.LASF315:
 14472 0093 675F7278 		.ascii	"g_rx\000"
 14472      00
 14473              	.LASF251:
 14474 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14474      74696D65 
 14474      5F657865 
 14474      63757465 
 14474      00
 14475              	.LASF51:
 14476 00a9 73745F64 		.ascii	"st_data\000"
 14476      61746100 
 14477              	.LASF61:
 14478 00b1 746F7461 		.ascii	"total_runtime\000"
 14478      6C5F7275 
 14478      6E74696D 
 14478      6500
 14479              	.LASF13:
 14480 00bf 75696E74 		.ascii	"uint32\000"
 14480      333200
 14481              	.LASF236:
 14482 00c6 6E5F6C69 		.ascii	"n_line\000"
 14482      6E6500
 14483              	.LASF156:
 14484 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14484      73706563 
 14484      00
 14485              	.LASF90:
 14486 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14486      6C696D5F 
 14486      696E6600 
 14487              	.LASF341:
 14488 00e2 74656E73 		.ascii	"tension_valid\000"
 14488      696F6E5F 
 14488      76616C69 
 14488      6400
 14489              	.LASF211:
 14490 00f0 6572725F 		.ascii	"err_joy_1\000"
 14490      6A6F795F 
 14490      3100
 14491              	.LASF187:
 14492 00fa 73746174 		.ascii	"state\000"
 14492      6500
 14493              	.LASF343:
 14494 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14494      65735F69 
 14494      6E746572 
 14494      72757074 
 14494      5F666C61 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 310


 14495              	.LASF284:
 14496 0116 62696E5F 		.ascii	"bin_max\000"
 14496      6D617800 
 14497              	.LASF301:
 14498 011e 61646472 		.ascii	"addr_start_c\000"
 14498      5F737461 
 14498      72745F63 
 14498      00
 14499              	.LASF29:
 14500 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14500      545F4D4F 
 14500      44455F45 
 14500      4D475F46 
 14500      43465300 
 14501              	.LASF94:
 14502 013f 63757272 		.ascii	"curr_lookup\000"
 14502      5F6C6F6F 
 14502      6B757000 
 14503              	.LASF220:
 14504 014b 70776D5F 		.ascii	"pwm_input\000"
 14504      696E7075 
 14504      7400
 14505              	.LASF59:
 14506 0155 72657374 		.ascii	"rest_counter\000"
 14506      5F636F75 
 14506      6E746572 
 14506      00
 14507              	.LASF137:
 14508 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14508      41535445 
 14508      525F7370 
 14508      656300
 14509              	.LASF28:
 14510 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14510      545F4D4F 
 14510      44455F45 
 14510      4D475F49 
 14510      4E544547 
 14511              	.LASF267:
 14512 0189 765F636F 		.ascii	"v_count\000"
 14512      756E7400 
 14513              	.LASF192:
 14514 0191 72785F64 		.ascii	"rx_data\000"
 14514      61746100 
 14515              	.LASF255:
 14516 0199 7676765F 		.ascii	"vvv_value\000"
 14516      76616C75 
 14516      6500
 14517              	.LASF14:
 14518 01a3 696E7438 		.ascii	"int8\000"
 14518      00
 14519              	.LASF197:
 14520 01a8 696E666F 		.ascii	"info_\000"
 14520      5F00
 14521              	.LASF323:
 14522 01ae 66696C74 		.ascii	"filt_emg\000"
 14522      5F656D67 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 311


 14522      00
 14523              	.LASF109:
 14524 01b7 73745F65 		.ascii	"st_emg\000"
 14524      6D6700
 14525              	.LASF57:
 14526 01be 706F7369 		.ascii	"position_hist\000"
 14526      74696F6E 
 14526      5F686973 
 14526      7400
 14527              	.LASF179:
 14528 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14528      4152455F 
 14528      44415441 
 14528      00
 14529              	.LASF163:
 14530 01d9 74656D70 		.ascii	"temp_value\000"
 14530      5F76616C 
 14530      756500
 14531              	.LASF281:
 14532 01e4 7468725F 		.ascii	"thr_pos\000"
 14532      706F7300 
 14533              	.LASF147:
 14534 01ec 73745F57 		.ascii	"st_WR_spec\000"
 14534      525F7370 
 14534      656300
 14535              	.LASF213:
 14536 01f7 6572725F 		.ascii	"err_joy_2\000"
 14536      6A6F795F 
 14536      3200
 14537              	.LASF54:
 14538 0201 72656164 		.ascii	"ready\000"
 14538      7900
 14539              	.LASF106:
 14540 0207 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14540      6964785F 
 14540      7573655F 
 14540      666F725F 
 14540      636F6E74 
 14541              	.LASF166:
 14542 021f 6761696E 		.ascii	"gain\000"
 14542      00
 14543              	.LASF67:
 14544 0224 73745F64 		.ascii	"st_device\000"
 14544      65766963 
 14544      6500
 14545              	.LASF27:
 14546 022e 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14546      545F4D4F 
 14546      44455F45 
 14546      4D475F50 
 14546      524F504F 
 14547              	.LASF72:
 14548 024a 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14548      326E645F 
 14548      6D6F746F 
 14548      725F666C 
 14548      616700
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 312


 14549              	.LASF260:
 14550 025d 55445F63 		.ascii	"UD_counter\000"
 14550      6F756E74 
 14550      657200
 14551              	.LASF64:
 14552 0268 65786365 		.ascii	"excessive_signal_activity\000"
 14552      73736976 
 14552      655F7369 
 14552      676E616C 
 14552      5F616374 
 14553              	.LASF175:
 14554 0282 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14554      414E445F 
 14554      4D45414E 
 14554      00
 14555              	.LASF116:
 14556 028f 72656164 		.ascii	"read_imu_flag\000"
 14556      5F696D75 
 14556      5F666C61 
 14556      6700
 14557              	.LASF124:
 14558 029d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14558      72645F45 
 14558      4D475F68 
 14558      6973746F 
 14558      72795F6F 
 14559              	.LASF264:
 14560 02b6 66697273 		.ascii	"first_tension_valid\000"
 14560      745F7465 
 14560      6E73696F 
 14560      6E5F7661 
 14560      6C696400 
 14561              	.LASF325:
 14562 02ca 74696D65 		.ascii	"timer_value\000"
 14562      725F7661 
 14562      6C756500 
 14563              	.LASF4:
 14564 02d6 6C6F6E67 		.ascii	"long int\000"
 14564      20696E74 
 14564      00
 14565              	.LASF153:
 14566 02df 756E7573 		.ascii	"unused_bytes1\000"
 14566      65645F62 
 14566      79746573 
 14566      3100
 14567              	.LASF200:
 14568 02ed 454D475F 		.ascii	"EMG_history_info_\000"
 14568      68697374 
 14568      6F72795F 
 14568      696E666F 
 14568      5F00
 14569              	.LASF225:
 14570 02ff 53485F45 		.ascii	"SH_ENC_L\000"
 14570      4E435F4C 
 14570      00
 14571              	.LASF71:
 14572 0308 72657365 		.ascii	"reset_counters\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 313


 14572      745F636F 
 14572      756E7465 
 14572      727300
 14573              	.LASF279:
 14574 0317 62696E5F 		.ascii	"bin_threshold\000"
 14574      74687265 
 14574      73686F6C 
 14574      6400
 14575              	.LASF127:
 14576 0325 75736572 		.ascii	"user_emg\000"
 14576      5F656D67 
 14576      00
 14577              	.LASF250:
 14578 032e 73616665 		.ascii	"safe_startup_motor_activation\000"
 14578      5F737461 
 14578      72747570 
 14578      5F6D6F74 
 14578      6F725F61 
 14579              	.LASF66:
 14580 034c 756E7573 		.ascii	"unused_bytes\000"
 14580      65645F62 
 14580      79746573 
 14580      00
 14581              	.LASF159:
 14582 0359 61636365 		.ascii	"accel_value\000"
 14582      6C5F7661 
 14582      6C756500 
 14583              	.LASF313:
 14584 0365 675F6164 		.ascii	"g_adc_measOld\000"
 14584      635F6D65 
 14584      61734F6C 
 14584      6400
 14585              	.LASF239:
 14586 0373 6175785F 		.ascii	"aux_encoder\000"
 14586      656E636F 
 14586      64657200 
 14587              	.LASF55:
 14588 037f 73745F63 		.ascii	"st_counters\000"
 14588      6F756E74 
 14588      65727300 
 14589              	.LASF224:
 14590 038b 53485F4D 		.ascii	"SH_MOT\000"
 14590      4F5400
 14591              	.LASF324:
 14592 0392 66696C74 		.ascii	"filt_detect_pc\000"
 14592      5F646574 
 14592      6563745F 
 14592      706300
 14593              	.LASF17:
 14594 03a1 666C6F61 		.ascii	"float32\000"
 14594      74333200 
 14595              	.LASF235:
 14596 03a9 656E636F 		.ascii	"encoder_reading_SPI\000"
 14596      6465725F 
 14596      72656164 
 14596      696E675F 
 14596      53504900 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 314


 14597              	.LASF248:
 14598 03bd 6572726F 		.ascii	"error\000"
 14598      7200
 14599              	.LASF182:
 14600 03c3 57524954 		.ascii	"WRITE_END\000"
 14600      455F454E 
 14600      4400
 14601              	.LASF261:
 14602 03cd 4C525F63 		.ascii	"LR_counter\000"
 14602      6F756E74 
 14602      657200
 14603              	.LASF355:
 14604 03d8 706F735F 		.ascii	"pos_reconstruct\000"
 14604      7265636F 
 14604      6E737472 
 14604      75637400 
 14605              	.LASF269:
 14606 03e8 70776D5F 		.ascii	"pwm_limit_search\000"
 14606      6C696D69 
 14606      745F7365 
 14606      61726368 
 14606      00
 14607              	.LASF0:
 14608 03f9 7369676E 		.ascii	"signed char\000"
 14608      65642063 
 14608      68617200 
 14609              	.LASF126:
 14610 0405 75736572 		.ascii	"user_code_string\000"
 14610      5F636F64 
 14610      655F7374 
 14610      72696E67 
 14610      00
 14611              	.LASF138:
 14612 0416 6D617374 		.ascii	"master_mode_active\000"
 14612      65725F6D 
 14612      6F64655F 
 14612      61637469 
 14612      766500
 14613              	.LASF167:
 14614 0429 73745F63 		.ascii	"st_calib\000"
 14614      616C6962 
 14614      00
 14615              	.LASF207:
 14616 0432 6572725F 		.ascii	"err_emg_1\000"
 14616      656D675F 
 14616      3100
 14617              	.LASF208:
 14618 043c 6572725F 		.ascii	"err_emg_2\000"
 14618      656D675F 
 14618      3200
 14619              	.LASF114:
 14620 0446 73776974 		.ascii	"switch_emg\000"
 14620      63685F65 
 14620      6D6700
 14621              	.LASF337:
 14622 0451 656D675F 		.ascii	"emg_2_status\000"
 14622      325F7374 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 315


 14622      61747573 
 14622      00
 14623              	.LASF349:
 14624 045e 4144435F 		.ascii	"ADC_buf\000"
 14624      62756600 
 14625              	.LASF342:
 14626 0466 696E7465 		.ascii	"interrupt_flag\000"
 14626      72727570 
 14626      745F666C 
 14626      616700
 14627              	.LASF290:
 14628 0475 73746570 		.ascii	"step\000"
 14628      00
 14629              	.LASF227:
 14630 047a 63757272 		.ascii	"curr_error_sum\000"
 14630      5F657272 
 14630      6F725F73 
 14630      756D00
 14631              	.LASF1:
 14632 0489 756E7369 		.ascii	"unsigned char\000"
 14632      676E6564 
 14632      20636861 
 14632      7200
 14633              	.LASF100:
 14634 0497 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14634      72657665 
 14634      72735F6D 
 14634      6F746F72 
 14634      5F666C61 
 14635              	.LASF299:
 14636 04ad 726F775F 		.ascii	"row_start\000"
 14636      73746172 
 14636      7400
 14637              	.LASF346:
 14638 04b7 666F7263 		.ascii	"forced_open\000"
 14638      65645F6F 
 14638      70656E00 
 14639              	.LASF243:
 14640 04c3 73706565 		.ascii	"speed_encoder\000"
 14640      645F656E 
 14640      636F6465 
 14640      7200
 14641              	.LASF308:
 14642 04d1 675F7265 		.ascii	"g_refNew\000"
 14642      664E6577 
 14642      00
 14643              	.LASF288:
 14644 04da 63757272 		.ascii	"curr_off\000"
 14644      5F6F6666 
 14644      00
 14645              	.LASF70:
 14646 04e3 72696768 		.ascii	"right_left\000"
 14646      745F6C65 
 14646      667400
 14647              	.LASF98:
 14648 04ee 656E636F 		.ascii	"encoder_line\000"
 14648      6465725F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 316


 14648      6C696E65 
 14648      00
 14649              	.LASF336:
 14650 04fb 656D675F 		.ascii	"emg_1_status\000"
 14650      315F7374 
 14650      61747573 
 14650      00
 14651              	.LASF158:
 14652 0508 666C6167 		.ascii	"flags\000"
 14652      7300
 14653              	.LASF206:
 14654 050e 68616E64 		.ascii	"handle_value\000"
 14654      6C655F76 
 14654      616C7565 
 14654      00
 14655              	.LASF50:
 14656 051b 70726573 		.ascii	"pressure\000"
 14656      73757265 
 14656      00
 14657              	.LASF20:
 14658 0524 63686172 		.ascii	"char\000"
 14658      00
 14659              	.LASF265:
 14660 0529 64657465 		.ascii	"detect_power_cycle_prev\000"
 14660      63745F70 
 14660      6F776572 
 14660      5F637963 
 14660      6C655F70 
 14661              	.LASF93:
 14662 0541 6D61785F 		.ascii	"max_step_pos\000"
 14662      73746570 
 14662      5F706F73 
 14662      00
 14663              	.LASF351:
 14664 054e 70776D5F 		.ascii	"pwm_sign\000"
 14664      7369676E 
 14664      00
 14665              	.LASF233:
 14666 0557 6D6F746F 		.ascii	"motor_control_generic\000"
 14666      725F636F 
 14666      6E74726F 
 14666      6C5F6765 
 14666      6E657269 
 14667              	.LASF359:
 14668 056d 675F696D 		.ascii	"g_imu\000"
 14668      7500
 14669              	.LASF322:
 14670 0573 66696C74 		.ascii	"filt_vel\000"
 14670      5F76656C 
 14670      00
 14671              	.LASF306:
 14672 057c 675F7265 		.ascii	"g_ref_vibrotactile\000"
 14672      665F7669 
 14672      62726F74 
 14672      61637469 
 14672      6C6500
 14673              	.LASF99:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 317


 14674 058f 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14674      72617465 
 14674      5F6C696D 
 14674      69746572 
 14674      00
 14675              	.LASF79:
 14676 05a0 6B5F645F 		.ascii	"k_d_c\000"
 14676      6300
 14677              	.LASF328:
 14678 05a6 666C6167 		.ascii	"flag_master\000"
 14678      5F6D6173 
 14678      74657200 
 14679              	.LASF178:
 14680 05b2 6164635F 		.ascii	"adc_status\000"
 14680      73746174 
 14680      757300
 14681              	.LASF49:
 14682 05bd 73745F66 		.ascii	"st_fb_meas\000"
 14682      625F6D65 
 14682      617300
 14683              	.LASF104:
 14684 05c8 6D5F6D75 		.ascii	"m_mult\000"
 14684      6C7400
 14685              	.LASF78:
 14686 05cf 6B5F695F 		.ascii	"k_i_c\000"
 14686      6300
 14687              	.LASF231:
 14688 05d5 6D6F746F 		.ascii	"motor_dir\000"
 14688      725F6469 
 14688      7200
 14689              	.LASF283:
 14690 05df 62696E5F 		.ascii	"bin_st\000"
 14690      737400
 14691              	.LASF185:
 14692 05e6 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14692      52533438 
 14692      355F5258 
 14692      5F457849 
 14692      6E746572 
 14693              	.LASF91:
 14694 05ff 706F735F 		.ascii	"pos_lim_sup\000"
 14694      6C696D5F 
 14694      73757000 
 14695              	.LASF165:
 14696 060b 6F6C645F 		.ascii	"old_value\000"
 14696      76616C75 
 14696      6500
 14697              	.LASF112:
 14698 0615 656D675F 		.ascii	"emg_speed\000"
 14698      73706565 
 14698      6400
 14699              	.LASF131:
 14700 061f 72657374 		.ascii	"rest_vel\000"
 14700      5F76656C 
 14700      00
 14701              	.LASF172:
 14702 0628 4E4F524D 		.ascii	"NORMAL\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 318


 14702      414C00
 14703              	.LASF219:
 14704 062f 6D6F746F 		.ascii	"motor_control_SH\000"
 14704      725F636F 
 14704      6E74726F 
 14704      6C5F5348 
 14704      00
 14705              	.LASF357:
 14706 0640 7046696C 		.ascii	"pFile\000"
 14706      6500
 14707              	.LASF226:
 14708 0646 706F735F 		.ascii	"pos_error_sum\000"
 14708      6572726F 
 14708      725F7375 
 14708      6D00
 14709              	.LASF123:
 14710 0654 4144435F 		.ascii	"ADC_conf\000"
 14710      636F6E66 
 14710      00
 14711              	.LASF332:
 14712 065d 6465765F 		.ascii	"dev_tension_f\000"
 14712      74656E73 
 14712      696F6E5F 
 14712      6600
 14713              	.LASF146:
 14714 066b 73745F72 		.ascii	"st_ref_vibrotactile\000"
 14714      65665F76 
 14714      6962726F 
 14714      74616374 
 14714      696C6500 
 14715              	.LASF81:
 14716 067f 6B5F695F 		.ascii	"k_i_dl\000"
 14716      646C00
 14717              	.LASF52:
 14718 0686 62756666 		.ascii	"buffer\000"
 14718      657200
 14719              	.LASF83:
 14720 068d 6B5F705F 		.ascii	"k_p_c_dl\000"
 14720      635F646C 
 14720      00
 14721              	.LASF193:
 14722 0696 72785F64 		.ascii	"rx_data_type\000"
 14722      6174615F 
 14722      74797065 
 14722      00
 14723              	.LASF360:
 14724 06a3 675F696D 		.ascii	"g_imuNew\000"
 14724      754E6577 
 14724      00
 14725              	.LASF170:
 14726 06ac 73706565 		.ascii	"speed\000"
 14726      6400
 14727              	.LASF232:
 14728 06b2 706F7369 		.ascii	"position_counter\000"
 14728      74696F6E 
 14728      5F636F75 
 14728      6E746572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 319


 14728      00
 14729              	.LASF292:
 14730 06c3 74696D65 		.ascii	"timer_value_e\000"
 14730      725F7661 
 14730      6C75655F 
 14730      6500
 14731              	.LASF188:
 14732 06d1 64617461 		.ascii	"data_packet_index\000"
 14732      5F706163 
 14732      6B65745F 
 14732      696E6465 
 14732      7800
 14733              	.LASF190:
 14734 06e3 64617461 		.ascii	"data_packet_buffer\000"
 14734      5F706163 
 14734      6B65745F 
 14734      62756666 
 14734      657200
 14735              	.LASF204:
 14736 06f6 73745F72 		.ascii	"st_ref_p\000"
 14736      65665F70 
 14736      00
 14737              	.LASF335:
 14738 06ff 6379636C 		.ascii	"cycles_status\000"
 14738      65735F73 
 14738      74617475 
 14738      7300
 14739              	.LASF195:
 14740 070d 636F756E 		.ascii	"counter_calibration\000"
 14740      7465725F 
 14740      63616C69 
 14740      62726174 
 14740      696F6E00 
 14741              	.LASF310:
 14742 0721 675F6D65 		.ascii	"g_meas\000"
 14742      617300
 14743              	.LASF291:
 14744 0728 74696D65 		.ascii	"timer_value_s\000"
 14744      725F7661 
 14744      6C75655F 
 14744      7300
 14745              	.LASF354:
 14746 0736 456E636F 		.ascii	"Encoder_Check\000"
 14746      6465725F 
 14746      43686563 
 14746      6B00
 14747              	.LASF247:
 14748 0744 636F6D70 		.ascii	"comp_value_encoder\000"
 14748      5F76616C 
 14748      75655F65 
 14748      6E636F64 
 14748      657200
 14749              	.LASF295:
 14750 0757 73746172 		.ascii	"start_emg_pos\000"
 14750      745F656D 
 14750      675F706F 
 14750      7300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 320


 14751              	.LASF352:
 14752 0765 64617461 		.ascii	"data_encoder_raw\000"
 14752      5F656E63 
 14752      6F646572 
 14752      5F726177 
 14752      00
 14753              	.LASF307:
 14754 0776 675F7265 		.ascii	"g_ref\000"
 14754      6600
 14755              	.LASF25:
 14756 077c 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14756      545F4D4F 
 14756      44455F45 
 14756      58544552 
 14756      4E414C00 
 14757              	.LASF238:
 14758 0790 696E6465 		.ascii	"index\000"
 14758      7800
 14759              	.LASF142:
 14760 0796 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14760      6D756D5F 
 14760      70726573 
 14760      73757265 
 14760      5F6B5061 
 14761              	.LASF132:
 14762 07ab 72657374 		.ascii	"rest_position_flag\000"
 14762      5F706F73 
 14762      6974696F 
 14762      6E5F666C 
 14762      616700
 14763              	.LASF134:
 14764 07be 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14764      7469636B 
 14764      5F636C6F 
 14764      73757265 
 14764      5F737065 
 14765              	.LASF84:
 14766 07d5 6B5F695F 		.ascii	"k_i_c_dl\000"
 14766      635F646C 
 14766      00
 14767              	.LASF364:
 14768 07de 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 14768      73657273 
 14768      5C6D676E 
 14768      6F63636F 
 14768      5C446F63 
 14769 080b 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 14769      485F5649 
 14769      4245535C 
 14769      46575F57 
 14769      65617261 
 14770 083c 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 14770      56494245 
 14770      535F536F 
 14770      636B6574 
 14770      2E637964 
 14771              	.LASF194:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 321


 14772 0853 7061636B 		.ascii	"package_count\000"
 14772      6167655F 
 14772      636F756E 
 14772      7400
 14773              	.LASF38:
 14774 0861 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14774      5F414E44 
 14774      5F504F53 
 14774      5F434F4E 
 14774      54524F4C 
 14775              	.LASF168:
 14776 0876 656E6162 		.ascii	"enabled\000"
 14776      6C656400 
 14777              	.LASF5:
 14778 087e 6C6F6E67 		.ascii	"long unsigned int\000"
 14778      20756E73 
 14778      69676E65 
 14778      6420696E 
 14778      7400
 14779              	.LASF358:
 14780 0890 70454D47 		.ascii	"pEMGHFile\000"
 14780      4846696C 
 14780      6500
 14781              	.LASF180:
 14782 089a 57524954 		.ascii	"WRITE_CYCLES\000"
 14782      455F4359 
 14782      434C4553 
 14782      00
 14783              	.LASF136:
 14784 08a7 6A6F7973 		.ascii	"joystick_gains\000"
 14784      7469636B 
 14784      5F676169 
 14784      6E7300
 14785              	.LASF45:
 14786 08b6 686F6C64 		.ascii	"hold_curr\000"
 14786      5F637572 
 14786      7200
 14787              	.LASF31:
 14788 08c0 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14788      545F4D4F 
 14788      44455F4A 
 14788      4F595354 
 14788      49434B00 
 14789              	.LASF62:
 14790 08d4 746F7461 		.ascii	"total_time_rest\000"
 14790      6C5F7469 
 14790      6D655F72 
 14790      65737400 
 14791              	.LASF86:
 14792 08e4 61637469 		.ascii	"activ\000"
 14792      7600
 14793              	.LASF272:
 14794 08ea 6D696E5F 		.ascii	"min_tension\000"
 14794      74656E73 
 14794      696F6E00 
 14795              	.LASF347:
 14796 08f6 62617474 		.ascii	"battery_low_SoC\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 322


 14796      6572795F 
 14796      6C6F775F 
 14796      536F4300 
 14797              	.LASF203:
 14798 0906 6D6F746F 		.ascii	"motor_idx\000"
 14798      725F6964 
 14798      7800
 14799              	.LASF103:
 14800 0910 6D5F6F66 		.ascii	"m_off\000"
 14800      6600
 14801              	.LASF340:
 14802 0916 72657365 		.ascii	"reset_last_value_flag\000"
 14802      745F6C61 
 14802      73745F76 
 14802      616C7565 
 14802      5F666C61 
 14803              	.LASF162:
 14804 092c 71756174 		.ascii	"quat_value\000"
 14804      5F76616C 
 14804      756500
 14805              	.LASF129:
 14806 0937 72657374 		.ascii	"rest_pos\000"
 14806      5F706F73 
 14806      00
 14807              	.LASF40:
 14808 0940 63757272 		.ascii	"curr\000"
 14808      00
 14809              	.LASF181:
 14810 0945 57414954 		.ascii	"WAIT_QUERY\000"
 14810      5F515545 
 14810      525900
 14811              	.LASF96:
 14812 0950 696E7075 		.ascii	"input_mode\000"
 14812      745F6D6F 
 14812      646500
 14813              	.LASF36:
 14814 095b 434F4E54 		.ascii	"CONTROL_PWM\000"
 14814      524F4C5F 
 14814      50574D00 
 14815              	.LASF273:
 14816 0967 6379636C 		.ascii	"cycles_counter_update\000"
 14816      65735F63 
 14816      6F756E74 
 14816      65725F75 
 14816      70646174 
 14817              	.LASF144:
 14818 097d 76696272 		.ascii	"vibrotactile_feedback_active\000"
 14818      6F746163 
 14818      74696C65 
 14818      5F666565 
 14818      64626163 
 14819              	.LASF362:
 14820 099a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14820      43313120 
 14820      352E342E 
 14820      31203230 
 14820      31363036 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 323


 14821 09cd 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14821      20726576 
 14821      6973696F 
 14821      6E203233 
 14821      37373135 
 14822 0a00 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14822      66756E63 
 14822      74696F6E 
 14822      2D736563 
 14822      74696F6E 
 14823              	.LASF42:
 14824 0a28 73745F72 		.ascii	"st_ref\000"
 14824      656600
 14825              	.LASF326:
 14826 0a2f 74696D65 		.ascii	"timer_value0\000"
 14826      725F7661 
 14826      6C756530 
 14826      00
 14827              	.LASF128:
 14828 0a3c 73745F53 		.ascii	"st_SH_spec\000"
 14828      485F7370 
 14828      656300
 14829              	.LASF253:
 14830 0a47 765F7661 		.ascii	"v_value\000"
 14830      6C756500 
 14831              	.LASF318:
 14832 0a4f 63616C69 		.ascii	"calib\000"
 14832      6200
 14833              	.LASF140:
 14834 0a55 73745F46 		.ascii	"st_FB_spec\000"
 14834      425F7370 
 14834      656300
 14835              	.LASF6:
 14836 0a60 6C6F6E67 		.ascii	"long long int\000"
 14836      206C6F6E 
 14836      6720696E 
 14836      7400
 14837              	.LASF34:
 14838 0a6e 53485F63 		.ascii	"SH_control_mode\000"
 14838      6F6E7472 
 14838      6F6C5F6D 
 14838      6F646500 
 14839              	.LASF199:
 14840 0a7e 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14840      4E445F4D 
 14840      4F544F52 
 14840      5F494458 
 14840      00
 14841              	.LASF348:
 14842 0a8f 6368616E 		.ascii	"change_ext_ref_flag\000"
 14842      67655F65 
 14842      78745F72 
 14842      65665F66 
 14842      6C616700 
 14843              	.LASF19:
 14844 0aa3 646F7562 		.ascii	"double\000"
 14844      6C6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 324


 14845              	.LASF320:
 14846 0aaa 66696C74 		.ascii	"filt_curr_diff\000"
 14846      5F637572 
 14846      725F6469 
 14846      666600
 14847              	.LASF215:
 14848 0ab9 706F735F 		.ascii	"pos_sum\000"
 14848      73756D00 
 14849              	.LASF218:
 14850 0ac1 696E7465 		.ascii	"interrupt_manager\000"
 14850      72727570 
 14850      745F6D61 
 14850      6E616765 
 14850      7200
 14851              	.LASF102:
 14852 0ad3 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14852      7261775F 
 14852      72656164 
 14852      5F636F6E 
 14852      6600
 14853              	.LASF216:
 14854 0ae5 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14854      7574655F 
 14854      536F6674 
 14854      48616E64 
 14854      5F325F6D 
 14855              	.LASF171:
 14856 0b0d 72657065 		.ascii	"repetitions\000"
 14856      74697469 
 14856      6F6E7300 
 14857              	.LASF92:
 14858 0b19 6D61785F 		.ascii	"max_step_neg\000"
 14858      73746570 
 14858      5F6E6567 
 14858      00
 14859              	.LASF252:
 14860 0b26 636F756E 		.ascii	"count_startup_motor\000"
 14860      745F7374 
 14860      61727475 
 14860      705F6D6F 
 14860      746F7200 
 14861              	.LASF139:
 14862 0b3a 736C6176 		.ascii	"slave_ID\000"
 14862      655F4944 
 14862      00
 14863              	.LASF176:
 14864 0b43 57414954 		.ascii	"WAIT\000"
 14864      00
 14865              	.LASF18:
 14866 0b48 666C6F61 		.ascii	"float\000"
 14866      7400
 14867              	.LASF118:
 14868 0b4e 494D555F 		.ascii	"IMU_conf\000"
 14868      636F6E66 
 14868      00
 14869              	.LASF266:
 14870 0b57 636F756E 		.ascii	"count\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 325


 14870      7400
 14871              	.LASF46:
 14872 0b5d 73745F61 		.ascii	"st_adc_meas\000"
 14872      64635F6D 
 14872      65617300 
 14873              	.LASF277:
 14874 0b69 656D675F 		.ascii	"emg_excess_status\000"
 14874      65786365 
 14874      73735F73 
 14874      74617475 
 14874      7300
 14875              	.LASF303:
 14876 0b7b 6D5F6164 		.ascii	"m_addr\000"
 14876      647200
 14877              	.LASF317:
 14878 0b82 635F6D65 		.ascii	"c_mem\000"
 14878      6D00
 14879              	.LASF8:
 14880 0b88 756E7369 		.ascii	"unsigned int\000"
 14880      676E6564 
 14880      20696E74 
 14880      00
 14881              	.LASF282:
 14882 0b95 6D61785F 		.ascii	"max_pos\000"
 14882      706F7300 
 14883              	.LASF356:
 14884 0b9d 72657374 		.ascii	"rest_pos_curr_ref\000"
 14884      5F706F73 
 14884      5F637572 
 14884      725F7265 
 14884      6600
 14885              	.LASF152:
 14886 0baf 666C6167 		.ascii	"flag\000"
 14886      00
 14887              	.LASF97:
 14888 0bb4 636F6E74 		.ascii	"control_mode\000"
 14888      726F6C5F 
 14888      6D6F6465 
 14888      00
 14889              	.LASF21:
 14890 0bc1 63797374 		.ascii	"cystatus\000"
 14890      61747573 
 14890      00
 14891              	.LASF26:
 14892 0bca 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14892      545F4D4F 
 14892      44455F45 
 14892      4E434F44 
 14892      45523300 
 14893              	.LASF115:
 14894 0bde 73745F69 		.ascii	"st_imu\000"
 14894      6D7500
 14895              	.LASF210:
 14896 0be5 63757272 		.ascii	"current_emg\000"
 14896      656E745F 
 14896      656D6700 
 14897              	.LASF191:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 326


 14898 0bf1 72785F71 		.ascii	"rx_queue\000"
 14898      75657565 
 14898      00
 14899              	.LASF262:
 14900 0bfa 55445F6D 		.ascii	"UD_mean_value\000"
 14900      65616E5F 
 14900      76616C75 
 14900      6500
 14901              	.LASF237:
 14902 0c08 6173736F 		.ascii	"assoc_motor\000"
 14902      635F6D6F 
 14902      746F7200 
 14903              	.LASF47:
 14904 0c14 6164645F 		.ascii	"add_emg\000"
 14904      656D6700 
 14905              	.LASF223:
 14906 0c1c 695F7265 		.ascii	"i_ref\000"
 14906      6600
 14907              	.LASF110:
 14908 0c22 656D675F 		.ascii	"emg_threshold\000"
 14908      74687265 
 14908      73686F6C 
 14908      6400
 14909              	.LASF296:
 14910 0c30 73617665 		.ascii	"save_cycles_eeprom\000"
 14910      5F637963 
 14910      6C65735F 
 14910      65657072 
 14910      6F6D00
 14911              	.LASF107:
 14912 0c43 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14912      725F6861 
 14912      6E646C65 
 14912      5F726174 
 14912      696F00
 14913              	.LASF58:
 14914 0c56 63757272 		.ascii	"current_hist\000"
 14914      656E745F 
 14914      68697374 
 14914      00
 14915              	.LASF37:
 14916 0c63 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14916      524F4C5F 
 14916      43555252 
 14916      454E5400 
 14917              	.LASF23:
 14918 0c73 6C6F6E67 		.ascii	"long double\000"
 14918      20646F75 
 14918      626C6500 
 14919              	.LASF174:
 14920 0c7f 44495343 		.ascii	"DISCARD\000"
 14920      41524400 
 14921              	.LASF228:
 14922 0c87 70726576 		.ascii	"prev_pos_err\000"
 14922      5F706F73 
 14922      5F657272 
 14922      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 327


 14923              	.LASF245:
 14924 0c94 696E6974 		.ascii	"init_rot\000"
 14924      5F726F74 
 14924      00
 14925              	.LASF270:
 14926 0c9d 6D6F745F 		.ascii	"mot_idx\000"
 14926      69647800 
 14927              	.LASF321:
 14928 0ca5 66696C74 		.ascii	"filt_i\000"
 14928      5F6900
 14929              	.LASF65:
 14930 0cac 6D6F7469 		.ascii	"motion_counter\000"
 14930      6F6E5F63 
 14930      6F756E74 
 14930      657200
 14931              	.LASF319:
 14932 0cbb 66696C74 		.ascii	"filt_v\000"
 14932      5F7600
 14933              	.LASF345:
 14934 0cc2 72657374 		.ascii	"rest_enabled\000"
 14934      5F656E61 
 14934      626C6564 
 14934      00
 14935              	.LASF309:
 14936 0ccf 675F7265 		.ascii	"g_refOld\000"
 14936      664F6C64 
 14936      00
 14937              	.LASF221:
 14938 0cd8 706F735F 		.ascii	"pos_error\000"
 14938      6572726F 
 14938      7200
 14939              	.LASF160:
 14940 0ce2 6779726F 		.ascii	"gyro_value\000"
 14940      5F76616C 
 14940      756500
 14941              	.LASF120:
 14942 0ced 63757272 		.ascii	"curr_time\000"
 14942      5F74696D 
 14942      6500
 14943              	.LASF105:
 14944 0cf7 646F7562 		.ascii	"double_encoder_on_off\000"
 14944      6C655F65 
 14944      6E636F64 
 14944      65725F6F 
 14944      6E5F6F66 
 14945              	.LASF271:
 14946 0d0d 6D61785F 		.ascii	"max_tension\000"
 14946      74656E73 
 14946      696F6E00 
 14947              	.LASF198:
 14948 0d19 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14948      525F4944 
 14948      5800
 14949              	.LASF246:
 14950 0d23 6C617374 		.ascii	"last_value_encoder\000"
 14950      5F76616C 
 14950      75655F65 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 328


 14950      6E636F64 
 14950      657200
 14951              	.LASF196:
 14952 0d36 636F756E 		.ascii	"counter_tension_func\000"
 14952      7465725F 
 14952      74656E73 
 14952      696F6E5F 
 14952      66756E63 
 14953              	.LASF327:
 14954 0d4b 6379636C 		.ascii	"cycle_time\000"
 14954      655F7469 
 14954      6D6500
 14955              	.LASF217:
 14956 0d56 66736D5F 		.ascii	"fsm_state\000"
 14956      73746174 
 14956      6500
 14957              	.LASF7:
 14958 0d60 6C6F6E67 		.ascii	"long long unsigned int\000"
 14958      206C6F6E 
 14958      6720756E 
 14958      7369676E 
 14958      65642069 
 14959              	.LASF334:
 14960 0d77 64657465 		.ascii	"detect_power_cycle\000"
 14960      63745F70 
 14960      6F776572 
 14960      5F637963 
 14960      6C6500
 14961              	.LASF338:
 14962 0d8a 6A6F795F 		.ascii	"joy_UD_status\000"
 14962      55445F73 
 14962      74617475 
 14962      7300
 14963              	.LASF276:
 14964 0d98 6D6F7469 		.ascii	"motion_status\000"
 14964      6F6E5F73 
 14964      74617475 
 14964      7300
 14965              	.LASF53:
 14966 0da6 6C656E67 		.ascii	"length\000"
 14966      746800
 14967              	.LASF157:
 14968 0dad 73745F69 		.ascii	"st_imu_data\000"
 14968      6D755F64 
 14968      61746100 
 14969              	.LASF161:
 14970 0db9 6D61675F 		.ascii	"mag_value\000"
 14970      76616C75 
 14970      6500
 14971              	.LASF41:
 14972 0dc3 6F6E6F66 		.ascii	"onoff\000"
 14972      6600
 14973              	.LASF241:
 14974 0dc9 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14974      76616C75 
 14974      655F656E 
 14974      636F6465 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 329


 14974      725F3332 
 14975              	.LASF229:
 14976 0dde 70726576 		.ascii	"prev_curr_err\000"
 14976      5F637572 
 14976      725F6572 
 14976      7200
 14977              	.LASF189:
 14978 0dec 64617461 		.ascii	"data_packet_length\000"
 14978      5F706163 
 14978      6B65745F 
 14978      6C656E67 
 14978      746800
 14979              	.LASF77:
 14980 0dff 6B5F705F 		.ascii	"k_p_c\000"
 14980      6300
 14981              	.LASF329:
 14982 0e05 6465765F 		.ascii	"dev_tension\000"
 14982      74656E73 
 14982      696F6E00 
 14983              	.LASF88:
 14984 0e11 6D6F746F 		.ascii	"motor_driver_type\000"
 14984      725F6472 
 14984      69766572 
 14984      5F747970 
 14984      6500
 14985              	.LASF177:
 14986 0e23 57414954 		.ascii	"WAIT_EoC\000"
 14986      5F456F43 
 14986      00
 14987              	.LASF22:
 14988 0e2c 72656738 		.ascii	"reg8\000"
 14988      00
 14989              	.LASF285:
 14990 0e31 62696E5F 		.ascii	"bin_1\000"
 14990      3100
 14991              	.LASF286:
 14992 0e37 62696E5F 		.ascii	"bin_2\000"
 14992      3200
 14993              	.LASF257:
 14994 0e3d 695F6175 		.ascii	"i_aux\000"
 14994      7800
 14995              	.LASF143:
 14996 0e43 70726F70 		.ascii	"prop_err_fb_gain\000"
 14996      5F657272 
 14996      5F66625F 
 14996      6761696E 
 14996      00
 14997              	.LASF214:
 14998 0e54 706F735F 		.ascii	"pos_diff\000"
 14998      64696666 
 14998      00
 14999              	.LASF298:
 15000 0e5d 726F775F 		.ascii	"row_number\000"
 15000      6E756D62 
 15000      657200
 15001              	.LASF268:
 15002 0e68 6F766572 		.ascii	"overcurrent_control\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 330


 15002      63757272 
 15002      656E745F 
 15002      636F6E74 
 15002      726F6C00 
 15003              	.LASF287:
 15004 0e7c 63757272 		.ascii	"curr_pos\000"
 15004      5F706F73 
 15004      00
 15005              	.LASF173:
 15006 0e85 52455345 		.ascii	"RESET\000"
 15006      5400
 15007              	.LASF256:
 15008 0e8b 616E616C 		.ascii	"analog_read_end\000"
 15008      6F675F72 
 15008      6561645F 
 15008      656E6400 
 15009              	.LASF75:
 15010 0e9b 6465765F 		.ascii	"dev_type\000"
 15010      74797065 
 15010      00
 15011              	.LASF234:
 15012 0ea4 76696272 		.ascii	"vibrotactile_control_generic\000"
 15012      6F746163 
 15012      74696C65 
 15012      5F636F6E 
 15012      74726F6C 
 15013              	.LASF275:
 15014 0ec1 656D675F 		.ascii	"emg_cycle_status\000"
 15014      6379636C 
 15014      655F7374 
 15014      61747573 
 15014      00
 15015              	.LASF125:
 15016 0ed2 73745F75 		.ascii	"st_user\000"
 15016      73657200 
 15017              	.LASF108:
 15018 0eda 67656172 		.ascii	"gears_params\000"
 15018      735F7061 
 15018      72616D73 
 15018      00
 15019              	.LASF119:
 15020 0ee7 73745F65 		.ascii	"st_expansion\000"
 15020      7870616E 
 15020      73696F6E 
 15020      00
 15021              	.LASF113:
 15022 0ef4 656D675F 		.ascii	"emg_calibration_flag\000"
 15022      63616C69 
 15022      62726174 
 15022      696F6E5F 
 15022      666C6167 
 15023              	.LASF43:
 15024 0f09 73745F6D 		.ascii	"st_meas\000"
 15024      65617300 
 15025              	.LASF300:
 15026 0f11 61646472 		.ascii	"addr_start\000"
 15026      5F737461 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 331


 15026      727400
 15027              	.LASF304:
 15028 0f1c 70776D5F 		.ascii	"pwm_preload_values\000"
 15028      7072656C 
 15028      6F61645F 
 15028      76616C75 
 15028      657300
 15029              	.LASF135:
 15030 0f2f 6A6F7973 		.ascii	"joystick_threshold\000"
 15030      7469636B 
 15030      5F746872 
 15030      6573686F 
 15030      6C6400
 15031              	.LASF32:
 15032 0f42 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 15032      545F4D4F 
 15032      44455F45 
 15032      4D475F50 
 15032      524F504F 
 15033              	.LASF314:
 15034 0f61 675F6662 		.ascii	"g_fb_meas\000"
 15034      5F6D6561 
 15034      7300
 15035              	.LASF184:
 15036 0f6b 636F756E 		.ascii	"counter_status\000"
 15036      7465725F 
 15036      73746174 
 15036      757300
 15037              	.LASF316:
 15038 0f7a 675F6D65 		.ascii	"g_mem\000"
 15038      6D00
 15039              	.LASF258:
 15040 0f80 656D675F 		.ascii	"emg_counter_1\000"
 15040      636F756E 
 15040      7465725F 
 15040      3100
 15041              	.LASF259:
 15042 0f8e 656D675F 		.ascii	"emg_counter_2\000"
 15042      636F756E 
 15042      7465725F 
 15042      3200
 15043              	.LASF145:
 15044 0f9c 61697263 		.ascii	"airchamber_feedback_active\000"
 15044      68616D62 
 15044      65725F66 
 15044      65656462 
 15044      61636B5F 
 15045              	.LASF249:
 15046 0fb7 6F6E6C79 		.ascii	"only_first_time\000"
 15046      5F666972 
 15046      73745F74 
 15046      696D6500 
 15047              	.LASF11:
 15048 0fc7 75696E74 		.ascii	"uint8\000"
 15048      3800
 15049              	.LASF133:
 15050 0fcd 73745F4A 		.ascii	"st_JOY_spec\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 332


 15050      4F595F73 
 15050      70656300 
 15051              	.LASF244:
 15052 0fd9 76616C75 		.ascii	"value_diff\000"
 15052      655F6469 
 15052      666600
 15053              	.LASF289:
 15054 0fe4 63757272 		.ascii	"curr_ref\000"
 15054      5F726566 
 15054      00
 15055              	.LASF2:
 15056 0fed 73686F72 		.ascii	"short int\000"
 15056      7420696E 
 15056      7400
 15057              	.LASF82:
 15058 0ff7 6B5F645F 		.ascii	"k_d_dl\000"
 15058      646C00
 15059              	.LASF242:
 15060 0ffe 76616C75 		.ascii	"value_encoder\000"
 15060      655F656E 
 15060      636F6465 
 15060      7200
 15061              	.LASF48:
 15062 100c 6A6F7973 		.ascii	"joystick\000"
 15062      7469636B 
 15062      00
 15063              	.LASF154:
 15064 1015 6D6F746F 		.ascii	"motor\000"
 15064      7200
 15065              	.LASF331:
 15066 101b 6465765F 		.ascii	"dev_pwm_sat\000"
 15066      70776D5F 
 15066      73617400 
 15067              	.LASF68:
 15068 1027 68775F6D 		.ascii	"hw_maint_date\000"
 15068      61696E74 
 15068      5F646174 
 15068      6500
 15069              	.LASF201:
 15070 1035 66756E63 		.ascii	"function_scheduler\000"
 15070      74696F6E 
 15070      5F736368 
 15070      6564756C 
 15070      657200
 15071              	.LASF202:
 15072 1048 636F6D70 		.ascii	"compute_reference\000"
 15072      7574655F 
 15072      72656665 
 15072      72656E63 
 15072      6500
 15073              	.LASF230:
 15074 105a 70726576 		.ascii	"prev_pwm\000"
 15074      5F70776D 
 15074      00
 15075              	.LASF69:
 15076 1063 73746174 		.ascii	"stats_period_begin_date\000"
 15076      735F7065 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 333


 15076      72696F64 
 15076      5F626567 
 15076      696E5F64 
 15077              	.LASF294:
 15078 107b 74696D65 		.ascii	"timer_exc_e\000"
 15078      725F6578 
 15078      635F6500 
 15079              	.LASF305:
 15080 1087 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15080      52784275 
 15080      66666572 
 15080      00
 15081              	.LASF333:
 15082 1094 706F775F 		.ascii	"pow_tension\000"
 15082      74656E73 
 15082      696F6E00 
 15083              	.LASF293:
 15084 10a0 74696D65 		.ascii	"timer_exc_s\000"
 15084      725F6578 
 15084      635F7300 
 15085              	.LASF15:
 15086 10ac 696E7431 		.ascii	"int16\000"
 15086      3600
 15087              	.LASF121:
 15088 10b2 72656164 		.ascii	"read_exp_port_flag\000"
 15088      5F657870 
 15088      5F706F72 
 15088      745F666C 
 15088      616700
 15089              	.LASF280:
 15090 10c5 6578635F 		.ascii	"exc_act_thr\000"
 15090      6163745F 
 15090      74687200 
 15091              	.LASF87:
 15092 10d1 61637469 		.ascii	"activate_pwm_rescaling\000"
 15092      76617465 
 15092      5F70776D 
 15092      5F726573 
 15092      63616C69 
 15093              	.LASF80:
 15094 10e8 6B5F705F 		.ascii	"k_p_dl\000"
 15094      646C00
 15095              	.LASF44:
 15096 10ef 65737469 		.ascii	"estim_curr\000"
 15096      6D5F6375 
 15096      727200
 15097              	.LASF330:
 15098 10fa 6465765F 		.ascii	"dev_pwm_limit\000"
 15098      70776D5F 
 15098      6C696D69 
 15098      7400
 15099              	.LASF297:
 15100 1108 73746174 		.ascii	"status\000"
 15100      757300
 15101              	.LASF222:
 15102 110f 63757272 		.ascii	"curr_error\000"
 15102      5F657272 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 334


 15102      6F7200
 15103              	.LASF353:
 15104 111a 456E636F 		.ascii	"Encoder_Value\000"
 15104      6465725F 
 15104      56616C75 
 15104      6500
 15105              	.LASF74:
 15106 1128 75736572 		.ascii	"user_id\000"
 15106      5F696400 
 15107              	.LASF278:
 15108 1130 72657374 		.ascii	"rest_cycle_status\000"
 15108      5F637963 
 15108      6C655F73 
 15108      74617475 
 15108      7300
 15109              	.LASF212:
 15110 1142 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15110      7574655F 
 15110      536F6674 
 15110      48616E64 
 15110      5F325F6D 
 15111              	.LASF240:
 15112 116f 746D705F 		.ascii	"tmp_value_encoder\000"
 15112      76616C75 
 15112      655F656E 
 15112      636F6465 
 15112      7200
 15113              	.LASF186:
 15114 1181 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15114      4359434C 
 15114      45535F48 
 15114      616E646C 
 15114      657200
 15115              	.LASF73:
 15116 1194 62617564 		.ascii	"baud_rate\000"
 15116      5F726174 
 15116      6500
 15117              	.LASF149:
 15118 119e 66617374 		.ascii	"fast_act_threshold\000"
 15118      5F616374 
 15118      5F746872 
 15118      6573686F 
 15118      6C6400
 15119              	.LASF117:
 15120 11b1 5350495F 		.ascii	"SPI_read_delay\000"
 15120      72656164 
 15120      5F64656C 
 15120      617900
 15121              	.LASF3:
 15122 11c0 73686F72 		.ascii	"short unsigned int\000"
 15122      7420756E 
 15122      7369676E 
 15122      65642069 
 15122      6E7400
 15123              	.LASF101:
 15124 11d3 73745F65 		.ascii	"st_encoder\000"
 15124      6E636F64 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 335


 15124      657200
 15125              	.LASF312:
 15126 11de 675F6164 		.ascii	"g_adc_meas\000"
 15126      635F6D65 
 15126      617300
 15127              	.LASF141:
 15128 11e9 6D61785F 		.ascii	"max_residual_current\000"
 15128      72657369 
 15128      6475616C 
 15128      5F637572 
 15128      72656E74 
 15129              	.LASF209:
 15130 11fe 454E435F 		.ascii	"ENC_L\000"
 15130      4C00
 15131              	.LASF151:
 15132 1204 73745F65 		.ascii	"st_eeprom\000"
 15132      6570726F 
 15132      6D00
 15133              	.LASF339:
 15134 120e 6A6F795F 		.ascii	"joy_LR_status\000"
 15134      4C525F73 
 15134      74617475 
 15134      7300
 15135              	.LASF363:
 15136 121c 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15136      72635C69 
 15136      6E746572 
 15136      72757074 
 15136      696F6E73 
 15137              	.LASF205:
 15138 1233 73745F72 		.ascii	"st_refOld_p\000"
 15138      65664F6C 
 15138      645F7000 
 15139              	.LASF16:
 15140 123f 696E7433 		.ascii	"int32\000"
 15140      3200
 15141              	.LASF350:
 15142 1245 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15142      4F465F41 
 15142      4E414C4F 
 15142      475F494E 
 15142      50555453 
 15143              	.LASF76:
 15144 125a 73745F6D 		.ascii	"st_motor\000"
 15144      6F746F72 
 15144      00
 15145              	.LASF361:
 15146 1263 6D617374 		.ascii	"master_mode\000"
 15146      65725F6D 
 15146      6F646500 
 15147              	.LASF39:
 15148 126f 46535F46 		.ascii	"FS_FILE\000"
 15148      494C4500 
 15149              	.LASF89:
 15150 1277 706F735F 		.ascii	"pos_lim_flag\000"
 15150      6C696D5F 
 15150      666C6167 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 336


 15150      00
 15151              	.LASF263:
 15152 1284 4C525F6D 		.ascii	"LR_mean_value\000"
 15152      65616E5F 
 15152      76616C75 
 15152      6500
 15153              	.LASF311:
 15154 1292 675F6D65 		.ascii	"g_measOld\000"
 15154      61734F6C 
 15154      6400
 15155              	.LASF302:
 15156 129c 726F775F 		.ascii	"row_end\000"
 15156      656E6400 
 15157              	.LASF35:
 15158 12a4 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15158      524F4C5F 
 15158      414E474C 
 15158      4500
 15159              	.LASF9:
 15160 12b2 5F5F696E 		.ascii	"__int32_t\000"
 15160      7433325F 
 15160      7400
 15161              	.LASF60:
 15162 12bc 77697265 		.ascii	"wire_disp\000"
 15162      5F646973 
 15162      7000
 15163              	.LASF344:
 15164 12c6 63616E5F 		.ascii	"can_write\000"
 15164      77726974 
 15164      6500
 15165              	.LASF111:
 15166 12d0 656D675F 		.ascii	"emg_max_value\000"
 15166      6D61785F 
 15166      76616C75 
 15166      6500
 15167              	.LASF95:
 15168 12de 63757272 		.ascii	"current_limit\000"
 15168      656E745F 
 15168      6C696D69 
 15168      7400
 15169              	.LASF33:
 15170 12ec 53485F69 		.ascii	"SH_input_mode\000"
 15170      6E707574 
 15170      5F6D6F64 
 15170      6500
 15171              	.LASF183:
 15172 12fa 4E4F4E45 		.ascii	"NONE\000"
 15172      00
 15173              	.LASF148:
 15174 12ff 61637469 		.ascii	"activation_mode\000"
 15174      76617469 
 15174      6F6E5F6D 
 15174      6F646500 
 15175              	.LASF12:
 15176 130f 75696E74 		.ascii	"uint16\000"
 15176      313600
 15177              	.LASF130:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccN5vhdn.s 			page 337


 15178 1316 72657374 		.ascii	"rest_delay\000"
 15178      5F64656C 
 15178      617900
 15179              	.LASF164:
 15180 1321 73745F66 		.ascii	"st_filter\000"
 15180      696C7465 
 15180      7200
 15181              	.LASF254:
 15182 132b 76765F76 		.ascii	"vv_value\000"
 15182      616C7565 
 15182      00
 15183              	.LASF85:
 15184 1334 6B5F645F 		.ascii	"k_d_c_dl\000"
 15184      635F646C 
 15184      00
 15185              	.LASF169:
 15186 133d 64697265 		.ascii	"direction\000"
 15186      6374696F 
 15186      6E00
 15187              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
