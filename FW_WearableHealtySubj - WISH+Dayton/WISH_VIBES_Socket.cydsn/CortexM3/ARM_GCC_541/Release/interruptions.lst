ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e DFE0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 744B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D780 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 DF000000 		.word	.L12+1
 179 0034 2D010000 		.word	.L13+1
 180 0038 97010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6C4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6B4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6A4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 694B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 684A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 674B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 654B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 634B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 614B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 604B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5D4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 8


 225              		.loc 1 175 0
 226 007c 5C4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A580 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5A4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A080 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 574B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09B80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 96E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (master_mode && rx_data == c_mem.MS.
 249              		.loc 1 186 0
 250 00a2 544B     		ldr	r3, .L31+8
 251 00a4 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 252 00a6 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00a8 9A42     		cmp	r2, r3
 254 00aa 0CD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ac 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00ae 002B     		cmp	r3, #0
 258 00b0 09D0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b2 514B     		ldr	r3, .L31+12
 261 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 262 00b6 002B     		cmp	r3, #0
 263 00b8 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00ba 4E4B     		ldr	r3, .L31+8
 266 00bc 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 267 00c0 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c2 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 9


 269 00c4 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00c6 0023     		movs	r3, #0
 273 00c8 FB71     		strb	r3, [r7, #7]
 274 00ca 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00cc 0123     		movs	r3, #1
 278 00ce FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d0 4A4B     		ldr	r3, .L31+16
 282 00d2 0022     		movs	r2, #0
 283 00d4 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00d6 454B     		ldr	r3, .L31
 286 00d8 0222     		movs	r2, #2
 287 00da 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00dc 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00de 474A     		ldr	r2, .L31+16
 293 00e0 7B79     		ldrb	r3, [r7, #5]
 294 00e2 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e4 454B     		ldr	r3, .L31+16
 297 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00e8 012B     		cmp	r3, #1
 299 00ea 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00ec 434B     		ldr	r3, .L31+16
 302 00ee 0022     		movs	r2, #0
 303 00f0 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 10


 305 00f2 3E4B     		ldr	r3, .L31
 306 00f4 0022     		movs	r2, #0
 307 00f6 1A70     		strb	r2, [r3]
 308 00f8 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fa 404B     		ldr	r3, .L31+16
 312 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 00fe 802B     		cmp	r3, #128
 314 0100 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0102 3E4B     		ldr	r3, .L31+16
 317 0104 0022     		movs	r2, #0
 318 0106 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 0108 384B     		ldr	r3, .L31
 321 010a 0022     		movs	r2, #0
 322 010c 1A70     		strb	r2, [r3]
 323 010e 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0110 3B4B     		ldr	r3, .L31+20
 327 0112 0022     		movs	r2, #0
 328 0114 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 0116 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 0118 002B     		cmp	r3, #0
 332 011a 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 011c 334B     		ldr	r3, .L31
 335 011e 0322     		movs	r2, #3
 336 0120 1A70     		strb	r2, [r3]
 337 0122 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0124 314B     		ldr	r3, .L31
 341 0126 0422     		movs	r2, #4
 342 0128 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012a 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 012c 344B     		ldr	r3, .L31+20
 348 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0130 1946     		mov	r1, r3
 350 0132 344A     		ldr	r2, .L31+24
 351 0134 7B79     		ldrb	r3, [r7, #5]
 352 0136 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 0138 314B     		ldr	r3, .L31+20
 355 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 013c 0133     		adds	r3, r3, #1
 357 013e DAB2     		uxtb	r2, r3
 358 0140 2F4B     		ldr	r3, .L31+20
 359 0142 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0144 2E4B     		ldr	r3, .L31+20
 362 0146 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 0148 2C4B     		ldr	r3, .L31+16
 364 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 014c 9A42     		cmp	r2, r3
 366 014e 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0150 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0152 002B     		cmp	r3, #0
 370 0154 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 0156 294B     		ldr	r3, .L31+16
 373 0158 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015a 1A46     		mov	r2, r3
 375 015c 2949     		ldr	r1, .L31+24
 376 015e 2A48     		ldr	r0, .L31+28
 377 0160 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0164 254B     		ldr	r3, .L31+16
 380 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 0168 1AB2     		sxth	r2, r3
 382 016a 274B     		ldr	r3, .L31+28
 383 016c A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0170 254B     		ldr	r3, .L31+28
 386 0172 0122     		movs	r2, #1
 387 0174 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 0178 FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 017c 204B     		ldr	r3, .L31+20
 393 017e 0022     		movs	r2, #0
 394 0180 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0182 1E4B     		ldr	r3, .L31+16
 397 0184 0022     		movs	r2, #0
 398 0186 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 0188 184B     		ldr	r3, .L31
 401 018a 0022     		movs	r2, #0
 402 018c 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 018e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0190 0133     		adds	r3, r3, #1
 406 0192 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0194 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 0196 194B     		ldr	r3, .L31+16
 412 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019a 013B     		subs	r3, r3, #1
 414 019c DAB2     		uxtb	r2, r3
 415 019e 174B     		ldr	r3, .L31+16
 416 01a0 1A70     		strb	r2, [r3]
 417 01a2 164B     		ldr	r3, .L31+16
 418 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01a6 002B     		cmp	r3, #0
 420 01a8 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01aa 154B     		ldr	r3, .L31+20
 423 01ac 0022     		movs	r2, #0
 424 01ae 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b0 124B     		ldr	r3, .L31+16
 427 01b2 0022     		movs	r2, #0
 428 01b4 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01b6 0120     		movs	r0, #1
 431 01b8 FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01bc 0020     		movs	r0, #0
 434 01be FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c2 0A4B     		ldr	r3, .L31
 437 01c4 0022     		movs	r2, #0
 438 01c6 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01ca 0133     		adds	r3, r3, #1
 442 01cc BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01ce 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d0 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d4 0346     		mov	r3, r0
 450 01d6 002B     		cmp	r3, #0
 451 01d8 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01da BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01dc 632B     		cmp	r3, #99
 455 01de 7FF617AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e2 00BF     		nop
 459 01e4 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01e6 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01e8 80BD     		pop	{r7, pc}
 465              	.L32:
 466 01ea 00BF     		.align	2
 467              	.L31:
 468 01ec 00000000 		.word	state.9746
 469 01f0 04000000 		.word	rx_queue.9750
 470 01f4 00000000 		.word	c_mem
 471 01f8 00000000 		.word	master_mode
 472 01fc 07000000 		.word	data_packet_length.9748
 473 0200 08000000 		.word	data_packet_index.9747
 474 0204 0C000000 		.word	data_packet_buffer.9749
 475 0208 00000000 		.word	g_rx
 476              		.cfi_endproc
 477              	.LFE66:
 478              		.size	interrupt_manager, .-interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 14


 479              		.global	__aeabi_i2f
 480              		.global	__aeabi_fdiv
 481              		.section	.text.function_scheduler,"ax",%progbits
 482              		.align	2
 483              		.global	function_scheduler
 484              		.thumb
 485              		.thumb_func
 486              		.type	function_scheduler, %function
 487              	function_scheduler:
 488              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 489              		.loc 1 268 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0000 80B5     		push	{r7, lr}
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****       
 270:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 499              		.loc 1 270 0
 500 0004 0020     		movs	r0, #0
 501 0006 FFF7FEFF 		bl	MY_TIMER_REG_Write
 271:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();/*
 502              		.loc 1 271 0
 503 000a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 504 000e 0346     		mov	r3, r0
 505 0010 1A46     		mov	r2, r3
 506 0012 224B     		ldr	r3, .L35
 507 0014 1A80     		strh	r2, [r3]	@ movhi
 272:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 273:..\src/interruptions.c **** 
 274:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 275:..\src/interruptions.c ****     
 276:..\src/interruptions.c ****     // Check Interrupt 
 277:..\src/interruptions.c **** 
 278:..\src/interruptions.c ****     if (interrupt_flag){
 279:..\src/interruptions.c ****         interrupt_flag = FALSE;
 280:..\src/interruptions.c ****         interrupt_manager();
 281:..\src/interruptions.c ****     }
 282:..\src/interruptions.c ****    
 283:..\src/interruptions.c ****             // if master_mode parameter is set to 1
 284:..\src/interruptions.c ****             if (g_mem.MS.master_mode_active){  
 285:..\src/interruptions.c ****                 
 286:..\src/interruptions.c ****                 // Check if voltage on pin MASTER MODE VOLTAGE, set by a physical switch, is HIGH o
 287:..\src/interruptions.c ****                 // This is a way to force exit from master_mode during execution, since USB command
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 15


 288:..\src/interruptions.c ****                 // are hampered by the communications between the two boards (slave and master)
 289:..\src/interruptions.c ****                 
 290:..\src/interruptions.c ****                 if (flag_master < 2000)       // if voltage is LOW, exit master mode
 291:..\src/interruptions.c ****                     master_mode = 0;
 292:..\src/interruptions.c ****                 
 293:..\src/interruptions.c ****                 else if (flag_master > 2000)  // if voltage is HIGH, enter master mode
 294:..\src/interruptions.c ****                     master_mode = 1;
 295:..\src/interruptions.c ****             }
 296:..\src/interruptions.c ****             
 297:..\src/interruptions.c ****             else{
 298:..\src/interruptions.c ****                 master_mode = 0;
 299:..\src/interruptions.c ****             }
 300:..\src/interruptions.c ****                     
 301:..\src/interruptions.c ****             if (master_mode){
 302:..\src/interruptions.c ****                 
 303:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber and Vi
 304:..\src/interruptions.c ****                 if (g_mem.FB.vibrotactile_feedback_active && g_mem.FB.airchamber_feedback_active){ 
 305:..\src/interruptions.c ****                                      
 306:..\src/interruptions.c ****                     air_chambers_control();
 307:..\src/interruptions.c ****                     vibrotactile_control();
 308:..\src/interruptions.c ****                   
 309:..\src/interruptions.c ****                 }
 310:..\src/interruptions.c ****                 
 311:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber contro
 312:..\src/interruptions.c ****                 else if (g_mem.FB.airchamber_feedback_active){
 313:..\src/interruptions.c ****                     
 314:..\src/interruptions.c ****                     
 315:..\src/interruptions.c ****                       
 316:..\src/interruptions.c ****                     air_chambers_control();
 317:..\src/interruptions.c ****                     
 318:..\src/interruptions.c ****                 }
 319:..\src/interruptions.c ****             
 320:..\src/interruptions.c ****                 //-------------------------------------------------------------- Vibrotactile contr
 321:..\src/interruptions.c ****                 else if (g_mem.FB.vibrotactile_feedback_active){
 322:..\src/interruptions.c ****                     
 323:..\src/interruptions.c ****                     
 324:..\src/interruptions.c ****                     
 325:..\src/interruptions.c ****                     
 326:..\src/interruptions.c ****                     vibrotactile_control();
 327:..\src/interruptions.c ****                 }
 328:..\src/interruptions.c ****                 
 329:..\src/interruptions.c ****                 if (interrupt_flag){
 330:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 331:..\src/interruptions.c ****                     interrupt_manager();
 332:..\src/interruptions.c ****                 }
 333:..\src/interruptions.c ****                     
 334:..\src/interruptions.c ****             //    motor_control_generic(SECOND_MOTOR_IDX); // Compute reference for the SH starting
 335:..\src/interruptions.c ****                     
 336:..\src/interruptions.c ****                 drive_slave(c_mem.MS.slave_ID); // Send reference to the SH calling cmd_set_inputs
 337:..\src/interruptions.c ****                     
 338:..\src/interruptions.c ****                 if (interrupt_flag){
 339:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 340:..\src/interruptions.c ****                     interrupt_manager();
 341:..\src/interruptions.c ****                 }
 342:..\src/interruptions.c ****             }
 343:..\src/interruptions.c ****             
 344:..\src/interruptions.c ****            
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 16


 345:..\src/interruptions.c ****             else {
 346:..\src/interruptions.c ****                 
 347:..\src/interruptions.c ****                 
 348:..\src/interruptions.c ****                 
 349:..\src/interruptions.c ****                     
 350:..\src/interruptions.c ****                 // Check Interrupt 
 351:..\src/interruptions.c ****                 if (interrupt_flag){
 352:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 353:..\src/interruptions.c ****                     interrupt_manager();
 354:..\src/interruptions.c ****                 } 
 355:..\src/interruptions.c ****             }
 356:..\src/interruptions.c ****             
 357:..\src/interruptions.c ****           //  motor_control_generic(MOTOR_IDX);  // Compute references and drive air pump
 358:..\src/interruptions.c ****     
 359:..\src/interruptions.c ****             if (interrupt_flag){
 360:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 361:..\src/interruptions.c ****                 interrupt_manager();
 362:..\src/interruptions.c ****             }
 363:..\src/interruptions.c ****     
 364:..\src/interruptions.c ****            
 365:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 366:..\src/interruptions.c **** 
 367:..\src/interruptions.c ****     analog_read_end();
 368:..\src/interruptions.c **** 
 369:..\src/interruptions.c ****     if (interrupt_flag){
 370:..\src/interruptions.c ****         interrupt_flag = FALSE;
 371:..\src/interruptions.c ****         interrupt_manager();
 372:..\src/interruptions.c ****     }
 373:..\src/interruptions.c **** 
 374:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 375:..\src/interruptions.c **** 
 376:..\src/interruptions.c ****     overcurrent_control();
 377:..\src/interruptions.c ****     
 378:..\src/interruptions.c ****     // Check Interrupt 
 379:..\src/interruptions.c ****     
 380:..\src/interruptions.c ****     if (interrupt_flag){
 381:..\src/interruptions.c ****         interrupt_flag = FALSE;
 382:..\src/interruptions.c ****         interrupt_manager();
 383:..\src/interruptions.c ****     }
 384:..\src/interruptions.c **** 
 385:..\src/interruptions.c ****   
 386:..\src/interruptions.c **** 
 387:..\src/interruptions.c ****     
 388:..\src/interruptions.c ****      
 389:..\src/interruptions.c **** 
 390:..\src/interruptions.c ****     
 391:..\src/interruptions.c ****     // Check Interrupt 
 392:..\src/interruptions.c ****     
 393:..\src/interruptions.c ****     if (interrupt_flag){
 394:..\src/interruptions.c ****         interrupt_flag = FALSE;
 395:..\src/interruptions.c ****         interrupt_manager();
 396:..\src/interruptions.c ****     }
 397:..\src/interruptions.c ****     
 398:..\src/interruptions.c ****    
 399:..\src/interruptions.c ****    
 400:..\src/interruptions.c ****     //---------------------------------- Update States
 401:..\src/interruptions.c **** */    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 17


 402:..\src/interruptions.c ****     // Load k-1 state
 403:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 508              		.loc 1 403 0
 509 0016 224B     		ldr	r3, .L35+4
 510 0018 224A     		ldr	r2, .L35+8
 511 001a 07CA     		ldmia	r2, {r0, r1, r2}
 512 001c 83E80700 		stmia	r3, {r0, r1, r2}
 404:..\src/interruptions.c ****     memcpy( &SH_refOld, &SH_ref, sizeof(SH_ref) );
 513              		.loc 1 404 0
 514 0020 214B     		ldr	r3, .L35+12
 515 0022 1B68     		ldr	r3, [r3]
 516 0024 214A     		ldr	r2, .L35+16
 517 0026 1360     		str	r3, [r2]
 405:..\src/interruptions.c ****     memcpy( &VT_refOld, &VT_ref, sizeof(VT_ref) );
 518              		.loc 1 405 0
 519 0028 214A     		ldr	r2, .L35+20
 520 002a 224B     		ldr	r3, .L35+24
 521 002c 1B88     		ldrh	r3, [r3]	@ unaligned
 522 002e 1380     		strh	r3, [r2]	@ unaligned
 406:..\src/interruptions.c ****     memcpy( &Pump_refOld, &Pump_ref, sizeof(Pump_ref) );
 523              		.loc 1 406 0
 524 0030 214B     		ldr	r3, .L35+28
 525 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 526 0034 214B     		ldr	r3, .L35+32
 527 0036 1A70     		strb	r2, [r3]
 407:..\src/interruptions.c ****     
 408:..\src/interruptions.c ****     // Load k+1 state        
 409:..\src/interruptions.c ****     memcpy( &SH_ref, &SH_refNew, sizeof(SH_ref) );   
 528              		.loc 1 409 0
 529 0038 214B     		ldr	r3, .L35+36
 530 003a 1B68     		ldr	r3, [r3]
 531 003c 1A4A     		ldr	r2, .L35+12
 532 003e 1360     		str	r3, [r2]
 410:..\src/interruptions.c ****     memcpy( &VT_ref, &VT_refNew, sizeof(VT_ref) );
 533              		.loc 1 410 0
 534 0040 1C4A     		ldr	r2, .L35+24
 535 0042 204B     		ldr	r3, .L35+40
 536 0044 1B88     		ldrh	r3, [r3]	@ unaligned
 537 0046 1380     		strh	r3, [r2]	@ unaligned
 411:..\src/interruptions.c ****     memcpy( &Pump_ref, &Pump_refNew, sizeof(Pump_ref) );
 538              		.loc 1 411 0
 539 0048 1F4B     		ldr	r3, .L35+44
 540 004a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 541 004c 1A4B     		ldr	r3, .L35+28
 542 004e 1A70     		strb	r2, [r3]
 412:..\src/interruptions.c ****     
 413:..\src/interruptions.c ****     if (interrupt_flag){
 543              		.loc 1 413 0
 544 0050 1E4B     		ldr	r3, .L35+48
 545 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 546 0054 002B     		cmp	r3, #0
 547 0056 04D0     		beq	.L34
 414:..\src/interruptions.c ****         interrupt_flag = FALSE;
 548              		.loc 1 414 0
 549 0058 1C4B     		ldr	r3, .L35+48
 550 005a 0022     		movs	r2, #0
 551 005c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 18


 415:..\src/interruptions.c ****         interrupt_manager();
 552              		.loc 1 415 0
 553 005e FFF7FEFF 		bl	interrupt_manager
 554              	.L34:
 416:..\src/interruptions.c ****     }
 417:..\src/interruptions.c **** 
 418:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 555              		.loc 1 418 0
 556 0062 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 557 0066 0346     		mov	r3, r0
 558 0068 1A46     		mov	r2, r3
 559 006a 194B     		ldr	r3, .L35+52
 560 006c 1A80     		strh	r2, [r3]	@ movhi
 419:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 561              		.loc 1 419 0
 562 006e 0B4B     		ldr	r3, .L35
 563 0070 1B88     		ldrh	r3, [r3]
 564 0072 1A46     		mov	r2, r3
 565 0074 164B     		ldr	r3, .L35+52
 566 0076 1B88     		ldrh	r3, [r3]
 567 0078 D31A     		subs	r3, r2, r3
 568 007a 1846     		mov	r0, r3
 569 007c FFF7FEFF 		bl	__aeabi_i2f
 570 0080 0346     		mov	r3, r0
 571 0082 1449     		ldr	r1, .L35+56
 572 0084 1846     		mov	r0, r3
 573 0086 FFF7FEFF 		bl	__aeabi_fdiv
 574 008a 0346     		mov	r3, r0
 575 008c 1A46     		mov	r2, r3
 576 008e 124B     		ldr	r3, .L35+60
 577 0090 1A60     		str	r2, [r3]	@ float
 420:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 578              		.loc 1 420 0
 579 0092 0120     		movs	r0, #1
 580 0094 FFF7FEFF 		bl	MY_TIMER_REG_Write
 421:..\src/interruptions.c **** 
 422:..\src/interruptions.c **** }
 581              		.loc 1 422 0
 582 0098 00BF     		nop
 583 009a 80BD     		pop	{r7, pc}
 584              	.L36:
 585              		.align	2
 586              	.L35:
 587 009c 00000000 		.word	timer_value0
 588 00a0 00000000 		.word	g_adc_measOld
 589 00a4 00000000 		.word	g_adc_meas
 590 00a8 00000000 		.word	SH_ref
 591 00ac 00000000 		.word	SH_refOld
 592 00b0 00000000 		.word	VT_refOld
 593 00b4 00000000 		.word	VT_ref
 594 00b8 00000000 		.word	Pump_ref
 595 00bc 00000000 		.word	Pump_refOld
 596 00c0 00000000 		.word	SH_refNew
 597 00c4 00000000 		.word	VT_refNew
 598 00c8 00000000 		.word	Pump_refNew
 599 00cc 00000000 		.word	interrupt_flag
 600 00d0 00000000 		.word	timer_value
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 19


 601 00d4 00247449 		.word	1232348160
 602 00d8 00000000 		.word	cycle_time
 603              		.cfi_endproc
 604              	.LFE67:
 605              		.size	function_scheduler, .-function_scheduler
 606              		.section	.text.compute_SH_reference,"ax",%progbits
 607              		.align	2
 608              		.global	compute_SH_reference
 609              		.thumb
 610              		.thumb_func
 611              		.type	compute_SH_reference, %function
 612              	compute_SH_reference:
 613              	.LFB68:
 423:..\src/interruptions.c **** 
 424:..\src/interruptions.c **** //==============================================================================
 425:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 426:..\src/interruptions.c **** //==============================================================================
 427:..\src/interruptions.c **** 
 428:..\src/interruptions.c **** void compute_SH_reference() {
 614              		.loc 1 428 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 16
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0000 80B4     		push	{r7}
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 7, -4
 622 0002 85B0     		sub	sp, sp, #20
 623              		.cfi_def_cfa_offset 24
 624 0004 00AF     		add	r7, sp, #0
 625              		.cfi_def_cfa_register 7
 429:..\src/interruptions.c ****     
 430:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 431:..\src/interruptions.c ****     struct st_slave* SH = &c_mem.SH_config;      // SoftHand default motor
 626              		.loc 1 431 0
 627 0006 A24B     		ldr	r3, .L81
 628 0008 FB60     		str	r3, [r7, #12]
 432:..\src/interruptions.c ****     
 433:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE // 1 EMG 1 // 2 EMG 2                                
 434:..\src/interruptions.c ****                                                                                                    
 435:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 629              		.loc 1 435 0
 630 000a A24B     		ldr	r3, .L81+4
 631 000c 1B68     		ldr	r3, [r3]
 632 000e A24A     		ldr	r2, .L81+8
 633 0010 128E     		ldrh	r2, [r2, #48]
 634 0012 9B1A     		subs	r3, r3, r2
 635 0014 BB60     		str	r3, [r7, #8]
 436:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 636              		.loc 1 436 0
 637 0016 9F4B     		ldr	r3, .L81+4
 638 0018 5B68     		ldr	r3, [r3, #4]
 639 001a 9F4A     		ldr	r2, .L81+8
 640 001c 528E     		ldrh	r2, [r2, #50]
 641 001e 9B1A     		subs	r3, r3, r2
 642 0020 7B60     		str	r3, [r7, #4]
 437:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 20


 438:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 439:..\src/interruptions.c ****     switch(SH->input_mode) {
 643              		.loc 1 439 0
 644 0022 FB68     		ldr	r3, [r7, #12]
 645 0024 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 646 0026 023B     		subs	r3, r3, #2
 647 0028 052B     		cmp	r3, #5
 648 002a 00F24381 		bhi	.L74
 649 002e 01A2     		adr	r2, .L40
 650 0030 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 651              		.p2align 2
 652              	.L40:
 653 0034 4D000000 		.word	.L39+1
 654 0038 A9000000 		.word	.L41+1
 655 003c 0D010000 		.word	.L42+1
 656 0040 C3010000 		.word	.L43+1
 657 0044 B5020000 		.word	.L74+1
 658 0048 77000000 		.word	.L44+1
 659              		.p2align 1
 660              	.L39:
 440:..\src/interruptions.c ****             
 441:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 442:..\src/interruptions.c ****             if (err_emg_1 > 0)
 661              		.loc 1 442 0
 662 004c BB68     		ldr	r3, [r7, #8]
 663 004e 002B     		cmp	r3, #0
 664 0050 0DDD     		ble	.L45
 443:..\src/interruptions.c ****                 SH_ref = (err_emg_1 * g_mem.SH_config.pos_lim_sup) / (1024 - c_mem.emg.emg_threshol
 665              		.loc 1 443 0
 666 0052 924B     		ldr	r3, .L81+12
 667 0054 5B6A     		ldr	r3, [r3, #36]
 668 0056 BA68     		ldr	r2, [r7, #8]
 669 0058 02FB03F2 		mul	r2, r2, r3
 670 005c 8E4B     		ldr	r3, .L81+8
 671 005e 1B8E     		ldrh	r3, [r3, #48]
 672 0060 C3F58063 		rsb	r3, r3, #1024
 673 0064 92FBF3F3 		sdiv	r3, r2, r3
 674 0068 8D4A     		ldr	r2, .L81+16
 675 006a 1360     		str	r3, [r2]
 444:..\src/interruptions.c ****             else
 445:..\src/interruptions.c ****                 SH_ref = 0;
 446:..\src/interruptions.c ****             break;
 676              		.loc 1 446 0
 677 006c 25E1     		b	.L47
 678              	.L45:
 445:..\src/interruptions.c ****             break;
 679              		.loc 1 445 0
 680 006e 8C4B     		ldr	r3, .L81+16
 681 0070 0022     		movs	r2, #0
 682 0072 1A60     		str	r2, [r3]
 683              		.loc 1 446 0
 684 0074 21E1     		b	.L47
 685              	.L44:
 447:..\src/interruptions.c ****         
 448:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 449:..\src/interruptions.c ****             if (err_emg_1 > 0)
 686              		.loc 1 449 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 21


 687 0076 BB68     		ldr	r3, [r7, #8]
 688 0078 002B     		cmp	r3, #0
 689 007a 10DD     		ble	.L48
 450:..\src/interruptions.c ****                 SH_ref = g_mem.SH_config.pos_lim_sup - (err_emg_1 * g_mem.SH_config.pos_lim_sup) / 
 690              		.loc 1 450 0
 691 007c 874B     		ldr	r3, .L81+12
 692 007e 5A6A     		ldr	r2, [r3, #36]
 693 0080 864B     		ldr	r3, .L81+12
 694 0082 5B6A     		ldr	r3, [r3, #36]
 695 0084 B968     		ldr	r1, [r7, #8]
 696 0086 01FB03F1 		mul	r1, r1, r3
 697 008a 834B     		ldr	r3, .L81+8
 698 008c 1B8E     		ldrh	r3, [r3, #48]
 699 008e C3F58063 		rsb	r3, r3, #1024
 700 0092 91FBF3F3 		sdiv	r3, r1, r3
 701 0096 D31A     		subs	r3, r2, r3
 702 0098 814A     		ldr	r2, .L81+16
 703 009a 1360     		str	r3, [r2]
 451:..\src/interruptions.c ****             else
 452:..\src/interruptions.c ****                 SH_ref = g_mem.SH_config.pos_lim_sup;
 453:..\src/interruptions.c ****             break;
 704              		.loc 1 453 0
 705 009c 0DE1     		b	.L47
 706              	.L48:
 452:..\src/interruptions.c ****             break;
 707              		.loc 1 452 0
 708 009e 7F4B     		ldr	r3, .L81+12
 709 00a0 5B6A     		ldr	r3, [r3, #36]
 710 00a2 7F4A     		ldr	r2, .L81+16
 711 00a4 1360     		str	r3, [r2]
 712              		.loc 1 453 0
 713 00a6 08E1     		b	.L47
 714              	.L41:
 454:..\src/interruptions.c **** 
 455:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 456:..\src/interruptions.c ****             SH_ref = SH_refOld;
 715              		.loc 1 456 0
 716 00a8 7E4B     		ldr	r3, .L81+20
 717 00aa 1B68     		ldr	r3, [r3]
 718 00ac 7C4A     		ldr	r2, .L81+16
 719 00ae 1360     		str	r3, [r2]
 457:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 720              		.loc 1 457 0
 721 00b0 BB68     		ldr	r3, [r7, #8]
 722 00b2 002B     		cmp	r3, #0
 723 00b4 12DD     		ble	.L50
 458:..\src/interruptions.c ****                 SH_ref = SH_refOld + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / (1024 - c_mem.
 724              		.loc 1 458 0
 725 00b6 794B     		ldr	r3, .L81+12
 726 00b8 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 727 00bc 1A46     		mov	r2, r3
 728 00be BB68     		ldr	r3, [r7, #8]
 729 00c0 03FB02F3 		mul	r3, r3, r2
 730 00c4 5A00     		lsls	r2, r3, #1
 731 00c6 744B     		ldr	r3, .L81+8
 732 00c8 1B8E     		ldrh	r3, [r3, #48]
 733 00ca C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 22


 734 00ce 92FBF3F2 		sdiv	r2, r2, r3
 735 00d2 744B     		ldr	r3, .L81+20
 736 00d4 1B68     		ldr	r3, [r3]
 737 00d6 1344     		add	r3, r3, r2
 738 00d8 714A     		ldr	r2, .L81+16
 739 00da 1360     		str	r3, [r2]
 740              	.L50:
 459:..\src/interruptions.c ****             }
 460:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 741              		.loc 1 460 0
 742 00dc 7B68     		ldr	r3, [r7, #4]
 743 00de 002B     		cmp	r3, #0
 744 00e0 40F3EA80 		ble	.L75
 461:..\src/interruptions.c ****                 SH_ref = SH_refOld - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / (1024 - c_mem.
 745              		.loc 1 461 0
 746 00e4 6F4B     		ldr	r3, .L81+20
 747 00e6 1A68     		ldr	r2, [r3]
 748 00e8 6C4B     		ldr	r3, .L81+12
 749 00ea 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 750 00ee 1946     		mov	r1, r3
 751 00f0 7B68     		ldr	r3, [r7, #4]
 752 00f2 03FB01F3 		mul	r3, r3, r1
 753 00f6 5900     		lsls	r1, r3, #1
 754 00f8 674B     		ldr	r3, .L81+8
 755 00fa 5B8E     		ldrh	r3, [r3, #50]
 756 00fc C3F58063 		rsb	r3, r3, #1024
 757 0100 91FBF3F3 		sdiv	r3, r1, r3
 758 0104 D31A     		subs	r3, r2, r3
 759 0106 664A     		ldr	r2, .L81+16
 760 0108 1360     		str	r3, [r2]
 462:..\src/interruptions.c ****             }
 463:..\src/interruptions.c ****             break;
 761              		.loc 1 463 0
 762 010a D5E0     		b	.L75
 763              	.L42:
 464:..\src/interruptions.c **** 
 465:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 466:..\src/interruptions.c ****             SH_ref= SH_refOld;
 764              		.loc 1 466 0
 765 010c 654B     		ldr	r3, .L81+20
 766 010e 1B68     		ldr	r3, [r3]
 767 0110 634A     		ldr	r2, .L81+16
 768 0112 1360     		str	r3, [r2]
 467:..\src/interruptions.c ****             
 468:..\src/interruptions.c ****                 switch (current_emg) {
 769              		.loc 1 468 0
 770 0114 644B     		ldr	r3, .L81+24
 771 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 772 0118 012B     		cmp	r3, #1
 773 011a 1AD0     		beq	.L53
 774 011c 022B     		cmp	r3, #2
 775 011e 33D0     		beq	.L54
 776 0120 002B     		cmp	r3, #0
 777 0122 00D0     		beq	.L55
 469:..\src/interruptions.c ****                     case 0:
 470:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 471:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 23


 472:..\src/interruptions.c ****                             current_emg= 1;
 473:..\src/interruptions.c ****                             break;
 474:..\src/interruptions.c ****                         }
 475:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 476:..\src/interruptions.c ****                             current_emg = 2;
 477:..\src/interruptions.c ****                             break;
 478:..\src/interruptions.c ****                         }
 479:..\src/interruptions.c ****                         break;
 480:..\src/interruptions.c **** 
 481:..\src/interruptions.c ****                     case 1:
 482:..\src/interruptions.c ****                         // EMG 1 is first
 483:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 484:..\src/interruptions.c ****                             current_emg = 0;
 485:..\src/interruptions.c ****                             break;
 486:..\src/interruptions.c ****                         }
 487:..\src/interruptions.c ****                        SH_ref= SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_me
 488:..\src/interruptions.c ****                         break;
 489:..\src/interruptions.c **** 
 490:..\src/interruptions.c ****                     case 2:
 491:..\src/interruptions.c ****                         // EMG 2 is first
 492:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 493:..\src/interruptions.c ****                             current_emg = 0;
 494:..\src/interruptions.c ****                             break;
 495:..\src/interruptions.c ****                         }
 496:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024 - c_
 497:..\src/interruptions.c ****                         break;
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****                     default:
 500:..\src/interruptions.c ****                         break;
 778              		.loc 1 500 0
 779 0124 4CE0     		b	.L57
 780              	.L55:
 471:..\src/interruptions.c ****                             current_emg= 1;
 781              		.loc 1 471 0
 782 0126 BB68     		ldr	r3, [r7, #8]
 783 0128 002B     		cmp	r3, #0
 784 012a 07DD     		ble	.L56
 471:..\src/interruptions.c ****                             current_emg= 1;
 785              		.loc 1 471 0 is_stmt 0 discriminator 1
 786 012c BA68     		ldr	r2, [r7, #8]
 787 012e 7B68     		ldr	r3, [r7, #4]
 788 0130 9A42     		cmp	r2, r3
 789 0132 03DD     		ble	.L56
 472:..\src/interruptions.c ****                             break;
 790              		.loc 1 472 0 is_stmt 1
 791 0134 5C4B     		ldr	r3, .L81+24
 792 0136 0122     		movs	r2, #1
 793 0138 1A70     		strb	r2, [r3]
 473:..\src/interruptions.c ****                         }
 794              		.loc 1 473 0
 795 013a 41E0     		b	.L57
 796              	.L56:
 475:..\src/interruptions.c ****                             current_emg = 2;
 797              		.loc 1 475 0
 798 013c 7B68     		ldr	r3, [r7, #4]
 799 013e 002B     		cmp	r3, #0
 800 0140 3DDD     		ble	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 24


 475:..\src/interruptions.c ****                             current_emg = 2;
 801              		.loc 1 475 0 is_stmt 0 discriminator 1
 802 0142 7A68     		ldr	r2, [r7, #4]
 803 0144 BB68     		ldr	r3, [r7, #8]
 804 0146 9A42     		cmp	r2, r3
 805 0148 39DD     		ble	.L76
 476:..\src/interruptions.c ****                             break;
 806              		.loc 1 476 0 is_stmt 1
 807 014a 574B     		ldr	r3, .L81+24
 808 014c 0222     		movs	r2, #2
 809 014e 1A70     		strb	r2, [r3]
 477:..\src/interruptions.c ****                         }
 810              		.loc 1 477 0
 811 0150 36E0     		b	.L57
 812              	.L53:
 483:..\src/interruptions.c ****                             current_emg = 0;
 813              		.loc 1 483 0
 814 0152 BB68     		ldr	r3, [r7, #8]
 815 0154 002B     		cmp	r3, #0
 816 0156 03DA     		bge	.L59
 484:..\src/interruptions.c ****                             break;
 817              		.loc 1 484 0
 818 0158 534B     		ldr	r3, .L81+24
 819 015a 0022     		movs	r2, #0
 820 015c 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****                         }
 821              		.loc 1 485 0
 822 015e 2FE0     		b	.L57
 823              	.L59:
 487:..\src/interruptions.c ****                         break;
 824              		.loc 1 487 0
 825 0160 4E4B     		ldr	r3, .L81+12
 826 0162 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 827 0166 1A46     		mov	r2, r3
 828 0168 BB68     		ldr	r3, [r7, #8]
 829 016a 03FB02F3 		mul	r3, r3, r2
 830 016e 9A00     		lsls	r2, r3, #2
 831 0170 494B     		ldr	r3, .L81+8
 832 0172 1B8E     		ldrh	r3, [r3, #48]
 833 0174 C3F58063 		rsb	r3, r3, #1024
 834 0178 92FBF3F2 		sdiv	r2, r2, r3
 835 017c 494B     		ldr	r3, .L81+20
 836 017e 1B68     		ldr	r3, [r3]
 837 0180 1344     		add	r3, r3, r2
 838 0182 474A     		ldr	r2, .L81+16
 839 0184 1360     		str	r3, [r2]
 488:..\src/interruptions.c **** 
 840              		.loc 1 488 0
 841 0186 1BE0     		b	.L57
 842              	.L54:
 492:..\src/interruptions.c ****                             current_emg = 0;
 843              		.loc 1 492 0
 844 0188 7B68     		ldr	r3, [r7, #4]
 845 018a 002B     		cmp	r3, #0
 846 018c 03DA     		bge	.L60
 493:..\src/interruptions.c ****                             break;
 847              		.loc 1 493 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 25


 848 018e 464B     		ldr	r3, .L81+24
 849 0190 0022     		movs	r2, #0
 850 0192 1A70     		strb	r2, [r3]
 494:..\src/interruptions.c ****                         }
 851              		.loc 1 494 0
 852 0194 14E0     		b	.L57
 853              	.L60:
 496:..\src/interruptions.c ****                         break;
 854              		.loc 1 496 0
 855 0196 434B     		ldr	r3, .L81+20
 856 0198 1A68     		ldr	r2, [r3]
 857 019a 404B     		ldr	r3, .L81+12
 858 019c 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 859 01a0 1946     		mov	r1, r3
 860 01a2 7B68     		ldr	r3, [r7, #4]
 861 01a4 03FB01F3 		mul	r3, r3, r1
 862 01a8 9900     		lsls	r1, r3, #2
 863 01aa 3B4B     		ldr	r3, .L81+8
 864 01ac 5B8E     		ldrh	r3, [r3, #50]
 865 01ae C3F58063 		rsb	r3, r3, #1024
 866 01b2 91FBF3F3 		sdiv	r3, r1, r3
 867 01b6 D31A     		subs	r3, r2, r3
 868 01b8 394A     		ldr	r2, .L81+16
 869 01ba 1360     		str	r3, [r2]
 497:..\src/interruptions.c **** 
 870              		.loc 1 497 0
 871 01bc 00E0     		b	.L57
 872              	.L76:
 479:..\src/interruptions.c **** 
 873              		.loc 1 479 0
 874 01be 00BF     		nop
 875              	.L57:
 501:..\src/interruptions.c ****                 }
 502:..\src/interruptions.c ****             
 503:..\src/interruptions.c ****             break;
 876              		.loc 1 503 0 discriminator 1
 877 01c0 7BE0     		b	.L47
 878              	.L43:
 504:..\src/interruptions.c **** 
 505:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 506:..\src/interruptions.c ****             SH_ref = SH_refOld;
 879              		.loc 1 506 0
 880 01c2 384B     		ldr	r3, .L81+20
 881 01c4 1B68     		ldr	r3, [r3]
 882 01c6 364A     		ldr	r2, .L81+16
 883 01c8 1360     		str	r3, [r2]
 507:..\src/interruptions.c ****             switch (current_emg) {
 884              		.loc 1 507 0
 885 01ca 374B     		ldr	r3, .L81+24
 886 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 01ce 012B     		cmp	r3, #1
 888 01d0 1AD0     		beq	.L62
 889 01d2 022B     		cmp	r3, #2
 890 01d4 39D0     		beq	.L63
 891 01d6 002B     		cmp	r3, #0
 892 01d8 00D0     		beq	.L64
 508:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 26


 509:..\src/interruptions.c ****                 case 0:
 510:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 511:..\src/interruptions.c ****                         current_emg = 1;
 512:..\src/interruptions.c ****                         break;
 513:..\src/interruptions.c ****                     }
 514:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 515:..\src/interruptions.c ****                         current_emg = 2;
 516:..\src/interruptions.c ****                         break;
 517:..\src/interruptions.c ****                     }
 518:..\src/interruptions.c ****                     break;
 519:..\src/interruptions.c **** 
 520:..\src/interruptions.c ****                 // EMG 1 is first
 521:..\src/interruptions.c ****                 case 1:
 522:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 523:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 524:..\src/interruptions.c ****                         current_emg = 0;
 525:..\src/interruptions.c ****                         break;
 526:..\src/interruptions.c ****                     }
 527:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 528:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 529:..\src/interruptions.c ****                         SH_ref = SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_
 530:..\src/interruptions.c ****                     break;
 531:..\src/interruptions.c **** 
 532:..\src/interruptions.c ****                 // EMG 2 is first
 533:..\src/interruptions.c ****                 case 2:
 534:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 535:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 536:..\src/interruptions.c ****                         current_emg = 0;
 537:..\src/interruptions.c ****                         break;
 538:..\src/interruptions.c ****                     }
 539:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 540:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 541:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * c_mem.emg.emg_speed[1] << 2) / (1024 - c_
 542:..\src/interruptions.c ****                     }
 543:..\src/interruptions.c ****                     break;
 544:..\src/interruptions.c **** 
 545:..\src/interruptions.c ****                 default:
 546:..\src/interruptions.c ****                     break;
 893              		.loc 1 546 0
 894 01da 6AE0     		b	.L66
 895              	.L64:
 510:..\src/interruptions.c ****                         current_emg = 1;
 896              		.loc 1 510 0
 897 01dc BB68     		ldr	r3, [r7, #8]
 898 01de 002B     		cmp	r3, #0
 899 01e0 07DD     		ble	.L65
 510:..\src/interruptions.c ****                         current_emg = 1;
 900              		.loc 1 510 0 is_stmt 0 discriminator 1
 901 01e2 BA68     		ldr	r2, [r7, #8]
 902 01e4 7B68     		ldr	r3, [r7, #4]
 903 01e6 9A42     		cmp	r2, r3
 904 01e8 03DD     		ble	.L65
 511:..\src/interruptions.c ****                         break;
 905              		.loc 1 511 0 is_stmt 1
 906 01ea 2F4B     		ldr	r3, .L81+24
 907 01ec 0122     		movs	r2, #1
 908 01ee 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 27


 512:..\src/interruptions.c ****                     }
 909              		.loc 1 512 0
 910 01f0 5FE0     		b	.L66
 911              	.L65:
 514:..\src/interruptions.c ****                         current_emg = 2;
 912              		.loc 1 514 0
 913 01f2 7B68     		ldr	r3, [r7, #4]
 914 01f4 002B     		cmp	r3, #0
 915 01f6 49DD     		ble	.L77
 514:..\src/interruptions.c ****                         current_emg = 2;
 916              		.loc 1 514 0 is_stmt 0 discriminator 1
 917 01f8 7A68     		ldr	r2, [r7, #4]
 918 01fa BB68     		ldr	r3, [r7, #8]
 919 01fc 9A42     		cmp	r2, r3
 920 01fe 45DD     		ble	.L77
 515:..\src/interruptions.c ****                         break;
 921              		.loc 1 515 0 is_stmt 1
 922 0200 294B     		ldr	r3, .L81+24
 923 0202 0222     		movs	r2, #2
 924 0204 1A70     		strb	r2, [r3]
 516:..\src/interruptions.c ****                     }
 925              		.loc 1 516 0
 926 0206 54E0     		b	.L66
 927              	.L62:
 523:..\src/interruptions.c ****                         current_emg = 0;
 928              		.loc 1 523 0
 929 0208 BB68     		ldr	r3, [r7, #8]
 930 020a 002B     		cmp	r3, #0
 931 020c 06DA     		bge	.L68
 523:..\src/interruptions.c ****                         current_emg = 0;
 932              		.loc 1 523 0 is_stmt 0 discriminator 1
 933 020e 7B68     		ldr	r3, [r7, #4]
 934 0210 002B     		cmp	r3, #0
 935 0212 03DA     		bge	.L68
 524:..\src/interruptions.c ****                         break;
 936              		.loc 1 524 0 is_stmt 1
 937 0214 244B     		ldr	r3, .L81+24
 938 0216 0022     		movs	r2, #0
 939 0218 1A70     		strb	r2, [r3]
 525:..\src/interruptions.c ****                     }
 940              		.loc 1 525 0
 941 021a 4AE0     		b	.L66
 942              	.L68:
 528:..\src/interruptions.c ****                         SH_ref = SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_
 943              		.loc 1 528 0
 944 021c BB68     		ldr	r3, [r7, #8]
 945 021e 002B     		cmp	r3, #0
 946 0220 44DD     		ble	.L78
 529:..\src/interruptions.c ****                     break;
 947              		.loc 1 529 0
 948 0222 1E4B     		ldr	r3, .L81+12
 949 0224 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 950 0228 1A46     		mov	r2, r3
 951 022a BB68     		ldr	r3, [r7, #8]
 952 022c 03FB02F3 		mul	r3, r3, r2
 953 0230 9A00     		lsls	r2, r3, #2
 954 0232 194B     		ldr	r3, .L81+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 28


 955 0234 1B8E     		ldrh	r3, [r3, #48]
 956 0236 C3F58063 		rsb	r3, r3, #1024
 957 023a 92FBF3F2 		sdiv	r2, r2, r3
 958 023e 194B     		ldr	r3, .L81+20
 959 0240 1B68     		ldr	r3, [r3]
 960 0242 1344     		add	r3, r3, r2
 961 0244 164A     		ldr	r2, .L81+16
 962 0246 1360     		str	r3, [r2]
 530:..\src/interruptions.c **** 
 963              		.loc 1 530 0
 964 0248 30E0     		b	.L78
 965              	.L63:
 535:..\src/interruptions.c ****                         current_emg = 0;
 966              		.loc 1 535 0
 967 024a BB68     		ldr	r3, [r7, #8]
 968 024c 002B     		cmp	r3, #0
 969 024e 06DA     		bge	.L70
 535:..\src/interruptions.c ****                         current_emg = 0;
 970              		.loc 1 535 0 is_stmt 0 discriminator 1
 971 0250 7B68     		ldr	r3, [r7, #4]
 972 0252 002B     		cmp	r3, #0
 973 0254 03DA     		bge	.L70
 536:..\src/interruptions.c ****                         break;
 974              		.loc 1 536 0 is_stmt 1
 975 0256 144B     		ldr	r3, .L81+24
 976 0258 0022     		movs	r2, #0
 977 025a 1A70     		strb	r2, [r3]
 537:..\src/interruptions.c ****                     }
 978              		.loc 1 537 0
 979 025c 29E0     		b	.L66
 980              	.L70:
 540:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * c_mem.emg.emg_speed[1] << 2) / (1024 - c_
 981              		.loc 1 540 0
 982 025e 7B68     		ldr	r3, [r7, #4]
 983 0260 002B     		cmp	r3, #0
 984 0262 25DD     		ble	.L79
 541:..\src/interruptions.c ****                     }
 985              		.loc 1 541 0
 986 0264 0F4B     		ldr	r3, .L81+20
 987 0266 1A68     		ldr	r2, [r3]
 988 0268 0B4B     		ldr	r3, .L81+8
 989 026a 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 990 026e 1946     		mov	r1, r3
 991 0270 7B68     		ldr	r3, [r7, #4]
 992 0272 03FB01F3 		mul	r3, r3, r1
 993 0276 9900     		lsls	r1, r3, #2
 994 0278 074B     		ldr	r3, .L81+8
 995 027a 5B8E     		ldrh	r3, [r3, #50]
 996 027c C3F58063 		rsb	r3, r3, #1024
 997 0280 91FBF3F3 		sdiv	r3, r1, r3
 998 0284 D31A     		subs	r3, r2, r3
 999 0286 064A     		ldr	r2, .L81+16
 1000 0288 1360     		str	r3, [r2]
 543:..\src/interruptions.c **** 
 1001              		.loc 1 543 0
 1002 028a 11E0     		b	.L79
 1003              	.L77:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 29


 518:..\src/interruptions.c **** 
 1004              		.loc 1 518 0
 1005 028c 00BF     		nop
 1006 028e 14E0     		b	.L47
 1007              	.L82:
 1008              		.align	2
 1009              	.L81:
 1010 0290 20000000 		.word	c_mem+32
 1011 0294 00000000 		.word	g_adc_meas
 1012 0298 00000000 		.word	c_mem
 1013 029c 00000000 		.word	g_mem
 1014 02a0 00000000 		.word	SH_ref
 1015 02a4 00000000 		.word	SH_refOld
 1016 02a8 8C000000 		.word	current_emg.9771
 1017              	.L78:
 530:..\src/interruptions.c **** 
 1018              		.loc 1 530 0
 1019 02ac 00BF     		nop
 1020 02ae 04E0     		b	.L47
 1021              	.L79:
 543:..\src/interruptions.c **** 
 1022              		.loc 1 543 0
 1023 02b0 00BF     		nop
 1024              	.L66:
 547:..\src/interruptions.c ****             }
 548:..\src/interruptions.c ****             break;
 1025              		.loc 1 548 0 discriminator 3
 1026 02b2 02E0     		b	.L47
 1027              	.L74:
 549:..\src/interruptions.c **** 
 550:..\src/interruptions.c ****         default:
 551:..\src/interruptions.c ****             break;
 1028              		.loc 1 551 0
 1029 02b4 00BF     		nop
 1030 02b6 00E0     		b	.L47
 1031              	.L75:
 463:..\src/interruptions.c **** 
 1032              		.loc 1 463 0
 1033 02b8 00BF     		nop
 1034              	.L47:
 552:..\src/interruptions.c ****     }
 553:..\src/interruptions.c **** 
 554:..\src/interruptions.c ****     // Position limit saturation
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****         if (SH_ref < SH->pos_lim_inf) 
 1035              		.loc 1 556 0
 1036 02ba FB68     		ldr	r3, [r7, #12]
 1037 02bc 1A68     		ldr	r2, [r3]
 1038 02be 0B4B     		ldr	r3, .L83
 1039 02c0 1B68     		ldr	r3, [r3]
 1040 02c2 9A42     		cmp	r2, r3
 1041 02c4 03DD     		ble	.L72
 557:..\src/interruptions.c ****             SH_ref = SH->pos_lim_inf;
 1042              		.loc 1 557 0
 1043 02c6 FB68     		ldr	r3, [r7, #12]
 1044 02c8 1B68     		ldr	r3, [r3]
 1045 02ca 084A     		ldr	r2, .L83
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 30


 1046 02cc 1360     		str	r3, [r2]
 1047              	.L72:
 558:..\src/interruptions.c ****         if (SH_ref > SH->pos_lim_sup) 
 1048              		.loc 1 558 0
 1049 02ce FB68     		ldr	r3, [r7, #12]
 1050 02d0 5A68     		ldr	r2, [r3, #4]
 1051 02d2 064B     		ldr	r3, .L83
 1052 02d4 1B68     		ldr	r3, [r3]
 1053 02d6 9A42     		cmp	r2, r3
 1054 02d8 03DA     		bge	.L80
 559:..\src/interruptions.c ****             SH_ref = SH->pos_lim_sup;
 1055              		.loc 1 559 0
 1056 02da FB68     		ldr	r3, [r7, #12]
 1057 02dc 5B68     		ldr	r3, [r3, #4]
 1058 02de 034A     		ldr	r2, .L83
 1059 02e0 1360     		str	r3, [r2]
 1060              	.L80:
 560:..\src/interruptions.c **** 
 561:..\src/interruptions.c **** }
 1061              		.loc 1 561 0
 1062 02e2 00BF     		nop
 1063 02e4 1437     		adds	r7, r7, #20
 1064              		.cfi_def_cfa_offset 4
 1065 02e6 BD46     		mov	sp, r7
 1066              		.cfi_def_cfa_register 13
 1067              		@ sp needed
 1068 02e8 80BC     		pop	{r7}
 1069              		.cfi_restore 7
 1070              		.cfi_def_cfa_offset 0
 1071 02ea 7047     		bx	lr
 1072              	.L84:
 1073              		.align	2
 1074              	.L83:
 1075 02ec 00000000 		.word	SH_ref
 1076              		.cfi_endproc
 1077              	.LFE68:
 1078              		.size	compute_SH_reference, .-compute_SH_reference
 1079              		.section	.text.vibrotactile_control_generic,"ax",%progbits
 1080              		.align	2
 1081              		.global	vibrotactile_control_generic
 1082              		.thumb
 1083              		.thumb_func
 1084              		.type	vibrotactile_control_generic, %function
 1085              	vibrotactile_control_generic:
 1086              	.LFB69:
 562:..\src/interruptions.c **** 
 563:..\src/interruptions.c **** 
 564:..\src/interruptions.c **** 
 565:..\src/interruptions.c **** 
 566:..\src/interruptions.c **** //==============================================================================
 567:..\src/interruptions.c **** //                                                  VIBROTACTILE CONTROL GENERIC
 568:..\src/interruptions.c **** //==============================================================================
 569:..\src/interruptions.c **** void vibrotactile_control_generic(uint8 idx) {
 1087              		.loc 1 569 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 16
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 31


 1091 0000 80B5     		push	{r7, lr}
 1092              		.cfi_def_cfa_offset 8
 1093              		.cfi_offset 7, -8
 1094              		.cfi_offset 14, -4
 1095 0002 84B0     		sub	sp, sp, #16
 1096              		.cfi_def_cfa_offset 24
 1097 0004 00AF     		add	r7, sp, #0
 1098              		.cfi_def_cfa_register 7
 1099 0006 0346     		mov	r3, r0
 1100 0008 FB71     		strb	r3, [r7, #7]
 570:..\src/interruptions.c ****    
 571:..\src/interruptions.c ****     int16 CYDATA pwm_input = 0;
 1101              		.loc 1 571 0
 1102 000a 0023     		movs	r3, #0
 1103 000c FB81     		strh	r3, [r7, #14]	@ movhi
 572:..\src/interruptions.c **** 
 573:..\src/interruptions.c ****     // Static Variables
 574:..\src/interruptions.c ****    
 575:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_VT_ACTUATORS]; 
 576:..\src/interruptions.c **** 
 577:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 578:..\src/interruptions.c **** 
 579:..\src/interruptions.c ****     pwm_input = VT_ref[idx];
 1104              		.loc 1 579 0
 1105 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1106 0010 294A     		ldr	r2, .L98
 1107 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1108 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 580:..\src/interruptions.c **** 
 581:..\src/interruptions.c ****     if (pwm_input > 0) 
 1109              		.loc 1 581 0
 1110 0016 B7F90E30 		ldrsh	r3, [r7, #14]
 1111 001a 002B     		cmp	r3, #0
 1112 001c 04DD     		ble	.L86
 582:..\src/interruptions.c ****         motor_dir[idx] = TRUE;
 1113              		.loc 1 582 0
 1114 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1115 0020 264A     		ldr	r2, .L98+4
 1116 0022 0121     		movs	r1, #1
 1117 0024 D154     		strb	r1, [r2, r3]
 1118 0026 03E0     		b	.L87
 1119              	.L86:
 583:..\src/interruptions.c ****     else 
 584:..\src/interruptions.c ****         motor_dir[idx] = FALSE;
 1120              		.loc 1 584 0
 1121 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1122 002a 244A     		ldr	r2, .L98+4
 1123 002c 0021     		movs	r1, #0
 1124 002e D154     		strb	r1, [r2, r3]
 1125              	.L87:
 585:..\src/interruptions.c ****         
 586:..\src/interruptions.c ****     if (pwm_input > PWM_MAX_VALUE_DC) 
 1126              		.loc 1 586 0
 1127 0030 B7F90E30 		ldrsh	r3, [r7, #14]
 1128 0034 642B     		cmp	r3, #100
 1129 0036 01DD     		ble	.L88
 587:..\src/interruptions.c ****         pwm_input = PWM_MAX_VALUE_DC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 32


 1130              		.loc 1 587 0
 1131 0038 6423     		movs	r3, #100
 1132 003a FB81     		strh	r3, [r7, #14]	@ movhi
 1133              	.L88:
 588:..\src/interruptions.c ****     if (pwm_input < - PWM_MAX_VALUE_DC) 
 1134              		.loc 1 588 0
 1135 003c B7F90E30 		ldrsh	r3, [r7, #14]
 1136 0040 13F1640F 		cmn	r3, #100
 1137 0044 02DA     		bge	.L89
 589:..\src/interruptions.c ****         pwm_input = - PWM_MAX_VALUE_DC;
 1138              		.loc 1 589 0
 1139 0046 4FF69C73 		movw	r3, #65436
 1140 004a FB81     		strh	r3, [r7, #14]	@ movhi
 1141              	.L89:
 590:..\src/interruptions.c ****      
 591:..\src/interruptions.c ****     // Set motor direction and write pwm value
 592:..\src/interruptions.c ****     switch (idx) {
 1142              		.loc 1 592 0
 1143 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1144 004e 002B     		cmp	r3, #0
 1145 0050 02D0     		beq	.L91
 1146 0052 012B     		cmp	r3, #1
 1147 0054 16D0     		beq	.L92
 593:..\src/interruptions.c ****         case 0:         // Motor 1
 594:..\src/interruptions.c ****             if (motor_dir[idx])
 595:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 596:..\src/interruptions.c ****             else
 597:..\src/interruptions.c ****                 VT1_DIR_Write(0x01);
 598:..\src/interruptions.c ****          
 599:..\src/interruptions.c ****                PWM_VT_WriteCompare1(abs(pwm_input));    
 600:..\src/interruptions.c ****             
 601:..\src/interruptions.c ****             break;
 602:..\src/interruptions.c ****         case 1:         // Motor 2
 603:..\src/interruptions.c ****             
 604:..\src/interruptions.c ****             if (motor_dir[idx])
 605:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
 606:..\src/interruptions.c ****             else
 607:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);
 608:..\src/interruptions.c ****             
 609:..\src/interruptions.c ****             PWM_VT_WriteCompare2(abs(pwm_input));    
 610:..\src/interruptions.c ****         break;
 611:..\src/interruptions.c ****     }
 612:..\src/interruptions.c ****        
 613:..\src/interruptions.c ****     
 614:..\src/interruptions.c **** }
 1148              		.loc 1 614 0
 1149 0056 2BE0     		b	.L97
 1150              	.L91:
 594:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 1151              		.loc 1 594 0
 1152 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1153 005a 184A     		ldr	r2, .L98+4
 1154 005c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1155 005e 002B     		cmp	r3, #0
 1156 0060 03D0     		beq	.L93
 595:..\src/interruptions.c ****             else
 1157              		.loc 1 595 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 33


 1158 0062 0020     		movs	r0, #0
 1159 0064 FFF7FEFF 		bl	VT1_DIR_Write
 1160 0068 02E0     		b	.L94
 1161              	.L93:
 597:..\src/interruptions.c ****          
 1162              		.loc 1 597 0
 1163 006a 0120     		movs	r0, #1
 1164 006c FFF7FEFF 		bl	VT1_DIR_Write
 1165              	.L94:
 599:..\src/interruptions.c ****             
 1166              		.loc 1 599 0
 1167 0070 B7F90E30 		ldrsh	r3, [r7, #14]
 1168 0074 002B     		cmp	r3, #0
 1169 0076 B8BF     		it	lt
 1170 0078 5B42     		rsblt	r3, r3, #0
 1171 007a 9BB2     		uxth	r3, r3
 1172 007c 1846     		mov	r0, r3
 1173 007e FFF7FEFF 		bl	PWM_VT_WriteCompare1
 601:..\src/interruptions.c ****         case 1:         // Motor 2
 1174              		.loc 1 601 0
 1175 0082 15E0     		b	.L90
 1176              	.L92:
 604:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
 1177              		.loc 1 604 0
 1178 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1179 0086 0D4A     		ldr	r2, .L98+4
 1180 0088 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1181 008a 002B     		cmp	r3, #0
 1182 008c 03D0     		beq	.L95
 605:..\src/interruptions.c ****             else
 1183              		.loc 1 605 0
 1184 008e 0020     		movs	r0, #0
 1185 0090 FFF7FEFF 		bl	VT2_DIR_Write
 1186 0094 02E0     		b	.L96
 1187              	.L95:
 607:..\src/interruptions.c ****             
 1188              		.loc 1 607 0
 1189 0096 0120     		movs	r0, #1
 1190 0098 FFF7FEFF 		bl	VT2_DIR_Write
 1191              	.L96:
 609:..\src/interruptions.c ****         break;
 1192              		.loc 1 609 0
 1193 009c B7F90E30 		ldrsh	r3, [r7, #14]
 1194 00a0 002B     		cmp	r3, #0
 1195 00a2 B8BF     		it	lt
 1196 00a4 5B42     		rsblt	r3, r3, #0
 1197 00a6 9BB2     		uxth	r3, r3
 1198 00a8 1846     		mov	r0, r3
 1199 00aa FFF7FEFF 		bl	PWM_VT_WriteCompare2
 610:..\src/interruptions.c ****     }
 1200              		.loc 1 610 0
 1201 00ae 00BF     		nop
 1202              	.L90:
 1203              	.L97:
 1204              		.loc 1 614 0
 1205 00b0 00BF     		nop
 1206 00b2 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 34


 1207              		.cfi_def_cfa_offset 8
 1208 00b4 BD46     		mov	sp, r7
 1209              		.cfi_def_cfa_register 13
 1210              		@ sp needed
 1211 00b6 80BD     		pop	{r7, pc}
 1212              	.L99:
 1213              		.align	2
 1214              	.L98:
 1215 00b8 00000000 		.word	VT_ref
 1216 00bc 90000000 		.word	motor_dir.9793
 1217              		.cfi_endproc
 1218              	.LFE69:
 1219              		.size	vibrotactile_control_generic, .-vibrotactile_control_generic
 1220              		.section	.text.encoder_reading_SPI,"ax",%progbits
 1221              		.align	2
 1222              		.global	encoder_reading_SPI
 1223              		.thumb
 1224              		.thumb_func
 1225              		.type	encoder_reading_SPI, %function
 1226              	encoder_reading_SPI:
 1227              	.LFB70:
 615:..\src/interruptions.c **** 
 616:..\src/interruptions.c **** //==============================================================================
 617:..\src/interruptions.c **** //                                                           ENCODER READING SPI
 618:..\src/interruptions.c **** //==============================================================================
 619:..\src/interruptions.c **** 
 620:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 1228              		.loc 1 620 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 8
 1231              		@ frame_needed = 1, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 1233 0000 80B4     		push	{r7}
 1234              		.cfi_def_cfa_offset 4
 1235              		.cfi_offset 7, -4
 1236 0002 83B0     		sub	sp, sp, #12
 1237              		.cfi_def_cfa_offset 16
 1238 0004 00AF     		add	r7, sp, #0
 1239              		.cfi_def_cfa_register 7
 1240 0006 0346     		mov	r3, r0
 1241 0008 0A46     		mov	r2, r1
 1242 000a FB71     		strb	r3, [r7, #7]
 1243 000c 1346     		mov	r3, r2
 1244 000e BB71     		strb	r3, [r7, #6]
 621:..\src/interruptions.c **** 
 622:..\src/interruptions.c **** }
 1245              		.loc 1 622 0
 1246 0010 00BF     		nop
 1247 0012 0C37     		adds	r7, r7, #12
 1248              		.cfi_def_cfa_offset 4
 1249 0014 BD46     		mov	sp, r7
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 0016 80BC     		pop	{r7}
 1253              		.cfi_restore 7
 1254              		.cfi_def_cfa_offset 0
 1255 0018 7047     		bx	lr
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 35


 1256              		.cfi_endproc
 1257              	.LFE70:
 1258              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 1259              		.global	__aeabi_f2d
 1260              		.global	__aeabi_ddiv
 1261              		.global	__aeabi_dsub
 1262              		.global	__aeabi_d2iz
 1263              		.global	__aeabi_i2d
 1264              		.global	__aeabi_dmul
 1265 001a 00BF     		.section	.text.analog_read_end,"ax",%progbits
 1266              		.align	2
 1267              		.global	analog_read_end
 1268              		.thumb
 1269              		.thumb_func
 1270              		.type	analog_read_end, %function
 1271              	analog_read_end:
 1272              	.LFB71:
 623:..\src/interruptions.c **** 
 624:..\src/interruptions.c **** //==============================================================================
 625:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
 626:..\src/interruptions.c **** //==============================================================================
 627:..\src/interruptions.c **** 
 628:..\src/interruptions.c **** void analog_read_end() {
 1273              		.loc 1 628 0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 1, uses_anonymous_args = 0
 1277 0000 90B5     		push	{r4, r7, lr}
 1278              		.cfi_def_cfa_offset 12
 1279              		.cfi_offset 4, -12
 1280              		.cfi_offset 7, -8
 1281              		.cfi_offset 14, -4
 1282 0002 83B0     		sub	sp, sp, #12
 1283              		.cfi_def_cfa_offset 24
 1284 0004 00AF     		add	r7, sp, #0
 1285              		.cfi_def_cfa_register 7
 629:..\src/interruptions.c **** 
 630:..\src/interruptions.c ****     /* =========================================================================
 631:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
 632:..\src/interruptions.c ****     /
 633:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 634:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 635:..\src/interruptions.c ****     /
 636:..\src/interruptions.c ****     /   Definition:
 637:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 638:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
 639:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
 640:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
 641:..\src/interruptions.c ****     /
 642:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 643:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
 644:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
 645:..\src/interruptions.c ****     /  =========================================================================
 646:..\src/interruptions.c ****     */
 647:..\src/interruptions.c **** 
 648:..\src/interruptions.c ****     int32 CYDATA i_aux;
 649:..\src/interruptions.c ****     static uint8 idx = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 36


 650:..\src/interruptions.c ****     
 651:..\src/interruptions.c ****     // Wait for conversion end
 652:..\src/interruptions.c ****     
 653:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 1286              		.loc 1 653 0
 1287 0006 08E0     		b	.L102
 1288              	.L103:
 654:..\src/interruptions.c ****         
 655:..\src/interruptions.c ****         if (interrupt_flag){
 1289              		.loc 1 655 0
 1290 0008 774B     		ldr	r3, .L115+24
 1291 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 000c 002B     		cmp	r3, #0
 1293 000e 04D0     		beq	.L102
 656:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1294              		.loc 1 656 0
 1295 0010 754B     		ldr	r3, .L115+24
 1296 0012 0022     		movs	r2, #0
 1297 0014 1A70     		strb	r2, [r3]
 657:..\src/interruptions.c ****             interrupt_manager();
 1298              		.loc 1 657 0
 1299 0016 FFF7FEFF 		bl	interrupt_manager
 1300              	.L102:
 653:..\src/interruptions.c ****         
 1301              		.loc 1 653 0
 1302 001a FFF7FEFF 		bl	ADC_STATUS_Read
 1303 001e 0346     		mov	r3, r0
 1304 0020 002B     		cmp	r3, #0
 1305 0022 F1D0     		beq	.L103
 658:..\src/interruptions.c ****         }
 659:..\src/interruptions.c ****     }
 660:..\src/interruptions.c **** 
 661:..\src/interruptions.c ****         // Read pressure in any case
 662:..\src/interruptions.c ****         pressure_value  = (int32)(ADC_buf[0] );    //0 - 4096  
 1306              		.loc 1 662 0
 1307 0024 714B     		ldr	r3, .L115+28
 1308 0026 B3F90030 		ldrsh	r3, [r3]
 1309 002a 1A46     		mov	r2, r3
 1310 002c 704B     		ldr	r3, .L115+32
 1311 002e 1A60     		str	r2, [r3]
 663:..\src/interruptions.c ****         pressure_value = (((float)pressure_value/4096.0)/0.002421)-101.325;       // datasheet tran
 1312              		.loc 1 663 0
 1313 0030 6F4B     		ldr	r3, .L115+32
 1314 0032 1B68     		ldr	r3, [r3]
 1315 0034 1846     		mov	r0, r3
 1316 0036 FFF7FEFF 		bl	__aeabi_i2f
 1317 003a 0346     		mov	r3, r0
 1318 003c 1846     		mov	r0, r3
 1319 003e FFF7FEFF 		bl	__aeabi_f2d
 1320 0042 4FF00002 		mov	r2, #0
 1321 0046 6B4B     		ldr	r3, .L115+36
 1322 0048 FFF7FEFF 		bl	__aeabi_ddiv
 1323 004c 0346     		mov	r3, r0
 1324 004e 0C46     		mov	r4, r1
 1325 0050 1846     		mov	r0, r3
 1326 0052 2146     		mov	r1, r4
 1327 0054 5EA3     		adr	r3, .L115
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 37


 1328 0056 D3E90023 		ldrd	r2, [r3]
 1329 005a FFF7FEFF 		bl	__aeabi_ddiv
 1330 005e 0346     		mov	r3, r0
 1331 0060 0C46     		mov	r4, r1
 1332 0062 1846     		mov	r0, r3
 1333 0064 2146     		mov	r1, r4
 1334 0066 5CA3     		adr	r3, .L115+8
 1335 0068 D3E90023 		ldrd	r2, [r3]
 1336 006c FFF7FEFF 		bl	__aeabi_dsub
 1337 0070 0346     		mov	r3, r0
 1338 0072 0C46     		mov	r4, r1
 1339 0074 1846     		mov	r0, r3
 1340 0076 2146     		mov	r1, r4
 1341 0078 FFF7FEFF 		bl	__aeabi_d2iz
 1342 007c 0246     		mov	r2, r0
 1343 007e 5C4B     		ldr	r3, .L115+32
 1344 0080 1A60     		str	r2, [r3]
 664:..\src/interruptions.c ****         if (pressure_value < 0) pressure_value = 0;
 1345              		.loc 1 664 0
 1346 0082 5B4B     		ldr	r3, .L115+32
 1347 0084 1B68     		ldr	r3, [r3]
 1348 0086 002B     		cmp	r3, #0
 1349 0088 02DA     		bge	.L104
 1350              		.loc 1 664 0 is_stmt 0 discriminator 1
 1351 008a 594B     		ldr	r3, .L115+32
 1352 008c 0022     		movs	r2, #0
 1353 008e 1A60     		str	r2, [r3]
 1354              	.L104:
 665:..\src/interruptions.c ****     
 666:..\src/interruptions.c ****         flag_master =  (int32)((ADC_buf[1]/4096.0)*5000);
 1355              		.loc 1 666 0 is_stmt 1
 1356 0090 564B     		ldr	r3, .L115+28
 1357 0092 B3F90230 		ldrsh	r3, [r3, #2]
 1358 0096 1846     		mov	r0, r3
 1359 0098 FFF7FEFF 		bl	__aeabi_i2d
 1360 009c 4FF00002 		mov	r2, #0
 1361 00a0 544B     		ldr	r3, .L115+36
 1362 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 1363 00a6 0346     		mov	r3, r0
 1364 00a8 0C46     		mov	r4, r1
 1365 00aa 1846     		mov	r0, r3
 1366 00ac 2146     		mov	r1, r4
 1367 00ae 4CA3     		adr	r3, .L115+16
 1368 00b0 D3E90023 		ldrd	r2, [r3]
 1369 00b4 FFF7FEFF 		bl	__aeabi_dmul
 1370 00b8 0346     		mov	r3, r0
 1371 00ba 0C46     		mov	r4, r1
 1372 00bc 1846     		mov	r0, r3
 1373 00be 2146     		mov	r1, r4
 1374 00c0 FFF7FEFF 		bl	__aeabi_d2iz
 1375 00c4 0246     		mov	r2, r0
 1376 00c6 4C4B     		ldr	r3, .L115+40
 1377 00c8 1A60     		str	r2, [r3]
 667:..\src/interruptions.c **** 
 668:..\src/interruptions.c ****         // Reset emg
 669:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 1378              		.loc 1 669 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 38


 1379 00ca 4C4B     		ldr	r3, .L115+44
 1380 00cc 0022     		movs	r2, #0
 1381 00ce 1A70     		strb	r2, [r3]
 1382 00d0 0CE0     		b	.L105
 1383              	.L106:
 670:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1384              		.loc 1 670 0 discriminator 3
 1385 00d2 4A4B     		ldr	r3, .L115+44
 1386 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1387 00d6 1946     		mov	r1, r3
 1388 00d8 494B     		ldr	r3, .L115+48
 1389 00da 0022     		movs	r2, #0
 1390 00dc 43F82120 		str	r2, [r3, r1, lsl #2]
 669:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1391              		.loc 1 669 0 discriminator 3
 1392 00e0 464B     		ldr	r3, .L115+44
 1393 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1394 00e4 0133     		adds	r3, r3, #1
 1395 00e6 DAB2     		uxtb	r2, r3
 1396 00e8 444B     		ldr	r3, .L115+44
 1397 00ea 1A70     		strb	r2, [r3]
 1398              	.L105:
 669:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1399              		.loc 1 669 0 is_stmt 0 discriminator 1
 1400 00ec 434B     		ldr	r3, .L115+44
 1401 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1402 00f0 012B     		cmp	r3, #1
 1403 00f2 EED9     		bls	.L106
 671:..\src/interruptions.c ****         }
 672:..\src/interruptions.c **** 
 673:..\src/interruptions.c ****         i_aux = (int32)(ADC_buf[1 + c_mem.emg.switch_emg]);
 1404              		.loc 1 673 0 is_stmt 1
 1405 00f4 434B     		ldr	r3, .L115+52
 1406 00f6 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 1407 00fa 0133     		adds	r3, r3, #1
 1408 00fc 3B4A     		ldr	r2, .L115+28
 1409 00fe 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 1410 0102 7B60     		str	r3, [r7, #4]
 674:..\src/interruptions.c ****         if (i_aux < 0) 
 1411              		.loc 1 674 0
 1412 0104 7B68     		ldr	r3, [r7, #4]
 1413 0106 002B     		cmp	r3, #0
 1414 0108 01DA     		bge	.L107
 675:..\src/interruptions.c ****             i_aux = 0;
 1415              		.loc 1 675 0
 1416 010a 0023     		movs	r3, #0
 1417 010c 7B60     		str	r3, [r7, #4]
 1418              	.L107:
 676:..\src/interruptions.c ****         i_aux = filter(i_aux, &filt_emg[0]);
 1419              		.loc 1 676 0
 1420 010e 3E49     		ldr	r1, .L115+56
 1421 0110 7868     		ldr	r0, [r7, #4]
 1422 0112 FFF7FEFF 		bl	filter
 1423 0116 7860     		str	r0, [r7, #4]
 677:..\src/interruptions.c ****         i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 1424              		.loc 1 677 0
 1425 0118 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 39


 1426 011a 9B02     		lsls	r3, r3, #10
 1427 011c 1A46     		mov	r2, r3
 1428 011e 3B4B     		ldr	r3, .L115+60
 1429 0120 5B6B     		ldr	r3, [r3, #52]
 1430 0122 B2FBF3F3 		udiv	r3, r2, r3
 1431 0126 7B60     		str	r3, [r7, #4]
 678:..\src/interruptions.c **** 
 679:..\src/interruptions.c ****         if (interrupt_flag){
 1432              		.loc 1 679 0
 1433 0128 2F4B     		ldr	r3, .L115+24
 1434 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1435 012c 002B     		cmp	r3, #0
 1436 012e 04D0     		beq	.L108
 680:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1437              		.loc 1 680 0
 1438 0130 2D4B     		ldr	r3, .L115+24
 1439 0132 0022     		movs	r2, #0
 1440 0134 1A70     		strb	r2, [r3]
 681:..\src/interruptions.c ****             interrupt_manager();
 1441              		.loc 1 681 0
 1442 0136 FFF7FEFF 		bl	interrupt_manager
 1443              	.L108:
 682:..\src/interruptions.c ****         }
 683:..\src/interruptions.c ****         //Saturation
 684:..\src/interruptions.c ****         if (i_aux < 0)
 1444              		.loc 1 684 0
 1445 013a 7B68     		ldr	r3, [r7, #4]
 1446 013c 002B     		cmp	r3, #0
 1447 013e 02DA     		bge	.L109
 685:..\src/interruptions.c ****             i_aux = 0;
 1448              		.loc 1 685 0
 1449 0140 0023     		movs	r3, #0
 1450 0142 7B60     		str	r3, [r7, #4]
 1451 0144 06E0     		b	.L110
 1452              	.L109:
 686:..\src/interruptions.c ****         else 
 687:..\src/interruptions.c ****             if (i_aux > 1024) 
 1453              		.loc 1 687 0
 1454 0146 7B68     		ldr	r3, [r7, #4]
 1455 0148 B3F5806F 		cmp	r3, #1024
 1456 014c 02DD     		ble	.L110
 688:..\src/interruptions.c ****                 i_aux = 1024;
 1457              		.loc 1 688 0
 1458 014e 4FF48063 		mov	r3, #1024
 1459 0152 7B60     		str	r3, [r7, #4]
 1460              	.L110:
 689:..\src/interruptions.c ****         
 690:..\src/interruptions.c ****         g_adc_meas.emg[0] = i_aux;
 1461              		.loc 1 690 0
 1462 0154 2A4A     		ldr	r2, .L115+48
 1463 0156 7B68     		ldr	r3, [r7, #4]
 1464 0158 1360     		str	r3, [r2]
 691:..\src/interruptions.c ****             
 692:..\src/interruptions.c ****         i_aux = (int32)(ADC_buf[2 - c_mem.emg.switch_emg]);
 1465              		.loc 1 692 0
 1466 015a 2A4B     		ldr	r3, .L115+52
 1467 015c 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 40


 1468 0160 C3F10203 		rsb	r3, r3, #2
 1469 0164 214A     		ldr	r2, .L115+28
 1470 0166 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 1471 016a 7B60     		str	r3, [r7, #4]
 693:..\src/interruptions.c **** 
 694:..\src/interruptions.c ****         if (i_aux < 0)
 1472              		.loc 1 694 0
 1473 016c 7B68     		ldr	r3, [r7, #4]
 1474 016e 002B     		cmp	r3, #0
 1475 0170 01DA     		bge	.L111
 695:..\src/interruptions.c ****             i_aux = 0;
 1476              		.loc 1 695 0
 1477 0172 0023     		movs	r3, #0
 1478 0174 7B60     		str	r3, [r7, #4]
 1479              	.L111:
 696:..\src/interruptions.c ****         i_aux = filter(i_aux, &filt_emg[1]);
 1480              		.loc 1 696 0
 1481 0176 2649     		ldr	r1, .L115+64
 1482 0178 7868     		ldr	r0, [r7, #4]
 1483 017a FFF7FEFF 		bl	filter
 1484 017e 7860     		str	r0, [r7, #4]
 697:..\src/interruptions.c ****         i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 1485              		.loc 1 697 0
 1486 0180 7B68     		ldr	r3, [r7, #4]
 1487 0182 9B02     		lsls	r3, r3, #10
 1488 0184 1A46     		mov	r2, r3
 1489 0186 214B     		ldr	r3, .L115+60
 1490 0188 9B6B     		ldr	r3, [r3, #56]
 1491 018a B2FBF3F3 		udiv	r3, r2, r3
 1492 018e 7B60     		str	r3, [r7, #4]
 698:..\src/interruptions.c **** 
 699:..\src/interruptions.c ****         if (interrupt_flag){
 1493              		.loc 1 699 0
 1494 0190 154B     		ldr	r3, .L115+24
 1495 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1496 0194 002B     		cmp	r3, #0
 1497 0196 04D0     		beq	.L112
 700:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1498              		.loc 1 700 0
 1499 0198 134B     		ldr	r3, .L115+24
 1500 019a 0022     		movs	r2, #0
 1501 019c 1A70     		strb	r2, [r3]
 701:..\src/interruptions.c ****             interrupt_manager();
 1502              		.loc 1 701 0
 1503 019e FFF7FEFF 		bl	interrupt_manager
 1504              	.L112:
 702:..\src/interruptions.c ****         }
 703:..\src/interruptions.c ****         
 704:..\src/interruptions.c ****         if (i_aux < 0) 
 1505              		.loc 1 704 0
 1506 01a2 7B68     		ldr	r3, [r7, #4]
 1507 01a4 002B     		cmp	r3, #0
 1508 01a6 02DA     		bge	.L113
 705:..\src/interruptions.c ****             i_aux = 0;
 1509              		.loc 1 705 0
 1510 01a8 0023     		movs	r3, #0
 1511 01aa 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 41


 1512 01ac 06E0     		b	.L114
 1513              	.L113:
 706:..\src/interruptions.c ****         else 
 707:..\src/interruptions.c ****             if (i_aux > 1024)
 1514              		.loc 1 707 0
 1515 01ae 7B68     		ldr	r3, [r7, #4]
 1516 01b0 B3F5806F 		cmp	r3, #1024
 1517 01b4 02DD     		ble	.L114
 708:..\src/interruptions.c ****                 i_aux = 1024;
 1518              		.loc 1 708 0
 1519 01b6 4FF48063 		mov	r3, #1024
 1520 01ba 7B60     		str	r3, [r7, #4]
 1521              	.L114:
 709:..\src/interruptions.c ****         
 710:..\src/interruptions.c ****         g_adc_meas.emg[1] = i_aux;
 1522              		.loc 1 710 0
 1523 01bc 104A     		ldr	r2, .L115+48
 1524 01be 7B68     		ldr	r3, [r7, #4]
 1525 01c0 5360     		str	r3, [r2, #4]
 711:..\src/interruptions.c ****     
 712:..\src/interruptions.c **** }
 1526              		.loc 1 712 0
 1527 01c2 00BF     		nop
 1528 01c4 0C37     		adds	r7, r7, #12
 1529              		.cfi_def_cfa_offset 12
 1530 01c6 BD46     		mov	sp, r7
 1531              		.cfi_def_cfa_register 13
 1532              		@ sp needed
 1533 01c8 90BD     		pop	{r4, r7, pc}
 1534              	.L116:
 1535 01ca 00BFAFF3 		.align	3
 1535      0080
 1536              	.L115:
 1537 01d0 F10F5B7A 		.word	2052788209
 1538 01d4 34D5633F 		.word	1063507252
 1539 01d8 CDCCCCCC 		.word	-858993459
 1540 01dc CC545940 		.word	1079596236
 1541 01e0 00000000 		.word	0
 1542 01e4 0088B340 		.word	1085507584
 1543 01e8 00000000 		.word	interrupt_flag
 1544 01ec 00000000 		.word	ADC_buf
 1545 01f0 00000000 		.word	pressure_value
 1546 01f4 0000B040 		.word	1085276160
 1547 01f8 00000000 		.word	flag_master
 1548 01fc 92000000 		.word	idx.9804
 1549 0200 00000000 		.word	g_adc_meas
 1550 0204 00000000 		.word	c_mem
 1551 0208 00000000 		.word	filt_emg
 1552 020c 00000000 		.word	g_mem
 1553 0210 08000000 		.word	filt_emg+8
 1554              		.cfi_endproc
 1555              	.LFE71:
 1556              		.size	analog_read_end, .-analog_read_end
 1557              		.section	.text.overcurrent_control,"ax",%progbits
 1558              		.align	2
 1559              		.global	overcurrent_control
 1560              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 42


 1561              		.thumb_func
 1562              		.type	overcurrent_control, %function
 1563              	overcurrent_control:
 1564              	.LFB72:
 713:..\src/interruptions.c **** 
 714:..\src/interruptions.c **** //==============================================================================
 715:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
 716:..\src/interruptions.c **** //==============================================================================
 717:..\src/interruptions.c **** 
 718:..\src/interruptions.c **** void overcurrent_control() {
 1565              		.loc 1 718 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 0
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569              		@ link register save eliminated.
 1570 0000 80B4     		push	{r7}
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 7, -4
 1573 0002 00AF     		add	r7, sp, #0
 1574              		.cfi_def_cfa_register 7
 719:..\src/interruptions.c ****     
 720:..\src/interruptions.c **** }
 1575              		.loc 1 720 0
 1576 0004 00BF     		nop
 1577 0006 BD46     		mov	sp, r7
 1578              		.cfi_def_cfa_register 13
 1579              		@ sp needed
 1580 0008 80BC     		pop	{r7}
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 000a 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE72:
 1586              		.size	overcurrent_control, .-overcurrent_control
 1587              		.section	.text.pwm_limit_search,"ax",%progbits
 1588              		.align	2
 1589              		.global	pwm_limit_search
 1590              		.thumb
 1591              		.thumb_func
 1592              		.type	pwm_limit_search, %function
 1593              	pwm_limit_search:
 1594              	.LFB73:
 721:..\src/interruptions.c **** 
 722:..\src/interruptions.c **** //==============================================================================
 723:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
 724:..\src/interruptions.c **** //==============================================================================
 725:..\src/interruptions.c **** 
 726:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 1595              		.loc 1 726 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 8
 1598              		@ frame_needed = 1, uses_anonymous_args = 0
 1599              		@ link register save eliminated.
 1600 0000 80B4     		push	{r7}
 1601              		.cfi_def_cfa_offset 4
 1602              		.cfi_offset 7, -4
 1603 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 43


 1604              		.cfi_def_cfa_offset 16
 1605 0004 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 1607 0006 0346     		mov	r3, r0
 1608 0008 FB71     		strb	r3, [r7, #7]
 727:..\src/interruptions.c **** 
 728:..\src/interruptions.c **** }
 1609              		.loc 1 728 0
 1610 000a 00BF     		nop
 1611 000c 0C37     		adds	r7, r7, #12
 1612              		.cfi_def_cfa_offset 4
 1613 000e BD46     		mov	sp, r7
 1614              		.cfi_def_cfa_register 13
 1615              		@ sp needed
 1616 0010 80BC     		pop	{r7}
 1617              		.cfi_restore 7
 1618              		.cfi_def_cfa_offset 0
 1619 0012 7047     		bx	lr
 1620              		.cfi_endproc
 1621              	.LFE73:
 1622              		.size	pwm_limit_search, .-pwm_limit_search
 1623              		.section	.text.cycles_counter_update,"ax",%progbits
 1624              		.align	2
 1625              		.global	cycles_counter_update
 1626              		.thumb
 1627              		.thumb_func
 1628              		.type	cycles_counter_update, %function
 1629              	cycles_counter_update:
 1630              	.LFB74:
 729:..\src/interruptions.c **** 
 730:..\src/interruptions.c **** //==============================================================================
 731:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
 732:..\src/interruptions.c **** //==============================================================================
 733:..\src/interruptions.c **** 
 734:..\src/interruptions.c **** void cycles_counter_update() {
 1631              		.loc 1 734 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636 0000 80B4     		push	{r7}
 1637              		.cfi_def_cfa_offset 4
 1638              		.cfi_offset 7, -4
 1639 0002 00AF     		add	r7, sp, #0
 1640              		.cfi_def_cfa_register 7
 735:..\src/interruptions.c **** 	
 736:..\src/interruptions.c **** }
 1641              		.loc 1 736 0
 1642 0004 00BF     		nop
 1643 0006 BD46     		mov	sp, r7
 1644              		.cfi_def_cfa_register 13
 1645              		@ sp needed
 1646 0008 80BC     		pop	{r7}
 1647              		.cfi_restore 7
 1648              		.cfi_def_cfa_offset 0
 1649 000a 7047     		bx	lr
 1650              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 44


 1651              	.LFE74:
 1652              		.size	cycles_counter_update, .-cycles_counter_update
 1653              		.section	.text.save_cycles_eeprom,"ax",%progbits
 1654              		.align	2
 1655              		.global	save_cycles_eeprom
 1656              		.thumb
 1657              		.thumb_func
 1658              		.type	save_cycles_eeprom, %function
 1659              	save_cycles_eeprom:
 1660              	.LFB75:
 737:..\src/interruptions.c **** 
 738:..\src/interruptions.c **** //==============================================================================
 739:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
 740:..\src/interruptions.c **** //==============================================================================
 741:..\src/interruptions.c **** 
 742:..\src/interruptions.c **** void save_cycles_eeprom() {
 1661              		.loc 1 742 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 1, uses_anonymous_args = 0
 1665              		@ link register save eliminated.
 1666 0000 80B4     		push	{r7}
 1667              		.cfi_def_cfa_offset 4
 1668              		.cfi_offset 7, -4
 1669 0002 00AF     		add	r7, sp, #0
 1670              		.cfi_def_cfa_register 7
 743:..\src/interruptions.c **** 
 744:..\src/interruptions.c **** }
 1671              		.loc 1 744 0
 1672 0004 00BF     		nop
 1673 0006 BD46     		mov	sp, r7
 1674              		.cfi_def_cfa_register 13
 1675              		@ sp needed
 1676 0008 80BC     		pop	{r7}
 1677              		.cfi_restore 7
 1678              		.cfi_def_cfa_offset 0
 1679 000a 7047     		bx	lr
 1680              		.cfi_endproc
 1681              	.LFE75:
 1682              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 1683              		.bss
 1684              	state.9746:
 1685 0000 00       		.space	1
 1686 0001 000000   		.align	2
 1687              	rx_queue.9750:
 1688 0004 000000   		.space	3
 1689              	data_packet_length.9748:
 1690 0007 00       		.space	1
 1691              	data_packet_index.9747:
 1692 0008 00       		.space	1
 1693 0009 000000   		.align	2
 1694              	data_packet_buffer.9749:
 1695 000c 00000000 		.space	128
 1695      00000000 
 1695      00000000 
 1695      00000000 
 1695      00000000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 45


 1696              	current_emg.9771:
 1697 008c 00       		.space	1
 1698 008d 000000   		.align	2
 1699              	motor_dir.9793:
 1700 0090 0000     		.space	2
 1701              	idx.9804:
 1702 0092 00       		.space	1
 1703              		.text
 1704              	.Letext0:
 1705              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1706              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1707              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1708              		.file 5 "..\\src\\globals.h"
 1709              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1710              		.file 7 "..\\src\\commands.h"
 1711              		.section	.debug_info,"",%progbits
 1712              	.Ldebug_info0:
 1713 0000 B0070000 		.4byte	0x7b0
 1714 0004 0400     		.2byte	0x4
 1715 0006 00000000 		.4byte	.Ldebug_abbrev0
 1716 000a 04       		.byte	0x4
 1717 000b 01       		.uleb128 0x1
 1718 000c 49000000 		.4byte	.LASF118
 1719 0010 0C       		.byte	0xc
 1720 0011 BE010000 		.4byte	.LASF119
 1721 0015 30030000 		.4byte	.LASF120
 1722 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1723 001d 00000000 		.4byte	0
 1724 0021 00000000 		.4byte	.Ldebug_line0
 1725 0025 02       		.uleb128 0x2
 1726 0026 01       		.byte	0x1
 1727 0027 06       		.byte	0x6
 1728 0028 33000000 		.4byte	.LASF0
 1729 002c 02       		.uleb128 0x2
 1730 002d 01       		.byte	0x1
 1731 002e 08       		.byte	0x8
 1732 002f 3B050000 		.4byte	.LASF1
 1733 0033 02       		.uleb128 0x2
 1734 0034 02       		.byte	0x2
 1735 0035 05       		.byte	0x5
 1736 0036 49050000 		.4byte	.LASF2
 1737 003a 02       		.uleb128 0x2
 1738 003b 02       		.byte	0x2
 1739 003c 07       		.byte	0x7
 1740 003d F1020000 		.4byte	.LASF3
 1741 0041 03       		.uleb128 0x3
 1742 0042 EC030000 		.4byte	.LASF9
 1743 0046 02       		.byte	0x2
 1744 0047 3F       		.byte	0x3f
 1745 0048 4C000000 		.4byte	0x4c
 1746 004c 02       		.uleb128 0x2
 1747 004d 04       		.byte	0x4
 1748 004e 05       		.byte	0x5
 1749 004f 94010000 		.4byte	.LASF4
 1750 0053 02       		.uleb128 0x2
 1751 0054 04       		.byte	0x4
 1752 0055 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 46


 1753 0056 C9050000 		.4byte	.LASF5
 1754 005a 02       		.uleb128 0x2
 1755 005b 08       		.byte	0x8
 1756 005c 05       		.byte	0x5
 1757 005d 42010000 		.4byte	.LASF6
 1758 0061 02       		.uleb128 0x2
 1759 0062 08       		.byte	0x8
 1760 0063 07       		.byte	0x7
 1761 0064 FC000000 		.4byte	.LASF7
 1762 0068 04       		.uleb128 0x4
 1763 0069 04       		.byte	0x4
 1764 006a 05       		.byte	0x5
 1765 006b 696E7400 		.ascii	"int\000"
 1766 006f 02       		.uleb128 0x2
 1767 0070 04       		.byte	0x4
 1768 0071 07       		.byte	0x7
 1769 0072 7B020000 		.4byte	.LASF8
 1770 0076 03       		.uleb128 0x3
 1771 0077 33050000 		.4byte	.LASF10
 1772 007b 03       		.byte	0x3
 1773 007c 2C       		.byte	0x2c
 1774 007d 41000000 		.4byte	0x41
 1775 0081 05       		.uleb128 0x5
 1776 0082 EB020000 		.4byte	.LASF11
 1777 0086 04       		.byte	0x4
 1778 0087 E401     		.2byte	0x1e4
 1779 0089 2C000000 		.4byte	0x2c
 1780 008d 05       		.uleb128 0x5
 1781 008e 00000000 		.4byte	.LASF12
 1782 0092 04       		.byte	0x4
 1783 0093 E501     		.2byte	0x1e5
 1784 0095 3A000000 		.4byte	0x3a
 1785 0099 05       		.uleb128 0x5
 1786 009a FD010000 		.4byte	.LASF13
 1787 009e 04       		.byte	0x4
 1788 009f E601     		.2byte	0x1e6
 1789 00a1 53000000 		.4byte	0x53
 1790 00a5 05       		.uleb128 0x5
 1791 00a6 ED060000 		.4byte	.LASF14
 1792 00aa 04       		.byte	0x4
 1793 00ab E801     		.2byte	0x1e8
 1794 00ad 33000000 		.4byte	0x33
 1795 00b1 05       		.uleb128 0x5
 1796 00b2 67010000 		.4byte	.LASF15
 1797 00b6 04       		.byte	0x4
 1798 00b7 E901     		.2byte	0x1e9
 1799 00b9 4C000000 		.4byte	0x4c
 1800 00bd 02       		.uleb128 0x2
 1801 00be 04       		.byte	0x4
 1802 00bf 04       		.byte	0x4
 1803 00c0 F5040000 		.4byte	.LASF16
 1804 00c4 02       		.uleb128 0x2
 1805 00c5 08       		.byte	0x8
 1806 00c6 04       		.byte	0x4
 1807 00c7 D5010000 		.4byte	.LASF17
 1808 00cb 02       		.uleb128 0x2
 1809 00cc 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 47


 1810 00cd 08       		.byte	0x8
 1811 00ce E2050000 		.4byte	.LASF18
 1812 00d2 05       		.uleb128 0x5
 1813 00d3 62010000 		.4byte	.LASF19
 1814 00d7 04       		.byte	0x4
 1815 00d8 8E02     		.2byte	0x28e
 1816 00da DE000000 		.4byte	0xde
 1817 00de 06       		.uleb128 0x6
 1818 00df 81000000 		.4byte	0x81
 1819 00e3 02       		.uleb128 0x2
 1820 00e4 08       		.byte	0x8
 1821 00e5 04       		.byte	0x4
 1822 00e6 4C040000 		.4byte	.LASF20
 1823 00ea 02       		.uleb128 0x2
 1824 00eb 04       		.byte	0x4
 1825 00ec 07       		.byte	0x7
 1826 00ed 24040000 		.4byte	.LASF21
 1827 00f1 07       		.uleb128 0x7
 1828 00f2 22030000 		.4byte	.LASF121
 1829 00f6 01       		.byte	0x1
 1830 00f7 2C000000 		.4byte	0x2c
 1831 00fb 07       		.byte	0x7
 1832 00fc BA       		.byte	0xba
 1833 00fd 32010000 		.4byte	0x132
 1834 0101 08       		.uleb128 0x8
 1835 0102 0F060000 		.4byte	.LASF22
 1836 0106 00       		.byte	0
 1837 0107 08       		.uleb128 0x8
 1838 0108 0E030000 		.4byte	.LASF23
 1839 010c 01       		.byte	0x1
 1840 010d 08       		.uleb128 0x8
 1841 010e 0D020000 		.4byte	.LASF24
 1842 0112 02       		.byte	0x2
 1843 0113 08       		.uleb128 0x8
 1844 0114 B3060000 		.4byte	.LASF25
 1845 0118 03       		.byte	0x3
 1846 0119 08       		.uleb128 0x8
 1847 011a B2020000 		.4byte	.LASF26
 1848 011e 04       		.byte	0x4
 1849 011f 08       		.uleb128 0x8
 1850 0120 BD040000 		.4byte	.LASF27
 1851 0124 05       		.byte	0x5
 1852 0125 08       		.uleb128 0x8
 1853 0126 3B020000 		.4byte	.LASF28
 1854 012a 06       		.byte	0x6
 1855 012b 08       		.uleb128 0x8
 1856 012c 94060000 		.4byte	.LASF29
 1857 0130 07       		.byte	0x7
 1858 0131 00       		.byte	0
 1859 0132 09       		.uleb128 0x9
 1860 0133 F6050000 		.4byte	.LASF33
 1861 0137 86       		.byte	0x86
 1862 0138 05       		.byte	0x5
 1863 0139 9A       		.byte	0x9a
 1864 013a 6F010000 		.4byte	0x16f
 1865 013e 0A       		.uleb128 0xa
 1866 013f 2E060000 		.4byte	.LASF30
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 48


 1867 0143 05       		.byte	0x5
 1868 0144 9B       		.byte	0x9b
 1869 0145 6F010000 		.4byte	0x16f
 1870 0149 00       		.byte	0
 1871 014a 0A       		.uleb128 0xa
 1872 014b DB050000 		.4byte	.LASF31
 1873 014f 05       		.byte	0x5
 1874 0150 9C       		.byte	0x9c
 1875 0151 A5000000 		.4byte	0xa5
 1876 0155 80       		.byte	0x80
 1877 0156 0B       		.uleb128 0xb
 1878 0157 696E6400 		.ascii	"ind\000"
 1879 015b 05       		.byte	0x5
 1880 015c 9D       		.byte	0x9d
 1881 015d A5000000 		.4byte	0xa5
 1882 0161 82       		.byte	0x82
 1883 0162 0A       		.uleb128 0xa
 1884 0163 50010000 		.4byte	.LASF32
 1885 0167 05       		.byte	0x5
 1886 0168 9E       		.byte	0x9e
 1887 0169 81000000 		.4byte	0x81
 1888 016d 84       		.byte	0x84
 1889 016e 00       		.byte	0
 1890 016f 0C       		.uleb128 0xc
 1891 0170 81000000 		.4byte	0x81
 1892 0174 7F010000 		.4byte	0x17f
 1893 0178 0D       		.uleb128 0xd
 1894 0179 EA000000 		.4byte	0xea
 1895 017d 7F       		.byte	0x7f
 1896 017e 00       		.byte	0
 1897 017f 09       		.uleb128 0x9
 1898 0180 58040000 		.4byte	.LASF34
 1899 0184 10       		.byte	0x10
 1900 0185 05       		.byte	0x5
 1901 0186 A8       		.byte	0xa8
 1902 0187 AF010000 		.4byte	0x1af
 1903 018b 0B       		.uleb128 0xb
 1904 018c 696400   		.ascii	"id\000"
 1905 018f 05       		.byte	0x5
 1906 0190 A9       		.byte	0xa9
 1907 0191 81000000 		.4byte	0x81
 1908 0195 00       		.byte	0
 1909 0196 0A       		.uleb128 0xa
 1910 0197 1D010000 		.4byte	.LASF35
 1911 019b 05       		.byte	0x5
 1912 019c AA       		.byte	0xaa
 1913 019d 81000000 		.4byte	0x81
 1914 01a1 01       		.byte	0x1
 1915 01a2 0A       		.uleb128 0xa
 1916 01a3 B1030000 		.4byte	.LASF36
 1917 01a7 05       		.byte	0x5
 1918 01a8 AB       		.byte	0xab
 1919 01a9 AF010000 		.4byte	0x1af
 1920 01ad 02       		.byte	0x2
 1921 01ae 00       		.byte	0
 1922 01af 0C       		.uleb128 0xc
 1923 01b0 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 49


 1924 01b4 BF010000 		.4byte	0x1bf
 1925 01b8 0D       		.uleb128 0xd
 1926 01b9 EA000000 		.4byte	0xea
 1927 01bd 0D       		.byte	0xd
 1928 01be 00       		.byte	0
 1929 01bf 09       		.uleb128 0x9
 1930 01c0 04020000 		.4byte	.LASF37
 1931 01c4 10       		.byte	0x10
 1932 01c5 05       		.byte	0x5
 1933 01c6 B2       		.byte	0xb2
 1934 01c7 08020000 		.4byte	0x208
 1935 01cb 0A       		.uleb128 0xa
 1936 01cc A5030000 		.4byte	.LASF38
 1937 01d0 05       		.byte	0x5
 1938 01d1 B4       		.byte	0xb4
 1939 01d2 B1000000 		.4byte	0xb1
 1940 01d6 00       		.byte	0
 1941 01d7 0A       		.uleb128 0xa
 1942 01d8 9B040000 		.4byte	.LASF39
 1943 01dc 05       		.byte	0x5
 1944 01dd B5       		.byte	0xb5
 1945 01de B1000000 		.4byte	0xb1
 1946 01e2 04       		.byte	0x4
 1947 01e3 0A       		.uleb128 0xa
 1948 01e4 EA040000 		.4byte	.LASF40
 1949 01e8 05       		.byte	0x5
 1950 01e9 B6       		.byte	0xb6
 1951 01ea 81000000 		.4byte	0x81
 1952 01ee 08       		.byte	0x8
 1953 01ef 0B       		.uleb128 0xb
 1954 01f0 72657300 		.ascii	"res\000"
 1955 01f4 05       		.byte	0x5
 1956 01f5 B7       		.byte	0xb7
 1957 01f6 81000000 		.4byte	0x81
 1958 01fa 09       		.byte	0x9
 1959 01fb 0A       		.uleb128 0xa
 1960 01fc B1030000 		.4byte	.LASF36
 1961 0200 05       		.byte	0x5
 1962 0201 B8       		.byte	0xb8
 1963 0202 08020000 		.4byte	0x208
 1964 0206 0A       		.byte	0xa
 1965 0207 00       		.byte	0
 1966 0208 0C       		.uleb128 0xc
 1967 0209 81000000 		.4byte	0x81
 1968 020d 18020000 		.4byte	0x218
 1969 0211 0D       		.uleb128 0xd
 1970 0212 EA000000 		.4byte	0xea
 1971 0216 05       		.byte	0x5
 1972 0217 00       		.byte	0
 1973 0218 09       		.uleb128 0x9
 1974 0219 AF050000 		.4byte	.LASF41
 1975 021d 10       		.byte	0x10
 1976 021e 05       		.byte	0x5
 1977 021f C0       		.byte	0xc0
 1978 0220 61020000 		.4byte	0x261
 1979 0224 0A       		.uleb128 0xa
 1980 0225 34010000 		.4byte	.LASF42
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 50


 1981 0229 05       		.byte	0x5
 1982 022a C1       		.byte	0xc1
 1983 022b 61020000 		.4byte	0x261
 1984 022f 00       		.byte	0
 1985 0230 0A       		.uleb128 0xa
 1986 0231 D5060000 		.4byte	.LASF43
 1987 0235 05       		.byte	0x5
 1988 0236 C2       		.byte	0xc2
 1989 0237 71020000 		.4byte	0x271
 1990 023b 04       		.byte	0x4
 1991 023c 0A       		.uleb128 0xa
 1992 023d CB060000 		.4byte	.LASF44
 1993 0241 05       		.byte	0x5
 1994 0242 C3       		.byte	0xc3
 1995 0243 81020000 		.4byte	0x281
 1996 0247 0C       		.byte	0xc
 1997 0248 0A       		.uleb128 0xa
 1998 0249 30020000 		.4byte	.LASF45
 1999 024d 05       		.byte	0x5
 2000 024e C4       		.byte	0xc4
 2001 024f 81000000 		.4byte	0x81
 2002 0253 0E       		.byte	0xe
 2003 0254 0A       		.uleb128 0xa
 2004 0255 B1030000 		.4byte	.LASF36
 2005 0259 05       		.byte	0x5
 2006 025a C5       		.byte	0xc5
 2007 025b 91020000 		.4byte	0x291
 2008 025f 0F       		.byte	0xf
 2009 0260 00       		.byte	0
 2010 0261 0C       		.uleb128 0xc
 2011 0262 8D000000 		.4byte	0x8d
 2012 0266 71020000 		.4byte	0x271
 2013 026a 0D       		.uleb128 0xd
 2014 026b EA000000 		.4byte	0xea
 2015 026f 01       		.byte	0x1
 2016 0270 00       		.byte	0
 2017 0271 0C       		.uleb128 0xc
 2018 0272 99000000 		.4byte	0x99
 2019 0276 81020000 		.4byte	0x281
 2020 027a 0D       		.uleb128 0xd
 2021 027b EA000000 		.4byte	0xea
 2022 027f 01       		.byte	0x1
 2023 0280 00       		.byte	0
 2024 0281 0C       		.uleb128 0xc
 2025 0282 81000000 		.4byte	0x81
 2026 0286 91020000 		.4byte	0x291
 2027 028a 0D       		.uleb128 0xd
 2028 028b EA000000 		.4byte	0xea
 2029 028f 01       		.byte	0x1
 2030 0290 00       		.byte	0
 2031 0291 0C       		.uleb128 0xc
 2032 0292 81000000 		.4byte	0x81
 2033 0296 A1020000 		.4byte	0x2a1
 2034 029a 0D       		.uleb128 0xd
 2035 029b EA000000 		.4byte	0xea
 2036 029f 00       		.byte	0
 2037 02a0 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 51


 2038 02a1 09       		.uleb128 0x9
 2039 02a2 7E050000 		.4byte	.LASF46
 2040 02a6 10       		.byte	0x10
 2041 02a7 05       		.byte	0x5
 2042 02a8 CC       		.byte	0xcc
 2043 02a9 D2020000 		.4byte	0x2d2
 2044 02ad 0A       		.uleb128 0xa
 2045 02ae 68020000 		.4byte	.LASF47
 2046 02b2 05       		.byte	0x5
 2047 02b3 CD       		.byte	0xcd
 2048 02b4 81000000 		.4byte	0x81
 2049 02b8 00       		.byte	0
 2050 02b9 0A       		.uleb128 0xa
 2051 02ba 75050000 		.4byte	.LASF48
 2052 02be 05       		.byte	0x5
 2053 02bf CE       		.byte	0xce
 2054 02c0 81000000 		.4byte	0x81
 2055 02c4 01       		.byte	0x1
 2056 02c5 0A       		.uleb128 0xa
 2057 02c6 B1030000 		.4byte	.LASF36
 2058 02ca 05       		.byte	0x5
 2059 02cb CF       		.byte	0xcf
 2060 02cc AF010000 		.4byte	0x1af
 2061 02d0 02       		.byte	0x2
 2062 02d1 00       		.byte	0
 2063 02d2 09       		.uleb128 0x9
 2064 02d3 15000000 		.4byte	.LASF49
 2065 02d7 10       		.byte	0x10
 2066 02d8 05       		.byte	0x5
 2067 02d9 D6       		.byte	0xd6
 2068 02da 27030000 		.4byte	0x327
 2069 02de 0A       		.uleb128 0xa
 2070 02df 76060000 		.4byte	.LASF50
 2071 02e3 05       		.byte	0x5
 2072 02e4 D7       		.byte	0xd7
 2073 02e5 B1000000 		.4byte	0xb1
 2074 02e9 00       		.byte	0
 2075 02ea 0A       		.uleb128 0xa
 2076 02eb 2D040000 		.4byte	.LASF51
 2077 02ef 05       		.byte	0x5
 2078 02f0 D8       		.byte	0xd8
 2079 02f1 BD000000 		.4byte	0xbd
 2080 02f5 04       		.byte	0x4
 2081 02f6 0A       		.uleb128 0xa
 2082 02f7 BE030000 		.4byte	.LASF52
 2083 02fb 05       		.byte	0x5
 2084 02fc D9       		.byte	0xd9
 2085 02fd BD000000 		.4byte	0xbd
 2086 0301 08       		.byte	0x8
 2087 0302 0A       		.uleb128 0xa
 2088 0303 CF030000 		.4byte	.LASF53
 2089 0307 05       		.byte	0x5
 2090 0308 DA       		.byte	0xda
 2091 0309 81000000 		.4byte	0x81
 2092 030d 0C       		.byte	0xc
 2093 030e 0A       		.uleb128 0xa
 2094 030f 35060000 		.4byte	.LASF54
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 52


 2095 0313 05       		.byte	0x5
 2096 0314 DB       		.byte	0xdb
 2097 0315 81000000 		.4byte	0x81
 2098 0319 0D       		.byte	0xd
 2099 031a 0A       		.uleb128 0xa
 2100 031b B1030000 		.4byte	.LASF36
 2101 031f 05       		.byte	0x5
 2102 0320 DC       		.byte	0xdc
 2103 0321 81020000 		.4byte	0x281
 2104 0325 0E       		.byte	0xe
 2105 0326 00       		.byte	0
 2106 0327 09       		.uleb128 0x9
 2107 0328 3F000000 		.4byte	.LASF55
 2108 032c 60       		.byte	0x60
 2109 032d 05       		.byte	0x5
 2110 032e E6       		.byte	0xe6
 2111 032f 86030000 		.4byte	0x386
 2112 0333 0A       		.uleb128 0xa
 2113 0334 70050000 		.4byte	.LASF56
 2114 0338 05       		.byte	0x5
 2115 0339 E7       		.byte	0xe7
 2116 033a 81000000 		.4byte	0x81
 2117 033e 00       		.byte	0
 2118 033f 0A       		.uleb128 0xa
 2119 0340 B1030000 		.4byte	.LASF36
 2120 0344 05       		.byte	0x5
 2121 0345 E8       		.byte	0xe8
 2122 0346 86030000 		.4byte	0x386
 2123 034a 01       		.byte	0x1
 2124 034b 0B       		.uleb128 0xb
 2125 034c 64657600 		.ascii	"dev\000"
 2126 0350 05       		.byte	0x5
 2127 0351 E9       		.byte	0xe9
 2128 0352 7F010000 		.4byte	0x17f
 2129 0356 10       		.byte	0x10
 2130 0357 0A       		.uleb128 0xa
 2131 0358 04050000 		.4byte	.LASF57
 2132 035c 05       		.byte	0x5
 2133 035d EA       		.byte	0xea
 2134 035e BF010000 		.4byte	0x1bf
 2135 0362 20       		.byte	0x20
 2136 0363 0B       		.uleb128 0xb
 2137 0364 656D6700 		.ascii	"emg\000"
 2138 0368 05       		.byte	0x5
 2139 0369 EB       		.byte	0xeb
 2140 036a 18020000 		.4byte	0x218
 2141 036e 30       		.byte	0x30
 2142 036f 0B       		.uleb128 0xb
 2143 0370 4D5300   		.ascii	"MS\000"
 2144 0373 05       		.byte	0x5
 2145 0374 EC       		.byte	0xec
 2146 0375 A1020000 		.4byte	0x2a1
 2147 0379 40       		.byte	0x40
 2148 037a 0B       		.uleb128 0xb
 2149 037b 464200   		.ascii	"FB\000"
 2150 037e 05       		.byte	0x5
 2151 037f ED       		.byte	0xed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 53


 2152 0380 D2020000 		.4byte	0x2d2
 2153 0384 50       		.byte	0x50
 2154 0385 00       		.byte	0
 2155 0386 0C       		.uleb128 0xc
 2156 0387 81000000 		.4byte	0x81
 2157 038b 96030000 		.4byte	0x396
 2158 038f 0D       		.uleb128 0xd
 2159 0390 EA000000 		.4byte	0xea
 2160 0394 0E       		.byte	0xe
 2161 0395 00       		.byte	0
 2162 0396 09       		.uleb128 0x9
 2163 0397 53050000 		.4byte	.LASF58
 2164 039b 08       		.byte	0x8
 2165 039c 05       		.byte	0x5
 2166 039d F4       		.byte	0xf4
 2167 039e BB030000 		.4byte	0x3bb
 2168 03a2 0A       		.uleb128 0xa
 2169 03a3 AC010000 		.4byte	.LASF59
 2170 03a7 05       		.byte	0x5
 2171 03a8 F5       		.byte	0xf5
 2172 03a9 B1000000 		.4byte	0xb1
 2173 03ad 00       		.byte	0
 2174 03ae 0A       		.uleb128 0xa
 2175 03af 2E050000 		.4byte	.LASF60
 2176 03b3 05       		.byte	0x5
 2177 03b4 F6       		.byte	0xf6
 2178 03b5 B1000000 		.4byte	0xb1
 2179 03b9 04       		.byte	0x4
 2180 03ba 00       		.byte	0
 2181 03bb 0E       		.uleb128 0xe
 2182 03bc B6050000 		.4byte	.LASF61
 2183 03c0 0C       		.byte	0xc
 2184 03c1 05       		.byte	0x5
 2185 03c2 5A01     		.2byte	0x15a
 2186 03c4 E3030000 		.4byte	0x3e3
 2187 03c8 0F       		.uleb128 0xf
 2188 03c9 656D6700 		.ascii	"emg\000"
 2189 03cd 05       		.byte	0x5
 2190 03ce 5B01     		.2byte	0x15b
 2191 03d0 E3030000 		.4byte	0x3e3
 2192 03d4 00       		.byte	0
 2193 03d5 10       		.uleb128 0x10
 2194 03d6 D5040000 		.4byte	.LASF62
 2195 03da 05       		.byte	0x5
 2196 03db 5C01     		.2byte	0x15c
 2197 03dd BD000000 		.4byte	0xbd
 2198 03e1 08       		.byte	0x8
 2199 03e2 00       		.byte	0
 2200 03e3 0C       		.uleb128 0xc
 2201 03e4 B1000000 		.4byte	0xb1
 2202 03e8 F3030000 		.4byte	0x3f3
 2203 03ec 0D       		.uleb128 0xd
 2204 03ed EA000000 		.4byte	0xea
 2205 03f1 01       		.byte	0x1
 2206 03f2 00       		.byte	0
 2207 03f3 11       		.uleb128 0x11
 2208 03f4 4F020000 		.4byte	.LASF63
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 54


 2209 03f8 01       		.byte	0x1
 2210 03f9 62       		.byte	0x62
 2211 03fa 00000000 		.4byte	.LFB64
 2212 03fe 18000000 		.4byte	.LFE64-.LFB64
 2213 0402 01       		.uleb128 0x1
 2214 0403 9C       		.byte	0x9c
 2215 0404 11       		.uleb128 0x11
 2216 0405 11040000 		.4byte	.LASF64
 2217 0409 01       		.byte	0x1
 2218 040a 6D       		.byte	0x6d
 2219 040b 00000000 		.4byte	.LFB65
 2220 040f 20000000 		.4byte	.LFE65-.LFB65
 2221 0413 01       		.uleb128 0x1
 2222 0414 9C       		.byte	0x9c
 2223 0415 12       		.uleb128 0x12
 2224 0416 DC010000 		.4byte	.LASF74
 2225 041a 01       		.byte	0x1
 2226 041b 86       		.byte	0x86
 2227 041c 00000000 		.4byte	.LFB66
 2228 0420 0C020000 		.4byte	.LFE66-.LFB66
 2229 0424 01       		.uleb128 0x1
 2230 0425 9C       		.byte	0x9c
 2231 0426 AA040000 		.4byte	0x4aa
 2232 042a 13       		.uleb128 0x13
 2233 042b 8E010000 		.4byte	.LASF65
 2234 042f 01       		.byte	0x1
 2235 0430 8B       		.byte	0x8b
 2236 0431 81000000 		.4byte	0x81
 2237 0435 05       		.uleb128 0x5
 2238 0436 03       		.byte	0x3
 2239 0437 00000000 		.4byte	state.9746
 2240 043b 13       		.uleb128 0x13
 2241 043c D9020000 		.4byte	.LASF66
 2242 0440 01       		.byte	0x1
 2243 0441 8E       		.byte	0x8e
 2244 0442 81000000 		.4byte	0x81
 2245 0446 05       		.uleb128 0x5
 2246 0447 03       		.byte	0x3
 2247 0448 08000000 		.4byte	data_packet_index.9747
 2248 044c 13       		.uleb128 0x13
 2249 044d 50060000 		.4byte	.LASF67
 2250 0451 01       		.byte	0x1
 2251 0452 8F       		.byte	0x8f
 2252 0453 81000000 		.4byte	0x81
 2253 0457 05       		.uleb128 0x5
 2254 0458 03       		.byte	0x3
 2255 0459 07000000 		.4byte	data_packet_length.9748
 2256 045d 13       		.uleb128 0x13
 2257 045e 63060000 		.4byte	.LASF68
 2258 0462 01       		.byte	0x1
 2259 0463 90       		.byte	0x90
 2260 0464 6F010000 		.4byte	0x16f
 2261 0468 05       		.uleb128 0x5
 2262 0469 03       		.byte	0x3
 2263 046a 0C000000 		.4byte	data_packet_buffer.9749
 2264 046e 13       		.uleb128 0x13
 2265 046f 7F040000 		.4byte	.LASF69
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 55


 2266 0473 01       		.byte	0x1
 2267 0474 91       		.byte	0x91
 2268 0475 AA040000 		.4byte	0x4aa
 2269 0479 05       		.uleb128 0x5
 2270 047a 03       		.byte	0x3
 2271 047b 04000000 		.4byte	rx_queue.9750
 2272 047f 13       		.uleb128 0x13
 2273 0480 88020000 		.4byte	.LASF70
 2274 0484 01       		.byte	0x1
 2275 0485 94       		.byte	0x94
 2276 0486 81000000 		.4byte	0x81
 2277 048a 02       		.uleb128 0x2
 2278 048b 91       		.byte	0x91
 2279 048c 75       		.sleb128 -11
 2280 048d 13       		.uleb128 0x13
 2281 048e 04040000 		.4byte	.LASF71
 2282 0492 01       		.byte	0x1
 2283 0493 95       		.byte	0x95
 2284 0494 81000000 		.4byte	0x81
 2285 0498 02       		.uleb128 0x2
 2286 0499 91       		.byte	0x91
 2287 049a 77       		.sleb128 -9
 2288 049b 13       		.uleb128 0x13
 2289 049c F6030000 		.4byte	.LASF72
 2290 04a0 01       		.byte	0x1
 2291 04a1 96       		.byte	0x96
 2292 04a2 81000000 		.4byte	0x81
 2293 04a6 02       		.uleb128 0x2
 2294 04a7 91       		.byte	0x91
 2295 04a8 76       		.sleb128 -10
 2296 04a9 00       		.byte	0
 2297 04aa 0C       		.uleb128 0xc
 2298 04ab 81000000 		.4byte	0x81
 2299 04af BA040000 		.4byte	0x4ba
 2300 04b3 0D       		.uleb128 0xd
 2301 04b4 EA000000 		.4byte	0xea
 2302 04b8 02       		.byte	0x2
 2303 04b9 00       		.byte	0
 2304 04ba 14       		.uleb128 0x14
 2305 04bb C6020000 		.4byte	.LASF73
 2306 04bf 01       		.byte	0x1
 2307 04c0 0C01     		.2byte	0x10c
 2308 04c2 00000000 		.4byte	.LFB67
 2309 04c6 DC000000 		.4byte	.LFE67-.LFB67
 2310 04ca 01       		.uleb128 0x1
 2311 04cb 9C       		.byte	0x9c
 2312 04cc 15       		.uleb128 0x15
 2313 04cd 6D010000 		.4byte	.LASF75
 2314 04d1 01       		.byte	0x1
 2315 04d2 AC01     		.2byte	0x1ac
 2316 04d4 00000000 		.4byte	.LFB68
 2317 04d8 F0020000 		.4byte	.LFE68-.LFB68
 2318 04dc 01       		.uleb128 0x1
 2319 04dd 9C       		.byte	0x9c
 2320 04de 21050000 		.4byte	0x521
 2321 04e2 16       		.uleb128 0x16
 2322 04e3 1A050000 		.4byte	.LASF76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 56


 2323 04e7 01       		.byte	0x1
 2324 04e8 AE01     		.2byte	0x1ae
 2325 04ea B1000000 		.4byte	0xb1
 2326 04ee 02       		.uleb128 0x2
 2327 04ef 91       		.byte	0x91
 2328 04f0 70       		.sleb128 -16
 2329 04f1 16       		.uleb128 0x16
 2330 04f2 24050000 		.4byte	.LASF77
 2331 04f6 01       		.byte	0x1
 2332 04f7 AE01     		.2byte	0x1ae
 2333 04f9 B1000000 		.4byte	0xb1
 2334 04fd 02       		.uleb128 0x2
 2335 04fe 91       		.byte	0x91
 2336 04ff 6C       		.sleb128 -20
 2337 0500 17       		.uleb128 0x17
 2338 0501 534800   		.ascii	"SH\000"
 2339 0504 01       		.byte	0x1
 2340 0505 AF01     		.2byte	0x1af
 2341 0507 21050000 		.4byte	0x521
 2342 050b 02       		.uleb128 0x2
 2343 050c 91       		.byte	0x91
 2344 050d 74       		.sleb128 -12
 2345 050e 16       		.uleb128 0x16
 2346 050f F3060000 		.4byte	.LASF78
 2347 0513 01       		.byte	0x1
 2348 0514 B101     		.2byte	0x1b1
 2349 0516 81000000 		.4byte	0x81
 2350 051a 05       		.uleb128 0x5
 2351 051b 03       		.byte	0x3
 2352 051c 8C000000 		.4byte	current_emg.9771
 2353 0520 00       		.byte	0
 2354 0521 18       		.uleb128 0x18
 2355 0522 04       		.byte	0x4
 2356 0523 BF010000 		.4byte	0x1bf
 2357 0527 19       		.uleb128 0x19
 2358 0528 62040000 		.4byte	.LASF81
 2359 052c 01       		.byte	0x1
 2360 052d 3902     		.2byte	0x239
 2361 052f 00000000 		.4byte	.LFB69
 2362 0533 C0000000 		.4byte	.LFE69-.LFB69
 2363 0537 01       		.uleb128 0x1
 2364 0538 9C       		.byte	0x9c
 2365 0539 6E050000 		.4byte	0x56e
 2366 053d 1A       		.uleb128 0x1a
 2367 053e 69647800 		.ascii	"idx\000"
 2368 0542 01       		.byte	0x1
 2369 0543 3902     		.2byte	0x239
 2370 0545 81000000 		.4byte	0x81
 2371 0549 02       		.uleb128 0x2
 2372 054a 91       		.byte	0x91
 2373 054b 6F       		.sleb128 -17
 2374 054c 16       		.uleb128 0x16
 2375 054d 22070000 		.4byte	.LASF79
 2376 0551 01       		.byte	0x1
 2377 0552 3B02     		.2byte	0x23b
 2378 0554 A5000000 		.4byte	0xa5
 2379 0558 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 57


 2380 0559 91       		.byte	0x91
 2381 055a 76       		.sleb128 -10
 2382 055b 16       		.uleb128 0x16
 2383 055c E3060000 		.4byte	.LASF80
 2384 0560 01       		.byte	0x1
 2385 0561 3F02     		.2byte	0x23f
 2386 0563 81020000 		.4byte	0x281
 2387 0567 05       		.uleb128 0x5
 2388 0568 03       		.byte	0x3
 2389 0569 90000000 		.4byte	motor_dir.9793
 2390 056d 00       		.byte	0
 2391 056e 1B       		.uleb128 0x1b
 2392 056f E8000000 		.4byte	.LASF82
 2393 0573 01       		.byte	0x1
 2394 0574 6C02     		.2byte	0x26c
 2395 0576 00000000 		.4byte	.LFB70
 2396 057a 1A000000 		.4byte	.LFE70-.LFB70
 2397 057e 01       		.uleb128 0x1
 2398 057f 9C       		.byte	0x9c
 2399 0580 A3050000 		.4byte	0x5a3
 2400 0584 1C       		.uleb128 0x1c
 2401 0585 29020000 		.4byte	.LASF83
 2402 0589 01       		.byte	0x1
 2403 058a 6C02     		.2byte	0x26c
 2404 058c 81000000 		.4byte	0x81
 2405 0590 02       		.uleb128 0x2
 2406 0591 91       		.byte	0x91
 2407 0592 77       		.sleb128 -9
 2408 0593 1C       		.uleb128 0x1c
 2409 0594 0E050000 		.4byte	.LASF84
 2410 0598 01       		.byte	0x1
 2411 0599 6C02     		.2byte	0x26c
 2412 059b 81000000 		.4byte	0x81
 2413 059f 02       		.uleb128 0x2
 2414 05a0 91       		.byte	0x91
 2415 05a1 76       		.sleb128 -10
 2416 05a2 00       		.byte	0
 2417 05a3 1D       		.uleb128 0x1d
 2418 05a4 12070000 		.4byte	.LASF85
 2419 05a8 01       		.byte	0x1
 2420 05a9 7402     		.2byte	0x274
 2421 05ab 00000000 		.4byte	.LFB71
 2422 05af 14020000 		.4byte	.LFE71-.LFB71
 2423 05b3 01       		.uleb128 0x1
 2424 05b4 9C       		.byte	0x9c
 2425 05b5 DB050000 		.4byte	0x5db
 2426 05b9 16       		.uleb128 0x16
 2427 05ba E2000000 		.4byte	.LASF86
 2428 05be 01       		.byte	0x1
 2429 05bf 8802     		.2byte	0x288
 2430 05c1 B1000000 		.4byte	0xb1
 2431 05c5 02       		.uleb128 0x2
 2432 05c6 91       		.byte	0x91
 2433 05c7 6C       		.sleb128 -20
 2434 05c8 17       		.uleb128 0x17
 2435 05c9 69647800 		.ascii	"idx\000"
 2436 05cd 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 58


 2437 05ce 8902     		.2byte	0x289
 2438 05d0 81000000 		.4byte	0x81
 2439 05d4 05       		.uleb128 0x5
 2440 05d5 03       		.byte	0x3
 2441 05d6 92000000 		.4byte	idx.9804
 2442 05da 00       		.byte	0
 2443 05db 1E       		.uleb128 0x1e
 2444 05dc 9B050000 		.4byte	.LASF89
 2445 05e0 01       		.byte	0x1
 2446 05e1 CE02     		.2byte	0x2ce
 2447 05e3 00000000 		.4byte	.LFB72
 2448 05e7 0C000000 		.4byte	.LFE72-.LFB72
 2449 05eb 01       		.uleb128 0x1
 2450 05ec 9C       		.byte	0x9c
 2451 05ed 1B       		.uleb128 0x1b
 2452 05ee FE050000 		.4byte	.LASF87
 2453 05f2 01       		.byte	0x1
 2454 05f3 D602     		.2byte	0x2d6
 2455 05f5 00000000 		.4byte	.LFB73
 2456 05f9 14000000 		.4byte	.LFE73-.LFB73
 2457 05fd 01       		.uleb128 0x1
 2458 05fe 9C       		.byte	0x9c
 2459 05ff 13060000 		.4byte	0x613
 2460 0603 1C       		.uleb128 0x1c
 2461 0604 07000000 		.4byte	.LASF88
 2462 0608 01       		.byte	0x1
 2463 0609 D602     		.2byte	0x2d6
 2464 060b 81000000 		.4byte	0x81
 2465 060f 02       		.uleb128 0x2
 2466 0610 91       		.byte	0x91
 2467 0611 77       		.sleb128 -9
 2468 0612 00       		.byte	0
 2469 0613 1E       		.uleb128 0x1e
 2470 0614 A7040000 		.4byte	.LASF90
 2471 0618 01       		.byte	0x1
 2472 0619 DE02     		.2byte	0x2de
 2473 061b 00000000 		.4byte	.LFB74
 2474 061f 0C000000 		.4byte	.LFE74-.LFB74
 2475 0623 01       		.uleb128 0x1
 2476 0624 9C       		.byte	0x9c
 2477 0625 1E       		.uleb128 0x1e
 2478 0626 5D050000 		.4byte	.LASF91
 2479 062a 01       		.byte	0x1
 2480 062b E602     		.2byte	0x2e6
 2481 062d 00000000 		.4byte	.LFB75
 2482 0631 0C000000 		.4byte	.LFE75-.LFB75
 2483 0635 01       		.uleb128 0x1
 2484 0636 9C       		.byte	0x9c
 2485 0637 0C       		.uleb128 0xc
 2486 0638 47060000 		.4byte	0x647
 2487 063c 47060000 		.4byte	0x647
 2488 0640 0D       		.uleb128 0xd
 2489 0641 EA000000 		.4byte	0xea
 2490 0645 1C       		.byte	0x1c
 2491 0646 00       		.byte	0
 2492 0647 1F       		.uleb128 0x1f
 2493 0648 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 59


 2494 064c 13       		.uleb128 0x13
 2495 064d 20000000 		.4byte	.LASF92
 2496 0651 01       		.byte	0x1
 2497 0652 40       		.byte	0x40
 2498 0653 5D060000 		.4byte	0x65d
 2499 0657 05       		.uleb128 0x5
 2500 0658 03       		.byte	0x3
 2501 0659 00000000 		.4byte	pwm_preload_values
 2502 065d 1F       		.uleb128 0x1f
 2503 065e 37060000 		.4byte	0x637
 2504 0662 20       		.uleb128 0x20
 2505 0663 27010000 		.4byte	.LASF93
 2506 0667 06       		.byte	0x6
 2507 0668 1207     		.2byte	0x712
 2508 066a 6E060000 		.4byte	0x66e
 2509 066e 06       		.uleb128 0x6
 2510 066f 76000000 		.4byte	0x76
 2511 0673 20       		.uleb128 0x20
 2512 0674 23060000 		.4byte	.LASF94
 2513 0678 05       		.byte	0x5
 2514 0679 7201     		.2byte	0x172
 2515 067b BB030000 		.4byte	0x3bb
 2516 067f 20       		.uleb128 0x20
 2517 0680 8D050000 		.4byte	.LASF95
 2518 0684 05       		.byte	0x5
 2519 0685 7201     		.2byte	0x172
 2520 0687 BB030000 		.4byte	0x3bb
 2521 068b 20       		.uleb128 0x20
 2522 068c 9D010000 		.4byte	.LASF96
 2523 0690 05       		.byte	0x5
 2524 0691 6B01     		.2byte	0x16b
 2525 0693 32010000 		.4byte	0x132
 2526 0697 20       		.uleb128 0x20
 2527 0698 88040000 		.4byte	.LASF97
 2528 069c 05       		.byte	0x5
 2529 069d 7101     		.2byte	0x171
 2530 069f 27030000 		.4byte	0x327
 2531 06a3 20       		.uleb128 0x20
 2532 06a4 0F000000 		.4byte	.LASF98
 2533 06a8 05       		.byte	0x5
 2534 06a9 7101     		.2byte	0x171
 2535 06ab 27030000 		.4byte	0x327
 2536 06af 20       		.uleb128 0x20
 2537 06b0 56010000 		.4byte	.LASF99
 2538 06b4 05       		.byte	0x5
 2539 06b5 7301     		.2byte	0x173
 2540 06b7 8D000000 		.4byte	0x8d
 2541 06bb 20       		.uleb128 0x20
 2542 06bc 8E040000 		.4byte	.LASF100
 2543 06c0 05       		.byte	0x5
 2544 06c1 7401     		.2byte	0x174
 2545 06c3 8D000000 		.4byte	0x8d
 2546 06c7 20       		.uleb128 0x20
 2547 06c8 D7000000 		.4byte	.LASF101
 2548 06cc 05       		.byte	0x5
 2549 06cd 7501     		.2byte	0x175
 2550 06cf BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 60


 2551 06d3 20       		.uleb128 0x20
 2552 06d4 82010000 		.4byte	.LASF102
 2553 06d8 05       		.byte	0x5
 2554 06d9 6E01     		.2byte	0x16e
 2555 06db B1000000 		.4byte	0xb1
 2556 06df 20       		.uleb128 0x20
 2557 06e0 E7050000 		.4byte	.LASF103
 2558 06e4 05       		.byte	0x5
 2559 06e5 6C01     		.2byte	0x16c
 2560 06e7 81000000 		.4byte	0x81
 2561 06eb 20       		.uleb128 0x20
 2562 06ec 9C020000 		.4byte	.LASF104
 2563 06f0 05       		.byte	0x5
 2564 06f1 1901     		.2byte	0x119
 2565 06f3 81000000 		.4byte	0x81
 2566 06f7 0C       		.uleb128 0xc
 2567 06f8 A5000000 		.4byte	0xa5
 2568 06fc 07070000 		.4byte	0x707
 2569 0700 0D       		.uleb128 0xd
 2570 0701 EA000000 		.4byte	0xea
 2571 0705 02       		.byte	0x2
 2572 0706 00       		.byte	0
 2573 0707 20       		.uleb128 0x20
 2574 0708 B6010000 		.4byte	.LASF105
 2575 070c 05       		.byte	0x5
 2576 070d 2301     		.2byte	0x123
 2577 070f F7060000 		.4byte	0x6f7
 2578 0713 20       		.uleb128 0x20
 2579 0714 FF060000 		.4byte	.LASF106
 2580 0718 05       		.byte	0x5
 2581 0719 6F01     		.2byte	0x16f
 2582 071b 81000000 		.4byte	0x81
 2583 071f 20       		.uleb128 0x20
 2584 0720 C2050000 		.4byte	.LASF107
 2585 0724 05       		.byte	0x5
 2586 0725 6601     		.2byte	0x166
 2587 0727 B1000000 		.4byte	0xb1
 2588 072b 20       		.uleb128 0x20
 2589 072c 13010000 		.4byte	.LASF108
 2590 0730 05       		.byte	0x5
 2591 0731 6601     		.2byte	0x166
 2592 0733 B1000000 		.4byte	0xb1
 2593 0737 20       		.uleb128 0x20
 2594 0738 04030000 		.4byte	.LASF109
 2595 073c 05       		.byte	0x5
 2596 073d 6601     		.2byte	0x166
 2597 073f B1000000 		.4byte	0xb1
 2598 0743 20       		.uleb128 0x20
 2599 0744 0B070000 		.4byte	.LASF110
 2600 0748 05       		.byte	0x5
 2601 0749 6701     		.2byte	0x167
 2602 074b 81020000 		.4byte	0x281
 2603 074f 20       		.uleb128 0x20
 2604 0750 A2010000 		.4byte	.LASF111
 2605 0754 05       		.byte	0x5
 2606 0755 6701     		.2byte	0x167
 2607 0757 81020000 		.4byte	0x281
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 61


 2608 075b 20       		.uleb128 0x20
 2609 075c 42040000 		.4byte	.LASF112
 2610 0760 05       		.byte	0x5
 2611 0761 6701     		.2byte	0x167
 2612 0763 81020000 		.4byte	0x281
 2613 0767 20       		.uleb128 0x20
 2614 0768 FB040000 		.4byte	.LASF113
 2615 076c 05       		.byte	0x5
 2616 076d 6801     		.2byte	0x168
 2617 076f 81000000 		.4byte	0x81
 2618 0773 20       		.uleb128 0x20
 2619 0774 90020000 		.4byte	.LASF114
 2620 0778 05       		.byte	0x5
 2621 0779 6801     		.2byte	0x168
 2622 077b 81000000 		.4byte	0x81
 2623 077f 20       		.uleb128 0x20
 2624 0780 DE040000 		.4byte	.LASF115
 2625 0784 05       		.byte	0x5
 2626 0785 6801     		.2byte	0x168
 2627 0787 81000000 		.4byte	0x81
 2628 078b 20       		.uleb128 0x20
 2629 078c EE010000 		.4byte	.LASF116
 2630 0790 05       		.byte	0x5
 2631 0791 7001     		.2byte	0x170
 2632 0793 B1000000 		.4byte	0xb1
 2633 0797 0C       		.uleb128 0xc
 2634 0798 96030000 		.4byte	0x396
 2635 079c A7070000 		.4byte	0x7a7
 2636 07a0 0D       		.uleb128 0xd
 2637 07a1 EA000000 		.4byte	0xea
 2638 07a5 01       		.byte	0x1
 2639 07a6 00       		.byte	0
 2640 07a7 20       		.uleb128 0x20
 2641 07a8 8B060000 		.4byte	.LASF117
 2642 07ac 05       		.byte	0x5
 2643 07ad 7F01     		.2byte	0x17f
 2644 07af 97070000 		.4byte	0x797
 2645 07b3 00       		.byte	0
 2646              		.section	.debug_abbrev,"",%progbits
 2647              	.Ldebug_abbrev0:
 2648 0000 01       		.uleb128 0x1
 2649 0001 11       		.uleb128 0x11
 2650 0002 01       		.byte	0x1
 2651 0003 25       		.uleb128 0x25
 2652 0004 0E       		.uleb128 0xe
 2653 0005 13       		.uleb128 0x13
 2654 0006 0B       		.uleb128 0xb
 2655 0007 03       		.uleb128 0x3
 2656 0008 0E       		.uleb128 0xe
 2657 0009 1B       		.uleb128 0x1b
 2658 000a 0E       		.uleb128 0xe
 2659 000b 55       		.uleb128 0x55
 2660 000c 17       		.uleb128 0x17
 2661 000d 11       		.uleb128 0x11
 2662 000e 01       		.uleb128 0x1
 2663 000f 10       		.uleb128 0x10
 2664 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 62


 2665 0011 00       		.byte	0
 2666 0012 00       		.byte	0
 2667 0013 02       		.uleb128 0x2
 2668 0014 24       		.uleb128 0x24
 2669 0015 00       		.byte	0
 2670 0016 0B       		.uleb128 0xb
 2671 0017 0B       		.uleb128 0xb
 2672 0018 3E       		.uleb128 0x3e
 2673 0019 0B       		.uleb128 0xb
 2674 001a 03       		.uleb128 0x3
 2675 001b 0E       		.uleb128 0xe
 2676 001c 00       		.byte	0
 2677 001d 00       		.byte	0
 2678 001e 03       		.uleb128 0x3
 2679 001f 16       		.uleb128 0x16
 2680 0020 00       		.byte	0
 2681 0021 03       		.uleb128 0x3
 2682 0022 0E       		.uleb128 0xe
 2683 0023 3A       		.uleb128 0x3a
 2684 0024 0B       		.uleb128 0xb
 2685 0025 3B       		.uleb128 0x3b
 2686 0026 0B       		.uleb128 0xb
 2687 0027 49       		.uleb128 0x49
 2688 0028 13       		.uleb128 0x13
 2689 0029 00       		.byte	0
 2690 002a 00       		.byte	0
 2691 002b 04       		.uleb128 0x4
 2692 002c 24       		.uleb128 0x24
 2693 002d 00       		.byte	0
 2694 002e 0B       		.uleb128 0xb
 2695 002f 0B       		.uleb128 0xb
 2696 0030 3E       		.uleb128 0x3e
 2697 0031 0B       		.uleb128 0xb
 2698 0032 03       		.uleb128 0x3
 2699 0033 08       		.uleb128 0x8
 2700 0034 00       		.byte	0
 2701 0035 00       		.byte	0
 2702 0036 05       		.uleb128 0x5
 2703 0037 16       		.uleb128 0x16
 2704 0038 00       		.byte	0
 2705 0039 03       		.uleb128 0x3
 2706 003a 0E       		.uleb128 0xe
 2707 003b 3A       		.uleb128 0x3a
 2708 003c 0B       		.uleb128 0xb
 2709 003d 3B       		.uleb128 0x3b
 2710 003e 05       		.uleb128 0x5
 2711 003f 49       		.uleb128 0x49
 2712 0040 13       		.uleb128 0x13
 2713 0041 00       		.byte	0
 2714 0042 00       		.byte	0
 2715 0043 06       		.uleb128 0x6
 2716 0044 35       		.uleb128 0x35
 2717 0045 00       		.byte	0
 2718 0046 49       		.uleb128 0x49
 2719 0047 13       		.uleb128 0x13
 2720 0048 00       		.byte	0
 2721 0049 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 63


 2722 004a 07       		.uleb128 0x7
 2723 004b 04       		.uleb128 0x4
 2724 004c 01       		.byte	0x1
 2725 004d 03       		.uleb128 0x3
 2726 004e 0E       		.uleb128 0xe
 2727 004f 0B       		.uleb128 0xb
 2728 0050 0B       		.uleb128 0xb
 2729 0051 49       		.uleb128 0x49
 2730 0052 13       		.uleb128 0x13
 2731 0053 3A       		.uleb128 0x3a
 2732 0054 0B       		.uleb128 0xb
 2733 0055 3B       		.uleb128 0x3b
 2734 0056 0B       		.uleb128 0xb
 2735 0057 01       		.uleb128 0x1
 2736 0058 13       		.uleb128 0x13
 2737 0059 00       		.byte	0
 2738 005a 00       		.byte	0
 2739 005b 08       		.uleb128 0x8
 2740 005c 28       		.uleb128 0x28
 2741 005d 00       		.byte	0
 2742 005e 03       		.uleb128 0x3
 2743 005f 0E       		.uleb128 0xe
 2744 0060 1C       		.uleb128 0x1c
 2745 0061 0B       		.uleb128 0xb
 2746 0062 00       		.byte	0
 2747 0063 00       		.byte	0
 2748 0064 09       		.uleb128 0x9
 2749 0065 13       		.uleb128 0x13
 2750 0066 01       		.byte	0x1
 2751 0067 03       		.uleb128 0x3
 2752 0068 0E       		.uleb128 0xe
 2753 0069 0B       		.uleb128 0xb
 2754 006a 0B       		.uleb128 0xb
 2755 006b 3A       		.uleb128 0x3a
 2756 006c 0B       		.uleb128 0xb
 2757 006d 3B       		.uleb128 0x3b
 2758 006e 0B       		.uleb128 0xb
 2759 006f 01       		.uleb128 0x1
 2760 0070 13       		.uleb128 0x13
 2761 0071 00       		.byte	0
 2762 0072 00       		.byte	0
 2763 0073 0A       		.uleb128 0xa
 2764 0074 0D       		.uleb128 0xd
 2765 0075 00       		.byte	0
 2766 0076 03       		.uleb128 0x3
 2767 0077 0E       		.uleb128 0xe
 2768 0078 3A       		.uleb128 0x3a
 2769 0079 0B       		.uleb128 0xb
 2770 007a 3B       		.uleb128 0x3b
 2771 007b 0B       		.uleb128 0xb
 2772 007c 49       		.uleb128 0x49
 2773 007d 13       		.uleb128 0x13
 2774 007e 38       		.uleb128 0x38
 2775 007f 0B       		.uleb128 0xb
 2776 0080 00       		.byte	0
 2777 0081 00       		.byte	0
 2778 0082 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 64


 2779 0083 0D       		.uleb128 0xd
 2780 0084 00       		.byte	0
 2781 0085 03       		.uleb128 0x3
 2782 0086 08       		.uleb128 0x8
 2783 0087 3A       		.uleb128 0x3a
 2784 0088 0B       		.uleb128 0xb
 2785 0089 3B       		.uleb128 0x3b
 2786 008a 0B       		.uleb128 0xb
 2787 008b 49       		.uleb128 0x49
 2788 008c 13       		.uleb128 0x13
 2789 008d 38       		.uleb128 0x38
 2790 008e 0B       		.uleb128 0xb
 2791 008f 00       		.byte	0
 2792 0090 00       		.byte	0
 2793 0091 0C       		.uleb128 0xc
 2794 0092 01       		.uleb128 0x1
 2795 0093 01       		.byte	0x1
 2796 0094 49       		.uleb128 0x49
 2797 0095 13       		.uleb128 0x13
 2798 0096 01       		.uleb128 0x1
 2799 0097 13       		.uleb128 0x13
 2800 0098 00       		.byte	0
 2801 0099 00       		.byte	0
 2802 009a 0D       		.uleb128 0xd
 2803 009b 21       		.uleb128 0x21
 2804 009c 00       		.byte	0
 2805 009d 49       		.uleb128 0x49
 2806 009e 13       		.uleb128 0x13
 2807 009f 2F       		.uleb128 0x2f
 2808 00a0 0B       		.uleb128 0xb
 2809 00a1 00       		.byte	0
 2810 00a2 00       		.byte	0
 2811 00a3 0E       		.uleb128 0xe
 2812 00a4 13       		.uleb128 0x13
 2813 00a5 01       		.byte	0x1
 2814 00a6 03       		.uleb128 0x3
 2815 00a7 0E       		.uleb128 0xe
 2816 00a8 0B       		.uleb128 0xb
 2817 00a9 0B       		.uleb128 0xb
 2818 00aa 3A       		.uleb128 0x3a
 2819 00ab 0B       		.uleb128 0xb
 2820 00ac 3B       		.uleb128 0x3b
 2821 00ad 05       		.uleb128 0x5
 2822 00ae 01       		.uleb128 0x1
 2823 00af 13       		.uleb128 0x13
 2824 00b0 00       		.byte	0
 2825 00b1 00       		.byte	0
 2826 00b2 0F       		.uleb128 0xf
 2827 00b3 0D       		.uleb128 0xd
 2828 00b4 00       		.byte	0
 2829 00b5 03       		.uleb128 0x3
 2830 00b6 08       		.uleb128 0x8
 2831 00b7 3A       		.uleb128 0x3a
 2832 00b8 0B       		.uleb128 0xb
 2833 00b9 3B       		.uleb128 0x3b
 2834 00ba 05       		.uleb128 0x5
 2835 00bb 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 65


 2836 00bc 13       		.uleb128 0x13
 2837 00bd 38       		.uleb128 0x38
 2838 00be 0B       		.uleb128 0xb
 2839 00bf 00       		.byte	0
 2840 00c0 00       		.byte	0
 2841 00c1 10       		.uleb128 0x10
 2842 00c2 0D       		.uleb128 0xd
 2843 00c3 00       		.byte	0
 2844 00c4 03       		.uleb128 0x3
 2845 00c5 0E       		.uleb128 0xe
 2846 00c6 3A       		.uleb128 0x3a
 2847 00c7 0B       		.uleb128 0xb
 2848 00c8 3B       		.uleb128 0x3b
 2849 00c9 05       		.uleb128 0x5
 2850 00ca 49       		.uleb128 0x49
 2851 00cb 13       		.uleb128 0x13
 2852 00cc 38       		.uleb128 0x38
 2853 00cd 0B       		.uleb128 0xb
 2854 00ce 00       		.byte	0
 2855 00cf 00       		.byte	0
 2856 00d0 11       		.uleb128 0x11
 2857 00d1 2E       		.uleb128 0x2e
 2858 00d2 00       		.byte	0
 2859 00d3 3F       		.uleb128 0x3f
 2860 00d4 19       		.uleb128 0x19
 2861 00d5 03       		.uleb128 0x3
 2862 00d6 0E       		.uleb128 0xe
 2863 00d7 3A       		.uleb128 0x3a
 2864 00d8 0B       		.uleb128 0xb
 2865 00d9 3B       		.uleb128 0x3b
 2866 00da 0B       		.uleb128 0xb
 2867 00db 27       		.uleb128 0x27
 2868 00dc 19       		.uleb128 0x19
 2869 00dd 11       		.uleb128 0x11
 2870 00de 01       		.uleb128 0x1
 2871 00df 12       		.uleb128 0x12
 2872 00e0 06       		.uleb128 0x6
 2873 00e1 40       		.uleb128 0x40
 2874 00e2 18       		.uleb128 0x18
 2875 00e3 9742     		.uleb128 0x2117
 2876 00e5 19       		.uleb128 0x19
 2877 00e6 00       		.byte	0
 2878 00e7 00       		.byte	0
 2879 00e8 12       		.uleb128 0x12
 2880 00e9 2E       		.uleb128 0x2e
 2881 00ea 01       		.byte	0x1
 2882 00eb 3F       		.uleb128 0x3f
 2883 00ec 19       		.uleb128 0x19
 2884 00ed 03       		.uleb128 0x3
 2885 00ee 0E       		.uleb128 0xe
 2886 00ef 3A       		.uleb128 0x3a
 2887 00f0 0B       		.uleb128 0xb
 2888 00f1 3B       		.uleb128 0x3b
 2889 00f2 0B       		.uleb128 0xb
 2890 00f3 11       		.uleb128 0x11
 2891 00f4 01       		.uleb128 0x1
 2892 00f5 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 66


 2893 00f6 06       		.uleb128 0x6
 2894 00f7 40       		.uleb128 0x40
 2895 00f8 18       		.uleb128 0x18
 2896 00f9 9642     		.uleb128 0x2116
 2897 00fb 19       		.uleb128 0x19
 2898 00fc 01       		.uleb128 0x1
 2899 00fd 13       		.uleb128 0x13
 2900 00fe 00       		.byte	0
 2901 00ff 00       		.byte	0
 2902 0100 13       		.uleb128 0x13
 2903 0101 34       		.uleb128 0x34
 2904 0102 00       		.byte	0
 2905 0103 03       		.uleb128 0x3
 2906 0104 0E       		.uleb128 0xe
 2907 0105 3A       		.uleb128 0x3a
 2908 0106 0B       		.uleb128 0xb
 2909 0107 3B       		.uleb128 0x3b
 2910 0108 0B       		.uleb128 0xb
 2911 0109 49       		.uleb128 0x49
 2912 010a 13       		.uleb128 0x13
 2913 010b 02       		.uleb128 0x2
 2914 010c 18       		.uleb128 0x18
 2915 010d 00       		.byte	0
 2916 010e 00       		.byte	0
 2917 010f 14       		.uleb128 0x14
 2918 0110 2E       		.uleb128 0x2e
 2919 0111 00       		.byte	0
 2920 0112 3F       		.uleb128 0x3f
 2921 0113 19       		.uleb128 0x19
 2922 0114 03       		.uleb128 0x3
 2923 0115 0E       		.uleb128 0xe
 2924 0116 3A       		.uleb128 0x3a
 2925 0117 0B       		.uleb128 0xb
 2926 0118 3B       		.uleb128 0x3b
 2927 0119 05       		.uleb128 0x5
 2928 011a 27       		.uleb128 0x27
 2929 011b 19       		.uleb128 0x19
 2930 011c 11       		.uleb128 0x11
 2931 011d 01       		.uleb128 0x1
 2932 011e 12       		.uleb128 0x12
 2933 011f 06       		.uleb128 0x6
 2934 0120 40       		.uleb128 0x40
 2935 0121 18       		.uleb128 0x18
 2936 0122 9642     		.uleb128 0x2116
 2937 0124 19       		.uleb128 0x19
 2938 0125 00       		.byte	0
 2939 0126 00       		.byte	0
 2940 0127 15       		.uleb128 0x15
 2941 0128 2E       		.uleb128 0x2e
 2942 0129 01       		.byte	0x1
 2943 012a 3F       		.uleb128 0x3f
 2944 012b 19       		.uleb128 0x19
 2945 012c 03       		.uleb128 0x3
 2946 012d 0E       		.uleb128 0xe
 2947 012e 3A       		.uleb128 0x3a
 2948 012f 0B       		.uleb128 0xb
 2949 0130 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 67


 2950 0131 05       		.uleb128 0x5
 2951 0132 11       		.uleb128 0x11
 2952 0133 01       		.uleb128 0x1
 2953 0134 12       		.uleb128 0x12
 2954 0135 06       		.uleb128 0x6
 2955 0136 40       		.uleb128 0x40
 2956 0137 18       		.uleb128 0x18
 2957 0138 9742     		.uleb128 0x2117
 2958 013a 19       		.uleb128 0x19
 2959 013b 01       		.uleb128 0x1
 2960 013c 13       		.uleb128 0x13
 2961 013d 00       		.byte	0
 2962 013e 00       		.byte	0
 2963 013f 16       		.uleb128 0x16
 2964 0140 34       		.uleb128 0x34
 2965 0141 00       		.byte	0
 2966 0142 03       		.uleb128 0x3
 2967 0143 0E       		.uleb128 0xe
 2968 0144 3A       		.uleb128 0x3a
 2969 0145 0B       		.uleb128 0xb
 2970 0146 3B       		.uleb128 0x3b
 2971 0147 05       		.uleb128 0x5
 2972 0148 49       		.uleb128 0x49
 2973 0149 13       		.uleb128 0x13
 2974 014a 02       		.uleb128 0x2
 2975 014b 18       		.uleb128 0x18
 2976 014c 00       		.byte	0
 2977 014d 00       		.byte	0
 2978 014e 17       		.uleb128 0x17
 2979 014f 34       		.uleb128 0x34
 2980 0150 00       		.byte	0
 2981 0151 03       		.uleb128 0x3
 2982 0152 08       		.uleb128 0x8
 2983 0153 3A       		.uleb128 0x3a
 2984 0154 0B       		.uleb128 0xb
 2985 0155 3B       		.uleb128 0x3b
 2986 0156 05       		.uleb128 0x5
 2987 0157 49       		.uleb128 0x49
 2988 0158 13       		.uleb128 0x13
 2989 0159 02       		.uleb128 0x2
 2990 015a 18       		.uleb128 0x18
 2991 015b 00       		.byte	0
 2992 015c 00       		.byte	0
 2993 015d 18       		.uleb128 0x18
 2994 015e 0F       		.uleb128 0xf
 2995 015f 00       		.byte	0
 2996 0160 0B       		.uleb128 0xb
 2997 0161 0B       		.uleb128 0xb
 2998 0162 49       		.uleb128 0x49
 2999 0163 13       		.uleb128 0x13
 3000 0164 00       		.byte	0
 3001 0165 00       		.byte	0
 3002 0166 19       		.uleb128 0x19
 3003 0167 2E       		.uleb128 0x2e
 3004 0168 01       		.byte	0x1
 3005 0169 3F       		.uleb128 0x3f
 3006 016a 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 68


 3007 016b 03       		.uleb128 0x3
 3008 016c 0E       		.uleb128 0xe
 3009 016d 3A       		.uleb128 0x3a
 3010 016e 0B       		.uleb128 0xb
 3011 016f 3B       		.uleb128 0x3b
 3012 0170 05       		.uleb128 0x5
 3013 0171 27       		.uleb128 0x27
 3014 0172 19       		.uleb128 0x19
 3015 0173 11       		.uleb128 0x11
 3016 0174 01       		.uleb128 0x1
 3017 0175 12       		.uleb128 0x12
 3018 0176 06       		.uleb128 0x6
 3019 0177 40       		.uleb128 0x40
 3020 0178 18       		.uleb128 0x18
 3021 0179 9642     		.uleb128 0x2116
 3022 017b 19       		.uleb128 0x19
 3023 017c 01       		.uleb128 0x1
 3024 017d 13       		.uleb128 0x13
 3025 017e 00       		.byte	0
 3026 017f 00       		.byte	0
 3027 0180 1A       		.uleb128 0x1a
 3028 0181 05       		.uleb128 0x5
 3029 0182 00       		.byte	0
 3030 0183 03       		.uleb128 0x3
 3031 0184 08       		.uleb128 0x8
 3032 0185 3A       		.uleb128 0x3a
 3033 0186 0B       		.uleb128 0xb
 3034 0187 3B       		.uleb128 0x3b
 3035 0188 05       		.uleb128 0x5
 3036 0189 49       		.uleb128 0x49
 3037 018a 13       		.uleb128 0x13
 3038 018b 02       		.uleb128 0x2
 3039 018c 18       		.uleb128 0x18
 3040 018d 00       		.byte	0
 3041 018e 00       		.byte	0
 3042 018f 1B       		.uleb128 0x1b
 3043 0190 2E       		.uleb128 0x2e
 3044 0191 01       		.byte	0x1
 3045 0192 3F       		.uleb128 0x3f
 3046 0193 19       		.uleb128 0x19
 3047 0194 03       		.uleb128 0x3
 3048 0195 0E       		.uleb128 0xe
 3049 0196 3A       		.uleb128 0x3a
 3050 0197 0B       		.uleb128 0xb
 3051 0198 3B       		.uleb128 0x3b
 3052 0199 05       		.uleb128 0x5
 3053 019a 27       		.uleb128 0x27
 3054 019b 19       		.uleb128 0x19
 3055 019c 11       		.uleb128 0x11
 3056 019d 01       		.uleb128 0x1
 3057 019e 12       		.uleb128 0x12
 3058 019f 06       		.uleb128 0x6
 3059 01a0 40       		.uleb128 0x40
 3060 01a1 18       		.uleb128 0x18
 3061 01a2 9742     		.uleb128 0x2117
 3062 01a4 19       		.uleb128 0x19
 3063 01a5 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 69


 3064 01a6 13       		.uleb128 0x13
 3065 01a7 00       		.byte	0
 3066 01a8 00       		.byte	0
 3067 01a9 1C       		.uleb128 0x1c
 3068 01aa 05       		.uleb128 0x5
 3069 01ab 00       		.byte	0
 3070 01ac 03       		.uleb128 0x3
 3071 01ad 0E       		.uleb128 0xe
 3072 01ae 3A       		.uleb128 0x3a
 3073 01af 0B       		.uleb128 0xb
 3074 01b0 3B       		.uleb128 0x3b
 3075 01b1 05       		.uleb128 0x5
 3076 01b2 49       		.uleb128 0x49
 3077 01b3 13       		.uleb128 0x13
 3078 01b4 02       		.uleb128 0x2
 3079 01b5 18       		.uleb128 0x18
 3080 01b6 00       		.byte	0
 3081 01b7 00       		.byte	0
 3082 01b8 1D       		.uleb128 0x1d
 3083 01b9 2E       		.uleb128 0x2e
 3084 01ba 01       		.byte	0x1
 3085 01bb 3F       		.uleb128 0x3f
 3086 01bc 19       		.uleb128 0x19
 3087 01bd 03       		.uleb128 0x3
 3088 01be 0E       		.uleb128 0xe
 3089 01bf 3A       		.uleb128 0x3a
 3090 01c0 0B       		.uleb128 0xb
 3091 01c1 3B       		.uleb128 0x3b
 3092 01c2 05       		.uleb128 0x5
 3093 01c3 11       		.uleb128 0x11
 3094 01c4 01       		.uleb128 0x1
 3095 01c5 12       		.uleb128 0x12
 3096 01c6 06       		.uleb128 0x6
 3097 01c7 40       		.uleb128 0x40
 3098 01c8 18       		.uleb128 0x18
 3099 01c9 9642     		.uleb128 0x2116
 3100 01cb 19       		.uleb128 0x19
 3101 01cc 01       		.uleb128 0x1
 3102 01cd 13       		.uleb128 0x13
 3103 01ce 00       		.byte	0
 3104 01cf 00       		.byte	0
 3105 01d0 1E       		.uleb128 0x1e
 3106 01d1 2E       		.uleb128 0x2e
 3107 01d2 00       		.byte	0
 3108 01d3 3F       		.uleb128 0x3f
 3109 01d4 19       		.uleb128 0x19
 3110 01d5 03       		.uleb128 0x3
 3111 01d6 0E       		.uleb128 0xe
 3112 01d7 3A       		.uleb128 0x3a
 3113 01d8 0B       		.uleb128 0xb
 3114 01d9 3B       		.uleb128 0x3b
 3115 01da 05       		.uleb128 0x5
 3116 01db 11       		.uleb128 0x11
 3117 01dc 01       		.uleb128 0x1
 3118 01dd 12       		.uleb128 0x12
 3119 01de 06       		.uleb128 0x6
 3120 01df 40       		.uleb128 0x40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 70


 3121 01e0 18       		.uleb128 0x18
 3122 01e1 9742     		.uleb128 0x2117
 3123 01e3 19       		.uleb128 0x19
 3124 01e4 00       		.byte	0
 3125 01e5 00       		.byte	0
 3126 01e6 1F       		.uleb128 0x1f
 3127 01e7 26       		.uleb128 0x26
 3128 01e8 00       		.byte	0
 3129 01e9 49       		.uleb128 0x49
 3130 01ea 13       		.uleb128 0x13
 3131 01eb 00       		.byte	0
 3132 01ec 00       		.byte	0
 3133 01ed 20       		.uleb128 0x20
 3134 01ee 34       		.uleb128 0x34
 3135 01ef 00       		.byte	0
 3136 01f0 03       		.uleb128 0x3
 3137 01f1 0E       		.uleb128 0xe
 3138 01f2 3A       		.uleb128 0x3a
 3139 01f3 0B       		.uleb128 0xb
 3140 01f4 3B       		.uleb128 0x3b
 3141 01f5 05       		.uleb128 0x5
 3142 01f6 49       		.uleb128 0x49
 3143 01f7 13       		.uleb128 0x13
 3144 01f8 3F       		.uleb128 0x3f
 3145 01f9 19       		.uleb128 0x19
 3146 01fa 3C       		.uleb128 0x3c
 3147 01fb 19       		.uleb128 0x19
 3148 01fc 00       		.byte	0
 3149 01fd 00       		.byte	0
 3150 01fe 00       		.byte	0
 3151              		.section	.debug_aranges,"",%progbits
 3152 0000 74000000 		.4byte	0x74
 3153 0004 0200     		.2byte	0x2
 3154 0006 00000000 		.4byte	.Ldebug_info0
 3155 000a 04       		.byte	0x4
 3156 000b 00       		.byte	0
 3157 000c 0000     		.2byte	0
 3158 000e 0000     		.2byte	0
 3159 0010 00000000 		.4byte	.LFB64
 3160 0014 18000000 		.4byte	.LFE64-.LFB64
 3161 0018 00000000 		.4byte	.LFB65
 3162 001c 20000000 		.4byte	.LFE65-.LFB65
 3163 0020 00000000 		.4byte	.LFB66
 3164 0024 0C020000 		.4byte	.LFE66-.LFB66
 3165 0028 00000000 		.4byte	.LFB67
 3166 002c DC000000 		.4byte	.LFE67-.LFB67
 3167 0030 00000000 		.4byte	.LFB68
 3168 0034 F0020000 		.4byte	.LFE68-.LFB68
 3169 0038 00000000 		.4byte	.LFB69
 3170 003c C0000000 		.4byte	.LFE69-.LFB69
 3171 0040 00000000 		.4byte	.LFB70
 3172 0044 1A000000 		.4byte	.LFE70-.LFB70
 3173 0048 00000000 		.4byte	.LFB71
 3174 004c 14020000 		.4byte	.LFE71-.LFB71
 3175 0050 00000000 		.4byte	.LFB72
 3176 0054 0C000000 		.4byte	.LFE72-.LFB72
 3177 0058 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 71


 3178 005c 14000000 		.4byte	.LFE73-.LFB73
 3179 0060 00000000 		.4byte	.LFB74
 3180 0064 0C000000 		.4byte	.LFE74-.LFB74
 3181 0068 00000000 		.4byte	.LFB75
 3182 006c 0C000000 		.4byte	.LFE75-.LFB75
 3183 0070 00000000 		.4byte	0
 3184 0074 00000000 		.4byte	0
 3185              		.section	.debug_ranges,"",%progbits
 3186              	.Ldebug_ranges0:
 3187 0000 00000000 		.4byte	.LFB64
 3188 0004 18000000 		.4byte	.LFE64
 3189 0008 00000000 		.4byte	.LFB65
 3190 000c 20000000 		.4byte	.LFE65
 3191 0010 00000000 		.4byte	.LFB66
 3192 0014 0C020000 		.4byte	.LFE66
 3193 0018 00000000 		.4byte	.LFB67
 3194 001c DC000000 		.4byte	.LFE67
 3195 0020 00000000 		.4byte	.LFB68
 3196 0024 F0020000 		.4byte	.LFE68
 3197 0028 00000000 		.4byte	.LFB69
 3198 002c C0000000 		.4byte	.LFE69
 3199 0030 00000000 		.4byte	.LFB70
 3200 0034 1A000000 		.4byte	.LFE70
 3201 0038 00000000 		.4byte	.LFB71
 3202 003c 14020000 		.4byte	.LFE71
 3203 0040 00000000 		.4byte	.LFB72
 3204 0044 0C000000 		.4byte	.LFE72
 3205 0048 00000000 		.4byte	.LFB73
 3206 004c 14000000 		.4byte	.LFE73
 3207 0050 00000000 		.4byte	.LFB74
 3208 0054 0C000000 		.4byte	.LFE74
 3209 0058 00000000 		.4byte	.LFB75
 3210 005c 0C000000 		.4byte	.LFE75
 3211 0060 00000000 		.4byte	0
 3212 0064 00000000 		.4byte	0
 3213              		.section	.debug_line,"",%progbits
 3214              	.Ldebug_line0:
 3215 0000 C0030000 		.section	.debug_str,"MS",%progbits,1
 3215      02007701 
 3215      00000201 
 3215      FB0E0D00 
 3215      01010101 
 3216              	.LASF12:
 3217 0000 75696E74 		.ascii	"uint16\000"
 3217      313600
 3218              	.LASF88:
 3219 0007 6D6F745F 		.ascii	"mot_idx\000"
 3219      69647800 
 3220              	.LASF98:
 3221 000f 635F6D65 		.ascii	"c_mem\000"
 3221      6D00
 3222              	.LASF49:
 3223 0015 73745F46 		.ascii	"st_FB_spec\000"
 3223      425F7370 
 3223      656300
 3224              	.LASF92:
 3225 0020 70776D5F 		.ascii	"pwm_preload_values\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 72


 3225      7072656C 
 3225      6F61645F 
 3225      76616C75 
 3225      657300
 3226              	.LASF0:
 3227 0033 7369676E 		.ascii	"signed char\000"
 3227      65642063 
 3227      68617200 
 3228              	.LASF55:
 3229 003f 73745F65 		.ascii	"st_eeprom\000"
 3229      6570726F 
 3229      6D00
 3230              	.LASF118:
 3231 0049 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3231      43313120 
 3231      352E342E 
 3231      31203230 
 3231      31363036 
 3232 007c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3232      20726576 
 3232      6973696F 
 3232      6E203233 
 3232      37373135 
 3233 00af 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3233      66756E63 
 3233      74696F6E 
 3233      2D736563 
 3233      74696F6E 
 3234              	.LASF101:
 3235 00d7 6379636C 		.ascii	"cycle_time\000"
 3235      655F7469 
 3235      6D6500
 3236              	.LASF86:
 3237 00e2 695F6175 		.ascii	"i_aux\000"
 3237      7800
 3238              	.LASF82:
 3239 00e8 656E636F 		.ascii	"encoder_reading_SPI\000"
 3239      6465725F 
 3239      72656164 
 3239      696E675F 
 3239      53504900 
 3240              	.LASF7:
 3241 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 3241      206C6F6E 
 3241      6720756E 
 3241      7369676E 
 3241      65642069 
 3242              	.LASF108:
 3243 0113 53485F72 		.ascii	"SH_refOld\000"
 3243      65664F6C 
 3243      6400
 3244              	.LASF35:
 3245 011d 62617564 		.ascii	"baud_rate\000"
 3245      5F726174 
 3245      6500
 3246              	.LASF93:
 3247 0127 49544D5F 		.ascii	"ITM_RxBuffer\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 73


 3247      52784275 
 3247      66666572 
 3247      00
 3248              	.LASF42:
 3249 0134 656D675F 		.ascii	"emg_threshold\000"
 3249      74687265 
 3249      73686F6C 
 3249      6400
 3250              	.LASF6:
 3251 0142 6C6F6E67 		.ascii	"long long int\000"
 3251      206C6F6E 
 3251      6720696E 
 3251      7400
 3252              	.LASF32:
 3253 0150 72656164 		.ascii	"ready\000"
 3253      7900
 3254              	.LASF99:
 3255 0156 74696D65 		.ascii	"timer_value\000"
 3255      725F7661 
 3255      6C756500 
 3256              	.LASF19:
 3257 0162 72656738 		.ascii	"reg8\000"
 3257      00
 3258              	.LASF15:
 3259 0167 696E7433 		.ascii	"int32\000"
 3259      3200
 3260              	.LASF75:
 3261 016d 636F6D70 		.ascii	"compute_SH_reference\000"
 3261      7574655F 
 3261      53485F72 
 3261      65666572 
 3261      656E6365 
 3262              	.LASF102:
 3263 0182 666C6167 		.ascii	"flag_master\000"
 3263      5F6D6173 
 3263      74657200 
 3264              	.LASF65:
 3265 018e 73746174 		.ascii	"state\000"
 3265      6500
 3266              	.LASF4:
 3267 0194 6C6F6E67 		.ascii	"long int\000"
 3267      20696E74 
 3267      00
 3268              	.LASF96:
 3269 019d 675F7278 		.ascii	"g_rx\000"
 3269      00
 3270              	.LASF111:
 3271 01a2 56545F72 		.ascii	"VT_refOld\000"
 3271      65664F6C 
 3271      6400
 3272              	.LASF59:
 3273 01ac 6F6C645F 		.ascii	"old_value\000"
 3273      76616C75 
 3273      6500
 3274              	.LASF105:
 3275 01b6 4144435F 		.ascii	"ADC_buf\000"
 3275      62756600 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 74


 3276              	.LASF119:
 3277 01be 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 3277      72635C69 
 3277      6E746572 
 3277      72757074 
 3277      696F6E73 
 3278              	.LASF17:
 3279 01d5 646F7562 		.ascii	"double\000"
 3279      6C6500
 3280              	.LASF74:
 3281 01dc 696E7465 		.ascii	"interrupt_manager\000"
 3281      72727570 
 3281      745F6D61 
 3281      6E616765 
 3281      7200
 3282              	.LASF116:
 3283 01ee 70726573 		.ascii	"pressure_value\000"
 3283      73757265 
 3283      5F76616C 
 3283      756500
 3284              	.LASF13:
 3285 01fd 75696E74 		.ascii	"uint32\000"
 3285      333200
 3286              	.LASF37:
 3287 0204 73745F73 		.ascii	"st_slave\000"
 3287      6C617665 
 3287      00
 3288              	.LASF24:
 3289 020d 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 3289      545F4D4F 
 3289      44455F45 
 3289      4D475F50 
 3289      524F504F 
 3290              	.LASF83:
 3291 0229 6E5F6C69 		.ascii	"n_line\000"
 3291      6E6500
 3292              	.LASF45:
 3293 0230 73776974 		.ascii	"switch_emg\000"
 3293      63685F65 
 3293      6D6700
 3294              	.LASF28:
 3295 023b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 3295      545F4D4F 
 3295      44455F4A 
 3295      4F595354 
 3295      49434B00 
 3296              	.LASF63:
 3297 024f 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 3297      52533438 
 3297      355F5258 
 3297      5F457849 
 3297      6E746572 
 3298              	.LASF47:
 3299 0268 6D617374 		.ascii	"master_mode_active\000"
 3299      65725F6D 
 3299      6F64655F 
 3299      61637469 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 75


 3299      766500
 3300              	.LASF8:
 3301 027b 756E7369 		.ascii	"unsigned int\000"
 3301      676E6564 
 3301      20696E74 
 3301      00
 3302              	.LASF70:
 3303 0288 72785F64 		.ascii	"rx_data\000"
 3303      61746100 
 3304              	.LASF114:
 3305 0290 50756D70 		.ascii	"Pump_refOld\000"
 3305      5F726566 
 3305      4F6C6400 
 3306              	.LASF104:
 3307 029c 6379636C 		.ascii	"cycles_interrupt_flag\000"
 3307      65735F69 
 3307      6E746572 
 3307      72757074 
 3307      5F666C61 
 3308              	.LASF26:
 3309 02b2 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 3309      545F4D4F 
 3309      44455F45 
 3309      4D475F46 
 3309      43465300 
 3310              	.LASF73:
 3311 02c6 66756E63 		.ascii	"function_scheduler\000"
 3311      74696F6E 
 3311      5F736368 
 3311      6564756C 
 3311      657200
 3312              	.LASF66:
 3313 02d9 64617461 		.ascii	"data_packet_index\000"
 3313      5F706163 
 3313      6B65745F 
 3313      696E6465 
 3313      7800
 3314              	.LASF11:
 3315 02eb 75696E74 		.ascii	"uint8\000"
 3315      3800
 3316              	.LASF3:
 3317 02f1 73686F72 		.ascii	"short unsigned int\000"
 3317      7420756E 
 3317      7369676E 
 3317      65642069 
 3317      6E7400
 3318              	.LASF109:
 3319 0304 53485F72 		.ascii	"SH_refNew\000"
 3319      65664E65 
 3319      7700
 3320              	.LASF23:
 3321 030e 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 3321      545F4D4F 
 3321      44455F45 
 3321      4E434F44 
 3321      45523300 
 3322              	.LASF121:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 76


 3323 0322 53485F69 		.ascii	"SH_input_mode\000"
 3323      6E707574 
 3323      5F6D6F64 
 3323      6500
 3324              	.LASF120:
 3325 0330 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 3325      73657273 
 3325      5C6D676E 
 3325      6F63636F 
 3325      5C446F63 
 3326 035d 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\W"
 3326      485F5649 
 3326      4245535C 
 3326      46575F57 
 3326      65617261 
 3327 038e 4953485F 		.ascii	"ISH_VIBES_Socket.cydsn\000"
 3327      56494245 
 3327      535F536F 
 3327      636B6574 
 3327      2E637964 
 3328              	.LASF38:
 3329 03a5 706F735F 		.ascii	"pos_lim_inf\000"
 3329      6C696D5F 
 3329      696E6600 
 3330              	.LASF36:
 3331 03b1 756E7573 		.ascii	"unused_bytes\000"
 3331      65645F62 
 3331      79746573 
 3331      00
 3332              	.LASF52:
 3333 03be 70726F70 		.ascii	"prop_err_fb_gain\000"
 3333      5F657272 
 3333      5F66625F 
 3333      6761696E 
 3333      00
 3334              	.LASF53:
 3335 03cf 76696272 		.ascii	"vibrotactile_feedback_active\000"
 3335      6F746163 
 3335      74696C65 
 3335      5F666565 
 3335      64626163 
 3336              	.LASF9:
 3337 03ec 5F5F696E 		.ascii	"__int32_t\000"
 3337      7433325F 
 3337      7400
 3338              	.LASF72:
 3339 03f6 7061636B 		.ascii	"package_count\000"
 3339      6167655F 
 3339      636F756E 
 3339      7400
 3340              	.LASF71:
 3341 0404 72785F64 		.ascii	"rx_data_type\000"
 3341      6174615F 
 3341      74797065 
 3341      00
 3342              	.LASF64:
 3343 0411 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 77


 3343      4359434C 
 3343      45535F48 
 3343      616E646C 
 3343      657200
 3344              	.LASF21:
 3345 0424 73697A65 		.ascii	"sizetype\000"
 3345      74797065 
 3345      00
 3346              	.LASF51:
 3347 042d 6D617869 		.ascii	"maximum_pressure_kPa\000"
 3347      6D756D5F 
 3347      70726573 
 3347      73757265 
 3347      5F6B5061 
 3348              	.LASF112:
 3349 0442 56545F72 		.ascii	"VT_refNew\000"
 3349      65664E65 
 3349      7700
 3350              	.LASF20:
 3351 044c 6C6F6E67 		.ascii	"long double\000"
 3351      20646F75 
 3351      626C6500 
 3352              	.LASF34:
 3353 0458 73745F64 		.ascii	"st_device\000"
 3353      65766963 
 3353      6500
 3354              	.LASF81:
 3355 0462 76696272 		.ascii	"vibrotactile_control_generic\000"
 3355      6F746163 
 3355      74696C65 
 3355      5F636F6E 
 3355      74726F6C 
 3356              	.LASF69:
 3357 047f 72785F71 		.ascii	"rx_queue\000"
 3357      75657565 
 3357      00
 3358              	.LASF97:
 3359 0488 675F6D65 		.ascii	"g_mem\000"
 3359      6D00
 3360              	.LASF100:
 3361 048e 74696D65 		.ascii	"timer_value0\000"
 3361      725F7661 
 3361      6C756530 
 3361      00
 3362              	.LASF39:
 3363 049b 706F735F 		.ascii	"pos_lim_sup\000"
 3363      6C696D5F 
 3363      73757000 
 3364              	.LASF90:
 3365 04a7 6379636C 		.ascii	"cycles_counter_update\000"
 3365      65735F63 
 3365      6F756E74 
 3365      65725F75 
 3365      70646174 
 3366              	.LASF27:
 3367 04bd 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 3367      545F4D4F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 78


 3367      44455F45 
 3367      4D475F46 
 3367      4346535F 
 3368              	.LASF62:
 3369 04d5 70726573 		.ascii	"pressure\000"
 3369      73757265 
 3369      00
 3370              	.LASF115:
 3371 04de 50756D70 		.ascii	"Pump_refNew\000"
 3371      5F726566 
 3371      4E657700 
 3372              	.LASF40:
 3373 04ea 696E7075 		.ascii	"input_mode\000"
 3373      745F6D6F 
 3373      646500
 3374              	.LASF16:
 3375 04f5 666C6F61 		.ascii	"float\000"
 3375      7400
 3376              	.LASF113:
 3377 04fb 50756D70 		.ascii	"Pump_ref\000"
 3377      5F726566 
 3377      00
 3378              	.LASF57:
 3379 0504 53485F63 		.ascii	"SH_config\000"
 3379      6F6E6669 
 3379      6700
 3380              	.LASF84:
 3381 050e 6173736F 		.ascii	"assoc_motor\000"
 3381      635F6D6F 
 3381      746F7200 
 3382              	.LASF76:
 3383 051a 6572725F 		.ascii	"err_emg_1\000"
 3383      656D675F 
 3383      3100
 3384              	.LASF77:
 3385 0524 6572725F 		.ascii	"err_emg_2\000"
 3385      656D675F 
 3385      3200
 3386              	.LASF60:
 3387 052e 6761696E 		.ascii	"gain\000"
 3387      00
 3388              	.LASF10:
 3389 0533 696E7433 		.ascii	"int32_t\000"
 3389      325F7400 
 3390              	.LASF1:
 3391 053b 756E7369 		.ascii	"unsigned char\000"
 3391      676E6564 
 3391      20636861 
 3391      7200
 3392              	.LASF2:
 3393 0549 73686F72 		.ascii	"short int\000"
 3393      7420696E 
 3393      7400
 3394              	.LASF58:
 3395 0553 73745F66 		.ascii	"st_filter\000"
 3395      696C7465 
 3395      7200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 79


 3396              	.LASF91:
 3397 055d 73617665 		.ascii	"save_cycles_eeprom\000"
 3397      5F637963 
 3397      6C65735F 
 3397      65657072 
 3397      6F6D00
 3398              	.LASF56:
 3399 0570 666C6167 		.ascii	"flag\000"
 3399      00
 3400              	.LASF48:
 3401 0575 736C6176 		.ascii	"slave_ID\000"
 3401      655F4944 
 3401      00
 3402              	.LASF46:
 3403 057e 73745F4D 		.ascii	"st_MASTER_spec\000"
 3403      41535445 
 3403      525F7370 
 3403      656300
 3404              	.LASF95:
 3405 058d 675F6164 		.ascii	"g_adc_measOld\000"
 3405      635F6D65 
 3405      61734F6C 
 3405      6400
 3406              	.LASF89:
 3407 059b 6F766572 		.ascii	"overcurrent_control\000"
 3407      63757272 
 3407      656E745F 
 3407      636F6E74 
 3407      726F6C00 
 3408              	.LASF41:
 3409 05af 73745F65 		.ascii	"st_emg\000"
 3409      6D6700
 3410              	.LASF61:
 3411 05b6 73745F61 		.ascii	"st_adc_meas\000"
 3411      64635F6D 
 3411      65617300 
 3412              	.LASF107:
 3413 05c2 53485F72 		.ascii	"SH_ref\000"
 3413      656600
 3414              	.LASF5:
 3415 05c9 6C6F6E67 		.ascii	"long unsigned int\000"
 3415      20756E73 
 3415      69676E65 
 3415      6420696E 
 3415      7400
 3416              	.LASF31:
 3417 05db 6C656E67 		.ascii	"length\000"
 3417      746800
 3418              	.LASF18:
 3419 05e2 63686172 		.ascii	"char\000"
 3419      00
 3420              	.LASF103:
 3421 05e7 696E7465 		.ascii	"interrupt_flag\000"
 3421      72727570 
 3421      745F666C 
 3421      616700
 3422              	.LASF33:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 80


 3423 05f6 73745F64 		.ascii	"st_data\000"
 3423      61746100 
 3424              	.LASF87:
 3425 05fe 70776D5F 		.ascii	"pwm_limit_search\000"
 3425      6C696D69 
 3425      745F7365 
 3425      61726368 
 3425      00
 3426              	.LASF22:
 3427 060f 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 3427      545F4D4F 
 3427      44455F45 
 3427      58544552 
 3427      4E414C00 
 3428              	.LASF94:
 3429 0623 675F6164 		.ascii	"g_adc_meas\000"
 3429      635F6D65 
 3429      617300
 3430              	.LASF30:
 3431 062e 62756666 		.ascii	"buffer\000"
 3431      657200
 3432              	.LASF54:
 3433 0635 61697263 		.ascii	"airchamber_feedback_active\000"
 3433      68616D62 
 3433      65725F66 
 3433      65656462 
 3433      61636B5F 
 3434              	.LASF67:
 3435 0650 64617461 		.ascii	"data_packet_length\000"
 3435      5F706163 
 3435      6B65745F 
 3435      6C656E67 
 3435      746800
 3436              	.LASF68:
 3437 0663 64617461 		.ascii	"data_packet_buffer\000"
 3437      5F706163 
 3437      6B65745F 
 3437      62756666 
 3437      657200
 3438              	.LASF50:
 3439 0676 6D61785F 		.ascii	"max_residual_current\000"
 3439      72657369 
 3439      6475616C 
 3439      5F637572 
 3439      72656E74 
 3440              	.LASF117:
 3441 068b 66696C74 		.ascii	"filt_emg\000"
 3441      5F656D67 
 3441      00
 3442              	.LASF29:
 3443 0694 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 3443      545F4D4F 
 3443      44455F45 
 3443      4D475F50 
 3443      524F504F 
 3444              	.LASF25:
 3445 06b3 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccSqiu9U.s 			page 81


 3445      545F4D4F 
 3445      44455F45 
 3445      4D475F49 
 3445      4E544547 
 3446              	.LASF44:
 3447 06cb 656D675F 		.ascii	"emg_speed\000"
 3447      73706565 
 3447      6400
 3448              	.LASF43:
 3449 06d5 656D675F 		.ascii	"emg_max_value\000"
 3449      6D61785F 
 3449      76616C75 
 3449      6500
 3450              	.LASF80:
 3451 06e3 6D6F746F 		.ascii	"motor_dir\000"
 3451      725F6469 
 3451      7200
 3452              	.LASF14:
 3453 06ed 696E7431 		.ascii	"int16\000"
 3453      3600
 3454              	.LASF78:
 3455 06f3 63757272 		.ascii	"current_emg\000"
 3455      656E745F 
 3455      656D6700 
 3456              	.LASF106:
 3457 06ff 6D617374 		.ascii	"master_mode\000"
 3457      65725F6D 
 3457      6F646500 
 3458              	.LASF110:
 3459 070b 56545F72 		.ascii	"VT_ref\000"
 3459      656600
 3460              	.LASF85:
 3461 0712 616E616C 		.ascii	"analog_read_end\000"
 3461      6F675F72 
 3461      6561645F 
 3461      656E6400 
 3462              	.LASF79:
 3463 0722 70776D5F 		.ascii	"pwm_input\000"
 3463      696E7075 
 3463      7400
 3464              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
