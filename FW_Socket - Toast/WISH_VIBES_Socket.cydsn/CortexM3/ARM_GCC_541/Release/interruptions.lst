ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e E0E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 744B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D880 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 E1000000 		.word	.L12+1
 179 0034 2F010000 		.word	.L13+1
 180 0038 99010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6C4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6B4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6A4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 694B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 684A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 674B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 654B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 634B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 614B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 604B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5D4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 8


 225              		.loc 1 175 0
 226 007c 5C4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A680 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5A4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A180 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 574B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09C80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 97E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (master_mode && rx_data == c_mem.MS.
 249              		.loc 1 186 0
 250 00a2 544B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 0CD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 09D0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b4 504B     		ldr	r3, .L31+12
 261 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 262 00b8 002B     		cmp	r3, #0
 263 00ba 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00bc 4D4B     		ldr	r3, .L31+8
 266 00be 93F8C132 		ldrb	r3, [r3, #705]	@ zero_extendqisi2
 267 00c2 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 9


 269 00c6 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00c8 0023     		movs	r3, #0
 273 00ca FB71     		strb	r3, [r7, #7]
 274 00cc 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00ce 0123     		movs	r3, #1
 278 00d0 FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d2 4A4B     		ldr	r3, .L31+16
 282 00d4 0022     		movs	r2, #0
 283 00d6 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00d8 444B     		ldr	r3, .L31
 286 00da 0222     		movs	r2, #2
 287 00dc 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00de 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00e0 464A     		ldr	r2, .L31+16
 293 00e2 7B79     		ldrb	r3, [r7, #5]
 294 00e4 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e6 454B     		ldr	r3, .L31+16
 297 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00ea 012B     		cmp	r3, #1
 299 00ec 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00ee 434B     		ldr	r3, .L31+16
 302 00f0 0022     		movs	r2, #0
 303 00f2 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 10


 305 00f4 3D4B     		ldr	r3, .L31
 306 00f6 0022     		movs	r2, #0
 307 00f8 1A70     		strb	r2, [r3]
 308 00fa 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fc 3F4B     		ldr	r3, .L31+16
 312 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0100 802B     		cmp	r3, #128
 314 0102 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0104 3D4B     		ldr	r3, .L31+16
 317 0106 0022     		movs	r2, #0
 318 0108 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 010a 384B     		ldr	r3, .L31
 321 010c 0022     		movs	r2, #0
 322 010e 1A70     		strb	r2, [r3]
 323 0110 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0112 3B4B     		ldr	r3, .L31+20
 327 0114 0022     		movs	r2, #0
 328 0116 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 0118 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 011a 002B     		cmp	r3, #0
 332 011c 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 011e 334B     		ldr	r3, .L31
 335 0120 0322     		movs	r2, #3
 336 0122 1A70     		strb	r2, [r3]
 337 0124 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0126 314B     		ldr	r3, .L31
 341 0128 0422     		movs	r2, #4
 342 012a 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012c 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 012e 344B     		ldr	r3, .L31+20
 348 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0132 1946     		mov	r1, r3
 350 0134 334A     		ldr	r2, .L31+24
 351 0136 7B79     		ldrb	r3, [r7, #5]
 352 0138 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 013a 314B     		ldr	r3, .L31+20
 355 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 013e 0133     		adds	r3, r3, #1
 357 0140 DAB2     		uxtb	r2, r3
 358 0142 2F4B     		ldr	r3, .L31+20
 359 0144 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0146 2E4B     		ldr	r3, .L31+20
 362 0148 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 014a 2C4B     		ldr	r3, .L31+16
 364 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 014e 9A42     		cmp	r2, r3
 366 0150 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0152 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0154 002B     		cmp	r3, #0
 370 0156 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 0158 284B     		ldr	r3, .L31+16
 373 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015c 1A46     		mov	r2, r3
 375 015e 2949     		ldr	r1, .L31+24
 376 0160 2948     		ldr	r0, .L31+28
 377 0162 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0166 254B     		ldr	r3, .L31+16
 380 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 016a 1AB2     		sxth	r2, r3
 382 016c 264B     		ldr	r3, .L31+28
 383 016e A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0172 254B     		ldr	r3, .L31+28
 386 0174 0122     		movs	r2, #1
 387 0176 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 017a FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 017e 204B     		ldr	r3, .L31+20
 393 0180 0022     		movs	r2, #0
 394 0182 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0184 1D4B     		ldr	r3, .L31+16
 397 0186 0022     		movs	r2, #0
 398 0188 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 018a 184B     		ldr	r3, .L31
 401 018c 0022     		movs	r2, #0
 402 018e 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 0190 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0192 0133     		adds	r3, r3, #1
 406 0194 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0196 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 0198 184B     		ldr	r3, .L31+16
 412 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019c 013B     		subs	r3, r3, #1
 414 019e DAB2     		uxtb	r2, r3
 415 01a0 164B     		ldr	r3, .L31+16
 416 01a2 1A70     		strb	r2, [r3]
 417 01a4 154B     		ldr	r3, .L31+16
 418 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01a8 002B     		cmp	r3, #0
 420 01aa 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01ac 144B     		ldr	r3, .L31+20
 423 01ae 0022     		movs	r2, #0
 424 01b0 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b2 124B     		ldr	r3, .L31+16
 427 01b4 0022     		movs	r2, #0
 428 01b6 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01b8 0120     		movs	r0, #1
 431 01ba FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01be 0020     		movs	r0, #0
 434 01c0 FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c4 094B     		ldr	r3, .L31
 437 01c6 0022     		movs	r2, #0
 438 01c8 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01ca BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01cc 0133     		adds	r3, r3, #1
 442 01ce BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01d0 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d2 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d6 0346     		mov	r3, r0
 450 01d8 002B     		cmp	r3, #0
 451 01da 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01de 632B     		cmp	r3, #99
 455 01e0 7FF616AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e4 00BF     		nop
 459 01e6 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01e8 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01ea 80BD     		pop	{r7, pc}
 465              	.L32:
 466              		.align	2
 467              	.L31:
 468 01ec 00000000 		.word	state.10225
 469 01f0 04000000 		.word	rx_queue.10229
 470 01f4 00000000 		.word	c_mem
 471 01f8 00000000 		.word	master_mode
 472 01fc 07000000 		.word	data_packet_length.10227
 473 0200 08000000 		.word	data_packet_index.10226
 474 0204 0C000000 		.word	data_packet_buffer.10228
 475 0208 00000000 		.word	g_rx
 476              		.cfi_endproc
 477              	.LFE66:
 478              		.size	interrupt_manager, .-interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 14


 479              		.section	.rodata
 480 001d 000000   		.align	2
 481              	.LC0:
 482 0020 00       		.ascii	"\000"
 483              		.global	__aeabi_i2f
 484              		.global	__aeabi_fdiv
 485              		.section	.text.function_scheduler,"ax",%progbits
 486              		.align	2
 487              		.global	function_scheduler
 488              		.thumb
 489              		.thumb_func
 490              		.type	function_scheduler, %function
 491              	function_scheduler:
 492              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 493              		.loc 1 268 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 17504
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 B0B5     		push	{r4, r5, r7, lr}
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 4, -16
 500              		.cfi_offset 5, -12
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 ADF5884D 		sub	sp, sp, #17408
 504              		.cfi_def_cfa_offset 17424
 505 0006 98B0     		sub	sp, sp, #96
 506              		.cfi_def_cfa_offset 17520
 507 0008 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 509              		.loc 1 272 0
 510 000a 07F56A53 		add	r3, r7, #14976
 511 000e 03F11803 		add	r3, r3, #24
 512 0012 0022     		movs	r2, #0
 513 0014 1A60     		str	r2, [r3]
 514 0016 0433     		adds	r3, r3, #4
 515 0018 4FF41C62 		mov	r2, #2496
 516 001c 0021     		movs	r1, #0
 517 001e 1846     		mov	r0, r3
 518 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 519              		.loc 1 274 0
 520 0024 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 15


 521 0026 07F58842 		add	r2, r7, #17408
 522 002a 02F15F02 		add	r2, r2, #95
 523 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 524              		.loc 1 275 0
 525 0030 0123     		movs	r3, #1
 526 0032 07F58842 		add	r2, r7, #17408
 527 0036 02F15E02 		add	r2, r2, #94
 528 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 529              		.loc 1 277 0
 530 003c 0020     		movs	r0, #0
 531 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 532              		.loc 1 278 0
 533 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 534 0046 0346     		mov	r3, r0
 535 0048 1A46     		mov	r2, r3
 536 004a A64B     		ldr	r3, .L63
 537 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 538              		.loc 1 281 0
 539 004e 0120     		movs	r0, #1
 540 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 541              		.loc 1 285 0
 542 0054 A44B     		ldr	r3, .L63+4
 543 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 544 0058 002B     		cmp	r3, #0
 545 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 546              		.loc 1 286 0
 547 005c A24B     		ldr	r3, .L63+4
 548 005e 0022     		movs	r2, #0
 549 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 550              		.loc 1 287 0
 551 0062 FFF7FEFF 		bl	interrupt_manager
 552              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****             // if master_mode parameter is set to 1
 290:..\src/interruptions.c ****             if (g_mem.MS.master_mode_active){  
 553              		.loc 1 290 0
 554 0066 A14B     		ldr	r3, .L63+8
 555 0068 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 556 006c 002B     		cmp	r3, #0
 557 006e 11D0     		beq	.L35
 291:..\src/interruptions.c ****                 
 292:..\src/interruptions.c ****                 // Check if voltage on pin MASTER MODE VOLTAGE, set by a physical switch, is HIGH o
 293:..\src/interruptions.c ****                 // This is a way to force exit from master_mode during execution, since USB command
 294:..\src/interruptions.c ****                 // are hampered by the communications between the two boards (slave and master)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 16


 295:..\src/interruptions.c ****                 
 296:..\src/interruptions.c ****                 if (flag_master < 2000)       // if voltage is LOW, exit master mode
 558              		.loc 1 296 0
 559 0070 9F4B     		ldr	r3, .L63+12
 560 0072 1B68     		ldr	r3, [r3]
 561 0074 B3F5FA6F 		cmp	r3, #2000
 562 0078 03DA     		bge	.L36
 297:..\src/interruptions.c ****                     master_mode = 0;
 563              		.loc 1 297 0
 564 007a 9E4B     		ldr	r3, .L63+16
 565 007c 0022     		movs	r2, #0
 566 007e 1A70     		strb	r2, [r3]
 567 0080 0BE0     		b	.L38
 568              	.L36:
 298:..\src/interruptions.c ****                 
 299:..\src/interruptions.c ****                 else if (flag_master > 2000)  // if voltage is LOW, enter master mode
 569              		.loc 1 299 0
 570 0082 9B4B     		ldr	r3, .L63+12
 571 0084 1B68     		ldr	r3, [r3]
 572 0086 B3F5FA6F 		cmp	r3, #2000
 573 008a 06DD     		ble	.L38
 300:..\src/interruptions.c ****                     
 301:..\src/interruptions.c ****                 master_mode = 1;
 574              		.loc 1 301 0
 575 008c 994B     		ldr	r3, .L63+16
 576 008e 0122     		movs	r2, #1
 577 0090 1A70     		strb	r2, [r3]
 578 0092 02E0     		b	.L38
 579              	.L35:
 302:..\src/interruptions.c ****             }
 303:..\src/interruptions.c ****             
 304:..\src/interruptions.c ****             else{
 305:..\src/interruptions.c ****                 master_mode = 0;
 580              		.loc 1 305 0
 581 0094 974B     		ldr	r3, .L63+16
 582 0096 0022     		movs	r2, #0
 583 0098 1A70     		strb	r2, [r3]
 584              	.L38:
 306:..\src/interruptions.c ****             }
 307:..\src/interruptions.c ****                     
 308:..\src/interruptions.c ****             if (master_mode){
 585              		.loc 1 308 0
 586 009a 964B     		ldr	r3, .L63+16
 587 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 009e 002B     		cmp	r3, #0
 589 00a0 45D0     		beq	.L39
 309:..\src/interruptions.c ****                 
 310:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber and Vi
 311:..\src/interruptions.c ****                 if (g_mem.FB.vibrotactile_feedback_active && g_mem.FB.airchamber_feedback_active){ 
 590              		.loc 1 311 0
 591 00a2 924B     		ldr	r3, .L63+8
 592 00a4 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 593 00a8 002B     		cmp	r3, #0
 594 00aa 07D0     		beq	.L40
 595              		.loc 1 311 0 is_stmt 0 discriminator 1
 596 00ac 8F4B     		ldr	r3, .L63+8
 597 00ae 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 17


 598 00b2 002B     		cmp	r3, #0
 599 00b4 02D0     		beq	.L40
 312:..\src/interruptions.c ****                     
 313:..\src/interruptions.c ****                     //LED_CTRL_Write(GREEN);
 314:..\src/interruptions.c ****                     //BLINK_CTRL_EN_Write(0);
 315:..\src/interruptions.c ****                 
 316:..\src/interruptions.c ****                     //air_chambers_control();
 317:..\src/interruptions.c ****                     vibrotactile_control();
 600              		.loc 1 317 0 is_stmt 1
 601 00b6 FFF7FEFF 		bl	vibrotactile_control
 602 00ba 11E0     		b	.L41
 603              	.L40:
 318:..\src/interruptions.c ****                   
 319:..\src/interruptions.c ****                 }
 320:..\src/interruptions.c ****                 
 321:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber contro
 322:..\src/interruptions.c ****                 else if (g_mem.FB.airchamber_feedback_active){
 604              		.loc 1 322 0
 605 00bc 8B4B     		ldr	r3, .L63+8
 606 00be 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
 607 00c2 002B     		cmp	r3, #0
 608 00c4 0CD1     		bne	.L41
 323:..\src/interruptions.c ****                     
 324:..\src/interruptions.c ****                     //LED_CTRL_Write(RED);
 325:..\src/interruptions.c ****                     //BLINK_CTRL_EN_Write(0);
 326:..\src/interruptions.c ****                     
 327:..\src/interruptions.c ****                     //air_chambers_control();
 328:..\src/interruptions.c ****                     
 329:..\src/interruptions.c ****                 }
 330:..\src/interruptions.c ****             
 331:..\src/interruptions.c ****                 //-------------------------------------------------------------- Vibrotactile contr
 332:..\src/interruptions.c ****                 else if (g_mem.FB.vibrotactile_feedback_active){
 609              		.loc 1 332 0
 610 00c6 894B     		ldr	r3, .L63+8
 611 00c8 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 612 00cc 002B     		cmp	r3, #0
 613 00ce 07D0     		beq	.L41
 333:..\src/interruptions.c ****                     
 334:..\src/interruptions.c ****                     LED_CTRL_Write(YELLOW);
 614              		.loc 1 334 0
 615 00d0 0320     		movs	r0, #3
 616 00d2 FFF7FEFF 		bl	LED_CTRL_Write
 335:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 617              		.loc 1 335 0
 618 00d6 0020     		movs	r0, #0
 619 00d8 FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 336:..\src/interruptions.c ****                     
 337:..\src/interruptions.c ****                     vibrotactile_control();
 620              		.loc 1 337 0
 621 00dc FFF7FEFF 		bl	vibrotactile_control
 622              	.L41:
 338:..\src/interruptions.c ****                 }
 339:..\src/interruptions.c ****                 
 340:..\src/interruptions.c ****                 if (interrupt_flag){
 623              		.loc 1 340 0
 624 00e0 814B     		ldr	r3, .L63+4
 625 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 18


 626 00e4 002B     		cmp	r3, #0
 627 00e6 04D0     		beq	.L42
 341:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 628              		.loc 1 341 0
 629 00e8 7F4B     		ldr	r3, .L63+4
 630 00ea 0022     		movs	r2, #0
 631 00ec 1A70     		strb	r2, [r3]
 342:..\src/interruptions.c ****                     interrupt_manager();
 632              		.loc 1 342 0
 633 00ee FFF7FEFF 		bl	interrupt_manager
 634              	.L42:
 343:..\src/interruptions.c ****                 }
 344:..\src/interruptions.c ****                     
 345:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX); // Compute reference for the SH starting f
 635              		.loc 1 345 0
 636 00f2 07F58843 		add	r3, r7, #17408
 637 00f6 03F15E03 		add	r3, r3, #94
 638 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 00fc 1846     		mov	r0, r3
 640 00fe FFF7FEFF 		bl	motor_control_generic
 346:..\src/interruptions.c ****                     
 347:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID); // Send reference to the SH calli
 641              		.loc 1 347 0
 642 0102 7D4B     		ldr	r3, .L63+20
 643 0104 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 644 0108 07F58843 		add	r3, r7, #17408
 645 010c 03F15E03 		add	r3, r3, #94
 646 0110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 647 0112 1146     		mov	r1, r2
 648 0114 1846     		mov	r0, r3
 649 0116 FFF7FEFF 		bl	drive_slave
 348:..\src/interruptions.c ****                     
 349:..\src/interruptions.c ****                 if (interrupt_flag){
 650              		.loc 1 349 0
 651 011a 734B     		ldr	r3, .L63+4
 652 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 011e 002B     		cmp	r3, #0
 654 0120 14D0     		beq	.L44
 350:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 655              		.loc 1 350 0
 656 0122 714B     		ldr	r3, .L63+4
 657 0124 0022     		movs	r2, #0
 658 0126 1A70     		strb	r2, [r3]
 351:..\src/interruptions.c ****                     interrupt_manager();
 659              		.loc 1 351 0
 660 0128 FFF7FEFF 		bl	interrupt_manager
 661 012c 0EE0     		b	.L44
 662              	.L39:
 352:..\src/interruptions.c ****                 }
 353:..\src/interruptions.c ****             }
 354:..\src/interruptions.c ****             
 355:..\src/interruptions.c ****            
 356:..\src/interruptions.c ****             else {
 357:..\src/interruptions.c ****                 
 358:..\src/interruptions.c ****                 LED_CTRL_Write(0);
 663              		.loc 1 358 0
 664 012e 0020     		movs	r0, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 19


 665 0130 FFF7FEFF 		bl	LED_CTRL_Write
 359:..\src/interruptions.c ****                 BLINK_CTRL_EN_Write(0);
 666              		.loc 1 359 0
 667 0134 0020     		movs	r0, #0
 668 0136 FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 360:..\src/interruptions.c ****                     
 361:..\src/interruptions.c ****                 // Check Interrupt 
 362:..\src/interruptions.c ****                 if (interrupt_flag){
 669              		.loc 1 362 0
 670 013a 6B4B     		ldr	r3, .L63+4
 671 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 672 013e 002B     		cmp	r3, #0
 673 0140 04D0     		beq	.L44
 363:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 674              		.loc 1 363 0
 675 0142 694B     		ldr	r3, .L63+4
 676 0144 0022     		movs	r2, #0
 677 0146 1A70     		strb	r2, [r3]
 364:..\src/interruptions.c ****                     interrupt_manager();
 678              		.loc 1 364 0
 679 0148 FFF7FEFF 		bl	interrupt_manager
 680              	.L44:
 365:..\src/interruptions.c ****                 } 
 366:..\src/interruptions.c ****             }
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             //motor_control_generic(MOTOR_IDX);  // Compute references and drive air pump
 369:..\src/interruptions.c ****     
 370:..\src/interruptions.c ****             if (interrupt_flag){
 681              		.loc 1 370 0
 682 014c 664B     		ldr	r3, .L63+4
 683 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0150 002B     		cmp	r3, #0
 685 0152 04D0     		beq	.L45
 371:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 686              		.loc 1 371 0
 687 0154 644B     		ldr	r3, .L63+4
 688 0156 0022     		movs	r2, #0
 689 0158 1A70     		strb	r2, [r3]
 372:..\src/interruptions.c ****                 interrupt_manager();
 690              		.loc 1 372 0
 691 015a FFF7FEFF 		bl	interrupt_manager
 692              	.L45:
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****            
 375:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****     analog_read_end();
 693              		.loc 1 377 0
 694 015e FFF7FEFF 		bl	analog_read_end
 378:..\src/interruptions.c **** 
 379:..\src/interruptions.c ****     if (interrupt_flag){
 695              		.loc 1 379 0
 696 0162 614B     		ldr	r3, .L63+4
 697 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 0166 002B     		cmp	r3, #0
 699 0168 04D0     		beq	.L46
 380:..\src/interruptions.c ****         interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 20


 700              		.loc 1 380 0
 701 016a 5F4B     		ldr	r3, .L63+4
 702 016c 0022     		movs	r2, #0
 703 016e 1A70     		strb	r2, [r3]
 381:..\src/interruptions.c ****         interrupt_manager();
 704              		.loc 1 381 0
 705 0170 FFF7FEFF 		bl	interrupt_manager
 706              	.L46:
 382:..\src/interruptions.c ****     }
 383:..\src/interruptions.c **** 
 384:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 385:..\src/interruptions.c **** 
 386:..\src/interruptions.c ****     overcurrent_control();
 707              		.loc 1 386 0
 708 0174 FFF7FEFF 		bl	overcurrent_control
 387:..\src/interruptions.c ****     
 388:..\src/interruptions.c ****     // Check Interrupt 
 389:..\src/interruptions.c ****     
 390:..\src/interruptions.c ****     if (interrupt_flag){
 709              		.loc 1 390 0
 710 0178 5B4B     		ldr	r3, .L63+4
 711 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 712 017c 002B     		cmp	r3, #0
 713 017e 04D0     		beq	.L47
 391:..\src/interruptions.c ****         interrupt_flag = FALSE;
 714              		.loc 1 391 0
 715 0180 594B     		ldr	r3, .L63+4
 716 0182 0022     		movs	r2, #0
 717 0184 1A70     		strb	r2, [r3]
 392:..\src/interruptions.c ****         interrupt_manager();
 718              		.loc 1 392 0
 719 0186 FFF7FEFF 		bl	interrupt_manager
 720              	.L47:
 393:..\src/interruptions.c ****     }
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****     //---------------------------------- Calibration 
 396:..\src/interruptions.c **** 
 397:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 398:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 721              		.loc 1 398 0
 722 018a 5C4B     		ldr	r3, .L63+24
 723 018c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 724 018e 012B     		cmp	r3, #1
 725 0190 0ED1     		bne	.L48
 399:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 726              		.loc 1 399 0
 727 0192 5B4B     		ldr	r3, .L63+28
 728 0194 1B88     		ldrh	r3, [r3]
 729 0196 0A2B     		cmp	r3, #10
 730 0198 04D1     		bne	.L49
 400:..\src/interruptions.c ****             calibration();
 731              		.loc 1 400 0
 732 019a FFF7FEFF 		bl	calibration
 401:..\src/interruptions.c ****             counter_calibration = 0;
 733              		.loc 1 401 0
 734 019e 584B     		ldr	r3, .L63+28
 735 01a0 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 21


 736 01a2 1A80     		strh	r2, [r3]	@ movhi
 737              	.L49:
 402:..\src/interruptions.c ****         }
 403:..\src/interruptions.c ****         counter_calibration++;
 738              		.loc 1 403 0
 739 01a4 564B     		ldr	r3, .L63+28
 740 01a6 1B88     		ldrh	r3, [r3]
 741 01a8 0133     		adds	r3, r3, #1
 742 01aa 9AB2     		uxth	r2, r3
 743 01ac 544B     		ldr	r3, .L63+28
 744 01ae 1A80     		strh	r2, [r3]	@ movhi
 745              	.L48:
 404:..\src/interruptions.c ****     }
 405:..\src/interruptions.c **** 
 406:..\src/interruptions.c ****     // Check Interrupt 
 407:..\src/interruptions.c ****     
 408:..\src/interruptions.c ****     if (interrupt_flag){
 746              		.loc 1 408 0
 747 01b0 4D4B     		ldr	r3, .L63+4
 748 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 749 01b4 002B     		cmp	r3, #0
 750 01b6 04D0     		beq	.L50
 409:..\src/interruptions.c ****         interrupt_flag = FALSE;
 751              		.loc 1 409 0
 752 01b8 4B4B     		ldr	r3, .L63+4
 753 01ba 0022     		movs	r2, #0
 754 01bc 1A70     		strb	r2, [r3]
 410:..\src/interruptions.c ****         interrupt_manager();
 755              		.loc 1 410 0
 756 01be FFF7FEFF 		bl	interrupt_manager
 757              	.L50:
 411:..\src/interruptions.c ****     }
 412:..\src/interruptions.c ****     
 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****     
 415:..\src/interruptions.c ****      
 416:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 417:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 758              		.loc 1 417 0
 759 01c2 4D4B     		ldr	r3, .L63+20
 760 01c4 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 761 01c8 002B     		cmp	r3, #0
 762 01ca 0AD0     		beq	.L51
 418:..\src/interruptions.c ****         
 419:..\src/interruptions.c ****         update_EMG_history();
 763              		.loc 1 419 0
 764 01cc FFF7FEFF 		bl	update_EMG_history
 420:..\src/interruptions.c **** 
 421:..\src/interruptions.c ****         // Check Interrupt 
 422:..\src/interruptions.c **** 
 423:..\src/interruptions.c ****         if (interrupt_flag){
 765              		.loc 1 423 0
 766 01d0 454B     		ldr	r3, .L63+4
 767 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 768 01d4 002B     		cmp	r3, #0
 769 01d6 04D0     		beq	.L51
 424:..\src/interruptions.c ****             interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 22


 770              		.loc 1 424 0
 771 01d8 434B     		ldr	r3, .L63+4
 772 01da 0022     		movs	r2, #0
 773 01dc 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****             interrupt_manager();
 774              		.loc 1 425 0
 775 01de FFF7FEFF 		bl	interrupt_manager
 776              	.L51:
 426:..\src/interruptions.c ****         }
 427:..\src/interruptions.c ****     }
 428:..\src/interruptions.c **** 
 429:..\src/interruptions.c ****     
 430:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 431:..\src/interruptions.c **** 
 432:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 777              		.loc 1 432 0
 778 01e2 454B     		ldr	r3, .L63+20
 779 01e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 780 01e8 1A46     		mov	r2, r3
 781 01ea 464B     		ldr	r3, .L63+32
 782 01ec 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 783 01ee 002B     		cmp	r3, #0
 784 01f0 01D0     		beq	.L52
 433:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 785              		.loc 1 433 0
 786 01f2 FFF7FEFF 		bl	cycles_counter_update
 787              	.L52:
 434:..\src/interruptions.c ****     }
 435:..\src/interruptions.c **** 
 436:..\src/interruptions.c ****     // Check Cycles Interrupt 
 437:..\src/interruptions.c ****     
 438:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 788              		.loc 1 438 0
 789 01f6 444B     		ldr	r3, .L63+36
 790 01f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 791 01fa 002B     		cmp	r3, #0
 792 01fc 00F0A180 		beq	.L53
 439:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 793              		.loc 1 439 0
 794 0200 414B     		ldr	r3, .L63+36
 795 0202 0022     		movs	r2, #0
 796 0204 1A70     		strb	r2, [r3]
 440:..\src/interruptions.c **** 
 441:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 442:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 443:..\src/interruptions.c ****         if(can_write) {
 797              		.loc 1 443 0
 798 0206 414B     		ldr	r3, .L63+40
 799 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 020a 002B     		cmp	r3, #0
 801 020c 54D0     		beq	.L54
 444:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 802              		.loc 1 444 0
 803 020e 404B     		ldr	r3, .L63+44
 804 0210 0022     		movs	r2, #0
 805 0212 1A70     		strb	r2, [r3]
 445:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 23


 446:..\src/interruptions.c ****             //Update time variable
 447:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 806              		.loc 1 447 0
 807 0214 354B     		ldr	r3, .L63+8
 808 0216 9B6D     		ldr	r3, [r3, #88]
 809 0218 7833     		adds	r3, r3, #120
 810 021a 344A     		ldr	r2, .L63+8
 811 021c 9365     		str	r3, [r2, #88]
 448:..\src/interruptions.c ****             
 449:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 812              		.loc 1 449 0
 813 021e 364B     		ldr	r3, .L63+20
 814 0220 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 815 0224 012B     		cmp	r3, #1
 816 0226 47D1     		bne	.L54
 450:..\src/interruptions.c ****                 
 451:..\src/interruptions.c ****                 store_RTC_current_time();
 817              		.loc 1 451 0
 818 0228 FFF7FEFF 		bl	store_RTC_current_time
 452:..\src/interruptions.c ****                 
 453:..\src/interruptions.c ****                 //Write in SD card
 454:..\src/interruptions.c ****                 prepare_SD_info(info_);
 819              		.loc 1 454 0
 820 022c 07F56A53 		add	r3, r7, #14976
 821 0230 03F11803 		add	r3, r3, #24
 822 0234 1846     		mov	r0, r3
 823 0236 FFF7FEFF 		bl	prepare_SD_info
 455:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 824              		.loc 1 455 0
 825 023a 364B     		ldr	r3, .L63+48
 826 023c 1C68     		ldr	r4, [r3]
 827 023e 07F56A53 		add	r3, r7, #14976
 828 0242 03F11803 		add	r3, r3, #24
 829 0246 1846     		mov	r0, r3
 830 0248 FFF7FEFF 		bl	strlen
 831 024c 0246     		mov	r2, r0
 832 024e 07F56A53 		add	r3, r7, #14976
 833 0252 03F11803 		add	r3, r3, #24
 834 0256 1946     		mov	r1, r3
 835 0258 2046     		mov	r0, r4
 836 025a FFF7FEFF 		bl	FS_Write
 456:..\src/interruptions.c ****                 
 457:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 837              		.loc 1 457 0
 838 025e 264B     		ldr	r3, .L63+20
 839 0260 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 840 0264 002B     		cmp	r3, #0
 841 0266 27D0     		beq	.L54
 842              	.LBB2:
 458:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 843              		.loc 1 458 0
 844 0268 07F16003 		add	r3, r7, #96
 845 026c 603B     		subs	r3, r3, #96
 846 026e 0022     		movs	r2, #0
 847 0270 1A60     		str	r2, [r3]
 848 0272 0433     		adds	r3, r3, #4
 849 0274 43F69422 		movw	r2, #14996
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 24


 850 0278 0021     		movs	r1, #0
 851 027a 1846     		mov	r0, r3
 852 027c FFF7FEFF 		bl	memset
 459:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 853              		.loc 1 459 0
 854 0280 254B     		ldr	r3, .L63+52
 855 0282 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 856 0284 07F16003 		add	r3, r7, #96
 857 0288 603B     		subs	r3, r3, #96
 858 028a 1A70     		strb	r2, [r3]
 460:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 859              		.loc 1 460 0
 860 028c 07F16003 		add	r3, r7, #96
 861 0290 603B     		subs	r3, r3, #96
 862 0292 1846     		mov	r0, r3
 863 0294 FFF7FEFF 		bl	prepare_SD_EMG_history
 461:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 864              		.loc 1 461 0
 865 0298 204B     		ldr	r3, .L63+56
 866 029a 1C68     		ldr	r4, [r3]
 867 029c 07F16003 		add	r3, r7, #96
 868 02a0 603B     		subs	r3, r3, #96
 869 02a2 1846     		mov	r0, r3
 870 02a4 FFF7FEFF 		bl	strlen
 871 02a8 0246     		mov	r2, r0
 872 02aa 07F16003 		add	r3, r7, #96
 873 02ae 603B     		subs	r3, r3, #96
 874 02b0 1946     		mov	r1, r3
 875 02b2 2046     		mov	r0, r4
 876 02b4 FFF7FEFF 		bl	FS_Write
 877              	.L54:
 878              	.LBE2:
 462:..\src/interruptions.c ****                 }
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****         }
 465:..\src/interruptions.c ****         
 466:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 467:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 879              		.loc 1 467 0
 880 02b8 154B     		ldr	r3, .L63+44
 881 02ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 882 02bc 012B     		cmp	r3, #1
 883 02be 03D0     		beq	.L55
 884              		.loc 1 467 0 is_stmt 0 discriminator 1
 885 02c0 134B     		ldr	r3, .L63+44
 886 02c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 02c4 022B     		cmp	r3, #2
 888 02c6 2BD1     		bne	.L56
 889              	.L55:
 468:..\src/interruptions.c ****             // Deactivate motors
 469:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 890              		.loc 1 469 0 is_stmt 1
 891 02c8 0021     		movs	r1, #0
 892 02ca 0020     		movs	r0, #0
 893 02cc FFF7FEFF 		bl	enable_motor
 470:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 894              		.loc 1 470 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 25


 895 02d0 064B     		ldr	r3, .L63+8
 896 02d2 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 897 02d6 012B     		cmp	r3, #1
 898 02d8 33D1     		bne	.L53
 471:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 899              		.loc 1 471 0
 900 02da 0021     		movs	r1, #0
 901 02dc 0120     		movs	r0, #1
 902 02de FFF7FEFF 		bl	enable_motor
 470:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 903              		.loc 1 470 0
 904 02e2 2EE0     		b	.L53
 905              	.L64:
 906              		.align	2
 907              	.L63:
 908 02e4 00000000 		.word	timer_value0
 909 02e8 00000000 		.word	interrupt_flag
 910 02ec 00000000 		.word	g_mem
 911 02f0 00000000 		.word	flag_master
 912 02f4 00000000 		.word	master_mode
 913 02f8 00000000 		.word	c_mem
 914 02fc 00000000 		.word	calib
 915 0300 00000000 		.word	counter_calibration.10245
 916 0304 00000000 		.word	pos_reconstruct
 917 0308 00000000 		.word	cycles_interrupt_flag
 918 030c 00000000 		.word	can_write
 919 0310 00000000 		.word	cycles_status
 920 0314 00000000 		.word	pFile
 921 0318 20000000 		.word	.LC0
 922 031c 00000000 		.word	pEMGHFile
 923              	.L56:
 472:..\src/interruptions.c ****             }
 473:..\src/interruptions.c ****         }
 474:..\src/interruptions.c ****         else {
 475:..\src/interruptions.c ****             // Activate/Deactivate motors
 476:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 924              		.loc 1 476 0
 925 0320 4D4B     		ldr	r3, .L65
 926 0322 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 927 0324 1946     		mov	r1, r3
 928 0326 0020     		movs	r0, #0
 929 0328 FFF7FEFF 		bl	enable_motor
 477:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 930              		.loc 1 477 0
 931 032c 4B4B     		ldr	r3, .L65+4
 932 032e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 933 0332 012B     		cmp	r3, #1
 934 0334 05D1     		bne	.L53
 478:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
 935              		.loc 1 478 0
 936 0336 484B     		ldr	r3, .L65
 937 0338 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 938 033a 1946     		mov	r1, r3
 939 033c 0120     		movs	r0, #1
 940 033e FFF7FEFF 		bl	enable_motor
 941              	.L53:
 479:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 26


 480:..\src/interruptions.c ****         }
 481:..\src/interruptions.c ****     }
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     // Check Interrupt 
 484:..\src/interruptions.c ****     
 485:..\src/interruptions.c ****     if (interrupt_flag){
 942              		.loc 1 485 0
 943 0342 474B     		ldr	r3, .L65+8
 944 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 945 0346 002B     		cmp	r3, #0
 946 0348 04D0     		beq	.L58
 486:..\src/interruptions.c ****         interrupt_flag = FALSE;
 947              		.loc 1 486 0
 948 034a 454B     		ldr	r3, .L65+8
 949 034c 0022     		movs	r2, #0
 950 034e 1A70     		strb	r2, [r3]
 487:..\src/interruptions.c ****         interrupt_manager();
 951              		.loc 1 487 0
 952 0350 FFF7FEFF 		bl	interrupt_manager
 953              	.L58:
 488:..\src/interruptions.c ****     }
 489:..\src/interruptions.c ****     
 490:..\src/interruptions.c ****     
 491:..\src/interruptions.c ****     //---------------------------------- Check battery
 492:..\src/interruptions.c **** 
 493:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 494:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 954              		.loc 1 494 0
 955 0354 434B     		ldr	r3, .L65+12
 956 0356 1B88     		ldrh	r3, [r3]
 957 0358 0A2B     		cmp	r3, #10
 958 035a 04D1     		bne	.L59
 495:..\src/interruptions.c ****         battery_management();   
 959              		.loc 1 495 0
 960 035c FFF7FEFF 		bl	battery_management
 496:..\src/interruptions.c ****         counter_tension_func = 0;
 961              		.loc 1 496 0
 962 0360 404B     		ldr	r3, .L65+12
 963 0362 0022     		movs	r2, #0
 964 0364 1A80     		strh	r2, [r3]	@ movhi
 965              	.L59:
 497:..\src/interruptions.c ****     }
 498:..\src/interruptions.c ****     counter_tension_func++;
 966              		.loc 1 498 0
 967 0366 3F4B     		ldr	r3, .L65+12
 968 0368 1B88     		ldrh	r3, [r3]
 969 036a 0133     		adds	r3, r3, #1
 970 036c 9AB2     		uxth	r2, r3
 971 036e 3D4B     		ldr	r3, .L65+12
 972 0370 1A80     		strh	r2, [r3]	@ movhi
 499:..\src/interruptions.c **** 
 500:..\src/interruptions.c ****     // Check Interrupt 
 501:..\src/interruptions.c ****     
 502:..\src/interruptions.c ****     if (interrupt_flag){
 973              		.loc 1 502 0
 974 0372 3B4B     		ldr	r3, .L65+8
 975 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 27


 976 0376 002B     		cmp	r3, #0
 977 0378 04D0     		beq	.L60
 503:..\src/interruptions.c ****         interrupt_flag = FALSE;
 978              		.loc 1 503 0
 979 037a 394B     		ldr	r3, .L65+8
 980 037c 0022     		movs	r2, #0
 981 037e 1A70     		strb	r2, [r3]
 504:..\src/interruptions.c ****         interrupt_manager();
 982              		.loc 1 504 0
 983 0380 FFF7FEFF 		bl	interrupt_manager
 984              	.L60:
 505:..\src/interruptions.c ****     }
 506:..\src/interruptions.c ****    
 507:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 508:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 985              		.loc 1 508 0
 986 0384 384B     		ldr	r3, .L65+16
 987 0386 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 988 038a 002B     		cmp	r3, #0
 989 038c 0AD0     		beq	.L61
 509:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 990              		.loc 1 509 0
 991 038e FFF7FEFF 		bl	ReadAllIMUs
 510:..\src/interruptions.c ****         
 511:..\src/interruptions.c ****         if (interrupt_flag){
 992              		.loc 1 511 0
 993 0392 334B     		ldr	r3, .L65+8
 994 0394 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 995 0396 002B     		cmp	r3, #0
 996 0398 04D0     		beq	.L61
 512:..\src/interruptions.c ****             interrupt_flag = FALSE;
 997              		.loc 1 512 0
 998 039a 314B     		ldr	r3, .L65+8
 999 039c 0022     		movs	r2, #0
 1000 039e 1A70     		strb	r2, [r3]
 513:..\src/interruptions.c ****             interrupt_manager();
 1001              		.loc 1 513 0
 1002 03a0 FFF7FEFF 		bl	interrupt_manager
 1003              	.L61:
 514:..\src/interruptions.c ****         }
 515:..\src/interruptions.c ****     }
 516:..\src/interruptions.c ****    
 517:..\src/interruptions.c ****     //---------------------------------- Update States
 518:..\src/interruptions.c ****     
 519:..\src/interruptions.c ****     // Load k-1 state
 520:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1004              		.loc 1 520 0
 1005 03a4 314A     		ldr	r2, .L65+20
 1006 03a6 324B     		ldr	r3, .L65+24
 1007 03a8 1446     		mov	r4, r2
 1008 03aa 1D46     		mov	r5, r3
 1009 03ac 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1010 03ae 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1011 03b0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1012 03b2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1013 03b4 95E80300 		ldmia	r5, {r0, r1}
 1014 03b8 84E80300 		stmia	r4, {r0, r1}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 28


 521:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1015              		.loc 1 521 0
 1016 03bc 2D4A     		ldr	r2, .L65+28
 1017 03be 2E4B     		ldr	r3, .L65+32
 1018 03c0 1046     		mov	r0, r2
 1019 03c2 1946     		mov	r1, r3
 1020 03c4 6823     		movs	r3, #104
 1021 03c6 1A46     		mov	r2, r3
 1022 03c8 FFF7FEFF 		bl	memcpy
 522:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1023              		.loc 1 522 0
 1024 03cc 2B4A     		ldr	r2, .L65+36
 1025 03ce 224B     		ldr	r3, .L65
 1026 03d0 1446     		mov	r4, r2
 1027 03d2 1D46     		mov	r5, r3
 1028 03d4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1029 03d6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1030 03d8 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1031 03dc 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 523:..\src/interruptions.c **** 
 524:..\src/interruptions.c ****     // Load k+1 state        
 525:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1032              		.loc 1 525 0
 1033 03e0 1D4A     		ldr	r2, .L65
 1034 03e2 274B     		ldr	r3, .L65+40
 1035 03e4 1446     		mov	r4, r2
 1036 03e6 1D46     		mov	r5, r3
 1037 03e8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1038 03ea 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1039 03ec 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1040 03f0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 526:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1041              		.loc 1 526 0
 1042 03f4 234A     		ldr	r2, .L65+44
 1043 03f6 244B     		ldr	r3, .L65+48
 1044 03f8 1046     		mov	r0, r2
 1045 03fa 1946     		mov	r1, r3
 1046 03fc C823     		movs	r3, #200
 1047 03fe 1A46     		mov	r2, r3
 1048 0400 FFF7FEFF 		bl	memcpy
 527:..\src/interruptions.c ****                     
 528:..\src/interruptions.c ****     if (interrupt_flag){
 1049              		.loc 1 528 0
 1050 0404 164B     		ldr	r3, .L65+8
 1051 0406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1052 0408 002B     		cmp	r3, #0
 1053 040a 04D0     		beq	.L62
 529:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1054              		.loc 1 529 0
 1055 040c 144B     		ldr	r3, .L65+8
 1056 040e 0022     		movs	r2, #0
 1057 0410 1A70     		strb	r2, [r3]
 530:..\src/interruptions.c ****         interrupt_manager();
 1058              		.loc 1 530 0
 1059 0412 FFF7FEFF 		bl	interrupt_manager
 1060              	.L62:
 531:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 29


 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1061              		.loc 1 533 0
 1062 0416 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1063 041a 0346     		mov	r3, r0
 1064 041c 1A46     		mov	r2, r3
 1065 041e 1B4B     		ldr	r3, .L65+52
 1066 0420 1A80     		strh	r2, [r3]	@ movhi
 534:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1067              		.loc 1 534 0
 1068 0422 1B4B     		ldr	r3, .L65+56
 1069 0424 1B88     		ldrh	r3, [r3]
 1070 0426 1A46     		mov	r2, r3
 1071 0428 184B     		ldr	r3, .L65+52
 1072 042a 1B88     		ldrh	r3, [r3]
 1073 042c D31A     		subs	r3, r2, r3
 1074 042e 1846     		mov	r0, r3
 1075 0430 FFF7FEFF 		bl	__aeabi_i2f
 1076 0434 0346     		mov	r3, r0
 1077 0436 1749     		ldr	r1, .L65+60
 1078 0438 1846     		mov	r0, r3
 1079 043a FFF7FEFF 		bl	__aeabi_fdiv
 1080 043e 0346     		mov	r3, r0
 1081 0440 1A46     		mov	r2, r3
 1082 0442 154B     		ldr	r3, .L65+64
 1083 0444 1A60     		str	r2, [r3]	@ float
 535:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1084              		.loc 1 535 0
 1085 0446 0120     		movs	r0, #1
 1086 0448 FFF7FEFF 		bl	MY_TIMER_REG_Write
 536:..\src/interruptions.c **** 
 537:..\src/interruptions.c **** }
 1087              		.loc 1 537 0
 1088 044c 00BF     		nop
 1089 044e 07F58847 		add	r7, r7, #17408
 1090 0452 6037     		adds	r7, r7, #96
 1091              		.cfi_def_cfa_offset 16
 1092 0454 BD46     		mov	sp, r7
 1093              		.cfi_def_cfa_register 13
 1094              		@ sp needed
 1095 0456 B0BD     		pop	{r4, r5, r7, pc}
 1096              	.L66:
 1097              		.align	2
 1098              	.L65:
 1099 0458 00000000 		.word	g_ref
 1100 045c 00000000 		.word	g_mem
 1101 0460 00000000 		.word	interrupt_flag
 1102 0464 02000000 		.word	counter_tension_func.10246
 1103 0468 00000000 		.word	c_mem
 1104 046c 00000000 		.word	g_adc_measOld
 1105 0470 00000000 		.word	g_adc_meas
 1106 0474 00000000 		.word	g_measOld
 1107 0478 00000000 		.word	g_meas
 1108 047c 00000000 		.word	g_refOld
 1109 0480 00000000 		.word	g_refNew
 1110 0484 00000000 		.word	g_imu
 1111 0488 00000000 		.word	g_imuNew
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 30


 1112 048c 00000000 		.word	timer_value
 1113 0490 00000000 		.word	timer_value0
 1114 0494 00247449 		.word	1232348160
 1115 0498 00000000 		.word	cycle_time
 1116              		.cfi_endproc
 1117              	.LFE67:
 1118              		.size	function_scheduler, .-function_scheduler
 1119              		.section	.text.compute_reference,"ax",%progbits
 1120              		.align	2
 1121              		.global	compute_reference
 1122              		.thumb
 1123              		.thumb_func
 1124              		.type	compute_reference, %function
 1125              	compute_reference:
 1126              	.LFB68:
 538:..\src/interruptions.c **** 
 539:..\src/interruptions.c **** //==============================================================================
 540:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 541:..\src/interruptions.c **** //==============================================================================
 542:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1127              		.loc 1 542 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 40
 1130              		@ frame_needed = 1, uses_anonymous_args = 0
 1131 0000 80B5     		push	{r7, lr}
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 8CB0     		sub	sp, sp, #48
 1136              		.cfi_def_cfa_offset 56
 1137 0004 02AF     		add	r7, sp, #8
 1138              		.cfi_def_cfa 7, 48
 1139 0006 0346     		mov	r3, r0
 1140 0008 B960     		str	r1, [r7, #8]
 1141 000a 7A60     		str	r2, [r7, #4]
 1142 000c FB73     		strb	r3, [r7, #15]
 543:..\src/interruptions.c ****     
 544:..\src/interruptions.c ****     int32 CYDATA handle_value;
 545:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 546:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1143              		.loc 1 546 0
 1144 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1145 0010 1346     		mov	r3, r2
 1146 0012 DB00     		lsls	r3, r3, #3
 1147 0014 9B1A     		subs	r3, r3, r2
 1148 0016 1B01     		lsls	r3, r3, #4
 1149 0018 B033     		adds	r3, r3, #176
 1150 001a A74A     		ldr	r2, .L131
 1151 001c 1344     		add	r3, r3, r2
 1152 001e 3B62     		str	r3, [r7, #32]
 547:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1153              		.loc 1 547 0
 1154 0020 3B6A     		ldr	r3, [r7, #32]
 1155 0022 93F86030 		ldrb	r3, [r3, #96]
 1156 0026 FB77     		strb	r3, [r7, #31]
 548:..\src/interruptions.c ****     
 549:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 31


 550:..\src/interruptions.c ****                                                         // 1 EMG 1
 551:..\src/interruptions.c ****                                                         // 2 EMG 2
 552:..\src/interruptions.c ****                                                         // wait for both to get down
 553:..\src/interruptions.c ****     
 554:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1157              		.loc 1 554 0
 1158 0028 A44B     		ldr	r3, .L131+4
 1159 002a 1B68     		ldr	r3, [r3]
 1160 002c A24A     		ldr	r2, .L131
 1161 002e B2F8F021 		ldrh	r2, [r2, #496]
 1162 0032 9B1A     		subs	r3, r3, r2
 1163 0034 BB61     		str	r3, [r7, #24]
 555:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1164              		.loc 1 555 0
 1165 0036 A14B     		ldr	r3, .L131+4
 1166 0038 5B68     		ldr	r3, [r3, #4]
 1167 003a 9F4A     		ldr	r2, .L131
 1168 003c B2F8F221 		ldrh	r2, [r2, #498]
 1169 0040 9B1A     		subs	r3, r3, r2
 1170 0042 7B61     		str	r3, [r7, #20]
 556:..\src/interruptions.c ****     
 557:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 558:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1171              		.loc 1 558 0
 1172 0044 3B6A     		ldr	r3, [r7, #32]
 1173 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1174 004a 013B     		subs	r3, r3, #1
 1175 004c 062B     		cmp	r3, #6
 1176 004e 00F25182 		bhi	.L123
 1177 0052 01A2     		adr	r2, .L70
 1178 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1179              		.p2align 2
 1180              	.L70:
 1181 0058 75000000 		.word	.L69+1
 1182 005c 21020000 		.word	.L71+1
 1183 0060 C9020000 		.word	.L72+1
 1184 0064 31030000 		.word	.L73+1
 1185 0068 11040000 		.word	.L74+1
 1186 006c 4D010000 		.word	.L75+1
 1187 0070 5B020000 		.word	.L76+1
 1188              		.p2align 1
 1189              	.L69:
 559:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 560:..\src/interruptions.c **** 
 561:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 562:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 563:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1190              		.loc 1 563 0
 1191 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1192 0076 9049     		ldr	r1, .L131
 1193 0078 1346     		mov	r3, r2
 1194 007a 5B00     		lsls	r3, r3, #1
 1195 007c 1344     		add	r3, r3, r2
 1196 007e 1B01     		lsls	r3, r3, #4
 1197 0080 0B44     		add	r3, r3, r1
 1198 0082 03F5D873 		add	r3, r3, #432
 1199 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 32


 1200 0088 002B     		cmp	r3, #0
 1201 008a 19D0     		beq	.L77
 564:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1202              		.loc 1 564 0
 1203 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1204 008e 8C4A     		ldr	r2, .L131+8
 1205 0090 3421     		movs	r1, #52
 1206 0092 01FB03F3 		mul	r3, r1, r3
 1207 0096 1344     		add	r3, r3, r2
 1208 0098 0833     		adds	r3, r3, #8
 1209 009a 1968     		ldr	r1, [r3]
 1210 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1211 009e 8648     		ldr	r0, .L131
 1212 00a0 1346     		mov	r3, r2
 1213 00a2 5B00     		lsls	r3, r3, #1
 1214 00a4 1344     		add	r3, r3, r2
 1215 00a6 1B01     		lsls	r3, r3, #4
 1216 00a8 0344     		add	r3, r3, r0
 1217 00aa 03F5DA73 		add	r3, r3, #436
 1218 00ae 93F90030 		ldrsb	r3, [r3]
 1219 00b2 03FB01F2 		mul	r2, r3, r1
 1220 00b6 3B6A     		ldr	r3, [r7, #32]
 1221 00b8 5B6B     		ldr	r3, [r3, #52]
 1222 00ba 1344     		add	r3, r3, r2
 1223 00bc 7B62     		str	r3, [r7, #36]
 1224 00be 18E0     		b	.L78
 1225              	.L77:
 565:..\src/interruptions.c ****             else
 566:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1226              		.loc 1 566 0
 1227 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1228 00c2 7F4A     		ldr	r2, .L131+8
 1229 00c4 3421     		movs	r1, #52
 1230 00c6 01FB03F3 		mul	r3, r1, r3
 1231 00ca 1344     		add	r3, r3, r2
 1232 00cc 0433     		adds	r3, r3, #4
 1233 00ce 1968     		ldr	r1, [r3]
 1234 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1235 00d2 7948     		ldr	r0, .L131
 1236 00d4 1346     		mov	r3, r2
 1237 00d6 5B00     		lsls	r3, r3, #1
 1238 00d8 1344     		add	r3, r3, r2
 1239 00da 1B01     		lsls	r3, r3, #4
 1240 00dc 0344     		add	r3, r3, r0
 1241 00de 03F5DA73 		add	r3, r3, #436
 1242 00e2 93F90030 		ldrsb	r3, [r3]
 1243 00e6 03FB01F2 		mul	r2, r3, r1
 1244 00ea 3B6A     		ldr	r3, [r7, #32]
 1245 00ec 5B6B     		ldr	r3, [r3, #52]
 1246 00ee 1344     		add	r3, r3, r2
 1247 00f0 7B62     		str	r3, [r7, #36]
 1248              	.L78:
 567:..\src/interruptions.c ****             
 568:..\src/interruptions.c **** 
 569:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 570:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1249              		.loc 1 570 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 33


 1250 00f2 7B68     		ldr	r3, [r7, #4]
 1251 00f4 1B68     		ldr	r3, [r3]
 1252 00f6 7A6A     		ldr	r2, [r7, #36]
 1253 00f8 D21A     		subs	r2, r2, r3
 1254 00fa 3B6A     		ldr	r3, [r7, #32]
 1255 00fc 1B6C     		ldr	r3, [r3, #64]
 1256 00fe 9A42     		cmp	r2, r3
 1257 0100 0BDD     		ble	.L79
 1258              		.loc 1 570 0 is_stmt 0 discriminator 1
 1259 0102 3B6A     		ldr	r3, [r7, #32]
 1260 0104 1B6C     		ldr	r3, [r3, #64]
 1261 0106 002B     		cmp	r3, #0
 1262 0108 07D0     		beq	.L79
 571:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1263              		.loc 1 571 0 is_stmt 1
 1264 010a BB68     		ldr	r3, [r7, #8]
 1265 010c 1A68     		ldr	r2, [r3]
 1266 010e 3B6A     		ldr	r3, [r7, #32]
 1267 0110 1B6C     		ldr	r3, [r3, #64]
 1268 0112 1A44     		add	r2, r2, r3
 1269 0114 BB68     		ldr	r3, [r7, #8]
 1270 0116 1A60     		str	r2, [r3]
 1271 0118 17E0     		b	.L80
 1272              	.L79:
 572:..\src/interruptions.c ****             else {
 573:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1273              		.loc 1 573 0
 1274 011a 7B68     		ldr	r3, [r7, #4]
 1275 011c 1B68     		ldr	r3, [r3]
 1276 011e 7A6A     		ldr	r2, [r7, #36]
 1277 0120 D21A     		subs	r2, r2, r3
 1278 0122 3B6A     		ldr	r3, [r7, #32]
 1279 0124 DB6B     		ldr	r3, [r3, #60]
 1280 0126 9A42     		cmp	r2, r3
 1281 0128 0BDA     		bge	.L81
 1282              		.loc 1 573 0 is_stmt 0 discriminator 1
 1283 012a 3B6A     		ldr	r3, [r7, #32]
 1284 012c DB6B     		ldr	r3, [r3, #60]
 1285 012e 002B     		cmp	r3, #0
 1286 0130 07D0     		beq	.L81
 574:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1287              		.loc 1 574 0 is_stmt 1
 1288 0132 BB68     		ldr	r3, [r7, #8]
 1289 0134 1A68     		ldr	r2, [r3]
 1290 0136 3B6A     		ldr	r3, [r7, #32]
 1291 0138 DB6B     		ldr	r3, [r3, #60]
 1292 013a 1A44     		add	r2, r2, r3
 1293 013c BB68     		ldr	r3, [r7, #8]
 1294 013e 1A60     		str	r2, [r3]
 1295 0140 03E0     		b	.L80
 1296              	.L81:
 575:..\src/interruptions.c ****                 else
 576:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1297              		.loc 1 576 0
 1298 0142 BB68     		ldr	r3, [r7, #8]
 1299 0144 7A6A     		ldr	r2, [r7, #36]
 1300 0146 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 34


 577:..\src/interruptions.c ****             }
 578:..\src/interruptions.c ****             break;
 1301              		.loc 1 578 0
 1302 0148 DFE1     		b	.L82
 1303              	.L80:
 1304 014a DEE1     		b	.L82
 1305              	.L75:
 579:..\src/interruptions.c ****         
 580:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 581:..\src/interruptions.c ****             
 582:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1306              		.loc 1 582 0
 1307 014c 5A4B     		ldr	r3, .L131
 1308 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1309 0152 002B     		cmp	r3, #0
 1310 0154 57D1     		bne	.L83
 583:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 584:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1311              		.loc 1 584 0
 1312 0156 7B68     		ldr	r3, [r7, #4]
 1313 0158 1A68     		ldr	r2, [r3]
 1314 015a BB68     		ldr	r3, [r7, #8]
 1315 015c 1A60     		str	r2, [r3]
 585:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1316              		.loc 1 585 0
 1317 015e 574B     		ldr	r3, .L131+4
 1318 0160 1B6A     		ldr	r3, [r3, #32]
 1319 0162 B3F52F7F 		cmp	r3, #700
 1320 0166 45DC     		bgt	.L84
 1321              	.LBB3:
 586:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1322              		.loc 1 586 0
 1323 0168 544B     		ldr	r3, .L131+4
 1324 016a 1B6A     		ldr	r3, [r3, #32]
 1325 016c 524A     		ldr	r2, .L131
 1326 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1327 0172 9B1A     		subs	r3, r3, r2
 1328 0174 3B61     		str	r3, [r7, #16]
 587:..\src/interruptions.c **** 
 588:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1329              		.loc 1 588 0
 1330 0176 514B     		ldr	r3, .L131+4
 1331 0178 1B6A     		ldr	r3, [r3, #32]
 1332 017a 4F4A     		ldr	r2, .L131
 1333 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1334 0180 9342     		cmp	r3, r2
 1335 0182 13DD     		ble	.L85
 589:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1336              		.loc 1 589 0
 1337 0184 BB68     		ldr	r3, [r7, #8]
 1338 0186 1A68     		ldr	r2, [r3]
 1339 0188 4B4B     		ldr	r3, .L131
 1340 018a B3F8B032 		ldrh	r3, [r3, #688]
 1341 018e 1946     		mov	r1, r3
 1342 0190 3B69     		ldr	r3, [r7, #16]
 1343 0192 03FB01F1 		mul	r1, r3, r1
 1344 0196 484B     		ldr	r3, .L131
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 35


 1345 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1346 019c C3F58063 		rsb	r3, r3, #1024
 1347 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1348 01a4 1A44     		add	r2, r2, r3
 1349 01a6 BB68     		ldr	r3, [r7, #8]
 1350 01a8 1A60     		str	r2, [r3]
 1351              	.LBE3:
 590:..\src/interruptions.c ****                     }
 591:..\src/interruptions.c ****                     else {
 592:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 593:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 594:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 595:..\src/interruptions.c ****                         }
 596:..\src/interruptions.c ****                     }
 597:..\src/interruptions.c ****                 }
 598:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 599:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 600:..\src/interruptions.c ****                 }
 601:..\src/interruptions.c ****             }
 602:..\src/interruptions.c ****             else {
 603:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 604:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 605:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 606:..\src/interruptions.c ****                 }
 607:..\src/interruptions.c ****             }
 608:..\src/interruptions.c ****             break;
 1352              		.loc 1 608 0
 1353 01aa A5E1     		b	.L124
 1354              	.L85:
 1355              	.LBB4:
 592:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1356              		.loc 1 592 0
 1357 01ac 434B     		ldr	r3, .L131+4
 1358 01ae 1B6A     		ldr	r3, [r3, #32]
 1359 01b0 414A     		ldr	r2, .L131
 1360 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1361 01b6 1344     		add	r3, r3, r2
 1362 01b8 3B61     		str	r3, [r7, #16]
 593:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1363              		.loc 1 593 0
 1364 01ba 404B     		ldr	r3, .L131+4
 1365 01bc 1A6A     		ldr	r2, [r3, #32]
 1366 01be 3E4B     		ldr	r3, .L131
 1367 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1368 01c4 5B42     		negs	r3, r3
 1369 01c6 9A42     		cmp	r2, r3
 1370 01c8 80F29681 		bge	.L124
 594:..\src/interruptions.c ****                         }
 1371              		.loc 1 594 0
 1372 01cc BB68     		ldr	r3, [r7, #8]
 1373 01ce 1A68     		ldr	r2, [r3]
 1374 01d0 394B     		ldr	r3, .L131
 1375 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1376 01d6 1946     		mov	r1, r3
 1377 01d8 3B69     		ldr	r3, [r7, #16]
 1378 01da 03FB01F1 		mul	r1, r3, r1
 1379 01de 364B     		ldr	r3, .L131
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 36


 1380 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1381 01e4 C3F58063 		rsb	r3, r3, #1024
 1382 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1383 01ec 1A44     		add	r2, r2, r3
 1384 01ee BB68     		ldr	r3, [r7, #8]
 1385 01f0 1A60     		str	r2, [r3]
 1386              	.LBE4:
 1387              		.loc 1 608 0
 1388 01f2 81E1     		b	.L124
 1389              	.L84:
 599:..\src/interruptions.c ****                 }
 1390              		.loc 1 599 0
 1391 01f4 BB68     		ldr	r3, [r7, #8]
 1392 01f6 1B68     		ldr	r3, [r3]
 1393 01f8 324A     		ldr	r2, .L131+12
 1394 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1395 01fe 9A1A     		subs	r2, r3, r2
 1396 0200 BB68     		ldr	r3, [r7, #8]
 1397 0202 1A60     		str	r2, [r3]
 1398              		.loc 1 608 0
 1399 0204 78E1     		b	.L124
 1400              	.L83:
 604:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1401              		.loc 1 604 0
 1402 0206 2C4B     		ldr	r3, .L131
 1403 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1404 020c 042B     		cmp	r3, #4
 1405 020e 40F07381 		bne	.L124
 605:..\src/interruptions.c ****                 }
 1406              		.loc 1 605 0
 1407 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1408 0214 7A68     		ldr	r2, [r7, #4]
 1409 0216 B968     		ldr	r1, [r7, #8]
 1410 0218 1846     		mov	r0, r3
 1411 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1412              		.loc 1 608 0
 1413 021e 6BE1     		b	.L124
 1414              	.L71:
 609:..\src/interruptions.c ****             
 610:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 611:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1415              		.loc 1 611 0
 1416 0220 BB69     		ldr	r3, [r7, #24]
 1417 0222 002B     		cmp	r3, #0
 1418 0224 15DD     		ble	.L89
 612:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1419              		.loc 1 612 0
 1420 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1421 0228 2649     		ldr	r1, .L131+12
 1422 022a 1346     		mov	r3, r2
 1423 022c DB00     		lsls	r3, r3, #3
 1424 022e 9B1A     		subs	r3, r3, r2
 1425 0230 1B01     		lsls	r3, r3, #4
 1426 0232 0B44     		add	r3, r3, r1
 1427 0234 E833     		adds	r3, r3, #232
 1428 0236 1B68     		ldr	r3, [r3]
 1429 0238 BA69     		ldr	r2, [r7, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 37


 1430 023a 02FB03F2 		mul	r2, r2, r3
 1431 023e 1E4B     		ldr	r3, .L131
 1432 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1433 0244 C3F58063 		rsb	r3, r3, #1024
 1434 0248 92FBF3F2 		sdiv	r2, r2, r3
 1435 024c BB68     		ldr	r3, [r7, #8]
 1436 024e 1A60     		str	r2, [r3]
 613:..\src/interruptions.c ****             else
 614:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 615:..\src/interruptions.c ****             break;
 1437              		.loc 1 615 0
 1438 0250 5BE1     		b	.L82
 1439              	.L89:
 614:..\src/interruptions.c ****             break;
 1440              		.loc 1 614 0
 1441 0252 BB68     		ldr	r3, [r7, #8]
 1442 0254 0022     		movs	r2, #0
 1443 0256 1A60     		str	r2, [r3]
 1444              		.loc 1 615 0
 1445 0258 57E1     		b	.L82
 1446              	.L76:
 616:..\src/interruptions.c ****         
 617:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 618:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1447              		.loc 1 618 0
 1448 025a BB69     		ldr	r3, [r7, #24]
 1449 025c 002B     		cmp	r3, #0
 1450 025e 1FDD     		ble	.L91
 619:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1451              		.loc 1 619 0
 1452 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1453 0262 1849     		ldr	r1, .L131+12
 1454 0264 1346     		mov	r3, r2
 1455 0266 DB00     		lsls	r3, r3, #3
 1456 0268 9B1A     		subs	r3, r3, r2
 1457 026a 1B01     		lsls	r3, r3, #4
 1458 026c 0B44     		add	r3, r3, r1
 1459 026e E833     		adds	r3, r3, #232
 1460 0270 1968     		ldr	r1, [r3]
 1461 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1462 0274 1348     		ldr	r0, .L131+12
 1463 0276 1346     		mov	r3, r2
 1464 0278 DB00     		lsls	r3, r3, #3
 1465 027a 9B1A     		subs	r3, r3, r2
 1466 027c 1B01     		lsls	r3, r3, #4
 1467 027e 0344     		add	r3, r3, r0
 1468 0280 E833     		adds	r3, r3, #232
 1469 0282 1B68     		ldr	r3, [r3]
 1470 0284 BA69     		ldr	r2, [r7, #24]
 1471 0286 02FB03F2 		mul	r2, r2, r3
 1472 028a 0B4B     		ldr	r3, .L131
 1473 028c B3F8F031 		ldrh	r3, [r3, #496]
 1474 0290 C3F58063 		rsb	r3, r3, #1024
 1475 0294 92FBF3F3 		sdiv	r3, r2, r3
 1476 0298 CA1A     		subs	r2, r1, r3
 1477 029a BB68     		ldr	r3, [r7, #8]
 1478 029c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 38


 620:..\src/interruptions.c ****             else
 621:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 622:..\src/interruptions.c ****             break;
 1479              		.loc 1 622 0
 1480 029e 34E1     		b	.L82
 1481              	.L91:
 621:..\src/interruptions.c ****             break;
 1482              		.loc 1 621 0
 1483 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1484 02a2 0849     		ldr	r1, .L131+12
 1485 02a4 1346     		mov	r3, r2
 1486 02a6 DB00     		lsls	r3, r3, #3
 1487 02a8 9B1A     		subs	r3, r3, r2
 1488 02aa 1B01     		lsls	r3, r3, #4
 1489 02ac 0B44     		add	r3, r3, r1
 1490 02ae E833     		adds	r3, r3, #232
 1491 02b0 1A68     		ldr	r2, [r3]
 1492 02b2 BB68     		ldr	r3, [r7, #8]
 1493 02b4 1A60     		str	r2, [r3]
 1494              		.loc 1 622 0
 1495 02b6 28E1     		b	.L82
 1496              	.L132:
 1497              		.align	2
 1498              	.L131:
 1499 02b8 00000000 		.word	c_mem
 1500 02bc 00000000 		.word	g_adc_meas
 1501 02c0 00000000 		.word	g_meas
 1502 02c4 00000000 		.word	g_mem
 1503              	.L72:
 623:..\src/interruptions.c **** 
 624:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 625:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1504              		.loc 1 625 0
 1505 02c8 7B68     		ldr	r3, [r7, #4]
 1506 02ca 1A68     		ldr	r2, [r3]
 1507 02cc BB68     		ldr	r3, [r7, #8]
 1508 02ce 1A60     		str	r2, [r3]
 626:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1509              		.loc 1 626 0
 1510 02d0 BB69     		ldr	r3, [r7, #24]
 1511 02d2 002B     		cmp	r3, #0
 1512 02d4 13DD     		ble	.L93
 627:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1513              		.loc 1 627 0
 1514 02d6 7B68     		ldr	r3, [r7, #4]
 1515 02d8 1A68     		ldr	r2, [r3]
 1516 02da 884B     		ldr	r3, .L133
 1517 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1518 02e0 1946     		mov	r1, r3
 1519 02e2 BB69     		ldr	r3, [r7, #24]
 1520 02e4 03FB01F3 		mul	r3, r3, r1
 1521 02e8 5900     		lsls	r1, r3, #1
 1522 02ea 854B     		ldr	r3, .L133+4
 1523 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1524 02f0 C3F58063 		rsb	r3, r3, #1024
 1525 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1526 02f8 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 39


 1527 02fa BB68     		ldr	r3, [r7, #8]
 1528 02fc 1A60     		str	r2, [r3]
 1529              	.L93:
 628:..\src/interruptions.c ****             }
 629:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1530              		.loc 1 629 0
 1531 02fe 7B69     		ldr	r3, [r7, #20]
 1532 0300 002B     		cmp	r3, #0
 1533 0302 40F30181 		ble	.L125
 630:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1534              		.loc 1 630 0
 1535 0306 7B68     		ldr	r3, [r7, #4]
 1536 0308 1A68     		ldr	r2, [r3]
 1537 030a 7C4B     		ldr	r3, .L133
 1538 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1539 0310 1946     		mov	r1, r3
 1540 0312 7B69     		ldr	r3, [r7, #20]
 1541 0314 03FB01F3 		mul	r3, r3, r1
 1542 0318 5900     		lsls	r1, r3, #1
 1543 031a 794B     		ldr	r3, .L133+4
 1544 031c B3F8F231 		ldrh	r3, [r3, #498]
 1545 0320 C3F58063 		rsb	r3, r3, #1024
 1546 0324 91FBF3F3 		sdiv	r3, r1, r3
 1547 0328 D21A     		subs	r2, r2, r3
 1548 032a BB68     		ldr	r3, [r7, #8]
 1549 032c 1A60     		str	r2, [r3]
 631:..\src/interruptions.c ****             }
 632:..\src/interruptions.c ****             break;
 1550              		.loc 1 632 0
 1551 032e EBE0     		b	.L125
 1552              	.L73:
 633:..\src/interruptions.c **** 
 634:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 635:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1553              		.loc 1 635 0
 1554 0330 7B68     		ldr	r3, [r7, #4]
 1555 0332 1A68     		ldr	r2, [r3]
 1556 0334 BB68     		ldr	r3, [r7, #8]
 1557 0336 1A60     		str	r2, [r3]
 636:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1558              		.loc 1 636 0
 1559 0338 714B     		ldr	r3, .L133+4
 1560 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1561 033e 042B     		cmp	r3, #4
 1562 0340 5BD0     		beq	.L95
 637:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1563              		.loc 1 637 0
 1564 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1565 0344 6F4A     		ldr	r2, .L133+8
 1566 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1567 0348 012B     		cmp	r3, #1
 1568 034a 1CD0     		beq	.L97
 1569 034c 022B     		cmp	r3, #2
 1570 034e 37D0     		beq	.L98
 1571 0350 002B     		cmp	r3, #0
 1572 0352 00D0     		beq	.L99
 638:..\src/interruptions.c ****                     case 0:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 40


 639:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 640:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 641:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 642:..\src/interruptions.c ****                             break;
 643:..\src/interruptions.c ****                         }
 644:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 645:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 646:..\src/interruptions.c ****                             break;
 647:..\src/interruptions.c ****                         }
 648:..\src/interruptions.c ****                         break;
 649:..\src/interruptions.c **** 
 650:..\src/interruptions.c ****                     case 1:
 651:..\src/interruptions.c ****                         // EMG 1 is first
 652:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 653:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 654:..\src/interruptions.c ****                             break;
 655:..\src/interruptions.c ****                         }
 656:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 657:..\src/interruptions.c ****                         break;
 658:..\src/interruptions.c **** 
 659:..\src/interruptions.c ****                     case 2:
 660:..\src/interruptions.c ****                         // EMG 2 is first
 661:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 662:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 663:..\src/interruptions.c ****                             break;
 664:..\src/interruptions.c ****                         }
 665:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 666:..\src/interruptions.c ****                         break;
 667:..\src/interruptions.c **** 
 668:..\src/interruptions.c ****                     default:
 669:..\src/interruptions.c ****                         break;
 1573              		.loc 1 669 0
 1574 0354 5BE0     		b	.L105
 1575              	.L99:
 640:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1576              		.loc 1 640 0
 1577 0356 BB69     		ldr	r3, [r7, #24]
 1578 0358 002B     		cmp	r3, #0
 1579 035a 08DD     		ble	.L100
 640:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1580              		.loc 1 640 0 is_stmt 0 discriminator 1
 1581 035c BA69     		ldr	r2, [r7, #24]
 1582 035e 7B69     		ldr	r3, [r7, #20]
 1583 0360 9A42     		cmp	r2, r3
 1584 0362 04DD     		ble	.L100
 641:..\src/interruptions.c ****                             break;
 1585              		.loc 1 641 0 is_stmt 1
 1586 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1587 0366 674A     		ldr	r2, .L133+8
 1588 0368 0121     		movs	r1, #1
 1589 036a D154     		strb	r1, [r2, r3]
 642:..\src/interruptions.c ****                         }
 1590              		.loc 1 642 0
 1591 036c 4FE0     		b	.L105
 1592              	.L100:
 644:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1593              		.loc 1 644 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 41


 1594 036e 7B69     		ldr	r3, [r7, #20]
 1595 0370 002B     		cmp	r3, #0
 1596 0372 4BDD     		ble	.L126
 644:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1597              		.loc 1 644 0 is_stmt 0 discriminator 1
 1598 0374 7A69     		ldr	r2, [r7, #20]
 1599 0376 BB69     		ldr	r3, [r7, #24]
 1600 0378 9A42     		cmp	r2, r3
 1601 037a 47DD     		ble	.L126
 645:..\src/interruptions.c ****                             break;
 1602              		.loc 1 645 0 is_stmt 1
 1603 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1604 037e 614A     		ldr	r2, .L133+8
 1605 0380 0221     		movs	r1, #2
 1606 0382 D154     		strb	r1, [r2, r3]
 646:..\src/interruptions.c ****                         }
 1607              		.loc 1 646 0
 1608 0384 43E0     		b	.L105
 1609              	.L97:
 652:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1610              		.loc 1 652 0
 1611 0386 BB69     		ldr	r3, [r7, #24]
 1612 0388 002B     		cmp	r3, #0
 1613 038a 04DA     		bge	.L103
 653:..\src/interruptions.c ****                             break;
 1614              		.loc 1 653 0
 1615 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1616 038e 5D4A     		ldr	r2, .L133+8
 1617 0390 0021     		movs	r1, #0
 1618 0392 D154     		strb	r1, [r2, r3]
 654:..\src/interruptions.c ****                         }
 1619              		.loc 1 654 0
 1620 0394 3BE0     		b	.L105
 1621              	.L103:
 656:..\src/interruptions.c ****                         break;
 1622              		.loc 1 656 0
 1623 0396 7B68     		ldr	r3, [r7, #4]
 1624 0398 1A68     		ldr	r2, [r3]
 1625 039a 584B     		ldr	r3, .L133
 1626 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1627 03a0 1946     		mov	r1, r3
 1628 03a2 BB69     		ldr	r3, [r7, #24]
 1629 03a4 03FB01F3 		mul	r3, r3, r1
 1630 03a8 9900     		lsls	r1, r3, #2
 1631 03aa 554B     		ldr	r3, .L133+4
 1632 03ac B3F8F031 		ldrh	r3, [r3, #496]
 1633 03b0 C3F58063 		rsb	r3, r3, #1024
 1634 03b4 91FBF3F3 		sdiv	r3, r1, r3
 1635 03b8 1A44     		add	r2, r2, r3
 1636 03ba BB68     		ldr	r3, [r7, #8]
 1637 03bc 1A60     		str	r2, [r3]
 657:..\src/interruptions.c **** 
 1638              		.loc 1 657 0
 1639 03be 26E0     		b	.L105
 1640              	.L98:
 661:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1641              		.loc 1 661 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 42


 1642 03c0 7B69     		ldr	r3, [r7, #20]
 1643 03c2 002B     		cmp	r3, #0
 1644 03c4 04DA     		bge	.L104
 662:..\src/interruptions.c ****                             break;
 1645              		.loc 1 662 0
 1646 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1647 03c8 4E4A     		ldr	r2, .L133+8
 1648 03ca 0021     		movs	r1, #0
 1649 03cc D154     		strb	r1, [r2, r3]
 663:..\src/interruptions.c ****                         }
 1650              		.loc 1 663 0
 1651 03ce 1EE0     		b	.L105
 1652              	.L104:
 665:..\src/interruptions.c ****                         break;
 1653              		.loc 1 665 0
 1654 03d0 7B68     		ldr	r3, [r7, #4]
 1655 03d2 1A68     		ldr	r2, [r3]
 1656 03d4 494B     		ldr	r3, .L133
 1657 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1658 03da 1946     		mov	r1, r3
 1659 03dc 7B69     		ldr	r3, [r7, #20]
 1660 03de 03FB01F3 		mul	r3, r3, r1
 1661 03e2 9900     		lsls	r1, r3, #2
 1662 03e4 464B     		ldr	r3, .L133+4
 1663 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 1664 03ea C3F58063 		rsb	r3, r3, #1024
 1665 03ee 91FBF3F3 		sdiv	r3, r1, r3
 1666 03f2 D21A     		subs	r2, r2, r3
 1667 03f4 BB68     		ldr	r3, [r7, #8]
 1668 03f6 1A60     		str	r2, [r3]
 666:..\src/interruptions.c **** 
 1669              		.loc 1 666 0
 1670 03f8 09E0     		b	.L105
 1671              	.L95:
 670:..\src/interruptions.c ****                 }
 671:..\src/interruptions.c ****             }
 672:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 673:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 674:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 1672              		.loc 1 674 0
 1673 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 1674 03fc 7B69     		ldr	r3, [r7, #20]
 1675 03fe 0093     		str	r3, [sp]
 1676 0400 BB69     		ldr	r3, [r7, #24]
 1677 0402 7A68     		ldr	r2, [r7, #4]
 1678 0404 B968     		ldr	r1, [r7, #8]
 1679 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 675:..\src/interruptions.c ****             }
 676:..\src/interruptions.c ****             break;
 1680              		.loc 1 676 0
 1681 040a 7EE0     		b	.L82
 1682              	.L126:
 648:..\src/interruptions.c **** 
 1683              		.loc 1 648 0
 1684 040c 00BF     		nop
 1685              	.L105:
 1686              		.loc 1 676 0 discriminator 5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 43


 1687 040e 7CE0     		b	.L82
 1688              	.L74:
 677:..\src/interruptions.c **** 
 678:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 679:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1689              		.loc 1 679 0
 1690 0410 7B68     		ldr	r3, [r7, #4]
 1691 0412 1A68     		ldr	r2, [r3]
 1692 0414 BB68     		ldr	r3, [r7, #8]
 1693 0416 1A60     		str	r2, [r3]
 680:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1694              		.loc 1 680 0
 1695 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1696 041a 3A4A     		ldr	r2, .L133+8
 1697 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1698 041e 012B     		cmp	r3, #1
 1699 0420 1CD0     		beq	.L107
 1700 0422 022B     		cmp	r3, #2
 1701 0424 3DD0     		beq	.L108
 1702 0426 002B     		cmp	r3, #0
 1703 0428 00D0     		beq	.L109
 681:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 682:..\src/interruptions.c ****                 case 0:
 683:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 684:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 685:..\src/interruptions.c ****                         break;
 686:..\src/interruptions.c ****                     }
 687:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 688:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 689:..\src/interruptions.c ****                         break;
 690:..\src/interruptions.c ****                     }
 691:..\src/interruptions.c ****                     break;
 692:..\src/interruptions.c **** 
 693:..\src/interruptions.c ****                 // EMG 1 is first
 694:..\src/interruptions.c ****                 case 1:
 695:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 696:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 697:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 698:..\src/interruptions.c ****                         break;
 699:..\src/interruptions.c ****                     }
 700:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 701:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 702:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 703:..\src/interruptions.c ****                     
 704:..\src/interruptions.c ****                     break;
 705:..\src/interruptions.c **** 
 706:..\src/interruptions.c ****                 // EMG 2 is first
 707:..\src/interruptions.c ****                 case 2:
 708:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 709:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 710:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 711:..\src/interruptions.c ****                         break;
 712:..\src/interruptions.c ****                     }
 713:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 714:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 715:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 716:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 44


 717:..\src/interruptions.c ****                     break;
 718:..\src/interruptions.c **** 
 719:..\src/interruptions.c ****                 default:
 720:..\src/interruptions.c ****                     break;
 1704              		.loc 1 720 0
 1705 042a 62E0     		b	.L111
 1706              	.L109:
 683:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1707              		.loc 1 683 0
 1708 042c BB69     		ldr	r3, [r7, #24]
 1709 042e 002B     		cmp	r3, #0
 1710 0430 08DD     		ble	.L110
 683:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1711              		.loc 1 683 0 is_stmt 0 discriminator 1
 1712 0432 BA69     		ldr	r2, [r7, #24]
 1713 0434 7B69     		ldr	r3, [r7, #20]
 1714 0436 9A42     		cmp	r2, r3
 1715 0438 04DD     		ble	.L110
 684:..\src/interruptions.c ****                         break;
 1716              		.loc 1 684 0 is_stmt 1
 1717 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1718 043c 314A     		ldr	r2, .L133+8
 1719 043e 0121     		movs	r1, #1
 1720 0440 D154     		strb	r1, [r2, r3]
 685:..\src/interruptions.c ****                     }
 1721              		.loc 1 685 0
 1722 0442 56E0     		b	.L111
 1723              	.L110:
 687:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1724              		.loc 1 687 0
 1725 0444 7B69     		ldr	r3, [r7, #20]
 1726 0446 002B     		cmp	r3, #0
 1727 0448 4EDD     		ble	.L127
 687:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1728              		.loc 1 687 0 is_stmt 0 discriminator 1
 1729 044a 7A69     		ldr	r2, [r7, #20]
 1730 044c BB69     		ldr	r3, [r7, #24]
 1731 044e 9A42     		cmp	r2, r3
 1732 0450 4ADD     		ble	.L127
 688:..\src/interruptions.c ****                         break;
 1733              		.loc 1 688 0 is_stmt 1
 1734 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1735 0454 2B4A     		ldr	r2, .L133+8
 1736 0456 0221     		movs	r1, #2
 1737 0458 D154     		strb	r1, [r2, r3]
 689:..\src/interruptions.c ****                     }
 1738              		.loc 1 689 0
 1739 045a 4AE0     		b	.L111
 1740              	.L107:
 696:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1741              		.loc 1 696 0
 1742 045c BB69     		ldr	r3, [r7, #24]
 1743 045e 002B     		cmp	r3, #0
 1744 0460 07DA     		bge	.L113
 696:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1745              		.loc 1 696 0 is_stmt 0 discriminator 1
 1746 0462 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 45


 1747 0464 002B     		cmp	r3, #0
 1748 0466 04DA     		bge	.L113
 697:..\src/interruptions.c ****                         break;
 1749              		.loc 1 697 0 is_stmt 1
 1750 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1751 046a 264A     		ldr	r2, .L133+8
 1752 046c 0021     		movs	r1, #0
 1753 046e D154     		strb	r1, [r2, r3]
 698:..\src/interruptions.c ****                     }
 1754              		.loc 1 698 0
 1755 0470 3FE0     		b	.L111
 1756              	.L113:
 701:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 1757              		.loc 1 701 0
 1758 0472 BB69     		ldr	r3, [r7, #24]
 1759 0474 002B     		cmp	r3, #0
 1760 0476 39DD     		ble	.L128
 702:..\src/interruptions.c ****                     
 1761              		.loc 1 702 0
 1762 0478 7B68     		ldr	r3, [r7, #4]
 1763 047a 1A68     		ldr	r2, [r3]
 1764 047c 1F4B     		ldr	r3, .L133
 1765 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1766 0482 1946     		mov	r1, r3
 1767 0484 BB69     		ldr	r3, [r7, #24]
 1768 0486 03FB01F3 		mul	r3, r3, r1
 1769 048a 9900     		lsls	r1, r3, #2
 1770 048c 1C4B     		ldr	r3, .L133+4
 1771 048e B3F8F031 		ldrh	r3, [r3, #496]
 1772 0492 C3F58063 		rsb	r3, r3, #1024
 1773 0496 91FBF3F3 		sdiv	r3, r1, r3
 1774 049a 1A44     		add	r2, r2, r3
 1775 049c BB68     		ldr	r3, [r7, #8]
 1776 049e 1A60     		str	r2, [r3]
 704:..\src/interruptions.c **** 
 1777              		.loc 1 704 0
 1778 04a0 24E0     		b	.L128
 1779              	.L108:
 709:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1780              		.loc 1 709 0
 1781 04a2 BB69     		ldr	r3, [r7, #24]
 1782 04a4 002B     		cmp	r3, #0
 1783 04a6 07DA     		bge	.L115
 709:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1784              		.loc 1 709 0 is_stmt 0 discriminator 1
 1785 04a8 7B69     		ldr	r3, [r7, #20]
 1786 04aa 002B     		cmp	r3, #0
 1787 04ac 04DA     		bge	.L115
 710:..\src/interruptions.c ****                         break;
 1788              		.loc 1 710 0 is_stmt 1
 1789 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1790 04b0 144A     		ldr	r2, .L133+8
 1791 04b2 0021     		movs	r1, #0
 1792 04b4 D154     		strb	r1, [r2, r3]
 711:..\src/interruptions.c ****                     }
 1793              		.loc 1 711 0
 1794 04b6 1CE0     		b	.L111
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 46


 1795              	.L115:
 714:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 1796              		.loc 1 714 0
 1797 04b8 7B69     		ldr	r3, [r7, #20]
 1798 04ba 002B     		cmp	r3, #0
 1799 04bc 18DD     		ble	.L129
 715:..\src/interruptions.c ****                     }
 1800              		.loc 1 715 0
 1801 04be 7B68     		ldr	r3, [r7, #4]
 1802 04c0 1A68     		ldr	r2, [r3]
 1803 04c2 0F4B     		ldr	r3, .L133+4
 1804 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1805 04c8 1946     		mov	r1, r3
 1806 04ca 7B69     		ldr	r3, [r7, #20]
 1807 04cc 03FB01F3 		mul	r3, r3, r1
 1808 04d0 9900     		lsls	r1, r3, #2
 1809 04d2 0B4B     		ldr	r3, .L133+4
 1810 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 1811 04d8 C3F58063 		rsb	r3, r3, #1024
 1812 04dc 91FBF3F3 		sdiv	r3, r1, r3
 1813 04e0 D21A     		subs	r2, r2, r3
 1814 04e2 BB68     		ldr	r3, [r7, #8]
 1815 04e4 1A60     		str	r2, [r3]
 717:..\src/interruptions.c **** 
 1816              		.loc 1 717 0
 1817 04e6 03E0     		b	.L129
 1818              	.L127:
 691:..\src/interruptions.c **** 
 1819              		.loc 1 691 0
 1820 04e8 00BF     		nop
 1821 04ea 0EE0     		b	.L82
 1822              	.L128:
 704:..\src/interruptions.c **** 
 1823              		.loc 1 704 0
 1824 04ec 00BF     		nop
 1825 04ee 0CE0     		b	.L82
 1826              	.L129:
 717:..\src/interruptions.c **** 
 1827              		.loc 1 717 0
 1828 04f0 00BF     		nop
 1829              	.L111:
 721:..\src/interruptions.c ****             }
 722:..\src/interruptions.c ****             break;
 1830              		.loc 1 722 0 discriminator 6
 1831 04f2 0AE0     		b	.L82
 1832              	.L123:
 723:..\src/interruptions.c **** 
 724:..\src/interruptions.c ****         default:
 725:..\src/interruptions.c ****             break;
 1833              		.loc 1 725 0
 1834 04f4 00BF     		nop
 1835 04f6 08E0     		b	.L82
 1836              	.L124:
 608:..\src/interruptions.c ****             
 1837              		.loc 1 608 0
 1838 04f8 00BF     		nop
 1839 04fa 06E0     		b	.L82
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 47


 1840              	.L134:
 1841              		.align	2
 1842              	.L133:
 1843 04fc 00000000 		.word	g_mem
 1844 0500 00000000 		.word	c_mem
 1845 0504 8C000000 		.word	current_emg.10261
 1846              	.L125:
 632:..\src/interruptions.c **** 
 1847              		.loc 1 632 0
 1848 0508 00BF     		nop
 1849              	.L82:
 726:..\src/interruptions.c ****     }
 727:..\src/interruptions.c **** 
 728:..\src/interruptions.c ****     // Position limit saturation
 729:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 1850              		.loc 1 729 0
 1851 050a 3B6A     		ldr	r3, [r7, #32]
 1852 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1853 0510 002B     		cmp	r3, #0
 1854 0512 13D0     		beq	.L117
 730:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 1855              		.loc 1 730 0
 1856 0514 BB68     		ldr	r3, [r7, #8]
 1857 0516 1A68     		ldr	r2, [r3]
 1858 0518 3B6A     		ldr	r3, [r7, #32]
 1859 051a 5B6B     		ldr	r3, [r3, #52]
 1860 051c 9A42     		cmp	r2, r3
 1861 051e 03DA     		bge	.L118
 731:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 1862              		.loc 1 731 0
 1863 0520 3B6A     		ldr	r3, [r7, #32]
 1864 0522 5A6B     		ldr	r2, [r3, #52]
 1865 0524 BB68     		ldr	r3, [r7, #8]
 1866 0526 1A60     		str	r2, [r3]
 1867              	.L118:
 732:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 1868              		.loc 1 732 0
 1869 0528 BB68     		ldr	r3, [r7, #8]
 1870 052a 1A68     		ldr	r2, [r3]
 1871 052c 3B6A     		ldr	r3, [r7, #32]
 1872 052e 9B6B     		ldr	r3, [r3, #56]
 1873 0530 9A42     		cmp	r2, r3
 1874 0532 03DD     		ble	.L117
 733:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 1875              		.loc 1 733 0
 1876 0534 3B6A     		ldr	r3, [r7, #32]
 1877 0536 9A6B     		ldr	r2, [r3, #56]
 1878 0538 BB68     		ldr	r3, [r7, #8]
 1879 053a 1A60     		str	r2, [r3]
 1880              	.L117:
 734:..\src/interruptions.c ****     }
 735:..\src/interruptions.c ****     
 736:..\src/interruptions.c ****     // SAFETY
 737:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1881              		.loc 1 737 0
 1882 053c 1D4B     		ldr	r3, .L135
 1883 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 48


 1884 0540 012B     		cmp	r3, #1
 1885 0542 02D1     		bne	.L119
 738:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 739:..\src/interruptions.c ****         st_ref_p->pos = 0;
 1886              		.loc 1 739 0
 1887 0544 BB68     		ldr	r3, [r7, #8]
 1888 0546 0022     		movs	r2, #0
 1889 0548 1A60     		str	r2, [r3]
 1890              	.L119:
 740:..\src/interruptions.c ****     }      
 741:..\src/interruptions.c ****     
 742:..\src/interruptions.c ****        
 743:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1891              		.loc 1 743 0
 1892 054a 1B4B     		ldr	r3, .L135+4
 1893 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1894 0550 012B     		cmp	r3, #1
 1895 0552 2AD1     		bne	.L130
 744:..\src/interruptions.c ****         if (rest_enabled == 1){
 1896              		.loc 1 744 0
 1897 0554 194B     		ldr	r3, .L135+8
 1898 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1899 0558 012B     		cmp	r3, #1
 1900 055a 03D1     		bne	.L121
 745:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 746:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 1901              		.loc 1 746 0
 1902 055c 184B     		ldr	r3, .L135+12
 1903 055e 1A68     		ldr	r2, [r3]
 1904 0560 BB68     		ldr	r3, [r7, #8]
 1905 0562 1A60     		str	r2, [r3]
 1906              	.L121:
 747:..\src/interruptions.c ****         }
 748:..\src/interruptions.c ****         
 749:..\src/interruptions.c ****         if (forced_open == 1) {
 1907              		.loc 1 749 0
 1908 0564 174B     		ldr	r3, .L135+16
 1909 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1910 0568 012B     		cmp	r3, #1
 1911 056a 1ED1     		bne	.L130
 750:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 751:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1912              		.loc 1 751 0
 1913 056c 7B69     		ldr	r3, [r7, #20]
 1914 056e 002B     		cmp	r3, #0
 1915 0570 13DD     		ble	.L122
 752:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 1916              		.loc 1 752 0
 1917 0572 154B     		ldr	r3, .L135+20
 1918 0574 D3F8A022 		ldr	r2, [r3, #672]
 1919 0578 134B     		ldr	r3, .L135+20
 1920 057a D3F8A032 		ldr	r3, [r3, #672]
 1921 057e 7969     		ldr	r1, [r7, #20]
 1922 0580 01FB03F1 		mul	r1, r1, r3
 1923 0584 0C4B     		ldr	r3, .L135+4
 1924 0586 B3F8F231 		ldrh	r3, [r3, #498]
 1925 058a C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 49


 1926 058e 91FBF3F3 		sdiv	r3, r1, r3
 1927 0592 D21A     		subs	r2, r2, r3
 1928 0594 BB68     		ldr	r3, [r7, #8]
 1929 0596 1A60     		str	r2, [r3]
 753:..\src/interruptions.c ****             else {
 754:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 755:..\src/interruptions.c ****                 forced_open = 0;
 756:..\src/interruptions.c ****             }
 757:..\src/interruptions.c ****         }
 758:..\src/interruptions.c ****     }
 759:..\src/interruptions.c **** }
 1930              		.loc 1 759 0
 1931 0598 07E0     		b	.L130
 1932              	.L122:
 754:..\src/interruptions.c ****                 forced_open = 0;
 1933              		.loc 1 754 0
 1934 059a 0B4B     		ldr	r3, .L135+20
 1935 059c D3F8A022 		ldr	r2, [r3, #672]
 1936 05a0 BB68     		ldr	r3, [r7, #8]
 1937 05a2 1A60     		str	r2, [r3]
 755:..\src/interruptions.c ****             }
 1938              		.loc 1 755 0
 1939 05a4 074B     		ldr	r3, .L135+16
 1940 05a6 0022     		movs	r2, #0
 1941 05a8 1A70     		strb	r2, [r3]
 1942              	.L130:
 1943              		.loc 1 759 0
 1944 05aa 00BF     		nop
 1945 05ac 2837     		adds	r7, r7, #40
 1946              		.cfi_def_cfa_offset 8
 1947 05ae BD46     		mov	sp, r7
 1948              		.cfi_def_cfa_register 13
 1949              		@ sp needed
 1950 05b0 80BD     		pop	{r7, pc}
 1951              	.L136:
 1952 05b2 00BF     		.align	2
 1953              	.L135:
 1954 05b4 00000000 		.word	battery_low_SoC
 1955 05b8 00000000 		.word	c_mem
 1956 05bc 00000000 		.word	rest_enabled
 1957 05c0 00000000 		.word	rest_pos_curr_ref
 1958 05c4 00000000 		.word	forced_open
 1959 05c8 00000000 		.word	g_mem
 1960              		.cfi_endproc
 1961              	.LFE68:
 1962              		.size	compute_reference, .-compute_reference
 1963              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 1964              		.align	2
 1965              		.global	compute_SoftHand_2_motors_joystick_reference
 1966              		.thumb
 1967              		.thumb_func
 1968              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 1969              	compute_SoftHand_2_motors_joystick_reference:
 1970              	.LFB69:
 760:..\src/interruptions.c **** 
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 50


 763:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 764:..\src/interruptions.c **** //==============================================================================
 765:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 1971              		.loc 1 765 0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 32
 1974              		@ frame_needed = 1, uses_anonymous_args = 0
 1975              		@ link register save eliminated.
 1976 0000 80B4     		push	{r7}
 1977              		.cfi_def_cfa_offset 4
 1978              		.cfi_offset 7, -4
 1979 0002 89B0     		sub	sp, sp, #36
 1980              		.cfi_def_cfa_offset 40
 1981 0004 00AF     		add	r7, sp, #0
 1982              		.cfi_def_cfa_register 7
 1983 0006 0346     		mov	r3, r0
 1984 0008 B960     		str	r1, [r7, #8]
 1985 000a 7A60     		str	r2, [r7, #4]
 1986 000c FB73     		strb	r3, [r7, #15]
 766:..\src/interruptions.c ****     
 767:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 1987              		.loc 1 767 0
 1988 000e B04B     		ldr	r3, .L158
 1989 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 1990 0014 062B     		cmp	r3, #6
 1991 0016 40F08581 		bne	.L156
 1992              		.loc 1 767 0 is_stmt 0 discriminator 1
 1993 001a AD4B     		ldr	r3, .L158
 1994 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 1995 0020 062B     		cmp	r3, #6
 1996 0022 40F07F81 		bne	.L156
 768:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 1997              		.loc 1 768 0 is_stmt 1
 1998 0026 7B68     		ldr	r3, [r7, #4]
 1999 0028 1A68     		ldr	r2, [r3]
 2000 002a BB68     		ldr	r3, [r7, #8]
 2001 002c 1A60     		str	r2, [r3]
 769:..\src/interruptions.c ****     
 770:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2002              		.loc 1 770 0
 2003 002e A94B     		ldr	r3, .L158+4
 2004 0030 1B6A     		ldr	r3, [r3, #32]
 2005 0032 B3F52F7F 		cmp	r3, #700
 2006 0036 00F3C280 		bgt	.L139
 2007              	.LBB5:
 771:..\src/interruptions.c ****              
 772:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2008              		.loc 1 772 0
 2009 003a 0023     		movs	r3, #0
 2010 003c FB61     		str	r3, [r7, #28]
 773:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2011              		.loc 1 773 0
 2012 003e 0023     		movs	r3, #0
 2013 0040 BB61     		str	r3, [r7, #24]
 774:..\src/interruptions.c ****         
 775:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2014              		.loc 1 775 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 51


 2015 0042 A44B     		ldr	r3, .L158+4
 2016 0044 1B6A     		ldr	r3, [r3, #32]
 2017 0046 A24A     		ldr	r2, .L158
 2018 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2019 004c 9342     		cmp	r3, r2
 2020 004e 1ADD     		ble	.L140
 776:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2021              		.loc 1 776 0
 2022 0050 A04B     		ldr	r3, .L158+4
 2023 0052 1B6A     		ldr	r3, [r3, #32]
 2024 0054 9E4A     		ldr	r2, .L158
 2025 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2026 005a 9B1A     		subs	r3, r3, r2
 2027 005c FB61     		str	r3, [r7, #28]
 777:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2028              		.loc 1 777 0
 2029 005e BB68     		ldr	r3, [r7, #8]
 2030 0060 1A68     		ldr	r2, [r3]
 2031 0062 9B4B     		ldr	r3, .L158
 2032 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2033 0068 1946     		mov	r1, r3
 2034 006a FB69     		ldr	r3, [r7, #28]
 2035 006c 03FB01F1 		mul	r1, r3, r1
 2036 0070 974B     		ldr	r3, .L158
 2037 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2038 0076 C3F58063 		rsb	r3, r3, #1024
 2039 007a 91FBF3F3 		sdiv	r3, r1, r3
 2040 007e 1A44     		add	r2, r2, r3
 2041 0080 BB68     		ldr	r3, [r7, #8]
 2042 0082 1A60     		str	r2, [r3]
 2043 0084 21E0     		b	.L141
 2044              	.L140:
 778:..\src/interruptions.c ****             }
 779:..\src/interruptions.c ****             else {
 780:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2045              		.loc 1 780 0
 2046 0086 934B     		ldr	r3, .L158+4
 2047 0088 1A6A     		ldr	r2, [r3, #32]
 2048 008a 914B     		ldr	r3, .L158
 2049 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2050 0090 5B42     		negs	r3, r3
 2051 0092 9A42     		cmp	r2, r3
 2052 0094 19DA     		bge	.L141
 781:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2053              		.loc 1 781 0
 2054 0096 8F4B     		ldr	r3, .L158+4
 2055 0098 1B6A     		ldr	r3, [r3, #32]
 2056 009a 8D4A     		ldr	r2, .L158
 2057 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2058 00a0 1344     		add	r3, r3, r2
 2059 00a2 FB61     		str	r3, [r7, #28]
 782:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2060              		.loc 1 782 0
 2061 00a4 BB68     		ldr	r3, [r7, #8]
 2062 00a6 1A68     		ldr	r2, [r3]
 2063 00a8 894B     		ldr	r3, .L158
 2064 00aa B3F8B032 		ldrh	r3, [r3, #688]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 52


 2065 00ae 1946     		mov	r1, r3
 2066 00b0 FB69     		ldr	r3, [r7, #28]
 2067 00b2 03FB01F1 		mul	r1, r3, r1
 2068 00b6 864B     		ldr	r3, .L158
 2069 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2070 00bc C3F58063 		rsb	r3, r3, #1024
 2071 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2072 00c4 1A44     		add	r2, r2, r3
 2073 00c6 BB68     		ldr	r3, [r7, #8]
 2074 00c8 1A60     		str	r2, [r3]
 2075              	.L141:
 783:..\src/interruptions.c ****                 }
 784:..\src/interruptions.c ****             }
 785:..\src/interruptions.c **** 
 786:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2076              		.loc 1 786 0
 2077 00ca 824B     		ldr	r3, .L158+4
 2078 00cc 5B6A     		ldr	r3, [r3, #36]
 2079 00ce 804A     		ldr	r2, .L158
 2080 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2081 00d4 9342     		cmp	r3, r2
 2082 00d6 34DD     		ble	.L142
 787:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2083              		.loc 1 787 0
 2084 00d8 7E4B     		ldr	r3, .L158+4
 2085 00da 5B6A     		ldr	r3, [r3, #36]
 2086 00dc 7C4A     		ldr	r2, .L158
 2087 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2088 00e2 9B1A     		subs	r3, r3, r2
 2089 00e4 BB61     		str	r3, [r7, #24]
 788:..\src/interruptions.c ****                 if (motor_idx == 0){
 2090              		.loc 1 788 0
 2091 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2092 00e8 002B     		cmp	r3, #0
 2093 00ea 12D1     		bne	.L143
 789:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2094              		.loc 1 789 0
 2095 00ec BB68     		ldr	r3, [r7, #8]
 2096 00ee 1A68     		ldr	r2, [r3]
 2097 00f0 774B     		ldr	r3, .L158
 2098 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2099 00f6 1946     		mov	r1, r3
 2100 00f8 BB69     		ldr	r3, [r7, #24]
 2101 00fa 03FB01F1 		mul	r1, r3, r1
 2102 00fe 744B     		ldr	r3, .L158
 2103 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2104 0104 C3F58063 		rsb	r3, r3, #1024
 2105 0108 91FBF3F3 		sdiv	r3, r1, r3
 2106 010c 1A44     		add	r2, r2, r3
 2107 010e BB68     		ldr	r3, [r7, #8]
 2108 0110 1A60     		str	r2, [r3]
 2109              	.L143:
 790:..\src/interruptions.c ****                 }
 791:..\src/interruptions.c ****                 if (motor_idx == 1){
 2110              		.loc 1 791 0
 2111 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2112 0114 012B     		cmp	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 53


 2113 0116 40F00581 		bne	.L156
 792:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2114              		.loc 1 792 0
 2115 011a BB68     		ldr	r3, [r7, #8]
 2116 011c 1A68     		ldr	r2, [r3]
 2117 011e 6C4B     		ldr	r3, .L158
 2118 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2119 0124 1946     		mov	r1, r3
 2120 0126 BB69     		ldr	r3, [r7, #24]
 2121 0128 03FB01F1 		mul	r1, r3, r1
 2122 012c 684B     		ldr	r3, .L158
 2123 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2124 0132 C3F58063 		rsb	r3, r3, #1024
 2125 0136 91FBF3F3 		sdiv	r3, r1, r3
 2126 013a D21A     		subs	r2, r2, r3
 2127 013c BB68     		ldr	r3, [r7, #8]
 2128 013e 1A60     		str	r2, [r3]
 2129              	.LBE5:
 793:..\src/interruptions.c ****                 }          
 794:..\src/interruptions.c ****             }
 795:..\src/interruptions.c ****             else {
 796:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 797:..\src/interruptions.c ****                     
 798:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 799:..\src/interruptions.c ****                     if (motor_idx == 0){
 800:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 801:..\src/interruptions.c ****                     }
 802:..\src/interruptions.c ****                     if (motor_idx == 1){
 803:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 804:..\src/interruptions.c ****                     }
 805:..\src/interruptions.c ****                 }
 806:..\src/interruptions.c ****             }
 807:..\src/interruptions.c ****         }
 808:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 809:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 810:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 811:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 812:..\src/interruptions.c **** 
 813:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 814:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 815:..\src/interruptions.c ****                     if (motor_idx == 1){
 816:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 817:..\src/interruptions.c ****                     }
 818:..\src/interruptions.c ****                     if (motor_idx == 0){
 819:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 820:..\src/interruptions.c ****                     }                    
 821:..\src/interruptions.c ****                 }
 822:..\src/interruptions.c ****                 else {
 823:..\src/interruptions.c ****                     if (motor_idx == 0){
 824:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 825:..\src/interruptions.c ****                     }
 826:..\src/interruptions.c ****                     if (motor_idx == 1){
 827:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 828:..\src/interruptions.c ****                     }
 829:..\src/interruptions.c ****                 }
 830:..\src/interruptions.c ****                 
 831:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 54


 832:..\src/interruptions.c ****             else {
 833:..\src/interruptions.c ****                 if(pos_sum > 0) {
 834:..\src/interruptions.c ****                     if (motor_idx == 0){
 835:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 836:..\src/interruptions.c ****                     }
 837:..\src/interruptions.c ****                     if (motor_idx == 1){
 838:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 839:..\src/interruptions.c ****                     }
 840:..\src/interruptions.c ****                     
 841:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 842:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 843:..\src/interruptions.c ****                     }
 844:..\src/interruptions.c ****                 }
 845:..\src/interruptions.c ****             }
 846:..\src/interruptions.c ****         }
 847:..\src/interruptions.c ****     }           
 848:..\src/interruptions.c **** }
 2130              		.loc 1 848 0
 2131 0140 F0E0     		b	.L156
 2132              	.L142:
 2133              	.LBB6:
 796:..\src/interruptions.c ****                     
 2134              		.loc 1 796 0
 2135 0142 644B     		ldr	r3, .L158+4
 2136 0144 5A6A     		ldr	r2, [r3, #36]
 2137 0146 624B     		ldr	r3, .L158
 2138 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2139 014c 5B42     		negs	r3, r3
 2140 014e 9A42     		cmp	r2, r3
 2141 0150 80F2E880 		bge	.L156
 798:..\src/interruptions.c ****                     if (motor_idx == 0){
 2142              		.loc 1 798 0
 2143 0154 5F4B     		ldr	r3, .L158+4
 2144 0156 5B6A     		ldr	r3, [r3, #36]
 2145 0158 5D4A     		ldr	r2, .L158
 2146 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2147 015e 1344     		add	r3, r3, r2
 2148 0160 BB61     		str	r3, [r7, #24]
 799:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2149              		.loc 1 799 0
 2150 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2151 0164 002B     		cmp	r3, #0
 2152 0166 12D1     		bne	.L146
 800:..\src/interruptions.c ****                     }
 2153              		.loc 1 800 0
 2154 0168 BB68     		ldr	r3, [r7, #8]
 2155 016a 1A68     		ldr	r2, [r3]
 2156 016c 584B     		ldr	r3, .L158
 2157 016e B3F8B032 		ldrh	r3, [r3, #688]
 2158 0172 1946     		mov	r1, r3
 2159 0174 BB69     		ldr	r3, [r7, #24]
 2160 0176 03FB01F1 		mul	r1, r3, r1
 2161 017a 554B     		ldr	r3, .L158
 2162 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2163 0180 C3F58063 		rsb	r3, r3, #1024
 2164 0184 91FBF3F3 		sdiv	r3, r1, r3
 2165 0188 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 55


 2166 018a BB68     		ldr	r3, [r7, #8]
 2167 018c 1A60     		str	r2, [r3]
 2168              	.L146:
 802:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2169              		.loc 1 802 0
 2170 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2171 0190 012B     		cmp	r3, #1
 2172 0192 40F0C780 		bne	.L156
 803:..\src/interruptions.c ****                     }
 2173              		.loc 1 803 0
 2174 0196 BB68     		ldr	r3, [r7, #8]
 2175 0198 1A68     		ldr	r2, [r3]
 2176 019a 4D4B     		ldr	r3, .L158
 2177 019c B3F8B032 		ldrh	r3, [r3, #688]
 2178 01a0 1946     		mov	r1, r3
 2179 01a2 BB69     		ldr	r3, [r7, #24]
 2180 01a4 03FB01F1 		mul	r1, r3, r1
 2181 01a8 494B     		ldr	r3, .L158
 2182 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2183 01ae C3F58063 		rsb	r3, r3, #1024
 2184 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2185 01b6 D21A     		subs	r2, r2, r3
 2186 01b8 BB68     		ldr	r3, [r7, #8]
 2187 01ba 1A60     		str	r2, [r3]
 2188              	.LBE6:
 2189              		.loc 1 848 0
 2190 01bc B2E0     		b	.L156
 2191              	.L139:
 2192              	.LBB7:
 810:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2193              		.loc 1 810 0
 2194 01be 444B     		ldr	r3, .L158
 2195 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2196 01c4 1946     		mov	r1, r3
 2197 01c6 444A     		ldr	r2, .L158+8
 2198 01c8 3423     		movs	r3, #52
 2199 01ca 03FB01F3 		mul	r3, r3, r1
 2200 01ce 1344     		add	r3, r3, r2
 2201 01d0 1A68     		ldr	r2, [r3]
 2202 01d2 3F4B     		ldr	r3, .L158
 2203 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2204 01d8 1846     		mov	r0, r3
 2205 01da 3F49     		ldr	r1, .L158+8
 2206 01dc 3423     		movs	r3, #52
 2207 01de 03FB00F3 		mul	r3, r3, r0
 2208 01e2 0B44     		add	r3, r3, r1
 2209 01e4 0433     		adds	r3, r3, #4
 2210 01e6 1B68     		ldr	r3, [r3]
 2211 01e8 D21A     		subs	r2, r2, r3
 2212 01ea 394B     		ldr	r3, .L158
 2213 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2214 01f0 1846     		mov	r0, r3
 2215 01f2 3749     		ldr	r1, .L158
 2216 01f4 0346     		mov	r3, r0
 2217 01f6 5B00     		lsls	r3, r3, #1
 2218 01f8 0344     		add	r3, r3, r0
 2219 01fa 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 56


 2220 01fc 0B44     		add	r3, r3, r1
 2221 01fe 03F29513 		addw	r3, r3, #405
 2222 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2223 0204 42FA03F3 		asr	r3, r2, r3
 2224 0208 7B61     		str	r3, [r7, #20]
 811:..\src/interruptions.c **** 
 2225              		.loc 1 811 0
 2226 020a 314B     		ldr	r3, .L158
 2227 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2228 0210 1946     		mov	r1, r3
 2229 0212 314A     		ldr	r2, .L158+8
 2230 0214 3423     		movs	r3, #52
 2231 0216 03FB01F3 		mul	r3, r3, r1
 2232 021a 1344     		add	r3, r3, r2
 2233 021c 1A68     		ldr	r2, [r3]
 2234 021e 2C4B     		ldr	r3, .L158
 2235 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2236 0224 1846     		mov	r0, r3
 2237 0226 2C49     		ldr	r1, .L158+8
 2238 0228 3423     		movs	r3, #52
 2239 022a 03FB00F3 		mul	r3, r3, r0
 2240 022e 0B44     		add	r3, r3, r1
 2241 0230 0433     		adds	r3, r3, #4
 2242 0232 1B68     		ldr	r3, [r3]
 2243 0234 1A44     		add	r2, r2, r3
 2244 0236 264B     		ldr	r3, .L158
 2245 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2246 023c 1846     		mov	r0, r3
 2247 023e 2449     		ldr	r1, .L158
 2248 0240 0346     		mov	r3, r0
 2249 0242 5B00     		lsls	r3, r3, #1
 2250 0244 0344     		add	r3, r3, r0
 2251 0246 1B01     		lsls	r3, r3, #4
 2252 0248 0B44     		add	r3, r3, r1
 2253 024a 03F29513 		addw	r3, r3, #405
 2254 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2255 0250 42FA03F3 		asr	r3, r2, r3
 2256 0254 3B61     		str	r3, [r7, #16]
 813:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2257              		.loc 1 813 0
 2258 0256 7B69     		ldr	r3, [r7, #20]
 2259 0258 B3F5FA7F 		cmp	r3, #500
 2260 025c 03DC     		bgt	.L147
 813:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2261              		.loc 1 813 0 is_stmt 0 discriminator 1
 2262 025e 7B69     		ldr	r3, [r7, #20]
 2263 0260 13F5FA7F 		cmn	r3, #500
 2264 0264 3ADA     		bge	.L148
 2265              	.L147:
 814:..\src/interruptions.c ****                     if (motor_idx == 1){
 2266              		.loc 1 814 0 is_stmt 1
 2267 0266 7B69     		ldr	r3, [r7, #20]
 2268 0268 002B     		cmp	r3, #0
 2269 026a 18DB     		blt	.L149
 815:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2270              		.loc 1 815 0
 2271 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 57


 2272 026e 012B     		cmp	r3, #1
 2273 0270 07D1     		bne	.L150
 816:..\src/interruptions.c ****                     }
 2274              		.loc 1 816 0
 2275 0272 BB68     		ldr	r3, [r7, #8]
 2276 0274 1B68     		ldr	r3, [r3]
 2277 0276 164A     		ldr	r2, .L158
 2278 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2279 027c 1A44     		add	r2, r2, r3
 2280 027e BB68     		ldr	r3, [r7, #8]
 2281 0280 1A60     		str	r2, [r3]
 2282              	.L150:
 818:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2283              		.loc 1 818 0
 2284 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2285 0284 002B     		cmp	r3, #0
 2286 0286 4CD1     		bne	.L157
 819:..\src/interruptions.c ****                     }                    
 2287              		.loc 1 819 0
 2288 0288 BB68     		ldr	r3, [r7, #8]
 2289 028a 1B68     		ldr	r3, [r3]
 2290 028c 104A     		ldr	r2, .L158
 2291 028e B2F8B022 		ldrh	r2, [r2, #688]
 2292 0292 5208     		lsrs	r2, r2, #1
 2293 0294 92B2     		uxth	r2, r2
 2294 0296 9A1A     		subs	r2, r3, r2
 2295 0298 BB68     		ldr	r3, [r7, #8]
 2296 029a 1A60     		str	r2, [r3]
 814:..\src/interruptions.c ****                     if (motor_idx == 1){
 2297              		.loc 1 814 0
 2298 029c 41E0     		b	.L157
 2299              	.L149:
 823:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2300              		.loc 1 823 0
 2301 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2302 02a0 002B     		cmp	r3, #0
 2303 02a2 07D1     		bne	.L153
 824:..\src/interruptions.c ****                     }
 2304              		.loc 1 824 0
 2305 02a4 BB68     		ldr	r3, [r7, #8]
 2306 02a6 1B68     		ldr	r3, [r3]
 2307 02a8 094A     		ldr	r2, .L158
 2308 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2309 02ae 1A44     		add	r2, r2, r3
 2310 02b0 BB68     		ldr	r3, [r7, #8]
 2311 02b2 1A60     		str	r2, [r3]
 2312              	.L153:
 826:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2313              		.loc 1 826 0
 2314 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2315 02b6 012B     		cmp	r3, #1
 2316 02b8 33D1     		bne	.L157
 827:..\src/interruptions.c ****                     }
 2317              		.loc 1 827 0
 2318 02ba BB68     		ldr	r3, [r7, #8]
 2319 02bc 1B68     		ldr	r3, [r3]
 2320 02be 044A     		ldr	r2, .L158
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 58


 2321 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2322 02c4 5208     		lsrs	r2, r2, #1
 2323 02c6 92B2     		uxth	r2, r2
 2324 02c8 9A1A     		subs	r2, r3, r2
 2325 02ca BB68     		ldr	r3, [r7, #8]
 2326 02cc 1A60     		str	r2, [r3]
 814:..\src/interruptions.c ****                     if (motor_idx == 1){
 2327              		.loc 1 814 0
 2328 02ce 28E0     		b	.L157
 2329              	.L159:
 2330              		.align	2
 2331              	.L158:
 2332 02d0 00000000 		.word	c_mem
 2333 02d4 00000000 		.word	g_adc_meas
 2334 02d8 00000000 		.word	g_meas
 2335              	.L148:
 833:..\src/interruptions.c ****                     if (motor_idx == 0){
 2336              		.loc 1 833 0
 2337 02dc 3B69     		ldr	r3, [r7, #16]
 2338 02de 002B     		cmp	r3, #0
 2339 02e0 20DD     		ble	.L156
 834:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2340              		.loc 1 834 0
 2341 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2342 02e4 002B     		cmp	r3, #0
 2343 02e6 08D1     		bne	.L154
 835:..\src/interruptions.c ****                     }
 2344              		.loc 1 835 0
 2345 02e8 BB68     		ldr	r3, [r7, #8]
 2346 02ea 1A68     		ldr	r2, [r3]
 2347 02ec 104B     		ldr	r3, .L160
 2348 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2349 02f2 5B00     		lsls	r3, r3, #1
 2350 02f4 D21A     		subs	r2, r2, r3
 2351 02f6 BB68     		ldr	r3, [r7, #8]
 2352 02f8 1A60     		str	r2, [r3]
 2353              	.L154:
 837:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2354              		.loc 1 837 0
 2355 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2356 02fc 012B     		cmp	r3, #1
 2357 02fe 08D1     		bne	.L155
 838:..\src/interruptions.c ****                     }
 2358              		.loc 1 838 0
 2359 0300 BB68     		ldr	r3, [r7, #8]
 2360 0302 1A68     		ldr	r2, [r3]
 2361 0304 0A4B     		ldr	r3, .L160
 2362 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2363 030a 5B00     		lsls	r3, r3, #1
 2364 030c D21A     		subs	r2, r2, r3
 2365 030e BB68     		ldr	r3, [r7, #8]
 2366 0310 1A60     		str	r2, [r3]
 2367              	.L155:
 841:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2368              		.loc 1 841 0
 2369 0312 BB68     		ldr	r3, [r7, #8]
 2370 0314 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 59


 2371 0316 002B     		cmp	r3, #0
 2372 0318 04DA     		bge	.L156
 842:..\src/interruptions.c ****                     }
 2373              		.loc 1 842 0
 2374 031a BB68     		ldr	r3, [r7, #8]
 2375 031c 0022     		movs	r2, #0
 2376 031e 1A60     		str	r2, [r3]
 2377              	.LBE7:
 2378              		.loc 1 848 0
 2379 0320 00E0     		b	.L156
 2380              	.L157:
 2381              	.LBB8:
 814:..\src/interruptions.c ****                     if (motor_idx == 1){
 2382              		.loc 1 814 0
 2383 0322 00BF     		nop
 2384              	.L156:
 2385              	.LBE8:
 2386              		.loc 1 848 0
 2387 0324 00BF     		nop
 2388 0326 2437     		adds	r7, r7, #36
 2389              		.cfi_def_cfa_offset 4
 2390 0328 BD46     		mov	sp, r7
 2391              		.cfi_def_cfa_register 13
 2392              		@ sp needed
 2393 032a 80BC     		pop	{r7}
 2394              		.cfi_restore 7
 2395              		.cfi_def_cfa_offset 0
 2396 032c 7047     		bx	lr
 2397              	.L161:
 2398 032e 00BF     		.align	2
 2399              	.L160:
 2400 0330 00000000 		.word	c_mem
 2401              		.cfi_endproc
 2402              	.LFE69:
 2403              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2404              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2405              		.align	2
 2406              		.global	compute_SoftHand_2_motors_emg_reference
 2407              		.thumb
 2408              		.thumb_func
 2409              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2410              	compute_SoftHand_2_motors_emg_reference:
 2411              	.LFB70:
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c **** 
 851:..\src/interruptions.c **** //==============================================================================
 852:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 853:..\src/interruptions.c **** //==============================================================================
 854:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 855:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2412              		.loc 1 855 0
 2413              		.cfi_startproc
 2414              		@ args = 4, pretend = 0, frame = 16
 2415              		@ frame_needed = 1, uses_anonymous_args = 0
 2416 0000 80B5     		push	{r7, lr}
 2417              		.cfi_def_cfa_offset 8
 2418              		.cfi_offset 7, -8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 60


 2419              		.cfi_offset 14, -4
 2420 0002 84B0     		sub	sp, sp, #16
 2421              		.cfi_def_cfa_offset 24
 2422 0004 00AF     		add	r7, sp, #0
 2423              		.cfi_def_cfa_register 7
 2424 0006 B960     		str	r1, [r7, #8]
 2425 0008 7A60     		str	r2, [r7, #4]
 2426 000a 3B60     		str	r3, [r7]
 2427 000c 0346     		mov	r3, r0
 2428 000e FB73     		strb	r3, [r7, #15]
 856:..\src/interruptions.c ****     
 857:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 858:..\src/interruptions.c ****     static uint8 fsm_state;     
 859:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2429              		.loc 1 859 0
 2430 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2431 0012 002B     		cmp	r3, #0
 2432 0014 05D1     		bne	.L163
 860:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2433              		.loc 1 860 0
 2434 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2435 001a 0346     		mov	r3, r0
 2436 001c 1A46     		mov	r2, r3
 2437 001e 614B     		ldr	r3, .L178
 2438 0020 1A70     		strb	r2, [r3]
 2439              	.L163:
 861:..\src/interruptions.c ****     }
 862:..\src/interruptions.c ****        
 863:..\src/interruptions.c ****     switch (fsm_state){
 2440              		.loc 1 863 0
 2441 0022 604B     		ldr	r3, .L178
 2442 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2443 0026 032B     		cmp	r3, #3
 2444 0028 00F2B780 		bhi	.L175
 2445 002c 01A2     		adr	r2, .L166
 2446 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2447 0032 00BF     		.p2align 2
 2448              	.L166:
 2449 0034 45000000 		.word	.L165+1
 2450 0038 45000000 		.word	.L165+1
 2451 003c BF000000 		.word	.L167+1
 2452 0040 4F000000 		.word	.L168+1
 2453              		.p2align 1
 2454              	.L165:
 864:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 865:..\src/interruptions.c ****              
 866:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2455              		.loc 1 866 0
 2456 0044 7B68     		ldr	r3, [r7, #4]
 2457 0046 1A68     		ldr	r2, [r3]
 2458 0048 BB68     		ldr	r3, [r7, #8]
 2459 004a 1A60     		str	r2, [r3]
 867:..\src/interruptions.c ****     
 868:..\src/interruptions.c ****             break;
 2460              		.loc 1 868 0
 2461 004c A5E0     		b	.L164
 2462              	.L168:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 61


 869:..\src/interruptions.c ****         
 870:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 871:..\src/interruptions.c **** 
 872:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2463              		.loc 1 872 0
 2464 004e 3B68     		ldr	r3, [r7]
 2465 0050 002B     		cmp	r3, #0
 2466 0052 17DD     		ble	.L169
 2467              		.loc 1 872 0 is_stmt 0 discriminator 1
 2468 0054 3A68     		ldr	r2, [r7]
 2469 0056 BB69     		ldr	r3, [r7, #24]
 2470 0058 9A42     		cmp	r2, r3
 2471 005a 13DD     		ble	.L169
 873:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2472              		.loc 1 873 0 is_stmt 1
 2473 005c 7B68     		ldr	r3, [r7, #4]
 2474 005e 1A68     		ldr	r2, [r3]
 2475 0060 514B     		ldr	r3, .L178+4
 2476 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2477 0066 1946     		mov	r1, r3
 2478 0068 3B68     		ldr	r3, [r7]
 2479 006a 03FB01F3 		mul	r3, r3, r1
 2480 006e 9900     		lsls	r1, r3, #2
 2481 0070 4E4B     		ldr	r3, .L178+8
 2482 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2483 0076 C3F58063 		rsb	r3, r3, #1024
 2484 007a 91FBF3F3 		sdiv	r3, r1, r3
 2485 007e 1A44     		add	r2, r2, r3
 2486 0080 BB68     		ldr	r3, [r7, #8]
 2487 0082 1A60     		str	r2, [r3]
 2488              	.L169:
 874:..\src/interruptions.c ****             }
 875:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2489              		.loc 1 875 0
 2490 0084 BB69     		ldr	r3, [r7, #24]
 2491 0086 002B     		cmp	r3, #0
 2492 0088 40F38480 		ble	.L176
 2493              		.loc 1 875 0 is_stmt 0 discriminator 1
 2494 008c BA69     		ldr	r2, [r7, #24]
 2495 008e 3B68     		ldr	r3, [r7]
 2496 0090 9A42     		cmp	r2, r3
 2497 0092 7FDD     		ble	.L176
 876:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2498              		.loc 1 876 0 is_stmt 1
 2499 0094 7B68     		ldr	r3, [r7, #4]
 2500 0096 1A68     		ldr	r2, [r3]
 2501 0098 434B     		ldr	r3, .L178+4
 2502 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2503 009e 1946     		mov	r1, r3
 2504 00a0 BB69     		ldr	r3, [r7, #24]
 2505 00a2 03FB01F3 		mul	r3, r3, r1
 2506 00a6 9900     		lsls	r1, r3, #2
 2507 00a8 404B     		ldr	r3, .L178+8
 2508 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2509 00ae C3F58063 		rsb	r3, r3, #1024
 2510 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2511 00b6 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 62


 2512 00b8 BB68     		ldr	r3, [r7, #8]
 2513 00ba 1A60     		str	r2, [r3]
 877:..\src/interruptions.c ****             }
 878:..\src/interruptions.c ****             
 879:..\src/interruptions.c ****             break;
 2514              		.loc 1 879 0
 2515 00bc 6AE0     		b	.L176
 2516              	.L167:
 880:..\src/interruptions.c ****             
 881:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 882:..\src/interruptions.c ****             
 883:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2517              		.loc 1 883 0
 2518 00be 3B68     		ldr	r3, [r7]
 2519 00c0 002B     		cmp	r3, #0
 2520 00c2 31DD     		ble	.L171
 2521              		.loc 1 883 0 is_stmt 0 discriminator 1
 2522 00c4 3A68     		ldr	r2, [r7]
 2523 00c6 BB69     		ldr	r3, [r7, #24]
 2524 00c8 9A42     		cmp	r2, r3
 2525 00ca 2DDD     		ble	.L171
 884:..\src/interruptions.c ****                 if (motor_idx == 0){
 2526              		.loc 1 884 0 is_stmt 1
 2527 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2528 00ce 002B     		cmp	r3, #0
 2529 00d0 13D1     		bne	.L172
 885:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2530              		.loc 1 885 0
 2531 00d2 7B68     		ldr	r3, [r7, #4]
 2532 00d4 1A68     		ldr	r2, [r3]
 2533 00d6 344B     		ldr	r3, .L178+4
 2534 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2535 00dc 1946     		mov	r1, r3
 2536 00de 3B68     		ldr	r3, [r7]
 2537 00e0 03FB01F3 		mul	r3, r3, r1
 2538 00e4 9900     		lsls	r1, r3, #2
 2539 00e6 314B     		ldr	r3, .L178+8
 2540 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2541 00ec C3F58063 		rsb	r3, r3, #1024
 2542 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2543 00f4 1A44     		add	r2, r2, r3
 2544 00f6 BB68     		ldr	r3, [r7, #8]
 2545 00f8 1A60     		str	r2, [r3]
 2546              	.L172:
 886:..\src/interruptions.c ****                 }
 887:..\src/interruptions.c ****                 if (motor_idx == 1){
 2547              		.loc 1 887 0
 2548 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2549 00fc 012B     		cmp	r3, #1
 2550 00fe 13D1     		bne	.L171
 888:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2551              		.loc 1 888 0
 2552 0100 7B68     		ldr	r3, [r7, #4]
 2553 0102 1A68     		ldr	r2, [r3]
 2554 0104 284B     		ldr	r3, .L178+4
 2555 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2556 010a 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 63


 2557 010c 3B68     		ldr	r3, [r7]
 2558 010e 03FB01F3 		mul	r3, r3, r1
 2559 0112 9900     		lsls	r1, r3, #2
 2560 0114 254B     		ldr	r3, .L178+8
 2561 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2562 011a C3F58063 		rsb	r3, r3, #1024
 2563 011e 91FBF3F3 		sdiv	r3, r1, r3
 2564 0122 D21A     		subs	r2, r2, r3
 2565 0124 BB68     		ldr	r3, [r7, #8]
 2566 0126 1A60     		str	r2, [r3]
 2567              	.L171:
 889:..\src/interruptions.c ****                 }   
 890:..\src/interruptions.c ****             }
 891:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2568              		.loc 1 891 0
 2569 0128 BB69     		ldr	r3, [r7, #24]
 2570 012a 002B     		cmp	r3, #0
 2571 012c 34DD     		ble	.L177
 2572              		.loc 1 891 0 is_stmt 0 discriminator 1
 2573 012e BA69     		ldr	r2, [r7, #24]
 2574 0130 3B68     		ldr	r3, [r7]
 2575 0132 9A42     		cmp	r2, r3
 2576 0134 30DD     		ble	.L177
 892:..\src/interruptions.c ****                 if (motor_idx == 0){
 2577              		.loc 1 892 0 is_stmt 1
 2578 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2579 0138 002B     		cmp	r3, #0
 2580 013a 13D1     		bne	.L174
 893:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2581              		.loc 1 893 0
 2582 013c 7B68     		ldr	r3, [r7, #4]
 2583 013e 1A68     		ldr	r2, [r3]
 2584 0140 194B     		ldr	r3, .L178+4
 2585 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2586 0146 1946     		mov	r1, r3
 2587 0148 BB69     		ldr	r3, [r7, #24]
 2588 014a 03FB01F3 		mul	r3, r3, r1
 2589 014e 9900     		lsls	r1, r3, #2
 2590 0150 164B     		ldr	r3, .L178+8
 2591 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2592 0156 C3F58063 		rsb	r3, r3, #1024
 2593 015a 91FBF3F3 		sdiv	r3, r1, r3
 2594 015e D21A     		subs	r2, r2, r3
 2595 0160 BB68     		ldr	r3, [r7, #8]
 2596 0162 1A60     		str	r2, [r3]
 2597              	.L174:
 894:..\src/interruptions.c ****                 }
 895:..\src/interruptions.c ****                 if (motor_idx == 1){
 2598              		.loc 1 895 0
 2599 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2600 0166 012B     		cmp	r3, #1
 2601 0168 16D1     		bne	.L177
 896:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2602              		.loc 1 896 0
 2603 016a 7B68     		ldr	r3, [r7, #4]
 2604 016c 1A68     		ldr	r2, [r3]
 2605 016e 0E4B     		ldr	r3, .L178+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 64


 2606 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2607 0174 1946     		mov	r1, r3
 2608 0176 BB69     		ldr	r3, [r7, #24]
 2609 0178 03FB01F3 		mul	r3, r3, r1
 2610 017c 9900     		lsls	r1, r3, #2
 2611 017e 0B4B     		ldr	r3, .L178+8
 2612 0180 B3F8F231 		ldrh	r3, [r3, #498]
 2613 0184 C3F58063 		rsb	r3, r3, #1024
 2614 0188 91FBF3F3 		sdiv	r3, r1, r3
 2615 018c 1A44     		add	r2, r2, r3
 2616 018e BB68     		ldr	r3, [r7, #8]
 2617 0190 1A60     		str	r2, [r3]
 897:..\src/interruptions.c ****                 }
 898:..\src/interruptions.c ****             }
 899:..\src/interruptions.c ****             
 900:..\src/interruptions.c ****             break;
 2618              		.loc 1 900 0
 2619 0192 01E0     		b	.L177
 2620              	.L176:
 879:..\src/interruptions.c ****             
 2621              		.loc 1 879 0
 2622 0194 00BF     		nop
 2623 0196 00E0     		b	.L175
 2624              	.L177:
 2625              		.loc 1 900 0
 2626 0198 00BF     		nop
 2627              	.L164:
 2628              	.L175:
 901:..\src/interruptions.c ****     }
 902:..\src/interruptions.c ****  
 903:..\src/interruptions.c **** }
 2629              		.loc 1 903 0
 2630 019a 00BF     		nop
 2631 019c 1037     		adds	r7, r7, #16
 2632              		.cfi_def_cfa_offset 8
 2633 019e BD46     		mov	sp, r7
 2634              		.cfi_def_cfa_register 13
 2635              		@ sp needed
 2636 01a0 80BD     		pop	{r7, pc}
 2637              	.L179:
 2638 01a2 00BF     		.align	2
 2639              	.L178:
 2640 01a4 8E000000 		.word	fsm_state.10298
 2641 01a8 00000000 		.word	g_mem
 2642 01ac 00000000 		.word	c_mem
 2643              		.cfi_endproc
 2644              	.LFE70:
 2645              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 2646              		.section	.text.motor_control_SH,"ax",%progbits
 2647              		.align	2
 2648              		.global	motor_control_SH
 2649              		.thumb
 2650              		.thumb_func
 2651              		.type	motor_control_SH, %function
 2652              	motor_control_SH:
 2653              	.LFB71:
 904:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 65


 905:..\src/interruptions.c **** //==============================================================================
 906:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 907:..\src/interruptions.c **** //==============================================================================
 908:..\src/interruptions.c **** void motor_control_SH() {
 2654              		.loc 1 908 0
 2655              		.cfi_startproc
 2656              		@ args = 0, pretend = 0, frame = 80
 2657              		@ frame_needed = 1, uses_anonymous_args = 0
 2658 0000 80B5     		push	{r7, lr}
 2659              		.cfi_def_cfa_offset 8
 2660              		.cfi_offset 7, -8
 2661              		.cfi_offset 14, -4
 2662 0002 94B0     		sub	sp, sp, #80
 2663              		.cfi_def_cfa_offset 88
 2664 0004 00AF     		add	r7, sp, #0
 2665              		.cfi_def_cfa_register 7
 909:..\src/interruptions.c **** 
 910:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2666              		.loc 1 910 0
 2667 0006 0023     		movs	r3, #0
 2668 0008 FB64     		str	r3, [r7, #76]
 911:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 912:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 913:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 914:..\src/interruptions.c ****  
 915:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 2669              		.loc 1 915 0
 2670 000a 0023     		movs	r3, #0
 2671 000c 87F84730 		strb	r3, [r7, #71]
 916:..\src/interruptions.c ****     
 917:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 2672              		.loc 1 917 0
 2673 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 2674 0014 1346     		mov	r3, r2
 2675 0016 DB00     		lsls	r3, r3, #3
 2676 0018 9B1A     		subs	r3, r3, r2
 2677 001a 1B01     		lsls	r3, r3, #4
 2678 001c B033     		adds	r3, r3, #176
 2679 001e 9D4A     		ldr	r2, .L241
 2680 0020 1344     		add	r3, r3, r2
 2681 0022 3B64     		str	r3, [r7, #64]
 918:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 2682              		.loc 1 918 0
 2683 0024 3B6C     		ldr	r3, [r7, #64]
 2684 0026 93F86030 		ldrb	r3, [r3, #96]
 2685 002a 87F83F30 		strb	r3, [r7, #63]
 919:..\src/interruptions.c ****     
 920:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 2686              		.loc 1 920 0
 2687 002e 3B6C     		ldr	r3, [r7, #64]
 2688 0030 1B68     		ldr	r3, [r3]
 2689 0032 BB63     		str	r3, [r7, #56]
 921:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 2690              		.loc 1 921 0
 2691 0034 3B6C     		ldr	r3, [r7, #64]
 2692 0036 5B68     		ldr	r3, [r3, #4]
 2693 0038 7B63     		str	r3, [r7, #52]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 66


 922:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 2694              		.loc 1 922 0
 2695 003a 3B6C     		ldr	r3, [r7, #64]
 2696 003c 9B68     		ldr	r3, [r3, #8]
 2697 003e 3B63     		str	r3, [r7, #48]
 923:..\src/interruptions.c **** 
 924:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 2698              		.loc 1 924 0
 2699 0040 3B6C     		ldr	r3, [r7, #64]
 2700 0042 DB68     		ldr	r3, [r3, #12]
 2701 0044 FB62     		str	r3, [r7, #44]
 925:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 2702              		.loc 1 925 0
 2703 0046 3B6C     		ldr	r3, [r7, #64]
 2704 0048 1B69     		ldr	r3, [r3, #16]
 2705 004a BB62     		str	r3, [r7, #40]
 926:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 2706              		.loc 1 926 0
 2707 004c 3B6C     		ldr	r3, [r7, #64]
 2708 004e 5B69     		ldr	r3, [r3, #20]
 2709 0050 7B62     		str	r3, [r7, #36]
 927:..\src/interruptions.c **** 
 928:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 2710              		.loc 1 928 0
 2711 0052 3B6C     		ldr	r3, [r7, #64]
 2712 0054 9B69     		ldr	r3, [r3, #24]
 2713 0056 3B62     		str	r3, [r7, #32]
 929:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 2714              		.loc 1 929 0
 2715 0058 3B6C     		ldr	r3, [r7, #64]
 2716 005a DB69     		ldr	r3, [r3, #28]
 2717 005c FB61     		str	r3, [r7, #28]
 930:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 2718              		.loc 1 930 0
 2719 005e 3B6C     		ldr	r3, [r7, #64]
 2720 0060 1B6A     		ldr	r3, [r3, #32]
 2721 0062 BB61     		str	r3, [r7, #24]
 931:..\src/interruptions.c ****     
 932:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 2722              		.loc 1 932 0
 2723 0064 3B6C     		ldr	r3, [r7, #64]
 2724 0066 5B6A     		ldr	r3, [r3, #36]
 2725 0068 7B61     		str	r3, [r7, #20]
 933:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 2726              		.loc 1 933 0
 2727 006a 3B6C     		ldr	r3, [r7, #64]
 2728 006c 9B6A     		ldr	r3, [r3, #40]
 2729 006e 3B61     		str	r3, [r7, #16]
 934:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 2730              		.loc 1 934 0
 2731 0070 3B6C     		ldr	r3, [r7, #64]
 2732 0072 DB6A     		ldr	r3, [r3, #44]
 2733 0074 FB60     		str	r3, [r7, #12]
 935:..\src/interruptions.c **** 
 936:..\src/interruptions.c ****     // Static Variables
 937:..\src/interruptions.c **** 
 938:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 67


 939:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 940:..\src/interruptions.c ****     
 941:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 942:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 943:..\src/interruptions.c ****     static int32 prev_pwm;
 944:..\src/interruptions.c **** 
 945:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 946:..\src/interruptions.c ****     static uint32 position_counter = 0;
 947:..\src/interruptions.c ****   
 948:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 949:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 2734              		.loc 1 949 0
 2735 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2736 007a 1B01     		lsls	r3, r3, #4
 2737 007c 864A     		ldr	r2, .L241+4
 2738 007e 9918     		adds	r1, r3, r2
 2739 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2740 0084 1B01     		lsls	r3, r3, #4
 2741 0086 854A     		ldr	r2, .L241+8
 2742 0088 1A44     		add	r2, r2, r3
 2743 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2744 008e 1846     		mov	r0, r3
 2745 0090 FFF7FEFF 		bl	compute_reference
 950:..\src/interruptions.c ****      
 951:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 2746              		.loc 1 951 0
 2747 0094 3B6C     		ldr	r3, [r7, #64]
 2748 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2749 009a 032B     		cmp	r3, #3
 2750 009c 00F2F781 		bhi	.L181
 2751 00a0 01A2     		adr	r2, .L183
 2752 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2753 00a6 00BF     		.p2align 2
 2754              	.L183:
 2755 00a8 55020000 		.word	.L182+1
 2756 00ac 49040000 		.word	.L184+1
 2757 00b0 3B030000 		.word	.L185+1
 2758 00b4 B9000000 		.word	.L186+1
 2759              		.p2align 1
 2760              	.L186:
 952:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 953:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 954:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2761              		.loc 1 954 0
 2762 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2763 00bc 764A     		ldr	r2, .L241+4
 2764 00be 1B01     		lsls	r3, r3, #4
 2765 00c0 1344     		add	r3, r3, r2
 2766 00c2 1A68     		ldr	r2, [r3]
 2767 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2768 00c8 7549     		ldr	r1, .L241+12
 2769 00ca 3420     		movs	r0, #52
 2770 00cc 00FB03F3 		mul	r3, r0, r3
 2771 00d0 0B44     		add	r3, r3, r1
 2772 00d2 1B68     		ldr	r3, [r3]
 2773 00d4 D31A     		subs	r3, r2, r3
 2774 00d6 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 68


 955:..\src/interruptions.c **** 
 956:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2775              		.loc 1 956 0
 2776 00d8 724B     		ldr	r3, .L241+16
 2777 00da 1A68     		ldr	r2, [r3]
 2778 00dc BB68     		ldr	r3, [r7, #8]
 2779 00de 1344     		add	r3, r3, r2
 2780 00e0 704A     		ldr	r2, .L241+16
 2781 00e2 1360     		str	r3, [r2]
 957:..\src/interruptions.c **** 
 958:..\src/interruptions.c ****             // error_sum saturation
 959:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2782              		.loc 1 959 0
 2783 00e4 6F4B     		ldr	r3, .L241+16
 2784 00e6 1B68     		ldr	r3, [r3]
 2785 00e8 6F4A     		ldr	r2, .L241+20
 2786 00ea 9342     		cmp	r3, r2
 2787 00ec 03DD     		ble	.L187
 960:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2788              		.loc 1 960 0
 2789 00ee 6D4B     		ldr	r3, .L241+16
 2790 00f0 6D4A     		ldr	r2, .L241+20
 2791 00f2 1A60     		str	r2, [r3]
 2792 00f4 07E0     		b	.L188
 2793              	.L187:
 961:..\src/interruptions.c ****             else {
 962:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2794              		.loc 1 962 0
 2795 00f6 6B4B     		ldr	r3, .L241+16
 2796 00f8 1B68     		ldr	r3, [r3]
 2797 00fa 6C4A     		ldr	r2, .L241+24
 2798 00fc 9342     		cmp	r3, r2
 2799 00fe 02DA     		bge	.L188
 963:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2800              		.loc 1 963 0
 2801 0100 684B     		ldr	r3, .L241+16
 2802 0102 6A4A     		ldr	r2, .L241+24
 2803 0104 1A60     		str	r2, [r3]
 2804              	.L188:
 964:..\src/interruptions.c ****             }
 965:..\src/interruptions.c ****             
 966:..\src/interruptions.c ****             // ------ position PID control ------
 967:..\src/interruptions.c **** 
 968:..\src/interruptions.c ****             i_ref = 0;
 2805              		.loc 1 968 0
 2806 0106 0023     		movs	r3, #0
 2807 0108 BB64     		str	r3, [r7, #72]
 969:..\src/interruptions.c ****             
 970:..\src/interruptions.c ****             // Proportional
 971:..\src/interruptions.c ****             if (k_p_dl != 0)
 2808              		.loc 1 971 0
 2809 010a 3B6A     		ldr	r3, [r7, #32]
 2810 010c 002B     		cmp	r3, #0
 2811 010e 07D0     		beq	.L189
 972:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2812              		.loc 1 972 0
 2813 0110 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 69


 2814 0112 BA68     		ldr	r2, [r7, #8]
 2815 0114 02FB03F3 		mul	r3, r2, r3
 2816 0118 1B14     		asrs	r3, r3, #16
 2817 011a BA6C     		ldr	r2, [r7, #72]
 2818 011c 1344     		add	r3, r3, r2
 2819 011e BB64     		str	r3, [r7, #72]
 2820              	.L189:
 973:..\src/interruptions.c **** 
 974:..\src/interruptions.c ****             // Integral
 975:..\src/interruptions.c ****             if (k_i_dl != 0)
 2821              		.loc 1 975 0
 2822 0120 FB69     		ldr	r3, [r7, #28]
 2823 0122 002B     		cmp	r3, #0
 2824 0124 08D0     		beq	.L190
 976:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2825              		.loc 1 976 0
 2826 0126 5F4B     		ldr	r3, .L241+16
 2827 0128 1B68     		ldr	r3, [r3]
 2828 012a FA69     		ldr	r2, [r7, #28]
 2829 012c 02FB03F3 		mul	r3, r2, r3
 2830 0130 1B14     		asrs	r3, r3, #16
 2831 0132 BA6C     		ldr	r2, [r7, #72]
 2832 0134 1344     		add	r3, r3, r2
 2833 0136 BB64     		str	r3, [r7, #72]
 2834              	.L190:
 977:..\src/interruptions.c **** 
 978:..\src/interruptions.c ****             // Derivative
 979:..\src/interruptions.c ****             if (k_d_dl != 0)
 2835              		.loc 1 979 0
 2836 0138 BB69     		ldr	r3, [r7, #24]
 2837 013a 002B     		cmp	r3, #0
 2838 013c 0AD0     		beq	.L191
 980:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2839              		.loc 1 980 0
 2840 013e 5C4B     		ldr	r3, .L241+28
 2841 0140 1B68     		ldr	r3, [r3]
 2842 0142 BA68     		ldr	r2, [r7, #8]
 2843 0144 D31A     		subs	r3, r2, r3
 2844 0146 BA69     		ldr	r2, [r7, #24]
 2845 0148 02FB03F3 		mul	r3, r2, r3
 2846 014c 1B14     		asrs	r3, r3, #16
 2847 014e BA6C     		ldr	r2, [r7, #72]
 2848 0150 1344     		add	r3, r3, r2
 2849 0152 BB64     		str	r3, [r7, #72]
 2850              	.L191:
 981:..\src/interruptions.c ****                         
 982:..\src/interruptions.c ****             // Update previous position
 983:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2851              		.loc 1 983 0
 2852 0154 564A     		ldr	r2, .L241+28
 2853 0156 BB68     		ldr	r3, [r7, #8]
 2854 0158 1360     		str	r3, [r2]
 984:..\src/interruptions.c **** 
 985:..\src/interruptions.c ****             // motor direction depends on i_ref
 986:..\src/interruptions.c ****             if (i_ref >= 0)
 2855              		.loc 1 986 0
 2856 015a BB6C     		ldr	r3, [r7, #72]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 70


 2857 015c 002B     		cmp	r3, #0
 2858 015e 03DB     		blt	.L192
 987:..\src/interruptions.c ****                 motor_dir = TRUE;
 2859              		.loc 1 987 0
 2860 0160 544B     		ldr	r3, .L241+32
 2861 0162 0122     		movs	r2, #1
 2862 0164 1A70     		strb	r2, [r3]
 2863 0166 02E0     		b	.L193
 2864              	.L192:
 988:..\src/interruptions.c ****             else
 989:..\src/interruptions.c ****                 motor_dir = FALSE;
 2865              		.loc 1 989 0
 2866 0168 524B     		ldr	r3, .L241+32
 2867 016a 0022     		movs	r2, #0
 2868 016c 1A70     		strb	r2, [r3]
 2869              	.L193:
 990:..\src/interruptions.c **** 
 991:..\src/interruptions.c ****             // saturate max current
 992:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2870              		.loc 1 992 0
 2871 016e 3B6C     		ldr	r3, [r7, #64]
 2872 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 2873 0174 1A46     		mov	r2, r3
 2874 0176 BB6C     		ldr	r3, [r7, #72]
 2875 0178 9A42     		cmp	r2, r3
 2876 017a 04DA     		bge	.L194
 993:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2877              		.loc 1 993 0
 2878 017c 3B6C     		ldr	r3, [r7, #64]
 2879 017e B3F95C30 		ldrsh	r3, [r3, #92]
 2880 0182 BB64     		str	r3, [r7, #72]
 2881 0184 0BE0     		b	.L195
 2882              	.L194:
 994:..\src/interruptions.c ****             else {
 995:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2883              		.loc 1 995 0
 2884 0186 3B6C     		ldr	r3, [r7, #64]
 2885 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 2886 018c 5A42     		negs	r2, r3
 2887 018e BB6C     		ldr	r3, [r7, #72]
 2888 0190 9A42     		cmp	r2, r3
 2889 0192 04DD     		ble	.L195
 996:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2890              		.loc 1 996 0
 2891 0194 3B6C     		ldr	r3, [r7, #64]
 2892 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 2893 019a 5B42     		negs	r3, r3
 2894 019c BB64     		str	r3, [r7, #72]
 2895              	.L195:
 997:..\src/interruptions.c ****         	}
 998:..\src/interruptions.c **** 
 999:..\src/interruptions.c ****             // current error and curr error sum
1000:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2896              		.loc 1 1000 0
 2897 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2898 01a2 3F4A     		ldr	r2, .L241+12
 2899 01a4 3421     		movs	r1, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 71


 2900 01a6 01FB03F3 		mul	r3, r1, r3
 2901 01aa 1344     		add	r3, r3, r2
 2902 01ac 0C33     		adds	r3, r3, #12
 2903 01ae 1B68     		ldr	r3, [r3]
 2904 01b0 BA6C     		ldr	r2, [r7, #72]
 2905 01b2 D31A     		subs	r3, r2, r3
 2906 01b4 7B60     		str	r3, [r7, #4]
1001:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2907              		.loc 1 1001 0
 2908 01b6 404B     		ldr	r3, .L241+36
 2909 01b8 1A68     		ldr	r2, [r3]
 2910 01ba 7B68     		ldr	r3, [r7, #4]
 2911 01bc 1344     		add	r3, r3, r2
 2912 01be 3E4A     		ldr	r2, .L241+36
 2913 01c0 1360     		str	r3, [r2]
1002:..\src/interruptions.c ****             
1003:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2914              		.loc 1 1003 0
 2915 01c2 3D4B     		ldr	r3, .L241+36
 2916 01c4 1B68     		ldr	r3, [r3]
 2917 01c6 3D4A     		ldr	r2, .L241+40
 2918 01c8 9342     		cmp	r3, r2
 2919 01ca 03DD     		ble	.L196
1004:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2920              		.loc 1 1004 0
 2921 01cc 3A4B     		ldr	r3, .L241+36
 2922 01ce 3B4A     		ldr	r2, .L241+40
 2923 01d0 1A60     		str	r2, [r3]
 2924 01d2 07E0     		b	.L197
 2925              	.L196:
1005:..\src/interruptions.c ****             else {
1006:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2926              		.loc 1 1006 0
 2927 01d4 384B     		ldr	r3, .L241+36
 2928 01d6 1B68     		ldr	r3, [r3]
 2929 01d8 394A     		ldr	r2, .L241+44
 2930 01da 9342     		cmp	r3, r2
 2931 01dc 02DA     		bge	.L197
1007:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2932              		.loc 1 1007 0
 2933 01de 364B     		ldr	r3, .L241+36
 2934 01e0 374A     		ldr	r2, .L241+44
 2935 01e2 1A60     		str	r2, [r3]
 2936              	.L197:
1008:..\src/interruptions.c ****             }
1009:..\src/interruptions.c **** 
1010:..\src/interruptions.c ****             // ----- current PID control -----
1011:..\src/interruptions.c **** 
1012:..\src/interruptions.c ****             pwm_input = 0;
 2937              		.loc 1 1012 0
 2938 01e4 0023     		movs	r3, #0
 2939 01e6 FB64     		str	r3, [r7, #76]
1013:..\src/interruptions.c **** 
1014:..\src/interruptions.c ****             // Proportional
1015:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2940              		.loc 1 1015 0
 2941 01e8 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 72


 2942 01ea 002B     		cmp	r3, #0
 2943 01ec 07D0     		beq	.L198
1016:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2944              		.loc 1 1016 0
 2945 01ee 7B69     		ldr	r3, [r7, #20]
 2946 01f0 7A68     		ldr	r2, [r7, #4]
 2947 01f2 02FB03F3 		mul	r3, r2, r3
 2948 01f6 1B14     		asrs	r3, r3, #16
 2949 01f8 FA6C     		ldr	r2, [r7, #76]
 2950 01fa 1344     		add	r3, r3, r2
 2951 01fc FB64     		str	r3, [r7, #76]
 2952              	.L198:
1017:..\src/interruptions.c **** 
1018:..\src/interruptions.c ****             // Integral
1019:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2953              		.loc 1 1019 0
 2954 01fe 3B69     		ldr	r3, [r7, #16]
 2955 0200 002B     		cmp	r3, #0
 2956 0202 08D0     		beq	.L199
1020:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2957              		.loc 1 1020 0
 2958 0204 2C4B     		ldr	r3, .L241+36
 2959 0206 1B68     		ldr	r3, [r3]
 2960 0208 3A69     		ldr	r2, [r7, #16]
 2961 020a 02FB03F3 		mul	r3, r2, r3
 2962 020e 1B14     		asrs	r3, r3, #16
 2963 0210 FA6C     		ldr	r2, [r7, #76]
 2964 0212 1344     		add	r3, r3, r2
 2965 0214 FB64     		str	r3, [r7, #76]
 2966              	.L199:
1021:..\src/interruptions.c **** 
1022:..\src/interruptions.c ****             // Derivative
1023:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2967              		.loc 1 1023 0
 2968 0216 FB68     		ldr	r3, [r7, #12]
 2969 0218 002B     		cmp	r3, #0
 2970 021a 0AD0     		beq	.L200
1024:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2971              		.loc 1 1024 0
 2972 021c 294B     		ldr	r3, .L241+48
 2973 021e 1B68     		ldr	r3, [r3]
 2974 0220 7A68     		ldr	r2, [r7, #4]
 2975 0222 D31A     		subs	r3, r2, r3
 2976 0224 FA68     		ldr	r2, [r7, #12]
 2977 0226 02FB03F3 		mul	r3, r2, r3
 2978 022a 1B14     		asrs	r3, r3, #16
 2979 022c FA6C     		ldr	r2, [r7, #76]
 2980 022e 1344     		add	r3, r3, r2
 2981 0230 FB64     		str	r3, [r7, #76]
 2982              	.L200:
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****             // pwm_input saturation
1027:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 2983              		.loc 1 1027 0
 2984 0232 FB6C     		ldr	r3, [r7, #76]
 2985 0234 13F1640F 		cmn	r3, #100
 2986 0238 03DA     		bge	.L201
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 73


1028:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 2987              		.loc 1 1028 0
 2988 023a 6FF06303 		mvn	r3, #99
 2989 023e FB64     		str	r3, [r7, #76]
 2990 0240 04E0     		b	.L202
 2991              	.L201:
1029:..\src/interruptions.c ****             else {
1030:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 2992              		.loc 1 1030 0
 2993 0242 FB6C     		ldr	r3, [r7, #76]
 2994 0244 642B     		cmp	r3, #100
 2995 0246 01DD     		ble	.L202
1031:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 2996              		.loc 1 1031 0
 2997 0248 6423     		movs	r3, #100
 2998 024a FB64     		str	r3, [r7, #76]
 2999              	.L202:
1032:..\src/interruptions.c ****             }
1033:..\src/interruptions.c **** 
1034:..\src/interruptions.c ****             // Update previous current
1035:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3000              		.loc 1 1035 0
 3001 024c 1D4A     		ldr	r2, .L241+48
 3002 024e 7B68     		ldr	r3, [r7, #4]
 3003 0250 1360     		str	r3, [r2]
1036:..\src/interruptions.c **** 
1037:..\src/interruptions.c ****         break;
 3004              		.loc 1 1037 0
 3005 0252 1CE1     		b	.L181
 3006              	.L182:
1038:..\src/interruptions.c **** 
1039:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1040:..\src/interruptions.c ****         case CONTROL_ANGLE:
1041:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3007              		.loc 1 1041 0
 3008 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3009 0258 0F4A     		ldr	r2, .L241+4
 3010 025a 1B01     		lsls	r3, r3, #4
 3011 025c 1344     		add	r3, r3, r2
 3012 025e 1A68     		ldr	r2, [r3]
 3013 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3014 0264 0E49     		ldr	r1, .L241+12
 3015 0266 3420     		movs	r0, #52
 3016 0268 00FB03F3 		mul	r3, r0, r3
 3017 026c 0B44     		add	r3, r3, r1
 3018 026e 1B68     		ldr	r3, [r3]
 3019 0270 D31A     		subs	r3, r2, r3
 3020 0272 BB60     		str	r3, [r7, #8]
1042:..\src/interruptions.c **** 
1043:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3021              		.loc 1 1043 0
 3022 0274 0B4B     		ldr	r3, .L241+16
 3023 0276 1A68     		ldr	r2, [r3]
 3024 0278 BB68     		ldr	r3, [r7, #8]
 3025 027a 1344     		add	r3, r3, r2
 3026 027c 094A     		ldr	r2, .L241+16
 3027 027e 1360     		str	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 74


1044:..\src/interruptions.c **** 
1045:..\src/interruptions.c ****             // anti-windup (for integral control)
1046:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3028              		.loc 1 1046 0
 3029 0280 084B     		ldr	r3, .L241+16
 3030 0282 1B68     		ldr	r3, [r3]
 3031 0284 B3F57A7F 		cmp	r3, #1000
 3032 0288 1EDD     		ble	.L203
1047:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3033              		.loc 1 1047 0
 3034 028a 064B     		ldr	r3, .L241+16
 3035 028c 4FF47A72 		mov	r2, #1000
 3036 0290 1A60     		str	r2, [r3]
 3037 0292 21E0     		b	.L204
 3038              	.L242:
 3039              		.align	2
 3040              	.L241:
 3041 0294 00000000 		.word	c_mem
 3042 0298 00000000 		.word	g_ref
 3043 029c 00000000 		.word	g_refOld
 3044 02a0 00000000 		.word	g_meas
 3045 02a4 90000000 		.word	pos_error_sum.10325
 3046 02a8 80F0FA02 		.word	50000000
 3047 02ac 800F05FD 		.word	-50000000
 3048 02b0 94000000 		.word	prev_pos_err.10327
 3049 02b4 98000000 		.word	motor_dir.10330
 3050 02b8 9C000000 		.word	curr_error_sum.10326
 3051 02bc A0860100 		.word	100000
 3052 02c0 6079FEFF 		.word	-100000
 3053 02c4 A0000000 		.word	prev_curr_err.10328
 3054              	.L203:
1048:..\src/interruptions.c ****             else {
1049:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3055              		.loc 1 1049 0
 3056 02c8 9D4B     		ldr	r3, .L243
 3057 02ca 1B68     		ldr	r3, [r3]
 3058 02cc 13F57A7F 		cmn	r3, #1000
 3059 02d0 02DA     		bge	.L204
1050:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3060              		.loc 1 1050 0
 3061 02d2 9B4B     		ldr	r3, .L243
 3062 02d4 9B4A     		ldr	r2, .L243+4
 3063 02d6 1A60     		str	r2, [r3]
 3064              	.L204:
1051:..\src/interruptions.c ****             }
1052:..\src/interruptions.c **** 
1053:..\src/interruptions.c ****             // Proportional
1054:..\src/interruptions.c ****             if (k_p != 0) 
 3065              		.loc 1 1054 0
 3066 02d8 BB6B     		ldr	r3, [r7, #56]
 3067 02da 002B     		cmp	r3, #0
 3068 02dc 05D0     		beq	.L205
1055:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3069              		.loc 1 1055 0
 3070 02de BB6B     		ldr	r3, [r7, #56]
 3071 02e0 BA68     		ldr	r2, [r7, #8]
 3072 02e2 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 75


 3073 02e6 1B14     		asrs	r3, r3, #16
 3074 02e8 FB64     		str	r3, [r7, #76]
 3075              	.L205:
1056:..\src/interruptions.c ****             
1057:..\src/interruptions.c **** 
1058:..\src/interruptions.c ****             // Integral
1059:..\src/interruptions.c ****             if (k_i != 0) 
 3076              		.loc 1 1059 0
 3077 02ea 7B6B     		ldr	r3, [r7, #52]
 3078 02ec 002B     		cmp	r3, #0
 3079 02ee 08D0     		beq	.L206
1060:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3080              		.loc 1 1060 0
 3081 02f0 934B     		ldr	r3, .L243
 3082 02f2 1B68     		ldr	r3, [r3]
 3083 02f4 7A6B     		ldr	r2, [r7, #52]
 3084 02f6 02FB03F3 		mul	r3, r2, r3
 3085 02fa 1B14     		asrs	r3, r3, #16
 3086 02fc FA6C     		ldr	r2, [r7, #76]
 3087 02fe 1344     		add	r3, r3, r2
 3088 0300 FB64     		str	r3, [r7, #76]
 3089              	.L206:
1061:..\src/interruptions.c ****             
1062:..\src/interruptions.c **** 
1063:..\src/interruptions.c ****             // Derivative
1064:..\src/interruptions.c ****             if (k_d != 0) 
 3090              		.loc 1 1064 0
 3091 0302 3B6B     		ldr	r3, [r7, #48]
 3092 0304 002B     		cmp	r3, #0
 3093 0306 0AD0     		beq	.L207
1065:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3094              		.loc 1 1065 0
 3095 0308 8F4B     		ldr	r3, .L243+8
 3096 030a 1B68     		ldr	r3, [r3]
 3097 030c BA68     		ldr	r2, [r7, #8]
 3098 030e D31A     		subs	r3, r2, r3
 3099 0310 3A6B     		ldr	r2, [r7, #48]
 3100 0312 02FB03F3 		mul	r3, r2, r3
 3101 0316 1B14     		asrs	r3, r3, #16
 3102 0318 FA6C     		ldr	r2, [r7, #76]
 3103 031a 1344     		add	r3, r3, r2
 3104 031c FB64     		str	r3, [r7, #76]
 3105              	.L207:
1066:..\src/interruptions.c ****             
1067:..\src/interruptions.c **** 
1068:..\src/interruptions.c ****             // Update measure
1069:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3106              		.loc 1 1069 0
 3107 031e 8A4A     		ldr	r2, .L243+8
 3108 0320 BB68     		ldr	r3, [r7, #8]
 3109 0322 1360     		str	r3, [r2]
1070:..\src/interruptions.c **** 
1071:..\src/interruptions.c ****             if (pwm_input > 0)
 3110              		.loc 1 1071 0
 3111 0324 FB6C     		ldr	r3, [r7, #76]
 3112 0326 002B     		cmp	r3, #0
 3113 0328 03DD     		ble	.L208
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 76


1072:..\src/interruptions.c ****                 motor_dir = TRUE;
 3114              		.loc 1 1072 0
 3115 032a 884B     		ldr	r3, .L243+12
 3116 032c 0122     		movs	r2, #1
 3117 032e 1A70     		strb	r2, [r3]
1073:..\src/interruptions.c ****             else
1074:..\src/interruptions.c ****                 motor_dir = FALSE;
1075:..\src/interruptions.c **** 
1076:..\src/interruptions.c ****         break;
 3118              		.loc 1 1076 0
 3119 0330 ADE0     		b	.L181
 3120              	.L208:
1074:..\src/interruptions.c **** 
 3121              		.loc 1 1074 0
 3122 0332 864B     		ldr	r3, .L243+12
 3123 0334 0022     		movs	r2, #0
 3124 0336 1A70     		strb	r2, [r3]
 3125              		.loc 1 1076 0
 3126 0338 A9E0     		b	.L181
 3127              	.L185:
1077:..\src/interruptions.c **** 
1078:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1079:..\src/interruptions.c ****         case CONTROL_CURRENT:
1080:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3128              		.loc 1 1080 0
 3129 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3130 033e 844A     		ldr	r2, .L243+16
 3131 0340 1B01     		lsls	r3, r3, #4
 3132 0342 1344     		add	r3, r3, r2
 3133 0344 0C33     		adds	r3, r3, #12
 3134 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3135 0348 002B     		cmp	r3, #0
 3136 034a 00F09D80 		beq	.L239
 3137              		.loc 1 1080 0 is_stmt 0 discriminator 1
 3138 034e 814B     		ldr	r3, .L243+20
 3139 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3140 0352 002B     		cmp	r3, #0
 3141 0354 00F09880 		beq	.L239
1081:..\src/interruptions.c ****                 
1082:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3142              		.loc 1 1082 0 is_stmt 1
 3143 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3144 035c 7C4A     		ldr	r2, .L243+16
 3145 035e 1B01     		lsls	r3, r3, #4
 3146 0360 1344     		add	r3, r3, r2
 3147 0362 0433     		adds	r3, r3, #4
 3148 0364 1B68     		ldr	r3, [r3]
 3149 0366 BB64     		str	r3, [r7, #72]
1083:..\src/interruptions.c **** 
1084:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3150              		.loc 1 1084 0
 3151 0368 3B6C     		ldr	r3, [r7, #64]
 3152 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3153 036e 1A46     		mov	r2, r3
 3154 0370 BB6C     		ldr	r3, [r7, #72]
 3155 0372 9A42     		cmp	r2, r3
 3156 0374 04DA     		bge	.L211
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 77


1085:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3157              		.loc 1 1085 0
 3158 0376 3B6C     		ldr	r3, [r7, #64]
 3159 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3160 037c BB64     		str	r3, [r7, #72]
 3161 037e 0BE0     		b	.L212
 3162              	.L211:
1086:..\src/interruptions.c ****                 else {
1087:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3163              		.loc 1 1087 0
 3164 0380 3B6C     		ldr	r3, [r7, #64]
 3165 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3166 0386 5A42     		negs	r2, r3
 3167 0388 BB6C     		ldr	r3, [r7, #72]
 3168 038a 9A42     		cmp	r2, r3
 3169 038c 04DD     		ble	.L212
1088:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3170              		.loc 1 1088 0
 3171 038e 3B6C     		ldr	r3, [r7, #64]
 3172 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3173 0394 5B42     		negs	r3, r3
 3174 0396 BB64     		str	r3, [r7, #72]
 3175              	.L212:
1089:..\src/interruptions.c ****                 }
1090:..\src/interruptions.c ****                 
1091:..\src/interruptions.c ****                 // current error
1092:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3176              		.loc 1 1092 0
 3177 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3178 039c 6E4A     		ldr	r2, .L243+24
 3179 039e 3421     		movs	r1, #52
 3180 03a0 01FB03F3 		mul	r3, r1, r3
 3181 03a4 1344     		add	r3, r3, r2
 3182 03a6 0C33     		adds	r3, r3, #12
 3183 03a8 1B68     		ldr	r3, [r3]
 3184 03aa BA6C     		ldr	r2, [r7, #72]
 3185 03ac D31A     		subs	r3, r2, r3
 3186 03ae 7B60     		str	r3, [r7, #4]
1093:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3187              		.loc 1 1093 0
 3188 03b0 6A4B     		ldr	r3, .L243+28
 3189 03b2 1A68     		ldr	r2, [r3]
 3190 03b4 7B68     		ldr	r3, [r7, #4]
 3191 03b6 1344     		add	r3, r3, r2
 3192 03b8 684A     		ldr	r2, .L243+28
 3193 03ba 1360     		str	r3, [r2]
1094:..\src/interruptions.c ****                 
1095:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3194              		.loc 1 1095 0
 3195 03bc 674B     		ldr	r3, .L243+28
 3196 03be 1B68     		ldr	r3, [r3]
 3197 03c0 674A     		ldr	r2, .L243+32
 3198 03c2 9342     		cmp	r3, r2
 3199 03c4 03DD     		ble	.L213
1096:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3200              		.loc 1 1096 0
 3201 03c6 654B     		ldr	r3, .L243+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 78


 3202 03c8 654A     		ldr	r2, .L243+32
 3203 03ca 1A60     		str	r2, [r3]
 3204 03cc 07E0     		b	.L214
 3205              	.L213:
1097:..\src/interruptions.c ****                 else {
1098:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3206              		.loc 1 1098 0
 3207 03ce 634B     		ldr	r3, .L243+28
 3208 03d0 1B68     		ldr	r3, [r3]
 3209 03d2 644A     		ldr	r2, .L243+36
 3210 03d4 9342     		cmp	r3, r2
 3211 03d6 02DA     		bge	.L214
1099:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3212              		.loc 1 1099 0
 3213 03d8 604B     		ldr	r3, .L243+28
 3214 03da 624A     		ldr	r2, .L243+36
 3215 03dc 1A60     		str	r2, [r3]
 3216              	.L214:
1100:..\src/interruptions.c ****                 }
1101:..\src/interruptions.c **** 
1102:..\src/interruptions.c ****                 pwm_input = 0;
 3217              		.loc 1 1102 0
 3218 03de 0023     		movs	r3, #0
 3219 03e0 FB64     		str	r3, [r7, #76]
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****                 // Proportional
1105:..\src/interruptions.c ****                 if (k_p_c != 0)
 3220              		.loc 1 1105 0
 3221 03e2 FB6A     		ldr	r3, [r7, #44]
 3222 03e4 002B     		cmp	r3, #0
 3223 03e6 07D0     		beq	.L215
1106:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3224              		.loc 1 1106 0
 3225 03e8 FB6A     		ldr	r3, [r7, #44]
 3226 03ea 7A68     		ldr	r2, [r7, #4]
 3227 03ec 02FB03F3 		mul	r3, r2, r3
 3228 03f0 1B14     		asrs	r3, r3, #16
 3229 03f2 FA6C     		ldr	r2, [r7, #76]
 3230 03f4 1344     		add	r3, r3, r2
 3231 03f6 FB64     		str	r3, [r7, #76]
 3232              	.L215:
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****                 // Integral
1109:..\src/interruptions.c ****                 if (k_i_c != 0)
 3233              		.loc 1 1109 0
 3234 03f8 BB6A     		ldr	r3, [r7, #40]
 3235 03fa 002B     		cmp	r3, #0
 3236 03fc 08D0     		beq	.L216
1110:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3237              		.loc 1 1110 0
 3238 03fe 574B     		ldr	r3, .L243+28
 3239 0400 1B68     		ldr	r3, [r3]
 3240 0402 BA6A     		ldr	r2, [r7, #40]
 3241 0404 02FB03F3 		mul	r3, r2, r3
 3242 0408 1B14     		asrs	r3, r3, #16
 3243 040a FA6C     		ldr	r2, [r7, #76]
 3244 040c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 79


 3245 040e FB64     		str	r3, [r7, #76]
 3246              	.L216:
1111:..\src/interruptions.c **** 
1112:..\src/interruptions.c ****                 // Derivative
1113:..\src/interruptions.c ****                 if (k_d_c != 0)
 3247              		.loc 1 1113 0
 3248 0410 7B6A     		ldr	r3, [r7, #36]
 3249 0412 002B     		cmp	r3, #0
 3250 0414 0AD0     		beq	.L217
1114:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3251              		.loc 1 1114 0
 3252 0416 544B     		ldr	r3, .L243+40
 3253 0418 1B68     		ldr	r3, [r3]
 3254 041a 7A68     		ldr	r2, [r7, #4]
 3255 041c D31A     		subs	r3, r2, r3
 3256 041e 7A6A     		ldr	r2, [r7, #36]
 3257 0420 02FB03F3 		mul	r3, r2, r3
 3258 0424 1B14     		asrs	r3, r3, #16
 3259 0426 FA6C     		ldr	r2, [r7, #76]
 3260 0428 1344     		add	r3, r3, r2
 3261 042a FB64     		str	r3, [r7, #76]
 3262              	.L217:
1115:..\src/interruptions.c ****                 
1116:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3263              		.loc 1 1116 0
 3264 042c 4E4A     		ldr	r2, .L243+40
 3265 042e 7B68     		ldr	r3, [r7, #4]
 3266 0430 1360     		str	r3, [r2]
1117:..\src/interruptions.c ****                 
1118:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3267              		.loc 1 1118 0
 3268 0432 FB6C     		ldr	r3, [r7, #76]
 3269 0434 002B     		cmp	r3, #0
 3270 0436 03DB     		blt	.L218
1119:..\src/interruptions.c ****                     motor_dir = TRUE;
 3271              		.loc 1 1119 0
 3272 0438 444B     		ldr	r3, .L243+12
 3273 043a 0122     		movs	r2, #1
 3274 043c 1A70     		strb	r2, [r3]
1120:..\src/interruptions.c ****                 else
1121:..\src/interruptions.c ****                     motor_dir = FALSE;
1122:..\src/interruptions.c ****             }
1123:..\src/interruptions.c ****         break;
 3275              		.loc 1 1123 0
 3276 043e 23E0     		b	.L239
 3277              	.L218:
1121:..\src/interruptions.c ****             }
 3278              		.loc 1 1121 0
 3279 0440 424B     		ldr	r3, .L243+12
 3280 0442 0022     		movs	r2, #0
 3281 0444 1A70     		strb	r2, [r3]
 3282              		.loc 1 1123 0
 3283 0446 1FE0     		b	.L239
 3284              	.L184:
1124:..\src/interruptions.c ****         
1125:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1126:..\src/interruptions.c ****         case CONTROL_PWM:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 80


1127:..\src/interruptions.c **** 
1128:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3285              		.loc 1 1128 0
 3286 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3287 044c 404A     		ldr	r2, .L243+16
 3288 044e 1B01     		lsls	r3, r3, #4
 3289 0450 1344     		add	r3, r3, r2
 3290 0452 0833     		adds	r3, r3, #8
 3291 0454 1B68     		ldr	r3, [r3]
 3292 0456 FB64     		str	r3, [r7, #76]
1129:..\src/interruptions.c **** 
1130:..\src/interruptions.c ****             if (pwm_input > 0) 
 3293              		.loc 1 1130 0
 3294 0458 FB6C     		ldr	r3, [r7, #76]
 3295 045a 002B     		cmp	r3, #0
 3296 045c 03DD     		ble	.L219
1131:..\src/interruptions.c ****                 motor_dir = TRUE;
 3297              		.loc 1 1131 0
 3298 045e 3B4B     		ldr	r3, .L243+12
 3299 0460 0122     		movs	r2, #1
 3300 0462 1A70     		strb	r2, [r3]
 3301 0464 02E0     		b	.L220
 3302              	.L219:
1132:..\src/interruptions.c ****             else 
1133:..\src/interruptions.c ****                 motor_dir = FALSE;
 3303              		.loc 1 1133 0
 3304 0466 394B     		ldr	r3, .L243+12
 3305 0468 0022     		movs	r2, #0
 3306 046a 1A70     		strb	r2, [r3]
 3307              	.L220:
1134:..\src/interruptions.c ****             
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****             // pwm_input saturation
1137:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3308              		.loc 1 1137 0
 3309 046c FB6C     		ldr	r3, [r7, #76]
 3310 046e 13F1640F 		cmn	r3, #100
 3311 0472 03DA     		bge	.L221
1138:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3312              		.loc 1 1138 0
 3313 0474 6FF06303 		mvn	r3, #99
 3314 0478 FB64     		str	r3, [r7, #76]
1139:..\src/interruptions.c ****             else {
1140:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1141:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1142:..\src/interruptions.c ****         	}
1143:..\src/interruptions.c **** 
1144:..\src/interruptions.c ****         break;
 3315              		.loc 1 1144 0
 3316 047a 07E0     		b	.L240
 3317              	.L221:
1140:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3318              		.loc 1 1140 0
 3319 047c FB6C     		ldr	r3, [r7, #76]
 3320 047e 642B     		cmp	r3, #100
 3321 0480 04DD     		ble	.L240
1141:..\src/interruptions.c ****         	}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 81


 3322              		.loc 1 1141 0
 3323 0482 6423     		movs	r3, #100
 3324 0484 FB64     		str	r3, [r7, #76]
 3325              		.loc 1 1144 0
 3326 0486 01E0     		b	.L240
 3327              	.L239:
1123:..\src/interruptions.c ****         
 3328              		.loc 1 1123 0
 3329 0488 00BF     		nop
 3330 048a 00E0     		b	.L181
 3331              	.L240:
 3332              		.loc 1 1144 0
 3333 048c 00BF     		nop
 3334              	.L181:
1145:..\src/interruptions.c ****             
1146:..\src/interruptions.c ****     }
1147:..\src/interruptions.c **** 
1148:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1149:..\src/interruptions.c **** 
1150:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3335              		.loc 1 1150 0
 3336 048e FB6C     		ldr	r3, [r7, #76]
 3337 0490 642B     		cmp	r3, #100
 3338 0492 01DD     		ble	.L223
1151:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3339              		.loc 1 1151 0
 3340 0494 6423     		movs	r3, #100
 3341 0496 FB64     		str	r3, [r7, #76]
 3342              	.L223:
1152:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3343              		.loc 1 1152 0
 3344 0498 FB6C     		ldr	r3, [r7, #76]
 3345 049a 13F1640F 		cmn	r3, #100
 3346 049e 02DA     		bge	.L224
1153:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3347              		.loc 1 1153 0
 3348 04a0 6FF06303 		mvn	r3, #99
 3349 04a4 FB64     		str	r3, [r7, #76]
 3350              	.L224:
1154:..\src/interruptions.c **** 
1155:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3351              		.loc 1 1155 0
 3352 04a6 3B6C     		ldr	r3, [r7, #64]
 3353 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3354 04ac 012B     		cmp	r3, #1
 3355 04ae 0DD0     		beq	.L225
1156:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3356              		.loc 1 1156 0
 3357 04b0 FB6C     		ldr	r3, [r7, #76]
 3358 04b2 9B02     		lsls	r3, r3, #10
 3359 04b4 2D4A     		ldr	r2, .L243+44
 3360 04b6 82FB0312 		smull	r1, r2, r2, r3
 3361 04ba 5211     		asrs	r2, r2, #5
 3362 04bc DB17     		asrs	r3, r3, #31
 3363 04be D31A     		subs	r3, r2, r3
 3364 04c0 2B4A     		ldr	r2, .L243+48
 3365 04c2 1288     		ldrh	r2, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 82


 3366 04c4 02FB03F3 		mul	r3, r2, r3
 3367 04c8 9B12     		asrs	r3, r3, #10
 3368 04ca FB64     		str	r3, [r7, #76]
 3369              	.L225:
1157:..\src/interruptions.c ****  
1158:..\src/interruptions.c ****     //// RATE LIMITER ////
1159:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3370              		.loc 1 1159 0
 3371 04cc 294B     		ldr	r3, .L243+52
 3372 04ce 1B68     		ldr	r3, [r3]
 3373 04d0 FA6C     		ldr	r2, [r7, #76]
 3374 04d2 D31A     		subs	r3, r2, r3
 3375 04d4 3A6C     		ldr	r2, [r7, #64]
 3376 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3377 04da 9342     		cmp	r3, r2
 3378 04dc 08DD     		ble	.L226
1160:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3379              		.loc 1 1160 0
 3380 04de 3B6C     		ldr	r3, [r7, #64]
 3381 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3382 04e4 1A46     		mov	r2, r3
 3383 04e6 234B     		ldr	r3, .L243+52
 3384 04e8 1B68     		ldr	r3, [r3]
 3385 04ea 1344     		add	r3, r3, r2
 3386 04ec FB64     		str	r3, [r7, #76]
 3387 04ee 10E0     		b	.L227
 3388              	.L226:
1161:..\src/interruptions.c ****     }
1162:..\src/interruptions.c ****     else {
1163:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3389              		.loc 1 1163 0
 3390 04f0 204B     		ldr	r3, .L243+52
 3391 04f2 1B68     		ldr	r3, [r3]
 3392 04f4 FA6C     		ldr	r2, [r7, #76]
 3393 04f6 D21A     		subs	r2, r2, r3
 3394 04f8 3B6C     		ldr	r3, [r7, #64]
 3395 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3396 04fe 5B42     		negs	r3, r3
 3397 0500 9A42     		cmp	r2, r3
 3398 0502 06DA     		bge	.L227
1164:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3399              		.loc 1 1164 0
 3400 0504 1B4B     		ldr	r3, .L243+52
 3401 0506 1B68     		ldr	r3, [r3]
 3402 0508 3A6C     		ldr	r2, [r7, #64]
 3403 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3404 050e 9B1A     		subs	r3, r3, r2
 3405 0510 FB64     		str	r3, [r7, #76]
 3406              	.L227:
1165:..\src/interruptions.c ****     }
1166:..\src/interruptions.c ****     
1167:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3407              		.loc 1 1167 0
 3408 0512 FB6C     		ldr	r3, [r7, #76]
 3409 0514 642B     		cmp	r3, #100
 3410 0516 01DD     		ble	.L228
1168:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 83


 3411              		.loc 1 1168 0
 3412 0518 6423     		movs	r3, #100
 3413 051a FB64     		str	r3, [r7, #76]
 3414              	.L228:
1169:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3415              		.loc 1 1169 0
 3416 051c FB6C     		ldr	r3, [r7, #76]
 3417 051e 13F1640F 		cmn	r3, #100
 3418 0522 02DA     		bge	.L229
1170:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3419              		.loc 1 1170 0
 3420 0524 6FF06303 		mvn	r3, #99
 3421 0528 FB64     		str	r3, [r7, #76]
 3422              	.L229:
1171:..\src/interruptions.c ****     
1172:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3423              		.loc 1 1172 0
 3424 052a 124A     		ldr	r2, .L243+52
 3425 052c FB6C     		ldr	r3, [r7, #76]
 3426 052e 1360     		str	r3, [r2]
1173:..\src/interruptions.c **** 	
1174:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3427              		.loc 1 1174 0
 3428 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3429 0534 FA6C     		ldr	r2, [r7, #76]
 3430 0536 002A     		cmp	r2, #0
 3431 0538 1EDB     		blt	.L230
 3432              		.loc 1 1174 0 is_stmt 0 discriminator 1
 3433 053a 0121     		movs	r1, #1
 3434 053c 1EE0     		b	.L231
 3435              	.L244:
 3436 053e 00BF     		.align	2
 3437              	.L243:
 3438 0540 90000000 		.word	pos_error_sum.10325
 3439 0544 18FCFFFF 		.word	-1000
 3440 0548 94000000 		.word	prev_pos_err.10327
 3441 054c 98000000 		.word	motor_dir.10330
 3442 0550 00000000 		.word	g_ref
 3443 0554 00000000 		.word	tension_valid
 3444 0558 00000000 		.word	g_meas
 3445 055c 9C000000 		.word	curr_error_sum.10326
 3446 0560 A0860100 		.word	100000
 3447 0564 6079FEFF 		.word	-100000
 3448 0568 A0000000 		.word	prev_curr_err.10328
 3449 056c 1F85EB51 		.word	1374389535
 3450 0570 00000000 		.word	dev_pwm_limit
 3451 0574 A4000000 		.word	prev_pwm.10329
 3452              	.L230:
 3453              		.loc 1 1174 0 discriminator 2
 3454 0578 4FF0FF31 		mov	r1, #-1
 3455              	.L231:
 3456              		.loc 1 1174 0 discriminator 4
 3457 057c 5A4A     		ldr	r2, .L245
 3458 057e D154     		strb	r1, [r2, r3]
1175:..\src/interruptions.c ****     
1176:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3459              		.loc 1 1176 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 84


 3460 0580 3B6C     		ldr	r3, [r7, #64]
 3461 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3462 0586 012B     		cmp	r3, #1
 3463 0588 40F09680 		bne	.L232
1177:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1178:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3464              		.loc 1 1178 0
 3465 058c 3B6C     		ldr	r3, [r7, #64]
 3466 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3467 0592 012B     		cmp	r3, #1
 3468 0594 00F08D80 		beq	.L233
 3469              		.loc 1 1178 0 is_stmt 0 discriminator 1
 3470 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3471 059c 534A     		ldr	r2, .L245+4
 3472 059e 3421     		movs	r1, #52
 3473 05a0 01FB03F3 		mul	r3, r1, r3
 3474 05a4 1344     		add	r3, r3, r2
 3475 05a6 1A68     		ldr	r2, [r3]
 3476 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3477 05ac 5049     		ldr	r1, .L245+8
 3478 05ae 3420     		movs	r0, #52
 3479 05b0 00FB03F3 		mul	r3, r0, r3
 3480 05b4 0B44     		add	r3, r3, r1
 3481 05b6 1B68     		ldr	r3, [r3]
 3482 05b8 D31A     		subs	r3, r2, r3
 3483 05ba 312B     		cmp	r3, #49
 3484 05bc 79DC     		bgt	.L233
1179:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3485              		.loc 1 1179 0 is_stmt 1 discriminator 2
 3486 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3487 05c2 4A4A     		ldr	r2, .L245+4
 3488 05c4 3421     		movs	r1, #52
 3489 05c6 01FB03F3 		mul	r3, r1, r3
 3490 05ca 1344     		add	r3, r3, r2
 3491 05cc 1A68     		ldr	r2, [r3]
 3492 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3493 05d2 4749     		ldr	r1, .L245+8
 3494 05d4 3420     		movs	r0, #52
 3495 05d6 00FB03F3 		mul	r3, r0, r3
 3496 05da 0B44     		add	r3, r3, r1
 3497 05dc 1B68     		ldr	r3, [r3]
 3498 05de D31A     		subs	r3, r2, r3
1178:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3499              		.loc 1 1178 0 discriminator 2
 3500 05e0 13F1310F 		cmn	r3, #49
 3501 05e4 65DB     		blt	.L233
1180:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3502              		.loc 1 1180 0
 3503 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3504 05ea 424A     		ldr	r2, .L245+12
 3505 05ec 1B01     		lsls	r3, r3, #4
 3506 05ee 1344     		add	r3, r3, r2
 3507 05f0 1A68     		ldr	r2, [r3]
 3508 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3509 05f6 4049     		ldr	r1, .L245+16
 3510 05f8 1B01     		lsls	r3, r3, #4
 3511 05fa 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 85


 3512 05fc 1B68     		ldr	r3, [r3]
 3513 05fe D31A     		subs	r3, r2, r3
1179:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3514              		.loc 1 1179 0
 3515 0600 632B     		cmp	r3, #99
 3516 0602 56DC     		bgt	.L233
 3517              		.loc 1 1180 0
 3518 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3519 0608 3A4A     		ldr	r2, .L245+12
 3520 060a 1B01     		lsls	r3, r3, #4
 3521 060c 1344     		add	r3, r3, r2
 3522 060e 1A68     		ldr	r2, [r3]
 3523 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3524 0614 3849     		ldr	r1, .L245+16
 3525 0616 1B01     		lsls	r3, r3, #4
 3526 0618 0B44     		add	r3, r3, r1
 3527 061a 1B68     		ldr	r3, [r3]
 3528 061c D31A     		subs	r3, r2, r3
 3529 061e 13F1630F 		cmn	r3, #99
 3530 0622 46DB     		blt	.L233
1181:..\src/interruptions.c ****             position_counter++;
 3531              		.loc 1 1181 0
 3532 0624 354B     		ldr	r3, .L245+20
 3533 0626 1B68     		ldr	r3, [r3]
 3534 0628 0133     		adds	r3, r3, #1
 3535 062a 344A     		ldr	r2, .L245+20
 3536 062c 1360     		str	r3, [r2]
1182:..\src/interruptions.c ****             
1183:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3537              		.loc 1 1183 0
 3538 062e 334B     		ldr	r3, .L245+20
 3539 0630 1B68     		ldr	r3, [r3]
 3540 0632 F92B     		cmp	r3, #249
 3541 0634 40D9     		bls	.L232
1184:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3542              		.loc 1 1184 0
 3543 0636 3B6C     		ldr	r3, [r7, #64]
 3544 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3545 063c 002B     		cmp	r3, #0
 3546 063e 11D1     		bne	.L235
 3547              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3548 0640 2F4B     		ldr	r3, .L245+24
 3549 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3550 0644 002B     		cmp	r3, #0
 3551 0646 0DD1     		bne	.L235
1185:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3552              		.loc 1 1185 0 is_stmt 1
 3553 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3554 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3555 0650 2749     		ldr	r1, .L245+8
 3556 0652 3420     		movs	r0, #52
 3557 0654 00FB02F2 		mul	r2, r0, r2
 3558 0658 0A44     		add	r2, r2, r1
 3559 065a 1268     		ldr	r2, [r2]
 3560 065c 2949     		ldr	r1, .L245+28
 3561 065e 1B01     		lsls	r3, r3, #4
 3562 0660 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 86


 3563 0662 1A60     		str	r2, [r3]
 3564              	.L235:
1186:..\src/interruptions.c ****                 }
1187:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3565              		.loc 1 1187 0
 3566 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3567 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3568 066c 2049     		ldr	r1, .L245+8
 3569 066e 3420     		movs	r0, #52
 3570 0670 00FB02F2 		mul	r2, r0, r2
 3571 0674 0A44     		add	r2, r2, r1
 3572 0676 1268     		ldr	r2, [r2]
 3573 0678 1F49     		ldr	r1, .L245+16
 3574 067a 1B01     		lsls	r3, r3, #4
 3575 067c 0B44     		add	r3, r3, r1
 3576 067e 1A60     		str	r2, [r3]
1188:..\src/interruptions.c ****                 
1189:..\src/interruptions.c ****                 if (position_counter == 250){
 3577              		.loc 1 1189 0
 3578 0680 1E4B     		ldr	r3, .L245+20
 3579 0682 1B68     		ldr	r3, [r3]
 3580 0684 FA2B     		cmp	r3, #250
 3581 0686 11D1     		bne	.L236
1190:..\src/interruptions.c ****                     // To do only once
1191:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3582              		.loc 1 1191 0
 3583 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3584 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3585 0690 1749     		ldr	r1, .L245+8
 3586 0692 3420     		movs	r0, #52
 3587 0694 00FB02F2 		mul	r2, r0, r2
 3588 0698 0A44     		add	r2, r2, r1
 3589 069a 0C32     		adds	r2, r2, #12
 3590 069c 1268     		ldr	r2, [r2]
 3591 069e 1449     		ldr	r1, .L245+8
 3592 06a0 3420     		movs	r0, #52
 3593 06a2 00FB03F3 		mul	r3, r0, r3
 3594 06a6 0B44     		add	r3, r3, r1
 3595 06a8 1433     		adds	r3, r3, #20
 3596 06aa 1A60     		str	r2, [r3]
 3597              	.L236:
1192:..\src/interruptions.c ****                 }
1193:..\src/interruptions.c ****                 pwm_input = 0;            
 3598              		.loc 1 1193 0
 3599 06ac 0023     		movs	r3, #0
 3600 06ae FB64     		str	r3, [r7, #76]
1183:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3601              		.loc 1 1183 0
 3602 06b0 02E0     		b	.L232
 3603              	.L233:
1194:..\src/interruptions.c ****             }
1195:..\src/interruptions.c ****         }
1196:..\src/interruptions.c ****         else {
1197:..\src/interruptions.c ****             position_counter = 0;
 3604              		.loc 1 1197 0
 3605 06b2 124B     		ldr	r3, .L245+20
 3606 06b4 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 87


 3607 06b6 1A60     		str	r2, [r3]
 3608              	.L232:
1198:..\src/interruptions.c ****         }
1199:..\src/interruptions.c ****     }
1200:..\src/interruptions.c ****     
1201:..\src/interruptions.c ****     if (motor_dir)
 3609              		.loc 1 1201 0
 3610 06b8 134B     		ldr	r3, .L245+32
 3611 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3612 06bc 002B     		cmp	r3, #0
 3613 06be 03D0     		beq	.L237
1202:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3614              		.loc 1 1202 0
 3615 06c0 0120     		movs	r0, #1
 3616 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3617 06c6 02E0     		b	.L238
 3618              	.L237:
1203:..\src/interruptions.c ****     else
1204:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 3619              		.loc 1 1204 0
 3620 06c8 0020     		movs	r0, #0
 3621 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3622              	.L238:
1205:..\src/interruptions.c **** 
1206:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3623              		.loc 1 1206 0
 3624 06ce FB6C     		ldr	r3, [r7, #76]
 3625 06d0 002B     		cmp	r3, #0
 3626 06d2 B8BF     		it	lt
 3627 06d4 5B42     		rsblt	r3, r3, #0
 3628 06d6 DBB2     		uxtb	r3, r3
 3629 06d8 1846     		mov	r0, r3
 3630 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1207:..\src/interruptions.c **** }
 3631              		.loc 1 1207 0
 3632 06de 00BF     		nop
 3633 06e0 5037     		adds	r7, r7, #80
 3634              		.cfi_def_cfa_offset 8
 3635 06e2 BD46     		mov	sp, r7
 3636              		.cfi_def_cfa_register 13
 3637              		@ sp needed
 3638 06e4 80BD     		pop	{r7, pc}
 3639              	.L246:
 3640 06e6 00BF     		.align	2
 3641              	.L245:
 3642 06e8 00000000 		.word	pwm_sign
 3643 06ec 00000000 		.word	g_measOld
 3644 06f0 00000000 		.word	g_meas
 3645 06f4 00000000 		.word	g_refOld
 3646 06f8 00000000 		.word	g_ref
 3647 06fc A8000000 		.word	position_counter.10331
 3648 0700 00000000 		.word	change_ext_ref_flag
 3649 0704 00000000 		.word	g_refNew
 3650 0708 98000000 		.word	motor_dir.10330
 3651              		.cfi_endproc
 3652              	.LFE71:
 3653              		.size	motor_control_SH, .-motor_control_SH
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 88


 3654              		.section	.text.motor_control_generic,"ax",%progbits
 3655              		.align	2
 3656              		.global	motor_control_generic
 3657              		.thumb
 3658              		.thumb_func
 3659              		.type	motor_control_generic, %function
 3660              	motor_control_generic:
 3661              	.LFB72:
1208:..\src/interruptions.c **** 
1209:..\src/interruptions.c **** //==============================================================================
1210:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1211:..\src/interruptions.c **** //==============================================================================
1212:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 3662              		.loc 1 1212 0
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 80
 3665              		@ frame_needed = 1, uses_anonymous_args = 0
 3666 0000 90B5     		push	{r4, r7, lr}
 3667              		.cfi_def_cfa_offset 12
 3668              		.cfi_offset 4, -12
 3669              		.cfi_offset 7, -8
 3670              		.cfi_offset 14, -4
 3671 0002 95B0     		sub	sp, sp, #84
 3672              		.cfi_def_cfa_offset 96
 3673 0004 00AF     		add	r7, sp, #0
 3674              		.cfi_def_cfa_register 7
 3675 0006 0346     		mov	r3, r0
 3676 0008 FB71     		strb	r3, [r7, #7]
1213:..\src/interruptions.c ****     
1214:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3677              		.loc 1 1214 0
 3678 000a 0023     		movs	r3, #0
 3679 000c FB64     		str	r3, [r7, #76]
1215:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1216:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1217:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1218:..\src/interruptions.c **** 
1219:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 3680              		.loc 1 1219 0
 3681 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3682 0010 1346     		mov	r3, r2
 3683 0012 DB00     		lsls	r3, r3, #3
 3684 0014 9B1A     		subs	r3, r3, r2
 3685 0016 1B01     		lsls	r3, r3, #4
 3686 0018 B033     		adds	r3, r3, #176
 3687 001a 9D4A     		ldr	r2, .L338
 3688 001c 1344     		add	r3, r3, r2
 3689 001e 7B64     		str	r3, [r7, #68]
1220:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 3690              		.loc 1 1220 0
 3691 0020 7B6C     		ldr	r3, [r7, #68]
 3692 0022 93F86030 		ldrb	r3, [r3, #96]
 3693 0026 87F84330 		strb	r3, [r7, #67]
1221:..\src/interruptions.c ****     
1222:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 3694              		.loc 1 1222 0
 3695 002a 7B6C     		ldr	r3, [r7, #68]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 89


 3696 002c 1B68     		ldr	r3, [r3]
 3697 002e FB63     		str	r3, [r7, #60]
1223:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 3698              		.loc 1 1223 0
 3699 0030 7B6C     		ldr	r3, [r7, #68]
 3700 0032 5B68     		ldr	r3, [r3, #4]
 3701 0034 BB63     		str	r3, [r7, #56]
1224:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 3702              		.loc 1 1224 0
 3703 0036 7B6C     		ldr	r3, [r7, #68]
 3704 0038 9B68     		ldr	r3, [r3, #8]
 3705 003a 7B63     		str	r3, [r7, #52]
1225:..\src/interruptions.c **** 
1226:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 3706              		.loc 1 1226 0
 3707 003c 7B6C     		ldr	r3, [r7, #68]
 3708 003e DB68     		ldr	r3, [r3, #12]
 3709 0040 3B63     		str	r3, [r7, #48]
1227:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 3710              		.loc 1 1227 0
 3711 0042 7B6C     		ldr	r3, [r7, #68]
 3712 0044 1B69     		ldr	r3, [r3, #16]
 3713 0046 FB62     		str	r3, [r7, #44]
1228:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 3714              		.loc 1 1228 0
 3715 0048 7B6C     		ldr	r3, [r7, #68]
 3716 004a 5B69     		ldr	r3, [r3, #20]
 3717 004c BB62     		str	r3, [r7, #40]
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 3718              		.loc 1 1230 0
 3719 004e 7B6C     		ldr	r3, [r7, #68]
 3720 0050 9B69     		ldr	r3, [r3, #24]
 3721 0052 7B62     		str	r3, [r7, #36]
1231:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 3722              		.loc 1 1231 0
 3723 0054 7B6C     		ldr	r3, [r7, #68]
 3724 0056 DB69     		ldr	r3, [r3, #28]
 3725 0058 3B62     		str	r3, [r7, #32]
1232:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 3726              		.loc 1 1232 0
 3727 005a 7B6C     		ldr	r3, [r7, #68]
 3728 005c 1B6A     		ldr	r3, [r3, #32]
 3729 005e FB61     		str	r3, [r7, #28]
1233:..\src/interruptions.c ****     
1234:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 3730              		.loc 1 1234 0
 3731 0060 7B6C     		ldr	r3, [r7, #68]
 3732 0062 5B6A     		ldr	r3, [r3, #36]
 3733 0064 BB61     		str	r3, [r7, #24]
1235:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 3734              		.loc 1 1235 0
 3735 0066 7B6C     		ldr	r3, [r7, #68]
 3736 0068 9B6A     		ldr	r3, [r3, #40]
 3737 006a 7B61     		str	r3, [r7, #20]
1236:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 3738              		.loc 1 1236 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 90


 3739 006c 7B6C     		ldr	r3, [r7, #68]
 3740 006e DB6A     		ldr	r3, [r3, #44]
 3741 0070 3B61     		str	r3, [r7, #16]
1237:..\src/interruptions.c **** 
1238:..\src/interruptions.c ****     // Static Variables
1239:..\src/interruptions.c **** 
1240:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1241:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1242:..\src/interruptions.c ****     
1243:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1244:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1245:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1246:..\src/interruptions.c **** 
1247:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1248:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1249:..\src/interruptions.c **** 
1250:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1251:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 3742              		.loc 1 1251 0
 3743 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3744 0074 1B01     		lsls	r3, r3, #4
 3745 0076 874A     		ldr	r2, .L338+4
 3746 0078 9918     		adds	r1, r3, r2
 3747 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3748 007c 1B01     		lsls	r3, r3, #4
 3749 007e 864A     		ldr	r2, .L338+8
 3750 0080 1A44     		add	r2, r2, r3
 3751 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3752 0084 1846     		mov	r0, r3
 3753 0086 FFF7FEFF 		bl	compute_reference
1252:..\src/interruptions.c ****     
1253:..\src/interruptions.c ****    
1254:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3754              		.loc 1 1254 0
 3755 008a 7B6C     		ldr	r3, [r7, #68]
 3756 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3757 0090 032B     		cmp	r3, #3
 3758 0092 00F28082 		bhi	.L248
 3759 0096 01A2     		adr	r2, .L250
 3760 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3761              		.p2align 2
 3762              	.L250:
 3763 009c ED020000 		.word	.L249+1
 3764 00a0 F7040000 		.word	.L251+1
 3765 00a4 C5030000 		.word	.L252+1
 3766 00a8 AD000000 		.word	.L253+1
 3767              		.p2align 1
 3768              	.L253:
1255:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1256:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1257:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3769              		.loc 1 1257 0
 3770 00ac 794B     		ldr	r3, .L338+4
 3771 00ae 1A68     		ldr	r2, [r3]
 3772 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3773 00b4 7949     		ldr	r1, .L338+12
 3774 00b6 3420     		movs	r0, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 91


 3775 00b8 00FB03F3 		mul	r3, r0, r3
 3776 00bc 0B44     		add	r3, r3, r1
 3777 00be 1B68     		ldr	r3, [r3]
 3778 00c0 D31A     		subs	r3, r2, r3
 3779 00c2 FB60     		str	r3, [r7, #12]
1258:..\src/interruptions.c **** 
1259:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3780              		.loc 1 1259 0
 3781 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3782 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3783 00c8 7549     		ldr	r1, .L338+16
 3784 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3785 00ce FA68     		ldr	r2, [r7, #12]
 3786 00d0 0A44     		add	r2, r2, r1
 3787 00d2 7349     		ldr	r1, .L338+16
 3788 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1260:..\src/interruptions.c **** 
1261:..\src/interruptions.c ****             // error_sum saturation
1262:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3789              		.loc 1 1262 0
 3790 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3791 00da 714A     		ldr	r2, .L338+16
 3792 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3793 00e0 704A     		ldr	r2, .L338+20
 3794 00e2 9342     		cmp	r3, r2
 3795 00e4 05DD     		ble	.L254
1263:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3796              		.loc 1 1263 0
 3797 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3798 00e8 6D4A     		ldr	r2, .L338+16
 3799 00ea 6E49     		ldr	r1, .L338+20
 3800 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 3801 00f0 0BE0     		b	.L255
 3802              	.L254:
1264:..\src/interruptions.c ****             else {
1265:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3803              		.loc 1 1265 0
 3804 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3805 00f4 6A4A     		ldr	r2, .L338+16
 3806 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3807 00fa 6B4A     		ldr	r2, .L338+24
 3808 00fc 9342     		cmp	r3, r2
 3809 00fe 04DA     		bge	.L255
1266:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3810              		.loc 1 1266 0
 3811 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3812 0102 674A     		ldr	r2, .L338+16
 3813 0104 6849     		ldr	r1, .L338+24
 3814 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 3815              	.L255:
1267:..\src/interruptions.c ****             }
1268:..\src/interruptions.c ****             
1269:..\src/interruptions.c ****             // ------ position PID control ------
1270:..\src/interruptions.c **** 
1271:..\src/interruptions.c ****             i_ref = 0;
 3816              		.loc 1 1271 0
 3817 010a 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 92


 3818 010c BB64     		str	r3, [r7, #72]
1272:..\src/interruptions.c ****             
1273:..\src/interruptions.c ****             // Proportional
1274:..\src/interruptions.c ****             if (k_p_dl != 0)
 3819              		.loc 1 1274 0
 3820 010e 7B6A     		ldr	r3, [r7, #36]
 3821 0110 002B     		cmp	r3, #0
 3822 0112 07D0     		beq	.L256
1275:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3823              		.loc 1 1275 0
 3824 0114 7B6A     		ldr	r3, [r7, #36]
 3825 0116 FA68     		ldr	r2, [r7, #12]
 3826 0118 02FB03F3 		mul	r3, r2, r3
 3827 011c 1B14     		asrs	r3, r3, #16
 3828 011e BA6C     		ldr	r2, [r7, #72]
 3829 0120 1344     		add	r3, r3, r2
 3830 0122 BB64     		str	r3, [r7, #72]
 3831              	.L256:
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****             // Integral
1278:..\src/interruptions.c ****             if (k_i_dl != 0)
 3832              		.loc 1 1278 0
 3833 0124 3B6A     		ldr	r3, [r7, #32]
 3834 0126 002B     		cmp	r3, #0
 3835 0128 0AD0     		beq	.L257
1279:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3836              		.loc 1 1279 0
 3837 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3838 012c 5C4A     		ldr	r2, .L338+16
 3839 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3840 0132 3A6A     		ldr	r2, [r7, #32]
 3841 0134 02FB03F3 		mul	r3, r2, r3
 3842 0138 1B14     		asrs	r3, r3, #16
 3843 013a BA6C     		ldr	r2, [r7, #72]
 3844 013c 1344     		add	r3, r3, r2
 3845 013e BB64     		str	r3, [r7, #72]
 3846              	.L257:
1280:..\src/interruptions.c **** 
1281:..\src/interruptions.c ****             // Derivative
1282:..\src/interruptions.c ****             if (k_d_dl != 0)
 3847              		.loc 1 1282 0
 3848 0140 FB69     		ldr	r3, [r7, #28]
 3849 0142 002B     		cmp	r3, #0
 3850 0144 0CD0     		beq	.L258
1283:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3851              		.loc 1 1283 0
 3852 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3853 0148 584A     		ldr	r2, .L338+28
 3854 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3855 014e FA68     		ldr	r2, [r7, #12]
 3856 0150 D31A     		subs	r3, r2, r3
 3857 0152 FA69     		ldr	r2, [r7, #28]
 3858 0154 02FB03F3 		mul	r3, r2, r3
 3859 0158 1B14     		asrs	r3, r3, #16
 3860 015a BA6C     		ldr	r2, [r7, #72]
 3861 015c 1344     		add	r3, r3, r2
 3862 015e BB64     		str	r3, [r7, #72]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 93


 3863              	.L258:
1284:..\src/interruptions.c ****                         
1285:..\src/interruptions.c ****             // Update previous position
1286:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3864              		.loc 1 1286 0
 3865 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3866 0162 5249     		ldr	r1, .L338+28
 3867 0164 FA68     		ldr	r2, [r7, #12]
 3868 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1287:..\src/interruptions.c **** 
1288:..\src/interruptions.c ****             // motor direction depends on i_ref
1289:..\src/interruptions.c ****             if (i_ref >= 0)
 3869              		.loc 1 1289 0
 3870 016a BB6C     		ldr	r3, [r7, #72]
 3871 016c 002B     		cmp	r3, #0
 3872 016e 04DB     		blt	.L259
1290:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3873              		.loc 1 1290 0
 3874 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3875 0172 4F4A     		ldr	r2, .L338+32
 3876 0174 0121     		movs	r1, #1
 3877 0176 D154     		strb	r1, [r2, r3]
 3878 0178 03E0     		b	.L260
 3879              	.L259:
1291:..\src/interruptions.c ****             else
1292:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3880              		.loc 1 1292 0
 3881 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3882 017c 4C4A     		ldr	r2, .L338+32
 3883 017e 0021     		movs	r1, #0
 3884 0180 D154     		strb	r1, [r2, r3]
 3885              	.L260:
1293:..\src/interruptions.c **** 
1294:..\src/interruptions.c ****             // saturate max current
1295:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3886              		.loc 1 1295 0
 3887 0182 7B6C     		ldr	r3, [r7, #68]
 3888 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3889 0188 1A46     		mov	r2, r3
 3890 018a BB6C     		ldr	r3, [r7, #72]
 3891 018c 9A42     		cmp	r2, r3
 3892 018e 04DA     		bge	.L261
1296:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3893              		.loc 1 1296 0
 3894 0190 7B6C     		ldr	r3, [r7, #68]
 3895 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3896 0196 BB64     		str	r3, [r7, #72]
 3897 0198 0BE0     		b	.L262
 3898              	.L261:
1297:..\src/interruptions.c ****             else {
1298:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3899              		.loc 1 1298 0
 3900 019a 7B6C     		ldr	r3, [r7, #68]
 3901 019c B3F95C30 		ldrsh	r3, [r3, #92]
 3902 01a0 5A42     		negs	r2, r3
 3903 01a2 BB6C     		ldr	r3, [r7, #72]
 3904 01a4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 94


 3905 01a6 04DD     		ble	.L262
1299:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3906              		.loc 1 1299 0
 3907 01a8 7B6C     		ldr	r3, [r7, #68]
 3908 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 3909 01ae 5B42     		negs	r3, r3
 3910 01b0 BB64     		str	r3, [r7, #72]
 3911              	.L262:
1300:..\src/interruptions.c ****         	}
1301:..\src/interruptions.c **** 
1302:..\src/interruptions.c ****             // current error and curr error sum
1303:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3912              		.loc 1 1303 0
 3913 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3914 01b6 394A     		ldr	r2, .L338+12
 3915 01b8 3421     		movs	r1, #52
 3916 01ba 01FB03F3 		mul	r3, r1, r3
 3917 01be 1344     		add	r3, r3, r2
 3918 01c0 0C33     		adds	r3, r3, #12
 3919 01c2 1B68     		ldr	r3, [r3]
 3920 01c4 BA6C     		ldr	r2, [r7, #72]
 3921 01c6 D31A     		subs	r3, r2, r3
 3922 01c8 BB60     		str	r3, [r7, #8]
1304:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3923              		.loc 1 1304 0
 3924 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3925 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3926 01ce 3949     		ldr	r1, .L338+36
 3927 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3928 01d4 BA68     		ldr	r2, [r7, #8]
 3929 01d6 0A44     		add	r2, r2, r1
 3930 01d8 3649     		ldr	r1, .L338+36
 3931 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1305:..\src/interruptions.c ****             
1306:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3932              		.loc 1 1306 0
 3933 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3934 01e0 344A     		ldr	r2, .L338+36
 3935 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3936 01e6 344A     		ldr	r2, .L338+40
 3937 01e8 9342     		cmp	r3, r2
 3938 01ea 05DD     		ble	.L263
1307:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3939              		.loc 1 1307 0
 3940 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3941 01ee 314A     		ldr	r2, .L338+36
 3942 01f0 3149     		ldr	r1, .L338+40
 3943 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 3944 01f6 0BE0     		b	.L264
 3945              	.L263:
1308:..\src/interruptions.c ****             else {
1309:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3946              		.loc 1 1309 0
 3947 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3948 01fa 2E4A     		ldr	r2, .L338+36
 3949 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3950 0200 2E4A     		ldr	r2, .L338+44
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 95


 3951 0202 9342     		cmp	r3, r2
 3952 0204 04DA     		bge	.L264
1310:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3953              		.loc 1 1310 0
 3954 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3955 0208 2A4A     		ldr	r2, .L338+36
 3956 020a 2C49     		ldr	r1, .L338+44
 3957 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 3958              	.L264:
1311:..\src/interruptions.c ****             }
1312:..\src/interruptions.c **** 
1313:..\src/interruptions.c ****             // ----- current PID control -----
1314:..\src/interruptions.c **** 
1315:..\src/interruptions.c ****             pwm_input = 0;
 3959              		.loc 1 1315 0
 3960 0210 0023     		movs	r3, #0
 3961 0212 FB64     		str	r3, [r7, #76]
1316:..\src/interruptions.c **** 
1317:..\src/interruptions.c ****             // Proportional
1318:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3962              		.loc 1 1318 0
 3963 0214 BB69     		ldr	r3, [r7, #24]
 3964 0216 002B     		cmp	r3, #0
 3965 0218 07D0     		beq	.L265
1319:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3966              		.loc 1 1319 0
 3967 021a BB69     		ldr	r3, [r7, #24]
 3968 021c BA68     		ldr	r2, [r7, #8]
 3969 021e 02FB03F3 		mul	r3, r2, r3
 3970 0222 1B14     		asrs	r3, r3, #16
 3971 0224 FA6C     		ldr	r2, [r7, #76]
 3972 0226 1344     		add	r3, r3, r2
 3973 0228 FB64     		str	r3, [r7, #76]
 3974              	.L265:
1320:..\src/interruptions.c **** 
1321:..\src/interruptions.c ****             // Integral
1322:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3975              		.loc 1 1322 0
 3976 022a 7B69     		ldr	r3, [r7, #20]
 3977 022c 002B     		cmp	r3, #0
 3978 022e 0AD0     		beq	.L266
1323:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3979              		.loc 1 1323 0
 3980 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3981 0232 204A     		ldr	r2, .L338+36
 3982 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3983 0238 7A69     		ldr	r2, [r7, #20]
 3984 023a 02FB03F3 		mul	r3, r2, r3
 3985 023e 1B14     		asrs	r3, r3, #16
 3986 0240 FA6C     		ldr	r2, [r7, #76]
 3987 0242 1344     		add	r3, r3, r2
 3988 0244 FB64     		str	r3, [r7, #76]
 3989              	.L266:
1324:..\src/interruptions.c **** 
1325:..\src/interruptions.c ****             // Derivative
1326:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3990              		.loc 1 1326 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 96


 3991 0246 3B69     		ldr	r3, [r7, #16]
 3992 0248 002B     		cmp	r3, #0
 3993 024a 0CD0     		beq	.L267
1327:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3994              		.loc 1 1327 0
 3995 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3996 024e 1C4A     		ldr	r2, .L338+48
 3997 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3998 0254 BA68     		ldr	r2, [r7, #8]
 3999 0256 D31A     		subs	r3, r2, r3
 4000 0258 3A69     		ldr	r2, [r7, #16]
 4001 025a 02FB03F3 		mul	r3, r2, r3
 4002 025e 1B14     		asrs	r3, r3, #16
 4003 0260 FA6C     		ldr	r2, [r7, #76]
 4004 0262 1344     		add	r3, r3, r2
 4005 0264 FB64     		str	r3, [r7, #76]
 4006              	.L267:
1328:..\src/interruptions.c ****              
1329:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1330:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4007              		.loc 1 1330 0
 4008 0266 7B6C     		ldr	r3, [r7, #68]
 4009 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4010 026c 022B     		cmp	r3, #2
 4011 026e 2BD1     		bne	.L268
1331:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4012              		.loc 1 1331 0
 4013 0270 FB6C     		ldr	r3, [r7, #76]
 4014 0272 40F6A932 		movw	r2, #2985
 4015 0276 9342     		cmp	r3, r2
 4016 0278 02DD     		ble	.L269
1332:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4017              		.loc 1 1332 0
 4018 027a 40F6A933 		movw	r3, #2985
 4019 027e FB64     		str	r3, [r7, #76]
 4020              	.L269:
1333:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4021              		.loc 1 1333 0
 4022 0280 FB6C     		ldr	r3, [r7, #76]
 4023 0282 104A     		ldr	r2, .L338+52
 4024 0284 9342     		cmp	r3, r2
 4025 0286 2BDA     		bge	.L271
1334:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4026              		.loc 1 1334 0
 4027 0288 0E4B     		ldr	r3, .L338+52
 4028 028a FB64     		str	r3, [r7, #76]
 4029 028c 28E0     		b	.L271
 4030              	.L339:
 4031 028e 00BF     		.align	2
 4032              	.L338:
 4033 0290 00000000 		.word	c_mem
 4034 0294 00000000 		.word	g_ref
 4035 0298 00000000 		.word	g_refOld
 4036 029c 00000000 		.word	g_meas
 4037 02a0 AC000000 		.word	pos_error_sum.10358
 4038 02a4 80F0FA02 		.word	50000000
 4039 02a8 800F05FD 		.word	-50000000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 97


 4040 02ac B4000000 		.word	prev_pos_err.10360
 4041 02b0 BC000000 		.word	motor_dir.10363
 4042 02b4 C0000000 		.word	curr_error_sum.10359
 4043 02b8 A0860100 		.word	100000
 4044 02bc 6079FEFF 		.word	-100000
 4045 02c0 C8000000 		.word	prev_curr_err.10361
 4046 02c4 57F4FFFF 		.word	-2985
 4047              	.L268:
1335:..\src/interruptions.c ****             }
1336:..\src/interruptions.c ****             else {
1337:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4048              		.loc 1 1337 0
 4049 02c8 FB6C     		ldr	r3, [r7, #76]
 4050 02ca 642B     		cmp	r3, #100
 4051 02cc 01DD     		ble	.L272
1338:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4052              		.loc 1 1338 0
 4053 02ce 6423     		movs	r3, #100
 4054 02d0 FB64     		str	r3, [r7, #76]
 4055              	.L272:
1339:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4056              		.loc 1 1339 0
 4057 02d2 FB6C     		ldr	r3, [r7, #76]
 4058 02d4 13F1640F 		cmn	r3, #100
 4059 02d8 02DA     		bge	.L271
1340:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4060              		.loc 1 1340 0
 4061 02da 6FF06303 		mvn	r3, #99
 4062 02de FB64     		str	r3, [r7, #76]
 4063              	.L271:
1341:..\src/interruptions.c ****             }
1342:..\src/interruptions.c **** 
1343:..\src/interruptions.c ****             // Update previous current
1344:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4064              		.loc 1 1344 0
 4065 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4066 02e2 A049     		ldr	r1, .L340
 4067 02e4 BA68     		ldr	r2, [r7, #8]
 4068 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1345:..\src/interruptions.c **** 
1346:..\src/interruptions.c ****         break;
 4069              		.loc 1 1346 0
 4070 02ea 54E1     		b	.L248
 4071              	.L249:
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1349:..\src/interruptions.c ****         case CONTROL_ANGLE:
1350:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4072              		.loc 1 1350 0
 4073 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4074 02ee 9E4A     		ldr	r2, .L340+4
 4075 02f0 1B01     		lsls	r3, r3, #4
 4076 02f2 1344     		add	r3, r3, r2
 4077 02f4 1A68     		ldr	r2, [r3]
 4078 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4079 02fa 9C49     		ldr	r1, .L340+8
 4080 02fc 3420     		movs	r0, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 98


 4081 02fe 00FB03F3 		mul	r3, r0, r3
 4082 0302 0B44     		add	r3, r3, r1
 4083 0304 1B68     		ldr	r3, [r3]
 4084 0306 D31A     		subs	r3, r2, r3
 4085 0308 FB60     		str	r3, [r7, #12]
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4086              		.loc 1 1352 0
 4087 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4088 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4089 030e 9849     		ldr	r1, .L340+12
 4090 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4091 0314 FA68     		ldr	r2, [r7, #12]
 4092 0316 0A44     		add	r2, r2, r1
 4093 0318 9549     		ldr	r1, .L340+12
 4094 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1353:..\src/interruptions.c **** 
1354:..\src/interruptions.c ****             // anti-windup (for integral control)
1355:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4095              		.loc 1 1355 0
 4096 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4097 0320 934A     		ldr	r2, .L340+12
 4098 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4099 0326 B3F57A7F 		cmp	r3, #1000
 4100 032a 06DD     		ble	.L273
1356:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4101              		.loc 1 1356 0
 4102 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4103 032e 904A     		ldr	r2, .L340+12
 4104 0330 4FF47A71 		mov	r1, #1000
 4105 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4106 0338 0BE0     		b	.L274
 4107              	.L273:
1357:..\src/interruptions.c ****             else {
1358:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4108              		.loc 1 1358 0
 4109 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4110 033c 8C4A     		ldr	r2, .L340+12
 4111 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4112 0342 13F57A7F 		cmn	r3, #1000
 4113 0346 04DA     		bge	.L274
1359:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4114              		.loc 1 1359 0
 4115 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4116 034a 894A     		ldr	r2, .L340+12
 4117 034c 8949     		ldr	r1, .L340+16
 4118 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4119              	.L274:
1360:..\src/interruptions.c ****             }
1361:..\src/interruptions.c **** 
1362:..\src/interruptions.c ****             // Proportional
1363:..\src/interruptions.c ****             if (k_p != 0) 
 4120              		.loc 1 1363 0
 4121 0352 FB6B     		ldr	r3, [r7, #60]
 4122 0354 002B     		cmp	r3, #0
 4123 0356 05D0     		beq	.L275
1364:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 99


 4124              		.loc 1 1364 0
 4125 0358 FB6B     		ldr	r3, [r7, #60]
 4126 035a FA68     		ldr	r2, [r7, #12]
 4127 035c 02FB03F3 		mul	r3, r2, r3
 4128 0360 1B14     		asrs	r3, r3, #16
 4129 0362 FB64     		str	r3, [r7, #76]
 4130              	.L275:
1365:..\src/interruptions.c ****             
1366:..\src/interruptions.c **** 
1367:..\src/interruptions.c ****             // Integral
1368:..\src/interruptions.c ****             if (k_i != 0) 
 4131              		.loc 1 1368 0
 4132 0364 BB6B     		ldr	r3, [r7, #56]
 4133 0366 002B     		cmp	r3, #0
 4134 0368 0AD0     		beq	.L276
1369:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4135              		.loc 1 1369 0
 4136 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4137 036c 804A     		ldr	r2, .L340+12
 4138 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4139 0372 BA6B     		ldr	r2, [r7, #56]
 4140 0374 02FB03F3 		mul	r3, r2, r3
 4141 0378 1B14     		asrs	r3, r3, #16
 4142 037a FA6C     		ldr	r2, [r7, #76]
 4143 037c 1344     		add	r3, r3, r2
 4144 037e FB64     		str	r3, [r7, #76]
 4145              	.L276:
1370:..\src/interruptions.c ****             
1371:..\src/interruptions.c **** 
1372:..\src/interruptions.c ****             // Derivative
1373:..\src/interruptions.c ****             if (k_d != 0) 
 4146              		.loc 1 1373 0
 4147 0380 7B6B     		ldr	r3, [r7, #52]
 4148 0382 002B     		cmp	r3, #0
 4149 0384 0CD0     		beq	.L277
1374:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4150              		.loc 1 1374 0
 4151 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4152 0388 7B4A     		ldr	r2, .L340+20
 4153 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4154 038e FA68     		ldr	r2, [r7, #12]
 4155 0390 D31A     		subs	r3, r2, r3
 4156 0392 7A6B     		ldr	r2, [r7, #52]
 4157 0394 02FB03F3 		mul	r3, r2, r3
 4158 0398 1B14     		asrs	r3, r3, #16
 4159 039a FA6C     		ldr	r2, [r7, #76]
 4160 039c 1344     		add	r3, r3, r2
 4161 039e FB64     		str	r3, [r7, #76]
 4162              	.L277:
1375:..\src/interruptions.c ****             
1376:..\src/interruptions.c **** 
1377:..\src/interruptions.c ****             // Update measure
1378:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4163              		.loc 1 1378 0
 4164 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4165 03a2 7549     		ldr	r1, .L340+20
 4166 03a4 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 100


 4167 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             if (pwm_input > 0)
 4168              		.loc 1 1380 0
 4169 03aa FB6C     		ldr	r3, [r7, #76]
 4170 03ac 002B     		cmp	r3, #0
 4171 03ae 04DD     		ble	.L278
1381:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4172              		.loc 1 1381 0
 4173 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4174 03b2 724A     		ldr	r2, .L340+24
 4175 03b4 0121     		movs	r1, #1
 4176 03b6 D154     		strb	r1, [r2, r3]
1382:..\src/interruptions.c ****             else
1383:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1384:..\src/interruptions.c **** 
1385:..\src/interruptions.c ****         break;
 4177              		.loc 1 1385 0
 4178 03b8 EDE0     		b	.L248
 4179              	.L278:
1383:..\src/interruptions.c **** 
 4180              		.loc 1 1383 0
 4181 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4182 03bc 6F4A     		ldr	r2, .L340+24
 4183 03be 0021     		movs	r1, #0
 4184 03c0 D154     		strb	r1, [r2, r3]
 4185              		.loc 1 1385 0
 4186 03c2 E8E0     		b	.L248
 4187              	.L252:
1386:..\src/interruptions.c **** 
1387:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1388:..\src/interruptions.c ****         case CONTROL_CURRENT:
1389:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4188              		.loc 1 1389 0
 4189 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4190 03c6 684A     		ldr	r2, .L340+4
 4191 03c8 1B01     		lsls	r3, r3, #4
 4192 03ca 1344     		add	r3, r3, r2
 4193 03cc 0C33     		adds	r3, r3, #12
 4194 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4195 03d0 002B     		cmp	r3, #0
 4196 03d2 00F0C480 		beq	.L335
 4197              		.loc 1 1389 0 is_stmt 0 discriminator 1
 4198 03d6 6A4B     		ldr	r3, .L340+28
 4199 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4200 03da 002B     		cmp	r3, #0
 4201 03dc 00F0BF80 		beq	.L335
1390:..\src/interruptions.c ****                 
1391:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4202              		.loc 1 1391 0 is_stmt 1
 4203 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4204 03e2 614A     		ldr	r2, .L340+4
 4205 03e4 1B01     		lsls	r3, r3, #4
 4206 03e6 1344     		add	r3, r3, r2
 4207 03e8 0433     		adds	r3, r3, #4
 4208 03ea 1B68     		ldr	r3, [r3]
 4209 03ec BB64     		str	r3, [r7, #72]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 101


1392:..\src/interruptions.c **** 
1393:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4210              		.loc 1 1393 0
 4211 03ee 7B6C     		ldr	r3, [r7, #68]
 4212 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4213 03f4 1A46     		mov	r2, r3
 4214 03f6 BB6C     		ldr	r3, [r7, #72]
 4215 03f8 9A42     		cmp	r2, r3
 4216 03fa 04DA     		bge	.L281
1394:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4217              		.loc 1 1394 0
 4218 03fc 7B6C     		ldr	r3, [r7, #68]
 4219 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4220 0402 BB64     		str	r3, [r7, #72]
 4221 0404 0BE0     		b	.L282
 4222              	.L281:
1395:..\src/interruptions.c ****                 else {
1396:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4223              		.loc 1 1396 0
 4224 0406 7B6C     		ldr	r3, [r7, #68]
 4225 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4226 040c 5A42     		negs	r2, r3
 4227 040e BB6C     		ldr	r3, [r7, #72]
 4228 0410 9A42     		cmp	r2, r3
 4229 0412 04DD     		ble	.L282
1397:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4230              		.loc 1 1397 0
 4231 0414 7B6C     		ldr	r3, [r7, #68]
 4232 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4233 041a 5B42     		negs	r3, r3
 4234 041c BB64     		str	r3, [r7, #72]
 4235              	.L282:
1398:..\src/interruptions.c ****                 }
1399:..\src/interruptions.c ****                 
1400:..\src/interruptions.c ****                 // current error
1401:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4236              		.loc 1 1401 0
 4237 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4238 0422 524A     		ldr	r2, .L340+8
 4239 0424 3421     		movs	r1, #52
 4240 0426 01FB03F3 		mul	r3, r1, r3
 4241 042a 1344     		add	r3, r3, r2
 4242 042c 0C33     		adds	r3, r3, #12
 4243 042e 1B68     		ldr	r3, [r3]
 4244 0430 BA6C     		ldr	r2, [r7, #72]
 4245 0432 D31A     		subs	r3, r2, r3
 4246 0434 BB60     		str	r3, [r7, #8]
1402:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4247              		.loc 1 1402 0
 4248 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4249 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4250 043a 5249     		ldr	r1, .L340+32
 4251 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4252 0440 BA68     		ldr	r2, [r7, #8]
 4253 0442 0A44     		add	r2, r2, r1
 4254 0444 4F49     		ldr	r1, .L340+32
 4255 0446 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 102


1403:..\src/interruptions.c ****                 
1404:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4256              		.loc 1 1404 0
 4257 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4258 044c 4D4A     		ldr	r2, .L340+32
 4259 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4260 0452 4D4A     		ldr	r2, .L340+36
 4261 0454 9342     		cmp	r3, r2
 4262 0456 05DD     		ble	.L283
1405:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4263              		.loc 1 1405 0
 4264 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4265 045a 4A4A     		ldr	r2, .L340+32
 4266 045c 4A49     		ldr	r1, .L340+36
 4267 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4268 0462 0BE0     		b	.L284
 4269              	.L283:
1406:..\src/interruptions.c ****                 else {
1407:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4270              		.loc 1 1407 0
 4271 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4272 0466 474A     		ldr	r2, .L340+32
 4273 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4274 046c 474A     		ldr	r2, .L340+40
 4275 046e 9342     		cmp	r3, r2
 4276 0470 04DA     		bge	.L284
1408:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4277              		.loc 1 1408 0
 4278 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4279 0474 434A     		ldr	r2, .L340+32
 4280 0476 4549     		ldr	r1, .L340+40
 4281 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4282              	.L284:
1409:..\src/interruptions.c ****                 }
1410:..\src/interruptions.c **** 
1411:..\src/interruptions.c ****                 pwm_input = 0;
 4283              		.loc 1 1411 0
 4284 047c 0023     		movs	r3, #0
 4285 047e FB64     		str	r3, [r7, #76]
1412:..\src/interruptions.c **** 
1413:..\src/interruptions.c ****                 // Proportional
1414:..\src/interruptions.c ****                 if (k_p_c != 0)
 4286              		.loc 1 1414 0
 4287 0480 3B6B     		ldr	r3, [r7, #48]
 4288 0482 002B     		cmp	r3, #0
 4289 0484 07D0     		beq	.L285
1415:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4290              		.loc 1 1415 0
 4291 0486 3B6B     		ldr	r3, [r7, #48]
 4292 0488 BA68     		ldr	r2, [r7, #8]
 4293 048a 02FB03F3 		mul	r3, r2, r3
 4294 048e 1B14     		asrs	r3, r3, #16
 4295 0490 FA6C     		ldr	r2, [r7, #76]
 4296 0492 1344     		add	r3, r3, r2
 4297 0494 FB64     		str	r3, [r7, #76]
 4298              	.L285:
1416:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 103


1417:..\src/interruptions.c ****                 // Integral
1418:..\src/interruptions.c ****                 if (k_i_c != 0)
 4299              		.loc 1 1418 0
 4300 0496 FB6A     		ldr	r3, [r7, #44]
 4301 0498 002B     		cmp	r3, #0
 4302 049a 0AD0     		beq	.L286
1419:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4303              		.loc 1 1419 0
 4304 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4305 049e 394A     		ldr	r2, .L340+32
 4306 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4307 04a4 FA6A     		ldr	r2, [r7, #44]
 4308 04a6 02FB03F3 		mul	r3, r2, r3
 4309 04aa 1B14     		asrs	r3, r3, #16
 4310 04ac FA6C     		ldr	r2, [r7, #76]
 4311 04ae 1344     		add	r3, r3, r2
 4312 04b0 FB64     		str	r3, [r7, #76]
 4313              	.L286:
1420:..\src/interruptions.c **** 
1421:..\src/interruptions.c ****                 // Derivative
1422:..\src/interruptions.c ****                 if (k_d_c != 0)
 4314              		.loc 1 1422 0
 4315 04b2 BB6A     		ldr	r3, [r7, #40]
 4316 04b4 002B     		cmp	r3, #0
 4317 04b6 0CD0     		beq	.L287
1423:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4318              		.loc 1 1423 0
 4319 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4320 04ba 2A4A     		ldr	r2, .L340
 4321 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4322 04c0 BA68     		ldr	r2, [r7, #8]
 4323 04c2 D31A     		subs	r3, r2, r3
 4324 04c4 BA6A     		ldr	r2, [r7, #40]
 4325 04c6 02FB03F3 		mul	r3, r2, r3
 4326 04ca 1B14     		asrs	r3, r3, #16
 4327 04cc FA6C     		ldr	r2, [r7, #76]
 4328 04ce 1344     		add	r3, r3, r2
 4329 04d0 FB64     		str	r3, [r7, #76]
 4330              	.L287:
1424:..\src/interruptions.c ****                 
1425:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4331              		.loc 1 1425 0
 4332 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4333 04d4 2349     		ldr	r1, .L340
 4334 04d6 BA68     		ldr	r2, [r7, #8]
 4335 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1426:..\src/interruptions.c ****                 
1427:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4336              		.loc 1 1427 0
 4337 04dc FB6C     		ldr	r3, [r7, #76]
 4338 04de 002B     		cmp	r3, #0
 4339 04e0 04DB     		blt	.L288
1428:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4340              		.loc 1 1428 0
 4341 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4342 04e4 254A     		ldr	r2, .L340+24
 4343 04e6 0121     		movs	r1, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 104


 4344 04e8 D154     		strb	r1, [r2, r3]
1429:..\src/interruptions.c ****                 else
1430:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1431:..\src/interruptions.c ****             }
1432:..\src/interruptions.c ****         break;
 4345              		.loc 1 1432 0
 4346 04ea 38E0     		b	.L335
 4347              	.L288:
1430:..\src/interruptions.c ****             }
 4348              		.loc 1 1430 0
 4349 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4350 04ee 234A     		ldr	r2, .L340+24
 4351 04f0 0021     		movs	r1, #0
 4352 04f2 D154     		strb	r1, [r2, r3]
 4353              		.loc 1 1432 0
 4354 04f4 33E0     		b	.L335
 4355              	.L251:
1433:..\src/interruptions.c ****         
1434:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1435:..\src/interruptions.c ****         case CONTROL_PWM:
1436:..\src/interruptions.c **** 
1437:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4356              		.loc 1 1437 0
 4357 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4358 04f8 1B4A     		ldr	r2, .L340+4
 4359 04fa 1B01     		lsls	r3, r3, #4
 4360 04fc 1344     		add	r3, r3, r2
 4361 04fe 0833     		adds	r3, r3, #8
 4362 0500 1B68     		ldr	r3, [r3]
 4363 0502 FB64     		str	r3, [r7, #76]
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****             if (pwm_input > 0) 
 4364              		.loc 1 1439 0
 4365 0504 FB6C     		ldr	r3, [r7, #76]
 4366 0506 002B     		cmp	r3, #0
 4367 0508 04DD     		ble	.L289
1440:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4368              		.loc 1 1440 0
 4369 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4370 050c 1B4A     		ldr	r2, .L340+24
 4371 050e 0121     		movs	r1, #1
 4372 0510 D154     		strb	r1, [r2, r3]
 4373 0512 03E0     		b	.L290
 4374              	.L289:
1441:..\src/interruptions.c ****             else 
1442:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4375              		.loc 1 1442 0
 4376 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4377 0516 194A     		ldr	r2, .L340+24
 4378 0518 0021     		movs	r1, #0
 4379 051a D154     		strb	r1, [r2, r3]
 4380              	.L290:
1443:..\src/interruptions.c ****             
1444:..\src/interruptions.c ****           
1445:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1446:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4381              		.loc 1 1446 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 105


 4382 051c 7B6C     		ldr	r3, [r7, #68]
 4383 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4384 0522 022B     		cmp	r3, #2
 4385 0524 0ED1     		bne	.L291
1447:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4386              		.loc 1 1447 0
 4387 0526 FB6C     		ldr	r3, [r7, #76]
 4388 0528 40F6A932 		movw	r2, #2985
 4389 052c 9342     		cmp	r3, r2
 4390 052e 02DD     		ble	.L292
1448:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4391              		.loc 1 1448 0
 4392 0530 40F6A933 		movw	r3, #2985
 4393 0534 FB64     		str	r3, [r7, #76]
 4394              	.L292:
1449:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4395              		.loc 1 1449 0
 4396 0536 FB6C     		ldr	r3, [r7, #76]
 4397 0538 154A     		ldr	r2, .L340+44
 4398 053a 9342     		cmp	r3, r2
 4399 053c 2ADA     		bge	.L336
1450:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4400              		.loc 1 1450 0
 4401 053e 144B     		ldr	r3, .L340+44
 4402 0540 FB64     		str	r3, [r7, #76]
1451:..\src/interruptions.c ****             }
1452:..\src/interruptions.c ****             else {
1453:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1454:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1455:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1456:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1457:..\src/interruptions.c ****             }
1458:..\src/interruptions.c **** 
1459:..\src/interruptions.c ****         break;
 4403              		.loc 1 1459 0
 4404 0542 27E0     		b	.L336
 4405              	.L291:
1453:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4406              		.loc 1 1453 0
 4407 0544 FB6C     		ldr	r3, [r7, #76]
 4408 0546 642B     		cmp	r3, #100
 4409 0548 01DD     		ble	.L295
1454:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4410              		.loc 1 1454 0
 4411 054a 6423     		movs	r3, #100
 4412 054c FB64     		str	r3, [r7, #76]
 4413              	.L295:
1455:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4414              		.loc 1 1455 0
 4415 054e FB6C     		ldr	r3, [r7, #76]
 4416 0550 13F1640F 		cmn	r3, #100
 4417 0554 1EDA     		bge	.L336
1456:..\src/interruptions.c ****             }
 4418              		.loc 1 1456 0
 4419 0556 6FF06303 		mvn	r3, #99
 4420 055a FB64     		str	r3, [r7, #76]
 4421              		.loc 1 1459 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 106


 4422 055c 1AE0     		b	.L336
 4423              	.L335:
1432:..\src/interruptions.c ****         
 4424              		.loc 1 1432 0
 4425 055e 00BF     		nop
 4426 0560 19E0     		b	.L248
 4427              	.L341:
 4428 0562 00BF     		.align	2
 4429              	.L340:
 4430 0564 C8000000 		.word	prev_curr_err.10361
 4431 0568 00000000 		.word	g_ref
 4432 056c 00000000 		.word	g_meas
 4433 0570 AC000000 		.word	pos_error_sum.10358
 4434 0574 18FCFFFF 		.word	-1000
 4435 0578 B4000000 		.word	prev_pos_err.10360
 4436 057c BC000000 		.word	motor_dir.10363
 4437 0580 00000000 		.word	tension_valid
 4438 0584 C0000000 		.word	curr_error_sum.10359
 4439 0588 A0860100 		.word	100000
 4440 058c 6079FEFF 		.word	-100000
 4441 0590 57F4FFFF 		.word	-2985
 4442              	.L336:
 4443              		.loc 1 1459 0
 4444 0594 00BF     		nop
 4445              	.L248:
1460:..\src/interruptions.c ****             
1461:..\src/interruptions.c ****     }
1462:..\src/interruptions.c **** 
1463:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1464:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1465:..\src/interruptions.c **** 
1466:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1467:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4446              		.loc 1 1467 0
 4447 0596 7B6C     		ldr	r3, [r7, #68]
 4448 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4449 059c 022B     		cmp	r3, #2
 4450 059e 23D1     		bne	.L296
1468:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4451              		.loc 1 1468 0
 4452 05a0 FB6C     		ldr	r3, [r7, #76]
 4453 05a2 40F6A932 		movw	r2, #2985
 4454 05a6 9342     		cmp	r3, r2
 4455 05a8 02DD     		ble	.L297
1469:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4456              		.loc 1 1469 0
 4457 05aa 40F6A933 		movw	r3, #2985
 4458 05ae FB64     		str	r3, [r7, #76]
 4459              	.L297:
1470:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4460              		.loc 1 1470 0
 4461 05b0 FB6C     		ldr	r3, [r7, #76]
 4462 05b2 B34A     		ldr	r2, .L342
 4463 05b4 9342     		cmp	r3, r2
 4464 05b6 01DA     		bge	.L298
1471:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4465              		.loc 1 1471 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 107


 4466 05b8 B14B     		ldr	r3, .L342
 4467 05ba FB64     		str	r3, [r7, #76]
 4468              	.L298:
1472:..\src/interruptions.c ****         
1473:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4469              		.loc 1 1473 0
 4470 05bc 7B6C     		ldr	r3, [r7, #68]
 4471 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4472 05c2 012B     		cmp	r3, #1
 4473 05c4 31D0     		beq	.L300
1474:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4474              		.loc 1 1474 0
 4475 05c6 FB6C     		ldr	r3, [r7, #76]
 4476 05c8 9B02     		lsls	r3, r3, #10
 4477 05ca AE4A     		ldr	r2, .L342+4
 4478 05cc 82FB0312 		smull	r1, r2, r2, r3
 4479 05d0 9211     		asrs	r2, r2, #6
 4480 05d2 DB17     		asrs	r3, r3, #31
 4481 05d4 D31A     		subs	r3, r2, r3
 4482 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4483 05d8 AB49     		ldr	r1, .L342+8
 4484 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4485 05de 02FB03F3 		mul	r3, r2, r3
 4486 05e2 9B12     		asrs	r3, r3, #10
 4487 05e4 FB64     		str	r3, [r7, #76]
 4488 05e6 20E0     		b	.L300
 4489              	.L296:
1475:..\src/interruptions.c ****     }
1476:..\src/interruptions.c ****     else {
1477:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4490              		.loc 1 1477 0
 4491 05e8 FB6C     		ldr	r3, [r7, #76]
 4492 05ea 642B     		cmp	r3, #100
 4493 05ec 01DD     		ble	.L301
1478:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4494              		.loc 1 1478 0
 4495 05ee 6423     		movs	r3, #100
 4496 05f0 FB64     		str	r3, [r7, #76]
 4497              	.L301:
1479:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4498              		.loc 1 1479 0
 4499 05f2 FB6C     		ldr	r3, [r7, #76]
 4500 05f4 13F1640F 		cmn	r3, #100
 4501 05f8 02DA     		bge	.L302
1480:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4502              		.loc 1 1480 0
 4503 05fa 6FF06303 		mvn	r3, #99
 4504 05fe FB64     		str	r3, [r7, #76]
 4505              	.L302:
1481:..\src/interruptions.c ****         
1482:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4506              		.loc 1 1482 0
 4507 0600 7B6C     		ldr	r3, [r7, #68]
 4508 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4509 0606 012B     		cmp	r3, #1
 4510 0608 0FD0     		beq	.L300
1483:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 108


 4511              		.loc 1 1483 0
 4512 060a FB6C     		ldr	r3, [r7, #76]
 4513 060c 9B02     		lsls	r3, r3, #10
 4514 060e 9F4A     		ldr	r2, .L342+12
 4515 0610 82FB0312 		smull	r1, r2, r2, r3
 4516 0614 5211     		asrs	r2, r2, #5
 4517 0616 DB17     		asrs	r3, r3, #31
 4518 0618 D31A     		subs	r3, r2, r3
 4519 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4520 061c 9A49     		ldr	r1, .L342+8
 4521 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4522 0622 02FB03F3 		mul	r3, r2, r3
 4523 0626 9B12     		asrs	r3, r3, #10
 4524 0628 FB64     		str	r3, [r7, #76]
 4525              	.L300:
1484:..\src/interruptions.c ****     }
1485:..\src/interruptions.c **** 
1486:..\src/interruptions.c ****     //// RATE LIMITER ////
1487:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4526              		.loc 1 1487 0
 4527 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4528 062c 984A     		ldr	r2, .L342+16
 4529 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4530 0632 FA6C     		ldr	r2, [r7, #76]
 4531 0634 D31A     		subs	r3, r2, r3
 4532 0636 7A6C     		ldr	r2, [r7, #68]
 4533 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4534 063c 9342     		cmp	r3, r2
 4535 063e 09DD     		ble	.L303
1488:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4536              		.loc 1 1488 0
 4537 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4538 0642 934A     		ldr	r2, .L342+16
 4539 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4540 0648 7A6C     		ldr	r2, [r7, #68]
 4541 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4542 064e 1344     		add	r3, r3, r2
 4543 0650 FB64     		str	r3, [r7, #76]
 4544 0652 14E0     		b	.L304
 4545              	.L303:
1489:..\src/interruptions.c ****     }
1490:..\src/interruptions.c ****     else {
1491:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4546              		.loc 1 1491 0
 4547 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4548 0656 8E4A     		ldr	r2, .L342+16
 4549 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4550 065c FA6C     		ldr	r2, [r7, #76]
 4551 065e D21A     		subs	r2, r2, r3
 4552 0660 7B6C     		ldr	r3, [r7, #68]
 4553 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4554 0666 5B42     		negs	r3, r3
 4555 0668 9A42     		cmp	r2, r3
 4556 066a 08DA     		bge	.L304
1492:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4557              		.loc 1 1492 0
 4558 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 109


 4559 066e 884A     		ldr	r2, .L342+16
 4560 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4561 0674 7A6C     		ldr	r2, [r7, #68]
 4562 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4563 067a 9B1A     		subs	r3, r3, r2
 4564 067c FB64     		str	r3, [r7, #76]
 4565              	.L304:
1493:..\src/interruptions.c ****     }
1494:..\src/interruptions.c ****    
1495:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1496:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4566              		.loc 1 1496 0
 4567 067e 7B6C     		ldr	r3, [r7, #68]
 4568 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4569 0684 022B     		cmp	r3, #2
 4570 0686 0ED1     		bne	.L305
1497:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4571              		.loc 1 1497 0
 4572 0688 FB6C     		ldr	r3, [r7, #76]
 4573 068a 40F6A932 		movw	r2, #2985
 4574 068e 9342     		cmp	r3, r2
 4575 0690 02DD     		ble	.L306
1498:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4576              		.loc 1 1498 0
 4577 0692 40F6A933 		movw	r3, #2985
 4578 0696 FB64     		str	r3, [r7, #76]
 4579              	.L306:
1499:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4580              		.loc 1 1499 0
 4581 0698 FB6C     		ldr	r3, [r7, #76]
 4582 069a 794A     		ldr	r2, .L342
 4583 069c 9342     		cmp	r3, r2
 4584 069e 0EDA     		bge	.L308
1500:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4585              		.loc 1 1500 0
 4586 06a0 774B     		ldr	r3, .L342
 4587 06a2 FB64     		str	r3, [r7, #76]
 4588 06a4 0BE0     		b	.L308
 4589              	.L305:
1501:..\src/interruptions.c ****     }
1502:..\src/interruptions.c ****     else {
1503:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4590              		.loc 1 1503 0
 4591 06a6 FB6C     		ldr	r3, [r7, #76]
 4592 06a8 642B     		cmp	r3, #100
 4593 06aa 01DD     		ble	.L309
1504:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4594              		.loc 1 1504 0
 4595 06ac 6423     		movs	r3, #100
 4596 06ae FB64     		str	r3, [r7, #76]
 4597              	.L309:
1505:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4598              		.loc 1 1505 0
 4599 06b0 FB6C     		ldr	r3, [r7, #76]
 4600 06b2 13F1640F 		cmn	r3, #100
 4601 06b6 02DA     		bge	.L308
1506:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 110


 4602              		.loc 1 1506 0
 4603 06b8 6FF06303 		mvn	r3, #99
 4604 06bc FB64     		str	r3, [r7, #76]
 4605              	.L308:
1507:..\src/interruptions.c ****     }
1508:..\src/interruptions.c **** 
1509:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4606              		.loc 1 1509 0
 4607 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4608 06c0 7349     		ldr	r1, .L342+16
 4609 06c2 FA6C     		ldr	r2, [r7, #76]
 4610 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1510:..\src/interruptions.c ****            
1511:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 4611              		.loc 1 1511 0
 4612 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4613 06ca FA6C     		ldr	r2, [r7, #76]
 4614 06cc 002A     		cmp	r2, #0
 4615 06ce 01DB     		blt	.L310
 4616              		.loc 1 1511 0 is_stmt 0 discriminator 1
 4617 06d0 0121     		movs	r1, #1
 4618 06d2 01E0     		b	.L311
 4619              	.L310:
 4620              		.loc 1 1511 0 discriminator 2
 4621 06d4 4FF0FF31 		mov	r1, #-1
 4622              	.L311:
 4623              		.loc 1 1511 0 discriminator 4
 4624 06d8 6E4A     		ldr	r2, .L342+20
 4625 06da D154     		strb	r1, [r2, r3]
1512:..\src/interruptions.c ****     
1513:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4626              		.loc 1 1513 0 is_stmt 1 discriminator 4
 4627 06dc 7B6C     		ldr	r3, [r7, #68]
 4628 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4629 06e2 012B     		cmp	r3, #1
 4630 06e4 40F0AA80 		bne	.L312
1514:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1515:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4631              		.loc 1 1515 0
 4632 06e8 7B6C     		ldr	r3, [r7, #68]
 4633 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4634 06ee 012B     		cmp	r3, #1
 4635 06f0 00F09F80 		beq	.L313
 4636              		.loc 1 1515 0 is_stmt 0 discriminator 1
 4637 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4638 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4639 06fa 6748     		ldr	r0, .L342+24
 4640 06fc 1346     		mov	r3, r2
 4641 06fe 5B00     		lsls	r3, r3, #1
 4642 0700 1344     		add	r3, r3, r2
 4643 0702 9B00     		lsls	r3, r3, #2
 4644 0704 1344     		add	r3, r3, r2
 4645 0706 0B44     		add	r3, r3, r1
 4646 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4647 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4648 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4649 0712 624C     		ldr	r4, .L342+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 111


 4650 0714 1346     		mov	r3, r2
 4651 0716 5B00     		lsls	r3, r3, #1
 4652 0718 1344     		add	r3, r3, r2
 4653 071a 9B00     		lsls	r3, r3, #2
 4654 071c 1344     		add	r3, r3, r2
 4655 071e 0344     		add	r3, r3, r0
 4656 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4657 0724 CB1A     		subs	r3, r1, r3
 4658 0726 312B     		cmp	r3, #49
 4659 0728 00F38380 		bgt	.L313
1516:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4660              		.loc 1 1516 0 is_stmt 1 discriminator 2
 4661 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4662 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4663 0732 5948     		ldr	r0, .L342+24
 4664 0734 1346     		mov	r3, r2
 4665 0736 5B00     		lsls	r3, r3, #1
 4666 0738 1344     		add	r3, r3, r2
 4667 073a 9B00     		lsls	r3, r3, #2
 4668 073c 1344     		add	r3, r3, r2
 4669 073e 0B44     		add	r3, r3, r1
 4670 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4671 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4672 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4673 074a 544C     		ldr	r4, .L342+28
 4674 074c 1346     		mov	r3, r2
 4675 074e 5B00     		lsls	r3, r3, #1
 4676 0750 1344     		add	r3, r3, r2
 4677 0752 9B00     		lsls	r3, r3, #2
 4678 0754 1344     		add	r3, r3, r2
 4679 0756 0344     		add	r3, r3, r0
 4680 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4681 075c CB1A     		subs	r3, r1, r3
1515:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4682              		.loc 1 1515 0 discriminator 2
 4683 075e 13F1310F 		cmn	r3, #49
 4684 0762 66DB     		blt	.L313
1517:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4685              		.loc 1 1517 0
 4686 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4687 0766 4E4A     		ldr	r2, .L342+32
 4688 0768 1B01     		lsls	r3, r3, #4
 4689 076a 1344     		add	r3, r3, r2
 4690 076c 1A68     		ldr	r2, [r3]
 4691 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4692 0770 4C49     		ldr	r1, .L342+36
 4693 0772 1B01     		lsls	r3, r3, #4
 4694 0774 0B44     		add	r3, r3, r1
 4695 0776 1B68     		ldr	r3, [r3]
 4696 0778 D31A     		subs	r3, r2, r3
1516:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4697              		.loc 1 1516 0
 4698 077a 632B     		cmp	r3, #99
 4699 077c 59DC     		bgt	.L313
 4700              		.loc 1 1517 0
 4701 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4702 0780 474A     		ldr	r2, .L342+32
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 112


 4703 0782 1B01     		lsls	r3, r3, #4
 4704 0784 1344     		add	r3, r3, r2
 4705 0786 1A68     		ldr	r2, [r3]
 4706 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4707 078a 4649     		ldr	r1, .L342+36
 4708 078c 1B01     		lsls	r3, r3, #4
 4709 078e 0B44     		add	r3, r3, r1
 4710 0790 1B68     		ldr	r3, [r3]
 4711 0792 D31A     		subs	r3, r2, r3
 4712 0794 13F1630F 		cmn	r3, #99
 4713 0798 4BDB     		blt	.L313
1518:..\src/interruptions.c ****             position_counter[idx]++;
 4714              		.loc 1 1518 0
 4715 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4716 079c 424A     		ldr	r2, .L342+40
 4717 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4718 07a2 0132     		adds	r2, r2, #1
 4719 07a4 4049     		ldr	r1, .L342+40
 4720 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1519:..\src/interruptions.c ****             
1520:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4721              		.loc 1 1520 0
 4722 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4723 07ac 3E4A     		ldr	r2, .L342+40
 4724 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4725 07b2 F92B     		cmp	r3, #249
 4726 07b4 42D9     		bls	.L312
1521:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4727              		.loc 1 1521 0
 4728 07b6 7B6C     		ldr	r3, [r7, #68]
 4729 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4730 07bc 002B     		cmp	r3, #0
 4731 07be 10D1     		bne	.L315
 4732              		.loc 1 1521 0 is_stmt 0 discriminator 1
 4733 07c0 3A4B     		ldr	r3, .L342+44
 4734 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4735 07c4 002B     		cmp	r3, #0
 4736 07c6 0CD1     		bne	.L315
1522:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4737              		.loc 1 1522 0 is_stmt 1
 4738 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4739 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4740 07ce 3349     		ldr	r1, .L342+28
 4741 07d0 3420     		movs	r0, #52
 4742 07d2 00FB02F2 		mul	r2, r0, r2
 4743 07d6 0A44     		add	r2, r2, r1
 4744 07d8 1268     		ldr	r2, [r2]
 4745 07da 3549     		ldr	r1, .L342+48
 4746 07dc 1B01     		lsls	r3, r3, #4
 4747 07de 0B44     		add	r3, r3, r1
 4748 07e0 1A60     		str	r2, [r3]
 4749              	.L315:
1523:..\src/interruptions.c ****                 }
1524:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4750              		.loc 1 1524 0
 4751 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4752 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 113


 4753 07e8 2C49     		ldr	r1, .L342+28
 4754 07ea 3420     		movs	r0, #52
 4755 07ec 00FB02F2 		mul	r2, r0, r2
 4756 07f0 0A44     		add	r2, r2, r1
 4757 07f2 1268     		ldr	r2, [r2]
 4758 07f4 2B49     		ldr	r1, .L342+36
 4759 07f6 1B01     		lsls	r3, r3, #4
 4760 07f8 0B44     		add	r3, r3, r1
 4761 07fa 1A60     		str	r2, [r3]
1525:..\src/interruptions.c ****                 
1526:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4762              		.loc 1 1526 0
 4763 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4764 07fe 2A4A     		ldr	r2, .L342+40
 4765 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4766 0804 FA2B     		cmp	r3, #250
 4767 0806 11D1     		bne	.L316
1527:..\src/interruptions.c ****                     // To do only once
1528:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4768              		.loc 1 1528 0
 4769 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4770 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4771 0810 2249     		ldr	r1, .L342+28
 4772 0812 3420     		movs	r0, #52
 4773 0814 00FB02F2 		mul	r2, r0, r2
 4774 0818 0A44     		add	r2, r2, r1
 4775 081a 0C32     		adds	r2, r2, #12
 4776 081c 1268     		ldr	r2, [r2]
 4777 081e 1F49     		ldr	r1, .L342+28
 4778 0820 3420     		movs	r0, #52
 4779 0822 00FB03F3 		mul	r3, r0, r3
 4780 0826 0B44     		add	r3, r3, r1
 4781 0828 1433     		adds	r3, r3, #20
 4782 082a 1A60     		str	r2, [r3]
 4783              	.L316:
1529:..\src/interruptions.c ****                 }
1530:..\src/interruptions.c ****                 pwm_input = 0;            
 4784              		.loc 1 1530 0
 4785 082c 0023     		movs	r3, #0
 4786 082e FB64     		str	r3, [r7, #76]
1520:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4787              		.loc 1 1520 0
 4788 0830 04E0     		b	.L312
 4789              	.L313:
1531:..\src/interruptions.c ****             }
1532:..\src/interruptions.c ****         }
1533:..\src/interruptions.c ****         else {
1534:..\src/interruptions.c ****             position_counter[idx] = 0;
 4790              		.loc 1 1534 0
 4791 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4792 0834 1C4A     		ldr	r2, .L342+40
 4793 0836 0021     		movs	r1, #0
 4794 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 4795              	.L312:
1535:..\src/interruptions.c ****         }
1536:..\src/interruptions.c ****     }
1537:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 114


1538:..\src/interruptions.c ****     
1539:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1540:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 4796              		.loc 1 1540 0
 4797 083c 7B6C     		ldr	r3, [r7, #68]
 4798 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4799 0842 022B     		cmp	r3, #2
 4800 0844 3BD1     		bne	.L317
1541:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1542:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 4801              		.loc 1 1542 0
 4802 0846 FB6C     		ldr	r3, [r7, #76]
 4803 0848 002B     		cmp	r3, #0
 4804 084a B8BF     		it	lt
 4805 084c 5B42     		rsblt	r3, r3, #0
 4806 084e 40F68C22 		movw	r2, #2700
 4807 0852 9342     		cmp	r3, r2
 4808 0854 07DD     		ble	.L318
1543:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 4809              		.loc 1 1543 0
 4810 0856 FB6C     		ldr	r3, [r7, #76]
 4811 0858 002B     		cmp	r3, #0
 4812 085a 02DB     		blt	.L319
 4813              		.loc 1 1543 0 is_stmt 0 discriminator 1
 4814 085c 40F68C23 		movw	r3, #2700
 4815 0860 00E0     		b	.L320
 4816              	.L319:
 4817              		.loc 1 1543 0 discriminator 2
 4818 0862 144B     		ldr	r3, .L342+52
 4819              	.L320:
 4820              		.loc 1 1543 0 discriminator 4
 4821 0864 FB64     		str	r3, [r7, #76]
 4822              	.L318:
1544:..\src/interruptions.c ****         }
1545:..\src/interruptions.c ****         
1546:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 4823              		.loc 1 1546 0 is_stmt 1
 4824 0866 FB6C     		ldr	r3, [r7, #76]
 4825 0868 13F1C70F 		cmn	r3, #199
 4826 086c 27DB     		blt	.L317
 4827              		.loc 1 1546 0 is_stmt 0 discriminator 1
 4828 086e FB6C     		ldr	r3, [r7, #76]
 4829 0870 C72B     		cmp	r3, #199
 4830 0872 24DC     		bgt	.L317
1547:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 4831              		.loc 1 1547 0 is_stmt 1
 4832 0874 FB6C     		ldr	r3, [r7, #76]
 4833 0876 002B     		cmp	r3, #0
 4834 0878 1EDB     		blt	.L321
 4835              		.loc 1 1547 0 is_stmt 0 discriminator 1
 4836 087a C823     		movs	r3, #200
 4837 087c 1EE0     		b	.L322
 4838              	.L343:
 4839 087e 00BF     		.align	2
 4840              	.L342:
 4841 0880 57F4FFFF 		.word	-2985
 4842 0884 81207D05 		.word	92086401
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 115


 4843 0888 00000000 		.word	dev_pwm_limit
 4844 088c 1F85EB51 		.word	1374389535
 4845 0890 D0000000 		.word	prev_pwm.10362
 4846 0894 00000000 		.word	pwm_sign
 4847 0898 00000000 		.word	g_measOld
 4848 089c 00000000 		.word	g_meas
 4849 08a0 00000000 		.word	g_refOld
 4850 08a4 00000000 		.word	g_ref
 4851 08a8 D8000000 		.word	position_counter.10364
 4852 08ac 00000000 		.word	change_ext_ref_flag
 4853 08b0 00000000 		.word	g_refNew
 4854 08b4 74F5FFFF 		.word	-2700
 4855              	.L321:
 4856              		.loc 1 1547 0 discriminator 2
 4857 08b8 6FF0C703 		mvn	r3, #199
 4858              	.L322:
 4859              		.loc 1 1547 0 discriminator 4
 4860 08bc FB64     		str	r3, [r7, #76]
 4861              	.L317:
1548:..\src/interruptions.c ****         }
1549:..\src/interruptions.c ****        
1550:..\src/interruptions.c ****     }
1551:..\src/interruptions.c ****     
1552:..\src/interruptions.c ****     // Set motor direction and write pwm value
1553:..\src/interruptions.c ****     switch (idx) {
 4862              		.loc 1 1553 0 is_stmt 1
 4863 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4864 08c0 002B     		cmp	r3, #0
 4865 08c2 02D0     		beq	.L324
 4866 08c4 012B     		cmp	r3, #1
 4867 08c6 26D0     		beq	.L325
1554:..\src/interruptions.c ****         case 0:         // Motor 1
1555:..\src/interruptions.c ****             if (motor_dir[idx])
1556:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1557:..\src/interruptions.c ****             else
1558:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1559:..\src/interruptions.c ****             
1560:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1561:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1562:..\src/interruptions.c ****             }
1563:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1564:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1565:..\src/interruptions.c ****             }
1566:..\src/interruptions.c ****             
1567:..\src/interruptions.c ****             break;
1568:..\src/interruptions.c ****         case 1:         // Motor 2
1569:..\src/interruptions.c ****             
1570:..\src/interruptions.c ****             if (motor_dir[idx])
1571:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1572:..\src/interruptions.c ****             else
1573:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1574:..\src/interruptions.c ****             
1575:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1576:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1577:..\src/interruptions.c ****             }
1578:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1579:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 116


1580:..\src/interruptions.c ****             }
1581:..\src/interruptions.c ****             
1582:..\src/interruptions.c ****             break;
1583:..\src/interruptions.c ****         default:
1584:..\src/interruptions.c ****             break;
 4868              		.loc 1 1584 0
 4869 08c8 4BE0     		b	.L330
 4870              	.L324:
1555:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4871              		.loc 1 1555 0
 4872 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4873 08cc 274A     		ldr	r2, .L344
 4874 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4875 08d0 002B     		cmp	r3, #0
 4876 08d2 03D0     		beq	.L326
1556:..\src/interruptions.c ****             else
 4877              		.loc 1 1556 0
 4878 08d4 0120     		movs	r0, #1
 4879 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4880 08da 02E0     		b	.L327
 4881              	.L326:
1558:..\src/interruptions.c ****             
 4882              		.loc 1 1558 0
 4883 08dc 0020     		movs	r0, #0
 4884 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4885              	.L327:
1560:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 4886              		.loc 1 1560 0
 4887 08e2 7B6C     		ldr	r3, [r7, #68]
 4888 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4889 08e8 012B     		cmp	r3, #1
 4890 08ea 0BD1     		bne	.L328
1561:..\src/interruptions.c ****             }
 4891              		.loc 1 1561 0
 4892 08ec FB6C     		ldr	r3, [r7, #76]
 4893 08ee 002B     		cmp	r3, #0
 4894 08f0 B8BF     		it	lt
 4895 08f2 5B42     		rsblt	r3, r3, #0
 4896 08f4 DBB2     		uxtb	r3, r3
 4897 08f6 C3F16403 		rsb	r3, r3, #100
 4898 08fa DBB2     		uxtb	r3, r3
 4899 08fc 1846     		mov	r0, r3
 4900 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1567:..\src/interruptions.c ****         case 1:         // Motor 2
 4901              		.loc 1 1567 0
 4902 0902 2EE0     		b	.L330
 4903              	.L328:
1564:..\src/interruptions.c ****             }
 4904              		.loc 1 1564 0
 4905 0904 FB6C     		ldr	r3, [r7, #76]
 4906 0906 002B     		cmp	r3, #0
 4907 0908 B8BF     		it	lt
 4908 090a 5B42     		rsblt	r3, r3, #0
 4909 090c DBB2     		uxtb	r3, r3
 4910 090e 1846     		mov	r0, r3
 4911 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1567:..\src/interruptions.c ****         case 1:         // Motor 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 117


 4912              		.loc 1 1567 0
 4913 0914 25E0     		b	.L330
 4914              	.L325:
1570:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4915              		.loc 1 1570 0
 4916 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4917 0918 144A     		ldr	r2, .L344
 4918 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4919 091c 002B     		cmp	r3, #0
 4920 091e 03D0     		beq	.L331
1571:..\src/interruptions.c ****             else
 4921              		.loc 1 1571 0
 4922 0920 0120     		movs	r0, #1
 4923 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4924 0926 02E0     		b	.L332
 4925              	.L331:
1573:..\src/interruptions.c ****             
 4926              		.loc 1 1573 0
 4927 0928 0020     		movs	r0, #0
 4928 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4929              	.L332:
1575:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 4930              		.loc 1 1575 0
 4931 092e 7B6C     		ldr	r3, [r7, #68]
 4932 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4933 0934 012B     		cmp	r3, #1
 4934 0936 0BD1     		bne	.L333
1576:..\src/interruptions.c ****             }
 4935              		.loc 1 1576 0
 4936 0938 FB6C     		ldr	r3, [r7, #76]
 4937 093a 002B     		cmp	r3, #0
 4938 093c B8BF     		it	lt
 4939 093e 5B42     		rsblt	r3, r3, #0
 4940 0940 DBB2     		uxtb	r3, r3
 4941 0942 C3F16403 		rsb	r3, r3, #100
 4942 0946 DBB2     		uxtb	r3, r3
 4943 0948 1846     		mov	r0, r3
 4944 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1582:..\src/interruptions.c ****         default:
 4945              		.loc 1 1582 0
 4946 094e 07E0     		b	.L337
 4947              	.L333:
1579:..\src/interruptions.c ****             }
 4948              		.loc 1 1579 0
 4949 0950 FB6C     		ldr	r3, [r7, #76]
 4950 0952 002B     		cmp	r3, #0
 4951 0954 B8BF     		it	lt
 4952 0956 5B42     		rsblt	r3, r3, #0
 4953 0958 DBB2     		uxtb	r3, r3
 4954 095a 1846     		mov	r0, r3
 4955 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4956              	.L337:
1582:..\src/interruptions.c ****         default:
 4957              		.loc 1 1582 0
 4958 0960 00BF     		nop
 4959              	.L330:
1585:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 118


1586:..\src/interruptions.c ****     
1587:..\src/interruptions.c **** }
 4960              		.loc 1 1587 0
 4961 0962 00BF     		nop
 4962 0964 5437     		adds	r7, r7, #84
 4963              		.cfi_def_cfa_offset 12
 4964 0966 BD46     		mov	sp, r7
 4965              		.cfi_def_cfa_register 13
 4966              		@ sp needed
 4967 0968 90BD     		pop	{r4, r7, pc}
 4968              	.L345:
 4969 096a 00BF     		.align	2
 4970              	.L344:
 4971 096c BC000000 		.word	motor_dir.10363
 4972              		.cfi_endproc
 4973              	.LFE72:
 4974              		.size	motor_control_generic, .-motor_control_generic
 4975              		.section	.text.vibrotactile_control_generic,"ax",%progbits
 4976              		.align	2
 4977              		.global	vibrotactile_control_generic
 4978              		.thumb
 4979              		.thumb_func
 4980              		.type	vibrotactile_control_generic, %function
 4981              	vibrotactile_control_generic:
 4982              	.LFB73:
1588:..\src/interruptions.c **** 
1589:..\src/interruptions.c **** //==============================================================================
1590:..\src/interruptions.c **** //                                                  VIBROTACTILE CONTROL GENERIC
1591:..\src/interruptions.c **** //==============================================================================
1592:..\src/interruptions.c **** void vibrotactile_control_generic(uint8 idx) {
 4983              		.loc 1 1592 0
 4984              		.cfi_startproc
 4985              		@ args = 0, pretend = 0, frame = 16
 4986              		@ frame_needed = 1, uses_anonymous_args = 0
 4987 0000 80B5     		push	{r7, lr}
 4988              		.cfi_def_cfa_offset 8
 4989              		.cfi_offset 7, -8
 4990              		.cfi_offset 14, -4
 4991 0002 84B0     		sub	sp, sp, #16
 4992              		.cfi_def_cfa_offset 24
 4993 0004 00AF     		add	r7, sp, #0
 4994              		.cfi_def_cfa_register 7
 4995 0006 0346     		mov	r3, r0
 4996 0008 FB71     		strb	r3, [r7, #7]
1593:..\src/interruptions.c ****     uint8 i;
1594:..\src/interruptions.c ****     int16 CYDATA pwm_input = 0;
 4997              		.loc 1 1594 0
 4998 000a 0023     		movs	r3, #0
 4999 000c FB81     		strh	r3, [r7, #14]	@ movhi
1595:..\src/interruptions.c **** 
1596:..\src/interruptions.c ****     // Static Variables
1597:..\src/interruptions.c ****    
1598:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS]; 
1599:..\src/interruptions.c **** 
1600:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1601:..\src/interruptions.c **** 
1602:..\src/interruptions.c ****     pwm_input = g_ref_vibrotactile[idx].pwm;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 119


 5000              		.loc 1 1602 0
 5001 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5002 0010 2F4A     		ldr	r2, .L361
 5003 0012 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 5004 0016 FB81     		strh	r3, [r7, #14]	@ movhi
1603:..\src/interruptions.c **** 
1604:..\src/interruptions.c ****     if (pwm_input > 0) 
 5005              		.loc 1 1604 0
 5006 0018 B7F90E30 		ldrsh	r3, [r7, #14]
 5007 001c 002B     		cmp	r3, #0
 5008 001e 04DD     		ble	.L347
1605:..\src/interruptions.c ****         motor_dir[idx] = TRUE;
 5009              		.loc 1 1605 0
 5010 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5011 0022 2C4A     		ldr	r2, .L361+4
 5012 0024 0121     		movs	r1, #1
 5013 0026 D154     		strb	r1, [r2, r3]
 5014 0028 03E0     		b	.L348
 5015              	.L347:
1606:..\src/interruptions.c ****     else 
1607:..\src/interruptions.c ****         motor_dir[idx] = FALSE;
 5016              		.loc 1 1607 0
 5017 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5018 002c 294A     		ldr	r2, .L361+4
 5019 002e 0021     		movs	r1, #0
 5020 0030 D154     		strb	r1, [r2, r3]
 5021              	.L348:
1608:..\src/interruptions.c ****         
1609:..\src/interruptions.c ****     if(pwm_input > PWM_MAX_VALUE_DC) 
 5022              		.loc 1 1609 0
 5023 0032 B7F90E30 		ldrsh	r3, [r7, #14]
 5024 0036 642B     		cmp	r3, #100
 5025 0038 01DD     		ble	.L349
1610:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 5026              		.loc 1 1610 0
 5027 003a 6423     		movs	r3, #100
 5028 003c FB81     		strh	r3, [r7, #14]	@ movhi
 5029              	.L349:
1611:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 5030              		.loc 1 1611 0
 5031 003e B7F90E30 		ldrsh	r3, [r7, #14]
 5032 0042 13F1640F 		cmn	r3, #100
 5033 0046 02DA     		bge	.L350
1612:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 5034              		.loc 1 1612 0
 5035 0048 4FF69C73 		movw	r3, #65436
 5036 004c FB81     		strh	r3, [r7, #14]	@ movhi
 5037              	.L350:
1613:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5038              		.loc 1 1613 0
 5039 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5040 0050 B7F90E20 		ldrsh	r2, [r7, #14]
 5041 0054 002A     		cmp	r2, #0
 5042 0056 01DB     		blt	.L351
 5043              		.loc 1 1613 0 is_stmt 0 discriminator 1
 5044 0058 0121     		movs	r1, #1
 5045 005a 01E0     		b	.L352
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 120


 5046              	.L351:
 5047              		.loc 1 1613 0 discriminator 2
 5048 005c 4FF0FF31 		mov	r1, #-1
 5049              	.L352:
 5050              		.loc 1 1613 0 discriminator 4
 5051 0060 1D4A     		ldr	r2, .L361+8
 5052 0062 D154     		strb	r1, [r2, r3]
1614:..\src/interruptions.c ****  
1615:..\src/interruptions.c ****     // Set motor direction and write pwm value
1616:..\src/interruptions.c ****     switch (idx) {
 5053              		.loc 1 1616 0 is_stmt 1 discriminator 4
 5054 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5055 0066 002B     		cmp	r3, #0
 5056 0068 02D0     		beq	.L354
 5057 006a 012B     		cmp	r3, #1
 5058 006c 16D0     		beq	.L355
1617:..\src/interruptions.c ****         case 0:         // Motor 1
1618:..\src/interruptions.c ****         
1619:..\src/interruptions.c ****             if (motor_dir[idx])
1620:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
1621:..\src/interruptions.c ****             else
1622:..\src/interruptions.c ****                 VT1_DIR_Write(0x01);
1623:..\src/interruptions.c ****          
1624:..\src/interruptions.c ****                PWM_VT_WriteCompare1(abs(pwm_input));    
1625:..\src/interruptions.c ****             
1626:..\src/interruptions.c ****             break;
1627:..\src/interruptions.c ****         case 1:         // Motor 2
1628:..\src/interruptions.c ****             
1629:..\src/interruptions.c ****             if (motor_dir[idx])
1630:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);  // SE MOTOR_DIR_2 è messo a 0 il toast non vibra (amplificat
1631:..\src/interruptions.c ****                 
1632:..\src/interruptions.c ****             else
1633:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);
1634:..\src/interruptions.c ****             
1635:..\src/interruptions.c ****             PWM_VT_WriteCompare2(abs(pwm_input));    
1636:..\src/interruptions.c ****         break;
1637:..\src/interruptions.c ****     }
1638:..\src/interruptions.c ****        
1639:..\src/interruptions.c ****     
1640:..\src/interruptions.c **** }
 5059              		.loc 1 1640 0 discriminator 4
 5060 006e 2BE0     		b	.L360
 5061              	.L354:
1619:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 5062              		.loc 1 1619 0
 5063 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5064 0072 184A     		ldr	r2, .L361+4
 5065 0074 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5066 0076 002B     		cmp	r3, #0
 5067 0078 03D0     		beq	.L356
1620:..\src/interruptions.c ****             else
 5068              		.loc 1 1620 0
 5069 007a 0020     		movs	r0, #0
 5070 007c FFF7FEFF 		bl	VT1_DIR_Write
 5071 0080 02E0     		b	.L357
 5072              	.L356:
1622:..\src/interruptions.c ****          
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 121


 5073              		.loc 1 1622 0
 5074 0082 0120     		movs	r0, #1
 5075 0084 FFF7FEFF 		bl	VT1_DIR_Write
 5076              	.L357:
1624:..\src/interruptions.c ****             
 5077              		.loc 1 1624 0
 5078 0088 B7F90E30 		ldrsh	r3, [r7, #14]
 5079 008c 002B     		cmp	r3, #0
 5080 008e B8BF     		it	lt
 5081 0090 5B42     		rsblt	r3, r3, #0
 5082 0092 9BB2     		uxth	r3, r3
 5083 0094 1846     		mov	r0, r3
 5084 0096 FFF7FEFF 		bl	PWM_VT_WriteCompare1
1626:..\src/interruptions.c ****         case 1:         // Motor 2
 5085              		.loc 1 1626 0
 5086 009a 15E0     		b	.L353
 5087              	.L355:
1629:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);  // SE MOTOR_DIR_2 è messo a 0 il toast non vibra (amplificat
 5088              		.loc 1 1629 0
 5089 009c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5090 009e 0D4A     		ldr	r2, .L361+4
 5091 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5092 00a2 002B     		cmp	r3, #0
 5093 00a4 03D0     		beq	.L358
1630:..\src/interruptions.c ****                 
 5094              		.loc 1 1630 0
 5095 00a6 0120     		movs	r0, #1
 5096 00a8 FFF7FEFF 		bl	VT2_DIR_Write
 5097 00ac 02E0     		b	.L359
 5098              	.L358:
1633:..\src/interruptions.c ****             
 5099              		.loc 1 1633 0
 5100 00ae 0020     		movs	r0, #0
 5101 00b0 FFF7FEFF 		bl	VT2_DIR_Write
 5102              	.L359:
1635:..\src/interruptions.c ****         break;
 5103              		.loc 1 1635 0
 5104 00b4 B7F90E30 		ldrsh	r3, [r7, #14]
 5105 00b8 002B     		cmp	r3, #0
 5106 00ba B8BF     		it	lt
 5107 00bc 5B42     		rsblt	r3, r3, #0
 5108 00be 9BB2     		uxth	r3, r3
 5109 00c0 1846     		mov	r0, r3
 5110 00c2 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1636:..\src/interruptions.c ****     }
 5111              		.loc 1 1636 0
 5112 00c6 00BF     		nop
 5113              	.L353:
 5114              	.L360:
 5115              		.loc 1 1640 0
 5116 00c8 00BF     		nop
 5117 00ca 1037     		adds	r7, r7, #16
 5118              		.cfi_def_cfa_offset 8
 5119 00cc BD46     		mov	sp, r7
 5120              		.cfi_def_cfa_register 13
 5121              		@ sp needed
 5122 00ce 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 122


 5123              	.L362:
 5124              		.align	2
 5125              	.L361:
 5126 00d0 00000000 		.word	g_ref_vibrotactile
 5127 00d4 E0000000 		.word	motor_dir.10379
 5128 00d8 00000000 		.word	pwm_sign
 5129              		.cfi_endproc
 5130              	.LFE73:
 5131              		.size	vibrotactile_control_generic, .-vibrotactile_control_generic
 5132              		.global	__aeabi_fcmpeq
 5133              		.global	__aeabi_fmul
 5134              		.global	__aeabi_f2iz
 5135              		.global	__aeabi_fcmplt
 5136              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5137              		.align	2
 5138              		.global	encoder_reading_SPI
 5139              		.thumb
 5140              		.thumb_func
 5141              		.type	encoder_reading_SPI, %function
 5142              	encoder_reading_SPI:
 5143              	.LFB74:
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c **** //==============================================================================
1643:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1644:..\src/interruptions.c **** //==============================================================================
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5144              		.loc 1 1646 0
 5145              		.cfi_startproc
 5146              		@ args = 0, pretend = 0, frame = 48
 5147              		@ frame_needed = 1, uses_anonymous_args = 0
 5148 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5149              		.cfi_def_cfa_offset 20
 5150              		.cfi_offset 4, -20
 5151              		.cfi_offset 5, -16
 5152              		.cfi_offset 6, -12
 5153              		.cfi_offset 7, -8
 5154              		.cfi_offset 14, -4
 5155 0002 8FB0     		sub	sp, sp, #60
 5156              		.cfi_def_cfa_offset 80
 5157 0004 02AF     		add	r7, sp, #8
 5158              		.cfi_def_cfa 7, 72
 5159 0006 0346     		mov	r3, r0
 5160 0008 0A46     		mov	r2, r1
 5161 000a FB71     		strb	r3, [r7, #7]
 5162 000c 1346     		mov	r3, r2
 5163 000e BB71     		strb	r3, [r7, #6]
1647:..\src/interruptions.c **** 
1648:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5164              		.loc 1 1648 0
 5165 0010 0023     		movs	r3, #0
 5166 0012 87F82F30 		strb	r3, [r7, #47]
1649:..\src/interruptions.c ****     
1650:..\src/interruptions.c ****     // Encoder Variables  
1651:..\src/interruptions.c ****     uint8 jj;
1652:..\src/interruptions.c ****      
1653:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 123


1654:..\src/interruptions.c ****     int16 tmp_value_encoder;
1655:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1656:..\src/interruptions.c ****     int32 value_encoder;
1657:..\src/interruptions.c ****     int32 speed_encoder;
1658:..\src/interruptions.c ****     int32 value_diff;
1659:..\src/interruptions.c **** 	int8 init_rot = 0;
 5167              		.loc 1 1659 0
 5168 0016 0023     		movs	r3, #0
 5169 0018 87F82730 		strb	r3, [r7, #39]
1660:..\src/interruptions.c **** 
1661:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1662:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1663:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1664:..\src/interruptions.c ****     
1665:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1666:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1667:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1668:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1669:..\src/interruptions.c **** 
1670:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1671:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1672:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1673:..\src/interruptions.c ****     
1674:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5170              		.loc 1 1674 0
 5171 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5172 001e 8D4A     		ldr	r2, .L400
 5173 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5174 0022 002B     		cmp	r3, #0
 5175 0024 19D0     		beq	.L364
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5176              		.loc 1 1675 0
 5177 0026 0323     		movs	r3, #3
 5178 0028 87F82E30 		strb	r3, [r7, #46]
 5179 002c 0AE0     		b	.L365
 5180              	.L366:
1676:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5181              		.loc 1 1676 0
 5182 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5183 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5184 0034 8848     		ldr	r0, .L400+4
 5185 0036 1346     		mov	r3, r2
 5186 0038 5B00     		lsls	r3, r3, #1
 5187 003a 1344     		add	r3, r3, r2
 5188 003c 0B44     		add	r3, r3, r1
 5189 003e 0022     		movs	r2, #0
 5190 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5191              	.L365:
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5192              		.loc 1 1675 0 discriminator 1
 5193 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5194 0048 5A1E     		subs	r2, r3, #1
 5195 004a 87F82E20 		strb	r2, [r7, #46]
 5196 004e 002B     		cmp	r3, #0
 5197 0050 EDD1     		bne	.L366
1677:..\src/interruptions.c ****         
1678:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 124


 5198              		.loc 1 1678 0
 5199 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5200 0054 7F4A     		ldr	r2, .L400
 5201 0056 0021     		movs	r1, #0
 5202 0058 D154     		strb	r1, [r2, r3]
 5203              	.L364:
1679:..\src/interruptions.c ****     }
1680:..\src/interruptions.c **** 
1681:..\src/interruptions.c ****     //======================================================     reading sensors
1682:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5204              		.loc 1 1682 0
 5205 005a 0023     		movs	r3, #0
 5206 005c 87F82F30 		strb	r3, [r7, #47]
 5207 0060 0DE0     		b	.L367
 5208              	.L368:
1683:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5209              		.loc 1 1683 0 discriminator 3
 5210 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5211 0066 9B00     		lsls	r3, r3, #2
 5212 0068 07F13002 		add	r2, r7, #48
 5213 006c 1344     		add	r3, r3, r2
 5214 006e 0022     		movs	r2, #0
 5215 0070 43F8282C 		str	r2, [r3, #-40]
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5216              		.loc 1 1682 0 discriminator 3
 5217 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5218 0078 0133     		adds	r3, r3, #1
 5219 007a 87F82F30 		strb	r3, [r7, #47]
 5220              	.L367:
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5221              		.loc 1 1682 0 is_stmt 0 discriminator 1
 5222 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5223 0082 022B     		cmp	r3, #2
 5224 0084 EDD9     		bls	.L368
 5225              	.LBB9:
1684:..\src/interruptions.c ****     }   
1685:..\src/interruptions.c ****     
1686:..\src/interruptions.c ****     
1687:..\src/interruptions.c ****                                                                         //CS1 for left hand
1688:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5226              		.loc 1 1688 0 is_stmt 1
 5227 0086 0023     		movs	r3, #0
 5228 0088 3B62     		str	r3, [r7, #32]
 5229 008a 2EE0     		b	.L369
 5230              	.L371:
1689:..\src/interruptions.c ****         
1690:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1691:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5231              		.loc 1 1691 0
 5232 008c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5233 008e 7349     		ldr	r1, .L400+8
 5234 0090 1346     		mov	r3, r2
 5235 0092 5B00     		lsls	r3, r3, #1
 5236 0094 1344     		add	r3, r3, r2
 5237 0096 1B01     		lsls	r3, r3, #4
 5238 0098 CA18     		adds	r2, r1, r3
 5239 009a 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 125


 5240 009c 1344     		add	r3, r3, r2
 5241 009e 03F2B113 		addw	r3, r3, #433
 5242 00a2 1B78     		ldrb	r3, [r3]
 5243 00a4 87F82F30 		strb	r3, [r7, #47]
1692:..\src/interruptions.c ****         
1693:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5244              		.loc 1 1693 0
 5245 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5246 00aa 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5247 00ae 6C48     		ldr	r0, .L400+12
 5248 00b0 1346     		mov	r3, r2
 5249 00b2 9B00     		lsls	r3, r3, #2
 5250 00b4 1344     		add	r3, r3, r2
 5251 00b6 0344     		add	r3, r3, r0
 5252 00b8 0B44     		add	r3, r3, r1
 5253 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5254 00bc 0F2B     		cmp	r3, #15
 5255 00be 11D9     		bls	.L370
1694:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5256              		.loc 1 1694 0
 5257 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5258 00c2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5259 00c6 6748     		ldr	r0, .L400+16
 5260 00c8 1346     		mov	r3, r2
 5261 00ca 9B00     		lsls	r3, r3, #2
 5262 00cc 1344     		add	r3, r3, r2
 5263 00ce 0B44     		add	r3, r3, r1
 5264 00d0 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5265 00d4 1A46     		mov	r2, r3
 5266 00d6 3B6A     		ldr	r3, [r7, #32]
 5267 00d8 9B00     		lsls	r3, r3, #2
 5268 00da 07F13001 		add	r1, r7, #48
 5269 00de 0B44     		add	r3, r3, r1
 5270 00e0 43F8282C 		str	r2, [r3, #-40]
 5271              	.L370:
1688:..\src/interruptions.c ****         
 5272              		.loc 1 1688 0 discriminator 2
 5273 00e4 3B6A     		ldr	r3, [r7, #32]
 5274 00e6 0133     		adds	r3, r3, #1
 5275 00e8 3B62     		str	r3, [r7, #32]
 5276              	.L369:
1688:..\src/interruptions.c ****         
 5277              		.loc 1 1688 0 is_stmt 0 discriminator 1
 5278 00ea 3B6A     		ldr	r3, [r7, #32]
 5279 00ec 022B     		cmp	r3, #2
 5280 00ee CDDD     		ble	.L371
 5281              	.LBE9:
1695:..\src/interruptions.c ****         }
1696:..\src/interruptions.c ****     }
1697:..\src/interruptions.c ****     
1698:..\src/interruptions.c ****     // S = SIGN BIT
1699:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1700:..\src/interruptions.c ****     // 0 = 0 BIT
1701:..\src/interruptions.c ****     // C = CONTROL BIT
1702:..\src/interruptions.c ****     
1703:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5282              		.loc 1 1703 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 126


 5283 00f0 0023     		movs	r3, #0
 5284 00f2 87F82F30 		strb	r3, [r7, #47]
 5285 00f6 32E3     		b	.L372
 5286              	.L393:
1704:..\src/interruptions.c ****         
1705:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5287              		.loc 1 1705 0
 5288 00f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5289 00fa 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5290 00fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5291 0102 9B00     		lsls	r3, r3, #2
 5292 0104 07F13001 		add	r1, r7, #48
 5293 0108 0B44     		add	r3, r3, r1
 5294 010a 53F8281C 		ldr	r1, [r3, #-40]
 5295 010e 564C     		ldr	r4, .L400+20
 5296 0110 1346     		mov	r3, r2
 5297 0112 9B00     		lsls	r3, r3, #2
 5298 0114 1344     		add	r3, r3, r2
 5299 0116 0344     		add	r3, r3, r0
 5300 0118 44F82310 		str	r1, [r4, r3, lsl #2]
1706:..\src/interruptions.c ****         
1707:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5301              		.loc 1 1707 0
 5302 011c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5303 0120 9B00     		lsls	r3, r3, #2
 5304 0122 07F13002 		add	r2, r7, #48
 5305 0126 1344     		add	r3, r3, r2
 5306 0128 53F8283C 		ldr	r3, [r3, #-40]
 5307 012c 99B2     		uxth	r1, r3
 5308 012e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5309 0130 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5310 0134 4D4C     		ldr	r4, .L400+24
 5311 0136 1346     		mov	r3, r2
 5312 0138 5B00     		lsls	r3, r3, #1
 5313 013a 1344     		add	r3, r3, r2
 5314 013c 9B00     		lsls	r3, r3, #2
 5315 013e 0344     		add	r3, r3, r0
 5316 0140 6633     		adds	r3, r3, #102
 5317 0142 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5318 0146 9BB2     		uxth	r3, r3
 5319 0148 CB1A     		subs	r3, r1, r3
 5320 014a 9BB2     		uxth	r3, r3
 5321 014c BB85     		strh	r3, [r7, #44]	@ movhi
1708:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5322              		.loc 1 1708 0
 5323 014e B7F92C30 		ldrsh	r3, [r7, #44]
 5324 0152 002B     		cmp	r3, #0
 5325 0154 04DA     		bge	.L373
1709:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5326              		.loc 1 1709 0
 5327 0156 BB8D     		ldrh	r3, [r7, #44]
 5328 0158 03F58053 		add	r3, r3, #4096
 5329 015c 9BB2     		uxth	r3, r3
 5330 015e BB85     		strh	r3, [r7, #44]	@ movhi
 5331              	.L373:
1710:..\src/interruptions.c ****         }       // Range [0, 4096]
1711:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 127


1712:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5332              		.loc 1 1712 0
 5333 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5334 0164 B3F5006F 		cmp	r3, #2048
 5335 0168 04DB     		blt	.L374
1713:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5336              		.loc 1 1713 0
 5337 016a BB8D     		ldrh	r3, [r7, #44]
 5338 016c A3F58053 		sub	r3, r3, #4096
 5339 0170 9BB2     		uxth	r3, r3
 5340 0172 BB85     		strh	r3, [r7, #44]	@ movhi
 5341              	.L374:
1714:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1715:..\src/interruptions.c **** 
1716:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5342              		.loc 1 1716 0
 5343 0174 B7F92C30 		ldrsh	r3, [r7, #44]
 5344 0178 1B01     		lsls	r3, r3, #4
 5345 017a FB61     		str	r3, [r7, #28]
1717:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5346              		.loc 1 1717 0
 5347 017c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5348 017e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5349 0182 3B48     		ldr	r0, .L400+28
 5350 0184 1346     		mov	r3, r2
 5351 0186 5B00     		lsls	r3, r3, #1
 5352 0188 1344     		add	r3, r3, r2
 5353 018a 0B44     		add	r3, r3, r1
 5354 018c FA69     		ldr	r2, [r7, #28]
 5355 018e 40F82320 		str	r2, [r0, r3, lsl #2]
1718:..\src/interruptions.c **** 
1719:..\src/interruptions.c ****         // Initialize last_value_encoder
1720:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5356              		.loc 1 1720 0
 5357 0192 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5358 0194 374A     		ldr	r2, .L400+32
 5359 0196 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5360 0198 002B     		cmp	r3, #0
 5361 019a 12D0     		beq	.L375
1721:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5362              		.loc 1 1721 0
 5363 019c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5364 019e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5365 01a2 2D48     		ldr	r0, .L400+4
 5366 01a4 1346     		mov	r3, r2
 5367 01a6 5B00     		lsls	r3, r3, #1
 5368 01a8 1344     		add	r3, r3, r2
 5369 01aa 0B44     		add	r3, r3, r1
 5370 01ac FA69     		ldr	r2, [r7, #28]
 5371 01ae 40F82320 		str	r2, [r0, r3, lsl #2]
1722:..\src/interruptions.c ****             if (index == 2)
 5372              		.loc 1 1722 0
 5373 01b2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5374 01b6 022B     		cmp	r3, #2
 5375 01b8 03D1     		bne	.L375
1723:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5376              		.loc 1 1723 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 128


 5377 01ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5378 01bc 2D4A     		ldr	r2, .L400+32
 5379 01be 0021     		movs	r1, #0
 5380 01c0 D154     		strb	r1, [r2, r3]
 5381              	.L375:
1724:..\src/interruptions.c ****         }
1725:..\src/interruptions.c **** 
1726:..\src/interruptions.c ****         // Take care of rotations
1727:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5382              		.loc 1 1727 0
 5383 01c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5384 01c4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5385 01c8 2348     		ldr	r0, .L400+4
 5386 01ca 1346     		mov	r3, r2
 5387 01cc 5B00     		lsls	r3, r3, #1
 5388 01ce 1344     		add	r3, r3, r2
 5389 01d0 0B44     		add	r3, r3, r1
 5390 01d2 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5391 01d6 FA69     		ldr	r2, [r7, #28]
 5392 01d8 D31A     		subs	r3, r2, r3
 5393 01da BB61     		str	r3, [r7, #24]
1728:..\src/interruptions.c **** 
1729:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1730:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1731:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1732:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1733:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1734:..\src/interruptions.c ****         //                                               |           |
1735:..\src/interruptions.c ****         //                                           24575           -24576
1736:..\src/interruptions.c ****         //                                               |___________|
1737:..\src/interruptions.c ****         //                                                   49152
1738:..\src/interruptions.c **** 
1739:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1740:..\src/interruptions.c ****         // and update the variable only if the difference between
1741:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1742:..\src/interruptions.c **** 
1743:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1744:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1745:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1746:..\src/interruptions.c **** 
1747:..\src/interruptions.c ****         if (value_diff > 49152)
 5394              		.loc 1 1747 0
 5395 01dc BB69     		ldr	r3, [r7, #24]
 5396 01de B3F5404F 		cmp	r3, #49152
 5397 01e2 19DD     		ble	.L376
1748:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5398              		.loc 1 1748 0
 5399 01e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5400 01e6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5401 01ea 2348     		ldr	r0, .L400+36
 5402 01ec 3421     		movs	r1, #52
 5403 01ee 01FB02F1 		mul	r1, r1, r2
 5404 01f2 0144     		add	r1, r1, r0
 5405 01f4 1944     		add	r1, r1, r3
 5406 01f6 1831     		adds	r1, r1, #24
 5407 01f8 91F90010 		ldrsb	r1, [r1]
 5408 01fc C9B2     		uxtb	r1, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 129


 5409 01fe 0139     		subs	r1, r1, #1
 5410 0200 C9B2     		uxtb	r1, r1
 5411 0202 4CB2     		sxtb	r4, r1
 5412 0204 1C49     		ldr	r1, .L400+36
 5413 0206 3420     		movs	r0, #52
 5414 0208 00FB02F2 		mul	r2, r0, r2
 5415 020c 0A44     		add	r2, r2, r1
 5416 020e 1344     		add	r3, r3, r2
 5417 0210 1833     		adds	r3, r3, #24
 5418 0212 2246     		mov	r2, r4
 5419 0214 1A70     		strb	r2, [r3]
 5420 0216 59E0     		b	.L377
 5421              	.L376:
1749:..\src/interruptions.c ****         else{ 
1750:..\src/interruptions.c ****             if (value_diff < -49152)
 5422              		.loc 1 1750 0
 5423 0218 BB69     		ldr	r3, [r7, #24]
 5424 021a 13F5404F 		cmn	r3, #49152
 5425 021e 2DDA     		bge	.L378
1751:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5426              		.loc 1 1751 0
 5427 0220 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5428 0222 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5429 0226 1448     		ldr	r0, .L400+36
 5430 0228 3421     		movs	r1, #52
 5431 022a 01FB02F1 		mul	r1, r1, r2
 5432 022e 0144     		add	r1, r1, r0
 5433 0230 1944     		add	r1, r1, r3
 5434 0232 1831     		adds	r1, r1, #24
 5435 0234 91F90010 		ldrsb	r1, [r1]
 5436 0238 C9B2     		uxtb	r1, r1
 5437 023a 0131     		adds	r1, r1, #1
 5438 023c C9B2     		uxtb	r1, r1
 5439 023e 4CB2     		sxtb	r4, r1
 5440 0240 0D49     		ldr	r1, .L400+36
 5441 0242 3420     		movs	r0, #52
 5442 0244 00FB02F2 		mul	r2, r0, r2
 5443 0248 0A44     		add	r2, r2, r1
 5444 024a 1344     		add	r3, r3, r2
 5445 024c 1833     		adds	r3, r3, #24
 5446 024e 2246     		mov	r2, r4
 5447 0250 1A70     		strb	r2, [r3]
 5448 0252 3BE0     		b	.L377
 5449              	.L401:
 5450              		.align	2
 5451              	.L400:
 5452 0254 00000000 		.word	reset_last_value_flag
 5453 0258 E4000000 		.word	last_value_encoder.10396
 5454 025c 00000000 		.word	c_mem
 5455 0260 00000000 		.word	Encoder_Check
 5456 0264 00000000 		.word	Encoder_Value
 5457 0268 00000000 		.word	data_encoder_raw
 5458 026c 00000000 		.word	g_mem
 5459 0270 FC000000 		.word	comp_value_encoder.10397
 5460 0274 04000000 		.word	only_first_time.10399
 5461 0278 00000000 		.word	g_meas
 5462              	.L378:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 130


1752:..\src/interruptions.c ****             else{
1753:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5463              		.loc 1 1753 0
 5464 027c BB69     		ldr	r3, [r7, #24]
 5465 027e 002B     		cmp	r3, #0
 5466 0280 B8BF     		it	lt
 5467 0282 5B42     		rsblt	r3, r3, #0
 5468 0284 B3F5804F 		cmp	r3, #16384
 5469 0288 20DD     		ble	.L377
1754:..\src/interruptions.c ****                     error[n_line][index]++;
 5470              		.loc 1 1754 0
 5471 028a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5472 028c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5473 0290 9B48     		ldr	r0, .L402
 5474 0292 1346     		mov	r3, r2
 5475 0294 5B00     		lsls	r3, r3, #1
 5476 0296 1344     		add	r3, r3, r2
 5477 0298 0344     		add	r3, r3, r0
 5478 029a 0B44     		add	r3, r3, r1
 5479 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5480 029e 0133     		adds	r3, r3, #1
 5481 02a0 DCB2     		uxtb	r4, r3
 5482 02a2 9748     		ldr	r0, .L402
 5483 02a4 1346     		mov	r3, r2
 5484 02a6 5B00     		lsls	r3, r3, #1
 5485 02a8 1344     		add	r3, r3, r2
 5486 02aa 0344     		add	r3, r3, r0
 5487 02ac 0B44     		add	r3, r3, r1
 5488 02ae 2246     		mov	r2, r4
 5489 02b0 1A70     		strb	r2, [r3]
1755:..\src/interruptions.c ****                                 
1756:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5490              		.loc 1 1756 0
 5491 02b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5492 02b4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5493 02b8 9148     		ldr	r0, .L402
 5494 02ba 1346     		mov	r3, r2
 5495 02bc 5B00     		lsls	r3, r3, #1
 5496 02be 1344     		add	r3, r3, r2
 5497 02c0 0344     		add	r3, r3, r0
 5498 02c2 0B44     		add	r3, r3, r1
 5499 02c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5500 02c6 092B     		cmp	r3, #9
 5501 02c8 40F28882 		bls	.L399
 5502              	.L377:
1757:..\src/interruptions.c ****                         // Discard
1758:..\src/interruptions.c ****                         return;
1759:..\src/interruptions.c ****                 }
1760:..\src/interruptions.c ****             }
1761:..\src/interruptions.c ****         }
1762:..\src/interruptions.c **** 
1763:..\src/interruptions.c ****         error[n_line][index] = 0;
 5503              		.loc 1 1763 0
 5504 02cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5505 02ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5506 02d2 8B48     		ldr	r0, .L402
 5507 02d4 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 131


 5508 02d6 5B00     		lsls	r3, r3, #1
 5509 02d8 1344     		add	r3, r3, r2
 5510 02da 0344     		add	r3, r3, r0
 5511 02dc 0B44     		add	r3, r3, r1
 5512 02de 0022     		movs	r2, #0
 5513 02e0 1A70     		strb	r2, [r3]
1764:..\src/interruptions.c ****         
1765:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5514              		.loc 1 1765 0
 5515 02e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5516 02e4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5517 02e8 8648     		ldr	r0, .L402+4
 5518 02ea 1346     		mov	r3, r2
 5519 02ec 5B00     		lsls	r3, r3, #1
 5520 02ee 1344     		add	r3, r3, r2
 5521 02f0 0B44     		add	r3, r3, r1
 5522 02f2 FA69     		ldr	r2, [r7, #28]
 5523 02f4 40F82320 		str	r2, [r0, r3, lsl #2]
1766:..\src/interruptions.c **** 
1767:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5524              		.loc 1 1767 0
 5525 02f8 FB69     		ldr	r3, [r7, #28]
 5526 02fa BB62     		str	r3, [r7, #40]
1768:..\src/interruptions.c **** 
1769:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5527              		.loc 1 1769 0
 5528 02fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5529 02fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5530 0302 8149     		ldr	r1, .L402+8
 5531 0304 3420     		movs	r0, #52
 5532 0306 00FB02F2 		mul	r2, r0, r2
 5533 030a 0A44     		add	r2, r2, r1
 5534 030c 1344     		add	r3, r3, r2
 5535 030e 1833     		adds	r3, r3, #24
 5536 0310 93F90030 		ldrsb	r3, [r3]
 5537 0314 1B04     		lsls	r3, r3, #16
 5538 0316 BA6A     		ldr	r2, [r7, #40]
 5539 0318 1344     		add	r3, r3, r2
 5540 031a BB62     		str	r3, [r7, #40]
1770:..\src/interruptions.c ****         
1771:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5541              		.loc 1 1771 0
 5542 031c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5543 031e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5544 0322 7A48     		ldr	r0, .L402+12
 5545 0324 1346     		mov	r3, r2
 5546 0326 5B00     		lsls	r3, r3, #1
 5547 0328 1344     		add	r3, r3, r2
 5548 032a 9B00     		lsls	r3, r3, #2
 5549 032c 0B44     		add	r3, r3, r1
 5550 032e 6833     		adds	r3, r3, #104
 5551 0330 9B00     		lsls	r3, r3, #2
 5552 0332 0344     		add	r3, r3, r0
 5553 0334 5B68     		ldr	r3, [r3, #4]	@ float
 5554 0336 4FF07E51 		mov	r1, #1065353216
 5555 033a 1846     		mov	r0, r3
 5556 033c FFF7FEFF 		bl	__aeabi_fcmpeq
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 132


 5557 0340 0346     		mov	r3, r0
 5558 0342 002B     		cmp	r3, #0
 5559 0344 1AD1     		bne	.L380
1772:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5560              		.loc 1 1772 0
 5561 0346 B86A     		ldr	r0, [r7, #40]
 5562 0348 FFF7FEFF 		bl	__aeabi_i2f
 5563 034c 0446     		mov	r4, r0
 5564 034e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5565 0350 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5566 0354 6D48     		ldr	r0, .L402+12
 5567 0356 1346     		mov	r3, r2
 5568 0358 5B00     		lsls	r3, r3, #1
 5569 035a 1344     		add	r3, r3, r2
 5570 035c 9B00     		lsls	r3, r3, #2
 5571 035e 0B44     		add	r3, r3, r1
 5572 0360 6833     		adds	r3, r3, #104
 5573 0362 9B00     		lsls	r3, r3, #2
 5574 0364 0344     		add	r3, r3, r0
 5575 0366 5B68     		ldr	r3, [r3, #4]	@ float
 5576 0368 1946     		mov	r1, r3
 5577 036a 2046     		mov	r0, r4
 5578 036c FFF7FEFF 		bl	__aeabi_fmul
 5579 0370 0346     		mov	r3, r0
 5580 0372 1846     		mov	r0, r3
 5581 0374 FFF7FEFF 		bl	__aeabi_f2iz
 5582 0378 0346     		mov	r3, r0
 5583 037a BB62     		str	r3, [r7, #40]
 5584              	.L380:
1773:..\src/interruptions.c ****         }
1774:..\src/interruptions.c **** 
1775:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5585              		.loc 1 1775 0
 5586 037c 634B     		ldr	r3, .L402+12
 5587 037e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5588 0382 002B     		cmp	r3, #0
 5589 0384 0BD1     		bne	.L382
1776:..\src/interruptions.c ****             // Right / Left hand turn
1777:..\src/interruptions.c ****             if (index == 0) {
 5590              		.loc 1 1777 0
 5591 0386 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5592 038a 002B     		cmp	r3, #0
 5593 038c 07D1     		bne	.L382
1778:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5594              		.loc 1 1778 0
 5595 038e 5F4B     		ldr	r3, .L402+12
 5596 0390 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5597 0394 002B     		cmp	r3, #0
 5598 0396 02D1     		bne	.L382
1779:..\src/interruptions.c ****                     value_encoder *= -1;        
 5599              		.loc 1 1779 0
 5600 0398 BB6A     		ldr	r3, [r7, #40]
 5601 039a 5B42     		negs	r3, r3
 5602 039c BB62     		str	r3, [r7, #40]
 5603              	.L382:
1780:..\src/interruptions.c ****                 }
1781:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 133


1782:..\src/interruptions.c ****         } 
1783:..\src/interruptions.c ****         
1784:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5604              		.loc 1 1784 0
 5605 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5606 03a0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5607 03a4 5848     		ldr	r0, .L402+8
 5608 03a6 1346     		mov	r3, r2
 5609 03a8 5B00     		lsls	r3, r3, #1
 5610 03aa 1344     		add	r3, r3, r2
 5611 03ac 9B00     		lsls	r3, r3, #2
 5612 03ae 1344     		add	r3, r3, r2
 5613 03b0 0B44     		add	r3, r3, r1
 5614 03b2 BA6A     		ldr	r2, [r7, #40]
 5615 03b4 40F82320 		str	r2, [r0, r3, lsl #2]
1785:..\src/interruptions.c ****     
1786:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5616              		.loc 1 1786 0
 5617 03b8 BA6A     		ldr	r2, [r7, #40]
 5618 03ba 1346     		mov	r3, r2
 5619 03bc 9B00     		lsls	r3, r3, #2
 5620 03be 1344     		add	r3, r3, r2
 5621 03c0 5B00     		lsls	r3, r3, #1
 5622 03c2 9918     		adds	r1, r3, r2
 5623 03c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5624 03c6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5625 03ca 514C     		ldr	r4, .L402+16
 5626 03cc 1346     		mov	r3, r2
 5627 03ce 5B00     		lsls	r3, r3, #1
 5628 03d0 1344     		add	r3, r3, r2
 5629 03d2 0344     		add	r3, r3, r0
 5630 03d4 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5631 03d8 6FF01102 		mvn	r2, #17
 5632 03dc 02FB03F3 		mul	r3, r2, r3
 5633 03e0 1944     		add	r1, r1, r3
 5634 03e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5635 03e4 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5636 03e8 4A4C     		ldr	r4, .L402+20
 5637 03ea 1346     		mov	r3, r2
 5638 03ec 5B00     		lsls	r3, r3, #1
 5639 03ee 1344     		add	r3, r3, r2
 5640 03f0 0344     		add	r3, r3, r0
 5641 03f2 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5642 03f6 1346     		mov	r3, r2
 5643 03f8 DB00     		lsls	r3, r3, #3
 5644 03fa 1344     		add	r3, r3, r2
 5645 03fc 1944     		add	r1, r1, r3
 5646 03fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5647 0400 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5648 0404 444C     		ldr	r4, .L402+24
 5649 0406 1346     		mov	r3, r2
 5650 0408 5B00     		lsls	r3, r3, #1
 5651 040a 1344     		add	r3, r3, r2
 5652 040c 0344     		add	r3, r3, r0
 5653 040e 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5654 0412 5B00     		lsls	r3, r3, #1
 5655 0414 C81A     		subs	r0, r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 134


 5656 0416 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5657 041a DB00     		lsls	r3, r3, #3
 5658 041c 3F4A     		ldr	r2, .L402+28
 5659 041e 1344     		add	r3, r3, r2
 5660 0420 1946     		mov	r1, r3
 5661 0422 FFF7FEFF 		bl	filter
 5662 0426 0346     		mov	r3, r0
 5663 0428 1BB2     		sxth	r3, r3
 5664 042a 7B61     		str	r3, [r7, #20]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         //Update current speed
1789:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5665              		.loc 1 1789 0
 5666 042c 7869     		ldr	r0, [r7, #20]
 5667 042e FFF7FEFF 		bl	__aeabi_i2f
 5668 0432 0446     		mov	r4, r0
 5669 0434 3A4B     		ldr	r3, .L402+32
 5670 0436 1B68     		ldr	r3, [r3]	@ float
 5671 0438 3A49     		ldr	r1, .L402+36
 5672 043a 1846     		mov	r0, r3
 5673 043c FFF7FEFF 		bl	__aeabi_fmul
 5674 0440 0346     		mov	r3, r0
 5675 0442 1946     		mov	r1, r3
 5676 0444 2046     		mov	r0, r4
 5677 0446 FFF7FEFF 		bl	__aeabi_fdiv
 5678 044a 0346     		mov	r3, r0
 5679 044c 1846     		mov	r0, r3
 5680 044e FFF7FEFF 		bl	__aeabi_f2iz
 5681 0452 0346     		mov	r3, r0
 5682 0454 7B61     		str	r3, [r7, #20]
1790:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5683              		.loc 1 1790 0
 5684 0456 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5685 0458 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5686 045c 2A48     		ldr	r0, .L402+8
 5687 045e 1346     		mov	r3, r2
 5688 0460 5B00     		lsls	r3, r3, #1
 5689 0462 1344     		add	r3, r3, r2
 5690 0464 9B00     		lsls	r3, r3, #2
 5691 0466 1344     		add	r3, r3, r2
 5692 0468 0B44     		add	r3, r3, r1
 5693 046a 0633     		adds	r3, r3, #6
 5694 046c 9B00     		lsls	r3, r3, #2
 5695 046e 0344     		add	r3, r3, r0
 5696 0470 7A69     		ldr	r2, [r7, #20]
 5697 0472 5A60     		str	r2, [r3, #4]
1791:..\src/interruptions.c **** 
1792:..\src/interruptions.c ****         // update old velocity and acceleration values
1793:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5698              		.loc 1 1793 0
 5699 0474 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5700 0476 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5701 047a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5702 047c 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5703 0480 244D     		ldr	r5, .L402+20
 5704 0482 0B46     		mov	r3, r1
 5705 0484 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 135


 5706 0486 0B44     		add	r3, r3, r1
 5707 0488 2344     		add	r3, r3, r4
 5708 048a 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5709 048e 224C     		ldr	r4, .L402+24
 5710 0490 1346     		mov	r3, r2
 5711 0492 5B00     		lsls	r3, r3, #1
 5712 0494 1344     		add	r3, r3, r2
 5713 0496 0344     		add	r3, r3, r0
 5714 0498 44F82310 		str	r1, [r4, r3, lsl #2]
1794:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5715              		.loc 1 1794 0
 5716 049c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5717 049e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5718 04a2 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5719 04a4 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5720 04a8 194D     		ldr	r5, .L402+16
 5721 04aa 0B46     		mov	r3, r1
 5722 04ac 5B00     		lsls	r3, r3, #1
 5723 04ae 0B44     		add	r3, r3, r1
 5724 04b0 2344     		add	r3, r3, r4
 5725 04b2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5726 04b6 174C     		ldr	r4, .L402+20
 5727 04b8 1346     		mov	r3, r2
 5728 04ba 5B00     		lsls	r3, r3, #1
 5729 04bc 1344     		add	r3, r3, r2
 5730 04be 0344     		add	r3, r3, r0
 5731 04c0 44F82310 		str	r1, [r4, r3, lsl #2]
1795:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5732              		.loc 1 1795 0
 5733 04c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5734 04c6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5735 04ca 1148     		ldr	r0, .L402+16
 5736 04cc 1346     		mov	r3, r2
 5737 04ce 5B00     		lsls	r3, r3, #1
 5738 04d0 1344     		add	r3, r3, r2
 5739 04d2 0B44     		add	r3, r3, r1
 5740 04d4 BA6A     		ldr	r2, [r7, #40]
 5741 04d6 40F82320 		str	r2, [r0, r3, lsl #2]
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1798:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5742              		.loc 1 1798 0
 5743 04da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5744 04dc 124A     		ldr	r2, .L402+40
 5745 04de D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5746 04e0 002B     		cmp	r3, #0
 5747 04e2 40F03781 		bne	.L383
1799:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 5748              		.loc 1 1799 0
 5749 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5750 04e8 104A     		ldr	r2, .L402+44
 5751 04ea D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5752 04ec 352B     		cmp	r3, #53
 5753 04ee 1FD8     		bhi	.L384
1800:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5754              		.loc 1 1800 0
 5755 04f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 136


 5756 04f2 0E4A     		ldr	r2, .L402+44
 5757 04f4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5758 04f6 0132     		adds	r2, r2, #1
 5759 04f8 D1B2     		uxtb	r1, r2
 5760 04fa 0C4A     		ldr	r2, .L402+44
 5761 04fc D154     		strb	r1, [r2, r3]
 5762 04fe 29E1     		b	.L383
 5763              	.L403:
 5764              		.align	2
 5765              	.L402:
 5766 0500 14010000 		.word	error.10398
 5767 0504 E4000000 		.word	last_value_encoder.10396
 5768 0508 00000000 		.word	g_meas
 5769 050c 00000000 		.word	c_mem
 5770 0510 1C010000 		.word	v_value.10403
 5771 0514 34010000 		.word	vv_value.10404
 5772 0518 4C010000 		.word	vvv_value.10405
 5773 051c 00000000 		.word	filt_vel
 5774 0520 00000000 		.word	cycle_time
 5775 0524 0000C040 		.word	1086324736
 5776 0528 00000000 		.word	pos_reconstruct
 5777 052c 64010000 		.word	one_time_execute.10401
 5778              	.L384:
1801:..\src/interruptions.c ****             else {
1802:..\src/interruptions.c **** 
1803:..\src/interruptions.c ****                 //Double encoder translation
1804:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5779              		.loc 1 1804 0
 5780 0530 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5781 0532 AC49     		ldr	r1, .L404
 5782 0534 1346     		mov	r3, r2
 5783 0536 5B00     		lsls	r3, r3, #1
 5784 0538 1344     		add	r3, r3, r2
 5785 053a 1B01     		lsls	r3, r3, #4
 5786 053c 0B44     		add	r3, r3, r1
 5787 053e 03F5D873 		add	r3, r3, #432
 5788 0542 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5789 0544 002B     		cmp	r3, #0
 5790 0546 5ED0     		beq	.L385
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5791              		.loc 1 1805 0
 5792 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5793 054a A749     		ldr	r1, .L404+4
 5794 054c 1346     		mov	r3, r2
 5795 054e 5B00     		lsls	r3, r3, #1
 5796 0550 1344     		add	r3, r3, r2
 5797 0552 9B00     		lsls	r3, r3, #2
 5798 0554 0B44     		add	r3, r3, r1
 5799 0556 1868     		ldr	r0, [r3]
 5800 0558 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5801 055a A349     		ldr	r1, .L404+4
 5802 055c 1346     		mov	r3, r2
 5803 055e 5B00     		lsls	r3, r3, #1
 5804 0560 1344     		add	r3, r3, r2
 5805 0562 9B00     		lsls	r3, r3, #2
 5806 0564 0B44     		add	r3, r3, r1
 5807 0566 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 137


 5808 0568 1C68     		ldr	r4, [r3]
1806:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5809              		.loc 1 1806 0
 5810 056a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5811 056c 9D49     		ldr	r1, .L404
 5812 056e 1346     		mov	r3, r2
 5813 0570 5B00     		lsls	r3, r3, #1
 5814 0572 1344     		add	r3, r3, r2
 5815 0574 1B01     		lsls	r3, r3, #4
 5816 0576 0B44     		add	r3, r3, r1
 5817 0578 03F2B513 		addw	r3, r3, #437
 5818 057c 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5819              		.loc 1 1805 0
 5820 0580 1D46     		mov	r5, r3
 5821              		.loc 1 1806 0
 5822 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5823 0584 9749     		ldr	r1, .L404
 5824 0586 1346     		mov	r3, r2
 5825 0588 5B00     		lsls	r3, r3, #1
 5826 058a 1344     		add	r3, r3, r2
 5827 058c 1B01     		lsls	r3, r3, #4
 5828 058e 0B44     		add	r3, r3, r1
 5829 0590 03F5DB73 		add	r3, r3, #438
 5830 0594 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5831              		.loc 1 1805 0
 5832 0598 1E46     		mov	r6, r3
 5833              		.loc 1 1806 0
 5834 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5835 059c 9149     		ldr	r1, .L404
 5836 059e 1346     		mov	r3, r2
 5837 05a0 5B00     		lsls	r3, r3, #1
 5838 05a2 1344     		add	r3, r3, r2
 5839 05a4 1B01     		lsls	r3, r3, #4
 5840 05a6 0B44     		add	r3, r3, r1
 5841 05a8 03F2B713 		addw	r3, r3, #439
 5842 05ac 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5843              		.loc 1 1805 0
 5844 05b0 0093     		str	r3, [sp]
 5845 05b2 3346     		mov	r3, r6
 5846 05b4 2A46     		mov	r2, r5
 5847 05b6 2146     		mov	r1, r4
 5848 05b8 FFF7FEFF 		bl	calc_turns_fcn
 5849 05bc 0346     		mov	r3, r0
 5850 05be 87F82730 		strb	r3, [r7, #39]
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c **** 
1809:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5851              		.loc 1 1809 0
 5852 05c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5853 05c4 8749     		ldr	r1, .L404
 5854 05c6 1346     		mov	r3, r2
 5855 05c8 5B00     		lsls	r3, r3, #1
 5856 05ca 1344     		add	r3, r3, r2
 5857 05cc 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 138


 5858 05ce 0B44     		add	r3, r3, r1
 5859 05d0 03F5D273 		add	r3, r3, #420
 5860 05d4 1B68     		ldr	r3, [r3]	@ float
 5861 05d6 4FF00001 		mov	r1, #0
 5862 05da 1846     		mov	r0, r3
 5863 05dc FFF7FEFF 		bl	__aeabi_fcmplt
 5864 05e0 0346     		mov	r3, r0
 5865 05e2 002B     		cmp	r3, #0
 5866 05e4 05D0     		beq	.L386
1810:..\src/interruptions.c ****                         init_rot = -init_rot;
 5867              		.loc 1 1810 0
 5868 05e6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5869 05ea 5B42     		negs	r3, r3
 5870 05ec DBB2     		uxtb	r3, r3
 5871 05ee 87F82730 		strb	r3, [r7, #39]
 5872              	.L386:
1811:..\src/interruptions.c ****                     
1812:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5873              		.loc 1 1812 0
 5874 05f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5875 05f4 7D4A     		ldr	r2, .L404+8
 5876 05f6 3421     		movs	r1, #52
 5877 05f8 01FB03F3 		mul	r3, r1, r3
 5878 05fc 1344     		add	r3, r3, r2
 5879 05fe 1833     		adds	r3, r3, #24
 5880 0600 97F82720 		ldrb	r2, [r7, #39]
 5881 0604 1A70     		strb	r2, [r3]
 5882              	.L385:
1813:..\src/interruptions.c ****                 }    
1814:..\src/interruptions.c **** 
1815:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5883              		.loc 1 1815 0
 5884 0606 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5885 0608 7649     		ldr	r1, .L404
 5886 060a 1346     		mov	r3, r2
 5887 060c 5B00     		lsls	r3, r3, #1
 5888 060e 1344     		add	r3, r3, r2
 5889 0610 1B01     		lsls	r3, r3, #4
 5890 0612 0B44     		add	r3, r3, r1
 5891 0614 03F5D273 		add	r3, r3, #420
 5892 0618 1B68     		ldr	r3, [r3]	@ float
 5893 061a 4FF07E51 		mov	r1, #1065353216
 5894 061e 1846     		mov	r0, r3
 5895 0620 FFF7FEFF 		bl	__aeabi_fcmpeq
 5896 0624 0346     		mov	r3, r0
 5897 0626 002B     		cmp	r3, #0
 5898 0628 22D1     		bne	.L388
1816:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5899              		.loc 1 1816 0
 5900 062a FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5901 062c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5902 062e 6F4A     		ldr	r2, .L404+8
 5903 0630 3421     		movs	r1, #52
 5904 0632 01FB03F3 		mul	r3, r1, r3
 5905 0636 1344     		add	r3, r3, r2
 5906 0638 1B68     		ldr	r3, [r3]
 5907 063a 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 139


 5908 063c FFF7FEFF 		bl	__aeabi_i2f
 5909 0640 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5910 0642 6849     		ldr	r1, .L404
 5911 0644 1346     		mov	r3, r2
 5912 0646 5B00     		lsls	r3, r3, #1
 5913 0648 1344     		add	r3, r3, r2
 5914 064a 1B01     		lsls	r3, r3, #4
 5915 064c 0B44     		add	r3, r3, r1
 5916 064e 03F5D273 		add	r3, r3, #420
 5917 0652 1B68     		ldr	r3, [r3]	@ float
 5918 0654 1946     		mov	r1, r3
 5919 0656 FFF7FEFF 		bl	__aeabi_fdiv
 5920 065a 0346     		mov	r3, r0
 5921 065c 1846     		mov	r0, r3
 5922 065e FFF7FEFF 		bl	__aeabi_f2iz
 5923 0662 0146     		mov	r1, r0
 5924 0664 614A     		ldr	r2, .L404+8
 5925 0666 3423     		movs	r3, #52
 5926 0668 03FB04F3 		mul	r3, r3, r4
 5927 066c 1344     		add	r3, r3, r2
 5928 066e 1960     		str	r1, [r3]
 5929              	.L388:
1817:..\src/interruptions.c ****                 
1818:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 5930              		.loc 1 1818 0
 5931 0670 97F92730 		ldrsb	r3, [r7, #39]
 5932 0674 1B04     		lsls	r3, r3, #16
 5933 0676 BA6A     		ldr	r2, [r7, #40]
 5934 0678 1344     		add	r3, r3, r2
 5935 067a BB62     		str	r3, [r7, #40]
1819:..\src/interruptions.c ****        
1820:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 5936              		.loc 1 1820 0
 5937 067c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5938 067e 5949     		ldr	r1, .L404
 5939 0680 1346     		mov	r3, r2
 5940 0682 5B00     		lsls	r3, r3, #1
 5941 0684 1344     		add	r3, r3, r2
 5942 0686 1B01     		lsls	r3, r3, #4
 5943 0688 0B44     		add	r3, r3, r1
 5944 068a 03F5D273 		add	r3, r3, #420
 5945 068e 1B68     		ldr	r3, [r3]	@ float
 5946 0690 4FF07E51 		mov	r1, #1065353216
 5947 0694 1846     		mov	r0, r3
 5948 0696 FFF7FEFF 		bl	__aeabi_fcmpeq
 5949 069a 0346     		mov	r3, r0
 5950 069c 002B     		cmp	r3, #0
 5951 069e 15D1     		bne	.L390
1821:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 5952              		.loc 1 1821 0
 5953 06a0 B86A     		ldr	r0, [r7, #40]
 5954 06a2 FFF7FEFF 		bl	__aeabi_i2f
 5955 06a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5956 06a8 4E49     		ldr	r1, .L404
 5957 06aa 1346     		mov	r3, r2
 5958 06ac 5B00     		lsls	r3, r3, #1
 5959 06ae 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 140


 5960 06b0 1B01     		lsls	r3, r3, #4
 5961 06b2 0B44     		add	r3, r3, r1
 5962 06b4 03F5D273 		add	r3, r3, #420
 5963 06b8 1B68     		ldr	r3, [r3]	@ float
 5964 06ba 1946     		mov	r1, r3
 5965 06bc FFF7FEFF 		bl	__aeabi_fmul
 5966 06c0 0346     		mov	r3, r0
 5967 06c2 1846     		mov	r0, r3
 5968 06c4 FFF7FEFF 		bl	__aeabi_f2iz
 5969 06c8 0346     		mov	r3, r0
 5970 06ca BB62     		str	r3, [r7, #40]
 5971              	.L390:
1822:..\src/interruptions.c ****                 }
1823:..\src/interruptions.c **** 
1824:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5972              		.loc 1 1824 0
 5973 06cc 454B     		ldr	r3, .L404
 5974 06ce 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5975 06d2 002B     		cmp	r3, #0
 5976 06d4 07D1     		bne	.L392
1825:..\src/interruptions.c ****                     // Right / Left hand turn
1826:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 5977              		.loc 1 1826 0
 5978 06d6 434B     		ldr	r3, .L404
 5979 06d8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5980 06dc 002B     		cmp	r3, #0
 5981 06de 02D1     		bne	.L392
1827:..\src/interruptions.c ****                         value_encoder *= -1;        
 5982              		.loc 1 1827 0
 5983 06e0 BB6A     		ldr	r3, [r7, #40]
 5984 06e2 5B42     		negs	r3, r3
 5985 06e4 BB62     		str	r3, [r7, #40]
 5986              	.L392:
1828:..\src/interruptions.c ****                     }
1829:..\src/interruptions.c ****                 }
1830:..\src/interruptions.c ****          
1831:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 5987              		.loc 1 1831 0
 5988 06e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5989 06e8 404A     		ldr	r2, .L404+8
 5990 06ea 3421     		movs	r1, #52
 5991 06ec 01FB03F3 		mul	r3, r1, r3
 5992 06f0 1344     		add	r3, r3, r2
 5993 06f2 BA6A     		ldr	r2, [r7, #40]
 5994 06f4 1A60     		str	r2, [r3]
1832:..\src/interruptions.c ****                 
1833:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5995              		.loc 1 1833 0
 5996 06f6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5997 06f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5998 06fa 3C49     		ldr	r1, .L404+8
 5999 06fc 3420     		movs	r0, #52
 6000 06fe 00FB02F2 		mul	r2, r0, r2
 6001 0702 0A44     		add	r2, r2, r1
 6002 0704 1268     		ldr	r2, [r2]
 6003 0706 3A49     		ldr	r1, .L404+12
 6004 0708 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 141


 6005 070a 0B44     		add	r3, r3, r1
 6006 070c 1A60     		str	r2, [r3]
1834:..\src/interruptions.c **** 
1835:..\src/interruptions.c ****                 // If necessary activate motor
1836:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6007              		.loc 1 1836 0
 6008 070e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6009 0710 384A     		ldr	r2, .L404+16
 6010 0712 0121     		movs	r1, #1
 6011 0714 D154     		strb	r1, [r2, r3]
1837:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1838:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6012              		.loc 1 1838 0
 6013 0716 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6014 0718 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6015 071a 3248     		ldr	r0, .L404
 6016 071c 1346     		mov	r3, r2
 6017 071e DB00     		lsls	r3, r3, #3
 6018 0720 9B1A     		subs	r3, r3, r2
 6019 0722 1B01     		lsls	r3, r3, #4
 6020 0724 0344     		add	r3, r3, r0
 6021 0726 E033     		adds	r3, r3, #224
 6022 0728 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6023 072a 314A     		ldr	r2, .L404+12
 6024 072c 0B01     		lsls	r3, r1, #4
 6025 072e 1344     		add	r3, r3, r2
 6026 0730 0C33     		adds	r3, r3, #12
 6027 0732 0246     		mov	r2, r0
 6028 0734 1A70     		strb	r2, [r3]
1839:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6029              		.loc 1 1839 0
 6030 0736 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6031 0738 2D4A     		ldr	r2, .L404+12
 6032 073a 1B01     		lsls	r3, r3, #4
 6033 073c 1344     		add	r3, r3, r2
 6034 073e 0C33     		adds	r3, r3, #12
 6035 0740 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6036 0742 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6037 0744 1146     		mov	r1, r2
 6038 0746 1846     		mov	r0, r3
 6039 0748 FFF7FEFF 		bl	enable_motor
1840:..\src/interruptions.c ****                 
1841:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6040              		.loc 1 1841 0
 6041 074c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6042 074e 2A4A     		ldr	r2, .L404+20
 6043 0750 0121     		movs	r1, #1
 6044 0752 D154     		strb	r1, [r2, r3]
 6045              	.L383:
1703:..\src/interruptions.c ****         
 6046              		.loc 1 1703 0 discriminator 2
 6047 0754 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6048 0758 0133     		adds	r3, r3, #1
 6049 075a 87F82F30 		strb	r3, [r7, #47]
 6050              	.L372:
1703:..\src/interruptions.c ****         
 6051              		.loc 1 1703 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 142


 6052 075e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6053 0762 022B     		cmp	r3, #2
 6054 0764 7FF6C8AC 		bls	.L393
1842:..\src/interruptions.c ****             }
1843:..\src/interruptions.c ****         }
1844:..\src/interruptions.c ****     } 
1845:..\src/interruptions.c **** 
1846:..\src/interruptions.c **** 	
1847:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1848:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6055              		.loc 1 1848 0 is_stmt 1
 6056 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6057 076a 224A     		ldr	r2, .L404+16
 6058 076c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6059 076e 002B     		cmp	r3, #0
 6060 0770 35D0     		beq	.L363
1849:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6061              		.loc 1 1849 0
 6062 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6063 0774 214A     		ldr	r2, .L404+24
 6064 0776 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6065 077a 0132     		adds	r2, r2, #1
 6066 077c 1F49     		ldr	r1, .L404+24
 6067 077e 41F82320 		str	r2, [r1, r3, lsl #2]
1850:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6068              		.loc 1 1850 0
 6069 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6070 0784 1D4A     		ldr	r2, .L404+24
 6071 0786 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6072 078a B3F5FA5F 		cmp	r3, #8000
 6073 078e 26D3     		bcc	.L363
1851:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6074              		.loc 1 1851 0
 6075 0790 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6076 0792 174A     		ldr	r2, .L404+12
 6077 0794 1B01     		lsls	r3, r3, #4
 6078 0796 1344     		add	r3, r3, r2
 6079 0798 0022     		movs	r2, #0
 6080 079a 1A60     		str	r2, [r3]
1852:..\src/interruptions.c ****             
1853:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1854:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6081              		.loc 1 1854 0
 6082 079c B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6083 079e BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6084 07a0 1048     		ldr	r0, .L404
 6085 07a2 1346     		mov	r3, r2
 6086 07a4 DB00     		lsls	r3, r3, #3
 6087 07a6 9B1A     		subs	r3, r3, r2
 6088 07a8 1B01     		lsls	r3, r3, #4
 6089 07aa 0344     		add	r3, r3, r0
 6090 07ac E033     		adds	r3, r3, #224
 6091 07ae 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6092 07b0 0F4A     		ldr	r2, .L404+12
 6093 07b2 0B01     		lsls	r3, r1, #4
 6094 07b4 1344     		add	r3, r3, r2
 6095 07b6 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 143


 6096 07b8 0246     		mov	r2, r0
 6097 07ba 1A70     		strb	r2, [r3]
1855:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6098              		.loc 1 1855 0
 6099 07bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6100 07be 0C4A     		ldr	r2, .L404+12
 6101 07c0 1B01     		lsls	r3, r3, #4
 6102 07c2 1344     		add	r3, r3, r2
 6103 07c4 0C33     		adds	r3, r3, #12
 6104 07c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6105 07c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6106 07ca 1146     		mov	r1, r2
 6107 07cc 1846     		mov	r0, r3
 6108 07ce FFF7FEFF 		bl	enable_motor
1856:..\src/interruptions.c ****                         
1857:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6109              		.loc 1 1857 0
 6110 07d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6111 07d4 074A     		ldr	r2, .L404+16
 6112 07d6 0021     		movs	r1, #0
 6113 07d8 D154     		strb	r1, [r2, r3]
 6114 07da 00E0     		b	.L363
 6115              	.L399:
1758:..\src/interruptions.c ****                 }
 6116              		.loc 1 1758 0
 6117 07dc 00BF     		nop
 6118              	.L363:
1858:..\src/interruptions.c ****         }
1859:..\src/interruptions.c ****     }
1860:..\src/interruptions.c ****  
1861:..\src/interruptions.c **** }
 6119              		.loc 1 1861 0
 6120 07de 3437     		adds	r7, r7, #52
 6121              		.cfi_def_cfa_offset 20
 6122 07e0 BD46     		mov	sp, r7
 6123              		.cfi_def_cfa_register 13
 6124              		@ sp needed
 6125 07e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 6126              	.L405:
 6127              		.align	2
 6128              	.L404:
 6129 07e4 00000000 		.word	c_mem
 6130 07e8 FC000000 		.word	comp_value_encoder.10397
 6131 07ec 00000000 		.word	g_meas
 6132 07f0 00000000 		.word	g_refNew
 6133 07f4 68010000 		.word	safe_startup_motor_activation.10400
 6134 07f8 00000000 		.word	pos_reconstruct
 6135 07fc 6C010000 		.word	count_startup_motor.10402
 6136              		.cfi_endproc
 6137              	.LFE74:
 6138              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6139              		.global	__aeabi_f2d
 6140              		.global	__aeabi_ddiv
 6141              		.global	__aeabi_d2f
 6142              		.section	.text.analog_read_end,"ax",%progbits
 6143              		.align	2
 6144              		.global	analog_read_end
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 144


 6145              		.thumb
 6146              		.thumb_func
 6147              		.type	analog_read_end, %function
 6148              	analog_read_end:
 6149              	.LFB75:
1862:..\src/interruptions.c **** 
1863:..\src/interruptions.c **** //==============================================================================
1864:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1865:..\src/interruptions.c **** //==============================================================================
1866:..\src/interruptions.c **** 
1867:..\src/interruptions.c **** void analog_read_end() {
 6150              		.loc 1 1867 0
 6151              		.cfi_startproc
 6152              		@ args = 0, pretend = 0, frame = 8
 6153              		@ frame_needed = 1, uses_anonymous_args = 0
 6154 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6155              		.cfi_def_cfa_offset 20
 6156              		.cfi_offset 4, -20
 6157              		.cfi_offset 5, -16
 6158              		.cfi_offset 6, -12
 6159              		.cfi_offset 7, -8
 6160              		.cfi_offset 14, -4
 6161 0002 83B0     		sub	sp, sp, #12
 6162              		.cfi_def_cfa_offset 32
 6163 0004 00AF     		add	r7, sp, #0
 6164              		.cfi_def_cfa_register 7
1868:..\src/interruptions.c **** 
1869:..\src/interruptions.c ****     /* =========================================================================
1870:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1871:..\src/interruptions.c ****     /
1872:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1873:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1874:..\src/interruptions.c ****     /
1875:..\src/interruptions.c ****     /   Definition:
1876:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1877:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1878:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1879:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1880:..\src/interruptions.c ****     /
1881:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1882:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1883:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1884:..\src/interruptions.c ****     /  =========================================================================
1885:..\src/interruptions.c ****     */
1886:..\src/interruptions.c **** 
1887:..\src/interruptions.c ****     int32 CYDATA i_aux;
1888:..\src/interruptions.c **** 
1889:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1890:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1891:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1892:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1893:..\src/interruptions.c ****     static int32 UD_mean_value;
1894:..\src/interruptions.c ****     static int32 LR_mean_value;
1895:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1896:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1897:..\src/interruptions.c ****     static uint16 count = 0;
1898:..\src/interruptions.c ****     static uint32 v_count = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 145


1899:..\src/interruptions.c ****     static uint8 idx = 0;
1900:..\src/interruptions.c ****     
1901:..\src/interruptions.c ****     
1902:..\src/interruptions.c ****     // Wait for conversion end
1903:..\src/interruptions.c ****     
1904:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6165              		.loc 1 1904 0
 6166 0006 08E0     		b	.L407
 6167              	.L408:
1905:..\src/interruptions.c ****         
1906:..\src/interruptions.c ****         if (interrupt_flag){
 6168              		.loc 1 1906 0
 6169 0008 834B     		ldr	r3, .L565+8
 6170 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6171 000c 002B     		cmp	r3, #0
 6172 000e 04D0     		beq	.L407
1907:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6173              		.loc 1 1907 0
 6174 0010 814B     		ldr	r3, .L565+8
 6175 0012 0022     		movs	r2, #0
 6176 0014 1A70     		strb	r2, [r3]
1908:..\src/interruptions.c ****             interrupt_manager();
 6177              		.loc 1 1908 0
 6178 0016 FFF7FEFF 		bl	interrupt_manager
 6179              	.L407:
1904:..\src/interruptions.c ****         
 6180              		.loc 1 1904 0
 6181 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6182 001e 0346     		mov	r3, r0
 6183 0020 002B     		cmp	r3, #0
 6184 0022 F1D0     		beq	.L408
1909:..\src/interruptions.c ****         }
1910:..\src/interruptions.c ****     }
1911:..\src/interruptions.c ****     
1912:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1913:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6185              		.loc 1 1913 0
 6186 0024 7D4B     		ldr	r3, .L565+12
 6187 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6188 002a 022B     		cmp	r3, #2
 6189 002c 34D1     		bne	.L409
1914:..\src/interruptions.c ****         // Read pressure in any case
1915:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
 6190              		.loc 1 1915 0
 6191 002e 7C4B     		ldr	r3, .L565+16
 6192 0030 B3F90030 		ldrsh	r3, [r3]
 6193 0034 A3F20463 		subw	r3, r3, #1540
 6194 0038 1846     		mov	r0, r3
 6195 003a FFF7FEFF 		bl	__aeabi_i2f
 6196 003e 0246     		mov	r2, r0
 6197 0040 784B     		ldr	r3, .L565+20
 6198 0042 1A60     		str	r2, [r3]	@ float
1916:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
 6199              		.loc 1 1916 0
 6200 0044 774B     		ldr	r3, .L565+20
 6201 0046 1B68     		ldr	r3, [r3]	@ float
 6202 0048 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 146


 6203 004a FFF7FEFF 		bl	__aeabi_f2d
 6204 004e 4FF00002 		mov	r2, #0
 6205 0052 754B     		ldr	r3, .L565+24
 6206 0054 FFF7FEFF 		bl	__aeabi_ddiv
 6207 0058 0346     		mov	r3, r0
 6208 005a 0C46     		mov	r4, r1
 6209 005c 1846     		mov	r0, r3
 6210 005e 2146     		mov	r1, r4
 6211 0060 6BA3     		adr	r3, .L565
 6212 0062 D3E90023 		ldrd	r2, [r3]
 6213 0066 FFF7FEFF 		bl	__aeabi_ddiv
 6214 006a 0346     		mov	r3, r0
 6215 006c 0C46     		mov	r4, r1
 6216 006e 1846     		mov	r0, r3
 6217 0070 2146     		mov	r1, r4
 6218 0072 FFF7FEFF 		bl	__aeabi_d2f
 6219 0076 0246     		mov	r2, r0
 6220 0078 6A4B     		ldr	r3, .L565+20
 6221 007a 1A60     		str	r2, [r3]	@ float
1917:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
 6222              		.loc 1 1917 0
 6223 007c 694B     		ldr	r3, .L565+20
 6224 007e 1B68     		ldr	r3, [r3]	@ float
 6225 0080 4FF00001 		mov	r1, #0
 6226 0084 1846     		mov	r0, r3
 6227 0086 FFF7FEFF 		bl	__aeabi_fcmplt
 6228 008a 0346     		mov	r3, r0
 6229 008c 002B     		cmp	r3, #0
 6230 008e 03D0     		beq	.L409
 6231              		.loc 1 1917 0 is_stmt 0 discriminator 1
 6232 0090 644B     		ldr	r3, .L565+20
 6233 0092 4FF00002 		mov	r2, #0
 6234 0096 1A60     		str	r2, [r3]	@ float
 6235              	.L409:
1918:..\src/interruptions.c ****     }
1919:..\src/interruptions.c **** #endif
1920:..\src/interruptions.c ****  
1921:..\src/interruptions.c **** flag_master =  ((int32)(ADC_buf[1] - 1621) * 1990) >> 7;
 6236              		.loc 1 1921 0 is_stmt 1
 6237 0098 614B     		ldr	r3, .L565+16
 6238 009a B3F90230 		ldrsh	r3, [r3, #2]
 6239 009e A3F25563 		subw	r3, r3, #1621
 6240 00a2 40F2C672 		movw	r2, #1990
 6241 00a6 02FB03F3 		mul	r3, r2, r3
 6242 00aa DB11     		asrs	r3, r3, #7
 6243 00ac 5F4A     		ldr	r2, .L565+28
 6244 00ae 1360     		str	r3, [r2]
1922:..\src/interruptions.c ****     
1923:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1924:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6245              		.loc 1 1924 0
 6246 00b0 5F4B     		ldr	r3, .L565+32
 6247 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6248 00b4 042B     		cmp	r3, #4
 6249 00b6 0BD9     		bls	.L411
1925:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6250              		.loc 1 1925 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 147


 6251 00b8 594B     		ldr	r3, .L565+16
 6252 00ba B3F90830 		ldrsh	r3, [r3, #8]
 6253 00be A3F25563 		subw	r3, r3, #1621
 6254 00c2 40F2C672 		movw	r2, #1990
 6255 00c6 02FB03F3 		mul	r3, r2, r3
 6256 00ca DB11     		asrs	r3, r3, #7
 6257 00cc 594A     		ldr	r2, .L565+36
 6258 00ce 5360     		str	r3, [r2, #4]
 6259              	.L411:
1926:..\src/interruptions.c ****     }
1927:..\src/interruptions.c ****     
1928:..\src/interruptions.c ****     if (interrupt_flag){
 6260              		.loc 1 1928 0
 6261 00d0 514B     		ldr	r3, .L565+8
 6262 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6263 00d4 002B     		cmp	r3, #0
 6264 00d6 04D0     		beq	.L412
1929:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6265              		.loc 1 1929 0
 6266 00d8 4F4B     		ldr	r3, .L565+8
 6267 00da 0022     		movs	r2, #0
 6268 00dc 1A70     		strb	r2, [r3]
1930:..\src/interruptions.c ****         interrupt_manager();
 6269              		.loc 1 1930 0
 6270 00de FFF7FEFF 		bl	interrupt_manager
 6271              	.L412:
1931:..\src/interruptions.c ****     }
1932:..\src/interruptions.c ****     
1933:..\src/interruptions.c ****     // Update cycle power value
1934:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6272              		.loc 1 1934 0
 6273 00e2 544B     		ldr	r3, .L565+36
 6274 00e4 1B68     		ldr	r3, [r3]
 6275 00e6 544A     		ldr	r2, .L565+40
 6276 00e8 82FB0312 		smull	r1, r2, r2, r3
 6277 00ec D211     		asrs	r2, r2, #7
 6278 00ee DB17     		asrs	r3, r3, #31
 6279 00f0 D31A     		subs	r3, r2, r3
 6280 00f2 5249     		ldr	r1, .L565+44
 6281 00f4 1846     		mov	r0, r3
 6282 00f6 FFF7FEFF 		bl	filter
 6283 00fa 0246     		mov	r2, r0
 6284 00fc 504B     		ldr	r3, .L565+48
 6285 00fe 1A60     		str	r2, [r3]
1935:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6286              		.loc 1 1935 0
 6287 0100 504B     		ldr	r3, .L565+52
 6288 0102 1B68     		ldr	r3, [r3]
 6289 0104 002B     		cmp	r3, #0
 6290 0106 08DA     		bge	.L413
 6291              		.loc 1 1935 0 is_stmt 0 discriminator 1
 6292 0108 4D4B     		ldr	r3, .L565+48
 6293 010a 1B68     		ldr	r3, [r3]
 6294 010c 002B     		cmp	r3, #0
 6295 010e 04DB     		blt	.L413
1936:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6296              		.loc 1 1936 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 148


 6297 0110 4D4B     		ldr	r3, .L565+56
 6298 0112 1B6E     		ldr	r3, [r3, #96]
 6299 0114 0133     		adds	r3, r3, #1
 6300 0116 4C4A     		ldr	r2, .L565+56
 6301 0118 1366     		str	r3, [r2, #96]
 6302              	.L413:
1937:..\src/interruptions.c ****     }
1938:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6303              		.loc 1 1938 0
 6304 011a 494B     		ldr	r3, .L565+48
 6305 011c 1B68     		ldr	r3, [r3]
 6306 011e 494A     		ldr	r2, .L565+52
 6307 0120 1360     		str	r3, [r2]
1939:..\src/interruptions.c ****   
1940:..\src/interruptions.c ****     
1941:..\src/interruptions.c ****     // VOLTAGE READING
1942:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1943:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1944:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1945:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1946:..\src/interruptions.c ****     
1947:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6308              		.loc 1 1947 0
 6309 0122 4A4B     		ldr	r3, .L565+60
 6310 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6311 0126 002B     		cmp	r3, #0
 6312 0128 4DD0     		beq	.L414
 6313              		.loc 1 1947 0 is_stmt 0 discriminator 1
 6314 012a 494B     		ldr	r3, .L565+64
 6315 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6316 012e 002B     		cmp	r3, #0
 6317 0130 49D0     		beq	.L414
1948:..\src/interruptions.c ****         count = count + 1;
 6318              		.loc 1 1948 0 is_stmt 1
 6319 0132 484B     		ldr	r3, .L565+68
 6320 0134 1B88     		ldrh	r3, [r3]
 6321 0136 0133     		adds	r3, r3, #1
 6322 0138 9AB2     		uxth	r2, r3
 6323 013a 464B     		ldr	r3, .L565+68
 6324 013c 1A80     		strh	r2, [r3]	@ movhi
1949:..\src/interruptions.c ****         
1950:..\src/interruptions.c ****         if (count == 1000){
 6325              		.loc 1 1950 0
 6326 013e 454B     		ldr	r3, .L565+68
 6327 0140 1B88     		ldrh	r3, [r3]
 6328 0142 B3F57A7F 		cmp	r3, #1000
 6329 0146 3ED1     		bne	.L414
1951:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6330              		.loc 1 1951 0
 6331 0148 434B     		ldr	r3, .L565+72
 6332 014a 0022     		movs	r2, #0
 6333 014c 1A70     		strb	r2, [r3]
 6334 014e 33E0     		b	.L415
 6335              	.L419:
1952:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6336              		.loc 1 1952 0
 6337 0150 414B     		ldr	r3, .L565+72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 149


 6338 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6339 0154 1A46     		mov	r2, r3
 6340 0156 374B     		ldr	r3, .L565+36
 6341 0158 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6342 015c 42F22732 		movw	r2, #8999
 6343 0160 9342     		cmp	r3, r2
 6344 0162 08DC     		bgt	.L416
1953:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6345              		.loc 1 1953 0
 6346 0164 3C4B     		ldr	r3, .L565+72
 6347 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6348 0168 1946     		mov	r1, r3
 6349 016a 3C4B     		ldr	r3, .L565+76
 6350 016c 4FF4FA52 		mov	r2, #8000
 6351 0170 43F82120 		str	r2, [r3, r1, lsl #2]
 6352 0174 1AE0     		b	.L417
 6353              	.L416:
1954:..\src/interruptions.c ****                 }
1955:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1956:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6354              		.loc 1 1956 0
 6355 0176 384B     		ldr	r3, .L565+72
 6356 0178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6357 017a 1A46     		mov	r2, r3
 6358 017c 2D4B     		ldr	r3, .L565+36
 6359 017e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6360 0182 43F2C722 		movw	r2, #12999
 6361 0186 9342     		cmp	r3, r2
 6362 0188 08DC     		bgt	.L418
1957:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6363              		.loc 1 1957 0
 6364 018a 334B     		ldr	r3, .L565+72
 6365 018c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6366 018e 1946     		mov	r1, r3
 6367 0190 324B     		ldr	r3, .L565+76
 6368 0192 42F6E062 		movw	r2, #12000
 6369 0196 43F82120 		str	r2, [r3, r1, lsl #2]
 6370 019a 07E0     		b	.L417
 6371              	.L418:
1958:..\src/interruptions.c ****                     }
1959:..\src/interruptions.c ****                     else
1960:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6372              		.loc 1 1960 0
 6373 019c 2E4B     		ldr	r3, .L565+72
 6374 019e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6375 01a0 1946     		mov	r1, r3
 6376 01a2 2E4B     		ldr	r3, .L565+76
 6377 01a4 45F6C052 		movw	r2, #24000
 6378 01a8 43F82120 		str	r2, [r3, r1, lsl #2]
 6379              	.L417:
1951:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6380              		.loc 1 1951 0 discriminator 2
 6381 01ac 2A4B     		ldr	r3, .L565+72
 6382 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6383 01b0 0133     		adds	r3, r3, #1
 6384 01b2 DAB2     		uxtb	r2, r3
 6385 01b4 284B     		ldr	r3, .L565+72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 150


 6386 01b6 1A70     		strb	r2, [r3]
 6387              	.L415:
1951:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6388              		.loc 1 1951 0 is_stmt 0 discriminator 1
 6389 01b8 274B     		ldr	r3, .L565+72
 6390 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6391 01bc 012B     		cmp	r3, #1
 6392 01be C7D9     		bls	.L419
1961:..\src/interruptions.c ****                 }
1962:..\src/interruptions.c ****             }
1963:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6393              		.loc 1 1963 0 is_stmt 1
 6394 01c0 224B     		ldr	r3, .L565+60
 6395 01c2 0022     		movs	r2, #0
 6396 01c4 1A70     		strb	r2, [r3]
 6397              	.L414:
1964:..\src/interruptions.c ****         }
1965:..\src/interruptions.c ****     }
1966:..\src/interruptions.c **** 
1967:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1968:..\src/interruptions.c **** 
1969:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6398              		.loc 1 1969 0
 6399 01c6 1B4B     		ldr	r3, .L565+36
 6400 01c8 1B68     		ldr	r3, [r3]
 6401 01ca 41F66312 		movw	r2, #6499
 6402 01ce 9342     		cmp	r3, r2
 6403 01d0 00F3FE80 		bgt	.L420
 6404              		.loc 1 1969 0 is_stmt 0 discriminator 1
 6405 01d4 164B     		ldr	r3, .L565+32
 6406 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6407 01d8 042B     		cmp	r3, #4
 6408 01da 06D9     		bls	.L421
 6409              		.loc 1 1969 0 discriminator 2
 6410 01dc 154B     		ldr	r3, .L565+36
 6411 01de 5B68     		ldr	r3, [r3, #4]
 6412 01e0 41F66312 		movw	r2, #6499
 6413 01e4 9342     		cmp	r3, r2
 6414 01e6 00F3F380 		bgt	.L420
 6415              	.L421:
1970:..\src/interruptions.c ****         // PSoC is powered through uUSB
1971:..\src/interruptions.c ****         
1972:..\src/interruptions.c ****         tension_valid = FALSE;
 6416              		.loc 1 1972 0 is_stmt 1
 6417 01ea 194B     		ldr	r3, .L565+64
 6418 01ec 0022     		movs	r2, #0
 6419 01ee 1A70     		strb	r2, [r3]
1973:..\src/interruptions.c ****             
1974:..\src/interruptions.c ****         if (interrupt_flag){
 6420              		.loc 1 1974 0
 6421 01f0 094B     		ldr	r3, .L565+8
 6422 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6423 01f4 002B     		cmp	r3, #0
 6424 01f6 04D0     		beq	.L422
1975:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6425              		.loc 1 1975 0
 6426 01f8 074B     		ldr	r3, .L565+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 151


 6427 01fa 0022     		movs	r2, #0
 6428 01fc 1A70     		strb	r2, [r3]
1976:..\src/interruptions.c ****             interrupt_manager();
 6429              		.loc 1 1976 0
 6430 01fe FFF7FEFF 		bl	interrupt_manager
 6431              	.L422:
1977:..\src/interruptions.c ****         }
1978:..\src/interruptions.c ****         
1979:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6432              		.loc 1 1979 0
 6433 0202 154B     		ldr	r3, .L565+72
 6434 0204 0022     		movs	r2, #0
 6435 0206 1A70     		strb	r2, [r3]
 6436 0208 ACE0     		b	.L423
 6437              	.L566:
 6438 020a 00BFAFF3 		.align	3
 6438      0080
 6439              	.L565:
 6440 0210 FCA9F1D2 		.word	-755914244
 6441 0214 4D62703F 		.word	1064329805
 6442 0218 00000000 		.word	interrupt_flag
 6443 021c 00000000 		.word	c_mem
 6444 0220 00000000 		.word	ADC_buf
 6445 0224 00000000 		.word	g_fb_meas
 6446 0228 0000B040 		.word	1085276160
 6447 022c 00000000 		.word	flag_master
 6448 0230 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6449 0234 00000000 		.word	dev_tension
 6450 0238 F1197605 		.word	91625969
 6451 023c 00000000 		.word	filt_detect_pc
 6452 0240 00000000 		.word	detect_power_cycle
 6453 0244 08000000 		.word	detect_power_cycle_prev.10429
 6454 0248 00000000 		.word	g_mem
 6455 024c 0C000000 		.word	first_tension_valid.10428
 6456 0250 00000000 		.word	tension_valid
 6457 0254 74010000 		.word	count.10430
 6458 0258 76010000 		.word	idx.10432
 6459 025c 00000000 		.word	pow_tension
 6460              	.L426:
1980:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6461              		.loc 1 1980 0
 6462 0260 9F4B     		ldr	r3, .L567
 6463 0262 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6464 0266 002B     		cmp	r3, #0
 6465 0268 59D0     		beq	.L424
1981:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6466              		.loc 1 1981 0
 6467 026a 9E4B     		ldr	r3, .L567+4
 6468 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6469 026e 1946     		mov	r1, r3
 6470 0270 9B4A     		ldr	r2, .L567
 6471 0272 0B46     		mov	r3, r1
 6472 0274 DB00     		lsls	r3, r3, #3
 6473 0276 5B1A     		subs	r3, r3, r1
 6474 0278 1B01     		lsls	r3, r3, #4
 6475 027a 1344     		add	r3, r3, r2
 6476 027c 03F58773 		add	r3, r3, #270
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 152


 6477 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6478 0282 022B     		cmp	r3, #2
 6479 0284 37D0     		beq	.L425
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6480              		.loc 1 1982 0 discriminator 1
 6481 0286 974B     		ldr	r3, .L567+4
 6482 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6483 028a 1946     		mov	r1, r3
 6484 028c 944A     		ldr	r2, .L567
 6485 028e 0B46     		mov	r3, r1
 6486 0290 DB00     		lsls	r3, r3, #3
 6487 0292 5B1A     		subs	r3, r3, r1
 6488 0294 1B01     		lsls	r3, r3, #4
 6489 0296 1344     		add	r3, r3, r2
 6490 0298 03F58773 		add	r3, r3, #270
 6491 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1981:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6492              		.loc 1 1981 0 discriminator 1
 6493 029e 032B     		cmp	r3, #3
 6494 02a0 29D0     		beq	.L425
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6495              		.loc 1 1983 0
 6496 02a2 904B     		ldr	r3, .L567+4
 6497 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6498 02a6 1946     		mov	r1, r3
 6499 02a8 8D4A     		ldr	r2, .L567
 6500 02aa 0B46     		mov	r3, r1
 6501 02ac DB00     		lsls	r3, r3, #3
 6502 02ae 5B1A     		subs	r3, r3, r1
 6503 02b0 1B01     		lsls	r3, r3, #4
 6504 02b2 1344     		add	r3, r3, r2
 6505 02b4 03F58773 		add	r3, r3, #270
 6506 02b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6507              		.loc 1 1982 0
 6508 02ba 042B     		cmp	r3, #4
 6509 02bc 1BD0     		beq	.L425
1984:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6510              		.loc 1 1984 0
 6511 02be 894B     		ldr	r3, .L567+4
 6512 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6513 02c2 1946     		mov	r1, r3
 6514 02c4 864A     		ldr	r2, .L567
 6515 02c6 0B46     		mov	r3, r1
 6516 02c8 DB00     		lsls	r3, r3, #3
 6517 02ca 5B1A     		subs	r3, r3, r1
 6518 02cc 1B01     		lsls	r3, r3, #4
 6519 02ce 1344     		add	r3, r3, r2
 6520 02d0 03F58773 		add	r3, r3, #270
 6521 02d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6522              		.loc 1 1983 0
 6523 02d6 052B     		cmp	r3, #5
 6524 02d8 0DD0     		beq	.L425
1985:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6525              		.loc 1 1985 0
 6526 02da 824B     		ldr	r3, .L567+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 153


 6527 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6528 02de 1946     		mov	r1, r3
 6529 02e0 7F4A     		ldr	r2, .L567
 6530 02e2 0B46     		mov	r3, r1
 6531 02e4 DB00     		lsls	r3, r3, #3
 6532 02e6 5B1A     		subs	r3, r3, r1
 6533 02e8 1B01     		lsls	r3, r3, #4
 6534 02ea 1344     		add	r3, r3, r2
 6535 02ec 03F58773 		add	r3, r3, #270
 6536 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1984:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6537              		.loc 1 1984 0
 6538 02f2 072B     		cmp	r3, #7
 6539 02f4 13D1     		bne	.L424
 6540              	.L425:
1986:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6541              		.loc 1 1986 0
 6542 02f6 7B4B     		ldr	r3, .L567+4
 6543 02f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6544 02fa 7B4A     		ldr	r2, .L567+8
 6545 02fc 1B01     		lsls	r3, r3, #4
 6546 02fe 1344     		add	r3, r3, r2
 6547 0300 0C33     		adds	r3, r3, #12
 6548 0302 0022     		movs	r2, #0
 6549 0304 1A70     		strb	r2, [r3]
1987:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6550              		.loc 1 1987 0
 6551 0306 774B     		ldr	r3, .L567+4
 6552 0308 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6553 030a 764B     		ldr	r3, .L567+4
 6554 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6555 030e 764A     		ldr	r2, .L567+8
 6556 0310 1B01     		lsls	r3, r3, #4
 6557 0312 1344     		add	r3, r3, r2
 6558 0314 0C33     		adds	r3, r3, #12
 6559 0316 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6560 0318 1946     		mov	r1, r3
 6561 031a FFF7FEFF 		bl	enable_motor
 6562              	.L424:
1988:..\src/interruptions.c ****                     
1989:..\src/interruptions.c ****                 }
1990:..\src/interruptions.c ****             }
1991:..\src/interruptions.c **** 
1992:..\src/interruptions.c ****             // Assign dev_tension and reset current
1993:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6563              		.loc 1 1993 0 discriminator 2
 6564 031e 714B     		ldr	r3, .L567+4
 6565 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6566 0322 1946     		mov	r1, r3
 6567 0324 714B     		ldr	r3, .L567+12
 6568 0326 41F28832 		movw	r2, #5000
 6569 032a 43F82120 		str	r2, [r3, r1, lsl #2]
1994:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6570              		.loc 1 1994 0 discriminator 2
 6571 032e 6D4B     		ldr	r3, .L567+4
 6572 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6573 0332 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 154


 6574 0334 6E4A     		ldr	r2, .L567+16
 6575 0336 0B46     		mov	r3, r1
 6576 0338 DB00     		lsls	r3, r3, #3
 6577 033a 5B1A     		subs	r3, r3, r1
 6578 033c 1B01     		lsls	r3, r3, #4
 6579 033e 1344     		add	r3, r3, r2
 6580 0340 03F58873 		add	r3, r3, #272
 6581 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6582 0346 1946     		mov	r1, r3
 6583 0348 6A4A     		ldr	r2, .L567+20
 6584 034a 3423     		movs	r3, #52
 6585 034c 03FB01F3 		mul	r3, r3, r1
 6586 0350 1344     		add	r3, r3, r2
 6587 0352 0C33     		adds	r3, r3, #12
 6588 0354 0022     		movs	r2, #0
 6589 0356 1A60     		str	r2, [r3]
1979:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6590              		.loc 1 1979 0 discriminator 2
 6591 0358 624B     		ldr	r3, .L567+4
 6592 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6593 035c 0133     		adds	r3, r3, #1
 6594 035e DAB2     		uxtb	r2, r3
 6595 0360 604B     		ldr	r3, .L567+4
 6596 0362 1A70     		strb	r2, [r3]
 6597              	.L423:
1979:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6598              		.loc 1 1979 0 is_stmt 0 discriminator 1
 6599 0364 5F4B     		ldr	r3, .L567+4
 6600 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6601 0368 012B     		cmp	r3, #1
 6602 036a 7FF679AF 		bls	.L426
1995:..\src/interruptions.c ****         }
1996:..\src/interruptions.c ****         
1997:..\src/interruptions.c ****         // Reset emg
1998:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6603              		.loc 1 1998 0 is_stmt 1
 6604 036e 5D4B     		ldr	r3, .L567+4
 6605 0370 0022     		movs	r2, #0
 6606 0372 1A70     		strb	r2, [r3]
 6607 0374 0CE0     		b	.L427
 6608              	.L428:
1999:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6609              		.loc 1 1999 0 discriminator 3
 6610 0376 5B4B     		ldr	r3, .L567+4
 6611 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6612 037a 1946     		mov	r1, r3
 6613 037c 5E4B     		ldr	r3, .L567+24
 6614 037e 0022     		movs	r2, #0
 6615 0380 43F82120 		str	r2, [r3, r1, lsl #2]
1998:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6616              		.loc 1 1998 0 discriminator 3
 6617 0384 574B     		ldr	r3, .L567+4
 6618 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6619 0388 0133     		adds	r3, r3, #1
 6620 038a DAB2     		uxtb	r2, r3
 6621 038c 554B     		ldr	r3, .L567+4
 6622 038e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 155


 6623              	.L427:
1998:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6624              		.loc 1 1998 0 is_stmt 0 discriminator 1
 6625 0390 544B     		ldr	r3, .L567+4
 6626 0392 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6627 0394 012B     		cmp	r3, #1
 6628 0396 EED9     		bls	.L428
2000:..\src/interruptions.c ****         }
2001:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6629              		.loc 1 2001 0 is_stmt 1
 6630 0398 524B     		ldr	r3, .L567+4
 6631 039a 0022     		movs	r2, #0
 6632 039c 1A70     		strb	r2, [r3]
 6633 039e 0CE0     		b	.L429
 6634              	.L431:
2002:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6635              		.loc 1 2002 0 discriminator 4
 6636 03a0 504B     		ldr	r3, .L567+4
 6637 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6638 03a4 544A     		ldr	r2, .L567+24
 6639 03a6 0233     		adds	r3, r3, #2
 6640 03a8 0021     		movs	r1, #0
 6641 03aa 42F82310 		str	r1, [r2, r3, lsl #2]
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6642              		.loc 1 2001 0 discriminator 4
 6643 03ae 4D4B     		ldr	r3, .L567+4
 6644 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6645 03b2 0133     		adds	r3, r3, #1
 6646 03b4 DAB2     		uxtb	r2, r3
 6647 03b6 4B4B     		ldr	r3, .L567+4
 6648 03b8 1A70     		strb	r2, [r3]
 6649              	.L429:
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6650              		.loc 1 2001 0 is_stmt 0 discriminator 1
 6651 03ba 494B     		ldr	r3, .L567
 6652 03bc 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6653 03c0 002B     		cmp	r3, #0
 6654 03c2 00F04D82 		beq	.L547
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6655              		.loc 1 2001 0 discriminator 3
 6656 03c6 474B     		ldr	r3, .L567+4
 6657 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6658 03ca 052B     		cmp	r3, #5
 6659 03cc E8D9     		bls	.L431
1969:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6660              		.loc 1 1969 0 is_stmt 1
 6661 03ce 47E2     		b	.L547
 6662              	.L420:
2003:..\src/interruptions.c ****         }
2004:..\src/interruptions.c ****         
2005:..\src/interruptions.c ****     }
2006:..\src/interruptions.c ****     else {
2007:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2008:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2009:..\src/interruptions.c ****         
2010:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2011:..\src/interruptions.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 156


2012:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6663              		.loc 1 2012 0
 6664 03d0 4A4B     		ldr	r3, .L567+28
 6665 03d2 1B68     		ldr	r3, [r3]
 6666 03d4 B3F57A7F 		cmp	r3, #1000
 6667 03d8 0DD1     		bne	.L433
 6668              		.loc 1 2012 0 is_stmt 0 discriminator 1
 6669 03da 494B     		ldr	r3, .L567+32
 6670 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6671 03de 002B     		cmp	r3, #0
 6672 03e0 09D1     		bne	.L433
2013:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2014:..\src/interruptions.c ****             tension_valid = TRUE;   
 6673              		.loc 1 2014 0 is_stmt 1
 6674 03e2 474B     		ldr	r3, .L567+32
 6675 03e4 0122     		movs	r2, #1
 6676 03e6 1A70     		strb	r2, [r3]
2015:..\src/interruptions.c ****             count = 0;
 6677              		.loc 1 2015 0
 6678 03e8 464B     		ldr	r3, .L567+36
 6679 03ea 0022     		movs	r2, #0
 6680 03ec 1A80     		strh	r2, [r3]	@ movhi
2016:..\src/interruptions.c ****             v_count = 0;            
 6681              		.loc 1 2016 0
 6682 03ee 434B     		ldr	r3, .L567+28
 6683 03f0 0022     		movs	r2, #0
 6684 03f2 1A60     		str	r2, [r3]
 6685 03f4 2CE0     		b	.L434
 6686              	.L433:
2017:..\src/interruptions.c ****         }
2018:..\src/interruptions.c ****         else {  
2019:..\src/interruptions.c ****             // wait for battery voltage stabilization
2020:..\src/interruptions.c ****             if (v_count < 1000) {
 6687              		.loc 1 2020 0
 6688 03f6 414B     		ldr	r3, .L567+28
 6689 03f8 1B68     		ldr	r3, [r3]
 6690 03fa B3F57A7F 		cmp	r3, #1000
 6691 03fe 04D2     		bcs	.L435
2021:..\src/interruptions.c ****                 v_count = v_count + 1;
 6692              		.loc 1 2021 0
 6693 0400 3E4B     		ldr	r3, .L567+28
 6694 0402 1B68     		ldr	r3, [r3]
 6695 0404 0133     		adds	r3, r3, #1
 6696 0406 3D4A     		ldr	r2, .L567+28
 6697 0408 1360     		str	r3, [r2]
 6698              	.L435:
2022:..\src/interruptions.c ****             }
2023:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6699              		.loc 1 2023 0
 6700 040a 364B     		ldr	r3, .L567+4
 6701 040c 0022     		movs	r2, #0
 6702 040e 1A70     		strb	r2, [r3]
 6703 0410 1AE0     		b	.L436
 6704              	.L437:
2024:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6705              		.loc 1 2024 0 discriminator 3
 6706 0412 344B     		ldr	r3, .L567+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 157


 6707 0414 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6708 0416 1C46     		mov	r4, r3
 6709 0418 324B     		ldr	r3, .L567+4
 6710 041a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6711 041c 1A46     		mov	r2, r3
 6712 041e 334B     		ldr	r3, .L567+12
 6713 0420 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6714 0424 2F4B     		ldr	r3, .L567+4
 6715 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6716 0428 DB00     		lsls	r3, r3, #3
 6717 042a 374A     		ldr	r2, .L567+40
 6718 042c 1344     		add	r3, r3, r2
 6719 042e 1946     		mov	r1, r3
 6720 0430 FFF7FEFF 		bl	filter
 6721 0434 0246     		mov	r2, r0
 6722 0436 354B     		ldr	r3, .L567+44
 6723 0438 43F82420 		str	r2, [r3, r4, lsl #2]
2023:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6724              		.loc 1 2023 0 discriminator 3
 6725 043c 294B     		ldr	r3, .L567+4
 6726 043e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6727 0440 0133     		adds	r3, r3, #1
 6728 0442 DAB2     		uxtb	r2, r3
 6729 0444 274B     		ldr	r3, .L567+4
 6730 0446 1A70     		strb	r2, [r3]
 6731              	.L436:
2023:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6732              		.loc 1 2023 0 is_stmt 0 discriminator 1
 6733 0448 264B     		ldr	r3, .L567+4
 6734 044a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6735 044c 012B     		cmp	r3, #1
 6736 044e E0D9     		bls	.L437
 6737              	.L434:
2025:..\src/interruptions.c ****             }
2026:..\src/interruptions.c ****         }
2027:..\src/interruptions.c **** 
2028:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6738              		.loc 1 2028 0 is_stmt 1
 6739 0450 244B     		ldr	r3, .L567+4
 6740 0452 0022     		movs	r2, #0
 6741 0454 1A70     		strb	r2, [r3]
 6742 0456 17E0     		b	.L438
 6743              	.L440:
2029:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6744              		.loc 1 2029 0
 6745 0458 224B     		ldr	r3, .L567+4
 6746 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6747 045c 1946     		mov	r1, r3
 6748 045e 244A     		ldr	r2, .L567+16
 6749 0460 0B46     		mov	r3, r1
 6750 0462 DB00     		lsls	r3, r3, #3
 6751 0464 5B1A     		subs	r3, r3, r1
 6752 0466 1B01     		lsls	r3, r3, #4
 6753 0468 1344     		add	r3, r3, r2
 6754 046a E133     		adds	r3, r3, #225
 6755 046c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6756 046e 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 158


 6757 0470 04D0     		beq	.L439
2030:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6758              		.loc 1 2030 0
 6759 0472 1C4B     		ldr	r3, .L567+4
 6760 0474 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6761 0476 1846     		mov	r0, r3
 6762 0478 FFF7FEFF 		bl	pwm_limit_search
 6763              	.L439:
2028:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6764              		.loc 1 2028 0 discriminator 2
 6765 047c 194B     		ldr	r3, .L567+4
 6766 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6767 0480 0133     		adds	r3, r3, #1
 6768 0482 DAB2     		uxtb	r2, r3
 6769 0484 174B     		ldr	r3, .L567+4
 6770 0486 1A70     		strb	r2, [r3]
 6771              	.L438:
2028:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6772              		.loc 1 2028 0 is_stmt 0 discriminator 1
 6773 0488 164B     		ldr	r3, .L567+4
 6774 048a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6775 048c 012B     		cmp	r3, #1
 6776 048e E3D9     		bls	.L440
2031:..\src/interruptions.c ****         }
2032:..\src/interruptions.c ****         
2033:..\src/interruptions.c ****         // Filter and Set currents
2034:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6777              		.loc 1 2034 0 is_stmt 1
 6778 0490 174B     		ldr	r3, .L567+16
 6779 0492 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6780 0496 002B     		cmp	r3, #0
 6781 0498 40D1     		bne	.L441
2035:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6782              		.loc 1 2035 0
 6783 049a 154B     		ldr	r3, .L567+16
 6784 049c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6785 04a0 1C46     		mov	r4, r3
 6786 04a2 1B4B     		ldr	r3, .L567+48
 6787 04a4 B3F90230 		ldrsh	r3, [r3, #2]
 6788 04a8 A3F5CE63 		sub	r3, r3, #1648
 6789 04ac 45F66A02 		movw	r2, #22634
 6790 04b0 02FB03F3 		mul	r3, r2, r3
 6791 04b4 5B13     		asrs	r3, r3, #13
 6792 04b6 1BB2     		sxth	r3, r3
 6793 04b8 1A46     		mov	r2, r3
 6794 04ba 164B     		ldr	r3, .L567+52
 6795 04bc 93F90030 		ldrsb	r3, [r3]
 6796 04c0 03FB02F3 		mul	r3, r3, r2
 6797 04c4 1449     		ldr	r1, .L567+56
 6798 04c6 1846     		mov	r0, r3
 6799 04c8 FFF7FEFF 		bl	filter
 6800 04cc 0146     		mov	r1, r0
 6801 04ce 094A     		ldr	r2, .L567+20
 6802 04d0 3423     		movs	r3, #52
 6803 04d2 03FB04F3 		mul	r3, r3, r4
 6804 04d6 1344     		add	r3, r3, r2
 6805 04d8 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 159


 6806 04da 1960     		str	r1, [r3]
 6807 04dc 61E0     		b	.L442
 6808              	.L568:
 6809 04de 00BF     		.align	2
 6810              	.L567:
 6811 04e0 00000000 		.word	c_mem
 6812 04e4 76010000 		.word	idx.10432
 6813 04e8 00000000 		.word	g_ref
 6814 04ec 00000000 		.word	dev_tension
 6815 04f0 00000000 		.word	g_mem
 6816 04f4 00000000 		.word	g_meas
 6817 04f8 00000000 		.word	g_adc_meas
 6818 04fc 78010000 		.word	v_count.10431
 6819 0500 00000000 		.word	tension_valid
 6820 0504 74010000 		.word	count.10430
 6821 0508 00000000 		.word	filt_v
 6822 050c 00000000 		.word	dev_tension_f
 6823 0510 00000000 		.word	ADC_buf
 6824 0514 00000000 		.word	pwm_sign
 6825 0518 00000000 		.word	filt_i
 6826              	.L441:
2036:..\src/interruptions.c ****         } 
2037:..\src/interruptions.c ****         else {
2038:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 6827              		.loc 1 2038 0
 6828 051c C54B     		ldr	r3, .L569
 6829 051e 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6830 0522 022B     		cmp	r3, #2
 6831 0524 21D1     		bne	.L443
2039:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2040:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 6832              		.loc 1 2040 0
 6833 0526 C34B     		ldr	r3, .L569
 6834 0528 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6835 052c 1C46     		mov	r4, r3
 6836 052e C24B     		ldr	r3, .L569+4
 6837 0530 B3F90230 		ldrsh	r3, [r3, #2]
 6838 0534 A3F28F63 		subw	r3, r3, #1679
 6839 0538 45F65072 		movw	r2, #24400
 6840 053c 02FB03F3 		mul	r3, r2, r3
 6841 0540 5B13     		asrs	r3, r3, #13
 6842 0542 1BB2     		sxth	r3, r3
 6843 0544 1A46     		mov	r2, r3
 6844 0546 BD4B     		ldr	r3, .L569+8
 6845 0548 93F90030 		ldrsb	r3, [r3]
 6846 054c 03FB02F3 		mul	r3, r3, r2
 6847 0550 BB49     		ldr	r1, .L569+12
 6848 0552 1846     		mov	r0, r3
 6849 0554 FFF7FEFF 		bl	filter
 6850 0558 0146     		mov	r1, r0
 6851 055a BA4A     		ldr	r2, .L569+16
 6852 055c 3423     		movs	r3, #52
 6853 055e 03FB04F3 		mul	r3, r3, r4
 6854 0562 1344     		add	r3, r3, r2
 6855 0564 0C33     		adds	r3, r3, #12
 6856 0566 1960     		str	r1, [r3]
 6857 0568 1BE0     		b	.L442
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 160


 6858              	.L443:
2041:..\src/interruptions.c ****             } else { // [GS]
2042:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 6859              		.loc 1 2042 0
 6860 056a B24B     		ldr	r3, .L569
 6861 056c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6862 0570 1846     		mov	r0, r3
 6863 0572 B14B     		ldr	r3, .L569+4
 6864 0574 B3F90230 		ldrsh	r3, [r3, #2]
 6865 0578 A3F26362 		subw	r2, r3, #1635
 6866 057c 1346     		mov	r3, r2
 6867 057e 1B01     		lsls	r3, r3, #4
 6868 0580 9B1A     		subs	r3, r3, r2
 6869 0582 5B01     		lsls	r3, r3, #5
 6870 0584 1B11     		asrs	r3, r3, #4
 6871 0586 1BB2     		sxth	r3, r3
 6872 0588 1A46     		mov	r2, r3
 6873 058a AC4B     		ldr	r3, .L569+8
 6874 058c 93F90030 		ldrsb	r3, [r3]
 6875 0590 03FB02F2 		mul	r2, r3, r2
 6876 0594 AB49     		ldr	r1, .L569+16
 6877 0596 3423     		movs	r3, #52
 6878 0598 03FB00F3 		mul	r3, r3, r0
 6879 059c 0B44     		add	r3, r3, r1
 6880 059e 0C33     		adds	r3, r3, #12
 6881 05a0 1A60     		str	r2, [r3]
 6882              	.L442:
2043:..\src/interruptions.c ****             }
2044:..\src/interruptions.c ****         }
2045:..\src/interruptions.c ****         
2046:..\src/interruptions.c **** 
2047:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2048:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6883              		.loc 1 2048 0
 6884 05a2 A44B     		ldr	r3, .L569
 6885 05a4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6886 05a8 1D46     		mov	r5, r3
 6887 05aa A24B     		ldr	r3, .L569
 6888 05ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6889 05b0 1946     		mov	r1, r3
 6890 05b2 A44A     		ldr	r2, .L569+16
 6891 05b4 3423     		movs	r3, #52
 6892 05b6 03FB01F3 		mul	r3, r3, r1
 6893 05ba 1344     		add	r3, r3, r2
 6894 05bc 0C33     		adds	r3, r3, #12
 6895 05be 1C68     		ldr	r4, [r3]
 6896 05c0 9C4B     		ldr	r3, .L569
 6897 05c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6898 05c6 1946     		mov	r1, r3
 6899 05c8 9E4A     		ldr	r2, .L569+16
 6900 05ca 3423     		movs	r3, #52
 6901 05cc 03FB01F3 		mul	r3, r3, r1
 6902 05d0 1344     		add	r3, r3, r2
 6903 05d2 1A68     		ldr	r2, [r3]
 6904 05d4 974B     		ldr	r3, .L569
 6905 05d6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6906 05da 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 161


 6907 05dc 9549     		ldr	r1, .L569
 6908 05de 0346     		mov	r3, r0
 6909 05e0 5B00     		lsls	r3, r3, #1
 6910 05e2 0344     		add	r3, r3, r0
 6911 05e4 1B01     		lsls	r3, r3, #4
 6912 05e6 0B44     		add	r3, r3, r1
 6913 05e8 03F29513 		addw	r3, r3, #405
 6914 05ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6915 05ee 42FA03F6 		asr	r6, r2, r3
 6916 05f2 904B     		ldr	r3, .L569
 6917 05f4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6918 05f8 1946     		mov	r1, r3
 6919 05fa 924A     		ldr	r2, .L569+16
 6920 05fc 3423     		movs	r3, #52
 6921 05fe 03FB01F3 		mul	r3, r3, r1
 6922 0602 1344     		add	r3, r3, r2
 6923 0604 1C33     		adds	r3, r3, #28
 6924 0606 1A68     		ldr	r2, [r3]
 6925 0608 8A4B     		ldr	r3, .L569
 6926 060a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6927 060e 1846     		mov	r0, r3
 6928 0610 8849     		ldr	r1, .L569
 6929 0612 0346     		mov	r3, r0
 6930 0614 5B00     		lsls	r3, r3, #1
 6931 0616 0344     		add	r3, r3, r0
 6932 0618 1B01     		lsls	r3, r3, #4
 6933 061a 0B44     		add	r3, r3, r1
 6934 061c 03F29513 		addw	r3, r3, #405
 6935 0620 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6936 0622 42FA03FE 		asr	lr, r2, r3
 6937 0626 884B     		ldr	r3, .L569+20
 6938 0628 1A68     		ldr	r2, [r3]
 6939 062a 824B     		ldr	r3, .L569
 6940 062c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6941 0630 1846     		mov	r0, r3
 6942 0632 8049     		ldr	r1, .L569
 6943 0634 0346     		mov	r3, r0
 6944 0636 5B00     		lsls	r3, r3, #1
 6945 0638 0344     		add	r3, r3, r0
 6946 063a 1B01     		lsls	r3, r3, #4
 6947 063c 0B44     		add	r3, r3, r1
 6948 063e 03F29513 		addw	r3, r3, #405
 6949 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6950 0644 42FA03F3 		asr	r3, r2, r3
 6951 0648 7246     		mov	r2, lr
 6952 064a 3146     		mov	r1, r6
 6953 064c 0020     		movs	r0, #0
 6954 064e FFF7FEFF 		bl	curr_estim
 6955 0652 0346     		mov	r3, r0
 6956 0654 E31A     		subs	r3, r4, r3
 6957 0656 7D49     		ldr	r1, .L569+24
 6958 0658 1846     		mov	r0, r3
 6959 065a FFF7FEFF 		bl	filter
 6960 065e 0346     		mov	r3, r0
 6961 0660 1BB2     		sxth	r3, r3
 6962 0662 1946     		mov	r1, r3
 6963 0664 774A     		ldr	r2, .L569+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 162


 6964 0666 3423     		movs	r3, #52
 6965 0668 03FB05F3 		mul	r3, r3, r5
 6966 066c 1344     		add	r3, r3, r2
 6967 066e 1033     		adds	r3, r3, #16
 6968 0670 1960     		str	r1, [r3]
2049:..\src/interruptions.c ****         
2050:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2051:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6969              		.loc 1 2051 0
 6970 0672 774B     		ldr	r3, .L569+28
 6971 0674 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6972 0676 042B     		cmp	r3, #4
 6973 0678 40F2D280 		bls	.L444
2052:..\src/interruptions.c ****             // Filter and Set currents
2053:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 6974              		.loc 1 2053 0
 6975 067c 6D4B     		ldr	r3, .L569
 6976 067e 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6977 0682 002B     		cmp	r3, #0
 6978 0684 21D1     		bne	.L445
2054:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6979              		.loc 1 2054 0
 6980 0686 6B4B     		ldr	r3, .L569
 6981 0688 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6982 068c 1C46     		mov	r4, r3
 6983 068e 6A4B     		ldr	r3, .L569+4
 6984 0690 B3F90A30 		ldrsh	r3, [r3, #10]
 6985 0694 A3F5CE63 		sub	r3, r3, #1648
 6986 0698 45F66A02 		movw	r2, #22634
 6987 069c 02FB03F3 		mul	r3, r2, r3
 6988 06a0 5B13     		asrs	r3, r3, #13
 6989 06a2 1BB2     		sxth	r3, r3
 6990 06a4 1A46     		mov	r2, r3
 6991 06a6 654B     		ldr	r3, .L569+8
 6992 06a8 93F90130 		ldrsb	r3, [r3, #1]
 6993 06ac 03FB02F3 		mul	r3, r3, r2
 6994 06b0 6849     		ldr	r1, .L569+32
 6995 06b2 1846     		mov	r0, r3
 6996 06b4 FFF7FEFF 		bl	filter
 6997 06b8 0146     		mov	r1, r0
 6998 06ba 624A     		ldr	r2, .L569+16
 6999 06bc 3423     		movs	r3, #52
 7000 06be 03FB04F3 		mul	r3, r3, r4
 7001 06c2 1344     		add	r3, r3, r2
 7002 06c4 0C33     		adds	r3, r3, #12
 7003 06c6 1960     		str	r1, [r3]
 7004 06c8 42E0     		b	.L446
 7005              	.L445:
2055:..\src/interruptions.c ****             } 
2056:..\src/interruptions.c ****             else {
2057:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7006              		.loc 1 2057 0
 7007 06ca 5A4B     		ldr	r3, .L569
 7008 06cc 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7009 06d0 022B     		cmp	r3, #2
 7010 06d2 21D1     		bne	.L447
2058:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 163


2059:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7011              		.loc 1 2059 0
 7012 06d4 574B     		ldr	r3, .L569
 7013 06d6 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7014 06da 1C46     		mov	r4, r3
 7015 06dc 564B     		ldr	r3, .L569+4
 7016 06de B3F90A30 		ldrsh	r3, [r3, #10]
 7017 06e2 A3F28F63 		subw	r3, r3, #1679
 7018 06e6 45F65072 		movw	r2, #24400
 7019 06ea 02FB03F3 		mul	r3, r2, r3
 7020 06ee 5B13     		asrs	r3, r3, #13
 7021 06f0 1BB2     		sxth	r3, r3
 7022 06f2 1A46     		mov	r2, r3
 7023 06f4 514B     		ldr	r3, .L569+8
 7024 06f6 93F90130 		ldrsb	r3, [r3, #1]
 7025 06fa 03FB02F3 		mul	r3, r3, r2
 7026 06fe 5549     		ldr	r1, .L569+32
 7027 0700 1846     		mov	r0, r3
 7028 0702 FFF7FEFF 		bl	filter
 7029 0706 0146     		mov	r1, r0
 7030 0708 4E4A     		ldr	r2, .L569+16
 7031 070a 3423     		movs	r3, #52
 7032 070c 03FB04F3 		mul	r3, r3, r4
 7033 0710 1344     		add	r3, r3, r2
 7034 0712 0C33     		adds	r3, r3, #12
 7035 0714 1960     		str	r1, [r3]
 7036 0716 1BE0     		b	.L446
 7037              	.L447:
2060:..\src/interruptions.c ****                 } else { // [GS]
2061:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7038              		.loc 1 2061 0
 7039 0718 464B     		ldr	r3, .L569
 7040 071a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7041 071e 1846     		mov	r0, r3
 7042 0720 454B     		ldr	r3, .L569+4
 7043 0722 B3F90A30 		ldrsh	r3, [r3, #10]
 7044 0726 A3F26362 		subw	r2, r3, #1635
 7045 072a 1346     		mov	r3, r2
 7046 072c 1B01     		lsls	r3, r3, #4
 7047 072e 9B1A     		subs	r3, r3, r2
 7048 0730 5B01     		lsls	r3, r3, #5
 7049 0732 1B11     		asrs	r3, r3, #4
 7050 0734 1BB2     		sxth	r3, r3
 7051 0736 1A46     		mov	r2, r3
 7052 0738 404B     		ldr	r3, .L569+8
 7053 073a 93F90130 		ldrsb	r3, [r3, #1]
 7054 073e 03FB02F2 		mul	r2, r3, r2
 7055 0742 4049     		ldr	r1, .L569+16
 7056 0744 3423     		movs	r3, #52
 7057 0746 03FB00F3 		mul	r3, r3, r0
 7058 074a 0B44     		add	r3, r3, r1
 7059 074c 0C33     		adds	r3, r3, #12
 7060 074e 1A60     		str	r2, [r3]
 7061              	.L446:
2062:..\src/interruptions.c ****                 }
2063:..\src/interruptions.c ****             }
2064:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 164


2065:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7062              		.loc 1 2065 0
 7063 0750 384B     		ldr	r3, .L569
 7064 0752 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7065 0756 1D46     		mov	r5, r3
 7066 0758 364B     		ldr	r3, .L569
 7067 075a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7068 075e 1946     		mov	r1, r3
 7069 0760 384A     		ldr	r2, .L569+16
 7070 0762 3423     		movs	r3, #52
 7071 0764 03FB01F3 		mul	r3, r3, r1
 7072 0768 1344     		add	r3, r3, r2
 7073 076a 0C33     		adds	r3, r3, #12
 7074 076c 1C68     		ldr	r4, [r3]
 7075 076e 314B     		ldr	r3, .L569
 7076 0770 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7077 0774 1946     		mov	r1, r3
 7078 0776 334A     		ldr	r2, .L569+16
 7079 0778 3423     		movs	r3, #52
 7080 077a 03FB01F3 		mul	r3, r3, r1
 7081 077e 1344     		add	r3, r3, r2
 7082 0780 1A68     		ldr	r2, [r3]
 7083 0782 2C4B     		ldr	r3, .L569
 7084 0784 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7085 0788 1846     		mov	r0, r3
 7086 078a 2A49     		ldr	r1, .L569
 7087 078c 0346     		mov	r3, r0
 7088 078e 5B00     		lsls	r3, r3, #1
 7089 0790 0344     		add	r3, r3, r0
 7090 0792 1B01     		lsls	r3, r3, #4
 7091 0794 0B44     		add	r3, r3, r1
 7092 0796 03F29513 		addw	r3, r3, #405
 7093 079a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7094 079c 42FA03F6 		asr	r6, r2, r3
 7095 07a0 244B     		ldr	r3, .L569
 7096 07a2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7097 07a6 1946     		mov	r1, r3
 7098 07a8 264A     		ldr	r2, .L569+16
 7099 07aa 3423     		movs	r3, #52
 7100 07ac 03FB01F3 		mul	r3, r3, r1
 7101 07b0 1344     		add	r3, r3, r2
 7102 07b2 1C33     		adds	r3, r3, #28
 7103 07b4 1A68     		ldr	r2, [r3]
 7104 07b6 1F4B     		ldr	r3, .L569
 7105 07b8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7106 07bc 1846     		mov	r0, r3
 7107 07be 1D49     		ldr	r1, .L569
 7108 07c0 0346     		mov	r3, r0
 7109 07c2 5B00     		lsls	r3, r3, #1
 7110 07c4 0344     		add	r3, r3, r0
 7111 07c6 1B01     		lsls	r3, r3, #4
 7112 07c8 0B44     		add	r3, r3, r1
 7113 07ca 03F29513 		addw	r3, r3, #405
 7114 07ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7115 07d0 42FA03FE 		asr	lr, r2, r3
 7116 07d4 1C4B     		ldr	r3, .L569+20
 7117 07d6 1A69     		ldr	r2, [r3, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 165


 7118 07d8 164B     		ldr	r3, .L569
 7119 07da 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7120 07de 1846     		mov	r0, r3
 7121 07e0 1449     		ldr	r1, .L569
 7122 07e2 0346     		mov	r3, r0
 7123 07e4 5B00     		lsls	r3, r3, #1
 7124 07e6 0344     		add	r3, r3, r0
 7125 07e8 1B01     		lsls	r3, r3, #4
 7126 07ea 0B44     		add	r3, r3, r1
 7127 07ec 03F29513 		addw	r3, r3, #405
 7128 07f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7129 07f2 42FA03F3 		asr	r3, r2, r3
 7130 07f6 7246     		mov	r2, lr
 7131 07f8 3146     		mov	r1, r6
 7132 07fa 0120     		movs	r0, #1
 7133 07fc FFF7FEFF 		bl	curr_estim
 7134 0800 0346     		mov	r3, r0
 7135 0802 E31A     		subs	r3, r4, r3
 7136 0804 1449     		ldr	r1, .L569+36
 7137 0806 1846     		mov	r0, r3
 7138 0808 FFF7FEFF 		bl	filter
 7139 080c 0346     		mov	r3, r0
 7140 080e 1BB2     		sxth	r3, r3
 7141 0810 1946     		mov	r1, r3
 7142 0812 0C4A     		ldr	r2, .L569+16
 7143 0814 3423     		movs	r3, #52
 7144 0816 03FB05F3 		mul	r3, r3, r5
 7145 081a 1344     		add	r3, r3, r2
 7146 081c 1033     		adds	r3, r3, #16
 7147 081e 1960     		str	r1, [r3]
 7148              	.L444:
2066:..\src/interruptions.c ****         }
2067:..\src/interruptions.c ****     
2068:..\src/interruptions.c ****         // Check Interrupt 
2069:..\src/interruptions.c ****     
2070:..\src/interruptions.c ****         if (interrupt_flag){
 7149              		.loc 1 2070 0
 7150 0820 0E4B     		ldr	r3, .L569+40
 7151 0822 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7152 0824 002B     		cmp	r3, #0
 7153 0826 1CD0     		beq	.L432
2071:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7154              		.loc 1 2071 0
 7155 0828 0C4B     		ldr	r3, .L569+40
 7156 082a 0022     		movs	r2, #0
 7157 082c 1A70     		strb	r2, [r3]
2072:..\src/interruptions.c ****             interrupt_manager();
 7158              		.loc 1 2072 0
 7159 082e FFF7FEFF 		bl	interrupt_manager
 7160 0832 16E0     		b	.L432
 7161              	.L570:
 7162              		.align	2
 7163              	.L569:
 7164 0834 00000000 		.word	g_mem
 7165 0838 00000000 		.word	ADC_buf
 7166 083c 00000000 		.word	pwm_sign
 7167 0840 00000000 		.word	filt_i
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 166


 7168 0844 00000000 		.word	g_meas
 7169 0848 00000000 		.word	g_ref
 7170 084c 00000000 		.word	filt_curr_diff
 7171 0850 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7172 0854 08000000 		.word	filt_i+8
 7173 0858 08000000 		.word	filt_curr_diff+8
 7174 085c 00000000 		.word	interrupt_flag
 7175              	.L547:
1969:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7176              		.loc 1 1969 0
 7177 0860 00BF     		nop
 7178              	.L432:
2073:..\src/interruptions.c ****         }
2074:..\src/interruptions.c **** 
2075:..\src/interruptions.c ****     }
2076:..\src/interruptions.c ****     
2077:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2078:..\src/interruptions.c ****         
2079:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2080:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7179              		.loc 1 2080 0
 7180 0862 B24B     		ldr	r3, .L571
 7181 0864 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7182 0868 002B     		cmp	r3, #0
 7183 086a 05D1     		bne	.L448
2081:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7184              		.loc 1 2081 0
 7185 086c B04B     		ldr	r3, .L571+4
 7186 086e 0022     		movs	r2, #0
 7187 0870 1A70     		strb	r2, [r3]
2082:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7188              		.loc 1 2082 0
 7189 0872 B04B     		ldr	r3, .L571+8
 7190 0874 0022     		movs	r2, #0
 7191 0876 1A70     		strb	r2, [r3]
 7192              	.L448:
2083:..\src/interruptions.c ****     }
2084:..\src/interruptions.c **** 
2085:..\src/interruptions.c ****     // EMG 1 calibration state machine
2086:..\src/interruptions.c ****    
2087:..\src/interruptions.c ****     // Calibration state machine
2088:..\src/interruptions.c ****     switch(emg_1_status) {
 7193              		.loc 1 2088 0
 7194 0878 AD4B     		ldr	r3, .L571+4
 7195 087a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7196 087c 032B     		cmp	r3, #3
 7197 087e 00F2E180 		bhi	.L548
 7198 0882 01A2     		adr	r2, .L451
 7199 0884 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7200              		.p2align 2
 7201              	.L451:
 7202 0888 99080000 		.word	.L450+1
 7203 088c 49090000 		.word	.L452+1
 7204 0890 5F090000 		.word	.L453+1
 7205 0894 9B090000 		.word	.L454+1
 7206              		.p2align 1
 7207              	.L450:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 167


2089:..\src/interruptions.c ****         case NORMAL: // normal execution
2090:..\src/interruptions.c ****             
2091:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7208              		.loc 1 2091 0
 7209 0898 A74B     		ldr	r3, .L571+12
 7210 089a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7211 089e 022B     		cmp	r3, #2
 7212 08a0 13D0     		beq	.L455
 7213              		.loc 1 2091 0 is_stmt 0 discriminator 1
 7214 08a2 A54B     		ldr	r3, .L571+12
 7215 08a4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7216 08a8 032B     		cmp	r3, #3
 7217 08aa 0ED0     		beq	.L455
2092:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7218              		.loc 1 2092 0 is_stmt 1
 7219 08ac 9F4B     		ldr	r3, .L571
 7220 08ae 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7221 08b2 0233     		adds	r3, r3, #2
 7222 08b4 A14A     		ldr	r2, .L571+16
 7223 08b6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7224 08ba A3F26763 		subw	r3, r3, #1639
 7225 08be 5722     		movs	r2, #87
 7226 08c0 02FB03F3 		mul	r3, r2, r3
 7227 08c4 5B11     		asrs	r3, r3, #5
 7228 08c6 7B60     		str	r3, [r7, #4]
 7229 08c8 07E0     		b	.L456
 7230              	.L455:
2093:..\src/interruptions.c ****             }
2094:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2095:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7231              		.loc 1 2095 0
 7232 08ca 984B     		ldr	r3, .L571
 7233 08cc 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7234 08d0 0233     		adds	r3, r3, #2
 7235 08d2 9A4A     		ldr	r2, .L571+16
 7236 08d4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7237 08d8 7B60     		str	r3, [r7, #4]
 7238              	.L456:
2096:..\src/interruptions.c ****             }
2097:..\src/interruptions.c ****             
2098:..\src/interruptions.c ****             if (i_aux < 0) 
 7239              		.loc 1 2098 0
 7240 08da 7B68     		ldr	r3, [r7, #4]
 7241 08dc 002B     		cmp	r3, #0
 7242 08de 01DA     		bge	.L457
2099:..\src/interruptions.c ****                 i_aux = 0;
 7243              		.loc 1 2099 0
 7244 08e0 0023     		movs	r3, #0
 7245 08e2 7B60     		str	r3, [r7, #4]
 7246              	.L457:
2100:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7247              		.loc 1 2100 0
 7248 08e4 9649     		ldr	r1, .L571+20
 7249 08e6 7868     		ldr	r0, [r7, #4]
 7250 08e8 FFF7FEFF 		bl	filter
 7251 08ec 7860     		str	r0, [r7, #4]
2101:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 168


 7252              		.loc 1 2101 0
 7253 08ee 7B68     		ldr	r3, [r7, #4]
 7254 08f0 9B02     		lsls	r3, r3, #10
 7255 08f2 1A46     		mov	r2, r3
 7256 08f4 904B     		ldr	r3, .L571+12
 7257 08f6 D3F8F431 		ldr	r3, [r3, #500]
 7258 08fa B2FBF3F3 		udiv	r3, r2, r3
 7259 08fe 7B60     		str	r3, [r7, #4]
2102:..\src/interruptions.c **** 
2103:..\src/interruptions.c ****             if (interrupt_flag){
 7260              		.loc 1 2103 0
 7261 0900 904B     		ldr	r3, .L571+24
 7262 0902 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7263 0904 002B     		cmp	r3, #0
 7264 0906 04D0     		beq	.L458
2104:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7265              		.loc 1 2104 0
 7266 0908 8E4B     		ldr	r3, .L571+24
 7267 090a 0022     		movs	r2, #0
 7268 090c 1A70     		strb	r2, [r3]
2105:..\src/interruptions.c ****                 interrupt_manager();
 7269              		.loc 1 2105 0
 7270 090e FFF7FEFF 		bl	interrupt_manager
 7271              	.L458:
2106:..\src/interruptions.c ****             }
2107:..\src/interruptions.c ****             //Saturation
2108:..\src/interruptions.c ****             if (i_aux < 0)
 7272              		.loc 1 2108 0
 7273 0912 7B68     		ldr	r3, [r7, #4]
 7274 0914 002B     		cmp	r3, #0
 7275 0916 02DA     		bge	.L459
2109:..\src/interruptions.c ****                 i_aux = 0;
 7276              		.loc 1 2109 0
 7277 0918 0023     		movs	r3, #0
 7278 091a 7B60     		str	r3, [r7, #4]
 7279 091c 06E0     		b	.L460
 7280              	.L459:
2110:..\src/interruptions.c ****             else 
2111:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7281              		.loc 1 2111 0
 7282 091e 7B68     		ldr	r3, [r7, #4]
 7283 0920 B3F5806F 		cmp	r3, #1024
 7284 0924 02DD     		ble	.L460
2112:..\src/interruptions.c ****                     i_aux = 1024;
 7285              		.loc 1 2112 0
 7286 0926 4FF48063 		mov	r3, #1024
 7287 092a 7B60     		str	r3, [r7, #4]
 7288              	.L460:
2113:..\src/interruptions.c ****             
2114:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7289              		.loc 1 2114 0
 7290 092c 864A     		ldr	r2, .L571+28
 7291 092e 7B68     		ldr	r3, [r7, #4]
 7292 0930 1360     		str	r3, [r2]
2115:..\src/interruptions.c **** 
2116:..\src/interruptions.c ****             if (interrupt_flag){
 7293              		.loc 1 2116 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 169


 7294 0932 844B     		ldr	r3, .L571+24
 7295 0934 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7296 0936 002B     		cmp	r3, #0
 7297 0938 00F08680 		beq	.L549
2117:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7298              		.loc 1 2117 0
 7299 093c 814B     		ldr	r3, .L571+24
 7300 093e 0022     		movs	r2, #0
 7301 0940 1A70     		strb	r2, [r3]
2118:..\src/interruptions.c ****                 interrupt_manager();
 7302              		.loc 1 2118 0
 7303 0942 FFF7FEFF 		bl	interrupt_manager
2119:..\src/interruptions.c ****             }
2120:..\src/interruptions.c ****             
2121:..\src/interruptions.c ****             break;
 7304              		.loc 1 2121 0
 7305 0946 7FE0     		b	.L549
 7306              	.L452:
2122:..\src/interruptions.c **** 
2123:..\src/interruptions.c ****         case RESET: // reset variables
2124:..\src/interruptions.c ****             emg_counter_1 = 0;
 7307              		.loc 1 2124 0
 7308 0948 804B     		ldr	r3, .L571+32
 7309 094a 0022     		movs	r2, #0
 7310 094c 1A80     		strh	r2, [r3]	@ movhi
2125:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7311              		.loc 1 2125 0
 7312 094e 7A4B     		ldr	r3, .L571+12
 7313 0950 0022     		movs	r2, #0
 7314 0952 C3F8F421 		str	r2, [r3, #500]
2126:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7315              		.loc 1 2126 0
 7316 0956 764B     		ldr	r3, .L571+4
 7317 0958 0222     		movs	r2, #2
 7318 095a 1A70     		strb	r2, [r3]
2127:..\src/interruptions.c ****             break;
 7319              		.loc 1 2127 0
 7320 095c 79E0     		b	.L462
 7321              	.L453:
2128:..\src/interruptions.c **** 
2129:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2130:..\src/interruptions.c ****             emg_counter_1++;
 7322              		.loc 1 2130 0
 7323 095e 7B4B     		ldr	r3, .L571+32
 7324 0960 1B88     		ldrh	r3, [r3]
 7325 0962 0133     		adds	r3, r3, #1
 7326 0964 9AB2     		uxth	r2, r3
 7327 0966 794B     		ldr	r3, .L571+32
 7328 0968 1A80     		strh	r2, [r3]	@ movhi
2131:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7329              		.loc 1 2131 0
 7330 096a 784B     		ldr	r3, .L571+32
 7331 096c 1B88     		ldrh	r3, [r3]
 7332 096e B3F5FA7F 		cmp	r3, #500
 7333 0972 6BD1     		bne	.L550
2132:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7334              		.loc 1 2132 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 170


 7335 0974 754B     		ldr	r3, .L571+32
 7336 0976 0022     		movs	r2, #0
 7337 0978 1A80     		strh	r2, [r3]	@ movhi
2133:..\src/interruptions.c ****                 LED_control(1);
 7338              		.loc 1 2133 0
 7339 097a 0120     		movs	r0, #1
 7340 097c FFF7FEFF 		bl	LED_control
2134:..\src/interruptions.c **** 				
2135:..\src/interruptions.c ****                 if (interrupt_flag){
 7341              		.loc 1 2135 0
 7342 0980 704B     		ldr	r3, .L571+24
 7343 0982 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7344 0984 002B     		cmp	r3, #0
 7345 0986 04D0     		beq	.L464
2136:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7346              		.loc 1 2136 0
 7347 0988 6E4B     		ldr	r3, .L571+24
 7348 098a 0022     		movs	r2, #0
 7349 098c 1A70     		strb	r2, [r3]
2137:..\src/interruptions.c ****                     interrupt_manager();
 7350              		.loc 1 2137 0
 7351 098e FFF7FEFF 		bl	interrupt_manager
 7352              	.L464:
2138:..\src/interruptions.c ****                 }
2139:..\src/interruptions.c ****                 
2140:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7353              		.loc 1 2140 0
 7354 0992 674B     		ldr	r3, .L571+4
 7355 0994 0322     		movs	r2, #3
 7356 0996 1A70     		strb	r2, [r3]
2141:..\src/interruptions.c ****             }
2142:..\src/interruptions.c ****             break;
 7357              		.loc 1 2142 0
 7358 0998 58E0     		b	.L550
 7359              	.L454:
2143:..\src/interruptions.c **** 
2144:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2145:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2146:..\src/interruptions.c ****             emg_counter_1++;
 7360              		.loc 1 2146 0
 7361 099a 6C4B     		ldr	r3, .L571+32
 7362 099c 1B88     		ldrh	r3, [r3]
 7363 099e 0133     		adds	r3, r3, #1
 7364 09a0 9AB2     		uxth	r2, r3
 7365 09a2 6A4B     		ldr	r3, .L571+32
 7366 09a4 1A80     		strh	r2, [r3]	@ movhi
2147:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7367              		.loc 1 2147 0
 7368 09a6 614B     		ldr	r3, .L571
 7369 09a8 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7370 09ac 0233     		adds	r3, r3, #2
 7371 09ae 634A     		ldr	r2, .L571+16
 7372 09b0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7373 09b4 002B     		cmp	r3, #0
 7374 09b6 07DA     		bge	.L465
2148:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7375              		.loc 1 2148 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 171


 7376 09b8 5C4B     		ldr	r3, .L571
 7377 09ba 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7378 09be 0233     		adds	r3, r3, #2
 7379 09c0 5E4A     		ldr	r2, .L571+16
 7380 09c2 0021     		movs	r1, #0
 7381 09c4 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7382              	.L465:
2149:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7383              		.loc 1 2149 0
 7384 09c8 584B     		ldr	r3, .L571
 7385 09ca 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7386 09ce 0233     		adds	r3, r3, #2
 7387 09d0 5A4A     		ldr	r2, .L571+16
 7388 09d2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7389 09d6 5A49     		ldr	r1, .L571+20
 7390 09d8 1846     		mov	r0, r3
 7391 09da FFF7FEFF 		bl	filter
 7392 09de 0246     		mov	r2, r0
 7393 09e0 554B     		ldr	r3, .L571+12
 7394 09e2 D3F8F431 		ldr	r3, [r3, #500]
 7395 09e6 1344     		add	r3, r3, r2
 7396 09e8 534A     		ldr	r2, .L571+12
 7397 09ea C2F8F431 		str	r3, [r2, #500]
2150:..\src/interruptions.c ****             
2151:..\src/interruptions.c ****             if (interrupt_flag){
 7398              		.loc 1 2151 0
 7399 09ee 554B     		ldr	r3, .L571+24
 7400 09f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7401 09f2 002B     		cmp	r3, #0
 7402 09f4 04D0     		beq	.L466
2152:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7403              		.loc 1 2152 0
 7404 09f6 534B     		ldr	r3, .L571+24
 7405 09f8 0022     		movs	r2, #0
 7406 09fa 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****                 interrupt_manager();
 7407              		.loc 1 2153 0
 7408 09fc FFF7FEFF 		bl	interrupt_manager
 7409              	.L466:
2154:..\src/interruptions.c ****             }
2155:..\src/interruptions.c ****             
2156:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7410              		.loc 1 2156 0
 7411 0a00 524B     		ldr	r3, .L571+32
 7412 0a02 1B88     		ldrh	r3, [r3]
 7413 0a04 B3F57A7F 		cmp	r3, #1000
 7414 0a08 22D1     		bne	.L551
2157:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7415              		.loc 1 2157 0
 7416 0a0a 4B4B     		ldr	r3, .L571+12
 7417 0a0c D3F8F431 		ldr	r3, [r3, #500]
 7418 0a10 4F4A     		ldr	r2, .L571+36
 7419 0a12 A2FB0323 		umull	r2, r3, r2, r3
 7420 0a16 9B09     		lsrs	r3, r3, #6
 7421 0a18 474A     		ldr	r2, .L571+12
 7422 0a1a C2F8F431 		str	r3, [r2, #500]
2158:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 172


2159:..\src/interruptions.c ****                 if (interrupt_flag){
 7423              		.loc 1 2159 0
 7424 0a1e 494B     		ldr	r3, .L571+24
 7425 0a20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7426 0a22 002B     		cmp	r3, #0
 7427 0a24 04D0     		beq	.L468
2160:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7428              		.loc 1 2160 0
 7429 0a26 474B     		ldr	r3, .L571+24
 7430 0a28 0022     		movs	r2, #0
 7431 0a2a 1A70     		strb	r2, [r3]
2161:..\src/interruptions.c ****                     interrupt_manager();
 7432              		.loc 1 2161 0
 7433 0a2c FFF7FEFF 		bl	interrupt_manager
 7434              	.L468:
2162:..\src/interruptions.c ****                 }                    
2163:..\src/interruptions.c ****                 
2164:..\src/interruptions.c ****                 LED_control(0);
 7435              		.loc 1 2164 0
 7436 0a30 0020     		movs	r0, #0
 7437 0a32 FFF7FEFF 		bl	LED_control
2165:..\src/interruptions.c **** 				
2166:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7438              		.loc 1 2166 0
 7439 0a36 454B     		ldr	r3, .L571+32
 7440 0a38 0022     		movs	r2, #0
 7441 0a3a 1A80     		strh	r2, [r3]	@ movhi
2167:..\src/interruptions.c **** 
2168:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7442              		.loc 1 2168 0
 7443 0a3c 3C4B     		ldr	r3, .L571+4
 7444 0a3e 0022     		movs	r2, #0
 7445 0a40 1A70     		strb	r2, [r3]
2169:..\src/interruptions.c ****             }
2170:..\src/interruptions.c ****             break;
 7446              		.loc 1 2170 0
 7447 0a42 05E0     		b	.L551
 7448              	.L548:
2171:..\src/interruptions.c **** 
2172:..\src/interruptions.c ****         default:
2173:..\src/interruptions.c ****             break;
 7449              		.loc 1 2173 0
 7450 0a44 00BF     		nop
 7451 0a46 04E0     		b	.L462
 7452              	.L549:
2121:..\src/interruptions.c **** 
 7453              		.loc 1 2121 0
 7454 0a48 00BF     		nop
 7455 0a4a 02E0     		b	.L462
 7456              	.L550:
2142:..\src/interruptions.c **** 
 7457              		.loc 1 2142 0
 7458 0a4c 00BF     		nop
 7459 0a4e 00E0     		b	.L462
 7460              	.L551:
2170:..\src/interruptions.c **** 
 7461              		.loc 1 2170 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 173


 7462 0a50 00BF     		nop
 7463              	.L462:
2174:..\src/interruptions.c ****     }
2175:..\src/interruptions.c **** 
2176:..\src/interruptions.c ****     if (interrupt_flag){
 7464              		.loc 1 2176 0
 7465 0a52 3C4B     		ldr	r3, .L571+24
 7466 0a54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7467 0a56 002B     		cmp	r3, #0
 7468 0a58 04D0     		beq	.L469
2177:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7469              		.loc 1 2177 0
 7470 0a5a 3A4B     		ldr	r3, .L571+24
 7471 0a5c 0022     		movs	r2, #0
 7472 0a5e 1A70     		strb	r2, [r3]
2178:..\src/interruptions.c ****         interrupt_manager();
 7473              		.loc 1 2178 0
 7474 0a60 FFF7FEFF 		bl	interrupt_manager
 7475              	.L469:
2179:..\src/interruptions.c ****     }
2180:..\src/interruptions.c ****     // EMG 2 calibration state machine
2181:..\src/interruptions.c ****     switch(emg_2_status) {
 7476              		.loc 1 2181 0
 7477 0a64 334B     		ldr	r3, .L571+8
 7478 0a66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7479 0a68 052B     		cmp	r3, #5
 7480 0a6a 00F2C681 		bhi	.L552
 7481 0a6e 01A2     		adr	r2, .L472
 7482 0a70 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7483              		.p2align 2
 7484              	.L472:
 7485 0a74 8D0A0000 		.word	.L471+1
 7486 0a78 590B0000 		.word	.L473+1
 7487 0a7c 810B0000 		.word	.L474+1
 7488 0a80 BF0B0000 		.word	.L475+1
 7489 0a84 710C0000 		.word	.L476+1
 7490 0a88 830C0000 		.word	.L477+1
 7491              		.p2align 1
 7492              	.L471:
2182:..\src/interruptions.c ****         case NORMAL: // normal execution
2183:..\src/interruptions.c ****         
2184:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7493              		.loc 1 2184 0
 7494 0a8c 2A4B     		ldr	r3, .L571+12
 7495 0a8e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7496 0a92 022B     		cmp	r3, #2
 7497 0a94 14D0     		beq	.L478
 7498              		.loc 1 2184 0 is_stmt 0 discriminator 1
 7499 0a96 284B     		ldr	r3, .L571+12
 7500 0a98 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7501 0a9c 032B     		cmp	r3, #3
 7502 0a9e 0FD0     		beq	.L478
2185:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7503              		.loc 1 2185 0 is_stmt 1
 7504 0aa0 224B     		ldr	r3, .L571
 7505 0aa2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7506 0aa6 C3F10303 		rsb	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 174


 7507 0aaa 244A     		ldr	r2, .L571+16
 7508 0aac 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7509 0ab0 A3F26763 		subw	r3, r3, #1639
 7510 0ab4 5722     		movs	r2, #87
 7511 0ab6 02FB03F3 		mul	r3, r2, r3
 7512 0aba 5B11     		asrs	r3, r3, #5
 7513 0abc 7B60     		str	r3, [r7, #4]
 7514 0abe 08E0     		b	.L479
 7515              	.L478:
2186:..\src/interruptions.c ****             }
2187:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2188:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7516              		.loc 1 2188 0
 7517 0ac0 1A4B     		ldr	r3, .L571
 7518 0ac2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7519 0ac6 C3F10303 		rsb	r3, r3, #3
 7520 0aca 1C4A     		ldr	r2, .L571+16
 7521 0acc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7522 0ad0 7B60     		str	r3, [r7, #4]
 7523              	.L479:
2189:..\src/interruptions.c ****             }
2190:..\src/interruptions.c **** 
2191:..\src/interruptions.c ****             if (i_aux < 0)
 7524              		.loc 1 2191 0
 7525 0ad2 7B68     		ldr	r3, [r7, #4]
 7526 0ad4 002B     		cmp	r3, #0
 7527 0ad6 01DA     		bge	.L480
2192:..\src/interruptions.c ****                 i_aux = 0;
 7528              		.loc 1 2192 0
 7529 0ad8 0023     		movs	r3, #0
 7530 0ada 7B60     		str	r3, [r7, #4]
 7531              	.L480:
2193:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7532              		.loc 1 2193 0
 7533 0adc 1D49     		ldr	r1, .L571+40
 7534 0ade 7868     		ldr	r0, [r7, #4]
 7535 0ae0 FFF7FEFF 		bl	filter
 7536 0ae4 7860     		str	r0, [r7, #4]
2194:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7537              		.loc 1 2194 0
 7538 0ae6 7B68     		ldr	r3, [r7, #4]
 7539 0ae8 9B02     		lsls	r3, r3, #10
 7540 0aea 1A46     		mov	r2, r3
 7541 0aec 124B     		ldr	r3, .L571+12
 7542 0aee D3F8F831 		ldr	r3, [r3, #504]
 7543 0af2 B2FBF3F3 		udiv	r3, r2, r3
 7544 0af6 7B60     		str	r3, [r7, #4]
2195:..\src/interruptions.c **** 
2196:..\src/interruptions.c ****             if (interrupt_flag){
 7545              		.loc 1 2196 0
 7546 0af8 124B     		ldr	r3, .L571+24
 7547 0afa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7548 0afc 002B     		cmp	r3, #0
 7549 0afe 04D0     		beq	.L481
2197:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7550              		.loc 1 2197 0
 7551 0b00 104B     		ldr	r3, .L571+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 175


 7552 0b02 0022     		movs	r2, #0
 7553 0b04 1A70     		strb	r2, [r3]
2198:..\src/interruptions.c ****                 interrupt_manager();
 7554              		.loc 1 2198 0
 7555 0b06 FFF7FEFF 		bl	interrupt_manager
 7556              	.L481:
2199:..\src/interruptions.c ****             }
2200:..\src/interruptions.c ****             
2201:..\src/interruptions.c ****             if (i_aux < 0) 
 7557              		.loc 1 2201 0
 7558 0b0a 7B68     		ldr	r3, [r7, #4]
 7559 0b0c 002B     		cmp	r3, #0
 7560 0b0e 02DA     		bge	.L482
2202:..\src/interruptions.c ****                 i_aux = 0;
 7561              		.loc 1 2202 0
 7562 0b10 0023     		movs	r3, #0
 7563 0b12 7B60     		str	r3, [r7, #4]
 7564 0b14 06E0     		b	.L483
 7565              	.L482:
2203:..\src/interruptions.c ****             else 
2204:..\src/interruptions.c ****                 if (i_aux > 1024)
 7566              		.loc 1 2204 0
 7567 0b16 7B68     		ldr	r3, [r7, #4]
 7568 0b18 B3F5806F 		cmp	r3, #1024
 7569 0b1c 02DD     		ble	.L483
2205:..\src/interruptions.c ****                     i_aux = 1024;
 7570              		.loc 1 2205 0
 7571 0b1e 4FF48063 		mov	r3, #1024
 7572 0b22 7B60     		str	r3, [r7, #4]
 7573              	.L483:
2206:..\src/interruptions.c ****             
2207:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7574              		.loc 1 2207 0
 7575 0b24 084A     		ldr	r2, .L571+28
 7576 0b26 7B68     		ldr	r3, [r7, #4]
 7577 0b28 5360     		str	r3, [r2, #4]
2208:..\src/interruptions.c **** 
2209:..\src/interruptions.c ****             break;
 7578              		.loc 1 2209 0
 7579 0b2a 88E1     		b	.L484
 7580              	.L572:
 7581              		.align	2
 7582              	.L571:
 7583 0b2c 00000000 		.word	c_mem
 7584 0b30 00000000 		.word	emg_1_status
 7585 0b34 00000000 		.word	emg_2_status
 7586 0b38 00000000 		.word	g_mem
 7587 0b3c 00000000 		.word	ADC_buf
 7588 0b40 00000000 		.word	filt_emg
 7589 0b44 00000000 		.word	interrupt_flag
 7590 0b48 00000000 		.word	g_adc_meas
 7591 0b4c 7C010000 		.word	emg_counter_1.10422
 7592 0b50 D34D6210 		.word	274877907
 7593 0b54 08000000 		.word	filt_emg+8
 7594              	.L473:
2210:..\src/interruptions.c **** 
2211:..\src/interruptions.c ****         case RESET: // reset variables
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 176


2212:..\src/interruptions.c ****             emg_counter_2 = 0;
 7595              		.loc 1 2212 0
 7596 0b58 AC4B     		ldr	r3, .L573
 7597 0b5a 0022     		movs	r2, #0
 7598 0b5c 1A80     		strh	r2, [r3]	@ movhi
2213:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7599              		.loc 1 2213 0
 7600 0b5e AC4B     		ldr	r3, .L573+4
 7601 0b60 0022     		movs	r2, #0
 7602 0b62 C3F8F821 		str	r2, [r3, #504]
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****             if (interrupt_flag){
 7603              		.loc 1 2215 0
 7604 0b66 AB4B     		ldr	r3, .L573+8
 7605 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7606 0b6a 002B     		cmp	r3, #0
 7607 0b6c 04D0     		beq	.L485
2216:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7608              		.loc 1 2216 0
 7609 0b6e A94B     		ldr	r3, .L573+8
 7610 0b70 0022     		movs	r2, #0
 7611 0b72 1A70     		strb	r2, [r3]
2217:..\src/interruptions.c ****                 interrupt_manager();
 7612              		.loc 1 2217 0
 7613 0b74 FFF7FEFF 		bl	interrupt_manager
 7614              	.L485:
2218:..\src/interruptions.c ****             }
2219:..\src/interruptions.c ****             
2220:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7615              		.loc 1 2220 0
 7616 0b78 A74B     		ldr	r3, .L573+12
 7617 0b7a 0422     		movs	r2, #4
 7618 0b7c 1A70     		strb	r2, [r3]
2221:..\src/interruptions.c ****             break;
 7619              		.loc 1 2221 0
 7620 0b7e 5EE1     		b	.L484
 7621              	.L474:
2222:..\src/interruptions.c **** 
2223:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2224:..\src/interruptions.c ****             emg_counter_2++;
 7622              		.loc 1 2224 0
 7623 0b80 A24B     		ldr	r3, .L573
 7624 0b82 1B88     		ldrh	r3, [r3]
 7625 0b84 0133     		adds	r3, r3, #1
 7626 0b86 9AB2     		uxth	r2, r3
 7627 0b88 A04B     		ldr	r3, .L573
 7628 0b8a 1A80     		strh	r2, [r3]	@ movhi
2225:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7629              		.loc 1 2225 0
 7630 0b8c 9F4B     		ldr	r3, .L573
 7631 0b8e 1B88     		ldrh	r3, [r3]
 7632 0b90 B3F5FA7F 		cmp	r3, #500
 7633 0b94 40F03381 		bne	.L553
2226:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7634              		.loc 1 2226 0
 7635 0b98 9C4B     		ldr	r3, .L573
 7636 0b9a 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 177


 7637 0b9c 1A80     		strh	r2, [r3]	@ movhi
2227:..\src/interruptions.c ****                 LED_control(1);
 7638              		.loc 1 2227 0
 7639 0b9e 0120     		movs	r0, #1
 7640 0ba0 FFF7FEFF 		bl	LED_control
2228:..\src/interruptions.c **** 
2229:..\src/interruptions.c ****                 if (interrupt_flag){
 7641              		.loc 1 2229 0
 7642 0ba4 9B4B     		ldr	r3, .L573+8
 7643 0ba6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7644 0ba8 002B     		cmp	r3, #0
 7645 0baa 04D0     		beq	.L487
2230:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7646              		.loc 1 2230 0
 7647 0bac 994B     		ldr	r3, .L573+8
 7648 0bae 0022     		movs	r2, #0
 7649 0bb0 1A70     		strb	r2, [r3]
2231:..\src/interruptions.c ****                     interrupt_manager();
 7650              		.loc 1 2231 0
 7651 0bb2 FFF7FEFF 		bl	interrupt_manager
 7652              	.L487:
2232:..\src/interruptions.c ****                 }
2233:..\src/interruptions.c ****                 
2234:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7653              		.loc 1 2234 0
 7654 0bb6 984B     		ldr	r3, .L573+12
 7655 0bb8 0322     		movs	r2, #3
 7656 0bba 1A70     		strb	r2, [r3]
2235:..\src/interruptions.c ****             }
2236:..\src/interruptions.c ****             break;
 7657              		.loc 1 2236 0
 7658 0bbc 1FE1     		b	.L553
 7659              	.L475:
2237:..\src/interruptions.c **** 
2238:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2239:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2240:..\src/interruptions.c ****             emg_counter_2++;
 7660              		.loc 1 2240 0
 7661 0bbe 934B     		ldr	r3, .L573
 7662 0bc0 1B88     		ldrh	r3, [r3]
 7663 0bc2 0133     		adds	r3, r3, #1
 7664 0bc4 9AB2     		uxth	r2, r3
 7665 0bc6 914B     		ldr	r3, .L573
 7666 0bc8 1A80     		strh	r2, [r3]	@ movhi
2241:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7667              		.loc 1 2241 0
 7668 0bca 944B     		ldr	r3, .L573+16
 7669 0bcc 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7670 0bd0 C3F10303 		rsb	r3, r3, #3
 7671 0bd4 924A     		ldr	r2, .L573+20
 7672 0bd6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7673 0bda 002B     		cmp	r3, #0
 7674 0bdc 08DA     		bge	.L488
2242:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7675              		.loc 1 2242 0
 7676 0bde 8F4B     		ldr	r3, .L573+16
 7677 0be0 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 178


 7678 0be4 C3F10303 		rsb	r3, r3, #3
 7679 0be8 8D4A     		ldr	r2, .L573+20
 7680 0bea 0021     		movs	r1, #0
 7681 0bec 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7682              	.L488:
2243:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7683              		.loc 1 2243 0
 7684 0bf0 8A4B     		ldr	r3, .L573+16
 7685 0bf2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7686 0bf6 C3F10303 		rsb	r3, r3, #3
 7687 0bfa 894A     		ldr	r2, .L573+20
 7688 0bfc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7689 0c00 8849     		ldr	r1, .L573+24
 7690 0c02 1846     		mov	r0, r3
 7691 0c04 FFF7FEFF 		bl	filter
 7692 0c08 0246     		mov	r2, r0
 7693 0c0a 814B     		ldr	r3, .L573+4
 7694 0c0c D3F8F831 		ldr	r3, [r3, #504]
 7695 0c10 1344     		add	r3, r3, r2
 7696 0c12 7F4A     		ldr	r2, .L573+4
 7697 0c14 C2F8F831 		str	r3, [r2, #504]
2244:..\src/interruptions.c **** 
2245:..\src/interruptions.c ****             if (interrupt_flag){
 7698              		.loc 1 2245 0
 7699 0c18 7E4B     		ldr	r3, .L573+8
 7700 0c1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7701 0c1c 002B     		cmp	r3, #0
 7702 0c1e 04D0     		beq	.L489
2246:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7703              		.loc 1 2246 0
 7704 0c20 7C4B     		ldr	r3, .L573+8
 7705 0c22 0022     		movs	r2, #0
 7706 0c24 1A70     		strb	r2, [r3]
2247:..\src/interruptions.c ****                 interrupt_manager();
 7707              		.loc 1 2247 0
 7708 0c26 FFF7FEFF 		bl	interrupt_manager
 7709              	.L489:
2248:..\src/interruptions.c ****             }
2249:..\src/interruptions.c ****             
2250:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7710              		.loc 1 2250 0
 7711 0c2a 784B     		ldr	r3, .L573
 7712 0c2c 1B88     		ldrh	r3, [r3]
 7713 0c2e B3F57A7F 		cmp	r3, #1000
 7714 0c32 40F0E680 		bne	.L554
2251:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7715              		.loc 1 2251 0
 7716 0c36 764B     		ldr	r3, .L573+4
 7717 0c38 D3F8F831 		ldr	r3, [r3, #504]
 7718 0c3c 7A4A     		ldr	r2, .L573+28
 7719 0c3e A2FB0323 		umull	r2, r3, r2, r3
 7720 0c42 9B09     		lsrs	r3, r3, #6
 7721 0c44 724A     		ldr	r2, .L573+4
 7722 0c46 C2F8F831 		str	r3, [r2, #504]
2252:..\src/interruptions.c ****                 LED_control(0);
 7723              		.loc 1 2252 0
 7724 0c4a 0020     		movs	r0, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 179


 7725 0c4c FFF7FEFF 		bl	LED_control
2253:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7726              		.loc 1 2253 0
 7727 0c50 6E4B     		ldr	r3, .L573
 7728 0c52 0022     		movs	r2, #0
 7729 0c54 1A80     		strh	r2, [r3]	@ movhi
2254:..\src/interruptions.c ****             
2255:..\src/interruptions.c ****                 if (interrupt_flag){
 7730              		.loc 1 2255 0
 7731 0c56 6F4B     		ldr	r3, .L573+8
 7732 0c58 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7733 0c5a 002B     		cmp	r3, #0
 7734 0c5c 04D0     		beq	.L491
2256:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7735              		.loc 1 2256 0
 7736 0c5e 6D4B     		ldr	r3, .L573+8
 7737 0c60 0022     		movs	r2, #0
 7738 0c62 1A70     		strb	r2, [r3]
2257:..\src/interruptions.c ****                     interrupt_manager();
 7739              		.loc 1 2257 0
 7740 0c64 FFF7FEFF 		bl	interrupt_manager
 7741              	.L491:
2258:..\src/interruptions.c ****                 }
2259:..\src/interruptions.c ****                 
2260:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7742              		.loc 1 2260 0
 7743 0c68 6B4B     		ldr	r3, .L573+12
 7744 0c6a 0522     		movs	r2, #5
 7745 0c6c 1A70     		strb	r2, [r3]
2261:..\src/interruptions.c ****             }
2262:..\src/interruptions.c ****             break;
 7746              		.loc 1 2262 0
 7747 0c6e C8E0     		b	.L554
 7748              	.L476:
2263:..\src/interruptions.c **** 
2264:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2265:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7749              		.loc 1 2265 0
 7750 0c70 6E4B     		ldr	r3, .L573+32
 7751 0c72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7752 0c74 002B     		cmp	r3, #0
 7753 0c76 40F0C680 		bne	.L555
2266:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7754              		.loc 1 2266 0
 7755 0c7a 674B     		ldr	r3, .L573+12
 7756 0c7c 0222     		movs	r2, #2
 7757 0c7e 1A70     		strb	r2, [r3]
2267:..\src/interruptions.c ****             break;
 7758              		.loc 1 2267 0
 7759 0c80 C1E0     		b	.L555
 7760              	.L477:
2268:..\src/interruptions.c **** 
2269:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2270:..\src/interruptions.c ****             emg_counter_2++;
 7761              		.loc 1 2270 0
 7762 0c82 624B     		ldr	r3, .L573
 7763 0c84 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 180


 7764 0c86 0133     		adds	r3, r3, #1
 7765 0c88 9AB2     		uxth	r2, r3
 7766 0c8a 604B     		ldr	r3, .L573
 7767 0c8c 1A80     		strh	r2, [r3]	@ movhi
2271:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7768              		.loc 1 2271 0
 7769 0c8e 5F4B     		ldr	r3, .L573
 7770 0c90 1B88     		ldrh	r3, [r3]
 7771 0c92 B3F5FA7F 		cmp	r3, #500
 7772 0c96 40F0D180 		bne	.L556
2272:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7773              		.loc 1 2272 0
 7774 0c9a 5C4B     		ldr	r3, .L573
 7775 0c9c 0022     		movs	r2, #0
 7776 0c9e 1A80     		strh	r2, [r3]	@ movhi
2273:..\src/interruptions.c ****                 
2274:..\src/interruptions.c ****                 if (interrupt_flag){
 7777              		.loc 1 2274 0
 7778 0ca0 5C4B     		ldr	r3, .L573+8
 7779 0ca2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7780 0ca4 002B     		cmp	r3, #0
 7781 0ca6 04D0     		beq	.L494
2275:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7782              		.loc 1 2275 0
 7783 0ca8 5A4B     		ldr	r3, .L573+8
 7784 0caa 0022     		movs	r2, #0
 7785 0cac 1A70     		strb	r2, [r3]
2276:..\src/interruptions.c ****                     interrupt_manager();
 7786              		.loc 1 2276 0
 7787 0cae FFF7FEFF 		bl	interrupt_manager
 7788              	.L494:
2277:..\src/interruptions.c ****                 }
2278:..\src/interruptions.c ****                 
2279:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7789              		.loc 1 2279 0
 7790 0cb2 5F4B     		ldr	r3, .L573+36
 7791 0cb4 0022     		movs	r2, #0
 7792 0cb6 1A70     		strb	r2, [r3]
 7793 0cb8 93E0     		b	.L495
 7794              	.L499:
2280:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7795              		.loc 1 2280 0
 7796 0cba 5D4B     		ldr	r3, .L573+36
 7797 0cbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7798 0cbe 1946     		mov	r1, r3
 7799 0cc0 564A     		ldr	r2, .L573+16
 7800 0cc2 0B46     		mov	r3, r1
 7801 0cc4 DB00     		lsls	r3, r3, #3
 7802 0cc6 5B1A     		subs	r3, r3, r1
 7803 0cc8 1B01     		lsls	r3, r3, #4
 7804 0cca 1344     		add	r3, r3, r2
 7805 0ccc 03F58773 		add	r3, r3, #270
 7806 0cd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7807 0cd2 022B     		cmp	r3, #2
 7808 0cd4 37D0     		beq	.L496
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7809              		.loc 1 2281 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 181


 7810 0cd6 564B     		ldr	r3, .L573+36
 7811 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7812 0cda 1946     		mov	r1, r3
 7813 0cdc 4F4A     		ldr	r2, .L573+16
 7814 0cde 0B46     		mov	r3, r1
 7815 0ce0 DB00     		lsls	r3, r3, #3
 7816 0ce2 5B1A     		subs	r3, r3, r1
 7817 0ce4 1B01     		lsls	r3, r3, #4
 7818 0ce6 1344     		add	r3, r3, r2
 7819 0ce8 03F58773 		add	r3, r3, #270
 7820 0cec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2280:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7821              		.loc 1 2280 0 discriminator 1
 7822 0cee 032B     		cmp	r3, #3
 7823 0cf0 29D0     		beq	.L496
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7824              		.loc 1 2282 0
 7825 0cf2 4F4B     		ldr	r3, .L573+36
 7826 0cf4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7827 0cf6 1946     		mov	r1, r3
 7828 0cf8 484A     		ldr	r2, .L573+16
 7829 0cfa 0B46     		mov	r3, r1
 7830 0cfc DB00     		lsls	r3, r3, #3
 7831 0cfe 5B1A     		subs	r3, r3, r1
 7832 0d00 1B01     		lsls	r3, r3, #4
 7833 0d02 1344     		add	r3, r3, r2
 7834 0d04 03F58773 		add	r3, r3, #270
 7835 0d08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7836              		.loc 1 2281 0
 7837 0d0a 042B     		cmp	r3, #4
 7838 0d0c 1BD0     		beq	.L496
2283:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7839              		.loc 1 2283 0
 7840 0d0e 484B     		ldr	r3, .L573+36
 7841 0d10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7842 0d12 1946     		mov	r1, r3
 7843 0d14 414A     		ldr	r2, .L573+16
 7844 0d16 0B46     		mov	r3, r1
 7845 0d18 DB00     		lsls	r3, r3, #3
 7846 0d1a 5B1A     		subs	r3, r3, r1
 7847 0d1c 1B01     		lsls	r3, r3, #4
 7848 0d1e 1344     		add	r3, r3, r2
 7849 0d20 03F58773 		add	r3, r3, #270
 7850 0d24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7851              		.loc 1 2282 0
 7852 0d26 052B     		cmp	r3, #5
 7853 0d28 0DD0     		beq	.L496
2284:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7854              		.loc 1 2284 0
 7855 0d2a 414B     		ldr	r3, .L573+36
 7856 0d2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7857 0d2e 1946     		mov	r1, r3
 7858 0d30 3A4A     		ldr	r2, .L573+16
 7859 0d32 0B46     		mov	r3, r1
 7860 0d34 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 182


 7861 0d36 5B1A     		subs	r3, r3, r1
 7862 0d38 1B01     		lsls	r3, r3, #4
 7863 0d3a 1344     		add	r3, r3, r2
 7864 0d3c 03F58773 		add	r3, r3, #270
 7865 0d40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2283:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7866              		.loc 1 2283 0
 7867 0d42 072B     		cmp	r3, #7
 7868 0d44 47D1     		bne	.L497
 7869              	.L496:
2285:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7870              		.loc 1 2285 0
 7871 0d46 3A4B     		ldr	r3, .L573+36
 7872 0d48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7873 0d4a 1946     		mov	r1, r3
 7874 0d4c 334A     		ldr	r2, .L573+16
 7875 0d4e 0B46     		mov	r3, r1
 7876 0d50 DB00     		lsls	r3, r3, #3
 7877 0d52 5B1A     		subs	r3, r3, r1
 7878 0d54 1B01     		lsls	r3, r3, #4
 7879 0d56 1344     		add	r3, r3, r2
 7880 0d58 03F20F13 		addw	r3, r3, #271
 7881 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7882 0d5e 002B     		cmp	r3, #0
 7883 0d60 19D1     		bne	.L498
2286:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7884              		.loc 1 2286 0
 7885 0d62 334B     		ldr	r3, .L573+36
 7886 0d64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7887 0d66 1846     		mov	r0, r3
 7888 0d68 314B     		ldr	r3, .L573+36
 7889 0d6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7890 0d6c 1946     		mov	r1, r3
 7891 0d6e 284A     		ldr	r2, .L573+4
 7892 0d70 0B46     		mov	r3, r1
 7893 0d72 DB00     		lsls	r3, r3, #3
 7894 0d74 5B1A     		subs	r3, r3, r1
 7895 0d76 1B01     		lsls	r3, r3, #4
 7896 0d78 1344     		add	r3, r3, r2
 7897 0d7a 03F58873 		add	r3, r3, #272
 7898 0d7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7899 0d80 1946     		mov	r1, r3
 7900 0d82 2C4A     		ldr	r2, .L573+40
 7901 0d84 3423     		movs	r3, #52
 7902 0d86 03FB01F3 		mul	r3, r3, r1
 7903 0d8a 1344     		add	r3, r3, r2
 7904 0d8c 1A68     		ldr	r2, [r3]
 7905 0d8e 2A49     		ldr	r1, .L573+44
 7906 0d90 0301     		lsls	r3, r0, #4
 7907 0d92 0B44     		add	r3, r3, r1
 7908 0d94 1A60     		str	r2, [r3]
 7909              	.L498:
2287:..\src/interruptions.c ****                         }
2288:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7910              		.loc 1 2288 0
 7911 0d96 264B     		ldr	r3, .L573+36
 7912 0d98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 183


 7913 0d9a 1846     		mov	r0, r3
 7914 0d9c 244B     		ldr	r3, .L573+36
 7915 0d9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7916 0da0 1946     		mov	r1, r3
 7917 0da2 1E4A     		ldr	r2, .L573+16
 7918 0da4 0B46     		mov	r3, r1
 7919 0da6 DB00     		lsls	r3, r3, #3
 7920 0da8 5B1A     		subs	r3, r3, r1
 7921 0daa 1B01     		lsls	r3, r3, #4
 7922 0dac 1344     		add	r3, r3, r2
 7923 0dae E033     		adds	r3, r3, #224
 7924 0db0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7925 0db2 214A     		ldr	r2, .L573+44
 7926 0db4 0301     		lsls	r3, r0, #4
 7927 0db6 1344     		add	r3, r3, r2
 7928 0db8 0C33     		adds	r3, r3, #12
 7929 0dba 0A46     		mov	r2, r1
 7930 0dbc 1A70     		strb	r2, [r3]
2289:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7931              		.loc 1 2289 0
 7932 0dbe 1C4B     		ldr	r3, .L573+36
 7933 0dc0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7934 0dc2 1B4B     		ldr	r3, .L573+36
 7935 0dc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7936 0dc6 1C4A     		ldr	r2, .L573+44
 7937 0dc8 1B01     		lsls	r3, r3, #4
 7938 0dca 1344     		add	r3, r3, r2
 7939 0dcc 0C33     		adds	r3, r3, #12
 7940 0dce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7941 0dd0 1946     		mov	r1, r3
 7942 0dd2 FFF7FEFF 		bl	enable_motor
 7943              	.L497:
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7944              		.loc 1 2279 0 discriminator 2
 7945 0dd6 164B     		ldr	r3, .L573+36
 7946 0dd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7947 0dda 0133     		adds	r3, r3, #1
 7948 0ddc DAB2     		uxtb	r2, r3
 7949 0dde 144B     		ldr	r3, .L573+36
 7950 0de0 1A70     		strb	r2, [r3]
 7951              	.L495:
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7952              		.loc 1 2279 0 is_stmt 0 discriminator 1
 7953 0de2 134B     		ldr	r3, .L573+36
 7954 0de4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7955 0de6 012B     		cmp	r3, #1
 7956 0de8 7FF667AF 		bls	.L499
2290:..\src/interruptions.c ****                     }
2291:..\src/interruptions.c ****                 }
2292:..\src/interruptions.c ****                     
2293:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7957              		.loc 1 2293 0 is_stmt 1
 7958 0dec 0020     		movs	r0, #0
 7959 0dee FFF7FEFF 		bl	memStore
2294:..\src/interruptions.c ****                     
2295:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7960              		.loc 1 2295 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 184


 7961 0df2 094B     		ldr	r3, .L573+12
 7962 0df4 0022     		movs	r2, #0
 7963 0df6 1A70     		strb	r2, [r3]
2296:..\src/interruptions.c ****             }
2297:..\src/interruptions.c ****             break;
 7964              		.loc 1 2297 0
 7965 0df8 20E0     		b	.L556
 7966              	.L552:
2298:..\src/interruptions.c ****         default:
2299:..\src/interruptions.c ****             break;
 7967              		.loc 1 2299 0
 7968 0dfa 00BF     		nop
 7969 0dfc 1FE0     		b	.L484
 7970              	.L553:
2236:..\src/interruptions.c **** 
 7971              		.loc 1 2236 0
 7972 0dfe 00BF     		nop
 7973 0e00 1DE0     		b	.L484
 7974              	.L554:
2262:..\src/interruptions.c **** 
 7975              		.loc 1 2262 0
 7976 0e02 00BF     		nop
 7977 0e04 1BE0     		b	.L484
 7978              	.L555:
2267:..\src/interruptions.c **** 
 7979              		.loc 1 2267 0
 7980 0e06 00BF     		nop
 7981 0e08 19E0     		b	.L484
 7982              	.L574:
 7983 0e0a 00BF     		.align	2
 7984              	.L573:
 7985 0e0c 7E010000 		.word	emg_counter_2.10423
 7986 0e10 00000000 		.word	g_mem
 7987 0e14 00000000 		.word	interrupt_flag
 7988 0e18 00000000 		.word	emg_2_status
 7989 0e1c 00000000 		.word	c_mem
 7990 0e20 00000000 		.word	ADC_buf
 7991 0e24 08000000 		.word	filt_emg+8
 7992 0e28 D34D6210 		.word	274877907
 7993 0e2c 00000000 		.word	emg_1_status
 7994 0e30 76010000 		.word	idx.10432
 7995 0e34 00000000 		.word	g_meas
 7996 0e38 00000000 		.word	g_ref
 7997              	.L556:
2297:..\src/interruptions.c ****         default:
 7998              		.loc 1 2297 0
 7999 0e3c 00BF     		nop
 8000              	.L484:
2300:..\src/interruptions.c ****     }
2301:..\src/interruptions.c ****         
2302:..\src/interruptions.c ****     if (interrupt_flag){
 8001              		.loc 1 2302 0
 8002 0e3e A74B     		ldr	r3, .L575
 8003 0e40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8004 0e42 002B     		cmp	r3, #0
 8005 0e44 04D0     		beq	.L500
2303:..\src/interruptions.c ****         interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 185


 8006              		.loc 1 2303 0
 8007 0e46 A54B     		ldr	r3, .L575
 8008 0e48 0022     		movs	r2, #0
 8009 0e4a 1A70     		strb	r2, [r3]
2304:..\src/interruptions.c ****         interrupt_manager();
 8010              		.loc 1 2304 0
 8011 0e4c FFF7FEFF 		bl	interrupt_manager
 8012              	.L500:
2305:..\src/interruptions.c ****     }
2306:..\src/interruptions.c ****     
2307:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8013              		.loc 1 2307 0
 8014 0e50 A34B     		ldr	r3, .L575+4
 8015 0e52 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8016 0e56 062B     		cmp	r3, #6
 8017 0e58 05D0     		beq	.L501
 8018              		.loc 1 2307 0 is_stmt 0 discriminator 1
 8019 0e5a A14B     		ldr	r3, .L575+4
 8020 0e5c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8021 0e60 062B     		cmp	r3, #6
 8022 0e62 40F0C481 		bne	.L502
 8023              	.L501:
2308:..\src/interruptions.c ****         // Read joystick
2309:..\src/interruptions.c ****         
2310:..\src/interruptions.c ****         switch (joy_UD_status) {
 8024              		.loc 1 2310 0 is_stmt 1
 8025 0e66 9F4B     		ldr	r3, .L575+8
 8026 0e68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8027 0e6a 052B     		cmp	r3, #5
 8028 0e6c 00F2CB80 		bhi	.L503
 8029 0e70 01A2     		adr	r2, .L505
 8030 0e72 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8031 0e76 00BF     		.p2align 2
 8032              	.L505:
 8033 0e78 910E0000 		.word	.L504+1
 8034 0e7c 2D0F0000 		.word	.L506+1
 8035 0e80 410F0000 		.word	.L507+1
 8036 0e84 750F0000 		.word	.L508+1
 8037 0e88 E10F0000 		.word	.L509+1
 8038 0e8c E10F0000 		.word	.L509+1
 8039              		.p2align 1
 8040              	.L504:
2311:..\src/interruptions.c ****             case NORMAL:
2312:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8041              		.loc 1 2312 0
 8042 0e90 954B     		ldr	r3, .L575+12
 8043 0e92 B3F90430 		ldrsh	r3, [r3, #4]
 8044 0e96 7B60     		str	r3, [r7, #4]
2313:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2314:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8045              		.loc 1 2314 0
 8046 0e98 944B     		ldr	r3, .L575+16
 8047 0e9a 1B68     		ldr	r3, [r3]
 8048 0e9c 7A68     		ldr	r2, [r7, #4]
 8049 0e9e D31A     		subs	r3, r2, r3
 8050 0ea0 1846     		mov	r0, r3
 8051 0ea2 FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 186


 8052 0ea6 0446     		mov	r4, r0
 8053 0ea8 904B     		ldr	r3, .L575+16
 8054 0eaa 1B68     		ldr	r3, [r3]
 8055 0eac 1846     		mov	r0, r3
 8056 0eae FFF7FEFF 		bl	__aeabi_i2f
 8057 0eb2 0346     		mov	r3, r0
 8058 0eb4 1946     		mov	r1, r3
 8059 0eb6 2046     		mov	r0, r4
 8060 0eb8 FFF7FEFF 		bl	__aeabi_fdiv
 8061 0ebc 0346     		mov	r3, r0
 8062 0ebe 1C46     		mov	r4, r3
 8063 0ec0 874B     		ldr	r3, .L575+4
 8064 0ec2 B3F8B632 		ldrh	r3, [r3, #694]
 8065 0ec6 1846     		mov	r0, r3
 8066 0ec8 FFF7FEFF 		bl	__aeabi_i2f
 8067 0ecc 0346     		mov	r3, r0
 8068 0ece 1946     		mov	r1, r3
 8069 0ed0 2046     		mov	r0, r4
 8070 0ed2 FFF7FEFF 		bl	__aeabi_fmul
 8071 0ed6 0346     		mov	r3, r0
 8072 0ed8 1846     		mov	r0, r3
 8073 0eda FFF7FEFF 		bl	__aeabi_f2iz
 8074 0ede 0346     		mov	r3, r0
 8075 0ee0 7B60     		str	r3, [r7, #4]
2315:..\src/interruptions.c ****                 
2316:..\src/interruptions.c ****                 if (interrupt_flag){
 8076              		.loc 1 2316 0
 8077 0ee2 7E4B     		ldr	r3, .L575
 8078 0ee4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8079 0ee6 002B     		cmp	r3, #0
 8080 0ee8 04D0     		beq	.L510
2317:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8081              		.loc 1 2317 0
 8082 0eea 7C4B     		ldr	r3, .L575
 8083 0eec 0022     		movs	r2, #0
 8084 0eee 1A70     		strb	r2, [r3]
2318:..\src/interruptions.c ****                     interrupt_manager();
 8085              		.loc 1 2318 0
 8086 0ef0 FFF7FEFF 		bl	interrupt_manager
 8087              	.L510:
2319:..\src/interruptions.c ****                 }
2320:..\src/interruptions.c **** 
2321:..\src/interruptions.c ****                 //Saturation
2322:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8088              		.loc 1 2322 0
 8089 0ef4 7B68     		ldr	r3, [r7, #4]
 8090 0ef6 13F5806F 		cmn	r3, #1024
 8091 0efa 01DA     		bge	.L511
2323:..\src/interruptions.c ****                     i_aux = -1024;
 8092              		.loc 1 2323 0
 8093 0efc 7C4B     		ldr	r3, .L575+20
 8094 0efe 7B60     		str	r3, [r7, #4]
 8095              	.L511:
2324:..\src/interruptions.c ****                 if (i_aux > 1024)
 8096              		.loc 1 2324 0
 8097 0f00 7B68     		ldr	r3, [r7, #4]
 8098 0f02 B3F5806F 		cmp	r3, #1024
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 187


 8099 0f06 02DD     		ble	.L512
2325:..\src/interruptions.c ****                     i_aux = 1024;
 8100              		.loc 1 2325 0
 8101 0f08 4FF48063 		mov	r3, #1024
 8102 0f0c 7B60     		str	r3, [r7, #4]
 8103              	.L512:
2326:..\src/interruptions.c **** 
2327:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8104              		.loc 1 2327 0
 8105 0f0e 7B68     		ldr	r3, [r7, #4]
 8106 0f10 1BB2     		sxth	r3, r3
 8107 0f12 1A46     		mov	r2, r3
 8108 0f14 774B     		ldr	r3, .L575+24
 8109 0f16 5A62     		str	r2, [r3, #36]
2328:..\src/interruptions.c **** 
2329:..\src/interruptions.c ****                 if (interrupt_flag){
 8110              		.loc 1 2329 0
 8111 0f18 704B     		ldr	r3, .L575
 8112 0f1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8113 0f1c 002B     		cmp	r3, #0
 8114 0f1e 6BD0     		beq	.L557
2330:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8115              		.loc 1 2330 0
 8116 0f20 6E4B     		ldr	r3, .L575
 8117 0f22 0022     		movs	r2, #0
 8118 0f24 1A70     		strb	r2, [r3]
2331:..\src/interruptions.c ****                     interrupt_manager();
 8119              		.loc 1 2331 0
 8120 0f26 FFF7FEFF 		bl	interrupt_manager
2332:..\src/interruptions.c ****                 }
2333:..\src/interruptions.c **** 
2334:..\src/interruptions.c ****             break;
 8121              		.loc 1 2334 0
 8122 0f2a 65E0     		b	.L557
 8123              	.L506:
2335:..\src/interruptions.c **** 
2336:..\src/interruptions.c ****             case RESET: // reset variables
2337:..\src/interruptions.c ****                 UD_counter = 0;
 8124              		.loc 1 2337 0
 8125 0f2c 724B     		ldr	r3, .L575+28
 8126 0f2e 0022     		movs	r2, #0
 8127 0f30 1A80     		strh	r2, [r3]	@ movhi
2338:..\src/interruptions.c ****                 UD_mean_value = 0;
 8128              		.loc 1 2338 0
 8129 0f32 6E4B     		ldr	r3, .L575+16
 8130 0f34 0022     		movs	r2, #0
 8131 0f36 1A60     		str	r2, [r3]
2339:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8132              		.loc 1 2339 0
 8133 0f38 6A4B     		ldr	r3, .L575+8
 8134 0f3a 0422     		movs	r2, #4
 8135 0f3c 1A70     		strb	r2, [r3]
2340:..\src/interruptions.c **** 
2341:..\src/interruptions.c ****             break;
 8136              		.loc 1 2341 0
 8137 0f3e 62E0     		b	.L503
 8138              	.L507:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 188


2342:..\src/interruptions.c **** 
2343:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2344:..\src/interruptions.c ****                 UD_counter++;
 8139              		.loc 1 2344 0
 8140 0f40 6D4B     		ldr	r3, .L575+28
 8141 0f42 1B88     		ldrh	r3, [r3]
 8142 0f44 0133     		adds	r3, r3, #1
 8143 0f46 9AB2     		uxth	r2, r3
 8144 0f48 6B4B     		ldr	r3, .L575+28
 8145 0f4a 1A80     		strh	r2, [r3]	@ movhi
2345:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8146              		.loc 1 2345 0
 8147 0f4c 6A4B     		ldr	r3, .L575+28
 8148 0f4e 1B88     		ldrh	r3, [r3]
 8149 0f50 642B     		cmp	r3, #100
 8150 0f52 53D1     		bne	.L558
2346:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8151              		.loc 1 2346 0
 8152 0f54 684B     		ldr	r3, .L575+28
 8153 0f56 0022     		movs	r2, #0
 8154 0f58 1A80     		strh	r2, [r3]	@ movhi
2347:..\src/interruptions.c **** 
2348:..\src/interruptions.c ****                     if (interrupt_flag){
 8155              		.loc 1 2348 0
 8156 0f5a 604B     		ldr	r3, .L575
 8157 0f5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8158 0f5e 002B     		cmp	r3, #0
 8159 0f60 04D0     		beq	.L515
2349:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8160              		.loc 1 2349 0
 8161 0f62 5E4B     		ldr	r3, .L575
 8162 0f64 0022     		movs	r2, #0
 8163 0f66 1A70     		strb	r2, [r3]
2350:..\src/interruptions.c ****                         interrupt_manager();
 8164              		.loc 1 2350 0
 8165 0f68 FFF7FEFF 		bl	interrupt_manager
 8166              	.L515:
2351:..\src/interruptions.c ****                     }
2352:..\src/interruptions.c **** 
2353:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8167              		.loc 1 2353 0
 8168 0f6c 5D4B     		ldr	r3, .L575+8
 8169 0f6e 0322     		movs	r2, #3
 8170 0f70 1A70     		strb	r2, [r3]
2354:..\src/interruptions.c ****                 }
2355:..\src/interruptions.c **** 
2356:..\src/interruptions.c ****             break;
 8171              		.loc 1 2356 0
 8172 0f72 43E0     		b	.L558
 8173              	.L508:
2357:..\src/interruptions.c **** 
2358:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2359:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2360:..\src/interruptions.c ****                 UD_counter++;
 8174              		.loc 1 2360 0
 8175 0f74 604B     		ldr	r3, .L575+28
 8176 0f76 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 189


 8177 0f78 0133     		adds	r3, r3, #1
 8178 0f7a 9AB2     		uxth	r2, r3
 8179 0f7c 5E4B     		ldr	r3, .L575+28
 8180 0f7e 1A80     		strh	r2, [r3]	@ movhi
2361:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8181              		.loc 1 2361 0
 8182 0f80 594B     		ldr	r3, .L575+12
 8183 0f82 B3F90430 		ldrsh	r3, [r3, #4]
 8184 0f86 1A46     		mov	r2, r3
 8185 0f88 584B     		ldr	r3, .L575+16
 8186 0f8a 1B68     		ldr	r3, [r3]
 8187 0f8c 1344     		add	r3, r3, r2
 8188 0f8e 574A     		ldr	r2, .L575+16
 8189 0f90 1360     		str	r3, [r2]
2362:..\src/interruptions.c **** 
2363:..\src/interruptions.c ****                 if (interrupt_flag){
 8190              		.loc 1 2363 0
 8191 0f92 524B     		ldr	r3, .L575
 8192 0f94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8193 0f96 002B     		cmp	r3, #0
 8194 0f98 04D0     		beq	.L516
2364:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8195              		.loc 1 2364 0
 8196 0f9a 504B     		ldr	r3, .L575
 8197 0f9c 0022     		movs	r2, #0
 8198 0f9e 1A70     		strb	r2, [r3]
2365:..\src/interruptions.c ****                     interrupt_manager();
 8199              		.loc 1 2365 0
 8200 0fa0 FFF7FEFF 		bl	interrupt_manager
 8201              	.L516:
2366:..\src/interruptions.c ****                 }
2367:..\src/interruptions.c **** 
2368:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8202              		.loc 1 2368 0
 8203 0fa4 544B     		ldr	r3, .L575+28
 8204 0fa6 1B88     		ldrh	r3, [r3]
 8205 0fa8 C82B     		cmp	r3, #200
 8206 0faa 29D1     		bne	.L559
2369:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8207              		.loc 1 2369 0
 8208 0fac 4F4B     		ldr	r3, .L575+16
 8209 0fae 1B68     		ldr	r3, [r3]
 8210 0fb0 524A     		ldr	r2, .L575+32
 8211 0fb2 82FB0312 		smull	r1, r2, r2, r3
 8212 0fb6 9211     		asrs	r2, r2, #6
 8213 0fb8 DB17     		asrs	r3, r3, #31
 8214 0fba D31A     		subs	r3, r2, r3
 8215 0fbc 4B4A     		ldr	r2, .L575+16
 8216 0fbe 1360     		str	r3, [r2]
2370:..\src/interruptions.c **** 
2371:..\src/interruptions.c ****                     if (interrupt_flag){
 8217              		.loc 1 2371 0
 8218 0fc0 464B     		ldr	r3, .L575
 8219 0fc2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8220 0fc4 002B     		cmp	r3, #0
 8221 0fc6 04D0     		beq	.L518
2372:..\src/interruptions.c ****                         interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 190


 8222              		.loc 1 2372 0
 8223 0fc8 444B     		ldr	r3, .L575
 8224 0fca 0022     		movs	r2, #0
 8225 0fcc 1A70     		strb	r2, [r3]
2373:..\src/interruptions.c ****                         interrupt_manager();
 8226              		.loc 1 2373 0
 8227 0fce FFF7FEFF 		bl	interrupt_manager
 8228              	.L518:
2374:..\src/interruptions.c ****                     }
2375:..\src/interruptions.c **** 
2376:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8229              		.loc 1 2376 0
 8230 0fd2 494B     		ldr	r3, .L575+28
 8231 0fd4 0022     		movs	r2, #0
 8232 0fd6 1A80     		strh	r2, [r3]	@ movhi
2377:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8233              		.loc 1 2377 0
 8234 0fd8 424B     		ldr	r3, .L575+8
 8235 0fda 0022     		movs	r2, #0
 8236 0fdc 1A70     		strb	r2, [r3]
2378:..\src/interruptions.c ****                 }
2379:..\src/interruptions.c ****             break;
 8237              		.loc 1 2379 0
 8238 0fde 0FE0     		b	.L559
 8239              	.L509:
2380:..\src/interruptions.c **** 
2381:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2382:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8240              		.loc 1 2382 0
 8241 0fe0 474B     		ldr	r3, .L575+36
 8242 0fe2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8243 0fe4 002B     		cmp	r3, #0
 8244 0fe6 0DD1     		bne	.L560
 8245              		.loc 1 2382 0 is_stmt 0 discriminator 1
 8246 0fe8 464B     		ldr	r3, .L575+40
 8247 0fea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8248 0fec 002B     		cmp	r3, #0
 8249 0fee 09D1     		bne	.L560
2383:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8250              		.loc 1 2383 0 is_stmt 1
 8251 0ff0 3C4B     		ldr	r3, .L575+8
 8252 0ff2 0222     		movs	r2, #2
 8253 0ff4 1A70     		strb	r2, [r3]
2384:..\src/interruptions.c ****             break;
 8254              		.loc 1 2384 0
 8255 0ff6 05E0     		b	.L560
 8256              	.L557:
2334:..\src/interruptions.c **** 
 8257              		.loc 1 2334 0
 8258 0ff8 00BF     		nop
 8259 0ffa 04E0     		b	.L503
 8260              	.L558:
2356:..\src/interruptions.c **** 
 8261              		.loc 1 2356 0
 8262 0ffc 00BF     		nop
 8263 0ffe 02E0     		b	.L503
 8264              	.L559:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 191


2379:..\src/interruptions.c **** 
 8265              		.loc 1 2379 0
 8266 1000 00BF     		nop
 8267 1002 00E0     		b	.L503
 8268              	.L560:
 8269              		.loc 1 2384 0
 8270 1004 00BF     		nop
 8271              	.L503:
2385:..\src/interruptions.c ****         }
2386:..\src/interruptions.c **** 
2387:..\src/interruptions.c ****         if (interrupt_flag){
 8272              		.loc 1 2387 0
 8273 1006 354B     		ldr	r3, .L575
 8274 1008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8275 100a 002B     		cmp	r3, #0
 8276 100c 04D0     		beq	.L520
2388:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8277              		.loc 1 2388 0
 8278 100e 334B     		ldr	r3, .L575
 8279 1010 0022     		movs	r2, #0
 8280 1012 1A70     		strb	r2, [r3]
2389:..\src/interruptions.c ****             interrupt_manager();
 8281              		.loc 1 2389 0
 8282 1014 FFF7FEFF 		bl	interrupt_manager
 8283              	.L520:
2390:..\src/interruptions.c ****         }
2391:..\src/interruptions.c ****             
2392:..\src/interruptions.c ****         switch (joy_LR_status) {
 8284              		.loc 1 2392 0
 8285 1018 3B4B     		ldr	r3, .L575+44
 8286 101a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8287 101c 052B     		cmp	r3, #5
 8288 101e 00F2DD80 		bhi	.L521
 8289 1022 01A2     		adr	r2, .L523
 8290 1024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8291              		.p2align 2
 8292              	.L523:
 8293 1028 41100000 		.word	.L522+1
 8294 102c 11110000 		.word	.L524+1
 8295 1030 25110000 		.word	.L525+1
 8296 1034 59110000 		.word	.L526+1
 8297 1038 B3110000 		.word	.L527+1
 8298 103c B3110000 		.word	.L527+1
 8299              		.p2align 1
 8300              	.L522:
2393:..\src/interruptions.c ****             case NORMAL:
2394:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8301              		.loc 1 2394 0
 8302 1040 294B     		ldr	r3, .L575+12
 8303 1042 B3F90630 		ldrsh	r3, [r3, #6]
 8304 1046 7B60     		str	r3, [r7, #4]
2395:..\src/interruptions.c **** 
2396:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8305              		.loc 1 2396 0
 8306 1048 304B     		ldr	r3, .L575+48
 8307 104a 1B68     		ldr	r3, [r3]
 8308 104c 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 192


 8309 104e D31A     		subs	r3, r2, r3
 8310 1050 1846     		mov	r0, r3
 8311 1052 FFF7FEFF 		bl	__aeabi_i2f
 8312 1056 0446     		mov	r4, r0
 8313 1058 2C4B     		ldr	r3, .L575+48
 8314 105a 1B68     		ldr	r3, [r3]
 8315 105c 1846     		mov	r0, r3
 8316 105e FFF7FEFF 		bl	__aeabi_i2f
 8317 1062 0346     		mov	r3, r0
 8318 1064 1946     		mov	r1, r3
 8319 1066 2046     		mov	r0, r4
 8320 1068 FFF7FEFF 		bl	__aeabi_fdiv
 8321 106c 0346     		mov	r3, r0
 8322 106e 1C46     		mov	r4, r3
 8323 1070 1B4B     		ldr	r3, .L575+4
 8324 1072 B3F8B432 		ldrh	r3, [r3, #692]
 8325 1076 1846     		mov	r0, r3
 8326 1078 FFF7FEFF 		bl	__aeabi_i2f
 8327 107c 0346     		mov	r3, r0
 8328 107e 1946     		mov	r1, r3
 8329 1080 2046     		mov	r0, r4
 8330 1082 FFF7FEFF 		bl	__aeabi_fmul
 8331 1086 0346     		mov	r3, r0
 8332 1088 1846     		mov	r0, r3
 8333 108a FFF7FEFF 		bl	__aeabi_f2iz
 8334 108e 0346     		mov	r3, r0
 8335 1090 7B60     		str	r3, [r7, #4]
2397:..\src/interruptions.c ****                 
2398:..\src/interruptions.c ****                 if (interrupt_flag){
 8336              		.loc 1 2398 0
 8337 1092 124B     		ldr	r3, .L575
 8338 1094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8339 1096 002B     		cmp	r3, #0
 8340 1098 04D0     		beq	.L528
2399:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8341              		.loc 1 2399 0
 8342 109a 104B     		ldr	r3, .L575
 8343 109c 0022     		movs	r2, #0
 8344 109e 1A70     		strb	r2, [r3]
2400:..\src/interruptions.c ****                     interrupt_manager();
 8345              		.loc 1 2400 0
 8346 10a0 FFF7FEFF 		bl	interrupt_manager
 8347              	.L528:
2401:..\src/interruptions.c ****                 }
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****                 //Saturation
2404:..\src/interruptions.c ****                 if (i_aux < -1024)
 8348              		.loc 1 2404 0
 8349 10a4 7B68     		ldr	r3, [r7, #4]
 8350 10a6 13F5806F 		cmn	r3, #1024
 8351 10aa 01DA     		bge	.L529
2405:..\src/interruptions.c ****                     i_aux = -1024;
 8352              		.loc 1 2405 0
 8353 10ac 104B     		ldr	r3, .L575+20
 8354 10ae 7B60     		str	r3, [r7, #4]
 8355              	.L529:
2406:..\src/interruptions.c ****                 if (i_aux > 1024)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 193


 8356              		.loc 1 2406 0
 8357 10b0 7B68     		ldr	r3, [r7, #4]
 8358 10b2 B3F5806F 		cmp	r3, #1024
 8359 10b6 02DD     		ble	.L530
2407:..\src/interruptions.c ****                     i_aux = 1024;
 8360              		.loc 1 2407 0
 8361 10b8 4FF48063 		mov	r3, #1024
 8362 10bc 7B60     		str	r3, [r7, #4]
 8363              	.L530:
2408:..\src/interruptions.c **** 
2409:..\src/interruptions.c ****                 if (interrupt_flag){
 8364              		.loc 1 2409 0
 8365 10be 074B     		ldr	r3, .L575
 8366 10c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8367 10c2 002B     		cmp	r3, #0
 8368 10c4 04D0     		beq	.L531
2410:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8369              		.loc 1 2410 0
 8370 10c6 054B     		ldr	r3, .L575
 8371 10c8 0022     		movs	r2, #0
 8372 10ca 1A70     		strb	r2, [r3]
2411:..\src/interruptions.c ****                     interrupt_manager();
 8373              		.loc 1 2411 0
 8374 10cc FFF7FEFF 		bl	interrupt_manager
 8375              	.L531:
2412:..\src/interruptions.c ****                 }
2413:..\src/interruptions.c **** 
2414:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8376              		.loc 1 2414 0
 8377 10d0 7B68     		ldr	r3, [r7, #4]
 8378 10d2 1BB2     		sxth	r3, r3
 8379 10d4 1A46     		mov	r2, r3
 8380 10d6 074B     		ldr	r3, .L575+24
 8381 10d8 1A62     		str	r2, [r3, #32]
2415:..\src/interruptions.c **** 
2416:..\src/interruptions.c ****             break;
 8382              		.loc 1 2416 0
 8383 10da 7FE0     		b	.L521
 8384              	.L576:
 8385              		.align	2
 8386              	.L575:
 8387 10dc 00000000 		.word	interrupt_flag
 8388 10e0 00000000 		.word	c_mem
 8389 10e4 00000000 		.word	joy_UD_status
 8390 10e8 00000000 		.word	ADC_buf
 8391 10ec 80010000 		.word	UD_mean_value.10426
 8392 10f0 00FCFFFF 		.word	-1024
 8393 10f4 00000000 		.word	g_adc_meas
 8394 10f8 84010000 		.word	UD_counter.10424
 8395 10fc 1F85EB51 		.word	1374389535
 8396 1100 00000000 		.word	emg_1_status
 8397 1104 00000000 		.word	emg_2_status
 8398 1108 00000000 		.word	joy_LR_status
 8399 110c 88010000 		.word	LR_mean_value.10427
 8400              	.L524:
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****             case RESET: // reset variables
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 194


2419:..\src/interruptions.c ****                 LR_counter = 0;
 8401              		.loc 1 2419 0
 8402 1110 644B     		ldr	r3, .L577
 8403 1112 0022     		movs	r2, #0
 8404 1114 1A80     		strh	r2, [r3]	@ movhi
2420:..\src/interruptions.c ****                 LR_mean_value = 0;
 8405              		.loc 1 2420 0
 8406 1116 644B     		ldr	r3, .L577+4
 8407 1118 0022     		movs	r2, #0
 8408 111a 1A60     		str	r2, [r3]
2421:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8409              		.loc 1 2421 0
 8410 111c 634B     		ldr	r3, .L577+8
 8411 111e 0422     		movs	r2, #4
 8412 1120 1A70     		strb	r2, [r3]
2422:..\src/interruptions.c ****             break;
 8413              		.loc 1 2422 0
 8414 1122 5BE0     		b	.L521
 8415              	.L525:
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2425:..\src/interruptions.c ****                 LR_counter++;
 8416              		.loc 1 2425 0
 8417 1124 5F4B     		ldr	r3, .L577
 8418 1126 1B88     		ldrh	r3, [r3]
 8419 1128 0133     		adds	r3, r3, #1
 8420 112a 9AB2     		uxth	r2, r3
 8421 112c 5D4B     		ldr	r3, .L577
 8422 112e 1A80     		strh	r2, [r3]	@ movhi
2426:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8423              		.loc 1 2426 0
 8424 1130 5C4B     		ldr	r3, .L577
 8425 1132 1B88     		ldrh	r3, [r3]
 8426 1134 642B     		cmp	r3, #100
 8427 1136 4CD1     		bne	.L561
2427:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8428              		.loc 1 2427 0
 8429 1138 5A4B     		ldr	r3, .L577
 8430 113a 0022     		movs	r2, #0
 8431 113c 1A80     		strh	r2, [r3]	@ movhi
2428:..\src/interruptions.c **** 
2429:..\src/interruptions.c ****                     if (interrupt_flag){
 8432              		.loc 1 2429 0
 8433 113e 5C4B     		ldr	r3, .L577+12
 8434 1140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8435 1142 002B     		cmp	r3, #0
 8436 1144 04D0     		beq	.L533
2430:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8437              		.loc 1 2430 0
 8438 1146 5A4B     		ldr	r3, .L577+12
 8439 1148 0022     		movs	r2, #0
 8440 114a 1A70     		strb	r2, [r3]
2431:..\src/interruptions.c ****                         interrupt_manager();
 8441              		.loc 1 2431 0
 8442 114c FFF7FEFF 		bl	interrupt_manager
 8443              	.L533:
2432:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 195


2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8444              		.loc 1 2434 0
 8445 1150 564B     		ldr	r3, .L577+8
 8446 1152 0322     		movs	r2, #3
 8447 1154 1A70     		strb	r2, [r3]
2435:..\src/interruptions.c ****                 }
2436:..\src/interruptions.c ****             break;
 8448              		.loc 1 2436 0
 8449 1156 3CE0     		b	.L561
 8450              	.L526:
2437:..\src/interruptions.c **** 
2438:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2439:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2440:..\src/interruptions.c ****                 LR_counter++;
 8451              		.loc 1 2440 0
 8452 1158 524B     		ldr	r3, .L577
 8453 115a 1B88     		ldrh	r3, [r3]
 8454 115c 0133     		adds	r3, r3, #1
 8455 115e 9AB2     		uxth	r2, r3
 8456 1160 504B     		ldr	r3, .L577
 8457 1162 1A80     		strh	r2, [r3]	@ movhi
2441:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8458              		.loc 1 2441 0
 8459 1164 534B     		ldr	r3, .L577+16
 8460 1166 B3F90630 		ldrsh	r3, [r3, #6]
 8461 116a 1A46     		mov	r2, r3
 8462 116c 4E4B     		ldr	r3, .L577+4
 8463 116e 1B68     		ldr	r3, [r3]
 8464 1170 1344     		add	r3, r3, r2
 8465 1172 4D4A     		ldr	r2, .L577+4
 8466 1174 1360     		str	r3, [r2]
2442:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8467              		.loc 1 2442 0
 8468 1176 4B4B     		ldr	r3, .L577
 8469 1178 1B88     		ldrh	r3, [r3]
 8470 117a C82B     		cmp	r3, #200
 8471 117c 2BD1     		bne	.L562
2443:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8472              		.loc 1 2443 0
 8473 117e 4A4B     		ldr	r3, .L577+4
 8474 1180 1B68     		ldr	r3, [r3]
 8475 1182 4D4A     		ldr	r2, .L577+20
 8476 1184 82FB0312 		smull	r1, r2, r2, r3
 8477 1188 9211     		asrs	r2, r2, #6
 8478 118a DB17     		asrs	r3, r3, #31
 8479 118c D31A     		subs	r3, r2, r3
 8480 118e 464A     		ldr	r2, .L577+4
 8481 1190 1360     		str	r3, [r2]
2444:..\src/interruptions.c ****                     
2445:..\src/interruptions.c ****                     if (interrupt_flag){
 8482              		.loc 1 2445 0
 8483 1192 474B     		ldr	r3, .L577+12
 8484 1194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8485 1196 002B     		cmp	r3, #0
 8486 1198 04D0     		beq	.L535
2446:..\src/interruptions.c ****                         interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 196


 8487              		.loc 1 2446 0
 8488 119a 454B     		ldr	r3, .L577+12
 8489 119c 0022     		movs	r2, #0
 8490 119e 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****                         interrupt_manager();
 8491              		.loc 1 2447 0
 8492 11a0 FFF7FEFF 		bl	interrupt_manager
 8493              	.L535:
2448:..\src/interruptions.c ****                     }
2449:..\src/interruptions.c **** 
2450:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8494              		.loc 1 2450 0
 8495 11a4 3F4B     		ldr	r3, .L577
 8496 11a6 0022     		movs	r2, #0
 8497 11a8 1A80     		strh	r2, [r3]	@ movhi
2451:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8498              		.loc 1 2451 0
 8499 11aa 404B     		ldr	r3, .L577+8
 8500 11ac 0022     		movs	r2, #0
 8501 11ae 1A70     		strb	r2, [r3]
2452:..\src/interruptions.c ****                 }
2453:..\src/interruptions.c ****             break;
 8502              		.loc 1 2453 0
 8503 11b0 11E0     		b	.L562
 8504              	.L527:
2454:..\src/interruptions.c **** 
2455:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2456:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8505              		.loc 1 2456 0
 8506 11b2 424B     		ldr	r3, .L577+24
 8507 11b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8508 11b6 002B     		cmp	r3, #0
 8509 11b8 0FD1     		bne	.L563
 8510              		.loc 1 2456 0 is_stmt 0 discriminator 1
 8511 11ba 414B     		ldr	r3, .L577+28
 8512 11bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8513 11be 002B     		cmp	r3, #0
 8514 11c0 0BD1     		bne	.L563
 8515              		.loc 1 2456 0 discriminator 2
 8516 11c2 404B     		ldr	r3, .L577+32
 8517 11c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8518 11c6 002B     		cmp	r3, #0
 8519 11c8 07D1     		bne	.L563
2457:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8520              		.loc 1 2457 0 is_stmt 1
 8521 11ca 384B     		ldr	r3, .L577+8
 8522 11cc 0222     		movs	r2, #2
 8523 11ce 1A70     		strb	r2, [r3]
2458:..\src/interruptions.c ****             break;
 8524              		.loc 1 2458 0
 8525 11d0 03E0     		b	.L563
 8526              	.L561:
2436:..\src/interruptions.c **** 
 8527              		.loc 1 2436 0
 8528 11d2 00BF     		nop
 8529 11d4 02E0     		b	.L521
 8530              	.L562:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 197


2453:..\src/interruptions.c **** 
 8531              		.loc 1 2453 0
 8532 11d6 00BF     		nop
 8533 11d8 00E0     		b	.L521
 8534              	.L563:
 8535              		.loc 1 2458 0
 8536 11da 00BF     		nop
 8537              	.L521:
2459:..\src/interruptions.c ****         }
2460:..\src/interruptions.c ****        
2461:..\src/interruptions.c ****         if (interrupt_flag){
 8538              		.loc 1 2461 0
 8539 11dc 344B     		ldr	r3, .L577+12
 8540 11de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8541 11e0 002B     		cmp	r3, #0
 8542 11e2 04D0     		beq	.L502
2462:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8543              		.loc 1 2462 0
 8544 11e4 324B     		ldr	r3, .L577+12
 8545 11e6 0022     		movs	r2, #0
 8546 11e8 1A70     		strb	r2, [r3]
2463:..\src/interruptions.c ****             interrupt_manager();
 8547              		.loc 1 2463 0
 8548 11ea FFF7FEFF 		bl	interrupt_manager
 8549              	.L502:
2464:..\src/interruptions.c ****         }
2465:..\src/interruptions.c ****     }
2466:..\src/interruptions.c ****     
2467:..\src/interruptions.c ****     // Read also EMG additional sensors port
2468:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8550              		.loc 1 2468 0
 8551 11ee 364B     		ldr	r3, .L577+36
 8552 11f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8553 11f2 062B     		cmp	r3, #6
 8554 11f4 52D9     		bls	.L564
2469:..\src/interruptions.c ****         
2470:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8555              		.loc 1 2470 0
 8556 11f6 354B     		ldr	r3, .L577+40
 8557 11f8 0022     		movs	r2, #0
 8558 11fa 1A70     		strb	r2, [r3]
 8559 11fc 4AE0     		b	.L538
 8560              	.L545:
2471:..\src/interruptions.c ****             
2472:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8561              		.loc 1 2472 0
 8562 11fe 334B     		ldr	r3, .L577+40
 8563 1200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8564 1202 0633     		adds	r3, r3, #6
 8565 1204 2B4A     		ldr	r2, .L577+16
 8566 1206 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8567 120a 7B60     		str	r3, [r7, #4]
2473:..\src/interruptions.c ****             if (i_aux < 0) 
 8568              		.loc 1 2473 0
 8569 120c 7B68     		ldr	r3, [r7, #4]
 8570 120e 002B     		cmp	r3, #0
 8571 1210 01DA     		bge	.L539
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 198


2474:..\src/interruptions.c ****                 i_aux = 0;
 8572              		.loc 1 2474 0
 8573 1212 0023     		movs	r3, #0
 8574 1214 7B60     		str	r3, [r7, #4]
 8575              	.L539:
2475:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8576              		.loc 1 2475 0
 8577 1216 2D4B     		ldr	r3, .L577+40
 8578 1218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8579 121a 0233     		adds	r3, r3, #2
 8580 121c DB00     		lsls	r3, r3, #3
 8581 121e 2C4A     		ldr	r2, .L577+44
 8582 1220 1344     		add	r3, r3, r2
 8583 1222 1946     		mov	r1, r3
 8584 1224 7868     		ldr	r0, [r7, #4]
 8585 1226 FFF7FEFF 		bl	filter
 8586 122a 7860     		str	r0, [r7, #4]
2476:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8587              		.loc 1 2476 0
 8588 122c 7B68     		ldr	r3, [r7, #4]
 8589 122e 9B02     		lsls	r3, r3, #10
 8590 1230 002B     		cmp	r3, #0
 8591 1232 01DA     		bge	.L540
 8592 1234 03F2FF33 		addw	r3, r3, #1023
 8593              	.L540:
 8594 1238 9B12     		asrs	r3, r3, #10
 8595 123a 7B60     		str	r3, [r7, #4]
2477:..\src/interruptions.c **** 
2478:..\src/interruptions.c ****             if (interrupt_flag){
 8596              		.loc 1 2478 0
 8597 123c 1C4B     		ldr	r3, .L577+12
 8598 123e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8599 1240 002B     		cmp	r3, #0
 8600 1242 04D0     		beq	.L541
2479:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8601              		.loc 1 2479 0
 8602 1244 1A4B     		ldr	r3, .L577+12
 8603 1246 0022     		movs	r2, #0
 8604 1248 1A70     		strb	r2, [r3]
2480:..\src/interruptions.c ****                 interrupt_manager();
 8605              		.loc 1 2480 0
 8606 124a FFF7FEFF 		bl	interrupt_manager
 8607              	.L541:
2481:..\src/interruptions.c ****             }
2482:..\src/interruptions.c ****             //Saturation
2483:..\src/interruptions.c ****             if (i_aux < 0)
 8608              		.loc 1 2483 0
 8609 124e 7B68     		ldr	r3, [r7, #4]
 8610 1250 002B     		cmp	r3, #0
 8611 1252 02DA     		bge	.L542
2484:..\src/interruptions.c ****                 i_aux = 0;
 8612              		.loc 1 2484 0
 8613 1254 0023     		movs	r3, #0
 8614 1256 7B60     		str	r3, [r7, #4]
 8615 1258 06E0     		b	.L543
 8616              	.L542:
2485:..\src/interruptions.c ****             else 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 199


2486:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8617              		.loc 1 2486 0
 8618 125a 7B68     		ldr	r3, [r7, #4]
 8619 125c B3F5806F 		cmp	r3, #1024
 8620 1260 02DD     		ble	.L543
2487:..\src/interruptions.c ****                     i_aux = 1024;
 8621              		.loc 1 2487 0
 8622 1262 4FF48063 		mov	r3, #1024
 8623 1266 7B60     		str	r3, [r7, #4]
 8624              	.L543:
2488:..\src/interruptions.c ****             
2489:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8625              		.loc 1 2489 0
 8626 1268 184B     		ldr	r3, .L577+40
 8627 126a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8628 126c 1949     		ldr	r1, .L577+48
 8629 126e 0233     		adds	r3, r3, #2
 8630 1270 7A68     		ldr	r2, [r7, #4]
 8631 1272 41F82320 		str	r2, [r1, r3, lsl #2]
2490:..\src/interruptions.c **** 
2491:..\src/interruptions.c ****             if (interrupt_flag){
 8632              		.loc 1 2491 0
 8633 1276 0E4B     		ldr	r3, .L577+12
 8634 1278 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8635 127a 002B     		cmp	r3, #0
 8636 127c 04D0     		beq	.L544
2492:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8637              		.loc 1 2492 0
 8638 127e 0C4B     		ldr	r3, .L577+12
 8639 1280 0022     		movs	r2, #0
 8640 1282 1A70     		strb	r2, [r3]
2493:..\src/interruptions.c ****                 interrupt_manager();
 8641              		.loc 1 2493 0
 8642 1284 FFF7FEFF 		bl	interrupt_manager
 8643              	.L544:
2470:..\src/interruptions.c ****             
 8644              		.loc 1 2470 0 discriminator 2
 8645 1288 104B     		ldr	r3, .L577+40
 8646 128a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8647 128c 0133     		adds	r3, r3, #1
 8648 128e DAB2     		uxtb	r2, r3
 8649 1290 0E4B     		ldr	r3, .L577+40
 8650 1292 1A70     		strb	r2, [r3]
 8651              	.L538:
2470:..\src/interruptions.c ****             
 8652              		.loc 1 2470 0 is_stmt 0 discriminator 1
 8653 1294 0D4B     		ldr	r3, .L577+40
 8654 1296 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8655 1298 052B     		cmp	r3, #5
 8656 129a B0D9     		bls	.L545
 8657              	.L564:
2494:..\src/interruptions.c ****             }
2495:..\src/interruptions.c ****         }
2496:..\src/interruptions.c ****     }
2497:..\src/interruptions.c ****     
2498:..\src/interruptions.c **** }
 8658              		.loc 1 2498 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 200


 8659 129c 00BF     		nop
 8660 129e 0C37     		adds	r7, r7, #12
 8661              		.cfi_def_cfa_offset 20
 8662 12a0 BD46     		mov	sp, r7
 8663              		.cfi_def_cfa_register 13
 8664              		@ sp needed
 8665 12a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 8666              	.L578:
 8667              		.align	2
 8668              	.L577:
 8669 12a4 8C010000 		.word	LR_counter.10425
 8670 12a8 88010000 		.word	LR_mean_value.10427
 8671 12ac 00000000 		.word	joy_LR_status
 8672 12b0 00000000 		.word	interrupt_flag
 8673 12b4 00000000 		.word	ADC_buf
 8674 12b8 1F85EB51 		.word	1374389535
 8675 12bc 00000000 		.word	emg_1_status
 8676 12c0 00000000 		.word	emg_2_status
 8677 12c4 00000000 		.word	joy_UD_status
 8678 12c8 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8679 12cc 76010000 		.word	idx.10432
 8680 12d0 00000000 		.word	filt_emg
 8681 12d4 00000000 		.word	g_adc_meas
 8682              		.cfi_endproc
 8683              	.LFE75:
 8684              		.size	analog_read_end, .-analog_read_end
 8685              		.section	.text.overcurrent_control,"ax",%progbits
 8686              		.align	2
 8687              		.global	overcurrent_control
 8688              		.thumb
 8689              		.thumb_func
 8690              		.type	overcurrent_control, %function
 8691              	overcurrent_control:
 8692              	.LFB76:
2499:..\src/interruptions.c **** 
2500:..\src/interruptions.c **** //==============================================================================
2501:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2502:..\src/interruptions.c **** //==============================================================================
2503:..\src/interruptions.c **** 
2504:..\src/interruptions.c **** void overcurrent_control() {
 8693              		.loc 1 2504 0
 8694              		.cfi_startproc
 8695              		@ args = 0, pretend = 0, frame = 8
 8696              		@ frame_needed = 1, uses_anonymous_args = 0
 8697              		@ link register save eliminated.
 8698 0000 80B4     		push	{r7}
 8699              		.cfi_def_cfa_offset 4
 8700              		.cfi_offset 7, -4
 8701 0002 83B0     		sub	sp, sp, #12
 8702              		.cfi_def_cfa_offset 16
 8703 0004 00AF     		add	r7, sp, #0
 8704              		.cfi_def_cfa_register 7
 8705              	.LBB10:
2505:..\src/interruptions.c ****     
2506:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8706              		.loc 1 2506 0
 8707 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 201


 8708 0008 FB71     		strb	r3, [r7, #7]
 8709 000a 6CE0     		b	.L580
 8710              	.L585:
2507:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8711              		.loc 1 2507 0
 8712 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8713 000e 3A49     		ldr	r1, .L587
 8714 0010 1346     		mov	r3, r2
 8715 0012 DB00     		lsls	r3, r3, #3
 8716 0014 9B1A     		subs	r3, r3, r2
 8717 0016 1B01     		lsls	r3, r3, #4
 8718 0018 0B44     		add	r3, r3, r1
 8719 001a 03F58673 		add	r3, r3, #268
 8720 001e B3F90030 		ldrsh	r3, [r3]
 8721 0022 002B     		cmp	r3, #0
 8722 0024 5CD0     		beq	.L581
 8723              	.LBB11:
2508:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8724              		.loc 1 2508 0
 8725 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8726 0028 3449     		ldr	r1, .L587+4
 8727 002a 1346     		mov	r3, r2
 8728 002c DB00     		lsls	r3, r3, #3
 8729 002e 9B1A     		subs	r3, r3, r2
 8730 0030 1B01     		lsls	r3, r3, #4
 8731 0032 0B44     		add	r3, r3, r1
 8732 0034 03F58873 		add	r3, r3, #272
 8733 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8734 003a 1946     		mov	r1, r3
 8735 003c 304A     		ldr	r2, .L587+8
 8736 003e 3423     		movs	r3, #52
 8737 0040 03FB01F3 		mul	r3, r3, r1
 8738 0044 1344     		add	r3, r3, r2
 8739 0046 0C33     		adds	r3, r3, #12
 8740 0048 1B68     		ldr	r3, [r3]
 8741 004a 3B60     		str	r3, [r7]
2509:..\src/interruptions.c ****             // check if the current is over the limit
2510:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2511:..\src/interruptions.c ****                 if (curr < 0){
 8742              		.loc 1 2511 0
 8743 004c 3B68     		ldr	r3, [r7]
 8744 004e 002B     		cmp	r3, #0
 8745 0050 02DA     		bge	.L582
2512:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8746              		.loc 1 2512 0
 8747 0052 3B68     		ldr	r3, [r7]
 8748 0054 5B42     		negs	r3, r3
 8749 0056 3B60     		str	r3, [r7]
 8750              	.L582:
2513:..\src/interruptions.c ****                 }
2514:..\src/interruptions.c ****          //   }
2515:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8751              		.loc 1 2515 0
 8752 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8753 005a 2749     		ldr	r1, .L587
 8754 005c 1346     		mov	r3, r2
 8755 005e DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 202


 8756 0060 9B1A     		subs	r3, r3, r2
 8757 0062 1B01     		lsls	r3, r3, #4
 8758 0064 0B44     		add	r3, r3, r1
 8759 0066 03F58673 		add	r3, r3, #268
 8760 006a B3F90030 		ldrsh	r3, [r3]
 8761 006e 1A46     		mov	r2, r3
 8762 0070 3B68     		ldr	r3, [r7]
 8763 0072 9A42     		cmp	r2, r3
 8764 0074 09DA     		bge	.L583
2516:..\src/interruptions.c ****                 //decrease pwm_limit
2517:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8765              		.loc 1 2517 0
 8766 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8767 0078 224A     		ldr	r2, .L587+12
 8768 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8769 007e 013A     		subs	r2, r2, #1
 8770 0080 91B2     		uxth	r1, r2
 8771 0082 204A     		ldr	r2, .L587+12
 8772 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8773 0088 18E0     		b	.L586
 8774              	.L583:
2518:..\src/interruptions.c ****             // check if the current is in the safe zone
2519:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8775              		.loc 1 2519 0
 8776 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8777 008c 1A49     		ldr	r1, .L587
 8778 008e 1346     		mov	r3, r2
 8779 0090 DB00     		lsls	r3, r3, #3
 8780 0092 9B1A     		subs	r3, r3, r2
 8781 0094 1B01     		lsls	r3, r3, #4
 8782 0096 0B44     		add	r3, r3, r1
 8783 0098 03F58673 		add	r3, r3, #268
 8784 009c B3F90030 		ldrsh	r3, [r3]
 8785 00a0 A3F10A02 		sub	r2, r3, #10
 8786 00a4 3B68     		ldr	r3, [r7]
 8787 00a6 9A42     		cmp	r2, r3
 8788 00a8 08DD     		ble	.L586
2520:..\src/interruptions.c ****                 //increase pwm_limit
2521:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8789              		.loc 1 2521 0
 8790 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8791 00ac 154A     		ldr	r2, .L587+12
 8792 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8793 00b2 0132     		adds	r2, r2, #1
 8794 00b4 91B2     		uxth	r1, r2
 8795 00b6 134A     		ldr	r2, .L587+12
 8796 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8797              	.L586:
2522:..\src/interruptions.c ****             }
2523:..\src/interruptions.c **** 
2524:..\src/interruptions.c ****             // Bound pwm_limit
2525:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2526:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2527:..\src/interruptions.c ****             else 
2528:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8798              		.loc 1 2528 0
 8799 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 203


 8800 00be 114A     		ldr	r2, .L587+12
 8801 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8802 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8803 00c6 1049     		ldr	r1, .L587+16
 8804 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8805 00cc 9A42     		cmp	r2, r3
 8806 00ce 07D9     		bls	.L581
2529:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8807              		.loc 1 2529 0
 8808 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8809 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8810 00d4 0C49     		ldr	r1, .L587+16
 8811 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8812 00da 0A4A     		ldr	r2, .L587+12
 8813 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8814              	.L581:
 8815              	.LBE11:
2506:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8816              		.loc 1 2506 0 discriminator 2
 8817 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8818 00e2 0133     		adds	r3, r3, #1
 8819 00e4 FB71     		strb	r3, [r7, #7]
 8820              	.L580:
2506:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8821              		.loc 1 2506 0 is_stmt 0 discriminator 1
 8822 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8823 00e8 012B     		cmp	r3, #1
 8824 00ea 8FD9     		bls	.L585
 8825              	.LBE10:
2530:..\src/interruptions.c ****         }
2531:..\src/interruptions.c ****     }
2532:..\src/interruptions.c **** }
 8826              		.loc 1 2532 0 is_stmt 1
 8827 00ec 00BF     		nop
 8828 00ee 0C37     		adds	r7, r7, #12
 8829              		.cfi_def_cfa_offset 4
 8830 00f0 BD46     		mov	sp, r7
 8831              		.cfi_def_cfa_register 13
 8832              		@ sp needed
 8833 00f2 80BC     		pop	{r7}
 8834              		.cfi_restore 7
 8835              		.cfi_def_cfa_offset 0
 8836 00f4 7047     		bx	lr
 8837              	.L588:
 8838 00f6 00BF     		.align	2
 8839              	.L587:
 8840 00f8 00000000 		.word	c_mem
 8841 00fc 00000000 		.word	g_mem
 8842 0100 00000000 		.word	g_meas
 8843 0104 00000000 		.word	dev_pwm_limit
 8844 0108 00000000 		.word	dev_pwm_sat
 8845              		.cfi_endproc
 8846              	.LFE76:
 8847              		.size	overcurrent_control, .-overcurrent_control
 8848              		.section	.text.pwm_limit_search,"ax",%progbits
 8849              		.align	2
 8850              		.global	pwm_limit_search
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 204


 8851              		.thumb
 8852              		.thumb_func
 8853              		.type	pwm_limit_search, %function
 8854              	pwm_limit_search:
 8855              	.LFB77:
2533:..\src/interruptions.c **** 
2534:..\src/interruptions.c **** //==============================================================================
2535:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2536:..\src/interruptions.c **** //==============================================================================
2537:..\src/interruptions.c **** 
2538:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8856              		.loc 1 2538 0
 8857              		.cfi_startproc
 8858              		@ args = 0, pretend = 0, frame = 16
 8859              		@ frame_needed = 1, uses_anonymous_args = 0
 8860              		@ link register save eliminated.
 8861 0000 80B4     		push	{r7}
 8862              		.cfi_def_cfa_offset 4
 8863              		.cfi_offset 7, -4
 8864 0002 85B0     		sub	sp, sp, #20
 8865              		.cfi_def_cfa_offset 24
 8866 0004 00AF     		add	r7, sp, #0
 8867              		.cfi_def_cfa_register 7
 8868 0006 0346     		mov	r3, r0
 8869 0008 FB71     		strb	r3, [r7, #7]
2539:..\src/interruptions.c **** 
2540:..\src/interruptions.c ****     uint8 CYDATA index;
2541:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 8870              		.loc 1 2541 0
 8871 000a 46F28473 		movw	r3, #26500
 8872 000e FB81     		strh	r3, [r7, #14]	@ movhi
2542:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8873              		.loc 1 2542 0
 8874 0010 42F6EC43 		movw	r3, #11500
 8875 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2543:..\src/interruptions.c ****     
2544:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8876              		.loc 1 2544 0
 8877 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8878 0018 1F4A     		ldr	r2, .L596
 8879 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8880 001e FB89     		ldrh	r3, [r7, #14]
 8881 0020 9A42     		cmp	r2, r3
 8882 0022 05DD     		ble	.L590
2545:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8883              		.loc 1 2545 0
 8884 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8885 0026 1D4A     		ldr	r2, .L596+4
 8886 0028 0021     		movs	r1, #0
 8887 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2546:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2547:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2548:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2549:..\src/interruptions.c ****         } else {
2550:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2551:..\src/interruptions.c ****         }
2552:..\src/interruptions.c ****     } else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 205


2553:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2554:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2555:..\src/interruptions.c ****     }
2556:..\src/interruptions.c **** }
 8888              		.loc 1 2556 0
 8889 002e 2EE0     		b	.L595
 8890              	.L590:
2546:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8891              		.loc 1 2546 0
 8892 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8893 0032 194A     		ldr	r2, .L596
 8894 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8895 0038 BB89     		ldrh	r3, [r7, #12]
 8896 003a 9A42     		cmp	r2, r3
 8897 003c 17DA     		bge	.L592
2547:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 8898              		.loc 1 2547 0
 8899 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8900 0040 1749     		ldr	r1, .L596+8
 8901 0042 1346     		mov	r3, r2
 8902 0044 DB00     		lsls	r3, r3, #3
 8903 0046 9B1A     		subs	r3, r3, r2
 8904 0048 1B01     		lsls	r3, r3, #4
 8905 004a 0B44     		add	r3, r3, r1
 8906 004c E233     		adds	r3, r3, #226
 8907 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8908 0050 022B     		cmp	r3, #2
 8909 0052 06D1     		bne	.L593
2548:..\src/interruptions.c ****         } else {
 8910              		.loc 1 2548 0
 8911 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8912 0056 114A     		ldr	r2, .L596+4
 8913 0058 40F6A931 		movw	r1, #2985
 8914 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8915              		.loc 1 2556 0
 8916 0060 15E0     		b	.L595
 8917              	.L593:
2550:..\src/interruptions.c ****         }
 8918              		.loc 1 2550 0
 8919 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8920 0064 0D4A     		ldr	r2, .L596+4
 8921 0066 6421     		movs	r1, #100
 8922 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8923              		.loc 1 2556 0
 8924 006c 0FE0     		b	.L595
 8925              	.L592:
2553:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8926              		.loc 1 2553 0
 8927 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8928 0070 094A     		ldr	r2, .L596
 8929 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8930 0076 BB89     		ldrh	r3, [r7, #12]
 8931 0078 D31A     		subs	r3, r2, r3
 8932 007a 5B12     		asrs	r3, r3, #9
 8933 007c FB72     		strb	r3, [r7, #11]
2554:..\src/interruptions.c ****     }
 8934              		.loc 1 2554 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 206


 8935 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8936 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8937 0082 0849     		ldr	r1, .L596+12
 8938 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8939 0086 91B2     		uxth	r1, r2
 8940 0088 044A     		ldr	r2, .L596+4
 8941 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8942              	.L595:
 8943              		.loc 1 2556 0
 8944 008e 00BF     		nop
 8945 0090 1437     		adds	r7, r7, #20
 8946              		.cfi_def_cfa_offset 4
 8947 0092 BD46     		mov	sp, r7
 8948              		.cfi_def_cfa_register 13
 8949              		@ sp needed
 8950 0094 80BC     		pop	{r7}
 8951              		.cfi_restore 7
 8952              		.cfi_def_cfa_offset 0
 8953 0096 7047     		bx	lr
 8954              	.L597:
 8955              		.align	2
 8956              	.L596:
 8957 0098 00000000 		.word	dev_tension
 8958 009c 00000000 		.word	dev_pwm_sat
 8959 00a0 00000000 		.word	c_mem
 8960 00a4 00000000 		.word	pwm_preload_values
 8961              		.cfi_endproc
 8962              	.LFE77:
 8963              		.size	pwm_limit_search, .-pwm_limit_search
 8964              		.global	__aeabi_ui2f
 8965              		.global	__aeabi_dcmpgt
 8966              		.section	.text.cycles_counter_update,"ax",%progbits
 8967              		.align	2
 8968              		.global	cycles_counter_update
 8969              		.thumb
 8970              		.thumb_func
 8971              		.type	cycles_counter_update, %function
 8972              	cycles_counter_update:
 8973              	.LFB78:
2557:..\src/interruptions.c **** 
2558:..\src/interruptions.c **** //==============================================================================
2559:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2560:..\src/interruptions.c **** //==============================================================================
2561:..\src/interruptions.c **** 
2562:..\src/interruptions.c **** void cycles_counter_update() {
 8974              		.loc 1 2562 0
 8975              		.cfi_startproc
 8976              		@ args = 0, pretend = 0, frame = 24
 8977              		@ frame_needed = 1, uses_anonymous_args = 0
 8978 0000 90B5     		push	{r4, r7, lr}
 8979              		.cfi_def_cfa_offset 12
 8980              		.cfi_offset 4, -12
 8981              		.cfi_offset 7, -8
 8982              		.cfi_offset 14, -4
 8983 0002 87B0     		sub	sp, sp, #28
 8984              		.cfi_def_cfa_offset 40
 8985 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 207


 8986              		.cfi_def_cfa_register 7
2563:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2564:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2565:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2566:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2567:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2568:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2569:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2570:..\src/interruptions.c ****     static int32 thr_pos = 0;
2571:..\src/interruptions.c ****     static int32 max_pos = 0;
2572:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2573:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 8987              		.loc 1 2573 0
 8988 0006 0023     		movs	r3, #0
 8989 0008 FB60     		str	r3, [r7, #12]
 8990 000a 0023     		movs	r3, #0
 8991 000c BB60     		str	r3, [r7, #8]
 8992 000e 0023     		movs	r3, #0
 8993 0010 3B61     		str	r3, [r7, #16]
2574:..\src/interruptions.c ****     int32 step;
2575:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2576:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2577:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2578:..\src/interruptions.c **** 
2579:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8994              		.loc 1 2579 0
 8995 0012 A64B     		ldr	r3, .L676
 8996 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8997 0018 1946     		mov	r1, r3
 8998 001a A54A     		ldr	r2, .L676+4
 8999 001c 3423     		movs	r3, #52
 9000 001e 03FB01F3 		mul	r3, r3, r1
 9001 0022 1344     		add	r3, r3, r2
 9002 0024 1A68     		ldr	r2, [r3]
 9003 0026 A14B     		ldr	r3, .L676
 9004 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9005 002c 1846     		mov	r0, r3
 9006 002e 9F49     		ldr	r1, .L676
 9007 0030 0346     		mov	r3, r0
 9008 0032 5B00     		lsls	r3, r3, #1
 9009 0034 0344     		add	r3, r3, r0
 9010 0036 1B01     		lsls	r3, r3, #4
 9011 0038 0B44     		add	r3, r3, r1
 9012 003a 03F29513 		addw	r3, r3, #405
 9013 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9014 0040 42FA03F3 		asr	r3, r2, r3
 9015 0044 FB60     		str	r3, [r7, #12]
2580:..\src/interruptions.c ****         
2581:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2582:..\src/interruptions.c ****     switch (pos_cycle_status){
 9016              		.loc 1 2582 0
 9017 0046 9B4B     		ldr	r3, .L676+8
 9018 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9019 004a 012B     		cmp	r3, #1
 9020 004c 3DD0     		beq	.L600
 9021 004e 022B     		cmp	r3, #2
 9022 0050 74D0     		beq	.L601
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 208


 9023 0052 002B     		cmp	r3, #0
 9024 0054 40F02781 		bne	.L599
2583:..\src/interruptions.c ****         case STATE_INACTIVE:
2584:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9025              		.loc 1 2584 0
 9026 0058 944B     		ldr	r3, .L676
 9027 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9028 005e 072B     		cmp	r3, #7
 9029 0060 04D0     		beq	.L603
 9030              		.loc 1 2584 0 is_stmt 0 discriminator 1
 9031 0062 954B     		ldr	r3, .L676+12
 9032 0064 93F90030 		ldrsb	r3, [r3]
 9033 0068 012B     		cmp	r3, #1
 9034 006a 0CD0     		beq	.L604
 9035              	.L603:
 9036              		.loc 1 2584 0 discriminator 3
 9037 006c 8F4B     		ldr	r3, .L676
 9038 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9039 0072 072B     		cmp	r3, #7
 9040 0074 40F01481 		bne	.L666
 9041              		.loc 1 2584 0 discriminator 4
 9042 0078 8F4B     		ldr	r3, .L676+12
 9043 007a 93F90030 		ldrsb	r3, [r3]
 9044 007e B3F1FF3F 		cmp	r3, #-1
 9045 0082 40F00D81 		bne	.L666
 9046              	.L604:
2585:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9047              		.loc 1 2585 0 is_stmt 1
 9048 0086 8D4A     		ldr	r2, .L676+16
 9049 0088 FB68     		ldr	r3, [r7, #12]
 9050 008a 1360     		str	r3, [r2]
2586:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9051              		.loc 1 2586 0
 9052 008c 8C4B     		ldr	r3, .L676+20
 9053 008e 1A68     		ldr	r2, [r3]
 9054 0090 8A4B     		ldr	r3, .L676+16
 9055 0092 1B68     		ldr	r3, [r3]
 9056 0094 9A42     		cmp	r2, r3
 9057 0096 05DD     		ble	.L606
 9058              		.loc 1 2586 0 is_stmt 0 discriminator 1
 9059 0098 894B     		ldr	r3, .L676+20
 9060 009a 1A68     		ldr	r2, [r3]
 9061 009c 874B     		ldr	r3, .L676+16
 9062 009e 1B68     		ldr	r3, [r3]
 9063 00a0 D31A     		subs	r3, r2, r3
 9064 00a2 04E0     		b	.L607
 9065              	.L606:
 9066              		.loc 1 2586 0 discriminator 2
 9067 00a4 854B     		ldr	r3, .L676+16
 9068 00a6 1A68     		ldr	r2, [r3]
 9069 00a8 854B     		ldr	r3, .L676+20
 9070 00aa 1B68     		ldr	r3, [r3]
 9071 00ac D31A     		subs	r3, r2, r3
 9072              	.L607:
 9073              		.loc 1 2586 0 discriminator 4
 9074 00ae BB60     		str	r3, [r7, #8]
2587:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 209


 9075              		.loc 1 2587 0 is_stmt 1 discriminator 4
 9076 00b0 BB68     		ldr	r3, [r7, #8]
 9077 00b2 142B     		cmp	r3, #20
 9078 00b4 05DD     		ble	.L608
2588:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9079              		.loc 1 2588 0
 9080 00b6 7D4B     		ldr	r3, .L676
 9081 00b8 5A6D     		ldr	r2, [r3, #84]
 9082 00ba BB68     		ldr	r3, [r7, #8]
 9083 00bc 1344     		add	r3, r3, r2
 9084 00be 7B4A     		ldr	r2, .L676
 9085 00c0 5365     		str	r3, [r2, #84]
 9086              	.L608:
2589:..\src/interruptions.c ****                 }
2590:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9087              		.loc 1 2590 0
 9088 00c2 7C4B     		ldr	r3, .L676+8
 9089 00c4 0122     		movs	r2, #1
 9090 00c6 1A70     		strb	r2, [r3]
2591:..\src/interruptions.c ****             }
2592:..\src/interruptions.c ****             break;
 9091              		.loc 1 2592 0
 9092 00c8 EAE0     		b	.L666
 9093              	.L600:
2593:..\src/interruptions.c ****         case STATE_ACTIVE:
2594:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9094              		.loc 1 2594 0
 9095 00ca 784B     		ldr	r3, .L676
 9096 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9097 00d0 072B     		cmp	r3, #7
 9098 00d2 05D0     		beq	.L609
 9099              		.loc 1 2594 0 is_stmt 0 discriminator 1
 9100 00d4 784B     		ldr	r3, .L676+12
 9101 00d6 93F90030 		ldrsb	r3, [r3]
 9102 00da B3F1FF3F 		cmp	r3, #-1
 9103 00de 0BD0     		beq	.L610
 9104              	.L609:
 9105              		.loc 1 2594 0 discriminator 3
 9106 00e0 724B     		ldr	r3, .L676
 9107 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9108 00e6 072B     		cmp	r3, #7
 9109 00e8 40F0DC80 		bne	.L667
 9110              		.loc 1 2594 0 discriminator 4
 9111 00ec 724B     		ldr	r3, .L676+12
 9112 00ee 93F90030 		ldrsb	r3, [r3]
 9113 00f2 012B     		cmp	r3, #1
 9114 00f4 40F0D680 		bne	.L667
 9115              	.L610:
2595:..\src/interruptions.c ****                 max_pos = curr_pos;
 9116              		.loc 1 2595 0 is_stmt 1
 9117 00f8 714A     		ldr	r2, .L676+20
 9118 00fa FB68     		ldr	r3, [r7, #12]
 9119 00fc 1360     		str	r3, [r2]
2596:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9120              		.loc 1 2596 0
 9121 00fe 704B     		ldr	r3, .L676+20
 9122 0100 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 210


 9123 0102 6E4B     		ldr	r3, .L676+16
 9124 0104 1B68     		ldr	r3, [r3]
 9125 0106 9A42     		cmp	r2, r3
 9126 0108 05DD     		ble	.L612
 9127              		.loc 1 2596 0 is_stmt 0 discriminator 1
 9128 010a 6D4B     		ldr	r3, .L676+20
 9129 010c 1A68     		ldr	r2, [r3]
 9130 010e 6B4B     		ldr	r3, .L676+16
 9131 0110 1B68     		ldr	r3, [r3]
 9132 0112 D31A     		subs	r3, r2, r3
 9133 0114 04E0     		b	.L613
 9134              	.L612:
 9135              		.loc 1 2596 0 discriminator 2
 9136 0116 694B     		ldr	r3, .L676+16
 9137 0118 1A68     		ldr	r2, [r3]
 9138 011a 694B     		ldr	r3, .L676+20
 9139 011c 1B68     		ldr	r3, [r3]
 9140 011e D31A     		subs	r3, r2, r3
 9141              	.L613:
 9142              		.loc 1 2596 0 discriminator 4
 9143 0120 BB60     		str	r3, [r7, #8]
2597:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9144              		.loc 1 2597 0 is_stmt 1 discriminator 4
 9145 0122 BB68     		ldr	r3, [r7, #8]
 9146 0124 142B     		cmp	r3, #20
 9147 0126 05DD     		ble	.L614
2598:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9148              		.loc 1 2598 0
 9149 0128 604B     		ldr	r3, .L676
 9150 012a 5A6D     		ldr	r2, [r3, #84]
 9151 012c BB68     		ldr	r3, [r7, #8]
 9152 012e 1344     		add	r3, r3, r2
 9153 0130 5E4A     		ldr	r2, .L676
 9154 0132 5365     		str	r3, [r2, #84]
 9155              	.L614:
2599:..\src/interruptions.c ****                 }
2600:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9156              		.loc 1 2600 0
 9157 0134 5F4B     		ldr	r3, .L676+8
 9158 0136 0222     		movs	r2, #2
 9159 0138 1A70     		strb	r2, [r3]
2601:..\src/interruptions.c ****             }
2602:..\src/interruptions.c ****             break;
 9160              		.loc 1 2602 0
 9161 013a B3E0     		b	.L667
 9162              	.L601:
2603:..\src/interruptions.c ****         case COUNTER_INC:
2604:..\src/interruptions.c **** 
2605:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9163              		.loc 1 2605 0
 9164 013c 604B     		ldr	r3, .L676+20
 9165 013e 1A68     		ldr	r2, [r3]
 9166 0140 5E4B     		ldr	r3, .L676+16
 9167 0142 1B68     		ldr	r3, [r3]
 9168 0144 9A42     		cmp	r2, r3
 9169 0146 05DD     		ble	.L615
 9170              		.loc 1 2605 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 211


 9171 0148 5D4B     		ldr	r3, .L676+20
 9172 014a 1A68     		ldr	r2, [r3]
 9173 014c 5B4B     		ldr	r3, .L676+16
 9174 014e 1B68     		ldr	r3, [r3]
 9175 0150 D31A     		subs	r3, r2, r3
 9176 0152 04E0     		b	.L616
 9177              	.L615:
 9178              		.loc 1 2605 0 discriminator 2
 9179 0154 594B     		ldr	r3, .L676+16
 9180 0156 1A68     		ldr	r2, [r3]
 9181 0158 594B     		ldr	r3, .L676+20
 9182 015a 1B68     		ldr	r3, [r3]
 9183 015c D31A     		subs	r3, r2, r3
 9184              	.L616:
 9185              		.loc 1 2605 0 discriminator 4
 9186 015e BB60     		str	r3, [r7, #8]
2606:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9187              		.loc 1 2606 0 is_stmt 1 discriminator 4
 9188 0160 584B     		ldr	r3, .L676+24
 9189 0162 1B68     		ldr	r3, [r3]
 9190 0164 BA68     		ldr	r2, [r7, #8]
 9191 0166 9A42     		cmp	r2, r3
 9192 0168 40F39680 		ble	.L617
2607:..\src/interruptions.c ****                 //update position histogram
2608:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9193              		.loc 1 2608 0
 9194 016c 4F4B     		ldr	r3, .L676
 9195 016e D3F8E820 		ldr	r2, [r3, #232]
 9196 0172 4E4B     		ldr	r3, .L676
 9197 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9198 0178 1846     		mov	r0, r3
 9199 017a 4C49     		ldr	r1, .L676
 9200 017c 0346     		mov	r3, r0
 9201 017e 5B00     		lsls	r3, r3, #1
 9202 0180 0344     		add	r3, r3, r0
 9203 0182 1B01     		lsls	r3, r3, #4
 9204 0184 0B44     		add	r3, r3, r1
 9205 0186 03F29513 		addw	r3, r3, #405
 9206 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9207 018c 42FA03F3 		asr	r3, r2, r3
 9208 0190 4D4A     		ldr	r2, .L676+28
 9209 0192 82FB0312 		smull	r1, r2, r2, r3
 9210 0196 9210     		asrs	r2, r2, #2
 9211 0198 DB17     		asrs	r3, r3, #31
 9212 019a D31A     		subs	r3, r2, r3
 9213 019c 7B60     		str	r3, [r7, #4]
2609:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9214              		.loc 1 2609 0
 9215 019e 474B     		ldr	r3, .L676+16
 9216 01a0 1A68     		ldr	r2, [r3]
 9217 01a2 7B68     		ldr	r3, [r7, #4]
 9218 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9219 01a8 FB70     		strb	r3, [r7, #3]
2610:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9220              		.loc 1 2610 0
 9221 01aa 454B     		ldr	r3, .L676+20
 9222 01ac 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 212


 9223 01ae 7B68     		ldr	r3, [r7, #4]
 9224 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9225 01b4 BB70     		strb	r3, [r7, #2]
2611:..\src/interruptions.c ****                 
2612:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2613:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9226              		.loc 1 2613 0
 9227 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9228 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9229 01ba 9342     		cmp	r3, r2
 9230 01bc 28BF     		it	cs
 9231 01be 1346     		movcs	r3, r2
 9232 01c0 7B70     		strb	r3, [r7, #1]
2614:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9233              		.loc 1 2614 0
 9234 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9235 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9236 01c6 9342     		cmp	r3, r2
 9237 01c8 38BF     		it	cc
 9238 01ca 1346     		movcc	r3, r2
 9239 01cc 3B70     		strb	r3, [r7]
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9240              		.loc 1 2615 0
 9241 01ce 7B78     		ldrb	r3, [r7, #1]
 9242 01d0 FB75     		strb	r3, [r7, #23]
 9243 01d2 0DE0     		b	.L618
 9244              	.L620:
2616:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2617:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9245              		.loc 1 2617 0 discriminator 4
 9246 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9247 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9248 01d8 3449     		ldr	r1, .L676
 9249 01da 0632     		adds	r2, r2, #6
 9250 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9251 01e0 0132     		adds	r2, r2, #1
 9252 01e2 3249     		ldr	r1, .L676
 9253 01e4 0633     		adds	r3, r3, #6
 9254 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9255              		.loc 1 2615 0 discriminator 4
 9256 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9257 01ec 0133     		adds	r3, r3, #1
 9258 01ee FB75     		strb	r3, [r7, #23]
 9259              	.L618:
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9260              		.loc 1 2615 0 is_stmt 0 discriminator 1
 9261 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9262 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9263 01f4 9A42     		cmp	r2, r3
 9264 01f6 02D8     		bhi	.L619
2615:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9265              		.loc 1 2615 0 discriminator 3
 9266 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9267 01fa 092B     		cmp	r3, #9
 9268 01fc EAD9     		bls	.L620
 9269              	.L619:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 213


2618:..\src/interruptions.c ****                 }
2619:..\src/interruptions.c ****                 
2620:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2621:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9270              		.loc 1 2621 0 is_stmt 1
 9271 01fe 2B4B     		ldr	r3, .L676
 9272 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9273 0204 002B     		cmp	r3, #0
 9274 0206 00DA     		bge	.L621
 9275 0208 0333     		adds	r3, r3, #3
 9276              	.L621:
 9277 020a 9B10     		asrs	r3, r3, #2
 9278 020c 1BB2     		sxth	r3, r3
 9279 020e 7B60     		str	r3, [r7, #4]
2622:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9280              		.loc 1 2622 0
 9281 0210 264B     		ldr	r3, .L676
 9282 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9283 0216 012B     		cmp	r3, #1
 9284 0218 0CD1     		bne	.L622
2623:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9285              		.loc 1 2623 0
 9286 021a 244B     		ldr	r3, .L676
 9287 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9288 0220 1946     		mov	r1, r3
 9289 0222 234A     		ldr	r2, .L676+4
 9290 0224 3423     		movs	r3, #52
 9291 0226 03FB01F3 		mul	r3, r3, r1
 9292 022a 1344     		add	r3, r3, r2
 9293 022c 1433     		adds	r3, r3, #20
 9294 022e 1B68     		ldr	r3, [r3]
 9295 0230 3B61     		str	r3, [r7, #16]
 9296 0232 0BE0     		b	.L623
 9297              	.L622:
2624:..\src/interruptions.c ****                 else
2625:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9298              		.loc 1 2625 0
 9299 0234 1D4B     		ldr	r3, .L676
 9300 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9301 023a 1946     		mov	r1, r3
 9302 023c 1C4A     		ldr	r2, .L676+4
 9303 023e 3423     		movs	r3, #52
 9304 0240 03FB01F3 		mul	r3, r3, r1
 9305 0244 1344     		add	r3, r3, r2
 9306 0246 0C33     		adds	r3, r3, #12
 9307 0248 1B68     		ldr	r3, [r3]
 9308 024a 3B61     		str	r3, [r7, #16]
 9309              	.L623:
2626:..\src/interruptions.c **** 
2627:..\src/interruptions.c ****                 if (curr_ref < 0){
 9310              		.loc 1 2627 0
 9311 024c 3B69     		ldr	r3, [r7, #16]
 9312 024e 002B     		cmp	r3, #0
 9313 0250 02DA     		bge	.L624
2628:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9314              		.loc 1 2628 0
 9315 0252 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 214


 9316 0254 5B42     		negs	r3, r3
 9317 0256 3B61     		str	r3, [r7, #16]
 9318              	.L624:
2629:..\src/interruptions.c ****                 }
2630:..\src/interruptions.c ****                 
2631:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9319              		.loc 1 2631 0
 9320 0258 144B     		ldr	r3, .L676
 9321 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9322 025e 1A46     		mov	r2, r3
 9323 0260 3B69     		ldr	r3, [r7, #16]
 9324 0262 9A42     		cmp	r2, r3
 9325 0264 05DA     		bge	.L625
2632:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9326              		.loc 1 2632 0
 9327 0266 114B     		ldr	r3, .L676
 9328 0268 DB6C     		ldr	r3, [r3, #76]
 9329 026a 0133     		adds	r3, r3, #1
 9330 026c 0F4A     		ldr	r2, .L676
 9331 026e D364     		str	r3, [r2, #76]
 9332 0270 12E0     		b	.L617
 9333              	.L625:
2633:..\src/interruptions.c ****                 else
2634:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9334              		.loc 1 2634 0
 9335 0272 3A69     		ldr	r2, [r7, #16]
 9336 0274 7B68     		ldr	r3, [r7, #4]
 9337 0276 92FBF3F3 		sdiv	r3, r2, r3
 9338 027a DBB2     		uxtb	r3, r3
 9339 027c 3969     		ldr	r1, [r7, #16]
 9340 027e 7A68     		ldr	r2, [r7, #4]
 9341 0280 91FBF2F2 		sdiv	r2, r1, r2
 9342 0284 D2B2     		uxtb	r2, r2
 9343 0286 0949     		ldr	r1, .L676
 9344 0288 1032     		adds	r2, r2, #16
 9345 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9346 028e 0132     		adds	r2, r2, #1
 9347 0290 0649     		ldr	r1, .L676
 9348 0292 1033     		adds	r3, r3, #16
 9349 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9350              	.L617:
2635:..\src/interruptions.c ****             }
2636:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9351              		.loc 1 2636 0
 9352 0298 064B     		ldr	r3, .L676+8
 9353 029a 0022     		movs	r2, #0
 9354 029c 1A70     		strb	r2, [r3]
2637:..\src/interruptions.c ****             break;
 9355              		.loc 1 2637 0
 9356 029e 02E0     		b	.L599
 9357              	.L666:
2592:..\src/interruptions.c ****         case STATE_ACTIVE:
 9358              		.loc 1 2592 0
 9359 02a0 00BF     		nop
 9360 02a2 00E0     		b	.L599
 9361              	.L667:
2602:..\src/interruptions.c ****         case COUNTER_INC:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 215


 9362              		.loc 1 2602 0
 9363 02a4 00BF     		nop
 9364              	.L599:
2638:..\src/interruptions.c ****     }
2639:..\src/interruptions.c ****     
2640:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2641:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9365              		.loc 1 2641 0
 9366 02a6 0023     		movs	r3, #0
 9367 02a8 FB75     		strb	r3, [r7, #23]
 9368 02aa 4FE0     		b	.L626
 9369              	.L677:
 9370              		.align	2
 9371              	.L676:
 9372 02ac 00000000 		.word	g_mem
 9373 02b0 00000000 		.word	g_meas
 9374 02b4 8E010000 		.word	pos_cycle_status.10503
 9375 02b8 00000000 		.word	pwm_sign
 9376 02bc 90010000 		.word	thr_pos.10510
 9377 02c0 94010000 		.word	max_pos.10511
 9378 02c4 10000000 		.word	bin_threshold.10508
 9379 02c8 67666666 		.word	1717986919
 9380              	.L634:
2642:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9381              		.loc 1 2642 0
 9382 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9383 02ce 9C4A     		ldr	r2, .L678
 9384 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9385 02d2 012B     		cmp	r3, #1
 9386 02d4 13D0     		beq	.L628
 9387 02d6 022B     		cmp	r3, #2
 9388 02d8 22D0     		beq	.L629
 9389 02da 002B     		cmp	r3, #0
 9390 02dc 33D1     		bne	.L627
2643:..\src/interruptions.c ****             case STATE_INACTIVE:
2644:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9391              		.loc 1 2644 0
 9392 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9393 02e0 984A     		ldr	r2, .L678+4
 9394 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9395 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9396 02e8 9749     		ldr	r1, .L678+8
 9397 02ea F832     		adds	r2, r2, #248
 9398 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9399 02f0 9342     		cmp	r3, r2
 9400 02f2 25DD     		ble	.L668
2645:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9401              		.loc 1 2645 0
 9402 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9403 02f6 924A     		ldr	r2, .L678
 9404 02f8 0121     		movs	r1, #1
 9405 02fa D154     		strb	r1, [r2, r3]
2646:..\src/interruptions.c ****                 }
2647:..\src/interruptions.c ****                 break;
 9406              		.loc 1 2647 0
 9407 02fc 20E0     		b	.L668
 9408              	.L628:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 216


2648:..\src/interruptions.c ****             case STATE_ACTIVE:
2649:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9409              		.loc 1 2649 0
 9410 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9411 0300 904A     		ldr	r2, .L678+4
 9412 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9413 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9414 0308 8F49     		ldr	r1, .L678+8
 9415 030a F833     		adds	r3, r3, #248
 9416 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9417 0310 0A3B     		subs	r3, r3, #10
 9418 0312 9A42     		cmp	r2, r3
 9419 0314 16DA     		bge	.L669
2650:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9420              		.loc 1 2650 0
 9421 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9422 0318 894A     		ldr	r2, .L678
 9423 031a 0221     		movs	r1, #2
 9424 031c D154     		strb	r1, [r2, r3]
2651:..\src/interruptions.c ****                 }
2652:..\src/interruptions.c ****                 break;
 9425              		.loc 1 2652 0
 9426 031e 11E0     		b	.L669
 9427              	.L629:
2653:..\src/interruptions.c ****             case COUNTER_INC:
2654:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9428              		.loc 1 2654 0
 9429 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9430 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9431 0324 8849     		ldr	r1, .L678+8
 9432 0326 0432     		adds	r2, r2, #4
 9433 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9434 032c 0132     		adds	r2, r2, #1
 9435 032e 8649     		ldr	r1, .L678+8
 9436 0330 0433     		adds	r3, r3, #4
 9437 0332 41F82320 		str	r2, [r1, r3, lsl #2]
2655:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9438              		.loc 1 2655 0
 9439 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9440 0338 814A     		ldr	r2, .L678
 9441 033a 0021     		movs	r1, #0
 9442 033c D154     		strb	r1, [r2, r3]
2656:..\src/interruptions.c ****                 break;
 9443              		.loc 1 2656 0
 9444 033e 02E0     		b	.L627
 9445              	.L668:
2647:..\src/interruptions.c ****             case STATE_ACTIVE:
 9446              		.loc 1 2647 0
 9447 0340 00BF     		nop
 9448 0342 00E0     		b	.L627
 9449              	.L669:
2652:..\src/interruptions.c ****             case COUNTER_INC:
 9450              		.loc 1 2652 0
 9451 0344 00BF     		nop
 9452              	.L627:
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9453              		.loc 1 2641 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 217


 9454 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9455 0348 0133     		adds	r3, r3, #1
 9456 034a FB75     		strb	r3, [r7, #23]
 9457              	.L626:
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9458              		.loc 1 2641 0 is_stmt 0 discriminator 1
 9459 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9460 034e 012B     		cmp	r3, #1
 9461 0350 07D8     		bhi	.L633
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9462              		.loc 1 2641 0 discriminator 3
 9463 0352 7E4B     		ldr	r3, .L678+12
 9464 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9465 0356 002B     		cmp	r3, #0
 9466 0358 03D1     		bne	.L633
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9467              		.loc 1 2641 0 discriminator 4
 9468 035a 7D4B     		ldr	r3, .L678+16
 9469 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9470 035e 002B     		cmp	r3, #0
 9471 0360 B4D0     		beq	.L634
 9472              	.L633:
2657:..\src/interruptions.c ****         }
2658:..\src/interruptions.c ****     }
2659:..\src/interruptions.c ****     
2660:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2661:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9473              		.loc 1 2661 0 is_stmt 1
 9474 0362 0023     		movs	r3, #0
 9475 0364 FB75     		strb	r3, [r7, #23]
 9476 0366 57E0     		b	.L635
 9477              	.L644:
2662:..\src/interruptions.c ****         switch (motion_status[i]){
 9478              		.loc 1 2662 0
 9479 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9480 036a 7A4A     		ldr	r2, .L678+20
 9481 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9482 036e 012B     		cmp	r3, #1
 9483 0370 18D0     		beq	.L637
 9484 0372 022B     		cmp	r3, #2
 9485 0374 37D0     		beq	.L638
 9486 0376 002B     		cmp	r3, #0
 9487 0378 4BD1     		bne	.L636
2663:..\src/interruptions.c ****             case STATE_INACTIVE:
2664:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9488              		.loc 1 2664 0
 9489 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9490 037c 714A     		ldr	r2, .L678+4
 9491 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9492 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9493 0384 7049     		ldr	r1, .L678+8
 9494 0386 F832     		adds	r2, r2, #248
 9495 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9496 038c 9342     		cmp	r3, r2
 9497 038e 3DDD     		ble	.L670
2665:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9498              		.loc 1 2665 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 218


 9499 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9500 0392 7149     		ldr	r1, .L678+24
 9501 0394 FA68     		ldr	r2, [r7, #12]
 9502 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2666:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
 9503              		.loc 1 2666 0
 9504 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9505 039c 6D4A     		ldr	r2, .L678+20
 9506 039e 0121     		movs	r1, #1
 9507 03a0 D154     		strb	r1, [r2, r3]
2667:..\src/interruptions.c ****                 }
2668:..\src/interruptions.c ****                 break;
 9508              		.loc 1 2668 0
 9509 03a2 33E0     		b	.L670
 9510              	.L637:
2669:..\src/interruptions.c ****             case STATE_ACTIVE:
2670:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9511              		.loc 1 2670 0
 9512 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9513 03a6 674A     		ldr	r2, .L678+4
 9514 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9515 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9516 03ae 6649     		ldr	r1, .L678+8
 9517 03b0 F833     		adds	r3, r3, #248
 9518 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9519 03b6 0A3B     		subs	r3, r3, #10
 9520 03b8 9A42     		cmp	r2, r3
 9521 03ba 29DA     		bge	.L671
2671:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9522              		.loc 1 2671 0
 9523 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9524 03be 664A     		ldr	r2, .L678+24
 9525 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9526 03c4 FB68     		ldr	r3, [r7, #12]
 9527 03c6 D31A     		subs	r3, r2, r3
 9528 03c8 002B     		cmp	r3, #0
 9529 03ca B8BF     		it	lt
 9530 03cc 5B42     		rsblt	r3, r3, #0
 9531 03ce C82B     		cmp	r3, #200
 9532 03d0 04DD     		ble	.L642
2672:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9533              		.loc 1 2672 0
 9534 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9535 03d4 5F4A     		ldr	r2, .L678+20
 9536 03d6 0221     		movs	r1, #2
 9537 03d8 D154     		strb	r1, [r2, r3]
2673:..\src/interruptions.c ****                     }
2674:..\src/interruptions.c ****                     else {
2675:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2676:..\src/interruptions.c ****                     }
2677:..\src/interruptions.c ****                 }
2678:..\src/interruptions.c ****                 break;
 9538              		.loc 1 2678 0
 9539 03da 19E0     		b	.L671
 9540              	.L642:
2675:..\src/interruptions.c ****                     }
 9541              		.loc 1 2675 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 219


 9542 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9543 03de 5D4A     		ldr	r2, .L678+20
 9544 03e0 0021     		movs	r1, #0
 9545 03e2 D154     		strb	r1, [r2, r3]
 9546              		.loc 1 2678 0
 9547 03e4 14E0     		b	.L671
 9548              	.L638:
2679:..\src/interruptions.c ****             case COUNTER_INC:
2680:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9549              		.loc 1 2680 0
 9550 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9551 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9552 03ea 574A     		ldr	r2, .L678+8
 9553 03ec 1A33     		adds	r3, r3, #26
 9554 03ee 9B00     		lsls	r3, r3, #2
 9555 03f0 1344     		add	r3, r3, r2
 9556 03f2 5B68     		ldr	r3, [r3, #4]
 9557 03f4 5A1C     		adds	r2, r3, #1
 9558 03f6 5448     		ldr	r0, .L678+8
 9559 03f8 01F11A03 		add	r3, r1, #26
 9560 03fc 9B00     		lsls	r3, r3, #2
 9561 03fe 0344     		add	r3, r3, r0
 9562 0400 5A60     		str	r2, [r3, #4]
2681:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9563              		.loc 1 2681 0
 9564 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9565 0404 534A     		ldr	r2, .L678+20
 9566 0406 0021     		movs	r1, #0
 9567 0408 D154     		strb	r1, [r2, r3]
2682:..\src/interruptions.c ****                 break;
 9568              		.loc 1 2682 0
 9569 040a 02E0     		b	.L636
 9570              	.L670:
2668:..\src/interruptions.c ****             case STATE_ACTIVE:
 9571              		.loc 1 2668 0
 9572 040c 00BF     		nop
 9573 040e 00E0     		b	.L636
 9574              	.L671:
2678:..\src/interruptions.c ****             case COUNTER_INC:
 9575              		.loc 1 2678 0
 9576 0410 00BF     		nop
 9577              	.L636:
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9578              		.loc 1 2661 0 discriminator 2
 9579 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9580 0414 0133     		adds	r3, r3, #1
 9581 0416 FB75     		strb	r3, [r7, #23]
 9582              	.L635:
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9583              		.loc 1 2661 0 is_stmt 0 discriminator 1
 9584 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9585 041a 012B     		cmp	r3, #1
 9586 041c 07D8     		bhi	.L643
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9587              		.loc 1 2661 0 discriminator 3
 9588 041e 4B4B     		ldr	r3, .L678+12
 9589 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 220


 9590 0422 002B     		cmp	r3, #0
 9591 0424 03D1     		bne	.L643
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9592              		.loc 1 2661 0 discriminator 4
 9593 0426 4A4B     		ldr	r3, .L678+16
 9594 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9595 042a 002B     		cmp	r3, #0
 9596 042c 9CD0     		beq	.L644
 9597              	.L643:
2683:..\src/interruptions.c ****         }
2684:..\src/interruptions.c ****     }
2685:..\src/interruptions.c ****     
2686:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2687:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9598              		.loc 1 2687 0 is_stmt 1
 9599 042e 0023     		movs	r3, #0
 9600 0430 FB75     		strb	r3, [r7, #23]
 9601 0432 A3E0     		b	.L645
 9602              	.L656:
2688:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9603              		.loc 1 2688 0
 9604 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9605 0436 494A     		ldr	r2, .L678+28
 9606 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9607 043a 012B     		cmp	r3, #1
 9608 043c 19D0     		beq	.L647
 9609 043e 022B     		cmp	r3, #2
 9610 0440 68D0     		beq	.L648
 9611 0442 002B     		cmp	r3, #0
 9612 0444 40F09780 		bne	.L646
2689:..\src/interruptions.c ****             case STATE_INACTIVE:
2690:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9613              		.loc 1 2690 0
 9614 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9615 044a 3E4A     		ldr	r2, .L678+4
 9616 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9617 0450 434B     		ldr	r3, .L678+32
 9618 0452 1B68     		ldr	r3, [r3]
 9619 0454 9A42     		cmp	r2, r3
 9620 0456 70DD     		ble	.L672
2691:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9621              		.loc 1 2691 0
 9622 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9623 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9624 045e 0346     		mov	r3, r0
 9625 0460 1A46     		mov	r2, r3
 9626 0462 404B     		ldr	r3, .L678+36
 9627 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2692:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9628              		.loc 1 2692 0
 9629 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9630 046a 3C4A     		ldr	r2, .L678+28
 9631 046c 0121     		movs	r1, #1
 9632 046e D154     		strb	r1, [r2, r3]
2693:..\src/interruptions.c ****                 }
2694:..\src/interruptions.c ****                 break;
 9633              		.loc 1 2694 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 221


 9634 0470 63E0     		b	.L672
 9635              	.L647:
2695:..\src/interruptions.c ****             case STATE_ACTIVE:
2696:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9636              		.loc 1 2696 0
 9637 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9638 0474 334A     		ldr	r2, .L678+4
 9639 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9640 047a 394B     		ldr	r3, .L678+32
 9641 047c 1B68     		ldr	r3, [r3]
 9642 047e 0A3B     		subs	r3, r3, #10
 9643 0480 9A42     		cmp	r2, r3
 9644 0482 77DA     		bge	.L673
2697:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9645              		.loc 1 2697 0
 9646 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9647 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9648 048a 0346     		mov	r3, r0
 9649 048c 1A46     		mov	r2, r3
 9650 048e 364B     		ldr	r3, .L678+40
 9651 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2698:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9652              		.loc 1 2698 0
 9653 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9654 0496 334A     		ldr	r2, .L678+36
 9655 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9656 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9657 049e 3249     		ldr	r1, .L678+40
 9658 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9659 04a4 9A42     		cmp	r2, r3
 9660 04a6 0AD2     		bcs	.L652
2699:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9661              		.loc 1 2699 0
 9662 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9663 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9664 04ac 2D49     		ldr	r1, .L678+36
 9665 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9666 04b2 03F5BB53 		add	r3, r3, #5984
 9667 04b6 1033     		adds	r3, r3, #16
 9668 04b8 2A49     		ldr	r1, .L678+36
 9669 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9670              	.L652:
2700:..\src/interruptions.c ****                     }
2701:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9671              		.loc 1 2701 0
 9672 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9673 04c0 284A     		ldr	r2, .L678+36
 9674 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9675 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9676 04c8 2749     		ldr	r1, .L678+40
 9677 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9678 04ce D31A     		subs	r3, r2, r3
 9679 04d0 1846     		mov	r0, r3
 9680 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9681 04d6 0346     		mov	r3, r0
 9682 04d8 1846     		mov	r0, r3
 9683 04da FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 222


 9684 04de 4FF00002 		mov	r2, #0
 9685 04e2 224B     		ldr	r3, .L678+44
 9686 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9687 04e8 0346     		mov	r3, r0
 9688 04ea 0C46     		mov	r4, r1
 9689 04ec 1846     		mov	r0, r3
 9690 04ee 2146     		mov	r1, r4
 9691 04f0 4FF00002 		mov	r2, #0
 9692 04f4 1E4B     		ldr	r3, .L678+48
 9693 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 9694 04fa 0346     		mov	r3, r0
 9695 04fc 002B     		cmp	r3, #0
 9696 04fe 04D0     		beq	.L665
2702:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9697              		.loc 1 2702 0
 9698 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9699 0502 164A     		ldr	r2, .L678+28
 9700 0504 0221     		movs	r1, #2
 9701 0506 D154     		strb	r1, [r2, r3]
2703:..\src/interruptions.c ****                     }
2704:..\src/interruptions.c ****                     else {
2705:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2706:..\src/interruptions.c ****                     }
2707:..\src/interruptions.c ****                 }
2708:..\src/interruptions.c ****                 break;
 9702              		.loc 1 2708 0
 9703 0508 34E0     		b	.L673
 9704              	.L665:
2705:..\src/interruptions.c ****                     }
 9705              		.loc 1 2705 0
 9706 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9707 050c 134A     		ldr	r2, .L678+28
 9708 050e 0021     		movs	r1, #0
 9709 0510 D154     		strb	r1, [r2, r3]
 9710              		.loc 1 2708 0
 9711 0512 2FE0     		b	.L673
 9712              	.L648:
2709:..\src/interruptions.c ****             case COUNTER_INC:
2710:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9713              		.loc 1 2710 0
 9714 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9715 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9716 0518 0B4A     		ldr	r2, .L678+8
 9717 051a 1833     		adds	r3, r3, #24
 9718 051c 9B00     		lsls	r3, r3, #2
 9719 051e 1344     		add	r3, r3, r2
 9720 0520 5B68     		ldr	r3, [r3, #4]
 9721 0522 5A1C     		adds	r2, r3, #1
 9722 0524 0848     		ldr	r0, .L678+8
 9723 0526 01F11803 		add	r3, r1, #24
 9724 052a 9B00     		lsls	r3, r3, #2
 9725 052c 0344     		add	r3, r3, r0
 9726 052e 5A60     		str	r2, [r3, #4]
2711:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9727              		.loc 1 2711 0
 9728 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9729 0532 0A4A     		ldr	r2, .L678+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 223


 9730 0534 0021     		movs	r1, #0
 9731 0536 D154     		strb	r1, [r2, r3]
2712:..\src/interruptions.c ****                 break;
 9732              		.loc 1 2712 0
 9733 0538 1DE0     		b	.L646
 9734              	.L672:
2694:..\src/interruptions.c ****             case STATE_ACTIVE:
 9735              		.loc 1 2694 0
 9736 053a 00BF     		nop
 9737 053c 1BE0     		b	.L646
 9738              	.L679:
 9739 053e 00BF     		.align	2
 9740              	.L678:
 9741 0540 98010000 		.word	emg_cycle_status.10504
 9742 0544 00000000 		.word	g_adc_meas
 9743 0548 00000000 		.word	g_mem
 9744 054c 00000000 		.word	emg_1_status
 9745 0550 00000000 		.word	emg_2_status
 9746 0554 9C010000 		.word	motion_status.10505
 9747 0558 A0010000 		.word	start_emg_pos.10525
 9748 055c A8010000 		.word	emg_excess_status.10506
 9749 0560 14000000 		.word	exc_act_thr.10509
 9750 0564 AC010000 		.word	timer_exc_s.10523
 9751 0568 B4010000 		.word	timer_exc_e.10524
 9752 056c 00004940 		.word	1078525952
 9753 0570 00001040 		.word	1074790400
 9754              	.L673:
2708:..\src/interruptions.c ****             case COUNTER_INC:
 9755              		.loc 1 2708 0
 9756 0574 00BF     		nop
 9757              	.L646:
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9758              		.loc 1 2687 0 discriminator 2
 9759 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9760 0578 0133     		adds	r3, r3, #1
 9761 057a FB75     		strb	r3, [r7, #23]
 9762              	.L645:
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9763              		.loc 1 2687 0 is_stmt 0 discriminator 1
 9764 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9765 057e 012B     		cmp	r3, #1
 9766 0580 08D8     		bhi	.L655
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9767              		.loc 1 2687 0 discriminator 3
 9768 0582 2D4B     		ldr	r3, .L680
 9769 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9770 0586 002B     		cmp	r3, #0
 9771 0588 04D1     		bne	.L655
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9772              		.loc 1 2687 0 discriminator 4
 9773 058a 2C4B     		ldr	r3, .L680+4
 9774 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9775 058e 002B     		cmp	r3, #0
 9776 0590 3FF450AF 		beq	.L656
 9777              	.L655:
2713:..\src/interruptions.c ****         }
2714:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 224


2715:..\src/interruptions.c ****     
2716:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2717:..\src/interruptions.c ****     switch (rest_cycle_status){
 9778              		.loc 1 2717 0 is_stmt 1
 9779 0594 2A4B     		ldr	r3, .L680+8
 9780 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9781 0598 012B     		cmp	r3, #1
 9782 059a 11D0     		beq	.L658
 9783 059c 022B     		cmp	r3, #2
 9784 059e 2AD0     		beq	.L659
 9785 05a0 002B     		cmp	r3, #0
 9786 05a2 42D1     		bne	.L657
2718:..\src/interruptions.c ****         case STATE_INACTIVE:
2719:..\src/interruptions.c ****             if (rest_enabled){
 9787              		.loc 1 2719 0
 9788 05a4 274B     		ldr	r3, .L680+12
 9789 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9790 05a8 002B     		cmp	r3, #0
 9791 05aa 3BD0     		beq	.L674
2720:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9792              		.loc 1 2720 0
 9793 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9794 05b0 0346     		mov	r3, r0
 9795 05b2 1A46     		mov	r2, r3
 9796 05b4 244B     		ldr	r3, .L680+16
 9797 05b6 1A60     		str	r2, [r3]
2721:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9798              		.loc 1 2721 0
 9799 05b8 214B     		ldr	r3, .L680+8
 9800 05ba 0122     		movs	r2, #1
 9801 05bc 1A70     		strb	r2, [r3]
2722:..\src/interruptions.c ****             }
2723:..\src/interruptions.c ****             break;
 9802              		.loc 1 2723 0
 9803 05be 31E0     		b	.L674
 9804              	.L658:
2724:..\src/interruptions.c ****         case STATE_ACTIVE:
2725:..\src/interruptions.c ****             if (!rest_enabled){
 9805              		.loc 1 2725 0
 9806 05c0 204B     		ldr	r3, .L680+12
 9807 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9808 05c4 002B     		cmp	r3, #0
 9809 05c6 2FD1     		bne	.L675
2726:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9810              		.loc 1 2726 0
 9811 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9812 05cc 0346     		mov	r3, r0
 9813 05ce 1A46     		mov	r2, r3
 9814 05d0 1E4B     		ldr	r3, .L680+20
 9815 05d2 1A60     		str	r2, [r3]
2727:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9816              		.loc 1 2727 0
 9817 05d4 1C4B     		ldr	r3, .L680+16
 9818 05d6 1A68     		ldr	r2, [r3]
 9819 05d8 1C4B     		ldr	r3, .L680+20
 9820 05da 1B68     		ldr	r3, [r3]
 9821 05dc 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 225


 9822 05de 06D2     		bcs	.L663
2728:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9823              		.loc 1 2728 0
 9824 05e0 194B     		ldr	r3, .L680+16
 9825 05e2 1B68     		ldr	r3, [r3]
 9826 05e4 03F5BB53 		add	r3, r3, #5984
 9827 05e8 1033     		adds	r3, r3, #16
 9828 05ea 174A     		ldr	r2, .L680+16
 9829 05ec 1360     		str	r3, [r2]
 9830              	.L663:
2729:..\src/interruptions.c ****                 }
2730:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9831              		.loc 1 2730 0
 9832 05ee 144B     		ldr	r3, .L680+8
 9833 05f0 0222     		movs	r2, #2
 9834 05f2 1A70     		strb	r2, [r3]
2731:..\src/interruptions.c ****             }
2732:..\src/interruptions.c ****             break;
 9835              		.loc 1 2732 0
 9836 05f4 18E0     		b	.L675
 9837              	.L659:
2733:..\src/interruptions.c ****         case COUNTER_INC: 
2734:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9838              		.loc 1 2734 0
 9839 05f6 164B     		ldr	r3, .L680+24
 9840 05f8 DA6D     		ldr	r2, [r3, #92]
 9841 05fa 134B     		ldr	r3, .L680+16
 9842 05fc 1968     		ldr	r1, [r3]
 9843 05fe 134B     		ldr	r3, .L680+20
 9844 0600 1B68     		ldr	r3, [r3]
 9845 0602 CB1A     		subs	r3, r1, r3
 9846 0604 1349     		ldr	r1, .L680+28
 9847 0606 A1FB0313 		umull	r1, r3, r1, r3
 9848 060a 1B09     		lsrs	r3, r3, #4
 9849 060c 1344     		add	r3, r3, r2
 9850 060e 104A     		ldr	r2, .L680+24
 9851 0610 D365     		str	r3, [r2, #92]
2735:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9852              		.loc 1 2735 0
 9853 0612 0F4B     		ldr	r3, .L680+24
 9854 0614 1B6D     		ldr	r3, [r3, #80]
 9855 0616 0133     		adds	r3, r3, #1
 9856 0618 0D4A     		ldr	r2, .L680+24
 9857 061a 1365     		str	r3, [r2, #80]
2736:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9858              		.loc 1 2736 0
 9859 061c 084B     		ldr	r3, .L680+8
 9860 061e 0022     		movs	r2, #0
 9861 0620 1A70     		strb	r2, [r3]
2737:..\src/interruptions.c ****             break;
 9862              		.loc 1 2737 0
 9863 0622 02E0     		b	.L657
 9864              	.L674:
2723:..\src/interruptions.c ****         case STATE_ACTIVE:
 9865              		.loc 1 2723 0
 9866 0624 00BF     		nop
 9867 0626 00E0     		b	.L657
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 226


 9868              	.L675:
2732:..\src/interruptions.c ****         case COUNTER_INC: 
 9869              		.loc 1 2732 0
 9870 0628 00BF     		nop
 9871              	.L657:
2738:..\src/interruptions.c ****     }
2739:..\src/interruptions.c ****           
2740:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2741:..\src/interruptions.c ****     save_cycles_eeprom();
 9872              		.loc 1 2741 0
 9873 062a FFF7FEFF 		bl	save_cycles_eeprom
2742:..\src/interruptions.c ****     
2743:..\src/interruptions.c **** }
 9874              		.loc 1 2743 0
 9875 062e 00BF     		nop
 9876 0630 1C37     		adds	r7, r7, #28
 9877              		.cfi_def_cfa_offset 12
 9878 0632 BD46     		mov	sp, r7
 9879              		.cfi_def_cfa_register 13
 9880              		@ sp needed
 9881 0634 90BD     		pop	{r4, r7, pc}
 9882              	.L681:
 9883 0636 00BF     		.align	2
 9884              	.L680:
 9885 0638 00000000 		.word	emg_1_status
 9886 063c 00000000 		.word	emg_2_status
 9887 0640 BC010000 		.word	rest_cycle_status.10507
 9888 0644 00000000 		.word	rest_enabled
 9889 0648 C0010000 		.word	timer_value_s.10521
 9890 064c C4010000 		.word	timer_value_e.10522
 9891 0650 00000000 		.word	g_mem
 9892 0654 1F85EB51 		.word	1374389535
 9893              		.cfi_endproc
 9894              	.LFE78:
 9895              		.size	cycles_counter_update, .-cycles_counter_update
 9896              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9897              		.align	2
 9898              		.global	save_cycles_eeprom
 9899              		.thumb
 9900              		.thumb_func
 9901              		.type	save_cycles_eeprom, %function
 9902              	save_cycles_eeprom:
 9903              	.LFB79:
2744:..\src/interruptions.c **** 
2745:..\src/interruptions.c **** //==============================================================================
2746:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2747:..\src/interruptions.c **** //==============================================================================
2748:..\src/interruptions.c **** 
2749:..\src/interruptions.c **** void save_cycles_eeprom() {
 9904              		.loc 1 2749 0
 9905              		.cfi_startproc
 9906              		@ args = 0, pretend = 0, frame = 24
 9907              		@ frame_needed = 1, uses_anonymous_args = 0
 9908 0000 80B5     		push	{r7, lr}
 9909              		.cfi_def_cfa_offset 8
 9910              		.cfi_offset 7, -8
 9911              		.cfi_offset 14, -4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 227


 9912 0002 86B0     		sub	sp, sp, #24
 9913              		.cfi_def_cfa_offset 32
 9914 0004 00AF     		add	r7, sp, #0
 9915              		.cfi_def_cfa_register 7
2750:..\src/interruptions.c **** 
2751:..\src/interruptions.c ****     cystatus status;
2752:..\src/interruptions.c ****     static uint8 row_number;
2753:..\src/interruptions.c ****     uint8 row_start = 1;
 9916              		.loc 1 2753 0
 9917 0006 0123     		movs	r3, #1
 9918 0008 FB75     		strb	r3, [r7, #23]
2754:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 9919              		.loc 1 2754 0
 9920 000a 394B     		ldr	r3, .L698
 9921 000c 3B61     		str	r3, [r7, #16]
2755:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 9922              		.loc 1 2755 0
 9923 000e 394B     		ldr	r3, .L698+4
 9924 0010 FB60     		str	r3, [r7, #12]
2756:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9925              		.loc 1 2756 0
 9926 0012 FB7D     		ldrb	r3, [r7, #23]
 9927 0014 0633     		adds	r3, r3, #6
 9928 0016 FB72     		strb	r3, [r7, #11]
2757:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2758:..\src/interruptions.c **** 
2759:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2760:..\src/interruptions.c ****     switch(cycles_status) {
 9929              		.loc 1 2760 0
 9930 0018 374B     		ldr	r3, .L698+8
 9931 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9932 001c 042B     		cmp	r3, #4
 9933 001e 63D8     		bhi	.L694
 9934 0020 01A2     		adr	r2, .L685
 9935 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9936 0026 00BF     		.p2align 2
 9937              	.L685:
 9938 0028 3D000000 		.word	.L684+1
 9939 002c 5B000000 		.word	.L686+1
 9940 0030 8B000000 		.word	.L687+1
 9941 0034 C7000000 		.word	.L688+1
 9942 0038 DF000000 		.word	.L695+1
 9943              		.p2align 1
 9944              	.L684:
2761:..\src/interruptions.c ****         case PREPARE_DATA:
2762:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2763:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9945              		.loc 1 2763 0
 9946 003c 7022     		movs	r2, #112
 9947 003e 3969     		ldr	r1, [r7, #16]
 9948 0040 F868     		ldr	r0, [r7, #12]
 9949 0042 FFF7FEFF 		bl	memcpy
2764:..\src/interruptions.c ****             m_addr = addr_start;
 9950              		.loc 1 2764 0
 9951 0046 2D4A     		ldr	r2, .L698+12
 9952 0048 3B69     		ldr	r3, [r7, #16]
 9953 004a 1360     		str	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 228


2765:..\src/interruptions.c ****             row_number = row_start;
 9954              		.loc 1 2765 0
 9955 004c 2C4A     		ldr	r2, .L698+16
 9956 004e FB7D     		ldrb	r3, [r7, #23]
 9957 0050 1370     		strb	r3, [r2]
2766:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9958              		.loc 1 2766 0
 9959 0052 294B     		ldr	r3, .L698+8
 9960 0054 0122     		movs	r2, #1
 9961 0056 1A70     		strb	r2, [r3]
2767:..\src/interruptions.c ****             break;
 9962              		.loc 1 2767 0
 9963 0058 46E0     		b	.L683
 9964              	.L686:
2768:..\src/interruptions.c ****             
2769:..\src/interruptions.c ****         case WRITE_CYCLES:
2770:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9965              		.loc 1 2770 0
 9966 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2771:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9967              		.loc 1 2771 0
 9968 005e 274B     		ldr	r3, .L698+12
 9969 0060 1A68     		ldr	r2, [r3]
 9970 0062 274B     		ldr	r3, .L698+16
 9971 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9972 0066 1946     		mov	r1, r3
 9973 0068 1046     		mov	r0, r2
 9974 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9975 006e 7860     		str	r0, [r7, #4]
2772:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9976              		.loc 1 2772 0
 9977 0070 7B68     		ldr	r3, [r7, #4]
 9978 0072 072B     		cmp	r3, #7
 9979 0074 02D0     		beq	.L690
 9980              		.loc 1 2772 0 is_stmt 0 discriminator 1
 9981 0076 7B68     		ldr	r3, [r7, #4]
 9982 0078 002B     		cmp	r3, #0
 9983 007a 32D1     		bne	.L696
 9984              	.L690:
2773:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9985              		.loc 1 2773 0 is_stmt 1
 9986 007c 1E4B     		ldr	r3, .L698+8
 9987 007e 0222     		movs	r2, #2
 9988 0080 1A70     		strb	r2, [r3]
2774:..\src/interruptions.c ****                 can_write = FALSE;
 9989              		.loc 1 2774 0
 9990 0082 204B     		ldr	r3, .L698+20
 9991 0084 0022     		movs	r2, #0
 9992 0086 1A70     		strb	r2, [r3]
2775:..\src/interruptions.c ****             }
2776:..\src/interruptions.c ****             break;
 9993              		.loc 1 2776 0
 9994 0088 2BE0     		b	.L696
 9995              	.L687:
2777:..\src/interruptions.c ****             
2778:..\src/interruptions.c ****         case WAIT_QUERY:
2779:..\src/interruptions.c ****             status = EEPROM_Query();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 229


 9996              		.loc 1 2779 0
 9997 008a FFF7FEFF 		bl	EEPROM_Query
 9998 008e 7860     		str	r0, [r7, #4]
2780:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9999              		.loc 1 2780 0
 10000 0090 7B68     		ldr	r3, [r7, #4]
 10001 0092 002B     		cmp	r3, #0
 10002 0094 27D1     		bne	.L697
2781:..\src/interruptions.c ****                 if (row_number < row_end) {
 10003              		.loc 1 2781 0
 10004 0096 1A4B     		ldr	r3, .L698+16
 10005 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10006 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10007 009c 9A42     		cmp	r2, r3
 10008 009e 0ED9     		bls	.L693
2782:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10009              		.loc 1 2782 0
 10010 00a0 164B     		ldr	r3, .L698+12
 10011 00a2 1B68     		ldr	r3, [r3]
 10012 00a4 1033     		adds	r3, r3, #16
 10013 00a6 154A     		ldr	r2, .L698+12
 10014 00a8 1360     		str	r3, [r2]
2783:..\src/interruptions.c ****                     row_number = row_number + 1;
 10015              		.loc 1 2783 0
 10016 00aa 154B     		ldr	r3, .L698+16
 10017 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10018 00ae 0133     		adds	r3, r3, #1
 10019 00b0 DAB2     		uxtb	r2, r3
 10020 00b2 134B     		ldr	r3, .L698+16
 10021 00b4 1A70     		strb	r2, [r3]
2784:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10022              		.loc 1 2784 0
 10023 00b6 104B     		ldr	r3, .L698+8
 10024 00b8 0122     		movs	r2, #1
 10025 00ba 1A70     		strb	r2, [r3]
2785:..\src/interruptions.c ****                 }
2786:..\src/interruptions.c ****                 else {
2787:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2788:..\src/interruptions.c ****                 }
2789:..\src/interruptions.c ****             }
2790:..\src/interruptions.c ****             break;
 10026              		.loc 1 2790 0
 10027 00bc 13E0     		b	.L697
 10028              	.L693:
2787:..\src/interruptions.c ****                 }
 10029              		.loc 1 2787 0
 10030 00be 0E4B     		ldr	r3, .L698+8
 10031 00c0 0322     		movs	r2, #3
 10032 00c2 1A70     		strb	r2, [r3]
 10033              		.loc 1 2790 0
 10034 00c4 0FE0     		b	.L697
 10035              	.L688:
2791:..\src/interruptions.c ****            
2792:..\src/interruptions.c ****         case WRITE_END:
2793:..\src/interruptions.c ****             can_write = TRUE;            
 10036              		.loc 1 2793 0
 10037 00c6 0F4B     		ldr	r3, .L698+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 230


 10038 00c8 0122     		movs	r2, #1
 10039 00ca 1A70     		strb	r2, [r3]
2794:..\src/interruptions.c ****             cycles_status = NONE;
 10040              		.loc 1 2794 0
 10041 00cc 0A4B     		ldr	r3, .L698+8
 10042 00ce 0422     		movs	r2, #4
 10043 00d0 1A70     		strb	r2, [r3]
2795:..\src/interruptions.c ****             
2796:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2797:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10044              		.loc 1 2797 0
 10045 00d2 7022     		movs	r2, #112
 10046 00d4 F968     		ldr	r1, [r7, #12]
 10047 00d6 3869     		ldr	r0, [r7, #16]
 10048 00d8 FFF7FEFF 		bl	memcpy
2798:..\src/interruptions.c ****             break;
 10049              		.loc 1 2798 0
 10050 00dc 04E0     		b	.L683
 10051              	.L695:
2799:..\src/interruptions.c ****             
2800:..\src/interruptions.c ****         case NONE:
2801:..\src/interruptions.c ****             break;
 10052              		.loc 1 2801 0
 10053 00de 00BF     		nop
 10054 00e0 02E0     		b	.L694
 10055              	.L696:
2776:..\src/interruptions.c ****             
 10056              		.loc 1 2776 0
 10057 00e2 00BF     		nop
 10058 00e4 00E0     		b	.L694
 10059              	.L697:
2790:..\src/interruptions.c ****            
 10060              		.loc 1 2790 0
 10061 00e6 00BF     		nop
 10062              	.L683:
 10063              	.L694:
2802:..\src/interruptions.c ****     }
2803:..\src/interruptions.c ****     
2804:..\src/interruptions.c **** }
 10064              		.loc 1 2804 0
 10065 00e8 00BF     		nop
 10066 00ea 1837     		adds	r7, r7, #24
 10067              		.cfi_def_cfa_offset 8
 10068 00ec BD46     		mov	sp, r7
 10069              		.cfi_def_cfa_register 13
 10070              		@ sp needed
 10071 00ee 80BD     		pop	{r7, pc}
 10072              	.L699:
 10073              		.align	2
 10074              	.L698:
 10075 00f0 10000000 		.word	g_mem+16
 10076 00f4 10000000 		.word	c_mem+16
 10077 00f8 00000000 		.word	cycles_status
 10078 00fc C8010000 		.word	m_addr.10566
 10079 0100 CC010000 		.word	row_number.10561
 10080 0104 00000000 		.word	can_write
 10081              		.cfi_endproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 231


 10082              	.LFE79:
 10083              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10084              		.bss
 10085              	state.10225:
 10086 0000 00       		.space	1
 10087 0001 000000   		.align	2
 10088              	rx_queue.10229:
 10089 0004 000000   		.space	3
 10090              	data_packet_length.10227:
 10091 0007 00       		.space	1
 10092              	data_packet_index.10226:
 10093 0008 00       		.space	1
 10094 0009 000000   		.align	2
 10095              	data_packet_buffer.10228:
 10096 000c 00000000 		.space	128
 10096      00000000 
 10096      00000000 
 10096      00000000 
 10096      00000000 
 10097              		.data
 10098              		.align	1
 10099              		.type	counter_calibration.10245, %object
 10100              		.size	counter_calibration.10245, 2
 10101              	counter_calibration.10245:
 10102 0000 0100     		.short	1
 10103              		.align	1
 10104              		.type	counter_tension_func.10246, %object
 10105              		.size	counter_tension_func.10246, 2
 10106              	counter_tension_func.10246:
 10107 0002 0100     		.short	1
 10108              		.bss
 10109              		.align	2
 10110              	current_emg.10261:
 10111 008c 0000     		.space	2
 10112              	fsm_state.10298:
 10113 008e 00       		.space	1
 10114 008f 00       		.align	2
 10115              	pos_error_sum.10325:
 10116 0090 00000000 		.space	4
 10117              		.align	2
 10118              	prev_pos_err.10327:
 10119 0094 00000000 		.space	4
 10120              	motor_dir.10330:
 10121 0098 00       		.space	1
 10122 0099 000000   		.align	2
 10123              	curr_error_sum.10326:
 10124 009c 00000000 		.space	4
 10125              		.align	2
 10126              	prev_curr_err.10328:
 10127 00a0 00000000 		.space	4
 10128              		.align	2
 10129              	prev_pwm.10329:
 10130 00a4 00000000 		.space	4
 10131              		.align	2
 10132              	position_counter.10331:
 10133 00a8 00000000 		.space	4
 10134              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 232


 10135              	pos_error_sum.10358:
 10136 00ac 00000000 		.space	8
 10136      00000000 
 10137              		.align	2
 10138              	prev_pos_err.10360:
 10139 00b4 00000000 		.space	8
 10139      00000000 
 10140              		.align	2
 10141              	motor_dir.10363:
 10142 00bc 0000     		.space	2
 10143 00be 0000     		.align	2
 10144              	curr_error_sum.10359:
 10145 00c0 00000000 		.space	8
 10145      00000000 
 10146              		.align	2
 10147              	prev_curr_err.10361:
 10148 00c8 00000000 		.space	8
 10148      00000000 
 10149              		.align	2
 10150              	prev_pwm.10362:
 10151 00d0 00000000 		.space	8
 10151      00000000 
 10152              		.align	2
 10153              	position_counter.10364:
 10154 00d8 00000000 		.space	8
 10154      00000000 
 10155              		.align	2
 10156              	motor_dir.10379:
 10157 00e0 0000     		.space	2
 10158 00e2 0000     		.align	2
 10159              	last_value_encoder.10396:
 10160 00e4 00000000 		.space	24
 10160      00000000 
 10160      00000000 
 10160      00000000 
 10160      00000000 
 10161              		.align	2
 10162              	comp_value_encoder.10397:
 10163 00fc 00000000 		.space	24
 10163      00000000 
 10163      00000000 
 10163      00000000 
 10163      00000000 
 10164              		.data
 10165              		.align	2
 10166              		.type	only_first_time.10399, %object
 10167              		.size	only_first_time.10399, 2
 10168              	only_first_time.10399:
 10169 0004 01       		.byte	1
 10170 0005 01       		.byte	1
 10171              		.bss
 10172              		.align	2
 10173              	error.10398:
 10174 0114 00000000 		.space	6
 10174      0000
 10175 011a 0000     		.align	2
 10176              	v_value.10403:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 233


 10177 011c 00000000 		.space	24
 10177      00000000 
 10177      00000000 
 10177      00000000 
 10177      00000000 
 10178              		.align	2
 10179              	vv_value.10404:
 10180 0134 00000000 		.space	24
 10180      00000000 
 10180      00000000 
 10180      00000000 
 10180      00000000 
 10181              		.align	2
 10182              	vvv_value.10405:
 10183 014c 00000000 		.space	24
 10183      00000000 
 10183      00000000 
 10183      00000000 
 10183      00000000 
 10184              		.align	2
 10185              	one_time_execute.10401:
 10186 0164 0000     		.space	2
 10187 0166 0000     		.align	2
 10188              	safe_startup_motor_activation.10400:
 10189 0168 0000     		.space	2
 10190 016a 0000     		.align	2
 10191              	count_startup_motor.10402:
 10192 016c 00000000 		.space	8
 10192      00000000 
 10193              		.data
 10194 0006 0000     		.align	2
 10195              		.type	detect_power_cycle_prev.10429, %object
 10196              		.size	detect_power_cycle_prev.10429, 4
 10197              	detect_power_cycle_prev.10429:
 10198 0008 FDFFFFFF 		.word	-3
 10199              		.type	first_tension_valid.10428, %object
 10200              		.size	first_tension_valid.10428, 1
 10201              	first_tension_valid.10428:
 10202 000c 01       		.byte	1
 10203              		.bss
 10204              		.align	1
 10205              	count.10430:
 10206 0174 0000     		.space	2
 10207              	idx.10432:
 10208 0176 00       		.space	1
 10209 0177 00       		.align	2
 10210              	v_count.10431:
 10211 0178 00000000 		.space	4
 10212              		.align	1
 10213              	emg_counter_1.10422:
 10214 017c 0000     		.space	2
 10215              		.align	1
 10216              	emg_counter_2.10423:
 10217 017e 0000     		.space	2
 10218              		.align	2
 10219              	UD_mean_value.10426:
 10220 0180 00000000 		.space	4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 234


 10221              		.align	1
 10222              	UD_counter.10424:
 10223 0184 0000     		.space	2
 10224 0186 0000     		.align	2
 10225              	LR_mean_value.10427:
 10226 0188 00000000 		.space	4
 10227              		.align	1
 10228              	LR_counter.10425:
 10229 018c 0000     		.space	2
 10230              	pos_cycle_status.10503:
 10231 018e 00       		.space	1
 10232 018f 00       		.align	2
 10233              	thr_pos.10510:
 10234 0190 00000000 		.space	4
 10235              		.align	2
 10236              	max_pos.10511:
 10237 0194 00000000 		.space	4
 10238              		.data
 10239 000d 000000   		.align	2
 10240              		.type	bin_threshold.10508, %object
 10241              		.size	bin_threshold.10508, 4
 10242              	bin_threshold.10508:
 10243 0010 FA000000 		.word	250
 10244              		.bss
 10245              		.align	2
 10246              	emg_cycle_status.10504:
 10247 0198 0000     		.space	2
 10248 019a 0000     		.align	2
 10249              	motion_status.10505:
 10250 019c 0000     		.space	2
 10251 019e 0000     		.align	2
 10252              	start_emg_pos.10525:
 10253 01a0 00000000 		.space	8
 10253      00000000 
 10254              		.align	2
 10255              	emg_excess_status.10506:
 10256 01a8 0000     		.space	2
 10257              		.data
 10258              		.align	2
 10259              		.type	exc_act_thr.10509, %object
 10260              		.size	exc_act_thr.10509, 4
 10261              	exc_act_thr.10509:
 10262 0014 D4030000 		.word	980
 10263              		.bss
 10264 01aa 0000     		.align	2
 10265              	timer_exc_s.10523:
 10266 01ac 00000000 		.space	8
 10266      00000000 
 10267              		.align	2
 10268              	timer_exc_e.10524:
 10269 01b4 00000000 		.space	8
 10269      00000000 
 10270              	rest_cycle_status.10507:
 10271 01bc 00       		.space	1
 10272 01bd 000000   		.align	2
 10273              	timer_value_s.10521:
 10274 01c0 00000000 		.space	4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 235


 10275              		.align	2
 10276              	timer_value_e.10522:
 10277 01c4 00000000 		.space	4
 10278              		.align	2
 10279              	m_addr.10566:
 10280 01c8 00000000 		.space	4
 10281              	row_number.10561:
 10282 01cc 00       		.space	1
 10283              		.text
 10284              	.Letext0:
 10285              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10286              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10287              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10288              		.file 5 "..\\src\\commands.h"
 10289              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10290              		.file 7 "..\\src\\globals.h"
 10291              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10292              		.section	.debug_info,"",%progbits
 10293              	.Ldebug_info0:
 10294 0000 9B1C0000 		.4byte	0x1c9b
 10295 0004 0400     		.2byte	0x4
 10296 0006 00000000 		.4byte	.Ldebug_abbrev0
 10297 000a 04       		.byte	0x4
 10298 000b 01       		.uleb128 0x1
 10299 000c 25090000 		.4byte	.LASF362
 10300 0010 0C       		.byte	0xc
 10301 0011 17120000 		.4byte	.LASF363
 10302 0015 9A100000 		.4byte	.LASF364
 10303 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10304 001d 00000000 		.4byte	0
 10305 0021 00000000 		.4byte	.Ldebug_line0
 10306 0025 02       		.uleb128 0x2
 10307 0026 01       		.byte	0x1
 10308 0027 06       		.byte	0x6
 10309 0028 F9030000 		.4byte	.LASF0
 10310 002c 02       		.uleb128 0x2
 10311 002d 01       		.byte	0x1
 10312 002e 08       		.byte	0x8
 10313 002f 89040000 		.4byte	.LASF1
 10314 0033 02       		.uleb128 0x2
 10315 0034 02       		.byte	0x2
 10316 0035 05       		.byte	0x5
 10317 0036 780F0000 		.4byte	.LASF2
 10318 003a 02       		.uleb128 0x2
 10319 003b 02       		.byte	0x2
 10320 003c 07       		.byte	0x7
 10321 003d BB110000 		.4byte	.LASF3
 10322 0041 03       		.uleb128 0x3
 10323 0042 AD120000 		.4byte	.LASF9
 10324 0046 02       		.byte	0x2
 10325 0047 3F       		.byte	0x3f
 10326 0048 4C000000 		.4byte	0x4c
 10327 004c 02       		.uleb128 0x2
 10328 004d 04       		.byte	0x4
 10329 004e 05       		.byte	0x5
 10330 004f D6020000 		.4byte	.LASF4
 10331 0053 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 236


 10332 0054 04       		.byte	0x4
 10333 0055 07       		.byte	0x7
 10334 0056 09080000 		.4byte	.LASF5
 10335 005a 02       		.uleb128 0x2
 10336 005b 08       		.byte	0x8
 10337 005c 05       		.byte	0x5
 10338 005d EB090000 		.4byte	.LASF6
 10339 0061 02       		.uleb128 0x2
 10340 0062 08       		.byte	0x8
 10341 0063 07       		.byte	0x7
 10342 0064 EB0C0000 		.4byte	.LASF7
 10343 0068 04       		.uleb128 0x4
 10344 0069 04       		.byte	0x4
 10345 006a 05       		.byte	0x5
 10346 006b 696E7400 		.ascii	"int\000"
 10347 006f 02       		.uleb128 0x2
 10348 0070 04       		.byte	0x4
 10349 0071 07       		.byte	0x7
 10350 0072 130B0000 		.4byte	.LASF8
 10351 0076 03       		.uleb128 0x3
 10352 0077 8B000000 		.4byte	.LASF10
 10353 007b 03       		.byte	0x3
 10354 007c 2C       		.byte	0x2c
 10355 007d 41000000 		.4byte	0x41
 10356 0081 05       		.uleb128 0x5
 10357 0082 520F0000 		.4byte	.LASF11
 10358 0086 04       		.byte	0x4
 10359 0087 E401     		.2byte	0x1e4
 10360 0089 2C000000 		.4byte	0x2c
 10361 008d 05       		.uleb128 0x5
 10362 008e 0A130000 		.4byte	.LASF12
 10363 0092 04       		.byte	0x4
 10364 0093 E501     		.2byte	0x1e5
 10365 0095 3A000000 		.4byte	0x3a
 10366 0099 05       		.uleb128 0x5
 10367 009a BF000000 		.4byte	.LASF13
 10368 009e 04       		.byte	0x4
 10369 009f E601     		.2byte	0x1e6
 10370 00a1 53000000 		.4byte	0x53
 10371 00a5 05       		.uleb128 0x5
 10372 00a6 A3010000 		.4byte	.LASF14
 10373 00aa 04       		.byte	0x4
 10374 00ab E701     		.2byte	0x1e7
 10375 00ad 25000000 		.4byte	0x25
 10376 00b1 05       		.uleb128 0x5
 10377 00b2 37100000 		.4byte	.LASF15
 10378 00b6 04       		.byte	0x4
 10379 00b7 E801     		.2byte	0x1e8
 10380 00b9 33000000 		.4byte	0x33
 10381 00bd 05       		.uleb128 0x5
 10382 00be 3A120000 		.4byte	.LASF16
 10383 00c2 04       		.byte	0x4
 10384 00c3 E901     		.2byte	0x1e9
 10385 00c5 4C000000 		.4byte	0x4c
 10386 00c9 05       		.uleb128 0x5
 10387 00ca A1030000 		.4byte	.LASF17
 10388 00ce 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 237


 10389 00cf EA01     		.2byte	0x1ea
 10390 00d1 D5000000 		.4byte	0xd5
 10391 00d5 02       		.uleb128 0x2
 10392 00d6 04       		.byte	0x4
 10393 00d7 04       		.byte	0x4
 10394 00d8 D30A0000 		.4byte	.LASF18
 10395 00dc 02       		.uleb128 0x2
 10396 00dd 08       		.byte	0x8
 10397 00de 04       		.byte	0x4
 10398 00df 2E0A0000 		.4byte	.LASF19
 10399 00e3 02       		.uleb128 0x2
 10400 00e4 01       		.byte	0x1
 10401 00e5 08       		.byte	0x8
 10402 00e6 24050000 		.4byte	.LASF20
 10403 00ea 05       		.uleb128 0x5
 10404 00eb 4C0B0000 		.4byte	.LASF21
 10405 00ef 04       		.byte	0x4
 10406 00f0 8602     		.2byte	0x286
 10407 00f2 53000000 		.4byte	0x53
 10408 00f6 05       		.uleb128 0x5
 10409 00f7 B70D0000 		.4byte	.LASF22
 10410 00fb 04       		.byte	0x4
 10411 00fc 8E02     		.2byte	0x28e
 10412 00fe 02010000 		.4byte	0x102
 10413 0102 06       		.uleb128 0x6
 10414 0103 81000000 		.4byte	0x81
 10415 0107 02       		.uleb128 0x2
 10416 0108 08       		.byte	0x8
 10417 0109 04       		.byte	0x4
 10418 010a FE0B0000 		.4byte	.LASF23
 10419 010e 02       		.uleb128 0x2
 10420 010f 04       		.byte	0x4
 10421 0110 07       		.byte	0x7
 10422 0111 10000000 		.4byte	.LASF24
 10423 0115 07       		.uleb128 0x7
 10424 0116 E3000000 		.4byte	0xe3
 10425 011a 25010000 		.4byte	0x125
 10426 011e 08       		.uleb128 0x8
 10427 011f 0E010000 		.4byte	0x10e
 10428 0123 07       		.byte	0x7
 10429 0124 00       		.byte	0
 10430 0125 09       		.uleb128 0x9
 10431 0126 E7120000 		.4byte	.LASF33
 10432 012a 01       		.byte	0x1
 10433 012b 2C000000 		.4byte	0x2c
 10434 012f 05       		.byte	0x5
 10435 0130 94       		.byte	0x94
 10436 0131 66010000 		.4byte	0x166
 10437 0135 0A       		.uleb128 0xa
 10438 0136 7C070000 		.4byte	.LASF25
 10439 013a 00       		.byte	0
 10440 013b 0A       		.uleb128 0xa
 10441 013c 550B0000 		.4byte	.LASF26
 10442 0140 01       		.byte	0x1
 10443 0141 0A       		.uleb128 0xa
 10444 0142 2E020000 		.4byte	.LASF27
 10445 0146 02       		.byte	0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 238


 10446 0147 0A       		.uleb128 0xa
 10447 0148 71010000 		.4byte	.LASF28
 10448 014c 03       		.byte	0x3
 10449 014d 0A       		.uleb128 0xa
 10450 014e 2B010000 		.4byte	.LASF29
 10451 0152 04       		.byte	0x4
 10452 0153 0A       		.uleb128 0xa
 10453 0154 53000000 		.4byte	.LASF30
 10454 0158 05       		.byte	0x5
 10455 0159 0A       		.uleb128 0xa
 10456 015a 4B080000 		.4byte	.LASF31
 10457 015e 06       		.byte	0x6
 10458 015f 0A       		.uleb128 0xa
 10459 0160 CD0E0000 		.4byte	.LASF32
 10460 0164 07       		.byte	0x7
 10461 0165 00       		.byte	0
 10462 0166 09       		.uleb128 0x9
 10463 0167 F9090000 		.4byte	.LASF34
 10464 016b 01       		.byte	0x1
 10465 016c 2C000000 		.4byte	0x2c
 10466 0170 05       		.byte	0x5
 10467 0171 A8       		.byte	0xa8
 10468 0172 8F010000 		.4byte	0x18f
 10469 0176 0A       		.uleb128 0xa
 10470 0177 9F120000 		.4byte	.LASF35
 10471 017b 00       		.byte	0
 10472 017c 0A       		.uleb128 0xa
 10473 017d E6080000 		.4byte	.LASF36
 10474 0181 01       		.byte	0x1
 10475 0182 0A       		.uleb128 0xa
 10476 0183 EE0B0000 		.4byte	.LASF37
 10477 0187 02       		.byte	0x2
 10478 0188 0A       		.uleb128 0xa
 10479 0189 EC070000 		.4byte	.LASF38
 10480 018d 03       		.byte	0x3
 10481 018e 00       		.byte	0
 10482 018f 03       		.uleb128 0x3
 10483 0190 6A120000 		.4byte	.LASF39
 10484 0194 06       		.byte	0x6
 10485 0195 7E       		.byte	0x7e
 10486 0196 9A010000 		.4byte	0x19a
 10487 019a 0B       		.uleb128 0xb
 10488 019b 6A120000 		.4byte	.LASF39
 10489 019f 0C       		.uleb128 0xc
 10490 01a0 04       		.byte	0x4
 10491 01a1 8F010000 		.4byte	0x18f
 10492 01a5 0D       		.uleb128 0xd
 10493 01a6 B3090000 		.4byte	.LASF42
 10494 01aa 10       		.byte	0x10
 10495 01ab 07       		.byte	0x7
 10496 01ac F5       		.byte	0xf5
 10497 01ad E2010000 		.4byte	0x1e2
 10498 01b1 0E       		.uleb128 0xe
 10499 01b2 706F7300 		.ascii	"pos\000"
 10500 01b6 07       		.byte	0x7
 10501 01b7 F6       		.byte	0xf6
 10502 01b8 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 239


 10503 01bc 00       		.byte	0
 10504 01bd 0F       		.uleb128 0xf
 10505 01be CB080000 		.4byte	.LASF40
 10506 01c2 07       		.byte	0x7
 10507 01c3 F7       		.byte	0xf7
 10508 01c4 BD000000 		.4byte	0xbd
 10509 01c8 04       		.byte	0x4
 10510 01c9 0E       		.uleb128 0xe
 10511 01ca 70776D00 		.ascii	"pwm\000"
 10512 01ce 07       		.byte	0x7
 10513 01cf F8       		.byte	0xf8
 10514 01d0 BD000000 		.4byte	0xbd
 10515 01d4 08       		.byte	0x8
 10516 01d5 0F       		.uleb128 0xf
 10517 01d6 4E0D0000 		.4byte	.LASF41
 10518 01da 07       		.byte	0x7
 10519 01db F9       		.byte	0xf9
 10520 01dc 81000000 		.4byte	0x81
 10521 01e0 0C       		.byte	0xc
 10522 01e1 00       		.byte	0
 10523 01e2 10       		.uleb128 0x10
 10524 01e3 940E0000 		.4byte	.LASF43
 10525 01e7 34       		.byte	0x34
 10526 01e8 07       		.byte	0x7
 10527 01e9 0001     		.2byte	0x100
 10528 01eb 4B020000 		.4byte	0x24b
 10529 01ef 11       		.uleb128 0x11
 10530 01f0 706F7300 		.ascii	"pos\000"
 10531 01f4 07       		.byte	0x7
 10532 01f5 0101     		.2byte	0x101
 10533 01f7 4B020000 		.4byte	0x24b
 10534 01fb 00       		.byte	0
 10535 01fc 12       		.uleb128 0x12
 10536 01fd CB080000 		.4byte	.LASF40
 10537 0201 07       		.byte	0x7
 10538 0202 0201     		.2byte	0x102
 10539 0204 BD000000 		.4byte	0xbd
 10540 0208 0C       		.byte	0xc
 10541 0209 12       		.uleb128 0x12
 10542 020a 7A100000 		.4byte	.LASF44
 10543 020e 07       		.byte	0x7
 10544 020f 0301     		.2byte	0x103
 10545 0211 BD000000 		.4byte	0xbd
 10546 0215 10       		.byte	0x10
 10547 0216 12       		.uleb128 0x12
 10548 0217 41080000 		.4byte	.LASF45
 10549 021b 07       		.byte	0x7
 10550 021c 0401     		.2byte	0x104
 10551 021e BD000000 		.4byte	0xbd
 10552 0222 14       		.byte	0x14
 10553 0223 11       		.uleb128 0x11
 10554 0224 726F7400 		.ascii	"rot\000"
 10555 0228 07       		.byte	0x7
 10556 0229 0501     		.2byte	0x105
 10557 022b 5B020000 		.4byte	0x25b
 10558 022f 18       		.byte	0x18
 10559 0230 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 240


 10560 0231 76656C00 		.ascii	"vel\000"
 10561 0235 07       		.byte	0x7
 10562 0236 0601     		.2byte	0x106
 10563 0238 4B020000 		.4byte	0x24b
 10564 023c 1C       		.byte	0x1c
 10565 023d 11       		.uleb128 0x11
 10566 023e 61636300 		.ascii	"acc\000"
 10567 0242 07       		.byte	0x7
 10568 0243 0701     		.2byte	0x107
 10569 0245 4B020000 		.4byte	0x24b
 10570 0249 28       		.byte	0x28
 10571 024a 00       		.byte	0
 10572 024b 07       		.uleb128 0x7
 10573 024c BD000000 		.4byte	0xbd
 10574 0250 5B020000 		.4byte	0x25b
 10575 0254 08       		.uleb128 0x8
 10576 0255 0E010000 		.4byte	0x10e
 10577 0259 02       		.byte	0x2
 10578 025a 00       		.byte	0
 10579 025b 07       		.uleb128 0x7
 10580 025c A5000000 		.4byte	0xa5
 10581 0260 6B020000 		.4byte	0x26b
 10582 0264 08       		.uleb128 0x8
 10583 0265 0E010000 		.4byte	0x10e
 10584 0269 02       		.byte	0x2
 10585 026a 00       		.byte	0
 10586 026b 10       		.uleb128 0x10
 10587 026c E80A0000 		.4byte	.LASF46
 10588 0270 28       		.byte	0x28
 10589 0271 07       		.byte	0x7
 10590 0272 0A01     		.2byte	0x10a
 10591 0274 A0020000 		.4byte	0x2a0
 10592 0278 11       		.uleb128 0x11
 10593 0279 656D6700 		.ascii	"emg\000"
 10594 027d 07       		.byte	0x7
 10595 027e 0B01     		.2byte	0x10b
 10596 0280 A0020000 		.4byte	0x2a0
 10597 0284 00       		.byte	0
 10598 0285 12       		.uleb128 0x12
 10599 0286 9F0B0000 		.4byte	.LASF47
 10600 028a 07       		.byte	0x7
 10601 028b 0C01     		.2byte	0x10c
 10602 028d B0020000 		.4byte	0x2b0
 10603 0291 08       		.byte	0x8
 10604 0292 12       		.uleb128 0x12
 10605 0293 970F0000 		.4byte	.LASF48
 10606 0297 07       		.byte	0x7
 10607 0298 0D01     		.2byte	0x10d
 10608 029a A0020000 		.4byte	0x2a0
 10609 029e 20       		.byte	0x20
 10610 029f 00       		.byte	0
 10611 02a0 07       		.uleb128 0x7
 10612 02a1 BD000000 		.4byte	0xbd
 10613 02a5 B0020000 		.4byte	0x2b0
 10614 02a9 08       		.uleb128 0x8
 10615 02aa 0E010000 		.4byte	0x10e
 10616 02ae 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 241


 10617 02af 00       		.byte	0
 10618 02b0 07       		.uleb128 0x7
 10619 02b1 BD000000 		.4byte	0xbd
 10620 02b5 C0020000 		.4byte	0x2c0
 10621 02b9 08       		.uleb128 0x8
 10622 02ba 0E010000 		.4byte	0x10e
 10623 02be 05       		.byte	0x5
 10624 02bf 00       		.byte	0
 10625 02c0 10       		.uleb128 0x10
 10626 02c1 BD050000 		.4byte	.LASF49
 10627 02c5 04       		.byte	0x4
 10628 02c6 07       		.byte	0x7
 10629 02c7 1001     		.2byte	0x110
 10630 02c9 DB020000 		.4byte	0x2db
 10631 02cd 12       		.uleb128 0x12
 10632 02ce 1B050000 		.4byte	.LASF50
 10633 02d2 07       		.byte	0x7
 10634 02d3 1101     		.2byte	0x111
 10635 02d5 D5000000 		.4byte	0xd5
 10636 02d9 00       		.byte	0
 10637 02da 00       		.byte	0
 10638 02db 10       		.uleb128 0x10
 10639 02dc A9000000 		.4byte	.LASF51
 10640 02e0 86       		.byte	0x86
 10641 02e1 07       		.byte	0x7
 10642 02e2 1801     		.2byte	0x118
 10643 02e4 1D030000 		.4byte	0x31d
 10644 02e8 12       		.uleb128 0x12
 10645 02e9 86060000 		.4byte	.LASF52
 10646 02ed 07       		.byte	0x7
 10647 02ee 1901     		.2byte	0x119
 10648 02f0 1D030000 		.4byte	0x31d
 10649 02f4 00       		.byte	0
 10650 02f5 12       		.uleb128 0x12
 10651 02f6 310D0000 		.4byte	.LASF53
 10652 02fa 07       		.byte	0x7
 10653 02fb 1A01     		.2byte	0x11a
 10654 02fd B1000000 		.4byte	0xb1
 10655 0301 80       		.byte	0x80
 10656 0302 11       		.uleb128 0x11
 10657 0303 696E6400 		.ascii	"ind\000"
 10658 0307 07       		.byte	0x7
 10659 0308 1B01     		.2byte	0x11b
 10660 030a B1000000 		.4byte	0xb1
 10661 030e 82       		.byte	0x82
 10662 030f 12       		.uleb128 0x12
 10663 0310 01020000 		.4byte	.LASF54
 10664 0314 07       		.byte	0x7
 10665 0315 1C01     		.2byte	0x11c
 10666 0317 81000000 		.4byte	0x81
 10667 031b 84       		.byte	0x84
 10668 031c 00       		.byte	0
 10669 031d 07       		.uleb128 0x7
 10670 031e 81000000 		.4byte	0x81
 10671 0322 2D030000 		.4byte	0x32d
 10672 0326 08       		.uleb128 0x8
 10673 0327 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 242


 10674 032b 7F       		.byte	0x7f
 10675 032c 00       		.byte	0
 10676 032d 10       		.uleb128 0x10
 10677 032e 7F030000 		.4byte	.LASF55
 10678 0332 70       		.byte	0x70
 10679 0333 07       		.byte	0x7
 10680 0334 2501     		.2byte	0x125
 10681 0336 CA030000 		.4byte	0x3ca
 10682 033a 12       		.uleb128 0x12
 10683 033b 00000000 		.4byte	.LASF56
 10684 033f 07       		.byte	0x7
 10685 0340 2601     		.2byte	0x126
 10686 0342 CA030000 		.4byte	0x3ca
 10687 0346 00       		.byte	0
 10688 0347 12       		.uleb128 0x12
 10689 0348 BE010000 		.4byte	.LASF57
 10690 034c 07       		.byte	0x7
 10691 034d 2701     		.2byte	0x127
 10692 034f DA030000 		.4byte	0x3da
 10693 0353 08       		.byte	0x8
 10694 0354 12       		.uleb128 0x12
 10695 0355 E10B0000 		.4byte	.LASF58
 10696 0359 07       		.byte	0x7
 10697 035a 2801     		.2byte	0x128
 10698 035c EA030000 		.4byte	0x3ea
 10699 0360 30       		.byte	0x30
 10700 0361 12       		.uleb128 0x12
 10701 0362 55010000 		.4byte	.LASF59
 10702 0366 07       		.byte	0x7
 10703 0367 2901     		.2byte	0x129
 10704 0369 99000000 		.4byte	0x99
 10705 036d 40       		.byte	0x40
 10706 036e 12       		.uleb128 0x12
 10707 036f B7120000 		.4byte	.LASF60
 10708 0373 07       		.byte	0x7
 10709 0374 2A01     		.2byte	0x12a
 10710 0376 99000000 		.4byte	0x99
 10711 037a 44       		.byte	0x44
 10712 037b 12       		.uleb128 0x12
 10713 037c B1000000 		.4byte	.LASF61
 10714 0380 07       		.byte	0x7
 10715 0381 2B01     		.2byte	0x12b
 10716 0383 99000000 		.4byte	0x99
 10717 0387 48       		.byte	0x48
 10718 0388 12       		.uleb128 0x12
 10719 0389 5F080000 		.4byte	.LASF62
 10720 038d 07       		.byte	0x7
 10721 038e 2C01     		.2byte	0x12c
 10722 0390 99000000 		.4byte	0x99
 10723 0394 4C       		.byte	0x4c
 10724 0395 12       		.uleb128 0x12
 10725 0396 19000000 		.4byte	.LASF63
 10726 039a 07       		.byte	0x7
 10727 039b 2D01     		.2byte	0x12d
 10728 039d 99000000 		.4byte	0x99
 10729 03a1 50       		.byte	0x50
 10730 03a2 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 243


 10731 03a3 68020000 		.4byte	.LASF64
 10732 03a7 07       		.byte	0x7
 10733 03a8 2E01     		.2byte	0x12e
 10734 03aa CA030000 		.4byte	0x3ca
 10735 03ae 54       		.byte	0x54
 10736 03af 12       		.uleb128 0x12
 10737 03b0 370C0000 		.4byte	.LASF65
 10738 03b4 07       		.byte	0x7
 10739 03b5 2F01     		.2byte	0x12f
 10740 03b7 CA030000 		.4byte	0x3ca
 10741 03bb 5C       		.byte	0x5c
 10742 03bc 12       		.uleb128 0x12
 10743 03bd 4C030000 		.4byte	.LASF66
 10744 03c1 07       		.byte	0x7
 10745 03c2 3001     		.2byte	0x130
 10746 03c4 FA030000 		.4byte	0x3fa
 10747 03c8 64       		.byte	0x64
 10748 03c9 00       		.byte	0
 10749 03ca 07       		.uleb128 0x7
 10750 03cb 99000000 		.4byte	0x99
 10751 03cf DA030000 		.4byte	0x3da
 10752 03d3 08       		.uleb128 0x8
 10753 03d4 0E010000 		.4byte	0x10e
 10754 03d8 01       		.byte	0x1
 10755 03d9 00       		.byte	0
 10756 03da 07       		.uleb128 0x7
 10757 03db 99000000 		.4byte	0x99
 10758 03df EA030000 		.4byte	0x3ea
 10759 03e3 08       		.uleb128 0x8
 10760 03e4 0E010000 		.4byte	0x10e
 10761 03e8 09       		.byte	0x9
 10762 03e9 00       		.byte	0
 10763 03ea 07       		.uleb128 0x7
 10764 03eb 99000000 		.4byte	0x99
 10765 03ef FA030000 		.4byte	0x3fa
 10766 03f3 08       		.uleb128 0x8
 10767 03f4 0E010000 		.4byte	0x10e
 10768 03f8 03       		.byte	0x3
 10769 03f9 00       		.byte	0
 10770 03fa 07       		.uleb128 0x7
 10771 03fb 81000000 		.4byte	0x81
 10772 03ff 0A040000 		.4byte	0x40a
 10773 0403 08       		.uleb128 0x8
 10774 0404 0E010000 		.4byte	0x10e
 10775 0408 0B       		.byte	0xb
 10776 0409 00       		.byte	0
 10777 040a 10       		.uleb128 0x10
 10778 040b 24020000 		.4byte	.LASF67
 10779 040f 10       		.byte	0x10
 10780 0410 07       		.byte	0x7
 10781 0411 3701     		.2byte	0x137
 10782 0413 99040000 		.4byte	0x499
 10783 0417 11       		.uleb128 0x11
 10784 0418 696400   		.ascii	"id\000"
 10785 041b 07       		.byte	0x7
 10786 041c 3801     		.2byte	0x138
 10787 041e 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 244


 10788 0422 00       		.byte	0
 10789 0423 12       		.uleb128 0x12
 10790 0424 B20F0000 		.4byte	.LASF68
 10791 0428 07       		.byte	0x7
 10792 0429 3901     		.2byte	0x139
 10793 042b 99040000 		.4byte	0x499
 10794 042f 01       		.byte	0x1
 10795 0430 12       		.uleb128 0x12
 10796 0431 EE0F0000 		.4byte	.LASF69
 10797 0435 07       		.byte	0x7
 10798 0436 3A01     		.2byte	0x13a
 10799 0438 99040000 		.4byte	0x499
 10800 043c 04       		.byte	0x4
 10801 043d 12       		.uleb128 0x12
 10802 043e E3040000 		.4byte	.LASF70
 10803 0442 07       		.byte	0x7
 10804 0443 3B01     		.2byte	0x13b
 10805 0445 81000000 		.4byte	0x81
 10806 0449 07       		.byte	0x7
 10807 044a 12       		.uleb128 0x12
 10808 044b 08030000 		.4byte	.LASF71
 10809 044f 07       		.byte	0x7
 10810 0450 3C01     		.2byte	0x13c
 10811 0452 81000000 		.4byte	0x81
 10812 0456 08       		.byte	0x8
 10813 0457 12       		.uleb128 0x12
 10814 0458 4A020000 		.4byte	.LASF72
 10815 045c 07       		.byte	0x7
 10816 045d 3D01     		.2byte	0x13d
 10817 045f 81000000 		.4byte	0x81
 10818 0463 09       		.byte	0x9
 10819 0464 12       		.uleb128 0x12
 10820 0465 8F110000 		.4byte	.LASF73
 10821 0469 07       		.byte	0x7
 10822 046a 3E01     		.2byte	0x13e
 10823 046c 81000000 		.4byte	0x81
 10824 0470 0A       		.byte	0xa
 10825 0471 12       		.uleb128 0x12
 10826 0472 23110000 		.4byte	.LASF74
 10827 0476 07       		.byte	0x7
 10828 0477 3F01     		.2byte	0x13f
 10829 0479 81000000 		.4byte	0x81
 10830 047d 0B       		.byte	0xb
 10831 047e 12       		.uleb128 0x12
 10832 047f 260E0000 		.4byte	.LASF75
 10833 0483 07       		.byte	0x7
 10834 0484 4001     		.2byte	0x140
 10835 0486 81000000 		.4byte	0x81
 10836 048a 0C       		.byte	0xc
 10837 048b 12       		.uleb128 0x12
 10838 048c 4C030000 		.4byte	.LASF66
 10839 0490 07       		.byte	0x7
 10840 0491 4101     		.2byte	0x141
 10841 0493 99040000 		.4byte	0x499
 10842 0497 0D       		.byte	0xd
 10843 0498 00       		.byte	0
 10844 0499 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 245


 10845 049a 81000000 		.4byte	0x81
 10846 049e A9040000 		.4byte	0x4a9
 10847 04a2 08       		.uleb128 0x8
 10848 04a3 0E010000 		.4byte	0x10e
 10849 04a7 02       		.byte	0x2
 10850 04a8 00       		.byte	0
 10851 04a9 10       		.uleb128 0x10
 10852 04aa 55120000 		.4byte	.LASF76
 10853 04ae 70       		.byte	0x70
 10854 04af 07       		.byte	0x7
 10855 04b0 4801     		.2byte	0x148
 10856 04b2 23060000 		.4byte	0x623
 10857 04b6 11       		.uleb128 0x11
 10858 04b7 6B5F7000 		.ascii	"k_p\000"
 10859 04bb 07       		.byte	0x7
 10860 04bc 4901     		.2byte	0x149
 10861 04be BD000000 		.4byte	0xbd
 10862 04c2 00       		.byte	0
 10863 04c3 11       		.uleb128 0x11
 10864 04c4 6B5F6900 		.ascii	"k_i\000"
 10865 04c8 07       		.byte	0x7
 10866 04c9 4A01     		.2byte	0x14a
 10867 04cb BD000000 		.4byte	0xbd
 10868 04cf 04       		.byte	0x4
 10869 04d0 11       		.uleb128 0x11
 10870 04d1 6B5F6400 		.ascii	"k_d\000"
 10871 04d5 07       		.byte	0x7
 10872 04d6 4B01     		.2byte	0x14b
 10873 04d8 BD000000 		.4byte	0xbd
 10874 04dc 08       		.byte	0x8
 10875 04dd 12       		.uleb128 0x12
 10876 04de 8A0D0000 		.4byte	.LASF77
 10877 04e2 07       		.byte	0x7
 10878 04e3 4C01     		.2byte	0x14c
 10879 04e5 BD000000 		.4byte	0xbd
 10880 04e9 0C       		.byte	0xc
 10881 04ea 12       		.uleb128 0x12
 10882 04eb CF050000 		.4byte	.LASF78
 10883 04ef 07       		.byte	0x7
 10884 04f0 4D01     		.2byte	0x14d
 10885 04f2 BD000000 		.4byte	0xbd
 10886 04f6 10       		.byte	0x10
 10887 04f7 12       		.uleb128 0x12
 10888 04f8 A0050000 		.4byte	.LASF79
 10889 04fc 07       		.byte	0x7
 10890 04fd 4E01     		.2byte	0x14e
 10891 04ff BD000000 		.4byte	0xbd
 10892 0503 14       		.byte	0x14
 10893 0504 12       		.uleb128 0x12
 10894 0505 73100000 		.4byte	.LASF80
 10895 0509 07       		.byte	0x7
 10896 050a 4F01     		.2byte	0x14f
 10897 050c BD000000 		.4byte	0xbd
 10898 0510 18       		.byte	0x18
 10899 0511 12       		.uleb128 0x12
 10900 0512 7F060000 		.4byte	.LASF81
 10901 0516 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 246


 10902 0517 5001     		.2byte	0x150
 10903 0519 BD000000 		.4byte	0xbd
 10904 051d 1C       		.byte	0x1c
 10905 051e 12       		.uleb128 0x12
 10906 051f 820F0000 		.4byte	.LASF82
 10907 0523 07       		.byte	0x7
 10908 0524 5101     		.2byte	0x151
 10909 0526 BD000000 		.4byte	0xbd
 10910 052a 20       		.byte	0x20
 10911 052b 12       		.uleb128 0x12
 10912 052c 8D060000 		.4byte	.LASF83
 10913 0530 07       		.byte	0x7
 10914 0531 5201     		.2byte	0x152
 10915 0533 BD000000 		.4byte	0xbd
 10916 0537 24       		.byte	0x24
 10917 0538 12       		.uleb128 0x12
 10918 0539 D5070000 		.4byte	.LASF84
 10919 053d 07       		.byte	0x7
 10920 053e 5301     		.2byte	0x153
 10921 0540 BD000000 		.4byte	0xbd
 10922 0544 28       		.byte	0x28
 10923 0545 12       		.uleb128 0x12
 10924 0546 2F130000 		.4byte	.LASF85
 10925 054a 07       		.byte	0x7
 10926 054b 5401     		.2byte	0x154
 10927 054d BD000000 		.4byte	0xbd
 10928 0551 2C       		.byte	0x2c
 10929 0552 12       		.uleb128 0x12
 10930 0553 6F080000 		.4byte	.LASF86
 10931 0557 07       		.byte	0x7
 10932 0558 5501     		.2byte	0x155
 10933 055a 81000000 		.4byte	0x81
 10934 055e 30       		.byte	0x30
 10935 055f 12       		.uleb128 0x12
 10936 0560 5C100000 		.4byte	.LASF87
 10937 0564 07       		.byte	0x7
 10938 0565 5601     		.2byte	0x156
 10939 0567 81000000 		.4byte	0x81
 10940 056b 31       		.byte	0x31
 10941 056c 12       		.uleb128 0x12
 10942 056d 9C0D0000 		.4byte	.LASF88
 10943 0571 07       		.byte	0x7
 10944 0572 5701     		.2byte	0x157
 10945 0574 81000000 		.4byte	0x81
 10946 0578 32       		.byte	0x32
 10947 0579 12       		.uleb128 0x12
 10948 057a 72120000 		.4byte	.LASF89
 10949 057e 07       		.byte	0x7
 10950 057f 5801     		.2byte	0x158
 10951 0581 81000000 		.4byte	0x81
 10952 0585 33       		.byte	0x33
 10953 0586 12       		.uleb128 0x12
 10954 0587 D6000000 		.4byte	.LASF90
 10955 058b 07       		.byte	0x7
 10956 058c 5901     		.2byte	0x159
 10957 058e BD000000 		.4byte	0xbd
 10958 0592 34       		.byte	0x34
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 247


 10959 0593 12       		.uleb128 0x12
 10960 0594 FF050000 		.4byte	.LASF91
 10961 0598 07       		.byte	0x7
 10962 0599 5A01     		.2byte	0x15a
 10963 059b BD000000 		.4byte	0xbd
 10964 059f 38       		.byte	0x38
 10965 05a0 12       		.uleb128 0x12
 10966 05a1 A40A0000 		.4byte	.LASF92
 10967 05a5 07       		.byte	0x7
 10968 05a6 5B01     		.2byte	0x15b
 10969 05a8 BD000000 		.4byte	0xbd
 10970 05ac 3C       		.byte	0x3c
 10971 05ad 12       		.uleb128 0x12
 10972 05ae 41050000 		.4byte	.LASF93
 10973 05b2 07       		.byte	0x7
 10974 05b3 5C01     		.2byte	0x15c
 10975 05b5 BD000000 		.4byte	0xbd
 10976 05b9 40       		.byte	0x40
 10977 05ba 12       		.uleb128 0x12
 10978 05bb 3F010000 		.4byte	.LASF94
 10979 05bf 07       		.byte	0x7
 10980 05c0 5D01     		.2byte	0x15d
 10981 05c2 23060000 		.4byte	0x623
 10982 05c6 44       		.byte	0x44
 10983 05c7 12       		.uleb128 0x12
 10984 05c8 D9120000 		.4byte	.LASF95
 10985 05cc 07       		.byte	0x7
 10986 05cd 5E01     		.2byte	0x15e
 10987 05cf B1000000 		.4byte	0xb1
 10988 05d3 5C       		.byte	0x5c
 10989 05d4 12       		.uleb128 0x12
 10990 05d5 DB080000 		.4byte	.LASF96
 10991 05d9 07       		.byte	0x7
 10992 05da 5F01     		.2byte	0x15f
 10993 05dc 81000000 		.4byte	0x81
 10994 05e0 5E       		.byte	0x5e
 10995 05e1 12       		.uleb128 0x12
 10996 05e2 3F0B0000 		.4byte	.LASF97
 10997 05e6 07       		.byte	0x7
 10998 05e7 6001     		.2byte	0x160
 10999 05e9 81000000 		.4byte	0x81
 11000 05ed 5F       		.byte	0x5f
 11001 05ee 12       		.uleb128 0x12
 11002 05ef EE040000 		.4byte	.LASF98
 11003 05f3 07       		.byte	0x7
 11004 05f4 6101     		.2byte	0x161
 11005 05f6 81000000 		.4byte	0x81
 11006 05fa 60       		.byte	0x60
 11007 05fb 12       		.uleb128 0x12
 11008 05fc 8F050000 		.4byte	.LASF99
 11009 0600 07       		.byte	0x7
 11010 0601 6201     		.2byte	0x162
 11011 0603 81000000 		.4byte	0x81
 11012 0607 61       		.byte	0x61
 11013 0608 12       		.uleb128 0x12
 11014 0609 97040000 		.4byte	.LASF100
 11015 060d 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 248


 11016 060e 6301     		.2byte	0x163
 11017 0610 81000000 		.4byte	0x81
 11018 0614 62       		.byte	0x62
 11019 0615 12       		.uleb128 0x12
 11020 0616 4C030000 		.4byte	.LASF66
 11021 061a 07       		.byte	0x7
 11022 061b 6401     		.2byte	0x164
 11023 061d 33060000 		.4byte	0x633
 11024 0621 63       		.byte	0x63
 11025 0622 00       		.byte	0
 11026 0623 07       		.uleb128 0x7
 11027 0624 D5000000 		.4byte	0xd5
 11028 0628 33060000 		.4byte	0x633
 11029 062c 08       		.uleb128 0x8
 11030 062d 0E010000 		.4byte	0x10e
 11031 0631 05       		.byte	0x5
 11032 0632 00       		.byte	0
 11033 0633 07       		.uleb128 0x7
 11034 0634 81000000 		.4byte	0x81
 11035 0638 43060000 		.4byte	0x643
 11036 063c 08       		.uleb128 0x8
 11037 063d 0E010000 		.4byte	0x10e
 11038 0641 0C       		.byte	0xc
 11039 0642 00       		.byte	0
 11040 0643 10       		.uleb128 0x10
 11041 0644 CE110000 		.4byte	.LASF101
 11042 0648 30       		.byte	0x30
 11043 0649 07       		.byte	0x7
 11044 064a 6B01     		.2byte	0x16b
 11045 064c C6060000 		.4byte	0x6c6
 11046 0650 12       		.uleb128 0x12
 11047 0651 5E0A0000 		.4byte	.LASF102
 11048 0655 07       		.byte	0x7
 11049 0656 6C01     		.2byte	0x16c
 11050 0658 C6060000 		.4byte	0x6c6
 11051 065c 00       		.byte	0
 11052 065d 11       		.uleb128 0x11
 11053 065e 72657300 		.ascii	"res\000"
 11054 0662 07       		.byte	0x7
 11055 0663 6D01     		.2byte	0x16d
 11056 0665 99040000 		.4byte	0x499
 11057 0669 05       		.byte	0x5
 11058 066a 12       		.uleb128 0x12
 11059 066b 9B080000 		.4byte	.LASF103
 11060 066f 07       		.byte	0x7
 11061 0670 6E01     		.2byte	0x16e
 11062 0672 4B020000 		.4byte	0x24b
 11063 0676 08       		.byte	0x8
 11064 0677 12       		.uleb128 0x12
 11065 0678 C8050000 		.4byte	.LASF104
 11066 067c 07       		.byte	0x7
 11067 067d 6F01     		.2byte	0x16f
 11068 067f D6060000 		.4byte	0x6d6
 11069 0683 14       		.byte	0x14
 11070 0684 12       		.uleb128 0x12
 11071 0685 820C0000 		.4byte	.LASF105
 11072 0689 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 249


 11073 068a 7001     		.2byte	0x170
 11074 068c 81000000 		.4byte	0x81
 11075 0690 20       		.byte	0x20
 11076 0691 12       		.uleb128 0x12
 11077 0692 07020000 		.4byte	.LASF106
 11078 0696 07       		.byte	0x7
 11079 0697 7101     		.2byte	0x171
 11080 0699 99040000 		.4byte	0x499
 11081 069d 21       		.byte	0x21
 11082 069e 12       		.uleb128 0x12
 11083 069f CE0B0000 		.4byte	.LASF107
 11084 06a3 07       		.byte	0x7
 11085 06a4 7201     		.2byte	0x172
 11086 06a6 A5000000 		.4byte	0xa5
 11087 06aa 24       		.byte	0x24
 11088 06ab 12       		.uleb128 0x12
 11089 06ac 650E0000 		.4byte	.LASF108
 11090 06b0 07       		.byte	0x7
 11091 06b1 7301     		.2byte	0x173
 11092 06b3 5B020000 		.4byte	0x25b
 11093 06b7 25       		.byte	0x25
 11094 06b8 12       		.uleb128 0x12
 11095 06b9 4C030000 		.4byte	.LASF66
 11096 06bd 07       		.byte	0x7
 11097 06be 7401     		.2byte	0x174
 11098 06c0 E6060000 		.4byte	0x6e6
 11099 06c4 28       		.byte	0x28
 11100 06c5 00       		.byte	0
 11101 06c6 07       		.uleb128 0x7
 11102 06c7 81000000 		.4byte	0x81
 11103 06cb D6060000 		.4byte	0x6d6
 11104 06cf 08       		.uleb128 0x8
 11105 06d0 0E010000 		.4byte	0x10e
 11106 06d4 04       		.byte	0x4
 11107 06d5 00       		.byte	0
 11108 06d6 07       		.uleb128 0x7
 11109 06d7 C9000000 		.4byte	0xc9
 11110 06db E6060000 		.4byte	0x6e6
 11111 06df 08       		.uleb128 0x8
 11112 06e0 0E010000 		.4byte	0x10e
 11113 06e4 02       		.byte	0x2
 11114 06e5 00       		.byte	0
 11115 06e6 07       		.uleb128 0x7
 11116 06e7 81000000 		.4byte	0x81
 11117 06eb F6060000 		.4byte	0x6f6
 11118 06ef 08       		.uleb128 0x8
 11119 06f0 0E010000 		.4byte	0x10e
 11120 06f4 07       		.byte	0x7
 11121 06f5 00       		.byte	0
 11122 06f6 10       		.uleb128 0x10
 11123 06f7 B7010000 		.4byte	.LASF109
 11124 06fb 10       		.byte	0x10
 11125 06fc 07       		.byte	0x7
 11126 06fd 7B01     		.2byte	0x17b
 11127 06ff 45070000 		.4byte	0x745
 11128 0703 12       		.uleb128 0x12
 11129 0704 AD0B0000 		.4byte	.LASF110
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 250


 11130 0708 07       		.byte	0x7
 11131 0709 7C01     		.2byte	0x17c
 11132 070b 45070000 		.4byte	0x745
 11133 070f 00       		.byte	0
 11134 0710 12       		.uleb128 0x12
 11135 0711 CB120000 		.4byte	.LASF111
 11136 0715 07       		.byte	0x7
 11137 0716 7D01     		.2byte	0x17d
 11138 0718 CA030000 		.4byte	0x3ca
 11139 071c 04       		.byte	0x4
 11140 071d 12       		.uleb128 0x12
 11141 071e 15060000 		.4byte	.LASF112
 11142 0722 07       		.byte	0x7
 11143 0723 7E01     		.2byte	0x17e
 11144 0725 55070000 		.4byte	0x755
 11145 0729 0C       		.byte	0xc
 11146 072a 12       		.uleb128 0x12
 11147 072b 7F0E0000 		.4byte	.LASF113
 11148 072f 07       		.byte	0x7
 11149 0730 7F01     		.2byte	0x17f
 11150 0732 81000000 		.4byte	0x81
 11151 0736 0E       		.byte	0xe
 11152 0737 12       		.uleb128 0x12
 11153 0738 46040000 		.4byte	.LASF114
 11154 073c 07       		.byte	0x7
 11155 073d 8001     		.2byte	0x180
 11156 073f 81000000 		.4byte	0x81
 11157 0743 0F       		.byte	0xf
 11158 0744 00       		.byte	0
 11159 0745 07       		.uleb128 0x7
 11160 0746 8D000000 		.4byte	0x8d
 11161 074a 55070000 		.4byte	0x755
 11162 074e 08       		.uleb128 0x8
 11163 074f 0E010000 		.4byte	0x10e
 11164 0753 01       		.byte	0x1
 11165 0754 00       		.byte	0
 11166 0755 07       		.uleb128 0x7
 11167 0756 81000000 		.4byte	0x81
 11168 075a 65070000 		.4byte	0x765
 11169 075e 08       		.uleb128 0x8
 11170 075f 0E010000 		.4byte	0x10e
 11171 0763 01       		.byte	0x1
 11172 0764 00       		.byte	0
 11173 0765 10       		.uleb128 0x10
 11174 0766 690B0000 		.4byte	.LASF115
 11175 076a 20       		.byte	0x20
 11176 076b 07       		.byte	0x7
 11177 076c 8701     		.2byte	0x187
 11178 076e A7070000 		.4byte	0x7a7
 11179 0772 12       		.uleb128 0x12
 11180 0773 8F020000 		.4byte	.LASF116
 11181 0777 07       		.byte	0x7
 11182 0778 8801     		.2byte	0x188
 11183 077a 81000000 		.4byte	0x81
 11184 077e 00       		.byte	0
 11185 077f 12       		.uleb128 0x12
 11186 0780 AC110000 		.4byte	.LASF117
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 251


 11187 0784 07       		.byte	0x7
 11188 0785 8901     		.2byte	0x189
 11189 0787 81000000 		.4byte	0x81
 11190 078b 01       		.byte	0x1
 11191 078c 12       		.uleb128 0x12
 11192 078d D90A0000 		.4byte	.LASF118
 11193 0791 07       		.byte	0x7
 11194 0792 8A01     		.2byte	0x18a
 11195 0794 A7070000 		.4byte	0x7a7
 11196 0798 02       		.byte	0x2
 11197 0799 12       		.uleb128 0x12
 11198 079a 4C030000 		.4byte	.LASF66
 11199 079e 07       		.byte	0x7
 11200 079f 8B01     		.2byte	0x18b
 11201 07a1 C6060000 		.4byte	0x6c6
 11202 07a5 1B       		.byte	0x1b
 11203 07a6 00       		.byte	0
 11204 07a7 07       		.uleb128 0x7
 11205 07a8 81000000 		.4byte	0x81
 11206 07ac BD070000 		.4byte	0x7bd
 11207 07b0 08       		.uleb128 0x8
 11208 07b1 0E010000 		.4byte	0x10e
 11209 07b5 04       		.byte	0x4
 11210 07b6 08       		.uleb128 0x8
 11211 07b7 0E010000 		.4byte	0x10e
 11212 07bb 04       		.byte	0x4
 11213 07bc 00       		.byte	0
 11214 07bd 10       		.uleb128 0x10
 11215 07be 720E0000 		.4byte	.LASF119
 11216 07c2 20       		.byte	0x20
 11217 07c3 07       		.byte	0x7
 11218 07c4 9201     		.2byte	0x192
 11219 07c6 19080000 		.4byte	0x819
 11220 07ca 12       		.uleb128 0x12
 11221 07cb 780C0000 		.4byte	.LASF120
 11222 07cf 07       		.byte	0x7
 11223 07d0 9301     		.2byte	0x193
 11224 07d2 19080000 		.4byte	0x819
 11225 07d6 00       		.byte	0
 11226 07d7 12       		.uleb128 0x12
 11227 07d8 3D100000 		.4byte	.LASF121
 11228 07dc 07       		.byte	0x7
 11229 07dd 9401     		.2byte	0x194
 11230 07df 81000000 		.4byte	0x81
 11231 07e3 06       		.byte	0x6
 11232 07e4 12       		.uleb128 0x12
 11233 07e5 6B000000 		.4byte	.LASF122
 11234 07e9 07       		.byte	0x7
 11235 07ea 9501     		.2byte	0x195
 11236 07ec 81000000 		.4byte	0x81
 11237 07f0 07       		.byte	0x7
 11238 07f1 12       		.uleb128 0x12
 11239 07f2 54060000 		.4byte	.LASF123
 11240 07f6 07       		.byte	0x7
 11241 07f7 9601     		.2byte	0x196
 11242 07f9 FA030000 		.4byte	0x3fa
 11243 07fd 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 252


 11244 07fe 12       		.uleb128 0x12
 11245 07ff 9D020000 		.4byte	.LASF124
 11246 0803 07       		.byte	0x7
 11247 0804 9701     		.2byte	0x197
 11248 0806 81000000 		.4byte	0x81
 11249 080a 14       		.byte	0x14
 11250 080b 12       		.uleb128 0x12
 11251 080c 4C030000 		.4byte	.LASF66
 11252 0810 07       		.byte	0x7
 11253 0811 9801     		.2byte	0x198
 11254 0813 29080000 		.4byte	0x829
 11255 0817 15       		.byte	0x15
 11256 0818 00       		.byte	0
 11257 0819 07       		.uleb128 0x7
 11258 081a 81000000 		.4byte	0x81
 11259 081e 29080000 		.4byte	0x829
 11260 0822 08       		.uleb128 0x8
 11261 0823 0E010000 		.4byte	0x10e
 11262 0827 05       		.byte	0x5
 11263 0828 00       		.byte	0
 11264 0829 07       		.uleb128 0x7
 11265 082a 81000000 		.4byte	0x81
 11266 082e 39080000 		.4byte	0x839
 11267 0832 08       		.uleb128 0x8
 11268 0833 0E010000 		.4byte	0x10e
 11269 0837 0A       		.byte	0xa
 11270 0838 00       		.byte	0
 11271 0839 10       		.uleb128 0x10
 11272 083a 5D0E0000 		.4byte	.LASF125
 11273 083e 20       		.byte	0x20
 11274 083f 07       		.byte	0x7
 11275 0840 9F01     		.2byte	0x19f
 11276 0842 6E080000 		.4byte	0x86e
 11277 0846 12       		.uleb128 0x12
 11278 0847 05040000 		.4byte	.LASF126
 11279 084b 07       		.byte	0x7
 11280 084c A001     		.2byte	0x1a0
 11281 084e 15010000 		.4byte	0x115
 11282 0852 00       		.byte	0
 11283 0853 12       		.uleb128 0x12
 11284 0854 25030000 		.4byte	.LASF127
 11285 0858 07       		.byte	0x7
 11286 0859 A101     		.2byte	0x1a1
 11287 085b F6060000 		.4byte	0x6f6
 11288 085f 08       		.byte	0x8
 11289 0860 12       		.uleb128 0x12
 11290 0861 4C030000 		.4byte	.LASF66
 11291 0865 07       		.byte	0x7
 11292 0866 A201     		.2byte	0x1a2
 11293 0868 E6060000 		.4byte	0x6e6
 11294 086c 18       		.byte	0x18
 11295 086d 00       		.byte	0
 11296 086e 10       		.uleb128 0x10
 11297 086f C7090000 		.4byte	.LASF128
 11298 0873 10       		.byte	0x10
 11299 0874 07       		.byte	0x7
 11300 0875 A901     		.2byte	0x1a9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 253


 11301 0877 BD080000 		.4byte	0x8bd
 11302 087b 12       		.uleb128 0x12
 11303 087c C2080000 		.4byte	.LASF129
 11304 0880 07       		.byte	0x7
 11305 0881 AA01     		.2byte	0x1aa
 11306 0883 BD000000 		.4byte	0xbd
 11307 0887 00       		.byte	0
 11308 0888 12       		.uleb128 0x12
 11309 0889 11130000 		.4byte	.LASF130
 11310 088d 07       		.byte	0x7
 11311 088e AB01     		.2byte	0x1ab
 11312 0890 BD000000 		.4byte	0xbd
 11313 0894 04       		.byte	0x4
 11314 0895 12       		.uleb128 0x12
 11315 0896 1F060000 		.4byte	.LASF131
 11316 089a 07       		.byte	0x7
 11317 089b AC01     		.2byte	0x1ac
 11318 089d BD000000 		.4byte	0xbd
 11319 08a1 08       		.byte	0x8
 11320 08a2 12       		.uleb128 0x12
 11321 08a3 AB070000 		.4byte	.LASF132
 11322 08a7 07       		.byte	0x7
 11323 08a8 AD01     		.2byte	0x1ad
 11324 08aa 81000000 		.4byte	0x81
 11325 08ae 0C       		.byte	0xc
 11326 08af 12       		.uleb128 0x12
 11327 08b0 4C030000 		.4byte	.LASF66
 11328 08b4 07       		.byte	0x7
 11329 08b5 AE01     		.2byte	0x1ae
 11330 08b7 99040000 		.4byte	0x499
 11331 08bb 0D       		.byte	0xd
 11332 08bc 00       		.byte	0
 11333 08bd 10       		.uleb128 0x10
 11334 08be 580F0000 		.4byte	.LASF133
 11335 08c2 10       		.byte	0x10
 11336 08c3 07       		.byte	0x7
 11337 08c4 B501     		.2byte	0x1b5
 11338 08c6 FF080000 		.4byte	0x8ff
 11339 08ca 12       		.uleb128 0x12
 11340 08cb BE070000 		.4byte	.LASF134
 11341 08cf 07       		.byte	0x7
 11342 08d0 B601     		.2byte	0x1b6
 11343 08d2 8D000000 		.4byte	0x8d
 11344 08d6 00       		.byte	0
 11345 08d7 12       		.uleb128 0x12
 11346 08d8 BA0E0000 		.4byte	.LASF135
 11347 08dc 07       		.byte	0x7
 11348 08dd B701     		.2byte	0x1b7
 11349 08df B1000000 		.4byte	0xb1
 11350 08e3 02       		.byte	0x2
 11351 08e4 12       		.uleb128 0x12
 11352 08e5 32080000 		.4byte	.LASF136
 11353 08e9 07       		.byte	0x7
 11354 08ea B801     		.2byte	0x1b8
 11355 08ec 45070000 		.4byte	0x745
 11356 08f0 04       		.byte	0x4
 11357 08f1 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 254


 11358 08f2 4C030000 		.4byte	.LASF66
 11359 08f6 07       		.byte	0x7
 11360 08f7 B901     		.2byte	0x1b9
 11361 08f9 E6060000 		.4byte	0x6e6
 11362 08fd 08       		.byte	0x8
 11363 08fe 00       		.byte	0
 11364 08ff 10       		.uleb128 0x10
 11365 0900 62010000 		.4byte	.LASF137
 11366 0904 10       		.byte	0x10
 11367 0905 07       		.byte	0x7
 11368 0906 C001     		.2byte	0x1c0
 11369 0908 34090000 		.4byte	0x934
 11370 090c 12       		.uleb128 0x12
 11371 090d 16040000 		.4byte	.LASF138
 11372 0911 07       		.byte	0x7
 11373 0912 C101     		.2byte	0x1c1
 11374 0914 81000000 		.4byte	0x81
 11375 0918 00       		.byte	0
 11376 0919 12       		.uleb128 0x12
 11377 091a C50A0000 		.4byte	.LASF139
 11378 091e 07       		.byte	0x7
 11379 091f C201     		.2byte	0x1c2
 11380 0921 81000000 		.4byte	0x81
 11381 0925 01       		.byte	0x1
 11382 0926 12       		.uleb128 0x12
 11383 0927 4C030000 		.4byte	.LASF66
 11384 092b 07       		.byte	0x7
 11385 092c C301     		.2byte	0x1c3
 11386 092e 34090000 		.4byte	0x934
 11387 0932 02       		.byte	0x2
 11388 0933 00       		.byte	0
 11389 0934 07       		.uleb128 0x7
 11390 0935 81000000 		.4byte	0x81
 11391 0939 44090000 		.4byte	0x944
 11392 093d 08       		.uleb128 0x8
 11393 093e 0E010000 		.4byte	0x10e
 11394 0942 0D       		.byte	0xd
 11395 0943 00       		.byte	0
 11396 0944 10       		.uleb128 0x10
 11397 0945 E0090000 		.4byte	.LASF140
 11398 0949 10       		.byte	0x10
 11399 094a 07       		.byte	0x7
 11400 094b CA01     		.2byte	0x1ca
 11401 094d A0090000 		.4byte	0x9a0
 11402 0951 12       		.uleb128 0x12
 11403 0952 E4110000 		.4byte	.LASF141
 11404 0956 07       		.byte	0x7
 11405 0957 CC01     		.2byte	0x1cc
 11406 0959 BD000000 		.4byte	0xbd
 11407 095d 00       		.byte	0
 11408 095e 12       		.uleb128 0x12
 11409 095f 96070000 		.4byte	.LASF142
 11410 0963 07       		.byte	0x7
 11411 0964 CD01     		.2byte	0x1cd
 11412 0966 D5000000 		.4byte	0xd5
 11413 096a 04       		.byte	0x4
 11414 096b 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 255


 11415 096c CE0D0000 		.4byte	.LASF143
 11416 0970 07       		.byte	0x7
 11417 0971 CE01     		.2byte	0x1ce
 11418 0973 D5000000 		.4byte	0xd5
 11419 0977 08       		.byte	0x8
 11420 0978 12       		.uleb128 0x12
 11421 0979 08090000 		.4byte	.LASF144
 11422 097d 07       		.byte	0x7
 11423 097e CF01     		.2byte	0x1cf
 11424 0980 81000000 		.4byte	0x81
 11425 0984 0C       		.byte	0xc
 11426 0985 12       		.uleb128 0x12
 11427 0986 270F0000 		.4byte	.LASF145
 11428 098a 07       		.byte	0x7
 11429 098b D001     		.2byte	0x1d0
 11430 098d 81000000 		.4byte	0x81
 11431 0991 0D       		.byte	0xd
 11432 0992 12       		.uleb128 0x12
 11433 0993 4C030000 		.4byte	.LASF66
 11434 0997 07       		.byte	0x7
 11435 0998 D101     		.2byte	0x1d1
 11436 099a 55070000 		.4byte	0x755
 11437 099e 0E       		.byte	0xe
 11438 099f 00       		.byte	0
 11439 09a0 10       		.uleb128 0x10
 11440 09a1 6B060000 		.4byte	.LASF146
 11441 09a5 02       		.byte	0x2
 11442 09a6 07       		.byte	0x7
 11443 09a7 D401     		.2byte	0x1d4
 11444 09a9 BB090000 		.4byte	0x9bb
 11445 09ad 11       		.uleb128 0x11
 11446 09ae 70776D00 		.ascii	"pwm\000"
 11447 09b2 07       		.byte	0x7
 11448 09b3 D501     		.2byte	0x1d5
 11449 09b5 B1000000 		.4byte	0xb1
 11450 09b9 00       		.byte	0
 11451 09ba 00       		.byte	0
 11452 09bb 10       		.uleb128 0x10
 11453 09bc EC010000 		.4byte	.LASF147
 11454 09c0 12       		.byte	0x12
 11455 09c1 07       		.byte	0x7
 11456 09c2 DB01     		.2byte	0x1db
 11457 09c4 FD090000 		.4byte	0x9fd
 11458 09c8 12       		.uleb128 0x12
 11459 09c9 FA120000 		.4byte	.LASF148
 11460 09cd 07       		.byte	0x7
 11461 09ce DC01     		.2byte	0x1dc
 11462 09d0 81000000 		.4byte	0x81
 11463 09d4 00       		.byte	0
 11464 09d5 12       		.uleb128 0x12
 11465 09d6 99110000 		.4byte	.LASF149
 11466 09da 07       		.byte	0x7
 11467 09db DD01     		.2byte	0x1dd
 11468 09dd 45070000 		.4byte	0x745
 11469 09e1 02       		.byte	0x2
 11470 09e2 12       		.uleb128 0x12
 11471 09e3 37000000 		.4byte	.LASF150
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 256


 11472 09e7 07       		.byte	0x7
 11473 09e8 DE01     		.2byte	0x1de
 11474 09ea 81000000 		.4byte	0x81
 11475 09ee 06       		.byte	0x6
 11476 09ef 12       		.uleb128 0x12
 11477 09f0 4C030000 		.4byte	.LASF66
 11478 09f4 07       		.byte	0x7
 11479 09f5 DF01     		.2byte	0x1df
 11480 09f7 FD090000 		.4byte	0x9fd
 11481 09fb 07       		.byte	0x7
 11482 09fc 00       		.byte	0
 11483 09fd 07       		.uleb128 0x7
 11484 09fe 81000000 		.4byte	0x81
 11485 0a02 0D0A0000 		.4byte	0xa0d
 11486 0a06 08       		.uleb128 0x8
 11487 0a07 0E010000 		.4byte	0x10e
 11488 0a0b 09       		.byte	0x9
 11489 0a0c 00       		.byte	0
 11490 0a0d 13       		.uleb128 0x13
 11491 0a0e FF110000 		.4byte	.LASF151
 11492 0a12 F402     		.2byte	0x2f4
 11493 0a14 07       		.byte	0x7
 11494 0a15 E801     		.2byte	0x1e8
 11495 0a17 F20A0000 		.4byte	0xaf2
 11496 0a1b 12       		.uleb128 0x12
 11497 0a1c 3A0B0000 		.4byte	.LASF152
 11498 0a20 07       		.byte	0x7
 11499 0a21 EA01     		.2byte	0x1ea
 11500 0a23 81000000 		.4byte	0x81
 11501 0a27 00       		.byte	0
 11502 0a28 12       		.uleb128 0x12
 11503 0a29 4C030000 		.4byte	.LASF66
 11504 0a2d 07       		.byte	0x7
 11505 0a2e EB01     		.2byte	0x1eb
 11506 0a30 F20A0000 		.4byte	0xaf2
 11507 0a34 01       		.byte	0x1
 11508 0a35 11       		.uleb128 0x11
 11509 0a36 636E7400 		.ascii	"cnt\000"
 11510 0a3a 07       		.byte	0x7
 11511 0a3b EC01     		.2byte	0x1ec
 11512 0a3d 2D030000 		.4byte	0x32d
 11513 0a41 10       		.byte	0x10
 11514 0a42 12       		.uleb128 0x12
 11515 0a43 DF020000 		.4byte	.LASF153
 11516 0a47 07       		.byte	0x7
 11517 0a48 ED01     		.2byte	0x1ed
 11518 0a4a 020B0000 		.4byte	0xb02
 11519 0a4e 80       		.byte	0x80
 11520 0a4f 11       		.uleb128 0x11
 11521 0a50 64657600 		.ascii	"dev\000"
 11522 0a54 07       		.byte	0x7
 11523 0a55 EE01     		.2byte	0x1ee
 11524 0a57 0A040000 		.4byte	0x40a
 11525 0a5b A0       		.byte	0xa0
 11526 0a5c 12       		.uleb128 0x12
 11527 0a5d A00F0000 		.4byte	.LASF154
 11528 0a61 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 257


 11529 0a62 EF01     		.2byte	0x1ef
 11530 0a64 120B0000 		.4byte	0xb12
 11531 0a68 B0       		.byte	0xb0
 11532 0a69 14       		.uleb128 0x14
 11533 0a6a 656E6300 		.ascii	"enc\000"
 11534 0a6e 07       		.byte	0x7
 11535 0a6f F001     		.2byte	0x1f0
 11536 0a71 220B0000 		.4byte	0xb22
 11537 0a75 9001     		.2byte	0x190
 11538 0a77 14       		.uleb128 0x14
 11539 0a78 656D6700 		.ascii	"emg\000"
 11540 0a7c 07       		.byte	0x7
 11541 0a7d F101     		.2byte	0x1f1
 11542 0a7f F6060000 		.4byte	0x6f6
 11543 0a83 F001     		.2byte	0x1f0
 11544 0a85 14       		.uleb128 0x14
 11545 0a86 696D7500 		.ascii	"imu\000"
 11546 0a8a 07       		.byte	0x7
 11547 0a8b F201     		.2byte	0x1f2
 11548 0a8d 65070000 		.4byte	0x765
 11549 0a91 0002     		.2byte	0x200
 11550 0a93 14       		.uleb128 0x14
 11551 0a94 65787000 		.ascii	"exp\000"
 11552 0a98 07       		.byte	0x7
 11553 0a99 F301     		.2byte	0x1f3
 11554 0a9b BD070000 		.4byte	0x7bd
 11555 0a9f 2002     		.2byte	0x220
 11556 0aa1 15       		.uleb128 0x15
 11557 0aa2 86000000 		.4byte	.LASF155
 11558 0aa6 07       		.byte	0x7
 11559 0aa7 F401     		.2byte	0x1f4
 11560 0aa9 320B0000 		.4byte	0xb32
 11561 0aad 4002     		.2byte	0x240
 11562 0aaf 14       		.uleb128 0x14
 11563 0ab0 534800   		.ascii	"SH\000"
 11564 0ab3 07       		.byte	0x7
 11565 0ab4 F601     		.2byte	0x1f6
 11566 0ab6 6E080000 		.4byte	0x86e
 11567 0aba A002     		.2byte	0x2a0
 11568 0abc 15       		.uleb128 0x15
 11569 0abd CD000000 		.4byte	.LASF156
 11570 0ac1 07       		.byte	0x7
 11571 0ac2 F701     		.2byte	0x1f7
 11572 0ac4 BD080000 		.4byte	0x8bd
 11573 0ac8 B002     		.2byte	0x2b0
 11574 0aca 14       		.uleb128 0x14
 11575 0acb 4D5300   		.ascii	"MS\000"
 11576 0ace 07       		.byte	0x7
 11577 0acf F801     		.2byte	0x1f8
 11578 0ad1 FF080000 		.4byte	0x8ff
 11579 0ad5 C002     		.2byte	0x2c0
 11580 0ad7 14       		.uleb128 0x14
 11581 0ad8 464200   		.ascii	"FB\000"
 11582 0adb 07       		.byte	0x7
 11583 0adc F901     		.2byte	0x1f9
 11584 0ade 44090000 		.4byte	0x944
 11585 0ae2 D002     		.2byte	0x2d0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 258


 11586 0ae4 14       		.uleb128 0x14
 11587 0ae5 575200   		.ascii	"WR\000"
 11588 0ae8 07       		.byte	0x7
 11589 0ae9 FA01     		.2byte	0x1fa
 11590 0aeb BB090000 		.4byte	0x9bb
 11591 0aef E002     		.2byte	0x2e0
 11592 0af1 00       		.byte	0
 11593 0af2 07       		.uleb128 0x7
 11594 0af3 81000000 		.4byte	0x81
 11595 0af7 020B0000 		.4byte	0xb02
 11596 0afb 08       		.uleb128 0x8
 11597 0afc 0E010000 		.4byte	0x10e
 11598 0b00 0E       		.byte	0xe
 11599 0b01 00       		.byte	0
 11600 0b02 07       		.uleb128 0x7
 11601 0b03 81000000 		.4byte	0x81
 11602 0b07 120B0000 		.4byte	0xb12
 11603 0b0b 08       		.uleb128 0x8
 11604 0b0c 0E010000 		.4byte	0x10e
 11605 0b10 1F       		.byte	0x1f
 11606 0b11 00       		.byte	0
 11607 0b12 07       		.uleb128 0x7
 11608 0b13 A9040000 		.4byte	0x4a9
 11609 0b17 220B0000 		.4byte	0xb22
 11610 0b1b 08       		.uleb128 0x8
 11611 0b1c 0E010000 		.4byte	0x10e
 11612 0b20 01       		.byte	0x1
 11613 0b21 00       		.byte	0
 11614 0b22 07       		.uleb128 0x7
 11615 0b23 43060000 		.4byte	0x643
 11616 0b27 320B0000 		.4byte	0xb32
 11617 0b2b 08       		.uleb128 0x8
 11618 0b2c 0E010000 		.4byte	0x10e
 11619 0b30 01       		.byte	0x1
 11620 0b31 00       		.byte	0
 11621 0b32 07       		.uleb128 0x7
 11622 0b33 39080000 		.4byte	0x839
 11623 0b37 420B0000 		.4byte	0xb42
 11624 0b3b 08       		.uleb128 0x8
 11625 0b3c 0E010000 		.4byte	0x10e
 11626 0b40 02       		.byte	0x2
 11627 0b41 00       		.byte	0
 11628 0b42 10       		.uleb128 0x10
 11629 0b43 380D0000 		.4byte	.LASF157
 11630 0b47 28       		.byte	0x28
 11631 0b48 07       		.byte	0x7
 11632 0b49 0502     		.2byte	0x205
 11633 0b4b 9E0B0000 		.4byte	0xb9e
 11634 0b4f 12       		.uleb128 0x12
 11635 0b50 08050000 		.4byte	.LASF158
 11636 0b54 07       		.byte	0x7
 11637 0b55 0602     		.2byte	0x206
 11638 0b57 81000000 		.4byte	0x81
 11639 0b5b 00       		.byte	0
 11640 0b5c 12       		.uleb128 0x12
 11641 0b5d 59030000 		.4byte	.LASF159
 11642 0b61 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 259


 11643 0b62 0702     		.2byte	0x207
 11644 0b64 9E0B0000 		.4byte	0xb9e
 11645 0b68 02       		.byte	0x2
 11646 0b69 12       		.uleb128 0x12
 11647 0b6a 6D0C0000 		.4byte	.LASF160
 11648 0b6e 07       		.byte	0x7
 11649 0b6f 0802     		.2byte	0x208
 11650 0b71 9E0B0000 		.4byte	0xb9e
 11651 0b75 08       		.byte	0x8
 11652 0b76 12       		.uleb128 0x12
 11653 0b77 440D0000 		.4byte	.LASF161
 11654 0b7b 07       		.byte	0x7
 11655 0b7c 0902     		.2byte	0x209
 11656 0b7e 9E0B0000 		.4byte	0xb9e
 11657 0b82 0E       		.byte	0xe
 11658 0b83 12       		.uleb128 0x12
 11659 0b84 B7080000 		.4byte	.LASF162
 11660 0b88 07       		.byte	0x7
 11661 0b89 0A02     		.2byte	0x20a
 11662 0b8b AE0B0000 		.4byte	0xbae
 11663 0b8f 14       		.byte	0x14
 11664 0b90 12       		.uleb128 0x12
 11665 0b91 D9010000 		.4byte	.LASF163
 11666 0b95 07       		.byte	0x7
 11667 0b96 0B02     		.2byte	0x20b
 11668 0b98 B1000000 		.4byte	0xb1
 11669 0b9c 24       		.byte	0x24
 11670 0b9d 00       		.byte	0
 11671 0b9e 07       		.uleb128 0x7
 11672 0b9f B1000000 		.4byte	0xb1
 11673 0ba3 AE0B0000 		.4byte	0xbae
 11674 0ba7 08       		.uleb128 0x8
 11675 0ba8 0E010000 		.4byte	0x10e
 11676 0bac 02       		.byte	0x2
 11677 0bad 00       		.byte	0
 11678 0bae 07       		.uleb128 0x7
 11679 0baf D5000000 		.4byte	0xd5
 11680 0bb3 BE0B0000 		.4byte	0xbbe
 11681 0bb7 08       		.uleb128 0x8
 11682 0bb8 0E010000 		.4byte	0x10e
 11683 0bbc 03       		.byte	0x3
 11684 0bbd 00       		.byte	0
 11685 0bbe 10       		.uleb128 0x10
 11686 0bbf 1C130000 		.4byte	.LASF164
 11687 0bc3 08       		.byte	0x8
 11688 0bc4 07       		.byte	0x7
 11689 0bc5 1202     		.2byte	0x212
 11690 0bc7 E60B0000 		.4byte	0xbe6
 11691 0bcb 12       		.uleb128 0x12
 11692 0bcc 0B060000 		.4byte	.LASF165
 11693 0bd0 07       		.byte	0x7
 11694 0bd1 1302     		.2byte	0x213
 11695 0bd3 BD000000 		.4byte	0xbd
 11696 0bd7 00       		.byte	0
 11697 0bd8 12       		.uleb128 0x12
 11698 0bd9 1F020000 		.4byte	.LASF166
 11699 0bdd 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 260


 11700 0bde 1402     		.2byte	0x214
 11701 0be0 BD000000 		.4byte	0xbd
 11702 0be4 04       		.byte	0x4
 11703 0be5 00       		.byte	0
 11704 0be6 10       		.uleb128 0x10
 11705 0be7 29040000 		.4byte	.LASF167
 11706 0beb 06       		.byte	0x6
 11707 0bec 07       		.byte	0x7
 11708 0bed 1B02     		.2byte	0x21b
 11709 0bef 280C0000 		.4byte	0xc28
 11710 0bf3 12       		.uleb128 0x12
 11711 0bf4 01080000 		.4byte	.LASF168
 11712 0bf8 07       		.byte	0x7
 11713 0bf9 1C02     		.2byte	0x21c
 11714 0bfb 81000000 		.4byte	0x81
 11715 0bff 00       		.byte	0
 11716 0c00 12       		.uleb128 0x12
 11717 0c01 38130000 		.4byte	.LASF169
 11718 0c05 07       		.byte	0x7
 11719 0c06 1D02     		.2byte	0x21d
 11720 0c08 81000000 		.4byte	0x81
 11721 0c0c 01       		.byte	0x1
 11722 0c0d 12       		.uleb128 0x12
 11723 0c0e AC060000 		.4byte	.LASF170
 11724 0c12 07       		.byte	0x7
 11725 0c13 1E02     		.2byte	0x21e
 11726 0c15 B1000000 		.4byte	0xb1
 11727 0c19 02       		.byte	0x2
 11728 0c1a 12       		.uleb128 0x12
 11729 0c1b 980A0000 		.4byte	.LASF171
 11730 0c1f 07       		.byte	0x7
 11731 0c20 1F02     		.2byte	0x21f
 11732 0c22 B1000000 		.4byte	0xb1
 11733 0c26 04       		.byte	0x4
 11734 0c27 00       		.byte	0
 11735 0c28 16       		.uleb128 0x16
 11736 0c29 01       		.byte	0x1
 11737 0c2a 2C000000 		.4byte	0x2c
 11738 0c2e 07       		.byte	0x7
 11739 0c2f 2302     		.2byte	0x223
 11740 0c31 5A0C0000 		.4byte	0xc5a
 11741 0c35 0A       		.uleb128 0xa
 11742 0c36 28060000 		.4byte	.LASF172
 11743 0c3a 00       		.byte	0
 11744 0c3b 0A       		.uleb128 0xa
 11745 0c3c 100E0000 		.4byte	.LASF173
 11746 0c40 01       		.byte	0x1
 11747 0c41 0A       		.uleb128 0xa
 11748 0c42 0A0C0000 		.4byte	.LASF174
 11749 0c46 02       		.byte	0x2
 11750 0c47 0A       		.uleb128 0xa
 11751 0c48 82020000 		.4byte	.LASF175
 11752 0c4c 03       		.byte	0x3
 11753 0c4d 0A       		.uleb128 0xa
 11754 0c4e CE0A0000 		.4byte	.LASF176
 11755 0c52 04       		.byte	0x4
 11756 0c53 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 261


 11757 0c54 AE0D0000 		.4byte	.LASF177
 11758 0c58 05       		.byte	0x5
 11759 0c59 00       		.byte	0
 11760 0c5a 05       		.uleb128 0x5
 11761 0c5b B2050000 		.4byte	.LASF178
 11762 0c5f 07       		.byte	0x7
 11763 0c60 2B02     		.2byte	0x22b
 11764 0c62 280C0000 		.4byte	0xc28
 11765 0c66 16       		.uleb128 0x16
 11766 0c67 01       		.byte	0x1
 11767 0c68 2C000000 		.4byte	0x2c
 11768 0c6c 07       		.byte	0x7
 11769 0c6d 2D02     		.2byte	0x22d
 11770 0c6f 920C0000 		.4byte	0xc92
 11771 0c73 0A       		.uleb128 0xa
 11772 0c74 CC010000 		.4byte	.LASF179
 11773 0c78 00       		.byte	0
 11774 0c79 0A       		.uleb128 0xa
 11775 0c7a 25080000 		.4byte	.LASF180
 11776 0c7e 01       		.byte	0x1
 11777 0c7f 0A       		.uleb128 0xa
 11778 0c80 D0080000 		.4byte	.LASF181
 11779 0c84 02       		.byte	0x2
 11780 0c85 0A       		.uleb128 0xa
 11781 0c86 C3030000 		.4byte	.LASF182
 11782 0c8a 03       		.byte	0x3
 11783 0c8b 0A       		.uleb128 0xa
 11784 0c8c F5120000 		.4byte	.LASF183
 11785 0c90 04       		.byte	0x4
 11786 0c91 00       		.byte	0
 11787 0c92 05       		.uleb128 0x5
 11788 0c93 F60E0000 		.4byte	.LASF184
 11789 0c97 07       		.byte	0x7
 11790 0c98 3402     		.2byte	0x234
 11791 0c9a 660C0000 		.4byte	0xc66
 11792 0c9e 17       		.uleb128 0x17
 11793 0c9f E6050000 		.4byte	.LASF185
 11794 0ca3 01       		.byte	0x1
 11795 0ca4 62       		.byte	0x62
 11796 0ca5 00000000 		.4byte	.LFB64
 11797 0ca9 18000000 		.4byte	.LFE64-.LFB64
 11798 0cad 01       		.uleb128 0x1
 11799 0cae 9C       		.byte	0x9c
 11800 0caf 17       		.uleb128 0x17
 11801 0cb0 7C110000 		.4byte	.LASF186
 11802 0cb4 01       		.byte	0x1
 11803 0cb5 6D       		.byte	0x6d
 11804 0cb6 00000000 		.4byte	.LFB65
 11805 0cba 20000000 		.4byte	.LFE65-.LFB65
 11806 0cbe 01       		.uleb128 0x1
 11807 0cbf 9C       		.byte	0x9c
 11808 0cc0 18       		.uleb128 0x18
 11809 0cc1 4C0A0000 		.4byte	.LASF218
 11810 0cc5 01       		.byte	0x1
 11811 0cc6 86       		.byte	0x86
 11812 0cc7 00000000 		.4byte	.LFB66
 11813 0ccb 0C020000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 262


 11814 0ccf 01       		.uleb128 0x1
 11815 0cd0 9C       		.byte	0x9c
 11816 0cd1 550D0000 		.4byte	0xd55
 11817 0cd5 19       		.uleb128 0x19
 11818 0cd6 FA000000 		.4byte	.LASF187
 11819 0cda 01       		.byte	0x1
 11820 0cdb 8B       		.byte	0x8b
 11821 0cdc 81000000 		.4byte	0x81
 11822 0ce0 05       		.uleb128 0x5
 11823 0ce1 03       		.byte	0x3
 11824 0ce2 00000000 		.4byte	state.10225
 11825 0ce6 19       		.uleb128 0x19
 11826 0ce7 D1060000 		.4byte	.LASF188
 11827 0ceb 01       		.byte	0x1
 11828 0cec 8E       		.byte	0x8e
 11829 0ced 81000000 		.4byte	0x81
 11830 0cf1 05       		.uleb128 0x5
 11831 0cf2 03       		.byte	0x3
 11832 0cf3 08000000 		.4byte	data_packet_index.10226
 11833 0cf7 19       		.uleb128 0x19
 11834 0cf8 770D0000 		.4byte	.LASF189
 11835 0cfc 01       		.byte	0x1
 11836 0cfd 8F       		.byte	0x8f
 11837 0cfe 81000000 		.4byte	0x81
 11838 0d02 05       		.uleb128 0x5
 11839 0d03 03       		.byte	0x3
 11840 0d04 07000000 		.4byte	data_packet_length.10227
 11841 0d08 19       		.uleb128 0x19
 11842 0d09 E3060000 		.4byte	.LASF190
 11843 0d0d 01       		.byte	0x1
 11844 0d0e 90       		.byte	0x90
 11845 0d0f 1D030000 		.4byte	0x31d
 11846 0d13 05       		.uleb128 0x5
 11847 0d14 03       		.byte	0x3
 11848 0d15 0C000000 		.4byte	data_packet_buffer.10228
 11849 0d19 19       		.uleb128 0x19
 11850 0d1a 7C0B0000 		.4byte	.LASF191
 11851 0d1e 01       		.byte	0x1
 11852 0d1f 91       		.byte	0x91
 11853 0d20 99040000 		.4byte	0x499
 11854 0d24 05       		.uleb128 0x5
 11855 0d25 03       		.byte	0x3
 11856 0d26 04000000 		.4byte	rx_queue.10229
 11857 0d2a 19       		.uleb128 0x19
 11858 0d2b 91010000 		.4byte	.LASF192
 11859 0d2f 01       		.byte	0x1
 11860 0d30 94       		.byte	0x94
 11861 0d31 81000000 		.4byte	0x81
 11862 0d35 02       		.uleb128 0x2
 11863 0d36 91       		.byte	0x91
 11864 0d37 75       		.sleb128 -11
 11865 0d38 19       		.uleb128 0x19
 11866 0d39 96060000 		.4byte	.LASF193
 11867 0d3d 01       		.byte	0x1
 11868 0d3e 95       		.byte	0x95
 11869 0d3f 81000000 		.4byte	0x81
 11870 0d43 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 263


 11871 0d44 91       		.byte	0x91
 11872 0d45 77       		.sleb128 -9
 11873 0d46 19       		.uleb128 0x19
 11874 0d47 DE070000 		.4byte	.LASF194
 11875 0d4b 01       		.byte	0x1
 11876 0d4c 96       		.byte	0x96
 11877 0d4d 81000000 		.4byte	0x81
 11878 0d51 02       		.uleb128 0x2
 11879 0d52 91       		.byte	0x91
 11880 0d53 76       		.sleb128 -10
 11881 0d54 00       		.byte	0
 11882 0d55 1A       		.uleb128 0x1a
 11883 0d56 C00F0000 		.4byte	.LASF201
 11884 0d5a 01       		.byte	0x1
 11885 0d5b 0C01     		.2byte	0x10c
 11886 0d5d 00000000 		.4byte	.LFB67
 11887 0d61 9C040000 		.4byte	.LFE67-.LFB67
 11888 0d65 01       		.uleb128 0x1
 11889 0d66 9C       		.byte	0x9c
 11890 0d67 D90D0000 		.4byte	0xdd9
 11891 0d6b 1B       		.uleb128 0x1b
 11892 0d6c 0D070000 		.4byte	.LASF195
 11893 0d70 01       		.byte	0x1
 11894 0d71 0E01     		.2byte	0x10e
 11895 0d73 8D000000 		.4byte	0x8d
 11896 0d77 05       		.uleb128 0x5
 11897 0d78 03       		.byte	0x3
 11898 0d79 00000000 		.4byte	counter_calibration.10245
 11899 0d7d 1B       		.uleb128 0x1b
 11900 0d7e C10C0000 		.4byte	.LASF196
 11901 0d82 01       		.byte	0x1
 11902 0d83 0F01     		.2byte	0x10f
 11903 0d85 8D000000 		.4byte	0x8d
 11904 0d89 05       		.uleb128 0x5
 11905 0d8a 03       		.byte	0x3
 11906 0d8b 02000000 		.4byte	counter_tension_func.10246
 11907 0d8f 1B       		.uleb128 0x1b
 11908 0d90 A8010000 		.4byte	.LASF197
 11909 0d94 01       		.byte	0x1
 11910 0d95 1001     		.2byte	0x110
 11911 0d97 D90D0000 		.4byte	0xdd9
 11912 0d9b 03       		.uleb128 0x3
 11913 0d9c 91       		.byte	0x91
 11914 0d9d A86C     		.sleb128 -2520
 11915 0d9f 1B       		.uleb128 0x1b
 11916 0da0 A40C0000 		.4byte	.LASF198
 11917 0da4 01       		.byte	0x1
 11918 0da5 1201     		.2byte	0x112
 11919 0da7 81000000 		.4byte	0x81
 11920 0dab 02       		.uleb128 0x2
 11921 0dac 91       		.byte	0x91
 11922 0dad 6F       		.sleb128 -17
 11923 0dae 1B       		.uleb128 0x1b
 11924 0daf 090A0000 		.4byte	.LASF199
 11925 0db3 01       		.byte	0x1
 11926 0db4 1301     		.2byte	0x113
 11927 0db6 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 264


 11928 0dba 02       		.uleb128 0x2
 11929 0dbb 91       		.byte	0x91
 11930 0dbc 6E       		.sleb128 -18
 11931 0dbd 1C       		.uleb128 0x1c
 11932 0dbe 68020000 		.4byte	.LBB2
 11933 0dc2 50000000 		.4byte	.LBE2-.LBB2
 11934 0dc6 1B       		.uleb128 0x1b
 11935 0dc7 ED020000 		.4byte	.LASF200
 11936 0dcb 01       		.byte	0x1
 11937 0dcc CA01     		.2byte	0x1ca
 11938 0dce EA0D0000 		.4byte	0xdea
 11939 0dd2 04       		.uleb128 0x4
 11940 0dd3 91       		.byte	0x91
 11941 0dd4 90F77E   		.sleb128 -17520
 11942 0dd7 00       		.byte	0
 11943 0dd8 00       		.byte	0
 11944 0dd9 07       		.uleb128 0x7
 11945 0dda E3000000 		.4byte	0xe3
 11946 0dde EA0D0000 		.4byte	0xdea
 11947 0de2 1D       		.uleb128 0x1d
 11948 0de3 0E010000 		.4byte	0x10e
 11949 0de7 C309     		.2byte	0x9c3
 11950 0de9 00       		.byte	0
 11951 0dea 07       		.uleb128 0x7
 11952 0deb E3000000 		.4byte	0xe3
 11953 0def FB0D0000 		.4byte	0xdfb
 11954 0df3 1D       		.uleb128 0x1d
 11955 0df4 0E010000 		.4byte	0x10e
 11956 0df8 973A     		.2byte	0x3a97
 11957 0dfa 00       		.byte	0
 11958 0dfb 1A       		.uleb128 0x1a
 11959 0dfc D30F0000 		.4byte	.LASF202
 11960 0e00 01       		.byte	0x1
 11961 0e01 1E02     		.2byte	0x21e
 11962 0e03 00000000 		.4byte	.LFB68
 11963 0e07 CC050000 		.4byte	.LFE68-.LFB68
 11964 0e0b 01       		.uleb128 0x1
 11965 0e0c 9C       		.byte	0x9c
 11966 0e0d B10E0000 		.4byte	0xeb1
 11967 0e11 1E       		.uleb128 0x1e
 11968 0e12 91080000 		.4byte	.LASF203
 11969 0e16 01       		.byte	0x1
 11970 0e17 1E02     		.2byte	0x21e
 11971 0e19 81000000 		.4byte	0x81
 11972 0e1d 02       		.uleb128 0x2
 11973 0e1e 91       		.byte	0x91
 11974 0e1f 5F       		.sleb128 -33
 11975 0e20 1E       		.uleb128 0x1e
 11976 0e21 F6060000 		.4byte	.LASF204
 11977 0e25 01       		.byte	0x1
 11978 0e26 1E02     		.2byte	0x21e
 11979 0e28 B10E0000 		.4byte	0xeb1
 11980 0e2c 02       		.uleb128 0x2
 11981 0e2d 91       		.byte	0x91
 11982 0e2e 58       		.sleb128 -40
 11983 0e2f 1E       		.uleb128 0x1e
 11984 0e30 2E120000 		.4byte	.LASF205
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 265


 11985 0e34 01       		.byte	0x1
 11986 0e35 1E02     		.2byte	0x21e
 11987 0e37 B10E0000 		.4byte	0xeb1
 11988 0e3b 02       		.uleb128 0x2
 11989 0e3c 91       		.byte	0x91
 11990 0e3d 54       		.sleb128 -44
 11991 0e3e 1B       		.uleb128 0x1b
 11992 0e3f 0E050000 		.4byte	.LASF206
 11993 0e43 01       		.byte	0x1
 11994 0e44 2002     		.2byte	0x220
 11995 0e46 BD000000 		.4byte	0xbd
 11996 0e4a 02       		.uleb128 0x2
 11997 0e4b 91       		.byte	0x91
 11998 0e4c 74       		.sleb128 -12
 11999 0e4d 1B       		.uleb128 0x1b
 12000 0e4e 32040000 		.4byte	.LASF207
 12001 0e52 01       		.byte	0x1
 12002 0e53 2102     		.2byte	0x221
 12003 0e55 BD000000 		.4byte	0xbd
 12004 0e59 02       		.uleb128 0x2
 12005 0e5a 91       		.byte	0x91
 12006 0e5b 68       		.sleb128 -24
 12007 0e5c 1B       		.uleb128 0x1b
 12008 0e5d 3C040000 		.4byte	.LASF208
 12009 0e61 01       		.byte	0x1
 12010 0e62 2102     		.2byte	0x221
 12011 0e64 BD000000 		.4byte	0xbd
 12012 0e68 02       		.uleb128 0x2
 12013 0e69 91       		.byte	0x91
 12014 0e6a 64       		.sleb128 -28
 12015 0e6b 1F       		.uleb128 0x1f
 12016 0e6c 4D4F5400 		.ascii	"MOT\000"
 12017 0e70 01       		.byte	0x1
 12018 0e71 2202     		.2byte	0x222
 12019 0e73 B70E0000 		.4byte	0xeb7
 12020 0e77 02       		.uleb128 0x2
 12021 0e78 91       		.byte	0x91
 12022 0e79 70       		.sleb128 -16
 12023 0e7a 1B       		.uleb128 0x1b
 12024 0e7b F9110000 		.4byte	.LASF209
 12025 0e7f 01       		.byte	0x1
 12026 0e80 2302     		.2byte	0x223
 12027 0e82 81000000 		.4byte	0x81
 12028 0e86 02       		.uleb128 0x2
 12029 0e87 91       		.byte	0x91
 12030 0e88 6F       		.sleb128 -17
 12031 0e89 1B       		.uleb128 0x1b
 12032 0e8a 700B0000 		.4byte	.LASF210
 12033 0e8e 01       		.byte	0x1
 12034 0e8f 2502     		.2byte	0x225
 12035 0e91 55070000 		.4byte	0x755
 12036 0e95 05       		.uleb128 0x5
 12037 0e96 03       		.byte	0x3
 12038 0e97 8C000000 		.4byte	current_emg.10261
 12039 0e9b 20       		.uleb128 0x20
 12040 0e9c 00000000 		.4byte	.Ldebug_ranges0+0
 12041 0ea0 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 266


 12042 0ea1 F0000000 		.4byte	.LASF211
 12043 0ea5 01       		.byte	0x1
 12044 0ea6 4A02     		.2byte	0x24a
 12045 0ea8 BD000000 		.4byte	0xbd
 12046 0eac 02       		.uleb128 0x2
 12047 0ead 91       		.byte	0x91
 12048 0eae 60       		.sleb128 -32
 12049 0eaf 00       		.byte	0
 12050 0eb0 00       		.byte	0
 12051 0eb1 0C       		.uleb128 0xc
 12052 0eb2 04       		.byte	0x4
 12053 0eb3 A5010000 		.4byte	0x1a5
 12054 0eb7 0C       		.uleb128 0xc
 12055 0eb8 04       		.byte	0x4
 12056 0eb9 A9040000 		.4byte	0x4a9
 12057 0ebd 21       		.uleb128 0x21
 12058 0ebe 3D110000 		.4byte	.LASF212
 12059 0ec2 01       		.byte	0x1
 12060 0ec3 FD02     		.2byte	0x2fd
 12061 0ec5 00000000 		.4byte	.LFB69
 12062 0ec9 34030000 		.4byte	.LFE69-.LFB69
 12063 0ecd 01       		.uleb128 0x1
 12064 0ece 9C       		.byte	0x9c
 12065 0ecf 4D0F0000 		.4byte	0xf4d
 12066 0ed3 1E       		.uleb128 0x1e
 12067 0ed4 91080000 		.4byte	.LASF203
 12068 0ed8 01       		.byte	0x1
 12069 0ed9 FD02     		.2byte	0x2fd
 12070 0edb 81000000 		.4byte	0x81
 12071 0edf 02       		.uleb128 0x2
 12072 0ee0 91       		.byte	0x91
 12073 0ee1 67       		.sleb128 -25
 12074 0ee2 1E       		.uleb128 0x1e
 12075 0ee3 F6060000 		.4byte	.LASF204
 12076 0ee7 01       		.byte	0x1
 12077 0ee8 FD02     		.2byte	0x2fd
 12078 0eea B10E0000 		.4byte	0xeb1
 12079 0eee 02       		.uleb128 0x2
 12080 0eef 91       		.byte	0x91
 12081 0ef0 60       		.sleb128 -32
 12082 0ef1 1E       		.uleb128 0x1e
 12083 0ef2 2E120000 		.4byte	.LASF205
 12084 0ef6 01       		.byte	0x1
 12085 0ef7 FD02     		.2byte	0x2fd
 12086 0ef9 B10E0000 		.4byte	0xeb1
 12087 0efd 02       		.uleb128 0x2
 12088 0efe 91       		.byte	0x91
 12089 0eff 5C       		.sleb128 -36
 12090 0f00 22       		.uleb128 0x22
 12091 0f01 18000000 		.4byte	.Ldebug_ranges0+0x18
 12092 0f05 280F0000 		.4byte	0xf28
 12093 0f09 1B       		.uleb128 0x1b
 12094 0f0a F0000000 		.4byte	.LASF211
 12095 0f0e 01       		.byte	0x1
 12096 0f0f 0403     		.2byte	0x304
 12097 0f11 BD000000 		.4byte	0xbd
 12098 0f15 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 267


 12099 0f16 91       		.byte	0x91
 12100 0f17 74       		.sleb128 -12
 12101 0f18 1B       		.uleb128 0x1b
 12102 0f19 F7010000 		.4byte	.LASF213
 12103 0f1d 01       		.byte	0x1
 12104 0f1e 0503     		.2byte	0x305
 12105 0f20 BD000000 		.4byte	0xbd
 12106 0f24 02       		.uleb128 0x2
 12107 0f25 91       		.byte	0x91
 12108 0f26 70       		.sleb128 -16
 12109 0f27 00       		.byte	0
 12110 0f28 20       		.uleb128 0x20
 12111 0f29 30000000 		.4byte	.Ldebug_ranges0+0x30
 12112 0f2d 1B       		.uleb128 0x1b
 12113 0f2e DF0D0000 		.4byte	.LASF214
 12114 0f32 01       		.byte	0x1
 12115 0f33 2A03     		.2byte	0x32a
 12116 0f35 BD000000 		.4byte	0xbd
 12117 0f39 02       		.uleb128 0x2
 12118 0f3a 91       		.byte	0x91
 12119 0f3b 6C       		.sleb128 -20
 12120 0f3c 1B       		.uleb128 0x1b
 12121 0f3d 440A0000 		.4byte	.LASF215
 12122 0f41 01       		.byte	0x1
 12123 0f42 2B03     		.2byte	0x32b
 12124 0f44 BD000000 		.4byte	0xbd
 12125 0f48 02       		.uleb128 0x2
 12126 0f49 91       		.byte	0x91
 12127 0f4a 68       		.sleb128 -24
 12128 0f4b 00       		.byte	0
 12129 0f4c 00       		.byte	0
 12130 0f4d 1A       		.uleb128 0x1a
 12131 0f4e 700A0000 		.4byte	.LASF216
 12132 0f52 01       		.byte	0x1
 12133 0f53 5603     		.2byte	0x356
 12134 0f55 00000000 		.4byte	.LFB70
 12135 0f59 B0010000 		.4byte	.LFE70-.LFB70
 12136 0f5d 01       		.uleb128 0x1
 12137 0f5e 9C       		.byte	0x9c
 12138 0f5f C10F0000 		.4byte	0xfc1
 12139 0f63 1E       		.uleb128 0x1e
 12140 0f64 91080000 		.4byte	.LASF203
 12141 0f68 01       		.byte	0x1
 12142 0f69 5603     		.2byte	0x356
 12143 0f6b 81000000 		.4byte	0x81
 12144 0f6f 02       		.uleb128 0x2
 12145 0f70 91       		.byte	0x91
 12146 0f71 77       		.sleb128 -9
 12147 0f72 1E       		.uleb128 0x1e
 12148 0f73 F6060000 		.4byte	.LASF204
 12149 0f77 01       		.byte	0x1
 12150 0f78 5603     		.2byte	0x356
 12151 0f7a B10E0000 		.4byte	0xeb1
 12152 0f7e 02       		.uleb128 0x2
 12153 0f7f 91       		.byte	0x91
 12154 0f80 70       		.sleb128 -16
 12155 0f81 1E       		.uleb128 0x1e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 268


 12156 0f82 2E120000 		.4byte	.LASF205
 12157 0f86 01       		.byte	0x1
 12158 0f87 5603     		.2byte	0x356
 12159 0f89 B10E0000 		.4byte	0xeb1
 12160 0f8d 02       		.uleb128 0x2
 12161 0f8e 91       		.byte	0x91
 12162 0f8f 6C       		.sleb128 -20
 12163 0f90 1E       		.uleb128 0x1e
 12164 0f91 32040000 		.4byte	.LASF207
 12165 0f95 01       		.byte	0x1
 12166 0f96 5703     		.2byte	0x357
 12167 0f98 BD000000 		.4byte	0xbd
 12168 0f9c 02       		.uleb128 0x2
 12169 0f9d 91       		.byte	0x91
 12170 0f9e 68       		.sleb128 -24
 12171 0f9f 1E       		.uleb128 0x1e
 12172 0fa0 3C040000 		.4byte	.LASF208
 12173 0fa4 01       		.byte	0x1
 12174 0fa5 5703     		.2byte	0x357
 12175 0fa7 BD000000 		.4byte	0xbd
 12176 0fab 02       		.uleb128 0x2
 12177 0fac 91       		.byte	0x91
 12178 0fad 00       		.sleb128 0
 12179 0fae 1B       		.uleb128 0x1b
 12180 0faf E10C0000 		.4byte	.LASF217
 12181 0fb3 01       		.byte	0x1
 12182 0fb4 5A03     		.2byte	0x35a
 12183 0fb6 81000000 		.4byte	0x81
 12184 0fba 05       		.uleb128 0x5
 12185 0fbb 03       		.byte	0x3
 12186 0fbc 8E000000 		.4byte	fsm_state.10298
 12187 0fc0 00       		.byte	0
 12188 0fc1 23       		.uleb128 0x23
 12189 0fc2 2F060000 		.4byte	.LASF219
 12190 0fc6 01       		.byte	0x1
 12191 0fc7 8C03     		.2byte	0x38c
 12192 0fc9 00000000 		.4byte	.LFB71
 12193 0fcd 0C070000 		.4byte	.LFE71-.LFB71
 12194 0fd1 01       		.uleb128 0x1
 12195 0fd2 9C       		.byte	0x9c
 12196 0fd3 78110000 		.4byte	0x1178
 12197 0fd7 1B       		.uleb128 0x1b
 12198 0fd8 4B010000 		.4byte	.LASF220
 12199 0fdc 01       		.byte	0x1
 12200 0fdd 8E03     		.2byte	0x38e
 12201 0fdf BD000000 		.4byte	0xbd
 12202 0fe3 02       		.uleb128 0x2
 12203 0fe4 91       		.byte	0x91
 12204 0fe5 74       		.sleb128 -12
 12205 0fe6 1B       		.uleb128 0x1b
 12206 0fe7 630C0000 		.4byte	.LASF221
 12207 0feb 01       		.byte	0x1
 12208 0fec 8F03     		.2byte	0x38f
 12209 0fee BD000000 		.4byte	0xbd
 12210 0ff2 03       		.uleb128 0x3
 12211 0ff3 91       		.byte	0x91
 12212 0ff4 B07F     		.sleb128 -80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 269


 12213 0ff6 1B       		.uleb128 0x1b
 12214 0ff7 0A110000 		.4byte	.LASF222
 12215 0ffb 01       		.byte	0x1
 12216 0ffc 9003     		.2byte	0x390
 12217 0ffe BD000000 		.4byte	0xbd
 12218 1002 03       		.uleb128 0x3
 12219 1003 91       		.byte	0x91
 12220 1004 AC7F     		.sleb128 -84
 12221 1006 1B       		.uleb128 0x1b
 12222 1007 A70B0000 		.4byte	.LASF223
 12223 100b 01       		.byte	0x1
 12224 100c 9103     		.2byte	0x391
 12225 100e BD000000 		.4byte	0xbd
 12226 1012 02       		.uleb128 0x2
 12227 1013 91       		.byte	0x91
 12228 1014 70       		.sleb128 -16
 12229 1015 1B       		.uleb128 0x1b
 12230 1016 A40C0000 		.4byte	.LASF198
 12231 101a 01       		.byte	0x1
 12232 101b 9303     		.2byte	0x393
 12233 101d 81000000 		.4byte	0x81
 12234 1021 02       		.uleb128 0x2
 12235 1022 91       		.byte	0x91
 12236 1023 6F       		.sleb128 -17
 12237 1024 1B       		.uleb128 0x1b
 12238 1025 8B030000 		.4byte	.LASF224
 12239 1029 01       		.byte	0x1
 12240 102a 9503     		.2byte	0x395
 12241 102c B70E0000 		.4byte	0xeb7
 12242 1030 02       		.uleb128 0x2
 12243 1031 91       		.byte	0x91
 12244 1032 68       		.sleb128 -24
 12245 1033 1B       		.uleb128 0x1b
 12246 1034 FF020000 		.4byte	.LASF225
 12247 1038 01       		.byte	0x1
 12248 1039 9603     		.2byte	0x396
 12249 103b 81000000 		.4byte	0x81
 12250 103f 02       		.uleb128 0x2
 12251 1040 91       		.byte	0x91
 12252 1041 67       		.sleb128 -25
 12253 1042 1F       		.uleb128 0x1f
 12254 1043 6B5F7000 		.ascii	"k_p\000"
 12255 1047 01       		.byte	0x1
 12256 1048 9803     		.2byte	0x398
 12257 104a BD000000 		.4byte	0xbd
 12258 104e 02       		.uleb128 0x2
 12259 104f 91       		.byte	0x91
 12260 1050 60       		.sleb128 -32
 12261 1051 1F       		.uleb128 0x1f
 12262 1052 6B5F6900 		.ascii	"k_i\000"
 12263 1056 01       		.byte	0x1
 12264 1057 9903     		.2byte	0x399
 12265 1059 BD000000 		.4byte	0xbd
 12266 105d 02       		.uleb128 0x2
 12267 105e 91       		.byte	0x91
 12268 105f 5C       		.sleb128 -36
 12269 1060 1F       		.uleb128 0x1f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 270


 12270 1061 6B5F6400 		.ascii	"k_d\000"
 12271 1065 01       		.byte	0x1
 12272 1066 9A03     		.2byte	0x39a
 12273 1068 BD000000 		.4byte	0xbd
 12274 106c 02       		.uleb128 0x2
 12275 106d 91       		.byte	0x91
 12276 106e 58       		.sleb128 -40
 12277 106f 1B       		.uleb128 0x1b
 12278 1070 8A0D0000 		.4byte	.LASF77
 12279 1074 01       		.byte	0x1
 12280 1075 9C03     		.2byte	0x39c
 12281 1077 BD000000 		.4byte	0xbd
 12282 107b 02       		.uleb128 0x2
 12283 107c 91       		.byte	0x91
 12284 107d 54       		.sleb128 -44
 12285 107e 1B       		.uleb128 0x1b
 12286 107f CF050000 		.4byte	.LASF78
 12287 1083 01       		.byte	0x1
 12288 1084 9D03     		.2byte	0x39d
 12289 1086 BD000000 		.4byte	0xbd
 12290 108a 02       		.uleb128 0x2
 12291 108b 91       		.byte	0x91
 12292 108c 50       		.sleb128 -48
 12293 108d 1B       		.uleb128 0x1b
 12294 108e A0050000 		.4byte	.LASF79
 12295 1092 01       		.byte	0x1
 12296 1093 9E03     		.2byte	0x39e
 12297 1095 BD000000 		.4byte	0xbd
 12298 1099 02       		.uleb128 0x2
 12299 109a 91       		.byte	0x91
 12300 109b 4C       		.sleb128 -52
 12301 109c 1B       		.uleb128 0x1b
 12302 109d 73100000 		.4byte	.LASF80
 12303 10a1 01       		.byte	0x1
 12304 10a2 A003     		.2byte	0x3a0
 12305 10a4 BD000000 		.4byte	0xbd
 12306 10a8 02       		.uleb128 0x2
 12307 10a9 91       		.byte	0x91
 12308 10aa 48       		.sleb128 -56
 12309 10ab 1B       		.uleb128 0x1b
 12310 10ac 7F060000 		.4byte	.LASF81
 12311 10b0 01       		.byte	0x1
 12312 10b1 A103     		.2byte	0x3a1
 12313 10b3 BD000000 		.4byte	0xbd
 12314 10b7 02       		.uleb128 0x2
 12315 10b8 91       		.byte	0x91
 12316 10b9 44       		.sleb128 -60
 12317 10ba 1B       		.uleb128 0x1b
 12318 10bb 820F0000 		.4byte	.LASF82
 12319 10bf 01       		.byte	0x1
 12320 10c0 A203     		.2byte	0x3a2
 12321 10c2 BD000000 		.4byte	0xbd
 12322 10c6 02       		.uleb128 0x2
 12323 10c7 91       		.byte	0x91
 12324 10c8 40       		.sleb128 -64
 12325 10c9 1B       		.uleb128 0x1b
 12326 10ca 8D060000 		.4byte	.LASF83
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 271


 12327 10ce 01       		.byte	0x1
 12328 10cf A403     		.2byte	0x3a4
 12329 10d1 BD000000 		.4byte	0xbd
 12330 10d5 03       		.uleb128 0x3
 12331 10d6 91       		.byte	0x91
 12332 10d7 BC7F     		.sleb128 -68
 12333 10d9 1B       		.uleb128 0x1b
 12334 10da D5070000 		.4byte	.LASF84
 12335 10de 01       		.byte	0x1
 12336 10df A503     		.2byte	0x3a5
 12337 10e1 BD000000 		.4byte	0xbd
 12338 10e5 03       		.uleb128 0x3
 12339 10e6 91       		.byte	0x91
 12340 10e7 B87F     		.sleb128 -72
 12341 10e9 1B       		.uleb128 0x1b
 12342 10ea 2F130000 		.4byte	.LASF85
 12343 10ee 01       		.byte	0x1
 12344 10ef A603     		.2byte	0x3a6
 12345 10f1 BD000000 		.4byte	0xbd
 12346 10f5 03       		.uleb128 0x3
 12347 10f6 91       		.byte	0x91
 12348 10f7 B47F     		.sleb128 -76
 12349 10f9 1B       		.uleb128 0x1b
 12350 10fa 46060000 		.4byte	.LASF226
 12351 10fe 01       		.byte	0x1
 12352 10ff AA03     		.2byte	0x3aa
 12353 1101 BD000000 		.4byte	0xbd
 12354 1105 05       		.uleb128 0x5
 12355 1106 03       		.byte	0x3
 12356 1107 90000000 		.4byte	pos_error_sum.10325
 12357 110b 1B       		.uleb128 0x1b
 12358 110c 7A040000 		.4byte	.LASF227
 12359 1110 01       		.byte	0x1
 12360 1111 AB03     		.2byte	0x3ab
 12361 1113 BD000000 		.4byte	0xbd
 12362 1117 05       		.uleb128 0x5
 12363 1118 03       		.byte	0x3
 12364 1119 9C000000 		.4byte	curr_error_sum.10326
 12365 111d 1B       		.uleb128 0x1b
 12366 111e 120C0000 		.4byte	.LASF228
 12367 1122 01       		.byte	0x1
 12368 1123 AD03     		.2byte	0x3ad
 12369 1125 BD000000 		.4byte	0xbd
 12370 1129 05       		.uleb128 0x5
 12371 112a 03       		.byte	0x3
 12372 112b 94000000 		.4byte	prev_pos_err.10327
 12373 112f 1B       		.uleb128 0x1b
 12374 1130 690D0000 		.4byte	.LASF229
 12375 1134 01       		.byte	0x1
 12376 1135 AE03     		.2byte	0x3ae
 12377 1137 BD000000 		.4byte	0xbd
 12378 113b 05       		.uleb128 0x5
 12379 113c 03       		.byte	0x3
 12380 113d A0000000 		.4byte	prev_curr_err.10328
 12381 1141 1B       		.uleb128 0x1b
 12382 1142 E50F0000 		.4byte	.LASF230
 12383 1146 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 272


 12384 1147 AF03     		.2byte	0x3af
 12385 1149 BD000000 		.4byte	0xbd
 12386 114d 05       		.uleb128 0x5
 12387 114e 03       		.byte	0x3
 12388 114f A4000000 		.4byte	prev_pwm.10329
 12389 1153 1B       		.uleb128 0x1b
 12390 1154 D5050000 		.4byte	.LASF231
 12391 1158 01       		.byte	0x1
 12392 1159 B103     		.2byte	0x3b1
 12393 115b 81000000 		.4byte	0x81
 12394 115f 05       		.uleb128 0x5
 12395 1160 03       		.byte	0x3
 12396 1161 98000000 		.4byte	motor_dir.10330
 12397 1165 1B       		.uleb128 0x1b
 12398 1166 B2060000 		.4byte	.LASF232
 12399 116a 01       		.byte	0x1
 12400 116b B203     		.2byte	0x3b2
 12401 116d 99000000 		.4byte	0x99
 12402 1171 05       		.uleb128 0x5
 12403 1172 03       		.byte	0x3
 12404 1173 A8000000 		.4byte	position_counter.10331
 12405 1177 00       		.byte	0
 12406 1178 1A       		.uleb128 0x1a
 12407 1179 57050000 		.4byte	.LASF233
 12408 117d 01       		.byte	0x1
 12409 117e BC04     		.2byte	0x4bc
 12410 1180 00000000 		.4byte	.LFB72
 12411 1184 70090000 		.4byte	.LFE72-.LFB72
 12412 1188 01       		.uleb128 0x1
 12413 1189 9C       		.byte	0x9c
 12414 118a 31130000 		.4byte	0x1331
 12415 118e 24       		.uleb128 0x24
 12416 118f 69647800 		.ascii	"idx\000"
 12417 1193 01       		.byte	0x1
 12418 1194 BC04     		.2byte	0x4bc
 12419 1196 81000000 		.4byte	0x81
 12420 119a 03       		.uleb128 0x3
 12421 119b 91       		.byte	0x91
 12422 119c A77F     		.sleb128 -89
 12423 119e 1B       		.uleb128 0x1b
 12424 119f 4B010000 		.4byte	.LASF220
 12425 11a3 01       		.byte	0x1
 12426 11a4 BE04     		.2byte	0x4be
 12427 11a6 BD000000 		.4byte	0xbd
 12428 11aa 02       		.uleb128 0x2
 12429 11ab 91       		.byte	0x91
 12430 11ac 6C       		.sleb128 -20
 12431 11ad 1B       		.uleb128 0x1b
 12432 11ae 630C0000 		.4byte	.LASF221
 12433 11b2 01       		.byte	0x1
 12434 11b3 BF04     		.2byte	0x4bf
 12435 11b5 BD000000 		.4byte	0xbd
 12436 11b9 03       		.uleb128 0x3
 12437 11ba 91       		.byte	0x91
 12438 11bb AC7F     		.sleb128 -84
 12439 11bd 1B       		.uleb128 0x1b
 12440 11be 0A110000 		.4byte	.LASF222
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 273


 12441 11c2 01       		.byte	0x1
 12442 11c3 C004     		.2byte	0x4c0
 12443 11c5 BD000000 		.4byte	0xbd
 12444 11c9 03       		.uleb128 0x3
 12445 11ca 91       		.byte	0x91
 12446 11cb A87F     		.sleb128 -88
 12447 11cd 1B       		.uleb128 0x1b
 12448 11ce A70B0000 		.4byte	.LASF223
 12449 11d2 01       		.byte	0x1
 12450 11d3 C104     		.2byte	0x4c1
 12451 11d5 BD000000 		.4byte	0xbd
 12452 11d9 02       		.uleb128 0x2
 12453 11da 91       		.byte	0x91
 12454 11db 68       		.sleb128 -24
 12455 11dc 1F       		.uleb128 0x1f
 12456 11dd 4D4F5400 		.ascii	"MOT\000"
 12457 11e1 01       		.byte	0x1
 12458 11e2 C304     		.2byte	0x4c3
 12459 11e4 B70E0000 		.4byte	0xeb7
 12460 11e8 02       		.uleb128 0x2
 12461 11e9 91       		.byte	0x91
 12462 11ea 64       		.sleb128 -28
 12463 11eb 1B       		.uleb128 0x1b
 12464 11ec F9110000 		.4byte	.LASF209
 12465 11f0 01       		.byte	0x1
 12466 11f1 C404     		.2byte	0x4c4
 12467 11f3 81000000 		.4byte	0x81
 12468 11f7 02       		.uleb128 0x2
 12469 11f8 91       		.byte	0x91
 12470 11f9 63       		.sleb128 -29
 12471 11fa 1F       		.uleb128 0x1f
 12472 11fb 6B5F7000 		.ascii	"k_p\000"
 12473 11ff 01       		.byte	0x1
 12474 1200 C604     		.2byte	0x4c6
 12475 1202 BD000000 		.4byte	0xbd
 12476 1206 02       		.uleb128 0x2
 12477 1207 91       		.byte	0x91
 12478 1208 5C       		.sleb128 -36
 12479 1209 1F       		.uleb128 0x1f
 12480 120a 6B5F6900 		.ascii	"k_i\000"
 12481 120e 01       		.byte	0x1
 12482 120f C704     		.2byte	0x4c7
 12483 1211 BD000000 		.4byte	0xbd
 12484 1215 02       		.uleb128 0x2
 12485 1216 91       		.byte	0x91
 12486 1217 58       		.sleb128 -40
 12487 1218 1F       		.uleb128 0x1f
 12488 1219 6B5F6400 		.ascii	"k_d\000"
 12489 121d 01       		.byte	0x1
 12490 121e C804     		.2byte	0x4c8
 12491 1220 BD000000 		.4byte	0xbd
 12492 1224 02       		.uleb128 0x2
 12493 1225 91       		.byte	0x91
 12494 1226 54       		.sleb128 -44
 12495 1227 1B       		.uleb128 0x1b
 12496 1228 8A0D0000 		.4byte	.LASF77
 12497 122c 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 274


 12498 122d CA04     		.2byte	0x4ca
 12499 122f BD000000 		.4byte	0xbd
 12500 1233 02       		.uleb128 0x2
 12501 1234 91       		.byte	0x91
 12502 1235 50       		.sleb128 -48
 12503 1236 1B       		.uleb128 0x1b
 12504 1237 CF050000 		.4byte	.LASF78
 12505 123b 01       		.byte	0x1
 12506 123c CB04     		.2byte	0x4cb
 12507 123e BD000000 		.4byte	0xbd
 12508 1242 02       		.uleb128 0x2
 12509 1243 91       		.byte	0x91
 12510 1244 4C       		.sleb128 -52
 12511 1245 1B       		.uleb128 0x1b
 12512 1246 A0050000 		.4byte	.LASF79
 12513 124a 01       		.byte	0x1
 12514 124b CC04     		.2byte	0x4cc
 12515 124d BD000000 		.4byte	0xbd
 12516 1251 02       		.uleb128 0x2
 12517 1252 91       		.byte	0x91
 12518 1253 48       		.sleb128 -56
 12519 1254 1B       		.uleb128 0x1b
 12520 1255 73100000 		.4byte	.LASF80
 12521 1259 01       		.byte	0x1
 12522 125a CE04     		.2byte	0x4ce
 12523 125c BD000000 		.4byte	0xbd
 12524 1260 02       		.uleb128 0x2
 12525 1261 91       		.byte	0x91
 12526 1262 44       		.sleb128 -60
 12527 1263 1B       		.uleb128 0x1b
 12528 1264 7F060000 		.4byte	.LASF81
 12529 1268 01       		.byte	0x1
 12530 1269 CF04     		.2byte	0x4cf
 12531 126b BD000000 		.4byte	0xbd
 12532 126f 02       		.uleb128 0x2
 12533 1270 91       		.byte	0x91
 12534 1271 40       		.sleb128 -64
 12535 1272 1B       		.uleb128 0x1b
 12536 1273 820F0000 		.4byte	.LASF82
 12537 1277 01       		.byte	0x1
 12538 1278 D004     		.2byte	0x4d0
 12539 127a BD000000 		.4byte	0xbd
 12540 127e 03       		.uleb128 0x3
 12541 127f 91       		.byte	0x91
 12542 1280 BC7F     		.sleb128 -68
 12543 1282 1B       		.uleb128 0x1b
 12544 1283 8D060000 		.4byte	.LASF83
 12545 1287 01       		.byte	0x1
 12546 1288 D204     		.2byte	0x4d2
 12547 128a BD000000 		.4byte	0xbd
 12548 128e 03       		.uleb128 0x3
 12549 128f 91       		.byte	0x91
 12550 1290 B87F     		.sleb128 -72
 12551 1292 1B       		.uleb128 0x1b
 12552 1293 D5070000 		.4byte	.LASF84
 12553 1297 01       		.byte	0x1
 12554 1298 D304     		.2byte	0x4d3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 275


 12555 129a BD000000 		.4byte	0xbd
 12556 129e 03       		.uleb128 0x3
 12557 129f 91       		.byte	0x91
 12558 12a0 B47F     		.sleb128 -76
 12559 12a2 1B       		.uleb128 0x1b
 12560 12a3 2F130000 		.4byte	.LASF85
 12561 12a7 01       		.byte	0x1
 12562 12a8 D404     		.2byte	0x4d4
 12563 12aa BD000000 		.4byte	0xbd
 12564 12ae 03       		.uleb128 0x3
 12565 12af 91       		.byte	0x91
 12566 12b0 B07F     		.sleb128 -80
 12567 12b2 1B       		.uleb128 0x1b
 12568 12b3 46060000 		.4byte	.LASF226
 12569 12b7 01       		.byte	0x1
 12570 12b8 D804     		.2byte	0x4d8
 12571 12ba A0020000 		.4byte	0x2a0
 12572 12be 05       		.uleb128 0x5
 12573 12bf 03       		.byte	0x3
 12574 12c0 AC000000 		.4byte	pos_error_sum.10358
 12575 12c4 1B       		.uleb128 0x1b
 12576 12c5 7A040000 		.4byte	.LASF227
 12577 12c9 01       		.byte	0x1
 12578 12ca D904     		.2byte	0x4d9
 12579 12cc A0020000 		.4byte	0x2a0
 12580 12d0 05       		.uleb128 0x5
 12581 12d1 03       		.byte	0x3
 12582 12d2 C0000000 		.4byte	curr_error_sum.10359
 12583 12d6 1B       		.uleb128 0x1b
 12584 12d7 120C0000 		.4byte	.LASF228
 12585 12db 01       		.byte	0x1
 12586 12dc DB04     		.2byte	0x4db
 12587 12de A0020000 		.4byte	0x2a0
 12588 12e2 05       		.uleb128 0x5
 12589 12e3 03       		.byte	0x3
 12590 12e4 B4000000 		.4byte	prev_pos_err.10360
 12591 12e8 1B       		.uleb128 0x1b
 12592 12e9 690D0000 		.4byte	.LASF229
 12593 12ed 01       		.byte	0x1
 12594 12ee DC04     		.2byte	0x4dc
 12595 12f0 A0020000 		.4byte	0x2a0
 12596 12f4 05       		.uleb128 0x5
 12597 12f5 03       		.byte	0x3
 12598 12f6 C8000000 		.4byte	prev_curr_err.10361
 12599 12fa 1B       		.uleb128 0x1b
 12600 12fb E50F0000 		.4byte	.LASF230
 12601 12ff 01       		.byte	0x1
 12602 1300 DD04     		.2byte	0x4dd
 12603 1302 A0020000 		.4byte	0x2a0
 12604 1306 05       		.uleb128 0x5
 12605 1307 03       		.byte	0x3
 12606 1308 D0000000 		.4byte	prev_pwm.10362
 12607 130c 1B       		.uleb128 0x1b
 12608 130d D5050000 		.4byte	.LASF231
 12609 1311 01       		.byte	0x1
 12610 1312 DF04     		.2byte	0x4df
 12611 1314 55070000 		.4byte	0x755
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 276


 12612 1318 05       		.uleb128 0x5
 12613 1319 03       		.byte	0x3
 12614 131a BC000000 		.4byte	motor_dir.10363
 12615 131e 1B       		.uleb128 0x1b
 12616 131f B2060000 		.4byte	.LASF232
 12617 1323 01       		.byte	0x1
 12618 1324 E004     		.2byte	0x4e0
 12619 1326 CA030000 		.4byte	0x3ca
 12620 132a 05       		.uleb128 0x5
 12621 132b 03       		.byte	0x3
 12622 132c D8000000 		.4byte	position_counter.10364
 12623 1330 00       		.byte	0
 12624 1331 1A       		.uleb128 0x1a
 12625 1332 2F0E0000 		.4byte	.LASF234
 12626 1336 01       		.byte	0x1
 12627 1337 3806     		.2byte	0x638
 12628 1339 00000000 		.4byte	.LFB73
 12629 133d DC000000 		.4byte	.LFE73-.LFB73
 12630 1341 01       		.uleb128 0x1
 12631 1342 9C       		.byte	0x9c
 12632 1343 82130000 		.4byte	0x1382
 12633 1347 24       		.uleb128 0x24
 12634 1348 69647800 		.ascii	"idx\000"
 12635 134c 01       		.byte	0x1
 12636 134d 3806     		.2byte	0x638
 12637 134f 81000000 		.4byte	0x81
 12638 1353 02       		.uleb128 0x2
 12639 1354 91       		.byte	0x91
 12640 1355 6F       		.sleb128 -17
 12641 1356 25       		.uleb128 0x25
 12642 1357 6900     		.ascii	"i\000"
 12643 1359 01       		.byte	0x1
 12644 135a 3906     		.2byte	0x639
 12645 135c 81000000 		.4byte	0x81
 12646 1360 1B       		.uleb128 0x1b
 12647 1361 4B010000 		.4byte	.LASF220
 12648 1365 01       		.byte	0x1
 12649 1366 3A06     		.2byte	0x63a
 12650 1368 B1000000 		.4byte	0xb1
 12651 136c 02       		.uleb128 0x2
 12652 136d 91       		.byte	0x91
 12653 136e 76       		.sleb128 -10
 12654 136f 1B       		.uleb128 0x1b
 12655 1370 D5050000 		.4byte	.LASF231
 12656 1374 01       		.byte	0x1
 12657 1375 3E06     		.2byte	0x63e
 12658 1377 55070000 		.4byte	0x755
 12659 137b 05       		.uleb128 0x5
 12660 137c 03       		.byte	0x3
 12661 137d E0000000 		.4byte	motor_dir.10379
 12662 1381 00       		.byte	0
 12663 1382 1A       		.uleb128 0x1a
 12664 1383 A9030000 		.4byte	.LASF235
 12665 1387 01       		.byte	0x1
 12666 1388 6E06     		.2byte	0x66e
 12667 138a 00000000 		.4byte	.LFB74
 12668 138e 00080000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 277


 12669 1392 01       		.uleb128 0x1
 12670 1393 9C       		.byte	0x9c
 12671 1394 0A150000 		.4byte	0x150a
 12672 1398 1E       		.uleb128 0x1e
 12673 1399 C6000000 		.4byte	.LASF236
 12674 139d 01       		.byte	0x1
 12675 139e 6E06     		.2byte	0x66e
 12676 13a0 81000000 		.4byte	0x81
 12677 13a4 03       		.uleb128 0x3
 12678 13a5 91       		.byte	0x91
 12679 13a6 BF7F     		.sleb128 -65
 12680 13a8 1E       		.uleb128 0x1e
 12681 13a9 930B0000 		.4byte	.LASF237
 12682 13ad 01       		.byte	0x1
 12683 13ae 6E06     		.2byte	0x66e
 12684 13b0 81000000 		.4byte	0x81
 12685 13b4 03       		.uleb128 0x3
 12686 13b5 91       		.byte	0x91
 12687 13b6 BE7F     		.sleb128 -66
 12688 13b8 1B       		.uleb128 0x1b
 12689 13b9 90070000 		.4byte	.LASF238
 12690 13bd 01       		.byte	0x1
 12691 13be 7006     		.2byte	0x670
 12692 13c0 81000000 		.4byte	0x81
 12693 13c4 02       		.uleb128 0x2
 12694 13c5 91       		.byte	0x91
 12695 13c6 67       		.sleb128 -25
 12696 13c7 1F       		.uleb128 0x1f
 12697 13c8 6A6A00   		.ascii	"jj\000"
 12698 13cb 01       		.byte	0x1
 12699 13cc 7306     		.2byte	0x673
 12700 13ce 81000000 		.4byte	0x81
 12701 13d2 02       		.uleb128 0x2
 12702 13d3 91       		.byte	0x91
 12703 13d4 66       		.sleb128 -26
 12704 13d5 1B       		.uleb128 0x1b
 12705 13d6 73030000 		.4byte	.LASF239
 12706 13da 01       		.byte	0x1
 12707 13db 7506     		.2byte	0x675
 12708 13dd 0A150000 		.4byte	0x150a
 12709 13e1 02       		.uleb128 0x2
 12710 13e2 91       		.byte	0x91
 12711 13e3 40       		.sleb128 -64
 12712 13e4 1B       		.uleb128 0x1b
 12713 13e5 6A110000 		.4byte	.LASF240
 12714 13e9 01       		.byte	0x1
 12715 13ea 7606     		.2byte	0x676
 12716 13ec B1000000 		.4byte	0xb1
 12717 13f0 02       		.uleb128 0x2
 12718 13f1 91       		.byte	0x91
 12719 13f2 64       		.sleb128 -28
 12720 13f3 1B       		.uleb128 0x1b
 12721 13f4 540D0000 		.4byte	.LASF241
 12722 13f8 01       		.byte	0x1
 12723 13f9 7706     		.2byte	0x677
 12724 13fb BD000000 		.4byte	0xbd
 12725 13ff 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 278


 12726 1400 91       		.byte	0x91
 12727 1401 54       		.sleb128 -44
 12728 1402 1B       		.uleb128 0x1b
 12729 1403 890F0000 		.4byte	.LASF242
 12730 1407 01       		.byte	0x1
 12731 1408 7806     		.2byte	0x678
 12732 140a BD000000 		.4byte	0xbd
 12733 140e 02       		.uleb128 0x2
 12734 140f 91       		.byte	0x91
 12735 1410 60       		.sleb128 -32
 12736 1411 1B       		.uleb128 0x1b
 12737 1412 C3040000 		.4byte	.LASF243
 12738 1416 01       		.byte	0x1
 12739 1417 7906     		.2byte	0x679
 12740 1419 BD000000 		.4byte	0xbd
 12741 141d 02       		.uleb128 0x2
 12742 141e 91       		.byte	0x91
 12743 141f 4C       		.sleb128 -52
 12744 1420 1B       		.uleb128 0x1b
 12745 1421 640F0000 		.4byte	.LASF244
 12746 1425 01       		.byte	0x1
 12747 1426 7A06     		.2byte	0x67a
 12748 1428 BD000000 		.4byte	0xbd
 12749 142c 02       		.uleb128 0x2
 12750 142d 91       		.byte	0x91
 12751 142e 50       		.sleb128 -48
 12752 142f 1B       		.uleb128 0x1b
 12753 1430 1F0C0000 		.4byte	.LASF245
 12754 1434 01       		.byte	0x1
 12755 1435 7B06     		.2byte	0x67b
 12756 1437 A5000000 		.4byte	0xa5
 12757 143b 02       		.uleb128 0x2
 12758 143c 91       		.byte	0x91
 12759 143d 5F       		.sleb128 -33
 12760 143e 1B       		.uleb128 0x1b
 12761 143f AE0C0000 		.4byte	.LASF246
 12762 1443 01       		.byte	0x1
 12763 1444 7D06     		.2byte	0x67d
 12764 1446 1A150000 		.4byte	0x151a
 12765 144a 05       		.uleb128 0x5
 12766 144b 03       		.byte	0x3
 12767 144c E4000000 		.4byte	last_value_encoder.10396
 12768 1450 1B       		.uleb128 0x1b
 12769 1451 44070000 		.4byte	.LASF247
 12770 1455 01       		.byte	0x1
 12771 1456 7E06     		.2byte	0x67e
 12772 1458 1A150000 		.4byte	0x151a
 12773 145c 05       		.uleb128 0x5
 12774 145d 03       		.byte	0x3
 12775 145e FC000000 		.4byte	comp_value_encoder.10397
 12776 1462 1B       		.uleb128 0x1b
 12777 1463 BD030000 		.4byte	.LASF248
 12778 1467 01       		.byte	0x1
 12779 1468 7F06     		.2byte	0x67f
 12780 146a 30150000 		.4byte	0x1530
 12781 146e 05       		.uleb128 0x5
 12782 146f 03       		.byte	0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 279


 12783 1470 14010000 		.4byte	error.10398
 12784 1474 1B       		.uleb128 0x1b
 12785 1475 420F0000 		.4byte	.LASF249
 12786 1479 01       		.byte	0x1
 12787 147a 8106     		.2byte	0x681
 12788 147c 55070000 		.4byte	0x755
 12789 1480 05       		.uleb128 0x5
 12790 1481 03       		.byte	0x3
 12791 1482 04000000 		.4byte	only_first_time.10399
 12792 1486 1B       		.uleb128 0x1b
 12793 1487 2E030000 		.4byte	.LASF250
 12794 148b 01       		.byte	0x1
 12795 148c 8206     		.2byte	0x682
 12796 148e 55070000 		.4byte	0x755
 12797 1492 05       		.uleb128 0x5
 12798 1493 03       		.byte	0x3
 12799 1494 68010000 		.4byte	safe_startup_motor_activation.10400
 12800 1498 1B       		.uleb128 0x1b
 12801 1499 98000000 		.4byte	.LASF251
 12802 149d 01       		.byte	0x1
 12803 149e 8306     		.2byte	0x683
 12804 14a0 55070000 		.4byte	0x755
 12805 14a4 05       		.uleb128 0x5
 12806 14a5 03       		.byte	0x3
 12807 14a6 64010000 		.4byte	one_time_execute.10401
 12808 14aa 1B       		.uleb128 0x1b
 12809 14ab B10A0000 		.4byte	.LASF252
 12810 14af 01       		.byte	0x1
 12811 14b0 8406     		.2byte	0x684
 12812 14b2 CA030000 		.4byte	0x3ca
 12813 14b6 05       		.uleb128 0x5
 12814 14b7 03       		.byte	0x3
 12815 14b8 6C010000 		.4byte	count_startup_motor.10402
 12816 14bc 1B       		.uleb128 0x1b
 12817 14bd D2090000 		.4byte	.LASF253
 12818 14c1 01       		.byte	0x1
 12819 14c2 8606     		.2byte	0x686
 12820 14c4 1A150000 		.4byte	0x151a
 12821 14c8 05       		.uleb128 0x5
 12822 14c9 03       		.byte	0x3
 12823 14ca 1C010000 		.4byte	v_value.10403
 12824 14ce 1B       		.uleb128 0x1b
 12825 14cf 26130000 		.4byte	.LASF254
 12826 14d3 01       		.byte	0x1
 12827 14d4 8706     		.2byte	0x687
 12828 14d6 1A150000 		.4byte	0x151a
 12829 14da 05       		.uleb128 0x5
 12830 14db 03       		.byte	0x3
 12831 14dc 34010000 		.4byte	vv_value.10404
 12832 14e0 1B       		.uleb128 0x1b
 12833 14e1 99010000 		.4byte	.LASF255
 12834 14e5 01       		.byte	0x1
 12835 14e6 8806     		.2byte	0x688
 12836 14e8 1A150000 		.4byte	0x151a
 12837 14ec 05       		.uleb128 0x5
 12838 14ed 03       		.byte	0x3
 12839 14ee 4C010000 		.4byte	vvv_value.10405
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 280


 12840 14f2 1C       		.uleb128 0x1c
 12841 14f3 86000000 		.4byte	.LBB9
 12842 14f7 6A000000 		.4byte	.LBE9-.LBB9
 12843 14fb 1F       		.uleb128 0x1f
 12844 14fc 6A00     		.ascii	"j\000"
 12845 14fe 01       		.byte	0x1
 12846 14ff 9806     		.2byte	0x698
 12847 1501 68000000 		.4byte	0x68
 12848 1505 02       		.uleb128 0x2
 12849 1506 91       		.byte	0x91
 12850 1507 58       		.sleb128 -40
 12851 1508 00       		.byte	0
 12852 1509 00       		.byte	0
 12853 150a 07       		.uleb128 0x7
 12854 150b 99000000 		.4byte	0x99
 12855 150f 1A150000 		.4byte	0x151a
 12856 1513 08       		.uleb128 0x8
 12857 1514 0E010000 		.4byte	0x10e
 12858 1518 02       		.byte	0x2
 12859 1519 00       		.byte	0
 12860 151a 07       		.uleb128 0x7
 12861 151b BD000000 		.4byte	0xbd
 12862 151f 30150000 		.4byte	0x1530
 12863 1523 08       		.uleb128 0x8
 12864 1524 0E010000 		.4byte	0x10e
 12865 1528 01       		.byte	0x1
 12866 1529 08       		.uleb128 0x8
 12867 152a 0E010000 		.4byte	0x10e
 12868 152e 02       		.byte	0x2
 12869 152f 00       		.byte	0
 12870 1530 07       		.uleb128 0x7
 12871 1531 81000000 		.4byte	0x81
 12872 1535 46150000 		.4byte	0x1546
 12873 1539 08       		.uleb128 0x8
 12874 153a 0E010000 		.4byte	0x10e
 12875 153e 01       		.byte	0x1
 12876 153f 08       		.uleb128 0x8
 12877 1540 0E010000 		.4byte	0x10e
 12878 1544 02       		.byte	0x2
 12879 1545 00       		.byte	0
 12880 1546 23       		.uleb128 0x23
 12881 1547 160E0000 		.4byte	.LASF256
 12882 154b 01       		.byte	0x1
 12883 154c 4B07     		.2byte	0x74b
 12884 154e 00000000 		.4byte	.LFB75
 12885 1552 D8120000 		.4byte	.LFE75-.LFB75
 12886 1556 01       		.uleb128 0x1
 12887 1557 9C       		.byte	0x9c
 12888 1558 32160000 		.4byte	0x1632
 12889 155c 1B       		.uleb128 0x1b
 12890 155d C80D0000 		.4byte	.LASF257
 12891 1561 01       		.byte	0x1
 12892 1562 5F07     		.2byte	0x75f
 12893 1564 BD000000 		.4byte	0xbd
 12894 1568 02       		.uleb128 0x2
 12895 1569 91       		.byte	0x91
 12896 156a 64       		.sleb128 -28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 281


 12897 156b 1B       		.uleb128 0x1b
 12898 156c 0B0F0000 		.4byte	.LASF258
 12899 1570 01       		.byte	0x1
 12900 1571 6107     		.2byte	0x761
 12901 1573 8D000000 		.4byte	0x8d
 12902 1577 05       		.uleb128 0x5
 12903 1578 03       		.byte	0x3
 12904 1579 7C010000 		.4byte	emg_counter_1.10422
 12905 157d 1B       		.uleb128 0x1b
 12906 157e 190F0000 		.4byte	.LASF259
 12907 1582 01       		.byte	0x1
 12908 1583 6207     		.2byte	0x762
 12909 1585 8D000000 		.4byte	0x8d
 12910 1589 05       		.uleb128 0x5
 12911 158a 03       		.byte	0x3
 12912 158b 7E010000 		.4byte	emg_counter_2.10423
 12913 158f 1B       		.uleb128 0x1b
 12914 1590 5D020000 		.4byte	.LASF260
 12915 1594 01       		.byte	0x1
 12916 1595 6307     		.2byte	0x763
 12917 1597 8D000000 		.4byte	0x8d
 12918 159b 05       		.uleb128 0x5
 12919 159c 03       		.byte	0x3
 12920 159d 84010000 		.4byte	UD_counter.10424
 12921 15a1 1B       		.uleb128 0x1b
 12922 15a2 CD030000 		.4byte	.LASF261
 12923 15a6 01       		.byte	0x1
 12924 15a7 6407     		.2byte	0x764
 12925 15a9 8D000000 		.4byte	0x8d
 12926 15ad 05       		.uleb128 0x5
 12927 15ae 03       		.byte	0x3
 12928 15af 8C010000 		.4byte	LR_counter.10425
 12929 15b3 1B       		.uleb128 0x1b
 12930 15b4 850B0000 		.4byte	.LASF262
 12931 15b8 01       		.byte	0x1
 12932 15b9 6507     		.2byte	0x765
 12933 15bb BD000000 		.4byte	0xbd
 12934 15bf 05       		.uleb128 0x5
 12935 15c0 03       		.byte	0x3
 12936 15c1 80010000 		.4byte	UD_mean_value.10426
 12937 15c5 1B       		.uleb128 0x1b
 12938 15c6 7F120000 		.4byte	.LASF263
 12939 15ca 01       		.byte	0x1
 12940 15cb 6607     		.2byte	0x766
 12941 15cd BD000000 		.4byte	0xbd
 12942 15d1 05       		.uleb128 0x5
 12943 15d2 03       		.byte	0x3
 12944 15d3 88010000 		.4byte	LR_mean_value.10427
 12945 15d7 1B       		.uleb128 0x1b
 12946 15d8 B6020000 		.4byte	.LASF264
 12947 15dc 01       		.byte	0x1
 12948 15dd 6707     		.2byte	0x767
 12949 15df 81000000 		.4byte	0x81
 12950 15e3 05       		.uleb128 0x5
 12951 15e4 03       		.byte	0x3
 12952 15e5 0C000000 		.4byte	first_tension_valid.10428
 12953 15e9 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 282


 12954 15ea 29050000 		.4byte	.LASF265
 12955 15ee 01       		.byte	0x1
 12956 15ef 6807     		.2byte	0x768
 12957 15f1 BD000000 		.4byte	0xbd
 12958 15f5 05       		.uleb128 0x5
 12959 15f6 03       		.byte	0x3
 12960 15f7 08000000 		.4byte	detect_power_cycle_prev.10429
 12961 15fb 1B       		.uleb128 0x1b
 12962 15fc E20A0000 		.4byte	.LASF266
 12963 1600 01       		.byte	0x1
 12964 1601 6907     		.2byte	0x769
 12965 1603 8D000000 		.4byte	0x8d
 12966 1607 05       		.uleb128 0x5
 12967 1608 03       		.byte	0x3
 12968 1609 74010000 		.4byte	count.10430
 12969 160d 1B       		.uleb128 0x1b
 12970 160e 89010000 		.4byte	.LASF267
 12971 1612 01       		.byte	0x1
 12972 1613 6A07     		.2byte	0x76a
 12973 1615 99000000 		.4byte	0x99
 12974 1619 05       		.uleb128 0x5
 12975 161a 03       		.byte	0x3
 12976 161b 78010000 		.4byte	v_count.10431
 12977 161f 1F       		.uleb128 0x1f
 12978 1620 69647800 		.ascii	"idx\000"
 12979 1624 01       		.byte	0x1
 12980 1625 6B07     		.2byte	0x76b
 12981 1627 81000000 		.4byte	0x81
 12982 162b 05       		.uleb128 0x5
 12983 162c 03       		.byte	0x3
 12984 162d 76010000 		.4byte	idx.10432
 12985 1631 00       		.byte	0
 12986 1632 26       		.uleb128 0x26
 12987 1633 F30D0000 		.4byte	.LASF268
 12988 1637 01       		.byte	0x1
 12989 1638 C809     		.2byte	0x9c8
 12990 163a 00000000 		.4byte	.LFB76
 12991 163e 0C010000 		.4byte	.LFE76-.LFB76
 12992 1642 01       		.uleb128 0x1
 12993 1643 9C       		.byte	0x9c
 12994 1644 79160000 		.4byte	0x1679
 12995 1648 1C       		.uleb128 0x1c
 12996 1649 06000000 		.4byte	.LBB10
 12997 164d E6000000 		.4byte	.LBE10-.LBB10
 12998 1651 1F       		.uleb128 0x1f
 12999 1652 6900     		.ascii	"i\000"
 13000 1654 01       		.byte	0x1
 13001 1655 CA09     		.2byte	0x9ca
 13002 1657 81000000 		.4byte	0x81
 13003 165b 02       		.uleb128 0x2
 13004 165c 91       		.byte	0x91
 13005 165d 77       		.sleb128 -9
 13006 165e 1C       		.uleb128 0x1c
 13007 165f 26000000 		.4byte	.LBB11
 13008 1663 BA000000 		.4byte	.LBE11-.LBB11
 13009 1667 1B       		.uleb128 0x1b
 13010 1668 CB080000 		.4byte	.LASF40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 283


 13011 166c 01       		.byte	0x1
 13012 166d CC09     		.2byte	0x9cc
 13013 166f BD000000 		.4byte	0xbd
 13014 1673 02       		.uleb128 0x2
 13015 1674 91       		.byte	0x91
 13016 1675 70       		.sleb128 -16
 13017 1676 00       		.byte	0
 13018 1677 00       		.byte	0
 13019 1678 00       		.byte	0
 13020 1679 21       		.uleb128 0x21
 13021 167a E8030000 		.4byte	.LASF269
 13022 167e 01       		.byte	0x1
 13023 167f EA09     		.2byte	0x9ea
 13024 1681 00000000 		.4byte	.LFB77
 13025 1685 A8000000 		.4byte	.LFE77-.LFB77
 13026 1689 01       		.uleb128 0x1
 13027 168a 9C       		.byte	0x9c
 13028 168b CC160000 		.4byte	0x16cc
 13029 168f 1E       		.uleb128 0x1e
 13030 1690 280C0000 		.4byte	.LASF270
 13031 1694 01       		.byte	0x1
 13032 1695 EA09     		.2byte	0x9ea
 13033 1697 81000000 		.4byte	0x81
 13034 169b 02       		.uleb128 0x2
 13035 169c 91       		.byte	0x91
 13036 169d 6F       		.sleb128 -17
 13037 169e 1B       		.uleb128 0x1b
 13038 169f 90070000 		.4byte	.LASF238
 13039 16a3 01       		.byte	0x1
 13040 16a4 EC09     		.2byte	0x9ec
 13041 16a6 81000000 		.4byte	0x81
 13042 16aa 02       		.uleb128 0x2
 13043 16ab 91       		.byte	0x91
 13044 16ac 73       		.sleb128 -13
 13045 16ad 1B       		.uleb128 0x1b
 13046 16ae 980C0000 		.4byte	.LASF271
 13047 16b2 01       		.byte	0x1
 13048 16b3 ED09     		.2byte	0x9ed
 13049 16b5 8D000000 		.4byte	0x8d
 13050 16b9 02       		.uleb128 0x2
 13051 16ba 91       		.byte	0x91
 13052 16bb 76       		.sleb128 -10
 13053 16bc 1B       		.uleb128 0x1b
 13054 16bd 75080000 		.4byte	.LASF272
 13055 16c1 01       		.byte	0x1
 13056 16c2 EE09     		.2byte	0x9ee
 13057 16c4 8D000000 		.4byte	0x8d
 13058 16c8 02       		.uleb128 0x2
 13059 16c9 91       		.byte	0x91
 13060 16ca 74       		.sleb128 -12
 13061 16cb 00       		.byte	0
 13062 16cc 23       		.uleb128 0x23
 13063 16cd F2080000 		.4byte	.LASF273
 13064 16d1 01       		.byte	0x1
 13065 16d2 020A     		.2byte	0xa02
 13066 16d4 00000000 		.4byte	.LFB78
 13067 16d8 58060000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 284


 13068 16dc 01       		.uleb128 0x1
 13069 16dd 9C       		.byte	0x9c
 13070 16de 64180000 		.4byte	0x1864
 13071 16e2 1B       		.uleb128 0x1b
 13072 16e3 26000000 		.4byte	.LASF274
 13073 16e7 01       		.byte	0x1
 13074 16e8 030A     		.2byte	0xa03
 13075 16ea 81000000 		.4byte	0x81
 13076 16ee 05       		.uleb128 0x5
 13077 16ef 03       		.byte	0x3
 13078 16f0 8E010000 		.4byte	pos_cycle_status.10503
 13079 16f4 1B       		.uleb128 0x1b
 13080 16f5 4C0E0000 		.4byte	.LASF275
 13081 16f9 01       		.byte	0x1
 13082 16fa 040A     		.2byte	0xa04
 13083 16fc 55070000 		.4byte	0x755
 13084 1700 05       		.uleb128 0x5
 13085 1701 03       		.byte	0x3
 13086 1702 98010000 		.4byte	emg_cycle_status.10504
 13087 1706 1B       		.uleb128 0x1b
 13088 1707 230D0000 		.4byte	.LASF276
 13089 170b 01       		.byte	0x1
 13090 170c 050A     		.2byte	0xa05
 13091 170e 55070000 		.4byte	0x755
 13092 1712 05       		.uleb128 0x5
 13093 1713 03       		.byte	0x3
 13094 1714 9C010000 		.4byte	motion_status.10505
 13095 1718 1B       		.uleb128 0x1b
 13096 1719 F40A0000 		.4byte	.LASF277
 13097 171d 01       		.byte	0x1
 13098 171e 060A     		.2byte	0xa06
 13099 1720 55070000 		.4byte	0x755
 13100 1724 05       		.uleb128 0x5
 13101 1725 03       		.byte	0x3
 13102 1726 A8010000 		.4byte	emg_excess_status.10506
 13103 172a 1B       		.uleb128 0x1b
 13104 172b 2B110000 		.4byte	.LASF278
 13105 172f 01       		.byte	0x1
 13106 1730 070A     		.2byte	0xa07
 13107 1732 81000000 		.4byte	0x81
 13108 1736 05       		.uleb128 0x5
 13109 1737 03       		.byte	0x3
 13110 1738 BC010000 		.4byte	rest_cycle_status.10507
 13111 173c 1B       		.uleb128 0x1b
 13112 173d 17030000 		.4byte	.LASF279
 13113 1741 01       		.byte	0x1
 13114 1742 080A     		.2byte	0xa08
 13115 1744 BD000000 		.4byte	0xbd
 13116 1748 05       		.uleb128 0x5
 13117 1749 03       		.byte	0x3
 13118 174a 10000000 		.4byte	bin_threshold.10508
 13119 174e 1B       		.uleb128 0x1b
 13120 174f 50100000 		.4byte	.LASF280
 13121 1753 01       		.byte	0x1
 13122 1754 090A     		.2byte	0xa09
 13123 1756 BD000000 		.4byte	0xbd
 13124 175a 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 285


 13125 175b 03       		.byte	0x3
 13126 175c 14000000 		.4byte	exc_act_thr.10509
 13127 1760 1B       		.uleb128 0x1b
 13128 1761 E4010000 		.4byte	.LASF281
 13129 1765 01       		.byte	0x1
 13130 1766 0A0A     		.2byte	0xa0a
 13131 1768 BD000000 		.4byte	0xbd
 13132 176c 05       		.uleb128 0x5
 13133 176d 03       		.byte	0x3
 13134 176e 90010000 		.4byte	thr_pos.10510
 13135 1772 1B       		.uleb128 0x1b
 13136 1773 200B0000 		.4byte	.LASF282
 13137 1777 01       		.byte	0x1
 13138 1778 0B0A     		.2byte	0xa0b
 13139 177a BD000000 		.4byte	0xbd
 13140 177e 05       		.uleb128 0x5
 13141 177f 03       		.byte	0x3
 13142 1780 94010000 		.4byte	max_pos.10511
 13143 1784 1F       		.uleb128 0x1f
 13144 1785 6900     		.ascii	"i\000"
 13145 1787 01       		.byte	0x1
 13146 1788 0C0A     		.2byte	0xa0c
 13147 178a 81000000 		.4byte	0x81
 13148 178e 02       		.uleb128 0x2
 13149 178f 91       		.byte	0x91
 13150 1790 6F       		.sleb128 -17
 13151 1791 1B       		.uleb128 0x1b
 13152 1792 DF050000 		.4byte	.LASF283
 13153 1796 01       		.byte	0x1
 13154 1797 0C0A     		.2byte	0xa0c
 13155 1799 81000000 		.4byte	0x81
 13156 179d 02       		.uleb128 0x2
 13157 179e 91       		.byte	0x91
 13158 179f 5B       		.sleb128 -37
 13159 17a0 1B       		.uleb128 0x1b
 13160 17a1 16010000 		.4byte	.LASF284
 13161 17a5 01       		.byte	0x1
 13162 17a6 0C0A     		.2byte	0xa0c
 13163 17a8 81000000 		.4byte	0x81
 13164 17ac 02       		.uleb128 0x2
 13165 17ad 91       		.byte	0x91
 13166 17ae 5A       		.sleb128 -38
 13167 17af 1B       		.uleb128 0x1b
 13168 17b0 BC0D0000 		.4byte	.LASF285
 13169 17b4 01       		.byte	0x1
 13170 17b5 0C0A     		.2byte	0xa0c
 13171 17b7 81000000 		.4byte	0x81
 13172 17bb 02       		.uleb128 0x2
 13173 17bc 91       		.byte	0x91
 13174 17bd 59       		.sleb128 -39
 13175 17be 1B       		.uleb128 0x1b
 13176 17bf C20D0000 		.4byte	.LASF286
 13177 17c3 01       		.byte	0x1
 13178 17c4 0C0A     		.2byte	0xa0c
 13179 17c6 81000000 		.4byte	0x81
 13180 17ca 02       		.uleb128 0x2
 13181 17cb 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 286


 13182 17cc 58       		.sleb128 -40
 13183 17cd 1B       		.uleb128 0x1b
 13184 17ce 070E0000 		.4byte	.LASF287
 13185 17d2 01       		.byte	0x1
 13186 17d3 0D0A     		.2byte	0xa0d
 13187 17d5 BD000000 		.4byte	0xbd
 13188 17d9 02       		.uleb128 0x2
 13189 17da 91       		.byte	0x91
 13190 17db 64       		.sleb128 -28
 13191 17dc 1B       		.uleb128 0x1b
 13192 17dd DA040000 		.4byte	.LASF288
 13193 17e1 01       		.byte	0x1
 13194 17e2 0D0A     		.2byte	0xa0d
 13195 17e4 BD000000 		.4byte	0xbd
 13196 17e8 02       		.uleb128 0x2
 13197 17e9 91       		.byte	0x91
 13198 17ea 60       		.sleb128 -32
 13199 17eb 1B       		.uleb128 0x1b
 13200 17ec 6F0F0000 		.4byte	.LASF289
 13201 17f0 01       		.byte	0x1
 13202 17f1 0D0A     		.2byte	0xa0d
 13203 17f3 BD000000 		.4byte	0xbd
 13204 17f7 02       		.uleb128 0x2
 13205 17f8 91       		.byte	0x91
 13206 17f9 68       		.sleb128 -24
 13207 17fa 1B       		.uleb128 0x1b
 13208 17fb 75040000 		.4byte	.LASF290
 13209 17ff 01       		.byte	0x1
 13210 1800 0E0A     		.2byte	0xa0e
 13211 1802 BD000000 		.4byte	0xbd
 13212 1806 02       		.uleb128 0x2
 13213 1807 91       		.byte	0x91
 13214 1808 5C       		.sleb128 -36
 13215 1809 1B       		.uleb128 0x1b
 13216 180a 28070000 		.4byte	.LASF291
 13217 180e 01       		.byte	0x1
 13218 180f 0F0A     		.2byte	0xa0f
 13219 1811 99000000 		.4byte	0x99
 13220 1815 05       		.uleb128 0x5
 13221 1816 03       		.byte	0x3
 13222 1817 C0010000 		.4byte	timer_value_s.10521
 13223 181b 1B       		.uleb128 0x1b
 13224 181c C3060000 		.4byte	.LASF292
 13225 1820 01       		.byte	0x1
 13226 1821 0F0A     		.2byte	0xa0f
 13227 1823 99000000 		.4byte	0x99
 13228 1827 05       		.uleb128 0x5
 13229 1828 03       		.byte	0x3
 13230 1829 C4010000 		.4byte	timer_value_e.10522
 13231 182d 1B       		.uleb128 0x1b
 13232 182e 2B100000 		.4byte	.LASF293
 13233 1832 01       		.byte	0x1
 13234 1833 100A     		.2byte	0xa10
 13235 1835 CA030000 		.4byte	0x3ca
 13236 1839 05       		.uleb128 0x5
 13237 183a 03       		.byte	0x3
 13238 183b AC010000 		.4byte	timer_exc_s.10523
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 287


 13239 183f 1B       		.uleb128 0x1b
 13240 1840 06100000 		.4byte	.LASF294
 13241 1844 01       		.byte	0x1
 13242 1845 100A     		.2byte	0xa10
 13243 1847 CA030000 		.4byte	0x3ca
 13244 184b 05       		.uleb128 0x5
 13245 184c 03       		.byte	0x3
 13246 184d B4010000 		.4byte	timer_exc_e.10524
 13247 1851 1B       		.uleb128 0x1b
 13248 1852 57070000 		.4byte	.LASF295
 13249 1856 01       		.byte	0x1
 13250 1857 110A     		.2byte	0xa11
 13251 1859 A0020000 		.4byte	0x2a0
 13252 185d 05       		.uleb128 0x5
 13253 185e 03       		.byte	0x3
 13254 185f A0010000 		.4byte	start_emg_pos.10525
 13255 1863 00       		.byte	0
 13256 1864 23       		.uleb128 0x23
 13257 1865 BB0B0000 		.4byte	.LASF296
 13258 1869 01       		.byte	0x1
 13259 186a BD0A     		.2byte	0xabd
 13260 186c 00000000 		.4byte	.LFB79
 13261 1870 08010000 		.4byte	.LFE79-.LFB79
 13262 1874 01       		.uleb128 0x1
 13263 1875 9C       		.byte	0x9c
 13264 1876 EA180000 		.4byte	0x18ea
 13265 187a 1B       		.uleb128 0x1b
 13266 187b 93100000 		.4byte	.LASF297
 13267 187f 01       		.byte	0x1
 13268 1880 BF0A     		.2byte	0xabf
 13269 1882 EA000000 		.4byte	0xea
 13270 1886 02       		.uleb128 0x2
 13271 1887 91       		.byte	0x91
 13272 1888 64       		.sleb128 -28
 13273 1889 1B       		.uleb128 0x1b
 13274 188a E80D0000 		.4byte	.LASF298
 13275 188e 01       		.byte	0x1
 13276 188f C00A     		.2byte	0xac0
 13277 1891 81000000 		.4byte	0x81
 13278 1895 05       		.uleb128 0x5
 13279 1896 03       		.byte	0x3
 13280 1897 CC010000 		.4byte	row_number.10561
 13281 189b 1B       		.uleb128 0x1b
 13282 189c AD040000 		.4byte	.LASF299
 13283 18a0 01       		.byte	0x1
 13284 18a1 C10A     		.2byte	0xac1
 13285 18a3 81000000 		.4byte	0x81
 13286 18a7 02       		.uleb128 0x2
 13287 18a8 91       		.byte	0x91
 13288 18a9 77       		.sleb128 -9
 13289 18aa 1B       		.uleb128 0x1b
 13290 18ab 9C0E0000 		.4byte	.LASF300
 13291 18af 01       		.byte	0x1
 13292 18b0 C20A     		.2byte	0xac2
 13293 18b2 EA180000 		.4byte	0x18ea
 13294 18b6 02       		.uleb128 0x2
 13295 18b7 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 288


 13296 18b8 70       		.sleb128 -16
 13297 18b9 1B       		.uleb128 0x1b
 13298 18ba 1E010000 		.4byte	.LASF301
 13299 18be 01       		.byte	0x1
 13300 18bf C30A     		.2byte	0xac3
 13301 18c1 EA180000 		.4byte	0x18ea
 13302 18c5 02       		.uleb128 0x2
 13303 18c6 91       		.byte	0x91
 13304 18c7 6C       		.sleb128 -20
 13305 18c8 1B       		.uleb128 0x1b
 13306 18c9 97120000 		.4byte	.LASF302
 13307 18cd 01       		.byte	0x1
 13308 18ce C40A     		.2byte	0xac4
 13309 18d0 81000000 		.4byte	0x81
 13310 18d4 02       		.uleb128 0x2
 13311 18d5 91       		.byte	0x91
 13312 18d6 6B       		.sleb128 -21
 13313 18d7 1B       		.uleb128 0x1b
 13314 18d8 060B0000 		.4byte	.LASF303
 13315 18dc 01       		.byte	0x1
 13316 18dd C50A     		.2byte	0xac5
 13317 18df EA180000 		.4byte	0x18ea
 13318 18e3 05       		.uleb128 0x5
 13319 18e4 03       		.byte	0x3
 13320 18e5 C8010000 		.4byte	m_addr.10566
 13321 18e9 00       		.byte	0
 13322 18ea 0C       		.uleb128 0xc
 13323 18eb 04       		.byte	0x4
 13324 18ec 81000000 		.4byte	0x81
 13325 18f0 07       		.uleb128 0x7
 13326 18f1 00190000 		.4byte	0x1900
 13327 18f5 00190000 		.4byte	0x1900
 13328 18f9 08       		.uleb128 0x8
 13329 18fa 0E010000 		.4byte	0x10e
 13330 18fe 1C       		.byte	0x1c
 13331 18ff 00       		.byte	0
 13332 1900 27       		.uleb128 0x27
 13333 1901 81000000 		.4byte	0x81
 13334 1905 19       		.uleb128 0x19
 13335 1906 A70E0000 		.4byte	.LASF304
 13336 190a 01       		.byte	0x1
 13337 190b 40       		.byte	0x40
 13338 190c 16190000 		.4byte	0x1916
 13339 1910 05       		.uleb128 0x5
 13340 1911 03       		.byte	0x3
 13341 1912 00000000 		.4byte	pwm_preload_values
 13342 1916 27       		.uleb128 0x27
 13343 1917 F0180000 		.4byte	0x18f0
 13344 191b 28       		.uleb128 0x28
 13345 191c 12100000 		.4byte	.LASF305
 13346 1920 08       		.byte	0x8
 13347 1921 1207     		.2byte	0x712
 13348 1923 27190000 		.4byte	0x1927
 13349 1927 06       		.uleb128 0x6
 13350 1928 76000000 		.4byte	0x76
 13351 192c 07       		.uleb128 0x7
 13352 192d A0090000 		.4byte	0x9a0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 289


 13353 1931 3C190000 		.4byte	0x193c
 13354 1935 08       		.uleb128 0x8
 13355 1936 0E010000 		.4byte	0x10e
 13356 193a 01       		.byte	0x1
 13357 193b 00       		.byte	0
 13358 193c 28       		.uleb128 0x28
 13359 193d 7C050000 		.4byte	.LASF306
 13360 1941 07       		.byte	0x7
 13361 1942 3802     		.2byte	0x238
 13362 1944 2C190000 		.4byte	0x192c
 13363 1948 07       		.uleb128 0x7
 13364 1949 A5010000 		.4byte	0x1a5
 13365 194d 58190000 		.4byte	0x1958
 13366 1951 08       		.uleb128 0x8
 13367 1952 0E010000 		.4byte	0x10e
 13368 1956 01       		.byte	0x1
 13369 1957 00       		.byte	0
 13370 1958 28       		.uleb128 0x28
 13371 1959 76070000 		.4byte	.LASF307
 13372 195d 07       		.byte	0x7
 13373 195e 3902     		.2byte	0x239
 13374 1960 48190000 		.4byte	0x1948
 13375 1964 28       		.uleb128 0x28
 13376 1965 D1040000 		.4byte	.LASF308
 13377 1969 07       		.byte	0x7
 13378 196a 3902     		.2byte	0x239
 13379 196c 48190000 		.4byte	0x1948
 13380 1970 28       		.uleb128 0x28
 13381 1971 5A0C0000 		.4byte	.LASF309
 13382 1975 07       		.byte	0x7
 13383 1976 3902     		.2byte	0x239
 13384 1978 48190000 		.4byte	0x1948
 13385 197c 07       		.uleb128 0x7
 13386 197d E2010000 		.4byte	0x1e2
 13387 1981 8C190000 		.4byte	0x198c
 13388 1985 08       		.uleb128 0x8
 13389 1986 0E010000 		.4byte	0x10e
 13390 198a 01       		.byte	0x1
 13391 198b 00       		.byte	0
 13392 198c 28       		.uleb128 0x28
 13393 198d 21070000 		.4byte	.LASF310
 13394 1991 07       		.byte	0x7
 13395 1992 3A02     		.2byte	0x23a
 13396 1994 7C190000 		.4byte	0x197c
 13397 1998 28       		.uleb128 0x28
 13398 1999 8D120000 		.4byte	.LASF311
 13399 199d 07       		.byte	0x7
 13400 199e 3A02     		.2byte	0x23a
 13401 19a0 7C190000 		.4byte	0x197c
 13402 19a4 28       		.uleb128 0x28
 13403 19a5 D9110000 		.4byte	.LASF312
 13404 19a9 07       		.byte	0x7
 13405 19aa 3B02     		.2byte	0x23b
 13406 19ac 6B020000 		.4byte	0x26b
 13407 19b0 28       		.uleb128 0x28
 13408 19b1 65030000 		.4byte	.LASF313
 13409 19b5 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 290


 13410 19b6 3B02     		.2byte	0x23b
 13411 19b8 6B020000 		.4byte	0x26b
 13412 19bc 28       		.uleb128 0x28
 13413 19bd EC0E0000 		.4byte	.LASF314
 13414 19c1 07       		.byte	0x7
 13415 19c2 3C02     		.2byte	0x23c
 13416 19c4 C0020000 		.4byte	0x2c0
 13417 19c8 28       		.uleb128 0x28
 13418 19c9 93000000 		.4byte	.LASF315
 13419 19cd 07       		.byte	0x7
 13420 19ce 3D02     		.2byte	0x23d
 13421 19d0 DB020000 		.4byte	0x2db
 13422 19d4 28       		.uleb128 0x28
 13423 19d5 050F0000 		.4byte	.LASF316
 13424 19d9 07       		.byte	0x7
 13425 19da 3E02     		.2byte	0x23e
 13426 19dc 0D0A0000 		.4byte	0xa0d
 13427 19e0 28       		.uleb128 0x28
 13428 19e1 0D0B0000 		.4byte	.LASF317
 13429 19e5 07       		.byte	0x7
 13430 19e6 3E02     		.2byte	0x23e
 13431 19e8 0D0A0000 		.4byte	0xa0d
 13432 19ec 28       		.uleb128 0x28
 13433 19ed DA090000 		.4byte	.LASF318
 13434 19f1 07       		.byte	0x7
 13435 19f2 3F02     		.2byte	0x23f
 13436 19f4 E60B0000 		.4byte	0xbe6
 13437 19f8 07       		.uleb128 0x7
 13438 19f9 BE0B0000 		.4byte	0xbbe
 13439 19fd 081A0000 		.4byte	0x1a08
 13440 1a01 08       		.uleb128 0x8
 13441 1a02 0E010000 		.4byte	0x10e
 13442 1a06 01       		.byte	0x1
 13443 1a07 00       		.byte	0
 13444 1a08 28       		.uleb128 0x28
 13445 1a09 460C0000 		.4byte	.LASF319
 13446 1a0d 07       		.byte	0x7
 13447 1a0e 4002     		.2byte	0x240
 13448 1a10 F8190000 		.4byte	0x19f8
 13449 1a14 28       		.uleb128 0x28
 13450 1a15 350A0000 		.4byte	.LASF320
 13451 1a19 07       		.byte	0x7
 13452 1a1a 4002     		.2byte	0x240
 13453 1a1c F8190000 		.4byte	0x19f8
 13454 1a20 28       		.uleb128 0x28
 13455 1a21 300C0000 		.4byte	.LASF321
 13456 1a25 07       		.byte	0x7
 13457 1a26 4002     		.2byte	0x240
 13458 1a28 F8190000 		.4byte	0x19f8
 13459 1a2c 07       		.uleb128 0x7
 13460 1a2d BE0B0000 		.4byte	0xbbe
 13461 1a31 3C1A0000 		.4byte	0x1a3c
 13462 1a35 08       		.uleb128 0x8
 13463 1a36 0E010000 		.4byte	0x10e
 13464 1a3a 02       		.byte	0x2
 13465 1a3b 00       		.byte	0
 13466 1a3c 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 291


 13467 1a3d 73050000 		.4byte	.LASF322
 13468 1a41 07       		.byte	0x7
 13469 1a42 4102     		.2byte	0x241
 13470 1a44 2C1A0000 		.4byte	0x1a2c
 13471 1a48 07       		.uleb128 0x7
 13472 1a49 BE0B0000 		.4byte	0xbbe
 13473 1a4d 581A0000 		.4byte	0x1a58
 13474 1a51 08       		.uleb128 0x8
 13475 1a52 0E010000 		.4byte	0x10e
 13476 1a56 07       		.byte	0x7
 13477 1a57 00       		.byte	0
 13478 1a58 28       		.uleb128 0x28
 13479 1a59 AE010000 		.4byte	.LASF323
 13480 1a5d 07       		.byte	0x7
 13481 1a5e 4202     		.2byte	0x242
 13482 1a60 481A0000 		.4byte	0x1a48
 13483 1a64 28       		.uleb128 0x28
 13484 1a65 92030000 		.4byte	.LASF324
 13485 1a69 07       		.byte	0x7
 13486 1a6a 4302     		.2byte	0x243
 13487 1a6c BE0B0000 		.4byte	0xbbe
 13488 1a70 28       		.uleb128 0x28
 13489 1a71 CA020000 		.4byte	.LASF325
 13490 1a75 07       		.byte	0x7
 13491 1a76 4502     		.2byte	0x245
 13492 1a78 8D000000 		.4byte	0x8d
 13493 1a7c 28       		.uleb128 0x28
 13494 1a7d BA090000 		.4byte	.LASF326
 13495 1a81 07       		.byte	0x7
 13496 1a82 4602     		.2byte	0x246
 13497 1a84 8D000000 		.4byte	0x8d
 13498 1a88 28       		.uleb128 0x28
 13499 1a89 D60C0000 		.4byte	.LASF327
 13500 1a8d 07       		.byte	0x7
 13501 1a8e 4702     		.2byte	0x247
 13502 1a90 D5000000 		.4byte	0xd5
 13503 1a94 28       		.uleb128 0x28
 13504 1a95 A6050000 		.4byte	.LASF328
 13505 1a99 07       		.byte	0x7
 13506 1a9a 4902     		.2byte	0x249
 13507 1a9c BD000000 		.4byte	0xbd
 13508 1aa0 28       		.uleb128 0x28
 13509 1aa1 900D0000 		.4byte	.LASF329
 13510 1aa5 07       		.byte	0x7
 13511 1aa6 4A02     		.2byte	0x24a
 13512 1aa8 A0020000 		.4byte	0x2a0
 13513 1aac 28       		.uleb128 0x28
 13514 1aad 85100000 		.4byte	.LASF330
 13515 1ab1 07       		.byte	0x7
 13516 1ab2 4B02     		.2byte	0x24b
 13517 1ab4 45070000 		.4byte	0x745
 13518 1ab8 28       		.uleb128 0x28
 13519 1ab9 A60F0000 		.4byte	.LASF331
 13520 1abd 07       		.byte	0x7
 13521 1abe 4C02     		.2byte	0x24c
 13522 1ac0 45070000 		.4byte	0x745
 13523 1ac4 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 292


 13524 1ac5 5D060000 		.4byte	.LASF332
 13525 1ac9 07       		.byte	0x7
 13526 1aca 4D02     		.2byte	0x24d
 13527 1acc A0020000 		.4byte	0x2a0
 13528 1ad0 28       		.uleb128 0x28
 13529 1ad1 1F100000 		.4byte	.LASF333
 13530 1ad5 07       		.byte	0x7
 13531 1ad6 4E02     		.2byte	0x24e
 13532 1ad8 A0020000 		.4byte	0x2a0
 13533 1adc 28       		.uleb128 0x28
 13534 1add 020D0000 		.4byte	.LASF334
 13535 1ae1 07       		.byte	0x7
 13536 1ae2 4F02     		.2byte	0x24f
 13537 1ae4 BD000000 		.4byte	0xbd
 13538 1ae8 28       		.uleb128 0x28
 13539 1ae9 FF060000 		.4byte	.LASF335
 13540 1aed 07       		.byte	0x7
 13541 1aee 5102     		.2byte	0x251
 13542 1af0 920C0000 		.4byte	0xc92
 13543 1af4 28       		.uleb128 0x28
 13544 1af5 FB040000 		.4byte	.LASF336
 13545 1af9 07       		.byte	0x7
 13546 1afa 5202     		.2byte	0x252
 13547 1afc 5A0C0000 		.4byte	0xc5a
 13548 1b00 28       		.uleb128 0x28
 13549 1b01 51040000 		.4byte	.LASF337
 13550 1b05 07       		.byte	0x7
 13551 1b06 5302     		.2byte	0x253
 13552 1b08 5A0C0000 		.4byte	0xc5a
 13553 1b0c 28       		.uleb128 0x28
 13554 1b0d 150D0000 		.4byte	.LASF338
 13555 1b11 07       		.byte	0x7
 13556 1b12 5402     		.2byte	0x254
 13557 1b14 5A0C0000 		.4byte	0xc5a
 13558 1b18 28       		.uleb128 0x28
 13559 1b19 09120000 		.4byte	.LASF339
 13560 1b1d 07       		.byte	0x7
 13561 1b1e 5502     		.2byte	0x255
 13562 1b20 5A0C0000 		.4byte	0xc5a
 13563 1b24 28       		.uleb128 0x28
 13564 1b25 A1080000 		.4byte	.LASF340
 13565 1b29 07       		.byte	0x7
 13566 1b2a 5802     		.2byte	0x258
 13567 1b2c 55070000 		.4byte	0x755
 13568 1b30 28       		.uleb128 0x28
 13569 1b31 E2000000 		.4byte	.LASF341
 13570 1b35 07       		.byte	0x7
 13571 1b36 5902     		.2byte	0x259
 13572 1b38 81000000 		.4byte	0x81
 13573 1b3c 28       		.uleb128 0x28
 13574 1b3d 66040000 		.4byte	.LASF342
 13575 1b41 07       		.byte	0x7
 13576 1b42 5A02     		.2byte	0x25a
 13577 1b44 81000000 		.4byte	0x81
 13578 1b48 28       		.uleb128 0x28
 13579 1b49 00010000 		.4byte	.LASF343
 13580 1b4d 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 293


 13581 1b4e 5B02     		.2byte	0x25b
 13582 1b50 81000000 		.4byte	0x81
 13583 1b54 28       		.uleb128 0x28
 13584 1b55 C1120000 		.4byte	.LASF344
 13585 1b59 07       		.byte	0x7
 13586 1b5a 5D02     		.2byte	0x25d
 13587 1b5c 81000000 		.4byte	0x81
 13588 1b60 28       		.uleb128 0x28
 13589 1b61 4D0C0000 		.4byte	.LASF345
 13590 1b65 07       		.byte	0x7
 13591 1b66 5E02     		.2byte	0x25e
 13592 1b68 81000000 		.4byte	0x81
 13593 1b6c 28       		.uleb128 0x28
 13594 1b6d B7040000 		.4byte	.LASF346
 13595 1b71 07       		.byte	0x7
 13596 1b72 5F02     		.2byte	0x25f
 13597 1b74 81000000 		.4byte	0x81
 13598 1b78 28       		.uleb128 0x28
 13599 1b79 81080000 		.4byte	.LASF347
 13600 1b7d 07       		.byte	0x7
 13601 1b7e 6002     		.2byte	0x260
 13602 1b80 81000000 		.4byte	0x81
 13603 1b84 28       		.uleb128 0x28
 13604 1b85 1A0A0000 		.4byte	.LASF348
 13605 1b89 07       		.byte	0x7
 13606 1b8a 6102     		.2byte	0x261
 13607 1b8c 81000000 		.4byte	0x81
 13608 1b90 07       		.uleb128 0x7
 13609 1b91 B1000000 		.4byte	0xb1
 13610 1b95 A01B0000 		.4byte	0x1ba0
 13611 1b99 08       		.uleb128 0x8
 13612 1b9a 0E010000 		.4byte	0x10e
 13613 1b9e 0B       		.byte	0xb
 13614 1b9f 00       		.byte	0
 13615 1ba0 28       		.uleb128 0x28
 13616 1ba1 5E040000 		.4byte	.LASF349
 13617 1ba5 07       		.byte	0x7
 13618 1ba6 6502     		.2byte	0x265
 13619 1ba8 901B0000 		.4byte	0x1b90
 13620 1bac 28       		.uleb128 0x28
 13621 1bad 40120000 		.4byte	.LASF350
 13622 1bb1 07       		.byte	0x7
 13623 1bb2 6602     		.2byte	0x266
 13624 1bb4 81000000 		.4byte	0x81
 13625 1bb8 07       		.uleb128 0x7
 13626 1bb9 A5000000 		.4byte	0xa5
 13627 1bbd C81B0000 		.4byte	0x1bc8
 13628 1bc1 08       		.uleb128 0x8
 13629 1bc2 0E010000 		.4byte	0x10e
 13630 1bc6 01       		.byte	0x1
 13631 1bc7 00       		.byte	0
 13632 1bc8 28       		.uleb128 0x28
 13633 1bc9 4E050000 		.4byte	.LASF351
 13634 1bcd 07       		.byte	0x7
 13635 1bce 6902     		.2byte	0x269
 13636 1bd0 B81B0000 		.4byte	0x1bb8
 13637 1bd4 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 294


 13638 1bd5 99000000 		.4byte	0x99
 13639 1bd9 EA1B0000 		.4byte	0x1bea
 13640 1bdd 08       		.uleb128 0x8
 13641 1bde 0E010000 		.4byte	0x10e
 13642 1be2 01       		.byte	0x1
 13643 1be3 08       		.uleb128 0x8
 13644 1be4 0E010000 		.4byte	0x10e
 13645 1be8 04       		.byte	0x4
 13646 1be9 00       		.byte	0
 13647 1bea 28       		.uleb128 0x28
 13648 1beb 65070000 		.4byte	.LASF352
 13649 1bef 07       		.byte	0x7
 13650 1bf0 6C02     		.2byte	0x26c
 13651 1bf2 D41B0000 		.4byte	0x1bd4
 13652 1bf6 07       		.uleb128 0x7
 13653 1bf7 8D000000 		.4byte	0x8d
 13654 1bfb 0C1C0000 		.4byte	0x1c0c
 13655 1bff 08       		.uleb128 0x8
 13656 1c00 0E010000 		.4byte	0x10e
 13657 1c04 01       		.byte	0x1
 13658 1c05 08       		.uleb128 0x8
 13659 1c06 0E010000 		.4byte	0x10e
 13660 1c0a 04       		.byte	0x4
 13661 1c0b 00       		.byte	0
 13662 1c0c 28       		.uleb128 0x28
 13663 1c0d 15110000 		.4byte	.LASF353
 13664 1c11 07       		.byte	0x7
 13665 1c12 6E02     		.2byte	0x26e
 13666 1c14 F61B0000 		.4byte	0x1bf6
 13667 1c18 07       		.uleb128 0x7
 13668 1c19 81000000 		.4byte	0x81
 13669 1c1d 2E1C0000 		.4byte	0x1c2e
 13670 1c21 08       		.uleb128 0x8
 13671 1c22 0E010000 		.4byte	0x10e
 13672 1c26 01       		.byte	0x1
 13673 1c27 08       		.uleb128 0x8
 13674 1c28 0E010000 		.4byte	0x10e
 13675 1c2c 04       		.byte	0x4
 13676 1c2d 00       		.byte	0
 13677 1c2e 28       		.uleb128 0x28
 13678 1c2f 36070000 		.4byte	.LASF354
 13679 1c33 07       		.byte	0x7
 13680 1c34 6F02     		.2byte	0x26f
 13681 1c36 181C0000 		.4byte	0x1c18
 13682 1c3a 28       		.uleb128 0x28
 13683 1c3b D8030000 		.4byte	.LASF355
 13684 1c3f 07       		.byte	0x7
 13685 1c40 7002     		.2byte	0x270
 13686 1c42 55070000 		.4byte	0x755
 13687 1c46 28       		.uleb128 0x28
 13688 1c47 280B0000 		.4byte	.LASF356
 13689 1c4b 07       		.byte	0x7
 13690 1c4c 7302     		.2byte	0x273
 13691 1c4e BD000000 		.4byte	0xbd
 13692 1c52 28       		.uleb128 0x28
 13693 1c53 40060000 		.4byte	.LASF357
 13694 1c57 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 295


 13695 1c58 7602     		.2byte	0x276
 13696 1c5a 9F010000 		.4byte	0x19f
 13697 1c5e 28       		.uleb128 0x28
 13698 1c5f 1B080000 		.4byte	.LASF358
 13699 1c63 07       		.byte	0x7
 13700 1c64 7902     		.2byte	0x279
 13701 1c66 9F010000 		.4byte	0x19f
 13702 1c6a 07       		.uleb128 0x7
 13703 1c6b 420B0000 		.4byte	0xb42
 13704 1c6f 7A1C0000 		.4byte	0x1c7a
 13705 1c73 08       		.uleb128 0x8
 13706 1c74 0E010000 		.4byte	0x10e
 13707 1c78 04       		.byte	0x4
 13708 1c79 00       		.byte	0
 13709 1c7a 28       		.uleb128 0x28
 13710 1c7b 6D050000 		.4byte	.LASF359
 13711 1c7f 07       		.byte	0x7
 13712 1c80 8202     		.2byte	0x282
 13713 1c82 6A1C0000 		.4byte	0x1c6a
 13714 1c86 28       		.uleb128 0x28
 13715 1c87 A3060000 		.4byte	.LASF360
 13716 1c8b 07       		.byte	0x7
 13717 1c8c 8202     		.2byte	0x282
 13718 1c8e 6A1C0000 		.4byte	0x1c6a
 13719 1c92 28       		.uleb128 0x28
 13720 1c93 5E120000 		.4byte	.LASF361
 13721 1c97 07       		.byte	0x7
 13722 1c98 8B02     		.2byte	0x28b
 13723 1c9a 81000000 		.4byte	0x81
 13724 1c9e 00       		.byte	0
 13725              		.section	.debug_abbrev,"",%progbits
 13726              	.Ldebug_abbrev0:
 13727 0000 01       		.uleb128 0x1
 13728 0001 11       		.uleb128 0x11
 13729 0002 01       		.byte	0x1
 13730 0003 25       		.uleb128 0x25
 13731 0004 0E       		.uleb128 0xe
 13732 0005 13       		.uleb128 0x13
 13733 0006 0B       		.uleb128 0xb
 13734 0007 03       		.uleb128 0x3
 13735 0008 0E       		.uleb128 0xe
 13736 0009 1B       		.uleb128 0x1b
 13737 000a 0E       		.uleb128 0xe
 13738 000b 55       		.uleb128 0x55
 13739 000c 17       		.uleb128 0x17
 13740 000d 11       		.uleb128 0x11
 13741 000e 01       		.uleb128 0x1
 13742 000f 10       		.uleb128 0x10
 13743 0010 17       		.uleb128 0x17
 13744 0011 00       		.byte	0
 13745 0012 00       		.byte	0
 13746 0013 02       		.uleb128 0x2
 13747 0014 24       		.uleb128 0x24
 13748 0015 00       		.byte	0
 13749 0016 0B       		.uleb128 0xb
 13750 0017 0B       		.uleb128 0xb
 13751 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 296


 13752 0019 0B       		.uleb128 0xb
 13753 001a 03       		.uleb128 0x3
 13754 001b 0E       		.uleb128 0xe
 13755 001c 00       		.byte	0
 13756 001d 00       		.byte	0
 13757 001e 03       		.uleb128 0x3
 13758 001f 16       		.uleb128 0x16
 13759 0020 00       		.byte	0
 13760 0021 03       		.uleb128 0x3
 13761 0022 0E       		.uleb128 0xe
 13762 0023 3A       		.uleb128 0x3a
 13763 0024 0B       		.uleb128 0xb
 13764 0025 3B       		.uleb128 0x3b
 13765 0026 0B       		.uleb128 0xb
 13766 0027 49       		.uleb128 0x49
 13767 0028 13       		.uleb128 0x13
 13768 0029 00       		.byte	0
 13769 002a 00       		.byte	0
 13770 002b 04       		.uleb128 0x4
 13771 002c 24       		.uleb128 0x24
 13772 002d 00       		.byte	0
 13773 002e 0B       		.uleb128 0xb
 13774 002f 0B       		.uleb128 0xb
 13775 0030 3E       		.uleb128 0x3e
 13776 0031 0B       		.uleb128 0xb
 13777 0032 03       		.uleb128 0x3
 13778 0033 08       		.uleb128 0x8
 13779 0034 00       		.byte	0
 13780 0035 00       		.byte	0
 13781 0036 05       		.uleb128 0x5
 13782 0037 16       		.uleb128 0x16
 13783 0038 00       		.byte	0
 13784 0039 03       		.uleb128 0x3
 13785 003a 0E       		.uleb128 0xe
 13786 003b 3A       		.uleb128 0x3a
 13787 003c 0B       		.uleb128 0xb
 13788 003d 3B       		.uleb128 0x3b
 13789 003e 05       		.uleb128 0x5
 13790 003f 49       		.uleb128 0x49
 13791 0040 13       		.uleb128 0x13
 13792 0041 00       		.byte	0
 13793 0042 00       		.byte	0
 13794 0043 06       		.uleb128 0x6
 13795 0044 35       		.uleb128 0x35
 13796 0045 00       		.byte	0
 13797 0046 49       		.uleb128 0x49
 13798 0047 13       		.uleb128 0x13
 13799 0048 00       		.byte	0
 13800 0049 00       		.byte	0
 13801 004a 07       		.uleb128 0x7
 13802 004b 01       		.uleb128 0x1
 13803 004c 01       		.byte	0x1
 13804 004d 49       		.uleb128 0x49
 13805 004e 13       		.uleb128 0x13
 13806 004f 01       		.uleb128 0x1
 13807 0050 13       		.uleb128 0x13
 13808 0051 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 297


 13809 0052 00       		.byte	0
 13810 0053 08       		.uleb128 0x8
 13811 0054 21       		.uleb128 0x21
 13812 0055 00       		.byte	0
 13813 0056 49       		.uleb128 0x49
 13814 0057 13       		.uleb128 0x13
 13815 0058 2F       		.uleb128 0x2f
 13816 0059 0B       		.uleb128 0xb
 13817 005a 00       		.byte	0
 13818 005b 00       		.byte	0
 13819 005c 09       		.uleb128 0x9
 13820 005d 04       		.uleb128 0x4
 13821 005e 01       		.byte	0x1
 13822 005f 03       		.uleb128 0x3
 13823 0060 0E       		.uleb128 0xe
 13824 0061 0B       		.uleb128 0xb
 13825 0062 0B       		.uleb128 0xb
 13826 0063 49       		.uleb128 0x49
 13827 0064 13       		.uleb128 0x13
 13828 0065 3A       		.uleb128 0x3a
 13829 0066 0B       		.uleb128 0xb
 13830 0067 3B       		.uleb128 0x3b
 13831 0068 0B       		.uleb128 0xb
 13832 0069 01       		.uleb128 0x1
 13833 006a 13       		.uleb128 0x13
 13834 006b 00       		.byte	0
 13835 006c 00       		.byte	0
 13836 006d 0A       		.uleb128 0xa
 13837 006e 28       		.uleb128 0x28
 13838 006f 00       		.byte	0
 13839 0070 03       		.uleb128 0x3
 13840 0071 0E       		.uleb128 0xe
 13841 0072 1C       		.uleb128 0x1c
 13842 0073 0B       		.uleb128 0xb
 13843 0074 00       		.byte	0
 13844 0075 00       		.byte	0
 13845 0076 0B       		.uleb128 0xb
 13846 0077 13       		.uleb128 0x13
 13847 0078 00       		.byte	0
 13848 0079 03       		.uleb128 0x3
 13849 007a 0E       		.uleb128 0xe
 13850 007b 3C       		.uleb128 0x3c
 13851 007c 19       		.uleb128 0x19
 13852 007d 00       		.byte	0
 13853 007e 00       		.byte	0
 13854 007f 0C       		.uleb128 0xc
 13855 0080 0F       		.uleb128 0xf
 13856 0081 00       		.byte	0
 13857 0082 0B       		.uleb128 0xb
 13858 0083 0B       		.uleb128 0xb
 13859 0084 49       		.uleb128 0x49
 13860 0085 13       		.uleb128 0x13
 13861 0086 00       		.byte	0
 13862 0087 00       		.byte	0
 13863 0088 0D       		.uleb128 0xd
 13864 0089 13       		.uleb128 0x13
 13865 008a 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 298


 13866 008b 03       		.uleb128 0x3
 13867 008c 0E       		.uleb128 0xe
 13868 008d 0B       		.uleb128 0xb
 13869 008e 0B       		.uleb128 0xb
 13870 008f 3A       		.uleb128 0x3a
 13871 0090 0B       		.uleb128 0xb
 13872 0091 3B       		.uleb128 0x3b
 13873 0092 0B       		.uleb128 0xb
 13874 0093 01       		.uleb128 0x1
 13875 0094 13       		.uleb128 0x13
 13876 0095 00       		.byte	0
 13877 0096 00       		.byte	0
 13878 0097 0E       		.uleb128 0xe
 13879 0098 0D       		.uleb128 0xd
 13880 0099 00       		.byte	0
 13881 009a 03       		.uleb128 0x3
 13882 009b 08       		.uleb128 0x8
 13883 009c 3A       		.uleb128 0x3a
 13884 009d 0B       		.uleb128 0xb
 13885 009e 3B       		.uleb128 0x3b
 13886 009f 0B       		.uleb128 0xb
 13887 00a0 49       		.uleb128 0x49
 13888 00a1 13       		.uleb128 0x13
 13889 00a2 38       		.uleb128 0x38
 13890 00a3 0B       		.uleb128 0xb
 13891 00a4 00       		.byte	0
 13892 00a5 00       		.byte	0
 13893 00a6 0F       		.uleb128 0xf
 13894 00a7 0D       		.uleb128 0xd
 13895 00a8 00       		.byte	0
 13896 00a9 03       		.uleb128 0x3
 13897 00aa 0E       		.uleb128 0xe
 13898 00ab 3A       		.uleb128 0x3a
 13899 00ac 0B       		.uleb128 0xb
 13900 00ad 3B       		.uleb128 0x3b
 13901 00ae 0B       		.uleb128 0xb
 13902 00af 49       		.uleb128 0x49
 13903 00b0 13       		.uleb128 0x13
 13904 00b1 38       		.uleb128 0x38
 13905 00b2 0B       		.uleb128 0xb
 13906 00b3 00       		.byte	0
 13907 00b4 00       		.byte	0
 13908 00b5 10       		.uleb128 0x10
 13909 00b6 13       		.uleb128 0x13
 13910 00b7 01       		.byte	0x1
 13911 00b8 03       		.uleb128 0x3
 13912 00b9 0E       		.uleb128 0xe
 13913 00ba 0B       		.uleb128 0xb
 13914 00bb 0B       		.uleb128 0xb
 13915 00bc 3A       		.uleb128 0x3a
 13916 00bd 0B       		.uleb128 0xb
 13917 00be 3B       		.uleb128 0x3b
 13918 00bf 05       		.uleb128 0x5
 13919 00c0 01       		.uleb128 0x1
 13920 00c1 13       		.uleb128 0x13
 13921 00c2 00       		.byte	0
 13922 00c3 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 299


 13923 00c4 11       		.uleb128 0x11
 13924 00c5 0D       		.uleb128 0xd
 13925 00c6 00       		.byte	0
 13926 00c7 03       		.uleb128 0x3
 13927 00c8 08       		.uleb128 0x8
 13928 00c9 3A       		.uleb128 0x3a
 13929 00ca 0B       		.uleb128 0xb
 13930 00cb 3B       		.uleb128 0x3b
 13931 00cc 05       		.uleb128 0x5
 13932 00cd 49       		.uleb128 0x49
 13933 00ce 13       		.uleb128 0x13
 13934 00cf 38       		.uleb128 0x38
 13935 00d0 0B       		.uleb128 0xb
 13936 00d1 00       		.byte	0
 13937 00d2 00       		.byte	0
 13938 00d3 12       		.uleb128 0x12
 13939 00d4 0D       		.uleb128 0xd
 13940 00d5 00       		.byte	0
 13941 00d6 03       		.uleb128 0x3
 13942 00d7 0E       		.uleb128 0xe
 13943 00d8 3A       		.uleb128 0x3a
 13944 00d9 0B       		.uleb128 0xb
 13945 00da 3B       		.uleb128 0x3b
 13946 00db 05       		.uleb128 0x5
 13947 00dc 49       		.uleb128 0x49
 13948 00dd 13       		.uleb128 0x13
 13949 00de 38       		.uleb128 0x38
 13950 00df 0B       		.uleb128 0xb
 13951 00e0 00       		.byte	0
 13952 00e1 00       		.byte	0
 13953 00e2 13       		.uleb128 0x13
 13954 00e3 13       		.uleb128 0x13
 13955 00e4 01       		.byte	0x1
 13956 00e5 03       		.uleb128 0x3
 13957 00e6 0E       		.uleb128 0xe
 13958 00e7 0B       		.uleb128 0xb
 13959 00e8 05       		.uleb128 0x5
 13960 00e9 3A       		.uleb128 0x3a
 13961 00ea 0B       		.uleb128 0xb
 13962 00eb 3B       		.uleb128 0x3b
 13963 00ec 05       		.uleb128 0x5
 13964 00ed 01       		.uleb128 0x1
 13965 00ee 13       		.uleb128 0x13
 13966 00ef 00       		.byte	0
 13967 00f0 00       		.byte	0
 13968 00f1 14       		.uleb128 0x14
 13969 00f2 0D       		.uleb128 0xd
 13970 00f3 00       		.byte	0
 13971 00f4 03       		.uleb128 0x3
 13972 00f5 08       		.uleb128 0x8
 13973 00f6 3A       		.uleb128 0x3a
 13974 00f7 0B       		.uleb128 0xb
 13975 00f8 3B       		.uleb128 0x3b
 13976 00f9 05       		.uleb128 0x5
 13977 00fa 49       		.uleb128 0x49
 13978 00fb 13       		.uleb128 0x13
 13979 00fc 38       		.uleb128 0x38
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 300


 13980 00fd 05       		.uleb128 0x5
 13981 00fe 00       		.byte	0
 13982 00ff 00       		.byte	0
 13983 0100 15       		.uleb128 0x15
 13984 0101 0D       		.uleb128 0xd
 13985 0102 00       		.byte	0
 13986 0103 03       		.uleb128 0x3
 13987 0104 0E       		.uleb128 0xe
 13988 0105 3A       		.uleb128 0x3a
 13989 0106 0B       		.uleb128 0xb
 13990 0107 3B       		.uleb128 0x3b
 13991 0108 05       		.uleb128 0x5
 13992 0109 49       		.uleb128 0x49
 13993 010a 13       		.uleb128 0x13
 13994 010b 38       		.uleb128 0x38
 13995 010c 05       		.uleb128 0x5
 13996 010d 00       		.byte	0
 13997 010e 00       		.byte	0
 13998 010f 16       		.uleb128 0x16
 13999 0110 04       		.uleb128 0x4
 14000 0111 01       		.byte	0x1
 14001 0112 0B       		.uleb128 0xb
 14002 0113 0B       		.uleb128 0xb
 14003 0114 49       		.uleb128 0x49
 14004 0115 13       		.uleb128 0x13
 14005 0116 3A       		.uleb128 0x3a
 14006 0117 0B       		.uleb128 0xb
 14007 0118 3B       		.uleb128 0x3b
 14008 0119 05       		.uleb128 0x5
 14009 011a 01       		.uleb128 0x1
 14010 011b 13       		.uleb128 0x13
 14011 011c 00       		.byte	0
 14012 011d 00       		.byte	0
 14013 011e 17       		.uleb128 0x17
 14014 011f 2E       		.uleb128 0x2e
 14015 0120 00       		.byte	0
 14016 0121 3F       		.uleb128 0x3f
 14017 0122 19       		.uleb128 0x19
 14018 0123 03       		.uleb128 0x3
 14019 0124 0E       		.uleb128 0xe
 14020 0125 3A       		.uleb128 0x3a
 14021 0126 0B       		.uleb128 0xb
 14022 0127 3B       		.uleb128 0x3b
 14023 0128 0B       		.uleb128 0xb
 14024 0129 27       		.uleb128 0x27
 14025 012a 19       		.uleb128 0x19
 14026 012b 11       		.uleb128 0x11
 14027 012c 01       		.uleb128 0x1
 14028 012d 12       		.uleb128 0x12
 14029 012e 06       		.uleb128 0x6
 14030 012f 40       		.uleb128 0x40
 14031 0130 18       		.uleb128 0x18
 14032 0131 9742     		.uleb128 0x2117
 14033 0133 19       		.uleb128 0x19
 14034 0134 00       		.byte	0
 14035 0135 00       		.byte	0
 14036 0136 18       		.uleb128 0x18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 301


 14037 0137 2E       		.uleb128 0x2e
 14038 0138 01       		.byte	0x1
 14039 0139 3F       		.uleb128 0x3f
 14040 013a 19       		.uleb128 0x19
 14041 013b 03       		.uleb128 0x3
 14042 013c 0E       		.uleb128 0xe
 14043 013d 3A       		.uleb128 0x3a
 14044 013e 0B       		.uleb128 0xb
 14045 013f 3B       		.uleb128 0x3b
 14046 0140 0B       		.uleb128 0xb
 14047 0141 11       		.uleb128 0x11
 14048 0142 01       		.uleb128 0x1
 14049 0143 12       		.uleb128 0x12
 14050 0144 06       		.uleb128 0x6
 14051 0145 40       		.uleb128 0x40
 14052 0146 18       		.uleb128 0x18
 14053 0147 9642     		.uleb128 0x2116
 14054 0149 19       		.uleb128 0x19
 14055 014a 01       		.uleb128 0x1
 14056 014b 13       		.uleb128 0x13
 14057 014c 00       		.byte	0
 14058 014d 00       		.byte	0
 14059 014e 19       		.uleb128 0x19
 14060 014f 34       		.uleb128 0x34
 14061 0150 00       		.byte	0
 14062 0151 03       		.uleb128 0x3
 14063 0152 0E       		.uleb128 0xe
 14064 0153 3A       		.uleb128 0x3a
 14065 0154 0B       		.uleb128 0xb
 14066 0155 3B       		.uleb128 0x3b
 14067 0156 0B       		.uleb128 0xb
 14068 0157 49       		.uleb128 0x49
 14069 0158 13       		.uleb128 0x13
 14070 0159 02       		.uleb128 0x2
 14071 015a 18       		.uleb128 0x18
 14072 015b 00       		.byte	0
 14073 015c 00       		.byte	0
 14074 015d 1A       		.uleb128 0x1a
 14075 015e 2E       		.uleb128 0x2e
 14076 015f 01       		.byte	0x1
 14077 0160 3F       		.uleb128 0x3f
 14078 0161 19       		.uleb128 0x19
 14079 0162 03       		.uleb128 0x3
 14080 0163 0E       		.uleb128 0xe
 14081 0164 3A       		.uleb128 0x3a
 14082 0165 0B       		.uleb128 0xb
 14083 0166 3B       		.uleb128 0x3b
 14084 0167 05       		.uleb128 0x5
 14085 0168 27       		.uleb128 0x27
 14086 0169 19       		.uleb128 0x19
 14087 016a 11       		.uleb128 0x11
 14088 016b 01       		.uleb128 0x1
 14089 016c 12       		.uleb128 0x12
 14090 016d 06       		.uleb128 0x6
 14091 016e 40       		.uleb128 0x40
 14092 016f 18       		.uleb128 0x18
 14093 0170 9642     		.uleb128 0x2116
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 302


 14094 0172 19       		.uleb128 0x19
 14095 0173 01       		.uleb128 0x1
 14096 0174 13       		.uleb128 0x13
 14097 0175 00       		.byte	0
 14098 0176 00       		.byte	0
 14099 0177 1B       		.uleb128 0x1b
 14100 0178 34       		.uleb128 0x34
 14101 0179 00       		.byte	0
 14102 017a 03       		.uleb128 0x3
 14103 017b 0E       		.uleb128 0xe
 14104 017c 3A       		.uleb128 0x3a
 14105 017d 0B       		.uleb128 0xb
 14106 017e 3B       		.uleb128 0x3b
 14107 017f 05       		.uleb128 0x5
 14108 0180 49       		.uleb128 0x49
 14109 0181 13       		.uleb128 0x13
 14110 0182 02       		.uleb128 0x2
 14111 0183 18       		.uleb128 0x18
 14112 0184 00       		.byte	0
 14113 0185 00       		.byte	0
 14114 0186 1C       		.uleb128 0x1c
 14115 0187 0B       		.uleb128 0xb
 14116 0188 01       		.byte	0x1
 14117 0189 11       		.uleb128 0x11
 14118 018a 01       		.uleb128 0x1
 14119 018b 12       		.uleb128 0x12
 14120 018c 06       		.uleb128 0x6
 14121 018d 00       		.byte	0
 14122 018e 00       		.byte	0
 14123 018f 1D       		.uleb128 0x1d
 14124 0190 21       		.uleb128 0x21
 14125 0191 00       		.byte	0
 14126 0192 49       		.uleb128 0x49
 14127 0193 13       		.uleb128 0x13
 14128 0194 2F       		.uleb128 0x2f
 14129 0195 05       		.uleb128 0x5
 14130 0196 00       		.byte	0
 14131 0197 00       		.byte	0
 14132 0198 1E       		.uleb128 0x1e
 14133 0199 05       		.uleb128 0x5
 14134 019a 00       		.byte	0
 14135 019b 03       		.uleb128 0x3
 14136 019c 0E       		.uleb128 0xe
 14137 019d 3A       		.uleb128 0x3a
 14138 019e 0B       		.uleb128 0xb
 14139 019f 3B       		.uleb128 0x3b
 14140 01a0 05       		.uleb128 0x5
 14141 01a1 49       		.uleb128 0x49
 14142 01a2 13       		.uleb128 0x13
 14143 01a3 02       		.uleb128 0x2
 14144 01a4 18       		.uleb128 0x18
 14145 01a5 00       		.byte	0
 14146 01a6 00       		.byte	0
 14147 01a7 1F       		.uleb128 0x1f
 14148 01a8 34       		.uleb128 0x34
 14149 01a9 00       		.byte	0
 14150 01aa 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 303


 14151 01ab 08       		.uleb128 0x8
 14152 01ac 3A       		.uleb128 0x3a
 14153 01ad 0B       		.uleb128 0xb
 14154 01ae 3B       		.uleb128 0x3b
 14155 01af 05       		.uleb128 0x5
 14156 01b0 49       		.uleb128 0x49
 14157 01b1 13       		.uleb128 0x13
 14158 01b2 02       		.uleb128 0x2
 14159 01b3 18       		.uleb128 0x18
 14160 01b4 00       		.byte	0
 14161 01b5 00       		.byte	0
 14162 01b6 20       		.uleb128 0x20
 14163 01b7 0B       		.uleb128 0xb
 14164 01b8 01       		.byte	0x1
 14165 01b9 55       		.uleb128 0x55
 14166 01ba 17       		.uleb128 0x17
 14167 01bb 00       		.byte	0
 14168 01bc 00       		.byte	0
 14169 01bd 21       		.uleb128 0x21
 14170 01be 2E       		.uleb128 0x2e
 14171 01bf 01       		.byte	0x1
 14172 01c0 3F       		.uleb128 0x3f
 14173 01c1 19       		.uleb128 0x19
 14174 01c2 03       		.uleb128 0x3
 14175 01c3 0E       		.uleb128 0xe
 14176 01c4 3A       		.uleb128 0x3a
 14177 01c5 0B       		.uleb128 0xb
 14178 01c6 3B       		.uleb128 0x3b
 14179 01c7 05       		.uleb128 0x5
 14180 01c8 27       		.uleb128 0x27
 14181 01c9 19       		.uleb128 0x19
 14182 01ca 11       		.uleb128 0x11
 14183 01cb 01       		.uleb128 0x1
 14184 01cc 12       		.uleb128 0x12
 14185 01cd 06       		.uleb128 0x6
 14186 01ce 40       		.uleb128 0x40
 14187 01cf 18       		.uleb128 0x18
 14188 01d0 9742     		.uleb128 0x2117
 14189 01d2 19       		.uleb128 0x19
 14190 01d3 01       		.uleb128 0x1
 14191 01d4 13       		.uleb128 0x13
 14192 01d5 00       		.byte	0
 14193 01d6 00       		.byte	0
 14194 01d7 22       		.uleb128 0x22
 14195 01d8 0B       		.uleb128 0xb
 14196 01d9 01       		.byte	0x1
 14197 01da 55       		.uleb128 0x55
 14198 01db 17       		.uleb128 0x17
 14199 01dc 01       		.uleb128 0x1
 14200 01dd 13       		.uleb128 0x13
 14201 01de 00       		.byte	0
 14202 01df 00       		.byte	0
 14203 01e0 23       		.uleb128 0x23
 14204 01e1 2E       		.uleb128 0x2e
 14205 01e2 01       		.byte	0x1
 14206 01e3 3F       		.uleb128 0x3f
 14207 01e4 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 304


 14208 01e5 03       		.uleb128 0x3
 14209 01e6 0E       		.uleb128 0xe
 14210 01e7 3A       		.uleb128 0x3a
 14211 01e8 0B       		.uleb128 0xb
 14212 01e9 3B       		.uleb128 0x3b
 14213 01ea 05       		.uleb128 0x5
 14214 01eb 11       		.uleb128 0x11
 14215 01ec 01       		.uleb128 0x1
 14216 01ed 12       		.uleb128 0x12
 14217 01ee 06       		.uleb128 0x6
 14218 01ef 40       		.uleb128 0x40
 14219 01f0 18       		.uleb128 0x18
 14220 01f1 9642     		.uleb128 0x2116
 14221 01f3 19       		.uleb128 0x19
 14222 01f4 01       		.uleb128 0x1
 14223 01f5 13       		.uleb128 0x13
 14224 01f6 00       		.byte	0
 14225 01f7 00       		.byte	0
 14226 01f8 24       		.uleb128 0x24
 14227 01f9 05       		.uleb128 0x5
 14228 01fa 00       		.byte	0
 14229 01fb 03       		.uleb128 0x3
 14230 01fc 08       		.uleb128 0x8
 14231 01fd 3A       		.uleb128 0x3a
 14232 01fe 0B       		.uleb128 0xb
 14233 01ff 3B       		.uleb128 0x3b
 14234 0200 05       		.uleb128 0x5
 14235 0201 49       		.uleb128 0x49
 14236 0202 13       		.uleb128 0x13
 14237 0203 02       		.uleb128 0x2
 14238 0204 18       		.uleb128 0x18
 14239 0205 00       		.byte	0
 14240 0206 00       		.byte	0
 14241 0207 25       		.uleb128 0x25
 14242 0208 34       		.uleb128 0x34
 14243 0209 00       		.byte	0
 14244 020a 03       		.uleb128 0x3
 14245 020b 08       		.uleb128 0x8
 14246 020c 3A       		.uleb128 0x3a
 14247 020d 0B       		.uleb128 0xb
 14248 020e 3B       		.uleb128 0x3b
 14249 020f 05       		.uleb128 0x5
 14250 0210 49       		.uleb128 0x49
 14251 0211 13       		.uleb128 0x13
 14252 0212 00       		.byte	0
 14253 0213 00       		.byte	0
 14254 0214 26       		.uleb128 0x26
 14255 0215 2E       		.uleb128 0x2e
 14256 0216 01       		.byte	0x1
 14257 0217 3F       		.uleb128 0x3f
 14258 0218 19       		.uleb128 0x19
 14259 0219 03       		.uleb128 0x3
 14260 021a 0E       		.uleb128 0xe
 14261 021b 3A       		.uleb128 0x3a
 14262 021c 0B       		.uleb128 0xb
 14263 021d 3B       		.uleb128 0x3b
 14264 021e 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 305


 14265 021f 11       		.uleb128 0x11
 14266 0220 01       		.uleb128 0x1
 14267 0221 12       		.uleb128 0x12
 14268 0222 06       		.uleb128 0x6
 14269 0223 40       		.uleb128 0x40
 14270 0224 18       		.uleb128 0x18
 14271 0225 9742     		.uleb128 0x2117
 14272 0227 19       		.uleb128 0x19
 14273 0228 01       		.uleb128 0x1
 14274 0229 13       		.uleb128 0x13
 14275 022a 00       		.byte	0
 14276 022b 00       		.byte	0
 14277 022c 27       		.uleb128 0x27
 14278 022d 26       		.uleb128 0x26
 14279 022e 00       		.byte	0
 14280 022f 49       		.uleb128 0x49
 14281 0230 13       		.uleb128 0x13
 14282 0231 00       		.byte	0
 14283 0232 00       		.byte	0
 14284 0233 28       		.uleb128 0x28
 14285 0234 34       		.uleb128 0x34
 14286 0235 00       		.byte	0
 14287 0236 03       		.uleb128 0x3
 14288 0237 0E       		.uleb128 0xe
 14289 0238 3A       		.uleb128 0x3a
 14290 0239 0B       		.uleb128 0xb
 14291 023a 3B       		.uleb128 0x3b
 14292 023b 05       		.uleb128 0x5
 14293 023c 49       		.uleb128 0x49
 14294 023d 13       		.uleb128 0x13
 14295 023e 3F       		.uleb128 0x3f
 14296 023f 19       		.uleb128 0x19
 14297 0240 3C       		.uleb128 0x3c
 14298 0241 19       		.uleb128 0x19
 14299 0242 00       		.byte	0
 14300 0243 00       		.byte	0
 14301 0244 00       		.byte	0
 14302              		.section	.debug_aranges,"",%progbits
 14303 0000 94000000 		.4byte	0x94
 14304 0004 0200     		.2byte	0x2
 14305 0006 00000000 		.4byte	.Ldebug_info0
 14306 000a 04       		.byte	0x4
 14307 000b 00       		.byte	0
 14308 000c 0000     		.2byte	0
 14309 000e 0000     		.2byte	0
 14310 0010 00000000 		.4byte	.LFB64
 14311 0014 18000000 		.4byte	.LFE64-.LFB64
 14312 0018 00000000 		.4byte	.LFB65
 14313 001c 20000000 		.4byte	.LFE65-.LFB65
 14314 0020 00000000 		.4byte	.LFB66
 14315 0024 0C020000 		.4byte	.LFE66-.LFB66
 14316 0028 00000000 		.4byte	.LFB67
 14317 002c 9C040000 		.4byte	.LFE67-.LFB67
 14318 0030 00000000 		.4byte	.LFB68
 14319 0034 CC050000 		.4byte	.LFE68-.LFB68
 14320 0038 00000000 		.4byte	.LFB69
 14321 003c 34030000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 306


 14322 0040 00000000 		.4byte	.LFB70
 14323 0044 B0010000 		.4byte	.LFE70-.LFB70
 14324 0048 00000000 		.4byte	.LFB71
 14325 004c 0C070000 		.4byte	.LFE71-.LFB71
 14326 0050 00000000 		.4byte	.LFB72
 14327 0054 70090000 		.4byte	.LFE72-.LFB72
 14328 0058 00000000 		.4byte	.LFB73
 14329 005c DC000000 		.4byte	.LFE73-.LFB73
 14330 0060 00000000 		.4byte	.LFB74
 14331 0064 00080000 		.4byte	.LFE74-.LFB74
 14332 0068 00000000 		.4byte	.LFB75
 14333 006c D8120000 		.4byte	.LFE75-.LFB75
 14334 0070 00000000 		.4byte	.LFB76
 14335 0074 0C010000 		.4byte	.LFE76-.LFB76
 14336 0078 00000000 		.4byte	.LFB77
 14337 007c A8000000 		.4byte	.LFE77-.LFB77
 14338 0080 00000000 		.4byte	.LFB78
 14339 0084 58060000 		.4byte	.LFE78-.LFB78
 14340 0088 00000000 		.4byte	.LFB79
 14341 008c 08010000 		.4byte	.LFE79-.LFB79
 14342 0090 00000000 		.4byte	0
 14343 0094 00000000 		.4byte	0
 14344              		.section	.debug_ranges,"",%progbits
 14345              	.Ldebug_ranges0:
 14346 0000 68010000 		.4byte	.LBB3
 14347 0004 AA010000 		.4byte	.LBE3
 14348 0008 AC010000 		.4byte	.LBB4
 14349 000c F2010000 		.4byte	.LBE4
 14350 0010 00000000 		.4byte	0
 14351 0014 00000000 		.4byte	0
 14352 0018 3A000000 		.4byte	.LBB5
 14353 001c 40010000 		.4byte	.LBE5
 14354 0020 42010000 		.4byte	.LBB6
 14355 0024 BC010000 		.4byte	.LBE6
 14356 0028 00000000 		.4byte	0
 14357 002c 00000000 		.4byte	0
 14358 0030 BE010000 		.4byte	.LBB7
 14359 0034 20030000 		.4byte	.LBE7
 14360 0038 22030000 		.4byte	.LBB8
 14361 003c 24030000 		.4byte	.LBE8
 14362 0040 00000000 		.4byte	0
 14363 0044 00000000 		.4byte	0
 14364 0048 00000000 		.4byte	.LFB64
 14365 004c 18000000 		.4byte	.LFE64
 14366 0050 00000000 		.4byte	.LFB65
 14367 0054 20000000 		.4byte	.LFE65
 14368 0058 00000000 		.4byte	.LFB66
 14369 005c 0C020000 		.4byte	.LFE66
 14370 0060 00000000 		.4byte	.LFB67
 14371 0064 9C040000 		.4byte	.LFE67
 14372 0068 00000000 		.4byte	.LFB68
 14373 006c CC050000 		.4byte	.LFE68
 14374 0070 00000000 		.4byte	.LFB69
 14375 0074 34030000 		.4byte	.LFE69
 14376 0078 00000000 		.4byte	.LFB70
 14377 007c B0010000 		.4byte	.LFE70
 14378 0080 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 307


 14379 0084 0C070000 		.4byte	.LFE71
 14380 0088 00000000 		.4byte	.LFB72
 14381 008c 70090000 		.4byte	.LFE72
 14382 0090 00000000 		.4byte	.LFB73
 14383 0094 DC000000 		.4byte	.LFE73
 14384 0098 00000000 		.4byte	.LFB74
 14385 009c 00080000 		.4byte	.LFE74
 14386 00a0 00000000 		.4byte	.LFB75
 14387 00a4 D8120000 		.4byte	.LFE75
 14388 00a8 00000000 		.4byte	.LFB76
 14389 00ac 0C010000 		.4byte	.LFE76
 14390 00b0 00000000 		.4byte	.LFB77
 14391 00b4 A8000000 		.4byte	.LFE77
 14392 00b8 00000000 		.4byte	.LFB78
 14393 00bc 58060000 		.4byte	.LFE78
 14394 00c0 00000000 		.4byte	.LFB79
 14395 00c4 08010000 		.4byte	.LFE79
 14396 00c8 00000000 		.4byte	0
 14397 00cc 00000000 		.4byte	0
 14398              		.section	.debug_line,"",%progbits
 14399              	.Ldebug_line0:
 14400 0000 460C0000 		.section	.debug_str,"MS",%progbits,1
 14400      0200AC01 
 14400      00000201 
 14400      FB0E0D00 
 14400      01010101 
 14401              	.LASF56:
 14402 0000 656D675F 		.ascii	"emg_act_counter\000"
 14402      6163745F 
 14402      636F756E 
 14402      74657200 
 14403              	.LASF24:
 14404 0010 73697A65 		.ascii	"sizetype\000"
 14404      74797065 
 14404      00
 14405              	.LASF63:
 14406 0019 706F7765 		.ascii	"power_cycles\000"
 14406      725F6379 
 14406      636C6573 
 14406      00
 14407              	.LASF274:
 14408 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14408      6379636C 
 14408      655F7374 
 14408      61747573 
 14408      00
 14409              	.LASF150:
 14410 0037 77726973 		.ascii	"wrist_direction_association\000"
 14410      745F6469 
 14410      72656374 
 14410      696F6E5F 
 14410      6173736F 
 14411              	.LASF30:
 14412 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14412      545F4D4F 
 14412      44455F45 
 14412      4D475F46 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 308


 14412      4346535F 
 14413              	.LASF122:
 14414 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14414      5F414443 
 14414      5F73656E 
 14414      736F7273 
 14414      5F706F72 
 14415              	.LASF155:
 14416 0086 75736572 		.ascii	"user\000"
 14416      00
 14417              	.LASF10:
 14418 008b 696E7433 		.ascii	"int32_t\000"
 14418      325F7400 
 14419              	.LASF315:
 14420 0093 675F7278 		.ascii	"g_rx\000"
 14420      00
 14421              	.LASF251:
 14422 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14422      74696D65 
 14422      5F657865 
 14422      63757465 
 14422      00
 14423              	.LASF51:
 14424 00a9 73745F64 		.ascii	"st_data\000"
 14424      61746100 
 14425              	.LASF61:
 14426 00b1 746F7461 		.ascii	"total_runtime\000"
 14426      6C5F7275 
 14426      6E74696D 
 14426      6500
 14427              	.LASF13:
 14428 00bf 75696E74 		.ascii	"uint32\000"
 14428      333200
 14429              	.LASF236:
 14430 00c6 6E5F6C69 		.ascii	"n_line\000"
 14430      6E6500
 14431              	.LASF156:
 14432 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14432      73706563 
 14432      00
 14433              	.LASF90:
 14434 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14434      6C696D5F 
 14434      696E6600 
 14435              	.LASF341:
 14436 00e2 74656E73 		.ascii	"tension_valid\000"
 14436      696F6E5F 
 14436      76616C69 
 14436      6400
 14437              	.LASF211:
 14438 00f0 6572725F 		.ascii	"err_joy_1\000"
 14438      6A6F795F 
 14438      3100
 14439              	.LASF187:
 14440 00fa 73746174 		.ascii	"state\000"
 14440      6500
 14441              	.LASF343:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 309


 14442 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14442      65735F69 
 14442      6E746572 
 14442      72757074 
 14442      5F666C61 
 14443              	.LASF284:
 14444 0116 62696E5F 		.ascii	"bin_max\000"
 14444      6D617800 
 14445              	.LASF301:
 14446 011e 61646472 		.ascii	"addr_start_c\000"
 14446      5F737461 
 14446      72745F63 
 14446      00
 14447              	.LASF29:
 14448 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14448      545F4D4F 
 14448      44455F45 
 14448      4D475F46 
 14448      43465300 
 14449              	.LASF94:
 14450 013f 63757272 		.ascii	"curr_lookup\000"
 14450      5F6C6F6F 
 14450      6B757000 
 14451              	.LASF220:
 14452 014b 70776D5F 		.ascii	"pwm_input\000"
 14452      696E7075 
 14452      7400
 14453              	.LASF59:
 14454 0155 72657374 		.ascii	"rest_counter\000"
 14454      5F636F75 
 14454      6E746572 
 14454      00
 14455              	.LASF137:
 14456 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14456      41535445 
 14456      525F7370 
 14456      656300
 14457              	.LASF28:
 14458 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14458      545F4D4F 
 14458      44455F45 
 14458      4D475F49 
 14458      4E544547 
 14459              	.LASF267:
 14460 0189 765F636F 		.ascii	"v_count\000"
 14460      756E7400 
 14461              	.LASF192:
 14462 0191 72785F64 		.ascii	"rx_data\000"
 14462      61746100 
 14463              	.LASF255:
 14464 0199 7676765F 		.ascii	"vvv_value\000"
 14464      76616C75 
 14464      6500
 14465              	.LASF14:
 14466 01a3 696E7438 		.ascii	"int8\000"
 14466      00
 14467              	.LASF197:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 310


 14468 01a8 696E666F 		.ascii	"info_\000"
 14468      5F00
 14469              	.LASF323:
 14470 01ae 66696C74 		.ascii	"filt_emg\000"
 14470      5F656D67 
 14470      00
 14471              	.LASF109:
 14472 01b7 73745F65 		.ascii	"st_emg\000"
 14472      6D6700
 14473              	.LASF57:
 14474 01be 706F7369 		.ascii	"position_hist\000"
 14474      74696F6E 
 14474      5F686973 
 14474      7400
 14475              	.LASF179:
 14476 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14476      4152455F 
 14476      44415441 
 14476      00
 14477              	.LASF163:
 14478 01d9 74656D70 		.ascii	"temp_value\000"
 14478      5F76616C 
 14478      756500
 14479              	.LASF281:
 14480 01e4 7468725F 		.ascii	"thr_pos\000"
 14480      706F7300 
 14481              	.LASF147:
 14482 01ec 73745F57 		.ascii	"st_WR_spec\000"
 14482      525F7370 
 14482      656300
 14483              	.LASF213:
 14484 01f7 6572725F 		.ascii	"err_joy_2\000"
 14484      6A6F795F 
 14484      3200
 14485              	.LASF54:
 14486 0201 72656164 		.ascii	"ready\000"
 14486      7900
 14487              	.LASF106:
 14488 0207 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14488      6964785F 
 14488      7573655F 
 14488      666F725F 
 14488      636F6E74 
 14489              	.LASF166:
 14490 021f 6761696E 		.ascii	"gain\000"
 14490      00
 14491              	.LASF67:
 14492 0224 73745F64 		.ascii	"st_device\000"
 14492      65766963 
 14492      6500
 14493              	.LASF27:
 14494 022e 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14494      545F4D4F 
 14494      44455F45 
 14494      4D475F50 
 14494      524F504F 
 14495              	.LASF72:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 311


 14496 024a 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14496      326E645F 
 14496      6D6F746F 
 14496      725F666C 
 14496      616700
 14497              	.LASF260:
 14498 025d 55445F63 		.ascii	"UD_counter\000"
 14498      6F756E74 
 14498      657200
 14499              	.LASF64:
 14500 0268 65786365 		.ascii	"excessive_signal_activity\000"
 14500      73736976 
 14500      655F7369 
 14500      676E616C 
 14500      5F616374 
 14501              	.LASF175:
 14502 0282 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14502      414E445F 
 14502      4D45414E 
 14502      00
 14503              	.LASF116:
 14504 028f 72656164 		.ascii	"read_imu_flag\000"
 14504      5F696D75 
 14504      5F666C61 
 14504      6700
 14505              	.LASF124:
 14506 029d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14506      72645F45 
 14506      4D475F68 
 14506      6973746F 
 14506      72795F6F 
 14507              	.LASF264:
 14508 02b6 66697273 		.ascii	"first_tension_valid\000"
 14508      745F7465 
 14508      6E73696F 
 14508      6E5F7661 
 14508      6C696400 
 14509              	.LASF325:
 14510 02ca 74696D65 		.ascii	"timer_value\000"
 14510      725F7661 
 14510      6C756500 
 14511              	.LASF4:
 14512 02d6 6C6F6E67 		.ascii	"long int\000"
 14512      20696E74 
 14512      00
 14513              	.LASF153:
 14514 02df 756E7573 		.ascii	"unused_bytes1\000"
 14514      65645F62 
 14514      79746573 
 14514      3100
 14515              	.LASF200:
 14516 02ed 454D475F 		.ascii	"EMG_history_info_\000"
 14516      68697374 
 14516      6F72795F 
 14516      696E666F 
 14516      5F00
 14517              	.LASF225:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 312


 14518 02ff 53485F45 		.ascii	"SH_ENC_L\000"
 14518      4E435F4C 
 14518      00
 14519              	.LASF71:
 14520 0308 72657365 		.ascii	"reset_counters\000"
 14520      745F636F 
 14520      756E7465 
 14520      727300
 14521              	.LASF279:
 14522 0317 62696E5F 		.ascii	"bin_threshold\000"
 14522      74687265 
 14522      73686F6C 
 14522      6400
 14523              	.LASF127:
 14524 0325 75736572 		.ascii	"user_emg\000"
 14524      5F656D67 
 14524      00
 14525              	.LASF250:
 14526 032e 73616665 		.ascii	"safe_startup_motor_activation\000"
 14526      5F737461 
 14526      72747570 
 14526      5F6D6F74 
 14526      6F725F61 
 14527              	.LASF66:
 14528 034c 756E7573 		.ascii	"unused_bytes\000"
 14528      65645F62 
 14528      79746573 
 14528      00
 14529              	.LASF159:
 14530 0359 61636365 		.ascii	"accel_value\000"
 14530      6C5F7661 
 14530      6C756500 
 14531              	.LASF313:
 14532 0365 675F6164 		.ascii	"g_adc_measOld\000"
 14532      635F6D65 
 14532      61734F6C 
 14532      6400
 14533              	.LASF239:
 14534 0373 6175785F 		.ascii	"aux_encoder\000"
 14534      656E636F 
 14534      64657200 
 14535              	.LASF55:
 14536 037f 73745F63 		.ascii	"st_counters\000"
 14536      6F756E74 
 14536      65727300 
 14537              	.LASF224:
 14538 038b 53485F4D 		.ascii	"SH_MOT\000"
 14538      4F5400
 14539              	.LASF324:
 14540 0392 66696C74 		.ascii	"filt_detect_pc\000"
 14540      5F646574 
 14540      6563745F 
 14540      706300
 14541              	.LASF17:
 14542 03a1 666C6F61 		.ascii	"float32\000"
 14542      74333200 
 14543              	.LASF235:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 313


 14544 03a9 656E636F 		.ascii	"encoder_reading_SPI\000"
 14544      6465725F 
 14544      72656164 
 14544      696E675F 
 14544      53504900 
 14545              	.LASF248:
 14546 03bd 6572726F 		.ascii	"error\000"
 14546      7200
 14547              	.LASF182:
 14548 03c3 57524954 		.ascii	"WRITE_END\000"
 14548      455F454E 
 14548      4400
 14549              	.LASF261:
 14550 03cd 4C525F63 		.ascii	"LR_counter\000"
 14550      6F756E74 
 14550      657200
 14551              	.LASF355:
 14552 03d8 706F735F 		.ascii	"pos_reconstruct\000"
 14552      7265636F 
 14552      6E737472 
 14552      75637400 
 14553              	.LASF269:
 14554 03e8 70776D5F 		.ascii	"pwm_limit_search\000"
 14554      6C696D69 
 14554      745F7365 
 14554      61726368 
 14554      00
 14555              	.LASF0:
 14556 03f9 7369676E 		.ascii	"signed char\000"
 14556      65642063 
 14556      68617200 
 14557              	.LASF126:
 14558 0405 75736572 		.ascii	"user_code_string\000"
 14558      5F636F64 
 14558      655F7374 
 14558      72696E67 
 14558      00
 14559              	.LASF138:
 14560 0416 6D617374 		.ascii	"master_mode_active\000"
 14560      65725F6D 
 14560      6F64655F 
 14560      61637469 
 14560      766500
 14561              	.LASF167:
 14562 0429 73745F63 		.ascii	"st_calib\000"
 14562      616C6962 
 14562      00
 14563              	.LASF207:
 14564 0432 6572725F 		.ascii	"err_emg_1\000"
 14564      656D675F 
 14564      3100
 14565              	.LASF208:
 14566 043c 6572725F 		.ascii	"err_emg_2\000"
 14566      656D675F 
 14566      3200
 14567              	.LASF114:
 14568 0446 73776974 		.ascii	"switch_emg\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 314


 14568      63685F65 
 14568      6D6700
 14569              	.LASF337:
 14570 0451 656D675F 		.ascii	"emg_2_status\000"
 14570      325F7374 
 14570      61747573 
 14570      00
 14571              	.LASF349:
 14572 045e 4144435F 		.ascii	"ADC_buf\000"
 14572      62756600 
 14573              	.LASF342:
 14574 0466 696E7465 		.ascii	"interrupt_flag\000"
 14574      72727570 
 14574      745F666C 
 14574      616700
 14575              	.LASF290:
 14576 0475 73746570 		.ascii	"step\000"
 14576      00
 14577              	.LASF227:
 14578 047a 63757272 		.ascii	"curr_error_sum\000"
 14578      5F657272 
 14578      6F725F73 
 14578      756D00
 14579              	.LASF1:
 14580 0489 756E7369 		.ascii	"unsigned char\000"
 14580      676E6564 
 14580      20636861 
 14580      7200
 14581              	.LASF100:
 14582 0497 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14582      72657665 
 14582      72735F6D 
 14582      6F746F72 
 14582      5F666C61 
 14583              	.LASF299:
 14584 04ad 726F775F 		.ascii	"row_start\000"
 14584      73746172 
 14584      7400
 14585              	.LASF346:
 14586 04b7 666F7263 		.ascii	"forced_open\000"
 14586      65645F6F 
 14586      70656E00 
 14587              	.LASF243:
 14588 04c3 73706565 		.ascii	"speed_encoder\000"
 14588      645F656E 
 14588      636F6465 
 14588      7200
 14589              	.LASF308:
 14590 04d1 675F7265 		.ascii	"g_refNew\000"
 14590      664E6577 
 14590      00
 14591              	.LASF288:
 14592 04da 63757272 		.ascii	"curr_off\000"
 14592      5F6F6666 
 14592      00
 14593              	.LASF70:
 14594 04e3 72696768 		.ascii	"right_left\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 315


 14594      745F6C65 
 14594      667400
 14595              	.LASF98:
 14596 04ee 656E636F 		.ascii	"encoder_line\000"
 14596      6465725F 
 14596      6C696E65 
 14596      00
 14597              	.LASF336:
 14598 04fb 656D675F 		.ascii	"emg_1_status\000"
 14598      315F7374 
 14598      61747573 
 14598      00
 14599              	.LASF158:
 14600 0508 666C6167 		.ascii	"flags\000"
 14600      7300
 14601              	.LASF206:
 14602 050e 68616E64 		.ascii	"handle_value\000"
 14602      6C655F76 
 14602      616C7565 
 14602      00
 14603              	.LASF50:
 14604 051b 70726573 		.ascii	"pressure\000"
 14604      73757265 
 14604      00
 14605              	.LASF20:
 14606 0524 63686172 		.ascii	"char\000"
 14606      00
 14607              	.LASF265:
 14608 0529 64657465 		.ascii	"detect_power_cycle_prev\000"
 14608      63745F70 
 14608      6F776572 
 14608      5F637963 
 14608      6C655F70 
 14609              	.LASF93:
 14610 0541 6D61785F 		.ascii	"max_step_pos\000"
 14610      73746570 
 14610      5F706F73 
 14610      00
 14611              	.LASF351:
 14612 054e 70776D5F 		.ascii	"pwm_sign\000"
 14612      7369676E 
 14612      00
 14613              	.LASF233:
 14614 0557 6D6F746F 		.ascii	"motor_control_generic\000"
 14614      725F636F 
 14614      6E74726F 
 14614      6C5F6765 
 14614      6E657269 
 14615              	.LASF359:
 14616 056d 675F696D 		.ascii	"g_imu\000"
 14616      7500
 14617              	.LASF322:
 14618 0573 66696C74 		.ascii	"filt_vel\000"
 14618      5F76656C 
 14618      00
 14619              	.LASF306:
 14620 057c 675F7265 		.ascii	"g_ref_vibrotactile\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 316


 14620      665F7669 
 14620      62726F74 
 14620      61637469 
 14620      6C6500
 14621              	.LASF99:
 14622 058f 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14622      72617465 
 14622      5F6C696D 
 14622      69746572 
 14622      00
 14623              	.LASF79:
 14624 05a0 6B5F645F 		.ascii	"k_d_c\000"
 14624      6300
 14625              	.LASF328:
 14626 05a6 666C6167 		.ascii	"flag_master\000"
 14626      5F6D6173 
 14626      74657200 
 14627              	.LASF178:
 14628 05b2 6164635F 		.ascii	"adc_status\000"
 14628      73746174 
 14628      757300
 14629              	.LASF49:
 14630 05bd 73745F66 		.ascii	"st_fb_meas\000"
 14630      625F6D65 
 14630      617300
 14631              	.LASF104:
 14632 05c8 6D5F6D75 		.ascii	"m_mult\000"
 14632      6C7400
 14633              	.LASF78:
 14634 05cf 6B5F695F 		.ascii	"k_i_c\000"
 14634      6300
 14635              	.LASF231:
 14636 05d5 6D6F746F 		.ascii	"motor_dir\000"
 14636      725F6469 
 14636      7200
 14637              	.LASF283:
 14638 05df 62696E5F 		.ascii	"bin_st\000"
 14638      737400
 14639              	.LASF185:
 14640 05e6 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14640      52533438 
 14640      355F5258 
 14640      5F457849 
 14640      6E746572 
 14641              	.LASF91:
 14642 05ff 706F735F 		.ascii	"pos_lim_sup\000"
 14642      6C696D5F 
 14642      73757000 
 14643              	.LASF165:
 14644 060b 6F6C645F 		.ascii	"old_value\000"
 14644      76616C75 
 14644      6500
 14645              	.LASF112:
 14646 0615 656D675F 		.ascii	"emg_speed\000"
 14646      73706565 
 14646      6400
 14647              	.LASF131:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 317


 14648 061f 72657374 		.ascii	"rest_vel\000"
 14648      5F76656C 
 14648      00
 14649              	.LASF172:
 14650 0628 4E4F524D 		.ascii	"NORMAL\000"
 14650      414C00
 14651              	.LASF219:
 14652 062f 6D6F746F 		.ascii	"motor_control_SH\000"
 14652      725F636F 
 14652      6E74726F 
 14652      6C5F5348 
 14652      00
 14653              	.LASF357:
 14654 0640 7046696C 		.ascii	"pFile\000"
 14654      6500
 14655              	.LASF226:
 14656 0646 706F735F 		.ascii	"pos_error_sum\000"
 14656      6572726F 
 14656      725F7375 
 14656      6D00
 14657              	.LASF123:
 14658 0654 4144435F 		.ascii	"ADC_conf\000"
 14658      636F6E66 
 14658      00
 14659              	.LASF332:
 14660 065d 6465765F 		.ascii	"dev_tension_f\000"
 14660      74656E73 
 14660      696F6E5F 
 14660      6600
 14661              	.LASF146:
 14662 066b 73745F72 		.ascii	"st_ref_vibrotactile\000"
 14662      65665F76 
 14662      6962726F 
 14662      74616374 
 14662      696C6500 
 14663              	.LASF81:
 14664 067f 6B5F695F 		.ascii	"k_i_dl\000"
 14664      646C00
 14665              	.LASF52:
 14666 0686 62756666 		.ascii	"buffer\000"
 14666      657200
 14667              	.LASF83:
 14668 068d 6B5F705F 		.ascii	"k_p_c_dl\000"
 14668      635F646C 
 14668      00
 14669              	.LASF193:
 14670 0696 72785F64 		.ascii	"rx_data_type\000"
 14670      6174615F 
 14670      74797065 
 14670      00
 14671              	.LASF360:
 14672 06a3 675F696D 		.ascii	"g_imuNew\000"
 14672      754E6577 
 14672      00
 14673              	.LASF170:
 14674 06ac 73706565 		.ascii	"speed\000"
 14674      6400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 318


 14675              	.LASF232:
 14676 06b2 706F7369 		.ascii	"position_counter\000"
 14676      74696F6E 
 14676      5F636F75 
 14676      6E746572 
 14676      00
 14677              	.LASF292:
 14678 06c3 74696D65 		.ascii	"timer_value_e\000"
 14678      725F7661 
 14678      6C75655F 
 14678      6500
 14679              	.LASF188:
 14680 06d1 64617461 		.ascii	"data_packet_index\000"
 14680      5F706163 
 14680      6B65745F 
 14680      696E6465 
 14680      7800
 14681              	.LASF190:
 14682 06e3 64617461 		.ascii	"data_packet_buffer\000"
 14682      5F706163 
 14682      6B65745F 
 14682      62756666 
 14682      657200
 14683              	.LASF204:
 14684 06f6 73745F72 		.ascii	"st_ref_p\000"
 14684      65665F70 
 14684      00
 14685              	.LASF335:
 14686 06ff 6379636C 		.ascii	"cycles_status\000"
 14686      65735F73 
 14686      74617475 
 14686      7300
 14687              	.LASF195:
 14688 070d 636F756E 		.ascii	"counter_calibration\000"
 14688      7465725F 
 14688      63616C69 
 14688      62726174 
 14688      696F6E00 
 14689              	.LASF310:
 14690 0721 675F6D65 		.ascii	"g_meas\000"
 14690      617300
 14691              	.LASF291:
 14692 0728 74696D65 		.ascii	"timer_value_s\000"
 14692      725F7661 
 14692      6C75655F 
 14692      7300
 14693              	.LASF354:
 14694 0736 456E636F 		.ascii	"Encoder_Check\000"
 14694      6465725F 
 14694      43686563 
 14694      6B00
 14695              	.LASF247:
 14696 0744 636F6D70 		.ascii	"comp_value_encoder\000"
 14696      5F76616C 
 14696      75655F65 
 14696      6E636F64 
 14696      657200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 319


 14697              	.LASF295:
 14698 0757 73746172 		.ascii	"start_emg_pos\000"
 14698      745F656D 
 14698      675F706F 
 14698      7300
 14699              	.LASF352:
 14700 0765 64617461 		.ascii	"data_encoder_raw\000"
 14700      5F656E63 
 14700      6F646572 
 14700      5F726177 
 14700      00
 14701              	.LASF307:
 14702 0776 675F7265 		.ascii	"g_ref\000"
 14702      6600
 14703              	.LASF25:
 14704 077c 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14704      545F4D4F 
 14704      44455F45 
 14704      58544552 
 14704      4E414C00 
 14705              	.LASF238:
 14706 0790 696E6465 		.ascii	"index\000"
 14706      7800
 14707              	.LASF142:
 14708 0796 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14708      6D756D5F 
 14708      70726573 
 14708      73757265 
 14708      5F6B5061 
 14709              	.LASF132:
 14710 07ab 72657374 		.ascii	"rest_position_flag\000"
 14710      5F706F73 
 14710      6974696F 
 14710      6E5F666C 
 14710      616700
 14711              	.LASF134:
 14712 07be 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14712      7469636B 
 14712      5F636C6F 
 14712      73757265 
 14712      5F737065 
 14713              	.LASF84:
 14714 07d5 6B5F695F 		.ascii	"k_i_c_dl\000"
 14714      635F646C 
 14714      00
 14715              	.LASF194:
 14716 07de 7061636B 		.ascii	"package_count\000"
 14716      6167655F 
 14716      636F756E 
 14716      7400
 14717              	.LASF38:
 14718 07ec 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14718      5F414E44 
 14718      5F504F53 
 14718      5F434F4E 
 14718      54524F4C 
 14719              	.LASF168:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 320


 14720 0801 656E6162 		.ascii	"enabled\000"
 14720      6C656400 
 14721              	.LASF5:
 14722 0809 6C6F6E67 		.ascii	"long unsigned int\000"
 14722      20756E73 
 14722      69676E65 
 14722      6420696E 
 14722      7400
 14723              	.LASF358:
 14724 081b 70454D47 		.ascii	"pEMGHFile\000"
 14724      4846696C 
 14724      6500
 14725              	.LASF180:
 14726 0825 57524954 		.ascii	"WRITE_CYCLES\000"
 14726      455F4359 
 14726      434C4553 
 14726      00
 14727              	.LASF136:
 14728 0832 6A6F7973 		.ascii	"joystick_gains\000"
 14728      7469636B 
 14728      5F676169 
 14728      6E7300
 14729              	.LASF45:
 14730 0841 686F6C64 		.ascii	"hold_curr\000"
 14730      5F637572 
 14730      7200
 14731              	.LASF31:
 14732 084b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14732      545F4D4F 
 14732      44455F4A 
 14732      4F595354 
 14732      49434B00 
 14733              	.LASF62:
 14734 085f 746F7461 		.ascii	"total_time_rest\000"
 14734      6C5F7469 
 14734      6D655F72 
 14734      65737400 
 14735              	.LASF86:
 14736 086f 61637469 		.ascii	"activ\000"
 14736      7600
 14737              	.LASF272:
 14738 0875 6D696E5F 		.ascii	"min_tension\000"
 14738      74656E73 
 14738      696F6E00 
 14739              	.LASF347:
 14740 0881 62617474 		.ascii	"battery_low_SoC\000"
 14740      6572795F 
 14740      6C6F775F 
 14740      536F4300 
 14741              	.LASF203:
 14742 0891 6D6F746F 		.ascii	"motor_idx\000"
 14742      725F6964 
 14742      7800
 14743              	.LASF103:
 14744 089b 6D5F6F66 		.ascii	"m_off\000"
 14744      6600
 14745              	.LASF340:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 321


 14746 08a1 72657365 		.ascii	"reset_last_value_flag\000"
 14746      745F6C61 
 14746      73745F76 
 14746      616C7565 
 14746      5F666C61 
 14747              	.LASF162:
 14748 08b7 71756174 		.ascii	"quat_value\000"
 14748      5F76616C 
 14748      756500
 14749              	.LASF129:
 14750 08c2 72657374 		.ascii	"rest_pos\000"
 14750      5F706F73 
 14750      00
 14751              	.LASF40:
 14752 08cb 63757272 		.ascii	"curr\000"
 14752      00
 14753              	.LASF181:
 14754 08d0 57414954 		.ascii	"WAIT_QUERY\000"
 14754      5F515545 
 14754      525900
 14755              	.LASF96:
 14756 08db 696E7075 		.ascii	"input_mode\000"
 14756      745F6D6F 
 14756      646500
 14757              	.LASF36:
 14758 08e6 434F4E54 		.ascii	"CONTROL_PWM\000"
 14758      524F4C5F 
 14758      50574D00 
 14759              	.LASF273:
 14760 08f2 6379636C 		.ascii	"cycles_counter_update\000"
 14760      65735F63 
 14760      6F756E74 
 14760      65725F75 
 14760      70646174 
 14761              	.LASF144:
 14762 0908 76696272 		.ascii	"vibrotactile_feedback_active\000"
 14762      6F746163 
 14762      74696C65 
 14762      5F666565 
 14762      64626163 
 14763              	.LASF362:
 14764 0925 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14764      43313120 
 14764      352E342E 
 14764      31203230 
 14764      31363036 
 14765 0958 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14765      20726576 
 14765      6973696F 
 14765      6E203233 
 14765      37373135 
 14766 098b 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14766      66756E63 
 14766      74696F6E 
 14766      2D736563 
 14766      74696F6E 
 14767              	.LASF42:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 322


 14768 09b3 73745F72 		.ascii	"st_ref\000"
 14768      656600
 14769              	.LASF326:
 14770 09ba 74696D65 		.ascii	"timer_value0\000"
 14770      725F7661 
 14770      6C756530 
 14770      00
 14771              	.LASF128:
 14772 09c7 73745F53 		.ascii	"st_SH_spec\000"
 14772      485F7370 
 14772      656300
 14773              	.LASF253:
 14774 09d2 765F7661 		.ascii	"v_value\000"
 14774      6C756500 
 14775              	.LASF318:
 14776 09da 63616C69 		.ascii	"calib\000"
 14776      6200
 14777              	.LASF140:
 14778 09e0 73745F46 		.ascii	"st_FB_spec\000"
 14778      425F7370 
 14778      656300
 14779              	.LASF6:
 14780 09eb 6C6F6E67 		.ascii	"long long int\000"
 14780      206C6F6E 
 14780      6720696E 
 14780      7400
 14781              	.LASF34:
 14782 09f9 53485F63 		.ascii	"SH_control_mode\000"
 14782      6F6E7472 
 14782      6F6C5F6D 
 14782      6F646500 
 14783              	.LASF199:
 14784 0a09 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14784      4E445F4D 
 14784      4F544F52 
 14784      5F494458 
 14784      00
 14785              	.LASF348:
 14786 0a1a 6368616E 		.ascii	"change_ext_ref_flag\000"
 14786      67655F65 
 14786      78745F72 
 14786      65665F66 
 14786      6C616700 
 14787              	.LASF19:
 14788 0a2e 646F7562 		.ascii	"double\000"
 14788      6C6500
 14789              	.LASF320:
 14790 0a35 66696C74 		.ascii	"filt_curr_diff\000"
 14790      5F637572 
 14790      725F6469 
 14790      666600
 14791              	.LASF215:
 14792 0a44 706F735F 		.ascii	"pos_sum\000"
 14792      73756D00 
 14793              	.LASF218:
 14794 0a4c 696E7465 		.ascii	"interrupt_manager\000"
 14794      72727570 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 323


 14794      745F6D61 
 14794      6E616765 
 14794      7200
 14795              	.LASF102:
 14796 0a5e 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14796      7261775F 
 14796      72656164 
 14796      5F636F6E 
 14796      6600
 14797              	.LASF216:
 14798 0a70 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14798      7574655F 
 14798      536F6674 
 14798      48616E64 
 14798      5F325F6D 
 14799              	.LASF171:
 14800 0a98 72657065 		.ascii	"repetitions\000"
 14800      74697469 
 14800      6F6E7300 
 14801              	.LASF92:
 14802 0aa4 6D61785F 		.ascii	"max_step_neg\000"
 14802      73746570 
 14802      5F6E6567 
 14802      00
 14803              	.LASF252:
 14804 0ab1 636F756E 		.ascii	"count_startup_motor\000"
 14804      745F7374 
 14804      61727475 
 14804      705F6D6F 
 14804      746F7200 
 14805              	.LASF139:
 14806 0ac5 736C6176 		.ascii	"slave_ID\000"
 14806      655F4944 
 14806      00
 14807              	.LASF176:
 14808 0ace 57414954 		.ascii	"WAIT\000"
 14808      00
 14809              	.LASF18:
 14810 0ad3 666C6F61 		.ascii	"float\000"
 14810      7400
 14811              	.LASF118:
 14812 0ad9 494D555F 		.ascii	"IMU_conf\000"
 14812      636F6E66 
 14812      00
 14813              	.LASF266:
 14814 0ae2 636F756E 		.ascii	"count\000"
 14814      7400
 14815              	.LASF46:
 14816 0ae8 73745F61 		.ascii	"st_adc_meas\000"
 14816      64635F6D 
 14816      65617300 
 14817              	.LASF277:
 14818 0af4 656D675F 		.ascii	"emg_excess_status\000"
 14818      65786365 
 14818      73735F73 
 14818      74617475 
 14818      7300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 324


 14819              	.LASF303:
 14820 0b06 6D5F6164 		.ascii	"m_addr\000"
 14820      647200
 14821              	.LASF317:
 14822 0b0d 635F6D65 		.ascii	"c_mem\000"
 14822      6D00
 14823              	.LASF8:
 14824 0b13 756E7369 		.ascii	"unsigned int\000"
 14824      676E6564 
 14824      20696E74 
 14824      00
 14825              	.LASF282:
 14826 0b20 6D61785F 		.ascii	"max_pos\000"
 14826      706F7300 
 14827              	.LASF356:
 14828 0b28 72657374 		.ascii	"rest_pos_curr_ref\000"
 14828      5F706F73 
 14828      5F637572 
 14828      725F7265 
 14828      6600
 14829              	.LASF152:
 14830 0b3a 666C6167 		.ascii	"flag\000"
 14830      00
 14831              	.LASF97:
 14832 0b3f 636F6E74 		.ascii	"control_mode\000"
 14832      726F6C5F 
 14832      6D6F6465 
 14832      00
 14833              	.LASF21:
 14834 0b4c 63797374 		.ascii	"cystatus\000"
 14834      61747573 
 14834      00
 14835              	.LASF26:
 14836 0b55 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14836      545F4D4F 
 14836      44455F45 
 14836      4E434F44 
 14836      45523300 
 14837              	.LASF115:
 14838 0b69 73745F69 		.ascii	"st_imu\000"
 14838      6D7500
 14839              	.LASF210:
 14840 0b70 63757272 		.ascii	"current_emg\000"
 14840      656E745F 
 14840      656D6700 
 14841              	.LASF191:
 14842 0b7c 72785F71 		.ascii	"rx_queue\000"
 14842      75657565 
 14842      00
 14843              	.LASF262:
 14844 0b85 55445F6D 		.ascii	"UD_mean_value\000"
 14844      65616E5F 
 14844      76616C75 
 14844      6500
 14845              	.LASF237:
 14846 0b93 6173736F 		.ascii	"assoc_motor\000"
 14846      635F6D6F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 325


 14846      746F7200 
 14847              	.LASF47:
 14848 0b9f 6164645F 		.ascii	"add_emg\000"
 14848      656D6700 
 14849              	.LASF223:
 14850 0ba7 695F7265 		.ascii	"i_ref\000"
 14850      6600
 14851              	.LASF110:
 14852 0bad 656D675F 		.ascii	"emg_threshold\000"
 14852      74687265 
 14852      73686F6C 
 14852      6400
 14853              	.LASF296:
 14854 0bbb 73617665 		.ascii	"save_cycles_eeprom\000"
 14854      5F637963 
 14854      6C65735F 
 14854      65657072 
 14854      6F6D00
 14855              	.LASF107:
 14856 0bce 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14856      725F6861 
 14856      6E646C65 
 14856      5F726174 
 14856      696F00
 14857              	.LASF58:
 14858 0be1 63757272 		.ascii	"current_hist\000"
 14858      656E745F 
 14858      68697374 
 14858      00
 14859              	.LASF37:
 14860 0bee 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14860      524F4C5F 
 14860      43555252 
 14860      454E5400 
 14861              	.LASF23:
 14862 0bfe 6C6F6E67 		.ascii	"long double\000"
 14862      20646F75 
 14862      626C6500 
 14863              	.LASF174:
 14864 0c0a 44495343 		.ascii	"DISCARD\000"
 14864      41524400 
 14865              	.LASF228:
 14866 0c12 70726576 		.ascii	"prev_pos_err\000"
 14866      5F706F73 
 14866      5F657272 
 14866      00
 14867              	.LASF245:
 14868 0c1f 696E6974 		.ascii	"init_rot\000"
 14868      5F726F74 
 14868      00
 14869              	.LASF270:
 14870 0c28 6D6F745F 		.ascii	"mot_idx\000"
 14870      69647800 
 14871              	.LASF321:
 14872 0c30 66696C74 		.ascii	"filt_i\000"
 14872      5F6900
 14873              	.LASF65:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 326


 14874 0c37 6D6F7469 		.ascii	"motion_counter\000"
 14874      6F6E5F63 
 14874      6F756E74 
 14874      657200
 14875              	.LASF319:
 14876 0c46 66696C74 		.ascii	"filt_v\000"
 14876      5F7600
 14877              	.LASF345:
 14878 0c4d 72657374 		.ascii	"rest_enabled\000"
 14878      5F656E61 
 14878      626C6564 
 14878      00
 14879              	.LASF309:
 14880 0c5a 675F7265 		.ascii	"g_refOld\000"
 14880      664F6C64 
 14880      00
 14881              	.LASF221:
 14882 0c63 706F735F 		.ascii	"pos_error\000"
 14882      6572726F 
 14882      7200
 14883              	.LASF160:
 14884 0c6d 6779726F 		.ascii	"gyro_value\000"
 14884      5F76616C 
 14884      756500
 14885              	.LASF120:
 14886 0c78 63757272 		.ascii	"curr_time\000"
 14886      5F74696D 
 14886      6500
 14887              	.LASF105:
 14888 0c82 646F7562 		.ascii	"double_encoder_on_off\000"
 14888      6C655F65 
 14888      6E636F64 
 14888      65725F6F 
 14888      6E5F6F66 
 14889              	.LASF271:
 14890 0c98 6D61785F 		.ascii	"max_tension\000"
 14890      74656E73 
 14890      696F6E00 
 14891              	.LASF198:
 14892 0ca4 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14892      525F4944 
 14892      5800
 14893              	.LASF246:
 14894 0cae 6C617374 		.ascii	"last_value_encoder\000"
 14894      5F76616C 
 14894      75655F65 
 14894      6E636F64 
 14894      657200
 14895              	.LASF196:
 14896 0cc1 636F756E 		.ascii	"counter_tension_func\000"
 14896      7465725F 
 14896      74656E73 
 14896      696F6E5F 
 14896      66756E63 
 14897              	.LASF327:
 14898 0cd6 6379636C 		.ascii	"cycle_time\000"
 14898      655F7469 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 327


 14898      6D6500
 14899              	.LASF217:
 14900 0ce1 66736D5F 		.ascii	"fsm_state\000"
 14900      73746174 
 14900      6500
 14901              	.LASF7:
 14902 0ceb 6C6F6E67 		.ascii	"long long unsigned int\000"
 14902      206C6F6E 
 14902      6720756E 
 14902      7369676E 
 14902      65642069 
 14903              	.LASF334:
 14904 0d02 64657465 		.ascii	"detect_power_cycle\000"
 14904      63745F70 
 14904      6F776572 
 14904      5F637963 
 14904      6C6500
 14905              	.LASF338:
 14906 0d15 6A6F795F 		.ascii	"joy_UD_status\000"
 14906      55445F73 
 14906      74617475 
 14906      7300
 14907              	.LASF276:
 14908 0d23 6D6F7469 		.ascii	"motion_status\000"
 14908      6F6E5F73 
 14908      74617475 
 14908      7300
 14909              	.LASF53:
 14910 0d31 6C656E67 		.ascii	"length\000"
 14910      746800
 14911              	.LASF157:
 14912 0d38 73745F69 		.ascii	"st_imu_data\000"
 14912      6D755F64 
 14912      61746100 
 14913              	.LASF161:
 14914 0d44 6D61675F 		.ascii	"mag_value\000"
 14914      76616C75 
 14914      6500
 14915              	.LASF41:
 14916 0d4e 6F6E6F66 		.ascii	"onoff\000"
 14916      6600
 14917              	.LASF241:
 14918 0d54 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14918      76616C75 
 14918      655F656E 
 14918      636F6465 
 14918      725F3332 
 14919              	.LASF229:
 14920 0d69 70726576 		.ascii	"prev_curr_err\000"
 14920      5F637572 
 14920      725F6572 
 14920      7200
 14921              	.LASF189:
 14922 0d77 64617461 		.ascii	"data_packet_length\000"
 14922      5F706163 
 14922      6B65745F 
 14922      6C656E67 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 328


 14922      746800
 14923              	.LASF77:
 14924 0d8a 6B5F705F 		.ascii	"k_p_c\000"
 14924      6300
 14925              	.LASF329:
 14926 0d90 6465765F 		.ascii	"dev_tension\000"
 14926      74656E73 
 14926      696F6E00 
 14927              	.LASF88:
 14928 0d9c 6D6F746F 		.ascii	"motor_driver_type\000"
 14928      725F6472 
 14928      69766572 
 14928      5F747970 
 14928      6500
 14929              	.LASF177:
 14930 0dae 57414954 		.ascii	"WAIT_EoC\000"
 14930      5F456F43 
 14930      00
 14931              	.LASF22:
 14932 0db7 72656738 		.ascii	"reg8\000"
 14932      00
 14933              	.LASF285:
 14934 0dbc 62696E5F 		.ascii	"bin_1\000"
 14934      3100
 14935              	.LASF286:
 14936 0dc2 62696E5F 		.ascii	"bin_2\000"
 14936      3200
 14937              	.LASF257:
 14938 0dc8 695F6175 		.ascii	"i_aux\000"
 14938      7800
 14939              	.LASF143:
 14940 0dce 70726F70 		.ascii	"prop_err_fb_gain\000"
 14940      5F657272 
 14940      5F66625F 
 14940      6761696E 
 14940      00
 14941              	.LASF214:
 14942 0ddf 706F735F 		.ascii	"pos_diff\000"
 14942      64696666 
 14942      00
 14943              	.LASF298:
 14944 0de8 726F775F 		.ascii	"row_number\000"
 14944      6E756D62 
 14944      657200
 14945              	.LASF268:
 14946 0df3 6F766572 		.ascii	"overcurrent_control\000"
 14946      63757272 
 14946      656E745F 
 14946      636F6E74 
 14946      726F6C00 
 14947              	.LASF287:
 14948 0e07 63757272 		.ascii	"curr_pos\000"
 14948      5F706F73 
 14948      00
 14949              	.LASF173:
 14950 0e10 52455345 		.ascii	"RESET\000"
 14950      5400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 329


 14951              	.LASF256:
 14952 0e16 616E616C 		.ascii	"analog_read_end\000"
 14952      6F675F72 
 14952      6561645F 
 14952      656E6400 
 14953              	.LASF75:
 14954 0e26 6465765F 		.ascii	"dev_type\000"
 14954      74797065 
 14954      00
 14955              	.LASF234:
 14956 0e2f 76696272 		.ascii	"vibrotactile_control_generic\000"
 14956      6F746163 
 14956      74696C65 
 14956      5F636F6E 
 14956      74726F6C 
 14957              	.LASF275:
 14958 0e4c 656D675F 		.ascii	"emg_cycle_status\000"
 14958      6379636C 
 14958      655F7374 
 14958      61747573 
 14958      00
 14959              	.LASF125:
 14960 0e5d 73745F75 		.ascii	"st_user\000"
 14960      73657200 
 14961              	.LASF108:
 14962 0e65 67656172 		.ascii	"gears_params\000"
 14962      735F7061 
 14962      72616D73 
 14962      00
 14963              	.LASF119:
 14964 0e72 73745F65 		.ascii	"st_expansion\000"
 14964      7870616E 
 14964      73696F6E 
 14964      00
 14965              	.LASF113:
 14966 0e7f 656D675F 		.ascii	"emg_calibration_flag\000"
 14966      63616C69 
 14966      62726174 
 14966      696F6E5F 
 14966      666C6167 
 14967              	.LASF43:
 14968 0e94 73745F6D 		.ascii	"st_meas\000"
 14968      65617300 
 14969              	.LASF300:
 14970 0e9c 61646472 		.ascii	"addr_start\000"
 14970      5F737461 
 14970      727400
 14971              	.LASF304:
 14972 0ea7 70776D5F 		.ascii	"pwm_preload_values\000"
 14972      7072656C 
 14972      6F61645F 
 14972      76616C75 
 14972      657300
 14973              	.LASF135:
 14974 0eba 6A6F7973 		.ascii	"joystick_threshold\000"
 14974      7469636B 
 14974      5F746872 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 330


 14974      6573686F 
 14974      6C6400
 14975              	.LASF32:
 14976 0ecd 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14976      545F4D4F 
 14976      44455F45 
 14976      4D475F50 
 14976      524F504F 
 14977              	.LASF314:
 14978 0eec 675F6662 		.ascii	"g_fb_meas\000"
 14978      5F6D6561 
 14978      7300
 14979              	.LASF184:
 14980 0ef6 636F756E 		.ascii	"counter_status\000"
 14980      7465725F 
 14980      73746174 
 14980      757300
 14981              	.LASF316:
 14982 0f05 675F6D65 		.ascii	"g_mem\000"
 14982      6D00
 14983              	.LASF258:
 14984 0f0b 656D675F 		.ascii	"emg_counter_1\000"
 14984      636F756E 
 14984      7465725F 
 14984      3100
 14985              	.LASF259:
 14986 0f19 656D675F 		.ascii	"emg_counter_2\000"
 14986      636F756E 
 14986      7465725F 
 14986      3200
 14987              	.LASF145:
 14988 0f27 61697263 		.ascii	"airchamber_feedback_active\000"
 14988      68616D62 
 14988      65725F66 
 14988      65656462 
 14988      61636B5F 
 14989              	.LASF249:
 14990 0f42 6F6E6C79 		.ascii	"only_first_time\000"
 14990      5F666972 
 14990      73745F74 
 14990      696D6500 
 14991              	.LASF11:
 14992 0f52 75696E74 		.ascii	"uint8\000"
 14992      3800
 14993              	.LASF133:
 14994 0f58 73745F4A 		.ascii	"st_JOY_spec\000"
 14994      4F595F73 
 14994      70656300 
 14995              	.LASF244:
 14996 0f64 76616C75 		.ascii	"value_diff\000"
 14996      655F6469 
 14996      666600
 14997              	.LASF289:
 14998 0f6f 63757272 		.ascii	"curr_ref\000"
 14998      5F726566 
 14998      00
 14999              	.LASF2:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 331


 15000 0f78 73686F72 		.ascii	"short int\000"
 15000      7420696E 
 15000      7400
 15001              	.LASF82:
 15002 0f82 6B5F645F 		.ascii	"k_d_dl\000"
 15002      646C00
 15003              	.LASF242:
 15004 0f89 76616C75 		.ascii	"value_encoder\000"
 15004      655F656E 
 15004      636F6465 
 15004      7200
 15005              	.LASF48:
 15006 0f97 6A6F7973 		.ascii	"joystick\000"
 15006      7469636B 
 15006      00
 15007              	.LASF154:
 15008 0fa0 6D6F746F 		.ascii	"motor\000"
 15008      7200
 15009              	.LASF331:
 15010 0fa6 6465765F 		.ascii	"dev_pwm_sat\000"
 15010      70776D5F 
 15010      73617400 
 15011              	.LASF68:
 15012 0fb2 68775F6D 		.ascii	"hw_maint_date\000"
 15012      61696E74 
 15012      5F646174 
 15012      6500
 15013              	.LASF201:
 15014 0fc0 66756E63 		.ascii	"function_scheduler\000"
 15014      74696F6E 
 15014      5F736368 
 15014      6564756C 
 15014      657200
 15015              	.LASF202:
 15016 0fd3 636F6D70 		.ascii	"compute_reference\000"
 15016      7574655F 
 15016      72656665 
 15016      72656E63 
 15016      6500
 15017              	.LASF230:
 15018 0fe5 70726576 		.ascii	"prev_pwm\000"
 15018      5F70776D 
 15018      00
 15019              	.LASF69:
 15020 0fee 73746174 		.ascii	"stats_period_begin_date\000"
 15020      735F7065 
 15020      72696F64 
 15020      5F626567 
 15020      696E5F64 
 15021              	.LASF294:
 15022 1006 74696D65 		.ascii	"timer_exc_e\000"
 15022      725F6578 
 15022      635F6500 
 15023              	.LASF305:
 15024 1012 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15024      52784275 
 15024      66666572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 332


 15024      00
 15025              	.LASF333:
 15026 101f 706F775F 		.ascii	"pow_tension\000"
 15026      74656E73 
 15026      696F6E00 
 15027              	.LASF293:
 15028 102b 74696D65 		.ascii	"timer_exc_s\000"
 15028      725F6578 
 15028      635F7300 
 15029              	.LASF15:
 15030 1037 696E7431 		.ascii	"int16\000"
 15030      3600
 15031              	.LASF121:
 15032 103d 72656164 		.ascii	"read_exp_port_flag\000"
 15032      5F657870 
 15032      5F706F72 
 15032      745F666C 
 15032      616700
 15033              	.LASF280:
 15034 1050 6578635F 		.ascii	"exc_act_thr\000"
 15034      6163745F 
 15034      74687200 
 15035              	.LASF87:
 15036 105c 61637469 		.ascii	"activate_pwm_rescaling\000"
 15036      76617465 
 15036      5F70776D 
 15036      5F726573 
 15036      63616C69 
 15037              	.LASF80:
 15038 1073 6B5F705F 		.ascii	"k_p_dl\000"
 15038      646C00
 15039              	.LASF44:
 15040 107a 65737469 		.ascii	"estim_curr\000"
 15040      6D5F6375 
 15040      727200
 15041              	.LASF330:
 15042 1085 6465765F 		.ascii	"dev_pwm_limit\000"
 15042      70776D5F 
 15042      6C696D69 
 15042      7400
 15043              	.LASF297:
 15044 1093 73746174 		.ascii	"status\000"
 15044      757300
 15045              	.LASF364:
 15046 109a 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 15046      73657273 
 15046      5C6D676E 
 15046      6F63636F 
 15046      5C446F63 
 15047 10c7 5F574953 		.ascii	"_WISH_VIBES - Copia\\FW_Socket - WISH+Toast\\WISH_V"
 15047      485F5649 
 15047      42455320 
 15047      2D20436F 
 15047      7069615C 
 15048 10f8 49424553 		.ascii	"IBES_Socket.cydsn\000"
 15048      5F536F63 
 15048      6B65742E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 333


 15048      63796473 
 15048      6E00
 15049              	.LASF222:
 15050 110a 63757272 		.ascii	"curr_error\000"
 15050      5F657272 
 15050      6F7200
 15051              	.LASF353:
 15052 1115 456E636F 		.ascii	"Encoder_Value\000"
 15052      6465725F 
 15052      56616C75 
 15052      6500
 15053              	.LASF74:
 15054 1123 75736572 		.ascii	"user_id\000"
 15054      5F696400 
 15055              	.LASF278:
 15056 112b 72657374 		.ascii	"rest_cycle_status\000"
 15056      5F637963 
 15056      6C655F73 
 15056      74617475 
 15056      7300
 15057              	.LASF212:
 15058 113d 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15058      7574655F 
 15058      536F6674 
 15058      48616E64 
 15058      5F325F6D 
 15059              	.LASF240:
 15060 116a 746D705F 		.ascii	"tmp_value_encoder\000"
 15060      76616C75 
 15060      655F656E 
 15060      636F6465 
 15060      7200
 15061              	.LASF186:
 15062 117c 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15062      4359434C 
 15062      45535F48 
 15062      616E646C 
 15062      657200
 15063              	.LASF73:
 15064 118f 62617564 		.ascii	"baud_rate\000"
 15064      5F726174 
 15064      6500
 15065              	.LASF149:
 15066 1199 66617374 		.ascii	"fast_act_threshold\000"
 15066      5F616374 
 15066      5F746872 
 15066      6573686F 
 15066      6C6400
 15067              	.LASF117:
 15068 11ac 5350495F 		.ascii	"SPI_read_delay\000"
 15068      72656164 
 15068      5F64656C 
 15068      617900
 15069              	.LASF3:
 15070 11bb 73686F72 		.ascii	"short unsigned int\000"
 15070      7420756E 
 15070      7369676E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 334


 15070      65642069 
 15070      6E7400
 15071              	.LASF101:
 15072 11ce 73745F65 		.ascii	"st_encoder\000"
 15072      6E636F64 
 15072      657200
 15073              	.LASF312:
 15074 11d9 675F6164 		.ascii	"g_adc_meas\000"
 15074      635F6D65 
 15074      617300
 15075              	.LASF141:
 15076 11e4 6D61785F 		.ascii	"max_residual_current\000"
 15076      72657369 
 15076      6475616C 
 15076      5F637572 
 15076      72656E74 
 15077              	.LASF209:
 15078 11f9 454E435F 		.ascii	"ENC_L\000"
 15078      4C00
 15079              	.LASF151:
 15080 11ff 73745F65 		.ascii	"st_eeprom\000"
 15080      6570726F 
 15080      6D00
 15081              	.LASF339:
 15082 1209 6A6F795F 		.ascii	"joy_LR_status\000"
 15082      4C525F73 
 15082      74617475 
 15082      7300
 15083              	.LASF363:
 15084 1217 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15084      72635C69 
 15084      6E746572 
 15084      72757074 
 15084      696F6E73 
 15085              	.LASF205:
 15086 122e 73745F72 		.ascii	"st_refOld_p\000"
 15086      65664F6C 
 15086      645F7000 
 15087              	.LASF16:
 15088 123a 696E7433 		.ascii	"int32\000"
 15088      3200
 15089              	.LASF350:
 15090 1240 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15090      4F465F41 
 15090      4E414C4F 
 15090      475F494E 
 15090      50555453 
 15091              	.LASF76:
 15092 1255 73745F6D 		.ascii	"st_motor\000"
 15092      6F746F72 
 15092      00
 15093              	.LASF361:
 15094 125e 6D617374 		.ascii	"master_mode\000"
 15094      65725F6D 
 15094      6F646500 
 15095              	.LASF39:
 15096 126a 46535F46 		.ascii	"FS_FILE\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 335


 15096      494C4500 
 15097              	.LASF89:
 15098 1272 706F735F 		.ascii	"pos_lim_flag\000"
 15098      6C696D5F 
 15098      666C6167 
 15098      00
 15099              	.LASF263:
 15100 127f 4C525F6D 		.ascii	"LR_mean_value\000"
 15100      65616E5F 
 15100      76616C75 
 15100      6500
 15101              	.LASF311:
 15102 128d 675F6D65 		.ascii	"g_measOld\000"
 15102      61734F6C 
 15102      6400
 15103              	.LASF302:
 15104 1297 726F775F 		.ascii	"row_end\000"
 15104      656E6400 
 15105              	.LASF35:
 15106 129f 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15106      524F4C5F 
 15106      414E474C 
 15106      4500
 15107              	.LASF9:
 15108 12ad 5F5F696E 		.ascii	"__int32_t\000"
 15108      7433325F 
 15108      7400
 15109              	.LASF60:
 15110 12b7 77697265 		.ascii	"wire_disp\000"
 15110      5F646973 
 15110      7000
 15111              	.LASF344:
 15112 12c1 63616E5F 		.ascii	"can_write\000"
 15112      77726974 
 15112      6500
 15113              	.LASF111:
 15114 12cb 656D675F 		.ascii	"emg_max_value\000"
 15114      6D61785F 
 15114      76616C75 
 15114      6500
 15115              	.LASF95:
 15116 12d9 63757272 		.ascii	"current_limit\000"
 15116      656E745F 
 15116      6C696D69 
 15116      7400
 15117              	.LASF33:
 15118 12e7 53485F69 		.ascii	"SH_input_mode\000"
 15118      6E707574 
 15118      5F6D6F64 
 15118      6500
 15119              	.LASF183:
 15120 12f5 4E4F4E45 		.ascii	"NONE\000"
 15120      00
 15121              	.LASF148:
 15122 12fa 61637469 		.ascii	"activation_mode\000"
 15122      76617469 
 15122      6F6E5F6D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccM9DEjH.s 			page 336


 15122      6F646500 
 15123              	.LASF12:
 15124 130a 75696E74 		.ascii	"uint16\000"
 15124      313600
 15125              	.LASF130:
 15126 1311 72657374 		.ascii	"rest_delay\000"
 15126      5F64656C 
 15126      617900
 15127              	.LASF164:
 15128 131c 73745F66 		.ascii	"st_filter\000"
 15128      696C7465 
 15128      7200
 15129              	.LASF254:
 15130 1326 76765F76 		.ascii	"vv_value\000"
 15130      616C7565 
 15130      00
 15131              	.LASF85:
 15132 132f 6B5F645F 		.ascii	"k_d_c_dl\000"
 15132      635F646C 
 15132      00
 15133              	.LASF169:
 15134 1338 64697265 		.ascii	"direction\000"
 15134      6374696F 
 15134      6E00
 15135              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
