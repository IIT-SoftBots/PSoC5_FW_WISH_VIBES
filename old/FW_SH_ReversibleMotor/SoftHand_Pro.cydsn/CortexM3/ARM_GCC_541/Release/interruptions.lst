ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10463
 458 01dc 04000000 		.word	rx_queue.10467
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10465
 461 01e8 08000000 		.word	data_packet_index.10464
 462 01ec 0C000000 		.word	data_packet_buffer.10466
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 814B     		ldr	r3, .L84
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 281 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 285 0
 530 0054 7F4B     		ldr	r3, .L84+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 286 0
 535 005c 7D4B     		ldr	r3, .L84+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 287 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****     
 290:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 290 0
 542 0066 7C4B     		ldr	r3, .L84+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F24C82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 91010000 		.word	.L38+1
 552 0080 EF030000 		.word	.L39+1
 553 0084 EF030000 		.word	.L39+1
 554 0088 91010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 291:..\src/interruptions.c ****         case SOFTHAND_PRO:
 292:..\src/interruptions.c ****         
 293:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 294:..\src/interruptions.c ****             
 295:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 16


 296:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 296 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 7049     		ldr	r1, .L84+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa 6C4B     		ldr	r3, .L84+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 297:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 298:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 298 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc 6649     		ldr	r1, .L84+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 299:..\src/interruptions.c ****                 
 300:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 300 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de 5E49     		ldr	r1, .L84+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 301:..\src/interruptions.c **** 
 302:..\src/interruptions.c ****                 // Check Interrupt     
 303:..\src/interruptions.c ****                 
 304:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 304 0
 604 00f8 564B     		ldr	r3, .L84+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 17


 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 305:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 305 0
 609 0100 544B     		ldr	r3, .L84+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 306:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 306 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 307:..\src/interruptions.c ****                 }
 308:..\src/interruptions.c ****             }
 309:..\src/interruptions.c ****             
 310:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 311:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 615              		.loc 1 311 0
 616 010a 07F58843 		add	r3, r7, #17408
 617 010e 03F15E03 		add	r3, r3, #94
 618 0112 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 619 0114 5049     		ldr	r1, .L84+8
 620 0116 1346     		mov	r3, r2
 621 0118 DB00     		lsls	r3, r3, #3
 622 011a 9B1A     		subs	r3, r3, r2
 623 011c 1B01     		lsls	r3, r3, #4
 624 011e 0B44     		add	r3, r3, r1
 625 0120 03F58873 		add	r3, r3, #272
 626 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627 0126 1A46     		mov	r2, r3
 628 0128 4D4B     		ldr	r3, .L84+16
 629 012a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 630 012c 002B     		cmp	r3, #0
 631 012e 24D0     		beq	.L41
 312:..\src/interruptions.c ****                 motor_control_SH();
 632              		.loc 1 312 0
 633 0130 FFF7FEFF 		bl	motor_control_SH
 313:..\src/interruptions.c ****                 
 314:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 315:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 634              		.loc 1 315 0
 635 0134 07F58843 		add	r3, r7, #17408
 636 0138 03F15E03 		add	r3, r3, #94
 637 013c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 638 013e 4649     		ldr	r1, .L84+8
 639 0140 1346     		mov	r3, r2
 640 0142 DB00     		lsls	r3, r3, #3
 641 0144 9B1A     		subs	r3, r3, r2
 642 0146 1B01     		lsls	r3, r3, #4
 643 0148 0B44     		add	r3, r3, r1
 644 014a 03F58973 		add	r3, r3, #274
 645 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646 0150 012B     		cmp	r3, #1
 647 0152 12D1     		bne	.L41
 316:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 648              		.loc 1 316 0
 649 0154 07F58843 		add	r3, r7, #17408
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 18


 650 0158 03F15E03 		add	r3, r3, #94
 651 015c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 652 015e 3E49     		ldr	r1, .L84+8
 653 0160 1346     		mov	r3, r2
 654 0162 DB00     		lsls	r3, r3, #3
 655 0164 9B1A     		subs	r3, r3, r2
 656 0166 1B01     		lsls	r3, r3, #4
 657 0168 0B44     		add	r3, r3, r1
 658 016a 03F58773 		add	r3, r3, #270
 659 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 0170 002B     		cmp	r3, #0
 661 0172 02D1     		bne	.L41
 317:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 662              		.loc 1 317 0
 663 0174 3B4B     		ldr	r3, .L84+20
 664 0176 0022     		movs	r2, #0
 665 0178 1A70     		strb	r2, [r3]
 666              	.L41:
 318:..\src/interruptions.c ****                     }   
 319:..\src/interruptions.c ****                 }
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 667              		.loc 1 324 0
 668 017a 364B     		ldr	r3, .L84+4
 669 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 017e 002B     		cmp	r3, #0
 671 0180 00F0AF81 		beq	.L81
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 672              		.loc 1 325 0
 673 0184 334B     		ldr	r3, .L84+4
 674 0186 0022     		movs	r2, #0
 675 0188 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 676              		.loc 1 326 0
 677 018a FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 678              		.loc 1 328 0
 679 018e A8E1     		b	.L81
 680              	.L38:
 681              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 682              		.loc 1 333 0
 683 0190 0023     		movs	r3, #0
 684 0192 07F58842 		add	r2, r7, #17408
 685 0196 02F15F02 		add	r2, r2, #95
 686 019a 1370     		strb	r3, [r2]
 687 019c 89E0     		b	.L43
 688              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 19


 689              		.loc 1 334 0
 690 019e 07F58843 		add	r3, r7, #17408
 691 01a2 03F15F03 		add	r3, r3, #95
 692 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 01a8 2C4A     		ldr	r2, .L84+12
 694 01aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 695 01ac 002B     		cmp	r3, #0
 696 01ae 75D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 697              		.loc 1 336 0
 698 01b0 07F58843 		add	r3, r7, #17408
 699 01b4 03F15F03 		add	r3, r3, #95
 700 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 01ba 1846     		mov	r0, r3
 702 01bc FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 703              		.loc 1 338 0
 704 01c0 07F58843 		add	r3, r7, #17408
 705 01c4 03F15E03 		add	r3, r3, #94
 706 01c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ca 2349     		ldr	r1, .L84+8
 708 01cc 1346     		mov	r3, r2
 709 01ce DB00     		lsls	r3, r3, #3
 710 01d0 9B1A     		subs	r3, r3, r2
 711 01d2 1B01     		lsls	r3, r3, #4
 712 01d4 0B44     		add	r3, r3, r1
 713 01d6 03F58873 		add	r3, r3, #272
 714 01da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 715 01dc 07F58842 		add	r2, r7, #17408
 716 01e0 02F15F02 		add	r2, r2, #95
 717 01e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 718 01e6 9A42     		cmp	r2, r3
 719 01e8 0ED1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 720              		.loc 1 340 0
 721 01ea 07F58843 		add	r3, r7, #17408
 722 01ee 03F15E03 		add	r3, r3, #94
 723 01f2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 724 01f4 07F58843 		add	r3, r7, #17408
 725 01f8 03F15F03 		add	r3, r3, #95
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 1146     		mov	r1, r2
 728 0200 1846     		mov	r0, r3
 729 0202 FFF7FEFF 		bl	encoder_reading_SPI
 730 0206 40E0     		b	.L46
 731              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 732              		.loc 1 343 0
 733 0208 07F58843 		add	r3, r7, #17408
 734 020c 03F15D03 		add	r3, r3, #93
 735 0210 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 736 0212 1149     		ldr	r1, .L84+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 20


 737 0214 1346     		mov	r3, r2
 738 0216 DB00     		lsls	r3, r3, #3
 739 0218 9B1A     		subs	r3, r3, r2
 740 021a 1B01     		lsls	r3, r3, #4
 741 021c 0B44     		add	r3, r3, r1
 742 021e 03F58873 		add	r3, r3, #272
 743 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 0224 07F58842 		add	r2, r7, #17408
 745 0228 02F15F02 		add	r2, r2, #95
 746 022c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 747 022e 9A42     		cmp	r2, r3
 748 0230 1AD1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 749              		.loc 1 345 0
 750 0232 07F58843 		add	r3, r7, #17408
 751 0236 03F15D03 		add	r3, r3, #93
 752 023a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 753 023c 07F58843 		add	r3, r7, #17408
 754 0240 03F15F03 		add	r3, r3, #95
 755 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 756 0246 1146     		mov	r1, r2
 757 0248 1846     		mov	r0, r3
 758 024a FFF7FEFF 		bl	encoder_reading_SPI
 759 024e 1CE0     		b	.L46
 760              	.L85:
 761              		.align	2
 762              	.L84:
 763 0250 00000000 		.word	timer_value0
 764 0254 00000000 		.word	interrupt_flag
 765 0258 00000000 		.word	c_mem
 766 025c 00000000 		.word	N_Encoder_Line_Connected
 767 0260 00000000 		.word	pos_reconstruct
 768 0264 00000000 		.word	change_ext_ref_flag
 769              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 770              		.loc 1 349 0
 771 0268 07F58843 		add	r3, r7, #17408
 772 026c 03F15F03 		add	r3, r3, #95
 773 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0272 9E4A     		ldr	r2, .L86
 775 0274 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 776 0276 1A46     		mov	r2, r3
 777 0278 07F58843 		add	r3, r7, #17408
 778 027c 03F15F03 		add	r3, r3, #95
 779 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 780 0282 1946     		mov	r1, r3
 781 0284 1046     		mov	r0, r2
 782 0286 FFF7FEFF 		bl	ReadEncoderLine
 783              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 21


 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 784              		.loc 1 356 0
 785 028a 994B     		ldr	r3, .L86+4
 786 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 028e 002B     		cmp	r3, #0
 788 0290 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 789              		.loc 1 357 0
 790 0292 974B     		ldr	r3, .L86+4
 791 0294 0022     		movs	r2, #0
 792 0296 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 793              		.loc 1 358 0
 794 0298 FFF7FEFF 		bl	interrupt_manager
 795              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 796              		.loc 1 333 0 discriminator 2
 797 029c 07F58843 		add	r3, r7, #17408
 798 02a0 03F15F03 		add	r3, r3, #95
 799 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 02a6 0133     		adds	r3, r3, #1
 801 02a8 07F58842 		add	r2, r7, #17408
 802 02ac 02F15F02 		add	r2, r2, #95
 803 02b0 1370     		strb	r3, [r2]
 804              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 805              		.loc 1 333 0 is_stmt 0 discriminator 1
 806 02b2 07F58843 		add	r3, r7, #17408
 807 02b6 03F15F03 		add	r3, r3, #95
 808 02ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02bc 012B     		cmp	r3, #1
 810 02be 7FF66EAF 		bls	.L48
 811              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 812              		.loc 1 364 0 is_stmt 1
 813 02c2 07F58843 		add	r3, r7, #17408
 814 02c6 03F15E03 		add	r3, r3, #94
 815 02ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 816 02cc 8949     		ldr	r1, .L86+8
 817 02ce 1346     		mov	r3, r2
 818 02d0 DB00     		lsls	r3, r3, #3
 819 02d2 9B1A     		subs	r3, r3, r2
 820 02d4 1B01     		lsls	r3, r3, #4
 821 02d6 0B44     		add	r3, r3, r1
 822 02d8 03F58873 		add	r3, r3, #272
 823 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 02de 1A46     		mov	r2, r3
 825 02e0 854B     		ldr	r3, .L86+12
 826 02e2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 827 02e4 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 22


 828 02e6 2AD0     		beq	.L49
 365:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 829              		.loc 1 366 0
 830 02e8 07F58843 		add	r3, r7, #17408
 831 02ec 03F15E03 		add	r3, r3, #94
 832 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 02f2 1846     		mov	r0, r3
 834 02f4 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****                 
 368:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 369:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 835              		.loc 1 369 0
 836 02f8 07F58843 		add	r3, r7, #17408
 837 02fc 03F15E03 		add	r3, r3, #94
 838 0300 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 839 0302 7C49     		ldr	r1, .L86+8
 840 0304 1346     		mov	r3, r2
 841 0306 DB00     		lsls	r3, r3, #3
 842 0308 9B1A     		subs	r3, r3, r2
 843 030a 1B01     		lsls	r3, r3, #4
 844 030c 0B44     		add	r3, r3, r1
 845 030e 03F58973 		add	r3, r3, #274
 846 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847 0314 012B     		cmp	r3, #1
 848 0316 12D1     		bne	.L49
 370:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 849              		.loc 1 370 0
 850 0318 07F58843 		add	r3, r7, #17408
 851 031c 03F15E03 		add	r3, r3, #94
 852 0320 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 853 0322 7449     		ldr	r1, .L86+8
 854 0324 1346     		mov	r3, r2
 855 0326 DB00     		lsls	r3, r3, #3
 856 0328 9B1A     		subs	r3, r3, r2
 857 032a 1B01     		lsls	r3, r3, #4
 858 032c 0B44     		add	r3, r3, r1
 859 032e 03F58773 		add	r3, r3, #270
 860 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 861 0334 002B     		cmp	r3, #0
 862 0336 02D1     		bne	.L49
 371:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 863              		.loc 1 371 0
 864 0338 704B     		ldr	r3, .L86+16
 865 033a 0022     		movs	r2, #0
 866 033c 1A70     		strb	r2, [r3]
 867              	.L49:
 372:..\src/interruptions.c ****                     }   
 373:..\src/interruptions.c ****                 }
 374:..\src/interruptions.c ****                      
 375:..\src/interruptions.c ****                 
 376:..\src/interruptions.c ****             }
 377:..\src/interruptions.c ****             
 378:..\src/interruptions.c ****             // Check Interrupt 
 379:..\src/interruptions.c **** 
 380:..\src/interruptions.c ****             if (interrupt_flag){
 868              		.loc 1 380 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 23


 869 033e 6C4B     		ldr	r3, .L86+4
 870 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 871 0342 002B     		cmp	r3, #0
 872 0344 04D0     		beq	.L50
 381:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 873              		.loc 1 381 0
 874 0346 6A4B     		ldr	r3, .L86+4
 875 0348 0022     		movs	r2, #0
 876 034a 1A70     		strb	r2, [r3]
 382:..\src/interruptions.c ****                 interrupt_manager();
 877              		.loc 1 382 0
 878 034c FFF7FEFF 		bl	interrupt_manager
 879              	.L50:
 383:..\src/interruptions.c ****             }
 384:..\src/interruptions.c ****             
 385:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 386:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 880              		.loc 1 386 0
 881 0350 684B     		ldr	r3, .L86+8
 882 0352 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 883 0356 012B     		cmp	r3, #1
 884 0358 40F0C580 		bne	.L82
 387:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 885              		.loc 1 387 0
 886 035c 07F58843 		add	r3, r7, #17408
 887 0360 03F15D03 		add	r3, r3, #93
 888 0364 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 889 0366 6349     		ldr	r1, .L86+8
 890 0368 1346     		mov	r3, r2
 891 036a DB00     		lsls	r3, r3, #3
 892 036c 9B1A     		subs	r3, r3, r2
 893 036e 1B01     		lsls	r3, r3, #4
 894 0370 0B44     		add	r3, r3, r1
 895 0372 03F58873 		add	r3, r3, #272
 896 0376 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0378 1A46     		mov	r2, r3
 898 037a 5F4B     		ldr	r3, .L86+12
 899 037c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 900 037e 002B     		cmp	r3, #0
 901 0380 2AD0     		beq	.L52
 388:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 902              		.loc 1 388 0
 903 0382 07F58843 		add	r3, r7, #17408
 904 0386 03F15D03 		add	r3, r3, #93
 905 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 038c 1846     		mov	r0, r3
 907 038e FFF7FEFF 		bl	motor_control_generic
 389:..\src/interruptions.c ****                     
 390:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 391:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 908              		.loc 1 391 0
 909 0392 07F58843 		add	r3, r7, #17408
 910 0396 03F15D03 		add	r3, r3, #93
 911 039a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 912 039c 5549     		ldr	r1, .L86+8
 913 039e 1346     		mov	r3, r2
 914 03a0 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 24


 915 03a2 9B1A     		subs	r3, r3, r2
 916 03a4 1B01     		lsls	r3, r3, #4
 917 03a6 0B44     		add	r3, r3, r1
 918 03a8 03F58973 		add	r3, r3, #274
 919 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 920 03ae 012B     		cmp	r3, #1
 921 03b0 12D1     		bne	.L52
 392:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 922              		.loc 1 392 0
 923 03b2 07F58843 		add	r3, r7, #17408
 924 03b6 03F15D03 		add	r3, r3, #93
 925 03ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 926 03bc 4D49     		ldr	r1, .L86+8
 927 03be 1346     		mov	r3, r2
 928 03c0 DB00     		lsls	r3, r3, #3
 929 03c2 9B1A     		subs	r3, r3, r2
 930 03c4 1B01     		lsls	r3, r3, #4
 931 03c6 0B44     		add	r3, r3, r1
 932 03c8 03F58773 		add	r3, r3, #270
 933 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934 03ce 002B     		cmp	r3, #0
 935 03d0 02D1     		bne	.L52
 393:..\src/interruptions.c ****                             change_ext_ref_flag = FALSE;
 936              		.loc 1 393 0
 937 03d2 4A4B     		ldr	r3, .L86+16
 938 03d4 0022     		movs	r2, #0
 939 03d6 1A70     		strb	r2, [r3]
 940              	.L52:
 394:..\src/interruptions.c ****                         }   
 395:..\src/interruptions.c ****                     }
 396:..\src/interruptions.c ****                     
 397:..\src/interruptions.c ****                   
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****                 // Check Interrupt 
 400:..\src/interruptions.c **** 
 401:..\src/interruptions.c ****                 if (interrupt_flag){
 941              		.loc 1 401 0
 942 03d8 454B     		ldr	r3, .L86+4
 943 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 03dc 002B     		cmp	r3, #0
 945 03de 00F08280 		beq	.L82
 402:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 946              		.loc 1 402 0
 947 03e2 434B     		ldr	r3, .L86+4
 948 03e4 0022     		movs	r2, #0
 949 03e6 1A70     		strb	r2, [r3]
 403:..\src/interruptions.c ****                     interrupt_manager();
 950              		.loc 1 403 0
 951 03e8 FFF7FEFF 		bl	interrupt_manager
 404:..\src/interruptions.c ****                 }
 405:..\src/interruptions.c ****             }  
 406:..\src/interruptions.c ****             break;
 952              		.loc 1 406 0
 953 03ec 7BE0     		b	.L82
 954              	.L39:
 407:..\src/interruptions.c ****             
 408:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 25


 409:..\src/interruptions.c ****             
 410:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 411:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 955              		.loc 1 411 0
 956 03ee 444B     		ldr	r3, .L86+20
 957 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 958 03f2 002B     		cmp	r3, #0
 959 03f4 38D0     		beq	.L53
 960              		.loc 1 411 0 is_stmt 0 discriminator 1
 961 03f6 3F4B     		ldr	r3, .L86+8
 962 03f8 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 963 03fc 002B     		cmp	r3, #0
 964 03fe 33D0     		beq	.L53
 412:..\src/interruptions.c ****                 
 413:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 965              		.loc 1 413 0 is_stmt 1
 966 0400 3C4B     		ldr	r3, .L86+8
 967 0402 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 968 0406 022B     		cmp	r3, #2
 969 0408 08D1     		bne	.L54
 414:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 970              		.loc 1 414 0
 971 040a 07F58843 		add	r3, r7, #17408
 972 040e 03F15D03 		add	r3, r3, #93
 973 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 0414 1846     		mov	r0, r3
 975 0416 FFF7FEFF 		bl	air_chambers_control
 976 041a 07E0     		b	.L55
 977              	.L54:
 415:..\src/interruptions.c ****                 }
 416:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 417:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 978              		.loc 1 417 0
 979 041c 07F58843 		add	r3, r7, #17408
 980 0420 03F15D03 		add	r3, r3, #93
 981 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 0426 1846     		mov	r0, r3
 983 0428 FFF7FEFF 		bl	otbk_act_wrist_control
 984              	.L55:
 418:..\src/interruptions.c ****                 }
 419:..\src/interruptions.c **** 
 420:..\src/interruptions.c ****                 // Check Interrupt 
 421:..\src/interruptions.c **** 
 422:..\src/interruptions.c ****                 if (interrupt_flag){
 985              		.loc 1 422 0
 986 042c 304B     		ldr	r3, .L86+4
 987 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0430 002B     		cmp	r3, #0
 989 0432 04D0     		beq	.L56
 423:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 990              		.loc 1 423 0
 991 0434 2E4B     		ldr	r3, .L86+4
 992 0436 0022     		movs	r2, #0
 993 0438 1A70     		strb	r2, [r3]
 424:..\src/interruptions.c ****                     interrupt_manager();
 994              		.loc 1 424 0
 995 043a FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 26


 996              	.L56:
 425:..\src/interruptions.c ****                 }
 426:..\src/interruptions.c ****             
 427:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 997              		.loc 1 427 0
 998 043e 2D4B     		ldr	r3, .L86+8
 999 0440 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 1000 0444 07F58843 		add	r3, r7, #17408
 1001 0448 03F15D03 		add	r3, r3, #93
 1002 044c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 044e 1146     		mov	r1, r2
 1004 0450 1846     		mov	r0, r3
 1005 0452 FFF7FEFF 		bl	drive_slave
 428:..\src/interruptions.c ****             
 429:..\src/interruptions.c ****                 // Check Interrupt 
 430:..\src/interruptions.c **** 
 431:..\src/interruptions.c ****                 if (interrupt_flag){
 1006              		.loc 1 431 0
 1007 0456 264B     		ldr	r3, .L86+4
 1008 0458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 045a 002B     		cmp	r3, #0
 1010 045c 04D0     		beq	.L53
 432:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1011              		.loc 1 432 0
 1012 045e 244B     		ldr	r3, .L86+4
 1013 0460 0022     		movs	r2, #0
 1014 0462 1A70     		strb	r2, [r3]
 433:..\src/interruptions.c ****                     interrupt_manager();
 1015              		.loc 1 433 0
 1016 0464 FFF7FEFF 		bl	interrupt_manager
 1017              	.L53:
 434:..\src/interruptions.c ****                 }
 435:..\src/interruptions.c ****             }
 436:..\src/interruptions.c ****             if (!master_mode){
 1018              		.loc 1 436 0
 1019 0468 254B     		ldr	r3, .L86+20
 1020 046a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 046c 002B     		cmp	r3, #0
 1022 046e 11D1     		bne	.L57
 437:..\src/interruptions.c ****                 
 438:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 1023              		.loc 1 438 0
 1024 0470 204B     		ldr	r3, .L86+8
 1025 0472 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 1026 0476 002B     		cmp	r3, #0
 1027 0478 01D0     		beq	.L58
 439:..\src/interruptions.c ****                     // Stop feedback motors
 440:..\src/interruptions.c ****                     stop_master_device();
 1028              		.loc 1 440 0
 1029 047a FFF7FEFF 		bl	stop_master_device
 1030              	.L58:
 441:..\src/interruptions.c ****                 }
 442:..\src/interruptions.c ****                 // Disable slave or motors
 443:..\src/interruptions.c ****                 deactivate_slaves();
 1031              		.loc 1 443 0
 1032 047e FFF7FEFF 		bl	deactivate_slaves
 444:..\src/interruptions.c ****                         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 27


 445:..\src/interruptions.c ****                 // Check Interrupt 
 446:..\src/interruptions.c ****                 if (interrupt_flag){
 1033              		.loc 1 446 0
 1034 0482 1B4B     		ldr	r3, .L86+4
 1035 0484 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0486 002B     		cmp	r3, #0
 1037 0488 04D0     		beq	.L57
 447:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1038              		.loc 1 447 0
 1039 048a 194B     		ldr	r3, .L86+4
 1040 048c 0022     		movs	r2, #0
 1041 048e 1A70     		strb	r2, [r3]
 448:..\src/interruptions.c ****                     interrupt_manager();
 1042              		.loc 1 448 0
 1043 0490 FFF7FEFF 		bl	interrupt_manager
 1044              	.L57:
 449:..\src/interruptions.c ****                 } 
 450:..\src/interruptions.c ****             }
 451:..\src/interruptions.c ****     
 452:..\src/interruptions.c ****             // Control Master device main motor 
 453:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 454:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1045              		.loc 1 454 0
 1046 0494 07F58843 		add	r3, r7, #17408
 1047 0498 03F15E03 		add	r3, r3, #94
 1048 049c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049 049e 1846     		mov	r0, r3
 1050 04a0 FFF7FEFF 		bl	motor_control_generic
 455:..\src/interruptions.c ****                         
 456:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 457:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1051              		.loc 1 457 0
 1052 04a4 134B     		ldr	r3, .L86+8
 1053 04a6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1054 04aa 032B     		cmp	r3, #3
 1055 04ac 0FD1     		bne	.L59
 458:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1056              		.loc 1 458 0
 1057 04ae 154B     		ldr	r3, .L86+24
 1058 04b0 9B68     		ldr	r3, [r3, #8]
 1059 04b2 432B     		cmp	r3, #67
 1060 04b4 02DD     		ble	.L60
 459:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1061              		.loc 1 459 0
 1062 04b6 134B     		ldr	r3, .L86+24
 1063 04b8 4322     		movs	r2, #67
 1064 04ba 9A60     		str	r2, [r3, #8]
 1065              	.L60:
 460:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1066              		.loc 1 460 0
 1067 04bc 114B     		ldr	r3, .L86+24
 1068 04be 9B68     		ldr	r3, [r3, #8]
 1069 04c0 13F1430F 		cmn	r3, #67
 1070 04c4 03DA     		bge	.L59
 461:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1071              		.loc 1 461 0
 1072 04c6 0F4B     		ldr	r3, .L86+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 28


 1073 04c8 6FF04202 		mvn	r2, #66
 1074 04cc 9A60     		str	r2, [r3, #8]
 1075              	.L59:
 462:..\src/interruptions.c ****             }
 463:..\src/interruptions.c ****             
 464:..\src/interruptions.c ****             // Check Interrupt 
 465:..\src/interruptions.c **** 
 466:..\src/interruptions.c ****             if (interrupt_flag){
 1076              		.loc 1 466 0
 1077 04ce 084B     		ldr	r3, .L86+4
 1078 04d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 04d2 002B     		cmp	r3, #0
 1080 04d4 18D0     		beq	.L83
 467:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1081              		.loc 1 467 0
 1082 04d6 064B     		ldr	r3, .L86+4
 1083 04d8 0022     		movs	r2, #0
 1084 04da 1A70     		strb	r2, [r3]
 468:..\src/interruptions.c ****                 interrupt_manager();
 1085              		.loc 1 468 0
 1086 04dc FFF7FEFF 		bl	interrupt_manager
 469:..\src/interruptions.c ****             }
 470:..\src/interruptions.c ****             
 471:..\src/interruptions.c ****             break;
 1087              		.loc 1 471 0
 1088 04e0 12E0     		b	.L83
 1089              	.L81:
 328:..\src/interruptions.c ****             
 1090              		.loc 1 328 0
 1091 04e2 00BF     		nop
 1092 04e4 11E0     		b	.L35
 1093              	.L82:
 406:..\src/interruptions.c ****             
 1094              		.loc 1 406 0
 1095 04e6 00BF     		nop
 1096 04e8 0FE0     		b	.L35
 1097              	.L87:
 1098 04ea 00BF     		.align	2
 1099              	.L86:
 1100 04ec 00000000 		.word	N_Encoder_Line_Connected
 1101 04f0 00000000 		.word	interrupt_flag
 1102 04f4 00000000 		.word	c_mem
 1103 04f8 00000000 		.word	pos_reconstruct
 1104 04fc 00000000 		.word	change_ext_ref_flag
 1105 0500 00000000 		.word	master_mode
 1106 0504 00000000 		.word	g_refNew
 1107              	.L83:
 1108              		.loc 1 471 0
 1109 0508 00BF     		nop
 1110              	.L35:
 472:..\src/interruptions.c ****     }
 473:..\src/interruptions.c **** 
 474:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 475:..\src/interruptions.c **** 
 476:..\src/interruptions.c ****     analog_read_end();
 1111              		.loc 1 476 0
 1112 050a FFF7FEFF 		bl	analog_read_end
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 29


 477:..\src/interruptions.c **** 
 478:..\src/interruptions.c ****     if (interrupt_flag){
 1113              		.loc 1 478 0
 1114 050e 714B     		ldr	r3, .L88
 1115 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1116 0512 002B     		cmp	r3, #0
 1117 0514 04D0     		beq	.L62
 479:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1118              		.loc 1 479 0
 1119 0516 6F4B     		ldr	r3, .L88
 1120 0518 0022     		movs	r2, #0
 1121 051a 1A70     		strb	r2, [r3]
 480:..\src/interruptions.c ****         interrupt_manager();
 1122              		.loc 1 480 0
 1123 051c FFF7FEFF 		bl	interrupt_manager
 1124              	.L62:
 481:..\src/interruptions.c ****     }
 482:..\src/interruptions.c **** 
 483:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 484:..\src/interruptions.c **** 
 485:..\src/interruptions.c ****     overcurrent_control();
 1125              		.loc 1 485 0
 1126 0520 FFF7FEFF 		bl	overcurrent_control
 486:..\src/interruptions.c ****     
 487:..\src/interruptions.c ****     // Check Interrupt 
 488:..\src/interruptions.c ****     
 489:..\src/interruptions.c ****     if (interrupt_flag){
 1127              		.loc 1 489 0
 1128 0524 6B4B     		ldr	r3, .L88
 1129 0526 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0528 002B     		cmp	r3, #0
 1131 052a 04D0     		beq	.L63
 490:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1132              		.loc 1 490 0
 1133 052c 694B     		ldr	r3, .L88
 1134 052e 0022     		movs	r2, #0
 1135 0530 1A70     		strb	r2, [r3]
 491:..\src/interruptions.c ****         interrupt_manager();
 1136              		.loc 1 491 0
 1137 0532 FFF7FEFF 		bl	interrupt_manager
 1138              	.L63:
 492:..\src/interruptions.c ****     }
 493:..\src/interruptions.c **** 
 494:..\src/interruptions.c ****     //---------------------------------- Calibration 
 495:..\src/interruptions.c **** 
 496:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 497:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1139              		.loc 1 497 0
 1140 0536 684B     		ldr	r3, .L88+4
 1141 0538 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 053a 012B     		cmp	r3, #1
 1143 053c 0ED1     		bne	.L64
 498:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1144              		.loc 1 498 0
 1145 053e 674B     		ldr	r3, .L88+8
 1146 0540 1B88     		ldrh	r3, [r3]
 1147 0542 0A2B     		cmp	r3, #10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 30


 1148 0544 04D1     		bne	.L65
 499:..\src/interruptions.c ****             calibration();
 1149              		.loc 1 499 0
 1150 0546 FFF7FEFF 		bl	calibration
 500:..\src/interruptions.c ****             counter_calibration = 0;
 1151              		.loc 1 500 0
 1152 054a 644B     		ldr	r3, .L88+8
 1153 054c 0022     		movs	r2, #0
 1154 054e 1A80     		strh	r2, [r3]	@ movhi
 1155              	.L65:
 501:..\src/interruptions.c ****         }
 502:..\src/interruptions.c ****         counter_calibration++;
 1156              		.loc 1 502 0
 1157 0550 624B     		ldr	r3, .L88+8
 1158 0552 1B88     		ldrh	r3, [r3]
 1159 0554 0133     		adds	r3, r3, #1
 1160 0556 9AB2     		uxth	r2, r3
 1161 0558 604B     		ldr	r3, .L88+8
 1162 055a 1A80     		strh	r2, [r3]	@ movhi
 1163              	.L64:
 503:..\src/interruptions.c ****     }
 504:..\src/interruptions.c **** 
 505:..\src/interruptions.c ****     // Check Interrupt 
 506:..\src/interruptions.c ****     
 507:..\src/interruptions.c ****     if (interrupt_flag){
 1164              		.loc 1 507 0
 1165 055c 5D4B     		ldr	r3, .L88
 1166 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 0560 002B     		cmp	r3, #0
 1168 0562 04D0     		beq	.L66
 508:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1169              		.loc 1 508 0
 1170 0564 5B4B     		ldr	r3, .L88
 1171 0566 0022     		movs	r2, #0
 1172 0568 1A70     		strb	r2, [r3]
 509:..\src/interruptions.c ****         interrupt_manager();
 1173              		.loc 1 509 0
 1174 056a FFF7FEFF 		bl	interrupt_manager
 1175              	.L66:
 510:..\src/interruptions.c ****     }
 511:..\src/interruptions.c ****     
 512:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1176              		.loc 1 512 0
 1177 056e 5C4B     		ldr	r3, .L88+12
 1178 0570 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1179 0574 002B     		cmp	r3, #0
 1180 0576 1CD1     		bne	.L67
 513:..\src/interruptions.c ****     
 514:..\src/interruptions.c ****         //---------------------------------- Rest position check
 515:..\src/interruptions.c **** 
 516:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 517:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1181              		.loc 1 517 0
 1182 0578 594B     		ldr	r3, .L88+12
 1183 057a 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1184 057e 012B     		cmp	r3, #1
 1185 0580 17D1     		bne	.L67
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 31


 518:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1186              		.loc 1 518 0
 1187 0582 564B     		ldr	r3, .L88+8
 1188 0584 1B88     		ldrh	r3, [r3]
 1189 0586 0A2B     		cmp	r3, #10
 1190 0588 04D1     		bne	.L68
 519:..\src/interruptions.c ****                     check_rest_position();
 1191              		.loc 1 519 0
 1192 058a FFF7FEFF 		bl	check_rest_position
 520:..\src/interruptions.c ****                     counter_calibration = 0;
 1193              		.loc 1 520 0
 1194 058e 534B     		ldr	r3, .L88+8
 1195 0590 0022     		movs	r2, #0
 1196 0592 1A80     		strh	r2, [r3]	@ movhi
 1197              	.L68:
 521:..\src/interruptions.c ****             }
 522:..\src/interruptions.c ****             counter_calibration++;
 1198              		.loc 1 522 0
 1199 0594 514B     		ldr	r3, .L88+8
 1200 0596 1B88     		ldrh	r3, [r3]
 1201 0598 0133     		adds	r3, r3, #1
 1202 059a 9AB2     		uxth	r2, r3
 1203 059c 4F4B     		ldr	r3, .L88+8
 1204 059e 1A80     		strh	r2, [r3]	@ movhi
 523:..\src/interruptions.c **** 
 524:..\src/interruptions.c ****             // Check Interrupt     
 525:..\src/interruptions.c ****             if (interrupt_flag){
 1205              		.loc 1 525 0
 1206 05a0 4C4B     		ldr	r3, .L88
 1207 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 05a4 002B     		cmp	r3, #0
 1209 05a6 04D0     		beq	.L67
 526:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1210              		.loc 1 526 0
 1211 05a8 4A4B     		ldr	r3, .L88
 1212 05aa 0022     		movs	r2, #0
 1213 05ac 1A70     		strb	r2, [r3]
 527:..\src/interruptions.c ****                 interrupt_manager();
 1214              		.loc 1 527 0
 1215 05ae FFF7FEFF 		bl	interrupt_manager
 1216              	.L67:
 528:..\src/interruptions.c ****             }
 529:..\src/interruptions.c ****         }
 530:..\src/interruptions.c ****         
 531:..\src/interruptions.c ****     }
 532:..\src/interruptions.c ****     
 533:..\src/interruptions.c ****      
 534:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 535:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1217              		.loc 1 535 0
 1218 05b2 4B4B     		ldr	r3, .L88+12
 1219 05b4 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1220 05b8 002B     		cmp	r3, #0
 1221 05ba 0AD0     		beq	.L69
 536:..\src/interruptions.c ****         
 537:..\src/interruptions.c ****         update_EMG_history();
 1222              		.loc 1 537 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 32


 1223 05bc FFF7FEFF 		bl	update_EMG_history
 538:..\src/interruptions.c **** 
 539:..\src/interruptions.c ****         // Check Interrupt 
 540:..\src/interruptions.c **** 
 541:..\src/interruptions.c ****         if (interrupt_flag){
 1224              		.loc 1 541 0
 1225 05c0 444B     		ldr	r3, .L88
 1226 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1227 05c4 002B     		cmp	r3, #0
 1228 05c6 04D0     		beq	.L69
 542:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1229              		.loc 1 542 0
 1230 05c8 424B     		ldr	r3, .L88
 1231 05ca 0022     		movs	r2, #0
 1232 05cc 1A70     		strb	r2, [r3]
 543:..\src/interruptions.c ****             interrupt_manager();
 1233              		.loc 1 543 0
 1234 05ce FFF7FEFF 		bl	interrupt_manager
 1235              	.L69:
 544:..\src/interruptions.c ****         }
 545:..\src/interruptions.c ****     }
 546:..\src/interruptions.c **** 
 547:..\src/interruptions.c ****     
 548:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 549:..\src/interruptions.c **** 
 550:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1236              		.loc 1 550 0
 1237 05d2 434B     		ldr	r3, .L88+12
 1238 05d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1239 05d8 1A46     		mov	r2, r3
 1240 05da 424B     		ldr	r3, .L88+16
 1241 05dc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1242 05de 002B     		cmp	r3, #0
 1243 05e0 01D0     		beq	.L70
 551:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 1244              		.loc 1 551 0
 1245 05e2 FFF7FEFF 		bl	cycles_counter_update
 1246              	.L70:
 552:..\src/interruptions.c ****     }
 553:..\src/interruptions.c **** 
 554:..\src/interruptions.c ****     // Check Cycles Interrupt 
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1247              		.loc 1 556 0
 1248 05e6 404B     		ldr	r3, .L88+20
 1249 05e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 05ea 002B     		cmp	r3, #0
 1251 05ec 00F09B80 		beq	.L71
 557:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1252              		.loc 1 557 0
 1253 05f0 3D4B     		ldr	r3, .L88+20
 1254 05f2 0022     		movs	r2, #0
 1255 05f4 1A70     		strb	r2, [r3]
 558:..\src/interruptions.c **** 
 559:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 560:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 561:..\src/interruptions.c ****         if(can_write) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 33


 1256              		.loc 1 561 0
 1257 05f6 3D4B     		ldr	r3, .L88+24
 1258 05f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1259 05fa 002B     		cmp	r3, #0
 1260 05fc 54D0     		beq	.L72
 562:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1261              		.loc 1 562 0
 1262 05fe 3C4B     		ldr	r3, .L88+28
 1263 0600 0022     		movs	r2, #0
 1264 0602 1A70     		strb	r2, [r3]
 563:..\src/interruptions.c ****             
 564:..\src/interruptions.c ****             //Update time variable
 565:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 1265              		.loc 1 565 0
 1266 0604 3B4B     		ldr	r3, .L88+32
 1267 0606 9B6D     		ldr	r3, [r3, #88]
 1268 0608 7833     		adds	r3, r3, #120
 1269 060a 3A4A     		ldr	r2, .L88+32
 1270 060c 9365     		str	r3, [r2, #88]
 566:..\src/interruptions.c ****             
 567:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1271              		.loc 1 567 0
 1272 060e 344B     		ldr	r3, .L88+12
 1273 0610 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1274 0614 012B     		cmp	r3, #1
 1275 0616 47D1     		bne	.L72
 568:..\src/interruptions.c ****                 
 569:..\src/interruptions.c ****                 store_RTC_current_time();
 1276              		.loc 1 569 0
 1277 0618 FFF7FEFF 		bl	store_RTC_current_time
 570:..\src/interruptions.c ****                 
 571:..\src/interruptions.c ****                 //Write in SD card
 572:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1278              		.loc 1 572 0
 1279 061c 07F56A53 		add	r3, r7, #14976
 1280 0620 03F11803 		add	r3, r3, #24
 1281 0624 1846     		mov	r0, r3
 1282 0626 FFF7FEFF 		bl	prepare_SD_info
 573:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1283              		.loc 1 573 0
 1284 062a 334B     		ldr	r3, .L88+36
 1285 062c 1C68     		ldr	r4, [r3]
 1286 062e 07F56A53 		add	r3, r7, #14976
 1287 0632 03F11803 		add	r3, r3, #24
 1288 0636 1846     		mov	r0, r3
 1289 0638 FFF7FEFF 		bl	strlen
 1290 063c 0246     		mov	r2, r0
 1291 063e 07F56A53 		add	r3, r7, #14976
 1292 0642 03F11803 		add	r3, r3, #24
 1293 0646 1946     		mov	r1, r3
 1294 0648 2046     		mov	r0, r4
 1295 064a FFF7FEFF 		bl	FS_Write
 574:..\src/interruptions.c ****                 
 575:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1296              		.loc 1 575 0
 1297 064e 244B     		ldr	r3, .L88+12
 1298 0650 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 34


 1299 0654 002B     		cmp	r3, #0
 1300 0656 27D0     		beq	.L72
 1301              	.LBB3:
 576:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1302              		.loc 1 576 0
 1303 0658 07F16003 		add	r3, r7, #96
 1304 065c 603B     		subs	r3, r3, #96
 1305 065e 0022     		movs	r2, #0
 1306 0660 1A60     		str	r2, [r3]
 1307 0662 0433     		adds	r3, r3, #4
 1308 0664 43F69422 		movw	r2, #14996
 1309 0668 0021     		movs	r1, #0
 1310 066a 1846     		mov	r0, r3
 1311 066c FFF7FEFF 		bl	memset
 577:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1312              		.loc 1 577 0
 1313 0670 224B     		ldr	r3, .L88+40
 1314 0672 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1315 0674 07F16003 		add	r3, r7, #96
 1316 0678 603B     		subs	r3, r3, #96
 1317 067a 1A70     		strb	r2, [r3]
 578:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1318              		.loc 1 578 0
 1319 067c 07F16003 		add	r3, r7, #96
 1320 0680 603B     		subs	r3, r3, #96
 1321 0682 1846     		mov	r0, r3
 1322 0684 FFF7FEFF 		bl	prepare_SD_EMG_history
 579:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1323              		.loc 1 579 0
 1324 0688 1D4B     		ldr	r3, .L88+44
 1325 068a 1C68     		ldr	r4, [r3]
 1326 068c 07F16003 		add	r3, r7, #96
 1327 0690 603B     		subs	r3, r3, #96
 1328 0692 1846     		mov	r0, r3
 1329 0694 FFF7FEFF 		bl	strlen
 1330 0698 0246     		mov	r2, r0
 1331 069a 07F16003 		add	r3, r7, #96
 1332 069e 603B     		subs	r3, r3, #96
 1333 06a0 1946     		mov	r1, r3
 1334 06a2 2046     		mov	r0, r4
 1335 06a4 FFF7FEFF 		bl	FS_Write
 1336              	.L72:
 1337              	.LBE3:
 580:..\src/interruptions.c ****                 }
 581:..\src/interruptions.c ****             }
 582:..\src/interruptions.c ****         }
 583:..\src/interruptions.c ****         
 584:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 585:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 1338              		.loc 1 585 0
 1339 06a8 114B     		ldr	r3, .L88+28
 1340 06aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1341 06ac 012B     		cmp	r3, #1
 1342 06ae 03D0     		beq	.L73
 1343              		.loc 1 585 0 is_stmt 0 discriminator 1
 1344 06b0 0F4B     		ldr	r3, .L88+28
 1345 06b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 35


 1346 06b4 022B     		cmp	r3, #2
 1347 06b6 25D1     		bne	.L74
 1348              	.L73:
 586:..\src/interruptions.c ****             // Deactivate motors
 587:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 1349              		.loc 1 587 0 is_stmt 1
 1350 06b8 0021     		movs	r1, #0
 1351 06ba 0020     		movs	r0, #0
 1352 06bc FFF7FEFF 		bl	enable_motor
 588:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1353              		.loc 1 588 0
 1354 06c0 0C4B     		ldr	r3, .L88+32
 1355 06c2 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1356 06c6 012B     		cmp	r3, #1
 1357 06c8 2DD1     		bne	.L71
 589:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 1358              		.loc 1 589 0
 1359 06ca 0021     		movs	r1, #0
 1360 06cc 0120     		movs	r0, #1
 1361 06ce FFF7FEFF 		bl	enable_motor
 588:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1362              		.loc 1 588 0
 1363 06d2 28E0     		b	.L71
 1364              	.L89:
 1365              		.align	2
 1366              	.L88:
 1367 06d4 00000000 		.word	interrupt_flag
 1368 06d8 00000000 		.word	calib
 1369 06dc 00000000 		.word	counter_calibration.10483
 1370 06e0 00000000 		.word	c_mem
 1371 06e4 00000000 		.word	pos_reconstruct
 1372 06e8 00000000 		.word	cycles_interrupt_flag
 1373 06ec 00000000 		.word	can_write
 1374 06f0 00000000 		.word	cycles_status
 1375 06f4 00000000 		.word	g_mem
 1376 06f8 00000000 		.word	pFile
 1377 06fc 20000000 		.word	.LC0
 1378 0700 00000000 		.word	pEMGHFile
 1379              	.L74:
 590:..\src/interruptions.c ****             }
 591:..\src/interruptions.c ****         }
 592:..\src/interruptions.c ****         else {
 593:..\src/interruptions.c ****             // Activate/Deactivate motors
 594:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 1380              		.loc 1 594 0
 1381 0704 4D4B     		ldr	r3, .L90
 1382 0706 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1383 0708 1946     		mov	r1, r3
 1384 070a 0020     		movs	r0, #0
 1385 070c FFF7FEFF 		bl	enable_motor
 595:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1386              		.loc 1 595 0
 1387 0710 4B4B     		ldr	r3, .L90+4
 1388 0712 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1389 0716 012B     		cmp	r3, #1
 1390 0718 05D1     		bne	.L71
 596:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 36


 1391              		.loc 1 596 0
 1392 071a 484B     		ldr	r3, .L90
 1393 071c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1394 071e 1946     		mov	r1, r3
 1395 0720 0120     		movs	r0, #1
 1396 0722 FFF7FEFF 		bl	enable_motor
 1397              	.L71:
 597:..\src/interruptions.c ****             }
 598:..\src/interruptions.c ****         }
 599:..\src/interruptions.c ****     }
 600:..\src/interruptions.c ****     
 601:..\src/interruptions.c ****     // Check Interrupt 
 602:..\src/interruptions.c ****     
 603:..\src/interruptions.c ****     if (interrupt_flag){
 1398              		.loc 1 603 0
 1399 0726 474B     		ldr	r3, .L90+8
 1400 0728 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 072a 002B     		cmp	r3, #0
 1402 072c 04D0     		beq	.L76
 604:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1403              		.loc 1 604 0
 1404 072e 454B     		ldr	r3, .L90+8
 1405 0730 0022     		movs	r2, #0
 1406 0732 1A70     		strb	r2, [r3]
 605:..\src/interruptions.c ****         interrupt_manager();
 1407              		.loc 1 605 0
 1408 0734 FFF7FEFF 		bl	interrupt_manager
 1409              	.L76:
 606:..\src/interruptions.c ****     }
 607:..\src/interruptions.c ****     
 608:..\src/interruptions.c ****     
 609:..\src/interruptions.c ****     //---------------------------------- Check battery
 610:..\src/interruptions.c **** 
 611:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 612:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1410              		.loc 1 612 0
 1411 0738 434B     		ldr	r3, .L90+12
 1412 073a 1B88     		ldrh	r3, [r3]
 1413 073c 0A2B     		cmp	r3, #10
 1414 073e 04D1     		bne	.L77
 613:..\src/interruptions.c ****         battery_management();   
 1415              		.loc 1 613 0
 1416 0740 FFF7FEFF 		bl	battery_management
 614:..\src/interruptions.c ****         counter_tension_func = 0;
 1417              		.loc 1 614 0
 1418 0744 404B     		ldr	r3, .L90+12
 1419 0746 0022     		movs	r2, #0
 1420 0748 1A80     		strh	r2, [r3]	@ movhi
 1421              	.L77:
 615:..\src/interruptions.c ****     }
 616:..\src/interruptions.c ****     counter_tension_func++;
 1422              		.loc 1 616 0
 1423 074a 3F4B     		ldr	r3, .L90+12
 1424 074c 1B88     		ldrh	r3, [r3]
 1425 074e 0133     		adds	r3, r3, #1
 1426 0750 9AB2     		uxth	r2, r3
 1427 0752 3D4B     		ldr	r3, .L90+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 37


 1428 0754 1A80     		strh	r2, [r3]	@ movhi
 617:..\src/interruptions.c **** 
 618:..\src/interruptions.c ****     // Check Interrupt 
 619:..\src/interruptions.c ****     
 620:..\src/interruptions.c ****     if (interrupt_flag){
 1429              		.loc 1 620 0
 1430 0756 3B4B     		ldr	r3, .L90+8
 1431 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1432 075a 002B     		cmp	r3, #0
 1433 075c 04D0     		beq	.L78
 621:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1434              		.loc 1 621 0
 1435 075e 394B     		ldr	r3, .L90+8
 1436 0760 0022     		movs	r2, #0
 1437 0762 1A70     		strb	r2, [r3]
 622:..\src/interruptions.c ****         interrupt_manager();
 1438              		.loc 1 622 0
 1439 0764 FFF7FEFF 		bl	interrupt_manager
 1440              	.L78:
 623:..\src/interruptions.c ****     }
 624:..\src/interruptions.c ****    
 625:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 626:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1441              		.loc 1 626 0
 1442 0768 384B     		ldr	r3, .L90+16
 1443 076a 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1444 076e 002B     		cmp	r3, #0
 1445 0770 0AD0     		beq	.L79
 627:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1446              		.loc 1 627 0
 1447 0772 FFF7FEFF 		bl	ReadAllIMUs
 628:..\src/interruptions.c ****         
 629:..\src/interruptions.c ****         if (interrupt_flag){
 1448              		.loc 1 629 0
 1449 0776 334B     		ldr	r3, .L90+8
 1450 0778 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1451 077a 002B     		cmp	r3, #0
 1452 077c 04D0     		beq	.L79
 630:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1453              		.loc 1 630 0
 1454 077e 314B     		ldr	r3, .L90+8
 1455 0780 0022     		movs	r2, #0
 1456 0782 1A70     		strb	r2, [r3]
 631:..\src/interruptions.c ****             interrupt_manager();
 1457              		.loc 1 631 0
 1458 0784 FFF7FEFF 		bl	interrupt_manager
 1459              	.L79:
 632:..\src/interruptions.c ****         }
 633:..\src/interruptions.c ****     }
 634:..\src/interruptions.c ****    
 635:..\src/interruptions.c ****     //---------------------------------- Update States
 636:..\src/interruptions.c ****     
 637:..\src/interruptions.c ****     // Load k-1 state
 638:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1460              		.loc 1 638 0
 1461 0788 314A     		ldr	r2, .L90+20
 1462 078a 324B     		ldr	r3, .L90+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 38


 1463 078c 1446     		mov	r4, r2
 1464 078e 1D46     		mov	r5, r3
 1465 0790 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1466 0792 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1467 0794 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1468 0796 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1469 0798 95E80300 		ldmia	r5, {r0, r1}
 1470 079c 84E80300 		stmia	r4, {r0, r1}
 639:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1471              		.loc 1 639 0
 1472 07a0 2D4A     		ldr	r2, .L90+28
 1473 07a2 2E4B     		ldr	r3, .L90+32
 1474 07a4 1046     		mov	r0, r2
 1475 07a6 1946     		mov	r1, r3
 1476 07a8 6823     		movs	r3, #104
 1477 07aa 1A46     		mov	r2, r3
 1478 07ac FFF7FEFF 		bl	memcpy
 640:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1479              		.loc 1 640 0
 1480 07b0 2B4A     		ldr	r2, .L90+36
 1481 07b2 224B     		ldr	r3, .L90
 1482 07b4 1446     		mov	r4, r2
 1483 07b6 1D46     		mov	r5, r3
 1484 07b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1485 07ba 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1486 07bc 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1487 07c0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 641:..\src/interruptions.c **** 
 642:..\src/interruptions.c ****     // Load k+1 state        
 643:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1488              		.loc 1 643 0
 1489 07c4 1D4A     		ldr	r2, .L90
 1490 07c6 274B     		ldr	r3, .L90+40
 1491 07c8 1446     		mov	r4, r2
 1492 07ca 1D46     		mov	r5, r3
 1493 07cc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1494 07ce 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1495 07d0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1496 07d4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 644:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1497              		.loc 1 644 0
 1498 07d8 234A     		ldr	r2, .L90+44
 1499 07da 244B     		ldr	r3, .L90+48
 1500 07dc 1046     		mov	r0, r2
 1501 07de 1946     		mov	r1, r3
 1502 07e0 C823     		movs	r3, #200
 1503 07e2 1A46     		mov	r2, r3
 1504 07e4 FFF7FEFF 		bl	memcpy
 645:..\src/interruptions.c ****                 
 646:..\src/interruptions.c ****     if (interrupt_flag){
 1505              		.loc 1 646 0
 1506 07e8 164B     		ldr	r3, .L90+8
 1507 07ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1508 07ec 002B     		cmp	r3, #0
 1509 07ee 04D0     		beq	.L80
 647:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1510              		.loc 1 647 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 39


 1511 07f0 144B     		ldr	r3, .L90+8
 1512 07f2 0022     		movs	r2, #0
 1513 07f4 1A70     		strb	r2, [r3]
 648:..\src/interruptions.c ****         interrupt_manager();
 1514              		.loc 1 648 0
 1515 07f6 FFF7FEFF 		bl	interrupt_manager
 1516              	.L80:
 649:..\src/interruptions.c ****     }
 650:..\src/interruptions.c **** 
 651:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1517              		.loc 1 651 0
 1518 07fa FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1519 07fe 0346     		mov	r3, r0
 1520 0800 1A46     		mov	r2, r3
 1521 0802 1B4B     		ldr	r3, .L90+52
 1522 0804 1A80     		strh	r2, [r3]	@ movhi
 652:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1523              		.loc 1 652 0
 1524 0806 1B4B     		ldr	r3, .L90+56
 1525 0808 1B88     		ldrh	r3, [r3]
 1526 080a 1A46     		mov	r2, r3
 1527 080c 184B     		ldr	r3, .L90+52
 1528 080e 1B88     		ldrh	r3, [r3]
 1529 0810 D31A     		subs	r3, r2, r3
 1530 0812 1846     		mov	r0, r3
 1531 0814 FFF7FEFF 		bl	__aeabi_i2f
 1532 0818 0346     		mov	r3, r0
 1533 081a 1749     		ldr	r1, .L90+60
 1534 081c 1846     		mov	r0, r3
 1535 081e FFF7FEFF 		bl	__aeabi_fdiv
 1536 0822 0346     		mov	r3, r0
 1537 0824 1A46     		mov	r2, r3
 1538 0826 154B     		ldr	r3, .L90+64
 1539 0828 1A60     		str	r2, [r3]	@ float
 653:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1540              		.loc 1 653 0
 1541 082a 0120     		movs	r0, #1
 1542 082c FFF7FEFF 		bl	MY_TIMER_REG_Write
 654:..\src/interruptions.c **** 
 655:..\src/interruptions.c **** }
 1543              		.loc 1 655 0
 1544 0830 00BF     		nop
 1545 0832 07F58847 		add	r7, r7, #17408
 1546 0836 6037     		adds	r7, r7, #96
 1547              		.cfi_def_cfa_offset 16
 1548 0838 BD46     		mov	sp, r7
 1549              		.cfi_def_cfa_register 13
 1550              		@ sp needed
 1551 083a B0BD     		pop	{r4, r5, r7, pc}
 1552              	.L91:
 1553              		.align	2
 1554              	.L90:
 1555 083c 00000000 		.word	g_ref
 1556 0840 00000000 		.word	g_mem
 1557 0844 00000000 		.word	interrupt_flag
 1558 0848 02000000 		.word	counter_tension_func.10484
 1559 084c 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 40


 1560 0850 00000000 		.word	g_adc_measOld
 1561 0854 00000000 		.word	g_adc_meas
 1562 0858 00000000 		.word	g_measOld
 1563 085c 00000000 		.word	g_meas
 1564 0860 00000000 		.word	g_refOld
 1565 0864 00000000 		.word	g_refNew
 1566 0868 00000000 		.word	g_imu
 1567 086c 00000000 		.word	g_imuNew
 1568 0870 00000000 		.word	timer_value
 1569 0874 00000000 		.word	timer_value0
 1570 0878 00247449 		.word	1232348160
 1571 087c 00000000 		.word	cycle_time
 1572              		.cfi_endproc
 1573              	.LFE67:
 1574              		.size	function_scheduler, .-function_scheduler
 1575              		.section	.text.compute_reference,"ax",%progbits
 1576              		.align	2
 1577              		.global	compute_reference
 1578              		.thumb
 1579              		.thumb_func
 1580              		.type	compute_reference, %function
 1581              	compute_reference:
 1582              	.LFB68:
 656:..\src/interruptions.c **** 
 657:..\src/interruptions.c **** //==============================================================================
 658:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 659:..\src/interruptions.c **** //==============================================================================
 660:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1583              		.loc 1 660 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 40
 1586              		@ frame_needed = 1, uses_anonymous_args = 0
 1587 0000 80B5     		push	{r7, lr}
 1588              		.cfi_def_cfa_offset 8
 1589              		.cfi_offset 7, -8
 1590              		.cfi_offset 14, -4
 1591 0002 8CB0     		sub	sp, sp, #48
 1592              		.cfi_def_cfa_offset 56
 1593 0004 02AF     		add	r7, sp, #8
 1594              		.cfi_def_cfa 7, 48
 1595 0006 0346     		mov	r3, r0
 1596 0008 B960     		str	r1, [r7, #8]
 1597 000a 7A60     		str	r2, [r7, #4]
 1598 000c FB73     		strb	r3, [r7, #15]
 661:..\src/interruptions.c ****     
 662:..\src/interruptions.c ****     int32 CYDATA handle_value;
 663:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 664:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1599              		.loc 1 664 0
 1600 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1601 0010 1346     		mov	r3, r2
 1602 0012 DB00     		lsls	r3, r3, #3
 1603 0014 9B1A     		subs	r3, r3, r2
 1604 0016 1B01     		lsls	r3, r3, #4
 1605 0018 B033     		adds	r3, r3, #176
 1606 001a A74A     		ldr	r2, .L156
 1607 001c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 41


 1608 001e 3B62     		str	r3, [r7, #32]
 665:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1609              		.loc 1 665 0
 1610 0020 3B6A     		ldr	r3, [r7, #32]
 1611 0022 93F86030 		ldrb	r3, [r3, #96]
 1612 0026 FB77     		strb	r3, [r7, #31]
 666:..\src/interruptions.c ****     
 667:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 668:..\src/interruptions.c ****                                                         // 1 EMG 1
 669:..\src/interruptions.c ****                                                         // 2 EMG 2
 670:..\src/interruptions.c ****                                                         // wait for both to get down
 671:..\src/interruptions.c ****     
 672:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1613              		.loc 1 672 0
 1614 0028 A44B     		ldr	r3, .L156+4
 1615 002a 1B68     		ldr	r3, [r3]
 1616 002c A24A     		ldr	r2, .L156
 1617 002e B2F8F021 		ldrh	r2, [r2, #496]
 1618 0032 9B1A     		subs	r3, r3, r2
 1619 0034 BB61     		str	r3, [r7, #24]
 673:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1620              		.loc 1 673 0
 1621 0036 A14B     		ldr	r3, .L156+4
 1622 0038 5B68     		ldr	r3, [r3, #4]
 1623 003a 9F4A     		ldr	r2, .L156
 1624 003c B2F8F221 		ldrh	r2, [r2, #498]
 1625 0040 9B1A     		subs	r3, r3, r2
 1626 0042 7B61     		str	r3, [r7, #20]
 674:..\src/interruptions.c ****     
 675:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 676:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1627              		.loc 1 676 0
 1628 0044 3B6A     		ldr	r3, [r7, #32]
 1629 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1630 004a 013B     		subs	r3, r3, #1
 1631 004c 062B     		cmp	r3, #6
 1632 004e 00F25182 		bhi	.L148
 1633 0052 01A2     		adr	r2, .L95
 1634 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1635              		.p2align 2
 1636              	.L95:
 1637 0058 75000000 		.word	.L94+1
 1638 005c 21020000 		.word	.L96+1
 1639 0060 C9020000 		.word	.L97+1
 1640 0064 31030000 		.word	.L98+1
 1641 0068 11040000 		.word	.L99+1
 1642 006c 4D010000 		.word	.L100+1
 1643 0070 5B020000 		.word	.L101+1
 1644              		.p2align 1
 1645              	.L94:
 677:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 678:..\src/interruptions.c **** 
 679:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 680:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 681:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1646              		.loc 1 681 0
 1647 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 42


 1648 0076 9049     		ldr	r1, .L156
 1649 0078 1346     		mov	r3, r2
 1650 007a 5B00     		lsls	r3, r3, #1
 1651 007c 1344     		add	r3, r3, r2
 1652 007e 1B01     		lsls	r3, r3, #4
 1653 0080 0B44     		add	r3, r3, r1
 1654 0082 03F5D873 		add	r3, r3, #432
 1655 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1656 0088 002B     		cmp	r3, #0
 1657 008a 19D0     		beq	.L102
 682:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1658              		.loc 1 682 0
 1659 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1660 008e 8C4A     		ldr	r2, .L156+8
 1661 0090 3421     		movs	r1, #52
 1662 0092 01FB03F3 		mul	r3, r1, r3
 1663 0096 1344     		add	r3, r3, r2
 1664 0098 0833     		adds	r3, r3, #8
 1665 009a 1968     		ldr	r1, [r3]
 1666 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1667 009e 8648     		ldr	r0, .L156
 1668 00a0 1346     		mov	r3, r2
 1669 00a2 5B00     		lsls	r3, r3, #1
 1670 00a4 1344     		add	r3, r3, r2
 1671 00a6 1B01     		lsls	r3, r3, #4
 1672 00a8 0344     		add	r3, r3, r0
 1673 00aa 03F5DA73 		add	r3, r3, #436
 1674 00ae 93F90030 		ldrsb	r3, [r3]
 1675 00b2 03FB01F2 		mul	r2, r3, r1
 1676 00b6 3B6A     		ldr	r3, [r7, #32]
 1677 00b8 5B6B     		ldr	r3, [r3, #52]
 1678 00ba 1344     		add	r3, r3, r2
 1679 00bc 7B62     		str	r3, [r7, #36]
 1680 00be 18E0     		b	.L103
 1681              	.L102:
 683:..\src/interruptions.c ****             else
 684:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1682              		.loc 1 684 0
 1683 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1684 00c2 7F4A     		ldr	r2, .L156+8
 1685 00c4 3421     		movs	r1, #52
 1686 00c6 01FB03F3 		mul	r3, r1, r3
 1687 00ca 1344     		add	r3, r3, r2
 1688 00cc 0433     		adds	r3, r3, #4
 1689 00ce 1968     		ldr	r1, [r3]
 1690 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1691 00d2 7948     		ldr	r0, .L156
 1692 00d4 1346     		mov	r3, r2
 1693 00d6 5B00     		lsls	r3, r3, #1
 1694 00d8 1344     		add	r3, r3, r2
 1695 00da 1B01     		lsls	r3, r3, #4
 1696 00dc 0344     		add	r3, r3, r0
 1697 00de 03F5DA73 		add	r3, r3, #436
 1698 00e2 93F90030 		ldrsb	r3, [r3]
 1699 00e6 03FB01F2 		mul	r2, r3, r1
 1700 00ea 3B6A     		ldr	r3, [r7, #32]
 1701 00ec 5B6B     		ldr	r3, [r3, #52]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 43


 1702 00ee 1344     		add	r3, r3, r2
 1703 00f0 7B62     		str	r3, [r7, #36]
 1704              	.L103:
 685:..\src/interruptions.c ****             
 686:..\src/interruptions.c **** 
 687:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 688:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1705              		.loc 1 688 0
 1706 00f2 7B68     		ldr	r3, [r7, #4]
 1707 00f4 1B68     		ldr	r3, [r3]
 1708 00f6 7A6A     		ldr	r2, [r7, #36]
 1709 00f8 D21A     		subs	r2, r2, r3
 1710 00fa 3B6A     		ldr	r3, [r7, #32]
 1711 00fc 1B6C     		ldr	r3, [r3, #64]
 1712 00fe 9A42     		cmp	r2, r3
 1713 0100 0BDD     		ble	.L104
 1714              		.loc 1 688 0 is_stmt 0 discriminator 1
 1715 0102 3B6A     		ldr	r3, [r7, #32]
 1716 0104 1B6C     		ldr	r3, [r3, #64]
 1717 0106 002B     		cmp	r3, #0
 1718 0108 07D0     		beq	.L104
 689:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1719              		.loc 1 689 0 is_stmt 1
 1720 010a BB68     		ldr	r3, [r7, #8]
 1721 010c 1A68     		ldr	r2, [r3]
 1722 010e 3B6A     		ldr	r3, [r7, #32]
 1723 0110 1B6C     		ldr	r3, [r3, #64]
 1724 0112 1A44     		add	r2, r2, r3
 1725 0114 BB68     		ldr	r3, [r7, #8]
 1726 0116 1A60     		str	r2, [r3]
 1727 0118 17E0     		b	.L105
 1728              	.L104:
 690:..\src/interruptions.c ****             else {
 691:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1729              		.loc 1 691 0
 1730 011a 7B68     		ldr	r3, [r7, #4]
 1731 011c 1B68     		ldr	r3, [r3]
 1732 011e 7A6A     		ldr	r2, [r7, #36]
 1733 0120 D21A     		subs	r2, r2, r3
 1734 0122 3B6A     		ldr	r3, [r7, #32]
 1735 0124 DB6B     		ldr	r3, [r3, #60]
 1736 0126 9A42     		cmp	r2, r3
 1737 0128 0BDA     		bge	.L106
 1738              		.loc 1 691 0 is_stmt 0 discriminator 1
 1739 012a 3B6A     		ldr	r3, [r7, #32]
 1740 012c DB6B     		ldr	r3, [r3, #60]
 1741 012e 002B     		cmp	r3, #0
 1742 0130 07D0     		beq	.L106
 692:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1743              		.loc 1 692 0 is_stmt 1
 1744 0132 BB68     		ldr	r3, [r7, #8]
 1745 0134 1A68     		ldr	r2, [r3]
 1746 0136 3B6A     		ldr	r3, [r7, #32]
 1747 0138 DB6B     		ldr	r3, [r3, #60]
 1748 013a 1A44     		add	r2, r2, r3
 1749 013c BB68     		ldr	r3, [r7, #8]
 1750 013e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 44


 1751 0140 03E0     		b	.L105
 1752              	.L106:
 693:..\src/interruptions.c ****                 else
 694:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1753              		.loc 1 694 0
 1754 0142 BB68     		ldr	r3, [r7, #8]
 1755 0144 7A6A     		ldr	r2, [r7, #36]
 1756 0146 1A60     		str	r2, [r3]
 695:..\src/interruptions.c ****             }
 696:..\src/interruptions.c ****             break;
 1757              		.loc 1 696 0
 1758 0148 DFE1     		b	.L107
 1759              	.L105:
 1760 014a DEE1     		b	.L107
 1761              	.L100:
 697:..\src/interruptions.c ****         
 698:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 699:..\src/interruptions.c ****             
 700:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1762              		.loc 1 700 0
 1763 014c 5A4B     		ldr	r3, .L156
 1764 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1765 0152 002B     		cmp	r3, #0
 1766 0154 57D1     		bne	.L108
 701:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 702:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1767              		.loc 1 702 0
 1768 0156 7B68     		ldr	r3, [r7, #4]
 1769 0158 1A68     		ldr	r2, [r3]
 1770 015a BB68     		ldr	r3, [r7, #8]
 1771 015c 1A60     		str	r2, [r3]
 703:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1772              		.loc 1 703 0
 1773 015e 574B     		ldr	r3, .L156+4
 1774 0160 1B6A     		ldr	r3, [r3, #32]
 1775 0162 B3F52F7F 		cmp	r3, #700
 1776 0166 45DC     		bgt	.L109
 1777              	.LBB4:
 704:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1778              		.loc 1 704 0
 1779 0168 544B     		ldr	r3, .L156+4
 1780 016a 1B6A     		ldr	r3, [r3, #32]
 1781 016c 524A     		ldr	r2, .L156
 1782 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1783 0172 9B1A     		subs	r3, r3, r2
 1784 0174 3B61     		str	r3, [r7, #16]
 705:..\src/interruptions.c **** 
 706:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1785              		.loc 1 706 0
 1786 0176 514B     		ldr	r3, .L156+4
 1787 0178 1B6A     		ldr	r3, [r3, #32]
 1788 017a 4F4A     		ldr	r2, .L156
 1789 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1790 0180 9342     		cmp	r3, r2
 1791 0182 13DD     		ble	.L110
 707:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1792              		.loc 1 707 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 45


 1793 0184 BB68     		ldr	r3, [r7, #8]
 1794 0186 1A68     		ldr	r2, [r3]
 1795 0188 4B4B     		ldr	r3, .L156
 1796 018a B3F8B032 		ldrh	r3, [r3, #688]
 1797 018e 1946     		mov	r1, r3
 1798 0190 3B69     		ldr	r3, [r7, #16]
 1799 0192 03FB01F1 		mul	r1, r3, r1
 1800 0196 484B     		ldr	r3, .L156
 1801 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1802 019c C3F58063 		rsb	r3, r3, #1024
 1803 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1804 01a4 1A44     		add	r2, r2, r3
 1805 01a6 BB68     		ldr	r3, [r7, #8]
 1806 01a8 1A60     		str	r2, [r3]
 1807              	.LBE4:
 708:..\src/interruptions.c ****                     }
 709:..\src/interruptions.c ****                     else {
 710:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 711:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 712:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 713:..\src/interruptions.c ****                         }
 714:..\src/interruptions.c ****                     }
 715:..\src/interruptions.c ****                 }
 716:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 717:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 718:..\src/interruptions.c ****                 }
 719:..\src/interruptions.c ****             }
 720:..\src/interruptions.c ****             else {
 721:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 722:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 723:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 724:..\src/interruptions.c ****                 }
 725:..\src/interruptions.c ****             }
 726:..\src/interruptions.c ****             break;
 1808              		.loc 1 726 0
 1809 01aa A5E1     		b	.L149
 1810              	.L110:
 1811              	.LBB5:
 710:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1812              		.loc 1 710 0
 1813 01ac 434B     		ldr	r3, .L156+4
 1814 01ae 1B6A     		ldr	r3, [r3, #32]
 1815 01b0 414A     		ldr	r2, .L156
 1816 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1817 01b6 1344     		add	r3, r3, r2
 1818 01b8 3B61     		str	r3, [r7, #16]
 711:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1819              		.loc 1 711 0
 1820 01ba 404B     		ldr	r3, .L156+4
 1821 01bc 1A6A     		ldr	r2, [r3, #32]
 1822 01be 3E4B     		ldr	r3, .L156
 1823 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1824 01c4 5B42     		negs	r3, r3
 1825 01c6 9A42     		cmp	r2, r3
 1826 01c8 80F29681 		bge	.L149
 712:..\src/interruptions.c ****                         }
 1827              		.loc 1 712 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 46


 1828 01cc BB68     		ldr	r3, [r7, #8]
 1829 01ce 1A68     		ldr	r2, [r3]
 1830 01d0 394B     		ldr	r3, .L156
 1831 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1832 01d6 1946     		mov	r1, r3
 1833 01d8 3B69     		ldr	r3, [r7, #16]
 1834 01da 03FB01F1 		mul	r1, r3, r1
 1835 01de 364B     		ldr	r3, .L156
 1836 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1837 01e4 C3F58063 		rsb	r3, r3, #1024
 1838 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1839 01ec 1A44     		add	r2, r2, r3
 1840 01ee BB68     		ldr	r3, [r7, #8]
 1841 01f0 1A60     		str	r2, [r3]
 1842              	.LBE5:
 1843              		.loc 1 726 0
 1844 01f2 81E1     		b	.L149
 1845              	.L109:
 717:..\src/interruptions.c ****                 }
 1846              		.loc 1 717 0
 1847 01f4 BB68     		ldr	r3, [r7, #8]
 1848 01f6 1B68     		ldr	r3, [r3]
 1849 01f8 324A     		ldr	r2, .L156+12
 1850 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1851 01fe 9A1A     		subs	r2, r3, r2
 1852 0200 BB68     		ldr	r3, [r7, #8]
 1853 0202 1A60     		str	r2, [r3]
 1854              		.loc 1 726 0
 1855 0204 78E1     		b	.L149
 1856              	.L108:
 722:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1857              		.loc 1 722 0
 1858 0206 2C4B     		ldr	r3, .L156
 1859 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1860 020c 042B     		cmp	r3, #4
 1861 020e 40F07381 		bne	.L149
 723:..\src/interruptions.c ****                 }
 1862              		.loc 1 723 0
 1863 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1864 0214 7A68     		ldr	r2, [r7, #4]
 1865 0216 B968     		ldr	r1, [r7, #8]
 1866 0218 1846     		mov	r0, r3
 1867 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1868              		.loc 1 726 0
 1869 021e 6BE1     		b	.L149
 1870              	.L96:
 727:..\src/interruptions.c ****             
 728:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 729:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1871              		.loc 1 729 0
 1872 0220 BB69     		ldr	r3, [r7, #24]
 1873 0222 002B     		cmp	r3, #0
 1874 0224 15DD     		ble	.L114
 730:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1875              		.loc 1 730 0
 1876 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1877 0228 2649     		ldr	r1, .L156+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 47


 1878 022a 1346     		mov	r3, r2
 1879 022c DB00     		lsls	r3, r3, #3
 1880 022e 9B1A     		subs	r3, r3, r2
 1881 0230 1B01     		lsls	r3, r3, #4
 1882 0232 0B44     		add	r3, r3, r1
 1883 0234 E833     		adds	r3, r3, #232
 1884 0236 1B68     		ldr	r3, [r3]
 1885 0238 BA69     		ldr	r2, [r7, #24]
 1886 023a 02FB03F2 		mul	r2, r2, r3
 1887 023e 1E4B     		ldr	r3, .L156
 1888 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1889 0244 C3F58063 		rsb	r3, r3, #1024
 1890 0248 92FBF3F2 		sdiv	r2, r2, r3
 1891 024c BB68     		ldr	r3, [r7, #8]
 1892 024e 1A60     		str	r2, [r3]
 731:..\src/interruptions.c ****             else
 732:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 733:..\src/interruptions.c ****             break;
 1893              		.loc 1 733 0
 1894 0250 5BE1     		b	.L107
 1895              	.L114:
 732:..\src/interruptions.c ****             break;
 1896              		.loc 1 732 0
 1897 0252 BB68     		ldr	r3, [r7, #8]
 1898 0254 0022     		movs	r2, #0
 1899 0256 1A60     		str	r2, [r3]
 1900              		.loc 1 733 0
 1901 0258 57E1     		b	.L107
 1902              	.L101:
 734:..\src/interruptions.c ****         
 735:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 736:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1903              		.loc 1 736 0
 1904 025a BB69     		ldr	r3, [r7, #24]
 1905 025c 002B     		cmp	r3, #0
 1906 025e 1FDD     		ble	.L116
 737:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1907              		.loc 1 737 0
 1908 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1909 0262 1849     		ldr	r1, .L156+12
 1910 0264 1346     		mov	r3, r2
 1911 0266 DB00     		lsls	r3, r3, #3
 1912 0268 9B1A     		subs	r3, r3, r2
 1913 026a 1B01     		lsls	r3, r3, #4
 1914 026c 0B44     		add	r3, r3, r1
 1915 026e E833     		adds	r3, r3, #232
 1916 0270 1968     		ldr	r1, [r3]
 1917 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1918 0274 1348     		ldr	r0, .L156+12
 1919 0276 1346     		mov	r3, r2
 1920 0278 DB00     		lsls	r3, r3, #3
 1921 027a 9B1A     		subs	r3, r3, r2
 1922 027c 1B01     		lsls	r3, r3, #4
 1923 027e 0344     		add	r3, r3, r0
 1924 0280 E833     		adds	r3, r3, #232
 1925 0282 1B68     		ldr	r3, [r3]
 1926 0284 BA69     		ldr	r2, [r7, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 48


 1927 0286 02FB03F2 		mul	r2, r2, r3
 1928 028a 0B4B     		ldr	r3, .L156
 1929 028c B3F8F031 		ldrh	r3, [r3, #496]
 1930 0290 C3F58063 		rsb	r3, r3, #1024
 1931 0294 92FBF3F3 		sdiv	r3, r2, r3
 1932 0298 CA1A     		subs	r2, r1, r3
 1933 029a BB68     		ldr	r3, [r7, #8]
 1934 029c 1A60     		str	r2, [r3]
 738:..\src/interruptions.c ****             else
 739:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 740:..\src/interruptions.c ****             break;
 1935              		.loc 1 740 0
 1936 029e 34E1     		b	.L107
 1937              	.L116:
 739:..\src/interruptions.c ****             break;
 1938              		.loc 1 739 0
 1939 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1940 02a2 0849     		ldr	r1, .L156+12
 1941 02a4 1346     		mov	r3, r2
 1942 02a6 DB00     		lsls	r3, r3, #3
 1943 02a8 9B1A     		subs	r3, r3, r2
 1944 02aa 1B01     		lsls	r3, r3, #4
 1945 02ac 0B44     		add	r3, r3, r1
 1946 02ae E833     		adds	r3, r3, #232
 1947 02b0 1A68     		ldr	r2, [r3]
 1948 02b2 BB68     		ldr	r3, [r7, #8]
 1949 02b4 1A60     		str	r2, [r3]
 1950              		.loc 1 740 0
 1951 02b6 28E1     		b	.L107
 1952              	.L157:
 1953              		.align	2
 1954              	.L156:
 1955 02b8 00000000 		.word	c_mem
 1956 02bc 00000000 		.word	g_adc_meas
 1957 02c0 00000000 		.word	g_meas
 1958 02c4 00000000 		.word	g_mem
 1959              	.L97:
 741:..\src/interruptions.c **** 
 742:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 743:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1960              		.loc 1 743 0
 1961 02c8 7B68     		ldr	r3, [r7, #4]
 1962 02ca 1A68     		ldr	r2, [r3]
 1963 02cc BB68     		ldr	r3, [r7, #8]
 1964 02ce 1A60     		str	r2, [r3]
 744:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1965              		.loc 1 744 0
 1966 02d0 BB69     		ldr	r3, [r7, #24]
 1967 02d2 002B     		cmp	r3, #0
 1968 02d4 13DD     		ble	.L118
 745:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1969              		.loc 1 745 0
 1970 02d6 7B68     		ldr	r3, [r7, #4]
 1971 02d8 1A68     		ldr	r2, [r3]
 1972 02da 884B     		ldr	r3, .L158
 1973 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1974 02e0 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 49


 1975 02e2 BB69     		ldr	r3, [r7, #24]
 1976 02e4 03FB01F3 		mul	r3, r3, r1
 1977 02e8 5900     		lsls	r1, r3, #1
 1978 02ea 854B     		ldr	r3, .L158+4
 1979 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1980 02f0 C3F58063 		rsb	r3, r3, #1024
 1981 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1982 02f8 1A44     		add	r2, r2, r3
 1983 02fa BB68     		ldr	r3, [r7, #8]
 1984 02fc 1A60     		str	r2, [r3]
 1985              	.L118:
 746:..\src/interruptions.c ****             }
 747:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1986              		.loc 1 747 0
 1987 02fe 7B69     		ldr	r3, [r7, #20]
 1988 0300 002B     		cmp	r3, #0
 1989 0302 40F30181 		ble	.L150
 748:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1990              		.loc 1 748 0
 1991 0306 7B68     		ldr	r3, [r7, #4]
 1992 0308 1A68     		ldr	r2, [r3]
 1993 030a 7C4B     		ldr	r3, .L158
 1994 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1995 0310 1946     		mov	r1, r3
 1996 0312 7B69     		ldr	r3, [r7, #20]
 1997 0314 03FB01F3 		mul	r3, r3, r1
 1998 0318 5900     		lsls	r1, r3, #1
 1999 031a 794B     		ldr	r3, .L158+4
 2000 031c B3F8F231 		ldrh	r3, [r3, #498]
 2001 0320 C3F58063 		rsb	r3, r3, #1024
 2002 0324 91FBF3F3 		sdiv	r3, r1, r3
 2003 0328 D21A     		subs	r2, r2, r3
 2004 032a BB68     		ldr	r3, [r7, #8]
 2005 032c 1A60     		str	r2, [r3]
 749:..\src/interruptions.c ****             }
 750:..\src/interruptions.c ****             break;
 2006              		.loc 1 750 0
 2007 032e EBE0     		b	.L150
 2008              	.L98:
 751:..\src/interruptions.c **** 
 752:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 753:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2009              		.loc 1 753 0
 2010 0330 7B68     		ldr	r3, [r7, #4]
 2011 0332 1A68     		ldr	r2, [r3]
 2012 0334 BB68     		ldr	r3, [r7, #8]
 2013 0336 1A60     		str	r2, [r3]
 754:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 2014              		.loc 1 754 0
 2015 0338 714B     		ldr	r3, .L158+4
 2016 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 2017 033e 042B     		cmp	r3, #4
 2018 0340 5BD0     		beq	.L120
 755:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 2019              		.loc 1 755 0
 2020 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2021 0344 6F4A     		ldr	r2, .L158+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 50


 2022 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2023 0348 012B     		cmp	r3, #1
 2024 034a 1CD0     		beq	.L122
 2025 034c 022B     		cmp	r3, #2
 2026 034e 37D0     		beq	.L123
 2027 0350 002B     		cmp	r3, #0
 2028 0352 00D0     		beq	.L124
 756:..\src/interruptions.c ****                     case 0:
 757:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 758:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 759:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 760:..\src/interruptions.c ****                             break;
 761:..\src/interruptions.c ****                         }
 762:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 763:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 764:..\src/interruptions.c ****                             break;
 765:..\src/interruptions.c ****                         }
 766:..\src/interruptions.c ****                         break;
 767:..\src/interruptions.c **** 
 768:..\src/interruptions.c ****                     case 1:
 769:..\src/interruptions.c ****                         // EMG 1 is first
 770:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 771:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 772:..\src/interruptions.c ****                             break;
 773:..\src/interruptions.c ****                         }
 774:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 775:..\src/interruptions.c ****                         break;
 776:..\src/interruptions.c **** 
 777:..\src/interruptions.c ****                     case 2:
 778:..\src/interruptions.c ****                         // EMG 2 is first
 779:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 780:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 781:..\src/interruptions.c ****                             break;
 782:..\src/interruptions.c ****                         }
 783:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 784:..\src/interruptions.c ****                         break;
 785:..\src/interruptions.c **** 
 786:..\src/interruptions.c ****                     default:
 787:..\src/interruptions.c ****                         break;
 2029              		.loc 1 787 0
 2030 0354 5BE0     		b	.L130
 2031              	.L124:
 758:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 2032              		.loc 1 758 0
 2033 0356 BB69     		ldr	r3, [r7, #24]
 2034 0358 002B     		cmp	r3, #0
 2035 035a 08DD     		ble	.L125
 758:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 2036              		.loc 1 758 0 is_stmt 0 discriminator 1
 2037 035c BA69     		ldr	r2, [r7, #24]
 2038 035e 7B69     		ldr	r3, [r7, #20]
 2039 0360 9A42     		cmp	r2, r3
 2040 0362 04DD     		ble	.L125
 759:..\src/interruptions.c ****                             break;
 2041              		.loc 1 759 0 is_stmt 1
 2042 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2043 0366 674A     		ldr	r2, .L158+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 51


 2044 0368 0121     		movs	r1, #1
 2045 036a D154     		strb	r1, [r2, r3]
 760:..\src/interruptions.c ****                         }
 2046              		.loc 1 760 0
 2047 036c 4FE0     		b	.L130
 2048              	.L125:
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2049              		.loc 1 762 0
 2050 036e 7B69     		ldr	r3, [r7, #20]
 2051 0370 002B     		cmp	r3, #0
 2052 0372 4BDD     		ble	.L151
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2053              		.loc 1 762 0 is_stmt 0 discriminator 1
 2054 0374 7A69     		ldr	r2, [r7, #20]
 2055 0376 BB69     		ldr	r3, [r7, #24]
 2056 0378 9A42     		cmp	r2, r3
 2057 037a 47DD     		ble	.L151
 763:..\src/interruptions.c ****                             break;
 2058              		.loc 1 763 0 is_stmt 1
 2059 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2060 037e 614A     		ldr	r2, .L158+8
 2061 0380 0221     		movs	r1, #2
 2062 0382 D154     		strb	r1, [r2, r3]
 764:..\src/interruptions.c ****                         }
 2063              		.loc 1 764 0
 2064 0384 43E0     		b	.L130
 2065              	.L122:
 770:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2066              		.loc 1 770 0
 2067 0386 BB69     		ldr	r3, [r7, #24]
 2068 0388 002B     		cmp	r3, #0
 2069 038a 04DA     		bge	.L128
 771:..\src/interruptions.c ****                             break;
 2070              		.loc 1 771 0
 2071 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2072 038e 5D4A     		ldr	r2, .L158+8
 2073 0390 0021     		movs	r1, #0
 2074 0392 D154     		strb	r1, [r2, r3]
 772:..\src/interruptions.c ****                         }
 2075              		.loc 1 772 0
 2076 0394 3BE0     		b	.L130
 2077              	.L128:
 774:..\src/interruptions.c ****                         break;
 2078              		.loc 1 774 0
 2079 0396 7B68     		ldr	r3, [r7, #4]
 2080 0398 1A68     		ldr	r2, [r3]
 2081 039a 584B     		ldr	r3, .L158
 2082 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2083 03a0 1946     		mov	r1, r3
 2084 03a2 BB69     		ldr	r3, [r7, #24]
 2085 03a4 03FB01F3 		mul	r3, r3, r1
 2086 03a8 9900     		lsls	r1, r3, #2
 2087 03aa 554B     		ldr	r3, .L158+4
 2088 03ac B3F8F031 		ldrh	r3, [r3, #496]
 2089 03b0 C3F58063 		rsb	r3, r3, #1024
 2090 03b4 91FBF3F3 		sdiv	r3, r1, r3
 2091 03b8 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 52


 2092 03ba BB68     		ldr	r3, [r7, #8]
 2093 03bc 1A60     		str	r2, [r3]
 775:..\src/interruptions.c **** 
 2094              		.loc 1 775 0
 2095 03be 26E0     		b	.L130
 2096              	.L123:
 779:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2097              		.loc 1 779 0
 2098 03c0 7B69     		ldr	r3, [r7, #20]
 2099 03c2 002B     		cmp	r3, #0
 2100 03c4 04DA     		bge	.L129
 780:..\src/interruptions.c ****                             break;
 2101              		.loc 1 780 0
 2102 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2103 03c8 4E4A     		ldr	r2, .L158+8
 2104 03ca 0021     		movs	r1, #0
 2105 03cc D154     		strb	r1, [r2, r3]
 781:..\src/interruptions.c ****                         }
 2106              		.loc 1 781 0
 2107 03ce 1EE0     		b	.L130
 2108              	.L129:
 783:..\src/interruptions.c ****                         break;
 2109              		.loc 1 783 0
 2110 03d0 7B68     		ldr	r3, [r7, #4]
 2111 03d2 1A68     		ldr	r2, [r3]
 2112 03d4 494B     		ldr	r3, .L158
 2113 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2114 03da 1946     		mov	r1, r3
 2115 03dc 7B69     		ldr	r3, [r7, #20]
 2116 03de 03FB01F3 		mul	r3, r3, r1
 2117 03e2 9900     		lsls	r1, r3, #2
 2118 03e4 464B     		ldr	r3, .L158+4
 2119 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2120 03ea C3F58063 		rsb	r3, r3, #1024
 2121 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2122 03f2 D21A     		subs	r2, r2, r3
 2123 03f4 BB68     		ldr	r3, [r7, #8]
 2124 03f6 1A60     		str	r2, [r3]
 784:..\src/interruptions.c **** 
 2125              		.loc 1 784 0
 2126 03f8 09E0     		b	.L130
 2127              	.L120:
 788:..\src/interruptions.c ****                 }
 789:..\src/interruptions.c ****             }
 790:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 791:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 792:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2128              		.loc 1 792 0
 2129 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2130 03fc 7B69     		ldr	r3, [r7, #20]
 2131 03fe 0093     		str	r3, [sp]
 2132 0400 BB69     		ldr	r3, [r7, #24]
 2133 0402 7A68     		ldr	r2, [r7, #4]
 2134 0404 B968     		ldr	r1, [r7, #8]
 2135 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 793:..\src/interruptions.c ****             }
 794:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 53


 2136              		.loc 1 794 0
 2137 040a 7EE0     		b	.L107
 2138              	.L151:
 766:..\src/interruptions.c **** 
 2139              		.loc 1 766 0
 2140 040c 00BF     		nop
 2141              	.L130:
 2142              		.loc 1 794 0 discriminator 5
 2143 040e 7CE0     		b	.L107
 2144              	.L99:
 795:..\src/interruptions.c **** 
 796:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 797:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2145              		.loc 1 797 0
 2146 0410 7B68     		ldr	r3, [r7, #4]
 2147 0412 1A68     		ldr	r2, [r3]
 2148 0414 BB68     		ldr	r3, [r7, #8]
 2149 0416 1A60     		str	r2, [r3]
 798:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2150              		.loc 1 798 0
 2151 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2152 041a 3A4A     		ldr	r2, .L158+8
 2153 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2154 041e 012B     		cmp	r3, #1
 2155 0420 1CD0     		beq	.L132
 2156 0422 022B     		cmp	r3, #2
 2157 0424 3DD0     		beq	.L133
 2158 0426 002B     		cmp	r3, #0
 2159 0428 00D0     		beq	.L134
 799:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 800:..\src/interruptions.c ****                 case 0:
 801:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 802:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 803:..\src/interruptions.c ****                         break;
 804:..\src/interruptions.c ****                     }
 805:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 806:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 807:..\src/interruptions.c ****                         break;
 808:..\src/interruptions.c ****                     }
 809:..\src/interruptions.c ****                     break;
 810:..\src/interruptions.c **** 
 811:..\src/interruptions.c ****                 // EMG 1 is first
 812:..\src/interruptions.c ****                 case 1:
 813:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 814:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 815:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 816:..\src/interruptions.c ****                         break;
 817:..\src/interruptions.c ****                     }
 818:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 819:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 820:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 821:..\src/interruptions.c ****                     
 822:..\src/interruptions.c ****                     break;
 823:..\src/interruptions.c **** 
 824:..\src/interruptions.c ****                 // EMG 2 is first
 825:..\src/interruptions.c ****                 case 2:
 826:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 54


 827:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 828:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 829:..\src/interruptions.c ****                         break;
 830:..\src/interruptions.c ****                     }
 831:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 832:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 833:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 834:..\src/interruptions.c ****                     }
 835:..\src/interruptions.c ****                     break;
 836:..\src/interruptions.c **** 
 837:..\src/interruptions.c ****                 default:
 838:..\src/interruptions.c ****                     break;
 2160              		.loc 1 838 0
 2161 042a 62E0     		b	.L136
 2162              	.L134:
 801:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2163              		.loc 1 801 0
 2164 042c BB69     		ldr	r3, [r7, #24]
 2165 042e 002B     		cmp	r3, #0
 2166 0430 08DD     		ble	.L135
 801:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2167              		.loc 1 801 0 is_stmt 0 discriminator 1
 2168 0432 BA69     		ldr	r2, [r7, #24]
 2169 0434 7B69     		ldr	r3, [r7, #20]
 2170 0436 9A42     		cmp	r2, r3
 2171 0438 04DD     		ble	.L135
 802:..\src/interruptions.c ****                         break;
 2172              		.loc 1 802 0 is_stmt 1
 2173 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2174 043c 314A     		ldr	r2, .L158+8
 2175 043e 0121     		movs	r1, #1
 2176 0440 D154     		strb	r1, [r2, r3]
 803:..\src/interruptions.c ****                     }
 2177              		.loc 1 803 0
 2178 0442 56E0     		b	.L136
 2179              	.L135:
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2180              		.loc 1 805 0
 2181 0444 7B69     		ldr	r3, [r7, #20]
 2182 0446 002B     		cmp	r3, #0
 2183 0448 4EDD     		ble	.L152
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2184              		.loc 1 805 0 is_stmt 0 discriminator 1
 2185 044a 7A69     		ldr	r2, [r7, #20]
 2186 044c BB69     		ldr	r3, [r7, #24]
 2187 044e 9A42     		cmp	r2, r3
 2188 0450 4ADD     		ble	.L152
 806:..\src/interruptions.c ****                         break;
 2189              		.loc 1 806 0 is_stmt 1
 2190 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2191 0454 2B4A     		ldr	r2, .L158+8
 2192 0456 0221     		movs	r1, #2
 2193 0458 D154     		strb	r1, [r2, r3]
 807:..\src/interruptions.c ****                     }
 2194              		.loc 1 807 0
 2195 045a 4AE0     		b	.L136
 2196              	.L132:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 55


 814:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2197              		.loc 1 814 0
 2198 045c BB69     		ldr	r3, [r7, #24]
 2199 045e 002B     		cmp	r3, #0
 2200 0460 07DA     		bge	.L138
 814:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2201              		.loc 1 814 0 is_stmt 0 discriminator 1
 2202 0462 7B69     		ldr	r3, [r7, #20]
 2203 0464 002B     		cmp	r3, #0
 2204 0466 04DA     		bge	.L138
 815:..\src/interruptions.c ****                         break;
 2205              		.loc 1 815 0 is_stmt 1
 2206 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2207 046a 264A     		ldr	r2, .L158+8
 2208 046c 0021     		movs	r1, #0
 2209 046e D154     		strb	r1, [r2, r3]
 816:..\src/interruptions.c ****                     }
 2210              		.loc 1 816 0
 2211 0470 3FE0     		b	.L136
 2212              	.L138:
 819:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2213              		.loc 1 819 0
 2214 0472 BB69     		ldr	r3, [r7, #24]
 2215 0474 002B     		cmp	r3, #0
 2216 0476 39DD     		ble	.L153
 820:..\src/interruptions.c ****                     
 2217              		.loc 1 820 0
 2218 0478 7B68     		ldr	r3, [r7, #4]
 2219 047a 1A68     		ldr	r2, [r3]
 2220 047c 1F4B     		ldr	r3, .L158
 2221 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2222 0482 1946     		mov	r1, r3
 2223 0484 BB69     		ldr	r3, [r7, #24]
 2224 0486 03FB01F3 		mul	r3, r3, r1
 2225 048a 9900     		lsls	r1, r3, #2
 2226 048c 1C4B     		ldr	r3, .L158+4
 2227 048e B3F8F031 		ldrh	r3, [r3, #496]
 2228 0492 C3F58063 		rsb	r3, r3, #1024
 2229 0496 91FBF3F3 		sdiv	r3, r1, r3
 2230 049a 1A44     		add	r2, r2, r3
 2231 049c BB68     		ldr	r3, [r7, #8]
 2232 049e 1A60     		str	r2, [r3]
 822:..\src/interruptions.c **** 
 2233              		.loc 1 822 0
 2234 04a0 24E0     		b	.L153
 2235              	.L133:
 827:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2236              		.loc 1 827 0
 2237 04a2 BB69     		ldr	r3, [r7, #24]
 2238 04a4 002B     		cmp	r3, #0
 2239 04a6 07DA     		bge	.L140
 827:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2240              		.loc 1 827 0 is_stmt 0 discriminator 1
 2241 04a8 7B69     		ldr	r3, [r7, #20]
 2242 04aa 002B     		cmp	r3, #0
 2243 04ac 04DA     		bge	.L140
 828:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 56


 2244              		.loc 1 828 0 is_stmt 1
 2245 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2246 04b0 144A     		ldr	r2, .L158+8
 2247 04b2 0021     		movs	r1, #0
 2248 04b4 D154     		strb	r1, [r2, r3]
 829:..\src/interruptions.c ****                     }
 2249              		.loc 1 829 0
 2250 04b6 1CE0     		b	.L136
 2251              	.L140:
 832:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2252              		.loc 1 832 0
 2253 04b8 7B69     		ldr	r3, [r7, #20]
 2254 04ba 002B     		cmp	r3, #0
 2255 04bc 18DD     		ble	.L154
 833:..\src/interruptions.c ****                     }
 2256              		.loc 1 833 0
 2257 04be 7B68     		ldr	r3, [r7, #4]
 2258 04c0 1A68     		ldr	r2, [r3]
 2259 04c2 0F4B     		ldr	r3, .L158+4
 2260 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2261 04c8 1946     		mov	r1, r3
 2262 04ca 7B69     		ldr	r3, [r7, #20]
 2263 04cc 03FB01F3 		mul	r3, r3, r1
 2264 04d0 9900     		lsls	r1, r3, #2
 2265 04d2 0B4B     		ldr	r3, .L158+4
 2266 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2267 04d8 C3F58063 		rsb	r3, r3, #1024
 2268 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2269 04e0 D21A     		subs	r2, r2, r3
 2270 04e2 BB68     		ldr	r3, [r7, #8]
 2271 04e4 1A60     		str	r2, [r3]
 835:..\src/interruptions.c **** 
 2272              		.loc 1 835 0
 2273 04e6 03E0     		b	.L154
 2274              	.L152:
 809:..\src/interruptions.c **** 
 2275              		.loc 1 809 0
 2276 04e8 00BF     		nop
 2277 04ea 0EE0     		b	.L107
 2278              	.L153:
 822:..\src/interruptions.c **** 
 2279              		.loc 1 822 0
 2280 04ec 00BF     		nop
 2281 04ee 0CE0     		b	.L107
 2282              	.L154:
 835:..\src/interruptions.c **** 
 2283              		.loc 1 835 0
 2284 04f0 00BF     		nop
 2285              	.L136:
 839:..\src/interruptions.c ****             }
 840:..\src/interruptions.c ****             break;
 2286              		.loc 1 840 0 discriminator 6
 2287 04f2 0AE0     		b	.L107
 2288              	.L148:
 841:..\src/interruptions.c **** 
 842:..\src/interruptions.c ****         default:
 843:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 57


 2289              		.loc 1 843 0
 2290 04f4 00BF     		nop
 2291 04f6 08E0     		b	.L107
 2292              	.L149:
 726:..\src/interruptions.c ****             
 2293              		.loc 1 726 0
 2294 04f8 00BF     		nop
 2295 04fa 06E0     		b	.L107
 2296              	.L159:
 2297              		.align	2
 2298              	.L158:
 2299 04fc 00000000 		.word	g_mem
 2300 0500 00000000 		.word	c_mem
 2301 0504 8C000000 		.word	current_emg.10509
 2302              	.L150:
 750:..\src/interruptions.c **** 
 2303              		.loc 1 750 0
 2304 0508 00BF     		nop
 2305              	.L107:
 844:..\src/interruptions.c ****     }
 845:..\src/interruptions.c **** 
 846:..\src/interruptions.c ****     // Position limit saturation
 847:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2306              		.loc 1 847 0
 2307 050a 3B6A     		ldr	r3, [r7, #32]
 2308 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2309 0510 002B     		cmp	r3, #0
 2310 0512 13D0     		beq	.L142
 848:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2311              		.loc 1 848 0
 2312 0514 BB68     		ldr	r3, [r7, #8]
 2313 0516 1A68     		ldr	r2, [r3]
 2314 0518 3B6A     		ldr	r3, [r7, #32]
 2315 051a 5B6B     		ldr	r3, [r3, #52]
 2316 051c 9A42     		cmp	r2, r3
 2317 051e 03DA     		bge	.L143
 849:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2318              		.loc 1 849 0
 2319 0520 3B6A     		ldr	r3, [r7, #32]
 2320 0522 5A6B     		ldr	r2, [r3, #52]
 2321 0524 BB68     		ldr	r3, [r7, #8]
 2322 0526 1A60     		str	r2, [r3]
 2323              	.L143:
 850:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2324              		.loc 1 850 0
 2325 0528 BB68     		ldr	r3, [r7, #8]
 2326 052a 1A68     		ldr	r2, [r3]
 2327 052c 3B6A     		ldr	r3, [r7, #32]
 2328 052e 9B6B     		ldr	r3, [r3, #56]
 2329 0530 9A42     		cmp	r2, r3
 2330 0532 03DD     		ble	.L142
 851:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2331              		.loc 1 851 0
 2332 0534 3B6A     		ldr	r3, [r7, #32]
 2333 0536 9A6B     		ldr	r2, [r3, #56]
 2334 0538 BB68     		ldr	r3, [r7, #8]
 2335 053a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 58


 2336              	.L142:
 852:..\src/interruptions.c ****     }
 853:..\src/interruptions.c ****     
 854:..\src/interruptions.c ****     // SAFETY
 855:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2337              		.loc 1 855 0
 2338 053c 1D4B     		ldr	r3, .L160
 2339 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2340 0540 012B     		cmp	r3, #1
 2341 0542 02D1     		bne	.L144
 856:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 857:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2342              		.loc 1 857 0
 2343 0544 BB68     		ldr	r3, [r7, #8]
 2344 0546 0022     		movs	r2, #0
 2345 0548 1A60     		str	r2, [r3]
 2346              	.L144:
 858:..\src/interruptions.c ****     }      
 859:..\src/interruptions.c ****     
 860:..\src/interruptions.c ****        
 861:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2347              		.loc 1 861 0
 2348 054a 1B4B     		ldr	r3, .L160+4
 2349 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2350 0550 012B     		cmp	r3, #1
 2351 0552 2AD1     		bne	.L155
 862:..\src/interruptions.c ****         if (rest_enabled == 1){
 2352              		.loc 1 862 0
 2353 0554 194B     		ldr	r3, .L160+8
 2354 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2355 0558 012B     		cmp	r3, #1
 2356 055a 03D1     		bne	.L146
 863:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 864:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2357              		.loc 1 864 0
 2358 055c 184B     		ldr	r3, .L160+12
 2359 055e 1A68     		ldr	r2, [r3]
 2360 0560 BB68     		ldr	r3, [r7, #8]
 2361 0562 1A60     		str	r2, [r3]
 2362              	.L146:
 865:..\src/interruptions.c ****         }
 866:..\src/interruptions.c ****         
 867:..\src/interruptions.c ****         if (forced_open == 1) {
 2363              		.loc 1 867 0
 2364 0564 174B     		ldr	r3, .L160+16
 2365 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2366 0568 012B     		cmp	r3, #1
 2367 056a 1ED1     		bne	.L155
 868:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 869:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2368              		.loc 1 869 0
 2369 056c 7B69     		ldr	r3, [r7, #20]
 2370 056e 002B     		cmp	r3, #0
 2371 0570 13DD     		ble	.L147
 870:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2372              		.loc 1 870 0
 2373 0572 154B     		ldr	r3, .L160+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 59


 2374 0574 D3F8A022 		ldr	r2, [r3, #672]
 2375 0578 134B     		ldr	r3, .L160+20
 2376 057a D3F8A032 		ldr	r3, [r3, #672]
 2377 057e 7969     		ldr	r1, [r7, #20]
 2378 0580 01FB03F1 		mul	r1, r1, r3
 2379 0584 0C4B     		ldr	r3, .L160+4
 2380 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2381 058a C3F58063 		rsb	r3, r3, #1024
 2382 058e 91FBF3F3 		sdiv	r3, r1, r3
 2383 0592 D21A     		subs	r2, r2, r3
 2384 0594 BB68     		ldr	r3, [r7, #8]
 2385 0596 1A60     		str	r2, [r3]
 871:..\src/interruptions.c ****             else {
 872:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 873:..\src/interruptions.c ****                 forced_open = 0;
 874:..\src/interruptions.c ****             }
 875:..\src/interruptions.c ****         }
 876:..\src/interruptions.c ****     }
 877:..\src/interruptions.c **** }
 2386              		.loc 1 877 0
 2387 0598 07E0     		b	.L155
 2388              	.L147:
 872:..\src/interruptions.c ****                 forced_open = 0;
 2389              		.loc 1 872 0
 2390 059a 0B4B     		ldr	r3, .L160+20
 2391 059c D3F8A022 		ldr	r2, [r3, #672]
 2392 05a0 BB68     		ldr	r3, [r7, #8]
 2393 05a2 1A60     		str	r2, [r3]
 873:..\src/interruptions.c ****             }
 2394              		.loc 1 873 0
 2395 05a4 074B     		ldr	r3, .L160+16
 2396 05a6 0022     		movs	r2, #0
 2397 05a8 1A70     		strb	r2, [r3]
 2398              	.L155:
 2399              		.loc 1 877 0
 2400 05aa 00BF     		nop
 2401 05ac 2837     		adds	r7, r7, #40
 2402              		.cfi_def_cfa_offset 8
 2403 05ae BD46     		mov	sp, r7
 2404              		.cfi_def_cfa_register 13
 2405              		@ sp needed
 2406 05b0 80BD     		pop	{r7, pc}
 2407              	.L161:
 2408 05b2 00BF     		.align	2
 2409              	.L160:
 2410 05b4 00000000 		.word	battery_low_SoC
 2411 05b8 00000000 		.word	c_mem
 2412 05bc 00000000 		.word	rest_enabled
 2413 05c0 00000000 		.word	rest_pos_curr_ref
 2414 05c4 00000000 		.word	forced_open
 2415 05c8 00000000 		.word	g_mem
 2416              		.cfi_endproc
 2417              	.LFE68:
 2418              		.size	compute_reference, .-compute_reference
 2419              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2420              		.align	2
 2421              		.global	compute_SoftHand_2_motors_joystick_reference
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 60


 2422              		.thumb
 2423              		.thumb_func
 2424              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2425              	compute_SoftHand_2_motors_joystick_reference:
 2426              	.LFB69:
 878:..\src/interruptions.c **** 
 879:..\src/interruptions.c **** 
 880:..\src/interruptions.c **** //==============================================================================
 881:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 882:..\src/interruptions.c **** //==============================================================================
 883:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2427              		.loc 1 883 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 32
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431              		@ link register save eliminated.
 2432 0000 80B4     		push	{r7}
 2433              		.cfi_def_cfa_offset 4
 2434              		.cfi_offset 7, -4
 2435 0002 89B0     		sub	sp, sp, #36
 2436              		.cfi_def_cfa_offset 40
 2437 0004 00AF     		add	r7, sp, #0
 2438              		.cfi_def_cfa_register 7
 2439 0006 0346     		mov	r3, r0
 2440 0008 B960     		str	r1, [r7, #8]
 2441 000a 7A60     		str	r2, [r7, #4]
 2442 000c FB73     		strb	r3, [r7, #15]
 884:..\src/interruptions.c ****     
 885:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2443              		.loc 1 885 0
 2444 000e B04B     		ldr	r3, .L183
 2445 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2446 0014 062B     		cmp	r3, #6
 2447 0016 40F08581 		bne	.L181
 2448              		.loc 1 885 0 is_stmt 0 discriminator 1
 2449 001a AD4B     		ldr	r3, .L183
 2450 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2451 0020 062B     		cmp	r3, #6
 2452 0022 40F07F81 		bne	.L181
 886:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2453              		.loc 1 886 0 is_stmt 1
 2454 0026 7B68     		ldr	r3, [r7, #4]
 2455 0028 1A68     		ldr	r2, [r3]
 2456 002a BB68     		ldr	r3, [r7, #8]
 2457 002c 1A60     		str	r2, [r3]
 887:..\src/interruptions.c ****     
 888:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2458              		.loc 1 888 0
 2459 002e A94B     		ldr	r3, .L183+4
 2460 0030 1B6A     		ldr	r3, [r3, #32]
 2461 0032 B3F52F7F 		cmp	r3, #700
 2462 0036 00F3C280 		bgt	.L164
 2463              	.LBB6:
 889:..\src/interruptions.c ****              
 890:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2464              		.loc 1 890 0
 2465 003a 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 61


 2466 003c FB61     		str	r3, [r7, #28]
 891:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2467              		.loc 1 891 0
 2468 003e 0023     		movs	r3, #0
 2469 0040 BB61     		str	r3, [r7, #24]
 892:..\src/interruptions.c ****         
 893:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2470              		.loc 1 893 0
 2471 0042 A44B     		ldr	r3, .L183+4
 2472 0044 1B6A     		ldr	r3, [r3, #32]
 2473 0046 A24A     		ldr	r2, .L183
 2474 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2475 004c 9342     		cmp	r3, r2
 2476 004e 1ADD     		ble	.L165
 894:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2477              		.loc 1 894 0
 2478 0050 A04B     		ldr	r3, .L183+4
 2479 0052 1B6A     		ldr	r3, [r3, #32]
 2480 0054 9E4A     		ldr	r2, .L183
 2481 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2482 005a 9B1A     		subs	r3, r3, r2
 2483 005c FB61     		str	r3, [r7, #28]
 895:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2484              		.loc 1 895 0
 2485 005e BB68     		ldr	r3, [r7, #8]
 2486 0060 1A68     		ldr	r2, [r3]
 2487 0062 9B4B     		ldr	r3, .L183
 2488 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2489 0068 1946     		mov	r1, r3
 2490 006a FB69     		ldr	r3, [r7, #28]
 2491 006c 03FB01F1 		mul	r1, r3, r1
 2492 0070 974B     		ldr	r3, .L183
 2493 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2494 0076 C3F58063 		rsb	r3, r3, #1024
 2495 007a 91FBF3F3 		sdiv	r3, r1, r3
 2496 007e 1A44     		add	r2, r2, r3
 2497 0080 BB68     		ldr	r3, [r7, #8]
 2498 0082 1A60     		str	r2, [r3]
 2499 0084 21E0     		b	.L166
 2500              	.L165:
 896:..\src/interruptions.c ****             }
 897:..\src/interruptions.c ****             else {
 898:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2501              		.loc 1 898 0
 2502 0086 934B     		ldr	r3, .L183+4
 2503 0088 1A6A     		ldr	r2, [r3, #32]
 2504 008a 914B     		ldr	r3, .L183
 2505 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2506 0090 5B42     		negs	r3, r3
 2507 0092 9A42     		cmp	r2, r3
 2508 0094 19DA     		bge	.L166
 899:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2509              		.loc 1 899 0
 2510 0096 8F4B     		ldr	r3, .L183+4
 2511 0098 1B6A     		ldr	r3, [r3, #32]
 2512 009a 8D4A     		ldr	r2, .L183
 2513 009c B2F9B222 		ldrsh	r2, [r2, #690]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 62


 2514 00a0 1344     		add	r3, r3, r2
 2515 00a2 FB61     		str	r3, [r7, #28]
 900:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2516              		.loc 1 900 0
 2517 00a4 BB68     		ldr	r3, [r7, #8]
 2518 00a6 1A68     		ldr	r2, [r3]
 2519 00a8 894B     		ldr	r3, .L183
 2520 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2521 00ae 1946     		mov	r1, r3
 2522 00b0 FB69     		ldr	r3, [r7, #28]
 2523 00b2 03FB01F1 		mul	r1, r3, r1
 2524 00b6 864B     		ldr	r3, .L183
 2525 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2526 00bc C3F58063 		rsb	r3, r3, #1024
 2527 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2528 00c4 1A44     		add	r2, r2, r3
 2529 00c6 BB68     		ldr	r3, [r7, #8]
 2530 00c8 1A60     		str	r2, [r3]
 2531              	.L166:
 901:..\src/interruptions.c ****                 }
 902:..\src/interruptions.c ****             }
 903:..\src/interruptions.c **** 
 904:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2532              		.loc 1 904 0
 2533 00ca 824B     		ldr	r3, .L183+4
 2534 00cc 5B6A     		ldr	r3, [r3, #36]
 2535 00ce 804A     		ldr	r2, .L183
 2536 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2537 00d4 9342     		cmp	r3, r2
 2538 00d6 34DD     		ble	.L167
 905:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2539              		.loc 1 905 0
 2540 00d8 7E4B     		ldr	r3, .L183+4
 2541 00da 5B6A     		ldr	r3, [r3, #36]
 2542 00dc 7C4A     		ldr	r2, .L183
 2543 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2544 00e2 9B1A     		subs	r3, r3, r2
 2545 00e4 BB61     		str	r3, [r7, #24]
 906:..\src/interruptions.c ****                 if (motor_idx == 0){
 2546              		.loc 1 906 0
 2547 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2548 00e8 002B     		cmp	r3, #0
 2549 00ea 12D1     		bne	.L168
 907:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2550              		.loc 1 907 0
 2551 00ec BB68     		ldr	r3, [r7, #8]
 2552 00ee 1A68     		ldr	r2, [r3]
 2553 00f0 774B     		ldr	r3, .L183
 2554 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2555 00f6 1946     		mov	r1, r3
 2556 00f8 BB69     		ldr	r3, [r7, #24]
 2557 00fa 03FB01F1 		mul	r1, r3, r1
 2558 00fe 744B     		ldr	r3, .L183
 2559 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2560 0104 C3F58063 		rsb	r3, r3, #1024
 2561 0108 91FBF3F3 		sdiv	r3, r1, r3
 2562 010c 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 63


 2563 010e BB68     		ldr	r3, [r7, #8]
 2564 0110 1A60     		str	r2, [r3]
 2565              	.L168:
 908:..\src/interruptions.c ****                 }
 909:..\src/interruptions.c ****                 if (motor_idx == 1){
 2566              		.loc 1 909 0
 2567 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2568 0114 012B     		cmp	r3, #1
 2569 0116 40F00581 		bne	.L181
 910:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2570              		.loc 1 910 0
 2571 011a BB68     		ldr	r3, [r7, #8]
 2572 011c 1A68     		ldr	r2, [r3]
 2573 011e 6C4B     		ldr	r3, .L183
 2574 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2575 0124 1946     		mov	r1, r3
 2576 0126 BB69     		ldr	r3, [r7, #24]
 2577 0128 03FB01F1 		mul	r1, r3, r1
 2578 012c 684B     		ldr	r3, .L183
 2579 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2580 0132 C3F58063 		rsb	r3, r3, #1024
 2581 0136 91FBF3F3 		sdiv	r3, r1, r3
 2582 013a D21A     		subs	r2, r2, r3
 2583 013c BB68     		ldr	r3, [r7, #8]
 2584 013e 1A60     		str	r2, [r3]
 2585              	.LBE6:
 911:..\src/interruptions.c ****                 }          
 912:..\src/interruptions.c ****             }
 913:..\src/interruptions.c ****             else {
 914:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 915:..\src/interruptions.c ****                     
 916:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 917:..\src/interruptions.c ****                     if (motor_idx == 0){
 918:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 919:..\src/interruptions.c ****                     }
 920:..\src/interruptions.c ****                     if (motor_idx == 1){
 921:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 922:..\src/interruptions.c ****                     }
 923:..\src/interruptions.c ****                 }
 924:..\src/interruptions.c ****             }
 925:..\src/interruptions.c ****         }
 926:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 927:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 928:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 929:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 930:..\src/interruptions.c **** 
 931:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 932:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 933:..\src/interruptions.c ****                     if (motor_idx == 1){
 934:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 935:..\src/interruptions.c ****                     }
 936:..\src/interruptions.c ****                     if (motor_idx == 0){
 937:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 938:..\src/interruptions.c ****                     }                    
 939:..\src/interruptions.c ****                 }
 940:..\src/interruptions.c ****                 else {
 941:..\src/interruptions.c ****                     if (motor_idx == 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 64


 942:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 943:..\src/interruptions.c ****                     }
 944:..\src/interruptions.c ****                     if (motor_idx == 1){
 945:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 946:..\src/interruptions.c ****                     }
 947:..\src/interruptions.c ****                 }
 948:..\src/interruptions.c ****                 
 949:..\src/interruptions.c ****             }
 950:..\src/interruptions.c ****             else {
 951:..\src/interruptions.c ****                 if(pos_sum > 0) {
 952:..\src/interruptions.c ****                     if (motor_idx == 0){
 953:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 954:..\src/interruptions.c ****                     }
 955:..\src/interruptions.c ****                     if (motor_idx == 1){
 956:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 957:..\src/interruptions.c ****                     }
 958:..\src/interruptions.c ****                     
 959:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 960:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 961:..\src/interruptions.c ****                     }
 962:..\src/interruptions.c ****                 }
 963:..\src/interruptions.c ****             }
 964:..\src/interruptions.c ****         }
 965:..\src/interruptions.c ****     }           
 966:..\src/interruptions.c **** }
 2586              		.loc 1 966 0
 2587 0140 F0E0     		b	.L181
 2588              	.L167:
 2589              	.LBB7:
 914:..\src/interruptions.c ****                     
 2590              		.loc 1 914 0
 2591 0142 644B     		ldr	r3, .L183+4
 2592 0144 5A6A     		ldr	r2, [r3, #36]
 2593 0146 624B     		ldr	r3, .L183
 2594 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2595 014c 5B42     		negs	r3, r3
 2596 014e 9A42     		cmp	r2, r3
 2597 0150 80F2E880 		bge	.L181
 916:..\src/interruptions.c ****                     if (motor_idx == 0){
 2598              		.loc 1 916 0
 2599 0154 5F4B     		ldr	r3, .L183+4
 2600 0156 5B6A     		ldr	r3, [r3, #36]
 2601 0158 5D4A     		ldr	r2, .L183
 2602 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2603 015e 1344     		add	r3, r3, r2
 2604 0160 BB61     		str	r3, [r7, #24]
 917:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2605              		.loc 1 917 0
 2606 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2607 0164 002B     		cmp	r3, #0
 2608 0166 12D1     		bne	.L171
 918:..\src/interruptions.c ****                     }
 2609              		.loc 1 918 0
 2610 0168 BB68     		ldr	r3, [r7, #8]
 2611 016a 1A68     		ldr	r2, [r3]
 2612 016c 584B     		ldr	r3, .L183
 2613 016e B3F8B032 		ldrh	r3, [r3, #688]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 65


 2614 0172 1946     		mov	r1, r3
 2615 0174 BB69     		ldr	r3, [r7, #24]
 2616 0176 03FB01F1 		mul	r1, r3, r1
 2617 017a 554B     		ldr	r3, .L183
 2618 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2619 0180 C3F58063 		rsb	r3, r3, #1024
 2620 0184 91FBF3F3 		sdiv	r3, r1, r3
 2621 0188 1A44     		add	r2, r2, r3
 2622 018a BB68     		ldr	r3, [r7, #8]
 2623 018c 1A60     		str	r2, [r3]
 2624              	.L171:
 920:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2625              		.loc 1 920 0
 2626 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2627 0190 012B     		cmp	r3, #1
 2628 0192 40F0C780 		bne	.L181
 921:..\src/interruptions.c ****                     }
 2629              		.loc 1 921 0
 2630 0196 BB68     		ldr	r3, [r7, #8]
 2631 0198 1A68     		ldr	r2, [r3]
 2632 019a 4D4B     		ldr	r3, .L183
 2633 019c B3F8B032 		ldrh	r3, [r3, #688]
 2634 01a0 1946     		mov	r1, r3
 2635 01a2 BB69     		ldr	r3, [r7, #24]
 2636 01a4 03FB01F1 		mul	r1, r3, r1
 2637 01a8 494B     		ldr	r3, .L183
 2638 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2639 01ae C3F58063 		rsb	r3, r3, #1024
 2640 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2641 01b6 D21A     		subs	r2, r2, r3
 2642 01b8 BB68     		ldr	r3, [r7, #8]
 2643 01ba 1A60     		str	r2, [r3]
 2644              	.LBE7:
 2645              		.loc 1 966 0
 2646 01bc B2E0     		b	.L181
 2647              	.L164:
 2648              	.LBB8:
 928:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2649              		.loc 1 928 0
 2650 01be 444B     		ldr	r3, .L183
 2651 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2652 01c4 1946     		mov	r1, r3
 2653 01c6 444A     		ldr	r2, .L183+8
 2654 01c8 3423     		movs	r3, #52
 2655 01ca 03FB01F3 		mul	r3, r3, r1
 2656 01ce 1344     		add	r3, r3, r2
 2657 01d0 1A68     		ldr	r2, [r3]
 2658 01d2 3F4B     		ldr	r3, .L183
 2659 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2660 01d8 1846     		mov	r0, r3
 2661 01da 3F49     		ldr	r1, .L183+8
 2662 01dc 3423     		movs	r3, #52
 2663 01de 03FB00F3 		mul	r3, r3, r0
 2664 01e2 0B44     		add	r3, r3, r1
 2665 01e4 0433     		adds	r3, r3, #4
 2666 01e6 1B68     		ldr	r3, [r3]
 2667 01e8 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 66


 2668 01ea 394B     		ldr	r3, .L183
 2669 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2670 01f0 1846     		mov	r0, r3
 2671 01f2 3749     		ldr	r1, .L183
 2672 01f4 0346     		mov	r3, r0
 2673 01f6 5B00     		lsls	r3, r3, #1
 2674 01f8 0344     		add	r3, r3, r0
 2675 01fa 1B01     		lsls	r3, r3, #4
 2676 01fc 0B44     		add	r3, r3, r1
 2677 01fe 03F29513 		addw	r3, r3, #405
 2678 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2679 0204 42FA03F3 		asr	r3, r2, r3
 2680 0208 7B61     		str	r3, [r7, #20]
 929:..\src/interruptions.c **** 
 2681              		.loc 1 929 0
 2682 020a 314B     		ldr	r3, .L183
 2683 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2684 0210 1946     		mov	r1, r3
 2685 0212 314A     		ldr	r2, .L183+8
 2686 0214 3423     		movs	r3, #52
 2687 0216 03FB01F3 		mul	r3, r3, r1
 2688 021a 1344     		add	r3, r3, r2
 2689 021c 1A68     		ldr	r2, [r3]
 2690 021e 2C4B     		ldr	r3, .L183
 2691 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2692 0224 1846     		mov	r0, r3
 2693 0226 2C49     		ldr	r1, .L183+8
 2694 0228 3423     		movs	r3, #52
 2695 022a 03FB00F3 		mul	r3, r3, r0
 2696 022e 0B44     		add	r3, r3, r1
 2697 0230 0433     		adds	r3, r3, #4
 2698 0232 1B68     		ldr	r3, [r3]
 2699 0234 1A44     		add	r2, r2, r3
 2700 0236 264B     		ldr	r3, .L183
 2701 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2702 023c 1846     		mov	r0, r3
 2703 023e 2449     		ldr	r1, .L183
 2704 0240 0346     		mov	r3, r0
 2705 0242 5B00     		lsls	r3, r3, #1
 2706 0244 0344     		add	r3, r3, r0
 2707 0246 1B01     		lsls	r3, r3, #4
 2708 0248 0B44     		add	r3, r3, r1
 2709 024a 03F29513 		addw	r3, r3, #405
 2710 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2711 0250 42FA03F3 		asr	r3, r2, r3
 2712 0254 3B61     		str	r3, [r7, #16]
 931:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2713              		.loc 1 931 0
 2714 0256 7B69     		ldr	r3, [r7, #20]
 2715 0258 B3F5FA7F 		cmp	r3, #500
 2716 025c 03DC     		bgt	.L172
 931:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2717              		.loc 1 931 0 is_stmt 0 discriminator 1
 2718 025e 7B69     		ldr	r3, [r7, #20]
 2719 0260 13F5FA7F 		cmn	r3, #500
 2720 0264 3ADA     		bge	.L173
 2721              	.L172:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 67


 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2722              		.loc 1 932 0 is_stmt 1
 2723 0266 7B69     		ldr	r3, [r7, #20]
 2724 0268 002B     		cmp	r3, #0
 2725 026a 18DB     		blt	.L174
 933:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2726              		.loc 1 933 0
 2727 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2728 026e 012B     		cmp	r3, #1
 2729 0270 07D1     		bne	.L175
 934:..\src/interruptions.c ****                     }
 2730              		.loc 1 934 0
 2731 0272 BB68     		ldr	r3, [r7, #8]
 2732 0274 1B68     		ldr	r3, [r3]
 2733 0276 164A     		ldr	r2, .L183
 2734 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2735 027c 1A44     		add	r2, r2, r3
 2736 027e BB68     		ldr	r3, [r7, #8]
 2737 0280 1A60     		str	r2, [r3]
 2738              	.L175:
 936:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2739              		.loc 1 936 0
 2740 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2741 0284 002B     		cmp	r3, #0
 2742 0286 4CD1     		bne	.L182
 937:..\src/interruptions.c ****                     }                    
 2743              		.loc 1 937 0
 2744 0288 BB68     		ldr	r3, [r7, #8]
 2745 028a 1B68     		ldr	r3, [r3]
 2746 028c 104A     		ldr	r2, .L183
 2747 028e B2F8B022 		ldrh	r2, [r2, #688]
 2748 0292 5208     		lsrs	r2, r2, #1
 2749 0294 92B2     		uxth	r2, r2
 2750 0296 9A1A     		subs	r2, r3, r2
 2751 0298 BB68     		ldr	r3, [r7, #8]
 2752 029a 1A60     		str	r2, [r3]
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2753              		.loc 1 932 0
 2754 029c 41E0     		b	.L182
 2755              	.L174:
 941:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2756              		.loc 1 941 0
 2757 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2758 02a0 002B     		cmp	r3, #0
 2759 02a2 07D1     		bne	.L178
 942:..\src/interruptions.c ****                     }
 2760              		.loc 1 942 0
 2761 02a4 BB68     		ldr	r3, [r7, #8]
 2762 02a6 1B68     		ldr	r3, [r3]
 2763 02a8 094A     		ldr	r2, .L183
 2764 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2765 02ae 1A44     		add	r2, r2, r3
 2766 02b0 BB68     		ldr	r3, [r7, #8]
 2767 02b2 1A60     		str	r2, [r3]
 2768              	.L178:
 944:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2769              		.loc 1 944 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 68


 2770 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2771 02b6 012B     		cmp	r3, #1
 2772 02b8 33D1     		bne	.L182
 945:..\src/interruptions.c ****                     }
 2773              		.loc 1 945 0
 2774 02ba BB68     		ldr	r3, [r7, #8]
 2775 02bc 1B68     		ldr	r3, [r3]
 2776 02be 044A     		ldr	r2, .L183
 2777 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2778 02c4 5208     		lsrs	r2, r2, #1
 2779 02c6 92B2     		uxth	r2, r2
 2780 02c8 9A1A     		subs	r2, r3, r2
 2781 02ca BB68     		ldr	r3, [r7, #8]
 2782 02cc 1A60     		str	r2, [r3]
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2783              		.loc 1 932 0
 2784 02ce 28E0     		b	.L182
 2785              	.L184:
 2786              		.align	2
 2787              	.L183:
 2788 02d0 00000000 		.word	c_mem
 2789 02d4 00000000 		.word	g_adc_meas
 2790 02d8 00000000 		.word	g_meas
 2791              	.L173:
 951:..\src/interruptions.c ****                     if (motor_idx == 0){
 2792              		.loc 1 951 0
 2793 02dc 3B69     		ldr	r3, [r7, #16]
 2794 02de 002B     		cmp	r3, #0
 2795 02e0 20DD     		ble	.L181
 952:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2796              		.loc 1 952 0
 2797 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2798 02e4 002B     		cmp	r3, #0
 2799 02e6 08D1     		bne	.L179
 953:..\src/interruptions.c ****                     }
 2800              		.loc 1 953 0
 2801 02e8 BB68     		ldr	r3, [r7, #8]
 2802 02ea 1A68     		ldr	r2, [r3]
 2803 02ec 104B     		ldr	r3, .L185
 2804 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2805 02f2 5B00     		lsls	r3, r3, #1
 2806 02f4 D21A     		subs	r2, r2, r3
 2807 02f6 BB68     		ldr	r3, [r7, #8]
 2808 02f8 1A60     		str	r2, [r3]
 2809              	.L179:
 955:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2810              		.loc 1 955 0
 2811 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2812 02fc 012B     		cmp	r3, #1
 2813 02fe 08D1     		bne	.L180
 956:..\src/interruptions.c ****                     }
 2814              		.loc 1 956 0
 2815 0300 BB68     		ldr	r3, [r7, #8]
 2816 0302 1A68     		ldr	r2, [r3]
 2817 0304 0A4B     		ldr	r3, .L185
 2818 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2819 030a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 69


 2820 030c D21A     		subs	r2, r2, r3
 2821 030e BB68     		ldr	r3, [r7, #8]
 2822 0310 1A60     		str	r2, [r3]
 2823              	.L180:
 959:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2824              		.loc 1 959 0
 2825 0312 BB68     		ldr	r3, [r7, #8]
 2826 0314 1B68     		ldr	r3, [r3]
 2827 0316 002B     		cmp	r3, #0
 2828 0318 04DA     		bge	.L181
 960:..\src/interruptions.c ****                     }
 2829              		.loc 1 960 0
 2830 031a BB68     		ldr	r3, [r7, #8]
 2831 031c 0022     		movs	r2, #0
 2832 031e 1A60     		str	r2, [r3]
 2833              	.LBE8:
 2834              		.loc 1 966 0
 2835 0320 00E0     		b	.L181
 2836              	.L182:
 2837              	.LBB9:
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2838              		.loc 1 932 0
 2839 0322 00BF     		nop
 2840              	.L181:
 2841              	.LBE9:
 2842              		.loc 1 966 0
 2843 0324 00BF     		nop
 2844 0326 2437     		adds	r7, r7, #36
 2845              		.cfi_def_cfa_offset 4
 2846 0328 BD46     		mov	sp, r7
 2847              		.cfi_def_cfa_register 13
 2848              		@ sp needed
 2849 032a 80BC     		pop	{r7}
 2850              		.cfi_restore 7
 2851              		.cfi_def_cfa_offset 0
 2852 032c 7047     		bx	lr
 2853              	.L186:
 2854 032e 00BF     		.align	2
 2855              	.L185:
 2856 0330 00000000 		.word	c_mem
 2857              		.cfi_endproc
 2858              	.LFE69:
 2859              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2860              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2861              		.align	2
 2862              		.global	compute_SoftHand_2_motors_emg_reference
 2863              		.thumb
 2864              		.thumb_func
 2865              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2866              	compute_SoftHand_2_motors_emg_reference:
 2867              	.LFB70:
 967:..\src/interruptions.c **** 
 968:..\src/interruptions.c **** 
 969:..\src/interruptions.c **** //==============================================================================
 970:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 971:..\src/interruptions.c **** //==============================================================================
 972:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 70


 973:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2868              		.loc 1 973 0
 2869              		.cfi_startproc
 2870              		@ args = 4, pretend = 0, frame = 16
 2871              		@ frame_needed = 1, uses_anonymous_args = 0
 2872 0000 80B5     		push	{r7, lr}
 2873              		.cfi_def_cfa_offset 8
 2874              		.cfi_offset 7, -8
 2875              		.cfi_offset 14, -4
 2876 0002 84B0     		sub	sp, sp, #16
 2877              		.cfi_def_cfa_offset 24
 2878 0004 00AF     		add	r7, sp, #0
 2879              		.cfi_def_cfa_register 7
 2880 0006 B960     		str	r1, [r7, #8]
 2881 0008 7A60     		str	r2, [r7, #4]
 2882 000a 3B60     		str	r3, [r7]
 2883 000c 0346     		mov	r3, r0
 2884 000e FB73     		strb	r3, [r7, #15]
 974:..\src/interruptions.c ****     
 975:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 976:..\src/interruptions.c ****     static uint8 fsm_state;     
 977:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2885              		.loc 1 977 0
 2886 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2887 0012 002B     		cmp	r3, #0
 2888 0014 05D1     		bne	.L188
 978:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2889              		.loc 1 978 0
 2890 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2891 001a 0346     		mov	r3, r0
 2892 001c 1A46     		mov	r2, r3
 2893 001e 614B     		ldr	r3, .L203
 2894 0020 1A70     		strb	r2, [r3]
 2895              	.L188:
 979:..\src/interruptions.c ****     }
 980:..\src/interruptions.c ****        
 981:..\src/interruptions.c ****     switch (fsm_state){
 2896              		.loc 1 981 0
 2897 0022 604B     		ldr	r3, .L203
 2898 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2899 0026 032B     		cmp	r3, #3
 2900 0028 00F2B780 		bhi	.L200
 2901 002c 01A2     		adr	r2, .L191
 2902 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2903 0032 00BF     		.p2align 2
 2904              	.L191:
 2905 0034 45000000 		.word	.L190+1
 2906 0038 45000000 		.word	.L190+1
 2907 003c BF000000 		.word	.L192+1
 2908 0040 4F000000 		.word	.L193+1
 2909              		.p2align 1
 2910              	.L190:
 982:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 983:..\src/interruptions.c ****              
 984:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2911              		.loc 1 984 0
 2912 0044 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 71


 2913 0046 1A68     		ldr	r2, [r3]
 2914 0048 BB68     		ldr	r3, [r7, #8]
 2915 004a 1A60     		str	r2, [r3]
 985:..\src/interruptions.c ****     
 986:..\src/interruptions.c ****             break;
 2916              		.loc 1 986 0
 2917 004c A5E0     		b	.L189
 2918              	.L193:
 987:..\src/interruptions.c ****         
 988:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 989:..\src/interruptions.c **** 
 990:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2919              		.loc 1 990 0
 2920 004e 3B68     		ldr	r3, [r7]
 2921 0050 002B     		cmp	r3, #0
 2922 0052 17DD     		ble	.L194
 2923              		.loc 1 990 0 is_stmt 0 discriminator 1
 2924 0054 3A68     		ldr	r2, [r7]
 2925 0056 BB69     		ldr	r3, [r7, #24]
 2926 0058 9A42     		cmp	r2, r3
 2927 005a 13DD     		ble	.L194
 991:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2928              		.loc 1 991 0 is_stmt 1
 2929 005c 7B68     		ldr	r3, [r7, #4]
 2930 005e 1A68     		ldr	r2, [r3]
 2931 0060 514B     		ldr	r3, .L203+4
 2932 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2933 0066 1946     		mov	r1, r3
 2934 0068 3B68     		ldr	r3, [r7]
 2935 006a 03FB01F3 		mul	r3, r3, r1
 2936 006e 9900     		lsls	r1, r3, #2
 2937 0070 4E4B     		ldr	r3, .L203+8
 2938 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2939 0076 C3F58063 		rsb	r3, r3, #1024
 2940 007a 91FBF3F3 		sdiv	r3, r1, r3
 2941 007e 1A44     		add	r2, r2, r3
 2942 0080 BB68     		ldr	r3, [r7, #8]
 2943 0082 1A60     		str	r2, [r3]
 2944              	.L194:
 992:..\src/interruptions.c ****             }
 993:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2945              		.loc 1 993 0
 2946 0084 BB69     		ldr	r3, [r7, #24]
 2947 0086 002B     		cmp	r3, #0
 2948 0088 40F38480 		ble	.L201
 2949              		.loc 1 993 0 is_stmt 0 discriminator 1
 2950 008c BA69     		ldr	r2, [r7, #24]
 2951 008e 3B68     		ldr	r3, [r7]
 2952 0090 9A42     		cmp	r2, r3
 2953 0092 7FDD     		ble	.L201
 994:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2954              		.loc 1 994 0 is_stmt 1
 2955 0094 7B68     		ldr	r3, [r7, #4]
 2956 0096 1A68     		ldr	r2, [r3]
 2957 0098 434B     		ldr	r3, .L203+4
 2958 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2959 009e 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 72


 2960 00a0 BB69     		ldr	r3, [r7, #24]
 2961 00a2 03FB01F3 		mul	r3, r3, r1
 2962 00a6 9900     		lsls	r1, r3, #2
 2963 00a8 404B     		ldr	r3, .L203+8
 2964 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2965 00ae C3F58063 		rsb	r3, r3, #1024
 2966 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2967 00b6 D21A     		subs	r2, r2, r3
 2968 00b8 BB68     		ldr	r3, [r7, #8]
 2969 00ba 1A60     		str	r2, [r3]
 995:..\src/interruptions.c ****             }
 996:..\src/interruptions.c ****             
 997:..\src/interruptions.c ****             break;
 2970              		.loc 1 997 0
 2971 00bc 6AE0     		b	.L201
 2972              	.L192:
 998:..\src/interruptions.c ****             
 999:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
1000:..\src/interruptions.c ****             
1001:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2973              		.loc 1 1001 0
 2974 00be 3B68     		ldr	r3, [r7]
 2975 00c0 002B     		cmp	r3, #0
 2976 00c2 31DD     		ble	.L196
 2977              		.loc 1 1001 0 is_stmt 0 discriminator 1
 2978 00c4 3A68     		ldr	r2, [r7]
 2979 00c6 BB69     		ldr	r3, [r7, #24]
 2980 00c8 9A42     		cmp	r2, r3
 2981 00ca 2DDD     		ble	.L196
1002:..\src/interruptions.c ****                 if (motor_idx == 0){
 2982              		.loc 1 1002 0 is_stmt 1
 2983 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2984 00ce 002B     		cmp	r3, #0
 2985 00d0 13D1     		bne	.L197
1003:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2986              		.loc 1 1003 0
 2987 00d2 7B68     		ldr	r3, [r7, #4]
 2988 00d4 1A68     		ldr	r2, [r3]
 2989 00d6 344B     		ldr	r3, .L203+4
 2990 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2991 00dc 1946     		mov	r1, r3
 2992 00de 3B68     		ldr	r3, [r7]
 2993 00e0 03FB01F3 		mul	r3, r3, r1
 2994 00e4 9900     		lsls	r1, r3, #2
 2995 00e6 314B     		ldr	r3, .L203+8
 2996 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2997 00ec C3F58063 		rsb	r3, r3, #1024
 2998 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2999 00f4 1A44     		add	r2, r2, r3
 3000 00f6 BB68     		ldr	r3, [r7, #8]
 3001 00f8 1A60     		str	r2, [r3]
 3002              	.L197:
1004:..\src/interruptions.c ****                 }
1005:..\src/interruptions.c ****                 if (motor_idx == 1){
 3003              		.loc 1 1005 0
 3004 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3005 00fc 012B     		cmp	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 73


 3006 00fe 13D1     		bne	.L196
1006:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 3007              		.loc 1 1006 0
 3008 0100 7B68     		ldr	r3, [r7, #4]
 3009 0102 1A68     		ldr	r2, [r3]
 3010 0104 284B     		ldr	r3, .L203+4
 3011 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 3012 010a 1946     		mov	r1, r3
 3013 010c 3B68     		ldr	r3, [r7]
 3014 010e 03FB01F3 		mul	r3, r3, r1
 3015 0112 9900     		lsls	r1, r3, #2
 3016 0114 254B     		ldr	r3, .L203+8
 3017 0116 B3F8F031 		ldrh	r3, [r3, #496]
 3018 011a C3F58063 		rsb	r3, r3, #1024
 3019 011e 91FBF3F3 		sdiv	r3, r1, r3
 3020 0122 D21A     		subs	r2, r2, r3
 3021 0124 BB68     		ldr	r3, [r7, #8]
 3022 0126 1A60     		str	r2, [r3]
 3023              	.L196:
1007:..\src/interruptions.c ****                 }   
1008:..\src/interruptions.c ****             }
1009:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 3024              		.loc 1 1009 0
 3025 0128 BB69     		ldr	r3, [r7, #24]
 3026 012a 002B     		cmp	r3, #0
 3027 012c 34DD     		ble	.L202
 3028              		.loc 1 1009 0 is_stmt 0 discriminator 1
 3029 012e BA69     		ldr	r2, [r7, #24]
 3030 0130 3B68     		ldr	r3, [r7]
 3031 0132 9A42     		cmp	r2, r3
 3032 0134 30DD     		ble	.L202
1010:..\src/interruptions.c ****                 if (motor_idx == 0){
 3033              		.loc 1 1010 0 is_stmt 1
 3034 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3035 0138 002B     		cmp	r3, #0
 3036 013a 13D1     		bne	.L199
1011:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3037              		.loc 1 1011 0
 3038 013c 7B68     		ldr	r3, [r7, #4]
 3039 013e 1A68     		ldr	r2, [r3]
 3040 0140 194B     		ldr	r3, .L203+4
 3041 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 3042 0146 1946     		mov	r1, r3
 3043 0148 BB69     		ldr	r3, [r7, #24]
 3044 014a 03FB01F3 		mul	r3, r3, r1
 3045 014e 9900     		lsls	r1, r3, #2
 3046 0150 164B     		ldr	r3, .L203+8
 3047 0152 B3F8F231 		ldrh	r3, [r3, #498]
 3048 0156 C3F58063 		rsb	r3, r3, #1024
 3049 015a 91FBF3F3 		sdiv	r3, r1, r3
 3050 015e D21A     		subs	r2, r2, r3
 3051 0160 BB68     		ldr	r3, [r7, #8]
 3052 0162 1A60     		str	r2, [r3]
 3053              	.L199:
1012:..\src/interruptions.c ****                 }
1013:..\src/interruptions.c ****                 if (motor_idx == 1){
 3054              		.loc 1 1013 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 74


 3055 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3056 0166 012B     		cmp	r3, #1
 3057 0168 16D1     		bne	.L202
1014:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3058              		.loc 1 1014 0
 3059 016a 7B68     		ldr	r3, [r7, #4]
 3060 016c 1A68     		ldr	r2, [r3]
 3061 016e 0E4B     		ldr	r3, .L203+4
 3062 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 3063 0174 1946     		mov	r1, r3
 3064 0176 BB69     		ldr	r3, [r7, #24]
 3065 0178 03FB01F3 		mul	r3, r3, r1
 3066 017c 9900     		lsls	r1, r3, #2
 3067 017e 0B4B     		ldr	r3, .L203+8
 3068 0180 B3F8F231 		ldrh	r3, [r3, #498]
 3069 0184 C3F58063 		rsb	r3, r3, #1024
 3070 0188 91FBF3F3 		sdiv	r3, r1, r3
 3071 018c 1A44     		add	r2, r2, r3
 3072 018e BB68     		ldr	r3, [r7, #8]
 3073 0190 1A60     		str	r2, [r3]
1015:..\src/interruptions.c ****                 }
1016:..\src/interruptions.c ****             }
1017:..\src/interruptions.c ****             
1018:..\src/interruptions.c ****             break;
 3074              		.loc 1 1018 0
 3075 0192 01E0     		b	.L202
 3076              	.L201:
 997:..\src/interruptions.c ****             
 3077              		.loc 1 997 0
 3078 0194 00BF     		nop
 3079 0196 00E0     		b	.L200
 3080              	.L202:
 3081              		.loc 1 1018 0
 3082 0198 00BF     		nop
 3083              	.L189:
 3084              	.L200:
1019:..\src/interruptions.c ****     }
1020:..\src/interruptions.c ****  
1021:..\src/interruptions.c **** }
 3085              		.loc 1 1021 0
 3086 019a 00BF     		nop
 3087 019c 1037     		adds	r7, r7, #16
 3088              		.cfi_def_cfa_offset 8
 3089 019e BD46     		mov	sp, r7
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 01a0 80BD     		pop	{r7, pc}
 3093              	.L204:
 3094 01a2 00BF     		.align	2
 3095              	.L203:
 3096 01a4 8E000000 		.word	fsm_state.10546
 3097 01a8 00000000 		.word	g_mem
 3098 01ac 00000000 		.word	c_mem
 3099              		.cfi_endproc
 3100              	.LFE70:
 3101              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3102              		.section	.text.motor_control_SH,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 75


 3103              		.align	2
 3104              		.global	motor_control_SH
 3105              		.thumb
 3106              		.thumb_func
 3107              		.type	motor_control_SH, %function
 3108              	motor_control_SH:
 3109              	.LFB71:
1022:..\src/interruptions.c **** 
1023:..\src/interruptions.c **** //==============================================================================
1024:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1025:..\src/interruptions.c **** //==============================================================================
1026:..\src/interruptions.c **** void motor_control_SH() {
 3110              		.loc 1 1026 0
 3111              		.cfi_startproc
 3112              		@ args = 0, pretend = 0, frame = 80
 3113              		@ frame_needed = 1, uses_anonymous_args = 0
 3114 0000 80B5     		push	{r7, lr}
 3115              		.cfi_def_cfa_offset 8
 3116              		.cfi_offset 7, -8
 3117              		.cfi_offset 14, -4
 3118 0002 94B0     		sub	sp, sp, #80
 3119              		.cfi_def_cfa_offset 88
 3120 0004 00AF     		add	r7, sp, #0
 3121              		.cfi_def_cfa_register 7
1027:..\src/interruptions.c **** 
1028:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3122              		.loc 1 1028 0
 3123 0006 0023     		movs	r3, #0
 3124 0008 FB64     		str	r3, [r7, #76]
1029:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1030:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1031:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1032:..\src/interruptions.c ****  
1033:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3125              		.loc 1 1033 0
 3126 000a 0023     		movs	r3, #0
 3127 000c 87F84730 		strb	r3, [r7, #71]
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3128              		.loc 1 1035 0
 3129 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3130 0014 1346     		mov	r3, r2
 3131 0016 DB00     		lsls	r3, r3, #3
 3132 0018 9B1A     		subs	r3, r3, r2
 3133 001a 1B01     		lsls	r3, r3, #4
 3134 001c B033     		adds	r3, r3, #176
 3135 001e 9D4A     		ldr	r2, .L266
 3136 0020 1344     		add	r3, r3, r2
 3137 0022 3B64     		str	r3, [r7, #64]
1036:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3138              		.loc 1 1036 0
 3139 0024 3B6C     		ldr	r3, [r7, #64]
 3140 0026 93F86030 		ldrb	r3, [r3, #96]
 3141 002a 87F83F30 		strb	r3, [r7, #63]
1037:..\src/interruptions.c ****     
1038:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3142              		.loc 1 1038 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 76


 3143 002e 3B6C     		ldr	r3, [r7, #64]
 3144 0030 1B68     		ldr	r3, [r3]
 3145 0032 BB63     		str	r3, [r7, #56]
1039:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3146              		.loc 1 1039 0
 3147 0034 3B6C     		ldr	r3, [r7, #64]
 3148 0036 5B68     		ldr	r3, [r3, #4]
 3149 0038 7B63     		str	r3, [r7, #52]
1040:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3150              		.loc 1 1040 0
 3151 003a 3B6C     		ldr	r3, [r7, #64]
 3152 003c 9B68     		ldr	r3, [r3, #8]
 3153 003e 3B63     		str	r3, [r7, #48]
1041:..\src/interruptions.c **** 
1042:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3154              		.loc 1 1042 0
 3155 0040 3B6C     		ldr	r3, [r7, #64]
 3156 0042 DB68     		ldr	r3, [r3, #12]
 3157 0044 FB62     		str	r3, [r7, #44]
1043:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3158              		.loc 1 1043 0
 3159 0046 3B6C     		ldr	r3, [r7, #64]
 3160 0048 1B69     		ldr	r3, [r3, #16]
 3161 004a BB62     		str	r3, [r7, #40]
1044:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3162              		.loc 1 1044 0
 3163 004c 3B6C     		ldr	r3, [r7, #64]
 3164 004e 5B69     		ldr	r3, [r3, #20]
 3165 0050 7B62     		str	r3, [r7, #36]
1045:..\src/interruptions.c **** 
1046:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3166              		.loc 1 1046 0
 3167 0052 3B6C     		ldr	r3, [r7, #64]
 3168 0054 9B69     		ldr	r3, [r3, #24]
 3169 0056 3B62     		str	r3, [r7, #32]
1047:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3170              		.loc 1 1047 0
 3171 0058 3B6C     		ldr	r3, [r7, #64]
 3172 005a DB69     		ldr	r3, [r3, #28]
 3173 005c FB61     		str	r3, [r7, #28]
1048:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3174              		.loc 1 1048 0
 3175 005e 3B6C     		ldr	r3, [r7, #64]
 3176 0060 1B6A     		ldr	r3, [r3, #32]
 3177 0062 BB61     		str	r3, [r7, #24]
1049:..\src/interruptions.c ****     
1050:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3178              		.loc 1 1050 0
 3179 0064 3B6C     		ldr	r3, [r7, #64]
 3180 0066 5B6A     		ldr	r3, [r3, #36]
 3181 0068 7B61     		str	r3, [r7, #20]
1051:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3182              		.loc 1 1051 0
 3183 006a 3B6C     		ldr	r3, [r7, #64]
 3184 006c 9B6A     		ldr	r3, [r3, #40]
 3185 006e 3B61     		str	r3, [r7, #16]
1052:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 77


 3186              		.loc 1 1052 0
 3187 0070 3B6C     		ldr	r3, [r7, #64]
 3188 0072 DB6A     		ldr	r3, [r3, #44]
 3189 0074 FB60     		str	r3, [r7, #12]
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****     // Static Variables
1055:..\src/interruptions.c **** 
1056:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1057:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1058:..\src/interruptions.c ****     
1059:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1060:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1061:..\src/interruptions.c ****     static int32 prev_pwm;
1062:..\src/interruptions.c **** 
1063:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1064:..\src/interruptions.c ****     static uint32 position_counter = 0;
1065:..\src/interruptions.c ****   
1066:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1067:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3190              		.loc 1 1067 0
 3191 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3192 007a 1B01     		lsls	r3, r3, #4
 3193 007c 864A     		ldr	r2, .L266+4
 3194 007e 9918     		adds	r1, r3, r2
 3195 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3196 0084 1B01     		lsls	r3, r3, #4
 3197 0086 854A     		ldr	r2, .L266+8
 3198 0088 1A44     		add	r2, r2, r3
 3199 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3200 008e 1846     		mov	r0, r3
 3201 0090 FFF7FEFF 		bl	compute_reference
1068:..\src/interruptions.c ****      
1069:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3202              		.loc 1 1069 0
 3203 0094 3B6C     		ldr	r3, [r7, #64]
 3204 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3205 009a 032B     		cmp	r3, #3
 3206 009c 00F2F781 		bhi	.L206
 3207 00a0 01A2     		adr	r2, .L208
 3208 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3209 00a6 00BF     		.p2align 2
 3210              	.L208:
 3211 00a8 55020000 		.word	.L207+1
 3212 00ac 49040000 		.word	.L209+1
 3213 00b0 3B030000 		.word	.L210+1
 3214 00b4 B9000000 		.word	.L211+1
 3215              		.p2align 1
 3216              	.L211:
1070:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1071:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1072:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3217              		.loc 1 1072 0
 3218 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3219 00bc 764A     		ldr	r2, .L266+4
 3220 00be 1B01     		lsls	r3, r3, #4
 3221 00c0 1344     		add	r3, r3, r2
 3222 00c2 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 78


 3223 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3224 00c8 7549     		ldr	r1, .L266+12
 3225 00ca 3420     		movs	r0, #52
 3226 00cc 00FB03F3 		mul	r3, r0, r3
 3227 00d0 0B44     		add	r3, r3, r1
 3228 00d2 1B68     		ldr	r3, [r3]
 3229 00d4 D31A     		subs	r3, r2, r3
 3230 00d6 BB60     		str	r3, [r7, #8]
1073:..\src/interruptions.c **** 
1074:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3231              		.loc 1 1074 0
 3232 00d8 724B     		ldr	r3, .L266+16
 3233 00da 1A68     		ldr	r2, [r3]
 3234 00dc BB68     		ldr	r3, [r7, #8]
 3235 00de 1344     		add	r3, r3, r2
 3236 00e0 704A     		ldr	r2, .L266+16
 3237 00e2 1360     		str	r3, [r2]
1075:..\src/interruptions.c **** 
1076:..\src/interruptions.c ****             // error_sum saturation
1077:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3238              		.loc 1 1077 0
 3239 00e4 6F4B     		ldr	r3, .L266+16
 3240 00e6 1B68     		ldr	r3, [r3]
 3241 00e8 6F4A     		ldr	r2, .L266+20
 3242 00ea 9342     		cmp	r3, r2
 3243 00ec 03DD     		ble	.L212
1078:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3244              		.loc 1 1078 0
 3245 00ee 6D4B     		ldr	r3, .L266+16
 3246 00f0 6D4A     		ldr	r2, .L266+20
 3247 00f2 1A60     		str	r2, [r3]
 3248 00f4 07E0     		b	.L213
 3249              	.L212:
1079:..\src/interruptions.c ****             else {
1080:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3250              		.loc 1 1080 0
 3251 00f6 6B4B     		ldr	r3, .L266+16
 3252 00f8 1B68     		ldr	r3, [r3]
 3253 00fa 6C4A     		ldr	r2, .L266+24
 3254 00fc 9342     		cmp	r3, r2
 3255 00fe 02DA     		bge	.L213
1081:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3256              		.loc 1 1081 0
 3257 0100 684B     		ldr	r3, .L266+16
 3258 0102 6A4A     		ldr	r2, .L266+24
 3259 0104 1A60     		str	r2, [r3]
 3260              	.L213:
1082:..\src/interruptions.c ****             }
1083:..\src/interruptions.c ****             
1084:..\src/interruptions.c ****             // ------ position PID control ------
1085:..\src/interruptions.c **** 
1086:..\src/interruptions.c ****             i_ref = 0;
 3261              		.loc 1 1086 0
 3262 0106 0023     		movs	r3, #0
 3263 0108 BB64     		str	r3, [r7, #72]
1087:..\src/interruptions.c ****             
1088:..\src/interruptions.c ****             // Proportional
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 79


1089:..\src/interruptions.c ****             if (k_p_dl != 0)
 3264              		.loc 1 1089 0
 3265 010a 3B6A     		ldr	r3, [r7, #32]
 3266 010c 002B     		cmp	r3, #0
 3267 010e 07D0     		beq	.L214
1090:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3268              		.loc 1 1090 0
 3269 0110 3B6A     		ldr	r3, [r7, #32]
 3270 0112 BA68     		ldr	r2, [r7, #8]
 3271 0114 02FB03F3 		mul	r3, r2, r3
 3272 0118 1B14     		asrs	r3, r3, #16
 3273 011a BA6C     		ldr	r2, [r7, #72]
 3274 011c 1344     		add	r3, r3, r2
 3275 011e BB64     		str	r3, [r7, #72]
 3276              	.L214:
1091:..\src/interruptions.c **** 
1092:..\src/interruptions.c ****             // Integral
1093:..\src/interruptions.c ****             if (k_i_dl != 0)
 3277              		.loc 1 1093 0
 3278 0120 FB69     		ldr	r3, [r7, #28]
 3279 0122 002B     		cmp	r3, #0
 3280 0124 08D0     		beq	.L215
1094:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3281              		.loc 1 1094 0
 3282 0126 5F4B     		ldr	r3, .L266+16
 3283 0128 1B68     		ldr	r3, [r3]
 3284 012a FA69     		ldr	r2, [r7, #28]
 3285 012c 02FB03F3 		mul	r3, r2, r3
 3286 0130 1B14     		asrs	r3, r3, #16
 3287 0132 BA6C     		ldr	r2, [r7, #72]
 3288 0134 1344     		add	r3, r3, r2
 3289 0136 BB64     		str	r3, [r7, #72]
 3290              	.L215:
1095:..\src/interruptions.c **** 
1096:..\src/interruptions.c ****             // Derivative
1097:..\src/interruptions.c ****             if (k_d_dl != 0)
 3291              		.loc 1 1097 0
 3292 0138 BB69     		ldr	r3, [r7, #24]
 3293 013a 002B     		cmp	r3, #0
 3294 013c 0AD0     		beq	.L216
1098:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3295              		.loc 1 1098 0
 3296 013e 5C4B     		ldr	r3, .L266+28
 3297 0140 1B68     		ldr	r3, [r3]
 3298 0142 BA68     		ldr	r2, [r7, #8]
 3299 0144 D31A     		subs	r3, r2, r3
 3300 0146 BA69     		ldr	r2, [r7, #24]
 3301 0148 02FB03F3 		mul	r3, r2, r3
 3302 014c 1B14     		asrs	r3, r3, #16
 3303 014e BA6C     		ldr	r2, [r7, #72]
 3304 0150 1344     		add	r3, r3, r2
 3305 0152 BB64     		str	r3, [r7, #72]
 3306              	.L216:
1099:..\src/interruptions.c ****                         
1100:..\src/interruptions.c ****             // Update previous position
1101:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3307              		.loc 1 1101 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 80


 3308 0154 564A     		ldr	r2, .L266+28
 3309 0156 BB68     		ldr	r3, [r7, #8]
 3310 0158 1360     		str	r3, [r2]
1102:..\src/interruptions.c **** 
1103:..\src/interruptions.c ****             // motor direction depends on i_ref
1104:..\src/interruptions.c ****             if (i_ref >= 0)
 3311              		.loc 1 1104 0
 3312 015a BB6C     		ldr	r3, [r7, #72]
 3313 015c 002B     		cmp	r3, #0
 3314 015e 03DB     		blt	.L217
1105:..\src/interruptions.c ****                 motor_dir = TRUE;
 3315              		.loc 1 1105 0
 3316 0160 544B     		ldr	r3, .L266+32
 3317 0162 0122     		movs	r2, #1
 3318 0164 1A70     		strb	r2, [r3]
 3319 0166 02E0     		b	.L218
 3320              	.L217:
1106:..\src/interruptions.c ****             else
1107:..\src/interruptions.c ****                 motor_dir = FALSE;
 3321              		.loc 1 1107 0
 3322 0168 524B     		ldr	r3, .L266+32
 3323 016a 0022     		movs	r2, #0
 3324 016c 1A70     		strb	r2, [r3]
 3325              	.L218:
1108:..\src/interruptions.c **** 
1109:..\src/interruptions.c ****             // saturate max current
1110:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3326              		.loc 1 1110 0
 3327 016e 3B6C     		ldr	r3, [r7, #64]
 3328 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3329 0174 1A46     		mov	r2, r3
 3330 0176 BB6C     		ldr	r3, [r7, #72]
 3331 0178 9A42     		cmp	r2, r3
 3332 017a 04DA     		bge	.L219
1111:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3333              		.loc 1 1111 0
 3334 017c 3B6C     		ldr	r3, [r7, #64]
 3335 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3336 0182 BB64     		str	r3, [r7, #72]
 3337 0184 0BE0     		b	.L220
 3338              	.L219:
1112:..\src/interruptions.c ****             else {
1113:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3339              		.loc 1 1113 0
 3340 0186 3B6C     		ldr	r3, [r7, #64]
 3341 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3342 018c 5A42     		negs	r2, r3
 3343 018e BB6C     		ldr	r3, [r7, #72]
 3344 0190 9A42     		cmp	r2, r3
 3345 0192 04DD     		ble	.L220
1114:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3346              		.loc 1 1114 0
 3347 0194 3B6C     		ldr	r3, [r7, #64]
 3348 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3349 019a 5B42     		negs	r3, r3
 3350 019c BB64     		str	r3, [r7, #72]
 3351              	.L220:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 81


1115:..\src/interruptions.c ****         	}
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****             // current error and curr error sum
1118:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3352              		.loc 1 1118 0
 3353 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3354 01a2 3F4A     		ldr	r2, .L266+12
 3355 01a4 3421     		movs	r1, #52
 3356 01a6 01FB03F3 		mul	r3, r1, r3
 3357 01aa 1344     		add	r3, r3, r2
 3358 01ac 0C33     		adds	r3, r3, #12
 3359 01ae 1B68     		ldr	r3, [r3]
 3360 01b0 BA6C     		ldr	r2, [r7, #72]
 3361 01b2 D31A     		subs	r3, r2, r3
 3362 01b4 7B60     		str	r3, [r7, #4]
1119:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3363              		.loc 1 1119 0
 3364 01b6 404B     		ldr	r3, .L266+36
 3365 01b8 1A68     		ldr	r2, [r3]
 3366 01ba 7B68     		ldr	r3, [r7, #4]
 3367 01bc 1344     		add	r3, r3, r2
 3368 01be 3E4A     		ldr	r2, .L266+36
 3369 01c0 1360     		str	r3, [r2]
1120:..\src/interruptions.c ****             
1121:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3370              		.loc 1 1121 0
 3371 01c2 3D4B     		ldr	r3, .L266+36
 3372 01c4 1B68     		ldr	r3, [r3]
 3373 01c6 3D4A     		ldr	r2, .L266+40
 3374 01c8 9342     		cmp	r3, r2
 3375 01ca 03DD     		ble	.L221
1122:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3376              		.loc 1 1122 0
 3377 01cc 3A4B     		ldr	r3, .L266+36
 3378 01ce 3B4A     		ldr	r2, .L266+40
 3379 01d0 1A60     		str	r2, [r3]
 3380 01d2 07E0     		b	.L222
 3381              	.L221:
1123:..\src/interruptions.c ****             else {
1124:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3382              		.loc 1 1124 0
 3383 01d4 384B     		ldr	r3, .L266+36
 3384 01d6 1B68     		ldr	r3, [r3]
 3385 01d8 394A     		ldr	r2, .L266+44
 3386 01da 9342     		cmp	r3, r2
 3387 01dc 02DA     		bge	.L222
1125:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3388              		.loc 1 1125 0
 3389 01de 364B     		ldr	r3, .L266+36
 3390 01e0 374A     		ldr	r2, .L266+44
 3391 01e2 1A60     		str	r2, [r3]
 3392              	.L222:
1126:..\src/interruptions.c ****             }
1127:..\src/interruptions.c **** 
1128:..\src/interruptions.c ****             // ----- current PID control -----
1129:..\src/interruptions.c **** 
1130:..\src/interruptions.c ****             pwm_input = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 82


 3393              		.loc 1 1130 0
 3394 01e4 0023     		movs	r3, #0
 3395 01e6 FB64     		str	r3, [r7, #76]
1131:..\src/interruptions.c **** 
1132:..\src/interruptions.c ****             // Proportional
1133:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3396              		.loc 1 1133 0
 3397 01e8 7B69     		ldr	r3, [r7, #20]
 3398 01ea 002B     		cmp	r3, #0
 3399 01ec 07D0     		beq	.L223
1134:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3400              		.loc 1 1134 0
 3401 01ee 7B69     		ldr	r3, [r7, #20]
 3402 01f0 7A68     		ldr	r2, [r7, #4]
 3403 01f2 02FB03F3 		mul	r3, r2, r3
 3404 01f6 1B14     		asrs	r3, r3, #16
 3405 01f8 FA6C     		ldr	r2, [r7, #76]
 3406 01fa 1344     		add	r3, r3, r2
 3407 01fc FB64     		str	r3, [r7, #76]
 3408              	.L223:
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****             // Integral
1137:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3409              		.loc 1 1137 0
 3410 01fe 3B69     		ldr	r3, [r7, #16]
 3411 0200 002B     		cmp	r3, #0
 3412 0202 08D0     		beq	.L224
1138:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3413              		.loc 1 1138 0
 3414 0204 2C4B     		ldr	r3, .L266+36
 3415 0206 1B68     		ldr	r3, [r3]
 3416 0208 3A69     		ldr	r2, [r7, #16]
 3417 020a 02FB03F3 		mul	r3, r2, r3
 3418 020e 1B14     		asrs	r3, r3, #16
 3419 0210 FA6C     		ldr	r2, [r7, #76]
 3420 0212 1344     		add	r3, r3, r2
 3421 0214 FB64     		str	r3, [r7, #76]
 3422              	.L224:
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****             // Derivative
1141:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3423              		.loc 1 1141 0
 3424 0216 FB68     		ldr	r3, [r7, #12]
 3425 0218 002B     		cmp	r3, #0
 3426 021a 0AD0     		beq	.L225
1142:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3427              		.loc 1 1142 0
 3428 021c 294B     		ldr	r3, .L266+48
 3429 021e 1B68     		ldr	r3, [r3]
 3430 0220 7A68     		ldr	r2, [r7, #4]
 3431 0222 D31A     		subs	r3, r2, r3
 3432 0224 FA68     		ldr	r2, [r7, #12]
 3433 0226 02FB03F3 		mul	r3, r2, r3
 3434 022a 1B14     		asrs	r3, r3, #16
 3435 022c FA6C     		ldr	r2, [r7, #76]
 3436 022e 1344     		add	r3, r3, r2
 3437 0230 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 83


 3438              	.L225:
1143:..\src/interruptions.c **** 
1144:..\src/interruptions.c ****             // pwm_input saturation
1145:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3439              		.loc 1 1145 0
 3440 0232 FB6C     		ldr	r3, [r7, #76]
 3441 0234 13F1640F 		cmn	r3, #100
 3442 0238 03DA     		bge	.L226
1146:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3443              		.loc 1 1146 0
 3444 023a 6FF06303 		mvn	r3, #99
 3445 023e FB64     		str	r3, [r7, #76]
 3446 0240 04E0     		b	.L227
 3447              	.L226:
1147:..\src/interruptions.c ****             else {
1148:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3448              		.loc 1 1148 0
 3449 0242 FB6C     		ldr	r3, [r7, #76]
 3450 0244 642B     		cmp	r3, #100
 3451 0246 01DD     		ble	.L227
1149:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3452              		.loc 1 1149 0
 3453 0248 6423     		movs	r3, #100
 3454 024a FB64     		str	r3, [r7, #76]
 3455              	.L227:
1150:..\src/interruptions.c ****             }
1151:..\src/interruptions.c **** 
1152:..\src/interruptions.c ****             // Update previous current
1153:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3456              		.loc 1 1153 0
 3457 024c 1D4A     		ldr	r2, .L266+48
 3458 024e 7B68     		ldr	r3, [r7, #4]
 3459 0250 1360     		str	r3, [r2]
1154:..\src/interruptions.c **** 
1155:..\src/interruptions.c ****         break;
 3460              		.loc 1 1155 0
 3461 0252 1CE1     		b	.L206
 3462              	.L207:
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1158:..\src/interruptions.c ****         case CONTROL_ANGLE:
1159:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3463              		.loc 1 1159 0
 3464 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3465 0258 0F4A     		ldr	r2, .L266+4
 3466 025a 1B01     		lsls	r3, r3, #4
 3467 025c 1344     		add	r3, r3, r2
 3468 025e 1A68     		ldr	r2, [r3]
 3469 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3470 0264 0E49     		ldr	r1, .L266+12
 3471 0266 3420     		movs	r0, #52
 3472 0268 00FB03F3 		mul	r3, r0, r3
 3473 026c 0B44     		add	r3, r3, r1
 3474 026e 1B68     		ldr	r3, [r3]
 3475 0270 D31A     		subs	r3, r2, r3
 3476 0272 BB60     		str	r3, [r7, #8]
1160:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 84


1161:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3477              		.loc 1 1161 0
 3478 0274 0B4B     		ldr	r3, .L266+16
 3479 0276 1A68     		ldr	r2, [r3]
 3480 0278 BB68     		ldr	r3, [r7, #8]
 3481 027a 1344     		add	r3, r3, r2
 3482 027c 094A     		ldr	r2, .L266+16
 3483 027e 1360     		str	r3, [r2]
1162:..\src/interruptions.c **** 
1163:..\src/interruptions.c ****             // anti-windup (for integral control)
1164:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3484              		.loc 1 1164 0
 3485 0280 084B     		ldr	r3, .L266+16
 3486 0282 1B68     		ldr	r3, [r3]
 3487 0284 B3F57A7F 		cmp	r3, #1000
 3488 0288 1EDD     		ble	.L228
1165:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3489              		.loc 1 1165 0
 3490 028a 064B     		ldr	r3, .L266+16
 3491 028c 4FF47A72 		mov	r2, #1000
 3492 0290 1A60     		str	r2, [r3]
 3493 0292 21E0     		b	.L229
 3494              	.L267:
 3495              		.align	2
 3496              	.L266:
 3497 0294 00000000 		.word	c_mem
 3498 0298 00000000 		.word	g_ref
 3499 029c 00000000 		.word	g_refOld
 3500 02a0 00000000 		.word	g_meas
 3501 02a4 90000000 		.word	pos_error_sum.10573
 3502 02a8 80F0FA02 		.word	50000000
 3503 02ac 800F05FD 		.word	-50000000
 3504 02b0 94000000 		.word	prev_pos_err.10575
 3505 02b4 98000000 		.word	motor_dir.10578
 3506 02b8 9C000000 		.word	curr_error_sum.10574
 3507 02bc A0860100 		.word	100000
 3508 02c0 6079FEFF 		.word	-100000
 3509 02c4 A0000000 		.word	prev_curr_err.10576
 3510              	.L228:
1166:..\src/interruptions.c ****             else {
1167:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3511              		.loc 1 1167 0
 3512 02c8 9D4B     		ldr	r3, .L268
 3513 02ca 1B68     		ldr	r3, [r3]
 3514 02cc 13F57A7F 		cmn	r3, #1000
 3515 02d0 02DA     		bge	.L229
1168:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3516              		.loc 1 1168 0
 3517 02d2 9B4B     		ldr	r3, .L268
 3518 02d4 9B4A     		ldr	r2, .L268+4
 3519 02d6 1A60     		str	r2, [r3]
 3520              	.L229:
1169:..\src/interruptions.c ****             }
1170:..\src/interruptions.c **** 
1171:..\src/interruptions.c ****             // Proportional
1172:..\src/interruptions.c ****             if (k_p != 0) 
 3521              		.loc 1 1172 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 85


 3522 02d8 BB6B     		ldr	r3, [r7, #56]
 3523 02da 002B     		cmp	r3, #0
 3524 02dc 05D0     		beq	.L230
1173:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3525              		.loc 1 1173 0
 3526 02de BB6B     		ldr	r3, [r7, #56]
 3527 02e0 BA68     		ldr	r2, [r7, #8]
 3528 02e2 02FB03F3 		mul	r3, r2, r3
 3529 02e6 1B14     		asrs	r3, r3, #16
 3530 02e8 FB64     		str	r3, [r7, #76]
 3531              	.L230:
1174:..\src/interruptions.c ****             
1175:..\src/interruptions.c **** 
1176:..\src/interruptions.c ****             // Integral
1177:..\src/interruptions.c ****             if (k_i != 0) 
 3532              		.loc 1 1177 0
 3533 02ea 7B6B     		ldr	r3, [r7, #52]
 3534 02ec 002B     		cmp	r3, #0
 3535 02ee 08D0     		beq	.L231
1178:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3536              		.loc 1 1178 0
 3537 02f0 934B     		ldr	r3, .L268
 3538 02f2 1B68     		ldr	r3, [r3]
 3539 02f4 7A6B     		ldr	r2, [r7, #52]
 3540 02f6 02FB03F3 		mul	r3, r2, r3
 3541 02fa 1B14     		asrs	r3, r3, #16
 3542 02fc FA6C     		ldr	r2, [r7, #76]
 3543 02fe 1344     		add	r3, r3, r2
 3544 0300 FB64     		str	r3, [r7, #76]
 3545              	.L231:
1179:..\src/interruptions.c ****             
1180:..\src/interruptions.c **** 
1181:..\src/interruptions.c ****             // Derivative
1182:..\src/interruptions.c ****             if (k_d != 0) 
 3546              		.loc 1 1182 0
 3547 0302 3B6B     		ldr	r3, [r7, #48]
 3548 0304 002B     		cmp	r3, #0
 3549 0306 0AD0     		beq	.L232
1183:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3550              		.loc 1 1183 0
 3551 0308 8F4B     		ldr	r3, .L268+8
 3552 030a 1B68     		ldr	r3, [r3]
 3553 030c BA68     		ldr	r2, [r7, #8]
 3554 030e D31A     		subs	r3, r2, r3
 3555 0310 3A6B     		ldr	r2, [r7, #48]
 3556 0312 02FB03F3 		mul	r3, r2, r3
 3557 0316 1B14     		asrs	r3, r3, #16
 3558 0318 FA6C     		ldr	r2, [r7, #76]
 3559 031a 1344     		add	r3, r3, r2
 3560 031c FB64     		str	r3, [r7, #76]
 3561              	.L232:
1184:..\src/interruptions.c ****             
1185:..\src/interruptions.c **** 
1186:..\src/interruptions.c ****             // Update measure
1187:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3562              		.loc 1 1187 0
 3563 031e 8A4A     		ldr	r2, .L268+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 86


 3564 0320 BB68     		ldr	r3, [r7, #8]
 3565 0322 1360     		str	r3, [r2]
1188:..\src/interruptions.c **** 
1189:..\src/interruptions.c ****             if (pwm_input > 0)
 3566              		.loc 1 1189 0
 3567 0324 FB6C     		ldr	r3, [r7, #76]
 3568 0326 002B     		cmp	r3, #0
 3569 0328 03DD     		ble	.L233
1190:..\src/interruptions.c ****                 motor_dir = TRUE;
 3570              		.loc 1 1190 0
 3571 032a 884B     		ldr	r3, .L268+12
 3572 032c 0122     		movs	r2, #1
 3573 032e 1A70     		strb	r2, [r3]
1191:..\src/interruptions.c ****             else
1192:..\src/interruptions.c ****                 motor_dir = FALSE;
1193:..\src/interruptions.c **** 
1194:..\src/interruptions.c ****         break;
 3574              		.loc 1 1194 0
 3575 0330 ADE0     		b	.L206
 3576              	.L233:
1192:..\src/interruptions.c **** 
 3577              		.loc 1 1192 0
 3578 0332 864B     		ldr	r3, .L268+12
 3579 0334 0022     		movs	r2, #0
 3580 0336 1A70     		strb	r2, [r3]
 3581              		.loc 1 1194 0
 3582 0338 A9E0     		b	.L206
 3583              	.L210:
1195:..\src/interruptions.c **** 
1196:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1197:..\src/interruptions.c ****         case CONTROL_CURRENT:
1198:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3584              		.loc 1 1198 0
 3585 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3586 033e 844A     		ldr	r2, .L268+16
 3587 0340 1B01     		lsls	r3, r3, #4
 3588 0342 1344     		add	r3, r3, r2
 3589 0344 0C33     		adds	r3, r3, #12
 3590 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3591 0348 002B     		cmp	r3, #0
 3592 034a 00F09D80 		beq	.L264
 3593              		.loc 1 1198 0 is_stmt 0 discriminator 1
 3594 034e 814B     		ldr	r3, .L268+20
 3595 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3596 0352 002B     		cmp	r3, #0
 3597 0354 00F09880 		beq	.L264
1199:..\src/interruptions.c ****                 
1200:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3598              		.loc 1 1200 0 is_stmt 1
 3599 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3600 035c 7C4A     		ldr	r2, .L268+16
 3601 035e 1B01     		lsls	r3, r3, #4
 3602 0360 1344     		add	r3, r3, r2
 3603 0362 0433     		adds	r3, r3, #4
 3604 0364 1B68     		ldr	r3, [r3]
 3605 0366 BB64     		str	r3, [r7, #72]
1201:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 87


1202:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3606              		.loc 1 1202 0
 3607 0368 3B6C     		ldr	r3, [r7, #64]
 3608 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3609 036e 1A46     		mov	r2, r3
 3610 0370 BB6C     		ldr	r3, [r7, #72]
 3611 0372 9A42     		cmp	r2, r3
 3612 0374 04DA     		bge	.L236
1203:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3613              		.loc 1 1203 0
 3614 0376 3B6C     		ldr	r3, [r7, #64]
 3615 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3616 037c BB64     		str	r3, [r7, #72]
 3617 037e 0BE0     		b	.L237
 3618              	.L236:
1204:..\src/interruptions.c ****                 else {
1205:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3619              		.loc 1 1205 0
 3620 0380 3B6C     		ldr	r3, [r7, #64]
 3621 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3622 0386 5A42     		negs	r2, r3
 3623 0388 BB6C     		ldr	r3, [r7, #72]
 3624 038a 9A42     		cmp	r2, r3
 3625 038c 04DD     		ble	.L237
1206:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3626              		.loc 1 1206 0
 3627 038e 3B6C     		ldr	r3, [r7, #64]
 3628 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3629 0394 5B42     		negs	r3, r3
 3630 0396 BB64     		str	r3, [r7, #72]
 3631              	.L237:
1207:..\src/interruptions.c ****                 }
1208:..\src/interruptions.c ****                 
1209:..\src/interruptions.c ****                 // current error
1210:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3632              		.loc 1 1210 0
 3633 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3634 039c 6E4A     		ldr	r2, .L268+24
 3635 039e 3421     		movs	r1, #52
 3636 03a0 01FB03F3 		mul	r3, r1, r3
 3637 03a4 1344     		add	r3, r3, r2
 3638 03a6 0C33     		adds	r3, r3, #12
 3639 03a8 1B68     		ldr	r3, [r3]
 3640 03aa BA6C     		ldr	r2, [r7, #72]
 3641 03ac D31A     		subs	r3, r2, r3
 3642 03ae 7B60     		str	r3, [r7, #4]
1211:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3643              		.loc 1 1211 0
 3644 03b0 6A4B     		ldr	r3, .L268+28
 3645 03b2 1A68     		ldr	r2, [r3]
 3646 03b4 7B68     		ldr	r3, [r7, #4]
 3647 03b6 1344     		add	r3, r3, r2
 3648 03b8 684A     		ldr	r2, .L268+28
 3649 03ba 1360     		str	r3, [r2]
1212:..\src/interruptions.c ****                 
1213:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3650              		.loc 1 1213 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 88


 3651 03bc 674B     		ldr	r3, .L268+28
 3652 03be 1B68     		ldr	r3, [r3]
 3653 03c0 674A     		ldr	r2, .L268+32
 3654 03c2 9342     		cmp	r3, r2
 3655 03c4 03DD     		ble	.L238
1214:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3656              		.loc 1 1214 0
 3657 03c6 654B     		ldr	r3, .L268+28
 3658 03c8 654A     		ldr	r2, .L268+32
 3659 03ca 1A60     		str	r2, [r3]
 3660 03cc 07E0     		b	.L239
 3661              	.L238:
1215:..\src/interruptions.c ****                 else {
1216:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3662              		.loc 1 1216 0
 3663 03ce 634B     		ldr	r3, .L268+28
 3664 03d0 1B68     		ldr	r3, [r3]
 3665 03d2 644A     		ldr	r2, .L268+36
 3666 03d4 9342     		cmp	r3, r2
 3667 03d6 02DA     		bge	.L239
1217:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3668              		.loc 1 1217 0
 3669 03d8 604B     		ldr	r3, .L268+28
 3670 03da 624A     		ldr	r2, .L268+36
 3671 03dc 1A60     		str	r2, [r3]
 3672              	.L239:
1218:..\src/interruptions.c ****                 }
1219:..\src/interruptions.c **** 
1220:..\src/interruptions.c ****                 pwm_input = 0;
 3673              		.loc 1 1220 0
 3674 03de 0023     		movs	r3, #0
 3675 03e0 FB64     		str	r3, [r7, #76]
1221:..\src/interruptions.c **** 
1222:..\src/interruptions.c ****                 // Proportional
1223:..\src/interruptions.c ****                 if (k_p_c != 0)
 3676              		.loc 1 1223 0
 3677 03e2 FB6A     		ldr	r3, [r7, #44]
 3678 03e4 002B     		cmp	r3, #0
 3679 03e6 07D0     		beq	.L240
1224:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3680              		.loc 1 1224 0
 3681 03e8 FB6A     		ldr	r3, [r7, #44]
 3682 03ea 7A68     		ldr	r2, [r7, #4]
 3683 03ec 02FB03F3 		mul	r3, r2, r3
 3684 03f0 1B14     		asrs	r3, r3, #16
 3685 03f2 FA6C     		ldr	r2, [r7, #76]
 3686 03f4 1344     		add	r3, r3, r2
 3687 03f6 FB64     		str	r3, [r7, #76]
 3688              	.L240:
1225:..\src/interruptions.c **** 
1226:..\src/interruptions.c ****                 // Integral
1227:..\src/interruptions.c ****                 if (k_i_c != 0)
 3689              		.loc 1 1227 0
 3690 03f8 BB6A     		ldr	r3, [r7, #40]
 3691 03fa 002B     		cmp	r3, #0
 3692 03fc 08D0     		beq	.L241
1228:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 89


 3693              		.loc 1 1228 0
 3694 03fe 574B     		ldr	r3, .L268+28
 3695 0400 1B68     		ldr	r3, [r3]
 3696 0402 BA6A     		ldr	r2, [r7, #40]
 3697 0404 02FB03F3 		mul	r3, r2, r3
 3698 0408 1B14     		asrs	r3, r3, #16
 3699 040a FA6C     		ldr	r2, [r7, #76]
 3700 040c 1344     		add	r3, r3, r2
 3701 040e FB64     		str	r3, [r7, #76]
 3702              	.L241:
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****                 // Derivative
1231:..\src/interruptions.c ****                 if (k_d_c != 0)
 3703              		.loc 1 1231 0
 3704 0410 7B6A     		ldr	r3, [r7, #36]
 3705 0412 002B     		cmp	r3, #0
 3706 0414 0AD0     		beq	.L242
1232:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3707              		.loc 1 1232 0
 3708 0416 544B     		ldr	r3, .L268+40
 3709 0418 1B68     		ldr	r3, [r3]
 3710 041a 7A68     		ldr	r2, [r7, #4]
 3711 041c D31A     		subs	r3, r2, r3
 3712 041e 7A6A     		ldr	r2, [r7, #36]
 3713 0420 02FB03F3 		mul	r3, r2, r3
 3714 0424 1B14     		asrs	r3, r3, #16
 3715 0426 FA6C     		ldr	r2, [r7, #76]
 3716 0428 1344     		add	r3, r3, r2
 3717 042a FB64     		str	r3, [r7, #76]
 3718              	.L242:
1233:..\src/interruptions.c ****                 
1234:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3719              		.loc 1 1234 0
 3720 042c 4E4A     		ldr	r2, .L268+40
 3721 042e 7B68     		ldr	r3, [r7, #4]
 3722 0430 1360     		str	r3, [r2]
1235:..\src/interruptions.c ****                 
1236:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3723              		.loc 1 1236 0
 3724 0432 FB6C     		ldr	r3, [r7, #76]
 3725 0434 002B     		cmp	r3, #0
 3726 0436 03DB     		blt	.L243
1237:..\src/interruptions.c ****                     motor_dir = TRUE;
 3727              		.loc 1 1237 0
 3728 0438 444B     		ldr	r3, .L268+12
 3729 043a 0122     		movs	r2, #1
 3730 043c 1A70     		strb	r2, [r3]
1238:..\src/interruptions.c ****                 else
1239:..\src/interruptions.c ****                     motor_dir = FALSE;
1240:..\src/interruptions.c ****             }
1241:..\src/interruptions.c ****         break;
 3731              		.loc 1 1241 0
 3732 043e 23E0     		b	.L264
 3733              	.L243:
1239:..\src/interruptions.c ****             }
 3734              		.loc 1 1239 0
 3735 0440 424B     		ldr	r3, .L268+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 90


 3736 0442 0022     		movs	r2, #0
 3737 0444 1A70     		strb	r2, [r3]
 3738              		.loc 1 1241 0
 3739 0446 1FE0     		b	.L264
 3740              	.L209:
1242:..\src/interruptions.c ****         
1243:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1244:..\src/interruptions.c ****         case CONTROL_PWM:
1245:..\src/interruptions.c **** 
1246:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3741              		.loc 1 1246 0
 3742 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3743 044c 404A     		ldr	r2, .L268+16
 3744 044e 1B01     		lsls	r3, r3, #4
 3745 0450 1344     		add	r3, r3, r2
 3746 0452 0833     		adds	r3, r3, #8
 3747 0454 1B68     		ldr	r3, [r3]
 3748 0456 FB64     		str	r3, [r7, #76]
1247:..\src/interruptions.c **** 
1248:..\src/interruptions.c ****             if (pwm_input > 0) 
 3749              		.loc 1 1248 0
 3750 0458 FB6C     		ldr	r3, [r7, #76]
 3751 045a 002B     		cmp	r3, #0
 3752 045c 03DD     		ble	.L244
1249:..\src/interruptions.c ****                 motor_dir = TRUE;
 3753              		.loc 1 1249 0
 3754 045e 3B4B     		ldr	r3, .L268+12
 3755 0460 0122     		movs	r2, #1
 3756 0462 1A70     		strb	r2, [r3]
 3757 0464 02E0     		b	.L245
 3758              	.L244:
1250:..\src/interruptions.c ****             else 
1251:..\src/interruptions.c ****                 motor_dir = FALSE;
 3759              		.loc 1 1251 0
 3760 0466 394B     		ldr	r3, .L268+12
 3761 0468 0022     		movs	r2, #0
 3762 046a 1A70     		strb	r2, [r3]
 3763              	.L245:
1252:..\src/interruptions.c ****             
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****             // pwm_input saturation
1255:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3764              		.loc 1 1255 0
 3765 046c FB6C     		ldr	r3, [r7, #76]
 3766 046e 13F1640F 		cmn	r3, #100
 3767 0472 03DA     		bge	.L246
1256:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3768              		.loc 1 1256 0
 3769 0474 6FF06303 		mvn	r3, #99
 3770 0478 FB64     		str	r3, [r7, #76]
1257:..\src/interruptions.c ****             else {
1258:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1259:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1260:..\src/interruptions.c ****         	}
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****         break;
 3771              		.loc 1 1262 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 91


 3772 047a 07E0     		b	.L265
 3773              	.L246:
1258:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3774              		.loc 1 1258 0
 3775 047c FB6C     		ldr	r3, [r7, #76]
 3776 047e 642B     		cmp	r3, #100
 3777 0480 04DD     		ble	.L265
1259:..\src/interruptions.c ****         	}
 3778              		.loc 1 1259 0
 3779 0482 6423     		movs	r3, #100
 3780 0484 FB64     		str	r3, [r7, #76]
 3781              		.loc 1 1262 0
 3782 0486 01E0     		b	.L265
 3783              	.L264:
1241:..\src/interruptions.c ****         
 3784              		.loc 1 1241 0
 3785 0488 00BF     		nop
 3786 048a 00E0     		b	.L206
 3787              	.L265:
 3788              		.loc 1 1262 0
 3789 048c 00BF     		nop
 3790              	.L206:
1263:..\src/interruptions.c ****             
1264:..\src/interruptions.c ****     }
1265:..\src/interruptions.c **** 
1266:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1267:..\src/interruptions.c **** 
1268:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3791              		.loc 1 1268 0
 3792 048e FB6C     		ldr	r3, [r7, #76]
 3793 0490 642B     		cmp	r3, #100
 3794 0492 01DD     		ble	.L248
1269:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3795              		.loc 1 1269 0
 3796 0494 6423     		movs	r3, #100
 3797 0496 FB64     		str	r3, [r7, #76]
 3798              	.L248:
1270:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3799              		.loc 1 1270 0
 3800 0498 FB6C     		ldr	r3, [r7, #76]
 3801 049a 13F1640F 		cmn	r3, #100
 3802 049e 02DA     		bge	.L249
1271:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3803              		.loc 1 1271 0
 3804 04a0 6FF06303 		mvn	r3, #99
 3805 04a4 FB64     		str	r3, [r7, #76]
 3806              	.L249:
1272:..\src/interruptions.c **** 
1273:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3807              		.loc 1 1273 0
 3808 04a6 3B6C     		ldr	r3, [r7, #64]
 3809 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3810 04ac 012B     		cmp	r3, #1
 3811 04ae 0DD0     		beq	.L250
1274:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3812              		.loc 1 1274 0
 3813 04b0 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 92


 3814 04b2 9B02     		lsls	r3, r3, #10
 3815 04b4 2D4A     		ldr	r2, .L268+44
 3816 04b6 82FB0312 		smull	r1, r2, r2, r3
 3817 04ba 5211     		asrs	r2, r2, #5
 3818 04bc DB17     		asrs	r3, r3, #31
 3819 04be D31A     		subs	r3, r2, r3
 3820 04c0 2B4A     		ldr	r2, .L268+48
 3821 04c2 1288     		ldrh	r2, [r2]
 3822 04c4 02FB03F3 		mul	r3, r2, r3
 3823 04c8 9B12     		asrs	r3, r3, #10
 3824 04ca FB64     		str	r3, [r7, #76]
 3825              	.L250:
1275:..\src/interruptions.c ****  
1276:..\src/interruptions.c ****     //// RATE LIMITER ////
1277:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3826              		.loc 1 1277 0
 3827 04cc 294B     		ldr	r3, .L268+52
 3828 04ce 1B68     		ldr	r3, [r3]
 3829 04d0 FA6C     		ldr	r2, [r7, #76]
 3830 04d2 D31A     		subs	r3, r2, r3
 3831 04d4 3A6C     		ldr	r2, [r7, #64]
 3832 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3833 04da 9342     		cmp	r3, r2
 3834 04dc 08DD     		ble	.L251
1278:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3835              		.loc 1 1278 0
 3836 04de 3B6C     		ldr	r3, [r7, #64]
 3837 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3838 04e4 1A46     		mov	r2, r3
 3839 04e6 234B     		ldr	r3, .L268+52
 3840 04e8 1B68     		ldr	r3, [r3]
 3841 04ea 1344     		add	r3, r3, r2
 3842 04ec FB64     		str	r3, [r7, #76]
 3843 04ee 10E0     		b	.L252
 3844              	.L251:
1279:..\src/interruptions.c ****     }
1280:..\src/interruptions.c ****     else {
1281:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3845              		.loc 1 1281 0
 3846 04f0 204B     		ldr	r3, .L268+52
 3847 04f2 1B68     		ldr	r3, [r3]
 3848 04f4 FA6C     		ldr	r2, [r7, #76]
 3849 04f6 D21A     		subs	r2, r2, r3
 3850 04f8 3B6C     		ldr	r3, [r7, #64]
 3851 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3852 04fe 5B42     		negs	r3, r3
 3853 0500 9A42     		cmp	r2, r3
 3854 0502 06DA     		bge	.L252
1282:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3855              		.loc 1 1282 0
 3856 0504 1B4B     		ldr	r3, .L268+52
 3857 0506 1B68     		ldr	r3, [r3]
 3858 0508 3A6C     		ldr	r2, [r7, #64]
 3859 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3860 050e 9B1A     		subs	r3, r3, r2
 3861 0510 FB64     		str	r3, [r7, #76]
 3862              	.L252:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 93


1283:..\src/interruptions.c ****     }
1284:..\src/interruptions.c ****     
1285:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3863              		.loc 1 1285 0
 3864 0512 FB6C     		ldr	r3, [r7, #76]
 3865 0514 642B     		cmp	r3, #100
 3866 0516 01DD     		ble	.L253
1286:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3867              		.loc 1 1286 0
 3868 0518 6423     		movs	r3, #100
 3869 051a FB64     		str	r3, [r7, #76]
 3870              	.L253:
1287:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3871              		.loc 1 1287 0
 3872 051c FB6C     		ldr	r3, [r7, #76]
 3873 051e 13F1640F 		cmn	r3, #100
 3874 0522 02DA     		bge	.L254
1288:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3875              		.loc 1 1288 0
 3876 0524 6FF06303 		mvn	r3, #99
 3877 0528 FB64     		str	r3, [r7, #76]
 3878              	.L254:
1289:..\src/interruptions.c ****     
1290:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3879              		.loc 1 1290 0
 3880 052a 124A     		ldr	r2, .L268+52
 3881 052c FB6C     		ldr	r3, [r7, #76]
 3882 052e 1360     		str	r3, [r2]
1291:..\src/interruptions.c **** 	
1292:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3883              		.loc 1 1292 0
 3884 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3885 0534 FA6C     		ldr	r2, [r7, #76]
 3886 0536 002A     		cmp	r2, #0
 3887 0538 1EDB     		blt	.L255
 3888              		.loc 1 1292 0 is_stmt 0 discriminator 1
 3889 053a 0121     		movs	r1, #1
 3890 053c 1EE0     		b	.L256
 3891              	.L269:
 3892 053e 00BF     		.align	2
 3893              	.L268:
 3894 0540 90000000 		.word	pos_error_sum.10573
 3895 0544 18FCFFFF 		.word	-1000
 3896 0548 94000000 		.word	prev_pos_err.10575
 3897 054c 98000000 		.word	motor_dir.10578
 3898 0550 00000000 		.word	g_ref
 3899 0554 00000000 		.word	tension_valid
 3900 0558 00000000 		.word	g_meas
 3901 055c 9C000000 		.word	curr_error_sum.10574
 3902 0560 A0860100 		.word	100000
 3903 0564 6079FEFF 		.word	-100000
 3904 0568 A0000000 		.word	prev_curr_err.10576
 3905 056c 1F85EB51 		.word	1374389535
 3906 0570 00000000 		.word	dev_pwm_limit
 3907 0574 A4000000 		.word	prev_pwm.10577
 3908              	.L255:
 3909              		.loc 1 1292 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 94


 3910 0578 4FF0FF31 		mov	r1, #-1
 3911              	.L256:
 3912              		.loc 1 1292 0 discriminator 4
 3913 057c 5A4A     		ldr	r2, .L270
 3914 057e D154     		strb	r1, [r2, r3]
1293:..\src/interruptions.c ****     
1294:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3915              		.loc 1 1294 0 is_stmt 1 discriminator 4
 3916 0580 3B6C     		ldr	r3, [r7, #64]
 3917 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3918 0586 012B     		cmp	r3, #1
 3919 0588 40F09680 		bne	.L257
1295:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1296:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3920              		.loc 1 1296 0
 3921 058c 3B6C     		ldr	r3, [r7, #64]
 3922 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3923 0592 012B     		cmp	r3, #1
 3924 0594 00F08D80 		beq	.L258
 3925              		.loc 1 1296 0 is_stmt 0 discriminator 1
 3926 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3927 059c 534A     		ldr	r2, .L270+4
 3928 059e 3421     		movs	r1, #52
 3929 05a0 01FB03F3 		mul	r3, r1, r3
 3930 05a4 1344     		add	r3, r3, r2
 3931 05a6 1A68     		ldr	r2, [r3]
 3932 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3933 05ac 5049     		ldr	r1, .L270+8
 3934 05ae 3420     		movs	r0, #52
 3935 05b0 00FB03F3 		mul	r3, r0, r3
 3936 05b4 0B44     		add	r3, r3, r1
 3937 05b6 1B68     		ldr	r3, [r3]
 3938 05b8 D31A     		subs	r3, r2, r3
 3939 05ba 312B     		cmp	r3, #49
 3940 05bc 79DC     		bgt	.L258
1297:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3941              		.loc 1 1297 0 is_stmt 1 discriminator 2
 3942 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3943 05c2 4A4A     		ldr	r2, .L270+4
 3944 05c4 3421     		movs	r1, #52
 3945 05c6 01FB03F3 		mul	r3, r1, r3
 3946 05ca 1344     		add	r3, r3, r2
 3947 05cc 1A68     		ldr	r2, [r3]
 3948 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3949 05d2 4749     		ldr	r1, .L270+8
 3950 05d4 3420     		movs	r0, #52
 3951 05d6 00FB03F3 		mul	r3, r0, r3
 3952 05da 0B44     		add	r3, r3, r1
 3953 05dc 1B68     		ldr	r3, [r3]
 3954 05de D31A     		subs	r3, r2, r3
1296:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3955              		.loc 1 1296 0 discriminator 2
 3956 05e0 13F1310F 		cmn	r3, #49
 3957 05e4 65DB     		blt	.L258
1298:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3958              		.loc 1 1298 0
 3959 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 95


 3960 05ea 424A     		ldr	r2, .L270+12
 3961 05ec 1B01     		lsls	r3, r3, #4
 3962 05ee 1344     		add	r3, r3, r2
 3963 05f0 1A68     		ldr	r2, [r3]
 3964 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3965 05f6 4049     		ldr	r1, .L270+16
 3966 05f8 1B01     		lsls	r3, r3, #4
 3967 05fa 0B44     		add	r3, r3, r1
 3968 05fc 1B68     		ldr	r3, [r3]
 3969 05fe D31A     		subs	r3, r2, r3
1297:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3970              		.loc 1 1297 0
 3971 0600 632B     		cmp	r3, #99
 3972 0602 56DC     		bgt	.L258
 3973              		.loc 1 1298 0
 3974 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3975 0608 3A4A     		ldr	r2, .L270+12
 3976 060a 1B01     		lsls	r3, r3, #4
 3977 060c 1344     		add	r3, r3, r2
 3978 060e 1A68     		ldr	r2, [r3]
 3979 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3980 0614 3849     		ldr	r1, .L270+16
 3981 0616 1B01     		lsls	r3, r3, #4
 3982 0618 0B44     		add	r3, r3, r1
 3983 061a 1B68     		ldr	r3, [r3]
 3984 061c D31A     		subs	r3, r2, r3
 3985 061e 13F1630F 		cmn	r3, #99
 3986 0622 46DB     		blt	.L258
1299:..\src/interruptions.c ****             position_counter++;
 3987              		.loc 1 1299 0
 3988 0624 354B     		ldr	r3, .L270+20
 3989 0626 1B68     		ldr	r3, [r3]
 3990 0628 0133     		adds	r3, r3, #1
 3991 062a 344A     		ldr	r2, .L270+20
 3992 062c 1360     		str	r3, [r2]
1300:..\src/interruptions.c ****             
1301:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3993              		.loc 1 1301 0
 3994 062e 334B     		ldr	r3, .L270+20
 3995 0630 1B68     		ldr	r3, [r3]
 3996 0632 F92B     		cmp	r3, #249
 3997 0634 40D9     		bls	.L257
1302:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3998              		.loc 1 1302 0
 3999 0636 3B6C     		ldr	r3, [r7, #64]
 4000 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4001 063c 002B     		cmp	r3, #0
 4002 063e 11D1     		bne	.L260
 4003              		.loc 1 1302 0 is_stmt 0 discriminator 1
 4004 0640 2F4B     		ldr	r3, .L270+24
 4005 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4006 0644 002B     		cmp	r3, #0
 4007 0646 0DD1     		bne	.L260
1303:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 4008              		.loc 1 1303 0 is_stmt 1
 4009 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4010 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 96


 4011 0650 2749     		ldr	r1, .L270+8
 4012 0652 3420     		movs	r0, #52
 4013 0654 00FB02F2 		mul	r2, r0, r2
 4014 0658 0A44     		add	r2, r2, r1
 4015 065a 1268     		ldr	r2, [r2]
 4016 065c 2949     		ldr	r1, .L270+28
 4017 065e 1B01     		lsls	r3, r3, #4
 4018 0660 0B44     		add	r3, r3, r1
 4019 0662 1A60     		str	r2, [r3]
 4020              	.L260:
1304:..\src/interruptions.c ****                 }
1305:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 4021              		.loc 1 1305 0
 4022 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4023 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 4024 066c 2049     		ldr	r1, .L270+8
 4025 066e 3420     		movs	r0, #52
 4026 0670 00FB02F2 		mul	r2, r0, r2
 4027 0674 0A44     		add	r2, r2, r1
 4028 0676 1268     		ldr	r2, [r2]
 4029 0678 1F49     		ldr	r1, .L270+16
 4030 067a 1B01     		lsls	r3, r3, #4
 4031 067c 0B44     		add	r3, r3, r1
 4032 067e 1A60     		str	r2, [r3]
1306:..\src/interruptions.c ****                 
1307:..\src/interruptions.c ****                 if (position_counter == 250){
 4033              		.loc 1 1307 0
 4034 0680 1E4B     		ldr	r3, .L270+20
 4035 0682 1B68     		ldr	r3, [r3]
 4036 0684 FA2B     		cmp	r3, #250
 4037 0686 11D1     		bne	.L261
1308:..\src/interruptions.c ****                     // To do only once
1309:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 4038              		.loc 1 1309 0
 4039 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 4040 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 4041 0690 1749     		ldr	r1, .L270+8
 4042 0692 3420     		movs	r0, #52
 4043 0694 00FB02F2 		mul	r2, r0, r2
 4044 0698 0A44     		add	r2, r2, r1
 4045 069a 0C32     		adds	r2, r2, #12
 4046 069c 1268     		ldr	r2, [r2]
 4047 069e 1449     		ldr	r1, .L270+8
 4048 06a0 3420     		movs	r0, #52
 4049 06a2 00FB03F3 		mul	r3, r0, r3
 4050 06a6 0B44     		add	r3, r3, r1
 4051 06a8 1433     		adds	r3, r3, #20
 4052 06aa 1A60     		str	r2, [r3]
 4053              	.L261:
1310:..\src/interruptions.c ****                 }
1311:..\src/interruptions.c ****                 pwm_input = 0;            
 4054              		.loc 1 1311 0
 4055 06ac 0023     		movs	r3, #0
 4056 06ae FB64     		str	r3, [r7, #76]
1301:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4057              		.loc 1 1301 0
 4058 06b0 02E0     		b	.L257
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 97


 4059              	.L258:
1312:..\src/interruptions.c ****             }
1313:..\src/interruptions.c ****         }
1314:..\src/interruptions.c ****         else {
1315:..\src/interruptions.c ****             position_counter = 0;
 4060              		.loc 1 1315 0
 4061 06b2 124B     		ldr	r3, .L270+20
 4062 06b4 0022     		movs	r2, #0
 4063 06b6 1A60     		str	r2, [r3]
 4064              	.L257:
1316:..\src/interruptions.c ****         }
1317:..\src/interruptions.c ****     }
1318:..\src/interruptions.c ****     
1319:..\src/interruptions.c ****     if (motor_dir)
 4065              		.loc 1 1319 0
 4066 06b8 134B     		ldr	r3, .L270+32
 4067 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4068 06bc 002B     		cmp	r3, #0
 4069 06be 03D0     		beq	.L262
1320:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4070              		.loc 1 1320 0
 4071 06c0 0120     		movs	r0, #1
 4072 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4073 06c6 02E0     		b	.L263
 4074              	.L262:
1321:..\src/interruptions.c ****     else
1322:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4075              		.loc 1 1322 0
 4076 06c8 0020     		movs	r0, #0
 4077 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4078              	.L263:
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4079              		.loc 1 1324 0
 4080 06ce FB6C     		ldr	r3, [r7, #76]
 4081 06d0 002B     		cmp	r3, #0
 4082 06d2 B8BF     		it	lt
 4083 06d4 5B42     		rsblt	r3, r3, #0
 4084 06d6 DBB2     		uxtb	r3, r3
 4085 06d8 1846     		mov	r0, r3
 4086 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1325:..\src/interruptions.c **** }
 4087              		.loc 1 1325 0
 4088 06de 00BF     		nop
 4089 06e0 5037     		adds	r7, r7, #80
 4090              		.cfi_def_cfa_offset 8
 4091 06e2 BD46     		mov	sp, r7
 4092              		.cfi_def_cfa_register 13
 4093              		@ sp needed
 4094 06e4 80BD     		pop	{r7, pc}
 4095              	.L271:
 4096 06e6 00BF     		.align	2
 4097              	.L270:
 4098 06e8 00000000 		.word	pwm_sign
 4099 06ec 00000000 		.word	g_measOld
 4100 06f0 00000000 		.word	g_meas
 4101 06f4 00000000 		.word	g_refOld
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 98


 4102 06f8 00000000 		.word	g_ref
 4103 06fc A8000000 		.word	position_counter.10579
 4104 0700 00000000 		.word	change_ext_ref_flag
 4105 0704 00000000 		.word	g_refNew
 4106 0708 98000000 		.word	motor_dir.10578
 4107              		.cfi_endproc
 4108              	.LFE71:
 4109              		.size	motor_control_SH, .-motor_control_SH
 4110              		.section	.text.motor_control_generic,"ax",%progbits
 4111              		.align	2
 4112              		.global	motor_control_generic
 4113              		.thumb
 4114              		.thumb_func
 4115              		.type	motor_control_generic, %function
 4116              	motor_control_generic:
 4117              	.LFB72:
1326:..\src/interruptions.c **** 
1327:..\src/interruptions.c **** //==============================================================================
1328:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1329:..\src/interruptions.c **** //==============================================================================
1330:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4118              		.loc 1 1330 0
 4119              		.cfi_startproc
 4120              		@ args = 0, pretend = 0, frame = 80
 4121              		@ frame_needed = 1, uses_anonymous_args = 0
 4122 0000 90B5     		push	{r4, r7, lr}
 4123              		.cfi_def_cfa_offset 12
 4124              		.cfi_offset 4, -12
 4125              		.cfi_offset 7, -8
 4126              		.cfi_offset 14, -4
 4127 0002 95B0     		sub	sp, sp, #84
 4128              		.cfi_def_cfa_offset 96
 4129 0004 00AF     		add	r7, sp, #0
 4130              		.cfi_def_cfa_register 7
 4131 0006 0346     		mov	r3, r0
 4132 0008 FB71     		strb	r3, [r7, #7]
1331:..\src/interruptions.c ****     
1332:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4133              		.loc 1 1332 0
 4134 000a 0023     		movs	r3, #0
 4135 000c FB64     		str	r3, [r7, #76]
1333:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1334:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1335:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1336:..\src/interruptions.c **** 
1337:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4136              		.loc 1 1337 0
 4137 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4138 0010 1346     		mov	r3, r2
 4139 0012 DB00     		lsls	r3, r3, #3
 4140 0014 9B1A     		subs	r3, r3, r2
 4141 0016 1B01     		lsls	r3, r3, #4
 4142 0018 B033     		adds	r3, r3, #176
 4143 001a 9D4A     		ldr	r2, .L363
 4144 001c 1344     		add	r3, r3, r2
 4145 001e 7B64     		str	r3, [r7, #68]
1338:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 99


 4146              		.loc 1 1338 0
 4147 0020 7B6C     		ldr	r3, [r7, #68]
 4148 0022 93F86030 		ldrb	r3, [r3, #96]
 4149 0026 87F84330 		strb	r3, [r7, #67]
1339:..\src/interruptions.c ****     
1340:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4150              		.loc 1 1340 0
 4151 002a 7B6C     		ldr	r3, [r7, #68]
 4152 002c 1B68     		ldr	r3, [r3]
 4153 002e FB63     		str	r3, [r7, #60]
1341:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4154              		.loc 1 1341 0
 4155 0030 7B6C     		ldr	r3, [r7, #68]
 4156 0032 5B68     		ldr	r3, [r3, #4]
 4157 0034 BB63     		str	r3, [r7, #56]
1342:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4158              		.loc 1 1342 0
 4159 0036 7B6C     		ldr	r3, [r7, #68]
 4160 0038 9B68     		ldr	r3, [r3, #8]
 4161 003a 7B63     		str	r3, [r7, #52]
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4162              		.loc 1 1344 0
 4163 003c 7B6C     		ldr	r3, [r7, #68]
 4164 003e DB68     		ldr	r3, [r3, #12]
 4165 0040 3B63     		str	r3, [r7, #48]
1345:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4166              		.loc 1 1345 0
 4167 0042 7B6C     		ldr	r3, [r7, #68]
 4168 0044 1B69     		ldr	r3, [r3, #16]
 4169 0046 FB62     		str	r3, [r7, #44]
1346:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4170              		.loc 1 1346 0
 4171 0048 7B6C     		ldr	r3, [r7, #68]
 4172 004a 5B69     		ldr	r3, [r3, #20]
 4173 004c BB62     		str	r3, [r7, #40]
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4174              		.loc 1 1348 0
 4175 004e 7B6C     		ldr	r3, [r7, #68]
 4176 0050 9B69     		ldr	r3, [r3, #24]
 4177 0052 7B62     		str	r3, [r7, #36]
1349:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4178              		.loc 1 1349 0
 4179 0054 7B6C     		ldr	r3, [r7, #68]
 4180 0056 DB69     		ldr	r3, [r3, #28]
 4181 0058 3B62     		str	r3, [r7, #32]
1350:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4182              		.loc 1 1350 0
 4183 005a 7B6C     		ldr	r3, [r7, #68]
 4184 005c 1B6A     		ldr	r3, [r3, #32]
 4185 005e FB61     		str	r3, [r7, #28]
1351:..\src/interruptions.c ****     
1352:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4186              		.loc 1 1352 0
 4187 0060 7B6C     		ldr	r3, [r7, #68]
 4188 0062 5B6A     		ldr	r3, [r3, #36]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 100


 4189 0064 BB61     		str	r3, [r7, #24]
1353:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4190              		.loc 1 1353 0
 4191 0066 7B6C     		ldr	r3, [r7, #68]
 4192 0068 9B6A     		ldr	r3, [r3, #40]
 4193 006a 7B61     		str	r3, [r7, #20]
1354:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4194              		.loc 1 1354 0
 4195 006c 7B6C     		ldr	r3, [r7, #68]
 4196 006e DB6A     		ldr	r3, [r3, #44]
 4197 0070 3B61     		str	r3, [r7, #16]
1355:..\src/interruptions.c **** 
1356:..\src/interruptions.c ****     // Static Variables
1357:..\src/interruptions.c **** 
1358:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1359:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1360:..\src/interruptions.c ****     
1361:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1362:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1363:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1366:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1367:..\src/interruptions.c **** 
1368:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1369:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4198              		.loc 1 1369 0
 4199 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4200 0074 1B01     		lsls	r3, r3, #4
 4201 0076 874A     		ldr	r2, .L363+4
 4202 0078 9918     		adds	r1, r3, r2
 4203 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4204 007c 1B01     		lsls	r3, r3, #4
 4205 007e 864A     		ldr	r2, .L363+8
 4206 0080 1A44     		add	r2, r2, r3
 4207 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4208 0084 1846     		mov	r0, r3
 4209 0086 FFF7FEFF 		bl	compute_reference
1370:..\src/interruptions.c ****     
1371:..\src/interruptions.c ****    
1372:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4210              		.loc 1 1372 0
 4211 008a 7B6C     		ldr	r3, [r7, #68]
 4212 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4213 0090 032B     		cmp	r3, #3
 4214 0092 00F28082 		bhi	.L273
 4215 0096 01A2     		adr	r2, .L275
 4216 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4217              		.p2align 2
 4218              	.L275:
 4219 009c ED020000 		.word	.L274+1
 4220 00a0 F7040000 		.word	.L276+1
 4221 00a4 C5030000 		.word	.L277+1
 4222 00a8 AD000000 		.word	.L278+1
 4223              		.p2align 1
 4224              	.L278:
1373:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 101


1374:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1375:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4225              		.loc 1 1375 0
 4226 00ac 794B     		ldr	r3, .L363+4
 4227 00ae 1A68     		ldr	r2, [r3]
 4228 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4229 00b4 7949     		ldr	r1, .L363+12
 4230 00b6 3420     		movs	r0, #52
 4231 00b8 00FB03F3 		mul	r3, r0, r3
 4232 00bc 0B44     		add	r3, r3, r1
 4233 00be 1B68     		ldr	r3, [r3]
 4234 00c0 D31A     		subs	r3, r2, r3
 4235 00c2 FB60     		str	r3, [r7, #12]
1376:..\src/interruptions.c **** 
1377:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4236              		.loc 1 1377 0
 4237 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4238 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4239 00c8 7549     		ldr	r1, .L363+16
 4240 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4241 00ce FA68     		ldr	r2, [r7, #12]
 4242 00d0 0A44     		add	r2, r2, r1
 4243 00d2 7349     		ldr	r1, .L363+16
 4244 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****             // error_sum saturation
1380:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4245              		.loc 1 1380 0
 4246 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4247 00da 714A     		ldr	r2, .L363+16
 4248 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4249 00e0 704A     		ldr	r2, .L363+20
 4250 00e2 9342     		cmp	r3, r2
 4251 00e4 05DD     		ble	.L279
1381:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4252              		.loc 1 1381 0
 4253 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4254 00e8 6D4A     		ldr	r2, .L363+16
 4255 00ea 6E49     		ldr	r1, .L363+20
 4256 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4257 00f0 0BE0     		b	.L280
 4258              	.L279:
1382:..\src/interruptions.c ****             else {
1383:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4259              		.loc 1 1383 0
 4260 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4261 00f4 6A4A     		ldr	r2, .L363+16
 4262 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4263 00fa 6B4A     		ldr	r2, .L363+24
 4264 00fc 9342     		cmp	r3, r2
 4265 00fe 04DA     		bge	.L280
1384:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4266              		.loc 1 1384 0
 4267 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4268 0102 674A     		ldr	r2, .L363+16
 4269 0104 6849     		ldr	r1, .L363+24
 4270 0106 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 102


 4271              	.L280:
1385:..\src/interruptions.c ****             }
1386:..\src/interruptions.c ****             
1387:..\src/interruptions.c ****             // ------ position PID control ------
1388:..\src/interruptions.c **** 
1389:..\src/interruptions.c ****             i_ref = 0;
 4272              		.loc 1 1389 0
 4273 010a 0023     		movs	r3, #0
 4274 010c BB64     		str	r3, [r7, #72]
1390:..\src/interruptions.c ****             
1391:..\src/interruptions.c ****             // Proportional
1392:..\src/interruptions.c ****             if (k_p_dl != 0)
 4275              		.loc 1 1392 0
 4276 010e 7B6A     		ldr	r3, [r7, #36]
 4277 0110 002B     		cmp	r3, #0
 4278 0112 07D0     		beq	.L281
1393:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4279              		.loc 1 1393 0
 4280 0114 7B6A     		ldr	r3, [r7, #36]
 4281 0116 FA68     		ldr	r2, [r7, #12]
 4282 0118 02FB03F3 		mul	r3, r2, r3
 4283 011c 1B14     		asrs	r3, r3, #16
 4284 011e BA6C     		ldr	r2, [r7, #72]
 4285 0120 1344     		add	r3, r3, r2
 4286 0122 BB64     		str	r3, [r7, #72]
 4287              	.L281:
1394:..\src/interruptions.c **** 
1395:..\src/interruptions.c ****             // Integral
1396:..\src/interruptions.c ****             if (k_i_dl != 0)
 4288              		.loc 1 1396 0
 4289 0124 3B6A     		ldr	r3, [r7, #32]
 4290 0126 002B     		cmp	r3, #0
 4291 0128 0AD0     		beq	.L282
1397:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4292              		.loc 1 1397 0
 4293 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4294 012c 5C4A     		ldr	r2, .L363+16
 4295 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4296 0132 3A6A     		ldr	r2, [r7, #32]
 4297 0134 02FB03F3 		mul	r3, r2, r3
 4298 0138 1B14     		asrs	r3, r3, #16
 4299 013a BA6C     		ldr	r2, [r7, #72]
 4300 013c 1344     		add	r3, r3, r2
 4301 013e BB64     		str	r3, [r7, #72]
 4302              	.L282:
1398:..\src/interruptions.c **** 
1399:..\src/interruptions.c ****             // Derivative
1400:..\src/interruptions.c ****             if (k_d_dl != 0)
 4303              		.loc 1 1400 0
 4304 0140 FB69     		ldr	r3, [r7, #28]
 4305 0142 002B     		cmp	r3, #0
 4306 0144 0CD0     		beq	.L283
1401:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4307              		.loc 1 1401 0
 4308 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4309 0148 584A     		ldr	r2, .L363+28
 4310 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 103


 4311 014e FA68     		ldr	r2, [r7, #12]
 4312 0150 D31A     		subs	r3, r2, r3
 4313 0152 FA69     		ldr	r2, [r7, #28]
 4314 0154 02FB03F3 		mul	r3, r2, r3
 4315 0158 1B14     		asrs	r3, r3, #16
 4316 015a BA6C     		ldr	r2, [r7, #72]
 4317 015c 1344     		add	r3, r3, r2
 4318 015e BB64     		str	r3, [r7, #72]
 4319              	.L283:
1402:..\src/interruptions.c ****                         
1403:..\src/interruptions.c ****             // Update previous position
1404:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4320              		.loc 1 1404 0
 4321 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4322 0162 5249     		ldr	r1, .L363+28
 4323 0164 FA68     		ldr	r2, [r7, #12]
 4324 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1405:..\src/interruptions.c **** 
1406:..\src/interruptions.c ****             // motor direction depends on i_ref
1407:..\src/interruptions.c ****             if (i_ref >= 0)
 4325              		.loc 1 1407 0
 4326 016a BB6C     		ldr	r3, [r7, #72]
 4327 016c 002B     		cmp	r3, #0
 4328 016e 04DB     		blt	.L284
1408:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4329              		.loc 1 1408 0
 4330 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4331 0172 4F4A     		ldr	r2, .L363+32
 4332 0174 0121     		movs	r1, #1
 4333 0176 D154     		strb	r1, [r2, r3]
 4334 0178 03E0     		b	.L285
 4335              	.L284:
1409:..\src/interruptions.c ****             else
1410:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4336              		.loc 1 1410 0
 4337 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4338 017c 4C4A     		ldr	r2, .L363+32
 4339 017e 0021     		movs	r1, #0
 4340 0180 D154     		strb	r1, [r2, r3]
 4341              	.L285:
1411:..\src/interruptions.c **** 
1412:..\src/interruptions.c ****             // saturate max current
1413:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4342              		.loc 1 1413 0
 4343 0182 7B6C     		ldr	r3, [r7, #68]
 4344 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4345 0188 1A46     		mov	r2, r3
 4346 018a BB6C     		ldr	r3, [r7, #72]
 4347 018c 9A42     		cmp	r2, r3
 4348 018e 04DA     		bge	.L286
1414:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4349              		.loc 1 1414 0
 4350 0190 7B6C     		ldr	r3, [r7, #68]
 4351 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4352 0196 BB64     		str	r3, [r7, #72]
 4353 0198 0BE0     		b	.L287
 4354              	.L286:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 104


1415:..\src/interruptions.c ****             else {
1416:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4355              		.loc 1 1416 0
 4356 019a 7B6C     		ldr	r3, [r7, #68]
 4357 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4358 01a0 5A42     		negs	r2, r3
 4359 01a2 BB6C     		ldr	r3, [r7, #72]
 4360 01a4 9A42     		cmp	r2, r3
 4361 01a6 04DD     		ble	.L287
1417:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4362              		.loc 1 1417 0
 4363 01a8 7B6C     		ldr	r3, [r7, #68]
 4364 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4365 01ae 5B42     		negs	r3, r3
 4366 01b0 BB64     		str	r3, [r7, #72]
 4367              	.L287:
1418:..\src/interruptions.c ****         	}
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****             // current error and curr error sum
1421:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4368              		.loc 1 1421 0
 4369 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4370 01b6 394A     		ldr	r2, .L363+12
 4371 01b8 3421     		movs	r1, #52
 4372 01ba 01FB03F3 		mul	r3, r1, r3
 4373 01be 1344     		add	r3, r3, r2
 4374 01c0 0C33     		adds	r3, r3, #12
 4375 01c2 1B68     		ldr	r3, [r3]
 4376 01c4 BA6C     		ldr	r2, [r7, #72]
 4377 01c6 D31A     		subs	r3, r2, r3
 4378 01c8 BB60     		str	r3, [r7, #8]
1422:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4379              		.loc 1 1422 0
 4380 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4381 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4382 01ce 3949     		ldr	r1, .L363+36
 4383 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4384 01d4 BA68     		ldr	r2, [r7, #8]
 4385 01d6 0A44     		add	r2, r2, r1
 4386 01d8 3649     		ldr	r1, .L363+36
 4387 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1423:..\src/interruptions.c ****             
1424:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4388              		.loc 1 1424 0
 4389 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4390 01e0 344A     		ldr	r2, .L363+36
 4391 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4392 01e6 344A     		ldr	r2, .L363+40
 4393 01e8 9342     		cmp	r3, r2
 4394 01ea 05DD     		ble	.L288
1425:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4395              		.loc 1 1425 0
 4396 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4397 01ee 314A     		ldr	r2, .L363+36
 4398 01f0 3149     		ldr	r1, .L363+40
 4399 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4400 01f6 0BE0     		b	.L289
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 105


 4401              	.L288:
1426:..\src/interruptions.c ****             else {
1427:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4402              		.loc 1 1427 0
 4403 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4404 01fa 2E4A     		ldr	r2, .L363+36
 4405 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4406 0200 2E4A     		ldr	r2, .L363+44
 4407 0202 9342     		cmp	r3, r2
 4408 0204 04DA     		bge	.L289
1428:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4409              		.loc 1 1428 0
 4410 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4411 0208 2A4A     		ldr	r2, .L363+36
 4412 020a 2C49     		ldr	r1, .L363+44
 4413 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4414              	.L289:
1429:..\src/interruptions.c ****             }
1430:..\src/interruptions.c **** 
1431:..\src/interruptions.c ****             // ----- current PID control -----
1432:..\src/interruptions.c **** 
1433:..\src/interruptions.c ****             pwm_input = 0;
 4415              		.loc 1 1433 0
 4416 0210 0023     		movs	r3, #0
 4417 0212 FB64     		str	r3, [r7, #76]
1434:..\src/interruptions.c **** 
1435:..\src/interruptions.c ****             // Proportional
1436:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4418              		.loc 1 1436 0
 4419 0214 BB69     		ldr	r3, [r7, #24]
 4420 0216 002B     		cmp	r3, #0
 4421 0218 07D0     		beq	.L290
1437:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4422              		.loc 1 1437 0
 4423 021a BB69     		ldr	r3, [r7, #24]
 4424 021c BA68     		ldr	r2, [r7, #8]
 4425 021e 02FB03F3 		mul	r3, r2, r3
 4426 0222 1B14     		asrs	r3, r3, #16
 4427 0224 FA6C     		ldr	r2, [r7, #76]
 4428 0226 1344     		add	r3, r3, r2
 4429 0228 FB64     		str	r3, [r7, #76]
 4430              	.L290:
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****             // Integral
1440:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4431              		.loc 1 1440 0
 4432 022a 7B69     		ldr	r3, [r7, #20]
 4433 022c 002B     		cmp	r3, #0
 4434 022e 0AD0     		beq	.L291
1441:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4435              		.loc 1 1441 0
 4436 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4437 0232 204A     		ldr	r2, .L363+36
 4438 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4439 0238 7A69     		ldr	r2, [r7, #20]
 4440 023a 02FB03F3 		mul	r3, r2, r3
 4441 023e 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 106


 4442 0240 FA6C     		ldr	r2, [r7, #76]
 4443 0242 1344     		add	r3, r3, r2
 4444 0244 FB64     		str	r3, [r7, #76]
 4445              	.L291:
1442:..\src/interruptions.c **** 
1443:..\src/interruptions.c ****             // Derivative
1444:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4446              		.loc 1 1444 0
 4447 0246 3B69     		ldr	r3, [r7, #16]
 4448 0248 002B     		cmp	r3, #0
 4449 024a 0CD0     		beq	.L292
1445:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4450              		.loc 1 1445 0
 4451 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4452 024e 1C4A     		ldr	r2, .L363+48
 4453 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4454 0254 BA68     		ldr	r2, [r7, #8]
 4455 0256 D31A     		subs	r3, r2, r3
 4456 0258 3A69     		ldr	r2, [r7, #16]
 4457 025a 02FB03F3 		mul	r3, r2, r3
 4458 025e 1B14     		asrs	r3, r3, #16
 4459 0260 FA6C     		ldr	r2, [r7, #76]
 4460 0262 1344     		add	r3, r3, r2
 4461 0264 FB64     		str	r3, [r7, #76]
 4462              	.L292:
1446:..\src/interruptions.c ****              
1447:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1448:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4463              		.loc 1 1448 0
 4464 0266 7B6C     		ldr	r3, [r7, #68]
 4465 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4466 026c 022B     		cmp	r3, #2
 4467 026e 2BD1     		bne	.L293
1449:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4468              		.loc 1 1449 0
 4469 0270 FB6C     		ldr	r3, [r7, #76]
 4470 0272 40F6A932 		movw	r2, #2985
 4471 0276 9342     		cmp	r3, r2
 4472 0278 02DD     		ble	.L294
1450:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4473              		.loc 1 1450 0
 4474 027a 40F6A933 		movw	r3, #2985
 4475 027e FB64     		str	r3, [r7, #76]
 4476              	.L294:
1451:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4477              		.loc 1 1451 0
 4478 0280 FB6C     		ldr	r3, [r7, #76]
 4479 0282 104A     		ldr	r2, .L363+52
 4480 0284 9342     		cmp	r3, r2
 4481 0286 2BDA     		bge	.L296
1452:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4482              		.loc 1 1452 0
 4483 0288 0E4B     		ldr	r3, .L363+52
 4484 028a FB64     		str	r3, [r7, #76]
 4485 028c 28E0     		b	.L296
 4486              	.L364:
 4487 028e 00BF     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 107


 4488              	.L363:
 4489 0290 00000000 		.word	c_mem
 4490 0294 00000000 		.word	g_ref
 4491 0298 00000000 		.word	g_refOld
 4492 029c 00000000 		.word	g_meas
 4493 02a0 AC000000 		.word	pos_error_sum.10606
 4494 02a4 80F0FA02 		.word	50000000
 4495 02a8 800F05FD 		.word	-50000000
 4496 02ac B4000000 		.word	prev_pos_err.10608
 4497 02b0 BC000000 		.word	motor_dir.10611
 4498 02b4 C0000000 		.word	curr_error_sum.10607
 4499 02b8 A0860100 		.word	100000
 4500 02bc 6079FEFF 		.word	-100000
 4501 02c0 C8000000 		.word	prev_curr_err.10609
 4502 02c4 57F4FFFF 		.word	-2985
 4503              	.L293:
1453:..\src/interruptions.c ****             }
1454:..\src/interruptions.c ****             else {
1455:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4504              		.loc 1 1455 0
 4505 02c8 FB6C     		ldr	r3, [r7, #76]
 4506 02ca 642B     		cmp	r3, #100
 4507 02cc 01DD     		ble	.L297
1456:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4508              		.loc 1 1456 0
 4509 02ce 6423     		movs	r3, #100
 4510 02d0 FB64     		str	r3, [r7, #76]
 4511              	.L297:
1457:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4512              		.loc 1 1457 0
 4513 02d2 FB6C     		ldr	r3, [r7, #76]
 4514 02d4 13F1640F 		cmn	r3, #100
 4515 02d8 02DA     		bge	.L296
1458:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4516              		.loc 1 1458 0
 4517 02da 6FF06303 		mvn	r3, #99
 4518 02de FB64     		str	r3, [r7, #76]
 4519              	.L296:
1459:..\src/interruptions.c ****             }
1460:..\src/interruptions.c **** 
1461:..\src/interruptions.c ****             // Update previous current
1462:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4520              		.loc 1 1462 0
 4521 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4522 02e2 A049     		ldr	r1, .L365
 4523 02e4 BA68     		ldr	r2, [r7, #8]
 4524 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1463:..\src/interruptions.c **** 
1464:..\src/interruptions.c ****         break;
 4525              		.loc 1 1464 0
 4526 02ea 54E1     		b	.L273
 4527              	.L274:
1465:..\src/interruptions.c **** 
1466:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1467:..\src/interruptions.c ****         case CONTROL_ANGLE:
1468:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4528              		.loc 1 1468 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 108


 4529 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4530 02ee 9E4A     		ldr	r2, .L365+4
 4531 02f0 1B01     		lsls	r3, r3, #4
 4532 02f2 1344     		add	r3, r3, r2
 4533 02f4 1A68     		ldr	r2, [r3]
 4534 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4535 02fa 9C49     		ldr	r1, .L365+8
 4536 02fc 3420     		movs	r0, #52
 4537 02fe 00FB03F3 		mul	r3, r0, r3
 4538 0302 0B44     		add	r3, r3, r1
 4539 0304 1B68     		ldr	r3, [r3]
 4540 0306 D31A     		subs	r3, r2, r3
 4541 0308 FB60     		str	r3, [r7, #12]
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4542              		.loc 1 1470 0
 4543 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4544 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4545 030e 9849     		ldr	r1, .L365+12
 4546 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4547 0314 FA68     		ldr	r2, [r7, #12]
 4548 0316 0A44     		add	r2, r2, r1
 4549 0318 9549     		ldr	r1, .L365+12
 4550 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1471:..\src/interruptions.c **** 
1472:..\src/interruptions.c ****             // anti-windup (for integral control)
1473:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4551              		.loc 1 1473 0
 4552 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4553 0320 934A     		ldr	r2, .L365+12
 4554 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4555 0326 B3F57A7F 		cmp	r3, #1000
 4556 032a 06DD     		ble	.L298
1474:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4557              		.loc 1 1474 0
 4558 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4559 032e 904A     		ldr	r2, .L365+12
 4560 0330 4FF47A71 		mov	r1, #1000
 4561 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4562 0338 0BE0     		b	.L299
 4563              	.L298:
1475:..\src/interruptions.c ****             else {
1476:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4564              		.loc 1 1476 0
 4565 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4566 033c 8C4A     		ldr	r2, .L365+12
 4567 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4568 0342 13F57A7F 		cmn	r3, #1000
 4569 0346 04DA     		bge	.L299
1477:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4570              		.loc 1 1477 0
 4571 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4572 034a 894A     		ldr	r2, .L365+12
 4573 034c 8949     		ldr	r1, .L365+16
 4574 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4575              	.L299:
1478:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 109


1479:..\src/interruptions.c **** 
1480:..\src/interruptions.c ****             // Proportional
1481:..\src/interruptions.c ****             if (k_p != 0) 
 4576              		.loc 1 1481 0
 4577 0352 FB6B     		ldr	r3, [r7, #60]
 4578 0354 002B     		cmp	r3, #0
 4579 0356 05D0     		beq	.L300
1482:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4580              		.loc 1 1482 0
 4581 0358 FB6B     		ldr	r3, [r7, #60]
 4582 035a FA68     		ldr	r2, [r7, #12]
 4583 035c 02FB03F3 		mul	r3, r2, r3
 4584 0360 1B14     		asrs	r3, r3, #16
 4585 0362 FB64     		str	r3, [r7, #76]
 4586              	.L300:
1483:..\src/interruptions.c ****             
1484:..\src/interruptions.c **** 
1485:..\src/interruptions.c ****             // Integral
1486:..\src/interruptions.c ****             if (k_i != 0) 
 4587              		.loc 1 1486 0
 4588 0364 BB6B     		ldr	r3, [r7, #56]
 4589 0366 002B     		cmp	r3, #0
 4590 0368 0AD0     		beq	.L301
1487:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4591              		.loc 1 1487 0
 4592 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4593 036c 804A     		ldr	r2, .L365+12
 4594 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4595 0372 BA6B     		ldr	r2, [r7, #56]
 4596 0374 02FB03F3 		mul	r3, r2, r3
 4597 0378 1B14     		asrs	r3, r3, #16
 4598 037a FA6C     		ldr	r2, [r7, #76]
 4599 037c 1344     		add	r3, r3, r2
 4600 037e FB64     		str	r3, [r7, #76]
 4601              	.L301:
1488:..\src/interruptions.c ****             
1489:..\src/interruptions.c **** 
1490:..\src/interruptions.c ****             // Derivative
1491:..\src/interruptions.c ****             if (k_d != 0) 
 4602              		.loc 1 1491 0
 4603 0380 7B6B     		ldr	r3, [r7, #52]
 4604 0382 002B     		cmp	r3, #0
 4605 0384 0CD0     		beq	.L302
1492:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4606              		.loc 1 1492 0
 4607 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4608 0388 7B4A     		ldr	r2, .L365+20
 4609 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4610 038e FA68     		ldr	r2, [r7, #12]
 4611 0390 D31A     		subs	r3, r2, r3
 4612 0392 7A6B     		ldr	r2, [r7, #52]
 4613 0394 02FB03F3 		mul	r3, r2, r3
 4614 0398 1B14     		asrs	r3, r3, #16
 4615 039a FA6C     		ldr	r2, [r7, #76]
 4616 039c 1344     		add	r3, r3, r2
 4617 039e FB64     		str	r3, [r7, #76]
 4618              	.L302:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 110


1493:..\src/interruptions.c ****             
1494:..\src/interruptions.c **** 
1495:..\src/interruptions.c ****             // Update measure
1496:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4619              		.loc 1 1496 0
 4620 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4621 03a2 7549     		ldr	r1, .L365+20
 4622 03a4 FA68     		ldr	r2, [r7, #12]
 4623 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1497:..\src/interruptions.c **** 
1498:..\src/interruptions.c ****             if (pwm_input > 0)
 4624              		.loc 1 1498 0
 4625 03aa FB6C     		ldr	r3, [r7, #76]
 4626 03ac 002B     		cmp	r3, #0
 4627 03ae 04DD     		ble	.L303
1499:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4628              		.loc 1 1499 0
 4629 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4630 03b2 724A     		ldr	r2, .L365+24
 4631 03b4 0121     		movs	r1, #1
 4632 03b6 D154     		strb	r1, [r2, r3]
1500:..\src/interruptions.c ****             else
1501:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1502:..\src/interruptions.c **** 
1503:..\src/interruptions.c ****         break;
 4633              		.loc 1 1503 0
 4634 03b8 EDE0     		b	.L273
 4635              	.L303:
1501:..\src/interruptions.c **** 
 4636              		.loc 1 1501 0
 4637 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4638 03bc 6F4A     		ldr	r2, .L365+24
 4639 03be 0021     		movs	r1, #0
 4640 03c0 D154     		strb	r1, [r2, r3]
 4641              		.loc 1 1503 0
 4642 03c2 E8E0     		b	.L273
 4643              	.L277:
1504:..\src/interruptions.c **** 
1505:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1506:..\src/interruptions.c ****         case CONTROL_CURRENT:
1507:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4644              		.loc 1 1507 0
 4645 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4646 03c6 684A     		ldr	r2, .L365+4
 4647 03c8 1B01     		lsls	r3, r3, #4
 4648 03ca 1344     		add	r3, r3, r2
 4649 03cc 0C33     		adds	r3, r3, #12
 4650 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4651 03d0 002B     		cmp	r3, #0
 4652 03d2 00F0C480 		beq	.L360
 4653              		.loc 1 1507 0 is_stmt 0 discriminator 1
 4654 03d6 6A4B     		ldr	r3, .L365+28
 4655 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4656 03da 002B     		cmp	r3, #0
 4657 03dc 00F0BF80 		beq	.L360
1508:..\src/interruptions.c ****                 
1509:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 111


 4658              		.loc 1 1509 0 is_stmt 1
 4659 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4660 03e2 614A     		ldr	r2, .L365+4
 4661 03e4 1B01     		lsls	r3, r3, #4
 4662 03e6 1344     		add	r3, r3, r2
 4663 03e8 0433     		adds	r3, r3, #4
 4664 03ea 1B68     		ldr	r3, [r3]
 4665 03ec BB64     		str	r3, [r7, #72]
1510:..\src/interruptions.c **** 
1511:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4666              		.loc 1 1511 0
 4667 03ee 7B6C     		ldr	r3, [r7, #68]
 4668 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4669 03f4 1A46     		mov	r2, r3
 4670 03f6 BB6C     		ldr	r3, [r7, #72]
 4671 03f8 9A42     		cmp	r2, r3
 4672 03fa 04DA     		bge	.L306
1512:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4673              		.loc 1 1512 0
 4674 03fc 7B6C     		ldr	r3, [r7, #68]
 4675 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4676 0402 BB64     		str	r3, [r7, #72]
 4677 0404 0BE0     		b	.L307
 4678              	.L306:
1513:..\src/interruptions.c ****                 else {
1514:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4679              		.loc 1 1514 0
 4680 0406 7B6C     		ldr	r3, [r7, #68]
 4681 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4682 040c 5A42     		negs	r2, r3
 4683 040e BB6C     		ldr	r3, [r7, #72]
 4684 0410 9A42     		cmp	r2, r3
 4685 0412 04DD     		ble	.L307
1515:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4686              		.loc 1 1515 0
 4687 0414 7B6C     		ldr	r3, [r7, #68]
 4688 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4689 041a 5B42     		negs	r3, r3
 4690 041c BB64     		str	r3, [r7, #72]
 4691              	.L307:
1516:..\src/interruptions.c ****                 }
1517:..\src/interruptions.c ****                 
1518:..\src/interruptions.c ****                 // current error
1519:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4692              		.loc 1 1519 0
 4693 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4694 0422 524A     		ldr	r2, .L365+8
 4695 0424 3421     		movs	r1, #52
 4696 0426 01FB03F3 		mul	r3, r1, r3
 4697 042a 1344     		add	r3, r3, r2
 4698 042c 0C33     		adds	r3, r3, #12
 4699 042e 1B68     		ldr	r3, [r3]
 4700 0430 BA6C     		ldr	r2, [r7, #72]
 4701 0432 D31A     		subs	r3, r2, r3
 4702 0434 BB60     		str	r3, [r7, #8]
1520:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4703              		.loc 1 1520 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 112


 4704 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4705 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4706 043a 5249     		ldr	r1, .L365+32
 4707 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4708 0440 BA68     		ldr	r2, [r7, #8]
 4709 0442 0A44     		add	r2, r2, r1
 4710 0444 4F49     		ldr	r1, .L365+32
 4711 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1521:..\src/interruptions.c ****                 
1522:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4712              		.loc 1 1522 0
 4713 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4714 044c 4D4A     		ldr	r2, .L365+32
 4715 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4716 0452 4D4A     		ldr	r2, .L365+36
 4717 0454 9342     		cmp	r3, r2
 4718 0456 05DD     		ble	.L308
1523:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4719              		.loc 1 1523 0
 4720 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4721 045a 4A4A     		ldr	r2, .L365+32
 4722 045c 4A49     		ldr	r1, .L365+36
 4723 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4724 0462 0BE0     		b	.L309
 4725              	.L308:
1524:..\src/interruptions.c ****                 else {
1525:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4726              		.loc 1 1525 0
 4727 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4728 0466 474A     		ldr	r2, .L365+32
 4729 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4730 046c 474A     		ldr	r2, .L365+40
 4731 046e 9342     		cmp	r3, r2
 4732 0470 04DA     		bge	.L309
1526:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4733              		.loc 1 1526 0
 4734 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4735 0474 434A     		ldr	r2, .L365+32
 4736 0476 4549     		ldr	r1, .L365+40
 4737 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4738              	.L309:
1527:..\src/interruptions.c ****                 }
1528:..\src/interruptions.c **** 
1529:..\src/interruptions.c ****                 pwm_input = 0;
 4739              		.loc 1 1529 0
 4740 047c 0023     		movs	r3, #0
 4741 047e FB64     		str	r3, [r7, #76]
1530:..\src/interruptions.c **** 
1531:..\src/interruptions.c ****                 // Proportional
1532:..\src/interruptions.c ****                 if (k_p_c != 0)
 4742              		.loc 1 1532 0
 4743 0480 3B6B     		ldr	r3, [r7, #48]
 4744 0482 002B     		cmp	r3, #0
 4745 0484 07D0     		beq	.L310
1533:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4746              		.loc 1 1533 0
 4747 0486 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 113


 4748 0488 BA68     		ldr	r2, [r7, #8]
 4749 048a 02FB03F3 		mul	r3, r2, r3
 4750 048e 1B14     		asrs	r3, r3, #16
 4751 0490 FA6C     		ldr	r2, [r7, #76]
 4752 0492 1344     		add	r3, r3, r2
 4753 0494 FB64     		str	r3, [r7, #76]
 4754              	.L310:
1534:..\src/interruptions.c **** 
1535:..\src/interruptions.c ****                 // Integral
1536:..\src/interruptions.c ****                 if (k_i_c != 0)
 4755              		.loc 1 1536 0
 4756 0496 FB6A     		ldr	r3, [r7, #44]
 4757 0498 002B     		cmp	r3, #0
 4758 049a 0AD0     		beq	.L311
1537:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4759              		.loc 1 1537 0
 4760 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4761 049e 394A     		ldr	r2, .L365+32
 4762 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4763 04a4 FA6A     		ldr	r2, [r7, #44]
 4764 04a6 02FB03F3 		mul	r3, r2, r3
 4765 04aa 1B14     		asrs	r3, r3, #16
 4766 04ac FA6C     		ldr	r2, [r7, #76]
 4767 04ae 1344     		add	r3, r3, r2
 4768 04b0 FB64     		str	r3, [r7, #76]
 4769              	.L311:
1538:..\src/interruptions.c **** 
1539:..\src/interruptions.c ****                 // Derivative
1540:..\src/interruptions.c ****                 if (k_d_c != 0)
 4770              		.loc 1 1540 0
 4771 04b2 BB6A     		ldr	r3, [r7, #40]
 4772 04b4 002B     		cmp	r3, #0
 4773 04b6 0CD0     		beq	.L312
1541:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4774              		.loc 1 1541 0
 4775 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4776 04ba 2A4A     		ldr	r2, .L365
 4777 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4778 04c0 BA68     		ldr	r2, [r7, #8]
 4779 04c2 D31A     		subs	r3, r2, r3
 4780 04c4 BA6A     		ldr	r2, [r7, #40]
 4781 04c6 02FB03F3 		mul	r3, r2, r3
 4782 04ca 1B14     		asrs	r3, r3, #16
 4783 04cc FA6C     		ldr	r2, [r7, #76]
 4784 04ce 1344     		add	r3, r3, r2
 4785 04d0 FB64     		str	r3, [r7, #76]
 4786              	.L312:
1542:..\src/interruptions.c ****                 
1543:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4787              		.loc 1 1543 0
 4788 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4789 04d4 2349     		ldr	r1, .L365
 4790 04d6 BA68     		ldr	r2, [r7, #8]
 4791 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1544:..\src/interruptions.c ****                 
1545:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4792              		.loc 1 1545 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 114


 4793 04dc FB6C     		ldr	r3, [r7, #76]
 4794 04de 002B     		cmp	r3, #0
 4795 04e0 04DB     		blt	.L313
1546:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4796              		.loc 1 1546 0
 4797 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4798 04e4 254A     		ldr	r2, .L365+24
 4799 04e6 0121     		movs	r1, #1
 4800 04e8 D154     		strb	r1, [r2, r3]
1547:..\src/interruptions.c ****                 else
1548:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1549:..\src/interruptions.c ****             }
1550:..\src/interruptions.c ****         break;
 4801              		.loc 1 1550 0
 4802 04ea 38E0     		b	.L360
 4803              	.L313:
1548:..\src/interruptions.c ****             }
 4804              		.loc 1 1548 0
 4805 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4806 04ee 234A     		ldr	r2, .L365+24
 4807 04f0 0021     		movs	r1, #0
 4808 04f2 D154     		strb	r1, [r2, r3]
 4809              		.loc 1 1550 0
 4810 04f4 33E0     		b	.L360
 4811              	.L276:
1551:..\src/interruptions.c ****         
1552:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1553:..\src/interruptions.c ****         case CONTROL_PWM:
1554:..\src/interruptions.c **** 
1555:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4812              		.loc 1 1555 0
 4813 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4814 04f8 1B4A     		ldr	r2, .L365+4
 4815 04fa 1B01     		lsls	r3, r3, #4
 4816 04fc 1344     		add	r3, r3, r2
 4817 04fe 0833     		adds	r3, r3, #8
 4818 0500 1B68     		ldr	r3, [r3]
 4819 0502 FB64     		str	r3, [r7, #76]
1556:..\src/interruptions.c **** 
1557:..\src/interruptions.c ****             if (pwm_input > 0) 
 4820              		.loc 1 1557 0
 4821 0504 FB6C     		ldr	r3, [r7, #76]
 4822 0506 002B     		cmp	r3, #0
 4823 0508 04DD     		ble	.L314
1558:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4824              		.loc 1 1558 0
 4825 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4826 050c 1B4A     		ldr	r2, .L365+24
 4827 050e 0121     		movs	r1, #1
 4828 0510 D154     		strb	r1, [r2, r3]
 4829 0512 03E0     		b	.L315
 4830              	.L314:
1559:..\src/interruptions.c ****             else 
1560:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4831              		.loc 1 1560 0
 4832 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4833 0516 194A     		ldr	r2, .L365+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 115


 4834 0518 0021     		movs	r1, #0
 4835 051a D154     		strb	r1, [r2, r3]
 4836              	.L315:
1561:..\src/interruptions.c ****             
1562:..\src/interruptions.c ****           
1563:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1564:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4837              		.loc 1 1564 0
 4838 051c 7B6C     		ldr	r3, [r7, #68]
 4839 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4840 0522 022B     		cmp	r3, #2
 4841 0524 0ED1     		bne	.L316
1565:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4842              		.loc 1 1565 0
 4843 0526 FB6C     		ldr	r3, [r7, #76]
 4844 0528 40F6A932 		movw	r2, #2985
 4845 052c 9342     		cmp	r3, r2
 4846 052e 02DD     		ble	.L317
1566:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4847              		.loc 1 1566 0
 4848 0530 40F6A933 		movw	r3, #2985
 4849 0534 FB64     		str	r3, [r7, #76]
 4850              	.L317:
1567:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4851              		.loc 1 1567 0
 4852 0536 FB6C     		ldr	r3, [r7, #76]
 4853 0538 154A     		ldr	r2, .L365+44
 4854 053a 9342     		cmp	r3, r2
 4855 053c 2ADA     		bge	.L361
1568:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4856              		.loc 1 1568 0
 4857 053e 144B     		ldr	r3, .L365+44
 4858 0540 FB64     		str	r3, [r7, #76]
1569:..\src/interruptions.c ****             }
1570:..\src/interruptions.c ****             else {
1571:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1572:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1573:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1574:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1575:..\src/interruptions.c ****             }
1576:..\src/interruptions.c **** 
1577:..\src/interruptions.c ****         break;
 4859              		.loc 1 1577 0
 4860 0542 27E0     		b	.L361
 4861              	.L316:
1571:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4862              		.loc 1 1571 0
 4863 0544 FB6C     		ldr	r3, [r7, #76]
 4864 0546 642B     		cmp	r3, #100
 4865 0548 01DD     		ble	.L320
1572:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4866              		.loc 1 1572 0
 4867 054a 6423     		movs	r3, #100
 4868 054c FB64     		str	r3, [r7, #76]
 4869              	.L320:
1573:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4870              		.loc 1 1573 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 116


 4871 054e FB6C     		ldr	r3, [r7, #76]
 4872 0550 13F1640F 		cmn	r3, #100
 4873 0554 1EDA     		bge	.L361
1574:..\src/interruptions.c ****             }
 4874              		.loc 1 1574 0
 4875 0556 6FF06303 		mvn	r3, #99
 4876 055a FB64     		str	r3, [r7, #76]
 4877              		.loc 1 1577 0
 4878 055c 1AE0     		b	.L361
 4879              	.L360:
1550:..\src/interruptions.c ****         
 4880              		.loc 1 1550 0
 4881 055e 00BF     		nop
 4882 0560 19E0     		b	.L273
 4883              	.L366:
 4884 0562 00BF     		.align	2
 4885              	.L365:
 4886 0564 C8000000 		.word	prev_curr_err.10609
 4887 0568 00000000 		.word	g_ref
 4888 056c 00000000 		.word	g_meas
 4889 0570 AC000000 		.word	pos_error_sum.10606
 4890 0574 18FCFFFF 		.word	-1000
 4891 0578 B4000000 		.word	prev_pos_err.10608
 4892 057c BC000000 		.word	motor_dir.10611
 4893 0580 00000000 		.word	tension_valid
 4894 0584 C0000000 		.word	curr_error_sum.10607
 4895 0588 A0860100 		.word	100000
 4896 058c 6079FEFF 		.word	-100000
 4897 0590 57F4FFFF 		.word	-2985
 4898              	.L361:
 4899              		.loc 1 1577 0
 4900 0594 00BF     		nop
 4901              	.L273:
1578:..\src/interruptions.c ****             
1579:..\src/interruptions.c ****     }
1580:..\src/interruptions.c **** 
1581:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1582:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1583:..\src/interruptions.c **** 
1584:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1585:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4902              		.loc 1 1585 0
 4903 0596 7B6C     		ldr	r3, [r7, #68]
 4904 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4905 059c 022B     		cmp	r3, #2
 4906 059e 23D1     		bne	.L321
1586:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4907              		.loc 1 1586 0
 4908 05a0 FB6C     		ldr	r3, [r7, #76]
 4909 05a2 40F6A932 		movw	r2, #2985
 4910 05a6 9342     		cmp	r3, r2
 4911 05a8 02DD     		ble	.L322
1587:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4912              		.loc 1 1587 0
 4913 05aa 40F6A933 		movw	r3, #2985
 4914 05ae FB64     		str	r3, [r7, #76]
 4915              	.L322:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 117


1588:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4916              		.loc 1 1588 0
 4917 05b0 FB6C     		ldr	r3, [r7, #76]
 4918 05b2 B34A     		ldr	r2, .L367
 4919 05b4 9342     		cmp	r3, r2
 4920 05b6 01DA     		bge	.L323
1589:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4921              		.loc 1 1589 0
 4922 05b8 B14B     		ldr	r3, .L367
 4923 05ba FB64     		str	r3, [r7, #76]
 4924              	.L323:
1590:..\src/interruptions.c ****         
1591:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4925              		.loc 1 1591 0
 4926 05bc 7B6C     		ldr	r3, [r7, #68]
 4927 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4928 05c2 012B     		cmp	r3, #1
 4929 05c4 31D0     		beq	.L325
1592:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4930              		.loc 1 1592 0
 4931 05c6 FB6C     		ldr	r3, [r7, #76]
 4932 05c8 9B02     		lsls	r3, r3, #10
 4933 05ca AE4A     		ldr	r2, .L367+4
 4934 05cc 82FB0312 		smull	r1, r2, r2, r3
 4935 05d0 9211     		asrs	r2, r2, #6
 4936 05d2 DB17     		asrs	r3, r3, #31
 4937 05d4 D31A     		subs	r3, r2, r3
 4938 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4939 05d8 AB49     		ldr	r1, .L367+8
 4940 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4941 05de 02FB03F3 		mul	r3, r2, r3
 4942 05e2 9B12     		asrs	r3, r3, #10
 4943 05e4 FB64     		str	r3, [r7, #76]
 4944 05e6 20E0     		b	.L325
 4945              	.L321:
1593:..\src/interruptions.c ****     }
1594:..\src/interruptions.c ****     else {
1595:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4946              		.loc 1 1595 0
 4947 05e8 FB6C     		ldr	r3, [r7, #76]
 4948 05ea 642B     		cmp	r3, #100
 4949 05ec 01DD     		ble	.L326
1596:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4950              		.loc 1 1596 0
 4951 05ee 6423     		movs	r3, #100
 4952 05f0 FB64     		str	r3, [r7, #76]
 4953              	.L326:
1597:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4954              		.loc 1 1597 0
 4955 05f2 FB6C     		ldr	r3, [r7, #76]
 4956 05f4 13F1640F 		cmn	r3, #100
 4957 05f8 02DA     		bge	.L327
1598:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4958              		.loc 1 1598 0
 4959 05fa 6FF06303 		mvn	r3, #99
 4960 05fe FB64     		str	r3, [r7, #76]
 4961              	.L327:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 118


1599:..\src/interruptions.c ****         
1600:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4962              		.loc 1 1600 0
 4963 0600 7B6C     		ldr	r3, [r7, #68]
 4964 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4965 0606 012B     		cmp	r3, #1
 4966 0608 0FD0     		beq	.L325
1601:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4967              		.loc 1 1601 0
 4968 060a FB6C     		ldr	r3, [r7, #76]
 4969 060c 9B02     		lsls	r3, r3, #10
 4970 060e 9F4A     		ldr	r2, .L367+12
 4971 0610 82FB0312 		smull	r1, r2, r2, r3
 4972 0614 5211     		asrs	r2, r2, #5
 4973 0616 DB17     		asrs	r3, r3, #31
 4974 0618 D31A     		subs	r3, r2, r3
 4975 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4976 061c 9A49     		ldr	r1, .L367+8
 4977 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4978 0622 02FB03F3 		mul	r3, r2, r3
 4979 0626 9B12     		asrs	r3, r3, #10
 4980 0628 FB64     		str	r3, [r7, #76]
 4981              	.L325:
1602:..\src/interruptions.c ****     }
1603:..\src/interruptions.c **** 
1604:..\src/interruptions.c ****     //// RATE LIMITER ////
1605:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4982              		.loc 1 1605 0
 4983 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4984 062c 984A     		ldr	r2, .L367+16
 4985 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4986 0632 FA6C     		ldr	r2, [r7, #76]
 4987 0634 D31A     		subs	r3, r2, r3
 4988 0636 7A6C     		ldr	r2, [r7, #68]
 4989 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4990 063c 9342     		cmp	r3, r2
 4991 063e 09DD     		ble	.L328
1606:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4992              		.loc 1 1606 0
 4993 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4994 0642 934A     		ldr	r2, .L367+16
 4995 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4996 0648 7A6C     		ldr	r2, [r7, #68]
 4997 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4998 064e 1344     		add	r3, r3, r2
 4999 0650 FB64     		str	r3, [r7, #76]
 5000 0652 14E0     		b	.L329
 5001              	.L328:
1607:..\src/interruptions.c ****     }
1608:..\src/interruptions.c ****     else {
1609:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 5002              		.loc 1 1609 0
 5003 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5004 0656 8E4A     		ldr	r2, .L367+16
 5005 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5006 065c FA6C     		ldr	r2, [r7, #76]
 5007 065e D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 119


 5008 0660 7B6C     		ldr	r3, [r7, #68]
 5009 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 5010 0666 5B42     		negs	r3, r3
 5011 0668 9A42     		cmp	r2, r3
 5012 066a 08DA     		bge	.L329
1610:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 5013              		.loc 1 1610 0
 5014 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5015 066e 884A     		ldr	r2, .L367+16
 5016 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5017 0674 7A6C     		ldr	r2, [r7, #68]
 5018 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 5019 067a 9B1A     		subs	r3, r3, r2
 5020 067c FB64     		str	r3, [r7, #76]
 5021              	.L329:
1611:..\src/interruptions.c ****     }
1612:..\src/interruptions.c ****    
1613:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1614:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 5022              		.loc 1 1614 0
 5023 067e 7B6C     		ldr	r3, [r7, #68]
 5024 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5025 0684 022B     		cmp	r3, #2
 5026 0686 0ED1     		bne	.L330
1615:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 5027              		.loc 1 1615 0
 5028 0688 FB6C     		ldr	r3, [r7, #76]
 5029 068a 40F6A932 		movw	r2, #2985
 5030 068e 9342     		cmp	r3, r2
 5031 0690 02DD     		ble	.L331
1616:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 5032              		.loc 1 1616 0
 5033 0692 40F6A933 		movw	r3, #2985
 5034 0696 FB64     		str	r3, [r7, #76]
 5035              	.L331:
1617:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 5036              		.loc 1 1617 0
 5037 0698 FB6C     		ldr	r3, [r7, #76]
 5038 069a 794A     		ldr	r2, .L367
 5039 069c 9342     		cmp	r3, r2
 5040 069e 0EDA     		bge	.L333
1618:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 5041              		.loc 1 1618 0
 5042 06a0 774B     		ldr	r3, .L367
 5043 06a2 FB64     		str	r3, [r7, #76]
 5044 06a4 0BE0     		b	.L333
 5045              	.L330:
1619:..\src/interruptions.c ****     }
1620:..\src/interruptions.c ****     else {
1621:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 5046              		.loc 1 1621 0
 5047 06a6 FB6C     		ldr	r3, [r7, #76]
 5048 06a8 642B     		cmp	r3, #100
 5049 06aa 01DD     		ble	.L334
1622:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 5050              		.loc 1 1622 0
 5051 06ac 6423     		movs	r3, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 120


 5052 06ae FB64     		str	r3, [r7, #76]
 5053              	.L334:
1623:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 5054              		.loc 1 1623 0
 5055 06b0 FB6C     		ldr	r3, [r7, #76]
 5056 06b2 13F1640F 		cmn	r3, #100
 5057 06b6 02DA     		bge	.L333
1624:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 5058              		.loc 1 1624 0
 5059 06b8 6FF06303 		mvn	r3, #99
 5060 06bc FB64     		str	r3, [r7, #76]
 5061              	.L333:
1625:..\src/interruptions.c ****     }
1626:..\src/interruptions.c **** 
1627:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 5062              		.loc 1 1627 0
 5063 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5064 06c0 7349     		ldr	r1, .L367+16
 5065 06c2 FA6C     		ldr	r2, [r7, #76]
 5066 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1628:..\src/interruptions.c ****            
1629:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5067              		.loc 1 1629 0
 5068 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5069 06ca FA6C     		ldr	r2, [r7, #76]
 5070 06cc 002A     		cmp	r2, #0
 5071 06ce 01DB     		blt	.L335
 5072              		.loc 1 1629 0 is_stmt 0 discriminator 1
 5073 06d0 0121     		movs	r1, #1
 5074 06d2 01E0     		b	.L336
 5075              	.L335:
 5076              		.loc 1 1629 0 discriminator 2
 5077 06d4 4FF0FF31 		mov	r1, #-1
 5078              	.L336:
 5079              		.loc 1 1629 0 discriminator 4
 5080 06d8 6E4A     		ldr	r2, .L367+20
 5081 06da D154     		strb	r1, [r2, r3]
1630:..\src/interruptions.c ****     
1631:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 5082              		.loc 1 1631 0 is_stmt 1 discriminator 4
 5083 06dc 7B6C     		ldr	r3, [r7, #68]
 5084 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 5085 06e2 012B     		cmp	r3, #1
 5086 06e4 40F0AA80 		bne	.L337
1632:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1633:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 5087              		.loc 1 1633 0
 5088 06e8 7B6C     		ldr	r3, [r7, #68]
 5089 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5090 06ee 012B     		cmp	r3, #1
 5091 06f0 00F09F80 		beq	.L338
 5092              		.loc 1 1633 0 is_stmt 0 discriminator 1
 5093 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5094 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5095 06fa 6748     		ldr	r0, .L367+24
 5096 06fc 1346     		mov	r3, r2
 5097 06fe 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 121


 5098 0700 1344     		add	r3, r3, r2
 5099 0702 9B00     		lsls	r3, r3, #2
 5100 0704 1344     		add	r3, r3, r2
 5101 0706 0B44     		add	r3, r3, r1
 5102 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5103 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5104 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5105 0712 624C     		ldr	r4, .L367+28
 5106 0714 1346     		mov	r3, r2
 5107 0716 5B00     		lsls	r3, r3, #1
 5108 0718 1344     		add	r3, r3, r2
 5109 071a 9B00     		lsls	r3, r3, #2
 5110 071c 1344     		add	r3, r3, r2
 5111 071e 0344     		add	r3, r3, r0
 5112 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5113 0724 CB1A     		subs	r3, r1, r3
 5114 0726 312B     		cmp	r3, #49
 5115 0728 00F38380 		bgt	.L338
1634:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5116              		.loc 1 1634 0 is_stmt 1 discriminator 2
 5117 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5118 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5119 0732 5948     		ldr	r0, .L367+24
 5120 0734 1346     		mov	r3, r2
 5121 0736 5B00     		lsls	r3, r3, #1
 5122 0738 1344     		add	r3, r3, r2
 5123 073a 9B00     		lsls	r3, r3, #2
 5124 073c 1344     		add	r3, r3, r2
 5125 073e 0B44     		add	r3, r3, r1
 5126 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5127 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5128 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5129 074a 544C     		ldr	r4, .L367+28
 5130 074c 1346     		mov	r3, r2
 5131 074e 5B00     		lsls	r3, r3, #1
 5132 0750 1344     		add	r3, r3, r2
 5133 0752 9B00     		lsls	r3, r3, #2
 5134 0754 1344     		add	r3, r3, r2
 5135 0756 0344     		add	r3, r3, r0
 5136 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5137 075c CB1A     		subs	r3, r1, r3
1633:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5138              		.loc 1 1633 0 discriminator 2
 5139 075e 13F1310F 		cmn	r3, #49
 5140 0762 66DB     		blt	.L338
1635:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 5141              		.loc 1 1635 0
 5142 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5143 0766 4E4A     		ldr	r2, .L367+32
 5144 0768 1B01     		lsls	r3, r3, #4
 5145 076a 1344     		add	r3, r3, r2
 5146 076c 1A68     		ldr	r2, [r3]
 5147 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5148 0770 4C49     		ldr	r1, .L367+36
 5149 0772 1B01     		lsls	r3, r3, #4
 5150 0774 0B44     		add	r3, r3, r1
 5151 0776 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 122


 5152 0778 D31A     		subs	r3, r2, r3
1634:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5153              		.loc 1 1634 0
 5154 077a 632B     		cmp	r3, #99
 5155 077c 59DC     		bgt	.L338
 5156              		.loc 1 1635 0
 5157 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5158 0780 474A     		ldr	r2, .L367+32
 5159 0782 1B01     		lsls	r3, r3, #4
 5160 0784 1344     		add	r3, r3, r2
 5161 0786 1A68     		ldr	r2, [r3]
 5162 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5163 078a 4649     		ldr	r1, .L367+36
 5164 078c 1B01     		lsls	r3, r3, #4
 5165 078e 0B44     		add	r3, r3, r1
 5166 0790 1B68     		ldr	r3, [r3]
 5167 0792 D31A     		subs	r3, r2, r3
 5168 0794 13F1630F 		cmn	r3, #99
 5169 0798 4BDB     		blt	.L338
1636:..\src/interruptions.c ****             position_counter[idx]++;
 5170              		.loc 1 1636 0
 5171 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5172 079c 424A     		ldr	r2, .L367+40
 5173 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5174 07a2 0132     		adds	r2, r2, #1
 5175 07a4 4049     		ldr	r1, .L367+40
 5176 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1637:..\src/interruptions.c ****             
1638:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5177              		.loc 1 1638 0
 5178 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5179 07ac 3E4A     		ldr	r2, .L367+40
 5180 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5181 07b2 F92B     		cmp	r3, #249
 5182 07b4 42D9     		bls	.L337
1639:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5183              		.loc 1 1639 0
 5184 07b6 7B6C     		ldr	r3, [r7, #68]
 5185 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5186 07bc 002B     		cmp	r3, #0
 5187 07be 10D1     		bne	.L340
 5188              		.loc 1 1639 0 is_stmt 0 discriminator 1
 5189 07c0 3A4B     		ldr	r3, .L367+44
 5190 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5191 07c4 002B     		cmp	r3, #0
 5192 07c6 0CD1     		bne	.L340
1640:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5193              		.loc 1 1640 0 is_stmt 1
 5194 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5195 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5196 07ce 3349     		ldr	r1, .L367+28
 5197 07d0 3420     		movs	r0, #52
 5198 07d2 00FB02F2 		mul	r2, r0, r2
 5199 07d6 0A44     		add	r2, r2, r1
 5200 07d8 1268     		ldr	r2, [r2]
 5201 07da 3549     		ldr	r1, .L367+48
 5202 07dc 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 123


 5203 07de 0B44     		add	r3, r3, r1
 5204 07e0 1A60     		str	r2, [r3]
 5205              	.L340:
1641:..\src/interruptions.c ****                 }
1642:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5206              		.loc 1 1642 0
 5207 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5208 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5209 07e8 2C49     		ldr	r1, .L367+28
 5210 07ea 3420     		movs	r0, #52
 5211 07ec 00FB02F2 		mul	r2, r0, r2
 5212 07f0 0A44     		add	r2, r2, r1
 5213 07f2 1268     		ldr	r2, [r2]
 5214 07f4 2B49     		ldr	r1, .L367+36
 5215 07f6 1B01     		lsls	r3, r3, #4
 5216 07f8 0B44     		add	r3, r3, r1
 5217 07fa 1A60     		str	r2, [r3]
1643:..\src/interruptions.c ****                 
1644:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5218              		.loc 1 1644 0
 5219 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5220 07fe 2A4A     		ldr	r2, .L367+40
 5221 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5222 0804 FA2B     		cmp	r3, #250
 5223 0806 11D1     		bne	.L341
1645:..\src/interruptions.c ****                     // To do only once
1646:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5224              		.loc 1 1646 0
 5225 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5226 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5227 0810 2249     		ldr	r1, .L367+28
 5228 0812 3420     		movs	r0, #52
 5229 0814 00FB02F2 		mul	r2, r0, r2
 5230 0818 0A44     		add	r2, r2, r1
 5231 081a 0C32     		adds	r2, r2, #12
 5232 081c 1268     		ldr	r2, [r2]
 5233 081e 1F49     		ldr	r1, .L367+28
 5234 0820 3420     		movs	r0, #52
 5235 0822 00FB03F3 		mul	r3, r0, r3
 5236 0826 0B44     		add	r3, r3, r1
 5237 0828 1433     		adds	r3, r3, #20
 5238 082a 1A60     		str	r2, [r3]
 5239              	.L341:
1647:..\src/interruptions.c ****                 }
1648:..\src/interruptions.c ****                 pwm_input = 0;            
 5240              		.loc 1 1648 0
 5241 082c 0023     		movs	r3, #0
 5242 082e FB64     		str	r3, [r7, #76]
1638:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5243              		.loc 1 1638 0
 5244 0830 04E0     		b	.L337
 5245              	.L338:
1649:..\src/interruptions.c ****             }
1650:..\src/interruptions.c ****         }
1651:..\src/interruptions.c ****         else {
1652:..\src/interruptions.c ****             position_counter[idx] = 0;
 5246              		.loc 1 1652 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 124


 5247 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5248 0834 1C4A     		ldr	r2, .L367+40
 5249 0836 0021     		movs	r1, #0
 5250 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 5251              	.L337:
1653:..\src/interruptions.c ****         }
1654:..\src/interruptions.c ****     }
1655:..\src/interruptions.c ****     
1656:..\src/interruptions.c ****     
1657:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1658:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 5252              		.loc 1 1658 0
 5253 083c 7B6C     		ldr	r3, [r7, #68]
 5254 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5255 0842 022B     		cmp	r3, #2
 5256 0844 3BD1     		bne	.L342
1659:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1660:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 5257              		.loc 1 1660 0
 5258 0846 FB6C     		ldr	r3, [r7, #76]
 5259 0848 002B     		cmp	r3, #0
 5260 084a B8BF     		it	lt
 5261 084c 5B42     		rsblt	r3, r3, #0
 5262 084e 40F68C22 		movw	r2, #2700
 5263 0852 9342     		cmp	r3, r2
 5264 0854 07DD     		ble	.L343
1661:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 5265              		.loc 1 1661 0
 5266 0856 FB6C     		ldr	r3, [r7, #76]
 5267 0858 002B     		cmp	r3, #0
 5268 085a 02DB     		blt	.L344
 5269              		.loc 1 1661 0 is_stmt 0 discriminator 1
 5270 085c 40F68C23 		movw	r3, #2700
 5271 0860 00E0     		b	.L345
 5272              	.L344:
 5273              		.loc 1 1661 0 discriminator 2
 5274 0862 144B     		ldr	r3, .L367+52
 5275              	.L345:
 5276              		.loc 1 1661 0 discriminator 4
 5277 0864 FB64     		str	r3, [r7, #76]
 5278              	.L343:
1662:..\src/interruptions.c ****         }
1663:..\src/interruptions.c ****         
1664:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 5279              		.loc 1 1664 0 is_stmt 1
 5280 0866 FB6C     		ldr	r3, [r7, #76]
 5281 0868 13F1C70F 		cmn	r3, #199
 5282 086c 27DB     		blt	.L342
 5283              		.loc 1 1664 0 is_stmt 0 discriminator 1
 5284 086e FB6C     		ldr	r3, [r7, #76]
 5285 0870 C72B     		cmp	r3, #199
 5286 0872 24DC     		bgt	.L342
1665:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 5287              		.loc 1 1665 0 is_stmt 1
 5288 0874 FB6C     		ldr	r3, [r7, #76]
 5289 0876 002B     		cmp	r3, #0
 5290 0878 1EDB     		blt	.L346
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 125


 5291              		.loc 1 1665 0 is_stmt 0 discriminator 1
 5292 087a C823     		movs	r3, #200
 5293 087c 1EE0     		b	.L347
 5294              	.L368:
 5295 087e 00BF     		.align	2
 5296              	.L367:
 5297 0880 57F4FFFF 		.word	-2985
 5298 0884 81207D05 		.word	92086401
 5299 0888 00000000 		.word	dev_pwm_limit
 5300 088c 1F85EB51 		.word	1374389535
 5301 0890 D0000000 		.word	prev_pwm.10610
 5302 0894 00000000 		.word	pwm_sign
 5303 0898 00000000 		.word	g_measOld
 5304 089c 00000000 		.word	g_meas
 5305 08a0 00000000 		.word	g_refOld
 5306 08a4 00000000 		.word	g_ref
 5307 08a8 D8000000 		.word	position_counter.10612
 5308 08ac 00000000 		.word	change_ext_ref_flag
 5309 08b0 00000000 		.word	g_refNew
 5310 08b4 74F5FFFF 		.word	-2700
 5311              	.L346:
 5312              		.loc 1 1665 0 discriminator 2
 5313 08b8 6FF0C703 		mvn	r3, #199
 5314              	.L347:
 5315              		.loc 1 1665 0 discriminator 4
 5316 08bc FB64     		str	r3, [r7, #76]
 5317              	.L342:
1666:..\src/interruptions.c ****         }
1667:..\src/interruptions.c ****        
1668:..\src/interruptions.c ****     }
1669:..\src/interruptions.c ****     
1670:..\src/interruptions.c ****     // Set motor direction and write pwm value
1671:..\src/interruptions.c ****     switch (idx) {
 5318              		.loc 1 1671 0 is_stmt 1
 5319 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5320 08c0 002B     		cmp	r3, #0
 5321 08c2 02D0     		beq	.L349
 5322 08c4 012B     		cmp	r3, #1
 5323 08c6 26D0     		beq	.L350
1672:..\src/interruptions.c ****         case 0:         // Motor 1
1673:..\src/interruptions.c ****             if (motor_dir[idx])
1674:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1675:..\src/interruptions.c ****             else
1676:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1677:..\src/interruptions.c ****             
1678:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1679:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1680:..\src/interruptions.c ****             }
1681:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1682:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1683:..\src/interruptions.c ****             }
1684:..\src/interruptions.c ****             
1685:..\src/interruptions.c ****             break;
1686:..\src/interruptions.c ****         case 1:         // Motor 2
1687:..\src/interruptions.c ****             
1688:..\src/interruptions.c ****             if (motor_dir[idx])
1689:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 126


1690:..\src/interruptions.c ****             else
1691:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1692:..\src/interruptions.c ****             
1693:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1694:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1695:..\src/interruptions.c ****             }
1696:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1697:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1698:..\src/interruptions.c ****             }
1699:..\src/interruptions.c ****             
1700:..\src/interruptions.c ****             break;
1701:..\src/interruptions.c ****         default:
1702:..\src/interruptions.c ****             break;
 5324              		.loc 1 1702 0
 5325 08c8 4BE0     		b	.L355
 5326              	.L349:
1673:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5327              		.loc 1 1673 0
 5328 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5329 08cc 274A     		ldr	r2, .L369
 5330 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5331 08d0 002B     		cmp	r3, #0
 5332 08d2 03D0     		beq	.L351
1674:..\src/interruptions.c ****             else
 5333              		.loc 1 1674 0
 5334 08d4 0120     		movs	r0, #1
 5335 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5336 08da 02E0     		b	.L352
 5337              	.L351:
1676:..\src/interruptions.c ****             
 5338              		.loc 1 1676 0
 5339 08dc 0020     		movs	r0, #0
 5340 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5341              	.L352:
1678:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 5342              		.loc 1 1678 0
 5343 08e2 7B6C     		ldr	r3, [r7, #68]
 5344 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5345 08e8 012B     		cmp	r3, #1
 5346 08ea 0BD1     		bne	.L353
1679:..\src/interruptions.c ****             }
 5347              		.loc 1 1679 0
 5348 08ec FB6C     		ldr	r3, [r7, #76]
 5349 08ee 002B     		cmp	r3, #0
 5350 08f0 B8BF     		it	lt
 5351 08f2 5B42     		rsblt	r3, r3, #0
 5352 08f4 DBB2     		uxtb	r3, r3
 5353 08f6 C3F16403 		rsb	r3, r3, #100
 5354 08fa DBB2     		uxtb	r3, r3
 5355 08fc 1846     		mov	r0, r3
 5356 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1685:..\src/interruptions.c ****         case 1:         // Motor 2
 5357              		.loc 1 1685 0
 5358 0902 2EE0     		b	.L355
 5359              	.L353:
1682:..\src/interruptions.c ****             }
 5360              		.loc 1 1682 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 127


 5361 0904 FB6C     		ldr	r3, [r7, #76]
 5362 0906 002B     		cmp	r3, #0
 5363 0908 B8BF     		it	lt
 5364 090a 5B42     		rsblt	r3, r3, #0
 5365 090c DBB2     		uxtb	r3, r3
 5366 090e 1846     		mov	r0, r3
 5367 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1685:..\src/interruptions.c ****         case 1:         // Motor 2
 5368              		.loc 1 1685 0
 5369 0914 25E0     		b	.L355
 5370              	.L350:
1688:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5371              		.loc 1 1688 0
 5372 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5373 0918 144A     		ldr	r2, .L369
 5374 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5375 091c 002B     		cmp	r3, #0
 5376 091e 03D0     		beq	.L356
1689:..\src/interruptions.c ****             else
 5377              		.loc 1 1689 0
 5378 0920 0120     		movs	r0, #1
 5379 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5380 0926 02E0     		b	.L357
 5381              	.L356:
1691:..\src/interruptions.c ****             
 5382              		.loc 1 1691 0
 5383 0928 0020     		movs	r0, #0
 5384 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5385              	.L357:
1693:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 5386              		.loc 1 1693 0
 5387 092e 7B6C     		ldr	r3, [r7, #68]
 5388 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5389 0934 012B     		cmp	r3, #1
 5390 0936 0BD1     		bne	.L358
1694:..\src/interruptions.c ****             }
 5391              		.loc 1 1694 0
 5392 0938 FB6C     		ldr	r3, [r7, #76]
 5393 093a 002B     		cmp	r3, #0
 5394 093c B8BF     		it	lt
 5395 093e 5B42     		rsblt	r3, r3, #0
 5396 0940 DBB2     		uxtb	r3, r3
 5397 0942 C3F16403 		rsb	r3, r3, #100
 5398 0946 DBB2     		uxtb	r3, r3
 5399 0948 1846     		mov	r0, r3
 5400 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1700:..\src/interruptions.c ****         default:
 5401              		.loc 1 1700 0
 5402 094e 07E0     		b	.L362
 5403              	.L358:
1697:..\src/interruptions.c ****             }
 5404              		.loc 1 1697 0
 5405 0950 FB6C     		ldr	r3, [r7, #76]
 5406 0952 002B     		cmp	r3, #0
 5407 0954 B8BF     		it	lt
 5408 0956 5B42     		rsblt	r3, r3, #0
 5409 0958 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 128


 5410 095a 1846     		mov	r0, r3
 5411 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5412              	.L362:
1700:..\src/interruptions.c ****         default:
 5413              		.loc 1 1700 0
 5414 0960 00BF     		nop
 5415              	.L355:
1703:..\src/interruptions.c ****     }
1704:..\src/interruptions.c ****     
1705:..\src/interruptions.c **** }
 5416              		.loc 1 1705 0
 5417 0962 00BF     		nop
 5418 0964 5437     		adds	r7, r7, #84
 5419              		.cfi_def_cfa_offset 12
 5420 0966 BD46     		mov	sp, r7
 5421              		.cfi_def_cfa_register 13
 5422              		@ sp needed
 5423 0968 90BD     		pop	{r4, r7, pc}
 5424              	.L370:
 5425 096a 00BF     		.align	2
 5426              	.L369:
 5427 096c BC000000 		.word	motor_dir.10611
 5428              		.cfi_endproc
 5429              	.LFE72:
 5430              		.size	motor_control_generic, .-motor_control_generic
 5431              		.global	__aeabi_fcmpeq
 5432              		.global	__aeabi_fmul
 5433              		.global	__aeabi_f2iz
 5434              		.global	__aeabi_fcmplt
 5435              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5436              		.align	2
 5437              		.global	encoder_reading_SPI
 5438              		.thumb
 5439              		.thumb_func
 5440              		.type	encoder_reading_SPI, %function
 5441              	encoder_reading_SPI:
 5442              	.LFB73:
1706:..\src/interruptions.c **** 
1707:..\src/interruptions.c **** //==============================================================================
1708:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1709:..\src/interruptions.c **** //==============================================================================
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5443              		.loc 1 1711 0
 5444              		.cfi_startproc
 5445              		@ args = 0, pretend = 0, frame = 48
 5446              		@ frame_needed = 1, uses_anonymous_args = 0
 5447 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5448              		.cfi_def_cfa_offset 20
 5449              		.cfi_offset 4, -20
 5450              		.cfi_offset 5, -16
 5451              		.cfi_offset 6, -12
 5452              		.cfi_offset 7, -8
 5453              		.cfi_offset 14, -4
 5454 0002 8FB0     		sub	sp, sp, #60
 5455              		.cfi_def_cfa_offset 80
 5456 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 129


 5457              		.cfi_def_cfa 7, 72
 5458 0006 0346     		mov	r3, r0
 5459 0008 0A46     		mov	r2, r1
 5460 000a FB71     		strb	r3, [r7, #7]
 5461 000c 1346     		mov	r3, r2
 5462 000e BB71     		strb	r3, [r7, #6]
1712:..\src/interruptions.c **** 
1713:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5463              		.loc 1 1713 0
 5464 0010 0023     		movs	r3, #0
 5465 0012 87F82F30 		strb	r3, [r7, #47]
1714:..\src/interruptions.c ****     
1715:..\src/interruptions.c ****     // Encoder Variables  
1716:..\src/interruptions.c ****     uint8 jj;
1717:..\src/interruptions.c ****      
1718:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1719:..\src/interruptions.c ****     int16 tmp_value_encoder;
1720:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1721:..\src/interruptions.c ****     int32 value_encoder;
1722:..\src/interruptions.c ****     int32 speed_encoder;
1723:..\src/interruptions.c ****     int32 value_diff;
1724:..\src/interruptions.c **** 	int8 init_rot = 0;
 5466              		.loc 1 1724 0
 5467 0016 0023     		movs	r3, #0
 5468 0018 87F82730 		strb	r3, [r7, #39]
1725:..\src/interruptions.c **** 
1726:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1727:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1728:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1729:..\src/interruptions.c ****     
1730:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1731:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1732:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1733:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1734:..\src/interruptions.c **** 
1735:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1736:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1737:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1738:..\src/interruptions.c ****     
1739:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5469              		.loc 1 1739 0
 5470 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5471 001e 924A     		ldr	r2, .L408
 5472 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5473 0022 002B     		cmp	r3, #0
 5474 0024 19D0     		beq	.L372
1740:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5475              		.loc 1 1740 0
 5476 0026 0323     		movs	r3, #3
 5477 0028 87F82E30 		strb	r3, [r7, #46]
 5478 002c 0AE0     		b	.L373
 5479              	.L374:
1741:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5480              		.loc 1 1741 0
 5481 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5482 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5483 0034 8D48     		ldr	r0, .L408+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 130


 5484 0036 1346     		mov	r3, r2
 5485 0038 5B00     		lsls	r3, r3, #1
 5486 003a 1344     		add	r3, r3, r2
 5487 003c 0B44     		add	r3, r3, r1
 5488 003e 0022     		movs	r2, #0
 5489 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5490              	.L373:
1740:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5491              		.loc 1 1740 0 discriminator 1
 5492 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5493 0048 5A1E     		subs	r2, r3, #1
 5494 004a 87F82E20 		strb	r2, [r7, #46]
 5495 004e 002B     		cmp	r3, #0
 5496 0050 EDD1     		bne	.L374
1742:..\src/interruptions.c ****         
1743:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5497              		.loc 1 1743 0
 5498 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5499 0054 844A     		ldr	r2, .L408
 5500 0056 0021     		movs	r1, #0
 5501 0058 D154     		strb	r1, [r2, r3]
 5502              	.L372:
1744:..\src/interruptions.c ****     }
1745:..\src/interruptions.c **** 
1746:..\src/interruptions.c ****     //======================================================     reading sensors
1747:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5503              		.loc 1 1747 0
 5504 005a 0023     		movs	r3, #0
 5505 005c 87F82F30 		strb	r3, [r7, #47]
 5506 0060 0DE0     		b	.L375
 5507              	.L376:
1748:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5508              		.loc 1 1748 0 discriminator 3
 5509 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5510 0066 9B00     		lsls	r3, r3, #2
 5511 0068 07F13002 		add	r2, r7, #48
 5512 006c 1344     		add	r3, r3, r2
 5513 006e 0022     		movs	r2, #0
 5514 0070 43F8282C 		str	r2, [r3, #-40]
1747:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5515              		.loc 1 1747 0 discriminator 3
 5516 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5517 0078 0133     		adds	r3, r3, #1
 5518 007a 87F82F30 		strb	r3, [r7, #47]
 5519              	.L375:
1747:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5520              		.loc 1 1747 0 is_stmt 0 discriminator 1
 5521 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5522 0082 022B     		cmp	r3, #2
 5523 0084 EDD9     		bls	.L376
1749:..\src/interruptions.c ****     }   
1750:..\src/interruptions.c ****     
1751:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5524              		.loc 1 1751 0 is_stmt 1
 5525 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5526 0088 794A     		ldr	r2, .L408+8
 5527 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 131


 5528 008c 1A46     		mov	r2, r3
 5529 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5530 0090 1946     		mov	r1, r3
 5531 0092 1046     		mov	r0, r2
 5532 0094 FFF7FEFF 		bl	ReadEncoderLine
 5533              	.LBB10:
1752:..\src/interruptions.c ****                                                                         //CS1 for left hand
1753:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5534              		.loc 1 1753 0
 5535 0098 0023     		movs	r3, #0
 5536 009a 3B62     		str	r3, [r7, #32]
 5537 009c 2EE0     		b	.L377
 5538              	.L379:
1754:..\src/interruptions.c ****         
1755:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1756:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5539              		.loc 1 1756 0
 5540 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5541 00a0 7449     		ldr	r1, .L408+12
 5542 00a2 1346     		mov	r3, r2
 5543 00a4 5B00     		lsls	r3, r3, #1
 5544 00a6 1344     		add	r3, r3, r2
 5545 00a8 1B01     		lsls	r3, r3, #4
 5546 00aa CA18     		adds	r2, r1, r3
 5547 00ac 3B6A     		ldr	r3, [r7, #32]
 5548 00ae 1344     		add	r3, r3, r2
 5549 00b0 03F2B113 		addw	r3, r3, #433
 5550 00b4 1B78     		ldrb	r3, [r3]
 5551 00b6 87F82F30 		strb	r3, [r7, #47]
1757:..\src/interruptions.c ****         
1758:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5552              		.loc 1 1758 0
 5553 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5554 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5555 00c0 6D48     		ldr	r0, .L408+16
 5556 00c2 1346     		mov	r3, r2
 5557 00c4 9B00     		lsls	r3, r3, #2
 5558 00c6 1344     		add	r3, r3, r2
 5559 00c8 0344     		add	r3, r3, r0
 5560 00ca 0B44     		add	r3, r3, r1
 5561 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5562 00ce 0F2B     		cmp	r3, #15
 5563 00d0 11D9     		bls	.L378
1759:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5564              		.loc 1 1759 0
 5565 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5566 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5567 00d8 6848     		ldr	r0, .L408+20
 5568 00da 1346     		mov	r3, r2
 5569 00dc 9B00     		lsls	r3, r3, #2
 5570 00de 1344     		add	r3, r3, r2
 5571 00e0 0B44     		add	r3, r3, r1
 5572 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5573 00e6 1A46     		mov	r2, r3
 5574 00e8 3B6A     		ldr	r3, [r7, #32]
 5575 00ea 9B00     		lsls	r3, r3, #2
 5576 00ec 07F13001 		add	r1, r7, #48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 132


 5577 00f0 0B44     		add	r3, r3, r1
 5578 00f2 43F8282C 		str	r2, [r3, #-40]
 5579              	.L378:
1753:..\src/interruptions.c ****         
 5580              		.loc 1 1753 0 discriminator 2
 5581 00f6 3B6A     		ldr	r3, [r7, #32]
 5582 00f8 0133     		adds	r3, r3, #1
 5583 00fa 3B62     		str	r3, [r7, #32]
 5584              	.L377:
1753:..\src/interruptions.c ****         
 5585              		.loc 1 1753 0 is_stmt 0 discriminator 1
 5586 00fc 3B6A     		ldr	r3, [r7, #32]
 5587 00fe 022B     		cmp	r3, #2
 5588 0100 CDDD     		ble	.L379
 5589              	.LBE10:
1760:..\src/interruptions.c ****         }
1761:..\src/interruptions.c ****     }
1762:..\src/interruptions.c ****     
1763:..\src/interruptions.c ****     // S = SIGN BIT
1764:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1765:..\src/interruptions.c ****     // 0 = 0 BIT
1766:..\src/interruptions.c ****     // C = CONTROL BIT
1767:..\src/interruptions.c ****     
1768:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5590              		.loc 1 1768 0 is_stmt 1
 5591 0102 0023     		movs	r3, #0
 5592 0104 87F82F30 		strb	r3, [r7, #47]
 5593 0108 35E3     		b	.L380
 5594              	.L401:
1769:..\src/interruptions.c ****         
1770:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5595              		.loc 1 1770 0
 5596 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5597 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5598 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5599 0114 9B00     		lsls	r3, r3, #2
 5600 0116 07F13001 		add	r1, r7, #48
 5601 011a 0B44     		add	r3, r3, r1
 5602 011c 53F8281C 		ldr	r1, [r3, #-40]
 5603 0120 574C     		ldr	r4, .L408+24
 5604 0122 1346     		mov	r3, r2
 5605 0124 9B00     		lsls	r3, r3, #2
 5606 0126 1344     		add	r3, r3, r2
 5607 0128 0344     		add	r3, r3, r0
 5608 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1771:..\src/interruptions.c ****         
1772:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5609              		.loc 1 1772 0
 5610 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5611 0132 9B00     		lsls	r3, r3, #2
 5612 0134 07F13002 		add	r2, r7, #48
 5613 0138 1344     		add	r3, r3, r2
 5614 013a 53F8283C 		ldr	r3, [r3, #-40]
 5615 013e 99B2     		uxth	r1, r3
 5616 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5617 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5618 0146 4F4C     		ldr	r4, .L408+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 133


 5619 0148 1346     		mov	r3, r2
 5620 014a 5B00     		lsls	r3, r3, #1
 5621 014c 1344     		add	r3, r3, r2
 5622 014e 9B00     		lsls	r3, r3, #2
 5623 0150 0344     		add	r3, r3, r0
 5624 0152 6633     		adds	r3, r3, #102
 5625 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5626 0158 9BB2     		uxth	r3, r3
 5627 015a CB1A     		subs	r3, r1, r3
 5628 015c 9BB2     		uxth	r3, r3
 5629 015e BB85     		strh	r3, [r7, #44]	@ movhi
1773:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5630              		.loc 1 1773 0
 5631 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5632 0164 002B     		cmp	r3, #0
 5633 0166 04DA     		bge	.L381
1774:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5634              		.loc 1 1774 0
 5635 0168 BB8D     		ldrh	r3, [r7, #44]
 5636 016a 03F58053 		add	r3, r3, #4096
 5637 016e 9BB2     		uxth	r3, r3
 5638 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5639              	.L381:
1775:..\src/interruptions.c ****         }       // Range [0, 4096]
1776:..\src/interruptions.c **** 
1777:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5640              		.loc 1 1777 0
 5641 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5642 0176 B3F5006F 		cmp	r3, #2048
 5643 017a 04DB     		blt	.L382
1778:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5644              		.loc 1 1778 0
 5645 017c BB8D     		ldrh	r3, [r7, #44]
 5646 017e A3F58053 		sub	r3, r3, #4096
 5647 0182 9BB2     		uxth	r3, r3
 5648 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5649              	.L382:
1779:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1780:..\src/interruptions.c **** 
1781:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5650              		.loc 1 1781 0
 5651 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5652 018a 1B01     		lsls	r3, r3, #4
 5653 018c FB61     		str	r3, [r7, #28]
1782:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5654              		.loc 1 1782 0
 5655 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5656 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5657 0194 3C48     		ldr	r0, .L408+32
 5658 0196 1346     		mov	r3, r2
 5659 0198 5B00     		lsls	r3, r3, #1
 5660 019a 1344     		add	r3, r3, r2
 5661 019c 0B44     		add	r3, r3, r1
 5662 019e FA69     		ldr	r2, [r7, #28]
 5663 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1783:..\src/interruptions.c **** 
1784:..\src/interruptions.c ****         // Initialize last_value_encoder
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 134


1785:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5664              		.loc 1 1785 0
 5665 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5666 01a6 394A     		ldr	r2, .L408+36
 5667 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5668 01aa 002B     		cmp	r3, #0
 5669 01ac 12D0     		beq	.L383
1786:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5670              		.loc 1 1786 0
 5671 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5672 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5673 01b4 2D48     		ldr	r0, .L408+4
 5674 01b6 1346     		mov	r3, r2
 5675 01b8 5B00     		lsls	r3, r3, #1
 5676 01ba 1344     		add	r3, r3, r2
 5677 01bc 0B44     		add	r3, r3, r1
 5678 01be FA69     		ldr	r2, [r7, #28]
 5679 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1787:..\src/interruptions.c ****             if (index == 2)
 5680              		.loc 1 1787 0
 5681 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5682 01c8 022B     		cmp	r3, #2
 5683 01ca 03D1     		bne	.L383
1788:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5684              		.loc 1 1788 0
 5685 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5686 01ce 2F4A     		ldr	r2, .L408+36
 5687 01d0 0021     		movs	r1, #0
 5688 01d2 D154     		strb	r1, [r2, r3]
 5689              	.L383:
1789:..\src/interruptions.c ****         }
1790:..\src/interruptions.c **** 
1791:..\src/interruptions.c ****         // Take care of rotations
1792:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5690              		.loc 1 1792 0
 5691 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5692 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5693 01da 2448     		ldr	r0, .L408+4
 5694 01dc 1346     		mov	r3, r2
 5695 01de 5B00     		lsls	r3, r3, #1
 5696 01e0 1344     		add	r3, r3, r2
 5697 01e2 0B44     		add	r3, r3, r1
 5698 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5699 01e8 FA69     		ldr	r2, [r7, #28]
 5700 01ea D31A     		subs	r3, r2, r3
 5701 01ec BB61     		str	r3, [r7, #24]
1793:..\src/interruptions.c **** 
1794:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1795:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1796:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1797:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1798:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1799:..\src/interruptions.c ****         //                                               |           |
1800:..\src/interruptions.c ****         //                                           24575           -24576
1801:..\src/interruptions.c ****         //                                               |___________|
1802:..\src/interruptions.c ****         //                                                   49152
1803:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 135


1804:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1805:..\src/interruptions.c ****         // and update the variable only if the difference between
1806:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1809:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1810:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1811:..\src/interruptions.c **** 
1812:..\src/interruptions.c ****         if (value_diff > 49152)
 5702              		.loc 1 1812 0
 5703 01ee BB69     		ldr	r3, [r7, #24]
 5704 01f0 B3F5404F 		cmp	r3, #49152
 5705 01f4 19DD     		ble	.L384
1813:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5706              		.loc 1 1813 0
 5707 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5708 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5709 01fc 2448     		ldr	r0, .L408+40
 5710 01fe 3421     		movs	r1, #52
 5711 0200 01FB02F1 		mul	r1, r1, r2
 5712 0204 0144     		add	r1, r1, r0
 5713 0206 1944     		add	r1, r1, r3
 5714 0208 1831     		adds	r1, r1, #24
 5715 020a 91F90010 		ldrsb	r1, [r1]
 5716 020e C9B2     		uxtb	r1, r1
 5717 0210 0139     		subs	r1, r1, #1
 5718 0212 C9B2     		uxtb	r1, r1
 5719 0214 4CB2     		sxtb	r4, r1
 5720 0216 1E49     		ldr	r1, .L408+40
 5721 0218 3420     		movs	r0, #52
 5722 021a 00FB02F2 		mul	r2, r0, r2
 5723 021e 0A44     		add	r2, r2, r1
 5724 0220 1344     		add	r3, r3, r2
 5725 0222 1833     		adds	r3, r3, #24
 5726 0224 2246     		mov	r2, r4
 5727 0226 1A70     		strb	r2, [r3]
 5728 0228 5CE0     		b	.L385
 5729              	.L384:
1814:..\src/interruptions.c ****         else{ 
1815:..\src/interruptions.c ****             if (value_diff < -49152)
 5730              		.loc 1 1815 0
 5731 022a BB69     		ldr	r3, [r7, #24]
 5732 022c 13F5404F 		cmn	r3, #49152
 5733 0230 30DA     		bge	.L386
1816:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5734              		.loc 1 1816 0
 5735 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5736 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5737 0238 1548     		ldr	r0, .L408+40
 5738 023a 3421     		movs	r1, #52
 5739 023c 01FB02F1 		mul	r1, r1, r2
 5740 0240 0144     		add	r1, r1, r0
 5741 0242 1944     		add	r1, r1, r3
 5742 0244 1831     		adds	r1, r1, #24
 5743 0246 91F90010 		ldrsb	r1, [r1]
 5744 024a C9B2     		uxtb	r1, r1
 5745 024c 0131     		adds	r1, r1, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 136


 5746 024e C9B2     		uxtb	r1, r1
 5747 0250 4CB2     		sxtb	r4, r1
 5748 0252 0F49     		ldr	r1, .L408+40
 5749 0254 3420     		movs	r0, #52
 5750 0256 00FB02F2 		mul	r2, r0, r2
 5751 025a 0A44     		add	r2, r2, r1
 5752 025c 1344     		add	r3, r3, r2
 5753 025e 1833     		adds	r3, r3, #24
 5754 0260 2246     		mov	r2, r4
 5755 0262 1A70     		strb	r2, [r3]
 5756 0264 3EE0     		b	.L385
 5757              	.L409:
 5758 0266 00BF     		.align	2
 5759              	.L408:
 5760 0268 00000000 		.word	reset_last_value_flag
 5761 026c E0000000 		.word	last_value_encoder.10635
 5762 0270 00000000 		.word	N_Encoder_Line_Connected
 5763 0274 00000000 		.word	c_mem
 5764 0278 00000000 		.word	Encoder_Check
 5765 027c 00000000 		.word	Encoder_Value
 5766 0280 00000000 		.word	data_encoder_raw
 5767 0284 00000000 		.word	g_mem
 5768 0288 F8000000 		.word	comp_value_encoder.10636
 5769 028c 04000000 		.word	only_first_time.10638
 5770 0290 00000000 		.word	g_meas
 5771              	.L386:
1817:..\src/interruptions.c ****             else{
1818:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5772              		.loc 1 1818 0
 5773 0294 BB69     		ldr	r3, [r7, #24]
 5774 0296 002B     		cmp	r3, #0
 5775 0298 B8BF     		it	lt
 5776 029a 5B42     		rsblt	r3, r3, #0
 5777 029c B3F5804F 		cmp	r3, #16384
 5778 02a0 20DD     		ble	.L385
1819:..\src/interruptions.c ****                     error[n_line][index]++;
 5779              		.loc 1 1819 0
 5780 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5781 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5782 02a8 9B48     		ldr	r0, .L410
 5783 02aa 1346     		mov	r3, r2
 5784 02ac 5B00     		lsls	r3, r3, #1
 5785 02ae 1344     		add	r3, r3, r2
 5786 02b0 0344     		add	r3, r3, r0
 5787 02b2 0B44     		add	r3, r3, r1
 5788 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5789 02b6 0133     		adds	r3, r3, #1
 5790 02b8 DCB2     		uxtb	r4, r3
 5791 02ba 9748     		ldr	r0, .L410
 5792 02bc 1346     		mov	r3, r2
 5793 02be 5B00     		lsls	r3, r3, #1
 5794 02c0 1344     		add	r3, r3, r2
 5795 02c2 0344     		add	r3, r3, r0
 5796 02c4 0B44     		add	r3, r3, r1
 5797 02c6 2246     		mov	r2, r4
 5798 02c8 1A70     		strb	r2, [r3]
1820:..\src/interruptions.c ****                                 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 137


1821:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5799              		.loc 1 1821 0
 5800 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5801 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5802 02d0 9148     		ldr	r0, .L410
 5803 02d2 1346     		mov	r3, r2
 5804 02d4 5B00     		lsls	r3, r3, #1
 5805 02d6 1344     		add	r3, r3, r2
 5806 02d8 0344     		add	r3, r3, r0
 5807 02da 0B44     		add	r3, r3, r1
 5808 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5809 02de 092B     		cmp	r3, #9
 5810 02e0 40F28882 		bls	.L407
 5811              	.L385:
1822:..\src/interruptions.c ****                         // Discard
1823:..\src/interruptions.c ****                         return;
1824:..\src/interruptions.c ****                 }
1825:..\src/interruptions.c ****             }
1826:..\src/interruptions.c ****         }
1827:..\src/interruptions.c **** 
1828:..\src/interruptions.c ****         error[n_line][index] = 0;
 5812              		.loc 1 1828 0
 5813 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5814 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5815 02ea 8B48     		ldr	r0, .L410
 5816 02ec 1346     		mov	r3, r2
 5817 02ee 5B00     		lsls	r3, r3, #1
 5818 02f0 1344     		add	r3, r3, r2
 5819 02f2 0344     		add	r3, r3, r0
 5820 02f4 0B44     		add	r3, r3, r1
 5821 02f6 0022     		movs	r2, #0
 5822 02f8 1A70     		strb	r2, [r3]
1829:..\src/interruptions.c ****         
1830:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5823              		.loc 1 1830 0
 5824 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5825 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5826 0300 8648     		ldr	r0, .L410+4
 5827 0302 1346     		mov	r3, r2
 5828 0304 5B00     		lsls	r3, r3, #1
 5829 0306 1344     		add	r3, r3, r2
 5830 0308 0B44     		add	r3, r3, r1
 5831 030a FA69     		ldr	r2, [r7, #28]
 5832 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1831:..\src/interruptions.c **** 
1832:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5833              		.loc 1 1832 0
 5834 0310 FB69     		ldr	r3, [r7, #28]
 5835 0312 BB62     		str	r3, [r7, #40]
1833:..\src/interruptions.c **** 
1834:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5836              		.loc 1 1834 0
 5837 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5838 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5839 031a 8149     		ldr	r1, .L410+8
 5840 031c 3420     		movs	r0, #52
 5841 031e 00FB02F2 		mul	r2, r0, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 138


 5842 0322 0A44     		add	r2, r2, r1
 5843 0324 1344     		add	r3, r3, r2
 5844 0326 1833     		adds	r3, r3, #24
 5845 0328 93F90030 		ldrsb	r3, [r3]
 5846 032c 1B04     		lsls	r3, r3, #16
 5847 032e BA6A     		ldr	r2, [r7, #40]
 5848 0330 1344     		add	r3, r3, r2
 5849 0332 BB62     		str	r3, [r7, #40]
1835:..\src/interruptions.c ****         
1836:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5850              		.loc 1 1836 0
 5851 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5852 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5853 033a 7A48     		ldr	r0, .L410+12
 5854 033c 1346     		mov	r3, r2
 5855 033e 5B00     		lsls	r3, r3, #1
 5856 0340 1344     		add	r3, r3, r2
 5857 0342 9B00     		lsls	r3, r3, #2
 5858 0344 0B44     		add	r3, r3, r1
 5859 0346 6833     		adds	r3, r3, #104
 5860 0348 9B00     		lsls	r3, r3, #2
 5861 034a 0344     		add	r3, r3, r0
 5862 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5863 034e 4FF07E51 		mov	r1, #1065353216
 5864 0352 1846     		mov	r0, r3
 5865 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5866 0358 0346     		mov	r3, r0
 5867 035a 002B     		cmp	r3, #0
 5868 035c 1AD1     		bne	.L388
1837:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5869              		.loc 1 1837 0
 5870 035e B86A     		ldr	r0, [r7, #40]
 5871 0360 FFF7FEFF 		bl	__aeabi_i2f
 5872 0364 0446     		mov	r4, r0
 5873 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5874 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5875 036c 6D48     		ldr	r0, .L410+12
 5876 036e 1346     		mov	r3, r2
 5877 0370 5B00     		lsls	r3, r3, #1
 5878 0372 1344     		add	r3, r3, r2
 5879 0374 9B00     		lsls	r3, r3, #2
 5880 0376 0B44     		add	r3, r3, r1
 5881 0378 6833     		adds	r3, r3, #104
 5882 037a 9B00     		lsls	r3, r3, #2
 5883 037c 0344     		add	r3, r3, r0
 5884 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5885 0380 1946     		mov	r1, r3
 5886 0382 2046     		mov	r0, r4
 5887 0384 FFF7FEFF 		bl	__aeabi_fmul
 5888 0388 0346     		mov	r3, r0
 5889 038a 1846     		mov	r0, r3
 5890 038c FFF7FEFF 		bl	__aeabi_f2iz
 5891 0390 0346     		mov	r3, r0
 5892 0392 BB62     		str	r3, [r7, #40]
 5893              	.L388:
1838:..\src/interruptions.c ****         }
1839:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 139


1840:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5894              		.loc 1 1840 0
 5895 0394 634B     		ldr	r3, .L410+12
 5896 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5897 039a 002B     		cmp	r3, #0
 5898 039c 0BD1     		bne	.L390
1841:..\src/interruptions.c ****             // Right / Left hand turn
1842:..\src/interruptions.c ****             if (index == 0) {
 5899              		.loc 1 1842 0
 5900 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5901 03a2 002B     		cmp	r3, #0
 5902 03a4 07D1     		bne	.L390
1843:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5903              		.loc 1 1843 0
 5904 03a6 5F4B     		ldr	r3, .L410+12
 5905 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5906 03ac 002B     		cmp	r3, #0
 5907 03ae 02D1     		bne	.L390
1844:..\src/interruptions.c ****                     value_encoder *= -1;        
 5908              		.loc 1 1844 0
 5909 03b0 BB6A     		ldr	r3, [r7, #40]
 5910 03b2 5B42     		negs	r3, r3
 5911 03b4 BB62     		str	r3, [r7, #40]
 5912              	.L390:
1845:..\src/interruptions.c ****                 }
1846:..\src/interruptions.c ****             }
1847:..\src/interruptions.c ****         } 
1848:..\src/interruptions.c ****         
1849:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5913              		.loc 1 1849 0
 5914 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5915 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5916 03bc 5848     		ldr	r0, .L410+8
 5917 03be 1346     		mov	r3, r2
 5918 03c0 5B00     		lsls	r3, r3, #1
 5919 03c2 1344     		add	r3, r3, r2
 5920 03c4 9B00     		lsls	r3, r3, #2
 5921 03c6 1344     		add	r3, r3, r2
 5922 03c8 0B44     		add	r3, r3, r1
 5923 03ca BA6A     		ldr	r2, [r7, #40]
 5924 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1850:..\src/interruptions.c ****     
1851:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5925              		.loc 1 1851 0
 5926 03d0 BA6A     		ldr	r2, [r7, #40]
 5927 03d2 1346     		mov	r3, r2
 5928 03d4 9B00     		lsls	r3, r3, #2
 5929 03d6 1344     		add	r3, r3, r2
 5930 03d8 5B00     		lsls	r3, r3, #1
 5931 03da 9918     		adds	r1, r3, r2
 5932 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5933 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5934 03e2 514C     		ldr	r4, .L410+16
 5935 03e4 1346     		mov	r3, r2
 5936 03e6 5B00     		lsls	r3, r3, #1
 5937 03e8 1344     		add	r3, r3, r2
 5938 03ea 0344     		add	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 140


 5939 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5940 03f0 6FF01102 		mvn	r2, #17
 5941 03f4 02FB03F3 		mul	r3, r2, r3
 5942 03f8 1944     		add	r1, r1, r3
 5943 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5944 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5945 0400 4A4C     		ldr	r4, .L410+20
 5946 0402 1346     		mov	r3, r2
 5947 0404 5B00     		lsls	r3, r3, #1
 5948 0406 1344     		add	r3, r3, r2
 5949 0408 0344     		add	r3, r3, r0
 5950 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5951 040e 1346     		mov	r3, r2
 5952 0410 DB00     		lsls	r3, r3, #3
 5953 0412 1344     		add	r3, r3, r2
 5954 0414 1944     		add	r1, r1, r3
 5955 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5956 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5957 041c 444C     		ldr	r4, .L410+24
 5958 041e 1346     		mov	r3, r2
 5959 0420 5B00     		lsls	r3, r3, #1
 5960 0422 1344     		add	r3, r3, r2
 5961 0424 0344     		add	r3, r3, r0
 5962 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5963 042a 5B00     		lsls	r3, r3, #1
 5964 042c C81A     		subs	r0, r1, r3
 5965 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5966 0432 DB00     		lsls	r3, r3, #3
 5967 0434 3F4A     		ldr	r2, .L410+28
 5968 0436 1344     		add	r3, r3, r2
 5969 0438 1946     		mov	r1, r3
 5970 043a FFF7FEFF 		bl	filter
 5971 043e 0346     		mov	r3, r0
 5972 0440 1BB2     		sxth	r3, r3
 5973 0442 7B61     		str	r3, [r7, #20]
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****         //Update current speed
1854:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5974              		.loc 1 1854 0
 5975 0444 7869     		ldr	r0, [r7, #20]
 5976 0446 FFF7FEFF 		bl	__aeabi_i2f
 5977 044a 0446     		mov	r4, r0
 5978 044c 3A4B     		ldr	r3, .L410+32
 5979 044e 1B68     		ldr	r3, [r3]	@ float
 5980 0450 3A49     		ldr	r1, .L410+36
 5981 0452 1846     		mov	r0, r3
 5982 0454 FFF7FEFF 		bl	__aeabi_fmul
 5983 0458 0346     		mov	r3, r0
 5984 045a 1946     		mov	r1, r3
 5985 045c 2046     		mov	r0, r4
 5986 045e FFF7FEFF 		bl	__aeabi_fdiv
 5987 0462 0346     		mov	r3, r0
 5988 0464 1846     		mov	r0, r3
 5989 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5990 046a 0346     		mov	r3, r0
 5991 046c 7B61     		str	r3, [r7, #20]
1855:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 141


 5992              		.loc 1 1855 0
 5993 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5994 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5995 0474 2A48     		ldr	r0, .L410+8
 5996 0476 1346     		mov	r3, r2
 5997 0478 5B00     		lsls	r3, r3, #1
 5998 047a 1344     		add	r3, r3, r2
 5999 047c 9B00     		lsls	r3, r3, #2
 6000 047e 1344     		add	r3, r3, r2
 6001 0480 0B44     		add	r3, r3, r1
 6002 0482 0633     		adds	r3, r3, #6
 6003 0484 9B00     		lsls	r3, r3, #2
 6004 0486 0344     		add	r3, r3, r0
 6005 0488 7A69     		ldr	r2, [r7, #20]
 6006 048a 5A60     		str	r2, [r3, #4]
1856:..\src/interruptions.c **** 
1857:..\src/interruptions.c ****         // update old velocity and acceleration values
1858:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 6007              		.loc 1 1858 0
 6008 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6009 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 6010 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 6011 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 6012 0498 244D     		ldr	r5, .L410+20
 6013 049a 0B46     		mov	r3, r1
 6014 049c 5B00     		lsls	r3, r3, #1
 6015 049e 0B44     		add	r3, r3, r1
 6016 04a0 2344     		add	r3, r3, r4
 6017 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 6018 04a6 224C     		ldr	r4, .L410+24
 6019 04a8 1346     		mov	r3, r2
 6020 04aa 5B00     		lsls	r3, r3, #1
 6021 04ac 1344     		add	r3, r3, r2
 6022 04ae 0344     		add	r3, r3, r0
 6023 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1859:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 6024              		.loc 1 1859 0
 6025 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6026 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 6027 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 6028 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 6029 04c0 194D     		ldr	r5, .L410+16
 6030 04c2 0B46     		mov	r3, r1
 6031 04c4 5B00     		lsls	r3, r3, #1
 6032 04c6 0B44     		add	r3, r3, r1
 6033 04c8 2344     		add	r3, r3, r4
 6034 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 6035 04ce 174C     		ldr	r4, .L410+20
 6036 04d0 1346     		mov	r3, r2
 6037 04d2 5B00     		lsls	r3, r3, #1
 6038 04d4 1344     		add	r3, r3, r2
 6039 04d6 0344     		add	r3, r3, r0
 6040 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1860:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 6041              		.loc 1 1860 0
 6042 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6043 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 142


 6044 04e2 1148     		ldr	r0, .L410+16
 6045 04e4 1346     		mov	r3, r2
 6046 04e6 5B00     		lsls	r3, r3, #1
 6047 04e8 1344     		add	r3, r3, r2
 6048 04ea 0B44     		add	r3, r3, r1
 6049 04ec BA6A     		ldr	r2, [r7, #40]
 6050 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1861:..\src/interruptions.c **** 
1862:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1863:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 6051              		.loc 1 1863 0
 6052 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6053 04f4 124A     		ldr	r2, .L410+40
 6054 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6055 04f8 002B     		cmp	r3, #0
 6056 04fa 40F03781 		bne	.L391
1864:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 6057              		.loc 1 1864 0
 6058 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6059 0500 104A     		ldr	r2, .L410+44
 6060 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6061 0504 352B     		cmp	r3, #53
 6062 0506 1FD8     		bhi	.L392
1865:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 6063              		.loc 1 1865 0
 6064 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6065 050a 0E4A     		ldr	r2, .L410+44
 6066 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 6067 050e 0132     		adds	r2, r2, #1
 6068 0510 D1B2     		uxtb	r1, r2
 6069 0512 0C4A     		ldr	r2, .L410+44
 6070 0514 D154     		strb	r1, [r2, r3]
 6071 0516 29E1     		b	.L391
 6072              	.L411:
 6073              		.align	2
 6074              	.L410:
 6075 0518 10010000 		.word	error.10637
 6076 051c E0000000 		.word	last_value_encoder.10635
 6077 0520 00000000 		.word	g_meas
 6078 0524 00000000 		.word	c_mem
 6079 0528 18010000 		.word	v_value.10642
 6080 052c 30010000 		.word	vv_value.10643
 6081 0530 48010000 		.word	vvv_value.10644
 6082 0534 00000000 		.word	filt_vel
 6083 0538 00000000 		.word	cycle_time
 6084 053c 0000C040 		.word	1086324736
 6085 0540 00000000 		.word	pos_reconstruct
 6086 0544 60010000 		.word	one_time_execute.10640
 6087              	.L392:
1866:..\src/interruptions.c ****             else {
1867:..\src/interruptions.c **** 
1868:..\src/interruptions.c ****                 //Double encoder translation
1869:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 6088              		.loc 1 1869 0
 6089 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6090 054a AC49     		ldr	r1, .L412
 6091 054c 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 143


 6092 054e 5B00     		lsls	r3, r3, #1
 6093 0550 1344     		add	r3, r3, r2
 6094 0552 1B01     		lsls	r3, r3, #4
 6095 0554 0B44     		add	r3, r3, r1
 6096 0556 03F5D873 		add	r3, r3, #432
 6097 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6098 055c 002B     		cmp	r3, #0
 6099 055e 5ED0     		beq	.L393
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6100              		.loc 1 1870 0
 6101 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6102 0562 A749     		ldr	r1, .L412+4
 6103 0564 1346     		mov	r3, r2
 6104 0566 5B00     		lsls	r3, r3, #1
 6105 0568 1344     		add	r3, r3, r2
 6106 056a 9B00     		lsls	r3, r3, #2
 6107 056c 0B44     		add	r3, r3, r1
 6108 056e 1868     		ldr	r0, [r3]
 6109 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6110 0572 A349     		ldr	r1, .L412+4
 6111 0574 1346     		mov	r3, r2
 6112 0576 5B00     		lsls	r3, r3, #1
 6113 0578 1344     		add	r3, r3, r2
 6114 057a 9B00     		lsls	r3, r3, #2
 6115 057c 0B44     		add	r3, r3, r1
 6116 057e 0433     		adds	r3, r3, #4
 6117 0580 1C68     		ldr	r4, [r3]
1871:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 6118              		.loc 1 1871 0
 6119 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6120 0584 9D49     		ldr	r1, .L412
 6121 0586 1346     		mov	r3, r2
 6122 0588 5B00     		lsls	r3, r3, #1
 6123 058a 1344     		add	r3, r3, r2
 6124 058c 1B01     		lsls	r3, r3, #4
 6125 058e 0B44     		add	r3, r3, r1
 6126 0590 03F2B513 		addw	r3, r3, #437
 6127 0594 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6128              		.loc 1 1870 0
 6129 0598 1D46     		mov	r5, r3
 6130              		.loc 1 1871 0
 6131 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6132 059c 9749     		ldr	r1, .L412
 6133 059e 1346     		mov	r3, r2
 6134 05a0 5B00     		lsls	r3, r3, #1
 6135 05a2 1344     		add	r3, r3, r2
 6136 05a4 1B01     		lsls	r3, r3, #4
 6137 05a6 0B44     		add	r3, r3, r1
 6138 05a8 03F5DB73 		add	r3, r3, #438
 6139 05ac 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6140              		.loc 1 1870 0
 6141 05b0 1E46     		mov	r6, r3
 6142              		.loc 1 1871 0
 6143 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6144 05b4 9149     		ldr	r1, .L412
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 144


 6145 05b6 1346     		mov	r3, r2
 6146 05b8 5B00     		lsls	r3, r3, #1
 6147 05ba 1344     		add	r3, r3, r2
 6148 05bc 1B01     		lsls	r3, r3, #4
 6149 05be 0B44     		add	r3, r3, r1
 6150 05c0 03F2B713 		addw	r3, r3, #439
 6151 05c4 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6152              		.loc 1 1870 0
 6153 05c8 0093     		str	r3, [sp]
 6154 05ca 3346     		mov	r3, r6
 6155 05cc 2A46     		mov	r2, r5
 6156 05ce 2146     		mov	r1, r4
 6157 05d0 FFF7FEFF 		bl	calc_turns_fcn
 6158 05d4 0346     		mov	r3, r0
 6159 05d6 87F82730 		strb	r3, [r7, #39]
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c **** 
1874:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 6160              		.loc 1 1874 0
 6161 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6162 05dc 8749     		ldr	r1, .L412
 6163 05de 1346     		mov	r3, r2
 6164 05e0 5B00     		lsls	r3, r3, #1
 6165 05e2 1344     		add	r3, r3, r2
 6166 05e4 1B01     		lsls	r3, r3, #4
 6167 05e6 0B44     		add	r3, r3, r1
 6168 05e8 03F5D273 		add	r3, r3, #420
 6169 05ec 1B68     		ldr	r3, [r3]	@ float
 6170 05ee 4FF00001 		mov	r1, #0
 6171 05f2 1846     		mov	r0, r3
 6172 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 6173 05f8 0346     		mov	r3, r0
 6174 05fa 002B     		cmp	r3, #0
 6175 05fc 05D0     		beq	.L394
1875:..\src/interruptions.c ****                         init_rot = -init_rot;
 6176              		.loc 1 1875 0
 6177 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 6178 0602 5B42     		negs	r3, r3
 6179 0604 DBB2     		uxtb	r3, r3
 6180 0606 87F82730 		strb	r3, [r7, #39]
 6181              	.L394:
1876:..\src/interruptions.c ****                     
1877:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 6182              		.loc 1 1877 0
 6183 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6184 060c 7D4A     		ldr	r2, .L412+8
 6185 060e 3421     		movs	r1, #52
 6186 0610 01FB03F3 		mul	r3, r1, r3
 6187 0614 1344     		add	r3, r3, r2
 6188 0616 1833     		adds	r3, r3, #24
 6189 0618 97F82720 		ldrb	r2, [r7, #39]
 6190 061c 1A70     		strb	r2, [r3]
 6191              	.L393:
1878:..\src/interruptions.c ****                 }    
1879:..\src/interruptions.c **** 
1880:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 145


 6192              		.loc 1 1880 0
 6193 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6194 0620 7649     		ldr	r1, .L412
 6195 0622 1346     		mov	r3, r2
 6196 0624 5B00     		lsls	r3, r3, #1
 6197 0626 1344     		add	r3, r3, r2
 6198 0628 1B01     		lsls	r3, r3, #4
 6199 062a 0B44     		add	r3, r3, r1
 6200 062c 03F5D273 		add	r3, r3, #420
 6201 0630 1B68     		ldr	r3, [r3]	@ float
 6202 0632 4FF07E51 		mov	r1, #1065353216
 6203 0636 1846     		mov	r0, r3
 6204 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 6205 063c 0346     		mov	r3, r0
 6206 063e 002B     		cmp	r3, #0
 6207 0640 22D1     		bne	.L396
1881:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 6208              		.loc 1 1881 0
 6209 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6210 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6211 0646 6F4A     		ldr	r2, .L412+8
 6212 0648 3421     		movs	r1, #52
 6213 064a 01FB03F3 		mul	r3, r1, r3
 6214 064e 1344     		add	r3, r3, r2
 6215 0650 1B68     		ldr	r3, [r3]
 6216 0652 1846     		mov	r0, r3
 6217 0654 FFF7FEFF 		bl	__aeabi_i2f
 6218 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6219 065a 6849     		ldr	r1, .L412
 6220 065c 1346     		mov	r3, r2
 6221 065e 5B00     		lsls	r3, r3, #1
 6222 0660 1344     		add	r3, r3, r2
 6223 0662 1B01     		lsls	r3, r3, #4
 6224 0664 0B44     		add	r3, r3, r1
 6225 0666 03F5D273 		add	r3, r3, #420
 6226 066a 1B68     		ldr	r3, [r3]	@ float
 6227 066c 1946     		mov	r1, r3
 6228 066e FFF7FEFF 		bl	__aeabi_fdiv
 6229 0672 0346     		mov	r3, r0
 6230 0674 1846     		mov	r0, r3
 6231 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6232 067a 0146     		mov	r1, r0
 6233 067c 614A     		ldr	r2, .L412+8
 6234 067e 3423     		movs	r3, #52
 6235 0680 03FB04F3 		mul	r3, r3, r4
 6236 0684 1344     		add	r3, r3, r2
 6237 0686 1960     		str	r1, [r3]
 6238              	.L396:
1882:..\src/interruptions.c ****                 
1883:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6239              		.loc 1 1883 0
 6240 0688 97F92730 		ldrsb	r3, [r7, #39]
 6241 068c 1B04     		lsls	r3, r3, #16
 6242 068e BA6A     		ldr	r2, [r7, #40]
 6243 0690 1344     		add	r3, r3, r2
 6244 0692 BB62     		str	r3, [r7, #40]
1884:..\src/interruptions.c ****        
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 146


1885:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6245              		.loc 1 1885 0
 6246 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6247 0696 5949     		ldr	r1, .L412
 6248 0698 1346     		mov	r3, r2
 6249 069a 5B00     		lsls	r3, r3, #1
 6250 069c 1344     		add	r3, r3, r2
 6251 069e 1B01     		lsls	r3, r3, #4
 6252 06a0 0B44     		add	r3, r3, r1
 6253 06a2 03F5D273 		add	r3, r3, #420
 6254 06a6 1B68     		ldr	r3, [r3]	@ float
 6255 06a8 4FF07E51 		mov	r1, #1065353216
 6256 06ac 1846     		mov	r0, r3
 6257 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6258 06b2 0346     		mov	r3, r0
 6259 06b4 002B     		cmp	r3, #0
 6260 06b6 15D1     		bne	.L398
1886:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6261              		.loc 1 1886 0
 6262 06b8 B86A     		ldr	r0, [r7, #40]
 6263 06ba FFF7FEFF 		bl	__aeabi_i2f
 6264 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6265 06c0 4E49     		ldr	r1, .L412
 6266 06c2 1346     		mov	r3, r2
 6267 06c4 5B00     		lsls	r3, r3, #1
 6268 06c6 1344     		add	r3, r3, r2
 6269 06c8 1B01     		lsls	r3, r3, #4
 6270 06ca 0B44     		add	r3, r3, r1
 6271 06cc 03F5D273 		add	r3, r3, #420
 6272 06d0 1B68     		ldr	r3, [r3]	@ float
 6273 06d2 1946     		mov	r1, r3
 6274 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6275 06d8 0346     		mov	r3, r0
 6276 06da 1846     		mov	r0, r3
 6277 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6278 06e0 0346     		mov	r3, r0
 6279 06e2 BB62     		str	r3, [r7, #40]
 6280              	.L398:
1887:..\src/interruptions.c ****                 }
1888:..\src/interruptions.c **** 
1889:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6281              		.loc 1 1889 0
 6282 06e4 454B     		ldr	r3, .L412
 6283 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6284 06ea 002B     		cmp	r3, #0
 6285 06ec 07D1     		bne	.L400
1890:..\src/interruptions.c ****                     // Right / Left hand turn
1891:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6286              		.loc 1 1891 0
 6287 06ee 434B     		ldr	r3, .L412
 6288 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6289 06f4 002B     		cmp	r3, #0
 6290 06f6 02D1     		bne	.L400
1892:..\src/interruptions.c ****                         value_encoder *= -1;        
 6291              		.loc 1 1892 0
 6292 06f8 BB6A     		ldr	r3, [r7, #40]
 6293 06fa 5B42     		negs	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 147


 6294 06fc BB62     		str	r3, [r7, #40]
 6295              	.L400:
1893:..\src/interruptions.c ****                     }
1894:..\src/interruptions.c ****                 }
1895:..\src/interruptions.c ****          
1896:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6296              		.loc 1 1896 0
 6297 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6298 0700 404A     		ldr	r2, .L412+8
 6299 0702 3421     		movs	r1, #52
 6300 0704 01FB03F3 		mul	r3, r1, r3
 6301 0708 1344     		add	r3, r3, r2
 6302 070a BA6A     		ldr	r2, [r7, #40]
 6303 070c 1A60     		str	r2, [r3]
1897:..\src/interruptions.c ****                 
1898:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6304              		.loc 1 1898 0
 6305 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6306 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6307 0712 3C49     		ldr	r1, .L412+8
 6308 0714 3420     		movs	r0, #52
 6309 0716 00FB02F2 		mul	r2, r0, r2
 6310 071a 0A44     		add	r2, r2, r1
 6311 071c 1268     		ldr	r2, [r2]
 6312 071e 3A49     		ldr	r1, .L412+12
 6313 0720 1B01     		lsls	r3, r3, #4
 6314 0722 0B44     		add	r3, r3, r1
 6315 0724 1A60     		str	r2, [r3]
1899:..\src/interruptions.c **** 
1900:..\src/interruptions.c ****                 // If necessary activate motor
1901:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6316              		.loc 1 1901 0
 6317 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6318 0728 384A     		ldr	r2, .L412+16
 6319 072a 0121     		movs	r1, #1
 6320 072c D154     		strb	r1, [r2, r3]
1902:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1903:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6321              		.loc 1 1903 0
 6322 072e B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6323 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6324 0732 3248     		ldr	r0, .L412
 6325 0734 1346     		mov	r3, r2
 6326 0736 DB00     		lsls	r3, r3, #3
 6327 0738 9B1A     		subs	r3, r3, r2
 6328 073a 1B01     		lsls	r3, r3, #4
 6329 073c 0344     		add	r3, r3, r0
 6330 073e E033     		adds	r3, r3, #224
 6331 0740 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6332 0742 314A     		ldr	r2, .L412+12
 6333 0744 0B01     		lsls	r3, r1, #4
 6334 0746 1344     		add	r3, r3, r2
 6335 0748 0C33     		adds	r3, r3, #12
 6336 074a 0246     		mov	r2, r0
 6337 074c 1A70     		strb	r2, [r3]
1904:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6338              		.loc 1 1904 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 148


 6339 074e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6340 0750 2D4A     		ldr	r2, .L412+12
 6341 0752 1B01     		lsls	r3, r3, #4
 6342 0754 1344     		add	r3, r3, r2
 6343 0756 0C33     		adds	r3, r3, #12
 6344 0758 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6345 075a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6346 075c 1146     		mov	r1, r2
 6347 075e 1846     		mov	r0, r3
 6348 0760 FFF7FEFF 		bl	enable_motor
1905:..\src/interruptions.c ****                 
1906:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6349              		.loc 1 1906 0
 6350 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6351 0766 2A4A     		ldr	r2, .L412+20
 6352 0768 0121     		movs	r1, #1
 6353 076a D154     		strb	r1, [r2, r3]
 6354              	.L391:
1768:..\src/interruptions.c ****         
 6355              		.loc 1 1768 0 discriminator 2
 6356 076c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6357 0770 0133     		adds	r3, r3, #1
 6358 0772 87F82F30 		strb	r3, [r7, #47]
 6359              	.L380:
1768:..\src/interruptions.c ****         
 6360              		.loc 1 1768 0 is_stmt 0 discriminator 1
 6361 0776 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6362 077a 022B     		cmp	r3, #2
 6363 077c 7FF6C5AC 		bls	.L401
1907:..\src/interruptions.c ****             }
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     } 
1910:..\src/interruptions.c **** 
1911:..\src/interruptions.c **** 	
1912:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1913:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6364              		.loc 1 1913 0 is_stmt 1
 6365 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6366 0782 224A     		ldr	r2, .L412+16
 6367 0784 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6368 0786 002B     		cmp	r3, #0
 6369 0788 35D0     		beq	.L371
1914:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6370              		.loc 1 1914 0
 6371 078a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6372 078c 214A     		ldr	r2, .L412+24
 6373 078e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6374 0792 0132     		adds	r2, r2, #1
 6375 0794 1F49     		ldr	r1, .L412+24
 6376 0796 41F82320 		str	r2, [r1, r3, lsl #2]
1915:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6377              		.loc 1 1915 0
 6378 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6379 079c 1D4A     		ldr	r2, .L412+24
 6380 079e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6381 07a2 B3F5FA5F 		cmp	r3, #8000
 6382 07a6 26D3     		bcc	.L371
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 149


1916:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6383              		.loc 1 1916 0
 6384 07a8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6385 07aa 174A     		ldr	r2, .L412+12
 6386 07ac 1B01     		lsls	r3, r3, #4
 6387 07ae 1344     		add	r3, r3, r2
 6388 07b0 0022     		movs	r2, #0
 6389 07b2 1A60     		str	r2, [r3]
1917:..\src/interruptions.c ****             
1918:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1919:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6390              		.loc 1 1919 0
 6391 07b4 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6392 07b6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6393 07b8 1048     		ldr	r0, .L412
 6394 07ba 1346     		mov	r3, r2
 6395 07bc DB00     		lsls	r3, r3, #3
 6396 07be 9B1A     		subs	r3, r3, r2
 6397 07c0 1B01     		lsls	r3, r3, #4
 6398 07c2 0344     		add	r3, r3, r0
 6399 07c4 E033     		adds	r3, r3, #224
 6400 07c6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6401 07c8 0F4A     		ldr	r2, .L412+12
 6402 07ca 0B01     		lsls	r3, r1, #4
 6403 07cc 1344     		add	r3, r3, r2
 6404 07ce 0C33     		adds	r3, r3, #12
 6405 07d0 0246     		mov	r2, r0
 6406 07d2 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6407              		.loc 1 1920 0
 6408 07d4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6409 07d6 0C4A     		ldr	r2, .L412+12
 6410 07d8 1B01     		lsls	r3, r3, #4
 6411 07da 1344     		add	r3, r3, r2
 6412 07dc 0C33     		adds	r3, r3, #12
 6413 07de 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6414 07e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6415 07e2 1146     		mov	r1, r2
 6416 07e4 1846     		mov	r0, r3
 6417 07e6 FFF7FEFF 		bl	enable_motor
1921:..\src/interruptions.c ****                         
1922:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6418              		.loc 1 1922 0
 6419 07ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6420 07ec 074A     		ldr	r2, .L412+16
 6421 07ee 0021     		movs	r1, #0
 6422 07f0 D154     		strb	r1, [r2, r3]
 6423 07f2 00E0     		b	.L371
 6424              	.L407:
1823:..\src/interruptions.c ****                 }
 6425              		.loc 1 1823 0
 6426 07f4 00BF     		nop
 6427              	.L371:
1923:..\src/interruptions.c ****         }
1924:..\src/interruptions.c ****     }
1925:..\src/interruptions.c ****  
1926:..\src/interruptions.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 150


 6428              		.loc 1 1926 0
 6429 07f6 3437     		adds	r7, r7, #52
 6430              		.cfi_def_cfa_offset 20
 6431 07f8 BD46     		mov	sp, r7
 6432              		.cfi_def_cfa_register 13
 6433              		@ sp needed
 6434 07fa F0BD     		pop	{r4, r5, r6, r7, pc}
 6435              	.L413:
 6436              		.align	2
 6437              	.L412:
 6438 07fc 00000000 		.word	c_mem
 6439 0800 F8000000 		.word	comp_value_encoder.10636
 6440 0804 00000000 		.word	g_meas
 6441 0808 00000000 		.word	g_refNew
 6442 080c 64010000 		.word	safe_startup_motor_activation.10639
 6443 0810 00000000 		.word	pos_reconstruct
 6444 0814 68010000 		.word	count_startup_motor.10641
 6445              		.cfi_endproc
 6446              	.LFE73:
 6447              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6448              		.section	.text.analog_read_end,"ax",%progbits
 6449              		.align	2
 6450              		.global	analog_read_end
 6451              		.thumb
 6452              		.thumb_func
 6453              		.type	analog_read_end, %function
 6454              	analog_read_end:
 6455              	.LFB74:
1927:..\src/interruptions.c **** 
1928:..\src/interruptions.c **** //==============================================================================
1929:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1930:..\src/interruptions.c **** //==============================================================================
1931:..\src/interruptions.c **** 
1932:..\src/interruptions.c **** void analog_read_end() {
 6456              		.loc 1 1932 0
 6457              		.cfi_startproc
 6458              		@ args = 0, pretend = 0, frame = 8
 6459              		@ frame_needed = 1, uses_anonymous_args = 0
 6460 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6461              		.cfi_def_cfa_offset 20
 6462              		.cfi_offset 4, -20
 6463              		.cfi_offset 5, -16
 6464              		.cfi_offset 6, -12
 6465              		.cfi_offset 7, -8
 6466              		.cfi_offset 14, -4
 6467 0002 83B0     		sub	sp, sp, #12
 6468              		.cfi_def_cfa_offset 32
 6469 0004 00AF     		add	r7, sp, #0
 6470              		.cfi_def_cfa_register 7
1933:..\src/interruptions.c **** 
1934:..\src/interruptions.c ****     /* =========================================================================
1935:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1936:..\src/interruptions.c ****     /
1937:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1938:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1939:..\src/interruptions.c ****     /
1940:..\src/interruptions.c ****     /   Definition:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 151


1941:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1942:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1943:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1944:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1945:..\src/interruptions.c ****     /
1946:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1947:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1948:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1949:..\src/interruptions.c ****     /  =========================================================================
1950:..\src/interruptions.c ****     */
1951:..\src/interruptions.c **** 
1952:..\src/interruptions.c ****     int32 CYDATA i_aux;
1953:..\src/interruptions.c **** 
1954:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1955:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1956:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1957:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1958:..\src/interruptions.c ****     static int32 UD_mean_value;
1959:..\src/interruptions.c ****     static int32 LR_mean_value;
1960:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1961:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1962:..\src/interruptions.c ****     static uint16 count = 0;
1963:..\src/interruptions.c ****     static uint32 v_count = 0;
1964:..\src/interruptions.c ****     static uint8 idx = 0;
1965:..\src/interruptions.c ****     
1966:..\src/interruptions.c ****     
1967:..\src/interruptions.c ****     // Wait for conversion end
1968:..\src/interruptions.c ****     
1969:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6471              		.loc 1 1969 0
 6472 0006 08E0     		b	.L415
 6473              	.L416:
1970:..\src/interruptions.c ****         
1971:..\src/interruptions.c ****         if (interrupt_flag){
 6474              		.loc 1 1971 0
 6475 0008 AD4B     		ldr	r3, .L572
 6476 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6477 000c 002B     		cmp	r3, #0
 6478 000e 04D0     		beq	.L415
1972:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6479              		.loc 1 1972 0
 6480 0010 AB4B     		ldr	r3, .L572
 6481 0012 0022     		movs	r2, #0
 6482 0014 1A70     		strb	r2, [r3]
1973:..\src/interruptions.c ****             interrupt_manager();
 6483              		.loc 1 1973 0
 6484 0016 FFF7FEFF 		bl	interrupt_manager
 6485              	.L415:
1969:..\src/interruptions.c ****         
 6486              		.loc 1 1969 0
 6487 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6488 001e 0346     		mov	r3, r0
 6489 0020 002B     		cmp	r3, #0
 6490 0022 F1D0     		beq	.L416
1974:..\src/interruptions.c ****         }
1975:..\src/interruptions.c ****     }
1976:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 152


1977:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1978:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1979:..\src/interruptions.c ****         // Read pressure in any case
1980:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1981:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1982:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1983:..\src/interruptions.c ****     }
1984:..\src/interruptions.c **** #endif
1985:..\src/interruptions.c ****  
1986:..\src/interruptions.c ****     // Convert tension read
1987:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6491              		.loc 1 1987 0
 6492 0024 A74B     		ldr	r3, .L572+4
 6493 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6494 002a 022B     		cmp	r3, #2
 6495 002c 04D1     		bne	.L417
1988:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6496              		.loc 1 1988 0
 6497 002e A64B     		ldr	r3, .L572+8
 6498 0030 41F28832 		movw	r2, #5000
 6499 0034 1A60     		str	r2, [r3]
 6500 0036 0BE0     		b	.L418
 6501              	.L417:
1989:..\src/interruptions.c ****     }
1990:..\src/interruptions.c ****     else {
1991:..\src/interruptions.c ****         dev_tension[0] =  ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6502              		.loc 1 1991 0
 6503 0038 A44B     		ldr	r3, .L572+12
 6504 003a B3F90030 		ldrsh	r3, [r3]
 6505 003e A3F25563 		subw	r3, r3, #1621
 6506 0042 40F2C672 		movw	r2, #1990
 6507 0046 02FB03F3 		mul	r3, r2, r3
 6508 004a DB11     		asrs	r3, r3, #7
 6509 004c 9E4A     		ldr	r2, .L572+8
 6510 004e 1360     		str	r3, [r2]
 6511              	.L418:
1992:..\src/interruptions.c ****     }
1993:..\src/interruptions.c ****     
1994:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1995:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6512              		.loc 1 1995 0
 6513 0050 9F4B     		ldr	r3, .L572+16
 6514 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6515 0054 042B     		cmp	r3, #4
 6516 0056 0BD9     		bls	.L419
1996:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6517              		.loc 1 1996 0
 6518 0058 9C4B     		ldr	r3, .L572+12
 6519 005a B3F90830 		ldrsh	r3, [r3, #8]
 6520 005e A3F25563 		subw	r3, r3, #1621
 6521 0062 40F2C672 		movw	r2, #1990
 6522 0066 02FB03F3 		mul	r3, r2, r3
 6523 006a DB11     		asrs	r3, r3, #7
 6524 006c 964A     		ldr	r2, .L572+8
 6525 006e 5360     		str	r3, [r2, #4]
 6526              	.L419:
1997:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 153


1998:..\src/interruptions.c ****     
1999:..\src/interruptions.c ****     if (interrupt_flag){
 6527              		.loc 1 1999 0
 6528 0070 934B     		ldr	r3, .L572
 6529 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6530 0074 002B     		cmp	r3, #0
 6531 0076 04D0     		beq	.L420
2000:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6532              		.loc 1 2000 0
 6533 0078 914B     		ldr	r3, .L572
 6534 007a 0022     		movs	r2, #0
 6535 007c 1A70     		strb	r2, [r3]
2001:..\src/interruptions.c ****         interrupt_manager();
 6536              		.loc 1 2001 0
 6537 007e FFF7FEFF 		bl	interrupt_manager
 6538              	.L420:
2002:..\src/interruptions.c ****     }
2003:..\src/interruptions.c ****     
2004:..\src/interruptions.c ****     // Update cycle power value
2005:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6539              		.loc 1 2005 0
 6540 0082 914B     		ldr	r3, .L572+8
 6541 0084 1B68     		ldr	r3, [r3]
 6542 0086 934A     		ldr	r2, .L572+20
 6543 0088 82FB0312 		smull	r1, r2, r2, r3
 6544 008c D211     		asrs	r2, r2, #7
 6545 008e DB17     		asrs	r3, r3, #31
 6546 0090 D31A     		subs	r3, r2, r3
 6547 0092 9149     		ldr	r1, .L572+24
 6548 0094 1846     		mov	r0, r3
 6549 0096 FFF7FEFF 		bl	filter
 6550 009a 0246     		mov	r2, r0
 6551 009c 8F4B     		ldr	r3, .L572+28
 6552 009e 1A60     		str	r2, [r3]
2006:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6553              		.loc 1 2006 0
 6554 00a0 8F4B     		ldr	r3, .L572+32
 6555 00a2 1B68     		ldr	r3, [r3]
 6556 00a4 002B     		cmp	r3, #0
 6557 00a6 08DA     		bge	.L421
 6558              		.loc 1 2006 0 is_stmt 0 discriminator 1
 6559 00a8 8C4B     		ldr	r3, .L572+28
 6560 00aa 1B68     		ldr	r3, [r3]
 6561 00ac 002B     		cmp	r3, #0
 6562 00ae 04DB     		blt	.L421
2007:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6563              		.loc 1 2007 0 is_stmt 1
 6564 00b0 844B     		ldr	r3, .L572+4
 6565 00b2 1B6E     		ldr	r3, [r3, #96]
 6566 00b4 0133     		adds	r3, r3, #1
 6567 00b6 834A     		ldr	r2, .L572+4
 6568 00b8 1366     		str	r3, [r2, #96]
 6569              	.L421:
2008:..\src/interruptions.c ****     }
2009:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6570              		.loc 1 2009 0
 6571 00ba 884B     		ldr	r3, .L572+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 154


 6572 00bc 1B68     		ldr	r3, [r3]
 6573 00be 884A     		ldr	r2, .L572+32
 6574 00c0 1360     		str	r3, [r2]
2010:..\src/interruptions.c ****   
2011:..\src/interruptions.c ****     
2012:..\src/interruptions.c ****     // VOLTAGE READING
2013:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
2014:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
2015:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
2016:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
2017:..\src/interruptions.c ****     
2018:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6575              		.loc 1 2018 0
 6576 00c2 884B     		ldr	r3, .L572+36
 6577 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6578 00c6 002B     		cmp	r3, #0
 6579 00c8 4DD0     		beq	.L422
 6580              		.loc 1 2018 0 is_stmt 0 discriminator 1
 6581 00ca 874B     		ldr	r3, .L572+40
 6582 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6583 00ce 002B     		cmp	r3, #0
 6584 00d0 49D0     		beq	.L422
2019:..\src/interruptions.c ****         count = count + 1;
 6585              		.loc 1 2019 0 is_stmt 1
 6586 00d2 864B     		ldr	r3, .L572+44
 6587 00d4 1B88     		ldrh	r3, [r3]
 6588 00d6 0133     		adds	r3, r3, #1
 6589 00d8 9AB2     		uxth	r2, r3
 6590 00da 844B     		ldr	r3, .L572+44
 6591 00dc 1A80     		strh	r2, [r3]	@ movhi
2020:..\src/interruptions.c ****         
2021:..\src/interruptions.c ****         if (count == 1000){
 6592              		.loc 1 2021 0
 6593 00de 834B     		ldr	r3, .L572+44
 6594 00e0 1B88     		ldrh	r3, [r3]
 6595 00e2 B3F57A7F 		cmp	r3, #1000
 6596 00e6 3ED1     		bne	.L422
2022:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6597              		.loc 1 2022 0
 6598 00e8 814B     		ldr	r3, .L572+48
 6599 00ea 0022     		movs	r2, #0
 6600 00ec 1A70     		strb	r2, [r3]
 6601 00ee 33E0     		b	.L423
 6602              	.L427:
2023:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6603              		.loc 1 2023 0
 6604 00f0 7F4B     		ldr	r3, .L572+48
 6605 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6606 00f4 1A46     		mov	r2, r3
 6607 00f6 744B     		ldr	r3, .L572+8
 6608 00f8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6609 00fc 42F22732 		movw	r2, #8999
 6610 0100 9342     		cmp	r3, r2
 6611 0102 08DC     		bgt	.L424
2024:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6612              		.loc 1 2024 0
 6613 0104 7A4B     		ldr	r3, .L572+48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 155


 6614 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6615 0108 1946     		mov	r1, r3
 6616 010a 7A4B     		ldr	r3, .L572+52
 6617 010c 4FF4FA52 		mov	r2, #8000
 6618 0110 43F82120 		str	r2, [r3, r1, lsl #2]
 6619 0114 1AE0     		b	.L425
 6620              	.L424:
2025:..\src/interruptions.c ****                 }
2026:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
2027:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6621              		.loc 1 2027 0
 6622 0116 764B     		ldr	r3, .L572+48
 6623 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6624 011a 1A46     		mov	r2, r3
 6625 011c 6A4B     		ldr	r3, .L572+8
 6626 011e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6627 0122 43F2C722 		movw	r2, #12999
 6628 0126 9342     		cmp	r3, r2
 6629 0128 08DC     		bgt	.L426
2028:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6630              		.loc 1 2028 0
 6631 012a 714B     		ldr	r3, .L572+48
 6632 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6633 012e 1946     		mov	r1, r3
 6634 0130 704B     		ldr	r3, .L572+52
 6635 0132 42F6E062 		movw	r2, #12000
 6636 0136 43F82120 		str	r2, [r3, r1, lsl #2]
 6637 013a 07E0     		b	.L425
 6638              	.L426:
2029:..\src/interruptions.c ****                     }
2030:..\src/interruptions.c ****                     else
2031:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6639              		.loc 1 2031 0
 6640 013c 6C4B     		ldr	r3, .L572+48
 6641 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6642 0140 1946     		mov	r1, r3
 6643 0142 6C4B     		ldr	r3, .L572+52
 6644 0144 45F6C052 		movw	r2, #24000
 6645 0148 43F82120 		str	r2, [r3, r1, lsl #2]
 6646              	.L425:
2022:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6647              		.loc 1 2022 0 discriminator 2
 6648 014c 684B     		ldr	r3, .L572+48
 6649 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6650 0150 0133     		adds	r3, r3, #1
 6651 0152 DAB2     		uxtb	r2, r3
 6652 0154 664B     		ldr	r3, .L572+48
 6653 0156 1A70     		strb	r2, [r3]
 6654              	.L423:
2022:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6655              		.loc 1 2022 0 is_stmt 0 discriminator 1
 6656 0158 654B     		ldr	r3, .L572+48
 6657 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6658 015c 012B     		cmp	r3, #1
 6659 015e C7D9     		bls	.L427
2032:..\src/interruptions.c ****                 }
2033:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 156


2034:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6660              		.loc 1 2034 0 is_stmt 1
 6661 0160 604B     		ldr	r3, .L572+36
 6662 0162 0022     		movs	r2, #0
 6663 0164 1A70     		strb	r2, [r3]
 6664              	.L422:
2035:..\src/interruptions.c ****         }
2036:..\src/interruptions.c ****     }
2037:..\src/interruptions.c **** 
2038:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
2039:..\src/interruptions.c **** 
2040:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6665              		.loc 1 2040 0
 6666 0166 584B     		ldr	r3, .L572+8
 6667 0168 1B68     		ldr	r3, [r3]
 6668 016a 41F66312 		movw	r2, #6499
 6669 016e 9342     		cmp	r3, r2
 6670 0170 00F3F580 		bgt	.L428
 6671              		.loc 1 2040 0 is_stmt 0 discriminator 1
 6672 0174 564B     		ldr	r3, .L572+16
 6673 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6674 0178 042B     		cmp	r3, #4
 6675 017a 06D9     		bls	.L429
 6676              		.loc 1 2040 0 discriminator 2
 6677 017c 524B     		ldr	r3, .L572+8
 6678 017e 5B68     		ldr	r3, [r3, #4]
 6679 0180 41F66312 		movw	r2, #6499
 6680 0184 9342     		cmp	r3, r2
 6681 0186 00F3EA80 		bgt	.L428
 6682              	.L429:
2041:..\src/interruptions.c ****         // PSoC is powered through uUSB
2042:..\src/interruptions.c ****         
2043:..\src/interruptions.c ****         tension_valid = FALSE;
 6683              		.loc 1 2043 0 is_stmt 1
 6684 018a 574B     		ldr	r3, .L572+40
 6685 018c 0022     		movs	r2, #0
 6686 018e 1A70     		strb	r2, [r3]
2044:..\src/interruptions.c ****             
2045:..\src/interruptions.c ****         if (interrupt_flag){
 6687              		.loc 1 2045 0
 6688 0190 4B4B     		ldr	r3, .L572
 6689 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6690 0194 002B     		cmp	r3, #0
 6691 0196 04D0     		beq	.L430
2046:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6692              		.loc 1 2046 0
 6693 0198 494B     		ldr	r3, .L572
 6694 019a 0022     		movs	r2, #0
 6695 019c 1A70     		strb	r2, [r3]
2047:..\src/interruptions.c ****             interrupt_manager();
 6696              		.loc 1 2047 0
 6697 019e FFF7FEFF 		bl	interrupt_manager
 6698              	.L430:
2048:..\src/interruptions.c ****         }
2049:..\src/interruptions.c ****         
2050:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6699              		.loc 1 2050 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 157


 6700 01a2 534B     		ldr	r3, .L572+48
 6701 01a4 0022     		movs	r2, #0
 6702 01a6 1A70     		strb	r2, [r3]
 6703 01a8 81E0     		b	.L431
 6704              	.L434:
2051:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6705              		.loc 1 2051 0
 6706 01aa 534B     		ldr	r3, .L572+56
 6707 01ac 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6708 01b0 002B     		cmp	r3, #0
 6709 01b2 59D0     		beq	.L432
2052:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6710              		.loc 1 2052 0
 6711 01b4 4E4B     		ldr	r3, .L572+48
 6712 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6713 01b8 1946     		mov	r1, r3
 6714 01ba 4F4A     		ldr	r2, .L572+56
 6715 01bc 0B46     		mov	r3, r1
 6716 01be DB00     		lsls	r3, r3, #3
 6717 01c0 5B1A     		subs	r3, r3, r1
 6718 01c2 1B01     		lsls	r3, r3, #4
 6719 01c4 1344     		add	r3, r3, r2
 6720 01c6 03F58773 		add	r3, r3, #270
 6721 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6722 01cc 022B     		cmp	r3, #2
 6723 01ce 37D0     		beq	.L433
2053:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6724              		.loc 1 2053 0 discriminator 1
 6725 01d0 474B     		ldr	r3, .L572+48
 6726 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6727 01d4 1946     		mov	r1, r3
 6728 01d6 484A     		ldr	r2, .L572+56
 6729 01d8 0B46     		mov	r3, r1
 6730 01da DB00     		lsls	r3, r3, #3
 6731 01dc 5B1A     		subs	r3, r3, r1
 6732 01de 1B01     		lsls	r3, r3, #4
 6733 01e0 1344     		add	r3, r3, r2
 6734 01e2 03F58773 		add	r3, r3, #270
 6735 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2052:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6736              		.loc 1 2052 0 discriminator 1
 6737 01e8 032B     		cmp	r3, #3
 6738 01ea 29D0     		beq	.L433
2054:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6739              		.loc 1 2054 0
 6740 01ec 404B     		ldr	r3, .L572+48
 6741 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6742 01f0 1946     		mov	r1, r3
 6743 01f2 414A     		ldr	r2, .L572+56
 6744 01f4 0B46     		mov	r3, r1
 6745 01f6 DB00     		lsls	r3, r3, #3
 6746 01f8 5B1A     		subs	r3, r3, r1
 6747 01fa 1B01     		lsls	r3, r3, #4
 6748 01fc 1344     		add	r3, r3, r2
 6749 01fe 03F58773 		add	r3, r3, #270
 6750 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2053:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 158


 6751              		.loc 1 2053 0
 6752 0204 042B     		cmp	r3, #4
 6753 0206 1BD0     		beq	.L433
2055:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6754              		.loc 1 2055 0
 6755 0208 394B     		ldr	r3, .L572+48
 6756 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6757 020c 1946     		mov	r1, r3
 6758 020e 3A4A     		ldr	r2, .L572+56
 6759 0210 0B46     		mov	r3, r1
 6760 0212 DB00     		lsls	r3, r3, #3
 6761 0214 5B1A     		subs	r3, r3, r1
 6762 0216 1B01     		lsls	r3, r3, #4
 6763 0218 1344     		add	r3, r3, r2
 6764 021a 03F58773 		add	r3, r3, #270
 6765 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2054:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6766              		.loc 1 2054 0
 6767 0220 052B     		cmp	r3, #5
 6768 0222 0DD0     		beq	.L433
2056:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6769              		.loc 1 2056 0
 6770 0224 324B     		ldr	r3, .L572+48
 6771 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6772 0228 1946     		mov	r1, r3
 6773 022a 334A     		ldr	r2, .L572+56
 6774 022c 0B46     		mov	r3, r1
 6775 022e DB00     		lsls	r3, r3, #3
 6776 0230 5B1A     		subs	r3, r3, r1
 6777 0232 1B01     		lsls	r3, r3, #4
 6778 0234 1344     		add	r3, r3, r2
 6779 0236 03F58773 		add	r3, r3, #270
 6780 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2055:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6781              		.loc 1 2055 0
 6782 023c 072B     		cmp	r3, #7
 6783 023e 13D1     		bne	.L432
 6784              	.L433:
2057:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6785              		.loc 1 2057 0
 6786 0240 2B4B     		ldr	r3, .L572+48
 6787 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6788 0244 2D4A     		ldr	r2, .L572+60
 6789 0246 1B01     		lsls	r3, r3, #4
 6790 0248 1344     		add	r3, r3, r2
 6791 024a 0C33     		adds	r3, r3, #12
 6792 024c 0022     		movs	r2, #0
 6793 024e 1A70     		strb	r2, [r3]
2058:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6794              		.loc 1 2058 0
 6795 0250 274B     		ldr	r3, .L572+48
 6796 0252 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6797 0254 264B     		ldr	r3, .L572+48
 6798 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6799 0258 284A     		ldr	r2, .L572+60
 6800 025a 1B01     		lsls	r3, r3, #4
 6801 025c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 159


 6802 025e 0C33     		adds	r3, r3, #12
 6803 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6804 0262 1946     		mov	r1, r3
 6805 0264 FFF7FEFF 		bl	enable_motor
 6806              	.L432:
2059:..\src/interruptions.c ****                     
2060:..\src/interruptions.c ****                 }
2061:..\src/interruptions.c ****             }
2062:..\src/interruptions.c **** 
2063:..\src/interruptions.c ****             // Assign dev_tension and reset current
2064:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6807              		.loc 1 2064 0 discriminator 2
 6808 0268 214B     		ldr	r3, .L572+48
 6809 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6810 026c 1946     		mov	r1, r3
 6811 026e 164B     		ldr	r3, .L572+8
 6812 0270 41F28832 		movw	r2, #5000
 6813 0274 43F82120 		str	r2, [r3, r1, lsl #2]
2065:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6814              		.loc 1 2065 0 discriminator 2
 6815 0278 1D4B     		ldr	r3, .L572+48
 6816 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6817 027c 1946     		mov	r1, r3
 6818 027e 114A     		ldr	r2, .L572+4
 6819 0280 0B46     		mov	r3, r1
 6820 0282 DB00     		lsls	r3, r3, #3
 6821 0284 5B1A     		subs	r3, r3, r1
 6822 0286 1B01     		lsls	r3, r3, #4
 6823 0288 1344     		add	r3, r3, r2
 6824 028a 03F58873 		add	r3, r3, #272
 6825 028e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6826 0290 1946     		mov	r1, r3
 6827 0292 1B4A     		ldr	r2, .L572+64
 6828 0294 3423     		movs	r3, #52
 6829 0296 03FB01F3 		mul	r3, r3, r1
 6830 029a 1344     		add	r3, r3, r2
 6831 029c 0C33     		adds	r3, r3, #12
 6832 029e 0022     		movs	r2, #0
 6833 02a0 1A60     		str	r2, [r3]
2050:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6834              		.loc 1 2050 0 discriminator 2
 6835 02a2 134B     		ldr	r3, .L572+48
 6836 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6837 02a6 0133     		adds	r3, r3, #1
 6838 02a8 DAB2     		uxtb	r2, r3
 6839 02aa 114B     		ldr	r3, .L572+48
 6840 02ac 1A70     		strb	r2, [r3]
 6841              	.L431:
2050:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6842              		.loc 1 2050 0 is_stmt 0 discriminator 1
 6843 02ae 104B     		ldr	r3, .L572+48
 6844 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6845 02b2 012B     		cmp	r3, #1
 6846 02b4 7FF679AF 		bls	.L434
2066:..\src/interruptions.c ****         }
2067:..\src/interruptions.c ****         
2068:..\src/interruptions.c ****         // Reset emg
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 160


2069:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6847              		.loc 1 2069 0 is_stmt 1
 6848 02b8 0D4B     		ldr	r3, .L572+48
 6849 02ba 0022     		movs	r2, #0
 6850 02bc 1A70     		strb	r2, [r3]
 6851 02be 2EE0     		b	.L435
 6852              	.L573:
 6853              		.align	2
 6854              	.L572:
 6855 02c0 00000000 		.word	interrupt_flag
 6856 02c4 00000000 		.word	g_mem
 6857 02c8 00000000 		.word	dev_tension
 6858 02cc 00000000 		.word	ADC_buf
 6859 02d0 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6860 02d4 F1197605 		.word	91625969
 6861 02d8 00000000 		.word	filt_detect_pc
 6862 02dc 00000000 		.word	detect_power_cycle
 6863 02e0 08000000 		.word	detect_power_cycle_prev.10668
 6864 02e4 0C000000 		.word	first_tension_valid.10667
 6865 02e8 00000000 		.word	tension_valid
 6866 02ec 70010000 		.word	count.10669
 6867 02f0 72010000 		.word	idx.10671
 6868 02f4 00000000 		.word	pow_tension
 6869 02f8 00000000 		.word	c_mem
 6870 02fc 00000000 		.word	g_ref
 6871 0300 00000000 		.word	g_meas
 6872              	.L436:
2070:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6873              		.loc 1 2070 0 discriminator 3
 6874 0304 6D4B     		ldr	r3, .L574
 6875 0306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6876 0308 1946     		mov	r1, r3
 6877 030a 6D4B     		ldr	r3, .L574+4
 6878 030c 0022     		movs	r2, #0
 6879 030e 43F82120 		str	r2, [r3, r1, lsl #2]
2069:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6880              		.loc 1 2069 0 discriminator 3
 6881 0312 6A4B     		ldr	r3, .L574
 6882 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6883 0316 0133     		adds	r3, r3, #1
 6884 0318 DAB2     		uxtb	r2, r3
 6885 031a 684B     		ldr	r3, .L574
 6886 031c 1A70     		strb	r2, [r3]
 6887              	.L435:
2069:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6888              		.loc 1 2069 0 is_stmt 0 discriminator 1
 6889 031e 674B     		ldr	r3, .L574
 6890 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6891 0322 012B     		cmp	r3, #1
 6892 0324 EED9     		bls	.L436
2071:..\src/interruptions.c ****         }
2072:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6893              		.loc 1 2072 0 is_stmt 1
 6894 0326 654B     		ldr	r3, .L574
 6895 0328 0022     		movs	r2, #0
 6896 032a 1A70     		strb	r2, [r3]
 6897 032c 0CE0     		b	.L437
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 161


 6898              	.L439:
2073:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6899              		.loc 1 2073 0 discriminator 4
 6900 032e 634B     		ldr	r3, .L574
 6901 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6902 0332 634A     		ldr	r2, .L574+4
 6903 0334 0233     		adds	r3, r3, #2
 6904 0336 0021     		movs	r1, #0
 6905 0338 42F82310 		str	r1, [r2, r3, lsl #2]
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6906              		.loc 1 2072 0 discriminator 4
 6907 033c 5F4B     		ldr	r3, .L574
 6908 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6909 0340 0133     		adds	r3, r3, #1
 6910 0342 DAB2     		uxtb	r2, r3
 6911 0344 5D4B     		ldr	r3, .L574
 6912 0346 1A70     		strb	r2, [r3]
 6913              	.L437:
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6914              		.loc 1 2072 0 is_stmt 0 discriminator 1
 6915 0348 5E4B     		ldr	r3, .L574+8
 6916 034a 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6917 034e 002B     		cmp	r3, #0
 6918 0350 00F03582 		beq	.L554
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6919              		.loc 1 2072 0 discriminator 3
 6920 0354 594B     		ldr	r3, .L574
 6921 0356 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6922 0358 052B     		cmp	r3, #5
 6923 035a E8D9     		bls	.L439
2040:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6924              		.loc 1 2040 0 is_stmt 1
 6925 035c 2FE2     		b	.L554
 6926              	.L428:
2074:..\src/interruptions.c ****         }
2075:..\src/interruptions.c ****         
2076:..\src/interruptions.c ****     }
2077:..\src/interruptions.c ****     else {
2078:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2079:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2080:..\src/interruptions.c ****         
2081:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2082:..\src/interruptions.c ****         
2083:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6927              		.loc 1 2083 0
 6928 035e 5A4B     		ldr	r3, .L574+12
 6929 0360 1B68     		ldr	r3, [r3]
 6930 0362 B3F57A7F 		cmp	r3, #1000
 6931 0366 0DD1     		bne	.L441
 6932              		.loc 1 2083 0 is_stmt 0 discriminator 1
 6933 0368 584B     		ldr	r3, .L574+16
 6934 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6935 036c 002B     		cmp	r3, #0
 6936 036e 09D1     		bne	.L441
2084:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2085:..\src/interruptions.c ****             tension_valid = TRUE;   
 6937              		.loc 1 2085 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 162


 6938 0370 564B     		ldr	r3, .L574+16
 6939 0372 0122     		movs	r2, #1
 6940 0374 1A70     		strb	r2, [r3]
2086:..\src/interruptions.c ****             count = 0;
 6941              		.loc 1 2086 0
 6942 0376 564B     		ldr	r3, .L574+20
 6943 0378 0022     		movs	r2, #0
 6944 037a 1A80     		strh	r2, [r3]	@ movhi
2087:..\src/interruptions.c ****             v_count = 0;            
 6945              		.loc 1 2087 0
 6946 037c 524B     		ldr	r3, .L574+12
 6947 037e 0022     		movs	r2, #0
 6948 0380 1A60     		str	r2, [r3]
 6949 0382 2CE0     		b	.L442
 6950              	.L441:
2088:..\src/interruptions.c ****         }
2089:..\src/interruptions.c ****         else {  
2090:..\src/interruptions.c ****             // wait for battery voltage stabilization
2091:..\src/interruptions.c ****             if (v_count < 1000) {
 6951              		.loc 1 2091 0
 6952 0384 504B     		ldr	r3, .L574+12
 6953 0386 1B68     		ldr	r3, [r3]
 6954 0388 B3F57A7F 		cmp	r3, #1000
 6955 038c 04D2     		bcs	.L443
2092:..\src/interruptions.c ****                 v_count = v_count + 1;
 6956              		.loc 1 2092 0
 6957 038e 4E4B     		ldr	r3, .L574+12
 6958 0390 1B68     		ldr	r3, [r3]
 6959 0392 0133     		adds	r3, r3, #1
 6960 0394 4C4A     		ldr	r2, .L574+12
 6961 0396 1360     		str	r3, [r2]
 6962              	.L443:
2093:..\src/interruptions.c ****             }
2094:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6963              		.loc 1 2094 0
 6964 0398 484B     		ldr	r3, .L574
 6965 039a 0022     		movs	r2, #0
 6966 039c 1A70     		strb	r2, [r3]
 6967 039e 1AE0     		b	.L444
 6968              	.L445:
2095:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6969              		.loc 1 2095 0 discriminator 3
 6970 03a0 464B     		ldr	r3, .L574
 6971 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6972 03a4 1C46     		mov	r4, r3
 6973 03a6 454B     		ldr	r3, .L574
 6974 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6975 03aa 1A46     		mov	r2, r3
 6976 03ac 494B     		ldr	r3, .L574+24
 6977 03ae 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6978 03b2 424B     		ldr	r3, .L574
 6979 03b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6980 03b6 DB00     		lsls	r3, r3, #3
 6981 03b8 474A     		ldr	r2, .L574+28
 6982 03ba 1344     		add	r3, r3, r2
 6983 03bc 1946     		mov	r1, r3
 6984 03be FFF7FEFF 		bl	filter
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 163


 6985 03c2 0246     		mov	r2, r0
 6986 03c4 454B     		ldr	r3, .L574+32
 6987 03c6 43F82420 		str	r2, [r3, r4, lsl #2]
2094:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6988              		.loc 1 2094 0 discriminator 3
 6989 03ca 3C4B     		ldr	r3, .L574
 6990 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6991 03ce 0133     		adds	r3, r3, #1
 6992 03d0 DAB2     		uxtb	r2, r3
 6993 03d2 3A4B     		ldr	r3, .L574
 6994 03d4 1A70     		strb	r2, [r3]
 6995              	.L444:
2094:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6996              		.loc 1 2094 0 is_stmt 0 discriminator 1
 6997 03d6 394B     		ldr	r3, .L574
 6998 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6999 03da 012B     		cmp	r3, #1
 7000 03dc E0D9     		bls	.L445
 7001              	.L442:
2096:..\src/interruptions.c ****             }
2097:..\src/interruptions.c ****         }
2098:..\src/interruptions.c **** 
2099:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 7002              		.loc 1 2099 0 is_stmt 1
 7003 03de 374B     		ldr	r3, .L574
 7004 03e0 0022     		movs	r2, #0
 7005 03e2 1A70     		strb	r2, [r3]
 7006 03e4 17E0     		b	.L446
 7007              	.L448:
2100:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 7008              		.loc 1 2100 0
 7009 03e6 354B     		ldr	r3, .L574
 7010 03e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7011 03ea 1946     		mov	r1, r3
 7012 03ec 3C4A     		ldr	r2, .L574+36
 7013 03ee 0B46     		mov	r3, r1
 7014 03f0 DB00     		lsls	r3, r3, #3
 7015 03f2 5B1A     		subs	r3, r3, r1
 7016 03f4 1B01     		lsls	r3, r3, #4
 7017 03f6 1344     		add	r3, r3, r2
 7018 03f8 E133     		adds	r3, r3, #225
 7019 03fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7020 03fc 002B     		cmp	r3, #0
 7021 03fe 04D0     		beq	.L447
2101:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 7022              		.loc 1 2101 0
 7023 0400 2E4B     		ldr	r3, .L574
 7024 0402 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7025 0404 1846     		mov	r0, r3
 7026 0406 FFF7FEFF 		bl	pwm_limit_search
 7027              	.L447:
2099:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 7028              		.loc 1 2099 0 discriminator 2
 7029 040a 2C4B     		ldr	r3, .L574
 7030 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7031 040e 0133     		adds	r3, r3, #1
 7032 0410 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 164


 7033 0412 2A4B     		ldr	r3, .L574
 7034 0414 1A70     		strb	r2, [r3]
 7035              	.L446:
2099:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 7036              		.loc 1 2099 0 is_stmt 0 discriminator 1
 7037 0416 294B     		ldr	r3, .L574
 7038 0418 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7039 041a 012B     		cmp	r3, #1
 7040 041c E3D9     		bls	.L448
2102:..\src/interruptions.c ****         }
2103:..\src/interruptions.c ****         
2104:..\src/interruptions.c ****         // Filter and Set currents
2105:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 7041              		.loc 1 2105 0 is_stmt 1
 7042 041e 304B     		ldr	r3, .L574+36
 7043 0420 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 7044 0424 002B     		cmp	r3, #0
 7045 0426 21D1     		bne	.L449
2106:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 7046              		.loc 1 2106 0
 7047 0428 2D4B     		ldr	r3, .L574+36
 7048 042a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7049 042e 1C46     		mov	r4, r3
 7050 0430 2C4B     		ldr	r3, .L574+40
 7051 0432 B3F90230 		ldrsh	r3, [r3, #2]
 7052 0436 A3F5CE63 		sub	r3, r3, #1648
 7053 043a 45F66A02 		movw	r2, #22634
 7054 043e 02FB03F3 		mul	r3, r2, r3
 7055 0442 5B13     		asrs	r3, r3, #13
 7056 0444 1BB2     		sxth	r3, r3
 7057 0446 1A46     		mov	r2, r3
 7058 0448 274B     		ldr	r3, .L574+44
 7059 044a 93F90030 		ldrsb	r3, [r3]
 7060 044e 03FB02F3 		mul	r3, r3, r2
 7061 0452 2649     		ldr	r1, .L574+48
 7062 0454 1846     		mov	r0, r3
 7063 0456 FFF7FEFF 		bl	filter
 7064 045a 0146     		mov	r1, r0
 7065 045c 244A     		ldr	r2, .L574+52
 7066 045e 3423     		movs	r3, #52
 7067 0460 03FB04F3 		mul	r3, r3, r4
 7068 0464 1344     		add	r3, r3, r2
 7069 0466 0C33     		adds	r3, r3, #12
 7070 0468 1960     		str	r1, [r3]
 7071 046a 5FE0     		b	.L450
 7072              	.L449:
2107:..\src/interruptions.c ****         } 
2108:..\src/interruptions.c ****         else {
2109:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 7073              		.loc 1 2109 0
 7074 046c 1C4B     		ldr	r3, .L574+36
 7075 046e 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 7076 0472 022B     		cmp	r3, #2
 7077 0474 3ED1     		bne	.L451
2110:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2111:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 7078              		.loc 1 2111 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 165


 7079 0476 1A4B     		ldr	r3, .L574+36
 7080 0478 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7081 047c 1C46     		mov	r4, r3
 7082 047e 194B     		ldr	r3, .L574+40
 7083 0480 B3F90230 		ldrsh	r3, [r3, #2]
 7084 0484 A3F28F63 		subw	r3, r3, #1679
 7085 0488 45F65072 		movw	r2, #24400
 7086 048c 02FB03F3 		mul	r3, r2, r3
 7087 0490 5B13     		asrs	r3, r3, #13
 7088 0492 1BB2     		sxth	r3, r3
 7089 0494 1A46     		mov	r2, r3
 7090 0496 144B     		ldr	r3, .L574+44
 7091 0498 93F90030 		ldrsb	r3, [r3]
 7092 049c 03FB02F3 		mul	r3, r3, r2
 7093 04a0 1249     		ldr	r1, .L574+48
 7094 04a2 1846     		mov	r0, r3
 7095 04a4 FFF7FEFF 		bl	filter
 7096 04a8 0146     		mov	r1, r0
 7097 04aa 114A     		ldr	r2, .L574+52
 7098 04ac 3423     		movs	r3, #52
 7099 04ae 03FB04F3 		mul	r3, r3, r4
 7100 04b2 1344     		add	r3, r3, r2
 7101 04b4 0C33     		adds	r3, r3, #12
 7102 04b6 1960     		str	r1, [r3]
 7103 04b8 38E0     		b	.L450
 7104              	.L575:
 7105 04ba 00BF     		.align	2
 7106              	.L574:
 7107 04bc 72010000 		.word	idx.10671
 7108 04c0 00000000 		.word	g_adc_meas
 7109 04c4 00000000 		.word	c_mem
 7110 04c8 74010000 		.word	v_count.10670
 7111 04cc 00000000 		.word	tension_valid
 7112 04d0 70010000 		.word	count.10669
 7113 04d4 00000000 		.word	dev_tension
 7114 04d8 00000000 		.word	filt_v
 7115 04dc 00000000 		.word	dev_tension_f
 7116 04e0 00000000 		.word	g_mem
 7117 04e4 00000000 		.word	ADC_buf
 7118 04e8 00000000 		.word	pwm_sign
 7119 04ec 00000000 		.word	filt_i
 7120 04f0 00000000 		.word	g_meas
 7121              	.L451:
2112:..\src/interruptions.c ****             } else { // [GS]
2113:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 7122              		.loc 1 2113 0
 7123 04f4 C04B     		ldr	r3, .L576
 7124 04f6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7125 04fa 1846     		mov	r0, r3
 7126 04fc BF4B     		ldr	r3, .L576+4
 7127 04fe B3F90230 		ldrsh	r3, [r3, #2]
 7128 0502 A3F26362 		subw	r2, r3, #1635
 7129 0506 1346     		mov	r3, r2
 7130 0508 1B01     		lsls	r3, r3, #4
 7131 050a 9B1A     		subs	r3, r3, r2
 7132 050c 5B01     		lsls	r3, r3, #5
 7133 050e 1B11     		asrs	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 166


 7134 0510 1BB2     		sxth	r3, r3
 7135 0512 1A46     		mov	r2, r3
 7136 0514 BA4B     		ldr	r3, .L576+8
 7137 0516 93F90030 		ldrsb	r3, [r3]
 7138 051a 03FB02F2 		mul	r2, r3, r2
 7139 051e B949     		ldr	r1, .L576+12
 7140 0520 3423     		movs	r3, #52
 7141 0522 03FB00F3 		mul	r3, r3, r0
 7142 0526 0B44     		add	r3, r3, r1
 7143 0528 0C33     		adds	r3, r3, #12
 7144 052a 1A60     		str	r2, [r3]
 7145              	.L450:
2114:..\src/interruptions.c ****             }
2115:..\src/interruptions.c ****         }
2116:..\src/interruptions.c ****         
2117:..\src/interruptions.c **** 
2118:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2119:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 7146              		.loc 1 2119 0
 7147 052c B24B     		ldr	r3, .L576
 7148 052e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7149 0532 1D46     		mov	r5, r3
 7150 0534 B04B     		ldr	r3, .L576
 7151 0536 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7152 053a 1946     		mov	r1, r3
 7153 053c B14A     		ldr	r2, .L576+12
 7154 053e 3423     		movs	r3, #52
 7155 0540 03FB01F3 		mul	r3, r3, r1
 7156 0544 1344     		add	r3, r3, r2
 7157 0546 0C33     		adds	r3, r3, #12
 7158 0548 1C68     		ldr	r4, [r3]
 7159 054a AB4B     		ldr	r3, .L576
 7160 054c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7161 0550 1946     		mov	r1, r3
 7162 0552 AC4A     		ldr	r2, .L576+12
 7163 0554 3423     		movs	r3, #52
 7164 0556 03FB01F3 		mul	r3, r3, r1
 7165 055a 1344     		add	r3, r3, r2
 7166 055c 1A68     		ldr	r2, [r3]
 7167 055e A64B     		ldr	r3, .L576
 7168 0560 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7169 0564 1846     		mov	r0, r3
 7170 0566 A449     		ldr	r1, .L576
 7171 0568 0346     		mov	r3, r0
 7172 056a 5B00     		lsls	r3, r3, #1
 7173 056c 0344     		add	r3, r3, r0
 7174 056e 1B01     		lsls	r3, r3, #4
 7175 0570 0B44     		add	r3, r3, r1
 7176 0572 03F29513 		addw	r3, r3, #405
 7177 0576 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7178 0578 42FA03F6 		asr	r6, r2, r3
 7179 057c 9E4B     		ldr	r3, .L576
 7180 057e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7181 0582 1946     		mov	r1, r3
 7182 0584 9F4A     		ldr	r2, .L576+12
 7183 0586 3423     		movs	r3, #52
 7184 0588 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 167


 7185 058c 1344     		add	r3, r3, r2
 7186 058e 1C33     		adds	r3, r3, #28
 7187 0590 1A68     		ldr	r2, [r3]
 7188 0592 994B     		ldr	r3, .L576
 7189 0594 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7190 0598 1846     		mov	r0, r3
 7191 059a 9749     		ldr	r1, .L576
 7192 059c 0346     		mov	r3, r0
 7193 059e 5B00     		lsls	r3, r3, #1
 7194 05a0 0344     		add	r3, r3, r0
 7195 05a2 1B01     		lsls	r3, r3, #4
 7196 05a4 0B44     		add	r3, r3, r1
 7197 05a6 03F29513 		addw	r3, r3, #405
 7198 05aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7199 05ac 42FA03FE 		asr	lr, r2, r3
 7200 05b0 954B     		ldr	r3, .L576+16
 7201 05b2 1A68     		ldr	r2, [r3]
 7202 05b4 904B     		ldr	r3, .L576
 7203 05b6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7204 05ba 1846     		mov	r0, r3
 7205 05bc 8E49     		ldr	r1, .L576
 7206 05be 0346     		mov	r3, r0
 7207 05c0 5B00     		lsls	r3, r3, #1
 7208 05c2 0344     		add	r3, r3, r0
 7209 05c4 1B01     		lsls	r3, r3, #4
 7210 05c6 0B44     		add	r3, r3, r1
 7211 05c8 03F29513 		addw	r3, r3, #405
 7212 05cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7213 05ce 42FA03F3 		asr	r3, r2, r3
 7214 05d2 7246     		mov	r2, lr
 7215 05d4 3146     		mov	r1, r6
 7216 05d6 0020     		movs	r0, #0
 7217 05d8 FFF7FEFF 		bl	curr_estim
 7218 05dc 0346     		mov	r3, r0
 7219 05de E31A     		subs	r3, r4, r3
 7220 05e0 8A49     		ldr	r1, .L576+20
 7221 05e2 1846     		mov	r0, r3
 7222 05e4 FFF7FEFF 		bl	filter
 7223 05e8 0346     		mov	r3, r0
 7224 05ea 1BB2     		sxth	r3, r3
 7225 05ec 1946     		mov	r1, r3
 7226 05ee 854A     		ldr	r2, .L576+12
 7227 05f0 3423     		movs	r3, #52
 7228 05f2 03FB05F3 		mul	r3, r3, r5
 7229 05f6 1344     		add	r3, r3, r2
 7230 05f8 1033     		adds	r3, r3, #16
 7231 05fa 1960     		str	r1, [r3]
2120:..\src/interruptions.c ****         
2121:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2122:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7232              		.loc 1 2122 0
 7233 05fc 844B     		ldr	r3, .L576+24
 7234 05fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7235 0600 042B     		cmp	r3, #4
 7236 0602 40F2D280 		bls	.L452
2123:..\src/interruptions.c ****             // Filter and Set currents
2124:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 168


 7237              		.loc 1 2124 0
 7238 0606 7C4B     		ldr	r3, .L576
 7239 0608 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7240 060c 002B     		cmp	r3, #0
 7241 060e 21D1     		bne	.L453
2125:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7242              		.loc 1 2125 0
 7243 0610 794B     		ldr	r3, .L576
 7244 0612 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7245 0616 1C46     		mov	r4, r3
 7246 0618 784B     		ldr	r3, .L576+4
 7247 061a B3F90A30 		ldrsh	r3, [r3, #10]
 7248 061e A3F5CE63 		sub	r3, r3, #1648
 7249 0622 45F66A02 		movw	r2, #22634
 7250 0626 02FB03F3 		mul	r3, r2, r3
 7251 062a 5B13     		asrs	r3, r3, #13
 7252 062c 1BB2     		sxth	r3, r3
 7253 062e 1A46     		mov	r2, r3
 7254 0630 734B     		ldr	r3, .L576+8
 7255 0632 93F90130 		ldrsb	r3, [r3, #1]
 7256 0636 03FB02F3 		mul	r3, r3, r2
 7257 063a 7649     		ldr	r1, .L576+28
 7258 063c 1846     		mov	r0, r3
 7259 063e FFF7FEFF 		bl	filter
 7260 0642 0146     		mov	r1, r0
 7261 0644 6F4A     		ldr	r2, .L576+12
 7262 0646 3423     		movs	r3, #52
 7263 0648 03FB04F3 		mul	r3, r3, r4
 7264 064c 1344     		add	r3, r3, r2
 7265 064e 0C33     		adds	r3, r3, #12
 7266 0650 1960     		str	r1, [r3]
 7267 0652 42E0     		b	.L454
 7268              	.L453:
2126:..\src/interruptions.c ****             } 
2127:..\src/interruptions.c ****             else {
2128:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7269              		.loc 1 2128 0
 7270 0654 684B     		ldr	r3, .L576
 7271 0656 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7272 065a 022B     		cmp	r3, #2
 7273 065c 21D1     		bne	.L455
2129:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2130:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7274              		.loc 1 2130 0
 7275 065e 664B     		ldr	r3, .L576
 7276 0660 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7277 0664 1C46     		mov	r4, r3
 7278 0666 654B     		ldr	r3, .L576+4
 7279 0668 B3F90A30 		ldrsh	r3, [r3, #10]
 7280 066c A3F28F63 		subw	r3, r3, #1679
 7281 0670 45F65072 		movw	r2, #24400
 7282 0674 02FB03F3 		mul	r3, r2, r3
 7283 0678 5B13     		asrs	r3, r3, #13
 7284 067a 1BB2     		sxth	r3, r3
 7285 067c 1A46     		mov	r2, r3
 7286 067e 604B     		ldr	r3, .L576+8
 7287 0680 93F90130 		ldrsb	r3, [r3, #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 169


 7288 0684 03FB02F3 		mul	r3, r3, r2
 7289 0688 6249     		ldr	r1, .L576+28
 7290 068a 1846     		mov	r0, r3
 7291 068c FFF7FEFF 		bl	filter
 7292 0690 0146     		mov	r1, r0
 7293 0692 5C4A     		ldr	r2, .L576+12
 7294 0694 3423     		movs	r3, #52
 7295 0696 03FB04F3 		mul	r3, r3, r4
 7296 069a 1344     		add	r3, r3, r2
 7297 069c 0C33     		adds	r3, r3, #12
 7298 069e 1960     		str	r1, [r3]
 7299 06a0 1BE0     		b	.L454
 7300              	.L455:
2131:..\src/interruptions.c ****                 } else { // [GS]
2132:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7301              		.loc 1 2132 0
 7302 06a2 554B     		ldr	r3, .L576
 7303 06a4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7304 06a8 1846     		mov	r0, r3
 7305 06aa 544B     		ldr	r3, .L576+4
 7306 06ac B3F90A30 		ldrsh	r3, [r3, #10]
 7307 06b0 A3F26362 		subw	r2, r3, #1635
 7308 06b4 1346     		mov	r3, r2
 7309 06b6 1B01     		lsls	r3, r3, #4
 7310 06b8 9B1A     		subs	r3, r3, r2
 7311 06ba 5B01     		lsls	r3, r3, #5
 7312 06bc 1B11     		asrs	r3, r3, #4
 7313 06be 1BB2     		sxth	r3, r3
 7314 06c0 1A46     		mov	r2, r3
 7315 06c2 4F4B     		ldr	r3, .L576+8
 7316 06c4 93F90130 		ldrsb	r3, [r3, #1]
 7317 06c8 03FB02F2 		mul	r2, r3, r2
 7318 06cc 4D49     		ldr	r1, .L576+12
 7319 06ce 3423     		movs	r3, #52
 7320 06d0 03FB00F3 		mul	r3, r3, r0
 7321 06d4 0B44     		add	r3, r3, r1
 7322 06d6 0C33     		adds	r3, r3, #12
 7323 06d8 1A60     		str	r2, [r3]
 7324              	.L454:
2133:..\src/interruptions.c ****                 }
2134:..\src/interruptions.c ****             }
2135:..\src/interruptions.c ****             
2136:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7325              		.loc 1 2136 0
 7326 06da 474B     		ldr	r3, .L576
 7327 06dc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7328 06e0 1D46     		mov	r5, r3
 7329 06e2 454B     		ldr	r3, .L576
 7330 06e4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7331 06e8 1946     		mov	r1, r3
 7332 06ea 464A     		ldr	r2, .L576+12
 7333 06ec 3423     		movs	r3, #52
 7334 06ee 03FB01F3 		mul	r3, r3, r1
 7335 06f2 1344     		add	r3, r3, r2
 7336 06f4 0C33     		adds	r3, r3, #12
 7337 06f6 1C68     		ldr	r4, [r3]
 7338 06f8 3F4B     		ldr	r3, .L576
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 170


 7339 06fa 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7340 06fe 1946     		mov	r1, r3
 7341 0700 404A     		ldr	r2, .L576+12
 7342 0702 3423     		movs	r3, #52
 7343 0704 03FB01F3 		mul	r3, r3, r1
 7344 0708 1344     		add	r3, r3, r2
 7345 070a 1A68     		ldr	r2, [r3]
 7346 070c 3A4B     		ldr	r3, .L576
 7347 070e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7348 0712 1846     		mov	r0, r3
 7349 0714 3849     		ldr	r1, .L576
 7350 0716 0346     		mov	r3, r0
 7351 0718 5B00     		lsls	r3, r3, #1
 7352 071a 0344     		add	r3, r3, r0
 7353 071c 1B01     		lsls	r3, r3, #4
 7354 071e 0B44     		add	r3, r3, r1
 7355 0720 03F29513 		addw	r3, r3, #405
 7356 0724 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7357 0726 42FA03F6 		asr	r6, r2, r3
 7358 072a 334B     		ldr	r3, .L576
 7359 072c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7360 0730 1946     		mov	r1, r3
 7361 0732 344A     		ldr	r2, .L576+12
 7362 0734 3423     		movs	r3, #52
 7363 0736 03FB01F3 		mul	r3, r3, r1
 7364 073a 1344     		add	r3, r3, r2
 7365 073c 1C33     		adds	r3, r3, #28
 7366 073e 1A68     		ldr	r2, [r3]
 7367 0740 2D4B     		ldr	r3, .L576
 7368 0742 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7369 0746 1846     		mov	r0, r3
 7370 0748 2B49     		ldr	r1, .L576
 7371 074a 0346     		mov	r3, r0
 7372 074c 5B00     		lsls	r3, r3, #1
 7373 074e 0344     		add	r3, r3, r0
 7374 0750 1B01     		lsls	r3, r3, #4
 7375 0752 0B44     		add	r3, r3, r1
 7376 0754 03F29513 		addw	r3, r3, #405
 7377 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7378 075a 42FA03FE 		asr	lr, r2, r3
 7379 075e 2A4B     		ldr	r3, .L576+16
 7380 0760 1A69     		ldr	r2, [r3, #16]
 7381 0762 254B     		ldr	r3, .L576
 7382 0764 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7383 0768 1846     		mov	r0, r3
 7384 076a 2349     		ldr	r1, .L576
 7385 076c 0346     		mov	r3, r0
 7386 076e 5B00     		lsls	r3, r3, #1
 7387 0770 0344     		add	r3, r3, r0
 7388 0772 1B01     		lsls	r3, r3, #4
 7389 0774 0B44     		add	r3, r3, r1
 7390 0776 03F29513 		addw	r3, r3, #405
 7391 077a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7392 077c 42FA03F3 		asr	r3, r2, r3
 7393 0780 7246     		mov	r2, lr
 7394 0782 3146     		mov	r1, r6
 7395 0784 0120     		movs	r0, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 171


 7396 0786 FFF7FEFF 		bl	curr_estim
 7397 078a 0346     		mov	r3, r0
 7398 078c E31A     		subs	r3, r4, r3
 7399 078e 2249     		ldr	r1, .L576+32
 7400 0790 1846     		mov	r0, r3
 7401 0792 FFF7FEFF 		bl	filter
 7402 0796 0346     		mov	r3, r0
 7403 0798 1BB2     		sxth	r3, r3
 7404 079a 1946     		mov	r1, r3
 7405 079c 194A     		ldr	r2, .L576+12
 7406 079e 3423     		movs	r3, #52
 7407 07a0 03FB05F3 		mul	r3, r3, r5
 7408 07a4 1344     		add	r3, r3, r2
 7409 07a6 1033     		adds	r3, r3, #16
 7410 07a8 1960     		str	r1, [r3]
 7411              	.L452:
2137:..\src/interruptions.c ****         }
2138:..\src/interruptions.c ****     
2139:..\src/interruptions.c ****         // Check Interrupt 
2140:..\src/interruptions.c ****     
2141:..\src/interruptions.c ****         if (interrupt_flag){
 7412              		.loc 1 2141 0
 7413 07aa 1C4B     		ldr	r3, .L576+36
 7414 07ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7415 07ae 002B     		cmp	r3, #0
 7416 07b0 06D0     		beq	.L440
2142:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7417              		.loc 1 2142 0
 7418 07b2 1A4B     		ldr	r3, .L576+36
 7419 07b4 0022     		movs	r2, #0
 7420 07b6 1A70     		strb	r2, [r3]
2143:..\src/interruptions.c ****             interrupt_manager();
 7421              		.loc 1 2143 0
 7422 07b8 FFF7FEFF 		bl	interrupt_manager
 7423 07bc 00E0     		b	.L440
 7424              	.L554:
2040:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7425              		.loc 1 2040 0
 7426 07be 00BF     		nop
 7427              	.L440:
2144:..\src/interruptions.c ****         }
2145:..\src/interruptions.c **** 
2146:..\src/interruptions.c ****     }
2147:..\src/interruptions.c ****     
2148:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2149:..\src/interruptions.c ****         
2150:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2151:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7428              		.loc 1 2151 0
 7429 07c0 174B     		ldr	r3, .L576+40
 7430 07c2 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7431 07c6 002B     		cmp	r3, #0
 7432 07c8 05D1     		bne	.L456
2152:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7433              		.loc 1 2152 0
 7434 07ca 164B     		ldr	r3, .L576+44
 7435 07cc 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 172


 7436 07ce 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7437              		.loc 1 2153 0
 7438 07d0 154B     		ldr	r3, .L576+48
 7439 07d2 0022     		movs	r2, #0
 7440 07d4 1A70     		strb	r2, [r3]
 7441              	.L456:
2154:..\src/interruptions.c ****     }
2155:..\src/interruptions.c **** 
2156:..\src/interruptions.c ****     // EMG 1 calibration state machine
2157:..\src/interruptions.c ****    
2158:..\src/interruptions.c ****     // Calibration state machine
2159:..\src/interruptions.c ****     switch(emg_1_status) {
 7442              		.loc 1 2159 0
 7443 07d6 134B     		ldr	r3, .L576+44
 7444 07d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7445 07da 032B     		cmp	r3, #3
 7446 07dc 00F2FC80 		bhi	.L555
 7447 07e0 01A2     		adr	r2, .L459
 7448 07e2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7449 07e6 00BF     		.p2align 2
 7450              	.L459:
 7451 07e8 2D080000 		.word	.L458+1
 7452 07ec DD080000 		.word	.L460+1
 7453 07f0 F3080000 		.word	.L461+1
 7454 07f4 2F090000 		.word	.L462+1
 7455              		.p2align 1
 7456              	.L577:
 7457              		.align	2
 7458              	.L576:
 7459 07f8 00000000 		.word	g_mem
 7460 07fc 00000000 		.word	ADC_buf
 7461 0800 00000000 		.word	pwm_sign
 7462 0804 00000000 		.word	g_meas
 7463 0808 00000000 		.word	g_ref
 7464 080c 00000000 		.word	filt_curr_diff
 7465 0810 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7466 0814 08000000 		.word	filt_i+8
 7467 0818 08000000 		.word	filt_curr_diff+8
 7468 081c 00000000 		.word	interrupt_flag
 7469 0820 00000000 		.word	c_mem
 7470 0824 00000000 		.word	emg_1_status
 7471 0828 00000000 		.word	emg_2_status
 7472              	.L458:
2160:..\src/interruptions.c ****         case NORMAL: // normal execution
2161:..\src/interruptions.c ****             
2162:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7473              		.loc 1 2162 0
 7474 082c AE4B     		ldr	r3, .L578
 7475 082e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7476 0832 022B     		cmp	r3, #2
 7477 0834 13D0     		beq	.L463
 7478              		.loc 1 2162 0 is_stmt 0 discriminator 1
 7479 0836 AC4B     		ldr	r3, .L578
 7480 0838 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7481 083c 032B     		cmp	r3, #3
 7482 083e 0ED0     		beq	.L463
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 173


2163:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7483              		.loc 1 2163 0 is_stmt 1
 7484 0840 AA4B     		ldr	r3, .L578+4
 7485 0842 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7486 0846 0233     		adds	r3, r3, #2
 7487 0848 A94A     		ldr	r2, .L578+8
 7488 084a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7489 084e A3F26763 		subw	r3, r3, #1639
 7490 0852 5722     		movs	r2, #87
 7491 0854 02FB03F3 		mul	r3, r2, r3
 7492 0858 5B11     		asrs	r3, r3, #5
 7493 085a 7B60     		str	r3, [r7, #4]
 7494 085c 07E0     		b	.L464
 7495              	.L463:
2164:..\src/interruptions.c ****             }
2165:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2166:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7496              		.loc 1 2166 0
 7497 085e A34B     		ldr	r3, .L578+4
 7498 0860 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7499 0864 0233     		adds	r3, r3, #2
 7500 0866 A24A     		ldr	r2, .L578+8
 7501 0868 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7502 086c 7B60     		str	r3, [r7, #4]
 7503              	.L464:
2167:..\src/interruptions.c ****             }
2168:..\src/interruptions.c ****             
2169:..\src/interruptions.c ****             if (i_aux < 0) 
 7504              		.loc 1 2169 0
 7505 086e 7B68     		ldr	r3, [r7, #4]
 7506 0870 002B     		cmp	r3, #0
 7507 0872 01DA     		bge	.L465
2170:..\src/interruptions.c ****                 i_aux = 0;
 7508              		.loc 1 2170 0
 7509 0874 0023     		movs	r3, #0
 7510 0876 7B60     		str	r3, [r7, #4]
 7511              	.L465:
2171:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7512              		.loc 1 2171 0
 7513 0878 9E49     		ldr	r1, .L578+12
 7514 087a 7868     		ldr	r0, [r7, #4]
 7515 087c FFF7FEFF 		bl	filter
 7516 0880 7860     		str	r0, [r7, #4]
2172:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7517              		.loc 1 2172 0
 7518 0882 7B68     		ldr	r3, [r7, #4]
 7519 0884 9B02     		lsls	r3, r3, #10
 7520 0886 1A46     		mov	r2, r3
 7521 0888 974B     		ldr	r3, .L578
 7522 088a D3F8F431 		ldr	r3, [r3, #500]
 7523 088e B2FBF3F3 		udiv	r3, r2, r3
 7524 0892 7B60     		str	r3, [r7, #4]
2173:..\src/interruptions.c **** 
2174:..\src/interruptions.c ****             if (interrupt_flag){
 7525              		.loc 1 2174 0
 7526 0894 984B     		ldr	r3, .L578+16
 7527 0896 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 174


 7528 0898 002B     		cmp	r3, #0
 7529 089a 04D0     		beq	.L466
2175:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7530              		.loc 1 2175 0
 7531 089c 964B     		ldr	r3, .L578+16
 7532 089e 0022     		movs	r2, #0
 7533 08a0 1A70     		strb	r2, [r3]
2176:..\src/interruptions.c ****                 interrupt_manager();
 7534              		.loc 1 2176 0
 7535 08a2 FFF7FEFF 		bl	interrupt_manager
 7536              	.L466:
2177:..\src/interruptions.c ****             }
2178:..\src/interruptions.c ****             //Saturation
2179:..\src/interruptions.c ****             if (i_aux < 0)
 7537              		.loc 1 2179 0
 7538 08a6 7B68     		ldr	r3, [r7, #4]
 7539 08a8 002B     		cmp	r3, #0
 7540 08aa 02DA     		bge	.L467
2180:..\src/interruptions.c ****                 i_aux = 0;
 7541              		.loc 1 2180 0
 7542 08ac 0023     		movs	r3, #0
 7543 08ae 7B60     		str	r3, [r7, #4]
 7544 08b0 06E0     		b	.L468
 7545              	.L467:
2181:..\src/interruptions.c ****             else 
2182:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7546              		.loc 1 2182 0
 7547 08b2 7B68     		ldr	r3, [r7, #4]
 7548 08b4 B3F5806F 		cmp	r3, #1024
 7549 08b8 02DD     		ble	.L468
2183:..\src/interruptions.c ****                     i_aux = 1024;
 7550              		.loc 1 2183 0
 7551 08ba 4FF48063 		mov	r3, #1024
 7552 08be 7B60     		str	r3, [r7, #4]
 7553              	.L468:
2184:..\src/interruptions.c ****             
2185:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7554              		.loc 1 2185 0
 7555 08c0 8E4A     		ldr	r2, .L578+20
 7556 08c2 7B68     		ldr	r3, [r7, #4]
 7557 08c4 1360     		str	r3, [r2]
2186:..\src/interruptions.c **** 
2187:..\src/interruptions.c ****             if (interrupt_flag){
 7558              		.loc 1 2187 0
 7559 08c6 8C4B     		ldr	r3, .L578+16
 7560 08c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7561 08ca 002B     		cmp	r3, #0
 7562 08cc 00F08680 		beq	.L556
2188:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7563              		.loc 1 2188 0
 7564 08d0 894B     		ldr	r3, .L578+16
 7565 08d2 0022     		movs	r2, #0
 7566 08d4 1A70     		strb	r2, [r3]
2189:..\src/interruptions.c ****                 interrupt_manager();
 7567              		.loc 1 2189 0
 7568 08d6 FFF7FEFF 		bl	interrupt_manager
2190:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 175


2191:..\src/interruptions.c ****             
2192:..\src/interruptions.c ****             break;
 7569              		.loc 1 2192 0
 7570 08da 7FE0     		b	.L556
 7571              	.L460:
2193:..\src/interruptions.c **** 
2194:..\src/interruptions.c ****         case RESET: // reset variables
2195:..\src/interruptions.c ****             emg_counter_1 = 0;
 7572              		.loc 1 2195 0
 7573 08dc 884B     		ldr	r3, .L578+24
 7574 08de 0022     		movs	r2, #0
 7575 08e0 1A80     		strh	r2, [r3]	@ movhi
2196:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7576              		.loc 1 2196 0
 7577 08e2 814B     		ldr	r3, .L578
 7578 08e4 0022     		movs	r2, #0
 7579 08e6 C3F8F421 		str	r2, [r3, #500]
2197:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7580              		.loc 1 2197 0
 7581 08ea 864B     		ldr	r3, .L578+28
 7582 08ec 0222     		movs	r2, #2
 7583 08ee 1A70     		strb	r2, [r3]
2198:..\src/interruptions.c ****             break;
 7584              		.loc 1 2198 0
 7585 08f0 79E0     		b	.L470
 7586              	.L461:
2199:..\src/interruptions.c **** 
2200:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2201:..\src/interruptions.c ****             emg_counter_1++;
 7587              		.loc 1 2201 0
 7588 08f2 834B     		ldr	r3, .L578+24
 7589 08f4 1B88     		ldrh	r3, [r3]
 7590 08f6 0133     		adds	r3, r3, #1
 7591 08f8 9AB2     		uxth	r2, r3
 7592 08fa 814B     		ldr	r3, .L578+24
 7593 08fc 1A80     		strh	r2, [r3]	@ movhi
2202:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7594              		.loc 1 2202 0
 7595 08fe 804B     		ldr	r3, .L578+24
 7596 0900 1B88     		ldrh	r3, [r3]
 7597 0902 B3F5FA7F 		cmp	r3, #500
 7598 0906 6BD1     		bne	.L557
2203:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7599              		.loc 1 2203 0
 7600 0908 7D4B     		ldr	r3, .L578+24
 7601 090a 0022     		movs	r2, #0
 7602 090c 1A80     		strh	r2, [r3]	@ movhi
2204:..\src/interruptions.c ****                 LED_control(1);
 7603              		.loc 1 2204 0
 7604 090e 0120     		movs	r0, #1
 7605 0910 FFF7FEFF 		bl	LED_control
2205:..\src/interruptions.c **** 				
2206:..\src/interruptions.c ****                 if (interrupt_flag){
 7606              		.loc 1 2206 0
 7607 0914 784B     		ldr	r3, .L578+16
 7608 0916 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7609 0918 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 176


 7610 091a 04D0     		beq	.L472
2207:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7611              		.loc 1 2207 0
 7612 091c 764B     		ldr	r3, .L578+16
 7613 091e 0022     		movs	r2, #0
 7614 0920 1A70     		strb	r2, [r3]
2208:..\src/interruptions.c ****                     interrupt_manager();
 7615              		.loc 1 2208 0
 7616 0922 FFF7FEFF 		bl	interrupt_manager
 7617              	.L472:
2209:..\src/interruptions.c ****                 }
2210:..\src/interruptions.c ****                 
2211:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7618              		.loc 1 2211 0
 7619 0926 774B     		ldr	r3, .L578+28
 7620 0928 0322     		movs	r2, #3
 7621 092a 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****             }
2213:..\src/interruptions.c ****             break;
 7622              		.loc 1 2213 0
 7623 092c 58E0     		b	.L557
 7624              	.L462:
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2216:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2217:..\src/interruptions.c ****             emg_counter_1++;
 7625              		.loc 1 2217 0
 7626 092e 744B     		ldr	r3, .L578+24
 7627 0930 1B88     		ldrh	r3, [r3]
 7628 0932 0133     		adds	r3, r3, #1
 7629 0934 9AB2     		uxth	r2, r3
 7630 0936 724B     		ldr	r3, .L578+24
 7631 0938 1A80     		strh	r2, [r3]	@ movhi
2218:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7632              		.loc 1 2218 0
 7633 093a 6C4B     		ldr	r3, .L578+4
 7634 093c 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7635 0940 0233     		adds	r3, r3, #2
 7636 0942 6B4A     		ldr	r2, .L578+8
 7637 0944 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7638 0948 002B     		cmp	r3, #0
 7639 094a 07DA     		bge	.L473
2219:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7640              		.loc 1 2219 0
 7641 094c 674B     		ldr	r3, .L578+4
 7642 094e 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7643 0952 0233     		adds	r3, r3, #2
 7644 0954 664A     		ldr	r2, .L578+8
 7645 0956 0021     		movs	r1, #0
 7646 0958 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7647              	.L473:
2220:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7648              		.loc 1 2220 0
 7649 095c 634B     		ldr	r3, .L578+4
 7650 095e 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7651 0962 0233     		adds	r3, r3, #2
 7652 0964 624A     		ldr	r2, .L578+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 177


 7653 0966 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7654 096a 6249     		ldr	r1, .L578+12
 7655 096c 1846     		mov	r0, r3
 7656 096e FFF7FEFF 		bl	filter
 7657 0972 0246     		mov	r2, r0
 7658 0974 5C4B     		ldr	r3, .L578
 7659 0976 D3F8F431 		ldr	r3, [r3, #500]
 7660 097a 1344     		add	r3, r3, r2
 7661 097c 5A4A     		ldr	r2, .L578
 7662 097e C2F8F431 		str	r3, [r2, #500]
2221:..\src/interruptions.c ****             
2222:..\src/interruptions.c ****             if (interrupt_flag){
 7663              		.loc 1 2222 0
 7664 0982 5D4B     		ldr	r3, .L578+16
 7665 0984 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7666 0986 002B     		cmp	r3, #0
 7667 0988 04D0     		beq	.L474
2223:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7668              		.loc 1 2223 0
 7669 098a 5B4B     		ldr	r3, .L578+16
 7670 098c 0022     		movs	r2, #0
 7671 098e 1A70     		strb	r2, [r3]
2224:..\src/interruptions.c ****                 interrupt_manager();
 7672              		.loc 1 2224 0
 7673 0990 FFF7FEFF 		bl	interrupt_manager
 7674              	.L474:
2225:..\src/interruptions.c ****             }
2226:..\src/interruptions.c ****             
2227:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7675              		.loc 1 2227 0
 7676 0994 5A4B     		ldr	r3, .L578+24
 7677 0996 1B88     		ldrh	r3, [r3]
 7678 0998 B3F57A7F 		cmp	r3, #1000
 7679 099c 22D1     		bne	.L558
2228:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7680              		.loc 1 2228 0
 7681 099e 524B     		ldr	r3, .L578
 7682 09a0 D3F8F431 		ldr	r3, [r3, #500]
 7683 09a4 584A     		ldr	r2, .L578+32
 7684 09a6 A2FB0323 		umull	r2, r3, r2, r3
 7685 09aa 9B09     		lsrs	r3, r3, #6
 7686 09ac 4E4A     		ldr	r2, .L578
 7687 09ae C2F8F431 		str	r3, [r2, #500]
2229:..\src/interruptions.c **** 
2230:..\src/interruptions.c ****                 if (interrupt_flag){
 7688              		.loc 1 2230 0
 7689 09b2 514B     		ldr	r3, .L578+16
 7690 09b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7691 09b6 002B     		cmp	r3, #0
 7692 09b8 04D0     		beq	.L476
2231:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7693              		.loc 1 2231 0
 7694 09ba 4F4B     		ldr	r3, .L578+16
 7695 09bc 0022     		movs	r2, #0
 7696 09be 1A70     		strb	r2, [r3]
2232:..\src/interruptions.c ****                     interrupt_manager();
 7697              		.loc 1 2232 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 178


 7698 09c0 FFF7FEFF 		bl	interrupt_manager
 7699              	.L476:
2233:..\src/interruptions.c ****                 }                    
2234:..\src/interruptions.c ****                 
2235:..\src/interruptions.c ****                 LED_control(0);
 7700              		.loc 1 2235 0
 7701 09c4 0020     		movs	r0, #0
 7702 09c6 FFF7FEFF 		bl	LED_control
2236:..\src/interruptions.c **** 				
2237:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7703              		.loc 1 2237 0
 7704 09ca 4D4B     		ldr	r3, .L578+24
 7705 09cc 0022     		movs	r2, #0
 7706 09ce 1A80     		strh	r2, [r3]	@ movhi
2238:..\src/interruptions.c **** 
2239:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7707              		.loc 1 2239 0
 7708 09d0 4C4B     		ldr	r3, .L578+28
 7709 09d2 0022     		movs	r2, #0
 7710 09d4 1A70     		strb	r2, [r3]
2240:..\src/interruptions.c ****             }
2241:..\src/interruptions.c ****             break;
 7711              		.loc 1 2241 0
 7712 09d6 05E0     		b	.L558
 7713              	.L555:
2242:..\src/interruptions.c **** 
2243:..\src/interruptions.c ****         default:
2244:..\src/interruptions.c ****             break;
 7714              		.loc 1 2244 0
 7715 09d8 00BF     		nop
 7716 09da 04E0     		b	.L470
 7717              	.L556:
2192:..\src/interruptions.c **** 
 7718              		.loc 1 2192 0
 7719 09dc 00BF     		nop
 7720 09de 02E0     		b	.L470
 7721              	.L557:
2213:..\src/interruptions.c **** 
 7722              		.loc 1 2213 0
 7723 09e0 00BF     		nop
 7724 09e2 00E0     		b	.L470
 7725              	.L558:
2241:..\src/interruptions.c **** 
 7726              		.loc 1 2241 0
 7727 09e4 00BF     		nop
 7728              	.L470:
2245:..\src/interruptions.c ****     }
2246:..\src/interruptions.c **** 
2247:..\src/interruptions.c ****     if (interrupt_flag){
 7729              		.loc 1 2247 0
 7730 09e6 444B     		ldr	r3, .L578+16
 7731 09e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7732 09ea 002B     		cmp	r3, #0
 7733 09ec 04D0     		beq	.L477
2248:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7734              		.loc 1 2248 0
 7735 09ee 424B     		ldr	r3, .L578+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 179


 7736 09f0 0022     		movs	r2, #0
 7737 09f2 1A70     		strb	r2, [r3]
2249:..\src/interruptions.c ****         interrupt_manager();
 7738              		.loc 1 2249 0
 7739 09f4 FFF7FEFF 		bl	interrupt_manager
 7740              	.L477:
2250:..\src/interruptions.c ****     }
2251:..\src/interruptions.c ****     // EMG 2 calibration state machine
2252:..\src/interruptions.c ****     switch(emg_2_status) {
 7741              		.loc 1 2252 0
 7742 09f8 444B     		ldr	r3, .L578+36
 7743 09fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7744 09fc 052B     		cmp	r3, #5
 7745 09fe 00F2C881 		bhi	.L559
 7746 0a02 01A2     		adr	r2, .L480
 7747 0a04 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7748              		.p2align 2
 7749              	.L480:
 7750 0a08 210A0000 		.word	.L479+1
 7751 0a0c C10A0000 		.word	.L481+1
 7752 0a10 190B0000 		.word	.L482+1
 7753 0a14 570B0000 		.word	.L483+1
 7754 0a18 090C0000 		.word	.L484+1
 7755 0a1c 1B0C0000 		.word	.L485+1
 7756              		.p2align 1
 7757              	.L479:
2253:..\src/interruptions.c ****         case NORMAL: // normal execution
2254:..\src/interruptions.c ****         
2255:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7758              		.loc 1 2255 0
 7759 0a20 314B     		ldr	r3, .L578
 7760 0a22 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7761 0a26 022B     		cmp	r3, #2
 7762 0a28 14D0     		beq	.L486
 7763              		.loc 1 2255 0 is_stmt 0 discriminator 1
 7764 0a2a 2F4B     		ldr	r3, .L578
 7765 0a2c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7766 0a30 032B     		cmp	r3, #3
 7767 0a32 0FD0     		beq	.L486
2256:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7768              		.loc 1 2256 0 is_stmt 1
 7769 0a34 2D4B     		ldr	r3, .L578+4
 7770 0a36 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7771 0a3a C3F10303 		rsb	r3, r3, #3
 7772 0a3e 2C4A     		ldr	r2, .L578+8
 7773 0a40 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7774 0a44 A3F26763 		subw	r3, r3, #1639
 7775 0a48 5722     		movs	r2, #87
 7776 0a4a 02FB03F3 		mul	r3, r2, r3
 7777 0a4e 5B11     		asrs	r3, r3, #5
 7778 0a50 7B60     		str	r3, [r7, #4]
 7779 0a52 08E0     		b	.L487
 7780              	.L486:
2257:..\src/interruptions.c ****             }
2258:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2259:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7781              		.loc 1 2259 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 180


 7782 0a54 254B     		ldr	r3, .L578+4
 7783 0a56 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7784 0a5a C3F10303 		rsb	r3, r3, #3
 7785 0a5e 244A     		ldr	r2, .L578+8
 7786 0a60 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7787 0a64 7B60     		str	r3, [r7, #4]
 7788              	.L487:
2260:..\src/interruptions.c ****             }
2261:..\src/interruptions.c **** 
2262:..\src/interruptions.c ****             if (i_aux < 0)
 7789              		.loc 1 2262 0
 7790 0a66 7B68     		ldr	r3, [r7, #4]
 7791 0a68 002B     		cmp	r3, #0
 7792 0a6a 01DA     		bge	.L488
2263:..\src/interruptions.c ****                 i_aux = 0;
 7793              		.loc 1 2263 0
 7794 0a6c 0023     		movs	r3, #0
 7795 0a6e 7B60     		str	r3, [r7, #4]
 7796              	.L488:
2264:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7797              		.loc 1 2264 0
 7798 0a70 2749     		ldr	r1, .L578+40
 7799 0a72 7868     		ldr	r0, [r7, #4]
 7800 0a74 FFF7FEFF 		bl	filter
 7801 0a78 7860     		str	r0, [r7, #4]
2265:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7802              		.loc 1 2265 0
 7803 0a7a 7B68     		ldr	r3, [r7, #4]
 7804 0a7c 9B02     		lsls	r3, r3, #10
 7805 0a7e 1A46     		mov	r2, r3
 7806 0a80 194B     		ldr	r3, .L578
 7807 0a82 D3F8F831 		ldr	r3, [r3, #504]
 7808 0a86 B2FBF3F3 		udiv	r3, r2, r3
 7809 0a8a 7B60     		str	r3, [r7, #4]
2266:..\src/interruptions.c **** 
2267:..\src/interruptions.c ****             if (interrupt_flag){
 7810              		.loc 1 2267 0
 7811 0a8c 1A4B     		ldr	r3, .L578+16
 7812 0a8e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7813 0a90 002B     		cmp	r3, #0
 7814 0a92 04D0     		beq	.L489
2268:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7815              		.loc 1 2268 0
 7816 0a94 184B     		ldr	r3, .L578+16
 7817 0a96 0022     		movs	r2, #0
 7818 0a98 1A70     		strb	r2, [r3]
2269:..\src/interruptions.c ****                 interrupt_manager();
 7819              		.loc 1 2269 0
 7820 0a9a FFF7FEFF 		bl	interrupt_manager
 7821              	.L489:
2270:..\src/interruptions.c ****             }
2271:..\src/interruptions.c ****             
2272:..\src/interruptions.c ****             if (i_aux < 0) 
 7822              		.loc 1 2272 0
 7823 0a9e 7B68     		ldr	r3, [r7, #4]
 7824 0aa0 002B     		cmp	r3, #0
 7825 0aa2 02DA     		bge	.L490
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 181


2273:..\src/interruptions.c ****                 i_aux = 0;
 7826              		.loc 1 2273 0
 7827 0aa4 0023     		movs	r3, #0
 7828 0aa6 7B60     		str	r3, [r7, #4]
 7829 0aa8 06E0     		b	.L491
 7830              	.L490:
2274:..\src/interruptions.c ****             else 
2275:..\src/interruptions.c ****                 if (i_aux > 1024)
 7831              		.loc 1 2275 0
 7832 0aaa 7B68     		ldr	r3, [r7, #4]
 7833 0aac B3F5806F 		cmp	r3, #1024
 7834 0ab0 02DD     		ble	.L491
2276:..\src/interruptions.c ****                     i_aux = 1024;
 7835              		.loc 1 2276 0
 7836 0ab2 4FF48063 		mov	r3, #1024
 7837 0ab6 7B60     		str	r3, [r7, #4]
 7838              	.L491:
2277:..\src/interruptions.c ****             
2278:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7839              		.loc 1 2278 0
 7840 0ab8 104A     		ldr	r2, .L578+20
 7841 0aba 7B68     		ldr	r3, [r7, #4]
 7842 0abc 5360     		str	r3, [r2, #4]
2279:..\src/interruptions.c **** 
2280:..\src/interruptions.c ****             break;
 7843              		.loc 1 2280 0
 7844 0abe 8AE1     		b	.L492
 7845              	.L481:
2281:..\src/interruptions.c **** 
2282:..\src/interruptions.c ****         case RESET: // reset variables
2283:..\src/interruptions.c ****             emg_counter_2 = 0;
 7846              		.loc 1 2283 0
 7847 0ac0 144B     		ldr	r3, .L578+44
 7848 0ac2 0022     		movs	r2, #0
 7849 0ac4 1A80     		strh	r2, [r3]	@ movhi
2284:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7850              		.loc 1 2284 0
 7851 0ac6 084B     		ldr	r3, .L578
 7852 0ac8 0022     		movs	r2, #0
 7853 0aca C3F8F821 		str	r2, [r3, #504]
2285:..\src/interruptions.c **** 
2286:..\src/interruptions.c ****             if (interrupt_flag){
 7854              		.loc 1 2286 0
 7855 0ace 0A4B     		ldr	r3, .L578+16
 7856 0ad0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7857 0ad2 002B     		cmp	r3, #0
 7858 0ad4 04D0     		beq	.L493
2287:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7859              		.loc 1 2287 0
 7860 0ad6 084B     		ldr	r3, .L578+16
 7861 0ad8 0022     		movs	r2, #0
 7862 0ada 1A70     		strb	r2, [r3]
2288:..\src/interruptions.c ****                 interrupt_manager();
 7863              		.loc 1 2288 0
 7864 0adc FFF7FEFF 		bl	interrupt_manager
 7865              	.L493:
2289:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 182


2290:..\src/interruptions.c ****             
2291:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7866              		.loc 1 2291 0
 7867 0ae0 0A4B     		ldr	r3, .L578+36
 7868 0ae2 0422     		movs	r2, #4
 7869 0ae4 1A70     		strb	r2, [r3]
2292:..\src/interruptions.c ****             break;
 7870              		.loc 1 2292 0
 7871 0ae6 76E1     		b	.L492
 7872              	.L579:
 7873              		.align	2
 7874              	.L578:
 7875 0ae8 00000000 		.word	g_mem
 7876 0aec 00000000 		.word	c_mem
 7877 0af0 00000000 		.word	ADC_buf
 7878 0af4 00000000 		.word	filt_emg
 7879 0af8 00000000 		.word	interrupt_flag
 7880 0afc 00000000 		.word	g_adc_meas
 7881 0b00 78010000 		.word	emg_counter_1.10661
 7882 0b04 00000000 		.word	emg_1_status
 7883 0b08 D34D6210 		.word	274877907
 7884 0b0c 00000000 		.word	emg_2_status
 7885 0b10 08000000 		.word	filt_emg+8
 7886 0b14 7A010000 		.word	emg_counter_2.10662
 7887              	.L482:
2293:..\src/interruptions.c **** 
2294:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2295:..\src/interruptions.c ****             emg_counter_2++;
 7888              		.loc 1 2295 0
 7889 0b18 A24B     		ldr	r3, .L580
 7890 0b1a 1B88     		ldrh	r3, [r3]
 7891 0b1c 0133     		adds	r3, r3, #1
 7892 0b1e 9AB2     		uxth	r2, r3
 7893 0b20 A04B     		ldr	r3, .L580
 7894 0b22 1A80     		strh	r2, [r3]	@ movhi
2296:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7895              		.loc 1 2296 0
 7896 0b24 9F4B     		ldr	r3, .L580
 7897 0b26 1B88     		ldrh	r3, [r3]
 7898 0b28 B3F5FA7F 		cmp	r3, #500
 7899 0b2c 40F03381 		bne	.L560
2297:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7900              		.loc 1 2297 0
 7901 0b30 9C4B     		ldr	r3, .L580
 7902 0b32 0022     		movs	r2, #0
 7903 0b34 1A80     		strh	r2, [r3]	@ movhi
2298:..\src/interruptions.c ****                 LED_control(1);
 7904              		.loc 1 2298 0
 7905 0b36 0120     		movs	r0, #1
 7906 0b38 FFF7FEFF 		bl	LED_control
2299:..\src/interruptions.c **** 
2300:..\src/interruptions.c ****                 if (interrupt_flag){
 7907              		.loc 1 2300 0
 7908 0b3c 9A4B     		ldr	r3, .L580+4
 7909 0b3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7910 0b40 002B     		cmp	r3, #0
 7911 0b42 04D0     		beq	.L495
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 183


2301:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7912              		.loc 1 2301 0
 7913 0b44 984B     		ldr	r3, .L580+4
 7914 0b46 0022     		movs	r2, #0
 7915 0b48 1A70     		strb	r2, [r3]
2302:..\src/interruptions.c ****                     interrupt_manager();
 7916              		.loc 1 2302 0
 7917 0b4a FFF7FEFF 		bl	interrupt_manager
 7918              	.L495:
2303:..\src/interruptions.c ****                 }
2304:..\src/interruptions.c ****                 
2305:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7919              		.loc 1 2305 0
 7920 0b4e 974B     		ldr	r3, .L580+8
 7921 0b50 0322     		movs	r2, #3
 7922 0b52 1A70     		strb	r2, [r3]
2306:..\src/interruptions.c ****             }
2307:..\src/interruptions.c ****             break;
 7923              		.loc 1 2307 0
 7924 0b54 1FE1     		b	.L560
 7925              	.L483:
2308:..\src/interruptions.c **** 
2309:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2310:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2311:..\src/interruptions.c ****             emg_counter_2++;
 7926              		.loc 1 2311 0
 7927 0b56 934B     		ldr	r3, .L580
 7928 0b58 1B88     		ldrh	r3, [r3]
 7929 0b5a 0133     		adds	r3, r3, #1
 7930 0b5c 9AB2     		uxth	r2, r3
 7931 0b5e 914B     		ldr	r3, .L580
 7932 0b60 1A80     		strh	r2, [r3]	@ movhi
2312:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7933              		.loc 1 2312 0
 7934 0b62 934B     		ldr	r3, .L580+12
 7935 0b64 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7936 0b68 C3F10303 		rsb	r3, r3, #3
 7937 0b6c 914A     		ldr	r2, .L580+16
 7938 0b6e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7939 0b72 002B     		cmp	r3, #0
 7940 0b74 08DA     		bge	.L496
2313:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7941              		.loc 1 2313 0
 7942 0b76 8E4B     		ldr	r3, .L580+12
 7943 0b78 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7944 0b7c C3F10303 		rsb	r3, r3, #3
 7945 0b80 8C4A     		ldr	r2, .L580+16
 7946 0b82 0021     		movs	r1, #0
 7947 0b84 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7948              	.L496:
2314:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7949              		.loc 1 2314 0
 7950 0b88 894B     		ldr	r3, .L580+12
 7951 0b8a 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7952 0b8e C3F10303 		rsb	r3, r3, #3
 7953 0b92 884A     		ldr	r2, .L580+16
 7954 0b94 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 184


 7955 0b98 8749     		ldr	r1, .L580+20
 7956 0b9a 1846     		mov	r0, r3
 7957 0b9c FFF7FEFF 		bl	filter
 7958 0ba0 0246     		mov	r2, r0
 7959 0ba2 864B     		ldr	r3, .L580+24
 7960 0ba4 D3F8F831 		ldr	r3, [r3, #504]
 7961 0ba8 1344     		add	r3, r3, r2
 7962 0baa 844A     		ldr	r2, .L580+24
 7963 0bac C2F8F831 		str	r3, [r2, #504]
2315:..\src/interruptions.c **** 
2316:..\src/interruptions.c ****             if (interrupt_flag){
 7964              		.loc 1 2316 0
 7965 0bb0 7D4B     		ldr	r3, .L580+4
 7966 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7967 0bb4 002B     		cmp	r3, #0
 7968 0bb6 04D0     		beq	.L497
2317:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7969              		.loc 1 2317 0
 7970 0bb8 7B4B     		ldr	r3, .L580+4
 7971 0bba 0022     		movs	r2, #0
 7972 0bbc 1A70     		strb	r2, [r3]
2318:..\src/interruptions.c ****                 interrupt_manager();
 7973              		.loc 1 2318 0
 7974 0bbe FFF7FEFF 		bl	interrupt_manager
 7975              	.L497:
2319:..\src/interruptions.c ****             }
2320:..\src/interruptions.c ****             
2321:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7976              		.loc 1 2321 0
 7977 0bc2 784B     		ldr	r3, .L580
 7978 0bc4 1B88     		ldrh	r3, [r3]
 7979 0bc6 B3F57A7F 		cmp	r3, #1000
 7980 0bca 40F0E680 		bne	.L561
2322:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7981              		.loc 1 2322 0
 7982 0bce 7B4B     		ldr	r3, .L580+24
 7983 0bd0 D3F8F831 		ldr	r3, [r3, #504]
 7984 0bd4 7A4A     		ldr	r2, .L580+28
 7985 0bd6 A2FB0323 		umull	r2, r3, r2, r3
 7986 0bda 9B09     		lsrs	r3, r3, #6
 7987 0bdc 774A     		ldr	r2, .L580+24
 7988 0bde C2F8F831 		str	r3, [r2, #504]
2323:..\src/interruptions.c ****                 LED_control(0);
 7989              		.loc 1 2323 0
 7990 0be2 0020     		movs	r0, #0
 7991 0be4 FFF7FEFF 		bl	LED_control
2324:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7992              		.loc 1 2324 0
 7993 0be8 6E4B     		ldr	r3, .L580
 7994 0bea 0022     		movs	r2, #0
 7995 0bec 1A80     		strh	r2, [r3]	@ movhi
2325:..\src/interruptions.c ****             
2326:..\src/interruptions.c ****                 if (interrupt_flag){
 7996              		.loc 1 2326 0
 7997 0bee 6E4B     		ldr	r3, .L580+4
 7998 0bf0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7999 0bf2 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 185


 8000 0bf4 04D0     		beq	.L499
2327:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8001              		.loc 1 2327 0
 8002 0bf6 6C4B     		ldr	r3, .L580+4
 8003 0bf8 0022     		movs	r2, #0
 8004 0bfa 1A70     		strb	r2, [r3]
2328:..\src/interruptions.c ****                     interrupt_manager();
 8005              		.loc 1 2328 0
 8006 0bfc FFF7FEFF 		bl	interrupt_manager
 8007              	.L499:
2329:..\src/interruptions.c ****                 }
2330:..\src/interruptions.c ****                 
2331:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 8008              		.loc 1 2331 0
 8009 0c00 6A4B     		ldr	r3, .L580+8
 8010 0c02 0522     		movs	r2, #5
 8011 0c04 1A70     		strb	r2, [r3]
2332:..\src/interruptions.c ****             }
2333:..\src/interruptions.c ****             break;
 8012              		.loc 1 2333 0
 8013 0c06 C8E0     		b	.L561
 8014              	.L484:
2334:..\src/interruptions.c **** 
2335:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2336:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 8015              		.loc 1 2336 0
 8016 0c08 6E4B     		ldr	r3, .L580+32
 8017 0c0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8018 0c0c 002B     		cmp	r3, #0
 8019 0c0e 40F0C680 		bne	.L562
2337:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 8020              		.loc 1 2337 0
 8021 0c12 664B     		ldr	r3, .L580+8
 8022 0c14 0222     		movs	r2, #2
 8023 0c16 1A70     		strb	r2, [r3]
2338:..\src/interruptions.c ****             break;
 8024              		.loc 1 2338 0
 8025 0c18 C1E0     		b	.L562
 8026              	.L485:
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2341:..\src/interruptions.c ****             emg_counter_2++;
 8027              		.loc 1 2341 0
 8028 0c1a 624B     		ldr	r3, .L580
 8029 0c1c 1B88     		ldrh	r3, [r3]
 8030 0c1e 0133     		adds	r3, r3, #1
 8031 0c20 9AB2     		uxth	r2, r3
 8032 0c22 604B     		ldr	r3, .L580
 8033 0c24 1A80     		strh	r2, [r3]	@ movhi
2342:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 8034              		.loc 1 2342 0
 8035 0c26 5F4B     		ldr	r3, .L580
 8036 0c28 1B88     		ldrh	r3, [r3]
 8037 0c2a B3F5FA7F 		cmp	r3, #500
 8038 0c2e 40F0D180 		bne	.L563
2343:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 8039              		.loc 1 2343 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 186


 8040 0c32 5C4B     		ldr	r3, .L580
 8041 0c34 0022     		movs	r2, #0
 8042 0c36 1A80     		strh	r2, [r3]	@ movhi
2344:..\src/interruptions.c ****                 
2345:..\src/interruptions.c ****                 if (interrupt_flag){
 8043              		.loc 1 2345 0
 8044 0c38 5B4B     		ldr	r3, .L580+4
 8045 0c3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8046 0c3c 002B     		cmp	r3, #0
 8047 0c3e 04D0     		beq	.L502
2346:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8048              		.loc 1 2346 0
 8049 0c40 594B     		ldr	r3, .L580+4
 8050 0c42 0022     		movs	r2, #0
 8051 0c44 1A70     		strb	r2, [r3]
2347:..\src/interruptions.c ****                     interrupt_manager();
 8052              		.loc 1 2347 0
 8053 0c46 FFF7FEFF 		bl	interrupt_manager
 8054              	.L502:
2348:..\src/interruptions.c ****                 }
2349:..\src/interruptions.c ****                 
2350:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 8055              		.loc 1 2350 0
 8056 0c4a 5F4B     		ldr	r3, .L580+36
 8057 0c4c 0022     		movs	r2, #0
 8058 0c4e 1A70     		strb	r2, [r3]
 8059 0c50 93E0     		b	.L503
 8060              	.L507:
2351:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8061              		.loc 1 2351 0
 8062 0c52 5D4B     		ldr	r3, .L580+36
 8063 0c54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8064 0c56 1946     		mov	r1, r3
 8065 0c58 554A     		ldr	r2, .L580+12
 8066 0c5a 0B46     		mov	r3, r1
 8067 0c5c DB00     		lsls	r3, r3, #3
 8068 0c5e 5B1A     		subs	r3, r3, r1
 8069 0c60 1B01     		lsls	r3, r3, #4
 8070 0c62 1344     		add	r3, r3, r2
 8071 0c64 03F58773 		add	r3, r3, #270
 8072 0c68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8073 0c6a 022B     		cmp	r3, #2
 8074 0c6c 37D0     		beq	.L504
2352:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8075              		.loc 1 2352 0 discriminator 1
 8076 0c6e 564B     		ldr	r3, .L580+36
 8077 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8078 0c72 1946     		mov	r1, r3
 8079 0c74 4E4A     		ldr	r2, .L580+12
 8080 0c76 0B46     		mov	r3, r1
 8081 0c78 DB00     		lsls	r3, r3, #3
 8082 0c7a 5B1A     		subs	r3, r3, r1
 8083 0c7c 1B01     		lsls	r3, r3, #4
 8084 0c7e 1344     		add	r3, r3, r2
 8085 0c80 03F58773 		add	r3, r3, #270
 8086 0c84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2351:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 187


 8087              		.loc 1 2351 0 discriminator 1
 8088 0c86 032B     		cmp	r3, #3
 8089 0c88 29D0     		beq	.L504
2353:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8090              		.loc 1 2353 0
 8091 0c8a 4F4B     		ldr	r3, .L580+36
 8092 0c8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8093 0c8e 1946     		mov	r1, r3
 8094 0c90 474A     		ldr	r2, .L580+12
 8095 0c92 0B46     		mov	r3, r1
 8096 0c94 DB00     		lsls	r3, r3, #3
 8097 0c96 5B1A     		subs	r3, r3, r1
 8098 0c98 1B01     		lsls	r3, r3, #4
 8099 0c9a 1344     		add	r3, r3, r2
 8100 0c9c 03F58773 		add	r3, r3, #270
 8101 0ca0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2352:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8102              		.loc 1 2352 0
 8103 0ca2 042B     		cmp	r3, #4
 8104 0ca4 1BD0     		beq	.L504
2354:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8105              		.loc 1 2354 0
 8106 0ca6 484B     		ldr	r3, .L580+36
 8107 0ca8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8108 0caa 1946     		mov	r1, r3
 8109 0cac 404A     		ldr	r2, .L580+12
 8110 0cae 0B46     		mov	r3, r1
 8111 0cb0 DB00     		lsls	r3, r3, #3
 8112 0cb2 5B1A     		subs	r3, r3, r1
 8113 0cb4 1B01     		lsls	r3, r3, #4
 8114 0cb6 1344     		add	r3, r3, r2
 8115 0cb8 03F58773 		add	r3, r3, #270
 8116 0cbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2353:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8117              		.loc 1 2353 0
 8118 0cbe 052B     		cmp	r3, #5
 8119 0cc0 0DD0     		beq	.L504
2355:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 8120              		.loc 1 2355 0
 8121 0cc2 414B     		ldr	r3, .L580+36
 8122 0cc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8123 0cc6 1946     		mov	r1, r3
 8124 0cc8 394A     		ldr	r2, .L580+12
 8125 0cca 0B46     		mov	r3, r1
 8126 0ccc DB00     		lsls	r3, r3, #3
 8127 0cce 5B1A     		subs	r3, r3, r1
 8128 0cd0 1B01     		lsls	r3, r3, #4
 8129 0cd2 1344     		add	r3, r3, r2
 8130 0cd4 03F58773 		add	r3, r3, #270
 8131 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2354:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8132              		.loc 1 2354 0
 8133 0cda 072B     		cmp	r3, #7
 8134 0cdc 47D1     		bne	.L505
 8135              	.L504:
2356:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 8136              		.loc 1 2356 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 188


 8137 0cde 3A4B     		ldr	r3, .L580+36
 8138 0ce0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8139 0ce2 1946     		mov	r1, r3
 8140 0ce4 324A     		ldr	r2, .L580+12
 8141 0ce6 0B46     		mov	r3, r1
 8142 0ce8 DB00     		lsls	r3, r3, #3
 8143 0cea 5B1A     		subs	r3, r3, r1
 8144 0cec 1B01     		lsls	r3, r3, #4
 8145 0cee 1344     		add	r3, r3, r2
 8146 0cf0 03F20F13 		addw	r3, r3, #271
 8147 0cf4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8148 0cf6 002B     		cmp	r3, #0
 8149 0cf8 19D1     		bne	.L506
2357:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 8150              		.loc 1 2357 0
 8151 0cfa 334B     		ldr	r3, .L580+36
 8152 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8153 0cfe 1846     		mov	r0, r3
 8154 0d00 314B     		ldr	r3, .L580+36
 8155 0d02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8156 0d04 1946     		mov	r1, r3
 8157 0d06 2D4A     		ldr	r2, .L580+24
 8158 0d08 0B46     		mov	r3, r1
 8159 0d0a DB00     		lsls	r3, r3, #3
 8160 0d0c 5B1A     		subs	r3, r3, r1
 8161 0d0e 1B01     		lsls	r3, r3, #4
 8162 0d10 1344     		add	r3, r3, r2
 8163 0d12 03F58873 		add	r3, r3, #272
 8164 0d16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8165 0d18 1946     		mov	r1, r3
 8166 0d1a 2C4A     		ldr	r2, .L580+40
 8167 0d1c 3423     		movs	r3, #52
 8168 0d1e 03FB01F3 		mul	r3, r3, r1
 8169 0d22 1344     		add	r3, r3, r2
 8170 0d24 1A68     		ldr	r2, [r3]
 8171 0d26 2A49     		ldr	r1, .L580+44
 8172 0d28 0301     		lsls	r3, r0, #4
 8173 0d2a 0B44     		add	r3, r3, r1
 8174 0d2c 1A60     		str	r2, [r3]
 8175              	.L506:
2358:..\src/interruptions.c ****                         }
2359:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 8176              		.loc 1 2359 0
 8177 0d2e 264B     		ldr	r3, .L580+36
 8178 0d30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8179 0d32 1846     		mov	r0, r3
 8180 0d34 244B     		ldr	r3, .L580+36
 8181 0d36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8182 0d38 1946     		mov	r1, r3
 8183 0d3a 1D4A     		ldr	r2, .L580+12
 8184 0d3c 0B46     		mov	r3, r1
 8185 0d3e DB00     		lsls	r3, r3, #3
 8186 0d40 5B1A     		subs	r3, r3, r1
 8187 0d42 1B01     		lsls	r3, r3, #4
 8188 0d44 1344     		add	r3, r3, r2
 8189 0d46 E033     		adds	r3, r3, #224
 8190 0d48 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 189


 8191 0d4a 214A     		ldr	r2, .L580+44
 8192 0d4c 0301     		lsls	r3, r0, #4
 8193 0d4e 1344     		add	r3, r3, r2
 8194 0d50 0C33     		adds	r3, r3, #12
 8195 0d52 0A46     		mov	r2, r1
 8196 0d54 1A70     		strb	r2, [r3]
2360:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 8197              		.loc 1 2360 0
 8198 0d56 1C4B     		ldr	r3, .L580+36
 8199 0d58 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 8200 0d5a 1B4B     		ldr	r3, .L580+36
 8201 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8202 0d5e 1C4A     		ldr	r2, .L580+44
 8203 0d60 1B01     		lsls	r3, r3, #4
 8204 0d62 1344     		add	r3, r3, r2
 8205 0d64 0C33     		adds	r3, r3, #12
 8206 0d66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8207 0d68 1946     		mov	r1, r3
 8208 0d6a FFF7FEFF 		bl	enable_motor
 8209              	.L505:
2350:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8210              		.loc 1 2350 0 discriminator 2
 8211 0d6e 164B     		ldr	r3, .L580+36
 8212 0d70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8213 0d72 0133     		adds	r3, r3, #1
 8214 0d74 DAB2     		uxtb	r2, r3
 8215 0d76 144B     		ldr	r3, .L580+36
 8216 0d78 1A70     		strb	r2, [r3]
 8217              	.L503:
2350:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8218              		.loc 1 2350 0 is_stmt 0 discriminator 1
 8219 0d7a 134B     		ldr	r3, .L580+36
 8220 0d7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8221 0d7e 012B     		cmp	r3, #1
 8222 0d80 7FF667AF 		bls	.L507
2361:..\src/interruptions.c ****                     }
2362:..\src/interruptions.c ****                 }
2363:..\src/interruptions.c ****                     
2364:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8223              		.loc 1 2364 0 is_stmt 1
 8224 0d84 0020     		movs	r0, #0
 8225 0d86 FFF7FEFF 		bl	memStore
2365:..\src/interruptions.c ****                     
2366:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8226              		.loc 1 2366 0
 8227 0d8a 084B     		ldr	r3, .L580+8
 8228 0d8c 0022     		movs	r2, #0
 8229 0d8e 1A70     		strb	r2, [r3]
2367:..\src/interruptions.c ****             }
2368:..\src/interruptions.c ****             break;
 8230              		.loc 1 2368 0
 8231 0d90 20E0     		b	.L563
 8232              	.L559:
2369:..\src/interruptions.c ****         default:
2370:..\src/interruptions.c ****             break;
 8233              		.loc 1 2370 0
 8234 0d92 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 190


 8235 0d94 1FE0     		b	.L492
 8236              	.L560:
2307:..\src/interruptions.c **** 
 8237              		.loc 1 2307 0
 8238 0d96 00BF     		nop
 8239 0d98 1DE0     		b	.L492
 8240              	.L561:
2333:..\src/interruptions.c **** 
 8241              		.loc 1 2333 0
 8242 0d9a 00BF     		nop
 8243 0d9c 1BE0     		b	.L492
 8244              	.L562:
2338:..\src/interruptions.c **** 
 8245              		.loc 1 2338 0
 8246 0d9e 00BF     		nop
 8247 0da0 19E0     		b	.L492
 8248              	.L581:
 8249 0da2 00BF     		.align	2
 8250              	.L580:
 8251 0da4 7A010000 		.word	emg_counter_2.10662
 8252 0da8 00000000 		.word	interrupt_flag
 8253 0dac 00000000 		.word	emg_2_status
 8254 0db0 00000000 		.word	c_mem
 8255 0db4 00000000 		.word	ADC_buf
 8256 0db8 08000000 		.word	filt_emg+8
 8257 0dbc 00000000 		.word	g_mem
 8258 0dc0 D34D6210 		.word	274877907
 8259 0dc4 00000000 		.word	emg_1_status
 8260 0dc8 72010000 		.word	idx.10671
 8261 0dcc 00000000 		.word	g_meas
 8262 0dd0 00000000 		.word	g_ref
 8263              	.L563:
2368:..\src/interruptions.c ****         default:
 8264              		.loc 1 2368 0
 8265 0dd4 00BF     		nop
 8266              	.L492:
2371:..\src/interruptions.c ****     }
2372:..\src/interruptions.c ****         
2373:..\src/interruptions.c ****     if (interrupt_flag){
 8267              		.loc 1 2373 0
 8268 0dd6 A74B     		ldr	r3, .L582
 8269 0dd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8270 0dda 002B     		cmp	r3, #0
 8271 0ddc 04D0     		beq	.L508
2374:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8272              		.loc 1 2374 0
 8273 0dde A54B     		ldr	r3, .L582
 8274 0de0 0022     		movs	r2, #0
 8275 0de2 1A70     		strb	r2, [r3]
2375:..\src/interruptions.c ****         interrupt_manager();
 8276              		.loc 1 2375 0
 8277 0de4 FFF7FEFF 		bl	interrupt_manager
 8278              	.L508:
2376:..\src/interruptions.c ****     }
2377:..\src/interruptions.c ****     
2378:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8279              		.loc 1 2378 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 191


 8280 0de8 A34B     		ldr	r3, .L582+4
 8281 0dea 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8282 0dee 062B     		cmp	r3, #6
 8283 0df0 05D0     		beq	.L509
 8284              		.loc 1 2378 0 is_stmt 0 discriminator 1
 8285 0df2 A14B     		ldr	r3, .L582+4
 8286 0df4 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8287 0df8 062B     		cmp	r3, #6
 8288 0dfa 40F0C481 		bne	.L510
 8289              	.L509:
2379:..\src/interruptions.c ****         // Read joystick
2380:..\src/interruptions.c ****         
2381:..\src/interruptions.c ****         switch (joy_UD_status) {
 8290              		.loc 1 2381 0 is_stmt 1
 8291 0dfe 9F4B     		ldr	r3, .L582+8
 8292 0e00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8293 0e02 052B     		cmp	r3, #5
 8294 0e04 00F2CB80 		bhi	.L511
 8295 0e08 01A2     		adr	r2, .L513
 8296 0e0a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8297 0e0e 00BF     		.p2align 2
 8298              	.L513:
 8299 0e10 290E0000 		.word	.L512+1
 8300 0e14 C50E0000 		.word	.L514+1
 8301 0e18 D90E0000 		.word	.L515+1
 8302 0e1c 0D0F0000 		.word	.L516+1
 8303 0e20 790F0000 		.word	.L517+1
 8304 0e24 790F0000 		.word	.L517+1
 8305              		.p2align 1
 8306              	.L512:
2382:..\src/interruptions.c ****             case NORMAL:
2383:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8307              		.loc 1 2383 0
 8308 0e28 954B     		ldr	r3, .L582+12
 8309 0e2a B3F90430 		ldrsh	r3, [r3, #4]
 8310 0e2e 7B60     		str	r3, [r7, #4]
2384:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2385:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8311              		.loc 1 2385 0
 8312 0e30 944B     		ldr	r3, .L582+16
 8313 0e32 1B68     		ldr	r3, [r3]
 8314 0e34 7A68     		ldr	r2, [r7, #4]
 8315 0e36 D31A     		subs	r3, r2, r3
 8316 0e38 1846     		mov	r0, r3
 8317 0e3a FFF7FEFF 		bl	__aeabi_i2f
 8318 0e3e 0446     		mov	r4, r0
 8319 0e40 904B     		ldr	r3, .L582+16
 8320 0e42 1B68     		ldr	r3, [r3]
 8321 0e44 1846     		mov	r0, r3
 8322 0e46 FFF7FEFF 		bl	__aeabi_i2f
 8323 0e4a 0346     		mov	r3, r0
 8324 0e4c 1946     		mov	r1, r3
 8325 0e4e 2046     		mov	r0, r4
 8326 0e50 FFF7FEFF 		bl	__aeabi_fdiv
 8327 0e54 0346     		mov	r3, r0
 8328 0e56 1C46     		mov	r4, r3
 8329 0e58 874B     		ldr	r3, .L582+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 192


 8330 0e5a B3F8B632 		ldrh	r3, [r3, #694]
 8331 0e5e 1846     		mov	r0, r3
 8332 0e60 FFF7FEFF 		bl	__aeabi_i2f
 8333 0e64 0346     		mov	r3, r0
 8334 0e66 1946     		mov	r1, r3
 8335 0e68 2046     		mov	r0, r4
 8336 0e6a FFF7FEFF 		bl	__aeabi_fmul
 8337 0e6e 0346     		mov	r3, r0
 8338 0e70 1846     		mov	r0, r3
 8339 0e72 FFF7FEFF 		bl	__aeabi_f2iz
 8340 0e76 0346     		mov	r3, r0
 8341 0e78 7B60     		str	r3, [r7, #4]
2386:..\src/interruptions.c ****                 
2387:..\src/interruptions.c ****                 if (interrupt_flag){
 8342              		.loc 1 2387 0
 8343 0e7a 7E4B     		ldr	r3, .L582
 8344 0e7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8345 0e7e 002B     		cmp	r3, #0
 8346 0e80 04D0     		beq	.L518
2388:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8347              		.loc 1 2388 0
 8348 0e82 7C4B     		ldr	r3, .L582
 8349 0e84 0022     		movs	r2, #0
 8350 0e86 1A70     		strb	r2, [r3]
2389:..\src/interruptions.c ****                     interrupt_manager();
 8351              		.loc 1 2389 0
 8352 0e88 FFF7FEFF 		bl	interrupt_manager
 8353              	.L518:
2390:..\src/interruptions.c ****                 }
2391:..\src/interruptions.c **** 
2392:..\src/interruptions.c ****                 //Saturation
2393:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8354              		.loc 1 2393 0
 8355 0e8c 7B68     		ldr	r3, [r7, #4]
 8356 0e8e 13F5806F 		cmn	r3, #1024
 8357 0e92 01DA     		bge	.L519
2394:..\src/interruptions.c ****                     i_aux = -1024;
 8358              		.loc 1 2394 0
 8359 0e94 7C4B     		ldr	r3, .L582+20
 8360 0e96 7B60     		str	r3, [r7, #4]
 8361              	.L519:
2395:..\src/interruptions.c ****                 if (i_aux > 1024)
 8362              		.loc 1 2395 0
 8363 0e98 7B68     		ldr	r3, [r7, #4]
 8364 0e9a B3F5806F 		cmp	r3, #1024
 8365 0e9e 02DD     		ble	.L520
2396:..\src/interruptions.c ****                     i_aux = 1024;
 8366              		.loc 1 2396 0
 8367 0ea0 4FF48063 		mov	r3, #1024
 8368 0ea4 7B60     		str	r3, [r7, #4]
 8369              	.L520:
2397:..\src/interruptions.c **** 
2398:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8370              		.loc 1 2398 0
 8371 0ea6 7B68     		ldr	r3, [r7, #4]
 8372 0ea8 1BB2     		sxth	r3, r3
 8373 0eaa 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 193


 8374 0eac 774B     		ldr	r3, .L582+24
 8375 0eae 5A62     		str	r2, [r3, #36]
2399:..\src/interruptions.c **** 
2400:..\src/interruptions.c ****                 if (interrupt_flag){
 8376              		.loc 1 2400 0
 8377 0eb0 704B     		ldr	r3, .L582
 8378 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8379 0eb4 002B     		cmp	r3, #0
 8380 0eb6 6BD0     		beq	.L564
2401:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8381              		.loc 1 2401 0
 8382 0eb8 6E4B     		ldr	r3, .L582
 8383 0eba 0022     		movs	r2, #0
 8384 0ebc 1A70     		strb	r2, [r3]
2402:..\src/interruptions.c ****                     interrupt_manager();
 8385              		.loc 1 2402 0
 8386 0ebe FFF7FEFF 		bl	interrupt_manager
2403:..\src/interruptions.c ****                 }
2404:..\src/interruptions.c **** 
2405:..\src/interruptions.c ****             break;
 8387              		.loc 1 2405 0
 8388 0ec2 65E0     		b	.L564
 8389              	.L514:
2406:..\src/interruptions.c **** 
2407:..\src/interruptions.c ****             case RESET: // reset variables
2408:..\src/interruptions.c ****                 UD_counter = 0;
 8390              		.loc 1 2408 0
 8391 0ec4 724B     		ldr	r3, .L582+28
 8392 0ec6 0022     		movs	r2, #0
 8393 0ec8 1A80     		strh	r2, [r3]	@ movhi
2409:..\src/interruptions.c ****                 UD_mean_value = 0;
 8394              		.loc 1 2409 0
 8395 0eca 6E4B     		ldr	r3, .L582+16
 8396 0ecc 0022     		movs	r2, #0
 8397 0ece 1A60     		str	r2, [r3]
2410:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8398              		.loc 1 2410 0
 8399 0ed0 6A4B     		ldr	r3, .L582+8
 8400 0ed2 0422     		movs	r2, #4
 8401 0ed4 1A70     		strb	r2, [r3]
2411:..\src/interruptions.c **** 
2412:..\src/interruptions.c ****             break;
 8402              		.loc 1 2412 0
 8403 0ed6 62E0     		b	.L511
 8404              	.L515:
2413:..\src/interruptions.c **** 
2414:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2415:..\src/interruptions.c ****                 UD_counter++;
 8405              		.loc 1 2415 0
 8406 0ed8 6D4B     		ldr	r3, .L582+28
 8407 0eda 1B88     		ldrh	r3, [r3]
 8408 0edc 0133     		adds	r3, r3, #1
 8409 0ede 9AB2     		uxth	r2, r3
 8410 0ee0 6B4B     		ldr	r3, .L582+28
 8411 0ee2 1A80     		strh	r2, [r3]	@ movhi
2416:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8412              		.loc 1 2416 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 194


 8413 0ee4 6A4B     		ldr	r3, .L582+28
 8414 0ee6 1B88     		ldrh	r3, [r3]
 8415 0ee8 642B     		cmp	r3, #100
 8416 0eea 53D1     		bne	.L565
2417:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8417              		.loc 1 2417 0
 8418 0eec 684B     		ldr	r3, .L582+28
 8419 0eee 0022     		movs	r2, #0
 8420 0ef0 1A80     		strh	r2, [r3]	@ movhi
2418:..\src/interruptions.c **** 
2419:..\src/interruptions.c ****                     if (interrupt_flag){
 8421              		.loc 1 2419 0
 8422 0ef2 604B     		ldr	r3, .L582
 8423 0ef4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8424 0ef6 002B     		cmp	r3, #0
 8425 0ef8 04D0     		beq	.L523
2420:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8426              		.loc 1 2420 0
 8427 0efa 5E4B     		ldr	r3, .L582
 8428 0efc 0022     		movs	r2, #0
 8429 0efe 1A70     		strb	r2, [r3]
2421:..\src/interruptions.c ****                         interrupt_manager();
 8430              		.loc 1 2421 0
 8431 0f00 FFF7FEFF 		bl	interrupt_manager
 8432              	.L523:
2422:..\src/interruptions.c ****                     }
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8433              		.loc 1 2424 0
 8434 0f04 5D4B     		ldr	r3, .L582+8
 8435 0f06 0322     		movs	r2, #3
 8436 0f08 1A70     		strb	r2, [r3]
2425:..\src/interruptions.c ****                 }
2426:..\src/interruptions.c **** 
2427:..\src/interruptions.c ****             break;
 8437              		.loc 1 2427 0
 8438 0f0a 43E0     		b	.L565
 8439              	.L516:
2428:..\src/interruptions.c **** 
2429:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2430:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2431:..\src/interruptions.c ****                 UD_counter++;
 8440              		.loc 1 2431 0
 8441 0f0c 604B     		ldr	r3, .L582+28
 8442 0f0e 1B88     		ldrh	r3, [r3]
 8443 0f10 0133     		adds	r3, r3, #1
 8444 0f12 9AB2     		uxth	r2, r3
 8445 0f14 5E4B     		ldr	r3, .L582+28
 8446 0f16 1A80     		strh	r2, [r3]	@ movhi
2432:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8447              		.loc 1 2432 0
 8448 0f18 594B     		ldr	r3, .L582+12
 8449 0f1a B3F90430 		ldrsh	r3, [r3, #4]
 8450 0f1e 1A46     		mov	r2, r3
 8451 0f20 584B     		ldr	r3, .L582+16
 8452 0f22 1B68     		ldr	r3, [r3]
 8453 0f24 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 195


 8454 0f26 574A     		ldr	r2, .L582+16
 8455 0f28 1360     		str	r3, [r2]
2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****                 if (interrupt_flag){
 8456              		.loc 1 2434 0
 8457 0f2a 524B     		ldr	r3, .L582
 8458 0f2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8459 0f2e 002B     		cmp	r3, #0
 8460 0f30 04D0     		beq	.L524
2435:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8461              		.loc 1 2435 0
 8462 0f32 504B     		ldr	r3, .L582
 8463 0f34 0022     		movs	r2, #0
 8464 0f36 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****                     interrupt_manager();
 8465              		.loc 1 2436 0
 8466 0f38 FFF7FEFF 		bl	interrupt_manager
 8467              	.L524:
2437:..\src/interruptions.c ****                 }
2438:..\src/interruptions.c **** 
2439:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8468              		.loc 1 2439 0
 8469 0f3c 544B     		ldr	r3, .L582+28
 8470 0f3e 1B88     		ldrh	r3, [r3]
 8471 0f40 C82B     		cmp	r3, #200
 8472 0f42 29D1     		bne	.L566
2440:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8473              		.loc 1 2440 0
 8474 0f44 4F4B     		ldr	r3, .L582+16
 8475 0f46 1B68     		ldr	r3, [r3]
 8476 0f48 524A     		ldr	r2, .L582+32
 8477 0f4a 82FB0312 		smull	r1, r2, r2, r3
 8478 0f4e 9211     		asrs	r2, r2, #6
 8479 0f50 DB17     		asrs	r3, r3, #31
 8480 0f52 D31A     		subs	r3, r2, r3
 8481 0f54 4B4A     		ldr	r2, .L582+16
 8482 0f56 1360     		str	r3, [r2]
2441:..\src/interruptions.c **** 
2442:..\src/interruptions.c ****                     if (interrupt_flag){
 8483              		.loc 1 2442 0
 8484 0f58 464B     		ldr	r3, .L582
 8485 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8486 0f5c 002B     		cmp	r3, #0
 8487 0f5e 04D0     		beq	.L526
2443:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8488              		.loc 1 2443 0
 8489 0f60 444B     		ldr	r3, .L582
 8490 0f62 0022     		movs	r2, #0
 8491 0f64 1A70     		strb	r2, [r3]
2444:..\src/interruptions.c ****                         interrupt_manager();
 8492              		.loc 1 2444 0
 8493 0f66 FFF7FEFF 		bl	interrupt_manager
 8494              	.L526:
2445:..\src/interruptions.c ****                     }
2446:..\src/interruptions.c **** 
2447:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8495              		.loc 1 2447 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 196


 8496 0f6a 494B     		ldr	r3, .L582+28
 8497 0f6c 0022     		movs	r2, #0
 8498 0f6e 1A80     		strh	r2, [r3]	@ movhi
2448:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8499              		.loc 1 2448 0
 8500 0f70 424B     		ldr	r3, .L582+8
 8501 0f72 0022     		movs	r2, #0
 8502 0f74 1A70     		strb	r2, [r3]
2449:..\src/interruptions.c ****                 }
2450:..\src/interruptions.c ****             break;
 8503              		.loc 1 2450 0
 8504 0f76 0FE0     		b	.L566
 8505              	.L517:
2451:..\src/interruptions.c **** 
2452:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2453:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8506              		.loc 1 2453 0
 8507 0f78 474B     		ldr	r3, .L582+36
 8508 0f7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8509 0f7c 002B     		cmp	r3, #0
 8510 0f7e 0DD1     		bne	.L567
 8511              		.loc 1 2453 0 is_stmt 0 discriminator 1
 8512 0f80 464B     		ldr	r3, .L582+40
 8513 0f82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8514 0f84 002B     		cmp	r3, #0
 8515 0f86 09D1     		bne	.L567
2454:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8516              		.loc 1 2454 0 is_stmt 1
 8517 0f88 3C4B     		ldr	r3, .L582+8
 8518 0f8a 0222     		movs	r2, #2
 8519 0f8c 1A70     		strb	r2, [r3]
2455:..\src/interruptions.c ****             break;
 8520              		.loc 1 2455 0
 8521 0f8e 05E0     		b	.L567
 8522              	.L564:
2405:..\src/interruptions.c **** 
 8523              		.loc 1 2405 0
 8524 0f90 00BF     		nop
 8525 0f92 04E0     		b	.L511
 8526              	.L565:
2427:..\src/interruptions.c **** 
 8527              		.loc 1 2427 0
 8528 0f94 00BF     		nop
 8529 0f96 02E0     		b	.L511
 8530              	.L566:
2450:..\src/interruptions.c **** 
 8531              		.loc 1 2450 0
 8532 0f98 00BF     		nop
 8533 0f9a 00E0     		b	.L511
 8534              	.L567:
 8535              		.loc 1 2455 0
 8536 0f9c 00BF     		nop
 8537              	.L511:
2456:..\src/interruptions.c ****         }
2457:..\src/interruptions.c **** 
2458:..\src/interruptions.c ****         if (interrupt_flag){
 8538              		.loc 1 2458 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 197


 8539 0f9e 354B     		ldr	r3, .L582
 8540 0fa0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8541 0fa2 002B     		cmp	r3, #0
 8542 0fa4 04D0     		beq	.L528
2459:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8543              		.loc 1 2459 0
 8544 0fa6 334B     		ldr	r3, .L582
 8545 0fa8 0022     		movs	r2, #0
 8546 0faa 1A70     		strb	r2, [r3]
2460:..\src/interruptions.c ****             interrupt_manager();
 8547              		.loc 1 2460 0
 8548 0fac FFF7FEFF 		bl	interrupt_manager
 8549              	.L528:
2461:..\src/interruptions.c ****         }
2462:..\src/interruptions.c ****             
2463:..\src/interruptions.c ****         switch (joy_LR_status) {
 8550              		.loc 1 2463 0
 8551 0fb0 3B4B     		ldr	r3, .L582+44
 8552 0fb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8553 0fb4 052B     		cmp	r3, #5
 8554 0fb6 00F2DD80 		bhi	.L529
 8555 0fba 01A2     		adr	r2, .L531
 8556 0fbc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8557              		.p2align 2
 8558              	.L531:
 8559 0fc0 D90F0000 		.word	.L530+1
 8560 0fc4 A9100000 		.word	.L532+1
 8561 0fc8 BD100000 		.word	.L533+1
 8562 0fcc F1100000 		.word	.L534+1
 8563 0fd0 4B110000 		.word	.L535+1
 8564 0fd4 4B110000 		.word	.L535+1
 8565              		.p2align 1
 8566              	.L530:
2464:..\src/interruptions.c ****             case NORMAL:
2465:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8567              		.loc 1 2465 0
 8568 0fd8 294B     		ldr	r3, .L582+12
 8569 0fda B3F90630 		ldrsh	r3, [r3, #6]
 8570 0fde 7B60     		str	r3, [r7, #4]
2466:..\src/interruptions.c **** 
2467:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8571              		.loc 1 2467 0
 8572 0fe0 304B     		ldr	r3, .L582+48
 8573 0fe2 1B68     		ldr	r3, [r3]
 8574 0fe4 7A68     		ldr	r2, [r7, #4]
 8575 0fe6 D31A     		subs	r3, r2, r3
 8576 0fe8 1846     		mov	r0, r3
 8577 0fea FFF7FEFF 		bl	__aeabi_i2f
 8578 0fee 0446     		mov	r4, r0
 8579 0ff0 2C4B     		ldr	r3, .L582+48
 8580 0ff2 1B68     		ldr	r3, [r3]
 8581 0ff4 1846     		mov	r0, r3
 8582 0ff6 FFF7FEFF 		bl	__aeabi_i2f
 8583 0ffa 0346     		mov	r3, r0
 8584 0ffc 1946     		mov	r1, r3
 8585 0ffe 2046     		mov	r0, r4
 8586 1000 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 198


 8587 1004 0346     		mov	r3, r0
 8588 1006 1C46     		mov	r4, r3
 8589 1008 1B4B     		ldr	r3, .L582+4
 8590 100a B3F8B432 		ldrh	r3, [r3, #692]
 8591 100e 1846     		mov	r0, r3
 8592 1010 FFF7FEFF 		bl	__aeabi_i2f
 8593 1014 0346     		mov	r3, r0
 8594 1016 1946     		mov	r1, r3
 8595 1018 2046     		mov	r0, r4
 8596 101a FFF7FEFF 		bl	__aeabi_fmul
 8597 101e 0346     		mov	r3, r0
 8598 1020 1846     		mov	r0, r3
 8599 1022 FFF7FEFF 		bl	__aeabi_f2iz
 8600 1026 0346     		mov	r3, r0
 8601 1028 7B60     		str	r3, [r7, #4]
2468:..\src/interruptions.c ****                 
2469:..\src/interruptions.c ****                 if (interrupt_flag){
 8602              		.loc 1 2469 0
 8603 102a 124B     		ldr	r3, .L582
 8604 102c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8605 102e 002B     		cmp	r3, #0
 8606 1030 04D0     		beq	.L536
2470:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8607              		.loc 1 2470 0
 8608 1032 104B     		ldr	r3, .L582
 8609 1034 0022     		movs	r2, #0
 8610 1036 1A70     		strb	r2, [r3]
2471:..\src/interruptions.c ****                     interrupt_manager();
 8611              		.loc 1 2471 0
 8612 1038 FFF7FEFF 		bl	interrupt_manager
 8613              	.L536:
2472:..\src/interruptions.c ****                 }
2473:..\src/interruptions.c **** 
2474:..\src/interruptions.c ****                 //Saturation
2475:..\src/interruptions.c ****                 if (i_aux < -1024)
 8614              		.loc 1 2475 0
 8615 103c 7B68     		ldr	r3, [r7, #4]
 8616 103e 13F5806F 		cmn	r3, #1024
 8617 1042 01DA     		bge	.L537
2476:..\src/interruptions.c ****                     i_aux = -1024;
 8618              		.loc 1 2476 0
 8619 1044 104B     		ldr	r3, .L582+20
 8620 1046 7B60     		str	r3, [r7, #4]
 8621              	.L537:
2477:..\src/interruptions.c ****                 if (i_aux > 1024)
 8622              		.loc 1 2477 0
 8623 1048 7B68     		ldr	r3, [r7, #4]
 8624 104a B3F5806F 		cmp	r3, #1024
 8625 104e 02DD     		ble	.L538
2478:..\src/interruptions.c ****                     i_aux = 1024;
 8626              		.loc 1 2478 0
 8627 1050 4FF48063 		mov	r3, #1024
 8628 1054 7B60     		str	r3, [r7, #4]
 8629              	.L538:
2479:..\src/interruptions.c **** 
2480:..\src/interruptions.c ****                 if (interrupt_flag){
 8630              		.loc 1 2480 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 199


 8631 1056 074B     		ldr	r3, .L582
 8632 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8633 105a 002B     		cmp	r3, #0
 8634 105c 04D0     		beq	.L539
2481:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8635              		.loc 1 2481 0
 8636 105e 054B     		ldr	r3, .L582
 8637 1060 0022     		movs	r2, #0
 8638 1062 1A70     		strb	r2, [r3]
2482:..\src/interruptions.c ****                     interrupt_manager();
 8639              		.loc 1 2482 0
 8640 1064 FFF7FEFF 		bl	interrupt_manager
 8641              	.L539:
2483:..\src/interruptions.c ****                 }
2484:..\src/interruptions.c **** 
2485:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8642              		.loc 1 2485 0
 8643 1068 7B68     		ldr	r3, [r7, #4]
 8644 106a 1BB2     		sxth	r3, r3
 8645 106c 1A46     		mov	r2, r3
 8646 106e 074B     		ldr	r3, .L582+24
 8647 1070 1A62     		str	r2, [r3, #32]
2486:..\src/interruptions.c **** 
2487:..\src/interruptions.c ****             break;
 8648              		.loc 1 2487 0
 8649 1072 7FE0     		b	.L529
 8650              	.L583:
 8651              		.align	2
 8652              	.L582:
 8653 1074 00000000 		.word	interrupt_flag
 8654 1078 00000000 		.word	c_mem
 8655 107c 00000000 		.word	joy_UD_status
 8656 1080 00000000 		.word	ADC_buf
 8657 1084 7C010000 		.word	UD_mean_value.10665
 8658 1088 00FCFFFF 		.word	-1024
 8659 108c 00000000 		.word	g_adc_meas
 8660 1090 80010000 		.word	UD_counter.10663
 8661 1094 1F85EB51 		.word	1374389535
 8662 1098 00000000 		.word	emg_1_status
 8663 109c 00000000 		.word	emg_2_status
 8664 10a0 00000000 		.word	joy_LR_status
 8665 10a4 84010000 		.word	LR_mean_value.10666
 8666              	.L532:
2488:..\src/interruptions.c **** 
2489:..\src/interruptions.c ****             case RESET: // reset variables
2490:..\src/interruptions.c ****                 LR_counter = 0;
 8667              		.loc 1 2490 0
 8668 10a8 644B     		ldr	r3, .L584
 8669 10aa 0022     		movs	r2, #0
 8670 10ac 1A80     		strh	r2, [r3]	@ movhi
2491:..\src/interruptions.c ****                 LR_mean_value = 0;
 8671              		.loc 1 2491 0
 8672 10ae 644B     		ldr	r3, .L584+4
 8673 10b0 0022     		movs	r2, #0
 8674 10b2 1A60     		str	r2, [r3]
2492:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8675              		.loc 1 2492 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 200


 8676 10b4 634B     		ldr	r3, .L584+8
 8677 10b6 0422     		movs	r2, #4
 8678 10b8 1A70     		strb	r2, [r3]
2493:..\src/interruptions.c ****             break;
 8679              		.loc 1 2493 0
 8680 10ba 5BE0     		b	.L529
 8681              	.L533:
2494:..\src/interruptions.c **** 
2495:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2496:..\src/interruptions.c ****                 LR_counter++;
 8682              		.loc 1 2496 0
 8683 10bc 5F4B     		ldr	r3, .L584
 8684 10be 1B88     		ldrh	r3, [r3]
 8685 10c0 0133     		adds	r3, r3, #1
 8686 10c2 9AB2     		uxth	r2, r3
 8687 10c4 5D4B     		ldr	r3, .L584
 8688 10c6 1A80     		strh	r2, [r3]	@ movhi
2497:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8689              		.loc 1 2497 0
 8690 10c8 5C4B     		ldr	r3, .L584
 8691 10ca 1B88     		ldrh	r3, [r3]
 8692 10cc 642B     		cmp	r3, #100
 8693 10ce 4CD1     		bne	.L568
2498:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8694              		.loc 1 2498 0
 8695 10d0 5A4B     		ldr	r3, .L584
 8696 10d2 0022     		movs	r2, #0
 8697 10d4 1A80     		strh	r2, [r3]	@ movhi
2499:..\src/interruptions.c **** 
2500:..\src/interruptions.c ****                     if (interrupt_flag){
 8698              		.loc 1 2500 0
 8699 10d6 5C4B     		ldr	r3, .L584+12
 8700 10d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8701 10da 002B     		cmp	r3, #0
 8702 10dc 04D0     		beq	.L541
2501:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8703              		.loc 1 2501 0
 8704 10de 5A4B     		ldr	r3, .L584+12
 8705 10e0 0022     		movs	r2, #0
 8706 10e2 1A70     		strb	r2, [r3]
2502:..\src/interruptions.c ****                         interrupt_manager();
 8707              		.loc 1 2502 0
 8708 10e4 FFF7FEFF 		bl	interrupt_manager
 8709              	.L541:
2503:..\src/interruptions.c ****                     }
2504:..\src/interruptions.c **** 
2505:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8710              		.loc 1 2505 0
 8711 10e8 564B     		ldr	r3, .L584+8
 8712 10ea 0322     		movs	r2, #3
 8713 10ec 1A70     		strb	r2, [r3]
2506:..\src/interruptions.c ****                 }
2507:..\src/interruptions.c ****             break;
 8714              		.loc 1 2507 0
 8715 10ee 3CE0     		b	.L568
 8716              	.L534:
2508:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 201


2509:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2510:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2511:..\src/interruptions.c ****                 LR_counter++;
 8717              		.loc 1 2511 0
 8718 10f0 524B     		ldr	r3, .L584
 8719 10f2 1B88     		ldrh	r3, [r3]
 8720 10f4 0133     		adds	r3, r3, #1
 8721 10f6 9AB2     		uxth	r2, r3
 8722 10f8 504B     		ldr	r3, .L584
 8723 10fa 1A80     		strh	r2, [r3]	@ movhi
2512:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8724              		.loc 1 2512 0
 8725 10fc 534B     		ldr	r3, .L584+16
 8726 10fe B3F90630 		ldrsh	r3, [r3, #6]
 8727 1102 1A46     		mov	r2, r3
 8728 1104 4E4B     		ldr	r3, .L584+4
 8729 1106 1B68     		ldr	r3, [r3]
 8730 1108 1344     		add	r3, r3, r2
 8731 110a 4D4A     		ldr	r2, .L584+4
 8732 110c 1360     		str	r3, [r2]
2513:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8733              		.loc 1 2513 0
 8734 110e 4B4B     		ldr	r3, .L584
 8735 1110 1B88     		ldrh	r3, [r3]
 8736 1112 C82B     		cmp	r3, #200
 8737 1114 2BD1     		bne	.L569
2514:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8738              		.loc 1 2514 0
 8739 1116 4A4B     		ldr	r3, .L584+4
 8740 1118 1B68     		ldr	r3, [r3]
 8741 111a 4D4A     		ldr	r2, .L584+20
 8742 111c 82FB0312 		smull	r1, r2, r2, r3
 8743 1120 9211     		asrs	r2, r2, #6
 8744 1122 DB17     		asrs	r3, r3, #31
 8745 1124 D31A     		subs	r3, r2, r3
 8746 1126 464A     		ldr	r2, .L584+4
 8747 1128 1360     		str	r3, [r2]
2515:..\src/interruptions.c ****                     
2516:..\src/interruptions.c ****                     if (interrupt_flag){
 8748              		.loc 1 2516 0
 8749 112a 474B     		ldr	r3, .L584+12
 8750 112c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8751 112e 002B     		cmp	r3, #0
 8752 1130 04D0     		beq	.L543
2517:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8753              		.loc 1 2517 0
 8754 1132 454B     		ldr	r3, .L584+12
 8755 1134 0022     		movs	r2, #0
 8756 1136 1A70     		strb	r2, [r3]
2518:..\src/interruptions.c ****                         interrupt_manager();
 8757              		.loc 1 2518 0
 8758 1138 FFF7FEFF 		bl	interrupt_manager
 8759              	.L543:
2519:..\src/interruptions.c ****                     }
2520:..\src/interruptions.c **** 
2521:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8760              		.loc 1 2521 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 202


 8761 113c 3F4B     		ldr	r3, .L584
 8762 113e 0022     		movs	r2, #0
 8763 1140 1A80     		strh	r2, [r3]	@ movhi
2522:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8764              		.loc 1 2522 0
 8765 1142 404B     		ldr	r3, .L584+8
 8766 1144 0022     		movs	r2, #0
 8767 1146 1A70     		strb	r2, [r3]
2523:..\src/interruptions.c ****                 }
2524:..\src/interruptions.c ****             break;
 8768              		.loc 1 2524 0
 8769 1148 11E0     		b	.L569
 8770              	.L535:
2525:..\src/interruptions.c **** 
2526:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2527:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8771              		.loc 1 2527 0
 8772 114a 424B     		ldr	r3, .L584+24
 8773 114c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8774 114e 002B     		cmp	r3, #0
 8775 1150 0FD1     		bne	.L570
 8776              		.loc 1 2527 0 is_stmt 0 discriminator 1
 8777 1152 414B     		ldr	r3, .L584+28
 8778 1154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8779 1156 002B     		cmp	r3, #0
 8780 1158 0BD1     		bne	.L570
 8781              		.loc 1 2527 0 discriminator 2
 8782 115a 404B     		ldr	r3, .L584+32
 8783 115c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8784 115e 002B     		cmp	r3, #0
 8785 1160 07D1     		bne	.L570
2528:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8786              		.loc 1 2528 0 is_stmt 1
 8787 1162 384B     		ldr	r3, .L584+8
 8788 1164 0222     		movs	r2, #2
 8789 1166 1A70     		strb	r2, [r3]
2529:..\src/interruptions.c ****             break;
 8790              		.loc 1 2529 0
 8791 1168 03E0     		b	.L570
 8792              	.L568:
2507:..\src/interruptions.c **** 
 8793              		.loc 1 2507 0
 8794 116a 00BF     		nop
 8795 116c 02E0     		b	.L529
 8796              	.L569:
2524:..\src/interruptions.c **** 
 8797              		.loc 1 2524 0
 8798 116e 00BF     		nop
 8799 1170 00E0     		b	.L529
 8800              	.L570:
 8801              		.loc 1 2529 0
 8802 1172 00BF     		nop
 8803              	.L529:
2530:..\src/interruptions.c ****         }
2531:..\src/interruptions.c ****        
2532:..\src/interruptions.c ****         if (interrupt_flag){
 8804              		.loc 1 2532 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 203


 8805 1174 344B     		ldr	r3, .L584+12
 8806 1176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8807 1178 002B     		cmp	r3, #0
 8808 117a 04D0     		beq	.L510
2533:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8809              		.loc 1 2533 0
 8810 117c 324B     		ldr	r3, .L584+12
 8811 117e 0022     		movs	r2, #0
 8812 1180 1A70     		strb	r2, [r3]
2534:..\src/interruptions.c ****             interrupt_manager();
 8813              		.loc 1 2534 0
 8814 1182 FFF7FEFF 		bl	interrupt_manager
 8815              	.L510:
2535:..\src/interruptions.c ****         }
2536:..\src/interruptions.c ****     }
2537:..\src/interruptions.c ****     
2538:..\src/interruptions.c ****     // Read also EMG additional sensors port
2539:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8816              		.loc 1 2539 0
 8817 1186 364B     		ldr	r3, .L584+36
 8818 1188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8819 118a 062B     		cmp	r3, #6
 8820 118c 52D9     		bls	.L571
2540:..\src/interruptions.c ****         
2541:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8821              		.loc 1 2541 0
 8822 118e 354B     		ldr	r3, .L584+40
 8823 1190 0022     		movs	r2, #0
 8824 1192 1A70     		strb	r2, [r3]
 8825 1194 4AE0     		b	.L546
 8826              	.L553:
2542:..\src/interruptions.c ****             
2543:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8827              		.loc 1 2543 0
 8828 1196 334B     		ldr	r3, .L584+40
 8829 1198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8830 119a 0633     		adds	r3, r3, #6
 8831 119c 2B4A     		ldr	r2, .L584+16
 8832 119e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8833 11a2 7B60     		str	r3, [r7, #4]
2544:..\src/interruptions.c ****             if (i_aux < 0) 
 8834              		.loc 1 2544 0
 8835 11a4 7B68     		ldr	r3, [r7, #4]
 8836 11a6 002B     		cmp	r3, #0
 8837 11a8 01DA     		bge	.L547
2545:..\src/interruptions.c ****                 i_aux = 0;
 8838              		.loc 1 2545 0
 8839 11aa 0023     		movs	r3, #0
 8840 11ac 7B60     		str	r3, [r7, #4]
 8841              	.L547:
2546:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8842              		.loc 1 2546 0
 8843 11ae 2D4B     		ldr	r3, .L584+40
 8844 11b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8845 11b2 0233     		adds	r3, r3, #2
 8846 11b4 DB00     		lsls	r3, r3, #3
 8847 11b6 2C4A     		ldr	r2, .L584+44
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 204


 8848 11b8 1344     		add	r3, r3, r2
 8849 11ba 1946     		mov	r1, r3
 8850 11bc 7868     		ldr	r0, [r7, #4]
 8851 11be FFF7FEFF 		bl	filter
 8852 11c2 7860     		str	r0, [r7, #4]
2547:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8853              		.loc 1 2547 0
 8854 11c4 7B68     		ldr	r3, [r7, #4]
 8855 11c6 9B02     		lsls	r3, r3, #10
 8856 11c8 002B     		cmp	r3, #0
 8857 11ca 01DA     		bge	.L548
 8858 11cc 03F2FF33 		addw	r3, r3, #1023
 8859              	.L548:
 8860 11d0 9B12     		asrs	r3, r3, #10
 8861 11d2 7B60     		str	r3, [r7, #4]
2548:..\src/interruptions.c **** 
2549:..\src/interruptions.c ****             if (interrupt_flag){
 8862              		.loc 1 2549 0
 8863 11d4 1C4B     		ldr	r3, .L584+12
 8864 11d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8865 11d8 002B     		cmp	r3, #0
 8866 11da 04D0     		beq	.L549
2550:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8867              		.loc 1 2550 0
 8868 11dc 1A4B     		ldr	r3, .L584+12
 8869 11de 0022     		movs	r2, #0
 8870 11e0 1A70     		strb	r2, [r3]
2551:..\src/interruptions.c ****                 interrupt_manager();
 8871              		.loc 1 2551 0
 8872 11e2 FFF7FEFF 		bl	interrupt_manager
 8873              	.L549:
2552:..\src/interruptions.c ****             }
2553:..\src/interruptions.c ****             //Saturation
2554:..\src/interruptions.c ****             if (i_aux < 0)
 8874              		.loc 1 2554 0
 8875 11e6 7B68     		ldr	r3, [r7, #4]
 8876 11e8 002B     		cmp	r3, #0
 8877 11ea 02DA     		bge	.L550
2555:..\src/interruptions.c ****                 i_aux = 0;
 8878              		.loc 1 2555 0
 8879 11ec 0023     		movs	r3, #0
 8880 11ee 7B60     		str	r3, [r7, #4]
 8881 11f0 06E0     		b	.L551
 8882              	.L550:
2556:..\src/interruptions.c ****             else 
2557:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8883              		.loc 1 2557 0
 8884 11f2 7B68     		ldr	r3, [r7, #4]
 8885 11f4 B3F5806F 		cmp	r3, #1024
 8886 11f8 02DD     		ble	.L551
2558:..\src/interruptions.c ****                     i_aux = 1024;
 8887              		.loc 1 2558 0
 8888 11fa 4FF48063 		mov	r3, #1024
 8889 11fe 7B60     		str	r3, [r7, #4]
 8890              	.L551:
2559:..\src/interruptions.c ****             
2560:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 205


 8891              		.loc 1 2560 0
 8892 1200 184B     		ldr	r3, .L584+40
 8893 1202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8894 1204 1949     		ldr	r1, .L584+48
 8895 1206 0233     		adds	r3, r3, #2
 8896 1208 7A68     		ldr	r2, [r7, #4]
 8897 120a 41F82320 		str	r2, [r1, r3, lsl #2]
2561:..\src/interruptions.c **** 
2562:..\src/interruptions.c ****             if (interrupt_flag){
 8898              		.loc 1 2562 0
 8899 120e 0E4B     		ldr	r3, .L584+12
 8900 1210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8901 1212 002B     		cmp	r3, #0
 8902 1214 04D0     		beq	.L552
2563:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8903              		.loc 1 2563 0
 8904 1216 0C4B     		ldr	r3, .L584+12
 8905 1218 0022     		movs	r2, #0
 8906 121a 1A70     		strb	r2, [r3]
2564:..\src/interruptions.c ****                 interrupt_manager();
 8907              		.loc 1 2564 0
 8908 121c FFF7FEFF 		bl	interrupt_manager
 8909              	.L552:
2541:..\src/interruptions.c ****             
 8910              		.loc 1 2541 0 discriminator 2
 8911 1220 104B     		ldr	r3, .L584+40
 8912 1222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8913 1224 0133     		adds	r3, r3, #1
 8914 1226 DAB2     		uxtb	r2, r3
 8915 1228 0E4B     		ldr	r3, .L584+40
 8916 122a 1A70     		strb	r2, [r3]
 8917              	.L546:
2541:..\src/interruptions.c ****             
 8918              		.loc 1 2541 0 is_stmt 0 discriminator 1
 8919 122c 0D4B     		ldr	r3, .L584+40
 8920 122e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8921 1230 052B     		cmp	r3, #5
 8922 1232 B0D9     		bls	.L553
 8923              	.L571:
2565:..\src/interruptions.c ****             }
2566:..\src/interruptions.c ****         }
2567:..\src/interruptions.c ****     }
2568:..\src/interruptions.c ****     
2569:..\src/interruptions.c **** }
 8924              		.loc 1 2569 0 is_stmt 1
 8925 1234 00BF     		nop
 8926 1236 0C37     		adds	r7, r7, #12
 8927              		.cfi_def_cfa_offset 20
 8928 1238 BD46     		mov	sp, r7
 8929              		.cfi_def_cfa_register 13
 8930              		@ sp needed
 8931 123a F0BD     		pop	{r4, r5, r6, r7, pc}
 8932              	.L585:
 8933              		.align	2
 8934              	.L584:
 8935 123c 88010000 		.word	LR_counter.10664
 8936 1240 84010000 		.word	LR_mean_value.10666
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 206


 8937 1244 00000000 		.word	joy_LR_status
 8938 1248 00000000 		.word	interrupt_flag
 8939 124c 00000000 		.word	ADC_buf
 8940 1250 1F85EB51 		.word	1374389535
 8941 1254 00000000 		.word	emg_1_status
 8942 1258 00000000 		.word	emg_2_status
 8943 125c 00000000 		.word	joy_UD_status
 8944 1260 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8945 1264 72010000 		.word	idx.10671
 8946 1268 00000000 		.word	filt_emg
 8947 126c 00000000 		.word	g_adc_meas
 8948              		.cfi_endproc
 8949              	.LFE74:
 8950              		.size	analog_read_end, .-analog_read_end
 8951              		.section	.text.overcurrent_control,"ax",%progbits
 8952              		.align	2
 8953              		.global	overcurrent_control
 8954              		.thumb
 8955              		.thumb_func
 8956              		.type	overcurrent_control, %function
 8957              	overcurrent_control:
 8958              	.LFB75:
2570:..\src/interruptions.c **** 
2571:..\src/interruptions.c **** //==============================================================================
2572:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2573:..\src/interruptions.c **** //==============================================================================
2574:..\src/interruptions.c **** 
2575:..\src/interruptions.c **** void overcurrent_control() {
 8959              		.loc 1 2575 0
 8960              		.cfi_startproc
 8961              		@ args = 0, pretend = 0, frame = 8
 8962              		@ frame_needed = 1, uses_anonymous_args = 0
 8963              		@ link register save eliminated.
 8964 0000 80B4     		push	{r7}
 8965              		.cfi_def_cfa_offset 4
 8966              		.cfi_offset 7, -4
 8967 0002 83B0     		sub	sp, sp, #12
 8968              		.cfi_def_cfa_offset 16
 8969 0004 00AF     		add	r7, sp, #0
 8970              		.cfi_def_cfa_register 7
 8971              	.LBB11:
2576:..\src/interruptions.c ****     
2577:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8972              		.loc 1 2577 0
 8973 0006 0023     		movs	r3, #0
 8974 0008 FB71     		strb	r3, [r7, #7]
 8975 000a 6CE0     		b	.L587
 8976              	.L592:
2578:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8977              		.loc 1 2578 0
 8978 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8979 000e 3A49     		ldr	r1, .L594
 8980 0010 1346     		mov	r3, r2
 8981 0012 DB00     		lsls	r3, r3, #3
 8982 0014 9B1A     		subs	r3, r3, r2
 8983 0016 1B01     		lsls	r3, r3, #4
 8984 0018 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 207


 8985 001a 03F58673 		add	r3, r3, #268
 8986 001e B3F90030 		ldrsh	r3, [r3]
 8987 0022 002B     		cmp	r3, #0
 8988 0024 5CD0     		beq	.L588
 8989              	.LBB12:
2579:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8990              		.loc 1 2579 0
 8991 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8992 0028 3449     		ldr	r1, .L594+4
 8993 002a 1346     		mov	r3, r2
 8994 002c DB00     		lsls	r3, r3, #3
 8995 002e 9B1A     		subs	r3, r3, r2
 8996 0030 1B01     		lsls	r3, r3, #4
 8997 0032 0B44     		add	r3, r3, r1
 8998 0034 03F58873 		add	r3, r3, #272
 8999 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9000 003a 1946     		mov	r1, r3
 9001 003c 304A     		ldr	r2, .L594+8
 9002 003e 3423     		movs	r3, #52
 9003 0040 03FB01F3 		mul	r3, r3, r1
 9004 0044 1344     		add	r3, r3, r2
 9005 0046 0C33     		adds	r3, r3, #12
 9006 0048 1B68     		ldr	r3, [r3]
 9007 004a 3B60     		str	r3, [r7]
2580:..\src/interruptions.c ****             // check if the current is over the limit
2581:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2582:..\src/interruptions.c ****                 if (curr < 0){
 9008              		.loc 1 2582 0
 9009 004c 3B68     		ldr	r3, [r7]
 9010 004e 002B     		cmp	r3, #0
 9011 0050 02DA     		bge	.L589
2583:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 9012              		.loc 1 2583 0
 9013 0052 3B68     		ldr	r3, [r7]
 9014 0054 5B42     		negs	r3, r3
 9015 0056 3B60     		str	r3, [r7]
 9016              	.L589:
2584:..\src/interruptions.c ****                 }
2585:..\src/interruptions.c ****          //   }
2586:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 9017              		.loc 1 2586 0
 9018 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9019 005a 2749     		ldr	r1, .L594
 9020 005c 1346     		mov	r3, r2
 9021 005e DB00     		lsls	r3, r3, #3
 9022 0060 9B1A     		subs	r3, r3, r2
 9023 0062 1B01     		lsls	r3, r3, #4
 9024 0064 0B44     		add	r3, r3, r1
 9025 0066 03F58673 		add	r3, r3, #268
 9026 006a B3F90030 		ldrsh	r3, [r3]
 9027 006e 1A46     		mov	r2, r3
 9028 0070 3B68     		ldr	r3, [r7]
 9029 0072 9A42     		cmp	r2, r3
 9030 0074 09DA     		bge	.L590
2587:..\src/interruptions.c ****                 //decrease pwm_limit
2588:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 9031              		.loc 1 2588 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 208


 9032 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9033 0078 224A     		ldr	r2, .L594+12
 9034 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 9035 007e 013A     		subs	r2, r2, #1
 9036 0080 91B2     		uxth	r1, r2
 9037 0082 204A     		ldr	r2, .L594+12
 9038 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9039 0088 18E0     		b	.L593
 9040              	.L590:
2589:..\src/interruptions.c ****             // check if the current is in the safe zone
2590:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 9041              		.loc 1 2590 0
 9042 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9043 008c 1A49     		ldr	r1, .L594
 9044 008e 1346     		mov	r3, r2
 9045 0090 DB00     		lsls	r3, r3, #3
 9046 0092 9B1A     		subs	r3, r3, r2
 9047 0094 1B01     		lsls	r3, r3, #4
 9048 0096 0B44     		add	r3, r3, r1
 9049 0098 03F58673 		add	r3, r3, #268
 9050 009c B3F90030 		ldrsh	r3, [r3]
 9051 00a0 A3F10A02 		sub	r2, r3, #10
 9052 00a4 3B68     		ldr	r3, [r7]
 9053 00a6 9A42     		cmp	r2, r3
 9054 00a8 08DD     		ble	.L593
2591:..\src/interruptions.c ****                 //increase pwm_limit
2592:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 9055              		.loc 1 2592 0
 9056 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9057 00ac 154A     		ldr	r2, .L594+12
 9058 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 9059 00b2 0132     		adds	r2, r2, #1
 9060 00b4 91B2     		uxth	r1, r2
 9061 00b6 134A     		ldr	r2, .L594+12
 9062 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9063              	.L593:
2593:..\src/interruptions.c ****             }
2594:..\src/interruptions.c **** 
2595:..\src/interruptions.c ****             // Bound pwm_limit
2596:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2597:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2598:..\src/interruptions.c ****             else 
2599:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 9064              		.loc 1 2599 0
 9065 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9066 00be 114A     		ldr	r2, .L594+12
 9067 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 9068 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9069 00c6 1049     		ldr	r1, .L594+16
 9070 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9071 00cc 9A42     		cmp	r2, r3
 9072 00ce 07D9     		bls	.L588
2600:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 9073              		.loc 1 2600 0
 9074 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9075 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9076 00d4 0C49     		ldr	r1, .L594+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 209


 9077 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 9078 00da 0A4A     		ldr	r2, .L594+12
 9079 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9080              	.L588:
 9081              	.LBE12:
2577:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 9082              		.loc 1 2577 0 discriminator 2
 9083 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9084 00e2 0133     		adds	r3, r3, #1
 9085 00e4 FB71     		strb	r3, [r7, #7]
 9086              	.L587:
2577:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 9087              		.loc 1 2577 0 is_stmt 0 discriminator 1
 9088 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9089 00e8 012B     		cmp	r3, #1
 9090 00ea 8FD9     		bls	.L592
 9091              	.LBE11:
2601:..\src/interruptions.c ****         }
2602:..\src/interruptions.c ****     }
2603:..\src/interruptions.c **** }
 9092              		.loc 1 2603 0 is_stmt 1
 9093 00ec 00BF     		nop
 9094 00ee 0C37     		adds	r7, r7, #12
 9095              		.cfi_def_cfa_offset 4
 9096 00f0 BD46     		mov	sp, r7
 9097              		.cfi_def_cfa_register 13
 9098              		@ sp needed
 9099 00f2 80BC     		pop	{r7}
 9100              		.cfi_restore 7
 9101              		.cfi_def_cfa_offset 0
 9102 00f4 7047     		bx	lr
 9103              	.L595:
 9104 00f6 00BF     		.align	2
 9105              	.L594:
 9106 00f8 00000000 		.word	c_mem
 9107 00fc 00000000 		.word	g_mem
 9108 0100 00000000 		.word	g_meas
 9109 0104 00000000 		.word	dev_pwm_limit
 9110 0108 00000000 		.word	dev_pwm_sat
 9111              		.cfi_endproc
 9112              	.LFE75:
 9113              		.size	overcurrent_control, .-overcurrent_control
 9114              		.section	.text.pwm_limit_search,"ax",%progbits
 9115              		.align	2
 9116              		.global	pwm_limit_search
 9117              		.thumb
 9118              		.thumb_func
 9119              		.type	pwm_limit_search, %function
 9120              	pwm_limit_search:
 9121              	.LFB76:
2604:..\src/interruptions.c **** 
2605:..\src/interruptions.c **** //==============================================================================
2606:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2607:..\src/interruptions.c **** //==============================================================================
2608:..\src/interruptions.c **** 
2609:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 9122              		.loc 1 2609 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 210


 9123              		.cfi_startproc
 9124              		@ args = 0, pretend = 0, frame = 16
 9125              		@ frame_needed = 1, uses_anonymous_args = 0
 9126              		@ link register save eliminated.
 9127 0000 80B4     		push	{r7}
 9128              		.cfi_def_cfa_offset 4
 9129              		.cfi_offset 7, -4
 9130 0002 85B0     		sub	sp, sp, #20
 9131              		.cfi_def_cfa_offset 24
 9132 0004 00AF     		add	r7, sp, #0
 9133              		.cfi_def_cfa_register 7
 9134 0006 0346     		mov	r3, r0
 9135 0008 FB71     		strb	r3, [r7, #7]
2610:..\src/interruptions.c **** 
2611:..\src/interruptions.c ****     uint8 CYDATA index;
2612:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 9136              		.loc 1 2612 0
 9137 000a 46F28473 		movw	r3, #26500
 9138 000e FB81     		strh	r3, [r7, #14]	@ movhi
2613:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 9139              		.loc 1 2613 0
 9140 0010 42F6EC43 		movw	r3, #11500
 9141 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2614:..\src/interruptions.c ****     
2615:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 9142              		.loc 1 2615 0
 9143 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9144 0018 1F4A     		ldr	r2, .L603
 9145 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9146 001e FB89     		ldrh	r3, [r7, #14]
 9147 0020 9A42     		cmp	r2, r3
 9148 0022 05DD     		ble	.L597
2616:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 9149              		.loc 1 2616 0
 9150 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9151 0026 1D4A     		ldr	r2, .L603+4
 9152 0028 0021     		movs	r1, #0
 9153 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2617:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2618:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2619:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2620:..\src/interruptions.c ****         } else {
2621:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2622:..\src/interruptions.c ****         }
2623:..\src/interruptions.c ****     } else {
2624:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2625:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2626:..\src/interruptions.c ****     }
2627:..\src/interruptions.c **** }
 9154              		.loc 1 2627 0
 9155 002e 2EE0     		b	.L602
 9156              	.L597:
2617:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 9157              		.loc 1 2617 0
 9158 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9159 0032 194A     		ldr	r2, .L603
 9160 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 211


 9161 0038 BB89     		ldrh	r3, [r7, #12]
 9162 003a 9A42     		cmp	r2, r3
 9163 003c 17DA     		bge	.L599
2618:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 9164              		.loc 1 2618 0
 9165 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9166 0040 1749     		ldr	r1, .L603+8
 9167 0042 1346     		mov	r3, r2
 9168 0044 DB00     		lsls	r3, r3, #3
 9169 0046 9B1A     		subs	r3, r3, r2
 9170 0048 1B01     		lsls	r3, r3, #4
 9171 004a 0B44     		add	r3, r3, r1
 9172 004c E233     		adds	r3, r3, #226
 9173 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9174 0050 022B     		cmp	r3, #2
 9175 0052 06D1     		bne	.L600
2619:..\src/interruptions.c ****         } else {
 9176              		.loc 1 2619 0
 9177 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9178 0056 114A     		ldr	r2, .L603+4
 9179 0058 40F6A931 		movw	r1, #2985
 9180 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9181              		.loc 1 2627 0
 9182 0060 15E0     		b	.L602
 9183              	.L600:
2621:..\src/interruptions.c ****         }
 9184              		.loc 1 2621 0
 9185 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9186 0064 0D4A     		ldr	r2, .L603+4
 9187 0066 6421     		movs	r1, #100
 9188 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9189              		.loc 1 2627 0
 9190 006c 0FE0     		b	.L602
 9191              	.L599:
2624:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 9192              		.loc 1 2624 0
 9193 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9194 0070 094A     		ldr	r2, .L603
 9195 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9196 0076 BB89     		ldrh	r3, [r7, #12]
 9197 0078 D31A     		subs	r3, r2, r3
 9198 007a 5B12     		asrs	r3, r3, #9
 9199 007c FB72     		strb	r3, [r7, #11]
2625:..\src/interruptions.c ****     }
 9200              		.loc 1 2625 0
 9201 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9202 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9203 0082 0849     		ldr	r1, .L603+12
 9204 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9205 0086 91B2     		uxth	r1, r2
 9206 0088 044A     		ldr	r2, .L603+4
 9207 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9208              	.L602:
 9209              		.loc 1 2627 0
 9210 008e 00BF     		nop
 9211 0090 1437     		adds	r7, r7, #20
 9212              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 212


 9213 0092 BD46     		mov	sp, r7
 9214              		.cfi_def_cfa_register 13
 9215              		@ sp needed
 9216 0094 80BC     		pop	{r7}
 9217              		.cfi_restore 7
 9218              		.cfi_def_cfa_offset 0
 9219 0096 7047     		bx	lr
 9220              	.L604:
 9221              		.align	2
 9222              	.L603:
 9223 0098 00000000 		.word	dev_tension
 9224 009c 00000000 		.word	dev_pwm_sat
 9225 00a0 00000000 		.word	c_mem
 9226 00a4 00000000 		.word	pwm_preload_values
 9227              		.cfi_endproc
 9228              	.LFE76:
 9229              		.size	pwm_limit_search, .-pwm_limit_search
 9230              		.global	__aeabi_ui2f
 9231              		.global	__aeabi_f2d
 9232              		.global	__aeabi_ddiv
 9233              		.global	__aeabi_dcmpgt
 9234              		.section	.text.cycles_counter_update,"ax",%progbits
 9235              		.align	2
 9236              		.global	cycles_counter_update
 9237              		.thumb
 9238              		.thumb_func
 9239              		.type	cycles_counter_update, %function
 9240              	cycles_counter_update:
 9241              	.LFB77:
2628:..\src/interruptions.c **** 
2629:..\src/interruptions.c **** //==============================================================================
2630:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2631:..\src/interruptions.c **** //==============================================================================
2632:..\src/interruptions.c **** 
2633:..\src/interruptions.c **** void cycles_counter_update() {
 9242              		.loc 1 2633 0
 9243              		.cfi_startproc
 9244              		@ args = 0, pretend = 0, frame = 24
 9245              		@ frame_needed = 1, uses_anonymous_args = 0
 9246 0000 90B5     		push	{r4, r7, lr}
 9247              		.cfi_def_cfa_offset 12
 9248              		.cfi_offset 4, -12
 9249              		.cfi_offset 7, -8
 9250              		.cfi_offset 14, -4
 9251 0002 87B0     		sub	sp, sp, #28
 9252              		.cfi_def_cfa_offset 40
 9253 0004 00AF     		add	r7, sp, #0
 9254              		.cfi_def_cfa_register 7
2634:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2635:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2636:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2637:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2638:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2639:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2640:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2641:..\src/interruptions.c ****     static int32 thr_pos = 0;
2642:..\src/interruptions.c ****     static int32 max_pos = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 213


2643:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2644:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9255              		.loc 1 2644 0
 9256 0006 0023     		movs	r3, #0
 9257 0008 FB60     		str	r3, [r7, #12]
 9258 000a 0023     		movs	r3, #0
 9259 000c BB60     		str	r3, [r7, #8]
 9260 000e 0023     		movs	r3, #0
 9261 0010 3B61     		str	r3, [r7, #16]
2645:..\src/interruptions.c ****     int32 step;
2646:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2647:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2648:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2649:..\src/interruptions.c **** 
2650:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9262              		.loc 1 2650 0
 9263 0012 A64B     		ldr	r3, .L683
 9264 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9265 0018 1946     		mov	r1, r3
 9266 001a A54A     		ldr	r2, .L683+4
 9267 001c 3423     		movs	r3, #52
 9268 001e 03FB01F3 		mul	r3, r3, r1
 9269 0022 1344     		add	r3, r3, r2
 9270 0024 1A68     		ldr	r2, [r3]
 9271 0026 A14B     		ldr	r3, .L683
 9272 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9273 002c 1846     		mov	r0, r3
 9274 002e 9F49     		ldr	r1, .L683
 9275 0030 0346     		mov	r3, r0
 9276 0032 5B00     		lsls	r3, r3, #1
 9277 0034 0344     		add	r3, r3, r0
 9278 0036 1B01     		lsls	r3, r3, #4
 9279 0038 0B44     		add	r3, r3, r1
 9280 003a 03F29513 		addw	r3, r3, #405
 9281 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9282 0040 42FA03F3 		asr	r3, r2, r3
 9283 0044 FB60     		str	r3, [r7, #12]
2651:..\src/interruptions.c ****         
2652:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2653:..\src/interruptions.c ****     switch (pos_cycle_status){
 9284              		.loc 1 2653 0
 9285 0046 9B4B     		ldr	r3, .L683+8
 9286 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9287 004a 012B     		cmp	r3, #1
 9288 004c 3DD0     		beq	.L607
 9289 004e 022B     		cmp	r3, #2
 9290 0050 74D0     		beq	.L608
 9291 0052 002B     		cmp	r3, #0
 9292 0054 40F02781 		bne	.L606
2654:..\src/interruptions.c ****         case STATE_INACTIVE:
2655:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9293              		.loc 1 2655 0
 9294 0058 944B     		ldr	r3, .L683
 9295 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9296 005e 072B     		cmp	r3, #7
 9297 0060 04D0     		beq	.L610
 9298              		.loc 1 2655 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 214


 9299 0062 954B     		ldr	r3, .L683+12
 9300 0064 93F90030 		ldrsb	r3, [r3]
 9301 0068 012B     		cmp	r3, #1
 9302 006a 0CD0     		beq	.L611
 9303              	.L610:
 9304              		.loc 1 2655 0 discriminator 3
 9305 006c 8F4B     		ldr	r3, .L683
 9306 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9307 0072 072B     		cmp	r3, #7
 9308 0074 40F01481 		bne	.L673
 9309              		.loc 1 2655 0 discriminator 4
 9310 0078 8F4B     		ldr	r3, .L683+12
 9311 007a 93F90030 		ldrsb	r3, [r3]
 9312 007e B3F1FF3F 		cmp	r3, #-1
 9313 0082 40F00D81 		bne	.L673
 9314              	.L611:
2656:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9315              		.loc 1 2656 0 is_stmt 1
 9316 0086 8D4A     		ldr	r2, .L683+16
 9317 0088 FB68     		ldr	r3, [r7, #12]
 9318 008a 1360     		str	r3, [r2]
2657:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9319              		.loc 1 2657 0
 9320 008c 8C4B     		ldr	r3, .L683+20
 9321 008e 1A68     		ldr	r2, [r3]
 9322 0090 8A4B     		ldr	r3, .L683+16
 9323 0092 1B68     		ldr	r3, [r3]
 9324 0094 9A42     		cmp	r2, r3
 9325 0096 05DD     		ble	.L613
 9326              		.loc 1 2657 0 is_stmt 0 discriminator 1
 9327 0098 894B     		ldr	r3, .L683+20
 9328 009a 1A68     		ldr	r2, [r3]
 9329 009c 874B     		ldr	r3, .L683+16
 9330 009e 1B68     		ldr	r3, [r3]
 9331 00a0 D31A     		subs	r3, r2, r3
 9332 00a2 04E0     		b	.L614
 9333              	.L613:
 9334              		.loc 1 2657 0 discriminator 2
 9335 00a4 854B     		ldr	r3, .L683+16
 9336 00a6 1A68     		ldr	r2, [r3]
 9337 00a8 854B     		ldr	r3, .L683+20
 9338 00aa 1B68     		ldr	r3, [r3]
 9339 00ac D31A     		subs	r3, r2, r3
 9340              	.L614:
 9341              		.loc 1 2657 0 discriminator 4
 9342 00ae BB60     		str	r3, [r7, #8]
2658:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9343              		.loc 1 2658 0 is_stmt 1 discriminator 4
 9344 00b0 BB68     		ldr	r3, [r7, #8]
 9345 00b2 142B     		cmp	r3, #20
 9346 00b4 05DD     		ble	.L615
2659:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9347              		.loc 1 2659 0
 9348 00b6 7D4B     		ldr	r3, .L683
 9349 00b8 5A6D     		ldr	r2, [r3, #84]
 9350 00ba BB68     		ldr	r3, [r7, #8]
 9351 00bc 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 215


 9352 00be 7B4A     		ldr	r2, .L683
 9353 00c0 5365     		str	r3, [r2, #84]
 9354              	.L615:
2660:..\src/interruptions.c ****                 }
2661:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9355              		.loc 1 2661 0
 9356 00c2 7C4B     		ldr	r3, .L683+8
 9357 00c4 0122     		movs	r2, #1
 9358 00c6 1A70     		strb	r2, [r3]
2662:..\src/interruptions.c ****             }
2663:..\src/interruptions.c ****             break;
 9359              		.loc 1 2663 0
 9360 00c8 EAE0     		b	.L673
 9361              	.L607:
2664:..\src/interruptions.c ****         case STATE_ACTIVE:
2665:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9362              		.loc 1 2665 0
 9363 00ca 784B     		ldr	r3, .L683
 9364 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9365 00d0 072B     		cmp	r3, #7
 9366 00d2 05D0     		beq	.L616
 9367              		.loc 1 2665 0 is_stmt 0 discriminator 1
 9368 00d4 784B     		ldr	r3, .L683+12
 9369 00d6 93F90030 		ldrsb	r3, [r3]
 9370 00da B3F1FF3F 		cmp	r3, #-1
 9371 00de 0BD0     		beq	.L617
 9372              	.L616:
 9373              		.loc 1 2665 0 discriminator 3
 9374 00e0 724B     		ldr	r3, .L683
 9375 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9376 00e6 072B     		cmp	r3, #7
 9377 00e8 40F0DC80 		bne	.L674
 9378              		.loc 1 2665 0 discriminator 4
 9379 00ec 724B     		ldr	r3, .L683+12
 9380 00ee 93F90030 		ldrsb	r3, [r3]
 9381 00f2 012B     		cmp	r3, #1
 9382 00f4 40F0D680 		bne	.L674
 9383              	.L617:
2666:..\src/interruptions.c ****                 max_pos = curr_pos;
 9384              		.loc 1 2666 0 is_stmt 1
 9385 00f8 714A     		ldr	r2, .L683+20
 9386 00fa FB68     		ldr	r3, [r7, #12]
 9387 00fc 1360     		str	r3, [r2]
2667:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9388              		.loc 1 2667 0
 9389 00fe 704B     		ldr	r3, .L683+20
 9390 0100 1A68     		ldr	r2, [r3]
 9391 0102 6E4B     		ldr	r3, .L683+16
 9392 0104 1B68     		ldr	r3, [r3]
 9393 0106 9A42     		cmp	r2, r3
 9394 0108 05DD     		ble	.L619
 9395              		.loc 1 2667 0 is_stmt 0 discriminator 1
 9396 010a 6D4B     		ldr	r3, .L683+20
 9397 010c 1A68     		ldr	r2, [r3]
 9398 010e 6B4B     		ldr	r3, .L683+16
 9399 0110 1B68     		ldr	r3, [r3]
 9400 0112 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 216


 9401 0114 04E0     		b	.L620
 9402              	.L619:
 9403              		.loc 1 2667 0 discriminator 2
 9404 0116 694B     		ldr	r3, .L683+16
 9405 0118 1A68     		ldr	r2, [r3]
 9406 011a 694B     		ldr	r3, .L683+20
 9407 011c 1B68     		ldr	r3, [r3]
 9408 011e D31A     		subs	r3, r2, r3
 9409              	.L620:
 9410              		.loc 1 2667 0 discriminator 4
 9411 0120 BB60     		str	r3, [r7, #8]
2668:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9412              		.loc 1 2668 0 is_stmt 1 discriminator 4
 9413 0122 BB68     		ldr	r3, [r7, #8]
 9414 0124 142B     		cmp	r3, #20
 9415 0126 05DD     		ble	.L621
2669:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9416              		.loc 1 2669 0
 9417 0128 604B     		ldr	r3, .L683
 9418 012a 5A6D     		ldr	r2, [r3, #84]
 9419 012c BB68     		ldr	r3, [r7, #8]
 9420 012e 1344     		add	r3, r3, r2
 9421 0130 5E4A     		ldr	r2, .L683
 9422 0132 5365     		str	r3, [r2, #84]
 9423              	.L621:
2670:..\src/interruptions.c ****                 }
2671:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9424              		.loc 1 2671 0
 9425 0134 5F4B     		ldr	r3, .L683+8
 9426 0136 0222     		movs	r2, #2
 9427 0138 1A70     		strb	r2, [r3]
2672:..\src/interruptions.c ****             }
2673:..\src/interruptions.c ****             break;
 9428              		.loc 1 2673 0
 9429 013a B3E0     		b	.L674
 9430              	.L608:
2674:..\src/interruptions.c ****         case COUNTER_INC:
2675:..\src/interruptions.c **** 
2676:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9431              		.loc 1 2676 0
 9432 013c 604B     		ldr	r3, .L683+20
 9433 013e 1A68     		ldr	r2, [r3]
 9434 0140 5E4B     		ldr	r3, .L683+16
 9435 0142 1B68     		ldr	r3, [r3]
 9436 0144 9A42     		cmp	r2, r3
 9437 0146 05DD     		ble	.L622
 9438              		.loc 1 2676 0 is_stmt 0 discriminator 1
 9439 0148 5D4B     		ldr	r3, .L683+20
 9440 014a 1A68     		ldr	r2, [r3]
 9441 014c 5B4B     		ldr	r3, .L683+16
 9442 014e 1B68     		ldr	r3, [r3]
 9443 0150 D31A     		subs	r3, r2, r3
 9444 0152 04E0     		b	.L623
 9445              	.L622:
 9446              		.loc 1 2676 0 discriminator 2
 9447 0154 594B     		ldr	r3, .L683+16
 9448 0156 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 217


 9449 0158 594B     		ldr	r3, .L683+20
 9450 015a 1B68     		ldr	r3, [r3]
 9451 015c D31A     		subs	r3, r2, r3
 9452              	.L623:
 9453              		.loc 1 2676 0 discriminator 4
 9454 015e BB60     		str	r3, [r7, #8]
2677:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9455              		.loc 1 2677 0 is_stmt 1 discriminator 4
 9456 0160 584B     		ldr	r3, .L683+24
 9457 0162 1B68     		ldr	r3, [r3]
 9458 0164 BA68     		ldr	r2, [r7, #8]
 9459 0166 9A42     		cmp	r2, r3
 9460 0168 40F39680 		ble	.L624
2678:..\src/interruptions.c ****                 //update position histogram
2679:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9461              		.loc 1 2679 0
 9462 016c 4F4B     		ldr	r3, .L683
 9463 016e D3F8E820 		ldr	r2, [r3, #232]
 9464 0172 4E4B     		ldr	r3, .L683
 9465 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9466 0178 1846     		mov	r0, r3
 9467 017a 4C49     		ldr	r1, .L683
 9468 017c 0346     		mov	r3, r0
 9469 017e 5B00     		lsls	r3, r3, #1
 9470 0180 0344     		add	r3, r3, r0
 9471 0182 1B01     		lsls	r3, r3, #4
 9472 0184 0B44     		add	r3, r3, r1
 9473 0186 03F29513 		addw	r3, r3, #405
 9474 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9475 018c 42FA03F3 		asr	r3, r2, r3
 9476 0190 4D4A     		ldr	r2, .L683+28
 9477 0192 82FB0312 		smull	r1, r2, r2, r3
 9478 0196 9210     		asrs	r2, r2, #2
 9479 0198 DB17     		asrs	r3, r3, #31
 9480 019a D31A     		subs	r3, r2, r3
 9481 019c 7B60     		str	r3, [r7, #4]
2680:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9482              		.loc 1 2680 0
 9483 019e 474B     		ldr	r3, .L683+16
 9484 01a0 1A68     		ldr	r2, [r3]
 9485 01a2 7B68     		ldr	r3, [r7, #4]
 9486 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9487 01a8 FB70     		strb	r3, [r7, #3]
2681:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9488              		.loc 1 2681 0
 9489 01aa 454B     		ldr	r3, .L683+20
 9490 01ac 1A68     		ldr	r2, [r3]
 9491 01ae 7B68     		ldr	r3, [r7, #4]
 9492 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9493 01b4 BB70     		strb	r3, [r7, #2]
2682:..\src/interruptions.c ****                 
2683:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2684:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9494              		.loc 1 2684 0
 9495 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9496 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9497 01ba 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 218


 9498 01bc 28BF     		it	cs
 9499 01be 1346     		movcs	r3, r2
 9500 01c0 7B70     		strb	r3, [r7, #1]
2685:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9501              		.loc 1 2685 0
 9502 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9503 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9504 01c6 9342     		cmp	r3, r2
 9505 01c8 38BF     		it	cc
 9506 01ca 1346     		movcc	r3, r2
 9507 01cc 3B70     		strb	r3, [r7]
2686:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9508              		.loc 1 2686 0
 9509 01ce 7B78     		ldrb	r3, [r7, #1]
 9510 01d0 FB75     		strb	r3, [r7, #23]
 9511 01d2 0DE0     		b	.L625
 9512              	.L627:
2687:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2688:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9513              		.loc 1 2688 0 discriminator 4
 9514 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9515 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9516 01d8 3449     		ldr	r1, .L683
 9517 01da 0632     		adds	r2, r2, #6
 9518 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9519 01e0 0132     		adds	r2, r2, #1
 9520 01e2 3249     		ldr	r1, .L683
 9521 01e4 0633     		adds	r3, r3, #6
 9522 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2686:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9523              		.loc 1 2686 0 discriminator 4
 9524 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9525 01ec 0133     		adds	r3, r3, #1
 9526 01ee FB75     		strb	r3, [r7, #23]
 9527              	.L625:
2686:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9528              		.loc 1 2686 0 is_stmt 0 discriminator 1
 9529 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9530 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9531 01f4 9A42     		cmp	r2, r3
 9532 01f6 02D8     		bhi	.L626
2686:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9533              		.loc 1 2686 0 discriminator 3
 9534 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9535 01fa 092B     		cmp	r3, #9
 9536 01fc EAD9     		bls	.L627
 9537              	.L626:
2689:..\src/interruptions.c ****                 }
2690:..\src/interruptions.c ****                 
2691:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2692:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9538              		.loc 1 2692 0 is_stmt 1
 9539 01fe 2B4B     		ldr	r3, .L683
 9540 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9541 0204 002B     		cmp	r3, #0
 9542 0206 00DA     		bge	.L628
 9543 0208 0333     		adds	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 219


 9544              	.L628:
 9545 020a 9B10     		asrs	r3, r3, #2
 9546 020c 1BB2     		sxth	r3, r3
 9547 020e 7B60     		str	r3, [r7, #4]
2693:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9548              		.loc 1 2693 0
 9549 0210 264B     		ldr	r3, .L683
 9550 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9551 0216 012B     		cmp	r3, #1
 9552 0218 0CD1     		bne	.L629
2694:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9553              		.loc 1 2694 0
 9554 021a 244B     		ldr	r3, .L683
 9555 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9556 0220 1946     		mov	r1, r3
 9557 0222 234A     		ldr	r2, .L683+4
 9558 0224 3423     		movs	r3, #52
 9559 0226 03FB01F3 		mul	r3, r3, r1
 9560 022a 1344     		add	r3, r3, r2
 9561 022c 1433     		adds	r3, r3, #20
 9562 022e 1B68     		ldr	r3, [r3]
 9563 0230 3B61     		str	r3, [r7, #16]
 9564 0232 0BE0     		b	.L630
 9565              	.L629:
2695:..\src/interruptions.c ****                 else
2696:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9566              		.loc 1 2696 0
 9567 0234 1D4B     		ldr	r3, .L683
 9568 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9569 023a 1946     		mov	r1, r3
 9570 023c 1C4A     		ldr	r2, .L683+4
 9571 023e 3423     		movs	r3, #52
 9572 0240 03FB01F3 		mul	r3, r3, r1
 9573 0244 1344     		add	r3, r3, r2
 9574 0246 0C33     		adds	r3, r3, #12
 9575 0248 1B68     		ldr	r3, [r3]
 9576 024a 3B61     		str	r3, [r7, #16]
 9577              	.L630:
2697:..\src/interruptions.c **** 
2698:..\src/interruptions.c ****                 if (curr_ref < 0){
 9578              		.loc 1 2698 0
 9579 024c 3B69     		ldr	r3, [r7, #16]
 9580 024e 002B     		cmp	r3, #0
 9581 0250 02DA     		bge	.L631
2699:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9582              		.loc 1 2699 0
 9583 0252 3B69     		ldr	r3, [r7, #16]
 9584 0254 5B42     		negs	r3, r3
 9585 0256 3B61     		str	r3, [r7, #16]
 9586              	.L631:
2700:..\src/interruptions.c ****                 }
2701:..\src/interruptions.c ****                 
2702:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9587              		.loc 1 2702 0
 9588 0258 144B     		ldr	r3, .L683
 9589 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9590 025e 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 220


 9591 0260 3B69     		ldr	r3, [r7, #16]
 9592 0262 9A42     		cmp	r2, r3
 9593 0264 05DA     		bge	.L632
2703:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9594              		.loc 1 2703 0
 9595 0266 114B     		ldr	r3, .L683
 9596 0268 DB6C     		ldr	r3, [r3, #76]
 9597 026a 0133     		adds	r3, r3, #1
 9598 026c 0F4A     		ldr	r2, .L683
 9599 026e D364     		str	r3, [r2, #76]
 9600 0270 12E0     		b	.L624
 9601              	.L632:
2704:..\src/interruptions.c ****                 else
2705:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9602              		.loc 1 2705 0
 9603 0272 3A69     		ldr	r2, [r7, #16]
 9604 0274 7B68     		ldr	r3, [r7, #4]
 9605 0276 92FBF3F3 		sdiv	r3, r2, r3
 9606 027a DBB2     		uxtb	r3, r3
 9607 027c 3969     		ldr	r1, [r7, #16]
 9608 027e 7A68     		ldr	r2, [r7, #4]
 9609 0280 91FBF2F2 		sdiv	r2, r1, r2
 9610 0284 D2B2     		uxtb	r2, r2
 9611 0286 0949     		ldr	r1, .L683
 9612 0288 1032     		adds	r2, r2, #16
 9613 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9614 028e 0132     		adds	r2, r2, #1
 9615 0290 0649     		ldr	r1, .L683
 9616 0292 1033     		adds	r3, r3, #16
 9617 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9618              	.L624:
2706:..\src/interruptions.c ****             }
2707:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9619              		.loc 1 2707 0
 9620 0298 064B     		ldr	r3, .L683+8
 9621 029a 0022     		movs	r2, #0
 9622 029c 1A70     		strb	r2, [r3]
2708:..\src/interruptions.c ****             break;
 9623              		.loc 1 2708 0
 9624 029e 02E0     		b	.L606
 9625              	.L673:
2663:..\src/interruptions.c ****         case STATE_ACTIVE:
 9626              		.loc 1 2663 0
 9627 02a0 00BF     		nop
 9628 02a2 00E0     		b	.L606
 9629              	.L674:
2673:..\src/interruptions.c ****         case COUNTER_INC:
 9630              		.loc 1 2673 0
 9631 02a4 00BF     		nop
 9632              	.L606:
2709:..\src/interruptions.c ****     }
2710:..\src/interruptions.c ****     
2711:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2712:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9633              		.loc 1 2712 0
 9634 02a6 0023     		movs	r3, #0
 9635 02a8 FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 221


 9636 02aa 4FE0     		b	.L633
 9637              	.L684:
 9638              		.align	2
 9639              	.L683:
 9640 02ac 00000000 		.word	g_mem
 9641 02b0 00000000 		.word	g_meas
 9642 02b4 8A010000 		.word	pos_cycle_status.10742
 9643 02b8 00000000 		.word	pwm_sign
 9644 02bc 8C010000 		.word	thr_pos.10749
 9645 02c0 90010000 		.word	max_pos.10750
 9646 02c4 10000000 		.word	bin_threshold.10747
 9647 02c8 67666666 		.word	1717986919
 9648              	.L641:
2713:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9649              		.loc 1 2713 0
 9650 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9651 02ce 9C4A     		ldr	r2, .L685
 9652 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9653 02d2 012B     		cmp	r3, #1
 9654 02d4 13D0     		beq	.L635
 9655 02d6 022B     		cmp	r3, #2
 9656 02d8 22D0     		beq	.L636
 9657 02da 002B     		cmp	r3, #0
 9658 02dc 33D1     		bne	.L634
2714:..\src/interruptions.c ****             case STATE_INACTIVE:
2715:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9659              		.loc 1 2715 0
 9660 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9661 02e0 984A     		ldr	r2, .L685+4
 9662 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9663 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9664 02e8 9749     		ldr	r1, .L685+8
 9665 02ea F832     		adds	r2, r2, #248
 9666 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9667 02f0 9342     		cmp	r3, r2
 9668 02f2 25DD     		ble	.L675
2716:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9669              		.loc 1 2716 0
 9670 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9671 02f6 924A     		ldr	r2, .L685
 9672 02f8 0121     		movs	r1, #1
 9673 02fa D154     		strb	r1, [r2, r3]
2717:..\src/interruptions.c ****                 }
2718:..\src/interruptions.c ****                 break;
 9674              		.loc 1 2718 0
 9675 02fc 20E0     		b	.L675
 9676              	.L635:
2719:..\src/interruptions.c ****             case STATE_ACTIVE:
2720:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9677              		.loc 1 2720 0
 9678 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9679 0300 904A     		ldr	r2, .L685+4
 9680 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9681 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9682 0308 8F49     		ldr	r1, .L685+8
 9683 030a F833     		adds	r3, r3, #248
 9684 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 222


 9685 0310 0A3B     		subs	r3, r3, #10
 9686 0312 9A42     		cmp	r2, r3
 9687 0314 16DA     		bge	.L676
2721:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9688              		.loc 1 2721 0
 9689 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9690 0318 894A     		ldr	r2, .L685
 9691 031a 0221     		movs	r1, #2
 9692 031c D154     		strb	r1, [r2, r3]
2722:..\src/interruptions.c ****                 }
2723:..\src/interruptions.c ****                 break;
 9693              		.loc 1 2723 0
 9694 031e 11E0     		b	.L676
 9695              	.L636:
2724:..\src/interruptions.c ****             case COUNTER_INC:
2725:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9696              		.loc 1 2725 0
 9697 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9698 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9699 0324 8849     		ldr	r1, .L685+8
 9700 0326 0432     		adds	r2, r2, #4
 9701 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9702 032c 0132     		adds	r2, r2, #1
 9703 032e 8649     		ldr	r1, .L685+8
 9704 0330 0433     		adds	r3, r3, #4
 9705 0332 41F82320 		str	r2, [r1, r3, lsl #2]
2726:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9706              		.loc 1 2726 0
 9707 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9708 0338 814A     		ldr	r2, .L685
 9709 033a 0021     		movs	r1, #0
 9710 033c D154     		strb	r1, [r2, r3]
2727:..\src/interruptions.c ****                 break;
 9711              		.loc 1 2727 0
 9712 033e 02E0     		b	.L634
 9713              	.L675:
2718:..\src/interruptions.c ****             case STATE_ACTIVE:
 9714              		.loc 1 2718 0
 9715 0340 00BF     		nop
 9716 0342 00E0     		b	.L634
 9717              	.L676:
2723:..\src/interruptions.c ****             case COUNTER_INC:
 9718              		.loc 1 2723 0
 9719 0344 00BF     		nop
 9720              	.L634:
2712:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9721              		.loc 1 2712 0 discriminator 2
 9722 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9723 0348 0133     		adds	r3, r3, #1
 9724 034a FB75     		strb	r3, [r7, #23]
 9725              	.L633:
2712:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9726              		.loc 1 2712 0 is_stmt 0 discriminator 1
 9727 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9728 034e 012B     		cmp	r3, #1
 9729 0350 07D8     		bhi	.L640
2712:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 223


 9730              		.loc 1 2712 0 discriminator 3
 9731 0352 7E4B     		ldr	r3, .L685+12
 9732 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9733 0356 002B     		cmp	r3, #0
 9734 0358 03D1     		bne	.L640
2712:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9735              		.loc 1 2712 0 discriminator 4
 9736 035a 7D4B     		ldr	r3, .L685+16
 9737 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9738 035e 002B     		cmp	r3, #0
 9739 0360 B4D0     		beq	.L641
 9740              	.L640:
2728:..\src/interruptions.c ****         }
2729:..\src/interruptions.c ****     }
2730:..\src/interruptions.c ****     
2731:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2732:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9741              		.loc 1 2732 0 is_stmt 1
 9742 0362 0023     		movs	r3, #0
 9743 0364 FB75     		strb	r3, [r7, #23]
 9744 0366 57E0     		b	.L642
 9745              	.L651:
2733:..\src/interruptions.c ****         switch (motion_status[i]){
 9746              		.loc 1 2733 0
 9747 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9748 036a 7A4A     		ldr	r2, .L685+20
 9749 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9750 036e 012B     		cmp	r3, #1
 9751 0370 18D0     		beq	.L644
 9752 0372 022B     		cmp	r3, #2
 9753 0374 37D0     		beq	.L645
 9754 0376 002B     		cmp	r3, #0
 9755 0378 4BD1     		bne	.L643
2734:..\src/interruptions.c ****             case STATE_INACTIVE:
2735:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9756              		.loc 1 2735 0
 9757 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9758 037c 714A     		ldr	r2, .L685+4
 9759 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9760 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9761 0384 7049     		ldr	r1, .L685+8
 9762 0386 F832     		adds	r2, r2, #248
 9763 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9764 038c 9342     		cmp	r3, r2
 9765 038e 3DDD     		ble	.L677
2736:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9766              		.loc 1 2736 0
 9767 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9768 0392 7149     		ldr	r1, .L685+24
 9769 0394 FA68     		ldr	r2, [r7, #12]
 9770 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2737:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
 9771              		.loc 1 2737 0
 9772 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9773 039c 6D4A     		ldr	r2, .L685+20
 9774 039e 0121     		movs	r1, #1
 9775 03a0 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 224


2738:..\src/interruptions.c ****                 }
2739:..\src/interruptions.c ****                 break;
 9776              		.loc 1 2739 0
 9777 03a2 33E0     		b	.L677
 9778              	.L644:
2740:..\src/interruptions.c ****             case STATE_ACTIVE:
2741:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9779              		.loc 1 2741 0
 9780 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9781 03a6 674A     		ldr	r2, .L685+4
 9782 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9783 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9784 03ae 6649     		ldr	r1, .L685+8
 9785 03b0 F833     		adds	r3, r3, #248
 9786 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9787 03b6 0A3B     		subs	r3, r3, #10
 9788 03b8 9A42     		cmp	r2, r3
 9789 03ba 29DA     		bge	.L678
2742:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9790              		.loc 1 2742 0
 9791 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9792 03be 664A     		ldr	r2, .L685+24
 9793 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9794 03c4 FB68     		ldr	r3, [r7, #12]
 9795 03c6 D31A     		subs	r3, r2, r3
 9796 03c8 002B     		cmp	r3, #0
 9797 03ca B8BF     		it	lt
 9798 03cc 5B42     		rsblt	r3, r3, #0
 9799 03ce C82B     		cmp	r3, #200
 9800 03d0 04DD     		ble	.L649
2743:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9801              		.loc 1 2743 0
 9802 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9803 03d4 5F4A     		ldr	r2, .L685+20
 9804 03d6 0221     		movs	r1, #2
 9805 03d8 D154     		strb	r1, [r2, r3]
2744:..\src/interruptions.c ****                     }
2745:..\src/interruptions.c ****                     else {
2746:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2747:..\src/interruptions.c ****                     }
2748:..\src/interruptions.c ****                 }
2749:..\src/interruptions.c ****                 break;
 9806              		.loc 1 2749 0
 9807 03da 19E0     		b	.L678
 9808              	.L649:
2746:..\src/interruptions.c ****                     }
 9809              		.loc 1 2746 0
 9810 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9811 03de 5D4A     		ldr	r2, .L685+20
 9812 03e0 0021     		movs	r1, #0
 9813 03e2 D154     		strb	r1, [r2, r3]
 9814              		.loc 1 2749 0
 9815 03e4 14E0     		b	.L678
 9816              	.L645:
2750:..\src/interruptions.c ****             case COUNTER_INC:
2751:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9817              		.loc 1 2751 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 225


 9818 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9819 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9820 03ea 574A     		ldr	r2, .L685+8
 9821 03ec 1A33     		adds	r3, r3, #26
 9822 03ee 9B00     		lsls	r3, r3, #2
 9823 03f0 1344     		add	r3, r3, r2
 9824 03f2 5B68     		ldr	r3, [r3, #4]
 9825 03f4 5A1C     		adds	r2, r3, #1
 9826 03f6 5448     		ldr	r0, .L685+8
 9827 03f8 01F11A03 		add	r3, r1, #26
 9828 03fc 9B00     		lsls	r3, r3, #2
 9829 03fe 0344     		add	r3, r3, r0
 9830 0400 5A60     		str	r2, [r3, #4]
2752:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9831              		.loc 1 2752 0
 9832 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9833 0404 534A     		ldr	r2, .L685+20
 9834 0406 0021     		movs	r1, #0
 9835 0408 D154     		strb	r1, [r2, r3]
2753:..\src/interruptions.c ****                 break;
 9836              		.loc 1 2753 0
 9837 040a 02E0     		b	.L643
 9838              	.L677:
2739:..\src/interruptions.c ****             case STATE_ACTIVE:
 9839              		.loc 1 2739 0
 9840 040c 00BF     		nop
 9841 040e 00E0     		b	.L643
 9842              	.L678:
2749:..\src/interruptions.c ****             case COUNTER_INC:
 9843              		.loc 1 2749 0
 9844 0410 00BF     		nop
 9845              	.L643:
2732:..\src/interruptions.c ****         switch (motion_status[i]){
 9846              		.loc 1 2732 0 discriminator 2
 9847 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9848 0414 0133     		adds	r3, r3, #1
 9849 0416 FB75     		strb	r3, [r7, #23]
 9850              	.L642:
2732:..\src/interruptions.c ****         switch (motion_status[i]){
 9851              		.loc 1 2732 0 is_stmt 0 discriminator 1
 9852 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9853 041a 012B     		cmp	r3, #1
 9854 041c 07D8     		bhi	.L650
2732:..\src/interruptions.c ****         switch (motion_status[i]){
 9855              		.loc 1 2732 0 discriminator 3
 9856 041e 4B4B     		ldr	r3, .L685+12
 9857 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9858 0422 002B     		cmp	r3, #0
 9859 0424 03D1     		bne	.L650
2732:..\src/interruptions.c ****         switch (motion_status[i]){
 9860              		.loc 1 2732 0 discriminator 4
 9861 0426 4A4B     		ldr	r3, .L685+16
 9862 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9863 042a 002B     		cmp	r3, #0
 9864 042c 9CD0     		beq	.L651
 9865              	.L650:
2754:..\src/interruptions.c ****         }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 226


2755:..\src/interruptions.c ****     }
2756:..\src/interruptions.c ****     
2757:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2758:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9866              		.loc 1 2758 0 is_stmt 1
 9867 042e 0023     		movs	r3, #0
 9868 0430 FB75     		strb	r3, [r7, #23]
 9869 0432 A3E0     		b	.L652
 9870              	.L663:
2759:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9871              		.loc 1 2759 0
 9872 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9873 0436 494A     		ldr	r2, .L685+28
 9874 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9875 043a 012B     		cmp	r3, #1
 9876 043c 19D0     		beq	.L654
 9877 043e 022B     		cmp	r3, #2
 9878 0440 68D0     		beq	.L655
 9879 0442 002B     		cmp	r3, #0
 9880 0444 40F09780 		bne	.L653
2760:..\src/interruptions.c ****             case STATE_INACTIVE:
2761:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9881              		.loc 1 2761 0
 9882 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9883 044a 3E4A     		ldr	r2, .L685+4
 9884 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9885 0450 434B     		ldr	r3, .L685+32
 9886 0452 1B68     		ldr	r3, [r3]
 9887 0454 9A42     		cmp	r2, r3
 9888 0456 70DD     		ble	.L679
2762:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9889              		.loc 1 2762 0
 9890 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9891 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9892 045e 0346     		mov	r3, r0
 9893 0460 1A46     		mov	r2, r3
 9894 0462 404B     		ldr	r3, .L685+36
 9895 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2763:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9896              		.loc 1 2763 0
 9897 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9898 046a 3C4A     		ldr	r2, .L685+28
 9899 046c 0121     		movs	r1, #1
 9900 046e D154     		strb	r1, [r2, r3]
2764:..\src/interruptions.c ****                 }
2765:..\src/interruptions.c ****                 break;
 9901              		.loc 1 2765 0
 9902 0470 63E0     		b	.L679
 9903              	.L654:
2766:..\src/interruptions.c ****             case STATE_ACTIVE:
2767:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9904              		.loc 1 2767 0
 9905 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9906 0474 334A     		ldr	r2, .L685+4
 9907 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9908 047a 394B     		ldr	r3, .L685+32
 9909 047c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 227


 9910 047e 0A3B     		subs	r3, r3, #10
 9911 0480 9A42     		cmp	r2, r3
 9912 0482 77DA     		bge	.L680
2768:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9913              		.loc 1 2768 0
 9914 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9915 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9916 048a 0346     		mov	r3, r0
 9917 048c 1A46     		mov	r2, r3
 9918 048e 364B     		ldr	r3, .L685+40
 9919 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2769:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9920              		.loc 1 2769 0
 9921 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9922 0496 334A     		ldr	r2, .L685+36
 9923 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9924 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9925 049e 3249     		ldr	r1, .L685+40
 9926 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9927 04a4 9A42     		cmp	r2, r3
 9928 04a6 0AD2     		bcs	.L659
2770:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9929              		.loc 1 2770 0
 9930 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9931 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9932 04ac 2D49     		ldr	r1, .L685+36
 9933 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9934 04b2 03F5BB53 		add	r3, r3, #5984
 9935 04b6 1033     		adds	r3, r3, #16
 9936 04b8 2A49     		ldr	r1, .L685+36
 9937 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9938              	.L659:
2771:..\src/interruptions.c ****                     }
2772:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9939              		.loc 1 2772 0
 9940 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9941 04c0 284A     		ldr	r2, .L685+36
 9942 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9943 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9944 04c8 2749     		ldr	r1, .L685+40
 9945 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9946 04ce D31A     		subs	r3, r2, r3
 9947 04d0 1846     		mov	r0, r3
 9948 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9949 04d6 0346     		mov	r3, r0
 9950 04d8 1846     		mov	r0, r3
 9951 04da FFF7FEFF 		bl	__aeabi_f2d
 9952 04de 4FF00002 		mov	r2, #0
 9953 04e2 224B     		ldr	r3, .L685+44
 9954 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9955 04e8 0346     		mov	r3, r0
 9956 04ea 0C46     		mov	r4, r1
 9957 04ec 1846     		mov	r0, r3
 9958 04ee 2146     		mov	r1, r4
 9959 04f0 4FF00002 		mov	r2, #0
 9960 04f4 1E4B     		ldr	r3, .L685+48
 9961 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 228


 9962 04fa 0346     		mov	r3, r0
 9963 04fc 002B     		cmp	r3, #0
 9964 04fe 04D0     		beq	.L672
2773:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9965              		.loc 1 2773 0
 9966 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9967 0502 164A     		ldr	r2, .L685+28
 9968 0504 0221     		movs	r1, #2
 9969 0506 D154     		strb	r1, [r2, r3]
2774:..\src/interruptions.c ****                     }
2775:..\src/interruptions.c ****                     else {
2776:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2777:..\src/interruptions.c ****                     }
2778:..\src/interruptions.c ****                 }
2779:..\src/interruptions.c ****                 break;
 9970              		.loc 1 2779 0
 9971 0508 34E0     		b	.L680
 9972              	.L672:
2776:..\src/interruptions.c ****                     }
 9973              		.loc 1 2776 0
 9974 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9975 050c 134A     		ldr	r2, .L685+28
 9976 050e 0021     		movs	r1, #0
 9977 0510 D154     		strb	r1, [r2, r3]
 9978              		.loc 1 2779 0
 9979 0512 2FE0     		b	.L680
 9980              	.L655:
2780:..\src/interruptions.c ****             case COUNTER_INC:
2781:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9981              		.loc 1 2781 0
 9982 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9983 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9984 0518 0B4A     		ldr	r2, .L685+8
 9985 051a 1833     		adds	r3, r3, #24
 9986 051c 9B00     		lsls	r3, r3, #2
 9987 051e 1344     		add	r3, r3, r2
 9988 0520 5B68     		ldr	r3, [r3, #4]
 9989 0522 5A1C     		adds	r2, r3, #1
 9990 0524 0848     		ldr	r0, .L685+8
 9991 0526 01F11803 		add	r3, r1, #24
 9992 052a 9B00     		lsls	r3, r3, #2
 9993 052c 0344     		add	r3, r3, r0
 9994 052e 5A60     		str	r2, [r3, #4]
2782:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9995              		.loc 1 2782 0
 9996 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9997 0532 0A4A     		ldr	r2, .L685+28
 9998 0534 0021     		movs	r1, #0
 9999 0536 D154     		strb	r1, [r2, r3]
2783:..\src/interruptions.c ****                 break;
 10000              		.loc 1 2783 0
 10001 0538 1DE0     		b	.L653
 10002              	.L679:
2765:..\src/interruptions.c ****             case STATE_ACTIVE:
 10003              		.loc 1 2765 0
 10004 053a 00BF     		nop
 10005 053c 1BE0     		b	.L653
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 229


 10006              	.L686:
 10007 053e 00BF     		.align	2
 10008              	.L685:
 10009 0540 94010000 		.word	emg_cycle_status.10743
 10010 0544 00000000 		.word	g_adc_meas
 10011 0548 00000000 		.word	g_mem
 10012 054c 00000000 		.word	emg_1_status
 10013 0550 00000000 		.word	emg_2_status
 10014 0554 98010000 		.word	motion_status.10744
 10015 0558 9C010000 		.word	start_emg_pos.10764
 10016 055c A4010000 		.word	emg_excess_status.10745
 10017 0560 14000000 		.word	exc_act_thr.10748
 10018 0564 A8010000 		.word	timer_exc_s.10762
 10019 0568 B0010000 		.word	timer_exc_e.10763
 10020 056c 00004940 		.word	1078525952
 10021 0570 00001040 		.word	1074790400
 10022              	.L680:
2779:..\src/interruptions.c ****             case COUNTER_INC:
 10023              		.loc 1 2779 0
 10024 0574 00BF     		nop
 10025              	.L653:
2758:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 10026              		.loc 1 2758 0 discriminator 2
 10027 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10028 0578 0133     		adds	r3, r3, #1
 10029 057a FB75     		strb	r3, [r7, #23]
 10030              	.L652:
2758:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 10031              		.loc 1 2758 0 is_stmt 0 discriminator 1
 10032 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10033 057e 012B     		cmp	r3, #1
 10034 0580 08D8     		bhi	.L662
2758:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 10035              		.loc 1 2758 0 discriminator 3
 10036 0582 2D4B     		ldr	r3, .L687
 10037 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10038 0586 002B     		cmp	r3, #0
 10039 0588 04D1     		bne	.L662
2758:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 10040              		.loc 1 2758 0 discriminator 4
 10041 058a 2C4B     		ldr	r3, .L687+4
 10042 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10043 058e 002B     		cmp	r3, #0
 10044 0590 3FF450AF 		beq	.L663
 10045              	.L662:
2784:..\src/interruptions.c ****         }
2785:..\src/interruptions.c ****     }
2786:..\src/interruptions.c ****     
2787:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2788:..\src/interruptions.c ****     switch (rest_cycle_status){
 10046              		.loc 1 2788 0 is_stmt 1
 10047 0594 2A4B     		ldr	r3, .L687+8
 10048 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10049 0598 012B     		cmp	r3, #1
 10050 059a 11D0     		beq	.L665
 10051 059c 022B     		cmp	r3, #2
 10052 059e 2AD0     		beq	.L666
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 230


 10053 05a0 002B     		cmp	r3, #0
 10054 05a2 42D1     		bne	.L664
2789:..\src/interruptions.c ****         case STATE_INACTIVE:
2790:..\src/interruptions.c ****             if (rest_enabled){
 10055              		.loc 1 2790 0
 10056 05a4 274B     		ldr	r3, .L687+12
 10057 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10058 05a8 002B     		cmp	r3, #0
 10059 05aa 3BD0     		beq	.L681
2791:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 10060              		.loc 1 2791 0
 10061 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 10062 05b0 0346     		mov	r3, r0
 10063 05b2 1A46     		mov	r2, r3
 10064 05b4 244B     		ldr	r3, .L687+16
 10065 05b6 1A60     		str	r2, [r3]
2792:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 10066              		.loc 1 2792 0
 10067 05b8 214B     		ldr	r3, .L687+8
 10068 05ba 0122     		movs	r2, #1
 10069 05bc 1A70     		strb	r2, [r3]
2793:..\src/interruptions.c ****             }
2794:..\src/interruptions.c ****             break;
 10070              		.loc 1 2794 0
 10071 05be 31E0     		b	.L681
 10072              	.L665:
2795:..\src/interruptions.c ****         case STATE_ACTIVE:
2796:..\src/interruptions.c ****             if (!rest_enabled){
 10073              		.loc 1 2796 0
 10074 05c0 204B     		ldr	r3, .L687+12
 10075 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10076 05c4 002B     		cmp	r3, #0
 10077 05c6 2FD1     		bne	.L682
2797:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 10078              		.loc 1 2797 0
 10079 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 10080 05cc 0346     		mov	r3, r0
 10081 05ce 1A46     		mov	r2, r3
 10082 05d0 1E4B     		ldr	r3, .L687+20
 10083 05d2 1A60     		str	r2, [r3]
2798:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 10084              		.loc 1 2798 0
 10085 05d4 1C4B     		ldr	r3, .L687+16
 10086 05d6 1A68     		ldr	r2, [r3]
 10087 05d8 1C4B     		ldr	r3, .L687+20
 10088 05da 1B68     		ldr	r3, [r3]
 10089 05dc 9A42     		cmp	r2, r3
 10090 05de 06D2     		bcs	.L670
2799:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 10091              		.loc 1 2799 0
 10092 05e0 194B     		ldr	r3, .L687+16
 10093 05e2 1B68     		ldr	r3, [r3]
 10094 05e4 03F5BB53 		add	r3, r3, #5984
 10095 05e8 1033     		adds	r3, r3, #16
 10096 05ea 174A     		ldr	r2, .L687+16
 10097 05ec 1360     		str	r3, [r2]
 10098              	.L670:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 231


2800:..\src/interruptions.c ****                 }
2801:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 10099              		.loc 1 2801 0
 10100 05ee 144B     		ldr	r3, .L687+8
 10101 05f0 0222     		movs	r2, #2
 10102 05f2 1A70     		strb	r2, [r3]
2802:..\src/interruptions.c ****             }
2803:..\src/interruptions.c ****             break;
 10103              		.loc 1 2803 0
 10104 05f4 18E0     		b	.L682
 10105              	.L666:
2804:..\src/interruptions.c ****         case COUNTER_INC: 
2805:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 10106              		.loc 1 2805 0
 10107 05f6 164B     		ldr	r3, .L687+24
 10108 05f8 DA6D     		ldr	r2, [r3, #92]
 10109 05fa 134B     		ldr	r3, .L687+16
 10110 05fc 1968     		ldr	r1, [r3]
 10111 05fe 134B     		ldr	r3, .L687+20
 10112 0600 1B68     		ldr	r3, [r3]
 10113 0602 CB1A     		subs	r3, r1, r3
 10114 0604 1349     		ldr	r1, .L687+28
 10115 0606 A1FB0313 		umull	r1, r3, r1, r3
 10116 060a 1B09     		lsrs	r3, r3, #4
 10117 060c 1344     		add	r3, r3, r2
 10118 060e 104A     		ldr	r2, .L687+24
 10119 0610 D365     		str	r3, [r2, #92]
2806:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 10120              		.loc 1 2806 0
 10121 0612 0F4B     		ldr	r3, .L687+24
 10122 0614 1B6D     		ldr	r3, [r3, #80]
 10123 0616 0133     		adds	r3, r3, #1
 10124 0618 0D4A     		ldr	r2, .L687+24
 10125 061a 1365     		str	r3, [r2, #80]
2807:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 10126              		.loc 1 2807 0
 10127 061c 084B     		ldr	r3, .L687+8
 10128 061e 0022     		movs	r2, #0
 10129 0620 1A70     		strb	r2, [r3]
2808:..\src/interruptions.c ****             break;
 10130              		.loc 1 2808 0
 10131 0622 02E0     		b	.L664
 10132              	.L681:
2794:..\src/interruptions.c ****         case STATE_ACTIVE:
 10133              		.loc 1 2794 0
 10134 0624 00BF     		nop
 10135 0626 00E0     		b	.L664
 10136              	.L682:
2803:..\src/interruptions.c ****         case COUNTER_INC: 
 10137              		.loc 1 2803 0
 10138 0628 00BF     		nop
 10139              	.L664:
2809:..\src/interruptions.c ****     }
2810:..\src/interruptions.c ****           
2811:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2812:..\src/interruptions.c ****     save_cycles_eeprom();
 10140              		.loc 1 2812 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 232


 10141 062a FFF7FEFF 		bl	save_cycles_eeprom
2813:..\src/interruptions.c ****     
2814:..\src/interruptions.c **** }
 10142              		.loc 1 2814 0
 10143 062e 00BF     		nop
 10144 0630 1C37     		adds	r7, r7, #28
 10145              		.cfi_def_cfa_offset 12
 10146 0632 BD46     		mov	sp, r7
 10147              		.cfi_def_cfa_register 13
 10148              		@ sp needed
 10149 0634 90BD     		pop	{r4, r7, pc}
 10150              	.L688:
 10151 0636 00BF     		.align	2
 10152              	.L687:
 10153 0638 00000000 		.word	emg_1_status
 10154 063c 00000000 		.word	emg_2_status
 10155 0640 B8010000 		.word	rest_cycle_status.10746
 10156 0644 00000000 		.word	rest_enabled
 10157 0648 BC010000 		.word	timer_value_s.10760
 10158 064c C0010000 		.word	timer_value_e.10761
 10159 0650 00000000 		.word	g_mem
 10160 0654 1F85EB51 		.word	1374389535
 10161              		.cfi_endproc
 10162              	.LFE77:
 10163              		.size	cycles_counter_update, .-cycles_counter_update
 10164              		.section	.text.save_cycles_eeprom,"ax",%progbits
 10165              		.align	2
 10166              		.global	save_cycles_eeprom
 10167              		.thumb
 10168              		.thumb_func
 10169              		.type	save_cycles_eeprom, %function
 10170              	save_cycles_eeprom:
 10171              	.LFB78:
2815:..\src/interruptions.c **** 
2816:..\src/interruptions.c **** //==============================================================================
2817:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2818:..\src/interruptions.c **** //==============================================================================
2819:..\src/interruptions.c **** 
2820:..\src/interruptions.c **** void save_cycles_eeprom() {
 10172              		.loc 1 2820 0
 10173              		.cfi_startproc
 10174              		@ args = 0, pretend = 0, frame = 24
 10175              		@ frame_needed = 1, uses_anonymous_args = 0
 10176 0000 80B5     		push	{r7, lr}
 10177              		.cfi_def_cfa_offset 8
 10178              		.cfi_offset 7, -8
 10179              		.cfi_offset 14, -4
 10180 0002 86B0     		sub	sp, sp, #24
 10181              		.cfi_def_cfa_offset 32
 10182 0004 00AF     		add	r7, sp, #0
 10183              		.cfi_def_cfa_register 7
2821:..\src/interruptions.c **** 
2822:..\src/interruptions.c ****     cystatus status;
2823:..\src/interruptions.c ****     static uint8 row_number;
2824:..\src/interruptions.c ****     uint8 row_start = 1;
 10184              		.loc 1 2824 0
 10185 0006 0123     		movs	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 233


 10186 0008 FB75     		strb	r3, [r7, #23]
2825:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 10187              		.loc 1 2825 0
 10188 000a 394B     		ldr	r3, .L705
 10189 000c 3B61     		str	r3, [r7, #16]
2826:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 10190              		.loc 1 2826 0
 10191 000e 394B     		ldr	r3, .L705+4
 10192 0010 FB60     		str	r3, [r7, #12]
2827:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 10193              		.loc 1 2827 0
 10194 0012 FB7D     		ldrb	r3, [r7, #23]
 10195 0014 0633     		adds	r3, r3, #6
 10196 0016 FB72     		strb	r3, [r7, #11]
2828:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2829:..\src/interruptions.c **** 
2830:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2831:..\src/interruptions.c ****     switch(cycles_status) {
 10197              		.loc 1 2831 0
 10198 0018 374B     		ldr	r3, .L705+8
 10199 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10200 001c 042B     		cmp	r3, #4
 10201 001e 63D8     		bhi	.L701
 10202 0020 01A2     		adr	r2, .L692
 10203 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 10204 0026 00BF     		.p2align 2
 10205              	.L692:
 10206 0028 3D000000 		.word	.L691+1
 10207 002c 5B000000 		.word	.L693+1
 10208 0030 8B000000 		.word	.L694+1
 10209 0034 C7000000 		.word	.L695+1
 10210 0038 DF000000 		.word	.L702+1
 10211              		.p2align 1
 10212              	.L691:
2832:..\src/interruptions.c ****         case PREPARE_DATA:
2833:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2834:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 10213              		.loc 1 2834 0
 10214 003c 7022     		movs	r2, #112
 10215 003e 3969     		ldr	r1, [r7, #16]
 10216 0040 F868     		ldr	r0, [r7, #12]
 10217 0042 FFF7FEFF 		bl	memcpy
2835:..\src/interruptions.c ****             m_addr = addr_start;
 10218              		.loc 1 2835 0
 10219 0046 2D4A     		ldr	r2, .L705+12
 10220 0048 3B69     		ldr	r3, [r7, #16]
 10221 004a 1360     		str	r3, [r2]
2836:..\src/interruptions.c ****             row_number = row_start;
 10222              		.loc 1 2836 0
 10223 004c 2C4A     		ldr	r2, .L705+16
 10224 004e FB7D     		ldrb	r3, [r7, #23]
 10225 0050 1370     		strb	r3, [r2]
2837:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 10226              		.loc 1 2837 0
 10227 0052 294B     		ldr	r3, .L705+8
 10228 0054 0122     		movs	r2, #1
 10229 0056 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 234


2838:..\src/interruptions.c ****             break;
 10230              		.loc 1 2838 0
 10231 0058 46E0     		b	.L690
 10232              	.L693:
2839:..\src/interruptions.c ****             
2840:..\src/interruptions.c ****         case WRITE_CYCLES:
2841:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 10233              		.loc 1 2841 0
 10234 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2842:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 10235              		.loc 1 2842 0
 10236 005e 274B     		ldr	r3, .L705+12
 10237 0060 1A68     		ldr	r2, [r3]
 10238 0062 274B     		ldr	r3, .L705+16
 10239 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10240 0066 1946     		mov	r1, r3
 10241 0068 1046     		mov	r0, r2
 10242 006a FFF7FEFF 		bl	EEPROM_StartWrite
 10243 006e 7860     		str	r0, [r7, #4]
2843:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10244              		.loc 1 2843 0
 10245 0070 7B68     		ldr	r3, [r7, #4]
 10246 0072 072B     		cmp	r3, #7
 10247 0074 02D0     		beq	.L697
 10248              		.loc 1 2843 0 is_stmt 0 discriminator 1
 10249 0076 7B68     		ldr	r3, [r7, #4]
 10250 0078 002B     		cmp	r3, #0
 10251 007a 32D1     		bne	.L703
 10252              	.L697:
2844:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10253              		.loc 1 2844 0 is_stmt 1
 10254 007c 1E4B     		ldr	r3, .L705+8
 10255 007e 0222     		movs	r2, #2
 10256 0080 1A70     		strb	r2, [r3]
2845:..\src/interruptions.c ****                 can_write = FALSE;
 10257              		.loc 1 2845 0
 10258 0082 204B     		ldr	r3, .L705+20
 10259 0084 0022     		movs	r2, #0
 10260 0086 1A70     		strb	r2, [r3]
2846:..\src/interruptions.c ****             }
2847:..\src/interruptions.c ****             break;
 10261              		.loc 1 2847 0
 10262 0088 2BE0     		b	.L703
 10263              	.L694:
2848:..\src/interruptions.c ****             
2849:..\src/interruptions.c ****         case WAIT_QUERY:
2850:..\src/interruptions.c ****             status = EEPROM_Query();
 10264              		.loc 1 2850 0
 10265 008a FFF7FEFF 		bl	EEPROM_Query
 10266 008e 7860     		str	r0, [r7, #4]
2851:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10267              		.loc 1 2851 0
 10268 0090 7B68     		ldr	r3, [r7, #4]
 10269 0092 002B     		cmp	r3, #0
 10270 0094 27D1     		bne	.L704
2852:..\src/interruptions.c ****                 if (row_number < row_end) {
 10271              		.loc 1 2852 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 235


 10272 0096 1A4B     		ldr	r3, .L705+16
 10273 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10274 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10275 009c 9A42     		cmp	r2, r3
 10276 009e 0ED9     		bls	.L700
2853:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10277              		.loc 1 2853 0
 10278 00a0 164B     		ldr	r3, .L705+12
 10279 00a2 1B68     		ldr	r3, [r3]
 10280 00a4 1033     		adds	r3, r3, #16
 10281 00a6 154A     		ldr	r2, .L705+12
 10282 00a8 1360     		str	r3, [r2]
2854:..\src/interruptions.c ****                     row_number = row_number + 1;
 10283              		.loc 1 2854 0
 10284 00aa 154B     		ldr	r3, .L705+16
 10285 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10286 00ae 0133     		adds	r3, r3, #1
 10287 00b0 DAB2     		uxtb	r2, r3
 10288 00b2 134B     		ldr	r3, .L705+16
 10289 00b4 1A70     		strb	r2, [r3]
2855:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10290              		.loc 1 2855 0
 10291 00b6 104B     		ldr	r3, .L705+8
 10292 00b8 0122     		movs	r2, #1
 10293 00ba 1A70     		strb	r2, [r3]
2856:..\src/interruptions.c ****                 }
2857:..\src/interruptions.c ****                 else {
2858:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2859:..\src/interruptions.c ****                 }
2860:..\src/interruptions.c ****             }
2861:..\src/interruptions.c ****             break;
 10294              		.loc 1 2861 0
 10295 00bc 13E0     		b	.L704
 10296              	.L700:
2858:..\src/interruptions.c ****                 }
 10297              		.loc 1 2858 0
 10298 00be 0E4B     		ldr	r3, .L705+8
 10299 00c0 0322     		movs	r2, #3
 10300 00c2 1A70     		strb	r2, [r3]
 10301              		.loc 1 2861 0
 10302 00c4 0FE0     		b	.L704
 10303              	.L695:
2862:..\src/interruptions.c ****            
2863:..\src/interruptions.c ****         case WRITE_END:
2864:..\src/interruptions.c ****             can_write = TRUE;            
 10304              		.loc 1 2864 0
 10305 00c6 0F4B     		ldr	r3, .L705+20
 10306 00c8 0122     		movs	r2, #1
 10307 00ca 1A70     		strb	r2, [r3]
2865:..\src/interruptions.c ****             cycles_status = NONE;
 10308              		.loc 1 2865 0
 10309 00cc 0A4B     		ldr	r3, .L705+8
 10310 00ce 0422     		movs	r2, #4
 10311 00d0 1A70     		strb	r2, [r3]
2866:..\src/interruptions.c ****             
2867:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2868:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 236


 10312              		.loc 1 2868 0
 10313 00d2 7022     		movs	r2, #112
 10314 00d4 F968     		ldr	r1, [r7, #12]
 10315 00d6 3869     		ldr	r0, [r7, #16]
 10316 00d8 FFF7FEFF 		bl	memcpy
2869:..\src/interruptions.c ****             break;
 10317              		.loc 1 2869 0
 10318 00dc 04E0     		b	.L690
 10319              	.L702:
2870:..\src/interruptions.c ****             
2871:..\src/interruptions.c ****         case NONE:
2872:..\src/interruptions.c ****             break;
 10320              		.loc 1 2872 0
 10321 00de 00BF     		nop
 10322 00e0 02E0     		b	.L701
 10323              	.L703:
2847:..\src/interruptions.c ****             
 10324              		.loc 1 2847 0
 10325 00e2 00BF     		nop
 10326 00e4 00E0     		b	.L701
 10327              	.L704:
2861:..\src/interruptions.c ****            
 10328              		.loc 1 2861 0
 10329 00e6 00BF     		nop
 10330              	.L690:
 10331              	.L701:
2873:..\src/interruptions.c ****     }
2874:..\src/interruptions.c ****     
2875:..\src/interruptions.c **** }
 10332              		.loc 1 2875 0
 10333 00e8 00BF     		nop
 10334 00ea 1837     		adds	r7, r7, #24
 10335              		.cfi_def_cfa_offset 8
 10336 00ec BD46     		mov	sp, r7
 10337              		.cfi_def_cfa_register 13
 10338              		@ sp needed
 10339 00ee 80BD     		pop	{r7, pc}
 10340              	.L706:
 10341              		.align	2
 10342              	.L705:
 10343 00f0 10000000 		.word	g_mem+16
 10344 00f4 10000000 		.word	c_mem+16
 10345 00f8 00000000 		.word	cycles_status
 10346 00fc C4010000 		.word	m_addr.10805
 10347 0100 C8010000 		.word	row_number.10800
 10348 0104 00000000 		.word	can_write
 10349              		.cfi_endproc
 10350              	.LFE78:
 10351              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10352              		.bss
 10353              	state.10463:
 10354 0000 00       		.space	1
 10355 0001 000000   		.align	2
 10356              	rx_queue.10467:
 10357 0004 000000   		.space	3
 10358              	data_packet_length.10465:
 10359 0007 00       		.space	1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 237


 10360              	data_packet_index.10464:
 10361 0008 00       		.space	1
 10362 0009 000000   		.align	2
 10363              	data_packet_buffer.10466:
 10364 000c 00000000 		.space	128
 10364      00000000 
 10364      00000000 
 10364      00000000 
 10364      00000000 
 10365              		.data
 10366              		.align	1
 10367              		.type	counter_calibration.10483, %object
 10368              		.size	counter_calibration.10483, 2
 10369              	counter_calibration.10483:
 10370 0000 0100     		.short	1
 10371              		.align	1
 10372              		.type	counter_tension_func.10484, %object
 10373              		.size	counter_tension_func.10484, 2
 10374              	counter_tension_func.10484:
 10375 0002 0100     		.short	1
 10376              		.bss
 10377              		.align	2
 10378              	current_emg.10509:
 10379 008c 0000     		.space	2
 10380              	fsm_state.10546:
 10381 008e 00       		.space	1
 10382 008f 00       		.align	2
 10383              	pos_error_sum.10573:
 10384 0090 00000000 		.space	4
 10385              		.align	2
 10386              	prev_pos_err.10575:
 10387 0094 00000000 		.space	4
 10388              	motor_dir.10578:
 10389 0098 00       		.space	1
 10390 0099 000000   		.align	2
 10391              	curr_error_sum.10574:
 10392 009c 00000000 		.space	4
 10393              		.align	2
 10394              	prev_curr_err.10576:
 10395 00a0 00000000 		.space	4
 10396              		.align	2
 10397              	prev_pwm.10577:
 10398 00a4 00000000 		.space	4
 10399              		.align	2
 10400              	position_counter.10579:
 10401 00a8 00000000 		.space	4
 10402              		.align	2
 10403              	pos_error_sum.10606:
 10404 00ac 00000000 		.space	8
 10404      00000000 
 10405              		.align	2
 10406              	prev_pos_err.10608:
 10407 00b4 00000000 		.space	8
 10407      00000000 
 10408              		.align	2
 10409              	motor_dir.10611:
 10410 00bc 0000     		.space	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 238


 10411 00be 0000     		.align	2
 10412              	curr_error_sum.10607:
 10413 00c0 00000000 		.space	8
 10413      00000000 
 10414              		.align	2
 10415              	prev_curr_err.10609:
 10416 00c8 00000000 		.space	8
 10416      00000000 
 10417              		.align	2
 10418              	prev_pwm.10610:
 10419 00d0 00000000 		.space	8
 10419      00000000 
 10420              		.align	2
 10421              	position_counter.10612:
 10422 00d8 00000000 		.space	8
 10422      00000000 
 10423              		.align	2
 10424              	last_value_encoder.10635:
 10425 00e0 00000000 		.space	24
 10425      00000000 
 10425      00000000 
 10425      00000000 
 10425      00000000 
 10426              		.align	2
 10427              	comp_value_encoder.10636:
 10428 00f8 00000000 		.space	24
 10428      00000000 
 10428      00000000 
 10428      00000000 
 10428      00000000 
 10429              		.data
 10430              		.align	2
 10431              		.type	only_first_time.10638, %object
 10432              		.size	only_first_time.10638, 2
 10433              	only_first_time.10638:
 10434 0004 01       		.byte	1
 10435 0005 01       		.byte	1
 10436              		.bss
 10437              		.align	2
 10438              	error.10637:
 10439 0110 00000000 		.space	6
 10439      0000
 10440 0116 0000     		.align	2
 10441              	v_value.10642:
 10442 0118 00000000 		.space	24
 10442      00000000 
 10442      00000000 
 10442      00000000 
 10442      00000000 
 10443              		.align	2
 10444              	vv_value.10643:
 10445 0130 00000000 		.space	24
 10445      00000000 
 10445      00000000 
 10445      00000000 
 10445      00000000 
 10446              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 239


 10447              	vvv_value.10644:
 10448 0148 00000000 		.space	24
 10448      00000000 
 10448      00000000 
 10448      00000000 
 10448      00000000 
 10449              		.align	2
 10450              	one_time_execute.10640:
 10451 0160 0000     		.space	2
 10452 0162 0000     		.align	2
 10453              	safe_startup_motor_activation.10639:
 10454 0164 0000     		.space	2
 10455 0166 0000     		.align	2
 10456              	count_startup_motor.10641:
 10457 0168 00000000 		.space	8
 10457      00000000 
 10458              		.data
 10459 0006 0000     		.align	2
 10460              		.type	detect_power_cycle_prev.10668, %object
 10461              		.size	detect_power_cycle_prev.10668, 4
 10462              	detect_power_cycle_prev.10668:
 10463 0008 FDFFFFFF 		.word	-3
 10464              		.type	first_tension_valid.10667, %object
 10465              		.size	first_tension_valid.10667, 1
 10466              	first_tension_valid.10667:
 10467 000c 01       		.byte	1
 10468              		.bss
 10469              		.align	1
 10470              	count.10669:
 10471 0170 0000     		.space	2
 10472              	idx.10671:
 10473 0172 00       		.space	1
 10474 0173 00       		.align	2
 10475              	v_count.10670:
 10476 0174 00000000 		.space	4
 10477              		.align	1
 10478              	emg_counter_1.10661:
 10479 0178 0000     		.space	2
 10480              		.align	1
 10481              	emg_counter_2.10662:
 10482 017a 0000     		.space	2
 10483              		.align	2
 10484              	UD_mean_value.10665:
 10485 017c 00000000 		.space	4
 10486              		.align	1
 10487              	UD_counter.10663:
 10488 0180 0000     		.space	2
 10489 0182 0000     		.align	2
 10490              	LR_mean_value.10666:
 10491 0184 00000000 		.space	4
 10492              		.align	1
 10493              	LR_counter.10664:
 10494 0188 0000     		.space	2
 10495              	pos_cycle_status.10742:
 10496 018a 00       		.space	1
 10497 018b 00       		.align	2
 10498              	thr_pos.10749:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 240


 10499 018c 00000000 		.space	4
 10500              		.align	2
 10501              	max_pos.10750:
 10502 0190 00000000 		.space	4
 10503              		.data
 10504 000d 000000   		.align	2
 10505              		.type	bin_threshold.10747, %object
 10506              		.size	bin_threshold.10747, 4
 10507              	bin_threshold.10747:
 10508 0010 FA000000 		.word	250
 10509              		.bss
 10510              		.align	2
 10511              	emg_cycle_status.10743:
 10512 0194 0000     		.space	2
 10513 0196 0000     		.align	2
 10514              	motion_status.10744:
 10515 0198 0000     		.space	2
 10516 019a 0000     		.align	2
 10517              	start_emg_pos.10764:
 10518 019c 00000000 		.space	8
 10518      00000000 
 10519              		.align	2
 10520              	emg_excess_status.10745:
 10521 01a4 0000     		.space	2
 10522              		.data
 10523              		.align	2
 10524              		.type	exc_act_thr.10748, %object
 10525              		.size	exc_act_thr.10748, 4
 10526              	exc_act_thr.10748:
 10527 0014 D4030000 		.word	980
 10528              		.bss
 10529 01a6 0000     		.align	2
 10530              	timer_exc_s.10762:
 10531 01a8 00000000 		.space	8
 10531      00000000 
 10532              		.align	2
 10533              	timer_exc_e.10763:
 10534 01b0 00000000 		.space	8
 10534      00000000 
 10535              	rest_cycle_status.10746:
 10536 01b8 00       		.space	1
 10537 01b9 000000   		.align	2
 10538              	timer_value_s.10760:
 10539 01bc 00000000 		.space	4
 10540              		.align	2
 10541              	timer_value_e.10761:
 10542 01c0 00000000 		.space	4
 10543              		.align	2
 10544              	m_addr.10805:
 10545 01c4 00000000 		.space	4
 10546              	row_number.10800:
 10547 01c8 00       		.space	1
 10548              		.text
 10549              	.Letext0:
 10550              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10551              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10552              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 241


 10553              		.file 5 "..\\src\\commands.h"
 10554              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10555              		.file 7 "..\\src\\globals.h"
 10556              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10557              		.section	.debug_info,"",%progbits
 10558              	.Ldebug_info0:
 10559 0000 F11B0000 		.4byte	0x1bf1
 10560 0004 0400     		.2byte	0x4
 10561 0006 00000000 		.4byte	.Ldebug_abbrev0
 10562 000a 04       		.byte	0x4
 10563 000b 01       		.uleb128 0x1
 10564 000c AE080000 		.4byte	.LASF354
 10565 0010 0C       		.byte	0xc
 10566 0011 A7110000 		.4byte	.LASF355
 10567 0015 01110000 		.4byte	.LASF356
 10568 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10569 001d 00000000 		.4byte	0
 10570 0021 00000000 		.4byte	.Ldebug_line0
 10571 0025 02       		.uleb128 0x2
 10572 0026 01       		.byte	0x1
 10573 0027 06       		.byte	0x6
 10574 0028 F9030000 		.4byte	.LASF0
 10575 002c 02       		.uleb128 0x2
 10576 002d 01       		.byte	0x1
 10577 002e 08       		.byte	0x8
 10578 002f 76040000 		.4byte	.LASF1
 10579 0033 02       		.uleb128 0x2
 10580 0034 02       		.byte	0x2
 10581 0035 05       		.byte	0x5
 10582 0036 EA0E0000 		.4byte	.LASF2
 10583 003a 02       		.uleb128 0x2
 10584 003b 02       		.byte	0x2
 10585 003c 07       		.byte	0x7
 10586 003d C3100000 		.4byte	.LASF3
 10587 0041 03       		.uleb128 0x3
 10588 0042 3D120000 		.4byte	.LASF9
 10589 0046 02       		.byte	0x2
 10590 0047 3F       		.byte	0x3f
 10591 0048 4C000000 		.4byte	0x4c
 10592 004c 02       		.uleb128 0x2
 10593 004d 04       		.byte	0x4
 10594 004e 05       		.byte	0x5
 10595 004f D6020000 		.4byte	.LASF4
 10596 0053 02       		.uleb128 0x2
 10597 0054 04       		.byte	0x4
 10598 0055 07       		.byte	0x7
 10599 0056 AF070000 		.4byte	.LASF5
 10600 005a 02       		.uleb128 0x2
 10601 005b 08       		.byte	0x8
 10602 005c 05       		.byte	0x5
 10603 005d 74090000 		.4byte	.LASF6
 10604 0061 02       		.uleb128 0x2
 10605 0062 08       		.byte	0x8
 10606 0063 07       		.byte	0x7
 10607 0064 740C0000 		.4byte	.LASF7
 10608 0068 04       		.uleb128 0x4
 10609 0069 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 242


 10610 006a 05       		.byte	0x5
 10611 006b 696E7400 		.ascii	"int\000"
 10612 006f 02       		.uleb128 0x2
 10613 0070 04       		.byte	0x4
 10614 0071 07       		.byte	0x7
 10615 0072 9C0A0000 		.4byte	.LASF8
 10616 0076 03       		.uleb128 0x3
 10617 0077 8B000000 		.4byte	.LASF10
 10618 007b 03       		.byte	0x3
 10619 007c 2C       		.byte	0x2c
 10620 007d 41000000 		.4byte	0x41
 10621 0081 05       		.uleb128 0x5
 10622 0082 C40E0000 		.4byte	.LASF11
 10623 0086 04       		.byte	0x4
 10624 0087 E401     		.2byte	0x1e4
 10625 0089 2C000000 		.4byte	0x2c
 10626 008d 05       		.uleb128 0x5
 10627 008e 9A120000 		.4byte	.LASF12
 10628 0092 04       		.byte	0x4
 10629 0093 E501     		.2byte	0x1e5
 10630 0095 3A000000 		.4byte	0x3a
 10631 0099 05       		.uleb128 0x5
 10632 009a BF000000 		.4byte	.LASF13
 10633 009e 04       		.byte	0x4
 10634 009f E601     		.2byte	0x1e6
 10635 00a1 53000000 		.4byte	0x53
 10636 00a5 05       		.uleb128 0x5
 10637 00a6 A3010000 		.4byte	.LASF14
 10638 00aa 04       		.byte	0x4
 10639 00ab E701     		.2byte	0x1e7
 10640 00ad 25000000 		.4byte	0x25
 10641 00b1 05       		.uleb128 0x5
 10642 00b2 A90F0000 		.4byte	.LASF15
 10643 00b6 04       		.byte	0x4
 10644 00b7 E801     		.2byte	0x1e8
 10645 00b9 33000000 		.4byte	0x33
 10646 00bd 05       		.uleb128 0x5
 10647 00be CA110000 		.4byte	.LASF16
 10648 00c2 04       		.byte	0x4
 10649 00c3 E901     		.2byte	0x1e9
 10650 00c5 4C000000 		.4byte	0x4c
 10651 00c9 05       		.uleb128 0x5
 10652 00ca A1030000 		.4byte	.LASF17
 10653 00ce 04       		.byte	0x4
 10654 00cf EA01     		.2byte	0x1ea
 10655 00d1 D5000000 		.4byte	0xd5
 10656 00d5 02       		.uleb128 0x2
 10657 00d6 04       		.byte	0x4
 10658 00d7 04       		.byte	0x4
 10659 00d8 5C0A0000 		.4byte	.LASF18
 10660 00dc 02       		.uleb128 0x2
 10661 00dd 08       		.byte	0x8
 10662 00de 04       		.byte	0x4
 10663 00df B7090000 		.4byte	.LASF19
 10664 00e3 02       		.uleb128 0x2
 10665 00e4 01       		.byte	0x1
 10666 00e5 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 243


 10667 00e6 08050000 		.4byte	.LASF20
 10668 00ea 05       		.uleb128 0x5
 10669 00eb D50A0000 		.4byte	.LASF21
 10670 00ef 04       		.byte	0x4
 10671 00f0 8602     		.2byte	0x286
 10672 00f2 53000000 		.4byte	0x53
 10673 00f6 05       		.uleb128 0x5
 10674 00f7 400D0000 		.4byte	.LASF22
 10675 00fb 04       		.byte	0x4
 10676 00fc 8E02     		.2byte	0x28e
 10677 00fe 02010000 		.4byte	0x102
 10678 0102 06       		.uleb128 0x6
 10679 0103 81000000 		.4byte	0x81
 10680 0107 02       		.uleb128 0x2
 10681 0108 08       		.byte	0x8
 10682 0109 04       		.byte	0x4
 10683 010a 870B0000 		.4byte	.LASF23
 10684 010e 02       		.uleb128 0x2
 10685 010f 04       		.byte	0x4
 10686 0110 07       		.byte	0x7
 10687 0111 10000000 		.4byte	.LASF24
 10688 0115 07       		.uleb128 0x7
 10689 0116 E3000000 		.4byte	0xe3
 10690 011a 25010000 		.4byte	0x125
 10691 011e 08       		.uleb128 0x8
 10692 011f 0E010000 		.4byte	0x10e
 10693 0123 07       		.byte	0x7
 10694 0124 00       		.byte	0
 10695 0125 09       		.uleb128 0x9
 10696 0126 77120000 		.4byte	.LASF33
 10697 012a 01       		.byte	0x1
 10698 012b 2C000000 		.4byte	0x2c
 10699 012f 05       		.byte	0x5
 10700 0130 8F       		.byte	0x8f
 10701 0131 66010000 		.4byte	0x166
 10702 0135 0A       		.uleb128 0xa
 10703 0136 22070000 		.4byte	.LASF25
 10704 013a 00       		.byte	0
 10705 013b 0A       		.uleb128 0xa
 10706 013c DE0A0000 		.4byte	.LASF26
 10707 0140 01       		.byte	0x1
 10708 0141 0A       		.uleb128 0xa
 10709 0142 2E020000 		.4byte	.LASF27
 10710 0146 02       		.byte	0x2
 10711 0147 0A       		.uleb128 0xa
 10712 0148 71010000 		.4byte	.LASF28
 10713 014c 03       		.byte	0x3
 10714 014d 0A       		.uleb128 0xa
 10715 014e 2B010000 		.4byte	.LASF29
 10716 0152 04       		.byte	0x4
 10717 0153 0A       		.uleb128 0xa
 10718 0154 53000000 		.4byte	.LASF30
 10719 0158 05       		.byte	0x5
 10720 0159 0A       		.uleb128 0xa
 10721 015a F1070000 		.4byte	.LASF31
 10722 015e 06       		.byte	0x6
 10723 015f 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 244


 10724 0160 640E0000 		.4byte	.LASF32
 10725 0164 07       		.byte	0x7
 10726 0165 00       		.byte	0
 10727 0166 09       		.uleb128 0x9
 10728 0167 82090000 		.4byte	.LASF34
 10729 016b 01       		.byte	0x1
 10730 016c 2C000000 		.4byte	0x2c
 10731 0170 05       		.byte	0x5
 10732 0171 A3       		.byte	0xa3
 10733 0172 8F010000 		.4byte	0x18f
 10734 0176 0A       		.uleb128 0xa
 10735 0177 2F120000 		.4byte	.LASF35
 10736 017b 00       		.byte	0
 10737 017c 0A       		.uleb128 0xa
 10738 017d 8C080000 		.4byte	.LASF36
 10739 0181 01       		.byte	0x1
 10740 0182 0A       		.uleb128 0xa
 10741 0183 770B0000 		.4byte	.LASF37
 10742 0187 02       		.byte	0x2
 10743 0188 0A       		.uleb128 0xa
 10744 0189 92070000 		.4byte	.LASF38
 10745 018d 03       		.byte	0x3
 10746 018e 00       		.byte	0
 10747 018f 03       		.uleb128 0x3
 10748 0190 FA110000 		.4byte	.LASF39
 10749 0194 06       		.byte	0x6
 10750 0195 7E       		.byte	0x7e
 10751 0196 9A010000 		.4byte	0x19a
 10752 019a 0B       		.uleb128 0xb
 10753 019b FA110000 		.4byte	.LASF39
 10754 019f 0C       		.uleb128 0xc
 10755 01a0 04       		.byte	0x4
 10756 01a1 8F010000 		.4byte	0x18f
 10757 01a5 0D       		.uleb128 0xd
 10758 01a6 3C090000 		.4byte	.LASF42
 10759 01aa 10       		.byte	0x10
 10760 01ab 07       		.byte	0x7
 10761 01ac E5       		.byte	0xe5
 10762 01ad E2010000 		.4byte	0x1e2
 10763 01b1 0E       		.uleb128 0xe
 10764 01b2 706F7300 		.ascii	"pos\000"
 10765 01b6 07       		.byte	0x7
 10766 01b7 E6       		.byte	0xe6
 10767 01b8 BD000000 		.4byte	0xbd
 10768 01bc 00       		.byte	0
 10769 01bd 0F       		.uleb128 0xf
 10770 01be 71080000 		.4byte	.LASF40
 10771 01c2 07       		.byte	0x7
 10772 01c3 E7       		.byte	0xe7
 10773 01c4 BD000000 		.4byte	0xbd
 10774 01c8 04       		.byte	0x4
 10775 01c9 0E       		.uleb128 0xe
 10776 01ca 70776D00 		.ascii	"pwm\000"
 10777 01ce 07       		.byte	0x7
 10778 01cf E8       		.byte	0xe8
 10779 01d0 BD000000 		.4byte	0xbd
 10780 01d4 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 245


 10781 01d5 0F       		.uleb128 0xf
 10782 01d6 D70C0000 		.4byte	.LASF41
 10783 01da 07       		.byte	0x7
 10784 01db E9       		.byte	0xe9
 10785 01dc 81000000 		.4byte	0x81
 10786 01e0 0C       		.byte	0xc
 10787 01e1 00       		.byte	0
 10788 01e2 0D       		.uleb128 0xd
 10789 01e3 2B0E0000 		.4byte	.LASF43
 10790 01e7 34       		.byte	0x34
 10791 01e8 07       		.byte	0x7
 10792 01e9 F0       		.byte	0xf0
 10793 01ea 43020000 		.4byte	0x243
 10794 01ee 0E       		.uleb128 0xe
 10795 01ef 706F7300 		.ascii	"pos\000"
 10796 01f3 07       		.byte	0x7
 10797 01f4 F1       		.byte	0xf1
 10798 01f5 43020000 		.4byte	0x243
 10799 01f9 00       		.byte	0
 10800 01fa 0F       		.uleb128 0xf
 10801 01fb 71080000 		.4byte	.LASF40
 10802 01ff 07       		.byte	0x7
 10803 0200 F2       		.byte	0xf2
 10804 0201 BD000000 		.4byte	0xbd
 10805 0205 0C       		.byte	0xc
 10806 0206 0F       		.uleb128 0xf
 10807 0207 EC0F0000 		.4byte	.LASF44
 10808 020b 07       		.byte	0x7
 10809 020c F3       		.byte	0xf3
 10810 020d BD000000 		.4byte	0xbd
 10811 0211 10       		.byte	0x10
 10812 0212 0F       		.uleb128 0xf
 10813 0213 E7070000 		.4byte	.LASF45
 10814 0217 07       		.byte	0x7
 10815 0218 F4       		.byte	0xf4
 10816 0219 BD000000 		.4byte	0xbd
 10817 021d 14       		.byte	0x14
 10818 021e 0E       		.uleb128 0xe
 10819 021f 726F7400 		.ascii	"rot\000"
 10820 0223 07       		.byte	0x7
 10821 0224 F5       		.byte	0xf5
 10822 0225 53020000 		.4byte	0x253
 10823 0229 18       		.byte	0x18
 10824 022a 0E       		.uleb128 0xe
 10825 022b 76656C00 		.ascii	"vel\000"
 10826 022f 07       		.byte	0x7
 10827 0230 F6       		.byte	0xf6
 10828 0231 43020000 		.4byte	0x243
 10829 0235 1C       		.byte	0x1c
 10830 0236 0E       		.uleb128 0xe
 10831 0237 61636300 		.ascii	"acc\000"
 10832 023b 07       		.byte	0x7
 10833 023c F7       		.byte	0xf7
 10834 023d 43020000 		.4byte	0x243
 10835 0241 28       		.byte	0x28
 10836 0242 00       		.byte	0
 10837 0243 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 246


 10838 0244 BD000000 		.4byte	0xbd
 10839 0248 53020000 		.4byte	0x253
 10840 024c 08       		.uleb128 0x8
 10841 024d 0E010000 		.4byte	0x10e
 10842 0251 02       		.byte	0x2
 10843 0252 00       		.byte	0
 10844 0253 07       		.uleb128 0x7
 10845 0254 A5000000 		.4byte	0xa5
 10846 0258 63020000 		.4byte	0x263
 10847 025c 08       		.uleb128 0x8
 10848 025d 0E010000 		.4byte	0x10e
 10849 0261 02       		.byte	0x2
 10850 0262 00       		.byte	0
 10851 0263 0D       		.uleb128 0xd
 10852 0264 710A0000 		.4byte	.LASF46
 10853 0268 28       		.byte	0x28
 10854 0269 07       		.byte	0x7
 10855 026a FA       		.byte	0xfa
 10856 026b 94020000 		.4byte	0x294
 10857 026f 0E       		.uleb128 0xe
 10858 0270 656D6700 		.ascii	"emg\000"
 10859 0274 07       		.byte	0x7
 10860 0275 FB       		.byte	0xfb
 10861 0276 94020000 		.4byte	0x294
 10862 027a 00       		.byte	0
 10863 027b 0F       		.uleb128 0xf
 10864 027c 280B0000 		.4byte	.LASF47
 10865 0280 07       		.byte	0x7
 10866 0281 FC       		.byte	0xfc
 10867 0282 A4020000 		.4byte	0x2a4
 10868 0286 08       		.byte	0x8
 10869 0287 0F       		.uleb128 0xf
 10870 0288 090F0000 		.4byte	.LASF48
 10871 028c 07       		.byte	0x7
 10872 028d FD       		.byte	0xfd
 10873 028e 94020000 		.4byte	0x294
 10874 0292 20       		.byte	0x20
 10875 0293 00       		.byte	0
 10876 0294 07       		.uleb128 0x7
 10877 0295 BD000000 		.4byte	0xbd
 10878 0299 A4020000 		.4byte	0x2a4
 10879 029d 08       		.uleb128 0x8
 10880 029e 0E010000 		.4byte	0x10e
 10881 02a2 01       		.byte	0x1
 10882 02a3 00       		.byte	0
 10883 02a4 07       		.uleb128 0x7
 10884 02a5 BD000000 		.4byte	0xbd
 10885 02a9 B4020000 		.4byte	0x2b4
 10886 02ad 08       		.uleb128 0x8
 10887 02ae 0E010000 		.4byte	0x10e
 10888 02b2 05       		.byte	0x5
 10889 02b3 00       		.byte	0
 10890 02b4 10       		.uleb128 0x10
 10891 02b5 A9000000 		.4byte	.LASF49
 10892 02b9 86       		.byte	0x86
 10893 02ba 07       		.byte	0x7
 10894 02bb 0801     		.2byte	0x108
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 247


 10895 02bd F6020000 		.4byte	0x2f6
 10896 02c1 11       		.uleb128 0x11
 10897 02c2 2C060000 		.4byte	.LASF50
 10898 02c6 07       		.byte	0x7
 10899 02c7 0901     		.2byte	0x109
 10900 02c9 F6020000 		.4byte	0x2f6
 10901 02cd 00       		.byte	0
 10902 02ce 11       		.uleb128 0x11
 10903 02cf BA0C0000 		.4byte	.LASF51
 10904 02d3 07       		.byte	0x7
 10905 02d4 0A01     		.2byte	0x10a
 10906 02d6 B1000000 		.4byte	0xb1
 10907 02da 80       		.byte	0x80
 10908 02db 12       		.uleb128 0x12
 10909 02dc 696E6400 		.ascii	"ind\000"
 10910 02e0 07       		.byte	0x7
 10911 02e1 0B01     		.2byte	0x10b
 10912 02e3 B1000000 		.4byte	0xb1
 10913 02e7 82       		.byte	0x82
 10914 02e8 11       		.uleb128 0x11
 10915 02e9 01020000 		.4byte	.LASF52
 10916 02ed 07       		.byte	0x7
 10917 02ee 0C01     		.2byte	0x10c
 10918 02f0 81000000 		.4byte	0x81
 10919 02f4 84       		.byte	0x84
 10920 02f5 00       		.byte	0
 10921 02f6 07       		.uleb128 0x7
 10922 02f7 81000000 		.4byte	0x81
 10923 02fb 06030000 		.4byte	0x306
 10924 02ff 08       		.uleb128 0x8
 10925 0300 0E010000 		.4byte	0x10e
 10926 0304 7F       		.byte	0x7f
 10927 0305 00       		.byte	0
 10928 0306 10       		.uleb128 0x10
 10929 0307 7F030000 		.4byte	.LASF53
 10930 030b 70       		.byte	0x70
 10931 030c 07       		.byte	0x7
 10932 030d 1501     		.2byte	0x115
 10933 030f A3030000 		.4byte	0x3a3
 10934 0313 11       		.uleb128 0x11
 10935 0314 00000000 		.4byte	.LASF54
 10936 0318 07       		.byte	0x7
 10937 0319 1601     		.2byte	0x116
 10938 031b A3030000 		.4byte	0x3a3
 10939 031f 00       		.byte	0
 10940 0320 11       		.uleb128 0x11
 10941 0321 BE010000 		.4byte	.LASF55
 10942 0325 07       		.byte	0x7
 10943 0326 1701     		.2byte	0x117
 10944 0328 B3030000 		.4byte	0x3b3
 10945 032c 08       		.byte	0x8
 10946 032d 11       		.uleb128 0x11
 10947 032e 6A0B0000 		.4byte	.LASF56
 10948 0332 07       		.byte	0x7
 10949 0333 1801     		.2byte	0x118
 10950 0335 C3030000 		.4byte	0x3c3
 10951 0339 30       		.byte	0x30
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 248


 10952 033a 11       		.uleb128 0x11
 10953 033b 55010000 		.4byte	.LASF57
 10954 033f 07       		.byte	0x7
 10955 0340 1901     		.2byte	0x119
 10956 0342 99000000 		.4byte	0x99
 10957 0346 40       		.byte	0x40
 10958 0347 11       		.uleb128 0x11
 10959 0348 47120000 		.4byte	.LASF58
 10960 034c 07       		.byte	0x7
 10961 034d 1A01     		.2byte	0x11a
 10962 034f 99000000 		.4byte	0x99
 10963 0353 44       		.byte	0x44
 10964 0354 11       		.uleb128 0x11
 10965 0355 B1000000 		.4byte	.LASF59
 10966 0359 07       		.byte	0x7
 10967 035a 1B01     		.2byte	0x11b
 10968 035c 99000000 		.4byte	0x99
 10969 0360 48       		.byte	0x48
 10970 0361 11       		.uleb128 0x11
 10971 0362 05080000 		.4byte	.LASF60
 10972 0366 07       		.byte	0x7
 10973 0367 1C01     		.2byte	0x11c
 10974 0369 99000000 		.4byte	0x99
 10975 036d 4C       		.byte	0x4c
 10976 036e 11       		.uleb128 0x11
 10977 036f 19000000 		.4byte	.LASF61
 10978 0373 07       		.byte	0x7
 10979 0374 1D01     		.2byte	0x11d
 10980 0376 99000000 		.4byte	0x99
 10981 037a 50       		.byte	0x50
 10982 037b 11       		.uleb128 0x11
 10983 037c 68020000 		.4byte	.LASF62
 10984 0380 07       		.byte	0x7
 10985 0381 1E01     		.2byte	0x11e
 10986 0383 A3030000 		.4byte	0x3a3
 10987 0387 54       		.byte	0x54
 10988 0388 11       		.uleb128 0x11
 10989 0389 C00B0000 		.4byte	.LASF63
 10990 038d 07       		.byte	0x7
 10991 038e 1F01     		.2byte	0x11f
 10992 0390 A3030000 		.4byte	0x3a3
 10993 0394 5C       		.byte	0x5c
 10994 0395 11       		.uleb128 0x11
 10995 0396 4C030000 		.4byte	.LASF64
 10996 039a 07       		.byte	0x7
 10997 039b 2001     		.2byte	0x120
 10998 039d D3030000 		.4byte	0x3d3
 10999 03a1 64       		.byte	0x64
 11000 03a2 00       		.byte	0
 11001 03a3 07       		.uleb128 0x7
 11002 03a4 99000000 		.4byte	0x99
 11003 03a8 B3030000 		.4byte	0x3b3
 11004 03ac 08       		.uleb128 0x8
 11005 03ad 0E010000 		.4byte	0x10e
 11006 03b1 01       		.byte	0x1
 11007 03b2 00       		.byte	0
 11008 03b3 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 249


 11009 03b4 99000000 		.4byte	0x99
 11010 03b8 C3030000 		.4byte	0x3c3
 11011 03bc 08       		.uleb128 0x8
 11012 03bd 0E010000 		.4byte	0x10e
 11013 03c1 09       		.byte	0x9
 11014 03c2 00       		.byte	0
 11015 03c3 07       		.uleb128 0x7
 11016 03c4 99000000 		.4byte	0x99
 11017 03c8 D3030000 		.4byte	0x3d3
 11018 03cc 08       		.uleb128 0x8
 11019 03cd 0E010000 		.4byte	0x10e
 11020 03d1 03       		.byte	0x3
 11021 03d2 00       		.byte	0
 11022 03d3 07       		.uleb128 0x7
 11023 03d4 81000000 		.4byte	0x81
 11024 03d8 E3030000 		.4byte	0x3e3
 11025 03dc 08       		.uleb128 0x8
 11026 03dd 0E010000 		.4byte	0x10e
 11027 03e1 0B       		.byte	0xb
 11028 03e2 00       		.byte	0
 11029 03e3 10       		.uleb128 0x10
 11030 03e4 24020000 		.4byte	.LASF65
 11031 03e8 10       		.byte	0x10
 11032 03e9 07       		.byte	0x7
 11033 03ea 2701     		.2byte	0x127
 11034 03ec 72040000 		.4byte	0x472
 11035 03f0 12       		.uleb128 0x12
 11036 03f1 696400   		.ascii	"id\000"
 11037 03f4 07       		.byte	0x7
 11038 03f5 2801     		.2byte	0x128
 11039 03f7 81000000 		.4byte	0x81
 11040 03fb 00       		.byte	0
 11041 03fc 11       		.uleb128 0x11
 11042 03fd 240F0000 		.4byte	.LASF66
 11043 0401 07       		.byte	0x7
 11044 0402 2901     		.2byte	0x129
 11045 0404 72040000 		.4byte	0x472
 11046 0408 01       		.byte	0x1
 11047 0409 11       		.uleb128 0x11
 11048 040a 600F0000 		.4byte	.LASF67
 11049 040e 07       		.byte	0x7
 11050 040f 2A01     		.2byte	0x12a
 11051 0411 72040000 		.4byte	0x472
 11052 0415 04       		.byte	0x4
 11053 0416 11       		.uleb128 0x11
 11054 0417 D0040000 		.4byte	.LASF68
 11055 041b 07       		.byte	0x7
 11056 041c 2B01     		.2byte	0x12b
 11057 041e 81000000 		.4byte	0x81
 11058 0422 07       		.byte	0x7
 11059 0423 11       		.uleb128 0x11
 11060 0424 08030000 		.4byte	.LASF69
 11061 0428 07       		.byte	0x7
 11062 0429 2C01     		.2byte	0x12c
 11063 042b 81000000 		.4byte	0x81
 11064 042f 08       		.byte	0x8
 11065 0430 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 250


 11066 0431 4A020000 		.4byte	.LASF70
 11067 0435 07       		.byte	0x7
 11068 0436 2D01     		.2byte	0x12d
 11069 0438 81000000 		.4byte	0x81
 11070 043c 09       		.byte	0x9
 11071 043d 11       		.uleb128 0x11
 11072 043e 97100000 		.4byte	.LASF71
 11073 0442 07       		.byte	0x7
 11074 0443 2E01     		.2byte	0x12e
 11075 0445 81000000 		.4byte	0x81
 11076 0449 0A       		.byte	0xa
 11077 044a 11       		.uleb128 0x11
 11078 044b 25100000 		.4byte	.LASF72
 11079 044f 07       		.byte	0x7
 11080 0450 2F01     		.2byte	0x12f
 11081 0452 81000000 		.4byte	0x81
 11082 0456 0B       		.byte	0xb
 11083 0457 11       		.uleb128 0x11
 11084 0458 DA0D0000 		.4byte	.LASF73
 11085 045c 07       		.byte	0x7
 11086 045d 3001     		.2byte	0x130
 11087 045f 81000000 		.4byte	0x81
 11088 0463 0C       		.byte	0xc
 11089 0464 11       		.uleb128 0x11
 11090 0465 4C030000 		.4byte	.LASF64
 11091 0469 07       		.byte	0x7
 11092 046a 3101     		.2byte	0x131
 11093 046c 72040000 		.4byte	0x472
 11094 0470 0D       		.byte	0xd
 11095 0471 00       		.byte	0
 11096 0472 07       		.uleb128 0x7
 11097 0473 81000000 		.4byte	0x81
 11098 0477 82040000 		.4byte	0x482
 11099 047b 08       		.uleb128 0x8
 11100 047c 0E010000 		.4byte	0x10e
 11101 0480 02       		.byte	0x2
 11102 0481 00       		.byte	0
 11103 0482 10       		.uleb128 0x10
 11104 0483 E5110000 		.4byte	.LASF74
 11105 0487 70       		.byte	0x70
 11106 0488 07       		.byte	0x7
 11107 0489 3801     		.2byte	0x138
 11108 048b FC050000 		.4byte	0x5fc
 11109 048f 12       		.uleb128 0x12
 11110 0490 6B5F7000 		.ascii	"k_p\000"
 11111 0494 07       		.byte	0x7
 11112 0495 3901     		.2byte	0x139
 11113 0497 BD000000 		.4byte	0xbd
 11114 049b 00       		.byte	0
 11115 049c 12       		.uleb128 0x12
 11116 049d 6B5F6900 		.ascii	"k_i\000"
 11117 04a1 07       		.byte	0x7
 11118 04a2 3A01     		.2byte	0x13a
 11119 04a4 BD000000 		.4byte	0xbd
 11120 04a8 04       		.byte	0x4
 11121 04a9 12       		.uleb128 0x12
 11122 04aa 6B5F6400 		.ascii	"k_d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 251


 11123 04ae 07       		.byte	0x7
 11124 04af 3B01     		.2byte	0x13b
 11125 04b1 BD000000 		.4byte	0xbd
 11126 04b5 08       		.byte	0x8
 11127 04b6 11       		.uleb128 0x11
 11128 04b7 130D0000 		.4byte	.LASF75
 11129 04bb 07       		.byte	0x7
 11130 04bc 3C01     		.2byte	0x13c
 11131 04be BD000000 		.4byte	0xbd
 11132 04c2 0C       		.byte	0xc
 11133 04c3 11       		.uleb128 0x11
 11134 04c4 89050000 		.4byte	.LASF76
 11135 04c8 07       		.byte	0x7
 11136 04c9 3D01     		.2byte	0x13d
 11137 04cb BD000000 		.4byte	0xbd
 11138 04cf 10       		.byte	0x10
 11139 04d0 11       		.uleb128 0x11
 11140 04d1 71050000 		.4byte	.LASF77
 11141 04d5 07       		.byte	0x7
 11142 04d6 3E01     		.2byte	0x13e
 11143 04d8 BD000000 		.4byte	0xbd
 11144 04dc 14       		.byte	0x14
 11145 04dd 11       		.uleb128 0x11
 11146 04de E50F0000 		.4byte	.LASF78
 11147 04e2 07       		.byte	0x7
 11148 04e3 3F01     		.2byte	0x13f
 11149 04e5 BD000000 		.4byte	0xbd
 11150 04e9 18       		.byte	0x18
 11151 04ea 11       		.uleb128 0x11
 11152 04eb 25060000 		.4byte	.LASF79
 11153 04ef 07       		.byte	0x7
 11154 04f0 4001     		.2byte	0x140
 11155 04f2 BD000000 		.4byte	0xbd
 11156 04f6 1C       		.byte	0x1c
 11157 04f7 11       		.uleb128 0x11
 11158 04f8 F40E0000 		.4byte	.LASF80
 11159 04fc 07       		.byte	0x7
 11160 04fd 4101     		.2byte	0x141
 11161 04ff BD000000 		.4byte	0xbd
 11162 0503 20       		.byte	0x20
 11163 0504 11       		.uleb128 0x11
 11164 0505 33060000 		.4byte	.LASF81
 11165 0509 07       		.byte	0x7
 11166 050a 4201     		.2byte	0x142
 11167 050c BD000000 		.4byte	0xbd
 11168 0510 24       		.byte	0x24
 11169 0511 11       		.uleb128 0x11
 11170 0512 7B070000 		.4byte	.LASF82
 11171 0516 07       		.byte	0x7
 11172 0517 4301     		.2byte	0x143
 11173 0519 BD000000 		.4byte	0xbd
 11174 051d 28       		.byte	0x28
 11175 051e 11       		.uleb128 0x11
 11176 051f BF120000 		.4byte	.LASF83
 11177 0523 07       		.byte	0x7
 11178 0524 4401     		.2byte	0x144
 11179 0526 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 252


 11180 052a 2C       		.byte	0x2c
 11181 052b 11       		.uleb128 0x11
 11182 052c 15080000 		.4byte	.LASF84
 11183 0530 07       		.byte	0x7
 11184 0531 4501     		.2byte	0x145
 11185 0533 81000000 		.4byte	0x81
 11186 0537 30       		.byte	0x30
 11187 0538 11       		.uleb128 0x11
 11188 0539 CE0F0000 		.4byte	.LASF85
 11189 053d 07       		.byte	0x7
 11190 053e 4601     		.2byte	0x146
 11191 0540 81000000 		.4byte	0x81
 11192 0544 31       		.byte	0x31
 11193 0545 11       		.uleb128 0x11
 11194 0546 250D0000 		.4byte	.LASF86
 11195 054a 07       		.byte	0x7
 11196 054b 4701     		.2byte	0x147
 11197 054d 81000000 		.4byte	0x81
 11198 0551 32       		.byte	0x32
 11199 0552 11       		.uleb128 0x11
 11200 0553 02120000 		.4byte	.LASF87
 11201 0557 07       		.byte	0x7
 11202 0558 4801     		.2byte	0x148
 11203 055a 81000000 		.4byte	0x81
 11204 055e 33       		.byte	0x33
 11205 055f 11       		.uleb128 0x11
 11206 0560 D6000000 		.4byte	.LASF88
 11207 0564 07       		.byte	0x7
 11208 0565 4901     		.2byte	0x149
 11209 0567 BD000000 		.4byte	0xbd
 11210 056b 34       		.byte	0x34
 11211 056c 11       		.uleb128 0x11
 11212 056d B9050000 		.4byte	.LASF89
 11213 0571 07       		.byte	0x7
 11214 0572 4A01     		.2byte	0x14a
 11215 0574 BD000000 		.4byte	0xbd
 11216 0578 38       		.byte	0x38
 11217 0579 11       		.uleb128 0x11
 11218 057a 2D0A0000 		.4byte	.LASF90
 11219 057e 07       		.byte	0x7
 11220 057f 4B01     		.2byte	0x14b
 11221 0581 BD000000 		.4byte	0xbd
 11222 0585 3C       		.byte	0x3c
 11223 0586 11       		.uleb128 0x11
 11224 0587 25050000 		.4byte	.LASF91
 11225 058b 07       		.byte	0x7
 11226 058c 4C01     		.2byte	0x14c
 11227 058e BD000000 		.4byte	0xbd
 11228 0592 40       		.byte	0x40
 11229 0593 11       		.uleb128 0x11
 11230 0594 3F010000 		.4byte	.LASF92
 11231 0598 07       		.byte	0x7
 11232 0599 4D01     		.2byte	0x14d
 11233 059b FC050000 		.4byte	0x5fc
 11234 059f 44       		.byte	0x44
 11235 05a0 11       		.uleb128 0x11
 11236 05a1 69120000 		.4byte	.LASF93
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 253


 11237 05a5 07       		.byte	0x7
 11238 05a6 4E01     		.2byte	0x14e
 11239 05a8 B1000000 		.4byte	0xb1
 11240 05ac 5C       		.byte	0x5c
 11241 05ad 11       		.uleb128 0x11
 11242 05ae 81080000 		.4byte	.LASF94
 11243 05b2 07       		.byte	0x7
 11244 05b3 4F01     		.2byte	0x14f
 11245 05b5 81000000 		.4byte	0x81
 11246 05b9 5E       		.byte	0x5e
 11247 05ba 11       		.uleb128 0x11
 11248 05bb C80A0000 		.4byte	.LASF95
 11249 05bf 07       		.byte	0x7
 11250 05c0 5001     		.2byte	0x150
 11251 05c2 81000000 		.4byte	0x81
 11252 05c6 5F       		.byte	0x5f
 11253 05c7 11       		.uleb128 0x11
 11254 05c8 DB040000 		.4byte	.LASF96
 11255 05cc 07       		.byte	0x7
 11256 05cd 5101     		.2byte	0x151
 11257 05cf 81000000 		.4byte	0x81
 11258 05d3 60       		.byte	0x60
 11259 05d4 11       		.uleb128 0x11
 11260 05d5 60050000 		.4byte	.LASF97
 11261 05d9 07       		.byte	0x7
 11262 05da 5201     		.2byte	0x152
 11263 05dc 81000000 		.4byte	0x81
 11264 05e0 61       		.byte	0x61
 11265 05e1 11       		.uleb128 0x11
 11266 05e2 84040000 		.4byte	.LASF98
 11267 05e6 07       		.byte	0x7
 11268 05e7 5301     		.2byte	0x153
 11269 05e9 81000000 		.4byte	0x81
 11270 05ed 62       		.byte	0x62
 11271 05ee 11       		.uleb128 0x11
 11272 05ef 4C030000 		.4byte	.LASF64
 11273 05f3 07       		.byte	0x7
 11274 05f4 5401     		.2byte	0x154
 11275 05f6 0C060000 		.4byte	0x60c
 11276 05fa 63       		.byte	0x63
 11277 05fb 00       		.byte	0
 11278 05fc 07       		.uleb128 0x7
 11279 05fd D5000000 		.4byte	0xd5
 11280 0601 0C060000 		.4byte	0x60c
 11281 0605 08       		.uleb128 0x8
 11282 0606 0E010000 		.4byte	0x10e
 11283 060a 05       		.byte	0x5
 11284 060b 00       		.byte	0
 11285 060c 07       		.uleb128 0x7
 11286 060d 81000000 		.4byte	0x81
 11287 0611 1C060000 		.4byte	0x61c
 11288 0615 08       		.uleb128 0x8
 11289 0616 0E010000 		.4byte	0x10e
 11290 061a 0C       		.byte	0xc
 11291 061b 00       		.byte	0
 11292 061c 10       		.uleb128 0x10
 11293 061d D6100000 		.4byte	.LASF99
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 254


 11294 0621 30       		.byte	0x30
 11295 0622 07       		.byte	0x7
 11296 0623 5B01     		.2byte	0x15b
 11297 0625 9F060000 		.4byte	0x69f
 11298 0629 11       		.uleb128 0x11
 11299 062a E7090000 		.4byte	.LASF100
 11300 062e 07       		.byte	0x7
 11301 062f 5C01     		.2byte	0x15c
 11302 0631 9F060000 		.4byte	0x69f
 11303 0635 00       		.byte	0
 11304 0636 12       		.uleb128 0x12
 11305 0637 72657300 		.ascii	"res\000"
 11306 063b 07       		.byte	0x7
 11307 063c 5D01     		.2byte	0x15d
 11308 063e 72040000 		.4byte	0x472
 11309 0642 05       		.byte	0x5
 11310 0643 11       		.uleb128 0x11
 11311 0644 41080000 		.4byte	.LASF101
 11312 0648 07       		.byte	0x7
 11313 0649 5E01     		.2byte	0x15e
 11314 064b 43020000 		.4byte	0x243
 11315 064f 08       		.byte	0x8
 11316 0650 11       		.uleb128 0x11
 11317 0651 82050000 		.4byte	.LASF102
 11318 0655 07       		.byte	0x7
 11319 0656 5F01     		.2byte	0x15f
 11320 0658 AF060000 		.4byte	0x6af
 11321 065c 14       		.byte	0x14
 11322 065d 11       		.uleb128 0x11
 11323 065e 0B0C0000 		.4byte	.LASF103
 11324 0662 07       		.byte	0x7
 11325 0663 6001     		.2byte	0x160
 11326 0665 81000000 		.4byte	0x81
 11327 0669 20       		.byte	0x20
 11328 066a 11       		.uleb128 0x11
 11329 066b 07020000 		.4byte	.LASF104
 11330 066f 07       		.byte	0x7
 11331 0670 6101     		.2byte	0x161
 11332 0672 72040000 		.4byte	0x472
 11333 0676 21       		.byte	0x21
 11334 0677 11       		.uleb128 0x11
 11335 0678 570B0000 		.4byte	.LASF105
 11336 067c 07       		.byte	0x7
 11337 067d 6201     		.2byte	0x162
 11338 067f A5000000 		.4byte	0xa5
 11339 0683 24       		.byte	0x24
 11340 0684 11       		.uleb128 0x11
 11341 0685 FC0D0000 		.4byte	.LASF106
 11342 0689 07       		.byte	0x7
 11343 068a 6301     		.2byte	0x163
 11344 068c 53020000 		.4byte	0x253
 11345 0690 25       		.byte	0x25
 11346 0691 11       		.uleb128 0x11
 11347 0692 4C030000 		.4byte	.LASF64
 11348 0696 07       		.byte	0x7
 11349 0697 6401     		.2byte	0x164
 11350 0699 BF060000 		.4byte	0x6bf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 255


 11351 069d 28       		.byte	0x28
 11352 069e 00       		.byte	0
 11353 069f 07       		.uleb128 0x7
 11354 06a0 81000000 		.4byte	0x81
 11355 06a4 AF060000 		.4byte	0x6af
 11356 06a8 08       		.uleb128 0x8
 11357 06a9 0E010000 		.4byte	0x10e
 11358 06ad 04       		.byte	0x4
 11359 06ae 00       		.byte	0
 11360 06af 07       		.uleb128 0x7
 11361 06b0 C9000000 		.4byte	0xc9
 11362 06b4 BF060000 		.4byte	0x6bf
 11363 06b8 08       		.uleb128 0x8
 11364 06b9 0E010000 		.4byte	0x10e
 11365 06bd 02       		.byte	0x2
 11366 06be 00       		.byte	0
 11367 06bf 07       		.uleb128 0x7
 11368 06c0 81000000 		.4byte	0x81
 11369 06c4 CF060000 		.4byte	0x6cf
 11370 06c8 08       		.uleb128 0x8
 11371 06c9 0E010000 		.4byte	0x10e
 11372 06cd 07       		.byte	0x7
 11373 06ce 00       		.byte	0
 11374 06cf 10       		.uleb128 0x10
 11375 06d0 B7010000 		.4byte	.LASF107
 11376 06d4 10       		.byte	0x10
 11377 06d5 07       		.byte	0x7
 11378 06d6 6B01     		.2byte	0x16b
 11379 06d8 1E070000 		.4byte	0x71e
 11380 06dc 11       		.uleb128 0x11
 11381 06dd 360B0000 		.4byte	.LASF108
 11382 06e1 07       		.byte	0x7
 11383 06e2 6C01     		.2byte	0x16c
 11384 06e4 1E070000 		.4byte	0x71e
 11385 06e8 00       		.byte	0
 11386 06e9 11       		.uleb128 0x11
 11387 06ea 5B120000 		.4byte	.LASF109
 11388 06ee 07       		.byte	0x7
 11389 06ef 6D01     		.2byte	0x16d
 11390 06f1 A3030000 		.4byte	0x3a3
 11391 06f5 04       		.byte	0x4
 11392 06f6 11       		.uleb128 0x11
 11393 06f7 CF050000 		.4byte	.LASF110
 11394 06fb 07       		.byte	0x7
 11395 06fc 6E01     		.2byte	0x16e
 11396 06fe 2E070000 		.4byte	0x72e
 11397 0702 0C       		.byte	0xc
 11398 0703 11       		.uleb128 0x11
 11399 0704 160E0000 		.4byte	.LASF111
 11400 0708 07       		.byte	0x7
 11401 0709 6F01     		.2byte	0x16f
 11402 070b 81000000 		.4byte	0x81
 11403 070f 0E       		.byte	0xe
 11404 0710 11       		.uleb128 0x11
 11405 0711 33040000 		.4byte	.LASF112
 11406 0715 07       		.byte	0x7
 11407 0716 7001     		.2byte	0x170
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 256


 11408 0718 81000000 		.4byte	0x81
 11409 071c 0F       		.byte	0xf
 11410 071d 00       		.byte	0
 11411 071e 07       		.uleb128 0x7
 11412 071f 8D000000 		.4byte	0x8d
 11413 0723 2E070000 		.4byte	0x72e
 11414 0727 08       		.uleb128 0x8
 11415 0728 0E010000 		.4byte	0x10e
 11416 072c 01       		.byte	0x1
 11417 072d 00       		.byte	0
 11418 072e 07       		.uleb128 0x7
 11419 072f 81000000 		.4byte	0x81
 11420 0733 3E070000 		.4byte	0x73e
 11421 0737 08       		.uleb128 0x8
 11422 0738 0E010000 		.4byte	0x10e
 11423 073c 01       		.byte	0x1
 11424 073d 00       		.byte	0
 11425 073e 10       		.uleb128 0x10
 11426 073f F20A0000 		.4byte	.LASF113
 11427 0743 20       		.byte	0x20
 11428 0744 07       		.byte	0x7
 11429 0745 7701     		.2byte	0x177
 11430 0747 80070000 		.4byte	0x780
 11431 074b 11       		.uleb128 0x11
 11432 074c 8F020000 		.4byte	.LASF114
 11433 0750 07       		.byte	0x7
 11434 0751 7801     		.2byte	0x178
 11435 0753 81000000 		.4byte	0x81
 11436 0757 00       		.byte	0
 11437 0758 11       		.uleb128 0x11
 11438 0759 B4100000 		.4byte	.LASF115
 11439 075d 07       		.byte	0x7
 11440 075e 7901     		.2byte	0x179
 11441 0760 81000000 		.4byte	0x81
 11442 0764 01       		.byte	0x1
 11443 0765 11       		.uleb128 0x11
 11444 0766 620A0000 		.4byte	.LASF116
 11445 076a 07       		.byte	0x7
 11446 076b 7A01     		.2byte	0x17a
 11447 076d 80070000 		.4byte	0x780
 11448 0771 02       		.byte	0x2
 11449 0772 11       		.uleb128 0x11
 11450 0773 4C030000 		.4byte	.LASF64
 11451 0777 07       		.byte	0x7
 11452 0778 7B01     		.2byte	0x17b
 11453 077a 9F060000 		.4byte	0x69f
 11454 077e 1B       		.byte	0x1b
 11455 077f 00       		.byte	0
 11456 0780 07       		.uleb128 0x7
 11457 0781 81000000 		.4byte	0x81
 11458 0785 96070000 		.4byte	0x796
 11459 0789 08       		.uleb128 0x8
 11460 078a 0E010000 		.4byte	0x10e
 11461 078e 04       		.byte	0x4
 11462 078f 08       		.uleb128 0x8
 11463 0790 0E010000 		.4byte	0x10e
 11464 0794 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 257


 11465 0795 00       		.byte	0
 11466 0796 10       		.uleb128 0x10
 11467 0797 090E0000 		.4byte	.LASF117
 11468 079b 20       		.byte	0x20
 11469 079c 07       		.byte	0x7
 11470 079d 8201     		.2byte	0x182
 11471 079f F2070000 		.4byte	0x7f2
 11472 07a3 11       		.uleb128 0x11
 11473 07a4 010C0000 		.4byte	.LASF118
 11474 07a8 07       		.byte	0x7
 11475 07a9 8301     		.2byte	0x183
 11476 07ab F2070000 		.4byte	0x7f2
 11477 07af 00       		.byte	0
 11478 07b0 11       		.uleb128 0x11
 11479 07b1 AF0F0000 		.4byte	.LASF119
 11480 07b5 07       		.byte	0x7
 11481 07b6 8401     		.2byte	0x184
 11482 07b8 81000000 		.4byte	0x81
 11483 07bc 06       		.byte	0x6
 11484 07bd 11       		.uleb128 0x11
 11485 07be 6B000000 		.4byte	.LASF120
 11486 07c2 07       		.byte	0x7
 11487 07c3 8501     		.2byte	0x185
 11488 07c5 81000000 		.4byte	0x81
 11489 07c9 07       		.byte	0x7
 11490 07ca 11       		.uleb128 0x11
 11491 07cb 0E060000 		.4byte	.LASF121
 11492 07cf 07       		.byte	0x7
 11493 07d0 8601     		.2byte	0x186
 11494 07d2 D3030000 		.4byte	0x3d3
 11495 07d6 08       		.byte	0x8
 11496 07d7 11       		.uleb128 0x11
 11497 07d8 9D020000 		.4byte	.LASF122
 11498 07dc 07       		.byte	0x7
 11499 07dd 8701     		.2byte	0x187
 11500 07df 81000000 		.4byte	0x81
 11501 07e3 14       		.byte	0x14
 11502 07e4 11       		.uleb128 0x11
 11503 07e5 4C030000 		.4byte	.LASF64
 11504 07e9 07       		.byte	0x7
 11505 07ea 8801     		.2byte	0x188
 11506 07ec 02080000 		.4byte	0x802
 11507 07f0 15       		.byte	0x15
 11508 07f1 00       		.byte	0
 11509 07f2 07       		.uleb128 0x7
 11510 07f3 81000000 		.4byte	0x81
 11511 07f7 02080000 		.4byte	0x802
 11512 07fb 08       		.uleb128 0x8
 11513 07fc 0E010000 		.4byte	0x10e
 11514 0800 05       		.byte	0x5
 11515 0801 00       		.byte	0
 11516 0802 07       		.uleb128 0x7
 11517 0803 81000000 		.4byte	0x81
 11518 0807 12080000 		.4byte	0x812
 11519 080b 08       		.uleb128 0x8
 11520 080c 0E010000 		.4byte	0x10e
 11521 0810 0A       		.byte	0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 258


 11522 0811 00       		.byte	0
 11523 0812 10       		.uleb128 0x10
 11524 0813 F40D0000 		.4byte	.LASF123
 11525 0817 20       		.byte	0x20
 11526 0818 07       		.byte	0x7
 11527 0819 8F01     		.2byte	0x18f
 11528 081b 47080000 		.4byte	0x847
 11529 081f 11       		.uleb128 0x11
 11530 0820 05040000 		.4byte	.LASF124
 11531 0824 07       		.byte	0x7
 11532 0825 9001     		.2byte	0x190
 11533 0827 15010000 		.4byte	0x115
 11534 082b 00       		.byte	0
 11535 082c 11       		.uleb128 0x11
 11536 082d 25030000 		.4byte	.LASF125
 11537 0831 07       		.byte	0x7
 11538 0832 9101     		.2byte	0x191
 11539 0834 CF060000 		.4byte	0x6cf
 11540 0838 08       		.byte	0x8
 11541 0839 11       		.uleb128 0x11
 11542 083a 4C030000 		.4byte	.LASF64
 11543 083e 07       		.byte	0x7
 11544 083f 9201     		.2byte	0x192
 11545 0841 BF060000 		.4byte	0x6bf
 11546 0845 18       		.byte	0x18
 11547 0846 00       		.byte	0
 11548 0847 10       		.uleb128 0x10
 11549 0848 50090000 		.4byte	.LASF126
 11550 084c 10       		.byte	0x10
 11551 084d 07       		.byte	0x7
 11552 084e 9901     		.2byte	0x199
 11553 0850 96080000 		.4byte	0x896
 11554 0854 11       		.uleb128 0x11
 11555 0855 68080000 		.4byte	.LASF127
 11556 0859 07       		.byte	0x7
 11557 085a 9A01     		.2byte	0x19a
 11558 085c BD000000 		.4byte	0xbd
 11559 0860 00       		.byte	0
 11560 0861 11       		.uleb128 0x11
 11561 0862 A1120000 		.4byte	.LASF128
 11562 0866 07       		.byte	0x7
 11563 0867 9B01     		.2byte	0x19b
 11564 0869 BD000000 		.4byte	0xbd
 11565 086d 04       		.byte	0x4
 11566 086e 11       		.uleb128 0x11
 11567 086f D9050000 		.4byte	.LASF129
 11568 0873 07       		.byte	0x7
 11569 0874 9C01     		.2byte	0x19c
 11570 0876 BD000000 		.4byte	0xbd
 11571 087a 08       		.byte	0x8
 11572 087b 11       		.uleb128 0x11
 11573 087c 51070000 		.4byte	.LASF130
 11574 0880 07       		.byte	0x7
 11575 0881 9D01     		.2byte	0x19d
 11576 0883 81000000 		.4byte	0x81
 11577 0887 0C       		.byte	0xc
 11578 0888 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 259


 11579 0889 4C030000 		.4byte	.LASF64
 11580 088d 07       		.byte	0x7
 11581 088e 9E01     		.2byte	0x19e
 11582 0890 72040000 		.4byte	0x472
 11583 0894 0D       		.byte	0xd
 11584 0895 00       		.byte	0
 11585 0896 10       		.uleb128 0x10
 11586 0897 CA0E0000 		.4byte	.LASF131
 11587 089b 10       		.byte	0x10
 11588 089c 07       		.byte	0x7
 11589 089d A501     		.2byte	0x1a5
 11590 089f D8080000 		.4byte	0x8d8
 11591 08a3 11       		.uleb128 0x11
 11592 08a4 64070000 		.4byte	.LASF132
 11593 08a8 07       		.byte	0x7
 11594 08a9 A601     		.2byte	0x1a6
 11595 08ab 8D000000 		.4byte	0x8d
 11596 08af 00       		.byte	0
 11597 08b0 11       		.uleb128 0x11
 11598 08b1 510E0000 		.4byte	.LASF133
 11599 08b5 07       		.byte	0x7
 11600 08b6 A701     		.2byte	0x1a7
 11601 08b8 B1000000 		.4byte	0xb1
 11602 08bc 02       		.byte	0x2
 11603 08bd 11       		.uleb128 0x11
 11604 08be D8070000 		.4byte	.LASF134
 11605 08c2 07       		.byte	0x7
 11606 08c3 A801     		.2byte	0x1a8
 11607 08c5 1E070000 		.4byte	0x71e
 11608 08c9 04       		.byte	0x4
 11609 08ca 11       		.uleb128 0x11
 11610 08cb 4C030000 		.4byte	.LASF64
 11611 08cf 07       		.byte	0x7
 11612 08d0 A901     		.2byte	0x1a9
 11613 08d2 BF060000 		.4byte	0x6bf
 11614 08d6 08       		.byte	0x8
 11615 08d7 00       		.byte	0
 11616 08d8 10       		.uleb128 0x10
 11617 08d9 62010000 		.4byte	.LASF135
 11618 08dd 10       		.byte	0x10
 11619 08de 07       		.byte	0x7
 11620 08df B001     		.2byte	0x1b0
 11621 08e1 0D090000 		.4byte	0x90d
 11622 08e5 11       		.uleb128 0x11
 11623 08e6 9F0D0000 		.4byte	.LASF136
 11624 08ea 07       		.byte	0x7
 11625 08eb B101     		.2byte	0x1b1
 11626 08ed 81000000 		.4byte	0x81
 11627 08f1 00       		.byte	0
 11628 08f2 11       		.uleb128 0x11
 11629 08f3 4E0A0000 		.4byte	.LASF137
 11630 08f7 07       		.byte	0x7
 11631 08f8 B201     		.2byte	0x1b2
 11632 08fa 81000000 		.4byte	0x81
 11633 08fe 01       		.byte	0x1
 11634 08ff 11       		.uleb128 0x11
 11635 0900 4C030000 		.4byte	.LASF64
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 260


 11636 0904 07       		.byte	0x7
 11637 0905 B301     		.2byte	0x1b3
 11638 0907 0D090000 		.4byte	0x90d
 11639 090b 02       		.byte	0x2
 11640 090c 00       		.byte	0
 11641 090d 07       		.uleb128 0x7
 11642 090e 81000000 		.4byte	0x81
 11643 0912 1D090000 		.4byte	0x91d
 11644 0916 08       		.uleb128 0x8
 11645 0917 0E010000 		.4byte	0x10e
 11646 091b 0D       		.byte	0xd
 11647 091c 00       		.byte	0
 11648 091d 10       		.uleb128 0x10
 11649 091e 69090000 		.4byte	.LASF138
 11650 0922 10       		.byte	0x10
 11651 0923 07       		.byte	0x7
 11652 0924 BA01     		.2byte	0x1ba
 11653 0926 5F090000 		.4byte	0x95f
 11654 092a 11       		.uleb128 0x11
 11655 092b EC100000 		.4byte	.LASF139
 11656 092f 07       		.byte	0x7
 11657 0930 BB01     		.2byte	0x1bb
 11658 0932 BD000000 		.4byte	0xbd
 11659 0936 00       		.byte	0
 11660 0937 11       		.uleb128 0x11
 11661 0938 3C070000 		.4byte	.LASF140
 11662 093c 07       		.byte	0x7
 11663 093d BC01     		.2byte	0x1bc
 11664 093f D5000000 		.4byte	0xd5
 11665 0943 04       		.byte	0x4
 11666 0944 11       		.uleb128 0x11
 11667 0945 570D0000 		.4byte	.LASF141
 11668 0949 07       		.byte	0x7
 11669 094a BD01     		.2byte	0x1bd
 11670 094c D5000000 		.4byte	0xd5
 11671 0950 08       		.byte	0x8
 11672 0951 11       		.uleb128 0x11
 11673 0952 4C030000 		.4byte	.LASF64
 11674 0956 07       		.byte	0x7
 11675 0957 BE01     		.2byte	0x1be
 11676 0959 5F090000 		.4byte	0x95f
 11677 095d 0C       		.byte	0xc
 11678 095e 00       		.byte	0
 11679 095f 07       		.uleb128 0x7
 11680 0960 81000000 		.4byte	0x81
 11681 0964 6F090000 		.4byte	0x96f
 11682 0968 08       		.uleb128 0x8
 11683 0969 0E010000 		.4byte	0x10e
 11684 096d 03       		.byte	0x3
 11685 096e 00       		.byte	0
 11686 096f 10       		.uleb128 0x10
 11687 0970 EC010000 		.4byte	.LASF142
 11688 0974 12       		.byte	0x12
 11689 0975 07       		.byte	0x7
 11690 0976 C501     		.2byte	0x1c5
 11691 0978 B1090000 		.4byte	0x9b1
 11692 097c 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 261


 11693 097d 8A120000 		.4byte	.LASF143
 11694 0981 07       		.byte	0x7
 11695 0982 C601     		.2byte	0x1c6
 11696 0984 81000000 		.4byte	0x81
 11697 0988 00       		.byte	0
 11698 0989 11       		.uleb128 0x11
 11699 098a A1100000 		.4byte	.LASF144
 11700 098e 07       		.byte	0x7
 11701 098f C701     		.2byte	0x1c7
 11702 0991 1E070000 		.4byte	0x71e
 11703 0995 02       		.byte	0x2
 11704 0996 11       		.uleb128 0x11
 11705 0997 37000000 		.4byte	.LASF145
 11706 099b 07       		.byte	0x7
 11707 099c C801     		.2byte	0x1c8
 11708 099e 81000000 		.4byte	0x81
 11709 09a2 06       		.byte	0x6
 11710 09a3 11       		.uleb128 0x11
 11711 09a4 4C030000 		.4byte	.LASF64
 11712 09a8 07       		.byte	0x7
 11713 09a9 C901     		.2byte	0x1c9
 11714 09ab B1090000 		.4byte	0x9b1
 11715 09af 07       		.byte	0x7
 11716 09b0 00       		.byte	0
 11717 09b1 07       		.uleb128 0x7
 11718 09b2 81000000 		.4byte	0x81
 11719 09b6 C1090000 		.4byte	0x9c1
 11720 09ba 08       		.uleb128 0x8
 11721 09bb 0E010000 		.4byte	0x10e
 11722 09bf 09       		.byte	0x9
 11723 09c0 00       		.byte	0
 11724 09c1 13       		.uleb128 0x13
 11725 09c2 8F110000 		.4byte	.LASF146
 11726 09c6 F402     		.2byte	0x2f4
 11727 09c8 07       		.byte	0x7
 11728 09c9 D201     		.2byte	0x1d2
 11729 09cb A60A0000 		.4byte	0xaa6
 11730 09cf 11       		.uleb128 0x11
 11731 09d0 C30A0000 		.4byte	.LASF147
 11732 09d4 07       		.byte	0x7
 11733 09d5 D401     		.2byte	0x1d4
 11734 09d7 81000000 		.4byte	0x81
 11735 09db 00       		.byte	0
 11736 09dc 11       		.uleb128 0x11
 11737 09dd 4C030000 		.4byte	.LASF64
 11738 09e1 07       		.byte	0x7
 11739 09e2 D501     		.2byte	0x1d5
 11740 09e4 A60A0000 		.4byte	0xaa6
 11741 09e8 01       		.byte	0x1
 11742 09e9 12       		.uleb128 0x12
 11743 09ea 636E7400 		.ascii	"cnt\000"
 11744 09ee 07       		.byte	0x7
 11745 09ef D601     		.2byte	0x1d6
 11746 09f1 06030000 		.4byte	0x306
 11747 09f5 10       		.byte	0x10
 11748 09f6 11       		.uleb128 0x11
 11749 09f7 DF020000 		.4byte	.LASF148
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 262


 11750 09fb 07       		.byte	0x7
 11751 09fc D701     		.2byte	0x1d7
 11752 09fe B60A0000 		.4byte	0xab6
 11753 0a02 80       		.byte	0x80
 11754 0a03 12       		.uleb128 0x12
 11755 0a04 64657600 		.ascii	"dev\000"
 11756 0a08 07       		.byte	0x7
 11757 0a09 D801     		.2byte	0x1d8
 11758 0a0b E3030000 		.4byte	0x3e3
 11759 0a0f A0       		.byte	0xa0
 11760 0a10 11       		.uleb128 0x11
 11761 0a11 120F0000 		.4byte	.LASF149
 11762 0a15 07       		.byte	0x7
 11763 0a16 D901     		.2byte	0x1d9
 11764 0a18 C60A0000 		.4byte	0xac6
 11765 0a1c B0       		.byte	0xb0
 11766 0a1d 14       		.uleb128 0x14
 11767 0a1e 656E6300 		.ascii	"enc\000"
 11768 0a22 07       		.byte	0x7
 11769 0a23 DA01     		.2byte	0x1da
 11770 0a25 D60A0000 		.4byte	0xad6
 11771 0a29 9001     		.2byte	0x190
 11772 0a2b 14       		.uleb128 0x14
 11773 0a2c 656D6700 		.ascii	"emg\000"
 11774 0a30 07       		.byte	0x7
 11775 0a31 DB01     		.2byte	0x1db
 11776 0a33 CF060000 		.4byte	0x6cf
 11777 0a37 F001     		.2byte	0x1f0
 11778 0a39 14       		.uleb128 0x14
 11779 0a3a 696D7500 		.ascii	"imu\000"
 11780 0a3e 07       		.byte	0x7
 11781 0a3f DC01     		.2byte	0x1dc
 11782 0a41 3E070000 		.4byte	0x73e
 11783 0a45 0002     		.2byte	0x200
 11784 0a47 14       		.uleb128 0x14
 11785 0a48 65787000 		.ascii	"exp\000"
 11786 0a4c 07       		.byte	0x7
 11787 0a4d DD01     		.2byte	0x1dd
 11788 0a4f 96070000 		.4byte	0x796
 11789 0a53 2002     		.2byte	0x220
 11790 0a55 15       		.uleb128 0x15
 11791 0a56 86000000 		.4byte	.LASF150
 11792 0a5a 07       		.byte	0x7
 11793 0a5b DE01     		.2byte	0x1de
 11794 0a5d E60A0000 		.4byte	0xae6
 11795 0a61 4002     		.2byte	0x240
 11796 0a63 14       		.uleb128 0x14
 11797 0a64 534800   		.ascii	"SH\000"
 11798 0a67 07       		.byte	0x7
 11799 0a68 E001     		.2byte	0x1e0
 11800 0a6a 47080000 		.4byte	0x847
 11801 0a6e A002     		.2byte	0x2a0
 11802 0a70 15       		.uleb128 0x15
 11803 0a71 CD000000 		.4byte	.LASF151
 11804 0a75 07       		.byte	0x7
 11805 0a76 E101     		.2byte	0x1e1
 11806 0a78 96080000 		.4byte	0x896
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 263


 11807 0a7c B002     		.2byte	0x2b0
 11808 0a7e 14       		.uleb128 0x14
 11809 0a7f 4D5300   		.ascii	"MS\000"
 11810 0a82 07       		.byte	0x7
 11811 0a83 E201     		.2byte	0x1e2
 11812 0a85 D8080000 		.4byte	0x8d8
 11813 0a89 C002     		.2byte	0x2c0
 11814 0a8b 14       		.uleb128 0x14
 11815 0a8c 464200   		.ascii	"FB\000"
 11816 0a8f 07       		.byte	0x7
 11817 0a90 E301     		.2byte	0x1e3
 11818 0a92 1D090000 		.4byte	0x91d
 11819 0a96 D002     		.2byte	0x2d0
 11820 0a98 14       		.uleb128 0x14
 11821 0a99 575200   		.ascii	"WR\000"
 11822 0a9c 07       		.byte	0x7
 11823 0a9d E401     		.2byte	0x1e4
 11824 0a9f 6F090000 		.4byte	0x96f
 11825 0aa3 E002     		.2byte	0x2e0
 11826 0aa5 00       		.byte	0
 11827 0aa6 07       		.uleb128 0x7
 11828 0aa7 81000000 		.4byte	0x81
 11829 0aab B60A0000 		.4byte	0xab6
 11830 0aaf 08       		.uleb128 0x8
 11831 0ab0 0E010000 		.4byte	0x10e
 11832 0ab4 0E       		.byte	0xe
 11833 0ab5 00       		.byte	0
 11834 0ab6 07       		.uleb128 0x7
 11835 0ab7 81000000 		.4byte	0x81
 11836 0abb C60A0000 		.4byte	0xac6
 11837 0abf 08       		.uleb128 0x8
 11838 0ac0 0E010000 		.4byte	0x10e
 11839 0ac4 1F       		.byte	0x1f
 11840 0ac5 00       		.byte	0
 11841 0ac6 07       		.uleb128 0x7
 11842 0ac7 82040000 		.4byte	0x482
 11843 0acb D60A0000 		.4byte	0xad6
 11844 0acf 08       		.uleb128 0x8
 11845 0ad0 0E010000 		.4byte	0x10e
 11846 0ad4 01       		.byte	0x1
 11847 0ad5 00       		.byte	0
 11848 0ad6 07       		.uleb128 0x7
 11849 0ad7 1C060000 		.4byte	0x61c
 11850 0adb E60A0000 		.4byte	0xae6
 11851 0adf 08       		.uleb128 0x8
 11852 0ae0 0E010000 		.4byte	0x10e
 11853 0ae4 01       		.byte	0x1
 11854 0ae5 00       		.byte	0
 11855 0ae6 07       		.uleb128 0x7
 11856 0ae7 12080000 		.4byte	0x812
 11857 0aeb F60A0000 		.4byte	0xaf6
 11858 0aef 08       		.uleb128 0x8
 11859 0af0 0E010000 		.4byte	0x10e
 11860 0af4 02       		.byte	0x2
 11861 0af5 00       		.byte	0
 11862 0af6 10       		.uleb128 0x10
 11863 0af7 C10C0000 		.4byte	.LASF152
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 264


 11864 0afb 28       		.byte	0x28
 11865 0afc 07       		.byte	0x7
 11866 0afd EF01     		.2byte	0x1ef
 11867 0aff 520B0000 		.4byte	0xb52
 11868 0b03 11       		.uleb128 0x11
 11869 0b04 F5040000 		.4byte	.LASF153
 11870 0b08 07       		.byte	0x7
 11871 0b09 F001     		.2byte	0x1f0
 11872 0b0b 81000000 		.4byte	0x81
 11873 0b0f 00       		.byte	0
 11874 0b10 11       		.uleb128 0x11
 11875 0b11 59030000 		.4byte	.LASF154
 11876 0b15 07       		.byte	0x7
 11877 0b16 F101     		.2byte	0x1f1
 11878 0b18 520B0000 		.4byte	0xb52
 11879 0b1c 02       		.byte	0x2
 11880 0b1d 11       		.uleb128 0x11
 11881 0b1e F60B0000 		.4byte	.LASF155
 11882 0b22 07       		.byte	0x7
 11883 0b23 F201     		.2byte	0x1f2
 11884 0b25 520B0000 		.4byte	0xb52
 11885 0b29 08       		.byte	0x8
 11886 0b2a 11       		.uleb128 0x11
 11887 0b2b CD0C0000 		.4byte	.LASF156
 11888 0b2f 07       		.byte	0x7
 11889 0b30 F301     		.2byte	0x1f3
 11890 0b32 520B0000 		.4byte	0xb52
 11891 0b36 0E       		.byte	0xe
 11892 0b37 11       		.uleb128 0x11
 11893 0b38 5D080000 		.4byte	.LASF157
 11894 0b3c 07       		.byte	0x7
 11895 0b3d F401     		.2byte	0x1f4
 11896 0b3f 620B0000 		.4byte	0xb62
 11897 0b43 14       		.byte	0x14
 11898 0b44 11       		.uleb128 0x11
 11899 0b45 D9010000 		.4byte	.LASF158
 11900 0b49 07       		.byte	0x7
 11901 0b4a F501     		.2byte	0x1f5
 11902 0b4c B1000000 		.4byte	0xb1
 11903 0b50 24       		.byte	0x24
 11904 0b51 00       		.byte	0
 11905 0b52 07       		.uleb128 0x7
 11906 0b53 B1000000 		.4byte	0xb1
 11907 0b57 620B0000 		.4byte	0xb62
 11908 0b5b 08       		.uleb128 0x8
 11909 0b5c 0E010000 		.4byte	0x10e
 11910 0b60 02       		.byte	0x2
 11911 0b61 00       		.byte	0
 11912 0b62 07       		.uleb128 0x7
 11913 0b63 D5000000 		.4byte	0xd5
 11914 0b67 720B0000 		.4byte	0xb72
 11915 0b6b 08       		.uleb128 0x8
 11916 0b6c 0E010000 		.4byte	0x10e
 11917 0b70 03       		.byte	0x3
 11918 0b71 00       		.byte	0
 11919 0b72 10       		.uleb128 0x10
 11920 0b73 AC120000 		.4byte	.LASF159
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 265


 11921 0b77 08       		.byte	0x8
 11922 0b78 07       		.byte	0x7
 11923 0b79 FC01     		.2byte	0x1fc
 11924 0b7b 9A0B0000 		.4byte	0xb9a
 11925 0b7f 11       		.uleb128 0x11
 11926 0b80 C5050000 		.4byte	.LASF160
 11927 0b84 07       		.byte	0x7
 11928 0b85 FD01     		.2byte	0x1fd
 11929 0b87 BD000000 		.4byte	0xbd
 11930 0b8b 00       		.byte	0
 11931 0b8c 11       		.uleb128 0x11
 11932 0b8d 1F020000 		.4byte	.LASF161
 11933 0b91 07       		.byte	0x7
 11934 0b92 FE01     		.2byte	0x1fe
 11935 0b94 BD000000 		.4byte	0xbd
 11936 0b98 04       		.byte	0x4
 11937 0b99 00       		.byte	0
 11938 0b9a 10       		.uleb128 0x10
 11939 0b9b 16040000 		.4byte	.LASF162
 11940 0b9f 06       		.byte	0x6
 11941 0ba0 07       		.byte	0x7
 11942 0ba1 0502     		.2byte	0x205
 11943 0ba3 DC0B0000 		.4byte	0xbdc
 11944 0ba7 11       		.uleb128 0x11
 11945 0ba8 A7070000 		.4byte	.LASF163
 11946 0bac 07       		.byte	0x7
 11947 0bad 0602     		.2byte	0x206
 11948 0baf 81000000 		.4byte	0x81
 11949 0bb3 00       		.byte	0
 11950 0bb4 11       		.uleb128 0x11
 11951 0bb5 C8120000 		.4byte	.LASF164
 11952 0bb9 07       		.byte	0x7
 11953 0bba 0702     		.2byte	0x207
 11954 0bbc 81000000 		.4byte	0x81
 11955 0bc0 01       		.byte	0x1
 11956 0bc1 11       		.uleb128 0x11
 11957 0bc2 52060000 		.4byte	.LASF165
 11958 0bc6 07       		.byte	0x7
 11959 0bc7 0802     		.2byte	0x208
 11960 0bc9 B1000000 		.4byte	0xb1
 11961 0bcd 02       		.byte	0x2
 11962 0bce 11       		.uleb128 0x11
 11963 0bcf 210A0000 		.4byte	.LASF166
 11964 0bd3 07       		.byte	0x7
 11965 0bd4 0902     		.2byte	0x209
 11966 0bd6 B1000000 		.4byte	0xb1
 11967 0bda 04       		.byte	0x4
 11968 0bdb 00       		.byte	0
 11969 0bdc 16       		.uleb128 0x16
 11970 0bdd 01       		.byte	0x1
 11971 0bde 2C000000 		.4byte	0x2c
 11972 0be2 07       		.byte	0x7
 11973 0be3 0D02     		.2byte	0x20d
 11974 0be5 0E0C0000 		.4byte	0xc0e
 11975 0be9 0A       		.uleb128 0xa
 11976 0bea E2050000 		.4byte	.LASF167
 11977 0bee 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 266


 11978 0bef 0A       		.uleb128 0xa
 11979 0bf0 990D0000 		.4byte	.LASF168
 11980 0bf4 01       		.byte	0x1
 11981 0bf5 0A       		.uleb128 0xa
 11982 0bf6 930B0000 		.4byte	.LASF169
 11983 0bfa 02       		.byte	0x2
 11984 0bfb 0A       		.uleb128 0xa
 11985 0bfc 82020000 		.4byte	.LASF170
 11986 0c00 03       		.byte	0x3
 11987 0c01 0A       		.uleb128 0xa
 11988 0c02 570A0000 		.4byte	.LASF171
 11989 0c06 04       		.byte	0x4
 11990 0c07 0A       		.uleb128 0xa
 11991 0c08 370D0000 		.4byte	.LASF172
 11992 0c0c 05       		.byte	0x5
 11993 0c0d 00       		.byte	0
 11994 0c0e 05       		.uleb128 0x5
 11995 0c0f 77050000 		.4byte	.LASF173
 11996 0c13 07       		.byte	0x7
 11997 0c14 1502     		.2byte	0x215
 11998 0c16 DC0B0000 		.4byte	0xbdc
 11999 0c1a 16       		.uleb128 0x16
 12000 0c1b 01       		.byte	0x1
 12001 0c1c 2C000000 		.4byte	0x2c
 12002 0c20 07       		.byte	0x7
 12003 0c21 1702     		.2byte	0x217
 12004 0c23 460C0000 		.4byte	0xc46
 12005 0c27 0A       		.uleb128 0xa
 12006 0c28 CC010000 		.4byte	.LASF174
 12007 0c2c 00       		.byte	0
 12008 0c2d 0A       		.uleb128 0xa
 12009 0c2e CB070000 		.4byte	.LASF175
 12010 0c32 01       		.byte	0x1
 12011 0c33 0A       		.uleb128 0xa
 12012 0c34 76080000 		.4byte	.LASF176
 12013 0c38 02       		.byte	0x2
 12014 0c39 0A       		.uleb128 0xa
 12015 0c3a C3030000 		.4byte	.LASF177
 12016 0c3e 03       		.byte	0x3
 12017 0c3f 0A       		.uleb128 0xa
 12018 0c40 85120000 		.4byte	.LASF178
 12019 0c44 04       		.byte	0x4
 12020 0c45 00       		.byte	0
 12021 0c46 05       		.uleb128 0x5
 12022 0c47 830E0000 		.4byte	.LASF179
 12023 0c4b 07       		.byte	0x7
 12024 0c4c 1E02     		.2byte	0x21e
 12025 0c4e 1A0C0000 		.4byte	0xc1a
 12026 0c52 17       		.uleb128 0x17
 12027 0c53 A0050000 		.4byte	.LASF180
 12028 0c57 01       		.byte	0x1
 12029 0c58 62       		.byte	0x62
 12030 0c59 00000000 		.4byte	.LFB64
 12031 0c5d 18000000 		.4byte	.LFE64-.LFB64
 12032 0c61 01       		.uleb128 0x1
 12033 0c62 9C       		.byte	0x9c
 12034 0c63 17       		.uleb128 0x17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 267


 12035 0c64 84100000 		.4byte	.LASF181
 12036 0c68 01       		.byte	0x1
 12037 0c69 6D       		.byte	0x6d
 12038 0c6a 00000000 		.4byte	.LFB65
 12039 0c6e 20000000 		.4byte	.LFE65-.LFB65
 12040 0c72 01       		.uleb128 0x1
 12041 0c73 9C       		.byte	0x9c
 12042 0c74 18       		.uleb128 0x18
 12043 0c75 D5090000 		.4byte	.LASF213
 12044 0c79 01       		.byte	0x1
 12045 0c7a 86       		.byte	0x86
 12046 0c7b 00000000 		.4byte	.LFB66
 12047 0c7f F4010000 		.4byte	.LFE66-.LFB66
 12048 0c83 01       		.uleb128 0x1
 12049 0c84 9C       		.byte	0x9c
 12050 0c85 090D0000 		.4byte	0xd09
 12051 0c89 19       		.uleb128 0x19
 12052 0c8a FA000000 		.4byte	.LASF182
 12053 0c8e 01       		.byte	0x1
 12054 0c8f 8B       		.byte	0x8b
 12055 0c90 81000000 		.4byte	0x81
 12056 0c94 05       		.uleb128 0x5
 12057 0c95 03       		.byte	0x3
 12058 0c96 00000000 		.4byte	state.10463
 12059 0c9a 19       		.uleb128 0x19
 12060 0c9b 77060000 		.4byte	.LASF183
 12061 0c9f 01       		.byte	0x1
 12062 0ca0 8E       		.byte	0x8e
 12063 0ca1 81000000 		.4byte	0x81
 12064 0ca5 05       		.uleb128 0x5
 12065 0ca6 03       		.byte	0x3
 12066 0ca7 08000000 		.4byte	data_packet_index.10464
 12067 0cab 19       		.uleb128 0x19
 12068 0cac 000D0000 		.4byte	.LASF184
 12069 0cb0 01       		.byte	0x1
 12070 0cb1 8F       		.byte	0x8f
 12071 0cb2 81000000 		.4byte	0x81
 12072 0cb6 05       		.uleb128 0x5
 12073 0cb7 03       		.byte	0x3
 12074 0cb8 07000000 		.4byte	data_packet_length.10465
 12075 0cbc 19       		.uleb128 0x19
 12076 0cbd 89060000 		.4byte	.LASF185
 12077 0cc1 01       		.byte	0x1
 12078 0cc2 90       		.byte	0x90
 12079 0cc3 F6020000 		.4byte	0x2f6
 12080 0cc7 05       		.uleb128 0x5
 12081 0cc8 03       		.byte	0x3
 12082 0cc9 0C000000 		.4byte	data_packet_buffer.10466
 12083 0ccd 19       		.uleb128 0x19
 12084 0cce 050B0000 		.4byte	.LASF186
 12085 0cd2 01       		.byte	0x1
 12086 0cd3 91       		.byte	0x91
 12087 0cd4 72040000 		.4byte	0x472
 12088 0cd8 05       		.uleb128 0x5
 12089 0cd9 03       		.byte	0x3
 12090 0cda 04000000 		.4byte	rx_queue.10467
 12091 0cde 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 268


 12092 0cdf 91010000 		.4byte	.LASF187
 12093 0ce3 01       		.byte	0x1
 12094 0ce4 94       		.byte	0x94
 12095 0ce5 81000000 		.4byte	0x81
 12096 0ce9 02       		.uleb128 0x2
 12097 0cea 91       		.byte	0x91
 12098 0ceb 75       		.sleb128 -11
 12099 0cec 19       		.uleb128 0x19
 12100 0ced 3C060000 		.4byte	.LASF188
 12101 0cf1 01       		.byte	0x1
 12102 0cf2 95       		.byte	0x95
 12103 0cf3 81000000 		.4byte	0x81
 12104 0cf7 02       		.uleb128 0x2
 12105 0cf8 91       		.byte	0x91
 12106 0cf9 77       		.sleb128 -9
 12107 0cfa 19       		.uleb128 0x19
 12108 0cfb 84070000 		.4byte	.LASF189
 12109 0cff 01       		.byte	0x1
 12110 0d00 96       		.byte	0x96
 12111 0d01 81000000 		.4byte	0x81
 12112 0d05 02       		.uleb128 0x2
 12113 0d06 91       		.byte	0x91
 12114 0d07 76       		.sleb128 -10
 12115 0d08 00       		.byte	0
 12116 0d09 1A       		.uleb128 0x1a
 12117 0d0a 320F0000 		.4byte	.LASF196
 12118 0d0e 01       		.byte	0x1
 12119 0d0f 0C01     		.2byte	0x10c
 12120 0d11 00000000 		.4byte	.LFB67
 12121 0d15 80080000 		.4byte	.LFE67-.LFB67
 12122 0d19 01       		.uleb128 0x1
 12123 0d1a 9C       		.byte	0x9c
 12124 0d1b A80D0000 		.4byte	0xda8
 12125 0d1f 1B       		.uleb128 0x1b
 12126 0d20 B3060000 		.4byte	.LASF190
 12127 0d24 01       		.byte	0x1
 12128 0d25 0E01     		.2byte	0x10e
 12129 0d27 8D000000 		.4byte	0x8d
 12130 0d2b 05       		.uleb128 0x5
 12131 0d2c 03       		.byte	0x3
 12132 0d2d 00000000 		.4byte	counter_calibration.10483
 12133 0d31 1B       		.uleb128 0x1b
 12134 0d32 4A0C0000 		.4byte	.LASF191
 12135 0d36 01       		.byte	0x1
 12136 0d37 0F01     		.2byte	0x10f
 12137 0d39 8D000000 		.4byte	0x8d
 12138 0d3d 05       		.uleb128 0x5
 12139 0d3e 03       		.byte	0x3
 12140 0d3f 02000000 		.4byte	counter_tension_func.10484
 12141 0d43 1B       		.uleb128 0x1b
 12142 0d44 A8010000 		.4byte	.LASF192
 12143 0d48 01       		.byte	0x1
 12144 0d49 1001     		.2byte	0x110
 12145 0d4b A80D0000 		.4byte	0xda8
 12146 0d4f 03       		.uleb128 0x3
 12147 0d50 91       		.byte	0x91
 12148 0d51 A86C     		.sleb128 -2520
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 269


 12149 0d53 1B       		.uleb128 0x1b
 12150 0d54 2D0C0000 		.4byte	.LASF193
 12151 0d58 01       		.byte	0x1
 12152 0d59 1201     		.2byte	0x112
 12153 0d5b 81000000 		.4byte	0x81
 12154 0d5f 02       		.uleb128 0x2
 12155 0d60 91       		.byte	0x91
 12156 0d61 6E       		.sleb128 -18
 12157 0d62 1B       		.uleb128 0x1b
 12158 0d63 92090000 		.4byte	.LASF194
 12159 0d67 01       		.byte	0x1
 12160 0d68 1301     		.2byte	0x113
 12161 0d6a 81000000 		.4byte	0x81
 12162 0d6e 02       		.uleb128 0x2
 12163 0d6f 91       		.byte	0x91
 12164 0d70 6D       		.sleb128 -19
 12165 0d71 1C       		.uleb128 0x1c
 12166 0d72 90010000 		.4byte	.LBB2
 12167 0d76 32010000 		.4byte	.LBE2-.LBB2
 12168 0d7a 8C0D0000 		.4byte	0xd8c
 12169 0d7e 1D       		.uleb128 0x1d
 12170 0d7f 6900     		.ascii	"i\000"
 12171 0d81 01       		.byte	0x1
 12172 0d82 4D01     		.2byte	0x14d
 12173 0d84 81000000 		.4byte	0x81
 12174 0d88 02       		.uleb128 0x2
 12175 0d89 91       		.byte	0x91
 12176 0d8a 6F       		.sleb128 -17
 12177 0d8b 00       		.byte	0
 12178 0d8c 1E       		.uleb128 0x1e
 12179 0d8d 58060000 		.4byte	.LBB3
 12180 0d91 50000000 		.4byte	.LBE3-.LBB3
 12181 0d95 1B       		.uleb128 0x1b
 12182 0d96 ED020000 		.4byte	.LASF195
 12183 0d9a 01       		.byte	0x1
 12184 0d9b 4002     		.2byte	0x240
 12185 0d9d B90D0000 		.4byte	0xdb9
 12186 0da1 04       		.uleb128 0x4
 12187 0da2 91       		.byte	0x91
 12188 0da3 90F77E   		.sleb128 -17520
 12189 0da6 00       		.byte	0
 12190 0da7 00       		.byte	0
 12191 0da8 07       		.uleb128 0x7
 12192 0da9 E3000000 		.4byte	0xe3
 12193 0dad B90D0000 		.4byte	0xdb9
 12194 0db1 1F       		.uleb128 0x1f
 12195 0db2 0E010000 		.4byte	0x10e
 12196 0db6 C309     		.2byte	0x9c3
 12197 0db8 00       		.byte	0
 12198 0db9 07       		.uleb128 0x7
 12199 0dba E3000000 		.4byte	0xe3
 12200 0dbe CA0D0000 		.4byte	0xdca
 12201 0dc2 1F       		.uleb128 0x1f
 12202 0dc3 0E010000 		.4byte	0x10e
 12203 0dc7 973A     		.2byte	0x3a97
 12204 0dc9 00       		.byte	0
 12205 0dca 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 270


 12206 0dcb 450F0000 		.4byte	.LASF197
 12207 0dcf 01       		.byte	0x1
 12208 0dd0 9402     		.2byte	0x294
 12209 0dd2 00000000 		.4byte	.LFB68
 12210 0dd6 CC050000 		.4byte	.LFE68-.LFB68
 12211 0dda 01       		.uleb128 0x1
 12212 0ddb 9C       		.byte	0x9c
 12213 0ddc 800E0000 		.4byte	0xe80
 12214 0de0 20       		.uleb128 0x20
 12215 0de1 37080000 		.4byte	.LASF198
 12216 0de5 01       		.byte	0x1
 12217 0de6 9402     		.2byte	0x294
 12218 0de8 81000000 		.4byte	0x81
 12219 0dec 02       		.uleb128 0x2
 12220 0ded 91       		.byte	0x91
 12221 0dee 5F       		.sleb128 -33
 12222 0def 20       		.uleb128 0x20
 12223 0df0 9C060000 		.4byte	.LASF199
 12224 0df4 01       		.byte	0x1
 12225 0df5 9402     		.2byte	0x294
 12226 0df7 800E0000 		.4byte	0xe80
 12227 0dfb 02       		.uleb128 0x2
 12228 0dfc 91       		.byte	0x91
 12229 0dfd 58       		.sleb128 -40
 12230 0dfe 20       		.uleb128 0x20
 12231 0dff BE110000 		.4byte	.LASF200
 12232 0e03 01       		.byte	0x1
 12233 0e04 9402     		.2byte	0x294
 12234 0e06 800E0000 		.4byte	0xe80
 12235 0e0a 02       		.uleb128 0x2
 12236 0e0b 91       		.byte	0x91
 12237 0e0c 54       		.sleb128 -44
 12238 0e0d 1B       		.uleb128 0x1b
 12239 0e0e FB040000 		.4byte	.LASF201
 12240 0e12 01       		.byte	0x1
 12241 0e13 9602     		.2byte	0x296
 12242 0e15 BD000000 		.4byte	0xbd
 12243 0e19 02       		.uleb128 0x2
 12244 0e1a 91       		.byte	0x91
 12245 0e1b 74       		.sleb128 -12
 12246 0e1c 1B       		.uleb128 0x1b
 12247 0e1d 1F040000 		.4byte	.LASF202
 12248 0e21 01       		.byte	0x1
 12249 0e22 9702     		.2byte	0x297
 12250 0e24 BD000000 		.4byte	0xbd
 12251 0e28 02       		.uleb128 0x2
 12252 0e29 91       		.byte	0x91
 12253 0e2a 68       		.sleb128 -24
 12254 0e2b 1B       		.uleb128 0x1b
 12255 0e2c 29040000 		.4byte	.LASF203
 12256 0e30 01       		.byte	0x1
 12257 0e31 9702     		.2byte	0x297
 12258 0e33 BD000000 		.4byte	0xbd
 12259 0e37 02       		.uleb128 0x2
 12260 0e38 91       		.byte	0x91
 12261 0e39 64       		.sleb128 -28
 12262 0e3a 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 271


 12263 0e3b 4D4F5400 		.ascii	"MOT\000"
 12264 0e3f 01       		.byte	0x1
 12265 0e40 9802     		.2byte	0x298
 12266 0e42 860E0000 		.4byte	0xe86
 12267 0e46 02       		.uleb128 0x2
 12268 0e47 91       		.byte	0x91
 12269 0e48 70       		.sleb128 -16
 12270 0e49 1B       		.uleb128 0x1b
 12271 0e4a 3F100000 		.4byte	.LASF204
 12272 0e4e 01       		.byte	0x1
 12273 0e4f 9902     		.2byte	0x299
 12274 0e51 81000000 		.4byte	0x81
 12275 0e55 02       		.uleb128 0x2
 12276 0e56 91       		.byte	0x91
 12277 0e57 6F       		.sleb128 -17
 12278 0e58 1B       		.uleb128 0x1b
 12279 0e59 F90A0000 		.4byte	.LASF205
 12280 0e5d 01       		.byte	0x1
 12281 0e5e 9B02     		.2byte	0x29b
 12282 0e60 2E070000 		.4byte	0x72e
 12283 0e64 05       		.uleb128 0x5
 12284 0e65 03       		.byte	0x3
 12285 0e66 8C000000 		.4byte	current_emg.10509
 12286 0e6a 21       		.uleb128 0x21
 12287 0e6b 00000000 		.4byte	.Ldebug_ranges0+0
 12288 0e6f 1B       		.uleb128 0x1b
 12289 0e70 F0000000 		.4byte	.LASF206
 12290 0e74 01       		.byte	0x1
 12291 0e75 C002     		.2byte	0x2c0
 12292 0e77 BD000000 		.4byte	0xbd
 12293 0e7b 02       		.uleb128 0x2
 12294 0e7c 91       		.byte	0x91
 12295 0e7d 60       		.sleb128 -32
 12296 0e7e 00       		.byte	0
 12297 0e7f 00       		.byte	0
 12298 0e80 0C       		.uleb128 0xc
 12299 0e81 04       		.byte	0x4
 12300 0e82 A5010000 		.4byte	0x1a5
 12301 0e86 0C       		.uleb128 0xc
 12302 0e87 04       		.byte	0x4
 12303 0e88 82040000 		.4byte	0x482
 12304 0e8c 22       		.uleb128 0x22
 12305 0e8d 45100000 		.4byte	.LASF207
 12306 0e91 01       		.byte	0x1
 12307 0e92 7303     		.2byte	0x373
 12308 0e94 00000000 		.4byte	.LFB69
 12309 0e98 34030000 		.4byte	.LFE69-.LFB69
 12310 0e9c 01       		.uleb128 0x1
 12311 0e9d 9C       		.byte	0x9c
 12312 0e9e 1C0F0000 		.4byte	0xf1c
 12313 0ea2 20       		.uleb128 0x20
 12314 0ea3 37080000 		.4byte	.LASF198
 12315 0ea7 01       		.byte	0x1
 12316 0ea8 7303     		.2byte	0x373
 12317 0eaa 81000000 		.4byte	0x81
 12318 0eae 02       		.uleb128 0x2
 12319 0eaf 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 272


 12320 0eb0 67       		.sleb128 -25
 12321 0eb1 20       		.uleb128 0x20
 12322 0eb2 9C060000 		.4byte	.LASF199
 12323 0eb6 01       		.byte	0x1
 12324 0eb7 7303     		.2byte	0x373
 12325 0eb9 800E0000 		.4byte	0xe80
 12326 0ebd 02       		.uleb128 0x2
 12327 0ebe 91       		.byte	0x91
 12328 0ebf 60       		.sleb128 -32
 12329 0ec0 20       		.uleb128 0x20
 12330 0ec1 BE110000 		.4byte	.LASF200
 12331 0ec5 01       		.byte	0x1
 12332 0ec6 7303     		.2byte	0x373
 12333 0ec8 800E0000 		.4byte	0xe80
 12334 0ecc 02       		.uleb128 0x2
 12335 0ecd 91       		.byte	0x91
 12336 0ece 5C       		.sleb128 -36
 12337 0ecf 23       		.uleb128 0x23
 12338 0ed0 18000000 		.4byte	.Ldebug_ranges0+0x18
 12339 0ed4 F70E0000 		.4byte	0xef7
 12340 0ed8 1B       		.uleb128 0x1b
 12341 0ed9 F0000000 		.4byte	.LASF206
 12342 0edd 01       		.byte	0x1
 12343 0ede 7A03     		.2byte	0x37a
 12344 0ee0 BD000000 		.4byte	0xbd
 12345 0ee4 02       		.uleb128 0x2
 12346 0ee5 91       		.byte	0x91
 12347 0ee6 74       		.sleb128 -12
 12348 0ee7 1B       		.uleb128 0x1b
 12349 0ee8 F7010000 		.4byte	.LASF208
 12350 0eec 01       		.byte	0x1
 12351 0eed 7B03     		.2byte	0x37b
 12352 0eef BD000000 		.4byte	0xbd
 12353 0ef3 02       		.uleb128 0x2
 12354 0ef4 91       		.byte	0x91
 12355 0ef5 70       		.sleb128 -16
 12356 0ef6 00       		.byte	0
 12357 0ef7 21       		.uleb128 0x21
 12358 0ef8 30000000 		.4byte	.Ldebug_ranges0+0x30
 12359 0efc 1B       		.uleb128 0x1b
 12360 0efd 680D0000 		.4byte	.LASF209
 12361 0f01 01       		.byte	0x1
 12362 0f02 A003     		.2byte	0x3a0
 12363 0f04 BD000000 		.4byte	0xbd
 12364 0f08 02       		.uleb128 0x2
 12365 0f09 91       		.byte	0x91
 12366 0f0a 6C       		.sleb128 -20
 12367 0f0b 1B       		.uleb128 0x1b
 12368 0f0c CD090000 		.4byte	.LASF210
 12369 0f10 01       		.byte	0x1
 12370 0f11 A103     		.2byte	0x3a1
 12371 0f13 BD000000 		.4byte	0xbd
 12372 0f17 02       		.uleb128 0x2
 12373 0f18 91       		.byte	0x91
 12374 0f19 68       		.sleb128 -24
 12375 0f1a 00       		.byte	0
 12376 0f1b 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 273


 12377 0f1c 1A       		.uleb128 0x1a
 12378 0f1d F9090000 		.4byte	.LASF211
 12379 0f21 01       		.byte	0x1
 12380 0f22 CC03     		.2byte	0x3cc
 12381 0f24 00000000 		.4byte	.LFB70
 12382 0f28 B0010000 		.4byte	.LFE70-.LFB70
 12383 0f2c 01       		.uleb128 0x1
 12384 0f2d 9C       		.byte	0x9c
 12385 0f2e 900F0000 		.4byte	0xf90
 12386 0f32 20       		.uleb128 0x20
 12387 0f33 37080000 		.4byte	.LASF198
 12388 0f37 01       		.byte	0x1
 12389 0f38 CC03     		.2byte	0x3cc
 12390 0f3a 81000000 		.4byte	0x81
 12391 0f3e 02       		.uleb128 0x2
 12392 0f3f 91       		.byte	0x91
 12393 0f40 77       		.sleb128 -9
 12394 0f41 20       		.uleb128 0x20
 12395 0f42 9C060000 		.4byte	.LASF199
 12396 0f46 01       		.byte	0x1
 12397 0f47 CC03     		.2byte	0x3cc
 12398 0f49 800E0000 		.4byte	0xe80
 12399 0f4d 02       		.uleb128 0x2
 12400 0f4e 91       		.byte	0x91
 12401 0f4f 70       		.sleb128 -16
 12402 0f50 20       		.uleb128 0x20
 12403 0f51 BE110000 		.4byte	.LASF200
 12404 0f55 01       		.byte	0x1
 12405 0f56 CC03     		.2byte	0x3cc
 12406 0f58 800E0000 		.4byte	0xe80
 12407 0f5c 02       		.uleb128 0x2
 12408 0f5d 91       		.byte	0x91
 12409 0f5e 6C       		.sleb128 -20
 12410 0f5f 20       		.uleb128 0x20
 12411 0f60 1F040000 		.4byte	.LASF202
 12412 0f64 01       		.byte	0x1
 12413 0f65 CD03     		.2byte	0x3cd
 12414 0f67 BD000000 		.4byte	0xbd
 12415 0f6b 02       		.uleb128 0x2
 12416 0f6c 91       		.byte	0x91
 12417 0f6d 68       		.sleb128 -24
 12418 0f6e 20       		.uleb128 0x20
 12419 0f6f 29040000 		.4byte	.LASF203
 12420 0f73 01       		.byte	0x1
 12421 0f74 CD03     		.2byte	0x3cd
 12422 0f76 BD000000 		.4byte	0xbd
 12423 0f7a 02       		.uleb128 0x2
 12424 0f7b 91       		.byte	0x91
 12425 0f7c 00       		.sleb128 0
 12426 0f7d 1B       		.uleb128 0x1b
 12427 0f7e 6A0C0000 		.4byte	.LASF212
 12428 0f82 01       		.byte	0x1
 12429 0f83 D003     		.2byte	0x3d0
 12430 0f85 81000000 		.4byte	0x81
 12431 0f89 05       		.uleb128 0x5
 12432 0f8a 03       		.byte	0x3
 12433 0f8b 8E000000 		.4byte	fsm_state.10546
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 274


 12434 0f8f 00       		.byte	0
 12435 0f90 24       		.uleb128 0x24
 12436 0f91 E9050000 		.4byte	.LASF214
 12437 0f95 01       		.byte	0x1
 12438 0f96 0204     		.2byte	0x402
 12439 0f98 00000000 		.4byte	.LFB71
 12440 0f9c 0C070000 		.4byte	.LFE71-.LFB71
 12441 0fa0 01       		.uleb128 0x1
 12442 0fa1 9C       		.byte	0x9c
 12443 0fa2 47110000 		.4byte	0x1147
 12444 0fa6 1B       		.uleb128 0x1b
 12445 0fa7 4B010000 		.4byte	.LASF215
 12446 0fab 01       		.byte	0x1
 12447 0fac 0404     		.2byte	0x404
 12448 0fae BD000000 		.4byte	0xbd
 12449 0fb2 02       		.uleb128 0x2
 12450 0fb3 91       		.byte	0x91
 12451 0fb4 74       		.sleb128 -12
 12452 0fb5 1B       		.uleb128 0x1b
 12453 0fb6 EC0B0000 		.4byte	.LASF216
 12454 0fba 01       		.byte	0x1
 12455 0fbb 0504     		.2byte	0x405
 12456 0fbd BD000000 		.4byte	0xbd
 12457 0fc1 03       		.uleb128 0x3
 12458 0fc2 91       		.byte	0x91
 12459 0fc3 B07F     		.sleb128 -80
 12460 0fc5 1B       		.uleb128 0x1b
 12461 0fc6 0C100000 		.4byte	.LASF217
 12462 0fca 01       		.byte	0x1
 12463 0fcb 0604     		.2byte	0x406
 12464 0fcd BD000000 		.4byte	0xbd
 12465 0fd1 03       		.uleb128 0x3
 12466 0fd2 91       		.byte	0x91
 12467 0fd3 AC7F     		.sleb128 -84
 12468 0fd5 1B       		.uleb128 0x1b
 12469 0fd6 300B0000 		.4byte	.LASF218
 12470 0fda 01       		.byte	0x1
 12471 0fdb 0704     		.2byte	0x407
 12472 0fdd BD000000 		.4byte	0xbd
 12473 0fe1 02       		.uleb128 0x2
 12474 0fe2 91       		.byte	0x91
 12475 0fe3 70       		.sleb128 -16
 12476 0fe4 1B       		.uleb128 0x1b
 12477 0fe5 2D0C0000 		.4byte	.LASF193
 12478 0fe9 01       		.byte	0x1
 12479 0fea 0904     		.2byte	0x409
 12480 0fec 81000000 		.4byte	0x81
 12481 0ff0 02       		.uleb128 0x2
 12482 0ff1 91       		.byte	0x91
 12483 0ff2 6F       		.sleb128 -17
 12484 0ff3 1B       		.uleb128 0x1b
 12485 0ff4 8B030000 		.4byte	.LASF219
 12486 0ff8 01       		.byte	0x1
 12487 0ff9 0B04     		.2byte	0x40b
 12488 0ffb 860E0000 		.4byte	0xe86
 12489 0fff 02       		.uleb128 0x2
 12490 1000 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 275


 12491 1001 68       		.sleb128 -24
 12492 1002 1B       		.uleb128 0x1b
 12493 1003 FF020000 		.4byte	.LASF220
 12494 1007 01       		.byte	0x1
 12495 1008 0C04     		.2byte	0x40c
 12496 100a 81000000 		.4byte	0x81
 12497 100e 02       		.uleb128 0x2
 12498 100f 91       		.byte	0x91
 12499 1010 67       		.sleb128 -25
 12500 1011 1D       		.uleb128 0x1d
 12501 1012 6B5F7000 		.ascii	"k_p\000"
 12502 1016 01       		.byte	0x1
 12503 1017 0E04     		.2byte	0x40e
 12504 1019 BD000000 		.4byte	0xbd
 12505 101d 02       		.uleb128 0x2
 12506 101e 91       		.byte	0x91
 12507 101f 60       		.sleb128 -32
 12508 1020 1D       		.uleb128 0x1d
 12509 1021 6B5F6900 		.ascii	"k_i\000"
 12510 1025 01       		.byte	0x1
 12511 1026 0F04     		.2byte	0x40f
 12512 1028 BD000000 		.4byte	0xbd
 12513 102c 02       		.uleb128 0x2
 12514 102d 91       		.byte	0x91
 12515 102e 5C       		.sleb128 -36
 12516 102f 1D       		.uleb128 0x1d
 12517 1030 6B5F6400 		.ascii	"k_d\000"
 12518 1034 01       		.byte	0x1
 12519 1035 1004     		.2byte	0x410
 12520 1037 BD000000 		.4byte	0xbd
 12521 103b 02       		.uleb128 0x2
 12522 103c 91       		.byte	0x91
 12523 103d 58       		.sleb128 -40
 12524 103e 1B       		.uleb128 0x1b
 12525 103f 130D0000 		.4byte	.LASF75
 12526 1043 01       		.byte	0x1
 12527 1044 1204     		.2byte	0x412
 12528 1046 BD000000 		.4byte	0xbd
 12529 104a 02       		.uleb128 0x2
 12530 104b 91       		.byte	0x91
 12531 104c 54       		.sleb128 -44
 12532 104d 1B       		.uleb128 0x1b
 12533 104e 89050000 		.4byte	.LASF76
 12534 1052 01       		.byte	0x1
 12535 1053 1304     		.2byte	0x413
 12536 1055 BD000000 		.4byte	0xbd
 12537 1059 02       		.uleb128 0x2
 12538 105a 91       		.byte	0x91
 12539 105b 50       		.sleb128 -48
 12540 105c 1B       		.uleb128 0x1b
 12541 105d 71050000 		.4byte	.LASF77
 12542 1061 01       		.byte	0x1
 12543 1062 1404     		.2byte	0x414
 12544 1064 BD000000 		.4byte	0xbd
 12545 1068 02       		.uleb128 0x2
 12546 1069 91       		.byte	0x91
 12547 106a 4C       		.sleb128 -52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 276


 12548 106b 1B       		.uleb128 0x1b
 12549 106c E50F0000 		.4byte	.LASF78
 12550 1070 01       		.byte	0x1
 12551 1071 1604     		.2byte	0x416
 12552 1073 BD000000 		.4byte	0xbd
 12553 1077 02       		.uleb128 0x2
 12554 1078 91       		.byte	0x91
 12555 1079 48       		.sleb128 -56
 12556 107a 1B       		.uleb128 0x1b
 12557 107b 25060000 		.4byte	.LASF79
 12558 107f 01       		.byte	0x1
 12559 1080 1704     		.2byte	0x417
 12560 1082 BD000000 		.4byte	0xbd
 12561 1086 02       		.uleb128 0x2
 12562 1087 91       		.byte	0x91
 12563 1088 44       		.sleb128 -60
 12564 1089 1B       		.uleb128 0x1b
 12565 108a F40E0000 		.4byte	.LASF80
 12566 108e 01       		.byte	0x1
 12567 108f 1804     		.2byte	0x418
 12568 1091 BD000000 		.4byte	0xbd
 12569 1095 02       		.uleb128 0x2
 12570 1096 91       		.byte	0x91
 12571 1097 40       		.sleb128 -64
 12572 1098 1B       		.uleb128 0x1b
 12573 1099 33060000 		.4byte	.LASF81
 12574 109d 01       		.byte	0x1
 12575 109e 1A04     		.2byte	0x41a
 12576 10a0 BD000000 		.4byte	0xbd
 12577 10a4 03       		.uleb128 0x3
 12578 10a5 91       		.byte	0x91
 12579 10a6 BC7F     		.sleb128 -68
 12580 10a8 1B       		.uleb128 0x1b
 12581 10a9 7B070000 		.4byte	.LASF82
 12582 10ad 01       		.byte	0x1
 12583 10ae 1B04     		.2byte	0x41b
 12584 10b0 BD000000 		.4byte	0xbd
 12585 10b4 03       		.uleb128 0x3
 12586 10b5 91       		.byte	0x91
 12587 10b6 B87F     		.sleb128 -72
 12588 10b8 1B       		.uleb128 0x1b
 12589 10b9 BF120000 		.4byte	.LASF83
 12590 10bd 01       		.byte	0x1
 12591 10be 1C04     		.2byte	0x41c
 12592 10c0 BD000000 		.4byte	0xbd
 12593 10c4 03       		.uleb128 0x3
 12594 10c5 91       		.byte	0x91
 12595 10c6 B47F     		.sleb128 -76
 12596 10c8 1B       		.uleb128 0x1b
 12597 10c9 00060000 		.4byte	.LASF221
 12598 10cd 01       		.byte	0x1
 12599 10ce 2004     		.2byte	0x420
 12600 10d0 BD000000 		.4byte	0xbd
 12601 10d4 05       		.uleb128 0x5
 12602 10d5 03       		.byte	0x3
 12603 10d6 90000000 		.4byte	pos_error_sum.10573
 12604 10da 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 277


 12605 10db 67040000 		.4byte	.LASF222
 12606 10df 01       		.byte	0x1
 12607 10e0 2104     		.2byte	0x421
 12608 10e2 BD000000 		.4byte	0xbd
 12609 10e6 05       		.uleb128 0x5
 12610 10e7 03       		.byte	0x3
 12611 10e8 9C000000 		.4byte	curr_error_sum.10574
 12612 10ec 1B       		.uleb128 0x1b
 12613 10ed 9B0B0000 		.4byte	.LASF223
 12614 10f1 01       		.byte	0x1
 12615 10f2 2304     		.2byte	0x423
 12616 10f4 BD000000 		.4byte	0xbd
 12617 10f8 05       		.uleb128 0x5
 12618 10f9 03       		.byte	0x3
 12619 10fa 94000000 		.4byte	prev_pos_err.10575
 12620 10fe 1B       		.uleb128 0x1b
 12621 10ff F20C0000 		.4byte	.LASF224
 12622 1103 01       		.byte	0x1
 12623 1104 2404     		.2byte	0x424
 12624 1106 BD000000 		.4byte	0xbd
 12625 110a 05       		.uleb128 0x5
 12626 110b 03       		.byte	0x3
 12627 110c A0000000 		.4byte	prev_curr_err.10576
 12628 1110 1B       		.uleb128 0x1b
 12629 1111 570F0000 		.4byte	.LASF225
 12630 1115 01       		.byte	0x1
 12631 1116 2504     		.2byte	0x425
 12632 1118 BD000000 		.4byte	0xbd
 12633 111c 05       		.uleb128 0x5
 12634 111d 03       		.byte	0x3
 12635 111e A4000000 		.4byte	prev_pwm.10577
 12636 1122 1B       		.uleb128 0x1b
 12637 1123 8F050000 		.4byte	.LASF226
 12638 1127 01       		.byte	0x1
 12639 1128 2704     		.2byte	0x427
 12640 112a 81000000 		.4byte	0x81
 12641 112e 05       		.uleb128 0x5
 12642 112f 03       		.byte	0x3
 12643 1130 98000000 		.4byte	motor_dir.10578
 12644 1134 1B       		.uleb128 0x1b
 12645 1135 58060000 		.4byte	.LASF227
 12646 1139 01       		.byte	0x1
 12647 113a 2804     		.2byte	0x428
 12648 113c 99000000 		.4byte	0x99
 12649 1140 05       		.uleb128 0x5
 12650 1141 03       		.byte	0x3
 12651 1142 A8000000 		.4byte	position_counter.10579
 12652 1146 00       		.byte	0
 12653 1147 1A       		.uleb128 0x1a
 12654 1148 3B050000 		.4byte	.LASF228
 12655 114c 01       		.byte	0x1
 12656 114d 3205     		.2byte	0x532
 12657 114f 00000000 		.4byte	.LFB72
 12658 1153 70090000 		.4byte	.LFE72-.LFB72
 12659 1157 01       		.uleb128 0x1
 12660 1158 9C       		.byte	0x9c
 12661 1159 00130000 		.4byte	0x1300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 278


 12662 115d 25       		.uleb128 0x25
 12663 115e 69647800 		.ascii	"idx\000"
 12664 1162 01       		.byte	0x1
 12665 1163 3205     		.2byte	0x532
 12666 1165 81000000 		.4byte	0x81
 12667 1169 03       		.uleb128 0x3
 12668 116a 91       		.byte	0x91
 12669 116b A77F     		.sleb128 -89
 12670 116d 1B       		.uleb128 0x1b
 12671 116e 4B010000 		.4byte	.LASF215
 12672 1172 01       		.byte	0x1
 12673 1173 3405     		.2byte	0x534
 12674 1175 BD000000 		.4byte	0xbd
 12675 1179 02       		.uleb128 0x2
 12676 117a 91       		.byte	0x91
 12677 117b 6C       		.sleb128 -20
 12678 117c 1B       		.uleb128 0x1b
 12679 117d EC0B0000 		.4byte	.LASF216
 12680 1181 01       		.byte	0x1
 12681 1182 3505     		.2byte	0x535
 12682 1184 BD000000 		.4byte	0xbd
 12683 1188 03       		.uleb128 0x3
 12684 1189 91       		.byte	0x91
 12685 118a AC7F     		.sleb128 -84
 12686 118c 1B       		.uleb128 0x1b
 12687 118d 0C100000 		.4byte	.LASF217
 12688 1191 01       		.byte	0x1
 12689 1192 3605     		.2byte	0x536
 12690 1194 BD000000 		.4byte	0xbd
 12691 1198 03       		.uleb128 0x3
 12692 1199 91       		.byte	0x91
 12693 119a A87F     		.sleb128 -88
 12694 119c 1B       		.uleb128 0x1b
 12695 119d 300B0000 		.4byte	.LASF218
 12696 11a1 01       		.byte	0x1
 12697 11a2 3705     		.2byte	0x537
 12698 11a4 BD000000 		.4byte	0xbd
 12699 11a8 02       		.uleb128 0x2
 12700 11a9 91       		.byte	0x91
 12701 11aa 68       		.sleb128 -24
 12702 11ab 1D       		.uleb128 0x1d
 12703 11ac 4D4F5400 		.ascii	"MOT\000"
 12704 11b0 01       		.byte	0x1
 12705 11b1 3905     		.2byte	0x539
 12706 11b3 860E0000 		.4byte	0xe86
 12707 11b7 02       		.uleb128 0x2
 12708 11b8 91       		.byte	0x91
 12709 11b9 64       		.sleb128 -28
 12710 11ba 1B       		.uleb128 0x1b
 12711 11bb 3F100000 		.4byte	.LASF204
 12712 11bf 01       		.byte	0x1
 12713 11c0 3A05     		.2byte	0x53a
 12714 11c2 81000000 		.4byte	0x81
 12715 11c6 02       		.uleb128 0x2
 12716 11c7 91       		.byte	0x91
 12717 11c8 63       		.sleb128 -29
 12718 11c9 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 279


 12719 11ca 6B5F7000 		.ascii	"k_p\000"
 12720 11ce 01       		.byte	0x1
 12721 11cf 3C05     		.2byte	0x53c
 12722 11d1 BD000000 		.4byte	0xbd
 12723 11d5 02       		.uleb128 0x2
 12724 11d6 91       		.byte	0x91
 12725 11d7 5C       		.sleb128 -36
 12726 11d8 1D       		.uleb128 0x1d
 12727 11d9 6B5F6900 		.ascii	"k_i\000"
 12728 11dd 01       		.byte	0x1
 12729 11de 3D05     		.2byte	0x53d
 12730 11e0 BD000000 		.4byte	0xbd
 12731 11e4 02       		.uleb128 0x2
 12732 11e5 91       		.byte	0x91
 12733 11e6 58       		.sleb128 -40
 12734 11e7 1D       		.uleb128 0x1d
 12735 11e8 6B5F6400 		.ascii	"k_d\000"
 12736 11ec 01       		.byte	0x1
 12737 11ed 3E05     		.2byte	0x53e
 12738 11ef BD000000 		.4byte	0xbd
 12739 11f3 02       		.uleb128 0x2
 12740 11f4 91       		.byte	0x91
 12741 11f5 54       		.sleb128 -44
 12742 11f6 1B       		.uleb128 0x1b
 12743 11f7 130D0000 		.4byte	.LASF75
 12744 11fb 01       		.byte	0x1
 12745 11fc 4005     		.2byte	0x540
 12746 11fe BD000000 		.4byte	0xbd
 12747 1202 02       		.uleb128 0x2
 12748 1203 91       		.byte	0x91
 12749 1204 50       		.sleb128 -48
 12750 1205 1B       		.uleb128 0x1b
 12751 1206 89050000 		.4byte	.LASF76
 12752 120a 01       		.byte	0x1
 12753 120b 4105     		.2byte	0x541
 12754 120d BD000000 		.4byte	0xbd
 12755 1211 02       		.uleb128 0x2
 12756 1212 91       		.byte	0x91
 12757 1213 4C       		.sleb128 -52
 12758 1214 1B       		.uleb128 0x1b
 12759 1215 71050000 		.4byte	.LASF77
 12760 1219 01       		.byte	0x1
 12761 121a 4205     		.2byte	0x542
 12762 121c BD000000 		.4byte	0xbd
 12763 1220 02       		.uleb128 0x2
 12764 1221 91       		.byte	0x91
 12765 1222 48       		.sleb128 -56
 12766 1223 1B       		.uleb128 0x1b
 12767 1224 E50F0000 		.4byte	.LASF78
 12768 1228 01       		.byte	0x1
 12769 1229 4405     		.2byte	0x544
 12770 122b BD000000 		.4byte	0xbd
 12771 122f 02       		.uleb128 0x2
 12772 1230 91       		.byte	0x91
 12773 1231 44       		.sleb128 -60
 12774 1232 1B       		.uleb128 0x1b
 12775 1233 25060000 		.4byte	.LASF79
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 280


 12776 1237 01       		.byte	0x1
 12777 1238 4505     		.2byte	0x545
 12778 123a BD000000 		.4byte	0xbd
 12779 123e 02       		.uleb128 0x2
 12780 123f 91       		.byte	0x91
 12781 1240 40       		.sleb128 -64
 12782 1241 1B       		.uleb128 0x1b
 12783 1242 F40E0000 		.4byte	.LASF80
 12784 1246 01       		.byte	0x1
 12785 1247 4605     		.2byte	0x546
 12786 1249 BD000000 		.4byte	0xbd
 12787 124d 03       		.uleb128 0x3
 12788 124e 91       		.byte	0x91
 12789 124f BC7F     		.sleb128 -68
 12790 1251 1B       		.uleb128 0x1b
 12791 1252 33060000 		.4byte	.LASF81
 12792 1256 01       		.byte	0x1
 12793 1257 4805     		.2byte	0x548
 12794 1259 BD000000 		.4byte	0xbd
 12795 125d 03       		.uleb128 0x3
 12796 125e 91       		.byte	0x91
 12797 125f B87F     		.sleb128 -72
 12798 1261 1B       		.uleb128 0x1b
 12799 1262 7B070000 		.4byte	.LASF82
 12800 1266 01       		.byte	0x1
 12801 1267 4905     		.2byte	0x549
 12802 1269 BD000000 		.4byte	0xbd
 12803 126d 03       		.uleb128 0x3
 12804 126e 91       		.byte	0x91
 12805 126f B47F     		.sleb128 -76
 12806 1271 1B       		.uleb128 0x1b
 12807 1272 BF120000 		.4byte	.LASF83
 12808 1276 01       		.byte	0x1
 12809 1277 4A05     		.2byte	0x54a
 12810 1279 BD000000 		.4byte	0xbd
 12811 127d 03       		.uleb128 0x3
 12812 127e 91       		.byte	0x91
 12813 127f B07F     		.sleb128 -80
 12814 1281 1B       		.uleb128 0x1b
 12815 1282 00060000 		.4byte	.LASF221
 12816 1286 01       		.byte	0x1
 12817 1287 4E05     		.2byte	0x54e
 12818 1289 94020000 		.4byte	0x294
 12819 128d 05       		.uleb128 0x5
 12820 128e 03       		.byte	0x3
 12821 128f AC000000 		.4byte	pos_error_sum.10606
 12822 1293 1B       		.uleb128 0x1b
 12823 1294 67040000 		.4byte	.LASF222
 12824 1298 01       		.byte	0x1
 12825 1299 4F05     		.2byte	0x54f
 12826 129b 94020000 		.4byte	0x294
 12827 129f 05       		.uleb128 0x5
 12828 12a0 03       		.byte	0x3
 12829 12a1 C0000000 		.4byte	curr_error_sum.10607
 12830 12a5 1B       		.uleb128 0x1b
 12831 12a6 9B0B0000 		.4byte	.LASF223
 12832 12aa 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 281


 12833 12ab 5105     		.2byte	0x551
 12834 12ad 94020000 		.4byte	0x294
 12835 12b1 05       		.uleb128 0x5
 12836 12b2 03       		.byte	0x3
 12837 12b3 B4000000 		.4byte	prev_pos_err.10608
 12838 12b7 1B       		.uleb128 0x1b
 12839 12b8 F20C0000 		.4byte	.LASF224
 12840 12bc 01       		.byte	0x1
 12841 12bd 5205     		.2byte	0x552
 12842 12bf 94020000 		.4byte	0x294
 12843 12c3 05       		.uleb128 0x5
 12844 12c4 03       		.byte	0x3
 12845 12c5 C8000000 		.4byte	prev_curr_err.10609
 12846 12c9 1B       		.uleb128 0x1b
 12847 12ca 570F0000 		.4byte	.LASF225
 12848 12ce 01       		.byte	0x1
 12849 12cf 5305     		.2byte	0x553
 12850 12d1 94020000 		.4byte	0x294
 12851 12d5 05       		.uleb128 0x5
 12852 12d6 03       		.byte	0x3
 12853 12d7 D0000000 		.4byte	prev_pwm.10610
 12854 12db 1B       		.uleb128 0x1b
 12855 12dc 8F050000 		.4byte	.LASF226
 12856 12e0 01       		.byte	0x1
 12857 12e1 5505     		.2byte	0x555
 12858 12e3 2E070000 		.4byte	0x72e
 12859 12e7 05       		.uleb128 0x5
 12860 12e8 03       		.byte	0x3
 12861 12e9 BC000000 		.4byte	motor_dir.10611
 12862 12ed 1B       		.uleb128 0x1b
 12863 12ee 58060000 		.4byte	.LASF227
 12864 12f2 01       		.byte	0x1
 12865 12f3 5605     		.2byte	0x556
 12866 12f5 A3030000 		.4byte	0x3a3
 12867 12f9 05       		.uleb128 0x5
 12868 12fa 03       		.byte	0x3
 12869 12fb D8000000 		.4byte	position_counter.10612
 12870 12ff 00       		.byte	0
 12871 1300 1A       		.uleb128 0x1a
 12872 1301 A9030000 		.4byte	.LASF229
 12873 1305 01       		.byte	0x1
 12874 1306 AF06     		.2byte	0x6af
 12875 1308 00000000 		.4byte	.LFB73
 12876 130c 18080000 		.4byte	.LFE73-.LFB73
 12877 1310 01       		.uleb128 0x1
 12878 1311 9C       		.byte	0x9c
 12879 1312 88140000 		.4byte	0x1488
 12880 1316 20       		.uleb128 0x20
 12881 1317 C6000000 		.4byte	.LASF230
 12882 131b 01       		.byte	0x1
 12883 131c AF06     		.2byte	0x6af
 12884 131e 81000000 		.4byte	0x81
 12885 1322 03       		.uleb128 0x3
 12886 1323 91       		.byte	0x91
 12887 1324 BF7F     		.sleb128 -65
 12888 1326 20       		.uleb128 0x20
 12889 1327 1C0B0000 		.4byte	.LASF231
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 282


 12890 132b 01       		.byte	0x1
 12891 132c AF06     		.2byte	0x6af
 12892 132e 81000000 		.4byte	0x81
 12893 1332 03       		.uleb128 0x3
 12894 1333 91       		.byte	0x91
 12895 1334 BE7F     		.sleb128 -66
 12896 1336 1B       		.uleb128 0x1b
 12897 1337 36070000 		.4byte	.LASF232
 12898 133b 01       		.byte	0x1
 12899 133c B106     		.2byte	0x6b1
 12900 133e 81000000 		.4byte	0x81
 12901 1342 02       		.uleb128 0x2
 12902 1343 91       		.byte	0x91
 12903 1344 67       		.sleb128 -25
 12904 1345 1D       		.uleb128 0x1d
 12905 1346 6A6A00   		.ascii	"jj\000"
 12906 1349 01       		.byte	0x1
 12907 134a B406     		.2byte	0x6b4
 12908 134c 81000000 		.4byte	0x81
 12909 1350 02       		.uleb128 0x2
 12910 1351 91       		.byte	0x91
 12911 1352 66       		.sleb128 -26
 12912 1353 1B       		.uleb128 0x1b
 12913 1354 73030000 		.4byte	.LASF233
 12914 1358 01       		.byte	0x1
 12915 1359 B606     		.2byte	0x6b6
 12916 135b 88140000 		.4byte	0x1488
 12917 135f 02       		.uleb128 0x2
 12918 1360 91       		.byte	0x91
 12919 1361 40       		.sleb128 -64
 12920 1362 1B       		.uleb128 0x1b
 12921 1363 72100000 		.4byte	.LASF234
 12922 1367 01       		.byte	0x1
 12923 1368 B706     		.2byte	0x6b7
 12924 136a B1000000 		.4byte	0xb1
 12925 136e 02       		.uleb128 0x2
 12926 136f 91       		.byte	0x91
 12927 1370 64       		.sleb128 -28
 12928 1371 1B       		.uleb128 0x1b
 12929 1372 DD0C0000 		.4byte	.LASF235
 12930 1376 01       		.byte	0x1
 12931 1377 B806     		.2byte	0x6b8
 12932 1379 BD000000 		.4byte	0xbd
 12933 137d 02       		.uleb128 0x2
 12934 137e 91       		.byte	0x91
 12935 137f 54       		.sleb128 -44
 12936 1380 1B       		.uleb128 0x1b
 12937 1381 FB0E0000 		.4byte	.LASF236
 12938 1385 01       		.byte	0x1
 12939 1386 B906     		.2byte	0x6b9
 12940 1388 BD000000 		.4byte	0xbd
 12941 138c 02       		.uleb128 0x2
 12942 138d 91       		.byte	0x91
 12943 138e 60       		.sleb128 -32
 12944 138f 1B       		.uleb128 0x1b
 12945 1390 B0040000 		.4byte	.LASF237
 12946 1394 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 283


 12947 1395 BA06     		.2byte	0x6ba
 12948 1397 BD000000 		.4byte	0xbd
 12949 139b 02       		.uleb128 0x2
 12950 139c 91       		.byte	0x91
 12951 139d 4C       		.sleb128 -52
 12952 139e 1B       		.uleb128 0x1b
 12953 139f D60E0000 		.4byte	.LASF238
 12954 13a3 01       		.byte	0x1
 12955 13a4 BB06     		.2byte	0x6bb
 12956 13a6 BD000000 		.4byte	0xbd
 12957 13aa 02       		.uleb128 0x2
 12958 13ab 91       		.byte	0x91
 12959 13ac 50       		.sleb128 -48
 12960 13ad 1B       		.uleb128 0x1b
 12961 13ae A80B0000 		.4byte	.LASF239
 12962 13b2 01       		.byte	0x1
 12963 13b3 BC06     		.2byte	0x6bc
 12964 13b5 A5000000 		.4byte	0xa5
 12965 13b9 02       		.uleb128 0x2
 12966 13ba 91       		.byte	0x91
 12967 13bb 5F       		.sleb128 -33
 12968 13bc 1B       		.uleb128 0x1b
 12969 13bd 370C0000 		.4byte	.LASF240
 12970 13c1 01       		.byte	0x1
 12971 13c2 BE06     		.2byte	0x6be
 12972 13c4 98140000 		.4byte	0x1498
 12973 13c8 05       		.uleb128 0x5
 12974 13c9 03       		.byte	0x3
 12975 13ca E0000000 		.4byte	last_value_encoder.10635
 12976 13ce 1B       		.uleb128 0x1b
 12977 13cf EA060000 		.4byte	.LASF241
 12978 13d3 01       		.byte	0x1
 12979 13d4 BF06     		.2byte	0x6bf
 12980 13d6 98140000 		.4byte	0x1498
 12981 13da 05       		.uleb128 0x5
 12982 13db 03       		.byte	0x3
 12983 13dc F8000000 		.4byte	comp_value_encoder.10636
 12984 13e0 1B       		.uleb128 0x1b
 12985 13e1 BD030000 		.4byte	.LASF242
 12986 13e5 01       		.byte	0x1
 12987 13e6 C006     		.2byte	0x6c0
 12988 13e8 AE140000 		.4byte	0x14ae
 12989 13ec 05       		.uleb128 0x5
 12990 13ed 03       		.byte	0x3
 12991 13ee 10010000 		.4byte	error.10637
 12992 13f2 1B       		.uleb128 0x1b
 12993 13f3 B40E0000 		.4byte	.LASF243
 12994 13f7 01       		.byte	0x1
 12995 13f8 C206     		.2byte	0x6c2
 12996 13fa 2E070000 		.4byte	0x72e
 12997 13fe 05       		.uleb128 0x5
 12998 13ff 03       		.byte	0x3
 12999 1400 04000000 		.4byte	only_first_time.10638
 13000 1404 1B       		.uleb128 0x1b
 13001 1405 2E030000 		.4byte	.LASF244
 13002 1409 01       		.byte	0x1
 13003 140a C306     		.2byte	0x6c3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 284


 13004 140c 2E070000 		.4byte	0x72e
 13005 1410 05       		.uleb128 0x5
 13006 1411 03       		.byte	0x3
 13007 1412 64010000 		.4byte	safe_startup_motor_activation.10639
 13008 1416 1B       		.uleb128 0x1b
 13009 1417 98000000 		.4byte	.LASF245
 13010 141b 01       		.byte	0x1
 13011 141c C406     		.2byte	0x6c4
 13012 141e 2E070000 		.4byte	0x72e
 13013 1422 05       		.uleb128 0x5
 13014 1423 03       		.byte	0x3
 13015 1424 60010000 		.4byte	one_time_execute.10640
 13016 1428 1B       		.uleb128 0x1b
 13017 1429 3A0A0000 		.4byte	.LASF246
 13018 142d 01       		.byte	0x1
 13019 142e C506     		.2byte	0x6c5
 13020 1430 A3030000 		.4byte	0x3a3
 13021 1434 05       		.uleb128 0x5
 13022 1435 03       		.byte	0x3
 13023 1436 68010000 		.4byte	count_startup_motor.10641
 13024 143a 1B       		.uleb128 0x1b
 13025 143b 5B090000 		.4byte	.LASF247
 13026 143f 01       		.byte	0x1
 13027 1440 C706     		.2byte	0x6c7
 13028 1442 98140000 		.4byte	0x1498
 13029 1446 05       		.uleb128 0x5
 13030 1447 03       		.byte	0x3
 13031 1448 18010000 		.4byte	v_value.10642
 13032 144c 1B       		.uleb128 0x1b
 13033 144d B6120000 		.4byte	.LASF248
 13034 1451 01       		.byte	0x1
 13035 1452 C806     		.2byte	0x6c8
 13036 1454 98140000 		.4byte	0x1498
 13037 1458 05       		.uleb128 0x5
 13038 1459 03       		.byte	0x3
 13039 145a 30010000 		.4byte	vv_value.10643
 13040 145e 1B       		.uleb128 0x1b
 13041 145f 99010000 		.4byte	.LASF249
 13042 1463 01       		.byte	0x1
 13043 1464 C906     		.2byte	0x6c9
 13044 1466 98140000 		.4byte	0x1498
 13045 146a 05       		.uleb128 0x5
 13046 146b 03       		.byte	0x3
 13047 146c 48010000 		.4byte	vvv_value.10644
 13048 1470 1E       		.uleb128 0x1e
 13049 1471 98000000 		.4byte	.LBB10
 13050 1475 6A000000 		.4byte	.LBE10-.LBB10
 13051 1479 1D       		.uleb128 0x1d
 13052 147a 6A00     		.ascii	"j\000"
 13053 147c 01       		.byte	0x1
 13054 147d D906     		.2byte	0x6d9
 13055 147f 68000000 		.4byte	0x68
 13056 1483 02       		.uleb128 0x2
 13057 1484 91       		.byte	0x91
 13058 1485 58       		.sleb128 -40
 13059 1486 00       		.byte	0
 13060 1487 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 285


 13061 1488 07       		.uleb128 0x7
 13062 1489 99000000 		.4byte	0x99
 13063 148d 98140000 		.4byte	0x1498
 13064 1491 08       		.uleb128 0x8
 13065 1492 0E010000 		.4byte	0x10e
 13066 1496 02       		.byte	0x2
 13067 1497 00       		.byte	0
 13068 1498 07       		.uleb128 0x7
 13069 1499 BD000000 		.4byte	0xbd
 13070 149d AE140000 		.4byte	0x14ae
 13071 14a1 08       		.uleb128 0x8
 13072 14a2 0E010000 		.4byte	0x10e
 13073 14a6 01       		.byte	0x1
 13074 14a7 08       		.uleb128 0x8
 13075 14a8 0E010000 		.4byte	0x10e
 13076 14ac 02       		.byte	0x2
 13077 14ad 00       		.byte	0
 13078 14ae 07       		.uleb128 0x7
 13079 14af 81000000 		.4byte	0x81
 13080 14b3 C4140000 		.4byte	0x14c4
 13081 14b7 08       		.uleb128 0x8
 13082 14b8 0E010000 		.4byte	0x10e
 13083 14bc 01       		.byte	0x1
 13084 14bd 08       		.uleb128 0x8
 13085 14be 0E010000 		.4byte	0x10e
 13086 14c2 02       		.byte	0x2
 13087 14c3 00       		.byte	0
 13088 14c4 24       		.uleb128 0x24
 13089 14c5 B10D0000 		.4byte	.LASF250
 13090 14c9 01       		.byte	0x1
 13091 14ca 8C07     		.2byte	0x78c
 13092 14cc 00000000 		.4byte	.LFB74
 13093 14d0 70120000 		.4byte	.LFE74-.LFB74
 13094 14d4 01       		.uleb128 0x1
 13095 14d5 9C       		.byte	0x9c
 13096 14d6 B0150000 		.4byte	0x15b0
 13097 14da 1B       		.uleb128 0x1b
 13098 14db 510D0000 		.4byte	.LASF251
 13099 14df 01       		.byte	0x1
 13100 14e0 A007     		.2byte	0x7a0
 13101 14e2 BD000000 		.4byte	0xbd
 13102 14e6 02       		.uleb128 0x2
 13103 14e7 91       		.byte	0x91
 13104 14e8 64       		.sleb128 -28
 13105 14e9 1B       		.uleb128 0x1b
 13106 14ea 980E0000 		.4byte	.LASF252
 13107 14ee 01       		.byte	0x1
 13108 14ef A207     		.2byte	0x7a2
 13109 14f1 8D000000 		.4byte	0x8d
 13110 14f5 05       		.uleb128 0x5
 13111 14f6 03       		.byte	0x3
 13112 14f7 78010000 		.4byte	emg_counter_1.10661
 13113 14fb 1B       		.uleb128 0x1b
 13114 14fc A60E0000 		.4byte	.LASF253
 13115 1500 01       		.byte	0x1
 13116 1501 A307     		.2byte	0x7a3
 13117 1503 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 286


 13118 1507 05       		.uleb128 0x5
 13119 1508 03       		.byte	0x3
 13120 1509 7A010000 		.4byte	emg_counter_2.10662
 13121 150d 1B       		.uleb128 0x1b
 13122 150e 5D020000 		.4byte	.LASF254
 13123 1512 01       		.byte	0x1
 13124 1513 A407     		.2byte	0x7a4
 13125 1515 8D000000 		.4byte	0x8d
 13126 1519 05       		.uleb128 0x5
 13127 151a 03       		.byte	0x3
 13128 151b 80010000 		.4byte	UD_counter.10663
 13129 151f 1B       		.uleb128 0x1b
 13130 1520 CD030000 		.4byte	.LASF255
 13131 1524 01       		.byte	0x1
 13132 1525 A507     		.2byte	0x7a5
 13133 1527 8D000000 		.4byte	0x8d
 13134 152b 05       		.uleb128 0x5
 13135 152c 03       		.byte	0x3
 13136 152d 88010000 		.4byte	LR_counter.10664
 13137 1531 1B       		.uleb128 0x1b
 13138 1532 0E0B0000 		.4byte	.LASF256
 13139 1536 01       		.byte	0x1
 13140 1537 A607     		.2byte	0x7a6
 13141 1539 BD000000 		.4byte	0xbd
 13142 153d 05       		.uleb128 0x5
 13143 153e 03       		.byte	0x3
 13144 153f 7C010000 		.4byte	UD_mean_value.10665
 13145 1543 1B       		.uleb128 0x1b
 13146 1544 0F120000 		.4byte	.LASF257
 13147 1548 01       		.byte	0x1
 13148 1549 A707     		.2byte	0x7a7
 13149 154b BD000000 		.4byte	0xbd
 13150 154f 05       		.uleb128 0x5
 13151 1550 03       		.byte	0x3
 13152 1551 84010000 		.4byte	LR_mean_value.10666
 13153 1555 1B       		.uleb128 0x1b
 13154 1556 B6020000 		.4byte	.LASF258
 13155 155a 01       		.byte	0x1
 13156 155b A807     		.2byte	0x7a8
 13157 155d 81000000 		.4byte	0x81
 13158 1561 05       		.uleb128 0x5
 13159 1562 03       		.byte	0x3
 13160 1563 0C000000 		.4byte	first_tension_valid.10667
 13161 1567 1B       		.uleb128 0x1b
 13162 1568 0D050000 		.4byte	.LASF259
 13163 156c 01       		.byte	0x1
 13164 156d A907     		.2byte	0x7a9
 13165 156f BD000000 		.4byte	0xbd
 13166 1573 05       		.uleb128 0x5
 13167 1574 03       		.byte	0x3
 13168 1575 08000000 		.4byte	detect_power_cycle_prev.10668
 13169 1579 1B       		.uleb128 0x1b
 13170 157a 6B0A0000 		.4byte	.LASF260
 13171 157e 01       		.byte	0x1
 13172 157f AA07     		.2byte	0x7aa
 13173 1581 8D000000 		.4byte	0x8d
 13174 1585 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 287


 13175 1586 03       		.byte	0x3
 13176 1587 70010000 		.4byte	count.10669
 13177 158b 1B       		.uleb128 0x1b
 13178 158c 89010000 		.4byte	.LASF261
 13179 1590 01       		.byte	0x1
 13180 1591 AB07     		.2byte	0x7ab
 13181 1593 99000000 		.4byte	0x99
 13182 1597 05       		.uleb128 0x5
 13183 1598 03       		.byte	0x3
 13184 1599 74010000 		.4byte	v_count.10670
 13185 159d 1D       		.uleb128 0x1d
 13186 159e 69647800 		.ascii	"idx\000"
 13187 15a2 01       		.byte	0x1
 13188 15a3 AC07     		.2byte	0x7ac
 13189 15a5 81000000 		.4byte	0x81
 13190 15a9 05       		.uleb128 0x5
 13191 15aa 03       		.byte	0x3
 13192 15ab 72010000 		.4byte	idx.10671
 13193 15af 00       		.byte	0
 13194 15b0 26       		.uleb128 0x26
 13195 15b1 7C0D0000 		.4byte	.LASF262
 13196 15b5 01       		.byte	0x1
 13197 15b6 0F0A     		.2byte	0xa0f
 13198 15b8 00000000 		.4byte	.LFB75
 13199 15bc 0C010000 		.4byte	.LFE75-.LFB75
 13200 15c0 01       		.uleb128 0x1
 13201 15c1 9C       		.byte	0x9c
 13202 15c2 F7150000 		.4byte	0x15f7
 13203 15c6 1E       		.uleb128 0x1e
 13204 15c7 06000000 		.4byte	.LBB11
 13205 15cb E6000000 		.4byte	.LBE11-.LBB11
 13206 15cf 1D       		.uleb128 0x1d
 13207 15d0 6900     		.ascii	"i\000"
 13208 15d2 01       		.byte	0x1
 13209 15d3 110A     		.2byte	0xa11
 13210 15d5 81000000 		.4byte	0x81
 13211 15d9 02       		.uleb128 0x2
 13212 15da 91       		.byte	0x91
 13213 15db 77       		.sleb128 -9
 13214 15dc 1E       		.uleb128 0x1e
 13215 15dd 26000000 		.4byte	.LBB12
 13216 15e1 BA000000 		.4byte	.LBE12-.LBB12
 13217 15e5 1B       		.uleb128 0x1b
 13218 15e6 71080000 		.4byte	.LASF40
 13219 15ea 01       		.byte	0x1
 13220 15eb 130A     		.2byte	0xa13
 13221 15ed BD000000 		.4byte	0xbd
 13222 15f1 02       		.uleb128 0x2
 13223 15f2 91       		.byte	0x91
 13224 15f3 70       		.sleb128 -16
 13225 15f4 00       		.byte	0
 13226 15f5 00       		.byte	0
 13227 15f6 00       		.byte	0
 13228 15f7 22       		.uleb128 0x22
 13229 15f8 E8030000 		.4byte	.LASF263
 13230 15fc 01       		.byte	0x1
 13231 15fd 310A     		.2byte	0xa31
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 288


 13232 15ff 00000000 		.4byte	.LFB76
 13233 1603 A8000000 		.4byte	.LFE76-.LFB76
 13234 1607 01       		.uleb128 0x1
 13235 1608 9C       		.byte	0x9c
 13236 1609 4A160000 		.4byte	0x164a
 13237 160d 20       		.uleb128 0x20
 13238 160e B10B0000 		.4byte	.LASF264
 13239 1612 01       		.byte	0x1
 13240 1613 310A     		.2byte	0xa31
 13241 1615 81000000 		.4byte	0x81
 13242 1619 02       		.uleb128 0x2
 13243 161a 91       		.byte	0x91
 13244 161b 6F       		.sleb128 -17
 13245 161c 1B       		.uleb128 0x1b
 13246 161d 36070000 		.4byte	.LASF232
 13247 1621 01       		.byte	0x1
 13248 1622 330A     		.2byte	0xa33
 13249 1624 81000000 		.4byte	0x81
 13250 1628 02       		.uleb128 0x2
 13251 1629 91       		.byte	0x91
 13252 162a 73       		.sleb128 -13
 13253 162b 1B       		.uleb128 0x1b
 13254 162c 210C0000 		.4byte	.LASF265
 13255 1630 01       		.byte	0x1
 13256 1631 340A     		.2byte	0xa34
 13257 1633 8D000000 		.4byte	0x8d
 13258 1637 02       		.uleb128 0x2
 13259 1638 91       		.byte	0x91
 13260 1639 76       		.sleb128 -10
 13261 163a 1B       		.uleb128 0x1b
 13262 163b 1B080000 		.4byte	.LASF266
 13263 163f 01       		.byte	0x1
 13264 1640 350A     		.2byte	0xa35
 13265 1642 8D000000 		.4byte	0x8d
 13266 1646 02       		.uleb128 0x2
 13267 1647 91       		.byte	0x91
 13268 1648 74       		.sleb128 -12
 13269 1649 00       		.byte	0
 13270 164a 24       		.uleb128 0x24
 13271 164b 98080000 		.4byte	.LASF267
 13272 164f 01       		.byte	0x1
 13273 1650 490A     		.2byte	0xa49
 13274 1652 00000000 		.4byte	.LFB77
 13275 1656 58060000 		.4byte	.LFE77-.LFB77
 13276 165a 01       		.uleb128 0x1
 13277 165b 9C       		.byte	0x9c
 13278 165c E2170000 		.4byte	0x17e2
 13279 1660 1B       		.uleb128 0x1b
 13280 1661 26000000 		.4byte	.LASF268
 13281 1665 01       		.byte	0x1
 13282 1666 4A0A     		.2byte	0xa4a
 13283 1668 81000000 		.4byte	0x81
 13284 166c 05       		.uleb128 0x5
 13285 166d 03       		.byte	0x3
 13286 166e 8A010000 		.4byte	pos_cycle_status.10742
 13287 1672 1B       		.uleb128 0x1b
 13288 1673 E30D0000 		.4byte	.LASF269
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 289


 13289 1677 01       		.byte	0x1
 13290 1678 4B0A     		.2byte	0xa4b
 13291 167a 2E070000 		.4byte	0x72e
 13292 167e 05       		.uleb128 0x5
 13293 167f 03       		.byte	0x3
 13294 1680 94010000 		.4byte	emg_cycle_status.10743
 13295 1684 1B       		.uleb128 0x1b
 13296 1685 AC0C0000 		.4byte	.LASF270
 13297 1689 01       		.byte	0x1
 13298 168a 4C0A     		.2byte	0xa4c
 13299 168c 2E070000 		.4byte	0x72e
 13300 1690 05       		.uleb128 0x5
 13301 1691 03       		.byte	0x3
 13302 1692 98010000 		.4byte	motion_status.10744
 13303 1696 1B       		.uleb128 0x1b
 13304 1697 7D0A0000 		.4byte	.LASF271
 13305 169b 01       		.byte	0x1
 13306 169c 4D0A     		.2byte	0xa4d
 13307 169e 2E070000 		.4byte	0x72e
 13308 16a2 05       		.uleb128 0x5
 13309 16a3 03       		.byte	0x3
 13310 16a4 A4010000 		.4byte	emg_excess_status.10745
 13311 16a8 1B       		.uleb128 0x1b
 13312 16a9 2D100000 		.4byte	.LASF272
 13313 16ad 01       		.byte	0x1
 13314 16ae 4E0A     		.2byte	0xa4e
 13315 16b0 81000000 		.4byte	0x81
 13316 16b4 05       		.uleb128 0x5
 13317 16b5 03       		.byte	0x3
 13318 16b6 B8010000 		.4byte	rest_cycle_status.10746
 13319 16ba 1B       		.uleb128 0x1b
 13320 16bb 17030000 		.4byte	.LASF273
 13321 16bf 01       		.byte	0x1
 13322 16c0 4F0A     		.2byte	0xa4f
 13323 16c2 BD000000 		.4byte	0xbd
 13324 16c6 05       		.uleb128 0x5
 13325 16c7 03       		.byte	0x3
 13326 16c8 10000000 		.4byte	bin_threshold.10747
 13327 16cc 1B       		.uleb128 0x1b
 13328 16cd C20F0000 		.4byte	.LASF274
 13329 16d1 01       		.byte	0x1
 13330 16d2 500A     		.2byte	0xa50
 13331 16d4 BD000000 		.4byte	0xbd
 13332 16d8 05       		.uleb128 0x5
 13333 16d9 03       		.byte	0x3
 13334 16da 14000000 		.4byte	exc_act_thr.10748
 13335 16de 1B       		.uleb128 0x1b
 13336 16df E4010000 		.4byte	.LASF275
 13337 16e3 01       		.byte	0x1
 13338 16e4 510A     		.2byte	0xa51
 13339 16e6 BD000000 		.4byte	0xbd
 13340 16ea 05       		.uleb128 0x5
 13341 16eb 03       		.byte	0x3
 13342 16ec 8C010000 		.4byte	thr_pos.10749
 13343 16f0 1B       		.uleb128 0x1b
 13344 16f1 A90A0000 		.4byte	.LASF276
 13345 16f5 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 290


 13346 16f6 520A     		.2byte	0xa52
 13347 16f8 BD000000 		.4byte	0xbd
 13348 16fc 05       		.uleb128 0x5
 13349 16fd 03       		.byte	0x3
 13350 16fe 90010000 		.4byte	max_pos.10750
 13351 1702 1D       		.uleb128 0x1d
 13352 1703 6900     		.ascii	"i\000"
 13353 1705 01       		.byte	0x1
 13354 1706 530A     		.2byte	0xa53
 13355 1708 81000000 		.4byte	0x81
 13356 170c 02       		.uleb128 0x2
 13357 170d 91       		.byte	0x91
 13358 170e 6F       		.sleb128 -17
 13359 170f 1B       		.uleb128 0x1b
 13360 1710 99050000 		.4byte	.LASF277
 13361 1714 01       		.byte	0x1
 13362 1715 530A     		.2byte	0xa53
 13363 1717 81000000 		.4byte	0x81
 13364 171b 02       		.uleb128 0x2
 13365 171c 91       		.byte	0x91
 13366 171d 5B       		.sleb128 -37
 13367 171e 1B       		.uleb128 0x1b
 13368 171f 16010000 		.4byte	.LASF278
 13369 1723 01       		.byte	0x1
 13370 1724 530A     		.2byte	0xa53
 13371 1726 81000000 		.4byte	0x81
 13372 172a 02       		.uleb128 0x2
 13373 172b 91       		.byte	0x91
 13374 172c 5A       		.sleb128 -38
 13375 172d 1B       		.uleb128 0x1b
 13376 172e 450D0000 		.4byte	.LASF279
 13377 1732 01       		.byte	0x1
 13378 1733 530A     		.2byte	0xa53
 13379 1735 81000000 		.4byte	0x81
 13380 1739 02       		.uleb128 0x2
 13381 173a 91       		.byte	0x91
 13382 173b 59       		.sleb128 -39
 13383 173c 1B       		.uleb128 0x1b
 13384 173d 4B0D0000 		.4byte	.LASF280
 13385 1741 01       		.byte	0x1
 13386 1742 530A     		.2byte	0xa53
 13387 1744 81000000 		.4byte	0x81
 13388 1748 02       		.uleb128 0x2
 13389 1749 91       		.byte	0x91
 13390 174a 58       		.sleb128 -40
 13391 174b 1B       		.uleb128 0x1b
 13392 174c 900D0000 		.4byte	.LASF281
 13393 1750 01       		.byte	0x1
 13394 1751 540A     		.2byte	0xa54
 13395 1753 BD000000 		.4byte	0xbd
 13396 1757 02       		.uleb128 0x2
 13397 1758 91       		.byte	0x91
 13398 1759 64       		.sleb128 -28
 13399 175a 1B       		.uleb128 0x1b
 13400 175b C7040000 		.4byte	.LASF282
 13401 175f 01       		.byte	0x1
 13402 1760 540A     		.2byte	0xa54
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 291


 13403 1762 BD000000 		.4byte	0xbd
 13404 1766 02       		.uleb128 0x2
 13405 1767 91       		.byte	0x91
 13406 1768 60       		.sleb128 -32
 13407 1769 1B       		.uleb128 0x1b
 13408 176a E10E0000 		.4byte	.LASF283
 13409 176e 01       		.byte	0x1
 13410 176f 540A     		.2byte	0xa54
 13411 1771 BD000000 		.4byte	0xbd
 13412 1775 02       		.uleb128 0x2
 13413 1776 91       		.byte	0x91
 13414 1777 68       		.sleb128 -24
 13415 1778 1B       		.uleb128 0x1b
 13416 1779 62040000 		.4byte	.LASF284
 13417 177d 01       		.byte	0x1
 13418 177e 550A     		.2byte	0xa55
 13419 1780 BD000000 		.4byte	0xbd
 13420 1784 02       		.uleb128 0x2
 13421 1785 91       		.byte	0x91
 13422 1786 5C       		.sleb128 -36
 13423 1787 1B       		.uleb128 0x1b
 13424 1788 CE060000 		.4byte	.LASF285
 13425 178c 01       		.byte	0x1
 13426 178d 560A     		.2byte	0xa56
 13427 178f 99000000 		.4byte	0x99
 13428 1793 05       		.uleb128 0x5
 13429 1794 03       		.byte	0x3
 13430 1795 BC010000 		.4byte	timer_value_s.10760
 13431 1799 1B       		.uleb128 0x1b
 13432 179a 69060000 		.4byte	.LASF286
 13433 179e 01       		.byte	0x1
 13434 179f 560A     		.2byte	0xa56
 13435 17a1 99000000 		.4byte	0x99
 13436 17a5 05       		.uleb128 0x5
 13437 17a6 03       		.byte	0x3
 13438 17a7 C0010000 		.4byte	timer_value_e.10761
 13439 17ab 1B       		.uleb128 0x1b
 13440 17ac 9D0F0000 		.4byte	.LASF287
 13441 17b0 01       		.byte	0x1
 13442 17b1 570A     		.2byte	0xa57
 13443 17b3 A3030000 		.4byte	0x3a3
 13444 17b7 05       		.uleb128 0x5
 13445 17b8 03       		.byte	0x3
 13446 17b9 A8010000 		.4byte	timer_exc_s.10762
 13447 17bd 1B       		.uleb128 0x1b
 13448 17be 780F0000 		.4byte	.LASF288
 13449 17c2 01       		.byte	0x1
 13450 17c3 570A     		.2byte	0xa57
 13451 17c5 A3030000 		.4byte	0x3a3
 13452 17c9 05       		.uleb128 0x5
 13453 17ca 03       		.byte	0x3
 13454 17cb B0010000 		.4byte	timer_exc_e.10763
 13455 17cf 1B       		.uleb128 0x1b
 13456 17d0 FD060000 		.4byte	.LASF289
 13457 17d4 01       		.byte	0x1
 13458 17d5 580A     		.2byte	0xa58
 13459 17d7 94020000 		.4byte	0x294
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 292


 13460 17db 05       		.uleb128 0x5
 13461 17dc 03       		.byte	0x3
 13462 17dd 9C010000 		.4byte	start_emg_pos.10764
 13463 17e1 00       		.byte	0
 13464 17e2 24       		.uleb128 0x24
 13465 17e3 440B0000 		.4byte	.LASF290
 13466 17e7 01       		.byte	0x1
 13467 17e8 040B     		.2byte	0xb04
 13468 17ea 00000000 		.4byte	.LFB78
 13469 17ee 08010000 		.4byte	.LFE78-.LFB78
 13470 17f2 01       		.uleb128 0x1
 13471 17f3 9C       		.byte	0x9c
 13472 17f4 68180000 		.4byte	0x1868
 13473 17f8 1B       		.uleb128 0x1b
 13474 17f9 05100000 		.4byte	.LASF291
 13475 17fd 01       		.byte	0x1
 13476 17fe 060B     		.2byte	0xb06
 13477 1800 EA000000 		.4byte	0xea
 13478 1804 02       		.uleb128 0x2
 13479 1805 91       		.byte	0x91
 13480 1806 64       		.sleb128 -28
 13481 1807 1B       		.uleb128 0x1b
 13482 1808 710D0000 		.4byte	.LASF292
 13483 180c 01       		.byte	0x1
 13484 180d 070B     		.2byte	0xb07
 13485 180f 81000000 		.4byte	0x81
 13486 1813 05       		.uleb128 0x5
 13487 1814 03       		.byte	0x3
 13488 1815 C8010000 		.4byte	row_number.10800
 13489 1819 1B       		.uleb128 0x1b
 13490 181a 9A040000 		.4byte	.LASF293
 13491 181e 01       		.byte	0x1
 13492 181f 080B     		.2byte	0xb08
 13493 1821 81000000 		.4byte	0x81
 13494 1825 02       		.uleb128 0x2
 13495 1826 91       		.byte	0x91
 13496 1827 77       		.sleb128 -9
 13497 1828 1B       		.uleb128 0x1b
 13498 1829 330E0000 		.4byte	.LASF294
 13499 182d 01       		.byte	0x1
 13500 182e 090B     		.2byte	0xb09
 13501 1830 68180000 		.4byte	0x1868
 13502 1834 02       		.uleb128 0x2
 13503 1835 91       		.byte	0x91
 13504 1836 70       		.sleb128 -16
 13505 1837 1B       		.uleb128 0x1b
 13506 1838 1E010000 		.4byte	.LASF295
 13507 183c 01       		.byte	0x1
 13508 183d 0A0B     		.2byte	0xb0a
 13509 183f 68180000 		.4byte	0x1868
 13510 1843 02       		.uleb128 0x2
 13511 1844 91       		.byte	0x91
 13512 1845 6C       		.sleb128 -20
 13513 1846 1B       		.uleb128 0x1b
 13514 1847 27120000 		.4byte	.LASF296
 13515 184b 01       		.byte	0x1
 13516 184c 0B0B     		.2byte	0xb0b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 293


 13517 184e 81000000 		.4byte	0x81
 13518 1852 02       		.uleb128 0x2
 13519 1853 91       		.byte	0x91
 13520 1854 6B       		.sleb128 -21
 13521 1855 1B       		.uleb128 0x1b
 13522 1856 8F0A0000 		.4byte	.LASF297
 13523 185a 01       		.byte	0x1
 13524 185b 0C0B     		.2byte	0xb0c
 13525 185d 68180000 		.4byte	0x1868
 13526 1861 05       		.uleb128 0x5
 13527 1862 03       		.byte	0x3
 13528 1863 C4010000 		.4byte	m_addr.10805
 13529 1867 00       		.byte	0
 13530 1868 0C       		.uleb128 0xc
 13531 1869 04       		.byte	0x4
 13532 186a 81000000 		.4byte	0x81
 13533 186e 07       		.uleb128 0x7
 13534 186f 7E180000 		.4byte	0x187e
 13535 1873 7E180000 		.4byte	0x187e
 13536 1877 08       		.uleb128 0x8
 13537 1878 0E010000 		.4byte	0x10e
 13538 187c 1C       		.byte	0x1c
 13539 187d 00       		.byte	0
 13540 187e 27       		.uleb128 0x27
 13541 187f 81000000 		.4byte	0x81
 13542 1883 19       		.uleb128 0x19
 13543 1884 3E0E0000 		.4byte	.LASF298
 13544 1888 01       		.byte	0x1
 13545 1889 40       		.byte	0x40
 13546 188a 94180000 		.4byte	0x1894
 13547 188e 05       		.uleb128 0x5
 13548 188f 03       		.byte	0x3
 13549 1890 00000000 		.4byte	pwm_preload_values
 13550 1894 27       		.uleb128 0x27
 13551 1895 6E180000 		.4byte	0x186e
 13552 1899 28       		.uleb128 0x28
 13553 189a 840F0000 		.4byte	.LASF299
 13554 189e 08       		.byte	0x8
 13555 189f 1207     		.2byte	0x712
 13556 18a1 A5180000 		.4byte	0x18a5
 13557 18a5 06       		.uleb128 0x6
 13558 18a6 76000000 		.4byte	0x76
 13559 18aa 07       		.uleb128 0x7
 13560 18ab A5010000 		.4byte	0x1a5
 13561 18af BA180000 		.4byte	0x18ba
 13562 18b3 08       		.uleb128 0x8
 13563 18b4 0E010000 		.4byte	0x10e
 13564 18b8 01       		.byte	0x1
 13565 18b9 00       		.byte	0
 13566 18ba 28       		.uleb128 0x28
 13567 18bb 1C070000 		.4byte	.LASF300
 13568 18bf 07       		.byte	0x7
 13569 18c0 2202     		.2byte	0x222
 13570 18c2 AA180000 		.4byte	0x18aa
 13571 18c6 28       		.uleb128 0x28
 13572 18c7 BE040000 		.4byte	.LASF301
 13573 18cb 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 294


 13574 18cc 2202     		.2byte	0x222
 13575 18ce AA180000 		.4byte	0x18aa
 13576 18d2 28       		.uleb128 0x28
 13577 18d3 E30B0000 		.4byte	.LASF302
 13578 18d7 07       		.byte	0x7
 13579 18d8 2202     		.2byte	0x222
 13580 18da AA180000 		.4byte	0x18aa
 13581 18de 07       		.uleb128 0x7
 13582 18df E2010000 		.4byte	0x1e2
 13583 18e3 EE180000 		.4byte	0x18ee
 13584 18e7 08       		.uleb128 0x8
 13585 18e8 0E010000 		.4byte	0x10e
 13586 18ec 01       		.byte	0x1
 13587 18ed 00       		.byte	0
 13588 18ee 28       		.uleb128 0x28
 13589 18ef C7060000 		.4byte	.LASF303
 13590 18f3 07       		.byte	0x7
 13591 18f4 2302     		.2byte	0x223
 13592 18f6 DE180000 		.4byte	0x18de
 13593 18fa 28       		.uleb128 0x28
 13594 18fb 1D120000 		.4byte	.LASF304
 13595 18ff 07       		.byte	0x7
 13596 1900 2302     		.2byte	0x223
 13597 1902 DE180000 		.4byte	0x18de
 13598 1906 28       		.uleb128 0x28
 13599 1907 E1100000 		.4byte	.LASF305
 13600 190b 07       		.byte	0x7
 13601 190c 2402     		.2byte	0x224
 13602 190e 63020000 		.4byte	0x263
 13603 1912 28       		.uleb128 0x28
 13604 1913 65030000 		.4byte	.LASF306
 13605 1917 07       		.byte	0x7
 13606 1918 2402     		.2byte	0x224
 13607 191a 63020000 		.4byte	0x263
 13608 191e 28       		.uleb128 0x28
 13609 191f 93000000 		.4byte	.LASF307
 13610 1923 07       		.byte	0x7
 13611 1924 2602     		.2byte	0x226
 13612 1926 B4020000 		.4byte	0x2b4
 13613 192a 28       		.uleb128 0x28
 13614 192b 920E0000 		.4byte	.LASF308
 13615 192f 07       		.byte	0x7
 13616 1930 2702     		.2byte	0x227
 13617 1932 C1090000 		.4byte	0x9c1
 13618 1936 28       		.uleb128 0x28
 13619 1937 960A0000 		.4byte	.LASF309
 13620 193b 07       		.byte	0x7
 13621 193c 2702     		.2byte	0x227
 13622 193e C1090000 		.4byte	0x9c1
 13623 1942 28       		.uleb128 0x28
 13624 1943 63090000 		.4byte	.LASF310
 13625 1947 07       		.byte	0x7
 13626 1948 2802     		.2byte	0x228
 13627 194a 9A0B0000 		.4byte	0xb9a
 13628 194e 07       		.uleb128 0x7
 13629 194f 720B0000 		.4byte	0xb72
 13630 1953 5E190000 		.4byte	0x195e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 295


 13631 1957 08       		.uleb128 0x8
 13632 1958 0E010000 		.4byte	0x10e
 13633 195c 01       		.byte	0x1
 13634 195d 00       		.byte	0
 13635 195e 28       		.uleb128 0x28
 13636 195f CF0B0000 		.4byte	.LASF311
 13637 1963 07       		.byte	0x7
 13638 1964 2902     		.2byte	0x229
 13639 1966 4E190000 		.4byte	0x194e
 13640 196a 28       		.uleb128 0x28
 13641 196b BE090000 		.4byte	.LASF312
 13642 196f 07       		.byte	0x7
 13643 1970 2902     		.2byte	0x229
 13644 1972 4E190000 		.4byte	0x194e
 13645 1976 28       		.uleb128 0x28
 13646 1977 B90B0000 		.4byte	.LASF313
 13647 197b 07       		.byte	0x7
 13648 197c 2902     		.2byte	0x229
 13649 197e 4E190000 		.4byte	0x194e
 13650 1982 07       		.uleb128 0x7
 13651 1983 720B0000 		.4byte	0xb72
 13652 1987 92190000 		.4byte	0x1992
 13653 198b 08       		.uleb128 0x8
 13654 198c 0E010000 		.4byte	0x10e
 13655 1990 02       		.byte	0x2
 13656 1991 00       		.byte	0
 13657 1992 28       		.uleb128 0x28
 13658 1993 57050000 		.4byte	.LASF314
 13659 1997 07       		.byte	0x7
 13660 1998 2A02     		.2byte	0x22a
 13661 199a 82190000 		.4byte	0x1982
 13662 199e 07       		.uleb128 0x7
 13663 199f 720B0000 		.4byte	0xb72
 13664 19a3 AE190000 		.4byte	0x19ae
 13665 19a7 08       		.uleb128 0x8
 13666 19a8 0E010000 		.4byte	0x10e
 13667 19ac 07       		.byte	0x7
 13668 19ad 00       		.byte	0
 13669 19ae 28       		.uleb128 0x28
 13670 19af AE010000 		.4byte	.LASF315
 13671 19b3 07       		.byte	0x7
 13672 19b4 2B02     		.2byte	0x22b
 13673 19b6 9E190000 		.4byte	0x199e
 13674 19ba 28       		.uleb128 0x28
 13675 19bb 92030000 		.4byte	.LASF316
 13676 19bf 07       		.byte	0x7
 13677 19c0 2C02     		.2byte	0x22c
 13678 19c2 720B0000 		.4byte	0xb72
 13679 19c6 28       		.uleb128 0x28
 13680 19c7 CA020000 		.4byte	.LASF317
 13681 19cb 07       		.byte	0x7
 13682 19cc 2E02     		.2byte	0x22e
 13683 19ce 8D000000 		.4byte	0x8d
 13684 19d2 28       		.uleb128 0x28
 13685 19d3 43090000 		.4byte	.LASF318
 13686 19d7 07       		.byte	0x7
 13687 19d8 2F02     		.2byte	0x22f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 296


 13688 19da 8D000000 		.4byte	0x8d
 13689 19de 28       		.uleb128 0x28
 13690 19df 5F0C0000 		.4byte	.LASF319
 13691 19e3 07       		.byte	0x7
 13692 19e4 3002     		.2byte	0x230
 13693 19e6 D5000000 		.4byte	0xd5
 13694 19ea 28       		.uleb128 0x28
 13695 19eb 190D0000 		.4byte	.LASF320
 13696 19ef 07       		.byte	0x7
 13697 19f0 3202     		.2byte	0x232
 13698 19f2 94020000 		.4byte	0x294
 13699 19f6 28       		.uleb128 0x28
 13700 19f7 F70F0000 		.4byte	.LASF321
 13701 19fb 07       		.byte	0x7
 13702 19fc 3302     		.2byte	0x233
 13703 19fe 1E070000 		.4byte	0x71e
 13704 1a02 28       		.uleb128 0x28
 13705 1a03 180F0000 		.4byte	.LASF322
 13706 1a07 07       		.byte	0x7
 13707 1a08 3402     		.2byte	0x234
 13708 1a0a 1E070000 		.4byte	0x71e
 13709 1a0e 28       		.uleb128 0x28
 13710 1a0f 17060000 		.4byte	.LASF323
 13711 1a13 07       		.byte	0x7
 13712 1a14 3502     		.2byte	0x235
 13713 1a16 94020000 		.4byte	0x294
 13714 1a1a 28       		.uleb128 0x28
 13715 1a1b 910F0000 		.4byte	.LASF324
 13716 1a1f 07       		.byte	0x7
 13717 1a20 3602     		.2byte	0x236
 13718 1a22 94020000 		.4byte	0x294
 13719 1a26 28       		.uleb128 0x28
 13720 1a27 8B0C0000 		.4byte	.LASF325
 13721 1a2b 07       		.byte	0x7
 13722 1a2c 3702     		.2byte	0x237
 13723 1a2e BD000000 		.4byte	0xbd
 13724 1a32 28       		.uleb128 0x28
 13725 1a33 A5060000 		.4byte	.LASF326
 13726 1a37 07       		.byte	0x7
 13727 1a38 3902     		.2byte	0x239
 13728 1a3a 460C0000 		.4byte	0xc46
 13729 1a3e 28       		.uleb128 0x28
 13730 1a3f E8040000 		.4byte	.LASF327
 13731 1a43 07       		.byte	0x7
 13732 1a44 3A02     		.2byte	0x23a
 13733 1a46 0E0C0000 		.4byte	0xc0e
 13734 1a4a 28       		.uleb128 0x28
 13735 1a4b 3E040000 		.4byte	.LASF328
 13736 1a4f 07       		.byte	0x7
 13737 1a50 3B02     		.2byte	0x23b
 13738 1a52 0E0C0000 		.4byte	0xc0e
 13739 1a56 28       		.uleb128 0x28
 13740 1a57 9E0C0000 		.4byte	.LASF329
 13741 1a5b 07       		.byte	0x7
 13742 1a5c 3C02     		.2byte	0x23c
 13743 1a5e 0E0C0000 		.4byte	0xc0e
 13744 1a62 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 297


 13745 1a63 99110000 		.4byte	.LASF330
 13746 1a67 07       		.byte	0x7
 13747 1a68 3D02     		.2byte	0x23d
 13748 1a6a 0E0C0000 		.4byte	0xc0e
 13749 1a6e 28       		.uleb128 0x28
 13750 1a6f 47080000 		.4byte	.LASF331
 13751 1a73 07       		.byte	0x7
 13752 1a74 4002     		.2byte	0x240
 13753 1a76 2E070000 		.4byte	0x72e
 13754 1a7a 28       		.uleb128 0x28
 13755 1a7b E2000000 		.4byte	.LASF332
 13756 1a7f 07       		.byte	0x7
 13757 1a80 4102     		.2byte	0x241
 13758 1a82 81000000 		.4byte	0x81
 13759 1a86 28       		.uleb128 0x28
 13760 1a87 53040000 		.4byte	.LASF333
 13761 1a8b 07       		.byte	0x7
 13762 1a8c 4202     		.2byte	0x242
 13763 1a8e 81000000 		.4byte	0x81
 13764 1a92 28       		.uleb128 0x28
 13765 1a93 00010000 		.4byte	.LASF334
 13766 1a97 07       		.byte	0x7
 13767 1a98 4302     		.2byte	0x243
 13768 1a9a 81000000 		.4byte	0x81
 13769 1a9e 28       		.uleb128 0x28
 13770 1a9f 51120000 		.4byte	.LASF335
 13771 1aa3 07       		.byte	0x7
 13772 1aa4 4502     		.2byte	0x245
 13773 1aa6 81000000 		.4byte	0x81
 13774 1aaa 28       		.uleb128 0x28
 13775 1aab D60B0000 		.4byte	.LASF336
 13776 1aaf 07       		.byte	0x7
 13777 1ab0 4602     		.2byte	0x246
 13778 1ab2 81000000 		.4byte	0x81
 13779 1ab6 28       		.uleb128 0x28
 13780 1ab7 A4040000 		.4byte	.LASF337
 13781 1abb 07       		.byte	0x7
 13782 1abc 4702     		.2byte	0x247
 13783 1abe 81000000 		.4byte	0x81
 13784 1ac2 28       		.uleb128 0x28
 13785 1ac3 27080000 		.4byte	.LASF338
 13786 1ac7 07       		.byte	0x7
 13787 1ac8 4802     		.2byte	0x248
 13788 1aca 81000000 		.4byte	0x81
 13789 1ace 28       		.uleb128 0x28
 13790 1acf A3090000 		.4byte	.LASF339
 13791 1ad3 07       		.byte	0x7
 13792 1ad4 4902     		.2byte	0x249
 13793 1ad6 81000000 		.4byte	0x81
 13794 1ada 07       		.uleb128 0x7
 13795 1adb B1000000 		.4byte	0xb1
 13796 1adf EA1A0000 		.4byte	0x1aea
 13797 1ae3 08       		.uleb128 0x8
 13798 1ae4 0E010000 		.4byte	0x10e
 13799 1ae8 0B       		.byte	0xb
 13800 1ae9 00       		.byte	0
 13801 1aea 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 298


 13802 1aeb 4B040000 		.4byte	.LASF340
 13803 1aef 07       		.byte	0x7
 13804 1af0 4D02     		.2byte	0x24d
 13805 1af2 DA1A0000 		.4byte	0x1ada
 13806 1af6 28       		.uleb128 0x28
 13807 1af7 D0110000 		.4byte	.LASF341
 13808 1afb 07       		.byte	0x7
 13809 1afc 4E02     		.2byte	0x24e
 13810 1afe 81000000 		.4byte	0x81
 13811 1b02 07       		.uleb128 0x7
 13812 1b03 A5000000 		.4byte	0xa5
 13813 1b07 121B0000 		.4byte	0x1b12
 13814 1b0b 08       		.uleb128 0x8
 13815 1b0c 0E010000 		.4byte	0x10e
 13816 1b10 01       		.byte	0x1
 13817 1b11 00       		.byte	0
 13818 1b12 28       		.uleb128 0x28
 13819 1b13 32050000 		.4byte	.LASF342
 13820 1b17 07       		.byte	0x7
 13821 1b18 5102     		.2byte	0x251
 13822 1b1a 021B0000 		.4byte	0x1b02
 13823 1b1e 07       		.uleb128 0x7
 13824 1b1f 99000000 		.4byte	0x99
 13825 1b23 341B0000 		.4byte	0x1b34
 13826 1b27 08       		.uleb128 0x8
 13827 1b28 0E010000 		.4byte	0x10e
 13828 1b2c 01       		.byte	0x1
 13829 1b2d 08       		.uleb128 0x8
 13830 1b2e 0E010000 		.4byte	0x10e
 13831 1b32 04       		.byte	0x4
 13832 1b33 00       		.byte	0
 13833 1b34 28       		.uleb128 0x28
 13834 1b35 0B070000 		.4byte	.LASF343
 13835 1b39 07       		.byte	0x7
 13836 1b3a 5402     		.2byte	0x254
 13837 1b3c 1E1B0000 		.4byte	0x1b1e
 13838 1b40 28       		.uleb128 0x28
 13839 1b41 C10D0000 		.4byte	.LASF344
 13840 1b45 07       		.byte	0x7
 13841 1b46 5502     		.2byte	0x255
 13842 1b48 2E070000 		.4byte	0x72e
 13843 1b4c 07       		.uleb128 0x7
 13844 1b4d 8D000000 		.4byte	0x8d
 13845 1b51 621B0000 		.4byte	0x1b62
 13846 1b55 08       		.uleb128 0x8
 13847 1b56 0E010000 		.4byte	0x10e
 13848 1b5a 01       		.byte	0x1
 13849 1b5b 08       		.uleb128 0x8
 13850 1b5c 0E010000 		.4byte	0x10e
 13851 1b60 04       		.byte	0x4
 13852 1b61 00       		.byte	0
 13853 1b62 28       		.uleb128 0x28
 13854 1b63 17100000 		.4byte	.LASF345
 13855 1b67 07       		.byte	0x7
 13856 1b68 5602     		.2byte	0x256
 13857 1b6a 4C1B0000 		.4byte	0x1b4c
 13858 1b6e 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 299


 13859 1b6f 81000000 		.4byte	0x81
 13860 1b73 841B0000 		.4byte	0x1b84
 13861 1b77 08       		.uleb128 0x8
 13862 1b78 0E010000 		.4byte	0x10e
 13863 1b7c 01       		.byte	0x1
 13864 1b7d 08       		.uleb128 0x8
 13865 1b7e 0E010000 		.4byte	0x10e
 13866 1b82 04       		.byte	0x4
 13867 1b83 00       		.byte	0
 13868 1b84 28       		.uleb128 0x28
 13869 1b85 DC060000 		.4byte	.LASF346
 13870 1b89 07       		.byte	0x7
 13871 1b8a 5702     		.2byte	0x257
 13872 1b8c 6E1B0000 		.4byte	0x1b6e
 13873 1b90 28       		.uleb128 0x28
 13874 1b91 D8030000 		.4byte	.LASF347
 13875 1b95 07       		.byte	0x7
 13876 1b96 5802     		.2byte	0x258
 13877 1b98 2E070000 		.4byte	0x72e
 13878 1b9c 28       		.uleb128 0x28
 13879 1b9d B10A0000 		.4byte	.LASF348
 13880 1ba1 07       		.byte	0x7
 13881 1ba2 5B02     		.2byte	0x25b
 13882 1ba4 BD000000 		.4byte	0xbd
 13883 1ba8 28       		.uleb128 0x28
 13884 1ba9 FA050000 		.4byte	.LASF349
 13885 1bad 07       		.byte	0x7
 13886 1bae 5E02     		.2byte	0x25e
 13887 1bb0 9F010000 		.4byte	0x19f
 13888 1bb4 28       		.uleb128 0x28
 13889 1bb5 C1070000 		.4byte	.LASF350
 13890 1bb9 07       		.byte	0x7
 13891 1bba 6102     		.2byte	0x261
 13892 1bbc 9F010000 		.4byte	0x19f
 13893 1bc0 07       		.uleb128 0x7
 13894 1bc1 F60A0000 		.4byte	0xaf6
 13895 1bc5 D01B0000 		.4byte	0x1bd0
 13896 1bc9 08       		.uleb128 0x8
 13897 1bca 0E010000 		.4byte	0x10e
 13898 1bce 04       		.byte	0x4
 13899 1bcf 00       		.byte	0
 13900 1bd0 28       		.uleb128 0x28
 13901 1bd1 51050000 		.4byte	.LASF351
 13902 1bd5 07       		.byte	0x7
 13903 1bd6 6A02     		.2byte	0x26a
 13904 1bd8 C01B0000 		.4byte	0x1bc0
 13905 1bdc 28       		.uleb128 0x28
 13906 1bdd 49060000 		.4byte	.LASF352
 13907 1be1 07       		.byte	0x7
 13908 1be2 6A02     		.2byte	0x26a
 13909 1be4 C01B0000 		.4byte	0x1bc0
 13910 1be8 28       		.uleb128 0x28
 13911 1be9 EE110000 		.4byte	.LASF353
 13912 1bed 07       		.byte	0x7
 13913 1bee 7302     		.2byte	0x273
 13914 1bf0 81000000 		.4byte	0x81
 13915 1bf4 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 300


 13916              		.section	.debug_abbrev,"",%progbits
 13917              	.Ldebug_abbrev0:
 13918 0000 01       		.uleb128 0x1
 13919 0001 11       		.uleb128 0x11
 13920 0002 01       		.byte	0x1
 13921 0003 25       		.uleb128 0x25
 13922 0004 0E       		.uleb128 0xe
 13923 0005 13       		.uleb128 0x13
 13924 0006 0B       		.uleb128 0xb
 13925 0007 03       		.uleb128 0x3
 13926 0008 0E       		.uleb128 0xe
 13927 0009 1B       		.uleb128 0x1b
 13928 000a 0E       		.uleb128 0xe
 13929 000b 55       		.uleb128 0x55
 13930 000c 17       		.uleb128 0x17
 13931 000d 11       		.uleb128 0x11
 13932 000e 01       		.uleb128 0x1
 13933 000f 10       		.uleb128 0x10
 13934 0010 17       		.uleb128 0x17
 13935 0011 00       		.byte	0
 13936 0012 00       		.byte	0
 13937 0013 02       		.uleb128 0x2
 13938 0014 24       		.uleb128 0x24
 13939 0015 00       		.byte	0
 13940 0016 0B       		.uleb128 0xb
 13941 0017 0B       		.uleb128 0xb
 13942 0018 3E       		.uleb128 0x3e
 13943 0019 0B       		.uleb128 0xb
 13944 001a 03       		.uleb128 0x3
 13945 001b 0E       		.uleb128 0xe
 13946 001c 00       		.byte	0
 13947 001d 00       		.byte	0
 13948 001e 03       		.uleb128 0x3
 13949 001f 16       		.uleb128 0x16
 13950 0020 00       		.byte	0
 13951 0021 03       		.uleb128 0x3
 13952 0022 0E       		.uleb128 0xe
 13953 0023 3A       		.uleb128 0x3a
 13954 0024 0B       		.uleb128 0xb
 13955 0025 3B       		.uleb128 0x3b
 13956 0026 0B       		.uleb128 0xb
 13957 0027 49       		.uleb128 0x49
 13958 0028 13       		.uleb128 0x13
 13959 0029 00       		.byte	0
 13960 002a 00       		.byte	0
 13961 002b 04       		.uleb128 0x4
 13962 002c 24       		.uleb128 0x24
 13963 002d 00       		.byte	0
 13964 002e 0B       		.uleb128 0xb
 13965 002f 0B       		.uleb128 0xb
 13966 0030 3E       		.uleb128 0x3e
 13967 0031 0B       		.uleb128 0xb
 13968 0032 03       		.uleb128 0x3
 13969 0033 08       		.uleb128 0x8
 13970 0034 00       		.byte	0
 13971 0035 00       		.byte	0
 13972 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 301


 13973 0037 16       		.uleb128 0x16
 13974 0038 00       		.byte	0
 13975 0039 03       		.uleb128 0x3
 13976 003a 0E       		.uleb128 0xe
 13977 003b 3A       		.uleb128 0x3a
 13978 003c 0B       		.uleb128 0xb
 13979 003d 3B       		.uleb128 0x3b
 13980 003e 05       		.uleb128 0x5
 13981 003f 49       		.uleb128 0x49
 13982 0040 13       		.uleb128 0x13
 13983 0041 00       		.byte	0
 13984 0042 00       		.byte	0
 13985 0043 06       		.uleb128 0x6
 13986 0044 35       		.uleb128 0x35
 13987 0045 00       		.byte	0
 13988 0046 49       		.uleb128 0x49
 13989 0047 13       		.uleb128 0x13
 13990 0048 00       		.byte	0
 13991 0049 00       		.byte	0
 13992 004a 07       		.uleb128 0x7
 13993 004b 01       		.uleb128 0x1
 13994 004c 01       		.byte	0x1
 13995 004d 49       		.uleb128 0x49
 13996 004e 13       		.uleb128 0x13
 13997 004f 01       		.uleb128 0x1
 13998 0050 13       		.uleb128 0x13
 13999 0051 00       		.byte	0
 14000 0052 00       		.byte	0
 14001 0053 08       		.uleb128 0x8
 14002 0054 21       		.uleb128 0x21
 14003 0055 00       		.byte	0
 14004 0056 49       		.uleb128 0x49
 14005 0057 13       		.uleb128 0x13
 14006 0058 2F       		.uleb128 0x2f
 14007 0059 0B       		.uleb128 0xb
 14008 005a 00       		.byte	0
 14009 005b 00       		.byte	0
 14010 005c 09       		.uleb128 0x9
 14011 005d 04       		.uleb128 0x4
 14012 005e 01       		.byte	0x1
 14013 005f 03       		.uleb128 0x3
 14014 0060 0E       		.uleb128 0xe
 14015 0061 0B       		.uleb128 0xb
 14016 0062 0B       		.uleb128 0xb
 14017 0063 49       		.uleb128 0x49
 14018 0064 13       		.uleb128 0x13
 14019 0065 3A       		.uleb128 0x3a
 14020 0066 0B       		.uleb128 0xb
 14021 0067 3B       		.uleb128 0x3b
 14022 0068 0B       		.uleb128 0xb
 14023 0069 01       		.uleb128 0x1
 14024 006a 13       		.uleb128 0x13
 14025 006b 00       		.byte	0
 14026 006c 00       		.byte	0
 14027 006d 0A       		.uleb128 0xa
 14028 006e 28       		.uleb128 0x28
 14029 006f 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 302


 14030 0070 03       		.uleb128 0x3
 14031 0071 0E       		.uleb128 0xe
 14032 0072 1C       		.uleb128 0x1c
 14033 0073 0B       		.uleb128 0xb
 14034 0074 00       		.byte	0
 14035 0075 00       		.byte	0
 14036 0076 0B       		.uleb128 0xb
 14037 0077 13       		.uleb128 0x13
 14038 0078 00       		.byte	0
 14039 0079 03       		.uleb128 0x3
 14040 007a 0E       		.uleb128 0xe
 14041 007b 3C       		.uleb128 0x3c
 14042 007c 19       		.uleb128 0x19
 14043 007d 00       		.byte	0
 14044 007e 00       		.byte	0
 14045 007f 0C       		.uleb128 0xc
 14046 0080 0F       		.uleb128 0xf
 14047 0081 00       		.byte	0
 14048 0082 0B       		.uleb128 0xb
 14049 0083 0B       		.uleb128 0xb
 14050 0084 49       		.uleb128 0x49
 14051 0085 13       		.uleb128 0x13
 14052 0086 00       		.byte	0
 14053 0087 00       		.byte	0
 14054 0088 0D       		.uleb128 0xd
 14055 0089 13       		.uleb128 0x13
 14056 008a 01       		.byte	0x1
 14057 008b 03       		.uleb128 0x3
 14058 008c 0E       		.uleb128 0xe
 14059 008d 0B       		.uleb128 0xb
 14060 008e 0B       		.uleb128 0xb
 14061 008f 3A       		.uleb128 0x3a
 14062 0090 0B       		.uleb128 0xb
 14063 0091 3B       		.uleb128 0x3b
 14064 0092 0B       		.uleb128 0xb
 14065 0093 01       		.uleb128 0x1
 14066 0094 13       		.uleb128 0x13
 14067 0095 00       		.byte	0
 14068 0096 00       		.byte	0
 14069 0097 0E       		.uleb128 0xe
 14070 0098 0D       		.uleb128 0xd
 14071 0099 00       		.byte	0
 14072 009a 03       		.uleb128 0x3
 14073 009b 08       		.uleb128 0x8
 14074 009c 3A       		.uleb128 0x3a
 14075 009d 0B       		.uleb128 0xb
 14076 009e 3B       		.uleb128 0x3b
 14077 009f 0B       		.uleb128 0xb
 14078 00a0 49       		.uleb128 0x49
 14079 00a1 13       		.uleb128 0x13
 14080 00a2 38       		.uleb128 0x38
 14081 00a3 0B       		.uleb128 0xb
 14082 00a4 00       		.byte	0
 14083 00a5 00       		.byte	0
 14084 00a6 0F       		.uleb128 0xf
 14085 00a7 0D       		.uleb128 0xd
 14086 00a8 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 303


 14087 00a9 03       		.uleb128 0x3
 14088 00aa 0E       		.uleb128 0xe
 14089 00ab 3A       		.uleb128 0x3a
 14090 00ac 0B       		.uleb128 0xb
 14091 00ad 3B       		.uleb128 0x3b
 14092 00ae 0B       		.uleb128 0xb
 14093 00af 49       		.uleb128 0x49
 14094 00b0 13       		.uleb128 0x13
 14095 00b1 38       		.uleb128 0x38
 14096 00b2 0B       		.uleb128 0xb
 14097 00b3 00       		.byte	0
 14098 00b4 00       		.byte	0
 14099 00b5 10       		.uleb128 0x10
 14100 00b6 13       		.uleb128 0x13
 14101 00b7 01       		.byte	0x1
 14102 00b8 03       		.uleb128 0x3
 14103 00b9 0E       		.uleb128 0xe
 14104 00ba 0B       		.uleb128 0xb
 14105 00bb 0B       		.uleb128 0xb
 14106 00bc 3A       		.uleb128 0x3a
 14107 00bd 0B       		.uleb128 0xb
 14108 00be 3B       		.uleb128 0x3b
 14109 00bf 05       		.uleb128 0x5
 14110 00c0 01       		.uleb128 0x1
 14111 00c1 13       		.uleb128 0x13
 14112 00c2 00       		.byte	0
 14113 00c3 00       		.byte	0
 14114 00c4 11       		.uleb128 0x11
 14115 00c5 0D       		.uleb128 0xd
 14116 00c6 00       		.byte	0
 14117 00c7 03       		.uleb128 0x3
 14118 00c8 0E       		.uleb128 0xe
 14119 00c9 3A       		.uleb128 0x3a
 14120 00ca 0B       		.uleb128 0xb
 14121 00cb 3B       		.uleb128 0x3b
 14122 00cc 05       		.uleb128 0x5
 14123 00cd 49       		.uleb128 0x49
 14124 00ce 13       		.uleb128 0x13
 14125 00cf 38       		.uleb128 0x38
 14126 00d0 0B       		.uleb128 0xb
 14127 00d1 00       		.byte	0
 14128 00d2 00       		.byte	0
 14129 00d3 12       		.uleb128 0x12
 14130 00d4 0D       		.uleb128 0xd
 14131 00d5 00       		.byte	0
 14132 00d6 03       		.uleb128 0x3
 14133 00d7 08       		.uleb128 0x8
 14134 00d8 3A       		.uleb128 0x3a
 14135 00d9 0B       		.uleb128 0xb
 14136 00da 3B       		.uleb128 0x3b
 14137 00db 05       		.uleb128 0x5
 14138 00dc 49       		.uleb128 0x49
 14139 00dd 13       		.uleb128 0x13
 14140 00de 38       		.uleb128 0x38
 14141 00df 0B       		.uleb128 0xb
 14142 00e0 00       		.byte	0
 14143 00e1 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 304


 14144 00e2 13       		.uleb128 0x13
 14145 00e3 13       		.uleb128 0x13
 14146 00e4 01       		.byte	0x1
 14147 00e5 03       		.uleb128 0x3
 14148 00e6 0E       		.uleb128 0xe
 14149 00e7 0B       		.uleb128 0xb
 14150 00e8 05       		.uleb128 0x5
 14151 00e9 3A       		.uleb128 0x3a
 14152 00ea 0B       		.uleb128 0xb
 14153 00eb 3B       		.uleb128 0x3b
 14154 00ec 05       		.uleb128 0x5
 14155 00ed 01       		.uleb128 0x1
 14156 00ee 13       		.uleb128 0x13
 14157 00ef 00       		.byte	0
 14158 00f0 00       		.byte	0
 14159 00f1 14       		.uleb128 0x14
 14160 00f2 0D       		.uleb128 0xd
 14161 00f3 00       		.byte	0
 14162 00f4 03       		.uleb128 0x3
 14163 00f5 08       		.uleb128 0x8
 14164 00f6 3A       		.uleb128 0x3a
 14165 00f7 0B       		.uleb128 0xb
 14166 00f8 3B       		.uleb128 0x3b
 14167 00f9 05       		.uleb128 0x5
 14168 00fa 49       		.uleb128 0x49
 14169 00fb 13       		.uleb128 0x13
 14170 00fc 38       		.uleb128 0x38
 14171 00fd 05       		.uleb128 0x5
 14172 00fe 00       		.byte	0
 14173 00ff 00       		.byte	0
 14174 0100 15       		.uleb128 0x15
 14175 0101 0D       		.uleb128 0xd
 14176 0102 00       		.byte	0
 14177 0103 03       		.uleb128 0x3
 14178 0104 0E       		.uleb128 0xe
 14179 0105 3A       		.uleb128 0x3a
 14180 0106 0B       		.uleb128 0xb
 14181 0107 3B       		.uleb128 0x3b
 14182 0108 05       		.uleb128 0x5
 14183 0109 49       		.uleb128 0x49
 14184 010a 13       		.uleb128 0x13
 14185 010b 38       		.uleb128 0x38
 14186 010c 05       		.uleb128 0x5
 14187 010d 00       		.byte	0
 14188 010e 00       		.byte	0
 14189 010f 16       		.uleb128 0x16
 14190 0110 04       		.uleb128 0x4
 14191 0111 01       		.byte	0x1
 14192 0112 0B       		.uleb128 0xb
 14193 0113 0B       		.uleb128 0xb
 14194 0114 49       		.uleb128 0x49
 14195 0115 13       		.uleb128 0x13
 14196 0116 3A       		.uleb128 0x3a
 14197 0117 0B       		.uleb128 0xb
 14198 0118 3B       		.uleb128 0x3b
 14199 0119 05       		.uleb128 0x5
 14200 011a 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 305


 14201 011b 13       		.uleb128 0x13
 14202 011c 00       		.byte	0
 14203 011d 00       		.byte	0
 14204 011e 17       		.uleb128 0x17
 14205 011f 2E       		.uleb128 0x2e
 14206 0120 00       		.byte	0
 14207 0121 3F       		.uleb128 0x3f
 14208 0122 19       		.uleb128 0x19
 14209 0123 03       		.uleb128 0x3
 14210 0124 0E       		.uleb128 0xe
 14211 0125 3A       		.uleb128 0x3a
 14212 0126 0B       		.uleb128 0xb
 14213 0127 3B       		.uleb128 0x3b
 14214 0128 0B       		.uleb128 0xb
 14215 0129 27       		.uleb128 0x27
 14216 012a 19       		.uleb128 0x19
 14217 012b 11       		.uleb128 0x11
 14218 012c 01       		.uleb128 0x1
 14219 012d 12       		.uleb128 0x12
 14220 012e 06       		.uleb128 0x6
 14221 012f 40       		.uleb128 0x40
 14222 0130 18       		.uleb128 0x18
 14223 0131 9742     		.uleb128 0x2117
 14224 0133 19       		.uleb128 0x19
 14225 0134 00       		.byte	0
 14226 0135 00       		.byte	0
 14227 0136 18       		.uleb128 0x18
 14228 0137 2E       		.uleb128 0x2e
 14229 0138 01       		.byte	0x1
 14230 0139 3F       		.uleb128 0x3f
 14231 013a 19       		.uleb128 0x19
 14232 013b 03       		.uleb128 0x3
 14233 013c 0E       		.uleb128 0xe
 14234 013d 3A       		.uleb128 0x3a
 14235 013e 0B       		.uleb128 0xb
 14236 013f 3B       		.uleb128 0x3b
 14237 0140 0B       		.uleb128 0xb
 14238 0141 11       		.uleb128 0x11
 14239 0142 01       		.uleb128 0x1
 14240 0143 12       		.uleb128 0x12
 14241 0144 06       		.uleb128 0x6
 14242 0145 40       		.uleb128 0x40
 14243 0146 18       		.uleb128 0x18
 14244 0147 9642     		.uleb128 0x2116
 14245 0149 19       		.uleb128 0x19
 14246 014a 01       		.uleb128 0x1
 14247 014b 13       		.uleb128 0x13
 14248 014c 00       		.byte	0
 14249 014d 00       		.byte	0
 14250 014e 19       		.uleb128 0x19
 14251 014f 34       		.uleb128 0x34
 14252 0150 00       		.byte	0
 14253 0151 03       		.uleb128 0x3
 14254 0152 0E       		.uleb128 0xe
 14255 0153 3A       		.uleb128 0x3a
 14256 0154 0B       		.uleb128 0xb
 14257 0155 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 306


 14258 0156 0B       		.uleb128 0xb
 14259 0157 49       		.uleb128 0x49
 14260 0158 13       		.uleb128 0x13
 14261 0159 02       		.uleb128 0x2
 14262 015a 18       		.uleb128 0x18
 14263 015b 00       		.byte	0
 14264 015c 00       		.byte	0
 14265 015d 1A       		.uleb128 0x1a
 14266 015e 2E       		.uleb128 0x2e
 14267 015f 01       		.byte	0x1
 14268 0160 3F       		.uleb128 0x3f
 14269 0161 19       		.uleb128 0x19
 14270 0162 03       		.uleb128 0x3
 14271 0163 0E       		.uleb128 0xe
 14272 0164 3A       		.uleb128 0x3a
 14273 0165 0B       		.uleb128 0xb
 14274 0166 3B       		.uleb128 0x3b
 14275 0167 05       		.uleb128 0x5
 14276 0168 27       		.uleb128 0x27
 14277 0169 19       		.uleb128 0x19
 14278 016a 11       		.uleb128 0x11
 14279 016b 01       		.uleb128 0x1
 14280 016c 12       		.uleb128 0x12
 14281 016d 06       		.uleb128 0x6
 14282 016e 40       		.uleb128 0x40
 14283 016f 18       		.uleb128 0x18
 14284 0170 9642     		.uleb128 0x2116
 14285 0172 19       		.uleb128 0x19
 14286 0173 01       		.uleb128 0x1
 14287 0174 13       		.uleb128 0x13
 14288 0175 00       		.byte	0
 14289 0176 00       		.byte	0
 14290 0177 1B       		.uleb128 0x1b
 14291 0178 34       		.uleb128 0x34
 14292 0179 00       		.byte	0
 14293 017a 03       		.uleb128 0x3
 14294 017b 0E       		.uleb128 0xe
 14295 017c 3A       		.uleb128 0x3a
 14296 017d 0B       		.uleb128 0xb
 14297 017e 3B       		.uleb128 0x3b
 14298 017f 05       		.uleb128 0x5
 14299 0180 49       		.uleb128 0x49
 14300 0181 13       		.uleb128 0x13
 14301 0182 02       		.uleb128 0x2
 14302 0183 18       		.uleb128 0x18
 14303 0184 00       		.byte	0
 14304 0185 00       		.byte	0
 14305 0186 1C       		.uleb128 0x1c
 14306 0187 0B       		.uleb128 0xb
 14307 0188 01       		.byte	0x1
 14308 0189 11       		.uleb128 0x11
 14309 018a 01       		.uleb128 0x1
 14310 018b 12       		.uleb128 0x12
 14311 018c 06       		.uleb128 0x6
 14312 018d 01       		.uleb128 0x1
 14313 018e 13       		.uleb128 0x13
 14314 018f 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 307


 14315 0190 00       		.byte	0
 14316 0191 1D       		.uleb128 0x1d
 14317 0192 34       		.uleb128 0x34
 14318 0193 00       		.byte	0
 14319 0194 03       		.uleb128 0x3
 14320 0195 08       		.uleb128 0x8
 14321 0196 3A       		.uleb128 0x3a
 14322 0197 0B       		.uleb128 0xb
 14323 0198 3B       		.uleb128 0x3b
 14324 0199 05       		.uleb128 0x5
 14325 019a 49       		.uleb128 0x49
 14326 019b 13       		.uleb128 0x13
 14327 019c 02       		.uleb128 0x2
 14328 019d 18       		.uleb128 0x18
 14329 019e 00       		.byte	0
 14330 019f 00       		.byte	0
 14331 01a0 1E       		.uleb128 0x1e
 14332 01a1 0B       		.uleb128 0xb
 14333 01a2 01       		.byte	0x1
 14334 01a3 11       		.uleb128 0x11
 14335 01a4 01       		.uleb128 0x1
 14336 01a5 12       		.uleb128 0x12
 14337 01a6 06       		.uleb128 0x6
 14338 01a7 00       		.byte	0
 14339 01a8 00       		.byte	0
 14340 01a9 1F       		.uleb128 0x1f
 14341 01aa 21       		.uleb128 0x21
 14342 01ab 00       		.byte	0
 14343 01ac 49       		.uleb128 0x49
 14344 01ad 13       		.uleb128 0x13
 14345 01ae 2F       		.uleb128 0x2f
 14346 01af 05       		.uleb128 0x5
 14347 01b0 00       		.byte	0
 14348 01b1 00       		.byte	0
 14349 01b2 20       		.uleb128 0x20
 14350 01b3 05       		.uleb128 0x5
 14351 01b4 00       		.byte	0
 14352 01b5 03       		.uleb128 0x3
 14353 01b6 0E       		.uleb128 0xe
 14354 01b7 3A       		.uleb128 0x3a
 14355 01b8 0B       		.uleb128 0xb
 14356 01b9 3B       		.uleb128 0x3b
 14357 01ba 05       		.uleb128 0x5
 14358 01bb 49       		.uleb128 0x49
 14359 01bc 13       		.uleb128 0x13
 14360 01bd 02       		.uleb128 0x2
 14361 01be 18       		.uleb128 0x18
 14362 01bf 00       		.byte	0
 14363 01c0 00       		.byte	0
 14364 01c1 21       		.uleb128 0x21
 14365 01c2 0B       		.uleb128 0xb
 14366 01c3 01       		.byte	0x1
 14367 01c4 55       		.uleb128 0x55
 14368 01c5 17       		.uleb128 0x17
 14369 01c6 00       		.byte	0
 14370 01c7 00       		.byte	0
 14371 01c8 22       		.uleb128 0x22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 308


 14372 01c9 2E       		.uleb128 0x2e
 14373 01ca 01       		.byte	0x1
 14374 01cb 3F       		.uleb128 0x3f
 14375 01cc 19       		.uleb128 0x19
 14376 01cd 03       		.uleb128 0x3
 14377 01ce 0E       		.uleb128 0xe
 14378 01cf 3A       		.uleb128 0x3a
 14379 01d0 0B       		.uleb128 0xb
 14380 01d1 3B       		.uleb128 0x3b
 14381 01d2 05       		.uleb128 0x5
 14382 01d3 27       		.uleb128 0x27
 14383 01d4 19       		.uleb128 0x19
 14384 01d5 11       		.uleb128 0x11
 14385 01d6 01       		.uleb128 0x1
 14386 01d7 12       		.uleb128 0x12
 14387 01d8 06       		.uleb128 0x6
 14388 01d9 40       		.uleb128 0x40
 14389 01da 18       		.uleb128 0x18
 14390 01db 9742     		.uleb128 0x2117
 14391 01dd 19       		.uleb128 0x19
 14392 01de 01       		.uleb128 0x1
 14393 01df 13       		.uleb128 0x13
 14394 01e0 00       		.byte	0
 14395 01e1 00       		.byte	0
 14396 01e2 23       		.uleb128 0x23
 14397 01e3 0B       		.uleb128 0xb
 14398 01e4 01       		.byte	0x1
 14399 01e5 55       		.uleb128 0x55
 14400 01e6 17       		.uleb128 0x17
 14401 01e7 01       		.uleb128 0x1
 14402 01e8 13       		.uleb128 0x13
 14403 01e9 00       		.byte	0
 14404 01ea 00       		.byte	0
 14405 01eb 24       		.uleb128 0x24
 14406 01ec 2E       		.uleb128 0x2e
 14407 01ed 01       		.byte	0x1
 14408 01ee 3F       		.uleb128 0x3f
 14409 01ef 19       		.uleb128 0x19
 14410 01f0 03       		.uleb128 0x3
 14411 01f1 0E       		.uleb128 0xe
 14412 01f2 3A       		.uleb128 0x3a
 14413 01f3 0B       		.uleb128 0xb
 14414 01f4 3B       		.uleb128 0x3b
 14415 01f5 05       		.uleb128 0x5
 14416 01f6 11       		.uleb128 0x11
 14417 01f7 01       		.uleb128 0x1
 14418 01f8 12       		.uleb128 0x12
 14419 01f9 06       		.uleb128 0x6
 14420 01fa 40       		.uleb128 0x40
 14421 01fb 18       		.uleb128 0x18
 14422 01fc 9642     		.uleb128 0x2116
 14423 01fe 19       		.uleb128 0x19
 14424 01ff 01       		.uleb128 0x1
 14425 0200 13       		.uleb128 0x13
 14426 0201 00       		.byte	0
 14427 0202 00       		.byte	0
 14428 0203 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 309


 14429 0204 05       		.uleb128 0x5
 14430 0205 00       		.byte	0
 14431 0206 03       		.uleb128 0x3
 14432 0207 08       		.uleb128 0x8
 14433 0208 3A       		.uleb128 0x3a
 14434 0209 0B       		.uleb128 0xb
 14435 020a 3B       		.uleb128 0x3b
 14436 020b 05       		.uleb128 0x5
 14437 020c 49       		.uleb128 0x49
 14438 020d 13       		.uleb128 0x13
 14439 020e 02       		.uleb128 0x2
 14440 020f 18       		.uleb128 0x18
 14441 0210 00       		.byte	0
 14442 0211 00       		.byte	0
 14443 0212 26       		.uleb128 0x26
 14444 0213 2E       		.uleb128 0x2e
 14445 0214 01       		.byte	0x1
 14446 0215 3F       		.uleb128 0x3f
 14447 0216 19       		.uleb128 0x19
 14448 0217 03       		.uleb128 0x3
 14449 0218 0E       		.uleb128 0xe
 14450 0219 3A       		.uleb128 0x3a
 14451 021a 0B       		.uleb128 0xb
 14452 021b 3B       		.uleb128 0x3b
 14453 021c 05       		.uleb128 0x5
 14454 021d 11       		.uleb128 0x11
 14455 021e 01       		.uleb128 0x1
 14456 021f 12       		.uleb128 0x12
 14457 0220 06       		.uleb128 0x6
 14458 0221 40       		.uleb128 0x40
 14459 0222 18       		.uleb128 0x18
 14460 0223 9742     		.uleb128 0x2117
 14461 0225 19       		.uleb128 0x19
 14462 0226 01       		.uleb128 0x1
 14463 0227 13       		.uleb128 0x13
 14464 0228 00       		.byte	0
 14465 0229 00       		.byte	0
 14466 022a 27       		.uleb128 0x27
 14467 022b 26       		.uleb128 0x26
 14468 022c 00       		.byte	0
 14469 022d 49       		.uleb128 0x49
 14470 022e 13       		.uleb128 0x13
 14471 022f 00       		.byte	0
 14472 0230 00       		.byte	0
 14473 0231 28       		.uleb128 0x28
 14474 0232 34       		.uleb128 0x34
 14475 0233 00       		.byte	0
 14476 0234 03       		.uleb128 0x3
 14477 0235 0E       		.uleb128 0xe
 14478 0236 3A       		.uleb128 0x3a
 14479 0237 0B       		.uleb128 0xb
 14480 0238 3B       		.uleb128 0x3b
 14481 0239 05       		.uleb128 0x5
 14482 023a 49       		.uleb128 0x49
 14483 023b 13       		.uleb128 0x13
 14484 023c 3F       		.uleb128 0x3f
 14485 023d 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 310


 14486 023e 3C       		.uleb128 0x3c
 14487 023f 19       		.uleb128 0x19
 14488 0240 00       		.byte	0
 14489 0241 00       		.byte	0
 14490 0242 00       		.byte	0
 14491              		.section	.debug_aranges,"",%progbits
 14492 0000 8C000000 		.4byte	0x8c
 14493 0004 0200     		.2byte	0x2
 14494 0006 00000000 		.4byte	.Ldebug_info0
 14495 000a 04       		.byte	0x4
 14496 000b 00       		.byte	0
 14497 000c 0000     		.2byte	0
 14498 000e 0000     		.2byte	0
 14499 0010 00000000 		.4byte	.LFB64
 14500 0014 18000000 		.4byte	.LFE64-.LFB64
 14501 0018 00000000 		.4byte	.LFB65
 14502 001c 20000000 		.4byte	.LFE65-.LFB65
 14503 0020 00000000 		.4byte	.LFB66
 14504 0024 F4010000 		.4byte	.LFE66-.LFB66
 14505 0028 00000000 		.4byte	.LFB67
 14506 002c 80080000 		.4byte	.LFE67-.LFB67
 14507 0030 00000000 		.4byte	.LFB68
 14508 0034 CC050000 		.4byte	.LFE68-.LFB68
 14509 0038 00000000 		.4byte	.LFB69
 14510 003c 34030000 		.4byte	.LFE69-.LFB69
 14511 0040 00000000 		.4byte	.LFB70
 14512 0044 B0010000 		.4byte	.LFE70-.LFB70
 14513 0048 00000000 		.4byte	.LFB71
 14514 004c 0C070000 		.4byte	.LFE71-.LFB71
 14515 0050 00000000 		.4byte	.LFB72
 14516 0054 70090000 		.4byte	.LFE72-.LFB72
 14517 0058 00000000 		.4byte	.LFB73
 14518 005c 18080000 		.4byte	.LFE73-.LFB73
 14519 0060 00000000 		.4byte	.LFB74
 14520 0064 70120000 		.4byte	.LFE74-.LFB74
 14521 0068 00000000 		.4byte	.LFB75
 14522 006c 0C010000 		.4byte	.LFE75-.LFB75
 14523 0070 00000000 		.4byte	.LFB76
 14524 0074 A8000000 		.4byte	.LFE76-.LFB76
 14525 0078 00000000 		.4byte	.LFB77
 14526 007c 58060000 		.4byte	.LFE77-.LFB77
 14527 0080 00000000 		.4byte	.LFB78
 14528 0084 08010000 		.4byte	.LFE78-.LFB78
 14529 0088 00000000 		.4byte	0
 14530 008c 00000000 		.4byte	0
 14531              		.section	.debug_ranges,"",%progbits
 14532              	.Ldebug_ranges0:
 14533 0000 68010000 		.4byte	.LBB4
 14534 0004 AA010000 		.4byte	.LBE4
 14535 0008 AC010000 		.4byte	.LBB5
 14536 000c F2010000 		.4byte	.LBE5
 14537 0010 00000000 		.4byte	0
 14538 0014 00000000 		.4byte	0
 14539 0018 3A000000 		.4byte	.LBB6
 14540 001c 40010000 		.4byte	.LBE6
 14541 0020 42010000 		.4byte	.LBB7
 14542 0024 BC010000 		.4byte	.LBE7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 311


 14543 0028 00000000 		.4byte	0
 14544 002c 00000000 		.4byte	0
 14545 0030 BE010000 		.4byte	.LBB8
 14546 0034 20030000 		.4byte	.LBE8
 14547 0038 22030000 		.4byte	.LBB9
 14548 003c 24030000 		.4byte	.LBE9
 14549 0040 00000000 		.4byte	0
 14550 0044 00000000 		.4byte	0
 14551 0048 00000000 		.4byte	.LFB64
 14552 004c 18000000 		.4byte	.LFE64
 14553 0050 00000000 		.4byte	.LFB65
 14554 0054 20000000 		.4byte	.LFE65
 14555 0058 00000000 		.4byte	.LFB66
 14556 005c F4010000 		.4byte	.LFE66
 14557 0060 00000000 		.4byte	.LFB67
 14558 0064 80080000 		.4byte	.LFE67
 14559 0068 00000000 		.4byte	.LFB68
 14560 006c CC050000 		.4byte	.LFE68
 14561 0070 00000000 		.4byte	.LFB69
 14562 0074 34030000 		.4byte	.LFE69
 14563 0078 00000000 		.4byte	.LFB70
 14564 007c B0010000 		.4byte	.LFE70
 14565 0080 00000000 		.4byte	.LFB71
 14566 0084 0C070000 		.4byte	.LFE71
 14567 0088 00000000 		.4byte	.LFB72
 14568 008c 70090000 		.4byte	.LFE72
 14569 0090 00000000 		.4byte	.LFB73
 14570 0094 18080000 		.4byte	.LFE73
 14571 0098 00000000 		.4byte	.LFB74
 14572 009c 70120000 		.4byte	.LFE74
 14573 00a0 00000000 		.4byte	.LFB75
 14574 00a4 0C010000 		.4byte	.LFE75
 14575 00a8 00000000 		.4byte	.LFB76
 14576 00ac A8000000 		.4byte	.LFE76
 14577 00b0 00000000 		.4byte	.LFB77
 14578 00b4 58060000 		.4byte	.LFE77
 14579 00b8 00000000 		.4byte	.LFB78
 14580 00bc 08010000 		.4byte	.LFE78
 14581 00c0 00000000 		.4byte	0
 14582 00c4 00000000 		.4byte	0
 14583              		.section	.debug_line,"",%progbits
 14584              	.Ldebug_line0:
 14585 0000 4E0C0000 		.section	.debug_str,"MS",%progbits,1
 14585      0200AC01 
 14585      00000201 
 14585      FB0E0D00 
 14585      01010101 
 14586              	.LASF54:
 14587 0000 656D675F 		.ascii	"emg_act_counter\000"
 14587      6163745F 
 14587      636F756E 
 14587      74657200 
 14588              	.LASF24:
 14589 0010 73697A65 		.ascii	"sizetype\000"
 14589      74797065 
 14589      00
 14590              	.LASF61:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 312


 14591 0019 706F7765 		.ascii	"power_cycles\000"
 14591      725F6379 
 14591      636C6573 
 14591      00
 14592              	.LASF268:
 14593 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14593      6379636C 
 14593      655F7374 
 14593      61747573 
 14593      00
 14594              	.LASF145:
 14595 0037 77726973 		.ascii	"wrist_direction_association\000"
 14595      745F6469 
 14595      72656374 
 14595      696F6E5F 
 14595      6173736F 
 14596              	.LASF30:
 14597 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14597      545F4D4F 
 14597      44455F45 
 14597      4D475F46 
 14597      4346535F 
 14598              	.LASF120:
 14599 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14599      5F414443 
 14599      5F73656E 
 14599      736F7273 
 14599      5F706F72 
 14600              	.LASF150:
 14601 0086 75736572 		.ascii	"user\000"
 14601      00
 14602              	.LASF10:
 14603 008b 696E7433 		.ascii	"int32_t\000"
 14603      325F7400 
 14604              	.LASF307:
 14605 0093 675F7278 		.ascii	"g_rx\000"
 14605      00
 14606              	.LASF245:
 14607 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14607      74696D65 
 14607      5F657865 
 14607      63757465 
 14607      00
 14608              	.LASF49:
 14609 00a9 73745F64 		.ascii	"st_data\000"
 14609      61746100 
 14610              	.LASF59:
 14611 00b1 746F7461 		.ascii	"total_runtime\000"
 14611      6C5F7275 
 14611      6E74696D 
 14611      6500
 14612              	.LASF13:
 14613 00bf 75696E74 		.ascii	"uint32\000"
 14613      333200
 14614              	.LASF230:
 14615 00c6 6E5F6C69 		.ascii	"n_line\000"
 14615      6E6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 313


 14616              	.LASF151:
 14617 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14617      73706563 
 14617      00
 14618              	.LASF88:
 14619 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14619      6C696D5F 
 14619      696E6600 
 14620              	.LASF332:
 14621 00e2 74656E73 		.ascii	"tension_valid\000"
 14621      696F6E5F 
 14621      76616C69 
 14621      6400
 14622              	.LASF206:
 14623 00f0 6572725F 		.ascii	"err_joy_1\000"
 14623      6A6F795F 
 14623      3100
 14624              	.LASF182:
 14625 00fa 73746174 		.ascii	"state\000"
 14625      6500
 14626              	.LASF334:
 14627 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14627      65735F69 
 14627      6E746572 
 14627      72757074 
 14627      5F666C61 
 14628              	.LASF278:
 14629 0116 62696E5F 		.ascii	"bin_max\000"
 14629      6D617800 
 14630              	.LASF295:
 14631 011e 61646472 		.ascii	"addr_start_c\000"
 14631      5F737461 
 14631      72745F63 
 14631      00
 14632              	.LASF29:
 14633 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14633      545F4D4F 
 14633      44455F45 
 14633      4D475F46 
 14633      43465300 
 14634              	.LASF92:
 14635 013f 63757272 		.ascii	"curr_lookup\000"
 14635      5F6C6F6F 
 14635      6B757000 
 14636              	.LASF215:
 14637 014b 70776D5F 		.ascii	"pwm_input\000"
 14637      696E7075 
 14637      7400
 14638              	.LASF57:
 14639 0155 72657374 		.ascii	"rest_counter\000"
 14639      5F636F75 
 14639      6E746572 
 14639      00
 14640              	.LASF135:
 14641 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14641      41535445 
 14641      525F7370 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 314


 14641      656300
 14642              	.LASF28:
 14643 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14643      545F4D4F 
 14643      44455F45 
 14643      4D475F49 
 14643      4E544547 
 14644              	.LASF261:
 14645 0189 765F636F 		.ascii	"v_count\000"
 14645      756E7400 
 14646              	.LASF187:
 14647 0191 72785F64 		.ascii	"rx_data\000"
 14647      61746100 
 14648              	.LASF249:
 14649 0199 7676765F 		.ascii	"vvv_value\000"
 14649      76616C75 
 14649      6500
 14650              	.LASF14:
 14651 01a3 696E7438 		.ascii	"int8\000"
 14651      00
 14652              	.LASF192:
 14653 01a8 696E666F 		.ascii	"info_\000"
 14653      5F00
 14654              	.LASF315:
 14655 01ae 66696C74 		.ascii	"filt_emg\000"
 14655      5F656D67 
 14655      00
 14656              	.LASF107:
 14657 01b7 73745F65 		.ascii	"st_emg\000"
 14657      6D6700
 14658              	.LASF55:
 14659 01be 706F7369 		.ascii	"position_hist\000"
 14659      74696F6E 
 14659      5F686973 
 14659      7400
 14660              	.LASF174:
 14661 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14661      4152455F 
 14661      44415441 
 14661      00
 14662              	.LASF158:
 14663 01d9 74656D70 		.ascii	"temp_value\000"
 14663      5F76616C 
 14663      756500
 14664              	.LASF275:
 14665 01e4 7468725F 		.ascii	"thr_pos\000"
 14665      706F7300 
 14666              	.LASF142:
 14667 01ec 73745F57 		.ascii	"st_WR_spec\000"
 14667      525F7370 
 14667      656300
 14668              	.LASF208:
 14669 01f7 6572725F 		.ascii	"err_joy_2\000"
 14669      6A6F795F 
 14669      3200
 14670              	.LASF52:
 14671 0201 72656164 		.ascii	"ready\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 315


 14671      7900
 14672              	.LASF104:
 14673 0207 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14673      6964785F 
 14673      7573655F 
 14673      666F725F 
 14673      636F6E74 
 14674              	.LASF161:
 14675 021f 6761696E 		.ascii	"gain\000"
 14675      00
 14676              	.LASF65:
 14677 0224 73745F64 		.ascii	"st_device\000"
 14677      65766963 
 14677      6500
 14678              	.LASF27:
 14679 022e 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14679      545F4D4F 
 14679      44455F45 
 14679      4D475F50 
 14679      524F504F 
 14680              	.LASF70:
 14681 024a 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14681      326E645F 
 14681      6D6F746F 
 14681      725F666C 
 14681      616700
 14682              	.LASF254:
 14683 025d 55445F63 		.ascii	"UD_counter\000"
 14683      6F756E74 
 14683      657200
 14684              	.LASF62:
 14685 0268 65786365 		.ascii	"excessive_signal_activity\000"
 14685      73736976 
 14685      655F7369 
 14685      676E616C 
 14685      5F616374 
 14686              	.LASF170:
 14687 0282 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14687      414E445F 
 14687      4D45414E 
 14687      00
 14688              	.LASF114:
 14689 028f 72656164 		.ascii	"read_imu_flag\000"
 14689      5F696D75 
 14689      5F666C61 
 14689      6700
 14690              	.LASF122:
 14691 029d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14691      72645F45 
 14691      4D475F68 
 14691      6973746F 
 14691      72795F6F 
 14692              	.LASF258:
 14693 02b6 66697273 		.ascii	"first_tension_valid\000"
 14693      745F7465 
 14693      6E73696F 
 14693      6E5F7661 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 316


 14693      6C696400 
 14694              	.LASF317:
 14695 02ca 74696D65 		.ascii	"timer_value\000"
 14695      725F7661 
 14695      6C756500 
 14696              	.LASF4:
 14697 02d6 6C6F6E67 		.ascii	"long int\000"
 14697      20696E74 
 14697      00
 14698              	.LASF148:
 14699 02df 756E7573 		.ascii	"unused_bytes1\000"
 14699      65645F62 
 14699      79746573 
 14699      3100
 14700              	.LASF195:
 14701 02ed 454D475F 		.ascii	"EMG_history_info_\000"
 14701      68697374 
 14701      6F72795F 
 14701      696E666F 
 14701      5F00
 14702              	.LASF220:
 14703 02ff 53485F45 		.ascii	"SH_ENC_L\000"
 14703      4E435F4C 
 14703      00
 14704              	.LASF69:
 14705 0308 72657365 		.ascii	"reset_counters\000"
 14705      745F636F 
 14705      756E7465 
 14705      727300
 14706              	.LASF273:
 14707 0317 62696E5F 		.ascii	"bin_threshold\000"
 14707      74687265 
 14707      73686F6C 
 14707      6400
 14708              	.LASF125:
 14709 0325 75736572 		.ascii	"user_emg\000"
 14709      5F656D67 
 14709      00
 14710              	.LASF244:
 14711 032e 73616665 		.ascii	"safe_startup_motor_activation\000"
 14711      5F737461 
 14711      72747570 
 14711      5F6D6F74 
 14711      6F725F61 
 14712              	.LASF64:
 14713 034c 756E7573 		.ascii	"unused_bytes\000"
 14713      65645F62 
 14713      79746573 
 14713      00
 14714              	.LASF154:
 14715 0359 61636365 		.ascii	"accel_value\000"
 14715      6C5F7661 
 14715      6C756500 
 14716              	.LASF306:
 14717 0365 675F6164 		.ascii	"g_adc_measOld\000"
 14717      635F6D65 
 14717      61734F6C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 317


 14717      6400
 14718              	.LASF233:
 14719 0373 6175785F 		.ascii	"aux_encoder\000"
 14719      656E636F 
 14719      64657200 
 14720              	.LASF53:
 14721 037f 73745F63 		.ascii	"st_counters\000"
 14721      6F756E74 
 14721      65727300 
 14722              	.LASF219:
 14723 038b 53485F4D 		.ascii	"SH_MOT\000"
 14723      4F5400
 14724              	.LASF316:
 14725 0392 66696C74 		.ascii	"filt_detect_pc\000"
 14725      5F646574 
 14725      6563745F 
 14725      706300
 14726              	.LASF17:
 14727 03a1 666C6F61 		.ascii	"float32\000"
 14727      74333200 
 14728              	.LASF229:
 14729 03a9 656E636F 		.ascii	"encoder_reading_SPI\000"
 14729      6465725F 
 14729      72656164 
 14729      696E675F 
 14729      53504900 
 14730              	.LASF242:
 14731 03bd 6572726F 		.ascii	"error\000"
 14731      7200
 14732              	.LASF177:
 14733 03c3 57524954 		.ascii	"WRITE_END\000"
 14733      455F454E 
 14733      4400
 14734              	.LASF255:
 14735 03cd 4C525F63 		.ascii	"LR_counter\000"
 14735      6F756E74 
 14735      657200
 14736              	.LASF347:
 14737 03d8 706F735F 		.ascii	"pos_reconstruct\000"
 14737      7265636F 
 14737      6E737472 
 14737      75637400 
 14738              	.LASF263:
 14739 03e8 70776D5F 		.ascii	"pwm_limit_search\000"
 14739      6C696D69 
 14739      745F7365 
 14739      61726368 
 14739      00
 14740              	.LASF0:
 14741 03f9 7369676E 		.ascii	"signed char\000"
 14741      65642063 
 14741      68617200 
 14742              	.LASF124:
 14743 0405 75736572 		.ascii	"user_code_string\000"
 14743      5F636F64 
 14743      655F7374 
 14743      72696E67 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 318


 14743      00
 14744              	.LASF162:
 14745 0416 73745F63 		.ascii	"st_calib\000"
 14745      616C6962 
 14745      00
 14746              	.LASF202:
 14747 041f 6572725F 		.ascii	"err_emg_1\000"
 14747      656D675F 
 14747      3100
 14748              	.LASF203:
 14749 0429 6572725F 		.ascii	"err_emg_2\000"
 14749      656D675F 
 14749      3200
 14750              	.LASF112:
 14751 0433 73776974 		.ascii	"switch_emg\000"
 14751      63685F65 
 14751      6D6700
 14752              	.LASF328:
 14753 043e 656D675F 		.ascii	"emg_2_status\000"
 14753      325F7374 
 14753      61747573 
 14753      00
 14754              	.LASF340:
 14755 044b 4144435F 		.ascii	"ADC_buf\000"
 14755      62756600 
 14756              	.LASF333:
 14757 0453 696E7465 		.ascii	"interrupt_flag\000"
 14757      72727570 
 14757      745F666C 
 14757      616700
 14758              	.LASF284:
 14759 0462 73746570 		.ascii	"step\000"
 14759      00
 14760              	.LASF222:
 14761 0467 63757272 		.ascii	"curr_error_sum\000"
 14761      5F657272 
 14761      6F725F73 
 14761      756D00
 14762              	.LASF1:
 14763 0476 756E7369 		.ascii	"unsigned char\000"
 14763      676E6564 
 14763      20636861 
 14763      7200
 14764              	.LASF98:
 14765 0484 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14765      72657665 
 14765      72735F6D 
 14765      6F746F72 
 14765      5F666C61 
 14766              	.LASF293:
 14767 049a 726F775F 		.ascii	"row_start\000"
 14767      73746172 
 14767      7400
 14768              	.LASF337:
 14769 04a4 666F7263 		.ascii	"forced_open\000"
 14769      65645F6F 
 14769      70656E00 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 319


 14770              	.LASF237:
 14771 04b0 73706565 		.ascii	"speed_encoder\000"
 14771      645F656E 
 14771      636F6465 
 14771      7200
 14772              	.LASF301:
 14773 04be 675F7265 		.ascii	"g_refNew\000"
 14773      664E6577 
 14773      00
 14774              	.LASF282:
 14775 04c7 63757272 		.ascii	"curr_off\000"
 14775      5F6F6666 
 14775      00
 14776              	.LASF68:
 14777 04d0 72696768 		.ascii	"right_left\000"
 14777      745F6C65 
 14777      667400
 14778              	.LASF96:
 14779 04db 656E636F 		.ascii	"encoder_line\000"
 14779      6465725F 
 14779      6C696E65 
 14779      00
 14780              	.LASF327:
 14781 04e8 656D675F 		.ascii	"emg_1_status\000"
 14781      315F7374 
 14781      61747573 
 14781      00
 14782              	.LASF153:
 14783 04f5 666C6167 		.ascii	"flags\000"
 14783      7300
 14784              	.LASF201:
 14785 04fb 68616E64 		.ascii	"handle_value\000"
 14785      6C655F76 
 14785      616C7565 
 14785      00
 14786              	.LASF20:
 14787 0508 63686172 		.ascii	"char\000"
 14787      00
 14788              	.LASF259:
 14789 050d 64657465 		.ascii	"detect_power_cycle_prev\000"
 14789      63745F70 
 14789      6F776572 
 14789      5F637963 
 14789      6C655F70 
 14790              	.LASF91:
 14791 0525 6D61785F 		.ascii	"max_step_pos\000"
 14791      73746570 
 14791      5F706F73 
 14791      00
 14792              	.LASF342:
 14793 0532 70776D5F 		.ascii	"pwm_sign\000"
 14793      7369676E 
 14793      00
 14794              	.LASF228:
 14795 053b 6D6F746F 		.ascii	"motor_control_generic\000"
 14795      725F636F 
 14795      6E74726F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 320


 14795      6C5F6765 
 14795      6E657269 
 14796              	.LASF351:
 14797 0551 675F696D 		.ascii	"g_imu\000"
 14797      7500
 14798              	.LASF314:
 14799 0557 66696C74 		.ascii	"filt_vel\000"
 14799      5F76656C 
 14799      00
 14800              	.LASF97:
 14801 0560 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14801      72617465 
 14801      5F6C696D 
 14801      69746572 
 14801      00
 14802              	.LASF77:
 14803 0571 6B5F645F 		.ascii	"k_d_c\000"
 14803      6300
 14804              	.LASF173:
 14805 0577 6164635F 		.ascii	"adc_status\000"
 14805      73746174 
 14805      757300
 14806              	.LASF102:
 14807 0582 6D5F6D75 		.ascii	"m_mult\000"
 14807      6C7400
 14808              	.LASF76:
 14809 0589 6B5F695F 		.ascii	"k_i_c\000"
 14809      6300
 14810              	.LASF226:
 14811 058f 6D6F746F 		.ascii	"motor_dir\000"
 14811      725F6469 
 14811      7200
 14812              	.LASF277:
 14813 0599 62696E5F 		.ascii	"bin_st\000"
 14813      737400
 14814              	.LASF180:
 14815 05a0 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14815      52533438 
 14815      355F5258 
 14815      5F457849 
 14815      6E746572 
 14816              	.LASF89:
 14817 05b9 706F735F 		.ascii	"pos_lim_sup\000"
 14817      6C696D5F 
 14817      73757000 
 14818              	.LASF160:
 14819 05c5 6F6C645F 		.ascii	"old_value\000"
 14819      76616C75 
 14819      6500
 14820              	.LASF110:
 14821 05cf 656D675F 		.ascii	"emg_speed\000"
 14821      73706565 
 14821      6400
 14822              	.LASF129:
 14823 05d9 72657374 		.ascii	"rest_vel\000"
 14823      5F76656C 
 14823      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 321


 14824              	.LASF167:
 14825 05e2 4E4F524D 		.ascii	"NORMAL\000"
 14825      414C00
 14826              	.LASF214:
 14827 05e9 6D6F746F 		.ascii	"motor_control_SH\000"
 14827      725F636F 
 14827      6E74726F 
 14827      6C5F5348 
 14827      00
 14828              	.LASF349:
 14829 05fa 7046696C 		.ascii	"pFile\000"
 14829      6500
 14830              	.LASF221:
 14831 0600 706F735F 		.ascii	"pos_error_sum\000"
 14831      6572726F 
 14831      725F7375 
 14831      6D00
 14832              	.LASF121:
 14833 060e 4144435F 		.ascii	"ADC_conf\000"
 14833      636F6E66 
 14833      00
 14834              	.LASF323:
 14835 0617 6465765F 		.ascii	"dev_tension_f\000"
 14835      74656E73 
 14835      696F6E5F 
 14835      6600
 14836              	.LASF79:
 14837 0625 6B5F695F 		.ascii	"k_i_dl\000"
 14837      646C00
 14838              	.LASF50:
 14839 062c 62756666 		.ascii	"buffer\000"
 14839      657200
 14840              	.LASF81:
 14841 0633 6B5F705F 		.ascii	"k_p_c_dl\000"
 14841      635F646C 
 14841      00
 14842              	.LASF188:
 14843 063c 72785F64 		.ascii	"rx_data_type\000"
 14843      6174615F 
 14843      74797065 
 14843      00
 14844              	.LASF352:
 14845 0649 675F696D 		.ascii	"g_imuNew\000"
 14845      754E6577 
 14845      00
 14846              	.LASF165:
 14847 0652 73706565 		.ascii	"speed\000"
 14847      6400
 14848              	.LASF227:
 14849 0658 706F7369 		.ascii	"position_counter\000"
 14849      74696F6E 
 14849      5F636F75 
 14849      6E746572 
 14849      00
 14850              	.LASF286:
 14851 0669 74696D65 		.ascii	"timer_value_e\000"
 14851      725F7661 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 322


 14851      6C75655F 
 14851      6500
 14852              	.LASF183:
 14853 0677 64617461 		.ascii	"data_packet_index\000"
 14853      5F706163 
 14853      6B65745F 
 14853      696E6465 
 14853      7800
 14854              	.LASF185:
 14855 0689 64617461 		.ascii	"data_packet_buffer\000"
 14855      5F706163 
 14855      6B65745F 
 14855      62756666 
 14855      657200
 14856              	.LASF199:
 14857 069c 73745F72 		.ascii	"st_ref_p\000"
 14857      65665F70 
 14857      00
 14858              	.LASF326:
 14859 06a5 6379636C 		.ascii	"cycles_status\000"
 14859      65735F73 
 14859      74617475 
 14859      7300
 14860              	.LASF190:
 14861 06b3 636F756E 		.ascii	"counter_calibration\000"
 14861      7465725F 
 14861      63616C69 
 14861      62726174 
 14861      696F6E00 
 14862              	.LASF303:
 14863 06c7 675F6D65 		.ascii	"g_meas\000"
 14863      617300
 14864              	.LASF285:
 14865 06ce 74696D65 		.ascii	"timer_value_s\000"
 14865      725F7661 
 14865      6C75655F 
 14865      7300
 14866              	.LASF346:
 14867 06dc 456E636F 		.ascii	"Encoder_Check\000"
 14867      6465725F 
 14867      43686563 
 14867      6B00
 14868              	.LASF241:
 14869 06ea 636F6D70 		.ascii	"comp_value_encoder\000"
 14869      5F76616C 
 14869      75655F65 
 14869      6E636F64 
 14869      657200
 14870              	.LASF289:
 14871 06fd 73746172 		.ascii	"start_emg_pos\000"
 14871      745F656D 
 14871      675F706F 
 14871      7300
 14872              	.LASF343:
 14873 070b 64617461 		.ascii	"data_encoder_raw\000"
 14873      5F656E63 
 14873      6F646572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 323


 14873      5F726177 
 14873      00
 14874              	.LASF300:
 14875 071c 675F7265 		.ascii	"g_ref\000"
 14875      6600
 14876              	.LASF25:
 14877 0722 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14877      545F4D4F 
 14877      44455F45 
 14877      58544552 
 14877      4E414C00 
 14878              	.LASF232:
 14879 0736 696E6465 		.ascii	"index\000"
 14879      7800
 14880              	.LASF140:
 14881 073c 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14881      6D756D5F 
 14881      70726573 
 14881      73757265 
 14881      5F6B5061 
 14882              	.LASF130:
 14883 0751 72657374 		.ascii	"rest_position_flag\000"
 14883      5F706F73 
 14883      6974696F 
 14883      6E5F666C 
 14883      616700
 14884              	.LASF132:
 14885 0764 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14885      7469636B 
 14885      5F636C6F 
 14885      73757265 
 14885      5F737065 
 14886              	.LASF82:
 14887 077b 6B5F695F 		.ascii	"k_i_c_dl\000"
 14887      635F646C 
 14887      00
 14888              	.LASF189:
 14889 0784 7061636B 		.ascii	"package_count\000"
 14889      6167655F 
 14889      636F756E 
 14889      7400
 14890              	.LASF38:
 14891 0792 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14891      5F414E44 
 14891      5F504F53 
 14891      5F434F4E 
 14891      54524F4C 
 14892              	.LASF163:
 14893 07a7 656E6162 		.ascii	"enabled\000"
 14893      6C656400 
 14894              	.LASF5:
 14895 07af 6C6F6E67 		.ascii	"long unsigned int\000"
 14895      20756E73 
 14895      69676E65 
 14895      6420696E 
 14895      7400
 14896              	.LASF350:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 324


 14897 07c1 70454D47 		.ascii	"pEMGHFile\000"
 14897      4846696C 
 14897      6500
 14898              	.LASF175:
 14899 07cb 57524954 		.ascii	"WRITE_CYCLES\000"
 14899      455F4359 
 14899      434C4553 
 14899      00
 14900              	.LASF134:
 14901 07d8 6A6F7973 		.ascii	"joystick_gains\000"
 14901      7469636B 
 14901      5F676169 
 14901      6E7300
 14902              	.LASF45:
 14903 07e7 686F6C64 		.ascii	"hold_curr\000"
 14903      5F637572 
 14903      7200
 14904              	.LASF31:
 14905 07f1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14905      545F4D4F 
 14905      44455F4A 
 14905      4F595354 
 14905      49434B00 
 14906              	.LASF60:
 14907 0805 746F7461 		.ascii	"total_time_rest\000"
 14907      6C5F7469 
 14907      6D655F72 
 14907      65737400 
 14908              	.LASF84:
 14909 0815 61637469 		.ascii	"activ\000"
 14909      7600
 14910              	.LASF266:
 14911 081b 6D696E5F 		.ascii	"min_tension\000"
 14911      74656E73 
 14911      696F6E00 
 14912              	.LASF338:
 14913 0827 62617474 		.ascii	"battery_low_SoC\000"
 14913      6572795F 
 14913      6C6F775F 
 14913      536F4300 
 14914              	.LASF198:
 14915 0837 6D6F746F 		.ascii	"motor_idx\000"
 14915      725F6964 
 14915      7800
 14916              	.LASF101:
 14917 0841 6D5F6F66 		.ascii	"m_off\000"
 14917      6600
 14918              	.LASF331:
 14919 0847 72657365 		.ascii	"reset_last_value_flag\000"
 14919      745F6C61 
 14919      73745F76 
 14919      616C7565 
 14919      5F666C61 
 14920              	.LASF157:
 14921 085d 71756174 		.ascii	"quat_value\000"
 14921      5F76616C 
 14921      756500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 325


 14922              	.LASF127:
 14923 0868 72657374 		.ascii	"rest_pos\000"
 14923      5F706F73 
 14923      00
 14924              	.LASF40:
 14925 0871 63757272 		.ascii	"curr\000"
 14925      00
 14926              	.LASF176:
 14927 0876 57414954 		.ascii	"WAIT_QUERY\000"
 14927      5F515545 
 14927      525900
 14928              	.LASF94:
 14929 0881 696E7075 		.ascii	"input_mode\000"
 14929      745F6D6F 
 14929      646500
 14930              	.LASF36:
 14931 088c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14931      524F4C5F 
 14931      50574D00 
 14932              	.LASF267:
 14933 0898 6379636C 		.ascii	"cycles_counter_update\000"
 14933      65735F63 
 14933      6F756E74 
 14933      65725F75 
 14933      70646174 
 14934              	.LASF354:
 14935 08ae 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14935      43313120 
 14935      352E342E 
 14935      31203230 
 14935      31363036 
 14936 08e1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14936      20726576 
 14936      6973696F 
 14936      6E203233 
 14936      37373135 
 14937 0914 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14937      66756E63 
 14937      74696F6E 
 14937      2D736563 
 14937      74696F6E 
 14938              	.LASF42:
 14939 093c 73745F72 		.ascii	"st_ref\000"
 14939      656600
 14940              	.LASF318:
 14941 0943 74696D65 		.ascii	"timer_value0\000"
 14941      725F7661 
 14941      6C756530 
 14941      00
 14942              	.LASF126:
 14943 0950 73745F53 		.ascii	"st_SH_spec\000"
 14943      485F7370 
 14943      656300
 14944              	.LASF247:
 14945 095b 765F7661 		.ascii	"v_value\000"
 14945      6C756500 
 14946              	.LASF310:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 326


 14947 0963 63616C69 		.ascii	"calib\000"
 14947      6200
 14948              	.LASF138:
 14949 0969 73745F46 		.ascii	"st_FB_spec\000"
 14949      425F7370 
 14949      656300
 14950              	.LASF6:
 14951 0974 6C6F6E67 		.ascii	"long long int\000"
 14951      206C6F6E 
 14951      6720696E 
 14951      7400
 14952              	.LASF34:
 14953 0982 53485F63 		.ascii	"SH_control_mode\000"
 14953      6F6E7472 
 14953      6F6C5F6D 
 14953      6F646500 
 14954              	.LASF194:
 14955 0992 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14955      4E445F4D 
 14955      4F544F52 
 14955      5F494458 
 14955      00
 14956              	.LASF339:
 14957 09a3 6368616E 		.ascii	"change_ext_ref_flag\000"
 14957      67655F65 
 14957      78745F72 
 14957      65665F66 
 14957      6C616700 
 14958              	.LASF19:
 14959 09b7 646F7562 		.ascii	"double\000"
 14959      6C6500
 14960              	.LASF312:
 14961 09be 66696C74 		.ascii	"filt_curr_diff\000"
 14961      5F637572 
 14961      725F6469 
 14961      666600
 14962              	.LASF210:
 14963 09cd 706F735F 		.ascii	"pos_sum\000"
 14963      73756D00 
 14964              	.LASF213:
 14965 09d5 696E7465 		.ascii	"interrupt_manager\000"
 14965      72727570 
 14965      745F6D61 
 14965      6E616765 
 14965      7200
 14966              	.LASF100:
 14967 09e7 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14967      7261775F 
 14967      72656164 
 14967      5F636F6E 
 14967      6600
 14968              	.LASF211:
 14969 09f9 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14969      7574655F 
 14969      536F6674 
 14969      48616E64 
 14969      5F325F6D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 327


 14970              	.LASF166:
 14971 0a21 72657065 		.ascii	"repetitions\000"
 14971      74697469 
 14971      6F6E7300 
 14972              	.LASF90:
 14973 0a2d 6D61785F 		.ascii	"max_step_neg\000"
 14973      73746570 
 14973      5F6E6567 
 14973      00
 14974              	.LASF246:
 14975 0a3a 636F756E 		.ascii	"count_startup_motor\000"
 14975      745F7374 
 14975      61727475 
 14975      705F6D6F 
 14975      746F7200 
 14976              	.LASF137:
 14977 0a4e 736C6176 		.ascii	"slave_ID\000"
 14977      655F4944 
 14977      00
 14978              	.LASF171:
 14979 0a57 57414954 		.ascii	"WAIT\000"
 14979      00
 14980              	.LASF18:
 14981 0a5c 666C6F61 		.ascii	"float\000"
 14981      7400
 14982              	.LASF116:
 14983 0a62 494D555F 		.ascii	"IMU_conf\000"
 14983      636F6E66 
 14983      00
 14984              	.LASF260:
 14985 0a6b 636F756E 		.ascii	"count\000"
 14985      7400
 14986              	.LASF46:
 14987 0a71 73745F61 		.ascii	"st_adc_meas\000"
 14987      64635F6D 
 14987      65617300 
 14988              	.LASF271:
 14989 0a7d 656D675F 		.ascii	"emg_excess_status\000"
 14989      65786365 
 14989      73735F73 
 14989      74617475 
 14989      7300
 14990              	.LASF297:
 14991 0a8f 6D5F6164 		.ascii	"m_addr\000"
 14991      647200
 14992              	.LASF309:
 14993 0a96 635F6D65 		.ascii	"c_mem\000"
 14993      6D00
 14994              	.LASF8:
 14995 0a9c 756E7369 		.ascii	"unsigned int\000"
 14995      676E6564 
 14995      20696E74 
 14995      00
 14996              	.LASF276:
 14997 0aa9 6D61785F 		.ascii	"max_pos\000"
 14997      706F7300 
 14998              	.LASF348:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 328


 14999 0ab1 72657374 		.ascii	"rest_pos_curr_ref\000"
 14999      5F706F73 
 14999      5F637572 
 14999      725F7265 
 14999      6600
 15000              	.LASF147:
 15001 0ac3 666C6167 		.ascii	"flag\000"
 15001      00
 15002              	.LASF95:
 15003 0ac8 636F6E74 		.ascii	"control_mode\000"
 15003      726F6C5F 
 15003      6D6F6465 
 15003      00
 15004              	.LASF21:
 15005 0ad5 63797374 		.ascii	"cystatus\000"
 15005      61747573 
 15005      00
 15006              	.LASF26:
 15007 0ade 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 15007      545F4D4F 
 15007      44455F45 
 15007      4E434F44 
 15007      45523300 
 15008              	.LASF113:
 15009 0af2 73745F69 		.ascii	"st_imu\000"
 15009      6D7500
 15010              	.LASF205:
 15011 0af9 63757272 		.ascii	"current_emg\000"
 15011      656E745F 
 15011      656D6700 
 15012              	.LASF186:
 15013 0b05 72785F71 		.ascii	"rx_queue\000"
 15013      75657565 
 15013      00
 15014              	.LASF256:
 15015 0b0e 55445F6D 		.ascii	"UD_mean_value\000"
 15015      65616E5F 
 15015      76616C75 
 15015      6500
 15016              	.LASF231:
 15017 0b1c 6173736F 		.ascii	"assoc_motor\000"
 15017      635F6D6F 
 15017      746F7200 
 15018              	.LASF47:
 15019 0b28 6164645F 		.ascii	"add_emg\000"
 15019      656D6700 
 15020              	.LASF218:
 15021 0b30 695F7265 		.ascii	"i_ref\000"
 15021      6600
 15022              	.LASF108:
 15023 0b36 656D675F 		.ascii	"emg_threshold\000"
 15023      74687265 
 15023      73686F6C 
 15023      6400
 15024              	.LASF290:
 15025 0b44 73617665 		.ascii	"save_cycles_eeprom\000"
 15025      5F637963 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 329


 15025      6C65735F 
 15025      65657072 
 15025      6F6D00
 15026              	.LASF105:
 15027 0b57 6D6F746F 		.ascii	"motor_handle_ratio\000"
 15027      725F6861 
 15027      6E646C65 
 15027      5F726174 
 15027      696F00
 15028              	.LASF56:
 15029 0b6a 63757272 		.ascii	"current_hist\000"
 15029      656E745F 
 15029      68697374 
 15029      00
 15030              	.LASF37:
 15031 0b77 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 15031      524F4C5F 
 15031      43555252 
 15031      454E5400 
 15032              	.LASF23:
 15033 0b87 6C6F6E67 		.ascii	"long double\000"
 15033      20646F75 
 15033      626C6500 
 15034              	.LASF169:
 15035 0b93 44495343 		.ascii	"DISCARD\000"
 15035      41524400 
 15036              	.LASF223:
 15037 0b9b 70726576 		.ascii	"prev_pos_err\000"
 15037      5F706F73 
 15037      5F657272 
 15037      00
 15038              	.LASF239:
 15039 0ba8 696E6974 		.ascii	"init_rot\000"
 15039      5F726F74 
 15039      00
 15040              	.LASF264:
 15041 0bb1 6D6F745F 		.ascii	"mot_idx\000"
 15041      69647800 
 15042              	.LASF313:
 15043 0bb9 66696C74 		.ascii	"filt_i\000"
 15043      5F6900
 15044              	.LASF63:
 15045 0bc0 6D6F7469 		.ascii	"motion_counter\000"
 15045      6F6E5F63 
 15045      6F756E74 
 15045      657200
 15046              	.LASF311:
 15047 0bcf 66696C74 		.ascii	"filt_v\000"
 15047      5F7600
 15048              	.LASF336:
 15049 0bd6 72657374 		.ascii	"rest_enabled\000"
 15049      5F656E61 
 15049      626C6564 
 15049      00
 15050              	.LASF302:
 15051 0be3 675F7265 		.ascii	"g_refOld\000"
 15051      664F6C64 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 330


 15051      00
 15052              	.LASF216:
 15053 0bec 706F735F 		.ascii	"pos_error\000"
 15053      6572726F 
 15053      7200
 15054              	.LASF155:
 15055 0bf6 6779726F 		.ascii	"gyro_value\000"
 15055      5F76616C 
 15055      756500
 15056              	.LASF118:
 15057 0c01 63757272 		.ascii	"curr_time\000"
 15057      5F74696D 
 15057      6500
 15058              	.LASF103:
 15059 0c0b 646F7562 		.ascii	"double_encoder_on_off\000"
 15059      6C655F65 
 15059      6E636F64 
 15059      65725F6F 
 15059      6E5F6F66 
 15060              	.LASF265:
 15061 0c21 6D61785F 		.ascii	"max_tension\000"
 15061      74656E73 
 15061      696F6E00 
 15062              	.LASF193:
 15063 0c2d 4D4F544F 		.ascii	"MOTOR_IDX\000"
 15063      525F4944 
 15063      5800
 15064              	.LASF240:
 15065 0c37 6C617374 		.ascii	"last_value_encoder\000"
 15065      5F76616C 
 15065      75655F65 
 15065      6E636F64 
 15065      657200
 15066              	.LASF191:
 15067 0c4a 636F756E 		.ascii	"counter_tension_func\000"
 15067      7465725F 
 15067      74656E73 
 15067      696F6E5F 
 15067      66756E63 
 15068              	.LASF319:
 15069 0c5f 6379636C 		.ascii	"cycle_time\000"
 15069      655F7469 
 15069      6D6500
 15070              	.LASF212:
 15071 0c6a 66736D5F 		.ascii	"fsm_state\000"
 15071      73746174 
 15071      6500
 15072              	.LASF7:
 15073 0c74 6C6F6E67 		.ascii	"long long unsigned int\000"
 15073      206C6F6E 
 15073      6720756E 
 15073      7369676E 
 15073      65642069 
 15074              	.LASF325:
 15075 0c8b 64657465 		.ascii	"detect_power_cycle\000"
 15075      63745F70 
 15075      6F776572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 331


 15075      5F637963 
 15075      6C6500
 15076              	.LASF329:
 15077 0c9e 6A6F795F 		.ascii	"joy_UD_status\000"
 15077      55445F73 
 15077      74617475 
 15077      7300
 15078              	.LASF270:
 15079 0cac 6D6F7469 		.ascii	"motion_status\000"
 15079      6F6E5F73 
 15079      74617475 
 15079      7300
 15080              	.LASF51:
 15081 0cba 6C656E67 		.ascii	"length\000"
 15081      746800
 15082              	.LASF152:
 15083 0cc1 73745F69 		.ascii	"st_imu_data\000"
 15083      6D755F64 
 15083      61746100 
 15084              	.LASF156:
 15085 0ccd 6D61675F 		.ascii	"mag_value\000"
 15085      76616C75 
 15085      6500
 15086              	.LASF41:
 15087 0cd7 6F6E6F66 		.ascii	"onoff\000"
 15087      6600
 15088              	.LASF235:
 15089 0cdd 746D705F 		.ascii	"tmp_value_encoder_32\000"
 15089      76616C75 
 15089      655F656E 
 15089      636F6465 
 15089      725F3332 
 15090              	.LASF224:
 15091 0cf2 70726576 		.ascii	"prev_curr_err\000"
 15091      5F637572 
 15091      725F6572 
 15091      7200
 15092              	.LASF184:
 15093 0d00 64617461 		.ascii	"data_packet_length\000"
 15093      5F706163 
 15093      6B65745F 
 15093      6C656E67 
 15093      746800
 15094              	.LASF75:
 15095 0d13 6B5F705F 		.ascii	"k_p_c\000"
 15095      6300
 15096              	.LASF320:
 15097 0d19 6465765F 		.ascii	"dev_tension\000"
 15097      74656E73 
 15097      696F6E00 
 15098              	.LASF86:
 15099 0d25 6D6F746F 		.ascii	"motor_driver_type\000"
 15099      725F6472 
 15099      69766572 
 15099      5F747970 
 15099      6500
 15100              	.LASF172:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 332


 15101 0d37 57414954 		.ascii	"WAIT_EoC\000"
 15101      5F456F43 
 15101      00
 15102              	.LASF22:
 15103 0d40 72656738 		.ascii	"reg8\000"
 15103      00
 15104              	.LASF279:
 15105 0d45 62696E5F 		.ascii	"bin_1\000"
 15105      3100
 15106              	.LASF280:
 15107 0d4b 62696E5F 		.ascii	"bin_2\000"
 15107      3200
 15108              	.LASF251:
 15109 0d51 695F6175 		.ascii	"i_aux\000"
 15109      7800
 15110              	.LASF141:
 15111 0d57 70726F70 		.ascii	"prop_err_fb_gain\000"
 15111      5F657272 
 15111      5F66625F 
 15111      6761696E 
 15111      00
 15112              	.LASF209:
 15113 0d68 706F735F 		.ascii	"pos_diff\000"
 15113      64696666 
 15113      00
 15114              	.LASF292:
 15115 0d71 726F775F 		.ascii	"row_number\000"
 15115      6E756D62 
 15115      657200
 15116              	.LASF262:
 15117 0d7c 6F766572 		.ascii	"overcurrent_control\000"
 15117      63757272 
 15117      656E745F 
 15117      636F6E74 
 15117      726F6C00 
 15118              	.LASF281:
 15119 0d90 63757272 		.ascii	"curr_pos\000"
 15119      5F706F73 
 15119      00
 15120              	.LASF168:
 15121 0d99 52455345 		.ascii	"RESET\000"
 15121      5400
 15122              	.LASF136:
 15123 0d9f 736C6176 		.ascii	"slave_comm_active\000"
 15123      655F636F 
 15123      6D6D5F61 
 15123      63746976 
 15123      6500
 15124              	.LASF250:
 15125 0db1 616E616C 		.ascii	"analog_read_end\000"
 15125      6F675F72 
 15125      6561645F 
 15125      656E6400 
 15126              	.LASF344:
 15127 0dc1 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 15127      636F6465 
 15127      725F4C69 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 333


 15127      6E655F43 
 15127      6F6E6E65 
 15128              	.LASF73:
 15129 0dda 6465765F 		.ascii	"dev_type\000"
 15129      74797065 
 15129      00
 15130              	.LASF269:
 15131 0de3 656D675F 		.ascii	"emg_cycle_status\000"
 15131      6379636C 
 15131      655F7374 
 15131      61747573 
 15131      00
 15132              	.LASF123:
 15133 0df4 73745F75 		.ascii	"st_user\000"
 15133      73657200 
 15134              	.LASF106:
 15135 0dfc 67656172 		.ascii	"gears_params\000"
 15135      735F7061 
 15135      72616D73 
 15135      00
 15136              	.LASF117:
 15137 0e09 73745F65 		.ascii	"st_expansion\000"
 15137      7870616E 
 15137      73696F6E 
 15137      00
 15138              	.LASF111:
 15139 0e16 656D675F 		.ascii	"emg_calibration_flag\000"
 15139      63616C69 
 15139      62726174 
 15139      696F6E5F 
 15139      666C6167 
 15140              	.LASF43:
 15141 0e2b 73745F6D 		.ascii	"st_meas\000"
 15141      65617300 
 15142              	.LASF294:
 15143 0e33 61646472 		.ascii	"addr_start\000"
 15143      5F737461 
 15143      727400
 15144              	.LASF298:
 15145 0e3e 70776D5F 		.ascii	"pwm_preload_values\000"
 15145      7072656C 
 15145      6F61645F 
 15145      76616C75 
 15145      657300
 15146              	.LASF133:
 15147 0e51 6A6F7973 		.ascii	"joystick_threshold\000"
 15147      7469636B 
 15147      5F746872 
 15147      6573686F 
 15147      6C6400
 15148              	.LASF32:
 15149 0e64 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 15149      545F4D4F 
 15149      44455F45 
 15149      4D475F50 
 15149      524F504F 
 15150              	.LASF179:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 334


 15151 0e83 636F756E 		.ascii	"counter_status\000"
 15151      7465725F 
 15151      73746174 
 15151      757300
 15152              	.LASF308:
 15153 0e92 675F6D65 		.ascii	"g_mem\000"
 15153      6D00
 15154              	.LASF252:
 15155 0e98 656D675F 		.ascii	"emg_counter_1\000"
 15155      636F756E 
 15155      7465725F 
 15155      3100
 15156              	.LASF253:
 15157 0ea6 656D675F 		.ascii	"emg_counter_2\000"
 15157      636F756E 
 15157      7465725F 
 15157      3200
 15158              	.LASF243:
 15159 0eb4 6F6E6C79 		.ascii	"only_first_time\000"
 15159      5F666972 
 15159      73745F74 
 15159      696D6500 
 15160              	.LASF11:
 15161 0ec4 75696E74 		.ascii	"uint8\000"
 15161      3800
 15162              	.LASF131:
 15163 0eca 73745F4A 		.ascii	"st_JOY_spec\000"
 15163      4F595F73 
 15163      70656300 
 15164              	.LASF238:
 15165 0ed6 76616C75 		.ascii	"value_diff\000"
 15165      655F6469 
 15165      666600
 15166              	.LASF283:
 15167 0ee1 63757272 		.ascii	"curr_ref\000"
 15167      5F726566 
 15167      00
 15168              	.LASF2:
 15169 0eea 73686F72 		.ascii	"short int\000"
 15169      7420696E 
 15169      7400
 15170              	.LASF80:
 15171 0ef4 6B5F645F 		.ascii	"k_d_dl\000"
 15171      646C00
 15172              	.LASF236:
 15173 0efb 76616C75 		.ascii	"value_encoder\000"
 15173      655F656E 
 15173      636F6465 
 15173      7200
 15174              	.LASF48:
 15175 0f09 6A6F7973 		.ascii	"joystick\000"
 15175      7469636B 
 15175      00
 15176              	.LASF149:
 15177 0f12 6D6F746F 		.ascii	"motor\000"
 15177      7200
 15178              	.LASF322:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 335


 15179 0f18 6465765F 		.ascii	"dev_pwm_sat\000"
 15179      70776D5F 
 15179      73617400 
 15180              	.LASF66:
 15181 0f24 68775F6D 		.ascii	"hw_maint_date\000"
 15181      61696E74 
 15181      5F646174 
 15181      6500
 15182              	.LASF196:
 15183 0f32 66756E63 		.ascii	"function_scheduler\000"
 15183      74696F6E 
 15183      5F736368 
 15183      6564756C 
 15183      657200
 15184              	.LASF197:
 15185 0f45 636F6D70 		.ascii	"compute_reference\000"
 15185      7574655F 
 15185      72656665 
 15185      72656E63 
 15185      6500
 15186              	.LASF225:
 15187 0f57 70726576 		.ascii	"prev_pwm\000"
 15187      5F70776D 
 15187      00
 15188              	.LASF67:
 15189 0f60 73746174 		.ascii	"stats_period_begin_date\000"
 15189      735F7065 
 15189      72696F64 
 15189      5F626567 
 15189      696E5F64 
 15190              	.LASF288:
 15191 0f78 74696D65 		.ascii	"timer_exc_e\000"
 15191      725F6578 
 15191      635F6500 
 15192              	.LASF299:
 15193 0f84 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15193      52784275 
 15193      66666572 
 15193      00
 15194              	.LASF324:
 15195 0f91 706F775F 		.ascii	"pow_tension\000"
 15195      74656E73 
 15195      696F6E00 
 15196              	.LASF287:
 15197 0f9d 74696D65 		.ascii	"timer_exc_s\000"
 15197      725F6578 
 15197      635F7300 
 15198              	.LASF15:
 15199 0fa9 696E7431 		.ascii	"int16\000"
 15199      3600
 15200              	.LASF119:
 15201 0faf 72656164 		.ascii	"read_exp_port_flag\000"
 15201      5F657870 
 15201      5F706F72 
 15201      745F666C 
 15201      616700
 15202              	.LASF274:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 336


 15203 0fc2 6578635F 		.ascii	"exc_act_thr\000"
 15203      6163745F 
 15203      74687200 
 15204              	.LASF85:
 15205 0fce 61637469 		.ascii	"activate_pwm_rescaling\000"
 15205      76617465 
 15205      5F70776D 
 15205      5F726573 
 15205      63616C69 
 15206              	.LASF78:
 15207 0fe5 6B5F705F 		.ascii	"k_p_dl\000"
 15207      646C00
 15208              	.LASF44:
 15209 0fec 65737469 		.ascii	"estim_curr\000"
 15209      6D5F6375 
 15209      727200
 15210              	.LASF321:
 15211 0ff7 6465765F 		.ascii	"dev_pwm_limit\000"
 15211      70776D5F 
 15211      6C696D69 
 15211      7400
 15212              	.LASF291:
 15213 1005 73746174 		.ascii	"status\000"
 15213      757300
 15214              	.LASF217:
 15215 100c 63757272 		.ascii	"curr_error\000"
 15215      5F657272 
 15215      6F7200
 15216              	.LASF345:
 15217 1017 456E636F 		.ascii	"Encoder_Value\000"
 15217      6465725F 
 15217      56616C75 
 15217      6500
 15218              	.LASF72:
 15219 1025 75736572 		.ascii	"user_id\000"
 15219      5F696400 
 15220              	.LASF272:
 15221 102d 72657374 		.ascii	"rest_cycle_status\000"
 15221      5F637963 
 15221      6C655F73 
 15221      74617475 
 15221      7300
 15222              	.LASF204:
 15223 103f 454E435F 		.ascii	"ENC_L\000"
 15223      4C00
 15224              	.LASF207:
 15225 1045 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15225      7574655F 
 15225      536F6674 
 15225      48616E64 
 15225      5F325F6D 
 15226              	.LASF234:
 15227 1072 746D705F 		.ascii	"tmp_value_encoder\000"
 15227      76616C75 
 15227      655F656E 
 15227      636F6465 
 15227      7200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 337


 15228              	.LASF181:
 15229 1084 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15229      4359434C 
 15229      45535F48 
 15229      616E646C 
 15229      657200
 15230              	.LASF71:
 15231 1097 62617564 		.ascii	"baud_rate\000"
 15231      5F726174 
 15231      6500
 15232              	.LASF144:
 15233 10a1 66617374 		.ascii	"fast_act_threshold\000"
 15233      5F616374 
 15233      5F746872 
 15233      6573686F 
 15233      6C6400
 15234              	.LASF115:
 15235 10b4 5350495F 		.ascii	"SPI_read_delay\000"
 15235      72656164 
 15235      5F64656C 
 15235      617900
 15236              	.LASF3:
 15237 10c3 73686F72 		.ascii	"short unsigned int\000"
 15237      7420756E 
 15237      7369676E 
 15237      65642069 
 15237      6E7400
 15238              	.LASF99:
 15239 10d6 73745F65 		.ascii	"st_encoder\000"
 15239      6E636F64 
 15239      657200
 15240              	.LASF305:
 15241 10e1 675F6164 		.ascii	"g_adc_meas\000"
 15241      635F6D65 
 15241      617300
 15242              	.LASF139:
 15243 10ec 6D61785F 		.ascii	"max_residual_current\000"
 15243      72657369 
 15243      6475616C 
 15243      5F637572 
 15243      72656E74 
 15244              	.LASF356:
 15245 1101 433A5C55 		.ascii	"C:\\Users\\mgnocco\\OneDrive - Fondazione Istituto "
 15245      73657273 
 15245      5C6D676E 
 15245      6F63636F 
 15245      5C4F6E65 
 15246 1131 4974616C 		.ascii	"Italiano Tecnologia\\Firmware\\Psoc5\\SoftHandPRO-a"
 15246      69616E6F 
 15246      20546563 
 15246      6E6F6C6F 
 15246      6769615C 
 15247 1161 6E642D47 		.ascii	"nd-Generic-FW-PSoC5-Master\\SoftHand_Pro.cydsn\000"
 15247      656E6572 
 15247      69632D46 
 15247      572D5053 
 15247      6F43352D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 338


 15248              	.LASF146:
 15249 118f 73745F65 		.ascii	"st_eeprom\000"
 15249      6570726F 
 15249      6D00
 15250              	.LASF330:
 15251 1199 6A6F795F 		.ascii	"joy_LR_status\000"
 15251      4C525F73 
 15251      74617475 
 15251      7300
 15252              	.LASF355:
 15253 11a7 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15253      72635C69 
 15253      6E746572 
 15253      72757074 
 15253      696F6E73 
 15254              	.LASF200:
 15255 11be 73745F72 		.ascii	"st_refOld_p\000"
 15255      65664F6C 
 15255      645F7000 
 15256              	.LASF16:
 15257 11ca 696E7433 		.ascii	"int32\000"
 15257      3200
 15258              	.LASF341:
 15259 11d0 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15259      4F465F41 
 15259      4E414C4F 
 15259      475F494E 
 15259      50555453 
 15260              	.LASF74:
 15261 11e5 73745F6D 		.ascii	"st_motor\000"
 15261      6F746F72 
 15261      00
 15262              	.LASF353:
 15263 11ee 6D617374 		.ascii	"master_mode\000"
 15263      65725F6D 
 15263      6F646500 
 15264              	.LASF39:
 15265 11fa 46535F46 		.ascii	"FS_FILE\000"
 15265      494C4500 
 15266              	.LASF87:
 15267 1202 706F735F 		.ascii	"pos_lim_flag\000"
 15267      6C696D5F 
 15267      666C6167 
 15267      00
 15268              	.LASF257:
 15269 120f 4C525F6D 		.ascii	"LR_mean_value\000"
 15269      65616E5F 
 15269      76616C75 
 15269      6500
 15270              	.LASF304:
 15271 121d 675F6D65 		.ascii	"g_measOld\000"
 15271      61734F6C 
 15271      6400
 15272              	.LASF296:
 15273 1227 726F775F 		.ascii	"row_end\000"
 15273      656E6400 
 15274              	.LASF35:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 339


 15275 122f 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15275      524F4C5F 
 15275      414E474C 
 15275      4500
 15276              	.LASF9:
 15277 123d 5F5F696E 		.ascii	"__int32_t\000"
 15277      7433325F 
 15277      7400
 15278              	.LASF58:
 15279 1247 77697265 		.ascii	"wire_disp\000"
 15279      5F646973 
 15279      7000
 15280              	.LASF335:
 15281 1251 63616E5F 		.ascii	"can_write\000"
 15281      77726974 
 15281      6500
 15282              	.LASF109:
 15283 125b 656D675F 		.ascii	"emg_max_value\000"
 15283      6D61785F 
 15283      76616C75 
 15283      6500
 15284              	.LASF93:
 15285 1269 63757272 		.ascii	"current_limit\000"
 15285      656E745F 
 15285      6C696D69 
 15285      7400
 15286              	.LASF33:
 15287 1277 53485F69 		.ascii	"SH_input_mode\000"
 15287      6E707574 
 15287      5F6D6F64 
 15287      6500
 15288              	.LASF178:
 15289 1285 4E4F4E45 		.ascii	"NONE\000"
 15289      00
 15290              	.LASF143:
 15291 128a 61637469 		.ascii	"activation_mode\000"
 15291      76617469 
 15291      6F6E5F6D 
 15291      6F646500 
 15292              	.LASF12:
 15293 129a 75696E74 		.ascii	"uint16\000"
 15293      313600
 15294              	.LASF128:
 15295 12a1 72657374 		.ascii	"rest_delay\000"
 15295      5F64656C 
 15295      617900
 15296              	.LASF159:
 15297 12ac 73745F66 		.ascii	"st_filter\000"
 15297      696C7465 
 15297      7200
 15298              	.LASF248:
 15299 12b6 76765F76 		.ascii	"vv_value\000"
 15299      616C7565 
 15299      00
 15300              	.LASF83:
 15301 12bf 6B5F645F 		.ascii	"k_d_c_dl\000"
 15301      635F646C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc1Caw1E.s 			page 340


 15301      00
 15302              	.LASF164:
 15303 12c8 64697265 		.ascii	"direction\000"
 15303      6374696F 
 15303      6E00
 15304              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
