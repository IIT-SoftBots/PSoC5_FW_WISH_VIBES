ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c ****       //===========================================     local variables definition
 136:..\src/interruptions.c **** 
 137:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 138:..\src/interruptions.c ****     
 139:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 140:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 141:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 142:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 143:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 144:..\src/interruptions.c ****     //-------------------------------------------------
 145:..\src/interruptions.c **** 
 146:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 147:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 147 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 148:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 148 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 149:..\src/interruptions.c **** 
 150:..\src/interruptions.c ****     //======================================================     receive routine
 151:..\src/interruptions.c ****     
 152:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 152 0
 161 000e DFE0     		b	.L8
 162              	.L28:
 153:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 154:..\src/interruptions.c **** 
 155:..\src/interruptions.c ****         // Get next char
 156:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 156 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 157:..\src/interruptions.c ****         
 158:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 158 0
 168 0018 744B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D780 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 DF000000 		.word	.L12+1
 179 0034 2D010000 		.word	.L13+1
 180 0038 97010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
 159:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 160:..\src/interruptions.c ****             case WAIT_START:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 7


 161:..\src/interruptions.c ****             
 162:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 162 0
 184 003c 6C4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6B4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 163:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 163 0
 189 0044 6A4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 694B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 164:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 164 0
 194 004c 684A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 165:..\src/interruptions.c ****                 
 166:..\src/interruptions.c ****                 // Check for header configuration package
 167:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 167 0
 198 0052 674B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 167 0 is_stmt 0 discriminator 1
 203 005a 654B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 168:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 168 0 is_stmt 1
 208 0062 634B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 169:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 169 0
 212 0068 614B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 170:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 170 0
 216 006e 604B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 171:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 171 0
 220 0074 5D4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 172:..\src/interruptions.c ****                 }
 173:..\src/interruptions.c ****                 else
 174:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
 225              		.loc 1 174 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 8


 226 007c 5C4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A580 		bne	.L8
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 175 0 discriminator 1
 231 0086 5A4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 174:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 174 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A080 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 176 0
 237 0090 574B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 175 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09B80 		bne	.L8
 177:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 177 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 178:..\src/interruptions.c ****                 break;
 246              		.loc 1 178 0
 247 00a0 96E0     		b	.L8
 248              	.L11:
 179:..\src/interruptions.c **** 
 180:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 181:..\src/interruptions.c ****             case  WAIT_ID:
 182:..\src/interruptions.c **** 
 183:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 184:..\src/interruptions.c **** #ifdef MASTER_FW
 185:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (master_mode && rx_data == c_mem.MS.
 249              		.loc 1 185 0
 250 00a2 544B     		ldr	r3, .L31+8
 251 00a4 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 252 00a6 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00a8 9A42     		cmp	r2, r3
 254 00aa 0CD0     		beq	.L17
 255              		.loc 1 185 0 is_stmt 0 discriminator 1
 256 00ac 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00ae 002B     		cmp	r3, #0
 258 00b0 09D0     		beq	.L17
 259              		.loc 1 185 0 discriminator 2
 260 00b2 514B     		ldr	r3, .L31+12
 261 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 262 00b6 002B     		cmp	r3, #0
 263 00b8 08D0     		beq	.L18
 264              		.loc 1 185 0 discriminator 3
 265 00ba 4E4B     		ldr	r3, .L31+8
 266 00bc 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 267 00c0 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c2 9A42     		cmp	r2, r3
 269 00c4 02D1     		bne	.L18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 9


 270              	.L17:
 186:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 186 0 is_stmt 1
 272 00c6 0023     		movs	r3, #0
 273 00c8 FB71     		strb	r3, [r7, #7]
 274 00ca 01E0     		b	.L19
 275              	.L18:
 187:..\src/interruptions.c ****                 else                //packet is for others
 188:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 188 0
 277 00cc 0123     		movs	r3, #1
 278 00ce FB71     		strb	r3, [r7, #7]
 279              	.L19:
 189:..\src/interruptions.c **** #else
 190:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 191:..\src/interruptions.c ****                     rx_data_type = FALSE;
 192:..\src/interruptions.c ****                 else                //packet is for others
 193:..\src/interruptions.c ****                     rx_data_type = TRUE;
 194:..\src/interruptions.c **** #endif                
 195:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 195 0
 281 00d0 4A4B     		ldr	r3, .L31+16
 282 00d2 0022     		movs	r2, #0
 283 00d4 1A70     		strb	r2, [r3]
 196:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 196 0
 285 00d6 454B     		ldr	r3, .L31
 286 00d8 0222     		movs	r2, #2
 287 00da 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 break;
 288              		.loc 1 197 0
 289 00dc 78E0     		b	.L8
 290              	.L12:
 198:..\src/interruptions.c **** 
 199:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 200:..\src/interruptions.c ****             case  WAIT_LENGTH:
 201:..\src/interruptions.c **** 
 202:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 202 0
 292 00de 474A     		ldr	r2, .L31+16
 293 00e0 7B79     		ldrb	r3, [r7, #5]
 294 00e2 1370     		strb	r3, [r2]
 203:..\src/interruptions.c ****                 // check validity of pack length
 204:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 204 0
 296 00e4 454B     		ldr	r3, .L31+16
 297 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00e8 012B     		cmp	r3, #1
 299 00ea 06D8     		bhi	.L20
 205:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 205 0
 301 00ec 434B     		ldr	r3, .L31+16
 302 00ee 0022     		movs	r2, #0
 303 00f0 1A70     		strb	r2, [r3]
 206:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 206 0
 305 00f2 3E4B     		ldr	r3, .L31
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 10


 306 00f4 0022     		movs	r2, #0
 307 00f6 1A70     		strb	r2, [r3]
 308 00f8 6AE0     		b	.L8
 309              	.L20:
 207:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 207 0
 311 00fa 404B     		ldr	r3, .L31+16
 312 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 00fe 802B     		cmp	r3, #128
 314 0100 06D9     		bls	.L22
 208:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 208 0
 316 0102 3E4B     		ldr	r3, .L31+16
 317 0104 0022     		movs	r2, #0
 318 0106 1A70     		strb	r2, [r3]
 209:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 209 0
 320 0108 384B     		ldr	r3, .L31
 321 010a 0022     		movs	r2, #0
 322 010c 1A70     		strb	r2, [r3]
 323 010e 5FE0     		b	.L8
 324              	.L22:
 210:..\src/interruptions.c ****                 } else {
 211:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 211 0
 326 0110 3B4B     		ldr	r3, .L31+20
 327 0112 0022     		movs	r2, #0
 328 0114 1A70     		strb	r2, [r3]
 212:..\src/interruptions.c ****                     
 213:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 213 0
 330 0116 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 0118 002B     		cmp	r3, #0
 332 011a 03D1     		bne	.L23
 214:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 214 0
 334 011c 334B     		ldr	r3, .L31
 335 011e 0322     		movs	r2, #3
 336 0120 1A70     		strb	r2, [r3]
 337 0122 55E0     		b	.L8
 338              	.L23:
 215:..\src/interruptions.c ****                     else
 216:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 216 0
 340 0124 314B     		ldr	r3, .L31
 341 0126 0422     		movs	r2, #4
 342 0128 1A70     		strb	r2, [r3]
 217:..\src/interruptions.c ****                 }
 218:..\src/interruptions.c ****                 break;
 343              		.loc 1 218 0
 344 012a 51E0     		b	.L8
 345              	.L13:
 219:..\src/interruptions.c **** 
 220:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 221:..\src/interruptions.c ****             case RECEIVE:
 222:..\src/interruptions.c **** 
 223:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 11


 346              		.loc 1 223 0
 347 012c 344B     		ldr	r3, .L31+20
 348 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0130 1946     		mov	r1, r3
 350 0132 344A     		ldr	r2, .L31+24
 351 0134 7B79     		ldrb	r3, [r7, #5]
 352 0136 5354     		strb	r3, [r2, r1]
 224:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 224 0
 354 0138 314B     		ldr	r3, .L31+20
 355 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 013c 0133     		adds	r3, r3, #1
 357 013e DAB2     		uxtb	r2, r3
 358 0140 2F4B     		ldr	r3, .L31+20
 359 0142 1A70     		strb	r2, [r3]
 225:..\src/interruptions.c ****                 
 226:..\src/interruptions.c ****                 // check end of transmission
 227:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 227 0
 361 0144 2E4B     		ldr	r3, .L31+20
 362 0146 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 0148 2C4B     		ldr	r3, .L31+16
 364 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 014c 9A42     		cmp	r2, r3
 366 014e 3FD3     		bcc	.L8
 228:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 229:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 229 0
 368 0150 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0152 002B     		cmp	r3, #0
 370 0154 12D1     		bne	.L25
 230:..\src/interruptions.c ****                         // copying data from buffer to global packet
 231:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 231 0
 372 0156 294B     		ldr	r3, .L31+16
 373 0158 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015a 1A46     		mov	r2, r3
 375 015c 2949     		ldr	r1, .L31+24
 376 015e 2A48     		ldr	r0, .L31+28
 377 0160 FFF7FEFF 		bl	memcpy
 232:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 232 0
 379 0164 254B     		ldr	r3, .L31+16
 380 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 0168 1AB2     		sxth	r2, r3
 382 016a 274B     		ldr	r3, .L31+28
 383 016c A3F88020 		strh	r2, [r3, #128]	@ movhi
 233:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 233 0
 385 0170 254B     		ldr	r3, .L31+28
 386 0172 0122     		movs	r2, #1
 387 0174 83F88420 		strb	r2, [r3, #132]
 234:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 234 0
 389 0178 FFF7FEFF 		bl	commProcess
 390              	.L25:
 235:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 12


 236:..\src/interruptions.c ****                     
 237:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 237 0
 392 017c 204B     		ldr	r3, .L31+20
 393 017e 0022     		movs	r2, #0
 394 0180 1A70     		strb	r2, [r3]
 238:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 238 0
 396 0182 1E4B     		ldr	r3, .L31+16
 397 0184 0022     		movs	r2, #0
 398 0186 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 239 0
 400 0188 184B     		ldr	r3, .L31
 401 018a 0022     		movs	r2, #0
 402 018c 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 240 0
 404 018e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0190 0133     		adds	r3, r3, #1
 406 0192 BB71     		strb	r3, [r7, #6]
 241:..\src/interruptions.c ****                 
 242:..\src/interruptions.c ****                 }
 243:..\src/interruptions.c ****                 break;
 407              		.loc 1 243 0
 408 0194 1CE0     		b	.L8
 409              	.L14:
 244:..\src/interruptions.c **** 
 245:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 246:..\src/interruptions.c ****             case UNLOAD:
 247:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 247 0
 411 0196 194B     		ldr	r3, .L31+16
 412 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019a 013B     		subs	r3, r3, #1
 414 019c DAB2     		uxtb	r2, r3
 415 019e 174B     		ldr	r3, .L31+16
 416 01a0 1A70     		strb	r2, [r3]
 417 01a2 164B     		ldr	r3, .L31+16
 418 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01a6 002B     		cmp	r3, #0
 420 01a8 11D1     		bne	.L30
 248:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 248 0
 422 01aa 154B     		ldr	r3, .L31+20
 423 01ac 0022     		movs	r2, #0
 424 01ae 1A70     		strb	r2, [r3]
 249:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 249 0
 426 01b0 124B     		ldr	r3, .L31+16
 427 01b2 0022     		movs	r2, #0
 428 01b4 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 250 0
 430 01b6 0120     		movs	r0, #1
 431 01b8 FFF7FEFF 		bl	RS485_CTS_Write
 251:..\src/interruptions.c ****                     RS485_CTS_Write(0);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 13


 432              		.loc 1 251 0
 433 01bc 0020     		movs	r0, #0
 434 01be FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 252 0
 436 01c2 0A4B     		ldr	r3, .L31
 437 01c4 0022     		movs	r2, #0
 438 01c6 1A70     		strb	r2, [r3]
 253:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 253 0
 440 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01ca 0133     		adds	r3, r3, #1
 442 01cc BB71     		strb	r3, [r7, #6]
 443              	.L30:
 254:..\src/interruptions.c ****                 }
 255:..\src/interruptions.c ****                 break;
 444              		.loc 1 255 0
 445 01ce 00BF     		nop
 446              	.L8:
 152:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 152 0
 448 01d0 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d4 0346     		mov	r3, r0
 450 01d6 002B     		cmp	r3, #0
 451 01d8 03D0     		beq	.L29
 152:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 152 0 is_stmt 0 discriminator 1
 453 01da BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01dc 632B     		cmp	r3, #99
 455 01de 7FF617AF 		bls	.L28
 456              	.L29:
 256:..\src/interruptions.c ****         }
 257:..\src/interruptions.c ****     }
 258:..\src/interruptions.c **** }
 457              		.loc 1 258 0 is_stmt 1
 458 01e2 00BF     		nop
 459 01e4 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01e6 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01e8 80BD     		pop	{r7, pc}
 465              	.L32:
 466 01ea 00BF     		.align	2
 467              	.L31:
 468 01ec 00000000 		.word	state.9774
 469 01f0 04000000 		.word	rx_queue.9778
 470 01f4 00000000 		.word	c_mem
 471 01f8 00000000 		.word	master_mode
 472 01fc 07000000 		.word	data_packet_length.9776
 473 0200 08000000 		.word	data_packet_index.9775
 474 0204 0C000000 		.word	data_packet_buffer.9777
 475 0208 00000000 		.word	g_rx
 476              		.cfi_endproc
 477              	.LFE66:
 478              		.size	interrupt_manager, .-interrupt_manager
 479              		.global	__aeabi_i2f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 14


 480              		.global	__aeabi_fdiv
 481              		.section	.text.function_scheduler,"ax",%progbits
 482              		.align	2
 483              		.global	function_scheduler
 484              		.thumb
 485              		.thumb_func
 486              		.type	function_scheduler, %function
 487              	function_scheduler:
 488              	.LFB67:
 259:..\src/interruptions.c **** //==============================================================================
 260:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 261:..\src/interruptions.c **** //==============================================================================
 262:..\src/interruptions.c **** // Call all the function with the right frequency
 263:..\src/interruptions.c **** //==============================================================================
 264:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 265:..\src/interruptions.c **** //==============================================================================
 266:..\src/interruptions.c **** 
 267:..\src/interruptions.c **** void function_scheduler(void) {
 489              		.loc 1 267 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0000 80B5     		push	{r7, lr}
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
 268:..\src/interruptions.c ****       
 269:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 499              		.loc 1 269 0
 500 0004 0020     		movs	r0, #0
 501 0006 FFF7FEFF 		bl	MY_TIMER_REG_Write
 270:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 502              		.loc 1 270 0
 503 000a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 504 000e 0346     		mov	r3, r0
 505 0010 1A46     		mov	r2, r3
 506 0012 694B     		ldr	r3, .L49
 507 0014 1A80     		strh	r2, [r3]	@ movhi
 271:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 272:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 508              		.loc 1 272 0
 509 0016 0120     		movs	r0, #1
 510 0018 FFF7FEFF 		bl	ADC_SOC_Write
 273:..\src/interruptions.c ****     flag_master = MASTER_MODE_FLAG_Read();
 511              		.loc 1 273 0
 512 001c FFF7FEFF 		bl	MASTER_MODE_FLAG_Read
 513 0020 0346     		mov	r3, r0
 514 0022 1A46     		mov	r2, r3
 515 0024 654B     		ldr	r3, .L49+4
 516 0026 1A60     		str	r2, [r3]
 274:..\src/interruptions.c **** 
 275:..\src/interruptions.c ****     // Check Interrupt 
 276:..\src/interruptions.c **** 
 277:..\src/interruptions.c ****     if (interrupt_flag){
 517              		.loc 1 277 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 15


 518 0028 654B     		ldr	r3, .L49+8
 519 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 520 002c 002B     		cmp	r3, #0
 521 002e 04D0     		beq	.L34
 278:..\src/interruptions.c ****         interrupt_flag = FALSE;
 522              		.loc 1 278 0
 523 0030 634B     		ldr	r3, .L49+8
 524 0032 0022     		movs	r2, #0
 525 0034 1A70     		strb	r2, [r3]
 279:..\src/interruptions.c ****         interrupt_manager();
 526              		.loc 1 279 0
 527 0036 FFF7FEFF 		bl	interrupt_manager
 528              	.L34:
 280:..\src/interruptions.c ****     }
 281:..\src/interruptions.c ****    
 282:..\src/interruptions.c ****     // if master_mode parameter is set to 1
 283:..\src/interruptions.c ****     if (g_mem.MS.master_mode_active){  
 529              		.loc 1 283 0
 530 003a 624B     		ldr	r3, .L49+12
 531 003c 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 532 0040 002B     		cmp	r3, #0
 533 0042 0FD0     		beq	.L35
 284:..\src/interruptions.c ****         
 285:..\src/interruptions.c ****         // Check if voltage on pin MASTER MODE VOLTAGE, set by a physical switch, is HIGH or LOW. 
 286:..\src/interruptions.c ****         // This is a way to force exit from master_mode during execution, since USB commands from P
 287:..\src/interruptions.c ****         // are hampered by the communications between the two boards (slave and master)
 288:..\src/interruptions.c ****         
 289:..\src/interruptions.c ****         if (!flag_master)       // if voltage is LOW, exit master mode
 534              		.loc 1 289 0
 535 0044 5D4B     		ldr	r3, .L49+4
 536 0046 1B68     		ldr	r3, [r3]
 537 0048 002B     		cmp	r3, #0
 538 004a 03D1     		bne	.L36
 290:..\src/interruptions.c ****             master_mode = 0;
 539              		.loc 1 290 0
 540 004c 5E4B     		ldr	r3, .L49+16
 541 004e 0022     		movs	r2, #0
 542 0050 1A70     		strb	r2, [r3]
 543 0052 0AE0     		b	.L38
 544              	.L36:
 291:..\src/interruptions.c ****         
 292:..\src/interruptions.c ****         else if (flag_master)  // if voltage is HIGH, enter master mode
 545              		.loc 1 292 0
 546 0054 594B     		ldr	r3, .L49+4
 547 0056 1B68     		ldr	r3, [r3]
 548 0058 002B     		cmp	r3, #0
 549 005a 06D0     		beq	.L38
 293:..\src/interruptions.c ****             master_mode = 1;
 550              		.loc 1 293 0
 551 005c 5A4B     		ldr	r3, .L49+16
 552 005e 0122     		movs	r2, #1
 553 0060 1A70     		strb	r2, [r3]
 554 0062 02E0     		b	.L38
 555              	.L35:
 294:..\src/interruptions.c ****     }
 295:..\src/interruptions.c ****             
 296:..\src/interruptions.c ****     else{
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 16


 297:..\src/interruptions.c ****         master_mode = 0;
 556              		.loc 1 297 0
 557 0064 584B     		ldr	r3, .L49+16
 558 0066 0022     		movs	r2, #0
 559 0068 1A70     		strb	r2, [r3]
 560              	.L38:
 298:..\src/interruptions.c ****     }
 299:..\src/interruptions.c ****                     
 300:..\src/interruptions.c ****     if (master_mode){
 561              		.loc 1 300 0
 562 006a 574B     		ldr	r3, .L49+16
 563 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 564 006e 002B     		cmp	r3, #0
 565 0070 3BD0     		beq	.L39
 301:..\src/interruptions.c ****         
 302:..\src/interruptions.c ****         LED_CONTROL_Write(RED);     
 566              		.loc 1 302 0
 567 0072 0220     		movs	r0, #2
 568 0074 FFF7FEFF 		bl	LED_CONTROL_Write
 303:..\src/interruptions.c ****         
 304:..\src/interruptions.c ****         //-------------------------------------------------------------- Air Chamber and Vibrotacti
 305:..\src/interruptions.c ****         if (g_mem.FB.vibrotactile_feedback_active && g_mem.FB.airchamber_feedback_active){         
 569              		.loc 1 305 0
 570 0078 524B     		ldr	r3, .L49+12
 571 007a 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 572 007e 002B     		cmp	r3, #0
 573 0080 09D0     		beq	.L40
 574              		.loc 1 305 0 is_stmt 0 discriminator 1
 575 0082 504B     		ldr	r3, .L49+12
 576 0084 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 577 0088 002B     		cmp	r3, #0
 578 008a 04D0     		beq	.L40
 306:..\src/interruptions.c ****             air_chambers_control();
 579              		.loc 1 306 0 is_stmt 1
 580 008c FFF7FEFF 		bl	air_chambers_control
 307:..\src/interruptions.c ****             vibrotactile_control();
 581              		.loc 1 307 0
 582 0090 FFF7FEFF 		bl	vibrotactile_control
 583 0094 0EE0     		b	.L41
 584              	.L40:
 308:..\src/interruptions.c ****         }
 309:..\src/interruptions.c ****         
 310:..\src/interruptions.c ****         //-------------------------------------------------------------- Air Chamber control
 311:..\src/interruptions.c ****         else if (g_mem.FB.airchamber_feedback_active){
 585              		.loc 1 311 0
 586 0096 4B4B     		ldr	r3, .L49+12
 587 0098 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 588 009c 002B     		cmp	r3, #0
 589 009e 02D0     		beq	.L42
 312:..\src/interruptions.c ****             air_chambers_control();
 590              		.loc 1 312 0
 591 00a0 FFF7FEFF 		bl	air_chambers_control
 592 00a4 06E0     		b	.L41
 593              	.L42:
 313:..\src/interruptions.c ****             
 314:..\src/interruptions.c ****         }
 315:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 17


 316:..\src/interruptions.c ****         //-------------------------------------------------------------- Vibrotactile control
 317:..\src/interruptions.c ****         else if (g_mem.FB.vibrotactile_feedback_active){
 594              		.loc 1 317 0
 595 00a6 474B     		ldr	r3, .L49+12
 596 00a8 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 597 00ac 002B     		cmp	r3, #0
 598 00ae 01D0     		beq	.L41
 318:..\src/interruptions.c ****             vibrotactile_control();
 599              		.loc 1 318 0
 600 00b0 FFF7FEFF 		bl	vibrotactile_control
 601              	.L41:
 319:..\src/interruptions.c ****         }
 320:..\src/interruptions.c ****         
 321:..\src/interruptions.c ****         if (interrupt_flag){
 602              		.loc 1 321 0
 603 00b4 424B     		ldr	r3, .L49+8
 604 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 605 00b8 002B     		cmp	r3, #0
 606 00ba 04D0     		beq	.L43
 322:..\src/interruptions.c ****             interrupt_flag = FALSE;
 607              		.loc 1 322 0
 608 00bc 404B     		ldr	r3, .L49+8
 609 00be 0022     		movs	r2, #0
 610 00c0 1A70     		strb	r2, [r3]
 323:..\src/interruptions.c ****             interrupt_manager();
 611              		.loc 1 323 0
 612 00c2 FFF7FEFF 		bl	interrupt_manager
 613              	.L43:
 324:..\src/interruptions.c ****         }
 325:..\src/interruptions.c ****             
 326:..\src/interruptions.c ****         compute_SH_reference(); // Compute reference for the SH starting from EMG values
 614              		.loc 1 326 0
 615 00c6 FFF7FEFF 		bl	compute_SH_reference
 327:..\src/interruptions.c ****             
 328:..\src/interruptions.c ****         drive_slave(c_mem.MS.slave_ID); // Send reference to the SH calling cmd_set_inputs
 616              		.loc 1 328 0
 617 00ca 404B     		ldr	r3, .L49+20
 618 00cc 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 619 00d0 1846     		mov	r0, r3
 620 00d2 FFF7FEFF 		bl	drive_slave
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         if (interrupt_flag){
 621              		.loc 1 330 0
 622 00d6 3A4B     		ldr	r3, .L49+8
 623 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 624 00da 002B     		cmp	r3, #0
 625 00dc 11D0     		beq	.L45
 331:..\src/interruptions.c ****             interrupt_flag = FALSE;
 626              		.loc 1 331 0
 627 00de 384B     		ldr	r3, .L49+8
 628 00e0 0022     		movs	r2, #0
 629 00e2 1A70     		strb	r2, [r3]
 332:..\src/interruptions.c ****             interrupt_manager();
 630              		.loc 1 332 0
 631 00e4 FFF7FEFF 		bl	interrupt_manager
 632 00e8 0BE0     		b	.L45
 633              	.L39:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 18


 333:..\src/interruptions.c ****         }
 334:..\src/interruptions.c ****     }
 335:..\src/interruptions.c ****             
 336:..\src/interruptions.c ****            
 337:..\src/interruptions.c ****     else {
 338:..\src/interruptions.c ****         
 339:..\src/interruptions.c ****         LED_CONTROL_Write(GREEN);     
 634              		.loc 1 339 0
 635 00ea 0120     		movs	r0, #1
 636 00ec FFF7FEFF 		bl	LED_CONTROL_Write
 340:..\src/interruptions.c ****             
 341:..\src/interruptions.c ****         // Check Interrupt 
 342:..\src/interruptions.c ****         if (interrupt_flag){
 637              		.loc 1 342 0
 638 00f0 334B     		ldr	r3, .L49+8
 639 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 00f4 002B     		cmp	r3, #0
 641 00f6 04D0     		beq	.L45
 343:..\src/interruptions.c ****             interrupt_flag = FALSE;
 642              		.loc 1 343 0
 643 00f8 314B     		ldr	r3, .L49+8
 644 00fa 0022     		movs	r2, #0
 645 00fc 1A70     		strb	r2, [r3]
 344:..\src/interruptions.c ****             interrupt_manager();
 646              		.loc 1 344 0
 647 00fe FFF7FEFF 		bl	interrupt_manager
 648              	.L45:
 345:..\src/interruptions.c ****         } 
 346:..\src/interruptions.c ****     }
 347:..\src/interruptions.c ****     
 348:..\src/interruptions.c ****     pump_control();  // Compute references and drive air pump
 649              		.loc 1 348 0
 650 0102 FFF7FEFF 		bl	pump_control
 349:..\src/interruptions.c ****     VT_control();  // Compute references and drive air pump
 651              		.loc 1 349 0
 652 0106 FFF7FEFF 		bl	VT_control
 350:..\src/interruptions.c **** 
 351:..\src/interruptions.c ****     if (interrupt_flag){
 653              		.loc 1 351 0
 654 010a 2D4B     		ldr	r3, .L49+8
 655 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 656 010e 002B     		cmp	r3, #0
 657 0110 04D0     		beq	.L46
 352:..\src/interruptions.c ****         interrupt_flag = FALSE;
 658              		.loc 1 352 0
 659 0112 2B4B     		ldr	r3, .L49+8
 660 0114 0022     		movs	r2, #0
 661 0116 1A70     		strb	r2, [r3]
 353:..\src/interruptions.c ****         interrupt_manager();
 662              		.loc 1 353 0
 663 0118 FFF7FEFF 		bl	interrupt_manager
 664              	.L46:
 354:..\src/interruptions.c ****     }
 355:..\src/interruptions.c ****                
 356:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 357:..\src/interruptions.c **** 
 358:..\src/interruptions.c ****     analog_read_end();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 19


 665              		.loc 1 358 0
 666 011c FFF7FEFF 		bl	analog_read_end
 359:..\src/interruptions.c **** 
 360:..\src/interruptions.c ****     if (interrupt_flag){
 667              		.loc 1 360 0
 668 0120 274B     		ldr	r3, .L49+8
 669 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 0124 002B     		cmp	r3, #0
 671 0126 04D0     		beq	.L47
 361:..\src/interruptions.c ****         interrupt_flag = FALSE;
 672              		.loc 1 361 0
 673 0128 254B     		ldr	r3, .L49+8
 674 012a 0022     		movs	r2, #0
 675 012c 1A70     		strb	r2, [r3]
 362:..\src/interruptions.c ****         interrupt_manager();
 676              		.loc 1 362 0
 677 012e FFF7FEFF 		bl	interrupt_manager
 678              	.L47:
 363:..\src/interruptions.c ****     }  
 364:..\src/interruptions.c ****    
 365:..\src/interruptions.c ****     //---------------------------------- Update States
 366:..\src/interruptions.c **** 
 367:..\src/interruptions.c ****     // Load k-1 state
 368:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 679              		.loc 1 368 0
 680 0132 274B     		ldr	r3, .L49+24
 681 0134 274A     		ldr	r2, .L49+28
 682 0136 07CA     		ldmia	r2, {r0, r1, r2}
 683 0138 83E80700 		stmia	r3, {r0, r1, r2}
 369:..\src/interruptions.c ****     memcpy( &SH_refOld, &SH_ref, sizeof(SH_ref) );
 684              		.loc 1 369 0
 685 013c 264B     		ldr	r3, .L49+32
 686 013e 1B68     		ldr	r3, [r3]
 687 0140 264A     		ldr	r2, .L49+36
 688 0142 1360     		str	r3, [r2]
 370:..\src/interruptions.c ****     memcpy( &VT_refOld, &VT_ref, sizeof(VT_ref) );
 689              		.loc 1 370 0
 690 0144 264A     		ldr	r2, .L49+40
 691 0146 274B     		ldr	r3, .L49+44
 692 0148 1B88     		ldrh	r3, [r3]	@ unaligned
 693 014a 1380     		strh	r3, [r2]	@ unaligned
 371:..\src/interruptions.c ****     memcpy( &Pump_refOld, &Pump_ref, sizeof(Pump_ref) );
 694              		.loc 1 371 0
 695 014c 264B     		ldr	r3, .L49+48
 696 014e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 697 0150 264B     		ldr	r3, .L49+52
 698 0152 1A70     		strb	r2, [r3]
 372:..\src/interruptions.c ****     
 373:..\src/interruptions.c ****     // Load k+1 state        
 374:..\src/interruptions.c ****     memcpy( &SH_ref, &SH_refNew, sizeof(SH_ref) );   
 699              		.loc 1 374 0
 700 0154 264B     		ldr	r3, .L49+56
 701 0156 1B68     		ldr	r3, [r3]
 702 0158 1F4A     		ldr	r2, .L49+32
 703 015a 1360     		str	r3, [r2]
 375:..\src/interruptions.c ****     memcpy( &VT_ref, &VT_refNew, sizeof(VT_ref) );
 704              		.loc 1 375 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 20


 705 015c 214A     		ldr	r2, .L49+44
 706 015e 254B     		ldr	r3, .L49+60
 707 0160 1B88     		ldrh	r3, [r3]	@ unaligned
 708 0162 1380     		strh	r3, [r2]	@ unaligned
 376:..\src/interruptions.c ****     memcpy( &Pump_ref, &Pump_refNew, sizeof(Pump_ref) );
 709              		.loc 1 376 0
 710 0164 244B     		ldr	r3, .L49+64
 711 0166 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 712 0168 1F4B     		ldr	r3, .L49+48
 713 016a 1A70     		strb	r2, [r3]
 377:..\src/interruptions.c ****     
 378:..\src/interruptions.c ****     if (interrupt_flag){
 714              		.loc 1 378 0
 715 016c 144B     		ldr	r3, .L49+8
 716 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 717 0170 002B     		cmp	r3, #0
 718 0172 04D0     		beq	.L48
 379:..\src/interruptions.c ****         interrupt_flag = FALSE;
 719              		.loc 1 379 0
 720 0174 124B     		ldr	r3, .L49+8
 721 0176 0022     		movs	r2, #0
 722 0178 1A70     		strb	r2, [r3]
 380:..\src/interruptions.c ****         interrupt_manager();
 723              		.loc 1 380 0
 724 017a FFF7FEFF 		bl	interrupt_manager
 725              	.L48:
 381:..\src/interruptions.c ****     }
 382:..\src/interruptions.c ****     
 383:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 726              		.loc 1 383 0
 727 017e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 728 0182 0346     		mov	r3, r0
 729 0184 1A46     		mov	r2, r3
 730 0186 1D4B     		ldr	r3, .L49+68
 731 0188 1A80     		strh	r2, [r3]	@ movhi
 384:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/48.0);
 732              		.loc 1 384 0
 733 018a 0B4B     		ldr	r3, .L49
 734 018c 1B88     		ldrh	r3, [r3]
 735 018e 1A46     		mov	r2, r3
 736 0190 1A4B     		ldr	r3, .L49+68
 737 0192 1B88     		ldrh	r3, [r3]
 738 0194 D31A     		subs	r3, r2, r3
 739 0196 1846     		mov	r0, r3
 740 0198 FFF7FEFF 		bl	__aeabi_i2f
 741 019c 0346     		mov	r3, r0
 742 019e 1849     		ldr	r1, .L49+72
 743 01a0 1846     		mov	r0, r3
 744 01a2 FFF7FEFF 		bl	__aeabi_fdiv
 745 01a6 0346     		mov	r3, r0
 746 01a8 1A46     		mov	r2, r3
 747 01aa 164B     		ldr	r3, .L49+76
 748 01ac 1A60     		str	r2, [r3]	@ float
 385:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 749              		.loc 1 385 0
 750 01ae 0120     		movs	r0, #1
 751 01b0 FFF7FEFF 		bl	MY_TIMER_REG_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 21


 386:..\src/interruptions.c **** 
 387:..\src/interruptions.c **** }
 752              		.loc 1 387 0
 753 01b4 00BF     		nop
 754 01b6 80BD     		pop	{r7, pc}
 755              	.L50:
 756              		.align	2
 757              	.L49:
 758 01b8 00000000 		.word	timer_value0
 759 01bc 00000000 		.word	flag_master
 760 01c0 00000000 		.word	interrupt_flag
 761 01c4 00000000 		.word	g_mem
 762 01c8 00000000 		.word	master_mode
 763 01cc 00000000 		.word	c_mem
 764 01d0 00000000 		.word	g_adc_measOld
 765 01d4 00000000 		.word	g_adc_meas
 766 01d8 00000000 		.word	SH_ref
 767 01dc 00000000 		.word	SH_refOld
 768 01e0 00000000 		.word	VT_refOld
 769 01e4 00000000 		.word	VT_ref
 770 01e8 00000000 		.word	Pump_ref
 771 01ec 00000000 		.word	Pump_refOld
 772 01f0 00000000 		.word	SH_refNew
 773 01f4 00000000 		.word	VT_refNew
 774 01f8 00000000 		.word	Pump_refNew
 775 01fc 00000000 		.word	timer_value
 776 0200 00004042 		.word	1111490560
 777 0204 00000000 		.word	cycle_time
 778              		.cfi_endproc
 779              	.LFE67:
 780              		.size	function_scheduler, .-function_scheduler
 781              		.section	.text.compute_SH_reference,"ax",%progbits
 782              		.align	2
 783              		.global	compute_SH_reference
 784              		.thumb
 785              		.thumb_func
 786              		.type	compute_SH_reference, %function
 787              	compute_SH_reference:
 788              	.LFB68:
 388:..\src/interruptions.c **** 
 389:..\src/interruptions.c **** //==============================================================================
 390:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 391:..\src/interruptions.c **** //==============================================================================
 392:..\src/interruptions.c **** 
 393:..\src/interruptions.c **** void compute_SH_reference() {
 789              		.loc 1 393 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0000 80B4     		push	{r7}
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 0002 85B0     		sub	sp, sp, #20
 798              		.cfi_def_cfa_offset 24
 799 0004 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 22


 394:..\src/interruptions.c ****     
 395:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 396:..\src/interruptions.c ****     struct st_slave* SH = &c_mem.SH_config;      // SoftHand default motor
 801              		.loc 1 396 0
 802 0006 A24B     		ldr	r3, .L95
 803 0008 FB60     		str	r3, [r7, #12]
 397:..\src/interruptions.c ****     
 398:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE // 1 EMG 1 // 2 EMG 2                                
 399:..\src/interruptions.c ****                                                                                                    
 400:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 804              		.loc 1 400 0
 805 000a A24B     		ldr	r3, .L95+4
 806 000c 1B68     		ldr	r3, [r3]
 807 000e A24A     		ldr	r2, .L95+8
 808 0010 128E     		ldrh	r2, [r2, #48]
 809 0012 9B1A     		subs	r3, r3, r2
 810 0014 BB60     		str	r3, [r7, #8]
 401:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 811              		.loc 1 401 0
 812 0016 9F4B     		ldr	r3, .L95+4
 813 0018 5B68     		ldr	r3, [r3, #4]
 814 001a 9F4A     		ldr	r2, .L95+8
 815 001c 528E     		ldrh	r2, [r2, #50]
 816 001e 9B1A     		subs	r3, r3, r2
 817 0020 7B60     		str	r3, [r7, #4]
 402:..\src/interruptions.c ****     
 403:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 404:..\src/interruptions.c ****     switch(SH->input_mode) {
 818              		.loc 1 404 0
 819 0022 FB68     		ldr	r3, [r7, #12]
 820 0024 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 821 0026 023B     		subs	r3, r3, #2
 822 0028 052B     		cmp	r3, #5
 823 002a 00F24381 		bhi	.L88
 824 002e 01A2     		adr	r2, .L54
 825 0030 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 826              		.p2align 2
 827              	.L54:
 828 0034 4D000000 		.word	.L53+1
 829 0038 A9000000 		.word	.L55+1
 830 003c 0D010000 		.word	.L56+1
 831 0040 C3010000 		.word	.L57+1
 832 0044 B5020000 		.word	.L88+1
 833 0048 77000000 		.word	.L58+1
 834              		.p2align 1
 835              	.L53:
 405:..\src/interruptions.c ****             
 406:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 407:..\src/interruptions.c ****             if (err_emg_1 > 0)
 836              		.loc 1 407 0
 837 004c BB68     		ldr	r3, [r7, #8]
 838 004e 002B     		cmp	r3, #0
 839 0050 0DDD     		ble	.L59
 408:..\src/interruptions.c ****                 SH_ref = (err_emg_1 * g_mem.SH_config.pos_lim_sup) / (1024 - c_mem.emg.emg_threshol
 840              		.loc 1 408 0
 841 0052 924B     		ldr	r3, .L95+12
 842 0054 5B6A     		ldr	r3, [r3, #36]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 23


 843 0056 BA68     		ldr	r2, [r7, #8]
 844 0058 02FB03F2 		mul	r2, r2, r3
 845 005c 8E4B     		ldr	r3, .L95+8
 846 005e 1B8E     		ldrh	r3, [r3, #48]
 847 0060 C3F58063 		rsb	r3, r3, #1024
 848 0064 92FBF3F3 		sdiv	r3, r2, r3
 849 0068 8D4A     		ldr	r2, .L95+16
 850 006a 1360     		str	r3, [r2]
 409:..\src/interruptions.c ****             else
 410:..\src/interruptions.c ****                 SH_ref = 0;
 411:..\src/interruptions.c ****             break;
 851              		.loc 1 411 0
 852 006c 25E1     		b	.L61
 853              	.L59:
 410:..\src/interruptions.c ****             break;
 854              		.loc 1 410 0
 855 006e 8C4B     		ldr	r3, .L95+16
 856 0070 0022     		movs	r2, #0
 857 0072 1A60     		str	r2, [r3]
 858              		.loc 1 411 0
 859 0074 21E1     		b	.L61
 860              	.L58:
 412:..\src/interruptions.c ****         
 413:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 414:..\src/interruptions.c ****             if (err_emg_1 > 0)
 861              		.loc 1 414 0
 862 0076 BB68     		ldr	r3, [r7, #8]
 863 0078 002B     		cmp	r3, #0
 864 007a 10DD     		ble	.L62
 415:..\src/interruptions.c ****                 SH_ref = g_mem.SH_config.pos_lim_sup - (err_emg_1 * g_mem.SH_config.pos_lim_sup) / 
 865              		.loc 1 415 0
 866 007c 874B     		ldr	r3, .L95+12
 867 007e 5A6A     		ldr	r2, [r3, #36]
 868 0080 864B     		ldr	r3, .L95+12
 869 0082 5B6A     		ldr	r3, [r3, #36]
 870 0084 B968     		ldr	r1, [r7, #8]
 871 0086 01FB03F1 		mul	r1, r1, r3
 872 008a 834B     		ldr	r3, .L95+8
 873 008c 1B8E     		ldrh	r3, [r3, #48]
 874 008e C3F58063 		rsb	r3, r3, #1024
 875 0092 91FBF3F3 		sdiv	r3, r1, r3
 876 0096 D31A     		subs	r3, r2, r3
 877 0098 814A     		ldr	r2, .L95+16
 878 009a 1360     		str	r3, [r2]
 416:..\src/interruptions.c ****             else
 417:..\src/interruptions.c ****                 SH_ref = g_mem.SH_config.pos_lim_sup;
 418:..\src/interruptions.c ****             break;
 879              		.loc 1 418 0
 880 009c 0DE1     		b	.L61
 881              	.L62:
 417:..\src/interruptions.c ****             break;
 882              		.loc 1 417 0
 883 009e 7F4B     		ldr	r3, .L95+12
 884 00a0 5B6A     		ldr	r3, [r3, #36]
 885 00a2 7F4A     		ldr	r2, .L95+16
 886 00a4 1360     		str	r3, [r2]
 887              		.loc 1 418 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 24


 888 00a6 08E1     		b	.L61
 889              	.L55:
 419:..\src/interruptions.c **** 
 420:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 421:..\src/interruptions.c ****             SH_ref = SH_refOld;
 890              		.loc 1 421 0
 891 00a8 7E4B     		ldr	r3, .L95+20
 892 00aa 1B68     		ldr	r3, [r3]
 893 00ac 7C4A     		ldr	r2, .L95+16
 894 00ae 1360     		str	r3, [r2]
 422:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 895              		.loc 1 422 0
 896 00b0 BB68     		ldr	r3, [r7, #8]
 897 00b2 002B     		cmp	r3, #0
 898 00b4 12DD     		ble	.L64
 423:..\src/interruptions.c ****                 SH_ref = SH_refOld + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / (1024 - c_mem.
 899              		.loc 1 423 0
 900 00b6 794B     		ldr	r3, .L95+12
 901 00b8 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 902 00bc 1A46     		mov	r2, r3
 903 00be BB68     		ldr	r3, [r7, #8]
 904 00c0 03FB02F3 		mul	r3, r3, r2
 905 00c4 5A00     		lsls	r2, r3, #1
 906 00c6 744B     		ldr	r3, .L95+8
 907 00c8 1B8E     		ldrh	r3, [r3, #48]
 908 00ca C3F58063 		rsb	r3, r3, #1024
 909 00ce 92FBF3F2 		sdiv	r2, r2, r3
 910 00d2 744B     		ldr	r3, .L95+20
 911 00d4 1B68     		ldr	r3, [r3]
 912 00d6 1344     		add	r3, r3, r2
 913 00d8 714A     		ldr	r2, .L95+16
 914 00da 1360     		str	r3, [r2]
 915              	.L64:
 424:..\src/interruptions.c ****             }
 425:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 916              		.loc 1 425 0
 917 00dc 7B68     		ldr	r3, [r7, #4]
 918 00de 002B     		cmp	r3, #0
 919 00e0 40F3EA80 		ble	.L89
 426:..\src/interruptions.c ****                 SH_ref = SH_refOld - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / (1024 - c_mem.
 920              		.loc 1 426 0
 921 00e4 6F4B     		ldr	r3, .L95+20
 922 00e6 1A68     		ldr	r2, [r3]
 923 00e8 6C4B     		ldr	r3, .L95+12
 924 00ea 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 925 00ee 1946     		mov	r1, r3
 926 00f0 7B68     		ldr	r3, [r7, #4]
 927 00f2 03FB01F3 		mul	r3, r3, r1
 928 00f6 5900     		lsls	r1, r3, #1
 929 00f8 674B     		ldr	r3, .L95+8
 930 00fa 5B8E     		ldrh	r3, [r3, #50]
 931 00fc C3F58063 		rsb	r3, r3, #1024
 932 0100 91FBF3F3 		sdiv	r3, r1, r3
 933 0104 D31A     		subs	r3, r2, r3
 934 0106 664A     		ldr	r2, .L95+16
 935 0108 1360     		str	r3, [r2]
 427:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 25


 428:..\src/interruptions.c ****             break;
 936              		.loc 1 428 0
 937 010a D5E0     		b	.L89
 938              	.L56:
 429:..\src/interruptions.c **** 
 430:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 431:..\src/interruptions.c ****             SH_ref= SH_refOld;
 939              		.loc 1 431 0
 940 010c 654B     		ldr	r3, .L95+20
 941 010e 1B68     		ldr	r3, [r3]
 942 0110 634A     		ldr	r2, .L95+16
 943 0112 1360     		str	r3, [r2]
 432:..\src/interruptions.c ****             
 433:..\src/interruptions.c ****                 switch (current_emg) {
 944              		.loc 1 433 0
 945 0114 644B     		ldr	r3, .L95+24
 946 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 947 0118 012B     		cmp	r3, #1
 948 011a 1AD0     		beq	.L67
 949 011c 022B     		cmp	r3, #2
 950 011e 33D0     		beq	.L68
 951 0120 002B     		cmp	r3, #0
 952 0122 00D0     		beq	.L69
 434:..\src/interruptions.c ****                     case 0:
 435:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 436:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 437:..\src/interruptions.c ****                             current_emg= 1;
 438:..\src/interruptions.c ****                             break;
 439:..\src/interruptions.c ****                         }
 440:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 441:..\src/interruptions.c ****                             current_emg = 2;
 442:..\src/interruptions.c ****                             break;
 443:..\src/interruptions.c ****                         }
 444:..\src/interruptions.c ****                         break;
 445:..\src/interruptions.c **** 
 446:..\src/interruptions.c ****                     case 1:
 447:..\src/interruptions.c ****                         // EMG 1 is first
 448:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 449:..\src/interruptions.c ****                             current_emg = 0;
 450:..\src/interruptions.c ****                             break;
 451:..\src/interruptions.c ****                         }
 452:..\src/interruptions.c ****                        SH_ref= SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_me
 453:..\src/interruptions.c ****                         break;
 454:..\src/interruptions.c **** 
 455:..\src/interruptions.c ****                     case 2:
 456:..\src/interruptions.c ****                         // EMG 2 is first
 457:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 458:..\src/interruptions.c ****                             current_emg = 0;
 459:..\src/interruptions.c ****                             break;
 460:..\src/interruptions.c ****                         }
 461:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024 - c_
 462:..\src/interruptions.c ****                         break;
 463:..\src/interruptions.c **** 
 464:..\src/interruptions.c ****                     default:
 465:..\src/interruptions.c ****                         break;
 953              		.loc 1 465 0
 954 0124 4CE0     		b	.L71
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 26


 955              	.L69:
 436:..\src/interruptions.c ****                             current_emg= 1;
 956              		.loc 1 436 0
 957 0126 BB68     		ldr	r3, [r7, #8]
 958 0128 002B     		cmp	r3, #0
 959 012a 07DD     		ble	.L70
 436:..\src/interruptions.c ****                             current_emg= 1;
 960              		.loc 1 436 0 is_stmt 0 discriminator 1
 961 012c BA68     		ldr	r2, [r7, #8]
 962 012e 7B68     		ldr	r3, [r7, #4]
 963 0130 9A42     		cmp	r2, r3
 964 0132 03DD     		ble	.L70
 437:..\src/interruptions.c ****                             break;
 965              		.loc 1 437 0 is_stmt 1
 966 0134 5C4B     		ldr	r3, .L95+24
 967 0136 0122     		movs	r2, #1
 968 0138 1A70     		strb	r2, [r3]
 438:..\src/interruptions.c ****                         }
 969              		.loc 1 438 0
 970 013a 41E0     		b	.L71
 971              	.L70:
 440:..\src/interruptions.c ****                             current_emg = 2;
 972              		.loc 1 440 0
 973 013c 7B68     		ldr	r3, [r7, #4]
 974 013e 002B     		cmp	r3, #0
 975 0140 3DDD     		ble	.L90
 440:..\src/interruptions.c ****                             current_emg = 2;
 976              		.loc 1 440 0 is_stmt 0 discriminator 1
 977 0142 7A68     		ldr	r2, [r7, #4]
 978 0144 BB68     		ldr	r3, [r7, #8]
 979 0146 9A42     		cmp	r2, r3
 980 0148 39DD     		ble	.L90
 441:..\src/interruptions.c ****                             break;
 981              		.loc 1 441 0 is_stmt 1
 982 014a 574B     		ldr	r3, .L95+24
 983 014c 0222     		movs	r2, #2
 984 014e 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****                         }
 985              		.loc 1 442 0
 986 0150 36E0     		b	.L71
 987              	.L67:
 448:..\src/interruptions.c ****                             current_emg = 0;
 988              		.loc 1 448 0
 989 0152 BB68     		ldr	r3, [r7, #8]
 990 0154 002B     		cmp	r3, #0
 991 0156 03DA     		bge	.L73
 449:..\src/interruptions.c ****                             break;
 992              		.loc 1 449 0
 993 0158 534B     		ldr	r3, .L95+24
 994 015a 0022     		movs	r2, #0
 995 015c 1A70     		strb	r2, [r3]
 450:..\src/interruptions.c ****                         }
 996              		.loc 1 450 0
 997 015e 2FE0     		b	.L71
 998              	.L73:
 452:..\src/interruptions.c ****                         break;
 999              		.loc 1 452 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 27


 1000 0160 4E4B     		ldr	r3, .L95+12
 1001 0162 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1002 0166 1A46     		mov	r2, r3
 1003 0168 BB68     		ldr	r3, [r7, #8]
 1004 016a 03FB02F3 		mul	r3, r3, r2
 1005 016e 9A00     		lsls	r2, r3, #2
 1006 0170 494B     		ldr	r3, .L95+8
 1007 0172 1B8E     		ldrh	r3, [r3, #48]
 1008 0174 C3F58063 		rsb	r3, r3, #1024
 1009 0178 92FBF3F2 		sdiv	r2, r2, r3
 1010 017c 494B     		ldr	r3, .L95+20
 1011 017e 1B68     		ldr	r3, [r3]
 1012 0180 1344     		add	r3, r3, r2
 1013 0182 474A     		ldr	r2, .L95+16
 1014 0184 1360     		str	r3, [r2]
 453:..\src/interruptions.c **** 
 1015              		.loc 1 453 0
 1016 0186 1BE0     		b	.L71
 1017              	.L68:
 457:..\src/interruptions.c ****                             current_emg = 0;
 1018              		.loc 1 457 0
 1019 0188 7B68     		ldr	r3, [r7, #4]
 1020 018a 002B     		cmp	r3, #0
 1021 018c 03DA     		bge	.L74
 458:..\src/interruptions.c ****                             break;
 1022              		.loc 1 458 0
 1023 018e 464B     		ldr	r3, .L95+24
 1024 0190 0022     		movs	r2, #0
 1025 0192 1A70     		strb	r2, [r3]
 459:..\src/interruptions.c ****                         }
 1026              		.loc 1 459 0
 1027 0194 14E0     		b	.L71
 1028              	.L74:
 461:..\src/interruptions.c ****                         break;
 1029              		.loc 1 461 0
 1030 0196 434B     		ldr	r3, .L95+20
 1031 0198 1A68     		ldr	r2, [r3]
 1032 019a 404B     		ldr	r3, .L95+12
 1033 019c 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1034 01a0 1946     		mov	r1, r3
 1035 01a2 7B68     		ldr	r3, [r7, #4]
 1036 01a4 03FB01F3 		mul	r3, r3, r1
 1037 01a8 9900     		lsls	r1, r3, #2
 1038 01aa 3B4B     		ldr	r3, .L95+8
 1039 01ac 5B8E     		ldrh	r3, [r3, #50]
 1040 01ae C3F58063 		rsb	r3, r3, #1024
 1041 01b2 91FBF3F3 		sdiv	r3, r1, r3
 1042 01b6 D31A     		subs	r3, r2, r3
 1043 01b8 394A     		ldr	r2, .L95+16
 1044 01ba 1360     		str	r3, [r2]
 462:..\src/interruptions.c **** 
 1045              		.loc 1 462 0
 1046 01bc 00E0     		b	.L71
 1047              	.L90:
 444:..\src/interruptions.c **** 
 1048              		.loc 1 444 0
 1049 01be 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 28


 1050              	.L71:
 466:..\src/interruptions.c ****                 }
 467:..\src/interruptions.c ****             
 468:..\src/interruptions.c ****             break;
 1051              		.loc 1 468 0 discriminator 1
 1052 01c0 7BE0     		b	.L61
 1053              	.L57:
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 471:..\src/interruptions.c ****             SH_ref = SH_refOld;
 1054              		.loc 1 471 0
 1055 01c2 384B     		ldr	r3, .L95+20
 1056 01c4 1B68     		ldr	r3, [r3]
 1057 01c6 364A     		ldr	r2, .L95+16
 1058 01c8 1360     		str	r3, [r2]
 472:..\src/interruptions.c ****             switch (current_emg) {
 1059              		.loc 1 472 0
 1060 01ca 374B     		ldr	r3, .L95+24
 1061 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1062 01ce 012B     		cmp	r3, #1
 1063 01d0 1AD0     		beq	.L76
 1064 01d2 022B     		cmp	r3, #2
 1065 01d4 39D0     		beq	.L77
 1066 01d6 002B     		cmp	r3, #0
 1067 01d8 00D0     		beq	.L78
 473:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 474:..\src/interruptions.c ****                 case 0:
 475:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 476:..\src/interruptions.c ****                         current_emg = 1;
 477:..\src/interruptions.c ****                         break;
 478:..\src/interruptions.c ****                     }
 479:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 480:..\src/interruptions.c ****                         current_emg = 2;
 481:..\src/interruptions.c ****                         break;
 482:..\src/interruptions.c ****                     }
 483:..\src/interruptions.c ****                     break;
 484:..\src/interruptions.c **** 
 485:..\src/interruptions.c ****                 // EMG 1 is first
 486:..\src/interruptions.c ****                 case 1:
 487:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 488:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 489:..\src/interruptions.c ****                         current_emg = 0;
 490:..\src/interruptions.c ****                         break;
 491:..\src/interruptions.c ****                     }
 492:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 493:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 494:..\src/interruptions.c ****                         SH_ref = SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_
 495:..\src/interruptions.c ****                     break;
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c ****                 // EMG 2 is first
 498:..\src/interruptions.c ****                 case 2:
 499:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 500:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 501:..\src/interruptions.c ****                         current_emg = 0;
 502:..\src/interruptions.c ****                         break;
 503:..\src/interruptions.c ****                     }
 504:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 29


 505:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 506:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * c_mem.emg.emg_speed[1] << 2) / (1024 - c_
 507:..\src/interruptions.c ****                     }
 508:..\src/interruptions.c ****                     break;
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****                 default:
 511:..\src/interruptions.c ****                     break;
 1068              		.loc 1 511 0
 1069 01da 6AE0     		b	.L80
 1070              	.L78:
 475:..\src/interruptions.c ****                         current_emg = 1;
 1071              		.loc 1 475 0
 1072 01dc BB68     		ldr	r3, [r7, #8]
 1073 01de 002B     		cmp	r3, #0
 1074 01e0 07DD     		ble	.L79
 475:..\src/interruptions.c ****                         current_emg = 1;
 1075              		.loc 1 475 0 is_stmt 0 discriminator 1
 1076 01e2 BA68     		ldr	r2, [r7, #8]
 1077 01e4 7B68     		ldr	r3, [r7, #4]
 1078 01e6 9A42     		cmp	r2, r3
 1079 01e8 03DD     		ble	.L79
 476:..\src/interruptions.c ****                         break;
 1080              		.loc 1 476 0 is_stmt 1
 1081 01ea 2F4B     		ldr	r3, .L95+24
 1082 01ec 0122     		movs	r2, #1
 1083 01ee 1A70     		strb	r2, [r3]
 477:..\src/interruptions.c ****                     }
 1084              		.loc 1 477 0
 1085 01f0 5FE0     		b	.L80
 1086              	.L79:
 479:..\src/interruptions.c ****                         current_emg = 2;
 1087              		.loc 1 479 0
 1088 01f2 7B68     		ldr	r3, [r7, #4]
 1089 01f4 002B     		cmp	r3, #0
 1090 01f6 49DD     		ble	.L91
 479:..\src/interruptions.c ****                         current_emg = 2;
 1091              		.loc 1 479 0 is_stmt 0 discriminator 1
 1092 01f8 7A68     		ldr	r2, [r7, #4]
 1093 01fa BB68     		ldr	r3, [r7, #8]
 1094 01fc 9A42     		cmp	r2, r3
 1095 01fe 45DD     		ble	.L91
 480:..\src/interruptions.c ****                         break;
 1096              		.loc 1 480 0 is_stmt 1
 1097 0200 294B     		ldr	r3, .L95+24
 1098 0202 0222     		movs	r2, #2
 1099 0204 1A70     		strb	r2, [r3]
 481:..\src/interruptions.c ****                     }
 1100              		.loc 1 481 0
 1101 0206 54E0     		b	.L80
 1102              	.L76:
 488:..\src/interruptions.c ****                         current_emg = 0;
 1103              		.loc 1 488 0
 1104 0208 BB68     		ldr	r3, [r7, #8]
 1105 020a 002B     		cmp	r3, #0
 1106 020c 06DA     		bge	.L82
 488:..\src/interruptions.c ****                         current_emg = 0;
 1107              		.loc 1 488 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 30


 1108 020e 7B68     		ldr	r3, [r7, #4]
 1109 0210 002B     		cmp	r3, #0
 1110 0212 03DA     		bge	.L82
 489:..\src/interruptions.c ****                         break;
 1111              		.loc 1 489 0 is_stmt 1
 1112 0214 244B     		ldr	r3, .L95+24
 1113 0216 0022     		movs	r2, #0
 1114 0218 1A70     		strb	r2, [r3]
 490:..\src/interruptions.c ****                     }
 1115              		.loc 1 490 0
 1116 021a 4AE0     		b	.L80
 1117              	.L82:
 493:..\src/interruptions.c ****                         SH_ref = SH_refOld + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024 - c_
 1118              		.loc 1 493 0
 1119 021c BB68     		ldr	r3, [r7, #8]
 1120 021e 002B     		cmp	r3, #0
 1121 0220 44DD     		ble	.L92
 494:..\src/interruptions.c ****                     break;
 1122              		.loc 1 494 0
 1123 0222 1E4B     		ldr	r3, .L95+12
 1124 0224 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1125 0228 1A46     		mov	r2, r3
 1126 022a BB68     		ldr	r3, [r7, #8]
 1127 022c 03FB02F3 		mul	r3, r3, r2
 1128 0230 9A00     		lsls	r2, r3, #2
 1129 0232 194B     		ldr	r3, .L95+8
 1130 0234 1B8E     		ldrh	r3, [r3, #48]
 1131 0236 C3F58063 		rsb	r3, r3, #1024
 1132 023a 92FBF3F2 		sdiv	r2, r2, r3
 1133 023e 194B     		ldr	r3, .L95+20
 1134 0240 1B68     		ldr	r3, [r3]
 1135 0242 1344     		add	r3, r3, r2
 1136 0244 164A     		ldr	r2, .L95+16
 1137 0246 1360     		str	r3, [r2]
 495:..\src/interruptions.c **** 
 1138              		.loc 1 495 0
 1139 0248 30E0     		b	.L92
 1140              	.L77:
 500:..\src/interruptions.c ****                         current_emg = 0;
 1141              		.loc 1 500 0
 1142 024a BB68     		ldr	r3, [r7, #8]
 1143 024c 002B     		cmp	r3, #0
 1144 024e 06DA     		bge	.L84
 500:..\src/interruptions.c ****                         current_emg = 0;
 1145              		.loc 1 500 0 is_stmt 0 discriminator 1
 1146 0250 7B68     		ldr	r3, [r7, #4]
 1147 0252 002B     		cmp	r3, #0
 1148 0254 03DA     		bge	.L84
 501:..\src/interruptions.c ****                         break;
 1149              		.loc 1 501 0 is_stmt 1
 1150 0256 144B     		ldr	r3, .L95+24
 1151 0258 0022     		movs	r2, #0
 1152 025a 1A70     		strb	r2, [r3]
 502:..\src/interruptions.c ****                     }
 1153              		.loc 1 502 0
 1154 025c 29E0     		b	.L80
 1155              	.L84:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 31


 505:..\src/interruptions.c ****                         SH_ref = SH_refOld - (err_emg_2 * c_mem.emg.emg_speed[1] << 2) / (1024 - c_
 1156              		.loc 1 505 0
 1157 025e 7B68     		ldr	r3, [r7, #4]
 1158 0260 002B     		cmp	r3, #0
 1159 0262 25DD     		ble	.L93
 506:..\src/interruptions.c ****                     }
 1160              		.loc 1 506 0
 1161 0264 0F4B     		ldr	r3, .L95+20
 1162 0266 1A68     		ldr	r2, [r3]
 1163 0268 0B4B     		ldr	r3, .L95+8
 1164 026a 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1165 026e 1946     		mov	r1, r3
 1166 0270 7B68     		ldr	r3, [r7, #4]
 1167 0272 03FB01F3 		mul	r3, r3, r1
 1168 0276 9900     		lsls	r1, r3, #2
 1169 0278 074B     		ldr	r3, .L95+8
 1170 027a 5B8E     		ldrh	r3, [r3, #50]
 1171 027c C3F58063 		rsb	r3, r3, #1024
 1172 0280 91FBF3F3 		sdiv	r3, r1, r3
 1173 0284 D31A     		subs	r3, r2, r3
 1174 0286 064A     		ldr	r2, .L95+16
 1175 0288 1360     		str	r3, [r2]
 508:..\src/interruptions.c **** 
 1176              		.loc 1 508 0
 1177 028a 11E0     		b	.L93
 1178              	.L91:
 483:..\src/interruptions.c **** 
 1179              		.loc 1 483 0
 1180 028c 00BF     		nop
 1181 028e 14E0     		b	.L61
 1182              	.L96:
 1183              		.align	2
 1184              	.L95:
 1185 0290 20000000 		.word	c_mem+32
 1186 0294 00000000 		.word	g_adc_meas
 1187 0298 00000000 		.word	c_mem
 1188 029c 00000000 		.word	g_mem
 1189 02a0 00000000 		.word	SH_ref
 1190 02a4 00000000 		.word	SH_refOld
 1191 02a8 8C000000 		.word	current_emg.9799
 1192              	.L92:
 495:..\src/interruptions.c **** 
 1193              		.loc 1 495 0
 1194 02ac 00BF     		nop
 1195 02ae 04E0     		b	.L61
 1196              	.L93:
 508:..\src/interruptions.c **** 
 1197              		.loc 1 508 0
 1198 02b0 00BF     		nop
 1199              	.L80:
 512:..\src/interruptions.c ****             }
 513:..\src/interruptions.c ****             break;
 1200              		.loc 1 513 0 discriminator 3
 1201 02b2 02E0     		b	.L61
 1202              	.L88:
 514:..\src/interruptions.c **** 
 515:..\src/interruptions.c ****         default:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 32


 516:..\src/interruptions.c ****             break;
 1203              		.loc 1 516 0
 1204 02b4 00BF     		nop
 1205 02b6 00E0     		b	.L61
 1206              	.L89:
 428:..\src/interruptions.c **** 
 1207              		.loc 1 428 0
 1208 02b8 00BF     		nop
 1209              	.L61:
 517:..\src/interruptions.c ****     }
 518:..\src/interruptions.c **** 
 519:..\src/interruptions.c ****     // Position limit saturation
 520:..\src/interruptions.c ****     
 521:..\src/interruptions.c ****         if (SH_ref < SH->pos_lim_inf) 
 1210              		.loc 1 521 0
 1211 02ba FB68     		ldr	r3, [r7, #12]
 1212 02bc 1A68     		ldr	r2, [r3]
 1213 02be 0B4B     		ldr	r3, .L97
 1214 02c0 1B68     		ldr	r3, [r3]
 1215 02c2 9A42     		cmp	r2, r3
 1216 02c4 03DD     		ble	.L86
 522:..\src/interruptions.c ****             SH_ref = SH->pos_lim_inf;
 1217              		.loc 1 522 0
 1218 02c6 FB68     		ldr	r3, [r7, #12]
 1219 02c8 1B68     		ldr	r3, [r3]
 1220 02ca 084A     		ldr	r2, .L97
 1221 02cc 1360     		str	r3, [r2]
 1222              	.L86:
 523:..\src/interruptions.c ****         if (SH_ref > SH->pos_lim_sup) 
 1223              		.loc 1 523 0
 1224 02ce FB68     		ldr	r3, [r7, #12]
 1225 02d0 5A68     		ldr	r2, [r3, #4]
 1226 02d2 064B     		ldr	r3, .L97
 1227 02d4 1B68     		ldr	r3, [r3]
 1228 02d6 9A42     		cmp	r2, r3
 1229 02d8 03DA     		bge	.L94
 524:..\src/interruptions.c ****             SH_ref = SH->pos_lim_sup;
 1230              		.loc 1 524 0
 1231 02da FB68     		ldr	r3, [r7, #12]
 1232 02dc 5B68     		ldr	r3, [r3, #4]
 1233 02de 034A     		ldr	r2, .L97
 1234 02e0 1360     		str	r3, [r2]
 1235              	.L94:
 525:..\src/interruptions.c **** 
 526:..\src/interruptions.c **** }
 1236              		.loc 1 526 0
 1237 02e2 00BF     		nop
 1238 02e4 1437     		adds	r7, r7, #20
 1239              		.cfi_def_cfa_offset 4
 1240 02e6 BD46     		mov	sp, r7
 1241              		.cfi_def_cfa_register 13
 1242              		@ sp needed
 1243 02e8 80BC     		pop	{r7}
 1244              		.cfi_restore 7
 1245              		.cfi_def_cfa_offset 0
 1246 02ea 7047     		bx	lr
 1247              	.L98:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 33


 1248              		.align	2
 1249              	.L97:
 1250 02ec 00000000 		.word	SH_ref
 1251              		.cfi_endproc
 1252              	.LFE68:
 1253              		.size	compute_SH_reference, .-compute_SH_reference
 1254              		.section	.text.vibrotactile_control_generic,"ax",%progbits
 1255              		.align	2
 1256              		.global	vibrotactile_control_generic
 1257              		.thumb
 1258              		.thumb_func
 1259              		.type	vibrotactile_control_generic, %function
 1260              	vibrotactile_control_generic:
 1261              	.LFB69:
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c **** 
 529:..\src/interruptions.c **** 
 530:..\src/interruptions.c **** 
 531:..\src/interruptions.c **** //==============================================================================
 532:..\src/interruptions.c **** //                                                  VIBROTACTILE CONTROL GENERIC
 533:..\src/interruptions.c **** //==============================================================================
 534:..\src/interruptions.c **** void vibrotactile_control_generic(uint8 idx) {
 1262              		.loc 1 534 0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 16
 1265              		@ frame_needed = 1, uses_anonymous_args = 0
 1266 0000 80B5     		push	{r7, lr}
 1267              		.cfi_def_cfa_offset 8
 1268              		.cfi_offset 7, -8
 1269              		.cfi_offset 14, -4
 1270 0002 84B0     		sub	sp, sp, #16
 1271              		.cfi_def_cfa_offset 24
 1272 0004 00AF     		add	r7, sp, #0
 1273              		.cfi_def_cfa_register 7
 1274 0006 0346     		mov	r3, r0
 1275 0008 FB71     		strb	r3, [r7, #7]
 535:..\src/interruptions.c ****    
 536:..\src/interruptions.c ****     int16 CYDATA pwm_input = 0;
 1276              		.loc 1 536 0
 1277 000a 0023     		movs	r3, #0
 1278 000c FB81     		strh	r3, [r7, #14]	@ movhi
 537:..\src/interruptions.c **** 
 538:..\src/interruptions.c ****     // Static Variables
 539:..\src/interruptions.c ****    
 540:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_VT_ACTUATORS]; 
 541:..\src/interruptions.c **** 
 542:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 543:..\src/interruptions.c **** 
 544:..\src/interruptions.c ****     pwm_input = VT_ref[idx];
 1279              		.loc 1 544 0
 1280 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1281 0010 294A     		ldr	r2, .L112
 1282 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1283 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 545:..\src/interruptions.c **** 
 546:..\src/interruptions.c ****     if (pwm_input > 0) 
 1284              		.loc 1 546 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 34


 1285 0016 B7F90E30 		ldrsh	r3, [r7, #14]
 1286 001a 002B     		cmp	r3, #0
 1287 001c 04DD     		ble	.L100
 547:..\src/interruptions.c ****         motor_dir[idx] = TRUE;
 1288              		.loc 1 547 0
 1289 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1290 0020 264A     		ldr	r2, .L112+4
 1291 0022 0121     		movs	r1, #1
 1292 0024 D154     		strb	r1, [r2, r3]
 1293 0026 03E0     		b	.L101
 1294              	.L100:
 548:..\src/interruptions.c ****     else 
 549:..\src/interruptions.c ****         motor_dir[idx] = FALSE;
 1295              		.loc 1 549 0
 1296 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1297 002a 244A     		ldr	r2, .L112+4
 1298 002c 0021     		movs	r1, #0
 1299 002e D154     		strb	r1, [r2, r3]
 1300              	.L101:
 550:..\src/interruptions.c ****         
 551:..\src/interruptions.c ****     if (pwm_input > PWM_MAX_VALUE_DC) 
 1301              		.loc 1 551 0
 1302 0030 B7F90E30 		ldrsh	r3, [r7, #14]
 1303 0034 642B     		cmp	r3, #100
 1304 0036 01DD     		ble	.L102
 552:..\src/interruptions.c ****         pwm_input = PWM_MAX_VALUE_DC;
 1305              		.loc 1 552 0
 1306 0038 6423     		movs	r3, #100
 1307 003a FB81     		strh	r3, [r7, #14]	@ movhi
 1308              	.L102:
 553:..\src/interruptions.c ****     if (pwm_input < - PWM_MAX_VALUE_DC) 
 1309              		.loc 1 553 0
 1310 003c B7F90E30 		ldrsh	r3, [r7, #14]
 1311 0040 13F1640F 		cmn	r3, #100
 1312 0044 02DA     		bge	.L103
 554:..\src/interruptions.c ****         pwm_input = - PWM_MAX_VALUE_DC;
 1313              		.loc 1 554 0
 1314 0046 4FF69C73 		movw	r3, #65436
 1315 004a FB81     		strh	r3, [r7, #14]	@ movhi
 1316              	.L103:
 555:..\src/interruptions.c ****      
 556:..\src/interruptions.c ****     // Set motor direction and write pwm value
 557:..\src/interruptions.c ****     switch (idx) {
 1317              		.loc 1 557 0
 1318 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1319 004e 002B     		cmp	r3, #0
 1320 0050 02D0     		beq	.L105
 1321 0052 012B     		cmp	r3, #1
 1322 0054 16D0     		beq	.L106
 558:..\src/interruptions.c ****         case 0:         // Motor 1
 559:..\src/interruptions.c ****             if (motor_dir[idx])
 560:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 561:..\src/interruptions.c ****             else
 562:..\src/interruptions.c ****                 VT1_DIR_Write(0x01);
 563:..\src/interruptions.c ****          
 564:..\src/interruptions.c ****                PWM_VT_WriteCompare1(abs(pwm_input));    
 565:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 35


 566:..\src/interruptions.c ****             break;
 567:..\src/interruptions.c ****         case 1:         // Motor 2
 568:..\src/interruptions.c ****             
 569:..\src/interruptions.c ****             if (motor_dir[idx])
 570:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
 571:..\src/interruptions.c ****             else
 572:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);
 573:..\src/interruptions.c ****             
 574:..\src/interruptions.c ****             PWM_VT_WriteCompare2(abs(pwm_input));    
 575:..\src/interruptions.c ****         break;
 576:..\src/interruptions.c ****     }
 577:..\src/interruptions.c ****        
 578:..\src/interruptions.c ****     
 579:..\src/interruptions.c **** }
 1323              		.loc 1 579 0
 1324 0056 2BE0     		b	.L111
 1325              	.L105:
 559:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 1326              		.loc 1 559 0
 1327 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1328 005a 184A     		ldr	r2, .L112+4
 1329 005c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1330 005e 002B     		cmp	r3, #0
 1331 0060 03D0     		beq	.L107
 560:..\src/interruptions.c ****             else
 1332              		.loc 1 560 0
 1333 0062 0020     		movs	r0, #0
 1334 0064 FFF7FEFF 		bl	VT1_DIR_Write
 1335 0068 02E0     		b	.L108
 1336              	.L107:
 562:..\src/interruptions.c ****          
 1337              		.loc 1 562 0
 1338 006a 0120     		movs	r0, #1
 1339 006c FFF7FEFF 		bl	VT1_DIR_Write
 1340              	.L108:
 564:..\src/interruptions.c ****             
 1341              		.loc 1 564 0
 1342 0070 B7F90E30 		ldrsh	r3, [r7, #14]
 1343 0074 002B     		cmp	r3, #0
 1344 0076 B8BF     		it	lt
 1345 0078 5B42     		rsblt	r3, r3, #0
 1346 007a 9BB2     		uxth	r3, r3
 1347 007c 1846     		mov	r0, r3
 1348 007e FFF7FEFF 		bl	PWM_VT_WriteCompare1
 566:..\src/interruptions.c ****         case 1:         // Motor 2
 1349              		.loc 1 566 0
 1350 0082 15E0     		b	.L104
 1351              	.L106:
 569:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);          
 1352              		.loc 1 569 0
 1353 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1354 0086 0D4A     		ldr	r2, .L112+4
 1355 0088 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1356 008a 002B     		cmp	r3, #0
 1357 008c 03D0     		beq	.L109
 570:..\src/interruptions.c ****             else
 1358              		.loc 1 570 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 36


 1359 008e 0020     		movs	r0, #0
 1360 0090 FFF7FEFF 		bl	VT2_DIR_Write
 1361 0094 02E0     		b	.L110
 1362              	.L109:
 572:..\src/interruptions.c ****             
 1363              		.loc 1 572 0
 1364 0096 0120     		movs	r0, #1
 1365 0098 FFF7FEFF 		bl	VT2_DIR_Write
 1366              	.L110:
 574:..\src/interruptions.c ****         break;
 1367              		.loc 1 574 0
 1368 009c B7F90E30 		ldrsh	r3, [r7, #14]
 1369 00a0 002B     		cmp	r3, #0
 1370 00a2 B8BF     		it	lt
 1371 00a4 5B42     		rsblt	r3, r3, #0
 1372 00a6 9BB2     		uxth	r3, r3
 1373 00a8 1846     		mov	r0, r3
 1374 00aa FFF7FEFF 		bl	PWM_VT_WriteCompare2
 575:..\src/interruptions.c ****     }
 1375              		.loc 1 575 0
 1376 00ae 00BF     		nop
 1377              	.L104:
 1378              	.L111:
 1379              		.loc 1 579 0
 1380 00b0 00BF     		nop
 1381 00b2 1037     		adds	r7, r7, #16
 1382              		.cfi_def_cfa_offset 8
 1383 00b4 BD46     		mov	sp, r7
 1384              		.cfi_def_cfa_register 13
 1385              		@ sp needed
 1386 00b6 80BD     		pop	{r7, pc}
 1387              	.L113:
 1388              		.align	2
 1389              	.L112:
 1390 00b8 00000000 		.word	VT_ref
 1391 00bc 90000000 		.word	motor_dir.9821
 1392              		.cfi_endproc
 1393              	.LFE69:
 1394              		.size	vibrotactile_control_generic, .-vibrotactile_control_generic
 1395              		.section	.text.encoder_reading_SPI,"ax",%progbits
 1396              		.align	2
 1397              		.global	encoder_reading_SPI
 1398              		.thumb
 1399              		.thumb_func
 1400              		.type	encoder_reading_SPI, %function
 1401              	encoder_reading_SPI:
 1402              	.LFB70:
 580:..\src/interruptions.c **** 
 581:..\src/interruptions.c **** //==============================================================================
 582:..\src/interruptions.c **** //                                                           ENCODER READING SPI
 583:..\src/interruptions.c **** //==============================================================================
 584:..\src/interruptions.c **** 
 585:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 1403              		.loc 1 585 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 8
 1406              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 37


 1407              		@ link register save eliminated.
 1408 0000 80B4     		push	{r7}
 1409              		.cfi_def_cfa_offset 4
 1410              		.cfi_offset 7, -4
 1411 0002 83B0     		sub	sp, sp, #12
 1412              		.cfi_def_cfa_offset 16
 1413 0004 00AF     		add	r7, sp, #0
 1414              		.cfi_def_cfa_register 7
 1415 0006 0346     		mov	r3, r0
 1416 0008 0A46     		mov	r2, r1
 1417 000a FB71     		strb	r3, [r7, #7]
 1418 000c 1346     		mov	r3, r2
 1419 000e BB71     		strb	r3, [r7, #6]
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c **** }
 1420              		.loc 1 587 0
 1421 0010 00BF     		nop
 1422 0012 0C37     		adds	r7, r7, #12
 1423              		.cfi_def_cfa_offset 4
 1424 0014 BD46     		mov	sp, r7
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 0016 80BC     		pop	{r7}
 1428              		.cfi_restore 7
 1429              		.cfi_def_cfa_offset 0
 1430 0018 7047     		bx	lr
 1431              		.cfi_endproc
 1432              	.LFE70:
 1433              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 1434              		.global	__aeabi_f2iz
 1435              		.global	__aeabi_f2d
 1436              		.global	__aeabi_ddiv
 1437              		.global	__aeabi_dadd
 1438              		.global	__aeabi_i2d
 1439              		.global	__aeabi_dsub
 1440              		.global	__aeabi_d2iz
 1441 001a 00BF     		.section	.text.analog_read_end,"ax",%progbits
 1442              		.align	2
 1443              		.global	analog_read_end
 1444              		.thumb
 1445              		.thumb_func
 1446              		.type	analog_read_end, %function
 1447              	analog_read_end:
 1448              	.LFB71:
 588:..\src/interruptions.c **** 
 589:..\src/interruptions.c **** //==============================================================================
 590:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
 591:..\src/interruptions.c **** //==============================================================================
 592:..\src/interruptions.c **** 
 593:..\src/interruptions.c **** void analog_read_end() {
 1449              		.loc 1 593 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 8
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453 0000 B0B5     		push	{r4, r5, r7, lr}
 1454              		.cfi_def_cfa_offset 16
 1455              		.cfi_offset 4, -16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 38


 1456              		.cfi_offset 5, -12
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 82B0     		sub	sp, sp, #8
 1460              		.cfi_def_cfa_offset 24
 1461 0004 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
 594:..\src/interruptions.c **** 
 595:..\src/interruptions.c ****     /* =========================================================================
 596:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
 597:..\src/interruptions.c ****     /
 598:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 599:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 600:..\src/interruptions.c ****     /
 601:..\src/interruptions.c ****     /   Definition:
 602:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 603:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
 604:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
 605:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
 606:..\src/interruptions.c ****     /
 607:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 608:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
 609:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
 610:..\src/interruptions.c ****     /  =========================================================================
 611:..\src/interruptions.c ****     */
 612:..\src/interruptions.c **** 
 613:..\src/interruptions.c ****     int32 CYDATA i_aux;
 614:..\src/interruptions.c ****     
 615:..\src/interruptions.c ****     static uint8 idx = 0;
 616:..\src/interruptions.c ****     
 617:..\src/interruptions.c ****     // Wait for conversion end
 618:..\src/interruptions.c ****     
 619:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 1463              		.loc 1 619 0
 1464 0006 08E0     		b	.L116
 1465              	.L117:
 620:..\src/interruptions.c ****         
 621:..\src/interruptions.c ****         if (interrupt_flag){
 1466              		.loc 1 621 0
 1467 0008 754B     		ldr	r3, .L129+16
 1468 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1469 000c 002B     		cmp	r3, #0
 1470 000e 04D0     		beq	.L116
 622:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1471              		.loc 1 622 0
 1472 0010 734B     		ldr	r3, .L129+16
 1473 0012 0022     		movs	r2, #0
 1474 0014 1A70     		strb	r2, [r3]
 623:..\src/interruptions.c ****             interrupt_manager();
 1475              		.loc 1 623 0
 1476 0016 FFF7FEFF 		bl	interrupt_manager
 1477              	.L116:
 619:..\src/interruptions.c ****         
 1478              		.loc 1 619 0
 1479 001a FFF7FEFF 		bl	ADC_STATUS_Read
 1480 001e 0346     		mov	r3, r0
 1481 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 39


 1482 0022 F1D0     		beq	.L117
 624:..\src/interruptions.c ****         }
 625:..\src/interruptions.c ****     }
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c **** 
 628:..\src/interruptions.c **** 
 629:..\src/interruptions.c ****         // Read pressure in any case
 630:..\src/interruptions.c ****         g_adc_meas.pressure  = (int32)(ADC_buf[0]);    //0 - 4096  
 1483              		.loc 1 630 0
 1484 0024 6F4B     		ldr	r3, .L129+20
 1485 0026 B3F90030 		ldrsh	r3, [r3]
 1486 002a 1846     		mov	r0, r3
 1487 002c FFF7FEFF 		bl	__aeabi_i2f
 1488 0030 0246     		mov	r2, r0
 1489 0032 6D4B     		ldr	r3, .L129+24
 1490 0034 9A60     		str	r2, [r3, #8]	@ float
 631:..\src/interruptions.c ****         pressure_value = g_adc_meas.pressure;
 1491              		.loc 1 631 0
 1492 0036 6C4B     		ldr	r3, .L129+24
 1493 0038 9B68     		ldr	r3, [r3, #8]	@ float
 1494 003a 1846     		mov	r0, r3
 1495 003c FFF7FEFF 		bl	__aeabi_f2iz
 1496 0040 0246     		mov	r2, r0
 1497 0042 6A4B     		ldr	r3, .L129+28
 1498 0044 1A60     		str	r2, [r3]
 632:..\src/interruptions.c ****         pressure_value =(((float)pressure_value/4096.0 + 0.00842)/0.002421) - atm_pressure;       /
 1499              		.loc 1 632 0
 1500 0046 694B     		ldr	r3, .L129+28
 1501 0048 1B68     		ldr	r3, [r3]
 1502 004a 1846     		mov	r0, r3
 1503 004c FFF7FEFF 		bl	__aeabi_i2f
 1504 0050 0346     		mov	r3, r0
 1505 0052 1846     		mov	r0, r3
 1506 0054 FFF7FEFF 		bl	__aeabi_f2d
 1507 0058 4FF00002 		mov	r2, #0
 1508 005c 644B     		ldr	r3, .L129+32
 1509 005e FFF7FEFF 		bl	__aeabi_ddiv
 1510 0062 0346     		mov	r3, r0
 1511 0064 0C46     		mov	r4, r1
 1512 0066 1846     		mov	r0, r3
 1513 0068 2146     		mov	r1, r4
 1514 006a 59A3     		adr	r3, .L129
 1515 006c D3E90023 		ldrd	r2, [r3]
 1516 0070 FFF7FEFF 		bl	__aeabi_dadd
 1517 0074 0346     		mov	r3, r0
 1518 0076 0C46     		mov	r4, r1
 1519 0078 1846     		mov	r0, r3
 1520 007a 2146     		mov	r1, r4
 1521 007c 56A3     		adr	r3, .L129+8
 1522 007e D3E90023 		ldrd	r2, [r3]
 1523 0082 FFF7FEFF 		bl	__aeabi_ddiv
 1524 0086 0346     		mov	r3, r0
 1525 0088 0C46     		mov	r4, r1
 1526 008a 2546     		mov	r5, r4
 1527 008c 1C46     		mov	r4, r3
 1528 008e 594B     		ldr	r3, .L129+36
 1529 0090 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 40


 1530 0092 1846     		mov	r0, r3
 1531 0094 FFF7FEFF 		bl	__aeabi_i2d
 1532 0098 0246     		mov	r2, r0
 1533 009a 0B46     		mov	r3, r1
 1534 009c 2046     		mov	r0, r4
 1535 009e 2946     		mov	r1, r5
 1536 00a0 FFF7FEFF 		bl	__aeabi_dsub
 1537 00a4 0346     		mov	r3, r0
 1538 00a6 0C46     		mov	r4, r1
 1539 00a8 1846     		mov	r0, r3
 1540 00aa 2146     		mov	r1, r4
 1541 00ac FFF7FEFF 		bl	__aeabi_d2iz
 1542 00b0 0246     		mov	r2, r0
 1543 00b2 4E4B     		ldr	r3, .L129+28
 1544 00b4 1A60     		str	r2, [r3]
 633:..\src/interruptions.c ****     
 634:..\src/interruptions.c ****         if (pressure_value < 0) 
 1545              		.loc 1 634 0
 1546 00b6 4D4B     		ldr	r3, .L129+28
 1547 00b8 1B68     		ldr	r3, [r3]
 1548 00ba 002B     		cmp	r3, #0
 1549 00bc 02DA     		bge	.L118
 635:..\src/interruptions.c ****             pressure_value = 0;
 1550              		.loc 1 635 0
 1551 00be 4B4B     		ldr	r3, .L129+28
 1552 00c0 0022     		movs	r2, #0
 1553 00c2 1A60     		str	r2, [r3]
 1554              	.L118:
 636:..\src/interruptions.c ****             
 637:..\src/interruptions.c ****         // Reset emg
 638:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 1555              		.loc 1 638 0
 1556 00c4 4C4B     		ldr	r3, .L129+40
 1557 00c6 0022     		movs	r2, #0
 1558 00c8 1A70     		strb	r2, [r3]
 1559 00ca 0CE0     		b	.L119
 1560              	.L120:
 639:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1561              		.loc 1 639 0 discriminator 3
 1562 00cc 4A4B     		ldr	r3, .L129+40
 1563 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1564 00d0 1946     		mov	r1, r3
 1565 00d2 454B     		ldr	r3, .L129+24
 1566 00d4 0022     		movs	r2, #0
 1567 00d6 43F82120 		str	r2, [r3, r1, lsl #2]
 638:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1568              		.loc 1 638 0 discriminator 3
 1569 00da 474B     		ldr	r3, .L129+40
 1570 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1571 00de 0133     		adds	r3, r3, #1
 1572 00e0 DAB2     		uxtb	r2, r3
 1573 00e2 454B     		ldr	r3, .L129+40
 1574 00e4 1A70     		strb	r2, [r3]
 1575              	.L119:
 638:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 1576              		.loc 1 638 0 is_stmt 0 discriminator 1
 1577 00e6 444B     		ldr	r3, .L129+40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 41


 1578 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1579 00ea 012B     		cmp	r3, #1
 1580 00ec EED9     		bls	.L120
 640:..\src/interruptions.c ****         }
 641:..\src/interruptions.c ****          
 642:..\src/interruptions.c ****         // Read EMG channel 1
 643:..\src/interruptions.c ****         i_aux = 0;  
 1581              		.loc 1 643 0 is_stmt 1
 1582 00ee 0023     		movs	r3, #0
 1583 00f0 7B60     		str	r3, [r7, #4]
 644:..\src/interruptions.c ****         i_aux = (int32)(ADC_buf[1 + c_mem.emg.switch_emg]);
 1584              		.loc 1 644 0
 1585 00f2 424B     		ldr	r3, .L129+44
 1586 00f4 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 1587 00f8 0133     		adds	r3, r3, #1
 1588 00fa 3A4A     		ldr	r2, .L129+20
 1589 00fc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 1590 0100 7B60     		str	r3, [r7, #4]
 645:..\src/interruptions.c ****         if (i_aux < 0) 
 1591              		.loc 1 645 0
 1592 0102 7B68     		ldr	r3, [r7, #4]
 1593 0104 002B     		cmp	r3, #0
 1594 0106 01DA     		bge	.L121
 646:..\src/interruptions.c ****             i_aux = 0;
 1595              		.loc 1 646 0
 1596 0108 0023     		movs	r3, #0
 1597 010a 7B60     		str	r3, [r7, #4]
 1598              	.L121:
 647:..\src/interruptions.c ****         i_aux = filter(i_aux, &filt_emg[0]);
 1599              		.loc 1 647 0
 1600 010c 3C49     		ldr	r1, .L129+48
 1601 010e 7868     		ldr	r0, [r7, #4]
 1602 0110 FFF7FEFF 		bl	filter
 1603 0114 7860     		str	r0, [r7, #4]
 648:..\src/interruptions.c ****         i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 1604              		.loc 1 648 0
 1605 0116 7B68     		ldr	r3, [r7, #4]
 1606 0118 9B02     		lsls	r3, r3, #10
 1607 011a 1A46     		mov	r2, r3
 1608 011c 394B     		ldr	r3, .L129+52
 1609 011e 5B6B     		ldr	r3, [r3, #52]
 1610 0120 B2FBF3F3 		udiv	r3, r2, r3
 1611 0124 7B60     		str	r3, [r7, #4]
 649:..\src/interruptions.c **** 
 650:..\src/interruptions.c ****         if (interrupt_flag){
 1612              		.loc 1 650 0
 1613 0126 2E4B     		ldr	r3, .L129+16
 1614 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1615 012a 002B     		cmp	r3, #0
 1616 012c 04D0     		beq	.L122
 651:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1617              		.loc 1 651 0
 1618 012e 2C4B     		ldr	r3, .L129+16
 1619 0130 0022     		movs	r2, #0
 1620 0132 1A70     		strb	r2, [r3]
 652:..\src/interruptions.c ****             interrupt_manager();
 1621              		.loc 1 652 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 42


 1622 0134 FFF7FEFF 		bl	interrupt_manager
 1623              	.L122:
 653:..\src/interruptions.c ****         }
 654:..\src/interruptions.c ****         
 655:..\src/interruptions.c ****         //Saturation
 656:..\src/interruptions.c ****         if (i_aux < 0) 
 1624              		.loc 1 656 0
 1625 0138 7B68     		ldr	r3, [r7, #4]
 1626 013a 002B     		cmp	r3, #0
 1627 013c 02DA     		bge	.L123
 657:..\src/interruptions.c ****             i_aux = 0;
 1628              		.loc 1 657 0
 1629 013e 0023     		movs	r3, #0
 1630 0140 7B60     		str	r3, [r7, #4]
 1631 0142 06E0     		b	.L124
 1632              	.L123:
 658:..\src/interruptions.c ****         else 
 659:..\src/interruptions.c ****             if (i_aux > 1024)
 1633              		.loc 1 659 0
 1634 0144 7B68     		ldr	r3, [r7, #4]
 1635 0146 B3F5806F 		cmp	r3, #1024
 1636 014a 02DD     		ble	.L124
 660:..\src/interruptions.c ****                 i_aux = 1024;
 1637              		.loc 1 660 0
 1638 014c 4FF48063 		mov	r3, #1024
 1639 0150 7B60     		str	r3, [r7, #4]
 1640              	.L124:
 661:..\src/interruptions.c ****         
 662:..\src/interruptions.c ****         g_adc_meas.emg[0] = i_aux;
 1641              		.loc 1 662 0
 1642 0152 254A     		ldr	r2, .L129+24
 1643 0154 7B68     		ldr	r3, [r7, #4]
 1644 0156 1360     		str	r3, [r2]
 663:..\src/interruptions.c ****         
 664:..\src/interruptions.c ****         // Read EMG channel 2
 665:..\src/interruptions.c ****         i_aux = 0;  
 1645              		.loc 1 665 0
 1646 0158 0023     		movs	r3, #0
 1647 015a 7B60     		str	r3, [r7, #4]
 666:..\src/interruptions.c ****         i_aux = (int32)(ADC_buf[2 - c_mem.emg.switch_emg]);
 1648              		.loc 1 666 0
 1649 015c 274B     		ldr	r3, .L129+44
 1650 015e 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 1651 0162 C3F10203 		rsb	r3, r3, #2
 1652 0166 1F4A     		ldr	r2, .L129+20
 1653 0168 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 1654 016c 7B60     		str	r3, [r7, #4]
 667:..\src/interruptions.c ****         
 668:..\src/interruptions.c ****         if (i_aux < 0)
 1655              		.loc 1 668 0
 1656 016e 7B68     		ldr	r3, [r7, #4]
 1657 0170 002B     		cmp	r3, #0
 1658 0172 01DA     		bge	.L125
 669:..\src/interruptions.c ****             i_aux = 0;
 1659              		.loc 1 669 0
 1660 0174 0023     		movs	r3, #0
 1661 0176 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 43


 1662              	.L125:
 670:..\src/interruptions.c ****         i_aux = filter(i_aux, &filt_emg[1]);
 1663              		.loc 1 670 0
 1664 0178 2349     		ldr	r1, .L129+56
 1665 017a 7868     		ldr	r0, [r7, #4]
 1666 017c FFF7FEFF 		bl	filter
 1667 0180 7860     		str	r0, [r7, #4]
 671:..\src/interruptions.c ****         i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 1668              		.loc 1 671 0
 1669 0182 7B68     		ldr	r3, [r7, #4]
 1670 0184 9B02     		lsls	r3, r3, #10
 1671 0186 1A46     		mov	r2, r3
 1672 0188 1E4B     		ldr	r3, .L129+52
 1673 018a 9B6B     		ldr	r3, [r3, #56]
 1674 018c B2FBF3F3 		udiv	r3, r2, r3
 1675 0190 7B60     		str	r3, [r7, #4]
 672:..\src/interruptions.c **** 
 673:..\src/interruptions.c ****         if (interrupt_flag){
 1676              		.loc 1 673 0
 1677 0192 134B     		ldr	r3, .L129+16
 1678 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1679 0196 002B     		cmp	r3, #0
 1680 0198 04D0     		beq	.L126
 674:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1681              		.loc 1 674 0
 1682 019a 114B     		ldr	r3, .L129+16
 1683 019c 0022     		movs	r2, #0
 1684 019e 1A70     		strb	r2, [r3]
 675:..\src/interruptions.c ****             interrupt_manager();
 1685              		.loc 1 675 0
 1686 01a0 FFF7FEFF 		bl	interrupt_manager
 1687              	.L126:
 676:..\src/interruptions.c ****         }
 677:..\src/interruptions.c ****         
 678:..\src/interruptions.c ****         if (i_aux < 0) 
 1688              		.loc 1 678 0
 1689 01a4 7B68     		ldr	r3, [r7, #4]
 1690 01a6 002B     		cmp	r3, #0
 1691 01a8 02DA     		bge	.L127
 679:..\src/interruptions.c ****             i_aux = 0;
 1692              		.loc 1 679 0
 1693 01aa 0023     		movs	r3, #0
 1694 01ac 7B60     		str	r3, [r7, #4]
 1695 01ae 06E0     		b	.L128
 1696              	.L127:
 680:..\src/interruptions.c ****         else 
 681:..\src/interruptions.c ****             if (i_aux > 1024)
 1697              		.loc 1 681 0
 1698 01b0 7B68     		ldr	r3, [r7, #4]
 1699 01b2 B3F5806F 		cmp	r3, #1024
 1700 01b6 02DD     		ble	.L128
 682:..\src/interruptions.c ****                 i_aux = 1024;
 1701              		.loc 1 682 0
 1702 01b8 4FF48063 		mov	r3, #1024
 1703 01bc 7B60     		str	r3, [r7, #4]
 1704              	.L128:
 683:..\src/interruptions.c ****        
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 44


 684:..\src/interruptions.c ****         g_adc_meas.emg[1] = i_aux;
 1705              		.loc 1 684 0
 1706 01be 0A4A     		ldr	r2, .L129+24
 1707 01c0 7B68     		ldr	r3, [r7, #4]
 1708 01c2 5360     		str	r3, [r2, #4]
 685:..\src/interruptions.c ****     
 686:..\src/interruptions.c **** }
 1709              		.loc 1 686 0
 1710 01c4 00BF     		nop
 1711 01c6 0837     		adds	r7, r7, #8
 1712              		.cfi_def_cfa_offset 16
 1713 01c8 BD46     		mov	sp, r7
 1714              		.cfi_def_cfa_register 13
 1715              		@ sp needed
 1716 01ca B0BD     		pop	{r4, r5, r7, pc}
 1717              	.L130:
 1718 01cc AFF30080 		.align	3
 1719              	.L129:
 1720 01d0 CAFD0E45 		.word	1158610378
 1721 01d4 813E813F 		.word	1065434753
 1722 01d8 F10F5B7A 		.word	2052788209
 1723 01dc 34D5633F 		.word	1063507252
 1724 01e0 00000000 		.word	interrupt_flag
 1725 01e4 00000000 		.word	ADC_buf
 1726 01e8 00000000 		.word	g_adc_meas
 1727 01ec 00000000 		.word	pressure_value
 1728 01f0 0000B040 		.word	1085276160
 1729 01f4 00000000 		.word	atm_pressure
 1730 01f8 92000000 		.word	idx.9832
 1731 01fc 00000000 		.word	c_mem
 1732 0200 00000000 		.word	filt_emg
 1733 0204 00000000 		.word	g_mem
 1734 0208 08000000 		.word	filt_emg+8
 1735              		.cfi_endproc
 1736              	.LFE71:
 1737              		.size	analog_read_end, .-analog_read_end
 1738              		.section	.text.overcurrent_control,"ax",%progbits
 1739              		.align	2
 1740              		.global	overcurrent_control
 1741              		.thumb
 1742              		.thumb_func
 1743              		.type	overcurrent_control, %function
 1744              	overcurrent_control:
 1745              	.LFB72:
 687:..\src/interruptions.c **** 
 688:..\src/interruptions.c **** //==============================================================================
 689:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
 690:..\src/interruptions.c **** //==============================================================================
 691:..\src/interruptions.c **** 
 692:..\src/interruptions.c **** void overcurrent_control() {
 1746              		.loc 1 692 0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 0
 1749              		@ frame_needed = 1, uses_anonymous_args = 0
 1750              		@ link register save eliminated.
 1751 0000 80B4     		push	{r7}
 1752              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 45


 1753              		.cfi_offset 7, -4
 1754 0002 00AF     		add	r7, sp, #0
 1755              		.cfi_def_cfa_register 7
 693:..\src/interruptions.c ****     
 694:..\src/interruptions.c **** }
 1756              		.loc 1 694 0
 1757 0004 00BF     		nop
 1758 0006 BD46     		mov	sp, r7
 1759              		.cfi_def_cfa_register 13
 1760              		@ sp needed
 1761 0008 80BC     		pop	{r7}
 1762              		.cfi_restore 7
 1763              		.cfi_def_cfa_offset 0
 1764 000a 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE72:
 1767              		.size	overcurrent_control, .-overcurrent_control
 1768              		.section	.text.pwm_limit_search,"ax",%progbits
 1769              		.align	2
 1770              		.global	pwm_limit_search
 1771              		.thumb
 1772              		.thumb_func
 1773              		.type	pwm_limit_search, %function
 1774              	pwm_limit_search:
 1775              	.LFB73:
 695:..\src/interruptions.c **** 
 696:..\src/interruptions.c **** //==============================================================================
 697:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
 698:..\src/interruptions.c **** //==============================================================================
 699:..\src/interruptions.c **** 
 700:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 1776              		.loc 1 700 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 0000 80B4     		push	{r7}
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 0002 83B0     		sub	sp, sp, #12
 1785              		.cfi_def_cfa_offset 16
 1786 0004 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 0006 0346     		mov	r3, r0
 1789 0008 FB71     		strb	r3, [r7, #7]
 701:..\src/interruptions.c **** 
 702:..\src/interruptions.c **** }
 1790              		.loc 1 702 0
 1791 000a 00BF     		nop
 1792 000c 0C37     		adds	r7, r7, #12
 1793              		.cfi_def_cfa_offset 4
 1794 000e BD46     		mov	sp, r7
 1795              		.cfi_def_cfa_register 13
 1796              		@ sp needed
 1797 0010 80BC     		pop	{r7}
 1798              		.cfi_restore 7
 1799              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 46


 1800 0012 7047     		bx	lr
 1801              		.cfi_endproc
 1802              	.LFE73:
 1803              		.size	pwm_limit_search, .-pwm_limit_search
 1804              		.section	.text.cycles_counter_update,"ax",%progbits
 1805              		.align	2
 1806              		.global	cycles_counter_update
 1807              		.thumb
 1808              		.thumb_func
 1809              		.type	cycles_counter_update, %function
 1810              	cycles_counter_update:
 1811              	.LFB74:
 703:..\src/interruptions.c **** 
 704:..\src/interruptions.c **** //==============================================================================
 705:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
 706:..\src/interruptions.c **** //==============================================================================
 707:..\src/interruptions.c **** 
 708:..\src/interruptions.c **** void cycles_counter_update() {
 1812              		.loc 1 708 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 0
 1815              		@ frame_needed = 1, uses_anonymous_args = 0
 1816              		@ link register save eliminated.
 1817 0000 80B4     		push	{r7}
 1818              		.cfi_def_cfa_offset 4
 1819              		.cfi_offset 7, -4
 1820 0002 00AF     		add	r7, sp, #0
 1821              		.cfi_def_cfa_register 7
 709:..\src/interruptions.c **** 	
 710:..\src/interruptions.c **** }
 1822              		.loc 1 710 0
 1823 0004 00BF     		nop
 1824 0006 BD46     		mov	sp, r7
 1825              		.cfi_def_cfa_register 13
 1826              		@ sp needed
 1827 0008 80BC     		pop	{r7}
 1828              		.cfi_restore 7
 1829              		.cfi_def_cfa_offset 0
 1830 000a 7047     		bx	lr
 1831              		.cfi_endproc
 1832              	.LFE74:
 1833              		.size	cycles_counter_update, .-cycles_counter_update
 1834              		.section	.text.save_cycles_eeprom,"ax",%progbits
 1835              		.align	2
 1836              		.global	save_cycles_eeprom
 1837              		.thumb
 1838              		.thumb_func
 1839              		.type	save_cycles_eeprom, %function
 1840              	save_cycles_eeprom:
 1841              	.LFB75:
 711:..\src/interruptions.c **** 
 712:..\src/interruptions.c **** //==============================================================================
 713:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
 714:..\src/interruptions.c **** //==============================================================================
 715:..\src/interruptions.c **** 
 716:..\src/interruptions.c **** void save_cycles_eeprom() {
 1842              		.loc 1 716 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 47


 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 1, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
 1847 0000 80B4     		push	{r7}
 1848              		.cfi_def_cfa_offset 4
 1849              		.cfi_offset 7, -4
 1850 0002 00AF     		add	r7, sp, #0
 1851              		.cfi_def_cfa_register 7
 717:..\src/interruptions.c **** 
 718:..\src/interruptions.c **** }
 1852              		.loc 1 718 0
 1853 0004 00BF     		nop
 1854 0006 BD46     		mov	sp, r7
 1855              		.cfi_def_cfa_register 13
 1856              		@ sp needed
 1857 0008 80BC     		pop	{r7}
 1858              		.cfi_restore 7
 1859              		.cfi_def_cfa_offset 0
 1860 000a 7047     		bx	lr
 1861              		.cfi_endproc
 1862              	.LFE75:
 1863              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 1864              		.bss
 1865              	state.9774:
 1866 0000 00       		.space	1
 1867 0001 000000   		.align	2
 1868              	rx_queue.9778:
 1869 0004 000000   		.space	3
 1870              	data_packet_length.9776:
 1871 0007 00       		.space	1
 1872              	data_packet_index.9775:
 1873 0008 00       		.space	1
 1874 0009 000000   		.align	2
 1875              	data_packet_buffer.9777:
 1876 000c 00000000 		.space	128
 1876      00000000 
 1876      00000000 
 1876      00000000 
 1876      00000000 
 1877              	current_emg.9799:
 1878 008c 00       		.space	1
 1879 008d 000000   		.align	2
 1880              	motor_dir.9821:
 1881 0090 0000     		.space	2
 1882              	idx.9832:
 1883 0092 00       		.space	1
 1884              		.text
 1885              	.Letext0:
 1886              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1887              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1888              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1889              		.file 5 "..\\src\\globals.h"
 1890              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1891              		.file 7 "..\\src\\commands.h"
 1892              		.section	.debug_info,"",%progbits
 1893              	.Ldebug_info0:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 48


 1894 0000 BC070000 		.4byte	0x7bc
 1895 0004 0400     		.2byte	0x4
 1896 0006 00000000 		.4byte	.Ldebug_abbrev0
 1897 000a 04       		.byte	0x4
 1898 000b 01       		.uleb128 0x1
 1899 000c 49000000 		.4byte	.LASF119
 1900 0010 0C       		.byte	0xc
 1901 0011 BE010000 		.4byte	.LASF120
 1902 0015 FB050000 		.4byte	.LASF121
 1903 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1904 001d 00000000 		.4byte	0
 1905 0021 00000000 		.4byte	.Ldebug_line0
 1906 0025 02       		.uleb128 0x2
 1907 0026 01       		.byte	0x1
 1908 0027 06       		.byte	0x6
 1909 0028 33000000 		.4byte	.LASF0
 1910 002c 02       		.uleb128 0x2
 1911 002d 01       		.byte	0x1
 1912 002e 08       		.byte	0x8
 1913 002f D3040000 		.4byte	.LASF1
 1914 0033 02       		.uleb128 0x2
 1915 0034 02       		.byte	0x2
 1916 0035 05       		.byte	0x5
 1917 0036 E1040000 		.4byte	.LASF2
 1918 003a 02       		.uleb128 0x2
 1919 003b 02       		.byte	0x2
 1920 003c 07       		.byte	0x7
 1921 003d F1020000 		.4byte	.LASF3
 1922 0041 03       		.uleb128 0x3
 1923 0042 77030000 		.4byte	.LASF9
 1924 0046 02       		.byte	0x2
 1925 0047 3F       		.byte	0x3f
 1926 0048 4C000000 		.4byte	0x4c
 1927 004c 02       		.uleb128 0x2
 1928 004d 04       		.byte	0x4
 1929 004e 05       		.byte	0x5
 1930 004f 94010000 		.4byte	.LASF4
 1931 0053 02       		.uleb128 0x2
 1932 0054 04       		.byte	0x4
 1933 0055 07       		.byte	0x7
 1934 0056 61050000 		.4byte	.LASF5
 1935 005a 02       		.uleb128 0x2
 1936 005b 08       		.byte	0x8
 1937 005c 05       		.byte	0x5
 1938 005d 42010000 		.4byte	.LASF6
 1939 0061 02       		.uleb128 0x2
 1940 0062 08       		.byte	0x8
 1941 0063 07       		.byte	0x7
 1942 0064 FC000000 		.4byte	.LASF7
 1943 0068 04       		.uleb128 0x4
 1944 0069 04       		.byte	0x4
 1945 006a 05       		.byte	0x5
 1946 006b 696E7400 		.ascii	"int\000"
 1947 006f 02       		.uleb128 0x2
 1948 0070 04       		.byte	0x4
 1949 0071 07       		.byte	0x7
 1950 0072 7B020000 		.4byte	.LASF8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 49


 1951 0076 03       		.uleb128 0x3
 1952 0077 CB040000 		.4byte	.LASF10
 1953 007b 03       		.byte	0x3
 1954 007c 2C       		.byte	0x2c
 1955 007d 41000000 		.4byte	0x41
 1956 0081 05       		.uleb128 0x5
 1957 0082 EB020000 		.4byte	.LASF11
 1958 0086 04       		.byte	0x4
 1959 0087 E401     		.2byte	0x1e4
 1960 0089 2C000000 		.4byte	0x2c
 1961 008d 05       		.uleb128 0x5
 1962 008e 00000000 		.4byte	.LASF12
 1963 0092 04       		.byte	0x4
 1964 0093 E501     		.2byte	0x1e5
 1965 0095 3A000000 		.4byte	0x3a
 1966 0099 05       		.uleb128 0x5
 1967 009a FD010000 		.4byte	.LASF13
 1968 009e 04       		.byte	0x4
 1969 009f E601     		.2byte	0x1e6
 1970 00a1 53000000 		.4byte	0x53
 1971 00a5 05       		.uleb128 0x5
 1972 00a6 FA060000 		.4byte	.LASF14
 1973 00aa 04       		.byte	0x4
 1974 00ab E801     		.2byte	0x1e8
 1975 00ad 33000000 		.4byte	0x33
 1976 00b1 05       		.uleb128 0x5
 1977 00b2 67010000 		.4byte	.LASF15
 1978 00b6 04       		.byte	0x4
 1979 00b7 E901     		.2byte	0x1e9
 1980 00b9 4C000000 		.4byte	0x4c
 1981 00bd 02       		.uleb128 0x2
 1982 00be 04       		.byte	0x4
 1983 00bf 04       		.byte	0x4
 1984 00c0 8D040000 		.4byte	.LASF16
 1985 00c4 02       		.uleb128 0x2
 1986 00c5 08       		.byte	0x8
 1987 00c6 04       		.byte	0x4
 1988 00c7 D5010000 		.4byte	.LASF17
 1989 00cb 02       		.uleb128 0x2
 1990 00cc 01       		.byte	0x1
 1991 00cd 08       		.byte	0x8
 1992 00ce 7A050000 		.4byte	.LASF18
 1993 00d2 05       		.uleb128 0x5
 1994 00d3 62010000 		.4byte	.LASF19
 1995 00d7 04       		.byte	0x4
 1996 00d8 8E02     		.2byte	0x28e
 1997 00da DE000000 		.4byte	0xde
 1998 00de 06       		.uleb128 0x6
 1999 00df 81000000 		.4byte	0x81
 2000 00e3 02       		.uleb128 0x2
 2001 00e4 08       		.byte	0x8
 2002 00e5 04       		.byte	0x4
 2003 00e6 D7030000 		.4byte	.LASF20
 2004 00ea 02       		.uleb128 0x2
 2005 00eb 04       		.byte	0x4
 2006 00ec 07       		.byte	0x7
 2007 00ed AF030000 		.4byte	.LASF21
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 50


 2008 00f1 07       		.uleb128 0x7
 2009 00f2 22030000 		.4byte	.LASF122
 2010 00f6 01       		.byte	0x1
 2011 00f7 2C000000 		.4byte	0x2c
 2012 00fb 07       		.byte	0x7
 2013 00fc BB       		.byte	0xbb
 2014 00fd 32010000 		.4byte	0x132
 2015 0101 08       		.uleb128 0x8
 2016 0102 A7050000 		.4byte	.LASF22
 2017 0106 00       		.byte	0
 2018 0107 08       		.uleb128 0x8
 2019 0108 0E030000 		.4byte	.LASF23
 2020 010c 01       		.byte	0x1
 2021 010d 08       		.uleb128 0x8
 2022 010e 0D020000 		.4byte	.LASF24
 2023 0112 02       		.byte	0x2
 2024 0113 08       		.uleb128 0x8
 2025 0114 C0060000 		.4byte	.LASF25
 2026 0118 03       		.byte	0x3
 2027 0119 08       		.uleb128 0x8
 2028 011a B2020000 		.4byte	.LASF26
 2029 011e 04       		.byte	0x4
 2030 011f 08       		.uleb128 0x8
 2031 0120 48040000 		.4byte	.LASF27
 2032 0124 05       		.byte	0x5
 2033 0125 08       		.uleb128 0x8
 2034 0126 3B020000 		.4byte	.LASF28
 2035 012a 06       		.byte	0x6
 2036 012b 08       		.uleb128 0x8
 2037 012c A1060000 		.4byte	.LASF29
 2038 0130 07       		.byte	0x7
 2039 0131 00       		.byte	0
 2040 0132 09       		.uleb128 0x9
 2041 0133 8E050000 		.4byte	.LASF33
 2042 0137 86       		.byte	0x86
 2043 0138 05       		.byte	0x5
 2044 0139 9B       		.byte	0x9b
 2045 013a 6F010000 		.4byte	0x16f
 2046 013e 0A       		.uleb128 0xa
 2047 013f C6050000 		.4byte	.LASF30
 2048 0143 05       		.byte	0x5
 2049 0144 9C       		.byte	0x9c
 2050 0145 6F010000 		.4byte	0x16f
 2051 0149 00       		.byte	0
 2052 014a 0A       		.uleb128 0xa
 2053 014b 73050000 		.4byte	.LASF31
 2054 014f 05       		.byte	0x5
 2055 0150 9D       		.byte	0x9d
 2056 0151 A5000000 		.4byte	0xa5
 2057 0155 80       		.byte	0x80
 2058 0156 0B       		.uleb128 0xb
 2059 0157 696E6400 		.ascii	"ind\000"
 2060 015b 05       		.byte	0x5
 2061 015c 9E       		.byte	0x9e
 2062 015d A5000000 		.4byte	0xa5
 2063 0161 82       		.byte	0x82
 2064 0162 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 51


 2065 0163 50010000 		.4byte	.LASF32
 2066 0167 05       		.byte	0x5
 2067 0168 9F       		.byte	0x9f
 2068 0169 81000000 		.4byte	0x81
 2069 016d 84       		.byte	0x84
 2070 016e 00       		.byte	0
 2071 016f 0C       		.uleb128 0xc
 2072 0170 81000000 		.4byte	0x81
 2073 0174 7F010000 		.4byte	0x17f
 2074 0178 0D       		.uleb128 0xd
 2075 0179 EA000000 		.4byte	0xea
 2076 017d 7F       		.byte	0x7f
 2077 017e 00       		.byte	0
 2078 017f 09       		.uleb128 0x9
 2079 0180 E3030000 		.4byte	.LASF34
 2080 0184 10       		.byte	0x10
 2081 0185 05       		.byte	0x5
 2082 0186 A9       		.byte	0xa9
 2083 0187 AF010000 		.4byte	0x1af
 2084 018b 0B       		.uleb128 0xb
 2085 018c 696400   		.ascii	"id\000"
 2086 018f 05       		.byte	0x5
 2087 0190 AA       		.byte	0xaa
 2088 0191 81000000 		.4byte	0x81
 2089 0195 00       		.byte	0
 2090 0196 0A       		.uleb128 0xa
 2091 0197 1D010000 		.4byte	.LASF35
 2092 019b 05       		.byte	0x5
 2093 019c AB       		.byte	0xab
 2094 019d 81000000 		.4byte	0x81
 2095 01a1 01       		.byte	0x1
 2096 01a2 0A       		.uleb128 0xa
 2097 01a3 3C030000 		.4byte	.LASF36
 2098 01a7 05       		.byte	0x5
 2099 01a8 AC       		.byte	0xac
 2100 01a9 AF010000 		.4byte	0x1af
 2101 01ad 02       		.byte	0x2
 2102 01ae 00       		.byte	0
 2103 01af 0C       		.uleb128 0xc
 2104 01b0 81000000 		.4byte	0x81
 2105 01b4 BF010000 		.4byte	0x1bf
 2106 01b8 0D       		.uleb128 0xd
 2107 01b9 EA000000 		.4byte	0xea
 2108 01bd 0D       		.byte	0xd
 2109 01be 00       		.byte	0
 2110 01bf 09       		.uleb128 0x9
 2111 01c0 04020000 		.4byte	.LASF37
 2112 01c4 10       		.byte	0x10
 2113 01c5 05       		.byte	0x5
 2114 01c6 B3       		.byte	0xb3
 2115 01c7 08020000 		.4byte	0x208
 2116 01cb 0A       		.uleb128 0xa
 2117 01cc 30030000 		.4byte	.LASF38
 2118 01d0 05       		.byte	0x5
 2119 01d1 B5       		.byte	0xb5
 2120 01d2 B1000000 		.4byte	0xb1
 2121 01d6 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 52


 2122 01d7 0A       		.uleb128 0xa
 2123 01d8 26040000 		.4byte	.LASF39
 2124 01dc 05       		.byte	0x5
 2125 01dd B6       		.byte	0xb6
 2126 01de B1000000 		.4byte	0xb1
 2127 01e2 04       		.byte	0x4
 2128 01e3 0A       		.uleb128 0xa
 2129 01e4 82040000 		.4byte	.LASF40
 2130 01e8 05       		.byte	0x5
 2131 01e9 B7       		.byte	0xb7
 2132 01ea 81000000 		.4byte	0x81
 2133 01ee 08       		.byte	0x8
 2134 01ef 0B       		.uleb128 0xb
 2135 01f0 72657300 		.ascii	"res\000"
 2136 01f4 05       		.byte	0x5
 2137 01f5 B8       		.byte	0xb8
 2138 01f6 81000000 		.4byte	0x81
 2139 01fa 09       		.byte	0x9
 2140 01fb 0A       		.uleb128 0xa
 2141 01fc 3C030000 		.4byte	.LASF36
 2142 0200 05       		.byte	0x5
 2143 0201 B9       		.byte	0xb9
 2144 0202 08020000 		.4byte	0x208
 2145 0206 0A       		.byte	0xa
 2146 0207 00       		.byte	0
 2147 0208 0C       		.uleb128 0xc
 2148 0209 81000000 		.4byte	0x81
 2149 020d 18020000 		.4byte	0x218
 2150 0211 0D       		.uleb128 0xd
 2151 0212 EA000000 		.4byte	0xea
 2152 0216 05       		.byte	0x5
 2153 0217 00       		.byte	0
 2154 0218 09       		.uleb128 0x9
 2155 0219 47050000 		.4byte	.LASF41
 2156 021d 10       		.byte	0x10
 2157 021e 05       		.byte	0x5
 2158 021f C1       		.byte	0xc1
 2159 0220 61020000 		.4byte	0x261
 2160 0224 0A       		.uleb128 0xa
 2161 0225 34010000 		.4byte	.LASF42
 2162 0229 05       		.byte	0x5
 2163 022a C2       		.byte	0xc2
 2164 022b 61020000 		.4byte	0x261
 2165 022f 00       		.byte	0
 2166 0230 0A       		.uleb128 0xa
 2167 0231 E2060000 		.4byte	.LASF43
 2168 0235 05       		.byte	0x5
 2169 0236 C3       		.byte	0xc3
 2170 0237 71020000 		.4byte	0x271
 2171 023b 04       		.byte	0x4
 2172 023c 0A       		.uleb128 0xa
 2173 023d D8060000 		.4byte	.LASF44
 2174 0241 05       		.byte	0x5
 2175 0242 C4       		.byte	0xc4
 2176 0243 81020000 		.4byte	0x281
 2177 0247 0C       		.byte	0xc
 2178 0248 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 53


 2179 0249 30020000 		.4byte	.LASF45
 2180 024d 05       		.byte	0x5
 2181 024e C5       		.byte	0xc5
 2182 024f 81000000 		.4byte	0x81
 2183 0253 0E       		.byte	0xe
 2184 0254 0A       		.uleb128 0xa
 2185 0255 3C030000 		.4byte	.LASF36
 2186 0259 05       		.byte	0x5
 2187 025a C6       		.byte	0xc6
 2188 025b 91020000 		.4byte	0x291
 2189 025f 0F       		.byte	0xf
 2190 0260 00       		.byte	0
 2191 0261 0C       		.uleb128 0xc
 2192 0262 8D000000 		.4byte	0x8d
 2193 0266 71020000 		.4byte	0x271
 2194 026a 0D       		.uleb128 0xd
 2195 026b EA000000 		.4byte	0xea
 2196 026f 01       		.byte	0x1
 2197 0270 00       		.byte	0
 2198 0271 0C       		.uleb128 0xc
 2199 0272 99000000 		.4byte	0x99
 2200 0276 81020000 		.4byte	0x281
 2201 027a 0D       		.uleb128 0xd
 2202 027b EA000000 		.4byte	0xea
 2203 027f 01       		.byte	0x1
 2204 0280 00       		.byte	0
 2205 0281 0C       		.uleb128 0xc
 2206 0282 81000000 		.4byte	0x81
 2207 0286 91020000 		.4byte	0x291
 2208 028a 0D       		.uleb128 0xd
 2209 028b EA000000 		.4byte	0xea
 2210 028f 01       		.byte	0x1
 2211 0290 00       		.byte	0
 2212 0291 0C       		.uleb128 0xc
 2213 0292 81000000 		.4byte	0x81
 2214 0296 A1020000 		.4byte	0x2a1
 2215 029a 0D       		.uleb128 0xd
 2216 029b EA000000 		.4byte	0xea
 2217 029f 00       		.byte	0
 2218 02a0 00       		.byte	0
 2219 02a1 09       		.uleb128 0x9
 2220 02a2 16050000 		.4byte	.LASF46
 2221 02a6 10       		.byte	0x10
 2222 02a7 05       		.byte	0x5
 2223 02a8 CD       		.byte	0xcd
 2224 02a9 D2020000 		.4byte	0x2d2
 2225 02ad 0A       		.uleb128 0xa
 2226 02ae 68020000 		.4byte	.LASF47
 2227 02b2 05       		.byte	0x5
 2228 02b3 CE       		.byte	0xce
 2229 02b4 81000000 		.4byte	0x81
 2230 02b8 00       		.byte	0
 2231 02b9 0A       		.uleb128 0xa
 2232 02ba 0D050000 		.4byte	.LASF48
 2233 02be 05       		.byte	0x5
 2234 02bf CF       		.byte	0xcf
 2235 02c0 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 54


 2236 02c4 01       		.byte	0x1
 2237 02c5 0A       		.uleb128 0xa
 2238 02c6 3C030000 		.4byte	.LASF36
 2239 02ca 05       		.byte	0x5
 2240 02cb D0       		.byte	0xd0
 2241 02cc AF010000 		.4byte	0x1af
 2242 02d0 02       		.byte	0x2
 2243 02d1 00       		.byte	0
 2244 02d2 09       		.uleb128 0x9
 2245 02d3 15000000 		.4byte	.LASF49
 2246 02d7 10       		.byte	0x10
 2247 02d8 05       		.byte	0x5
 2248 02d9 D7       		.byte	0xd7
 2249 02da 27030000 		.4byte	0x327
 2250 02de 0A       		.uleb128 0xa
 2251 02df 83060000 		.4byte	.LASF50
 2252 02e3 05       		.byte	0x5
 2253 02e4 D8       		.byte	0xd8
 2254 02e5 B1000000 		.4byte	0xb1
 2255 02e9 00       		.byte	0
 2256 02ea 0A       		.uleb128 0xa
 2257 02eb B8030000 		.4byte	.LASF51
 2258 02ef 05       		.byte	0x5
 2259 02f0 D9       		.byte	0xd9
 2260 02f1 BD000000 		.4byte	0xbd
 2261 02f5 04       		.byte	0x4
 2262 02f6 0A       		.uleb128 0xa
 2263 02f7 49030000 		.4byte	.LASF52
 2264 02fb 05       		.byte	0x5
 2265 02fc DA       		.byte	0xda
 2266 02fd BD000000 		.4byte	0xbd
 2267 0301 08       		.byte	0x8
 2268 0302 0A       		.uleb128 0xa
 2269 0303 5A030000 		.4byte	.LASF53
 2270 0307 05       		.byte	0x5
 2271 0308 DB       		.byte	0xdb
 2272 0309 81000000 		.4byte	0x81
 2273 030d 0C       		.byte	0xc
 2274 030e 0A       		.uleb128 0xa
 2275 030f CD050000 		.4byte	.LASF54
 2276 0313 05       		.byte	0x5
 2277 0314 DC       		.byte	0xdc
 2278 0315 81000000 		.4byte	0x81
 2279 0319 0D       		.byte	0xd
 2280 031a 0A       		.uleb128 0xa
 2281 031b 3C030000 		.4byte	.LASF36
 2282 031f 05       		.byte	0x5
 2283 0320 DD       		.byte	0xdd
 2284 0321 81020000 		.4byte	0x281
 2285 0325 0E       		.byte	0xe
 2286 0326 00       		.byte	0
 2287 0327 09       		.uleb128 0x9
 2288 0328 3F000000 		.4byte	.LASF55
 2289 032c 60       		.byte	0x60
 2290 032d 05       		.byte	0x5
 2291 032e E7       		.byte	0xe7
 2292 032f 86030000 		.4byte	0x386
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 55


 2293 0333 0A       		.uleb128 0xa
 2294 0334 08050000 		.4byte	.LASF56
 2295 0338 05       		.byte	0x5
 2296 0339 E8       		.byte	0xe8
 2297 033a 81000000 		.4byte	0x81
 2298 033e 00       		.byte	0
 2299 033f 0A       		.uleb128 0xa
 2300 0340 3C030000 		.4byte	.LASF36
 2301 0344 05       		.byte	0x5
 2302 0345 E9       		.byte	0xe9
 2303 0346 86030000 		.4byte	0x386
 2304 034a 01       		.byte	0x1
 2305 034b 0B       		.uleb128 0xb
 2306 034c 64657600 		.ascii	"dev\000"
 2307 0350 05       		.byte	0x5
 2308 0351 EA       		.byte	0xea
 2309 0352 7F010000 		.4byte	0x17f
 2310 0356 10       		.byte	0x10
 2311 0357 0A       		.uleb128 0xa
 2312 0358 9C040000 		.4byte	.LASF57
 2313 035c 05       		.byte	0x5
 2314 035d EB       		.byte	0xeb
 2315 035e BF010000 		.4byte	0x1bf
 2316 0362 20       		.byte	0x20
 2317 0363 0B       		.uleb128 0xb
 2318 0364 656D6700 		.ascii	"emg\000"
 2319 0368 05       		.byte	0x5
 2320 0369 EC       		.byte	0xec
 2321 036a 18020000 		.4byte	0x218
 2322 036e 30       		.byte	0x30
 2323 036f 0B       		.uleb128 0xb
 2324 0370 4D5300   		.ascii	"MS\000"
 2325 0373 05       		.byte	0x5
 2326 0374 ED       		.byte	0xed
 2327 0375 A1020000 		.4byte	0x2a1
 2328 0379 40       		.byte	0x40
 2329 037a 0B       		.uleb128 0xb
 2330 037b 464200   		.ascii	"FB\000"
 2331 037e 05       		.byte	0x5
 2332 037f EE       		.byte	0xee
 2333 0380 D2020000 		.4byte	0x2d2
 2334 0384 50       		.byte	0x50
 2335 0385 00       		.byte	0
 2336 0386 0C       		.uleb128 0xc
 2337 0387 81000000 		.4byte	0x81
 2338 038b 96030000 		.4byte	0x396
 2339 038f 0D       		.uleb128 0xd
 2340 0390 EA000000 		.4byte	0xea
 2341 0394 0E       		.byte	0xe
 2342 0395 00       		.byte	0
 2343 0396 09       		.uleb128 0x9
 2344 0397 EB040000 		.4byte	.LASF58
 2345 039b 08       		.byte	0x8
 2346 039c 05       		.byte	0x5
 2347 039d F5       		.byte	0xf5
 2348 039e BB030000 		.4byte	0x3bb
 2349 03a2 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 56


 2350 03a3 AC010000 		.4byte	.LASF59
 2351 03a7 05       		.byte	0x5
 2352 03a8 F6       		.byte	0xf6
 2353 03a9 B1000000 		.4byte	0xb1
 2354 03ad 00       		.byte	0
 2355 03ae 0A       		.uleb128 0xa
 2356 03af C6040000 		.4byte	.LASF60
 2357 03b3 05       		.byte	0x5
 2358 03b4 F7       		.byte	0xf7
 2359 03b5 B1000000 		.4byte	0xb1
 2360 03b9 04       		.byte	0x4
 2361 03ba 00       		.byte	0
 2362 03bb 0E       		.uleb128 0xe
 2363 03bc 4E050000 		.4byte	.LASF61
 2364 03c0 0C       		.byte	0xc
 2365 03c1 05       		.byte	0x5
 2366 03c2 5C01     		.2byte	0x15c
 2367 03c4 E3030000 		.4byte	0x3e3
 2368 03c8 0F       		.uleb128 0xf
 2369 03c9 656D6700 		.ascii	"emg\000"
 2370 03cd 05       		.byte	0x5
 2371 03ce 5D01     		.2byte	0x15d
 2372 03d0 E3030000 		.4byte	0x3e3
 2373 03d4 00       		.byte	0
 2374 03d5 10       		.uleb128 0x10
 2375 03d6 60040000 		.4byte	.LASF62
 2376 03da 05       		.byte	0x5
 2377 03db 5E01     		.2byte	0x15e
 2378 03dd BD000000 		.4byte	0xbd
 2379 03e1 08       		.byte	0x8
 2380 03e2 00       		.byte	0
 2381 03e3 0C       		.uleb128 0xc
 2382 03e4 B1000000 		.4byte	0xb1
 2383 03e8 F3030000 		.4byte	0x3f3
 2384 03ec 0D       		.uleb128 0xd
 2385 03ed EA000000 		.4byte	0xea
 2386 03f1 01       		.byte	0x1
 2387 03f2 00       		.byte	0
 2388 03f3 11       		.uleb128 0x11
 2389 03f4 4F020000 		.4byte	.LASF63
 2390 03f8 01       		.byte	0x1
 2391 03f9 62       		.byte	0x62
 2392 03fa 00000000 		.4byte	.LFB64
 2393 03fe 18000000 		.4byte	.LFE64-.LFB64
 2394 0402 01       		.uleb128 0x1
 2395 0403 9C       		.byte	0x9c
 2396 0404 11       		.uleb128 0x11
 2397 0405 9C030000 		.4byte	.LASF64
 2398 0409 01       		.byte	0x1
 2399 040a 6D       		.byte	0x6d
 2400 040b 00000000 		.4byte	.LFB65
 2401 040f 20000000 		.4byte	.LFE65-.LFB65
 2402 0413 01       		.uleb128 0x1
 2403 0414 9C       		.byte	0x9c
 2404 0415 12       		.uleb128 0x12
 2405 0416 DC010000 		.4byte	.LASF74
 2406 041a 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 57


 2407 041b 86       		.byte	0x86
 2408 041c 00000000 		.4byte	.LFB66
 2409 0420 0C020000 		.4byte	.LFE66-.LFB66
 2410 0424 01       		.uleb128 0x1
 2411 0425 9C       		.byte	0x9c
 2412 0426 AA040000 		.4byte	0x4aa
 2413 042a 13       		.uleb128 0x13
 2414 042b 8E010000 		.4byte	.LASF65
 2415 042f 01       		.byte	0x1
 2416 0430 89       		.byte	0x89
 2417 0431 81000000 		.4byte	0x81
 2418 0435 05       		.uleb128 0x5
 2419 0436 03       		.byte	0x3
 2420 0437 00000000 		.4byte	state.9774
 2421 043b 13       		.uleb128 0x13
 2422 043c D9020000 		.4byte	.LASF66
 2423 0440 01       		.byte	0x1
 2424 0441 8C       		.byte	0x8c
 2425 0442 81000000 		.4byte	0x81
 2426 0446 05       		.uleb128 0x5
 2427 0447 03       		.byte	0x3
 2428 0448 08000000 		.4byte	data_packet_index.9775
 2429 044c 13       		.uleb128 0x13
 2430 044d E8050000 		.4byte	.LASF67
 2431 0451 01       		.byte	0x1
 2432 0452 8D       		.byte	0x8d
 2433 0453 81000000 		.4byte	0x81
 2434 0457 05       		.uleb128 0x5
 2435 0458 03       		.byte	0x3
 2436 0459 07000000 		.4byte	data_packet_length.9776
 2437 045d 13       		.uleb128 0x13
 2438 045e 70060000 		.4byte	.LASF68
 2439 0462 01       		.byte	0x1
 2440 0463 8E       		.byte	0x8e
 2441 0464 6F010000 		.4byte	0x16f
 2442 0468 05       		.uleb128 0x5
 2443 0469 03       		.byte	0x3
 2444 046a 0C000000 		.4byte	data_packet_buffer.9777
 2445 046e 13       		.uleb128 0x13
 2446 046f 0A040000 		.4byte	.LASF69
 2447 0473 01       		.byte	0x1
 2448 0474 8F       		.byte	0x8f
 2449 0475 AA040000 		.4byte	0x4aa
 2450 0479 05       		.uleb128 0x5
 2451 047a 03       		.byte	0x3
 2452 047b 04000000 		.4byte	rx_queue.9778
 2453 047f 13       		.uleb128 0x13
 2454 0480 88020000 		.4byte	.LASF70
 2455 0484 01       		.byte	0x1
 2456 0485 92       		.byte	0x92
 2457 0486 81000000 		.4byte	0x81
 2458 048a 02       		.uleb128 0x2
 2459 048b 91       		.byte	0x91
 2460 048c 75       		.sleb128 -11
 2461 048d 13       		.uleb128 0x13
 2462 048e 8F030000 		.4byte	.LASF71
 2463 0492 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 58


 2464 0493 93       		.byte	0x93
 2465 0494 81000000 		.4byte	0x81
 2466 0498 02       		.uleb128 0x2
 2467 0499 91       		.byte	0x91
 2468 049a 77       		.sleb128 -9
 2469 049b 13       		.uleb128 0x13
 2470 049c 81030000 		.4byte	.LASF72
 2471 04a0 01       		.byte	0x1
 2472 04a1 94       		.byte	0x94
 2473 04a2 81000000 		.4byte	0x81
 2474 04a6 02       		.uleb128 0x2
 2475 04a7 91       		.byte	0x91
 2476 04a8 76       		.sleb128 -10
 2477 04a9 00       		.byte	0
 2478 04aa 0C       		.uleb128 0xc
 2479 04ab 81000000 		.4byte	0x81
 2480 04af BA040000 		.4byte	0x4ba
 2481 04b3 0D       		.uleb128 0xd
 2482 04b4 EA000000 		.4byte	0xea
 2483 04b8 02       		.byte	0x2
 2484 04b9 00       		.byte	0
 2485 04ba 14       		.uleb128 0x14
 2486 04bb C6020000 		.4byte	.LASF73
 2487 04bf 01       		.byte	0x1
 2488 04c0 0B01     		.2byte	0x10b
 2489 04c2 00000000 		.4byte	.LFB67
 2490 04c6 08020000 		.4byte	.LFE67-.LFB67
 2491 04ca 01       		.uleb128 0x1
 2492 04cb 9C       		.byte	0x9c
 2493 04cc 15       		.uleb128 0x15
 2494 04cd 6D010000 		.4byte	.LASF75
 2495 04d1 01       		.byte	0x1
 2496 04d2 8901     		.2byte	0x189
 2497 04d4 00000000 		.4byte	.LFB68
 2498 04d8 F0020000 		.4byte	.LFE68-.LFB68
 2499 04dc 01       		.uleb128 0x1
 2500 04dd 9C       		.byte	0x9c
 2501 04de 21050000 		.4byte	0x521
 2502 04e2 16       		.uleb128 0x16
 2503 04e3 B2040000 		.4byte	.LASF76
 2504 04e7 01       		.byte	0x1
 2505 04e8 8B01     		.2byte	0x18b
 2506 04ea B1000000 		.4byte	0xb1
 2507 04ee 02       		.uleb128 0x2
 2508 04ef 91       		.byte	0x91
 2509 04f0 70       		.sleb128 -16
 2510 04f1 16       		.uleb128 0x16
 2511 04f2 BC040000 		.4byte	.LASF77
 2512 04f6 01       		.byte	0x1
 2513 04f7 8B01     		.2byte	0x18b
 2514 04f9 B1000000 		.4byte	0xb1
 2515 04fd 02       		.uleb128 0x2
 2516 04fe 91       		.byte	0x91
 2517 04ff 6C       		.sleb128 -20
 2518 0500 17       		.uleb128 0x17
 2519 0501 534800   		.ascii	"SH\000"
 2520 0504 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 59


 2521 0505 8C01     		.2byte	0x18c
 2522 0507 21050000 		.4byte	0x521
 2523 050b 02       		.uleb128 0x2
 2524 050c 91       		.byte	0x91
 2525 050d 74       		.sleb128 -12
 2526 050e 16       		.uleb128 0x16
 2527 050f 00070000 		.4byte	.LASF78
 2528 0513 01       		.byte	0x1
 2529 0514 8E01     		.2byte	0x18e
 2530 0516 81000000 		.4byte	0x81
 2531 051a 05       		.uleb128 0x5
 2532 051b 03       		.byte	0x3
 2533 051c 8C000000 		.4byte	current_emg.9799
 2534 0520 00       		.byte	0
 2535 0521 18       		.uleb128 0x18
 2536 0522 04       		.byte	0x4
 2537 0523 BF010000 		.4byte	0x1bf
 2538 0527 19       		.uleb128 0x19
 2539 0528 ED030000 		.4byte	.LASF81
 2540 052c 01       		.byte	0x1
 2541 052d 1602     		.2byte	0x216
 2542 052f 00000000 		.4byte	.LFB69
 2543 0533 C0000000 		.4byte	.LFE69-.LFB69
 2544 0537 01       		.uleb128 0x1
 2545 0538 9C       		.byte	0x9c
 2546 0539 6E050000 		.4byte	0x56e
 2547 053d 1A       		.uleb128 0x1a
 2548 053e 69647800 		.ascii	"idx\000"
 2549 0542 01       		.byte	0x1
 2550 0543 1602     		.2byte	0x216
 2551 0545 81000000 		.4byte	0x81
 2552 0549 02       		.uleb128 0x2
 2553 054a 91       		.byte	0x91
 2554 054b 6F       		.sleb128 -17
 2555 054c 16       		.uleb128 0x16
 2556 054d 2F070000 		.4byte	.LASF79
 2557 0551 01       		.byte	0x1
 2558 0552 1802     		.2byte	0x218
 2559 0554 A5000000 		.4byte	0xa5
 2560 0558 02       		.uleb128 0x2
 2561 0559 91       		.byte	0x91
 2562 055a 76       		.sleb128 -10
 2563 055b 16       		.uleb128 0x16
 2564 055c F0060000 		.4byte	.LASF80
 2565 0560 01       		.byte	0x1
 2566 0561 1C02     		.2byte	0x21c
 2567 0563 81020000 		.4byte	0x281
 2568 0567 05       		.uleb128 0x5
 2569 0568 03       		.byte	0x3
 2570 0569 90000000 		.4byte	motor_dir.9821
 2571 056d 00       		.byte	0
 2572 056e 1B       		.uleb128 0x1b
 2573 056f E8000000 		.4byte	.LASF82
 2574 0573 01       		.byte	0x1
 2575 0574 4902     		.2byte	0x249
 2576 0576 00000000 		.4byte	.LFB70
 2577 057a 1A000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 60


 2578 057e 01       		.uleb128 0x1
 2579 057f 9C       		.byte	0x9c
 2580 0580 A3050000 		.4byte	0x5a3
 2581 0584 1C       		.uleb128 0x1c
 2582 0585 29020000 		.4byte	.LASF83
 2583 0589 01       		.byte	0x1
 2584 058a 4902     		.2byte	0x249
 2585 058c 81000000 		.4byte	0x81
 2586 0590 02       		.uleb128 0x2
 2587 0591 91       		.byte	0x91
 2588 0592 77       		.sleb128 -9
 2589 0593 1C       		.uleb128 0x1c
 2590 0594 A6040000 		.4byte	.LASF84
 2591 0598 01       		.byte	0x1
 2592 0599 4902     		.2byte	0x249
 2593 059b 81000000 		.4byte	0x81
 2594 059f 02       		.uleb128 0x2
 2595 05a0 91       		.byte	0x91
 2596 05a1 76       		.sleb128 -10
 2597 05a2 00       		.byte	0
 2598 05a3 1D       		.uleb128 0x1d
 2599 05a4 1F070000 		.4byte	.LASF85
 2600 05a8 01       		.byte	0x1
 2601 05a9 5102     		.2byte	0x251
 2602 05ab 00000000 		.4byte	.LFB71
 2603 05af 0C020000 		.4byte	.LFE71-.LFB71
 2604 05b3 01       		.uleb128 0x1
 2605 05b4 9C       		.byte	0x9c
 2606 05b5 DB050000 		.4byte	0x5db
 2607 05b9 16       		.uleb128 0x16
 2608 05ba E2000000 		.4byte	.LASF86
 2609 05be 01       		.byte	0x1
 2610 05bf 6502     		.2byte	0x265
 2611 05c1 B1000000 		.4byte	0xb1
 2612 05c5 02       		.uleb128 0x2
 2613 05c6 91       		.byte	0x91
 2614 05c7 6C       		.sleb128 -20
 2615 05c8 17       		.uleb128 0x17
 2616 05c9 69647800 		.ascii	"idx\000"
 2617 05cd 01       		.byte	0x1
 2618 05ce 6702     		.2byte	0x267
 2619 05d0 81000000 		.4byte	0x81
 2620 05d4 05       		.uleb128 0x5
 2621 05d5 03       		.byte	0x3
 2622 05d6 92000000 		.4byte	idx.9832
 2623 05da 00       		.byte	0
 2624 05db 1E       		.uleb128 0x1e
 2625 05dc 33050000 		.4byte	.LASF89
 2626 05e0 01       		.byte	0x1
 2627 05e1 B402     		.2byte	0x2b4
 2628 05e3 00000000 		.4byte	.LFB72
 2629 05e7 0C000000 		.4byte	.LFE72-.LFB72
 2630 05eb 01       		.uleb128 0x1
 2631 05ec 9C       		.byte	0x9c
 2632 05ed 1B       		.uleb128 0x1b
 2633 05ee 96050000 		.4byte	.LASF87
 2634 05f2 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 61


 2635 05f3 BC02     		.2byte	0x2bc
 2636 05f5 00000000 		.4byte	.LFB73
 2637 05f9 14000000 		.4byte	.LFE73-.LFB73
 2638 05fd 01       		.uleb128 0x1
 2639 05fe 9C       		.byte	0x9c
 2640 05ff 13060000 		.4byte	0x613
 2641 0603 1C       		.uleb128 0x1c
 2642 0604 07000000 		.4byte	.LASF88
 2643 0608 01       		.byte	0x1
 2644 0609 BC02     		.2byte	0x2bc
 2645 060b 81000000 		.4byte	0x81
 2646 060f 02       		.uleb128 0x2
 2647 0610 91       		.byte	0x91
 2648 0611 77       		.sleb128 -9
 2649 0612 00       		.byte	0
 2650 0613 1E       		.uleb128 0x1e
 2651 0614 32040000 		.4byte	.LASF90
 2652 0618 01       		.byte	0x1
 2653 0619 C402     		.2byte	0x2c4
 2654 061b 00000000 		.4byte	.LFB74
 2655 061f 0C000000 		.4byte	.LFE74-.LFB74
 2656 0623 01       		.uleb128 0x1
 2657 0624 9C       		.byte	0x9c
 2658 0625 1E       		.uleb128 0x1e
 2659 0626 F5040000 		.4byte	.LASF91
 2660 062a 01       		.byte	0x1
 2661 062b CC02     		.2byte	0x2cc
 2662 062d 00000000 		.4byte	.LFB75
 2663 0631 0C000000 		.4byte	.LFE75-.LFB75
 2664 0635 01       		.uleb128 0x1
 2665 0636 9C       		.byte	0x9c
 2666 0637 0C       		.uleb128 0xc
 2667 0638 47060000 		.4byte	0x647
 2668 063c 47060000 		.4byte	0x647
 2669 0640 0D       		.uleb128 0xd
 2670 0641 EA000000 		.4byte	0xea
 2671 0645 1C       		.byte	0x1c
 2672 0646 00       		.byte	0
 2673 0647 1F       		.uleb128 0x1f
 2674 0648 81000000 		.4byte	0x81
 2675 064c 13       		.uleb128 0x13
 2676 064d 20000000 		.4byte	.LASF92
 2677 0651 01       		.byte	0x1
 2678 0652 40       		.byte	0x40
 2679 0653 5D060000 		.4byte	0x65d
 2680 0657 05       		.uleb128 0x5
 2681 0658 03       		.byte	0x3
 2682 0659 00000000 		.4byte	pwm_preload_values
 2683 065d 1F       		.uleb128 0x1f
 2684 065e 37060000 		.4byte	0x637
 2685 0662 20       		.uleb128 0x20
 2686 0663 27010000 		.4byte	.LASF93
 2687 0667 06       		.byte	0x6
 2688 0668 1207     		.2byte	0x712
 2689 066a 6E060000 		.4byte	0x66e
 2690 066e 06       		.uleb128 0x6
 2691 066f 76000000 		.4byte	0x76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 62


 2692 0673 20       		.uleb128 0x20
 2693 0674 BB050000 		.4byte	.LASF94
 2694 0678 05       		.byte	0x5
 2695 0679 6D01     		.2byte	0x16d
 2696 067b BB030000 		.4byte	0x3bb
 2697 067f 20       		.uleb128 0x20
 2698 0680 25050000 		.4byte	.LASF95
 2699 0684 05       		.byte	0x5
 2700 0685 6D01     		.2byte	0x16d
 2701 0687 BB030000 		.4byte	0x3bb
 2702 068b 20       		.uleb128 0x20
 2703 068c 9D010000 		.4byte	.LASF96
 2704 0690 05       		.byte	0x5
 2705 0691 6601     		.2byte	0x166
 2706 0693 32010000 		.4byte	0x132
 2707 0697 20       		.uleb128 0x20
 2708 0698 13040000 		.4byte	.LASF97
 2709 069c 05       		.byte	0x5
 2710 069d 6C01     		.2byte	0x16c
 2711 069f 27030000 		.4byte	0x327
 2712 06a3 20       		.uleb128 0x20
 2713 06a4 0F000000 		.4byte	.LASF98
 2714 06a8 05       		.byte	0x5
 2715 06a9 6C01     		.2byte	0x16c
 2716 06ab 27030000 		.4byte	0x327
 2717 06af 20       		.uleb128 0x20
 2718 06b0 56010000 		.4byte	.LASF99
 2719 06b4 05       		.byte	0x5
 2720 06b5 6E01     		.2byte	0x16e
 2721 06b7 8D000000 		.4byte	0x8d
 2722 06bb 20       		.uleb128 0x20
 2723 06bc 19040000 		.4byte	.LASF100
 2724 06c0 05       		.byte	0x5
 2725 06c1 6F01     		.2byte	0x16f
 2726 06c3 8D000000 		.4byte	0x8d
 2727 06c7 20       		.uleb128 0x20
 2728 06c8 D7000000 		.4byte	.LASF101
 2729 06cc 05       		.byte	0x5
 2730 06cd 7001     		.2byte	0x170
 2731 06cf BD000000 		.4byte	0xbd
 2732 06d3 20       		.uleb128 0x20
 2733 06d4 82010000 		.4byte	.LASF102
 2734 06d8 05       		.byte	0x5
 2735 06d9 6901     		.2byte	0x169
 2736 06db B1000000 		.4byte	0xb1
 2737 06df 20       		.uleb128 0x20
 2738 06e0 7F050000 		.4byte	.LASF103
 2739 06e4 05       		.byte	0x5
 2740 06e5 6701     		.2byte	0x167
 2741 06e7 81000000 		.4byte	0x81
 2742 06eb 20       		.uleb128 0x20
 2743 06ec 9C020000 		.4byte	.LASF104
 2744 06f0 05       		.byte	0x5
 2745 06f1 1A01     		.2byte	0x11a
 2746 06f3 81000000 		.4byte	0x81
 2747 06f7 0C       		.uleb128 0xc
 2748 06f8 A5000000 		.4byte	0xa5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 63


 2749 06fc 07070000 		.4byte	0x707
 2750 0700 0D       		.uleb128 0xd
 2751 0701 EA000000 		.4byte	0xea
 2752 0705 02       		.byte	0x2
 2753 0706 00       		.byte	0
 2754 0707 20       		.uleb128 0x20
 2755 0708 B6010000 		.4byte	.LASF105
 2756 070c 05       		.byte	0x5
 2757 070d 2401     		.2byte	0x124
 2758 070f F7060000 		.4byte	0x6f7
 2759 0713 20       		.uleb128 0x20
 2760 0714 0C070000 		.4byte	.LASF106
 2761 0718 05       		.byte	0x5
 2762 0719 6A01     		.2byte	0x16a
 2763 071b 81000000 		.4byte	0x81
 2764 071f 20       		.uleb128 0x20
 2765 0720 5A050000 		.4byte	.LASF107
 2766 0724 05       		.byte	0x5
 2767 0725 5401     		.2byte	0x154
 2768 0727 B1000000 		.4byte	0xb1
 2769 072b 20       		.uleb128 0x20
 2770 072c 13010000 		.4byte	.LASF108
 2771 0730 05       		.byte	0x5
 2772 0731 5401     		.2byte	0x154
 2773 0733 B1000000 		.4byte	0xb1
 2774 0737 20       		.uleb128 0x20
 2775 0738 04030000 		.4byte	.LASF109
 2776 073c 05       		.byte	0x5
 2777 073d 5401     		.2byte	0x154
 2778 073f B1000000 		.4byte	0xb1
 2779 0743 20       		.uleb128 0x20
 2780 0744 18070000 		.4byte	.LASF110
 2781 0748 05       		.byte	0x5
 2782 0749 5501     		.2byte	0x155
 2783 074b 81020000 		.4byte	0x281
 2784 074f 20       		.uleb128 0x20
 2785 0750 A2010000 		.4byte	.LASF111
 2786 0754 05       		.byte	0x5
 2787 0755 5501     		.2byte	0x155
 2788 0757 81020000 		.4byte	0x281
 2789 075b 20       		.uleb128 0x20
 2790 075c CD030000 		.4byte	.LASF112
 2791 0760 05       		.byte	0x5
 2792 0761 5501     		.2byte	0x155
 2793 0763 81020000 		.4byte	0x281
 2794 0767 20       		.uleb128 0x20
 2795 0768 93040000 		.4byte	.LASF113
 2796 076c 05       		.byte	0x5
 2797 076d 5601     		.2byte	0x156
 2798 076f 81000000 		.4byte	0x81
 2799 0773 20       		.uleb128 0x20
 2800 0774 90020000 		.4byte	.LASF114
 2801 0778 05       		.byte	0x5
 2802 0779 5601     		.2byte	0x156
 2803 077b 81000000 		.4byte	0x81
 2804 077f 20       		.uleb128 0x20
 2805 0780 76040000 		.4byte	.LASF115
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 64


 2806 0784 05       		.byte	0x5
 2807 0785 5601     		.2byte	0x156
 2808 0787 81000000 		.4byte	0x81
 2809 078b 20       		.uleb128 0x20
 2810 078c EE010000 		.4byte	.LASF116
 2811 0790 05       		.byte	0x5
 2812 0791 6B01     		.2byte	0x16b
 2813 0793 B1000000 		.4byte	0xb1
 2814 0797 20       		.uleb128 0x20
 2815 0798 69040000 		.4byte	.LASF117
 2816 079c 05       		.byte	0x5
 2817 079d 6B01     		.2byte	0x16b
 2818 079f B1000000 		.4byte	0xb1
 2819 07a3 0C       		.uleb128 0xc
 2820 07a4 96030000 		.4byte	0x396
 2821 07a8 B3070000 		.4byte	0x7b3
 2822 07ac 0D       		.uleb128 0xd
 2823 07ad EA000000 		.4byte	0xea
 2824 07b1 01       		.byte	0x1
 2825 07b2 00       		.byte	0
 2826 07b3 20       		.uleb128 0x20
 2827 07b4 98060000 		.4byte	.LASF118
 2828 07b8 05       		.byte	0x5
 2829 07b9 7A01     		.2byte	0x17a
 2830 07bb A3070000 		.4byte	0x7a3
 2831 07bf 00       		.byte	0
 2832              		.section	.debug_abbrev,"",%progbits
 2833              	.Ldebug_abbrev0:
 2834 0000 01       		.uleb128 0x1
 2835 0001 11       		.uleb128 0x11
 2836 0002 01       		.byte	0x1
 2837 0003 25       		.uleb128 0x25
 2838 0004 0E       		.uleb128 0xe
 2839 0005 13       		.uleb128 0x13
 2840 0006 0B       		.uleb128 0xb
 2841 0007 03       		.uleb128 0x3
 2842 0008 0E       		.uleb128 0xe
 2843 0009 1B       		.uleb128 0x1b
 2844 000a 0E       		.uleb128 0xe
 2845 000b 55       		.uleb128 0x55
 2846 000c 17       		.uleb128 0x17
 2847 000d 11       		.uleb128 0x11
 2848 000e 01       		.uleb128 0x1
 2849 000f 10       		.uleb128 0x10
 2850 0010 17       		.uleb128 0x17
 2851 0011 00       		.byte	0
 2852 0012 00       		.byte	0
 2853 0013 02       		.uleb128 0x2
 2854 0014 24       		.uleb128 0x24
 2855 0015 00       		.byte	0
 2856 0016 0B       		.uleb128 0xb
 2857 0017 0B       		.uleb128 0xb
 2858 0018 3E       		.uleb128 0x3e
 2859 0019 0B       		.uleb128 0xb
 2860 001a 03       		.uleb128 0x3
 2861 001b 0E       		.uleb128 0xe
 2862 001c 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 65


 2863 001d 00       		.byte	0
 2864 001e 03       		.uleb128 0x3
 2865 001f 16       		.uleb128 0x16
 2866 0020 00       		.byte	0
 2867 0021 03       		.uleb128 0x3
 2868 0022 0E       		.uleb128 0xe
 2869 0023 3A       		.uleb128 0x3a
 2870 0024 0B       		.uleb128 0xb
 2871 0025 3B       		.uleb128 0x3b
 2872 0026 0B       		.uleb128 0xb
 2873 0027 49       		.uleb128 0x49
 2874 0028 13       		.uleb128 0x13
 2875 0029 00       		.byte	0
 2876 002a 00       		.byte	0
 2877 002b 04       		.uleb128 0x4
 2878 002c 24       		.uleb128 0x24
 2879 002d 00       		.byte	0
 2880 002e 0B       		.uleb128 0xb
 2881 002f 0B       		.uleb128 0xb
 2882 0030 3E       		.uleb128 0x3e
 2883 0031 0B       		.uleb128 0xb
 2884 0032 03       		.uleb128 0x3
 2885 0033 08       		.uleb128 0x8
 2886 0034 00       		.byte	0
 2887 0035 00       		.byte	0
 2888 0036 05       		.uleb128 0x5
 2889 0037 16       		.uleb128 0x16
 2890 0038 00       		.byte	0
 2891 0039 03       		.uleb128 0x3
 2892 003a 0E       		.uleb128 0xe
 2893 003b 3A       		.uleb128 0x3a
 2894 003c 0B       		.uleb128 0xb
 2895 003d 3B       		.uleb128 0x3b
 2896 003e 05       		.uleb128 0x5
 2897 003f 49       		.uleb128 0x49
 2898 0040 13       		.uleb128 0x13
 2899 0041 00       		.byte	0
 2900 0042 00       		.byte	0
 2901 0043 06       		.uleb128 0x6
 2902 0044 35       		.uleb128 0x35
 2903 0045 00       		.byte	0
 2904 0046 49       		.uleb128 0x49
 2905 0047 13       		.uleb128 0x13
 2906 0048 00       		.byte	0
 2907 0049 00       		.byte	0
 2908 004a 07       		.uleb128 0x7
 2909 004b 04       		.uleb128 0x4
 2910 004c 01       		.byte	0x1
 2911 004d 03       		.uleb128 0x3
 2912 004e 0E       		.uleb128 0xe
 2913 004f 0B       		.uleb128 0xb
 2914 0050 0B       		.uleb128 0xb
 2915 0051 49       		.uleb128 0x49
 2916 0052 13       		.uleb128 0x13
 2917 0053 3A       		.uleb128 0x3a
 2918 0054 0B       		.uleb128 0xb
 2919 0055 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 66


 2920 0056 0B       		.uleb128 0xb
 2921 0057 01       		.uleb128 0x1
 2922 0058 13       		.uleb128 0x13
 2923 0059 00       		.byte	0
 2924 005a 00       		.byte	0
 2925 005b 08       		.uleb128 0x8
 2926 005c 28       		.uleb128 0x28
 2927 005d 00       		.byte	0
 2928 005e 03       		.uleb128 0x3
 2929 005f 0E       		.uleb128 0xe
 2930 0060 1C       		.uleb128 0x1c
 2931 0061 0B       		.uleb128 0xb
 2932 0062 00       		.byte	0
 2933 0063 00       		.byte	0
 2934 0064 09       		.uleb128 0x9
 2935 0065 13       		.uleb128 0x13
 2936 0066 01       		.byte	0x1
 2937 0067 03       		.uleb128 0x3
 2938 0068 0E       		.uleb128 0xe
 2939 0069 0B       		.uleb128 0xb
 2940 006a 0B       		.uleb128 0xb
 2941 006b 3A       		.uleb128 0x3a
 2942 006c 0B       		.uleb128 0xb
 2943 006d 3B       		.uleb128 0x3b
 2944 006e 0B       		.uleb128 0xb
 2945 006f 01       		.uleb128 0x1
 2946 0070 13       		.uleb128 0x13
 2947 0071 00       		.byte	0
 2948 0072 00       		.byte	0
 2949 0073 0A       		.uleb128 0xa
 2950 0074 0D       		.uleb128 0xd
 2951 0075 00       		.byte	0
 2952 0076 03       		.uleb128 0x3
 2953 0077 0E       		.uleb128 0xe
 2954 0078 3A       		.uleb128 0x3a
 2955 0079 0B       		.uleb128 0xb
 2956 007a 3B       		.uleb128 0x3b
 2957 007b 0B       		.uleb128 0xb
 2958 007c 49       		.uleb128 0x49
 2959 007d 13       		.uleb128 0x13
 2960 007e 38       		.uleb128 0x38
 2961 007f 0B       		.uleb128 0xb
 2962 0080 00       		.byte	0
 2963 0081 00       		.byte	0
 2964 0082 0B       		.uleb128 0xb
 2965 0083 0D       		.uleb128 0xd
 2966 0084 00       		.byte	0
 2967 0085 03       		.uleb128 0x3
 2968 0086 08       		.uleb128 0x8
 2969 0087 3A       		.uleb128 0x3a
 2970 0088 0B       		.uleb128 0xb
 2971 0089 3B       		.uleb128 0x3b
 2972 008a 0B       		.uleb128 0xb
 2973 008b 49       		.uleb128 0x49
 2974 008c 13       		.uleb128 0x13
 2975 008d 38       		.uleb128 0x38
 2976 008e 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 67


 2977 008f 00       		.byte	0
 2978 0090 00       		.byte	0
 2979 0091 0C       		.uleb128 0xc
 2980 0092 01       		.uleb128 0x1
 2981 0093 01       		.byte	0x1
 2982 0094 49       		.uleb128 0x49
 2983 0095 13       		.uleb128 0x13
 2984 0096 01       		.uleb128 0x1
 2985 0097 13       		.uleb128 0x13
 2986 0098 00       		.byte	0
 2987 0099 00       		.byte	0
 2988 009a 0D       		.uleb128 0xd
 2989 009b 21       		.uleb128 0x21
 2990 009c 00       		.byte	0
 2991 009d 49       		.uleb128 0x49
 2992 009e 13       		.uleb128 0x13
 2993 009f 2F       		.uleb128 0x2f
 2994 00a0 0B       		.uleb128 0xb
 2995 00a1 00       		.byte	0
 2996 00a2 00       		.byte	0
 2997 00a3 0E       		.uleb128 0xe
 2998 00a4 13       		.uleb128 0x13
 2999 00a5 01       		.byte	0x1
 3000 00a6 03       		.uleb128 0x3
 3001 00a7 0E       		.uleb128 0xe
 3002 00a8 0B       		.uleb128 0xb
 3003 00a9 0B       		.uleb128 0xb
 3004 00aa 3A       		.uleb128 0x3a
 3005 00ab 0B       		.uleb128 0xb
 3006 00ac 3B       		.uleb128 0x3b
 3007 00ad 05       		.uleb128 0x5
 3008 00ae 01       		.uleb128 0x1
 3009 00af 13       		.uleb128 0x13
 3010 00b0 00       		.byte	0
 3011 00b1 00       		.byte	0
 3012 00b2 0F       		.uleb128 0xf
 3013 00b3 0D       		.uleb128 0xd
 3014 00b4 00       		.byte	0
 3015 00b5 03       		.uleb128 0x3
 3016 00b6 08       		.uleb128 0x8
 3017 00b7 3A       		.uleb128 0x3a
 3018 00b8 0B       		.uleb128 0xb
 3019 00b9 3B       		.uleb128 0x3b
 3020 00ba 05       		.uleb128 0x5
 3021 00bb 49       		.uleb128 0x49
 3022 00bc 13       		.uleb128 0x13
 3023 00bd 38       		.uleb128 0x38
 3024 00be 0B       		.uleb128 0xb
 3025 00bf 00       		.byte	0
 3026 00c0 00       		.byte	0
 3027 00c1 10       		.uleb128 0x10
 3028 00c2 0D       		.uleb128 0xd
 3029 00c3 00       		.byte	0
 3030 00c4 03       		.uleb128 0x3
 3031 00c5 0E       		.uleb128 0xe
 3032 00c6 3A       		.uleb128 0x3a
 3033 00c7 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 68


 3034 00c8 3B       		.uleb128 0x3b
 3035 00c9 05       		.uleb128 0x5
 3036 00ca 49       		.uleb128 0x49
 3037 00cb 13       		.uleb128 0x13
 3038 00cc 38       		.uleb128 0x38
 3039 00cd 0B       		.uleb128 0xb
 3040 00ce 00       		.byte	0
 3041 00cf 00       		.byte	0
 3042 00d0 11       		.uleb128 0x11
 3043 00d1 2E       		.uleb128 0x2e
 3044 00d2 00       		.byte	0
 3045 00d3 3F       		.uleb128 0x3f
 3046 00d4 19       		.uleb128 0x19
 3047 00d5 03       		.uleb128 0x3
 3048 00d6 0E       		.uleb128 0xe
 3049 00d7 3A       		.uleb128 0x3a
 3050 00d8 0B       		.uleb128 0xb
 3051 00d9 3B       		.uleb128 0x3b
 3052 00da 0B       		.uleb128 0xb
 3053 00db 27       		.uleb128 0x27
 3054 00dc 19       		.uleb128 0x19
 3055 00dd 11       		.uleb128 0x11
 3056 00de 01       		.uleb128 0x1
 3057 00df 12       		.uleb128 0x12
 3058 00e0 06       		.uleb128 0x6
 3059 00e1 40       		.uleb128 0x40
 3060 00e2 18       		.uleb128 0x18
 3061 00e3 9742     		.uleb128 0x2117
 3062 00e5 19       		.uleb128 0x19
 3063 00e6 00       		.byte	0
 3064 00e7 00       		.byte	0
 3065 00e8 12       		.uleb128 0x12
 3066 00e9 2E       		.uleb128 0x2e
 3067 00ea 01       		.byte	0x1
 3068 00eb 3F       		.uleb128 0x3f
 3069 00ec 19       		.uleb128 0x19
 3070 00ed 03       		.uleb128 0x3
 3071 00ee 0E       		.uleb128 0xe
 3072 00ef 3A       		.uleb128 0x3a
 3073 00f0 0B       		.uleb128 0xb
 3074 00f1 3B       		.uleb128 0x3b
 3075 00f2 0B       		.uleb128 0xb
 3076 00f3 11       		.uleb128 0x11
 3077 00f4 01       		.uleb128 0x1
 3078 00f5 12       		.uleb128 0x12
 3079 00f6 06       		.uleb128 0x6
 3080 00f7 40       		.uleb128 0x40
 3081 00f8 18       		.uleb128 0x18
 3082 00f9 9642     		.uleb128 0x2116
 3083 00fb 19       		.uleb128 0x19
 3084 00fc 01       		.uleb128 0x1
 3085 00fd 13       		.uleb128 0x13
 3086 00fe 00       		.byte	0
 3087 00ff 00       		.byte	0
 3088 0100 13       		.uleb128 0x13
 3089 0101 34       		.uleb128 0x34
 3090 0102 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 69


 3091 0103 03       		.uleb128 0x3
 3092 0104 0E       		.uleb128 0xe
 3093 0105 3A       		.uleb128 0x3a
 3094 0106 0B       		.uleb128 0xb
 3095 0107 3B       		.uleb128 0x3b
 3096 0108 0B       		.uleb128 0xb
 3097 0109 49       		.uleb128 0x49
 3098 010a 13       		.uleb128 0x13
 3099 010b 02       		.uleb128 0x2
 3100 010c 18       		.uleb128 0x18
 3101 010d 00       		.byte	0
 3102 010e 00       		.byte	0
 3103 010f 14       		.uleb128 0x14
 3104 0110 2E       		.uleb128 0x2e
 3105 0111 00       		.byte	0
 3106 0112 3F       		.uleb128 0x3f
 3107 0113 19       		.uleb128 0x19
 3108 0114 03       		.uleb128 0x3
 3109 0115 0E       		.uleb128 0xe
 3110 0116 3A       		.uleb128 0x3a
 3111 0117 0B       		.uleb128 0xb
 3112 0118 3B       		.uleb128 0x3b
 3113 0119 05       		.uleb128 0x5
 3114 011a 27       		.uleb128 0x27
 3115 011b 19       		.uleb128 0x19
 3116 011c 11       		.uleb128 0x11
 3117 011d 01       		.uleb128 0x1
 3118 011e 12       		.uleb128 0x12
 3119 011f 06       		.uleb128 0x6
 3120 0120 40       		.uleb128 0x40
 3121 0121 18       		.uleb128 0x18
 3122 0122 9642     		.uleb128 0x2116
 3123 0124 19       		.uleb128 0x19
 3124 0125 00       		.byte	0
 3125 0126 00       		.byte	0
 3126 0127 15       		.uleb128 0x15
 3127 0128 2E       		.uleb128 0x2e
 3128 0129 01       		.byte	0x1
 3129 012a 3F       		.uleb128 0x3f
 3130 012b 19       		.uleb128 0x19
 3131 012c 03       		.uleb128 0x3
 3132 012d 0E       		.uleb128 0xe
 3133 012e 3A       		.uleb128 0x3a
 3134 012f 0B       		.uleb128 0xb
 3135 0130 3B       		.uleb128 0x3b
 3136 0131 05       		.uleb128 0x5
 3137 0132 11       		.uleb128 0x11
 3138 0133 01       		.uleb128 0x1
 3139 0134 12       		.uleb128 0x12
 3140 0135 06       		.uleb128 0x6
 3141 0136 40       		.uleb128 0x40
 3142 0137 18       		.uleb128 0x18
 3143 0138 9742     		.uleb128 0x2117
 3144 013a 19       		.uleb128 0x19
 3145 013b 01       		.uleb128 0x1
 3146 013c 13       		.uleb128 0x13
 3147 013d 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 70


 3148 013e 00       		.byte	0
 3149 013f 16       		.uleb128 0x16
 3150 0140 34       		.uleb128 0x34
 3151 0141 00       		.byte	0
 3152 0142 03       		.uleb128 0x3
 3153 0143 0E       		.uleb128 0xe
 3154 0144 3A       		.uleb128 0x3a
 3155 0145 0B       		.uleb128 0xb
 3156 0146 3B       		.uleb128 0x3b
 3157 0147 05       		.uleb128 0x5
 3158 0148 49       		.uleb128 0x49
 3159 0149 13       		.uleb128 0x13
 3160 014a 02       		.uleb128 0x2
 3161 014b 18       		.uleb128 0x18
 3162 014c 00       		.byte	0
 3163 014d 00       		.byte	0
 3164 014e 17       		.uleb128 0x17
 3165 014f 34       		.uleb128 0x34
 3166 0150 00       		.byte	0
 3167 0151 03       		.uleb128 0x3
 3168 0152 08       		.uleb128 0x8
 3169 0153 3A       		.uleb128 0x3a
 3170 0154 0B       		.uleb128 0xb
 3171 0155 3B       		.uleb128 0x3b
 3172 0156 05       		.uleb128 0x5
 3173 0157 49       		.uleb128 0x49
 3174 0158 13       		.uleb128 0x13
 3175 0159 02       		.uleb128 0x2
 3176 015a 18       		.uleb128 0x18
 3177 015b 00       		.byte	0
 3178 015c 00       		.byte	0
 3179 015d 18       		.uleb128 0x18
 3180 015e 0F       		.uleb128 0xf
 3181 015f 00       		.byte	0
 3182 0160 0B       		.uleb128 0xb
 3183 0161 0B       		.uleb128 0xb
 3184 0162 49       		.uleb128 0x49
 3185 0163 13       		.uleb128 0x13
 3186 0164 00       		.byte	0
 3187 0165 00       		.byte	0
 3188 0166 19       		.uleb128 0x19
 3189 0167 2E       		.uleb128 0x2e
 3190 0168 01       		.byte	0x1
 3191 0169 3F       		.uleb128 0x3f
 3192 016a 19       		.uleb128 0x19
 3193 016b 03       		.uleb128 0x3
 3194 016c 0E       		.uleb128 0xe
 3195 016d 3A       		.uleb128 0x3a
 3196 016e 0B       		.uleb128 0xb
 3197 016f 3B       		.uleb128 0x3b
 3198 0170 05       		.uleb128 0x5
 3199 0171 27       		.uleb128 0x27
 3200 0172 19       		.uleb128 0x19
 3201 0173 11       		.uleb128 0x11
 3202 0174 01       		.uleb128 0x1
 3203 0175 12       		.uleb128 0x12
 3204 0176 06       		.uleb128 0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 71


 3205 0177 40       		.uleb128 0x40
 3206 0178 18       		.uleb128 0x18
 3207 0179 9642     		.uleb128 0x2116
 3208 017b 19       		.uleb128 0x19
 3209 017c 01       		.uleb128 0x1
 3210 017d 13       		.uleb128 0x13
 3211 017e 00       		.byte	0
 3212 017f 00       		.byte	0
 3213 0180 1A       		.uleb128 0x1a
 3214 0181 05       		.uleb128 0x5
 3215 0182 00       		.byte	0
 3216 0183 03       		.uleb128 0x3
 3217 0184 08       		.uleb128 0x8
 3218 0185 3A       		.uleb128 0x3a
 3219 0186 0B       		.uleb128 0xb
 3220 0187 3B       		.uleb128 0x3b
 3221 0188 05       		.uleb128 0x5
 3222 0189 49       		.uleb128 0x49
 3223 018a 13       		.uleb128 0x13
 3224 018b 02       		.uleb128 0x2
 3225 018c 18       		.uleb128 0x18
 3226 018d 00       		.byte	0
 3227 018e 00       		.byte	0
 3228 018f 1B       		.uleb128 0x1b
 3229 0190 2E       		.uleb128 0x2e
 3230 0191 01       		.byte	0x1
 3231 0192 3F       		.uleb128 0x3f
 3232 0193 19       		.uleb128 0x19
 3233 0194 03       		.uleb128 0x3
 3234 0195 0E       		.uleb128 0xe
 3235 0196 3A       		.uleb128 0x3a
 3236 0197 0B       		.uleb128 0xb
 3237 0198 3B       		.uleb128 0x3b
 3238 0199 05       		.uleb128 0x5
 3239 019a 27       		.uleb128 0x27
 3240 019b 19       		.uleb128 0x19
 3241 019c 11       		.uleb128 0x11
 3242 019d 01       		.uleb128 0x1
 3243 019e 12       		.uleb128 0x12
 3244 019f 06       		.uleb128 0x6
 3245 01a0 40       		.uleb128 0x40
 3246 01a1 18       		.uleb128 0x18
 3247 01a2 9742     		.uleb128 0x2117
 3248 01a4 19       		.uleb128 0x19
 3249 01a5 01       		.uleb128 0x1
 3250 01a6 13       		.uleb128 0x13
 3251 01a7 00       		.byte	0
 3252 01a8 00       		.byte	0
 3253 01a9 1C       		.uleb128 0x1c
 3254 01aa 05       		.uleb128 0x5
 3255 01ab 00       		.byte	0
 3256 01ac 03       		.uleb128 0x3
 3257 01ad 0E       		.uleb128 0xe
 3258 01ae 3A       		.uleb128 0x3a
 3259 01af 0B       		.uleb128 0xb
 3260 01b0 3B       		.uleb128 0x3b
 3261 01b1 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 72


 3262 01b2 49       		.uleb128 0x49
 3263 01b3 13       		.uleb128 0x13
 3264 01b4 02       		.uleb128 0x2
 3265 01b5 18       		.uleb128 0x18
 3266 01b6 00       		.byte	0
 3267 01b7 00       		.byte	0
 3268 01b8 1D       		.uleb128 0x1d
 3269 01b9 2E       		.uleb128 0x2e
 3270 01ba 01       		.byte	0x1
 3271 01bb 3F       		.uleb128 0x3f
 3272 01bc 19       		.uleb128 0x19
 3273 01bd 03       		.uleb128 0x3
 3274 01be 0E       		.uleb128 0xe
 3275 01bf 3A       		.uleb128 0x3a
 3276 01c0 0B       		.uleb128 0xb
 3277 01c1 3B       		.uleb128 0x3b
 3278 01c2 05       		.uleb128 0x5
 3279 01c3 11       		.uleb128 0x11
 3280 01c4 01       		.uleb128 0x1
 3281 01c5 12       		.uleb128 0x12
 3282 01c6 06       		.uleb128 0x6
 3283 01c7 40       		.uleb128 0x40
 3284 01c8 18       		.uleb128 0x18
 3285 01c9 9642     		.uleb128 0x2116
 3286 01cb 19       		.uleb128 0x19
 3287 01cc 01       		.uleb128 0x1
 3288 01cd 13       		.uleb128 0x13
 3289 01ce 00       		.byte	0
 3290 01cf 00       		.byte	0
 3291 01d0 1E       		.uleb128 0x1e
 3292 01d1 2E       		.uleb128 0x2e
 3293 01d2 00       		.byte	0
 3294 01d3 3F       		.uleb128 0x3f
 3295 01d4 19       		.uleb128 0x19
 3296 01d5 03       		.uleb128 0x3
 3297 01d6 0E       		.uleb128 0xe
 3298 01d7 3A       		.uleb128 0x3a
 3299 01d8 0B       		.uleb128 0xb
 3300 01d9 3B       		.uleb128 0x3b
 3301 01da 05       		.uleb128 0x5
 3302 01db 11       		.uleb128 0x11
 3303 01dc 01       		.uleb128 0x1
 3304 01dd 12       		.uleb128 0x12
 3305 01de 06       		.uleb128 0x6
 3306 01df 40       		.uleb128 0x40
 3307 01e0 18       		.uleb128 0x18
 3308 01e1 9742     		.uleb128 0x2117
 3309 01e3 19       		.uleb128 0x19
 3310 01e4 00       		.byte	0
 3311 01e5 00       		.byte	0
 3312 01e6 1F       		.uleb128 0x1f
 3313 01e7 26       		.uleb128 0x26
 3314 01e8 00       		.byte	0
 3315 01e9 49       		.uleb128 0x49
 3316 01ea 13       		.uleb128 0x13
 3317 01eb 00       		.byte	0
 3318 01ec 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 73


 3319 01ed 20       		.uleb128 0x20
 3320 01ee 34       		.uleb128 0x34
 3321 01ef 00       		.byte	0
 3322 01f0 03       		.uleb128 0x3
 3323 01f1 0E       		.uleb128 0xe
 3324 01f2 3A       		.uleb128 0x3a
 3325 01f3 0B       		.uleb128 0xb
 3326 01f4 3B       		.uleb128 0x3b
 3327 01f5 05       		.uleb128 0x5
 3328 01f6 49       		.uleb128 0x49
 3329 01f7 13       		.uleb128 0x13
 3330 01f8 3F       		.uleb128 0x3f
 3331 01f9 19       		.uleb128 0x19
 3332 01fa 3C       		.uleb128 0x3c
 3333 01fb 19       		.uleb128 0x19
 3334 01fc 00       		.byte	0
 3335 01fd 00       		.byte	0
 3336 01fe 00       		.byte	0
 3337              		.section	.debug_aranges,"",%progbits
 3338 0000 74000000 		.4byte	0x74
 3339 0004 0200     		.2byte	0x2
 3340 0006 00000000 		.4byte	.Ldebug_info0
 3341 000a 04       		.byte	0x4
 3342 000b 00       		.byte	0
 3343 000c 0000     		.2byte	0
 3344 000e 0000     		.2byte	0
 3345 0010 00000000 		.4byte	.LFB64
 3346 0014 18000000 		.4byte	.LFE64-.LFB64
 3347 0018 00000000 		.4byte	.LFB65
 3348 001c 20000000 		.4byte	.LFE65-.LFB65
 3349 0020 00000000 		.4byte	.LFB66
 3350 0024 0C020000 		.4byte	.LFE66-.LFB66
 3351 0028 00000000 		.4byte	.LFB67
 3352 002c 08020000 		.4byte	.LFE67-.LFB67
 3353 0030 00000000 		.4byte	.LFB68
 3354 0034 F0020000 		.4byte	.LFE68-.LFB68
 3355 0038 00000000 		.4byte	.LFB69
 3356 003c C0000000 		.4byte	.LFE69-.LFB69
 3357 0040 00000000 		.4byte	.LFB70
 3358 0044 1A000000 		.4byte	.LFE70-.LFB70
 3359 0048 00000000 		.4byte	.LFB71
 3360 004c 0C020000 		.4byte	.LFE71-.LFB71
 3361 0050 00000000 		.4byte	.LFB72
 3362 0054 0C000000 		.4byte	.LFE72-.LFB72
 3363 0058 00000000 		.4byte	.LFB73
 3364 005c 14000000 		.4byte	.LFE73-.LFB73
 3365 0060 00000000 		.4byte	.LFB74
 3366 0064 0C000000 		.4byte	.LFE74-.LFB74
 3367 0068 00000000 		.4byte	.LFB75
 3368 006c 0C000000 		.4byte	.LFE75-.LFB75
 3369 0070 00000000 		.4byte	0
 3370 0074 00000000 		.4byte	0
 3371              		.section	.debug_ranges,"",%progbits
 3372              	.Ldebug_ranges0:
 3373 0000 00000000 		.4byte	.LFB64
 3374 0004 18000000 		.4byte	.LFE64
 3375 0008 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 74


 3376 000c 20000000 		.4byte	.LFE65
 3377 0010 00000000 		.4byte	.LFB66
 3378 0014 0C020000 		.4byte	.LFE66
 3379 0018 00000000 		.4byte	.LFB67
 3380 001c 08020000 		.4byte	.LFE67
 3381 0020 00000000 		.4byte	.LFB68
 3382 0024 F0020000 		.4byte	.LFE68
 3383 0028 00000000 		.4byte	.LFB69
 3384 002c C0000000 		.4byte	.LFE69
 3385 0030 00000000 		.4byte	.LFB70
 3386 0034 1A000000 		.4byte	.LFE70
 3387 0038 00000000 		.4byte	.LFB71
 3388 003c 0C020000 		.4byte	.LFE71
 3389 0040 00000000 		.4byte	.LFB72
 3390 0044 0C000000 		.4byte	.LFE72
 3391 0048 00000000 		.4byte	.LFB73
 3392 004c 14000000 		.4byte	.LFE73
 3393 0050 00000000 		.4byte	.LFB74
 3394 0054 0C000000 		.4byte	.LFE74
 3395 0058 00000000 		.4byte	.LFB75
 3396 005c 0C000000 		.4byte	.LFE75
 3397 0060 00000000 		.4byte	0
 3398 0064 00000000 		.4byte	0
 3399              		.section	.debug_line,"",%progbits
 3400              	.Ldebug_line0:
 3401 0000 E8030000 		.section	.debug_str,"MS",%progbits,1
 3401      02007701 
 3401      00000201 
 3401      FB0E0D00 
 3401      01010101 
 3402              	.LASF12:
 3403 0000 75696E74 		.ascii	"uint16\000"
 3403      313600
 3404              	.LASF88:
 3405 0007 6D6F745F 		.ascii	"mot_idx\000"
 3405      69647800 
 3406              	.LASF98:
 3407 000f 635F6D65 		.ascii	"c_mem\000"
 3407      6D00
 3408              	.LASF49:
 3409 0015 73745F46 		.ascii	"st_FB_spec\000"
 3409      425F7370 
 3409      656300
 3410              	.LASF92:
 3411 0020 70776D5F 		.ascii	"pwm_preload_values\000"
 3411      7072656C 
 3411      6F61645F 
 3411      76616C75 
 3411      657300
 3412              	.LASF0:
 3413 0033 7369676E 		.ascii	"signed char\000"
 3413      65642063 
 3413      68617200 
 3414              	.LASF55:
 3415 003f 73745F65 		.ascii	"st_eeprom\000"
 3415      6570726F 
 3415      6D00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 75


 3416              	.LASF119:
 3417 0049 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3417      43313120 
 3417      352E342E 
 3417      31203230 
 3417      31363036 
 3418 007c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3418      20726576 
 3418      6973696F 
 3418      6E203233 
 3418      37373135 
 3419 00af 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3419      66756E63 
 3419      74696F6E 
 3419      2D736563 
 3419      74696F6E 
 3420              	.LASF101:
 3421 00d7 6379636C 		.ascii	"cycle_time\000"
 3421      655F7469 
 3421      6D6500
 3422              	.LASF86:
 3423 00e2 695F6175 		.ascii	"i_aux\000"
 3423      7800
 3424              	.LASF82:
 3425 00e8 656E636F 		.ascii	"encoder_reading_SPI\000"
 3425      6465725F 
 3425      72656164 
 3425      696E675F 
 3425      53504900 
 3426              	.LASF7:
 3427 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 3427      206C6F6E 
 3427      6720756E 
 3427      7369676E 
 3427      65642069 
 3428              	.LASF108:
 3429 0113 53485F72 		.ascii	"SH_refOld\000"
 3429      65664F6C 
 3429      6400
 3430              	.LASF35:
 3431 011d 62617564 		.ascii	"baud_rate\000"
 3431      5F726174 
 3431      6500
 3432              	.LASF93:
 3433 0127 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3433      52784275 
 3433      66666572 
 3433      00
 3434              	.LASF42:
 3435 0134 656D675F 		.ascii	"emg_threshold\000"
 3435      74687265 
 3435      73686F6C 
 3435      6400
 3436              	.LASF6:
 3437 0142 6C6F6E67 		.ascii	"long long int\000"
 3437      206C6F6E 
 3437      6720696E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 76


 3437      7400
 3438              	.LASF32:
 3439 0150 72656164 		.ascii	"ready\000"
 3439      7900
 3440              	.LASF99:
 3441 0156 74696D65 		.ascii	"timer_value\000"
 3441      725F7661 
 3441      6C756500 
 3442              	.LASF19:
 3443 0162 72656738 		.ascii	"reg8\000"
 3443      00
 3444              	.LASF15:
 3445 0167 696E7433 		.ascii	"int32\000"
 3445      3200
 3446              	.LASF75:
 3447 016d 636F6D70 		.ascii	"compute_SH_reference\000"
 3447      7574655F 
 3447      53485F72 
 3447      65666572 
 3447      656E6365 
 3448              	.LASF102:
 3449 0182 666C6167 		.ascii	"flag_master\000"
 3449      5F6D6173 
 3449      74657200 
 3450              	.LASF65:
 3451 018e 73746174 		.ascii	"state\000"
 3451      6500
 3452              	.LASF4:
 3453 0194 6C6F6E67 		.ascii	"long int\000"
 3453      20696E74 
 3453      00
 3454              	.LASF96:
 3455 019d 675F7278 		.ascii	"g_rx\000"
 3455      00
 3456              	.LASF111:
 3457 01a2 56545F72 		.ascii	"VT_refOld\000"
 3457      65664F6C 
 3457      6400
 3458              	.LASF59:
 3459 01ac 6F6C645F 		.ascii	"old_value\000"
 3459      76616C75 
 3459      6500
 3460              	.LASF105:
 3461 01b6 4144435F 		.ascii	"ADC_buf\000"
 3461      62756600 
 3462              	.LASF120:
 3463 01be 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 3463      72635C69 
 3463      6E746572 
 3463      72757074 
 3463      696F6E73 
 3464              	.LASF17:
 3465 01d5 646F7562 		.ascii	"double\000"
 3465      6C6500
 3466              	.LASF74:
 3467 01dc 696E7465 		.ascii	"interrupt_manager\000"
 3467      72727570 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 77


 3467      745F6D61 
 3467      6E616765 
 3467      7200
 3468              	.LASF116:
 3469 01ee 70726573 		.ascii	"pressure_value\000"
 3469      73757265 
 3469      5F76616C 
 3469      756500
 3470              	.LASF13:
 3471 01fd 75696E74 		.ascii	"uint32\000"
 3471      333200
 3472              	.LASF37:
 3473 0204 73745F73 		.ascii	"st_slave\000"
 3473      6C617665 
 3473      00
 3474              	.LASF24:
 3475 020d 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 3475      545F4D4F 
 3475      44455F45 
 3475      4D475F50 
 3475      524F504F 
 3476              	.LASF83:
 3477 0229 6E5F6C69 		.ascii	"n_line\000"
 3477      6E6500
 3478              	.LASF45:
 3479 0230 73776974 		.ascii	"switch_emg\000"
 3479      63685F65 
 3479      6D6700
 3480              	.LASF28:
 3481 023b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 3481      545F4D4F 
 3481      44455F4A 
 3481      4F595354 
 3481      49434B00 
 3482              	.LASF63:
 3483 024f 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 3483      52533438 
 3483      355F5258 
 3483      5F457849 
 3483      6E746572 
 3484              	.LASF47:
 3485 0268 6D617374 		.ascii	"master_mode_active\000"
 3485      65725F6D 
 3485      6F64655F 
 3485      61637469 
 3485      766500
 3486              	.LASF8:
 3487 027b 756E7369 		.ascii	"unsigned int\000"
 3487      676E6564 
 3487      20696E74 
 3487      00
 3488              	.LASF70:
 3489 0288 72785F64 		.ascii	"rx_data\000"
 3489      61746100 
 3490              	.LASF114:
 3491 0290 50756D70 		.ascii	"Pump_refOld\000"
 3491      5F726566 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 78


 3491      4F6C6400 
 3492              	.LASF104:
 3493 029c 6379636C 		.ascii	"cycles_interrupt_flag\000"
 3493      65735F69 
 3493      6E746572 
 3493      72757074 
 3493      5F666C61 
 3494              	.LASF26:
 3495 02b2 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 3495      545F4D4F 
 3495      44455F45 
 3495      4D475F46 
 3495      43465300 
 3496              	.LASF73:
 3497 02c6 66756E63 		.ascii	"function_scheduler\000"
 3497      74696F6E 
 3497      5F736368 
 3497      6564756C 
 3497      657200
 3498              	.LASF66:
 3499 02d9 64617461 		.ascii	"data_packet_index\000"
 3499      5F706163 
 3499      6B65745F 
 3499      696E6465 
 3499      7800
 3500              	.LASF11:
 3501 02eb 75696E74 		.ascii	"uint8\000"
 3501      3800
 3502              	.LASF3:
 3503 02f1 73686F72 		.ascii	"short unsigned int\000"
 3503      7420756E 
 3503      7369676E 
 3503      65642069 
 3503      6E7400
 3504              	.LASF109:
 3505 0304 53485F72 		.ascii	"SH_refNew\000"
 3505      65664E65 
 3505      7700
 3506              	.LASF23:
 3507 030e 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 3507      545F4D4F 
 3507      44455F45 
 3507      4E434F44 
 3507      45523300 
 3508              	.LASF122:
 3509 0322 53485F69 		.ascii	"SH_input_mode\000"
 3509      6E707574 
 3509      5F6D6F64 
 3509      6500
 3510              	.LASF38:
 3511 0330 706F735F 		.ascii	"pos_lim_inf\000"
 3511      6C696D5F 
 3511      696E6600 
 3512              	.LASF36:
 3513 033c 756E7573 		.ascii	"unused_bytes\000"
 3513      65645F62 
 3513      79746573 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 79


 3513      00
 3514              	.LASF52:
 3515 0349 70726F70 		.ascii	"prop_err_fb_gain\000"
 3515      5F657272 
 3515      5F66625F 
 3515      6761696E 
 3515      00
 3516              	.LASF53:
 3517 035a 76696272 		.ascii	"vibrotactile_feedback_active\000"
 3517      6F746163 
 3517      74696C65 
 3517      5F666565 
 3517      64626163 
 3518              	.LASF9:
 3519 0377 5F5F696E 		.ascii	"__int32_t\000"
 3519      7433325F 
 3519      7400
 3520              	.LASF72:
 3521 0381 7061636B 		.ascii	"package_count\000"
 3521      6167655F 
 3521      636F756E 
 3521      7400
 3522              	.LASF71:
 3523 038f 72785F64 		.ascii	"rx_data_type\000"
 3523      6174615F 
 3523      74797065 
 3523      00
 3524              	.LASF64:
 3525 039c 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 3525      4359434C 
 3525      45535F48 
 3525      616E646C 
 3525      657200
 3526              	.LASF21:
 3527 03af 73697A65 		.ascii	"sizetype\000"
 3527      74797065 
 3527      00
 3528              	.LASF51:
 3529 03b8 6D617869 		.ascii	"maximum_pressure_kPa\000"
 3529      6D756D5F 
 3529      70726573 
 3529      73757265 
 3529      5F6B5061 
 3530              	.LASF112:
 3531 03cd 56545F72 		.ascii	"VT_refNew\000"
 3531      65664E65 
 3531      7700
 3532              	.LASF20:
 3533 03d7 6C6F6E67 		.ascii	"long double\000"
 3533      20646F75 
 3533      626C6500 
 3534              	.LASF34:
 3535 03e3 73745F64 		.ascii	"st_device\000"
 3535      65766963 
 3535      6500
 3536              	.LASF81:
 3537 03ed 76696272 		.ascii	"vibrotactile_control_generic\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 80


 3537      6F746163 
 3537      74696C65 
 3537      5F636F6E 
 3537      74726F6C 
 3538              	.LASF69:
 3539 040a 72785F71 		.ascii	"rx_queue\000"
 3539      75657565 
 3539      00
 3540              	.LASF97:
 3541 0413 675F6D65 		.ascii	"g_mem\000"
 3541      6D00
 3542              	.LASF100:
 3543 0419 74696D65 		.ascii	"timer_value0\000"
 3543      725F7661 
 3543      6C756530 
 3543      00
 3544              	.LASF39:
 3545 0426 706F735F 		.ascii	"pos_lim_sup\000"
 3545      6C696D5F 
 3545      73757000 
 3546              	.LASF90:
 3547 0432 6379636C 		.ascii	"cycles_counter_update\000"
 3547      65735F63 
 3547      6F756E74 
 3547      65725F75 
 3547      70646174 
 3548              	.LASF27:
 3549 0448 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 3549      545F4D4F 
 3549      44455F45 
 3549      4D475F46 
 3549      4346535F 
 3550              	.LASF62:
 3551 0460 70726573 		.ascii	"pressure\000"
 3551      73757265 
 3551      00
 3552              	.LASF117:
 3553 0469 61746D5F 		.ascii	"atm_pressure\000"
 3553      70726573 
 3553      73757265 
 3553      00
 3554              	.LASF115:
 3555 0476 50756D70 		.ascii	"Pump_refNew\000"
 3555      5F726566 
 3555      4E657700 
 3556              	.LASF40:
 3557 0482 696E7075 		.ascii	"input_mode\000"
 3557      745F6D6F 
 3557      646500
 3558              	.LASF16:
 3559 048d 666C6F61 		.ascii	"float\000"
 3559      7400
 3560              	.LASF113:
 3561 0493 50756D70 		.ascii	"Pump_ref\000"
 3561      5F726566 
 3561      00
 3562              	.LASF57:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 81


 3563 049c 53485F63 		.ascii	"SH_config\000"
 3563      6F6E6669 
 3563      6700
 3564              	.LASF84:
 3565 04a6 6173736F 		.ascii	"assoc_motor\000"
 3565      635F6D6F 
 3565      746F7200 
 3566              	.LASF76:
 3567 04b2 6572725F 		.ascii	"err_emg_1\000"
 3567      656D675F 
 3567      3100
 3568              	.LASF77:
 3569 04bc 6572725F 		.ascii	"err_emg_2\000"
 3569      656D675F 
 3569      3200
 3570              	.LASF60:
 3571 04c6 6761696E 		.ascii	"gain\000"
 3571      00
 3572              	.LASF10:
 3573 04cb 696E7433 		.ascii	"int32_t\000"
 3573      325F7400 
 3574              	.LASF1:
 3575 04d3 756E7369 		.ascii	"unsigned char\000"
 3575      676E6564 
 3575      20636861 
 3575      7200
 3576              	.LASF2:
 3577 04e1 73686F72 		.ascii	"short int\000"
 3577      7420696E 
 3577      7400
 3578              	.LASF58:
 3579 04eb 73745F66 		.ascii	"st_filter\000"
 3579      696C7465 
 3579      7200
 3580              	.LASF91:
 3581 04f5 73617665 		.ascii	"save_cycles_eeprom\000"
 3581      5F637963 
 3581      6C65735F 
 3581      65657072 
 3581      6F6D00
 3582              	.LASF56:
 3583 0508 666C6167 		.ascii	"flag\000"
 3583      00
 3584              	.LASF48:
 3585 050d 736C6176 		.ascii	"slave_ID\000"
 3585      655F4944 
 3585      00
 3586              	.LASF46:
 3587 0516 73745F4D 		.ascii	"st_MASTER_spec\000"
 3587      41535445 
 3587      525F7370 
 3587      656300
 3588              	.LASF95:
 3589 0525 675F6164 		.ascii	"g_adc_measOld\000"
 3589      635F6D65 
 3589      61734F6C 
 3589      6400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 82


 3590              	.LASF89:
 3591 0533 6F766572 		.ascii	"overcurrent_control\000"
 3591      63757272 
 3591      656E745F 
 3591      636F6E74 
 3591      726F6C00 
 3592              	.LASF41:
 3593 0547 73745F65 		.ascii	"st_emg\000"
 3593      6D6700
 3594              	.LASF61:
 3595 054e 73745F61 		.ascii	"st_adc_meas\000"
 3595      64635F6D 
 3595      65617300 
 3596              	.LASF107:
 3597 055a 53485F72 		.ascii	"SH_ref\000"
 3597      656600
 3598              	.LASF5:
 3599 0561 6C6F6E67 		.ascii	"long unsigned int\000"
 3599      20756E73 
 3599      69676E65 
 3599      6420696E 
 3599      7400
 3600              	.LASF31:
 3601 0573 6C656E67 		.ascii	"length\000"
 3601      746800
 3602              	.LASF18:
 3603 057a 63686172 		.ascii	"char\000"
 3603      00
 3604              	.LASF103:
 3605 057f 696E7465 		.ascii	"interrupt_flag\000"
 3605      72727570 
 3605      745F666C 
 3605      616700
 3606              	.LASF33:
 3607 058e 73745F64 		.ascii	"st_data\000"
 3607      61746100 
 3608              	.LASF87:
 3609 0596 70776D5F 		.ascii	"pwm_limit_search\000"
 3609      6C696D69 
 3609      745F7365 
 3609      61726368 
 3609      00
 3610              	.LASF22:
 3611 05a7 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 3611      545F4D4F 
 3611      44455F45 
 3611      58544552 
 3611      4E414C00 
 3612              	.LASF94:
 3613 05bb 675F6164 		.ascii	"g_adc_meas\000"
 3613      635F6D65 
 3613      617300
 3614              	.LASF30:
 3615 05c6 62756666 		.ascii	"buffer\000"
 3615      657200
 3616              	.LASF54:
 3617 05cd 61697263 		.ascii	"airchamber_feedback_active\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 83


 3617      68616D62 
 3617      65725F66 
 3617      65656462 
 3617      61636B5F 
 3618              	.LASF67:
 3619 05e8 64617461 		.ascii	"data_packet_length\000"
 3619      5F706163 
 3619      6B65745F 
 3619      6C656E67 
 3619      746800
 3620              	.LASF121:
 3621 05fb 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 3621      73657273 
 3621      5C6D676E 
 3621      6F63636F 
 3621      5C446F63 
 3622 0628 5F574953 		.ascii	"_WISH_VIBES\\FW_WearableHealtySubj - WISH+Dayton\\P"
 3622      485F5649 
 3622      4245535C 
 3622      46575F57 
 3622      65617261 
 3623 0659 554C5345 		.ascii	"ULSE_HealthySubj.cydsn\000"
 3623      5F486561 
 3623      6C746879 
 3623      5375626A 
 3623      2E637964 
 3624              	.LASF68:
 3625 0670 64617461 		.ascii	"data_packet_buffer\000"
 3625      5F706163 
 3625      6B65745F 
 3625      62756666 
 3625      657200
 3626              	.LASF50:
 3627 0683 6D61785F 		.ascii	"max_residual_current\000"
 3627      72657369 
 3627      6475616C 
 3627      5F637572 
 3627      72656E74 
 3628              	.LASF118:
 3629 0698 66696C74 		.ascii	"filt_emg\000"
 3629      5F656D67 
 3629      00
 3630              	.LASF29:
 3631 06a1 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 3631      545F4D4F 
 3631      44455F45 
 3631      4D475F50 
 3631      524F504F 
 3632              	.LASF25:
 3633 06c0 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 3633      545F4D4F 
 3633      44455F45 
 3633      4D475F49 
 3633      4E544547 
 3634              	.LASF44:
 3635 06d8 656D675F 		.ascii	"emg_speed\000"
 3635      73706565 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccpLUlHN.s 			page 84


 3635      6400
 3636              	.LASF43:
 3637 06e2 656D675F 		.ascii	"emg_max_value\000"
 3637      6D61785F 
 3637      76616C75 
 3637      6500
 3638              	.LASF80:
 3639 06f0 6D6F746F 		.ascii	"motor_dir\000"
 3639      725F6469 
 3639      7200
 3640              	.LASF14:
 3641 06fa 696E7431 		.ascii	"int16\000"
 3641      3600
 3642              	.LASF78:
 3643 0700 63757272 		.ascii	"current_emg\000"
 3643      656E745F 
 3643      656D6700 
 3644              	.LASF106:
 3645 070c 6D617374 		.ascii	"master_mode\000"
 3645      65725F6D 
 3645      6F646500 
 3646              	.LASF110:
 3647 0718 56545F72 		.ascii	"VT_ref\000"
 3647      656600
 3648              	.LASF85:
 3649 071f 616E616C 		.ascii	"analog_read_end\000"
 3649      6F675F72 
 3649      6561645F 
 3649      656E6400 
 3650              	.LASF79:
 3651 072f 70776D5F 		.ascii	"pwm_input\000"
 3651      696E7075 
 3651      7400
 3652              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
