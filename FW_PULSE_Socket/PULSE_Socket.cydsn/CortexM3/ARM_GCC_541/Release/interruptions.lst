ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e E0E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 744B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D880 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 E1000000 		.word	.L12+1
 179 0034 2F010000 		.word	.L13+1
 180 0038 99010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6C4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6B4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6A4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 694B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 684A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 674B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 654B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 634B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 614B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 604B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5D4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 8


 225              		.loc 1 175 0
 226 007c 5C4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A680 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5A4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A180 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 574B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09C80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 97E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (master_mode && rx_data == c_mem.MS.
 249              		.loc 1 186 0
 250 00a2 544B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 0CD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 09D0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b4 504B     		ldr	r3, .L31+12
 261 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 262 00b8 002B     		cmp	r3, #0
 263 00ba 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00bc 4D4B     		ldr	r3, .L31+8
 266 00be 93F8C132 		ldrb	r3, [r3, #705]	@ zero_extendqisi2
 267 00c2 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 9


 269 00c6 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00c8 0023     		movs	r3, #0
 273 00ca FB71     		strb	r3, [r7, #7]
 274 00cc 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00ce 0123     		movs	r3, #1
 278 00d0 FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d2 4A4B     		ldr	r3, .L31+16
 282 00d4 0022     		movs	r2, #0
 283 00d6 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00d8 444B     		ldr	r3, .L31
 286 00da 0222     		movs	r2, #2
 287 00dc 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00de 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00e0 464A     		ldr	r2, .L31+16
 293 00e2 7B79     		ldrb	r3, [r7, #5]
 294 00e4 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e6 454B     		ldr	r3, .L31+16
 297 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00ea 012B     		cmp	r3, #1
 299 00ec 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00ee 434B     		ldr	r3, .L31+16
 302 00f0 0022     		movs	r2, #0
 303 00f2 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 10


 305 00f4 3D4B     		ldr	r3, .L31
 306 00f6 0022     		movs	r2, #0
 307 00f8 1A70     		strb	r2, [r3]
 308 00fa 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fc 3F4B     		ldr	r3, .L31+16
 312 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0100 802B     		cmp	r3, #128
 314 0102 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0104 3D4B     		ldr	r3, .L31+16
 317 0106 0022     		movs	r2, #0
 318 0108 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 010a 384B     		ldr	r3, .L31
 321 010c 0022     		movs	r2, #0
 322 010e 1A70     		strb	r2, [r3]
 323 0110 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0112 3B4B     		ldr	r3, .L31+20
 327 0114 0022     		movs	r2, #0
 328 0116 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 0118 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 011a 002B     		cmp	r3, #0
 332 011c 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 011e 334B     		ldr	r3, .L31
 335 0120 0322     		movs	r2, #3
 336 0122 1A70     		strb	r2, [r3]
 337 0124 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0126 314B     		ldr	r3, .L31
 341 0128 0422     		movs	r2, #4
 342 012a 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012c 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 012e 344B     		ldr	r3, .L31+20
 348 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0132 1946     		mov	r1, r3
 350 0134 334A     		ldr	r2, .L31+24
 351 0136 7B79     		ldrb	r3, [r7, #5]
 352 0138 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 013a 314B     		ldr	r3, .L31+20
 355 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 013e 0133     		adds	r3, r3, #1
 357 0140 DAB2     		uxtb	r2, r3
 358 0142 2F4B     		ldr	r3, .L31+20
 359 0144 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0146 2E4B     		ldr	r3, .L31+20
 362 0148 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 014a 2C4B     		ldr	r3, .L31+16
 364 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 014e 9A42     		cmp	r2, r3
 366 0150 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0152 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0154 002B     		cmp	r3, #0
 370 0156 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 0158 284B     		ldr	r3, .L31+16
 373 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015c 1A46     		mov	r2, r3
 375 015e 2949     		ldr	r1, .L31+24
 376 0160 2948     		ldr	r0, .L31+28
 377 0162 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0166 254B     		ldr	r3, .L31+16
 380 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 016a 1AB2     		sxth	r2, r3
 382 016c 264B     		ldr	r3, .L31+28
 383 016e A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0172 254B     		ldr	r3, .L31+28
 386 0174 0122     		movs	r2, #1
 387 0176 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 017a FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 017e 204B     		ldr	r3, .L31+20
 393 0180 0022     		movs	r2, #0
 394 0182 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0184 1D4B     		ldr	r3, .L31+16
 397 0186 0022     		movs	r2, #0
 398 0188 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 018a 184B     		ldr	r3, .L31
 401 018c 0022     		movs	r2, #0
 402 018e 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 0190 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0192 0133     		adds	r3, r3, #1
 406 0194 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0196 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 0198 184B     		ldr	r3, .L31+16
 412 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019c 013B     		subs	r3, r3, #1
 414 019e DAB2     		uxtb	r2, r3
 415 01a0 164B     		ldr	r3, .L31+16
 416 01a2 1A70     		strb	r2, [r3]
 417 01a4 154B     		ldr	r3, .L31+16
 418 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01a8 002B     		cmp	r3, #0
 420 01aa 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01ac 144B     		ldr	r3, .L31+20
 423 01ae 0022     		movs	r2, #0
 424 01b0 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b2 124B     		ldr	r3, .L31+16
 427 01b4 0022     		movs	r2, #0
 428 01b6 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01b8 0120     		movs	r0, #1
 431 01ba FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01be 0020     		movs	r0, #0
 434 01c0 FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c4 094B     		ldr	r3, .L31
 437 01c6 0022     		movs	r2, #0
 438 01c8 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01ca BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01cc 0133     		adds	r3, r3, #1
 442 01ce BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01d0 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d2 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d6 0346     		mov	r3, r0
 450 01d8 002B     		cmp	r3, #0
 451 01da 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01de 632B     		cmp	r3, #99
 455 01e0 7FF616AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e4 00BF     		nop
 459 01e6 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01e8 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01ea 80BD     		pop	{r7, pc}
 465              	.L32:
 466              		.align	2
 467              	.L31:
 468 01ec 00000000 		.word	state.10225
 469 01f0 04000000 		.word	rx_queue.10229
 470 01f4 00000000 		.word	c_mem
 471 01f8 00000000 		.word	master_mode
 472 01fc 07000000 		.word	data_packet_length.10227
 473 0200 08000000 		.word	data_packet_index.10226
 474 0204 0C000000 		.word	data_packet_buffer.10228
 475 0208 00000000 		.word	g_rx
 476              		.cfi_endproc
 477              	.LFE66:
 478              		.size	interrupt_manager, .-interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 14


 479              		.section	.rodata
 480 001d 000000   		.align	2
 481              	.LC0:
 482 0020 00       		.ascii	"\000"
 483              		.global	__aeabi_i2f
 484              		.global	__aeabi_fdiv
 485              		.section	.text.function_scheduler,"ax",%progbits
 486              		.align	2
 487              		.global	function_scheduler
 488              		.thumb
 489              		.thumb_func
 490              		.type	function_scheduler, %function
 491              	function_scheduler:
 492              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 493              		.loc 1 268 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 17504
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 B0B5     		push	{r4, r5, r7, lr}
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 4, -16
 500              		.cfi_offset 5, -12
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 ADF5884D 		sub	sp, sp, #17408
 504              		.cfi_def_cfa_offset 17424
 505 0006 98B0     		sub	sp, sp, #96
 506              		.cfi_def_cfa_offset 17520
 507 0008 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 509              		.loc 1 272 0
 510 000a 07F56A53 		add	r3, r7, #14976
 511 000e 03F11803 		add	r3, r3, #24
 512 0012 0022     		movs	r2, #0
 513 0014 1A60     		str	r2, [r3]
 514 0016 0433     		adds	r3, r3, #4
 515 0018 4FF41C62 		mov	r2, #2496
 516 001c 0021     		movs	r1, #0
 517 001e 1846     		mov	r0, r3
 518 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 519              		.loc 1 274 0
 520 0024 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 15


 521 0026 07F58842 		add	r2, r7, #17408
 522 002a 02F15F02 		add	r2, r2, #95
 523 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 524              		.loc 1 275 0
 525 0030 0123     		movs	r3, #1
 526 0032 07F58842 		add	r2, r7, #17408
 527 0036 02F15E02 		add	r2, r2, #94
 528 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 529              		.loc 1 277 0
 530 003c 0020     		movs	r0, #0
 531 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 532              		.loc 1 278 0
 533 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 534 0046 0346     		mov	r3, r0
 535 0048 1A46     		mov	r2, r3
 536 004a B34B     		ldr	r3, .L64
 537 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 538              		.loc 1 281 0
 539 004e 0120     		movs	r0, #1
 540 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 541              		.loc 1 285 0
 542 0054 B14B     		ldr	r3, .L64+4
 543 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 544 0058 002B     		cmp	r3, #0
 545 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 546              		.loc 1 286 0
 547 005c AF4B     		ldr	r3, .L64+4
 548 005e 0022     		movs	r2, #0
 549 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 550              		.loc 1 287 0
 551 0062 FFF7FEFF 		bl	interrupt_manager
 552              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****             // if master_mode parameter is set to 1
 290:..\src/interruptions.c ****             if (g_mem.MS.master_mode_active){  
 553              		.loc 1 290 0
 554 0066 AE4B     		ldr	r3, .L64+8
 555 0068 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 556 006c 002B     		cmp	r3, #0
 557 006e 11D0     		beq	.L35
 291:..\src/interruptions.c ****                 
 292:..\src/interruptions.c ****                 // Check if voltage on pin MASTER MODE VOLTAGE, set by a physical switch, is HIGH o
 293:..\src/interruptions.c ****                 // This is a way to force exit from master_mode during execution, since USB command
 294:..\src/interruptions.c ****                 // are hampered by the communications between the two boards (slave and master)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 16


 295:..\src/interruptions.c ****                 
 296:..\src/interruptions.c ****                 if (flag_master < 2000)       // if voltage is LOW, exit master mode
 558              		.loc 1 296 0
 559 0070 AC4B     		ldr	r3, .L64+12
 560 0072 1B68     		ldr	r3, [r3]
 561 0074 B3F5FA6F 		cmp	r3, #2000
 562 0078 03DA     		bge	.L36
 297:..\src/interruptions.c ****                     master_mode = 0;
 563              		.loc 1 297 0
 564 007a AB4B     		ldr	r3, .L64+16
 565 007c 0022     		movs	r2, #0
 566 007e 1A70     		strb	r2, [r3]
 567 0080 0BE0     		b	.L38
 568              	.L36:
 298:..\src/interruptions.c ****                 
 299:..\src/interruptions.c ****                 else if (flag_master > 2000)  // if voltage is LOW, enter master mode
 569              		.loc 1 299 0
 570 0082 A84B     		ldr	r3, .L64+12
 571 0084 1B68     		ldr	r3, [r3]
 572 0086 B3F5FA6F 		cmp	r3, #2000
 573 008a 06DD     		ble	.L38
 300:..\src/interruptions.c ****                     master_mode = 1;
 574              		.loc 1 300 0
 575 008c A64B     		ldr	r3, .L64+16
 576 008e 0122     		movs	r2, #1
 577 0090 1A70     		strb	r2, [r3]
 578 0092 02E0     		b	.L38
 579              	.L35:
 301:..\src/interruptions.c ****             }
 302:..\src/interruptions.c ****             
 303:..\src/interruptions.c ****             else{
 304:..\src/interruptions.c ****                 master_mode = 0;
 580              		.loc 1 304 0
 581 0094 A44B     		ldr	r3, .L64+16
 582 0096 0022     		movs	r2, #0
 583 0098 1A70     		strb	r2, [r3]
 584              	.L38:
 305:..\src/interruptions.c ****             }
 306:..\src/interruptions.c ****                     
 307:..\src/interruptions.c ****             if (master_mode){
 585              		.loc 1 307 0
 586 009a A34B     		ldr	r3, .L64+16
 587 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 009e 002B     		cmp	r3, #0
 589 00a0 56D0     		beq	.L39
 308:..\src/interruptions.c ****                 
 309:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber and Vi
 310:..\src/interruptions.c ****                 if (g_mem.FB.vibrotactile_feedback_active && g_mem.FB.airchamber_feedback_active){ 
 590              		.loc 1 310 0
 591 00a2 9F4B     		ldr	r3, .L64+8
 592 00a4 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 593 00a8 002B     		cmp	r3, #0
 594 00aa 0FD0     		beq	.L40
 595              		.loc 1 310 0 is_stmt 0 discriminator 1
 596 00ac 9C4B     		ldr	r3, .L64+8
 597 00ae 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
 598 00b2 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 17


 599 00b4 0AD0     		beq	.L40
 311:..\src/interruptions.c ****                     
 312:..\src/interruptions.c ****                     LED_CTRL_Write(GREEN);
 600              		.loc 1 312 0 is_stmt 1
 601 00b6 0220     		movs	r0, #2
 602 00b8 FFF7FEFF 		bl	LED_CTRL_Write
 313:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 603              		.loc 1 313 0
 604 00bc 0020     		movs	r0, #0
 605 00be FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 314:..\src/interruptions.c ****                 
 315:..\src/interruptions.c ****                     air_chambers_control();
 606              		.loc 1 315 0
 607 00c2 FFF7FEFF 		bl	air_chambers_control
 316:..\src/interruptions.c ****                     vibrotactile_control();
 608              		.loc 1 316 0
 609 00c6 FFF7FEFF 		bl	vibrotactile_control
 610 00ca 1AE0     		b	.L41
 611              	.L40:
 317:..\src/interruptions.c ****                   
 318:..\src/interruptions.c ****                 }
 319:..\src/interruptions.c ****                 
 320:..\src/interruptions.c ****                 //-------------------------------------------------------------- Air Chamber contro
 321:..\src/interruptions.c ****                 else if (g_mem.FB.airchamber_feedback_active){
 612              		.loc 1 321 0
 613 00cc 944B     		ldr	r3, .L64+8
 614 00ce 93F8DD32 		ldrb	r3, [r3, #733]	@ zero_extendqisi2
 615 00d2 002B     		cmp	r3, #0
 616 00d4 08D0     		beq	.L42
 322:..\src/interruptions.c ****                     
 323:..\src/interruptions.c ****                     LED_CTRL_Write(RED);
 617              		.loc 1 323 0
 618 00d6 0120     		movs	r0, #1
 619 00d8 FFF7FEFF 		bl	LED_CTRL_Write
 324:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 620              		.loc 1 324 0
 621 00dc 0020     		movs	r0, #0
 622 00de FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 325:..\src/interruptions.c ****                     
 326:..\src/interruptions.c ****                     air_chambers_control();
 623              		.loc 1 326 0
 624 00e2 FFF7FEFF 		bl	air_chambers_control
 625 00e6 0CE0     		b	.L41
 626              	.L42:
 327:..\src/interruptions.c ****                     
 328:..\src/interruptions.c ****                 }
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****                 //-------------------------------------------------------------- Vibrotactile contr
 331:..\src/interruptions.c ****                 else if (g_mem.FB.vibrotactile_feedback_active){
 627              		.loc 1 331 0
 628 00e8 8D4B     		ldr	r3, .L64+8
 629 00ea 93F8DC32 		ldrb	r3, [r3, #732]	@ zero_extendqisi2
 630 00ee 002B     		cmp	r3, #0
 631 00f0 07D0     		beq	.L41
 332:..\src/interruptions.c ****                     
 333:..\src/interruptions.c ****                     LED_CTRL_Write(YELLOW);
 632              		.loc 1 333 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 18


 633 00f2 0320     		movs	r0, #3
 634 00f4 FFF7FEFF 		bl	LED_CTRL_Write
 334:..\src/interruptions.c ****                     BLINK_CTRL_EN_Write(0);
 635              		.loc 1 334 0
 636 00f8 0020     		movs	r0, #0
 637 00fa FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 335:..\src/interruptions.c ****                     
 336:..\src/interruptions.c ****                     vibrotactile_control();
 638              		.loc 1 336 0
 639 00fe FFF7FEFF 		bl	vibrotactile_control
 640              	.L41:
 337:..\src/interruptions.c ****                 }
 338:..\src/interruptions.c ****                 
 339:..\src/interruptions.c ****                 if (interrupt_flag){
 641              		.loc 1 339 0
 642 0102 864B     		ldr	r3, .L64+4
 643 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 644 0106 002B     		cmp	r3, #0
 645 0108 04D0     		beq	.L43
 340:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 646              		.loc 1 340 0
 647 010a 844B     		ldr	r3, .L64+4
 648 010c 0022     		movs	r2, #0
 649 010e 1A70     		strb	r2, [r3]
 341:..\src/interruptions.c ****                     interrupt_manager();
 650              		.loc 1 341 0
 651 0110 FFF7FEFF 		bl	interrupt_manager
 652              	.L43:
 342:..\src/interruptions.c ****                 }
 343:..\src/interruptions.c ****                     
 344:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX); // Compute reference for the SH starting f
 653              		.loc 1 344 0
 654 0114 07F58843 		add	r3, r7, #17408
 655 0118 03F15E03 		add	r3, r3, #94
 656 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 657 011e 1846     		mov	r0, r3
 658 0120 FFF7FEFF 		bl	motor_control_generic
 345:..\src/interruptions.c ****                     
 346:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID); // Send reference to the SH calli
 659              		.loc 1 346 0
 660 0124 814B     		ldr	r3, .L64+20
 661 0126 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 662 012a 07F58843 		add	r3, r7, #17408
 663 012e 03F15E03 		add	r3, r3, #94
 664 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 665 0134 1146     		mov	r1, r2
 666 0136 1846     		mov	r0, r3
 667 0138 FFF7FEFF 		bl	drive_slave
 347:..\src/interruptions.c ****                     
 348:..\src/interruptions.c ****                 if (interrupt_flag){
 668              		.loc 1 348 0
 669 013c 774B     		ldr	r3, .L64+4
 670 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 671 0140 002B     		cmp	r3, #0
 672 0142 14D0     		beq	.L45
 349:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 673              		.loc 1 349 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 19


 674 0144 754B     		ldr	r3, .L64+4
 675 0146 0022     		movs	r2, #0
 676 0148 1A70     		strb	r2, [r3]
 350:..\src/interruptions.c ****                     interrupt_manager();
 677              		.loc 1 350 0
 678 014a FFF7FEFF 		bl	interrupt_manager
 679 014e 0EE0     		b	.L45
 680              	.L39:
 351:..\src/interruptions.c ****                 }
 352:..\src/interruptions.c ****             }
 353:..\src/interruptions.c ****             
 354:..\src/interruptions.c ****            
 355:..\src/interruptions.c ****             else {
 356:..\src/interruptions.c ****                 
 357:..\src/interruptions.c ****                 LED_CTRL_Write(0);
 681              		.loc 1 357 0
 682 0150 0020     		movs	r0, #0
 683 0152 FFF7FEFF 		bl	LED_CTRL_Write
 358:..\src/interruptions.c ****                 BLINK_CTRL_EN_Write(0);
 684              		.loc 1 358 0
 685 0156 0020     		movs	r0, #0
 686 0158 FFF7FEFF 		bl	BLINK_CTRL_EN_Write
 359:..\src/interruptions.c ****                     
 360:..\src/interruptions.c ****                 // Check Interrupt 
 361:..\src/interruptions.c ****                 if (interrupt_flag){
 687              		.loc 1 361 0
 688 015c 6F4B     		ldr	r3, .L64+4
 689 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 690 0160 002B     		cmp	r3, #0
 691 0162 04D0     		beq	.L45
 362:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 692              		.loc 1 362 0
 693 0164 6D4B     		ldr	r3, .L64+4
 694 0166 0022     		movs	r2, #0
 695 0168 1A70     		strb	r2, [r3]
 363:..\src/interruptions.c ****                     interrupt_manager();
 696              		.loc 1 363 0
 697 016a FFF7FEFF 		bl	interrupt_manager
 698              	.L45:
 364:..\src/interruptions.c ****                 } 
 365:..\src/interruptions.c ****             }
 366:..\src/interruptions.c ****             
 367:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);  // Compute references and drive air pump
 699              		.loc 1 367 0
 700 016e 07F58843 		add	r3, r7, #17408
 701 0172 03F15F03 		add	r3, r3, #95
 702 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 703 0178 1846     		mov	r0, r3
 704 017a FFF7FEFF 		bl	motor_control_generic
 368:..\src/interruptions.c ****     
 369:..\src/interruptions.c ****             if (interrupt_flag){
 705              		.loc 1 369 0
 706 017e 674B     		ldr	r3, .L64+4
 707 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 708 0182 002B     		cmp	r3, #0
 709 0184 04D0     		beq	.L46
 370:..\src/interruptions.c ****                 interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 20


 710              		.loc 1 370 0
 711 0186 654B     		ldr	r3, .L64+4
 712 0188 0022     		movs	r2, #0
 713 018a 1A70     		strb	r2, [r3]
 371:..\src/interruptions.c ****                 interrupt_manager();
 714              		.loc 1 371 0
 715 018c FFF7FEFF 		bl	interrupt_manager
 716              	.L46:
 372:..\src/interruptions.c ****             }
 373:..\src/interruptions.c ****            
 374:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 375:..\src/interruptions.c **** 
 376:..\src/interruptions.c ****     analog_read_end();
 717              		.loc 1 376 0
 718 0190 FFF7FEFF 		bl	analog_read_end
 377:..\src/interruptions.c **** 
 378:..\src/interruptions.c ****     if (interrupt_flag){
 719              		.loc 1 378 0
 720 0194 614B     		ldr	r3, .L64+4
 721 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 722 0198 002B     		cmp	r3, #0
 723 019a 04D0     		beq	.L47
 379:..\src/interruptions.c ****         interrupt_flag = FALSE;
 724              		.loc 1 379 0
 725 019c 5F4B     		ldr	r3, .L64+4
 726 019e 0022     		movs	r2, #0
 727 01a0 1A70     		strb	r2, [r3]
 380:..\src/interruptions.c ****         interrupt_manager();
 728              		.loc 1 380 0
 729 01a2 FFF7FEFF 		bl	interrupt_manager
 730              	.L47:
 381:..\src/interruptions.c ****     }
 382:..\src/interruptions.c **** 
 383:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 384:..\src/interruptions.c **** 
 385:..\src/interruptions.c ****     overcurrent_control();
 731              		.loc 1 385 0
 732 01a6 FFF7FEFF 		bl	overcurrent_control
 386:..\src/interruptions.c ****     
 387:..\src/interruptions.c ****     // Check Interrupt 
 388:..\src/interruptions.c ****     
 389:..\src/interruptions.c ****     if (interrupt_flag){
 733              		.loc 1 389 0
 734 01aa 5C4B     		ldr	r3, .L64+4
 735 01ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 736 01ae 002B     		cmp	r3, #0
 737 01b0 04D0     		beq	.L48
 390:..\src/interruptions.c ****         interrupt_flag = FALSE;
 738              		.loc 1 390 0
 739 01b2 5A4B     		ldr	r3, .L64+4
 740 01b4 0022     		movs	r2, #0
 741 01b6 1A70     		strb	r2, [r3]
 391:..\src/interruptions.c ****         interrupt_manager();
 742              		.loc 1 391 0
 743 01b8 FFF7FEFF 		bl	interrupt_manager
 744              	.L48:
 392:..\src/interruptions.c ****     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 21


 393:..\src/interruptions.c **** 
 394:..\src/interruptions.c ****     //---------------------------------- Calibration 
 395:..\src/interruptions.c **** 
 396:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 397:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 745              		.loc 1 397 0
 746 01bc 5C4B     		ldr	r3, .L64+24
 747 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748 01c0 012B     		cmp	r3, #1
 749 01c2 0ED1     		bne	.L49
 398:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 750              		.loc 1 398 0
 751 01c4 5B4B     		ldr	r3, .L64+28
 752 01c6 1B88     		ldrh	r3, [r3]
 753 01c8 0A2B     		cmp	r3, #10
 754 01ca 04D1     		bne	.L50
 399:..\src/interruptions.c ****             calibration();
 755              		.loc 1 399 0
 756 01cc FFF7FEFF 		bl	calibration
 400:..\src/interruptions.c ****             counter_calibration = 0;
 757              		.loc 1 400 0
 758 01d0 584B     		ldr	r3, .L64+28
 759 01d2 0022     		movs	r2, #0
 760 01d4 1A80     		strh	r2, [r3]	@ movhi
 761              	.L50:
 401:..\src/interruptions.c ****         }
 402:..\src/interruptions.c ****         counter_calibration++;
 762              		.loc 1 402 0
 763 01d6 574B     		ldr	r3, .L64+28
 764 01d8 1B88     		ldrh	r3, [r3]
 765 01da 0133     		adds	r3, r3, #1
 766 01dc 9AB2     		uxth	r2, r3
 767 01de 554B     		ldr	r3, .L64+28
 768 01e0 1A80     		strh	r2, [r3]	@ movhi
 769              	.L49:
 403:..\src/interruptions.c ****     }
 404:..\src/interruptions.c **** 
 405:..\src/interruptions.c ****     // Check Interrupt 
 406:..\src/interruptions.c ****     
 407:..\src/interruptions.c ****     if (interrupt_flag){
 770              		.loc 1 407 0
 771 01e2 4E4B     		ldr	r3, .L64+4
 772 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 773 01e6 002B     		cmp	r3, #0
 774 01e8 04D0     		beq	.L51
 408:..\src/interruptions.c ****         interrupt_flag = FALSE;
 775              		.loc 1 408 0
 776 01ea 4C4B     		ldr	r3, .L64+4
 777 01ec 0022     		movs	r2, #0
 778 01ee 1A70     		strb	r2, [r3]
 409:..\src/interruptions.c ****         interrupt_manager();
 779              		.loc 1 409 0
 780 01f0 FFF7FEFF 		bl	interrupt_manager
 781              	.L51:
 410:..\src/interruptions.c ****     }
 411:..\src/interruptions.c ****     
 412:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 22


 413:..\src/interruptions.c ****     
 414:..\src/interruptions.c ****      
 415:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 416:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 782              		.loc 1 416 0
 783 01f4 4D4B     		ldr	r3, .L64+20
 784 01f6 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 785 01fa 002B     		cmp	r3, #0
 786 01fc 0AD0     		beq	.L52
 417:..\src/interruptions.c ****         
 418:..\src/interruptions.c ****         update_EMG_history();
 787              		.loc 1 418 0
 788 01fe FFF7FEFF 		bl	update_EMG_history
 419:..\src/interruptions.c **** 
 420:..\src/interruptions.c ****         // Check Interrupt 
 421:..\src/interruptions.c **** 
 422:..\src/interruptions.c ****         if (interrupt_flag){
 789              		.loc 1 422 0
 790 0202 464B     		ldr	r3, .L64+4
 791 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 792 0206 002B     		cmp	r3, #0
 793 0208 04D0     		beq	.L52
 423:..\src/interruptions.c ****             interrupt_flag = FALSE;
 794              		.loc 1 423 0
 795 020a 444B     		ldr	r3, .L64+4
 796 020c 0022     		movs	r2, #0
 797 020e 1A70     		strb	r2, [r3]
 424:..\src/interruptions.c ****             interrupt_manager();
 798              		.loc 1 424 0
 799 0210 FFF7FEFF 		bl	interrupt_manager
 800              	.L52:
 425:..\src/interruptions.c ****         }
 426:..\src/interruptions.c ****     }
 427:..\src/interruptions.c **** 
 428:..\src/interruptions.c ****     
 429:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 430:..\src/interruptions.c **** 
 431:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 801              		.loc 1 431 0
 802 0214 454B     		ldr	r3, .L64+20
 803 0216 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 804 021a 1A46     		mov	r2, r3
 805 021c 464B     		ldr	r3, .L64+32
 806 021e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 807 0220 002B     		cmp	r3, #0
 808 0222 01D0     		beq	.L53
 432:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 809              		.loc 1 432 0
 810 0224 FFF7FEFF 		bl	cycles_counter_update
 811              	.L53:
 433:..\src/interruptions.c ****     }
 434:..\src/interruptions.c **** 
 435:..\src/interruptions.c ****     // Check Cycles Interrupt 
 436:..\src/interruptions.c ****     
 437:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 812              		.loc 1 437 0
 813 0228 444B     		ldr	r3, .L64+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 23


 814 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 022c 002B     		cmp	r3, #0
 816 022e 00F0A280 		beq	.L54
 438:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 817              		.loc 1 438 0
 818 0232 424B     		ldr	r3, .L64+36
 819 0234 0022     		movs	r2, #0
 820 0236 1A70     		strb	r2, [r3]
 439:..\src/interruptions.c **** 
 440:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 441:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 442:..\src/interruptions.c ****         if(can_write) {
 821              		.loc 1 442 0
 822 0238 414B     		ldr	r3, .L64+40
 823 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 023c 002B     		cmp	r3, #0
 825 023e 54D0     		beq	.L55
 443:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 826              		.loc 1 443 0
 827 0240 404B     		ldr	r3, .L64+44
 828 0242 0022     		movs	r2, #0
 829 0244 1A70     		strb	r2, [r3]
 444:..\src/interruptions.c ****             
 445:..\src/interruptions.c ****             //Update time variable
 446:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 830              		.loc 1 446 0
 831 0246 364B     		ldr	r3, .L64+8
 832 0248 9B6D     		ldr	r3, [r3, #88]
 833 024a 7833     		adds	r3, r3, #120
 834 024c 344A     		ldr	r2, .L64+8
 835 024e 9365     		str	r3, [r2, #88]
 447:..\src/interruptions.c ****             
 448:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 836              		.loc 1 448 0
 837 0250 364B     		ldr	r3, .L64+20
 838 0252 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 839 0256 012B     		cmp	r3, #1
 840 0258 47D1     		bne	.L55
 449:..\src/interruptions.c ****                 
 450:..\src/interruptions.c ****                 store_RTC_current_time();
 841              		.loc 1 450 0
 842 025a FFF7FEFF 		bl	store_RTC_current_time
 451:..\src/interruptions.c ****                 
 452:..\src/interruptions.c ****                 //Write in SD card
 453:..\src/interruptions.c ****                 prepare_SD_info(info_);
 843              		.loc 1 453 0
 844 025e 07F56A53 		add	r3, r7, #14976
 845 0262 03F11803 		add	r3, r3, #24
 846 0266 1846     		mov	r0, r3
 847 0268 FFF7FEFF 		bl	prepare_SD_info
 454:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 848              		.loc 1 454 0
 849 026c 364B     		ldr	r3, .L64+48
 850 026e 1C68     		ldr	r4, [r3]
 851 0270 07F56A53 		add	r3, r7, #14976
 852 0274 03F11803 		add	r3, r3, #24
 853 0278 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 24


 854 027a FFF7FEFF 		bl	strlen
 855 027e 0246     		mov	r2, r0
 856 0280 07F56A53 		add	r3, r7, #14976
 857 0284 03F11803 		add	r3, r3, #24
 858 0288 1946     		mov	r1, r3
 859 028a 2046     		mov	r0, r4
 860 028c FFF7FEFF 		bl	FS_Write
 455:..\src/interruptions.c ****                 
 456:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 861              		.loc 1 456 0
 862 0290 264B     		ldr	r3, .L64+20
 863 0292 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 864 0296 002B     		cmp	r3, #0
 865 0298 27D0     		beq	.L55
 866              	.LBB2:
 457:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 867              		.loc 1 457 0
 868 029a 07F16003 		add	r3, r7, #96
 869 029e 603B     		subs	r3, r3, #96
 870 02a0 0022     		movs	r2, #0
 871 02a2 1A60     		str	r2, [r3]
 872 02a4 0433     		adds	r3, r3, #4
 873 02a6 43F69422 		movw	r2, #14996
 874 02aa 0021     		movs	r1, #0
 875 02ac 1846     		mov	r0, r3
 876 02ae FFF7FEFF 		bl	memset
 458:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 877              		.loc 1 458 0
 878 02b2 264B     		ldr	r3, .L64+52
 879 02b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 880 02b6 07F16003 		add	r3, r7, #96
 881 02ba 603B     		subs	r3, r3, #96
 882 02bc 1A70     		strb	r2, [r3]
 459:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 883              		.loc 1 459 0
 884 02be 07F16003 		add	r3, r7, #96
 885 02c2 603B     		subs	r3, r3, #96
 886 02c4 1846     		mov	r0, r3
 887 02c6 FFF7FEFF 		bl	prepare_SD_EMG_history
 460:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 888              		.loc 1 460 0
 889 02ca 214B     		ldr	r3, .L64+56
 890 02cc 1C68     		ldr	r4, [r3]
 891 02ce 07F16003 		add	r3, r7, #96
 892 02d2 603B     		subs	r3, r3, #96
 893 02d4 1846     		mov	r0, r3
 894 02d6 FFF7FEFF 		bl	strlen
 895 02da 0246     		mov	r2, r0
 896 02dc 07F16003 		add	r3, r7, #96
 897 02e0 603B     		subs	r3, r3, #96
 898 02e2 1946     		mov	r1, r3
 899 02e4 2046     		mov	r0, r4
 900 02e6 FFF7FEFF 		bl	FS_Write
 901              	.L55:
 902              	.LBE2:
 461:..\src/interruptions.c ****                 }
 462:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 25


 463:..\src/interruptions.c ****         }
 464:..\src/interruptions.c ****         
 465:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 466:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 903              		.loc 1 466 0
 904 02ea 164B     		ldr	r3, .L64+44
 905 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 02ee 012B     		cmp	r3, #1
 907 02f0 03D0     		beq	.L56
 908              		.loc 1 466 0 is_stmt 0 discriminator 1
 909 02f2 144B     		ldr	r3, .L64+44
 910 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 911 02f6 022B     		cmp	r3, #2
 912 02f8 2CD1     		bne	.L57
 913              	.L56:
 467:..\src/interruptions.c ****             // Deactivate motors
 468:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 914              		.loc 1 468 0 is_stmt 1
 915 02fa 0021     		movs	r1, #0
 916 02fc 0020     		movs	r0, #0
 917 02fe FFF7FEFF 		bl	enable_motor
 469:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 918              		.loc 1 469 0
 919 0302 074B     		ldr	r3, .L64+8
 920 0304 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 921 0308 012B     		cmp	r3, #1
 922 030a 34D1     		bne	.L54
 470:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 923              		.loc 1 470 0
 924 030c 0021     		movs	r1, #0
 925 030e 0120     		movs	r0, #1
 926 0310 FFF7FEFF 		bl	enable_motor
 469:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 927              		.loc 1 469 0
 928 0314 2FE0     		b	.L54
 929              	.L65:
 930 0316 00BF     		.align	2
 931              	.L64:
 932 0318 00000000 		.word	timer_value0
 933 031c 00000000 		.word	interrupt_flag
 934 0320 00000000 		.word	g_mem
 935 0324 00000000 		.word	flag_master
 936 0328 00000000 		.word	master_mode
 937 032c 00000000 		.word	c_mem
 938 0330 00000000 		.word	calib
 939 0334 00000000 		.word	counter_calibration.10245
 940 0338 00000000 		.word	pos_reconstruct
 941 033c 00000000 		.word	cycles_interrupt_flag
 942 0340 00000000 		.word	can_write
 943 0344 00000000 		.word	cycles_status
 944 0348 00000000 		.word	pFile
 945 034c 20000000 		.word	.LC0
 946 0350 00000000 		.word	pEMGHFile
 947              	.L57:
 471:..\src/interruptions.c ****             }
 472:..\src/interruptions.c ****         }
 473:..\src/interruptions.c ****         else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 26


 474:..\src/interruptions.c ****             // Activate/Deactivate motors
 475:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 948              		.loc 1 475 0
 949 0354 4D4B     		ldr	r3, .L66
 950 0356 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 951 0358 1946     		mov	r1, r3
 952 035a 0020     		movs	r0, #0
 953 035c FFF7FEFF 		bl	enable_motor
 476:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 954              		.loc 1 476 0
 955 0360 4B4B     		ldr	r3, .L66+4
 956 0362 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 957 0366 012B     		cmp	r3, #1
 958 0368 05D1     		bne	.L54
 477:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
 959              		.loc 1 477 0
 960 036a 484B     		ldr	r3, .L66
 961 036c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 962 036e 1946     		mov	r1, r3
 963 0370 0120     		movs	r0, #1
 964 0372 FFF7FEFF 		bl	enable_motor
 965              	.L54:
 478:..\src/interruptions.c ****             }
 479:..\src/interruptions.c ****         }
 480:..\src/interruptions.c ****     }
 481:..\src/interruptions.c ****     
 482:..\src/interruptions.c ****     // Check Interrupt 
 483:..\src/interruptions.c ****     
 484:..\src/interruptions.c ****     if (interrupt_flag){
 966              		.loc 1 484 0
 967 0376 474B     		ldr	r3, .L66+8
 968 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 037a 002B     		cmp	r3, #0
 970 037c 04D0     		beq	.L59
 485:..\src/interruptions.c ****         interrupt_flag = FALSE;
 971              		.loc 1 485 0
 972 037e 454B     		ldr	r3, .L66+8
 973 0380 0022     		movs	r2, #0
 974 0382 1A70     		strb	r2, [r3]
 486:..\src/interruptions.c ****         interrupt_manager();
 975              		.loc 1 486 0
 976 0384 FFF7FEFF 		bl	interrupt_manager
 977              	.L59:
 487:..\src/interruptions.c ****     }
 488:..\src/interruptions.c ****     
 489:..\src/interruptions.c ****     
 490:..\src/interruptions.c ****     //---------------------------------- Check battery
 491:..\src/interruptions.c **** 
 492:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 493:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 978              		.loc 1 493 0
 979 0388 434B     		ldr	r3, .L66+12
 980 038a 1B88     		ldrh	r3, [r3]
 981 038c 0A2B     		cmp	r3, #10
 982 038e 04D1     		bne	.L60
 494:..\src/interruptions.c ****         battery_management();   
 983              		.loc 1 494 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 27


 984 0390 FFF7FEFF 		bl	battery_management
 495:..\src/interruptions.c ****         counter_tension_func = 0;
 985              		.loc 1 495 0
 986 0394 404B     		ldr	r3, .L66+12
 987 0396 0022     		movs	r2, #0
 988 0398 1A80     		strh	r2, [r3]	@ movhi
 989              	.L60:
 496:..\src/interruptions.c ****     }
 497:..\src/interruptions.c ****     counter_tension_func++;
 990              		.loc 1 497 0
 991 039a 3F4B     		ldr	r3, .L66+12
 992 039c 1B88     		ldrh	r3, [r3]
 993 039e 0133     		adds	r3, r3, #1
 994 03a0 9AB2     		uxth	r2, r3
 995 03a2 3D4B     		ldr	r3, .L66+12
 996 03a4 1A80     		strh	r2, [r3]	@ movhi
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****     // Check Interrupt 
 500:..\src/interruptions.c ****     
 501:..\src/interruptions.c ****     if (interrupt_flag){
 997              		.loc 1 501 0
 998 03a6 3B4B     		ldr	r3, .L66+8
 999 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 03aa 002B     		cmp	r3, #0
 1001 03ac 04D0     		beq	.L61
 502:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1002              		.loc 1 502 0
 1003 03ae 394B     		ldr	r3, .L66+8
 1004 03b0 0022     		movs	r2, #0
 1005 03b2 1A70     		strb	r2, [r3]
 503:..\src/interruptions.c ****         interrupt_manager();
 1006              		.loc 1 503 0
 1007 03b4 FFF7FEFF 		bl	interrupt_manager
 1008              	.L61:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c ****    
 506:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 507:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1009              		.loc 1 507 0
 1010 03b8 384B     		ldr	r3, .L66+16
 1011 03ba 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1012 03be 002B     		cmp	r3, #0
 1013 03c0 0AD0     		beq	.L62
 508:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1014              		.loc 1 508 0
 1015 03c2 FFF7FEFF 		bl	ReadAllIMUs
 509:..\src/interruptions.c ****         
 510:..\src/interruptions.c ****         if (interrupt_flag){
 1016              		.loc 1 510 0
 1017 03c6 334B     		ldr	r3, .L66+8
 1018 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 03ca 002B     		cmp	r3, #0
 1020 03cc 04D0     		beq	.L62
 511:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1021              		.loc 1 511 0
 1022 03ce 314B     		ldr	r3, .L66+8
 1023 03d0 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 28


 1024 03d2 1A70     		strb	r2, [r3]
 512:..\src/interruptions.c ****             interrupt_manager();
 1025              		.loc 1 512 0
 1026 03d4 FFF7FEFF 		bl	interrupt_manager
 1027              	.L62:
 513:..\src/interruptions.c ****         }
 514:..\src/interruptions.c ****     }
 515:..\src/interruptions.c ****    
 516:..\src/interruptions.c ****     //---------------------------------- Update States
 517:..\src/interruptions.c ****     
 518:..\src/interruptions.c ****     // Load k-1 state
 519:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1028              		.loc 1 519 0
 1029 03d8 314A     		ldr	r2, .L66+20
 1030 03da 324B     		ldr	r3, .L66+24
 1031 03dc 1446     		mov	r4, r2
 1032 03de 1D46     		mov	r5, r3
 1033 03e0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1034 03e2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1035 03e4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1036 03e6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1037 03e8 95E80300 		ldmia	r5, {r0, r1}
 1038 03ec 84E80300 		stmia	r4, {r0, r1}
 520:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1039              		.loc 1 520 0
 1040 03f0 2D4A     		ldr	r2, .L66+28
 1041 03f2 2E4B     		ldr	r3, .L66+32
 1042 03f4 1046     		mov	r0, r2
 1043 03f6 1946     		mov	r1, r3
 1044 03f8 6823     		movs	r3, #104
 1045 03fa 1A46     		mov	r2, r3
 1046 03fc FFF7FEFF 		bl	memcpy
 521:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1047              		.loc 1 521 0
 1048 0400 2B4A     		ldr	r2, .L66+36
 1049 0402 224B     		ldr	r3, .L66
 1050 0404 1446     		mov	r4, r2
 1051 0406 1D46     		mov	r5, r3
 1052 0408 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1053 040a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1054 040c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1055 0410 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 522:..\src/interruptions.c **** 
 523:..\src/interruptions.c ****     // Load k+1 state        
 524:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1056              		.loc 1 524 0
 1057 0414 1D4A     		ldr	r2, .L66
 1058 0416 274B     		ldr	r3, .L66+40
 1059 0418 1446     		mov	r4, r2
 1060 041a 1D46     		mov	r5, r3
 1061 041c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1062 041e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1063 0420 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1064 0424 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 525:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1065              		.loc 1 525 0
 1066 0428 234A     		ldr	r2, .L66+44
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 29


 1067 042a 244B     		ldr	r3, .L66+48
 1068 042c 1046     		mov	r0, r2
 1069 042e 1946     		mov	r1, r3
 1070 0430 C823     		movs	r3, #200
 1071 0432 1A46     		mov	r2, r3
 1072 0434 FFF7FEFF 		bl	memcpy
 526:..\src/interruptions.c ****                     
 527:..\src/interruptions.c ****     if (interrupt_flag){
 1073              		.loc 1 527 0
 1074 0438 164B     		ldr	r3, .L66+8
 1075 043a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1076 043c 002B     		cmp	r3, #0
 1077 043e 04D0     		beq	.L63
 528:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1078              		.loc 1 528 0
 1079 0440 144B     		ldr	r3, .L66+8
 1080 0442 0022     		movs	r2, #0
 1081 0444 1A70     		strb	r2, [r3]
 529:..\src/interruptions.c ****         interrupt_manager();
 1082              		.loc 1 529 0
 1083 0446 FFF7FEFF 		bl	interrupt_manager
 1084              	.L63:
 530:..\src/interruptions.c ****     }
 531:..\src/interruptions.c **** 
 532:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1085              		.loc 1 532 0
 1086 044a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1087 044e 0346     		mov	r3, r0
 1088 0450 1A46     		mov	r2, r3
 1089 0452 1B4B     		ldr	r3, .L66+52
 1090 0454 1A80     		strh	r2, [r3]	@ movhi
 533:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1091              		.loc 1 533 0
 1092 0456 1B4B     		ldr	r3, .L66+56
 1093 0458 1B88     		ldrh	r3, [r3]
 1094 045a 1A46     		mov	r2, r3
 1095 045c 184B     		ldr	r3, .L66+52
 1096 045e 1B88     		ldrh	r3, [r3]
 1097 0460 D31A     		subs	r3, r2, r3
 1098 0462 1846     		mov	r0, r3
 1099 0464 FFF7FEFF 		bl	__aeabi_i2f
 1100 0468 0346     		mov	r3, r0
 1101 046a 1749     		ldr	r1, .L66+60
 1102 046c 1846     		mov	r0, r3
 1103 046e FFF7FEFF 		bl	__aeabi_fdiv
 1104 0472 0346     		mov	r3, r0
 1105 0474 1A46     		mov	r2, r3
 1106 0476 154B     		ldr	r3, .L66+64
 1107 0478 1A60     		str	r2, [r3]	@ float
 534:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1108              		.loc 1 534 0
 1109 047a 0120     		movs	r0, #1
 1110 047c FFF7FEFF 		bl	MY_TIMER_REG_Write
 535:..\src/interruptions.c **** 
 536:..\src/interruptions.c **** }
 1111              		.loc 1 536 0
 1112 0480 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 30


 1113 0482 07F58847 		add	r7, r7, #17408
 1114 0486 6037     		adds	r7, r7, #96
 1115              		.cfi_def_cfa_offset 16
 1116 0488 BD46     		mov	sp, r7
 1117              		.cfi_def_cfa_register 13
 1118              		@ sp needed
 1119 048a B0BD     		pop	{r4, r5, r7, pc}
 1120              	.L67:
 1121              		.align	2
 1122              	.L66:
 1123 048c 00000000 		.word	g_ref
 1124 0490 00000000 		.word	g_mem
 1125 0494 00000000 		.word	interrupt_flag
 1126 0498 02000000 		.word	counter_tension_func.10246
 1127 049c 00000000 		.word	c_mem
 1128 04a0 00000000 		.word	g_adc_measOld
 1129 04a4 00000000 		.word	g_adc_meas
 1130 04a8 00000000 		.word	g_measOld
 1131 04ac 00000000 		.word	g_meas
 1132 04b0 00000000 		.word	g_refOld
 1133 04b4 00000000 		.word	g_refNew
 1134 04b8 00000000 		.word	g_imu
 1135 04bc 00000000 		.word	g_imuNew
 1136 04c0 00000000 		.word	timer_value
 1137 04c4 00000000 		.word	timer_value0
 1138 04c8 00247449 		.word	1232348160
 1139 04cc 00000000 		.word	cycle_time
 1140              		.cfi_endproc
 1141              	.LFE67:
 1142              		.size	function_scheduler, .-function_scheduler
 1143              		.section	.text.compute_reference,"ax",%progbits
 1144              		.align	2
 1145              		.global	compute_reference
 1146              		.thumb
 1147              		.thumb_func
 1148              		.type	compute_reference, %function
 1149              	compute_reference:
 1150              	.LFB68:
 537:..\src/interruptions.c **** 
 538:..\src/interruptions.c **** //==============================================================================
 539:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 540:..\src/interruptions.c **** //==============================================================================
 541:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1151              		.loc 1 541 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 40
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155 0000 80B5     		push	{r7, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 8CB0     		sub	sp, sp, #48
 1160              		.cfi_def_cfa_offset 56
 1161 0004 02AF     		add	r7, sp, #8
 1162              		.cfi_def_cfa 7, 48
 1163 0006 0346     		mov	r3, r0
 1164 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 31


 1165 000a 7A60     		str	r2, [r7, #4]
 1166 000c FB73     		strb	r3, [r7, #15]
 542:..\src/interruptions.c ****     
 543:..\src/interruptions.c ****     int32 CYDATA handle_value;
 544:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 545:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1167              		.loc 1 545 0
 1168 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1169 0010 1346     		mov	r3, r2
 1170 0012 DB00     		lsls	r3, r3, #3
 1171 0014 9B1A     		subs	r3, r3, r2
 1172 0016 1B01     		lsls	r3, r3, #4
 1173 0018 B033     		adds	r3, r3, #176
 1174 001a A74A     		ldr	r2, .L132
 1175 001c 1344     		add	r3, r3, r2
 1176 001e 3B62     		str	r3, [r7, #32]
 546:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1177              		.loc 1 546 0
 1178 0020 3B6A     		ldr	r3, [r7, #32]
 1179 0022 93F86030 		ldrb	r3, [r3, #96]
 1180 0026 FB77     		strb	r3, [r7, #31]
 547:..\src/interruptions.c ****     
 548:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 549:..\src/interruptions.c ****                                                         // 1 EMG 1
 550:..\src/interruptions.c ****                                                         // 2 EMG 2
 551:..\src/interruptions.c ****                                                         // wait for both to get down
 552:..\src/interruptions.c ****     
 553:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1181              		.loc 1 553 0
 1182 0028 A44B     		ldr	r3, .L132+4
 1183 002a 1B68     		ldr	r3, [r3]
 1184 002c A24A     		ldr	r2, .L132
 1185 002e B2F8F021 		ldrh	r2, [r2, #496]
 1186 0032 9B1A     		subs	r3, r3, r2
 1187 0034 BB61     		str	r3, [r7, #24]
 554:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1188              		.loc 1 554 0
 1189 0036 A14B     		ldr	r3, .L132+4
 1190 0038 5B68     		ldr	r3, [r3, #4]
 1191 003a 9F4A     		ldr	r2, .L132
 1192 003c B2F8F221 		ldrh	r2, [r2, #498]
 1193 0040 9B1A     		subs	r3, r3, r2
 1194 0042 7B61     		str	r3, [r7, #20]
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 557:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1195              		.loc 1 557 0
 1196 0044 3B6A     		ldr	r3, [r7, #32]
 1197 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1198 004a 013B     		subs	r3, r3, #1
 1199 004c 062B     		cmp	r3, #6
 1200 004e 00F25182 		bhi	.L124
 1201 0052 01A2     		adr	r2, .L71
 1202 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1203              		.p2align 2
 1204              	.L71:
 1205 0058 75000000 		.word	.L70+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 32


 1206 005c 21020000 		.word	.L72+1
 1207 0060 C9020000 		.word	.L73+1
 1208 0064 31030000 		.word	.L74+1
 1209 0068 11040000 		.word	.L75+1
 1210 006c 4D010000 		.word	.L76+1
 1211 0070 5B020000 		.word	.L77+1
 1212              		.p2align 1
 1213              	.L70:
 558:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 559:..\src/interruptions.c **** 
 560:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 561:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 562:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1214              		.loc 1 562 0
 1215 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1216 0076 9049     		ldr	r1, .L132
 1217 0078 1346     		mov	r3, r2
 1218 007a 5B00     		lsls	r3, r3, #1
 1219 007c 1344     		add	r3, r3, r2
 1220 007e 1B01     		lsls	r3, r3, #4
 1221 0080 0B44     		add	r3, r3, r1
 1222 0082 03F5D873 		add	r3, r3, #432
 1223 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1224 0088 002B     		cmp	r3, #0
 1225 008a 19D0     		beq	.L78
 563:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1226              		.loc 1 563 0
 1227 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1228 008e 8C4A     		ldr	r2, .L132+8
 1229 0090 3421     		movs	r1, #52
 1230 0092 01FB03F3 		mul	r3, r1, r3
 1231 0096 1344     		add	r3, r3, r2
 1232 0098 0833     		adds	r3, r3, #8
 1233 009a 1968     		ldr	r1, [r3]
 1234 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1235 009e 8648     		ldr	r0, .L132
 1236 00a0 1346     		mov	r3, r2
 1237 00a2 5B00     		lsls	r3, r3, #1
 1238 00a4 1344     		add	r3, r3, r2
 1239 00a6 1B01     		lsls	r3, r3, #4
 1240 00a8 0344     		add	r3, r3, r0
 1241 00aa 03F5DA73 		add	r3, r3, #436
 1242 00ae 93F90030 		ldrsb	r3, [r3]
 1243 00b2 03FB01F2 		mul	r2, r3, r1
 1244 00b6 3B6A     		ldr	r3, [r7, #32]
 1245 00b8 5B6B     		ldr	r3, [r3, #52]
 1246 00ba 1344     		add	r3, r3, r2
 1247 00bc 7B62     		str	r3, [r7, #36]
 1248 00be 18E0     		b	.L79
 1249              	.L78:
 564:..\src/interruptions.c ****             else
 565:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1250              		.loc 1 565 0
 1251 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1252 00c2 7F4A     		ldr	r2, .L132+8
 1253 00c4 3421     		movs	r1, #52
 1254 00c6 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 33


 1255 00ca 1344     		add	r3, r3, r2
 1256 00cc 0433     		adds	r3, r3, #4
 1257 00ce 1968     		ldr	r1, [r3]
 1258 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1259 00d2 7948     		ldr	r0, .L132
 1260 00d4 1346     		mov	r3, r2
 1261 00d6 5B00     		lsls	r3, r3, #1
 1262 00d8 1344     		add	r3, r3, r2
 1263 00da 1B01     		lsls	r3, r3, #4
 1264 00dc 0344     		add	r3, r3, r0
 1265 00de 03F5DA73 		add	r3, r3, #436
 1266 00e2 93F90030 		ldrsb	r3, [r3]
 1267 00e6 03FB01F2 		mul	r2, r3, r1
 1268 00ea 3B6A     		ldr	r3, [r7, #32]
 1269 00ec 5B6B     		ldr	r3, [r3, #52]
 1270 00ee 1344     		add	r3, r3, r2
 1271 00f0 7B62     		str	r3, [r7, #36]
 1272              	.L79:
 566:..\src/interruptions.c ****             
 567:..\src/interruptions.c **** 
 568:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 569:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1273              		.loc 1 569 0
 1274 00f2 7B68     		ldr	r3, [r7, #4]
 1275 00f4 1B68     		ldr	r3, [r3]
 1276 00f6 7A6A     		ldr	r2, [r7, #36]
 1277 00f8 D21A     		subs	r2, r2, r3
 1278 00fa 3B6A     		ldr	r3, [r7, #32]
 1279 00fc 1B6C     		ldr	r3, [r3, #64]
 1280 00fe 9A42     		cmp	r2, r3
 1281 0100 0BDD     		ble	.L80
 1282              		.loc 1 569 0 is_stmt 0 discriminator 1
 1283 0102 3B6A     		ldr	r3, [r7, #32]
 1284 0104 1B6C     		ldr	r3, [r3, #64]
 1285 0106 002B     		cmp	r3, #0
 1286 0108 07D0     		beq	.L80
 570:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1287              		.loc 1 570 0 is_stmt 1
 1288 010a BB68     		ldr	r3, [r7, #8]
 1289 010c 1A68     		ldr	r2, [r3]
 1290 010e 3B6A     		ldr	r3, [r7, #32]
 1291 0110 1B6C     		ldr	r3, [r3, #64]
 1292 0112 1A44     		add	r2, r2, r3
 1293 0114 BB68     		ldr	r3, [r7, #8]
 1294 0116 1A60     		str	r2, [r3]
 1295 0118 17E0     		b	.L81
 1296              	.L80:
 571:..\src/interruptions.c ****             else {
 572:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1297              		.loc 1 572 0
 1298 011a 7B68     		ldr	r3, [r7, #4]
 1299 011c 1B68     		ldr	r3, [r3]
 1300 011e 7A6A     		ldr	r2, [r7, #36]
 1301 0120 D21A     		subs	r2, r2, r3
 1302 0122 3B6A     		ldr	r3, [r7, #32]
 1303 0124 DB6B     		ldr	r3, [r3, #60]
 1304 0126 9A42     		cmp	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 34


 1305 0128 0BDA     		bge	.L82
 1306              		.loc 1 572 0 is_stmt 0 discriminator 1
 1307 012a 3B6A     		ldr	r3, [r7, #32]
 1308 012c DB6B     		ldr	r3, [r3, #60]
 1309 012e 002B     		cmp	r3, #0
 1310 0130 07D0     		beq	.L82
 573:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1311              		.loc 1 573 0 is_stmt 1
 1312 0132 BB68     		ldr	r3, [r7, #8]
 1313 0134 1A68     		ldr	r2, [r3]
 1314 0136 3B6A     		ldr	r3, [r7, #32]
 1315 0138 DB6B     		ldr	r3, [r3, #60]
 1316 013a 1A44     		add	r2, r2, r3
 1317 013c BB68     		ldr	r3, [r7, #8]
 1318 013e 1A60     		str	r2, [r3]
 1319 0140 03E0     		b	.L81
 1320              	.L82:
 574:..\src/interruptions.c ****                 else
 575:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1321              		.loc 1 575 0
 1322 0142 BB68     		ldr	r3, [r7, #8]
 1323 0144 7A6A     		ldr	r2, [r7, #36]
 1324 0146 1A60     		str	r2, [r3]
 576:..\src/interruptions.c ****             }
 577:..\src/interruptions.c ****             break;
 1325              		.loc 1 577 0
 1326 0148 DFE1     		b	.L83
 1327              	.L81:
 1328 014a DEE1     		b	.L83
 1329              	.L76:
 578:..\src/interruptions.c ****         
 579:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 580:..\src/interruptions.c ****             
 581:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1330              		.loc 1 581 0
 1331 014c 5A4B     		ldr	r3, .L132
 1332 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1333 0152 002B     		cmp	r3, #0
 1334 0154 57D1     		bne	.L84
 582:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 583:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1335              		.loc 1 583 0
 1336 0156 7B68     		ldr	r3, [r7, #4]
 1337 0158 1A68     		ldr	r2, [r3]
 1338 015a BB68     		ldr	r3, [r7, #8]
 1339 015c 1A60     		str	r2, [r3]
 584:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1340              		.loc 1 584 0
 1341 015e 574B     		ldr	r3, .L132+4
 1342 0160 1B6A     		ldr	r3, [r3, #32]
 1343 0162 B3F52F7F 		cmp	r3, #700
 1344 0166 45DC     		bgt	.L85
 1345              	.LBB3:
 585:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1346              		.loc 1 585 0
 1347 0168 544B     		ldr	r3, .L132+4
 1348 016a 1B6A     		ldr	r3, [r3, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 35


 1349 016c 524A     		ldr	r2, .L132
 1350 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1351 0172 9B1A     		subs	r3, r3, r2
 1352 0174 3B61     		str	r3, [r7, #16]
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1353              		.loc 1 587 0
 1354 0176 514B     		ldr	r3, .L132+4
 1355 0178 1B6A     		ldr	r3, [r3, #32]
 1356 017a 4F4A     		ldr	r2, .L132
 1357 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1358 0180 9342     		cmp	r3, r2
 1359 0182 13DD     		ble	.L86
 588:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1360              		.loc 1 588 0
 1361 0184 BB68     		ldr	r3, [r7, #8]
 1362 0186 1A68     		ldr	r2, [r3]
 1363 0188 4B4B     		ldr	r3, .L132
 1364 018a B3F8B032 		ldrh	r3, [r3, #688]
 1365 018e 1946     		mov	r1, r3
 1366 0190 3B69     		ldr	r3, [r7, #16]
 1367 0192 03FB01F1 		mul	r1, r3, r1
 1368 0196 484B     		ldr	r3, .L132
 1369 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1370 019c C3F58063 		rsb	r3, r3, #1024
 1371 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1372 01a4 1A44     		add	r2, r2, r3
 1373 01a6 BB68     		ldr	r3, [r7, #8]
 1374 01a8 1A60     		str	r2, [r3]
 1375              	.LBE3:
 589:..\src/interruptions.c ****                     }
 590:..\src/interruptions.c ****                     else {
 591:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 592:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 593:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 594:..\src/interruptions.c ****                         }
 595:..\src/interruptions.c ****                     }
 596:..\src/interruptions.c ****                 }
 597:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 598:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 599:..\src/interruptions.c ****                 }
 600:..\src/interruptions.c ****             }
 601:..\src/interruptions.c ****             else {
 602:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 603:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 604:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 605:..\src/interruptions.c ****                 }
 606:..\src/interruptions.c ****             }
 607:..\src/interruptions.c ****             break;
 1376              		.loc 1 607 0
 1377 01aa A5E1     		b	.L125
 1378              	.L86:
 1379              	.LBB4:
 591:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1380              		.loc 1 591 0
 1381 01ac 434B     		ldr	r3, .L132+4
 1382 01ae 1B6A     		ldr	r3, [r3, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 36


 1383 01b0 414A     		ldr	r2, .L132
 1384 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1385 01b6 1344     		add	r3, r3, r2
 1386 01b8 3B61     		str	r3, [r7, #16]
 592:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1387              		.loc 1 592 0
 1388 01ba 404B     		ldr	r3, .L132+4
 1389 01bc 1A6A     		ldr	r2, [r3, #32]
 1390 01be 3E4B     		ldr	r3, .L132
 1391 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1392 01c4 5B42     		negs	r3, r3
 1393 01c6 9A42     		cmp	r2, r3
 1394 01c8 80F29681 		bge	.L125
 593:..\src/interruptions.c ****                         }
 1395              		.loc 1 593 0
 1396 01cc BB68     		ldr	r3, [r7, #8]
 1397 01ce 1A68     		ldr	r2, [r3]
 1398 01d0 394B     		ldr	r3, .L132
 1399 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1400 01d6 1946     		mov	r1, r3
 1401 01d8 3B69     		ldr	r3, [r7, #16]
 1402 01da 03FB01F1 		mul	r1, r3, r1
 1403 01de 364B     		ldr	r3, .L132
 1404 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1405 01e4 C3F58063 		rsb	r3, r3, #1024
 1406 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1407 01ec 1A44     		add	r2, r2, r3
 1408 01ee BB68     		ldr	r3, [r7, #8]
 1409 01f0 1A60     		str	r2, [r3]
 1410              	.LBE4:
 1411              		.loc 1 607 0
 1412 01f2 81E1     		b	.L125
 1413              	.L85:
 598:..\src/interruptions.c ****                 }
 1414              		.loc 1 598 0
 1415 01f4 BB68     		ldr	r3, [r7, #8]
 1416 01f6 1B68     		ldr	r3, [r3]
 1417 01f8 324A     		ldr	r2, .L132+12
 1418 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1419 01fe 9A1A     		subs	r2, r3, r2
 1420 0200 BB68     		ldr	r3, [r7, #8]
 1421 0202 1A60     		str	r2, [r3]
 1422              		.loc 1 607 0
 1423 0204 78E1     		b	.L125
 1424              	.L84:
 603:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1425              		.loc 1 603 0
 1426 0206 2C4B     		ldr	r3, .L132
 1427 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1428 020c 042B     		cmp	r3, #4
 1429 020e 40F07381 		bne	.L125
 604:..\src/interruptions.c ****                 }
 1430              		.loc 1 604 0
 1431 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1432 0214 7A68     		ldr	r2, [r7, #4]
 1433 0216 B968     		ldr	r1, [r7, #8]
 1434 0218 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 37


 1435 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1436              		.loc 1 607 0
 1437 021e 6BE1     		b	.L125
 1438              	.L72:
 608:..\src/interruptions.c ****             
 609:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 610:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1439              		.loc 1 610 0
 1440 0220 BB69     		ldr	r3, [r7, #24]
 1441 0222 002B     		cmp	r3, #0
 1442 0224 15DD     		ble	.L90
 611:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1443              		.loc 1 611 0
 1444 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1445 0228 2649     		ldr	r1, .L132+12
 1446 022a 1346     		mov	r3, r2
 1447 022c DB00     		lsls	r3, r3, #3
 1448 022e 9B1A     		subs	r3, r3, r2
 1449 0230 1B01     		lsls	r3, r3, #4
 1450 0232 0B44     		add	r3, r3, r1
 1451 0234 E833     		adds	r3, r3, #232
 1452 0236 1B68     		ldr	r3, [r3]
 1453 0238 BA69     		ldr	r2, [r7, #24]
 1454 023a 02FB03F2 		mul	r2, r2, r3
 1455 023e 1E4B     		ldr	r3, .L132
 1456 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1457 0244 C3F58063 		rsb	r3, r3, #1024
 1458 0248 92FBF3F2 		sdiv	r2, r2, r3
 1459 024c BB68     		ldr	r3, [r7, #8]
 1460 024e 1A60     		str	r2, [r3]
 612:..\src/interruptions.c ****             else
 613:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 614:..\src/interruptions.c ****             break;
 1461              		.loc 1 614 0
 1462 0250 5BE1     		b	.L83
 1463              	.L90:
 613:..\src/interruptions.c ****             break;
 1464              		.loc 1 613 0
 1465 0252 BB68     		ldr	r3, [r7, #8]
 1466 0254 0022     		movs	r2, #0
 1467 0256 1A60     		str	r2, [r3]
 1468              		.loc 1 614 0
 1469 0258 57E1     		b	.L83
 1470              	.L77:
 615:..\src/interruptions.c ****         
 616:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 617:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1471              		.loc 1 617 0
 1472 025a BB69     		ldr	r3, [r7, #24]
 1473 025c 002B     		cmp	r3, #0
 1474 025e 1FDD     		ble	.L92
 618:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1475              		.loc 1 618 0
 1476 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1477 0262 1849     		ldr	r1, .L132+12
 1478 0264 1346     		mov	r3, r2
 1479 0266 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 38


 1480 0268 9B1A     		subs	r3, r3, r2
 1481 026a 1B01     		lsls	r3, r3, #4
 1482 026c 0B44     		add	r3, r3, r1
 1483 026e E833     		adds	r3, r3, #232
 1484 0270 1968     		ldr	r1, [r3]
 1485 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1486 0274 1348     		ldr	r0, .L132+12
 1487 0276 1346     		mov	r3, r2
 1488 0278 DB00     		lsls	r3, r3, #3
 1489 027a 9B1A     		subs	r3, r3, r2
 1490 027c 1B01     		lsls	r3, r3, #4
 1491 027e 0344     		add	r3, r3, r0
 1492 0280 E833     		adds	r3, r3, #232
 1493 0282 1B68     		ldr	r3, [r3]
 1494 0284 BA69     		ldr	r2, [r7, #24]
 1495 0286 02FB03F2 		mul	r2, r2, r3
 1496 028a 0B4B     		ldr	r3, .L132
 1497 028c B3F8F031 		ldrh	r3, [r3, #496]
 1498 0290 C3F58063 		rsb	r3, r3, #1024
 1499 0294 92FBF3F3 		sdiv	r3, r2, r3
 1500 0298 CA1A     		subs	r2, r1, r3
 1501 029a BB68     		ldr	r3, [r7, #8]
 1502 029c 1A60     		str	r2, [r3]
 619:..\src/interruptions.c ****             else
 620:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 621:..\src/interruptions.c ****             break;
 1503              		.loc 1 621 0
 1504 029e 34E1     		b	.L83
 1505              	.L92:
 620:..\src/interruptions.c ****             break;
 1506              		.loc 1 620 0
 1507 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1508 02a2 0849     		ldr	r1, .L132+12
 1509 02a4 1346     		mov	r3, r2
 1510 02a6 DB00     		lsls	r3, r3, #3
 1511 02a8 9B1A     		subs	r3, r3, r2
 1512 02aa 1B01     		lsls	r3, r3, #4
 1513 02ac 0B44     		add	r3, r3, r1
 1514 02ae E833     		adds	r3, r3, #232
 1515 02b0 1A68     		ldr	r2, [r3]
 1516 02b2 BB68     		ldr	r3, [r7, #8]
 1517 02b4 1A60     		str	r2, [r3]
 1518              		.loc 1 621 0
 1519 02b6 28E1     		b	.L83
 1520              	.L133:
 1521              		.align	2
 1522              	.L132:
 1523 02b8 00000000 		.word	c_mem
 1524 02bc 00000000 		.word	g_adc_meas
 1525 02c0 00000000 		.word	g_meas
 1526 02c4 00000000 		.word	g_mem
 1527              	.L73:
 622:..\src/interruptions.c **** 
 623:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 624:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1528              		.loc 1 624 0
 1529 02c8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 39


 1530 02ca 1A68     		ldr	r2, [r3]
 1531 02cc BB68     		ldr	r3, [r7, #8]
 1532 02ce 1A60     		str	r2, [r3]
 625:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1533              		.loc 1 625 0
 1534 02d0 BB69     		ldr	r3, [r7, #24]
 1535 02d2 002B     		cmp	r3, #0
 1536 02d4 13DD     		ble	.L94
 626:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1537              		.loc 1 626 0
 1538 02d6 7B68     		ldr	r3, [r7, #4]
 1539 02d8 1A68     		ldr	r2, [r3]
 1540 02da 884B     		ldr	r3, .L134
 1541 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1542 02e0 1946     		mov	r1, r3
 1543 02e2 BB69     		ldr	r3, [r7, #24]
 1544 02e4 03FB01F3 		mul	r3, r3, r1
 1545 02e8 5900     		lsls	r1, r3, #1
 1546 02ea 854B     		ldr	r3, .L134+4
 1547 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1548 02f0 C3F58063 		rsb	r3, r3, #1024
 1549 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1550 02f8 1A44     		add	r2, r2, r3
 1551 02fa BB68     		ldr	r3, [r7, #8]
 1552 02fc 1A60     		str	r2, [r3]
 1553              	.L94:
 627:..\src/interruptions.c ****             }
 628:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1554              		.loc 1 628 0
 1555 02fe 7B69     		ldr	r3, [r7, #20]
 1556 0300 002B     		cmp	r3, #0
 1557 0302 40F30181 		ble	.L126
 629:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1558              		.loc 1 629 0
 1559 0306 7B68     		ldr	r3, [r7, #4]
 1560 0308 1A68     		ldr	r2, [r3]
 1561 030a 7C4B     		ldr	r3, .L134
 1562 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1563 0310 1946     		mov	r1, r3
 1564 0312 7B69     		ldr	r3, [r7, #20]
 1565 0314 03FB01F3 		mul	r3, r3, r1
 1566 0318 5900     		lsls	r1, r3, #1
 1567 031a 794B     		ldr	r3, .L134+4
 1568 031c B3F8F231 		ldrh	r3, [r3, #498]
 1569 0320 C3F58063 		rsb	r3, r3, #1024
 1570 0324 91FBF3F3 		sdiv	r3, r1, r3
 1571 0328 D21A     		subs	r2, r2, r3
 1572 032a BB68     		ldr	r3, [r7, #8]
 1573 032c 1A60     		str	r2, [r3]
 630:..\src/interruptions.c ****             }
 631:..\src/interruptions.c ****             break;
 1574              		.loc 1 631 0
 1575 032e EBE0     		b	.L126
 1576              	.L74:
 632:..\src/interruptions.c **** 
 633:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 634:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 40


 1577              		.loc 1 634 0
 1578 0330 7B68     		ldr	r3, [r7, #4]
 1579 0332 1A68     		ldr	r2, [r3]
 1580 0334 BB68     		ldr	r3, [r7, #8]
 1581 0336 1A60     		str	r2, [r3]
 635:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1582              		.loc 1 635 0
 1583 0338 714B     		ldr	r3, .L134+4
 1584 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1585 033e 042B     		cmp	r3, #4
 1586 0340 5BD0     		beq	.L96
 636:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1587              		.loc 1 636 0
 1588 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1589 0344 6F4A     		ldr	r2, .L134+8
 1590 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1591 0348 012B     		cmp	r3, #1
 1592 034a 1CD0     		beq	.L98
 1593 034c 022B     		cmp	r3, #2
 1594 034e 37D0     		beq	.L99
 1595 0350 002B     		cmp	r3, #0
 1596 0352 00D0     		beq	.L100
 637:..\src/interruptions.c ****                     case 0:
 638:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 639:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 640:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 641:..\src/interruptions.c ****                             break;
 642:..\src/interruptions.c ****                         }
 643:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 644:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 645:..\src/interruptions.c ****                             break;
 646:..\src/interruptions.c ****                         }
 647:..\src/interruptions.c ****                         break;
 648:..\src/interruptions.c **** 
 649:..\src/interruptions.c ****                     case 1:
 650:..\src/interruptions.c ****                         // EMG 1 is first
 651:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 652:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 653:..\src/interruptions.c ****                             break;
 654:..\src/interruptions.c ****                         }
 655:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 656:..\src/interruptions.c ****                         break;
 657:..\src/interruptions.c **** 
 658:..\src/interruptions.c ****                     case 2:
 659:..\src/interruptions.c ****                         // EMG 2 is first
 660:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 661:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 662:..\src/interruptions.c ****                             break;
 663:..\src/interruptions.c ****                         }
 664:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 665:..\src/interruptions.c ****                         break;
 666:..\src/interruptions.c **** 
 667:..\src/interruptions.c ****                     default:
 668:..\src/interruptions.c ****                         break;
 1597              		.loc 1 668 0
 1598 0354 5BE0     		b	.L106
 1599              	.L100:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 41


 639:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1600              		.loc 1 639 0
 1601 0356 BB69     		ldr	r3, [r7, #24]
 1602 0358 002B     		cmp	r3, #0
 1603 035a 08DD     		ble	.L101
 639:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1604              		.loc 1 639 0 is_stmt 0 discriminator 1
 1605 035c BA69     		ldr	r2, [r7, #24]
 1606 035e 7B69     		ldr	r3, [r7, #20]
 1607 0360 9A42     		cmp	r2, r3
 1608 0362 04DD     		ble	.L101
 640:..\src/interruptions.c ****                             break;
 1609              		.loc 1 640 0 is_stmt 1
 1610 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1611 0366 674A     		ldr	r2, .L134+8
 1612 0368 0121     		movs	r1, #1
 1613 036a D154     		strb	r1, [r2, r3]
 641:..\src/interruptions.c ****                         }
 1614              		.loc 1 641 0
 1615 036c 4FE0     		b	.L106
 1616              	.L101:
 643:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1617              		.loc 1 643 0
 1618 036e 7B69     		ldr	r3, [r7, #20]
 1619 0370 002B     		cmp	r3, #0
 1620 0372 4BDD     		ble	.L127
 643:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1621              		.loc 1 643 0 is_stmt 0 discriminator 1
 1622 0374 7A69     		ldr	r2, [r7, #20]
 1623 0376 BB69     		ldr	r3, [r7, #24]
 1624 0378 9A42     		cmp	r2, r3
 1625 037a 47DD     		ble	.L127
 644:..\src/interruptions.c ****                             break;
 1626              		.loc 1 644 0 is_stmt 1
 1627 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1628 037e 614A     		ldr	r2, .L134+8
 1629 0380 0221     		movs	r1, #2
 1630 0382 D154     		strb	r1, [r2, r3]
 645:..\src/interruptions.c ****                         }
 1631              		.loc 1 645 0
 1632 0384 43E0     		b	.L106
 1633              	.L98:
 651:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1634              		.loc 1 651 0
 1635 0386 BB69     		ldr	r3, [r7, #24]
 1636 0388 002B     		cmp	r3, #0
 1637 038a 04DA     		bge	.L104
 652:..\src/interruptions.c ****                             break;
 1638              		.loc 1 652 0
 1639 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1640 038e 5D4A     		ldr	r2, .L134+8
 1641 0390 0021     		movs	r1, #0
 1642 0392 D154     		strb	r1, [r2, r3]
 653:..\src/interruptions.c ****                         }
 1643              		.loc 1 653 0
 1644 0394 3BE0     		b	.L106
 1645              	.L104:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 42


 655:..\src/interruptions.c ****                         break;
 1646              		.loc 1 655 0
 1647 0396 7B68     		ldr	r3, [r7, #4]
 1648 0398 1A68     		ldr	r2, [r3]
 1649 039a 584B     		ldr	r3, .L134
 1650 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1651 03a0 1946     		mov	r1, r3
 1652 03a2 BB69     		ldr	r3, [r7, #24]
 1653 03a4 03FB01F3 		mul	r3, r3, r1
 1654 03a8 9900     		lsls	r1, r3, #2
 1655 03aa 554B     		ldr	r3, .L134+4
 1656 03ac B3F8F031 		ldrh	r3, [r3, #496]
 1657 03b0 C3F58063 		rsb	r3, r3, #1024
 1658 03b4 91FBF3F3 		sdiv	r3, r1, r3
 1659 03b8 1A44     		add	r2, r2, r3
 1660 03ba BB68     		ldr	r3, [r7, #8]
 1661 03bc 1A60     		str	r2, [r3]
 656:..\src/interruptions.c **** 
 1662              		.loc 1 656 0
 1663 03be 26E0     		b	.L106
 1664              	.L99:
 660:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1665              		.loc 1 660 0
 1666 03c0 7B69     		ldr	r3, [r7, #20]
 1667 03c2 002B     		cmp	r3, #0
 1668 03c4 04DA     		bge	.L105
 661:..\src/interruptions.c ****                             break;
 1669              		.loc 1 661 0
 1670 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1671 03c8 4E4A     		ldr	r2, .L134+8
 1672 03ca 0021     		movs	r1, #0
 1673 03cc D154     		strb	r1, [r2, r3]
 662:..\src/interruptions.c ****                         }
 1674              		.loc 1 662 0
 1675 03ce 1EE0     		b	.L106
 1676              	.L105:
 664:..\src/interruptions.c ****                         break;
 1677              		.loc 1 664 0
 1678 03d0 7B68     		ldr	r3, [r7, #4]
 1679 03d2 1A68     		ldr	r2, [r3]
 1680 03d4 494B     		ldr	r3, .L134
 1681 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1682 03da 1946     		mov	r1, r3
 1683 03dc 7B69     		ldr	r3, [r7, #20]
 1684 03de 03FB01F3 		mul	r3, r3, r1
 1685 03e2 9900     		lsls	r1, r3, #2
 1686 03e4 464B     		ldr	r3, .L134+4
 1687 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 1688 03ea C3F58063 		rsb	r3, r3, #1024
 1689 03ee 91FBF3F3 		sdiv	r3, r1, r3
 1690 03f2 D21A     		subs	r2, r2, r3
 1691 03f4 BB68     		ldr	r3, [r7, #8]
 1692 03f6 1A60     		str	r2, [r3]
 665:..\src/interruptions.c **** 
 1693              		.loc 1 665 0
 1694 03f8 09E0     		b	.L106
 1695              	.L96:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 43


 669:..\src/interruptions.c ****                 }
 670:..\src/interruptions.c ****             }
 671:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 672:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 673:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 1696              		.loc 1 673 0
 1697 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 1698 03fc 7B69     		ldr	r3, [r7, #20]
 1699 03fe 0093     		str	r3, [sp]
 1700 0400 BB69     		ldr	r3, [r7, #24]
 1701 0402 7A68     		ldr	r2, [r7, #4]
 1702 0404 B968     		ldr	r1, [r7, #8]
 1703 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 674:..\src/interruptions.c ****             }
 675:..\src/interruptions.c ****             break;
 1704              		.loc 1 675 0
 1705 040a 7EE0     		b	.L83
 1706              	.L127:
 647:..\src/interruptions.c **** 
 1707              		.loc 1 647 0
 1708 040c 00BF     		nop
 1709              	.L106:
 1710              		.loc 1 675 0 discriminator 5
 1711 040e 7CE0     		b	.L83
 1712              	.L75:
 676:..\src/interruptions.c **** 
 677:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 678:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1713              		.loc 1 678 0
 1714 0410 7B68     		ldr	r3, [r7, #4]
 1715 0412 1A68     		ldr	r2, [r3]
 1716 0414 BB68     		ldr	r3, [r7, #8]
 1717 0416 1A60     		str	r2, [r3]
 679:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1718              		.loc 1 679 0
 1719 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1720 041a 3A4A     		ldr	r2, .L134+8
 1721 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1722 041e 012B     		cmp	r3, #1
 1723 0420 1CD0     		beq	.L108
 1724 0422 022B     		cmp	r3, #2
 1725 0424 3DD0     		beq	.L109
 1726 0426 002B     		cmp	r3, #0
 1727 0428 00D0     		beq	.L110
 680:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 681:..\src/interruptions.c ****                 case 0:
 682:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 683:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 684:..\src/interruptions.c ****                         break;
 685:..\src/interruptions.c ****                     }
 686:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 687:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 688:..\src/interruptions.c ****                         break;
 689:..\src/interruptions.c ****                     }
 690:..\src/interruptions.c ****                     break;
 691:..\src/interruptions.c **** 
 692:..\src/interruptions.c ****                 // EMG 1 is first
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 44


 693:..\src/interruptions.c ****                 case 1:
 694:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 695:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 696:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 697:..\src/interruptions.c ****                         break;
 698:..\src/interruptions.c ****                     }
 699:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 700:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 701:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 702:..\src/interruptions.c ****                     
 703:..\src/interruptions.c ****                     break;
 704:..\src/interruptions.c **** 
 705:..\src/interruptions.c ****                 // EMG 2 is first
 706:..\src/interruptions.c ****                 case 2:
 707:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 708:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 709:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 710:..\src/interruptions.c ****                         break;
 711:..\src/interruptions.c ****                     }
 712:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 713:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 714:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 715:..\src/interruptions.c ****                     }
 716:..\src/interruptions.c ****                     break;
 717:..\src/interruptions.c **** 
 718:..\src/interruptions.c ****                 default:
 719:..\src/interruptions.c ****                     break;
 1728              		.loc 1 719 0
 1729 042a 62E0     		b	.L112
 1730              	.L110:
 682:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1731              		.loc 1 682 0
 1732 042c BB69     		ldr	r3, [r7, #24]
 1733 042e 002B     		cmp	r3, #0
 1734 0430 08DD     		ble	.L111
 682:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1735              		.loc 1 682 0 is_stmt 0 discriminator 1
 1736 0432 BA69     		ldr	r2, [r7, #24]
 1737 0434 7B69     		ldr	r3, [r7, #20]
 1738 0436 9A42     		cmp	r2, r3
 1739 0438 04DD     		ble	.L111
 683:..\src/interruptions.c ****                         break;
 1740              		.loc 1 683 0 is_stmt 1
 1741 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1742 043c 314A     		ldr	r2, .L134+8
 1743 043e 0121     		movs	r1, #1
 1744 0440 D154     		strb	r1, [r2, r3]
 684:..\src/interruptions.c ****                     }
 1745              		.loc 1 684 0
 1746 0442 56E0     		b	.L112
 1747              	.L111:
 686:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1748              		.loc 1 686 0
 1749 0444 7B69     		ldr	r3, [r7, #20]
 1750 0446 002B     		cmp	r3, #0
 1751 0448 4EDD     		ble	.L128
 686:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 45


 1752              		.loc 1 686 0 is_stmt 0 discriminator 1
 1753 044a 7A69     		ldr	r2, [r7, #20]
 1754 044c BB69     		ldr	r3, [r7, #24]
 1755 044e 9A42     		cmp	r2, r3
 1756 0450 4ADD     		ble	.L128
 687:..\src/interruptions.c ****                         break;
 1757              		.loc 1 687 0 is_stmt 1
 1758 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1759 0454 2B4A     		ldr	r2, .L134+8
 1760 0456 0221     		movs	r1, #2
 1761 0458 D154     		strb	r1, [r2, r3]
 688:..\src/interruptions.c ****                     }
 1762              		.loc 1 688 0
 1763 045a 4AE0     		b	.L112
 1764              	.L108:
 695:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1765              		.loc 1 695 0
 1766 045c BB69     		ldr	r3, [r7, #24]
 1767 045e 002B     		cmp	r3, #0
 1768 0460 07DA     		bge	.L114
 695:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1769              		.loc 1 695 0 is_stmt 0 discriminator 1
 1770 0462 7B69     		ldr	r3, [r7, #20]
 1771 0464 002B     		cmp	r3, #0
 1772 0466 04DA     		bge	.L114
 696:..\src/interruptions.c ****                         break;
 1773              		.loc 1 696 0 is_stmt 1
 1774 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1775 046a 264A     		ldr	r2, .L134+8
 1776 046c 0021     		movs	r1, #0
 1777 046e D154     		strb	r1, [r2, r3]
 697:..\src/interruptions.c ****                     }
 1778              		.loc 1 697 0
 1779 0470 3FE0     		b	.L112
 1780              	.L114:
 700:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 1781              		.loc 1 700 0
 1782 0472 BB69     		ldr	r3, [r7, #24]
 1783 0474 002B     		cmp	r3, #0
 1784 0476 39DD     		ble	.L129
 701:..\src/interruptions.c ****                     
 1785              		.loc 1 701 0
 1786 0478 7B68     		ldr	r3, [r7, #4]
 1787 047a 1A68     		ldr	r2, [r3]
 1788 047c 1F4B     		ldr	r3, .L134
 1789 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1790 0482 1946     		mov	r1, r3
 1791 0484 BB69     		ldr	r3, [r7, #24]
 1792 0486 03FB01F3 		mul	r3, r3, r1
 1793 048a 9900     		lsls	r1, r3, #2
 1794 048c 1C4B     		ldr	r3, .L134+4
 1795 048e B3F8F031 		ldrh	r3, [r3, #496]
 1796 0492 C3F58063 		rsb	r3, r3, #1024
 1797 0496 91FBF3F3 		sdiv	r3, r1, r3
 1798 049a 1A44     		add	r2, r2, r3
 1799 049c BB68     		ldr	r3, [r7, #8]
 1800 049e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 46


 703:..\src/interruptions.c **** 
 1801              		.loc 1 703 0
 1802 04a0 24E0     		b	.L129
 1803              	.L109:
 708:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1804              		.loc 1 708 0
 1805 04a2 BB69     		ldr	r3, [r7, #24]
 1806 04a4 002B     		cmp	r3, #0
 1807 04a6 07DA     		bge	.L116
 708:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1808              		.loc 1 708 0 is_stmt 0 discriminator 1
 1809 04a8 7B69     		ldr	r3, [r7, #20]
 1810 04aa 002B     		cmp	r3, #0
 1811 04ac 04DA     		bge	.L116
 709:..\src/interruptions.c ****                         break;
 1812              		.loc 1 709 0 is_stmt 1
 1813 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1814 04b0 144A     		ldr	r2, .L134+8
 1815 04b2 0021     		movs	r1, #0
 1816 04b4 D154     		strb	r1, [r2, r3]
 710:..\src/interruptions.c ****                     }
 1817              		.loc 1 710 0
 1818 04b6 1CE0     		b	.L112
 1819              	.L116:
 713:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 1820              		.loc 1 713 0
 1821 04b8 7B69     		ldr	r3, [r7, #20]
 1822 04ba 002B     		cmp	r3, #0
 1823 04bc 18DD     		ble	.L130
 714:..\src/interruptions.c ****                     }
 1824              		.loc 1 714 0
 1825 04be 7B68     		ldr	r3, [r7, #4]
 1826 04c0 1A68     		ldr	r2, [r3]
 1827 04c2 0F4B     		ldr	r3, .L134+4
 1828 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1829 04c8 1946     		mov	r1, r3
 1830 04ca 7B69     		ldr	r3, [r7, #20]
 1831 04cc 03FB01F3 		mul	r3, r3, r1
 1832 04d0 9900     		lsls	r1, r3, #2
 1833 04d2 0B4B     		ldr	r3, .L134+4
 1834 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 1835 04d8 C3F58063 		rsb	r3, r3, #1024
 1836 04dc 91FBF3F3 		sdiv	r3, r1, r3
 1837 04e0 D21A     		subs	r2, r2, r3
 1838 04e2 BB68     		ldr	r3, [r7, #8]
 1839 04e4 1A60     		str	r2, [r3]
 716:..\src/interruptions.c **** 
 1840              		.loc 1 716 0
 1841 04e6 03E0     		b	.L130
 1842              	.L128:
 690:..\src/interruptions.c **** 
 1843              		.loc 1 690 0
 1844 04e8 00BF     		nop
 1845 04ea 0EE0     		b	.L83
 1846              	.L129:
 703:..\src/interruptions.c **** 
 1847              		.loc 1 703 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 47


 1848 04ec 00BF     		nop
 1849 04ee 0CE0     		b	.L83
 1850              	.L130:
 716:..\src/interruptions.c **** 
 1851              		.loc 1 716 0
 1852 04f0 00BF     		nop
 1853              	.L112:
 720:..\src/interruptions.c ****             }
 721:..\src/interruptions.c ****             break;
 1854              		.loc 1 721 0 discriminator 6
 1855 04f2 0AE0     		b	.L83
 1856              	.L124:
 722:..\src/interruptions.c **** 
 723:..\src/interruptions.c ****         default:
 724:..\src/interruptions.c ****             break;
 1857              		.loc 1 724 0
 1858 04f4 00BF     		nop
 1859 04f6 08E0     		b	.L83
 1860              	.L125:
 607:..\src/interruptions.c ****             
 1861              		.loc 1 607 0
 1862 04f8 00BF     		nop
 1863 04fa 06E0     		b	.L83
 1864              	.L135:
 1865              		.align	2
 1866              	.L134:
 1867 04fc 00000000 		.word	g_mem
 1868 0500 00000000 		.word	c_mem
 1869 0504 8C000000 		.word	current_emg.10261
 1870              	.L126:
 631:..\src/interruptions.c **** 
 1871              		.loc 1 631 0
 1872 0508 00BF     		nop
 1873              	.L83:
 725:..\src/interruptions.c ****     }
 726:..\src/interruptions.c **** 
 727:..\src/interruptions.c ****     // Position limit saturation
 728:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 1874              		.loc 1 728 0
 1875 050a 3B6A     		ldr	r3, [r7, #32]
 1876 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1877 0510 002B     		cmp	r3, #0
 1878 0512 13D0     		beq	.L118
 729:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 1879              		.loc 1 729 0
 1880 0514 BB68     		ldr	r3, [r7, #8]
 1881 0516 1A68     		ldr	r2, [r3]
 1882 0518 3B6A     		ldr	r3, [r7, #32]
 1883 051a 5B6B     		ldr	r3, [r3, #52]
 1884 051c 9A42     		cmp	r2, r3
 1885 051e 03DA     		bge	.L119
 730:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 1886              		.loc 1 730 0
 1887 0520 3B6A     		ldr	r3, [r7, #32]
 1888 0522 5A6B     		ldr	r2, [r3, #52]
 1889 0524 BB68     		ldr	r3, [r7, #8]
 1890 0526 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 48


 1891              	.L119:
 731:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 1892              		.loc 1 731 0
 1893 0528 BB68     		ldr	r3, [r7, #8]
 1894 052a 1A68     		ldr	r2, [r3]
 1895 052c 3B6A     		ldr	r3, [r7, #32]
 1896 052e 9B6B     		ldr	r3, [r3, #56]
 1897 0530 9A42     		cmp	r2, r3
 1898 0532 03DD     		ble	.L118
 732:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 1899              		.loc 1 732 0
 1900 0534 3B6A     		ldr	r3, [r7, #32]
 1901 0536 9A6B     		ldr	r2, [r3, #56]
 1902 0538 BB68     		ldr	r3, [r7, #8]
 1903 053a 1A60     		str	r2, [r3]
 1904              	.L118:
 733:..\src/interruptions.c ****     }
 734:..\src/interruptions.c ****     
 735:..\src/interruptions.c ****     // SAFETY
 736:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1905              		.loc 1 736 0
 1906 053c 1D4B     		ldr	r3, .L136
 1907 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1908 0540 012B     		cmp	r3, #1
 1909 0542 02D1     		bne	.L120
 737:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 738:..\src/interruptions.c ****         st_ref_p->pos = 0;
 1910              		.loc 1 738 0
 1911 0544 BB68     		ldr	r3, [r7, #8]
 1912 0546 0022     		movs	r2, #0
 1913 0548 1A60     		str	r2, [r3]
 1914              	.L120:
 739:..\src/interruptions.c ****     }      
 740:..\src/interruptions.c ****     
 741:..\src/interruptions.c ****        
 742:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1915              		.loc 1 742 0
 1916 054a 1B4B     		ldr	r3, .L136+4
 1917 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1918 0550 012B     		cmp	r3, #1
 1919 0552 2AD1     		bne	.L131
 743:..\src/interruptions.c ****         if (rest_enabled == 1){
 1920              		.loc 1 743 0
 1921 0554 194B     		ldr	r3, .L136+8
 1922 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1923 0558 012B     		cmp	r3, #1
 1924 055a 03D1     		bne	.L122
 744:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 745:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 1925              		.loc 1 745 0
 1926 055c 184B     		ldr	r3, .L136+12
 1927 055e 1A68     		ldr	r2, [r3]
 1928 0560 BB68     		ldr	r3, [r7, #8]
 1929 0562 1A60     		str	r2, [r3]
 1930              	.L122:
 746:..\src/interruptions.c ****         }
 747:..\src/interruptions.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 49


 748:..\src/interruptions.c ****         if (forced_open == 1) {
 1931              		.loc 1 748 0
 1932 0564 174B     		ldr	r3, .L136+16
 1933 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1934 0568 012B     		cmp	r3, #1
 1935 056a 1ED1     		bne	.L131
 749:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 750:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1936              		.loc 1 750 0
 1937 056c 7B69     		ldr	r3, [r7, #20]
 1938 056e 002B     		cmp	r3, #0
 1939 0570 13DD     		ble	.L123
 751:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 1940              		.loc 1 751 0
 1941 0572 154B     		ldr	r3, .L136+20
 1942 0574 D3F8A022 		ldr	r2, [r3, #672]
 1943 0578 134B     		ldr	r3, .L136+20
 1944 057a D3F8A032 		ldr	r3, [r3, #672]
 1945 057e 7969     		ldr	r1, [r7, #20]
 1946 0580 01FB03F1 		mul	r1, r1, r3
 1947 0584 0C4B     		ldr	r3, .L136+4
 1948 0586 B3F8F231 		ldrh	r3, [r3, #498]
 1949 058a C3F58063 		rsb	r3, r3, #1024
 1950 058e 91FBF3F3 		sdiv	r3, r1, r3
 1951 0592 D21A     		subs	r2, r2, r3
 1952 0594 BB68     		ldr	r3, [r7, #8]
 1953 0596 1A60     		str	r2, [r3]
 752:..\src/interruptions.c ****             else {
 753:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 754:..\src/interruptions.c ****                 forced_open = 0;
 755:..\src/interruptions.c ****             }
 756:..\src/interruptions.c ****         }
 757:..\src/interruptions.c ****     }
 758:..\src/interruptions.c **** }
 1954              		.loc 1 758 0
 1955 0598 07E0     		b	.L131
 1956              	.L123:
 753:..\src/interruptions.c ****                 forced_open = 0;
 1957              		.loc 1 753 0
 1958 059a 0B4B     		ldr	r3, .L136+20
 1959 059c D3F8A022 		ldr	r2, [r3, #672]
 1960 05a0 BB68     		ldr	r3, [r7, #8]
 1961 05a2 1A60     		str	r2, [r3]
 754:..\src/interruptions.c ****             }
 1962              		.loc 1 754 0
 1963 05a4 074B     		ldr	r3, .L136+16
 1964 05a6 0022     		movs	r2, #0
 1965 05a8 1A70     		strb	r2, [r3]
 1966              	.L131:
 1967              		.loc 1 758 0
 1968 05aa 00BF     		nop
 1969 05ac 2837     		adds	r7, r7, #40
 1970              		.cfi_def_cfa_offset 8
 1971 05ae BD46     		mov	sp, r7
 1972              		.cfi_def_cfa_register 13
 1973              		@ sp needed
 1974 05b0 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 50


 1975              	.L137:
 1976 05b2 00BF     		.align	2
 1977              	.L136:
 1978 05b4 00000000 		.word	battery_low_SoC
 1979 05b8 00000000 		.word	c_mem
 1980 05bc 00000000 		.word	rest_enabled
 1981 05c0 00000000 		.word	rest_pos_curr_ref
 1982 05c4 00000000 		.word	forced_open
 1983 05c8 00000000 		.word	g_mem
 1984              		.cfi_endproc
 1985              	.LFE68:
 1986              		.size	compute_reference, .-compute_reference
 1987              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 1988              		.align	2
 1989              		.global	compute_SoftHand_2_motors_joystick_reference
 1990              		.thumb
 1991              		.thumb_func
 1992              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 1993              	compute_SoftHand_2_motors_joystick_reference:
 1994              	.LFB69:
 759:..\src/interruptions.c **** 
 760:..\src/interruptions.c **** 
 761:..\src/interruptions.c **** //==============================================================================
 762:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 763:..\src/interruptions.c **** //==============================================================================
 764:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 1995              		.loc 1 764 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 32
 1998              		@ frame_needed = 1, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 2000 0000 80B4     		push	{r7}
 2001              		.cfi_def_cfa_offset 4
 2002              		.cfi_offset 7, -4
 2003 0002 89B0     		sub	sp, sp, #36
 2004              		.cfi_def_cfa_offset 40
 2005 0004 00AF     		add	r7, sp, #0
 2006              		.cfi_def_cfa_register 7
 2007 0006 0346     		mov	r3, r0
 2008 0008 B960     		str	r1, [r7, #8]
 2009 000a 7A60     		str	r2, [r7, #4]
 2010 000c FB73     		strb	r3, [r7, #15]
 765:..\src/interruptions.c ****     
 766:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2011              		.loc 1 766 0
 2012 000e B04B     		ldr	r3, .L159
 2013 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2014 0014 062B     		cmp	r3, #6
 2015 0016 40F08581 		bne	.L157
 2016              		.loc 1 766 0 is_stmt 0 discriminator 1
 2017 001a AD4B     		ldr	r3, .L159
 2018 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2019 0020 062B     		cmp	r3, #6
 2020 0022 40F07F81 		bne	.L157
 767:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2021              		.loc 1 767 0 is_stmt 1
 2022 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 51


 2023 0028 1A68     		ldr	r2, [r3]
 2024 002a BB68     		ldr	r3, [r7, #8]
 2025 002c 1A60     		str	r2, [r3]
 768:..\src/interruptions.c ****     
 769:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2026              		.loc 1 769 0
 2027 002e A94B     		ldr	r3, .L159+4
 2028 0030 1B6A     		ldr	r3, [r3, #32]
 2029 0032 B3F52F7F 		cmp	r3, #700
 2030 0036 00F3C280 		bgt	.L140
 2031              	.LBB5:
 770:..\src/interruptions.c ****              
 771:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2032              		.loc 1 771 0
 2033 003a 0023     		movs	r3, #0
 2034 003c FB61     		str	r3, [r7, #28]
 772:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2035              		.loc 1 772 0
 2036 003e 0023     		movs	r3, #0
 2037 0040 BB61     		str	r3, [r7, #24]
 773:..\src/interruptions.c ****         
 774:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2038              		.loc 1 774 0
 2039 0042 A44B     		ldr	r3, .L159+4
 2040 0044 1B6A     		ldr	r3, [r3, #32]
 2041 0046 A24A     		ldr	r2, .L159
 2042 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2043 004c 9342     		cmp	r3, r2
 2044 004e 1ADD     		ble	.L141
 775:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2045              		.loc 1 775 0
 2046 0050 A04B     		ldr	r3, .L159+4
 2047 0052 1B6A     		ldr	r3, [r3, #32]
 2048 0054 9E4A     		ldr	r2, .L159
 2049 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2050 005a 9B1A     		subs	r3, r3, r2
 2051 005c FB61     		str	r3, [r7, #28]
 776:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2052              		.loc 1 776 0
 2053 005e BB68     		ldr	r3, [r7, #8]
 2054 0060 1A68     		ldr	r2, [r3]
 2055 0062 9B4B     		ldr	r3, .L159
 2056 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2057 0068 1946     		mov	r1, r3
 2058 006a FB69     		ldr	r3, [r7, #28]
 2059 006c 03FB01F1 		mul	r1, r3, r1
 2060 0070 974B     		ldr	r3, .L159
 2061 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2062 0076 C3F58063 		rsb	r3, r3, #1024
 2063 007a 91FBF3F3 		sdiv	r3, r1, r3
 2064 007e 1A44     		add	r2, r2, r3
 2065 0080 BB68     		ldr	r3, [r7, #8]
 2066 0082 1A60     		str	r2, [r3]
 2067 0084 21E0     		b	.L142
 2068              	.L141:
 777:..\src/interruptions.c ****             }
 778:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 52


 779:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2069              		.loc 1 779 0
 2070 0086 934B     		ldr	r3, .L159+4
 2071 0088 1A6A     		ldr	r2, [r3, #32]
 2072 008a 914B     		ldr	r3, .L159
 2073 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2074 0090 5B42     		negs	r3, r3
 2075 0092 9A42     		cmp	r2, r3
 2076 0094 19DA     		bge	.L142
 780:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2077              		.loc 1 780 0
 2078 0096 8F4B     		ldr	r3, .L159+4
 2079 0098 1B6A     		ldr	r3, [r3, #32]
 2080 009a 8D4A     		ldr	r2, .L159
 2081 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2082 00a0 1344     		add	r3, r3, r2
 2083 00a2 FB61     		str	r3, [r7, #28]
 781:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2084              		.loc 1 781 0
 2085 00a4 BB68     		ldr	r3, [r7, #8]
 2086 00a6 1A68     		ldr	r2, [r3]
 2087 00a8 894B     		ldr	r3, .L159
 2088 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2089 00ae 1946     		mov	r1, r3
 2090 00b0 FB69     		ldr	r3, [r7, #28]
 2091 00b2 03FB01F1 		mul	r1, r3, r1
 2092 00b6 864B     		ldr	r3, .L159
 2093 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2094 00bc C3F58063 		rsb	r3, r3, #1024
 2095 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2096 00c4 1A44     		add	r2, r2, r3
 2097 00c6 BB68     		ldr	r3, [r7, #8]
 2098 00c8 1A60     		str	r2, [r3]
 2099              	.L142:
 782:..\src/interruptions.c ****                 }
 783:..\src/interruptions.c ****             }
 784:..\src/interruptions.c **** 
 785:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2100              		.loc 1 785 0
 2101 00ca 824B     		ldr	r3, .L159+4
 2102 00cc 5B6A     		ldr	r3, [r3, #36]
 2103 00ce 804A     		ldr	r2, .L159
 2104 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2105 00d4 9342     		cmp	r3, r2
 2106 00d6 34DD     		ble	.L143
 786:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2107              		.loc 1 786 0
 2108 00d8 7E4B     		ldr	r3, .L159+4
 2109 00da 5B6A     		ldr	r3, [r3, #36]
 2110 00dc 7C4A     		ldr	r2, .L159
 2111 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2112 00e2 9B1A     		subs	r3, r3, r2
 2113 00e4 BB61     		str	r3, [r7, #24]
 787:..\src/interruptions.c ****                 if (motor_idx == 0){
 2114              		.loc 1 787 0
 2115 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2116 00e8 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 53


 2117 00ea 12D1     		bne	.L144
 788:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2118              		.loc 1 788 0
 2119 00ec BB68     		ldr	r3, [r7, #8]
 2120 00ee 1A68     		ldr	r2, [r3]
 2121 00f0 774B     		ldr	r3, .L159
 2122 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2123 00f6 1946     		mov	r1, r3
 2124 00f8 BB69     		ldr	r3, [r7, #24]
 2125 00fa 03FB01F1 		mul	r1, r3, r1
 2126 00fe 744B     		ldr	r3, .L159
 2127 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2128 0104 C3F58063 		rsb	r3, r3, #1024
 2129 0108 91FBF3F3 		sdiv	r3, r1, r3
 2130 010c 1A44     		add	r2, r2, r3
 2131 010e BB68     		ldr	r3, [r7, #8]
 2132 0110 1A60     		str	r2, [r3]
 2133              	.L144:
 789:..\src/interruptions.c ****                 }
 790:..\src/interruptions.c ****                 if (motor_idx == 1){
 2134              		.loc 1 790 0
 2135 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2136 0114 012B     		cmp	r3, #1
 2137 0116 40F00581 		bne	.L157
 791:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2138              		.loc 1 791 0
 2139 011a BB68     		ldr	r3, [r7, #8]
 2140 011c 1A68     		ldr	r2, [r3]
 2141 011e 6C4B     		ldr	r3, .L159
 2142 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2143 0124 1946     		mov	r1, r3
 2144 0126 BB69     		ldr	r3, [r7, #24]
 2145 0128 03FB01F1 		mul	r1, r3, r1
 2146 012c 684B     		ldr	r3, .L159
 2147 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2148 0132 C3F58063 		rsb	r3, r3, #1024
 2149 0136 91FBF3F3 		sdiv	r3, r1, r3
 2150 013a D21A     		subs	r2, r2, r3
 2151 013c BB68     		ldr	r3, [r7, #8]
 2152 013e 1A60     		str	r2, [r3]
 2153              	.LBE5:
 792:..\src/interruptions.c ****                 }          
 793:..\src/interruptions.c ****             }
 794:..\src/interruptions.c ****             else {
 795:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 796:..\src/interruptions.c ****                     
 797:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 798:..\src/interruptions.c ****                     if (motor_idx == 0){
 799:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 800:..\src/interruptions.c ****                     }
 801:..\src/interruptions.c ****                     if (motor_idx == 1){
 802:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 803:..\src/interruptions.c ****                     }
 804:..\src/interruptions.c ****                 }
 805:..\src/interruptions.c ****             }
 806:..\src/interruptions.c ****         }
 807:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 54


 808:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 809:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 810:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 811:..\src/interruptions.c **** 
 812:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 813:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 814:..\src/interruptions.c ****                     if (motor_idx == 1){
 815:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 816:..\src/interruptions.c ****                     }
 817:..\src/interruptions.c ****                     if (motor_idx == 0){
 818:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 819:..\src/interruptions.c ****                     }                    
 820:..\src/interruptions.c ****                 }
 821:..\src/interruptions.c ****                 else {
 822:..\src/interruptions.c ****                     if (motor_idx == 0){
 823:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 824:..\src/interruptions.c ****                     }
 825:..\src/interruptions.c ****                     if (motor_idx == 1){
 826:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 827:..\src/interruptions.c ****                     }
 828:..\src/interruptions.c ****                 }
 829:..\src/interruptions.c ****                 
 830:..\src/interruptions.c ****             }
 831:..\src/interruptions.c ****             else {
 832:..\src/interruptions.c ****                 if(pos_sum > 0) {
 833:..\src/interruptions.c ****                     if (motor_idx == 0){
 834:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 835:..\src/interruptions.c ****                     }
 836:..\src/interruptions.c ****                     if (motor_idx == 1){
 837:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 838:..\src/interruptions.c ****                     }
 839:..\src/interruptions.c ****                     
 840:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 841:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 842:..\src/interruptions.c ****                     }
 843:..\src/interruptions.c ****                 }
 844:..\src/interruptions.c ****             }
 845:..\src/interruptions.c ****         }
 846:..\src/interruptions.c ****     }           
 847:..\src/interruptions.c **** }
 2154              		.loc 1 847 0
 2155 0140 F0E0     		b	.L157
 2156              	.L143:
 2157              	.LBB6:
 795:..\src/interruptions.c ****                     
 2158              		.loc 1 795 0
 2159 0142 644B     		ldr	r3, .L159+4
 2160 0144 5A6A     		ldr	r2, [r3, #36]
 2161 0146 624B     		ldr	r3, .L159
 2162 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2163 014c 5B42     		negs	r3, r3
 2164 014e 9A42     		cmp	r2, r3
 2165 0150 80F2E880 		bge	.L157
 797:..\src/interruptions.c ****                     if (motor_idx == 0){
 2166              		.loc 1 797 0
 2167 0154 5F4B     		ldr	r3, .L159+4
 2168 0156 5B6A     		ldr	r3, [r3, #36]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 55


 2169 0158 5D4A     		ldr	r2, .L159
 2170 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2171 015e 1344     		add	r3, r3, r2
 2172 0160 BB61     		str	r3, [r7, #24]
 798:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2173              		.loc 1 798 0
 2174 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2175 0164 002B     		cmp	r3, #0
 2176 0166 12D1     		bne	.L147
 799:..\src/interruptions.c ****                     }
 2177              		.loc 1 799 0
 2178 0168 BB68     		ldr	r3, [r7, #8]
 2179 016a 1A68     		ldr	r2, [r3]
 2180 016c 584B     		ldr	r3, .L159
 2181 016e B3F8B032 		ldrh	r3, [r3, #688]
 2182 0172 1946     		mov	r1, r3
 2183 0174 BB69     		ldr	r3, [r7, #24]
 2184 0176 03FB01F1 		mul	r1, r3, r1
 2185 017a 554B     		ldr	r3, .L159
 2186 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2187 0180 C3F58063 		rsb	r3, r3, #1024
 2188 0184 91FBF3F3 		sdiv	r3, r1, r3
 2189 0188 1A44     		add	r2, r2, r3
 2190 018a BB68     		ldr	r3, [r7, #8]
 2191 018c 1A60     		str	r2, [r3]
 2192              	.L147:
 801:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2193              		.loc 1 801 0
 2194 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2195 0190 012B     		cmp	r3, #1
 2196 0192 40F0C780 		bne	.L157
 802:..\src/interruptions.c ****                     }
 2197              		.loc 1 802 0
 2198 0196 BB68     		ldr	r3, [r7, #8]
 2199 0198 1A68     		ldr	r2, [r3]
 2200 019a 4D4B     		ldr	r3, .L159
 2201 019c B3F8B032 		ldrh	r3, [r3, #688]
 2202 01a0 1946     		mov	r1, r3
 2203 01a2 BB69     		ldr	r3, [r7, #24]
 2204 01a4 03FB01F1 		mul	r1, r3, r1
 2205 01a8 494B     		ldr	r3, .L159
 2206 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2207 01ae C3F58063 		rsb	r3, r3, #1024
 2208 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2209 01b6 D21A     		subs	r2, r2, r3
 2210 01b8 BB68     		ldr	r3, [r7, #8]
 2211 01ba 1A60     		str	r2, [r3]
 2212              	.LBE6:
 2213              		.loc 1 847 0
 2214 01bc B2E0     		b	.L157
 2215              	.L140:
 2216              	.LBB7:
 809:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2217              		.loc 1 809 0
 2218 01be 444B     		ldr	r3, .L159
 2219 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2220 01c4 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 56


 2221 01c6 444A     		ldr	r2, .L159+8
 2222 01c8 3423     		movs	r3, #52
 2223 01ca 03FB01F3 		mul	r3, r3, r1
 2224 01ce 1344     		add	r3, r3, r2
 2225 01d0 1A68     		ldr	r2, [r3]
 2226 01d2 3F4B     		ldr	r3, .L159
 2227 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2228 01d8 1846     		mov	r0, r3
 2229 01da 3F49     		ldr	r1, .L159+8
 2230 01dc 3423     		movs	r3, #52
 2231 01de 03FB00F3 		mul	r3, r3, r0
 2232 01e2 0B44     		add	r3, r3, r1
 2233 01e4 0433     		adds	r3, r3, #4
 2234 01e6 1B68     		ldr	r3, [r3]
 2235 01e8 D21A     		subs	r2, r2, r3
 2236 01ea 394B     		ldr	r3, .L159
 2237 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2238 01f0 1846     		mov	r0, r3
 2239 01f2 3749     		ldr	r1, .L159
 2240 01f4 0346     		mov	r3, r0
 2241 01f6 5B00     		lsls	r3, r3, #1
 2242 01f8 0344     		add	r3, r3, r0
 2243 01fa 1B01     		lsls	r3, r3, #4
 2244 01fc 0B44     		add	r3, r3, r1
 2245 01fe 03F29513 		addw	r3, r3, #405
 2246 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2247 0204 42FA03F3 		asr	r3, r2, r3
 2248 0208 7B61     		str	r3, [r7, #20]
 810:..\src/interruptions.c **** 
 2249              		.loc 1 810 0
 2250 020a 314B     		ldr	r3, .L159
 2251 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2252 0210 1946     		mov	r1, r3
 2253 0212 314A     		ldr	r2, .L159+8
 2254 0214 3423     		movs	r3, #52
 2255 0216 03FB01F3 		mul	r3, r3, r1
 2256 021a 1344     		add	r3, r3, r2
 2257 021c 1A68     		ldr	r2, [r3]
 2258 021e 2C4B     		ldr	r3, .L159
 2259 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2260 0224 1846     		mov	r0, r3
 2261 0226 2C49     		ldr	r1, .L159+8
 2262 0228 3423     		movs	r3, #52
 2263 022a 03FB00F3 		mul	r3, r3, r0
 2264 022e 0B44     		add	r3, r3, r1
 2265 0230 0433     		adds	r3, r3, #4
 2266 0232 1B68     		ldr	r3, [r3]
 2267 0234 1A44     		add	r2, r2, r3
 2268 0236 264B     		ldr	r3, .L159
 2269 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2270 023c 1846     		mov	r0, r3
 2271 023e 2449     		ldr	r1, .L159
 2272 0240 0346     		mov	r3, r0
 2273 0242 5B00     		lsls	r3, r3, #1
 2274 0244 0344     		add	r3, r3, r0
 2275 0246 1B01     		lsls	r3, r3, #4
 2276 0248 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 57


 2277 024a 03F29513 		addw	r3, r3, #405
 2278 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2279 0250 42FA03F3 		asr	r3, r2, r3
 2280 0254 3B61     		str	r3, [r7, #16]
 812:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2281              		.loc 1 812 0
 2282 0256 7B69     		ldr	r3, [r7, #20]
 2283 0258 B3F5FA7F 		cmp	r3, #500
 2284 025c 03DC     		bgt	.L148
 812:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2285              		.loc 1 812 0 is_stmt 0 discriminator 1
 2286 025e 7B69     		ldr	r3, [r7, #20]
 2287 0260 13F5FA7F 		cmn	r3, #500
 2288 0264 3ADA     		bge	.L149
 2289              	.L148:
 813:..\src/interruptions.c ****                     if (motor_idx == 1){
 2290              		.loc 1 813 0 is_stmt 1
 2291 0266 7B69     		ldr	r3, [r7, #20]
 2292 0268 002B     		cmp	r3, #0
 2293 026a 18DB     		blt	.L150
 814:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2294              		.loc 1 814 0
 2295 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2296 026e 012B     		cmp	r3, #1
 2297 0270 07D1     		bne	.L151
 815:..\src/interruptions.c ****                     }
 2298              		.loc 1 815 0
 2299 0272 BB68     		ldr	r3, [r7, #8]
 2300 0274 1B68     		ldr	r3, [r3]
 2301 0276 164A     		ldr	r2, .L159
 2302 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2303 027c 1A44     		add	r2, r2, r3
 2304 027e BB68     		ldr	r3, [r7, #8]
 2305 0280 1A60     		str	r2, [r3]
 2306              	.L151:
 817:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2307              		.loc 1 817 0
 2308 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2309 0284 002B     		cmp	r3, #0
 2310 0286 4CD1     		bne	.L158
 818:..\src/interruptions.c ****                     }                    
 2311              		.loc 1 818 0
 2312 0288 BB68     		ldr	r3, [r7, #8]
 2313 028a 1B68     		ldr	r3, [r3]
 2314 028c 104A     		ldr	r2, .L159
 2315 028e B2F8B022 		ldrh	r2, [r2, #688]
 2316 0292 5208     		lsrs	r2, r2, #1
 2317 0294 92B2     		uxth	r2, r2
 2318 0296 9A1A     		subs	r2, r3, r2
 2319 0298 BB68     		ldr	r3, [r7, #8]
 2320 029a 1A60     		str	r2, [r3]
 813:..\src/interruptions.c ****                     if (motor_idx == 1){
 2321              		.loc 1 813 0
 2322 029c 41E0     		b	.L158
 2323              	.L150:
 822:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2324              		.loc 1 822 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 58


 2325 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2326 02a0 002B     		cmp	r3, #0
 2327 02a2 07D1     		bne	.L154
 823:..\src/interruptions.c ****                     }
 2328              		.loc 1 823 0
 2329 02a4 BB68     		ldr	r3, [r7, #8]
 2330 02a6 1B68     		ldr	r3, [r3]
 2331 02a8 094A     		ldr	r2, .L159
 2332 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2333 02ae 1A44     		add	r2, r2, r3
 2334 02b0 BB68     		ldr	r3, [r7, #8]
 2335 02b2 1A60     		str	r2, [r3]
 2336              	.L154:
 825:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2337              		.loc 1 825 0
 2338 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2339 02b6 012B     		cmp	r3, #1
 2340 02b8 33D1     		bne	.L158
 826:..\src/interruptions.c ****                     }
 2341              		.loc 1 826 0
 2342 02ba BB68     		ldr	r3, [r7, #8]
 2343 02bc 1B68     		ldr	r3, [r3]
 2344 02be 044A     		ldr	r2, .L159
 2345 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2346 02c4 5208     		lsrs	r2, r2, #1
 2347 02c6 92B2     		uxth	r2, r2
 2348 02c8 9A1A     		subs	r2, r3, r2
 2349 02ca BB68     		ldr	r3, [r7, #8]
 2350 02cc 1A60     		str	r2, [r3]
 813:..\src/interruptions.c ****                     if (motor_idx == 1){
 2351              		.loc 1 813 0
 2352 02ce 28E0     		b	.L158
 2353              	.L160:
 2354              		.align	2
 2355              	.L159:
 2356 02d0 00000000 		.word	c_mem
 2357 02d4 00000000 		.word	g_adc_meas
 2358 02d8 00000000 		.word	g_meas
 2359              	.L149:
 832:..\src/interruptions.c ****                     if (motor_idx == 0){
 2360              		.loc 1 832 0
 2361 02dc 3B69     		ldr	r3, [r7, #16]
 2362 02de 002B     		cmp	r3, #0
 2363 02e0 20DD     		ble	.L157
 833:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2364              		.loc 1 833 0
 2365 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2366 02e4 002B     		cmp	r3, #0
 2367 02e6 08D1     		bne	.L155
 834:..\src/interruptions.c ****                     }
 2368              		.loc 1 834 0
 2369 02e8 BB68     		ldr	r3, [r7, #8]
 2370 02ea 1A68     		ldr	r2, [r3]
 2371 02ec 104B     		ldr	r3, .L161
 2372 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2373 02f2 5B00     		lsls	r3, r3, #1
 2374 02f4 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 59


 2375 02f6 BB68     		ldr	r3, [r7, #8]
 2376 02f8 1A60     		str	r2, [r3]
 2377              	.L155:
 836:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2378              		.loc 1 836 0
 2379 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2380 02fc 012B     		cmp	r3, #1
 2381 02fe 08D1     		bne	.L156
 837:..\src/interruptions.c ****                     }
 2382              		.loc 1 837 0
 2383 0300 BB68     		ldr	r3, [r7, #8]
 2384 0302 1A68     		ldr	r2, [r3]
 2385 0304 0A4B     		ldr	r3, .L161
 2386 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2387 030a 5B00     		lsls	r3, r3, #1
 2388 030c D21A     		subs	r2, r2, r3
 2389 030e BB68     		ldr	r3, [r7, #8]
 2390 0310 1A60     		str	r2, [r3]
 2391              	.L156:
 840:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2392              		.loc 1 840 0
 2393 0312 BB68     		ldr	r3, [r7, #8]
 2394 0314 1B68     		ldr	r3, [r3]
 2395 0316 002B     		cmp	r3, #0
 2396 0318 04DA     		bge	.L157
 841:..\src/interruptions.c ****                     }
 2397              		.loc 1 841 0
 2398 031a BB68     		ldr	r3, [r7, #8]
 2399 031c 0022     		movs	r2, #0
 2400 031e 1A60     		str	r2, [r3]
 2401              	.LBE7:
 2402              		.loc 1 847 0
 2403 0320 00E0     		b	.L157
 2404              	.L158:
 2405              	.LBB8:
 813:..\src/interruptions.c ****                     if (motor_idx == 1){
 2406              		.loc 1 813 0
 2407 0322 00BF     		nop
 2408              	.L157:
 2409              	.LBE8:
 2410              		.loc 1 847 0
 2411 0324 00BF     		nop
 2412 0326 2437     		adds	r7, r7, #36
 2413              		.cfi_def_cfa_offset 4
 2414 0328 BD46     		mov	sp, r7
 2415              		.cfi_def_cfa_register 13
 2416              		@ sp needed
 2417 032a 80BC     		pop	{r7}
 2418              		.cfi_restore 7
 2419              		.cfi_def_cfa_offset 0
 2420 032c 7047     		bx	lr
 2421              	.L162:
 2422 032e 00BF     		.align	2
 2423              	.L161:
 2424 0330 00000000 		.word	c_mem
 2425              		.cfi_endproc
 2426              	.LFE69:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 60


 2427              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2428              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2429              		.align	2
 2430              		.global	compute_SoftHand_2_motors_emg_reference
 2431              		.thumb
 2432              		.thumb_func
 2433              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2434              	compute_SoftHand_2_motors_emg_reference:
 2435              	.LFB70:
 848:..\src/interruptions.c **** 
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c **** //==============================================================================
 851:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 852:..\src/interruptions.c **** //==============================================================================
 853:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 854:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2436              		.loc 1 854 0
 2437              		.cfi_startproc
 2438              		@ args = 4, pretend = 0, frame = 16
 2439              		@ frame_needed = 1, uses_anonymous_args = 0
 2440 0000 80B5     		push	{r7, lr}
 2441              		.cfi_def_cfa_offset 8
 2442              		.cfi_offset 7, -8
 2443              		.cfi_offset 14, -4
 2444 0002 84B0     		sub	sp, sp, #16
 2445              		.cfi_def_cfa_offset 24
 2446 0004 00AF     		add	r7, sp, #0
 2447              		.cfi_def_cfa_register 7
 2448 0006 B960     		str	r1, [r7, #8]
 2449 0008 7A60     		str	r2, [r7, #4]
 2450 000a 3B60     		str	r3, [r7]
 2451 000c 0346     		mov	r3, r0
 2452 000e FB73     		strb	r3, [r7, #15]
 855:..\src/interruptions.c ****     
 856:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 857:..\src/interruptions.c ****     static uint8 fsm_state;     
 858:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2453              		.loc 1 858 0
 2454 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2455 0012 002B     		cmp	r3, #0
 2456 0014 05D1     		bne	.L164
 859:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2457              		.loc 1 859 0
 2458 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2459 001a 0346     		mov	r3, r0
 2460 001c 1A46     		mov	r2, r3
 2461 001e 614B     		ldr	r3, .L179
 2462 0020 1A70     		strb	r2, [r3]
 2463              	.L164:
 860:..\src/interruptions.c ****     }
 861:..\src/interruptions.c ****        
 862:..\src/interruptions.c ****     switch (fsm_state){
 2464              		.loc 1 862 0
 2465 0022 604B     		ldr	r3, .L179
 2466 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2467 0026 032B     		cmp	r3, #3
 2468 0028 00F2B780 		bhi	.L176
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 61


 2469 002c 01A2     		adr	r2, .L167
 2470 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2471 0032 00BF     		.p2align 2
 2472              	.L167:
 2473 0034 45000000 		.word	.L166+1
 2474 0038 45000000 		.word	.L166+1
 2475 003c BF000000 		.word	.L168+1
 2476 0040 4F000000 		.word	.L169+1
 2477              		.p2align 1
 2478              	.L166:
 863:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 864:..\src/interruptions.c ****              
 865:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2479              		.loc 1 865 0
 2480 0044 7B68     		ldr	r3, [r7, #4]
 2481 0046 1A68     		ldr	r2, [r3]
 2482 0048 BB68     		ldr	r3, [r7, #8]
 2483 004a 1A60     		str	r2, [r3]
 866:..\src/interruptions.c ****     
 867:..\src/interruptions.c ****             break;
 2484              		.loc 1 867 0
 2485 004c A5E0     		b	.L165
 2486              	.L169:
 868:..\src/interruptions.c ****         
 869:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 870:..\src/interruptions.c **** 
 871:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2487              		.loc 1 871 0
 2488 004e 3B68     		ldr	r3, [r7]
 2489 0050 002B     		cmp	r3, #0
 2490 0052 17DD     		ble	.L170
 2491              		.loc 1 871 0 is_stmt 0 discriminator 1
 2492 0054 3A68     		ldr	r2, [r7]
 2493 0056 BB69     		ldr	r3, [r7, #24]
 2494 0058 9A42     		cmp	r2, r3
 2495 005a 13DD     		ble	.L170
 872:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2496              		.loc 1 872 0 is_stmt 1
 2497 005c 7B68     		ldr	r3, [r7, #4]
 2498 005e 1A68     		ldr	r2, [r3]
 2499 0060 514B     		ldr	r3, .L179+4
 2500 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2501 0066 1946     		mov	r1, r3
 2502 0068 3B68     		ldr	r3, [r7]
 2503 006a 03FB01F3 		mul	r3, r3, r1
 2504 006e 9900     		lsls	r1, r3, #2
 2505 0070 4E4B     		ldr	r3, .L179+8
 2506 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2507 0076 C3F58063 		rsb	r3, r3, #1024
 2508 007a 91FBF3F3 		sdiv	r3, r1, r3
 2509 007e 1A44     		add	r2, r2, r3
 2510 0080 BB68     		ldr	r3, [r7, #8]
 2511 0082 1A60     		str	r2, [r3]
 2512              	.L170:
 873:..\src/interruptions.c ****             }
 874:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2513              		.loc 1 874 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 62


 2514 0084 BB69     		ldr	r3, [r7, #24]
 2515 0086 002B     		cmp	r3, #0
 2516 0088 40F38480 		ble	.L177
 2517              		.loc 1 874 0 is_stmt 0 discriminator 1
 2518 008c BA69     		ldr	r2, [r7, #24]
 2519 008e 3B68     		ldr	r3, [r7]
 2520 0090 9A42     		cmp	r2, r3
 2521 0092 7FDD     		ble	.L177
 875:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2522              		.loc 1 875 0 is_stmt 1
 2523 0094 7B68     		ldr	r3, [r7, #4]
 2524 0096 1A68     		ldr	r2, [r3]
 2525 0098 434B     		ldr	r3, .L179+4
 2526 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2527 009e 1946     		mov	r1, r3
 2528 00a0 BB69     		ldr	r3, [r7, #24]
 2529 00a2 03FB01F3 		mul	r3, r3, r1
 2530 00a6 9900     		lsls	r1, r3, #2
 2531 00a8 404B     		ldr	r3, .L179+8
 2532 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2533 00ae C3F58063 		rsb	r3, r3, #1024
 2534 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2535 00b6 D21A     		subs	r2, r2, r3
 2536 00b8 BB68     		ldr	r3, [r7, #8]
 2537 00ba 1A60     		str	r2, [r3]
 876:..\src/interruptions.c ****             }
 877:..\src/interruptions.c ****             
 878:..\src/interruptions.c ****             break;
 2538              		.loc 1 878 0
 2539 00bc 6AE0     		b	.L177
 2540              	.L168:
 879:..\src/interruptions.c ****             
 880:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 881:..\src/interruptions.c ****             
 882:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2541              		.loc 1 882 0
 2542 00be 3B68     		ldr	r3, [r7]
 2543 00c0 002B     		cmp	r3, #0
 2544 00c2 31DD     		ble	.L172
 2545              		.loc 1 882 0 is_stmt 0 discriminator 1
 2546 00c4 3A68     		ldr	r2, [r7]
 2547 00c6 BB69     		ldr	r3, [r7, #24]
 2548 00c8 9A42     		cmp	r2, r3
 2549 00ca 2DDD     		ble	.L172
 883:..\src/interruptions.c ****                 if (motor_idx == 0){
 2550              		.loc 1 883 0 is_stmt 1
 2551 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2552 00ce 002B     		cmp	r3, #0
 2553 00d0 13D1     		bne	.L173
 884:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2554              		.loc 1 884 0
 2555 00d2 7B68     		ldr	r3, [r7, #4]
 2556 00d4 1A68     		ldr	r2, [r3]
 2557 00d6 344B     		ldr	r3, .L179+4
 2558 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2559 00dc 1946     		mov	r1, r3
 2560 00de 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 63


 2561 00e0 03FB01F3 		mul	r3, r3, r1
 2562 00e4 9900     		lsls	r1, r3, #2
 2563 00e6 314B     		ldr	r3, .L179+8
 2564 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2565 00ec C3F58063 		rsb	r3, r3, #1024
 2566 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2567 00f4 1A44     		add	r2, r2, r3
 2568 00f6 BB68     		ldr	r3, [r7, #8]
 2569 00f8 1A60     		str	r2, [r3]
 2570              	.L173:
 885:..\src/interruptions.c ****                 }
 886:..\src/interruptions.c ****                 if (motor_idx == 1){
 2571              		.loc 1 886 0
 2572 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2573 00fc 012B     		cmp	r3, #1
 2574 00fe 13D1     		bne	.L172
 887:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2575              		.loc 1 887 0
 2576 0100 7B68     		ldr	r3, [r7, #4]
 2577 0102 1A68     		ldr	r2, [r3]
 2578 0104 284B     		ldr	r3, .L179+4
 2579 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2580 010a 1946     		mov	r1, r3
 2581 010c 3B68     		ldr	r3, [r7]
 2582 010e 03FB01F3 		mul	r3, r3, r1
 2583 0112 9900     		lsls	r1, r3, #2
 2584 0114 254B     		ldr	r3, .L179+8
 2585 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2586 011a C3F58063 		rsb	r3, r3, #1024
 2587 011e 91FBF3F3 		sdiv	r3, r1, r3
 2588 0122 D21A     		subs	r2, r2, r3
 2589 0124 BB68     		ldr	r3, [r7, #8]
 2590 0126 1A60     		str	r2, [r3]
 2591              	.L172:
 888:..\src/interruptions.c ****                 }   
 889:..\src/interruptions.c ****             }
 890:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2592              		.loc 1 890 0
 2593 0128 BB69     		ldr	r3, [r7, #24]
 2594 012a 002B     		cmp	r3, #0
 2595 012c 34DD     		ble	.L178
 2596              		.loc 1 890 0 is_stmt 0 discriminator 1
 2597 012e BA69     		ldr	r2, [r7, #24]
 2598 0130 3B68     		ldr	r3, [r7]
 2599 0132 9A42     		cmp	r2, r3
 2600 0134 30DD     		ble	.L178
 891:..\src/interruptions.c ****                 if (motor_idx == 0){
 2601              		.loc 1 891 0 is_stmt 1
 2602 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2603 0138 002B     		cmp	r3, #0
 2604 013a 13D1     		bne	.L175
 892:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2605              		.loc 1 892 0
 2606 013c 7B68     		ldr	r3, [r7, #4]
 2607 013e 1A68     		ldr	r2, [r3]
 2608 0140 194B     		ldr	r3, .L179+4
 2609 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 64


 2610 0146 1946     		mov	r1, r3
 2611 0148 BB69     		ldr	r3, [r7, #24]
 2612 014a 03FB01F3 		mul	r3, r3, r1
 2613 014e 9900     		lsls	r1, r3, #2
 2614 0150 164B     		ldr	r3, .L179+8
 2615 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2616 0156 C3F58063 		rsb	r3, r3, #1024
 2617 015a 91FBF3F3 		sdiv	r3, r1, r3
 2618 015e D21A     		subs	r2, r2, r3
 2619 0160 BB68     		ldr	r3, [r7, #8]
 2620 0162 1A60     		str	r2, [r3]
 2621              	.L175:
 893:..\src/interruptions.c ****                 }
 894:..\src/interruptions.c ****                 if (motor_idx == 1){
 2622              		.loc 1 894 0
 2623 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2624 0166 012B     		cmp	r3, #1
 2625 0168 16D1     		bne	.L178
 895:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2626              		.loc 1 895 0
 2627 016a 7B68     		ldr	r3, [r7, #4]
 2628 016c 1A68     		ldr	r2, [r3]
 2629 016e 0E4B     		ldr	r3, .L179+4
 2630 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2631 0174 1946     		mov	r1, r3
 2632 0176 BB69     		ldr	r3, [r7, #24]
 2633 0178 03FB01F3 		mul	r3, r3, r1
 2634 017c 9900     		lsls	r1, r3, #2
 2635 017e 0B4B     		ldr	r3, .L179+8
 2636 0180 B3F8F231 		ldrh	r3, [r3, #498]
 2637 0184 C3F58063 		rsb	r3, r3, #1024
 2638 0188 91FBF3F3 		sdiv	r3, r1, r3
 2639 018c 1A44     		add	r2, r2, r3
 2640 018e BB68     		ldr	r3, [r7, #8]
 2641 0190 1A60     		str	r2, [r3]
 896:..\src/interruptions.c ****                 }
 897:..\src/interruptions.c ****             }
 898:..\src/interruptions.c ****             
 899:..\src/interruptions.c ****             break;
 2642              		.loc 1 899 0
 2643 0192 01E0     		b	.L178
 2644              	.L177:
 878:..\src/interruptions.c ****             
 2645              		.loc 1 878 0
 2646 0194 00BF     		nop
 2647 0196 00E0     		b	.L176
 2648              	.L178:
 2649              		.loc 1 899 0
 2650 0198 00BF     		nop
 2651              	.L165:
 2652              	.L176:
 900:..\src/interruptions.c ****     }
 901:..\src/interruptions.c ****  
 902:..\src/interruptions.c **** }
 2653              		.loc 1 902 0
 2654 019a 00BF     		nop
 2655 019c 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 65


 2656              		.cfi_def_cfa_offset 8
 2657 019e BD46     		mov	sp, r7
 2658              		.cfi_def_cfa_register 13
 2659              		@ sp needed
 2660 01a0 80BD     		pop	{r7, pc}
 2661              	.L180:
 2662 01a2 00BF     		.align	2
 2663              	.L179:
 2664 01a4 8E000000 		.word	fsm_state.10298
 2665 01a8 00000000 		.word	g_mem
 2666 01ac 00000000 		.word	c_mem
 2667              		.cfi_endproc
 2668              	.LFE70:
 2669              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 2670              		.section	.text.motor_control_SH,"ax",%progbits
 2671              		.align	2
 2672              		.global	motor_control_SH
 2673              		.thumb
 2674              		.thumb_func
 2675              		.type	motor_control_SH, %function
 2676              	motor_control_SH:
 2677              	.LFB71:
 903:..\src/interruptions.c **** 
 904:..\src/interruptions.c **** //==============================================================================
 905:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 906:..\src/interruptions.c **** //==============================================================================
 907:..\src/interruptions.c **** void motor_control_SH() {
 2678              		.loc 1 907 0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 80
 2681              		@ frame_needed = 1, uses_anonymous_args = 0
 2682 0000 80B5     		push	{r7, lr}
 2683              		.cfi_def_cfa_offset 8
 2684              		.cfi_offset 7, -8
 2685              		.cfi_offset 14, -4
 2686 0002 94B0     		sub	sp, sp, #80
 2687              		.cfi_def_cfa_offset 88
 2688 0004 00AF     		add	r7, sp, #0
 2689              		.cfi_def_cfa_register 7
 908:..\src/interruptions.c **** 
 909:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2690              		.loc 1 909 0
 2691 0006 0023     		movs	r3, #0
 2692 0008 FB64     		str	r3, [r7, #76]
 910:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 911:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 912:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 913:..\src/interruptions.c ****  
 914:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 2693              		.loc 1 914 0
 2694 000a 0023     		movs	r3, #0
 2695 000c 87F84730 		strb	r3, [r7, #71]
 915:..\src/interruptions.c ****     
 916:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 2696              		.loc 1 916 0
 2697 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 2698 0014 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 66


 2699 0016 DB00     		lsls	r3, r3, #3
 2700 0018 9B1A     		subs	r3, r3, r2
 2701 001a 1B01     		lsls	r3, r3, #4
 2702 001c B033     		adds	r3, r3, #176
 2703 001e 9D4A     		ldr	r2, .L242
 2704 0020 1344     		add	r3, r3, r2
 2705 0022 3B64     		str	r3, [r7, #64]
 917:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 2706              		.loc 1 917 0
 2707 0024 3B6C     		ldr	r3, [r7, #64]
 2708 0026 93F86030 		ldrb	r3, [r3, #96]
 2709 002a 87F83F30 		strb	r3, [r7, #63]
 918:..\src/interruptions.c ****     
 919:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 2710              		.loc 1 919 0
 2711 002e 3B6C     		ldr	r3, [r7, #64]
 2712 0030 1B68     		ldr	r3, [r3]
 2713 0032 BB63     		str	r3, [r7, #56]
 920:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 2714              		.loc 1 920 0
 2715 0034 3B6C     		ldr	r3, [r7, #64]
 2716 0036 5B68     		ldr	r3, [r3, #4]
 2717 0038 7B63     		str	r3, [r7, #52]
 921:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 2718              		.loc 1 921 0
 2719 003a 3B6C     		ldr	r3, [r7, #64]
 2720 003c 9B68     		ldr	r3, [r3, #8]
 2721 003e 3B63     		str	r3, [r7, #48]
 922:..\src/interruptions.c **** 
 923:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 2722              		.loc 1 923 0
 2723 0040 3B6C     		ldr	r3, [r7, #64]
 2724 0042 DB68     		ldr	r3, [r3, #12]
 2725 0044 FB62     		str	r3, [r7, #44]
 924:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 2726              		.loc 1 924 0
 2727 0046 3B6C     		ldr	r3, [r7, #64]
 2728 0048 1B69     		ldr	r3, [r3, #16]
 2729 004a BB62     		str	r3, [r7, #40]
 925:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 2730              		.loc 1 925 0
 2731 004c 3B6C     		ldr	r3, [r7, #64]
 2732 004e 5B69     		ldr	r3, [r3, #20]
 2733 0050 7B62     		str	r3, [r7, #36]
 926:..\src/interruptions.c **** 
 927:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 2734              		.loc 1 927 0
 2735 0052 3B6C     		ldr	r3, [r7, #64]
 2736 0054 9B69     		ldr	r3, [r3, #24]
 2737 0056 3B62     		str	r3, [r7, #32]
 928:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 2738              		.loc 1 928 0
 2739 0058 3B6C     		ldr	r3, [r7, #64]
 2740 005a DB69     		ldr	r3, [r3, #28]
 2741 005c FB61     		str	r3, [r7, #28]
 929:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 2742              		.loc 1 929 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 67


 2743 005e 3B6C     		ldr	r3, [r7, #64]
 2744 0060 1B6A     		ldr	r3, [r3, #32]
 2745 0062 BB61     		str	r3, [r7, #24]
 930:..\src/interruptions.c ****     
 931:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 2746              		.loc 1 931 0
 2747 0064 3B6C     		ldr	r3, [r7, #64]
 2748 0066 5B6A     		ldr	r3, [r3, #36]
 2749 0068 7B61     		str	r3, [r7, #20]
 932:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 2750              		.loc 1 932 0
 2751 006a 3B6C     		ldr	r3, [r7, #64]
 2752 006c 9B6A     		ldr	r3, [r3, #40]
 2753 006e 3B61     		str	r3, [r7, #16]
 933:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 2754              		.loc 1 933 0
 2755 0070 3B6C     		ldr	r3, [r7, #64]
 2756 0072 DB6A     		ldr	r3, [r3, #44]
 2757 0074 FB60     		str	r3, [r7, #12]
 934:..\src/interruptions.c **** 
 935:..\src/interruptions.c ****     // Static Variables
 936:..\src/interruptions.c **** 
 937:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 938:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 939:..\src/interruptions.c ****     
 940:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 941:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 942:..\src/interruptions.c ****     static int32 prev_pwm;
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 945:..\src/interruptions.c ****     static uint32 position_counter = 0;
 946:..\src/interruptions.c ****   
 947:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 948:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 2758              		.loc 1 948 0
 2759 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2760 007a 1B01     		lsls	r3, r3, #4
 2761 007c 864A     		ldr	r2, .L242+4
 2762 007e 9918     		adds	r1, r3, r2
 2763 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2764 0084 1B01     		lsls	r3, r3, #4
 2765 0086 854A     		ldr	r2, .L242+8
 2766 0088 1A44     		add	r2, r2, r3
 2767 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2768 008e 1846     		mov	r0, r3
 2769 0090 FFF7FEFF 		bl	compute_reference
 949:..\src/interruptions.c ****      
 950:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 2770              		.loc 1 950 0
 2771 0094 3B6C     		ldr	r3, [r7, #64]
 2772 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2773 009a 032B     		cmp	r3, #3
 2774 009c 00F2F781 		bhi	.L182
 2775 00a0 01A2     		adr	r2, .L184
 2776 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2777 00a6 00BF     		.p2align 2
 2778              	.L184:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 68


 2779 00a8 55020000 		.word	.L183+1
 2780 00ac 49040000 		.word	.L185+1
 2781 00b0 3B030000 		.word	.L186+1
 2782 00b4 B9000000 		.word	.L187+1
 2783              		.p2align 1
 2784              	.L187:
 951:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 952:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 953:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2785              		.loc 1 953 0
 2786 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2787 00bc 764A     		ldr	r2, .L242+4
 2788 00be 1B01     		lsls	r3, r3, #4
 2789 00c0 1344     		add	r3, r3, r2
 2790 00c2 1A68     		ldr	r2, [r3]
 2791 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2792 00c8 7549     		ldr	r1, .L242+12
 2793 00ca 3420     		movs	r0, #52
 2794 00cc 00FB03F3 		mul	r3, r0, r3
 2795 00d0 0B44     		add	r3, r3, r1
 2796 00d2 1B68     		ldr	r3, [r3]
 2797 00d4 D31A     		subs	r3, r2, r3
 2798 00d6 BB60     		str	r3, [r7, #8]
 954:..\src/interruptions.c **** 
 955:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2799              		.loc 1 955 0
 2800 00d8 724B     		ldr	r3, .L242+16
 2801 00da 1A68     		ldr	r2, [r3]
 2802 00dc BB68     		ldr	r3, [r7, #8]
 2803 00de 1344     		add	r3, r3, r2
 2804 00e0 704A     		ldr	r2, .L242+16
 2805 00e2 1360     		str	r3, [r2]
 956:..\src/interruptions.c **** 
 957:..\src/interruptions.c ****             // error_sum saturation
 958:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2806              		.loc 1 958 0
 2807 00e4 6F4B     		ldr	r3, .L242+16
 2808 00e6 1B68     		ldr	r3, [r3]
 2809 00e8 6F4A     		ldr	r2, .L242+20
 2810 00ea 9342     		cmp	r3, r2
 2811 00ec 03DD     		ble	.L188
 959:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2812              		.loc 1 959 0
 2813 00ee 6D4B     		ldr	r3, .L242+16
 2814 00f0 6D4A     		ldr	r2, .L242+20
 2815 00f2 1A60     		str	r2, [r3]
 2816 00f4 07E0     		b	.L189
 2817              	.L188:
 960:..\src/interruptions.c ****             else {
 961:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2818              		.loc 1 961 0
 2819 00f6 6B4B     		ldr	r3, .L242+16
 2820 00f8 1B68     		ldr	r3, [r3]
 2821 00fa 6C4A     		ldr	r2, .L242+24
 2822 00fc 9342     		cmp	r3, r2
 2823 00fe 02DA     		bge	.L189
 962:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 69


 2824              		.loc 1 962 0
 2825 0100 684B     		ldr	r3, .L242+16
 2826 0102 6A4A     		ldr	r2, .L242+24
 2827 0104 1A60     		str	r2, [r3]
 2828              	.L189:
 963:..\src/interruptions.c ****             }
 964:..\src/interruptions.c ****             
 965:..\src/interruptions.c ****             // ------ position PID control ------
 966:..\src/interruptions.c **** 
 967:..\src/interruptions.c ****             i_ref = 0;
 2829              		.loc 1 967 0
 2830 0106 0023     		movs	r3, #0
 2831 0108 BB64     		str	r3, [r7, #72]
 968:..\src/interruptions.c ****             
 969:..\src/interruptions.c ****             // Proportional
 970:..\src/interruptions.c ****             if (k_p_dl != 0)
 2832              		.loc 1 970 0
 2833 010a 3B6A     		ldr	r3, [r7, #32]
 2834 010c 002B     		cmp	r3, #0
 2835 010e 07D0     		beq	.L190
 971:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2836              		.loc 1 971 0
 2837 0110 3B6A     		ldr	r3, [r7, #32]
 2838 0112 BA68     		ldr	r2, [r7, #8]
 2839 0114 02FB03F3 		mul	r3, r2, r3
 2840 0118 1B14     		asrs	r3, r3, #16
 2841 011a BA6C     		ldr	r2, [r7, #72]
 2842 011c 1344     		add	r3, r3, r2
 2843 011e BB64     		str	r3, [r7, #72]
 2844              	.L190:
 972:..\src/interruptions.c **** 
 973:..\src/interruptions.c ****             // Integral
 974:..\src/interruptions.c ****             if (k_i_dl != 0)
 2845              		.loc 1 974 0
 2846 0120 FB69     		ldr	r3, [r7, #28]
 2847 0122 002B     		cmp	r3, #0
 2848 0124 08D0     		beq	.L191
 975:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2849              		.loc 1 975 0
 2850 0126 5F4B     		ldr	r3, .L242+16
 2851 0128 1B68     		ldr	r3, [r3]
 2852 012a FA69     		ldr	r2, [r7, #28]
 2853 012c 02FB03F3 		mul	r3, r2, r3
 2854 0130 1B14     		asrs	r3, r3, #16
 2855 0132 BA6C     		ldr	r2, [r7, #72]
 2856 0134 1344     		add	r3, r3, r2
 2857 0136 BB64     		str	r3, [r7, #72]
 2858              	.L191:
 976:..\src/interruptions.c **** 
 977:..\src/interruptions.c ****             // Derivative
 978:..\src/interruptions.c ****             if (k_d_dl != 0)
 2859              		.loc 1 978 0
 2860 0138 BB69     		ldr	r3, [r7, #24]
 2861 013a 002B     		cmp	r3, #0
 2862 013c 0AD0     		beq	.L192
 979:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2863              		.loc 1 979 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 70


 2864 013e 5C4B     		ldr	r3, .L242+28
 2865 0140 1B68     		ldr	r3, [r3]
 2866 0142 BA68     		ldr	r2, [r7, #8]
 2867 0144 D31A     		subs	r3, r2, r3
 2868 0146 BA69     		ldr	r2, [r7, #24]
 2869 0148 02FB03F3 		mul	r3, r2, r3
 2870 014c 1B14     		asrs	r3, r3, #16
 2871 014e BA6C     		ldr	r2, [r7, #72]
 2872 0150 1344     		add	r3, r3, r2
 2873 0152 BB64     		str	r3, [r7, #72]
 2874              	.L192:
 980:..\src/interruptions.c ****                         
 981:..\src/interruptions.c ****             // Update previous position
 982:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2875              		.loc 1 982 0
 2876 0154 564A     		ldr	r2, .L242+28
 2877 0156 BB68     		ldr	r3, [r7, #8]
 2878 0158 1360     		str	r3, [r2]
 983:..\src/interruptions.c **** 
 984:..\src/interruptions.c ****             // motor direction depends on i_ref
 985:..\src/interruptions.c ****             if (i_ref >= 0)
 2879              		.loc 1 985 0
 2880 015a BB6C     		ldr	r3, [r7, #72]
 2881 015c 002B     		cmp	r3, #0
 2882 015e 03DB     		blt	.L193
 986:..\src/interruptions.c ****                 motor_dir = TRUE;
 2883              		.loc 1 986 0
 2884 0160 544B     		ldr	r3, .L242+32
 2885 0162 0122     		movs	r2, #1
 2886 0164 1A70     		strb	r2, [r3]
 2887 0166 02E0     		b	.L194
 2888              	.L193:
 987:..\src/interruptions.c ****             else
 988:..\src/interruptions.c ****                 motor_dir = FALSE;
 2889              		.loc 1 988 0
 2890 0168 524B     		ldr	r3, .L242+32
 2891 016a 0022     		movs	r2, #0
 2892 016c 1A70     		strb	r2, [r3]
 2893              	.L194:
 989:..\src/interruptions.c **** 
 990:..\src/interruptions.c ****             // saturate max current
 991:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2894              		.loc 1 991 0
 2895 016e 3B6C     		ldr	r3, [r7, #64]
 2896 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 2897 0174 1A46     		mov	r2, r3
 2898 0176 BB6C     		ldr	r3, [r7, #72]
 2899 0178 9A42     		cmp	r2, r3
 2900 017a 04DA     		bge	.L195
 992:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2901              		.loc 1 992 0
 2902 017c 3B6C     		ldr	r3, [r7, #64]
 2903 017e B3F95C30 		ldrsh	r3, [r3, #92]
 2904 0182 BB64     		str	r3, [r7, #72]
 2905 0184 0BE0     		b	.L196
 2906              	.L195:
 993:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 71


 994:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2907              		.loc 1 994 0
 2908 0186 3B6C     		ldr	r3, [r7, #64]
 2909 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 2910 018c 5A42     		negs	r2, r3
 2911 018e BB6C     		ldr	r3, [r7, #72]
 2912 0190 9A42     		cmp	r2, r3
 2913 0192 04DD     		ble	.L196
 995:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2914              		.loc 1 995 0
 2915 0194 3B6C     		ldr	r3, [r7, #64]
 2916 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 2917 019a 5B42     		negs	r3, r3
 2918 019c BB64     		str	r3, [r7, #72]
 2919              	.L196:
 996:..\src/interruptions.c ****         	}
 997:..\src/interruptions.c **** 
 998:..\src/interruptions.c ****             // current error and curr error sum
 999:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2920              		.loc 1 999 0
 2921 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2922 01a2 3F4A     		ldr	r2, .L242+12
 2923 01a4 3421     		movs	r1, #52
 2924 01a6 01FB03F3 		mul	r3, r1, r3
 2925 01aa 1344     		add	r3, r3, r2
 2926 01ac 0C33     		adds	r3, r3, #12
 2927 01ae 1B68     		ldr	r3, [r3]
 2928 01b0 BA6C     		ldr	r2, [r7, #72]
 2929 01b2 D31A     		subs	r3, r2, r3
 2930 01b4 7B60     		str	r3, [r7, #4]
1000:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2931              		.loc 1 1000 0
 2932 01b6 404B     		ldr	r3, .L242+36
 2933 01b8 1A68     		ldr	r2, [r3]
 2934 01ba 7B68     		ldr	r3, [r7, #4]
 2935 01bc 1344     		add	r3, r3, r2
 2936 01be 3E4A     		ldr	r2, .L242+36
 2937 01c0 1360     		str	r3, [r2]
1001:..\src/interruptions.c ****             
1002:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2938              		.loc 1 1002 0
 2939 01c2 3D4B     		ldr	r3, .L242+36
 2940 01c4 1B68     		ldr	r3, [r3]
 2941 01c6 3D4A     		ldr	r2, .L242+40
 2942 01c8 9342     		cmp	r3, r2
 2943 01ca 03DD     		ble	.L197
1003:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2944              		.loc 1 1003 0
 2945 01cc 3A4B     		ldr	r3, .L242+36
 2946 01ce 3B4A     		ldr	r2, .L242+40
 2947 01d0 1A60     		str	r2, [r3]
 2948 01d2 07E0     		b	.L198
 2949              	.L197:
1004:..\src/interruptions.c ****             else {
1005:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2950              		.loc 1 1005 0
 2951 01d4 384B     		ldr	r3, .L242+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 72


 2952 01d6 1B68     		ldr	r3, [r3]
 2953 01d8 394A     		ldr	r2, .L242+44
 2954 01da 9342     		cmp	r3, r2
 2955 01dc 02DA     		bge	.L198
1006:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2956              		.loc 1 1006 0
 2957 01de 364B     		ldr	r3, .L242+36
 2958 01e0 374A     		ldr	r2, .L242+44
 2959 01e2 1A60     		str	r2, [r3]
 2960              	.L198:
1007:..\src/interruptions.c ****             }
1008:..\src/interruptions.c **** 
1009:..\src/interruptions.c ****             // ----- current PID control -----
1010:..\src/interruptions.c **** 
1011:..\src/interruptions.c ****             pwm_input = 0;
 2961              		.loc 1 1011 0
 2962 01e4 0023     		movs	r3, #0
 2963 01e6 FB64     		str	r3, [r7, #76]
1012:..\src/interruptions.c **** 
1013:..\src/interruptions.c ****             // Proportional
1014:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2964              		.loc 1 1014 0
 2965 01e8 7B69     		ldr	r3, [r7, #20]
 2966 01ea 002B     		cmp	r3, #0
 2967 01ec 07D0     		beq	.L199
1015:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2968              		.loc 1 1015 0
 2969 01ee 7B69     		ldr	r3, [r7, #20]
 2970 01f0 7A68     		ldr	r2, [r7, #4]
 2971 01f2 02FB03F3 		mul	r3, r2, r3
 2972 01f6 1B14     		asrs	r3, r3, #16
 2973 01f8 FA6C     		ldr	r2, [r7, #76]
 2974 01fa 1344     		add	r3, r3, r2
 2975 01fc FB64     		str	r3, [r7, #76]
 2976              	.L199:
1016:..\src/interruptions.c **** 
1017:..\src/interruptions.c ****             // Integral
1018:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2977              		.loc 1 1018 0
 2978 01fe 3B69     		ldr	r3, [r7, #16]
 2979 0200 002B     		cmp	r3, #0
 2980 0202 08D0     		beq	.L200
1019:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2981              		.loc 1 1019 0
 2982 0204 2C4B     		ldr	r3, .L242+36
 2983 0206 1B68     		ldr	r3, [r3]
 2984 0208 3A69     		ldr	r2, [r7, #16]
 2985 020a 02FB03F3 		mul	r3, r2, r3
 2986 020e 1B14     		asrs	r3, r3, #16
 2987 0210 FA6C     		ldr	r2, [r7, #76]
 2988 0212 1344     		add	r3, r3, r2
 2989 0214 FB64     		str	r3, [r7, #76]
 2990              	.L200:
1020:..\src/interruptions.c **** 
1021:..\src/interruptions.c ****             // Derivative
1022:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2991              		.loc 1 1022 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 73


 2992 0216 FB68     		ldr	r3, [r7, #12]
 2993 0218 002B     		cmp	r3, #0
 2994 021a 0AD0     		beq	.L201
1023:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2995              		.loc 1 1023 0
 2996 021c 294B     		ldr	r3, .L242+48
 2997 021e 1B68     		ldr	r3, [r3]
 2998 0220 7A68     		ldr	r2, [r7, #4]
 2999 0222 D31A     		subs	r3, r2, r3
 3000 0224 FA68     		ldr	r2, [r7, #12]
 3001 0226 02FB03F3 		mul	r3, r2, r3
 3002 022a 1B14     		asrs	r3, r3, #16
 3003 022c FA6C     		ldr	r2, [r7, #76]
 3004 022e 1344     		add	r3, r3, r2
 3005 0230 FB64     		str	r3, [r7, #76]
 3006              	.L201:
1024:..\src/interruptions.c **** 
1025:..\src/interruptions.c ****             // pwm_input saturation
1026:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3007              		.loc 1 1026 0
 3008 0232 FB6C     		ldr	r3, [r7, #76]
 3009 0234 13F1640F 		cmn	r3, #100
 3010 0238 03DA     		bge	.L202
1027:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3011              		.loc 1 1027 0
 3012 023a 6FF06303 		mvn	r3, #99
 3013 023e FB64     		str	r3, [r7, #76]
 3014 0240 04E0     		b	.L203
 3015              	.L202:
1028:..\src/interruptions.c ****             else {
1029:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3016              		.loc 1 1029 0
 3017 0242 FB6C     		ldr	r3, [r7, #76]
 3018 0244 642B     		cmp	r3, #100
 3019 0246 01DD     		ble	.L203
1030:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3020              		.loc 1 1030 0
 3021 0248 6423     		movs	r3, #100
 3022 024a FB64     		str	r3, [r7, #76]
 3023              	.L203:
1031:..\src/interruptions.c ****             }
1032:..\src/interruptions.c **** 
1033:..\src/interruptions.c ****             // Update previous current
1034:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3024              		.loc 1 1034 0
 3025 024c 1D4A     		ldr	r2, .L242+48
 3026 024e 7B68     		ldr	r3, [r7, #4]
 3027 0250 1360     		str	r3, [r2]
1035:..\src/interruptions.c **** 
1036:..\src/interruptions.c ****         break;
 3028              		.loc 1 1036 0
 3029 0252 1CE1     		b	.L182
 3030              	.L183:
1037:..\src/interruptions.c **** 
1038:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1039:..\src/interruptions.c ****         case CONTROL_ANGLE:
1040:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 74


 3031              		.loc 1 1040 0
 3032 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3033 0258 0F4A     		ldr	r2, .L242+4
 3034 025a 1B01     		lsls	r3, r3, #4
 3035 025c 1344     		add	r3, r3, r2
 3036 025e 1A68     		ldr	r2, [r3]
 3037 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3038 0264 0E49     		ldr	r1, .L242+12
 3039 0266 3420     		movs	r0, #52
 3040 0268 00FB03F3 		mul	r3, r0, r3
 3041 026c 0B44     		add	r3, r3, r1
 3042 026e 1B68     		ldr	r3, [r3]
 3043 0270 D31A     		subs	r3, r2, r3
 3044 0272 BB60     		str	r3, [r7, #8]
1041:..\src/interruptions.c **** 
1042:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3045              		.loc 1 1042 0
 3046 0274 0B4B     		ldr	r3, .L242+16
 3047 0276 1A68     		ldr	r2, [r3]
 3048 0278 BB68     		ldr	r3, [r7, #8]
 3049 027a 1344     		add	r3, r3, r2
 3050 027c 094A     		ldr	r2, .L242+16
 3051 027e 1360     		str	r3, [r2]
1043:..\src/interruptions.c **** 
1044:..\src/interruptions.c ****             // anti-windup (for integral control)
1045:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3052              		.loc 1 1045 0
 3053 0280 084B     		ldr	r3, .L242+16
 3054 0282 1B68     		ldr	r3, [r3]
 3055 0284 B3F57A7F 		cmp	r3, #1000
 3056 0288 1EDD     		ble	.L204
1046:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3057              		.loc 1 1046 0
 3058 028a 064B     		ldr	r3, .L242+16
 3059 028c 4FF47A72 		mov	r2, #1000
 3060 0290 1A60     		str	r2, [r3]
 3061 0292 21E0     		b	.L205
 3062              	.L243:
 3063              		.align	2
 3064              	.L242:
 3065 0294 00000000 		.word	c_mem
 3066 0298 00000000 		.word	g_ref
 3067 029c 00000000 		.word	g_refOld
 3068 02a0 00000000 		.word	g_meas
 3069 02a4 90000000 		.word	pos_error_sum.10325
 3070 02a8 80F0FA02 		.word	50000000
 3071 02ac 800F05FD 		.word	-50000000
 3072 02b0 94000000 		.word	prev_pos_err.10327
 3073 02b4 98000000 		.word	motor_dir.10330
 3074 02b8 9C000000 		.word	curr_error_sum.10326
 3075 02bc A0860100 		.word	100000
 3076 02c0 6079FEFF 		.word	-100000
 3077 02c4 A0000000 		.word	prev_curr_err.10328
 3078              	.L204:
1047:..\src/interruptions.c ****             else {
1048:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3079              		.loc 1 1048 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 75


 3080 02c8 9D4B     		ldr	r3, .L244
 3081 02ca 1B68     		ldr	r3, [r3]
 3082 02cc 13F57A7F 		cmn	r3, #1000
 3083 02d0 02DA     		bge	.L205
1049:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3084              		.loc 1 1049 0
 3085 02d2 9B4B     		ldr	r3, .L244
 3086 02d4 9B4A     		ldr	r2, .L244+4
 3087 02d6 1A60     		str	r2, [r3]
 3088              	.L205:
1050:..\src/interruptions.c ****             }
1051:..\src/interruptions.c **** 
1052:..\src/interruptions.c ****             // Proportional
1053:..\src/interruptions.c ****             if (k_p != 0) 
 3089              		.loc 1 1053 0
 3090 02d8 BB6B     		ldr	r3, [r7, #56]
 3091 02da 002B     		cmp	r3, #0
 3092 02dc 05D0     		beq	.L206
1054:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3093              		.loc 1 1054 0
 3094 02de BB6B     		ldr	r3, [r7, #56]
 3095 02e0 BA68     		ldr	r2, [r7, #8]
 3096 02e2 02FB03F3 		mul	r3, r2, r3
 3097 02e6 1B14     		asrs	r3, r3, #16
 3098 02e8 FB64     		str	r3, [r7, #76]
 3099              	.L206:
1055:..\src/interruptions.c ****             
1056:..\src/interruptions.c **** 
1057:..\src/interruptions.c ****             // Integral
1058:..\src/interruptions.c ****             if (k_i != 0) 
 3100              		.loc 1 1058 0
 3101 02ea 7B6B     		ldr	r3, [r7, #52]
 3102 02ec 002B     		cmp	r3, #0
 3103 02ee 08D0     		beq	.L207
1059:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3104              		.loc 1 1059 0
 3105 02f0 934B     		ldr	r3, .L244
 3106 02f2 1B68     		ldr	r3, [r3]
 3107 02f4 7A6B     		ldr	r2, [r7, #52]
 3108 02f6 02FB03F3 		mul	r3, r2, r3
 3109 02fa 1B14     		asrs	r3, r3, #16
 3110 02fc FA6C     		ldr	r2, [r7, #76]
 3111 02fe 1344     		add	r3, r3, r2
 3112 0300 FB64     		str	r3, [r7, #76]
 3113              	.L207:
1060:..\src/interruptions.c ****             
1061:..\src/interruptions.c **** 
1062:..\src/interruptions.c ****             // Derivative
1063:..\src/interruptions.c ****             if (k_d != 0) 
 3114              		.loc 1 1063 0
 3115 0302 3B6B     		ldr	r3, [r7, #48]
 3116 0304 002B     		cmp	r3, #0
 3117 0306 0AD0     		beq	.L208
1064:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3118              		.loc 1 1064 0
 3119 0308 8F4B     		ldr	r3, .L244+8
 3120 030a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 76


 3121 030c BA68     		ldr	r2, [r7, #8]
 3122 030e D31A     		subs	r3, r2, r3
 3123 0310 3A6B     		ldr	r2, [r7, #48]
 3124 0312 02FB03F3 		mul	r3, r2, r3
 3125 0316 1B14     		asrs	r3, r3, #16
 3126 0318 FA6C     		ldr	r2, [r7, #76]
 3127 031a 1344     		add	r3, r3, r2
 3128 031c FB64     		str	r3, [r7, #76]
 3129              	.L208:
1065:..\src/interruptions.c ****             
1066:..\src/interruptions.c **** 
1067:..\src/interruptions.c ****             // Update measure
1068:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3130              		.loc 1 1068 0
 3131 031e 8A4A     		ldr	r2, .L244+8
 3132 0320 BB68     		ldr	r3, [r7, #8]
 3133 0322 1360     		str	r3, [r2]
1069:..\src/interruptions.c **** 
1070:..\src/interruptions.c ****             if (pwm_input > 0)
 3134              		.loc 1 1070 0
 3135 0324 FB6C     		ldr	r3, [r7, #76]
 3136 0326 002B     		cmp	r3, #0
 3137 0328 03DD     		ble	.L209
1071:..\src/interruptions.c ****                 motor_dir = TRUE;
 3138              		.loc 1 1071 0
 3139 032a 884B     		ldr	r3, .L244+12
 3140 032c 0122     		movs	r2, #1
 3141 032e 1A70     		strb	r2, [r3]
1072:..\src/interruptions.c ****             else
1073:..\src/interruptions.c ****                 motor_dir = FALSE;
1074:..\src/interruptions.c **** 
1075:..\src/interruptions.c ****         break;
 3142              		.loc 1 1075 0
 3143 0330 ADE0     		b	.L182
 3144              	.L209:
1073:..\src/interruptions.c **** 
 3145              		.loc 1 1073 0
 3146 0332 864B     		ldr	r3, .L244+12
 3147 0334 0022     		movs	r2, #0
 3148 0336 1A70     		strb	r2, [r3]
 3149              		.loc 1 1075 0
 3150 0338 A9E0     		b	.L182
 3151              	.L186:
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1078:..\src/interruptions.c ****         case CONTROL_CURRENT:
1079:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3152              		.loc 1 1079 0
 3153 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3154 033e 844A     		ldr	r2, .L244+16
 3155 0340 1B01     		lsls	r3, r3, #4
 3156 0342 1344     		add	r3, r3, r2
 3157 0344 0C33     		adds	r3, r3, #12
 3158 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3159 0348 002B     		cmp	r3, #0
 3160 034a 00F09D80 		beq	.L240
 3161              		.loc 1 1079 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 77


 3162 034e 814B     		ldr	r3, .L244+20
 3163 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3164 0352 002B     		cmp	r3, #0
 3165 0354 00F09880 		beq	.L240
1080:..\src/interruptions.c ****                 
1081:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3166              		.loc 1 1081 0 is_stmt 1
 3167 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3168 035c 7C4A     		ldr	r2, .L244+16
 3169 035e 1B01     		lsls	r3, r3, #4
 3170 0360 1344     		add	r3, r3, r2
 3171 0362 0433     		adds	r3, r3, #4
 3172 0364 1B68     		ldr	r3, [r3]
 3173 0366 BB64     		str	r3, [r7, #72]
1082:..\src/interruptions.c **** 
1083:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3174              		.loc 1 1083 0
 3175 0368 3B6C     		ldr	r3, [r7, #64]
 3176 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3177 036e 1A46     		mov	r2, r3
 3178 0370 BB6C     		ldr	r3, [r7, #72]
 3179 0372 9A42     		cmp	r2, r3
 3180 0374 04DA     		bge	.L212
1084:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3181              		.loc 1 1084 0
 3182 0376 3B6C     		ldr	r3, [r7, #64]
 3183 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3184 037c BB64     		str	r3, [r7, #72]
 3185 037e 0BE0     		b	.L213
 3186              	.L212:
1085:..\src/interruptions.c ****                 else {
1086:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3187              		.loc 1 1086 0
 3188 0380 3B6C     		ldr	r3, [r7, #64]
 3189 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3190 0386 5A42     		negs	r2, r3
 3191 0388 BB6C     		ldr	r3, [r7, #72]
 3192 038a 9A42     		cmp	r2, r3
 3193 038c 04DD     		ble	.L213
1087:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3194              		.loc 1 1087 0
 3195 038e 3B6C     		ldr	r3, [r7, #64]
 3196 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3197 0394 5B42     		negs	r3, r3
 3198 0396 BB64     		str	r3, [r7, #72]
 3199              	.L213:
1088:..\src/interruptions.c ****                 }
1089:..\src/interruptions.c ****                 
1090:..\src/interruptions.c ****                 // current error
1091:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3200              		.loc 1 1091 0
 3201 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3202 039c 6E4A     		ldr	r2, .L244+24
 3203 039e 3421     		movs	r1, #52
 3204 03a0 01FB03F3 		mul	r3, r1, r3
 3205 03a4 1344     		add	r3, r3, r2
 3206 03a6 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 78


 3207 03a8 1B68     		ldr	r3, [r3]
 3208 03aa BA6C     		ldr	r2, [r7, #72]
 3209 03ac D31A     		subs	r3, r2, r3
 3210 03ae 7B60     		str	r3, [r7, #4]
1092:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3211              		.loc 1 1092 0
 3212 03b0 6A4B     		ldr	r3, .L244+28
 3213 03b2 1A68     		ldr	r2, [r3]
 3214 03b4 7B68     		ldr	r3, [r7, #4]
 3215 03b6 1344     		add	r3, r3, r2
 3216 03b8 684A     		ldr	r2, .L244+28
 3217 03ba 1360     		str	r3, [r2]
1093:..\src/interruptions.c ****                 
1094:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3218              		.loc 1 1094 0
 3219 03bc 674B     		ldr	r3, .L244+28
 3220 03be 1B68     		ldr	r3, [r3]
 3221 03c0 674A     		ldr	r2, .L244+32
 3222 03c2 9342     		cmp	r3, r2
 3223 03c4 03DD     		ble	.L214
1095:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3224              		.loc 1 1095 0
 3225 03c6 654B     		ldr	r3, .L244+28
 3226 03c8 654A     		ldr	r2, .L244+32
 3227 03ca 1A60     		str	r2, [r3]
 3228 03cc 07E0     		b	.L215
 3229              	.L214:
1096:..\src/interruptions.c ****                 else {
1097:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3230              		.loc 1 1097 0
 3231 03ce 634B     		ldr	r3, .L244+28
 3232 03d0 1B68     		ldr	r3, [r3]
 3233 03d2 644A     		ldr	r2, .L244+36
 3234 03d4 9342     		cmp	r3, r2
 3235 03d6 02DA     		bge	.L215
1098:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3236              		.loc 1 1098 0
 3237 03d8 604B     		ldr	r3, .L244+28
 3238 03da 624A     		ldr	r2, .L244+36
 3239 03dc 1A60     		str	r2, [r3]
 3240              	.L215:
1099:..\src/interruptions.c ****                 }
1100:..\src/interruptions.c **** 
1101:..\src/interruptions.c ****                 pwm_input = 0;
 3241              		.loc 1 1101 0
 3242 03de 0023     		movs	r3, #0
 3243 03e0 FB64     		str	r3, [r7, #76]
1102:..\src/interruptions.c **** 
1103:..\src/interruptions.c ****                 // Proportional
1104:..\src/interruptions.c ****                 if (k_p_c != 0)
 3244              		.loc 1 1104 0
 3245 03e2 FB6A     		ldr	r3, [r7, #44]
 3246 03e4 002B     		cmp	r3, #0
 3247 03e6 07D0     		beq	.L216
1105:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3248              		.loc 1 1105 0
 3249 03e8 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 79


 3250 03ea 7A68     		ldr	r2, [r7, #4]
 3251 03ec 02FB03F3 		mul	r3, r2, r3
 3252 03f0 1B14     		asrs	r3, r3, #16
 3253 03f2 FA6C     		ldr	r2, [r7, #76]
 3254 03f4 1344     		add	r3, r3, r2
 3255 03f6 FB64     		str	r3, [r7, #76]
 3256              	.L216:
1106:..\src/interruptions.c **** 
1107:..\src/interruptions.c ****                 // Integral
1108:..\src/interruptions.c ****                 if (k_i_c != 0)
 3257              		.loc 1 1108 0
 3258 03f8 BB6A     		ldr	r3, [r7, #40]
 3259 03fa 002B     		cmp	r3, #0
 3260 03fc 08D0     		beq	.L217
1109:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3261              		.loc 1 1109 0
 3262 03fe 574B     		ldr	r3, .L244+28
 3263 0400 1B68     		ldr	r3, [r3]
 3264 0402 BA6A     		ldr	r2, [r7, #40]
 3265 0404 02FB03F3 		mul	r3, r2, r3
 3266 0408 1B14     		asrs	r3, r3, #16
 3267 040a FA6C     		ldr	r2, [r7, #76]
 3268 040c 1344     		add	r3, r3, r2
 3269 040e FB64     		str	r3, [r7, #76]
 3270              	.L217:
1110:..\src/interruptions.c **** 
1111:..\src/interruptions.c ****                 // Derivative
1112:..\src/interruptions.c ****                 if (k_d_c != 0)
 3271              		.loc 1 1112 0
 3272 0410 7B6A     		ldr	r3, [r7, #36]
 3273 0412 002B     		cmp	r3, #0
 3274 0414 0AD0     		beq	.L218
1113:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3275              		.loc 1 1113 0
 3276 0416 544B     		ldr	r3, .L244+40
 3277 0418 1B68     		ldr	r3, [r3]
 3278 041a 7A68     		ldr	r2, [r7, #4]
 3279 041c D31A     		subs	r3, r2, r3
 3280 041e 7A6A     		ldr	r2, [r7, #36]
 3281 0420 02FB03F3 		mul	r3, r2, r3
 3282 0424 1B14     		asrs	r3, r3, #16
 3283 0426 FA6C     		ldr	r2, [r7, #76]
 3284 0428 1344     		add	r3, r3, r2
 3285 042a FB64     		str	r3, [r7, #76]
 3286              	.L218:
1114:..\src/interruptions.c ****                 
1115:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3287              		.loc 1 1115 0
 3288 042c 4E4A     		ldr	r2, .L244+40
 3289 042e 7B68     		ldr	r3, [r7, #4]
 3290 0430 1360     		str	r3, [r2]
1116:..\src/interruptions.c ****                 
1117:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3291              		.loc 1 1117 0
 3292 0432 FB6C     		ldr	r3, [r7, #76]
 3293 0434 002B     		cmp	r3, #0
 3294 0436 03DB     		blt	.L219
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 80


1118:..\src/interruptions.c ****                     motor_dir = TRUE;
 3295              		.loc 1 1118 0
 3296 0438 444B     		ldr	r3, .L244+12
 3297 043a 0122     		movs	r2, #1
 3298 043c 1A70     		strb	r2, [r3]
1119:..\src/interruptions.c ****                 else
1120:..\src/interruptions.c ****                     motor_dir = FALSE;
1121:..\src/interruptions.c ****             }
1122:..\src/interruptions.c ****         break;
 3299              		.loc 1 1122 0
 3300 043e 23E0     		b	.L240
 3301              	.L219:
1120:..\src/interruptions.c ****             }
 3302              		.loc 1 1120 0
 3303 0440 424B     		ldr	r3, .L244+12
 3304 0442 0022     		movs	r2, #0
 3305 0444 1A70     		strb	r2, [r3]
 3306              		.loc 1 1122 0
 3307 0446 1FE0     		b	.L240
 3308              	.L185:
1123:..\src/interruptions.c ****         
1124:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1125:..\src/interruptions.c ****         case CONTROL_PWM:
1126:..\src/interruptions.c **** 
1127:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3309              		.loc 1 1127 0
 3310 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3311 044c 404A     		ldr	r2, .L244+16
 3312 044e 1B01     		lsls	r3, r3, #4
 3313 0450 1344     		add	r3, r3, r2
 3314 0452 0833     		adds	r3, r3, #8
 3315 0454 1B68     		ldr	r3, [r3]
 3316 0456 FB64     		str	r3, [r7, #76]
1128:..\src/interruptions.c **** 
1129:..\src/interruptions.c ****             if (pwm_input > 0) 
 3317              		.loc 1 1129 0
 3318 0458 FB6C     		ldr	r3, [r7, #76]
 3319 045a 002B     		cmp	r3, #0
 3320 045c 03DD     		ble	.L220
1130:..\src/interruptions.c ****                 motor_dir = TRUE;
 3321              		.loc 1 1130 0
 3322 045e 3B4B     		ldr	r3, .L244+12
 3323 0460 0122     		movs	r2, #1
 3324 0462 1A70     		strb	r2, [r3]
 3325 0464 02E0     		b	.L221
 3326              	.L220:
1131:..\src/interruptions.c ****             else 
1132:..\src/interruptions.c ****                 motor_dir = FALSE;
 3327              		.loc 1 1132 0
 3328 0466 394B     		ldr	r3, .L244+12
 3329 0468 0022     		movs	r2, #0
 3330 046a 1A70     		strb	r2, [r3]
 3331              	.L221:
1133:..\src/interruptions.c ****             
1134:..\src/interruptions.c **** 
1135:..\src/interruptions.c ****             // pwm_input saturation
1136:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 81


 3332              		.loc 1 1136 0
 3333 046c FB6C     		ldr	r3, [r7, #76]
 3334 046e 13F1640F 		cmn	r3, #100
 3335 0472 03DA     		bge	.L222
1137:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3336              		.loc 1 1137 0
 3337 0474 6FF06303 		mvn	r3, #99
 3338 0478 FB64     		str	r3, [r7, #76]
1138:..\src/interruptions.c ****             else {
1139:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1140:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1141:..\src/interruptions.c ****         	}
1142:..\src/interruptions.c **** 
1143:..\src/interruptions.c ****         break;
 3339              		.loc 1 1143 0
 3340 047a 07E0     		b	.L241
 3341              	.L222:
1139:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3342              		.loc 1 1139 0
 3343 047c FB6C     		ldr	r3, [r7, #76]
 3344 047e 642B     		cmp	r3, #100
 3345 0480 04DD     		ble	.L241
1140:..\src/interruptions.c ****         	}
 3346              		.loc 1 1140 0
 3347 0482 6423     		movs	r3, #100
 3348 0484 FB64     		str	r3, [r7, #76]
 3349              		.loc 1 1143 0
 3350 0486 01E0     		b	.L241
 3351              	.L240:
1122:..\src/interruptions.c ****         
 3352              		.loc 1 1122 0
 3353 0488 00BF     		nop
 3354 048a 00E0     		b	.L182
 3355              	.L241:
 3356              		.loc 1 1143 0
 3357 048c 00BF     		nop
 3358              	.L182:
1144:..\src/interruptions.c ****             
1145:..\src/interruptions.c ****     }
1146:..\src/interruptions.c **** 
1147:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1148:..\src/interruptions.c **** 
1149:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3359              		.loc 1 1149 0
 3360 048e FB6C     		ldr	r3, [r7, #76]
 3361 0490 642B     		cmp	r3, #100
 3362 0492 01DD     		ble	.L224
1150:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3363              		.loc 1 1150 0
 3364 0494 6423     		movs	r3, #100
 3365 0496 FB64     		str	r3, [r7, #76]
 3366              	.L224:
1151:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3367              		.loc 1 1151 0
 3368 0498 FB6C     		ldr	r3, [r7, #76]
 3369 049a 13F1640F 		cmn	r3, #100
 3370 049e 02DA     		bge	.L225
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 82


1152:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3371              		.loc 1 1152 0
 3372 04a0 6FF06303 		mvn	r3, #99
 3373 04a4 FB64     		str	r3, [r7, #76]
 3374              	.L225:
1153:..\src/interruptions.c **** 
1154:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3375              		.loc 1 1154 0
 3376 04a6 3B6C     		ldr	r3, [r7, #64]
 3377 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3378 04ac 012B     		cmp	r3, #1
 3379 04ae 0DD0     		beq	.L226
1155:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3380              		.loc 1 1155 0
 3381 04b0 FB6C     		ldr	r3, [r7, #76]
 3382 04b2 9B02     		lsls	r3, r3, #10
 3383 04b4 2D4A     		ldr	r2, .L244+44
 3384 04b6 82FB0312 		smull	r1, r2, r2, r3
 3385 04ba 5211     		asrs	r2, r2, #5
 3386 04bc DB17     		asrs	r3, r3, #31
 3387 04be D31A     		subs	r3, r2, r3
 3388 04c0 2B4A     		ldr	r2, .L244+48
 3389 04c2 1288     		ldrh	r2, [r2]
 3390 04c4 02FB03F3 		mul	r3, r2, r3
 3391 04c8 9B12     		asrs	r3, r3, #10
 3392 04ca FB64     		str	r3, [r7, #76]
 3393              	.L226:
1156:..\src/interruptions.c ****  
1157:..\src/interruptions.c ****     //// RATE LIMITER ////
1158:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3394              		.loc 1 1158 0
 3395 04cc 294B     		ldr	r3, .L244+52
 3396 04ce 1B68     		ldr	r3, [r3]
 3397 04d0 FA6C     		ldr	r2, [r7, #76]
 3398 04d2 D31A     		subs	r3, r2, r3
 3399 04d4 3A6C     		ldr	r2, [r7, #64]
 3400 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3401 04da 9342     		cmp	r3, r2
 3402 04dc 08DD     		ble	.L227
1159:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3403              		.loc 1 1159 0
 3404 04de 3B6C     		ldr	r3, [r7, #64]
 3405 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3406 04e4 1A46     		mov	r2, r3
 3407 04e6 234B     		ldr	r3, .L244+52
 3408 04e8 1B68     		ldr	r3, [r3]
 3409 04ea 1344     		add	r3, r3, r2
 3410 04ec FB64     		str	r3, [r7, #76]
 3411 04ee 10E0     		b	.L228
 3412              	.L227:
1160:..\src/interruptions.c ****     }
1161:..\src/interruptions.c ****     else {
1162:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3413              		.loc 1 1162 0
 3414 04f0 204B     		ldr	r3, .L244+52
 3415 04f2 1B68     		ldr	r3, [r3]
 3416 04f4 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 83


 3417 04f6 D21A     		subs	r2, r2, r3
 3418 04f8 3B6C     		ldr	r3, [r7, #64]
 3419 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3420 04fe 5B42     		negs	r3, r3
 3421 0500 9A42     		cmp	r2, r3
 3422 0502 06DA     		bge	.L228
1163:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3423              		.loc 1 1163 0
 3424 0504 1B4B     		ldr	r3, .L244+52
 3425 0506 1B68     		ldr	r3, [r3]
 3426 0508 3A6C     		ldr	r2, [r7, #64]
 3427 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3428 050e 9B1A     		subs	r3, r3, r2
 3429 0510 FB64     		str	r3, [r7, #76]
 3430              	.L228:
1164:..\src/interruptions.c ****     }
1165:..\src/interruptions.c ****     
1166:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3431              		.loc 1 1166 0
 3432 0512 FB6C     		ldr	r3, [r7, #76]
 3433 0514 642B     		cmp	r3, #100
 3434 0516 01DD     		ble	.L229
1167:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3435              		.loc 1 1167 0
 3436 0518 6423     		movs	r3, #100
 3437 051a FB64     		str	r3, [r7, #76]
 3438              	.L229:
1168:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3439              		.loc 1 1168 0
 3440 051c FB6C     		ldr	r3, [r7, #76]
 3441 051e 13F1640F 		cmn	r3, #100
 3442 0522 02DA     		bge	.L230
1169:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3443              		.loc 1 1169 0
 3444 0524 6FF06303 		mvn	r3, #99
 3445 0528 FB64     		str	r3, [r7, #76]
 3446              	.L230:
1170:..\src/interruptions.c ****     
1171:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3447              		.loc 1 1171 0
 3448 052a 124A     		ldr	r2, .L244+52
 3449 052c FB6C     		ldr	r3, [r7, #76]
 3450 052e 1360     		str	r3, [r2]
1172:..\src/interruptions.c **** 	
1173:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3451              		.loc 1 1173 0
 3452 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3453 0534 FA6C     		ldr	r2, [r7, #76]
 3454 0536 002A     		cmp	r2, #0
 3455 0538 1EDB     		blt	.L231
 3456              		.loc 1 1173 0 is_stmt 0 discriminator 1
 3457 053a 0121     		movs	r1, #1
 3458 053c 1EE0     		b	.L232
 3459              	.L245:
 3460 053e 00BF     		.align	2
 3461              	.L244:
 3462 0540 90000000 		.word	pos_error_sum.10325
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 84


 3463 0544 18FCFFFF 		.word	-1000
 3464 0548 94000000 		.word	prev_pos_err.10327
 3465 054c 98000000 		.word	motor_dir.10330
 3466 0550 00000000 		.word	g_ref
 3467 0554 00000000 		.word	tension_valid
 3468 0558 00000000 		.word	g_meas
 3469 055c 9C000000 		.word	curr_error_sum.10326
 3470 0560 A0860100 		.word	100000
 3471 0564 6079FEFF 		.word	-100000
 3472 0568 A0000000 		.word	prev_curr_err.10328
 3473 056c 1F85EB51 		.word	1374389535
 3474 0570 00000000 		.word	dev_pwm_limit
 3475 0574 A4000000 		.word	prev_pwm.10329
 3476              	.L231:
 3477              		.loc 1 1173 0 discriminator 2
 3478 0578 4FF0FF31 		mov	r1, #-1
 3479              	.L232:
 3480              		.loc 1 1173 0 discriminator 4
 3481 057c 5A4A     		ldr	r2, .L246
 3482 057e D154     		strb	r1, [r2, r3]
1174:..\src/interruptions.c ****     
1175:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3483              		.loc 1 1175 0 is_stmt 1 discriminator 4
 3484 0580 3B6C     		ldr	r3, [r7, #64]
 3485 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3486 0586 012B     		cmp	r3, #1
 3487 0588 40F09680 		bne	.L233
1176:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1177:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3488              		.loc 1 1177 0
 3489 058c 3B6C     		ldr	r3, [r7, #64]
 3490 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3491 0592 012B     		cmp	r3, #1
 3492 0594 00F08D80 		beq	.L234
 3493              		.loc 1 1177 0 is_stmt 0 discriminator 1
 3494 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3495 059c 534A     		ldr	r2, .L246+4
 3496 059e 3421     		movs	r1, #52
 3497 05a0 01FB03F3 		mul	r3, r1, r3
 3498 05a4 1344     		add	r3, r3, r2
 3499 05a6 1A68     		ldr	r2, [r3]
 3500 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3501 05ac 5049     		ldr	r1, .L246+8
 3502 05ae 3420     		movs	r0, #52
 3503 05b0 00FB03F3 		mul	r3, r0, r3
 3504 05b4 0B44     		add	r3, r3, r1
 3505 05b6 1B68     		ldr	r3, [r3]
 3506 05b8 D31A     		subs	r3, r2, r3
 3507 05ba 312B     		cmp	r3, #49
 3508 05bc 79DC     		bgt	.L234
1178:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3509              		.loc 1 1178 0 is_stmt 1 discriminator 2
 3510 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3511 05c2 4A4A     		ldr	r2, .L246+4
 3512 05c4 3421     		movs	r1, #52
 3513 05c6 01FB03F3 		mul	r3, r1, r3
 3514 05ca 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 85


 3515 05cc 1A68     		ldr	r2, [r3]
 3516 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3517 05d2 4749     		ldr	r1, .L246+8
 3518 05d4 3420     		movs	r0, #52
 3519 05d6 00FB03F3 		mul	r3, r0, r3
 3520 05da 0B44     		add	r3, r3, r1
 3521 05dc 1B68     		ldr	r3, [r3]
 3522 05de D31A     		subs	r3, r2, r3
1177:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3523              		.loc 1 1177 0 discriminator 2
 3524 05e0 13F1310F 		cmn	r3, #49
 3525 05e4 65DB     		blt	.L234
1179:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3526              		.loc 1 1179 0
 3527 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3528 05ea 424A     		ldr	r2, .L246+12
 3529 05ec 1B01     		lsls	r3, r3, #4
 3530 05ee 1344     		add	r3, r3, r2
 3531 05f0 1A68     		ldr	r2, [r3]
 3532 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3533 05f6 4049     		ldr	r1, .L246+16
 3534 05f8 1B01     		lsls	r3, r3, #4
 3535 05fa 0B44     		add	r3, r3, r1
 3536 05fc 1B68     		ldr	r3, [r3]
 3537 05fe D31A     		subs	r3, r2, r3
1178:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3538              		.loc 1 1178 0
 3539 0600 632B     		cmp	r3, #99
 3540 0602 56DC     		bgt	.L234
 3541              		.loc 1 1179 0
 3542 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3543 0608 3A4A     		ldr	r2, .L246+12
 3544 060a 1B01     		lsls	r3, r3, #4
 3545 060c 1344     		add	r3, r3, r2
 3546 060e 1A68     		ldr	r2, [r3]
 3547 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3548 0614 3849     		ldr	r1, .L246+16
 3549 0616 1B01     		lsls	r3, r3, #4
 3550 0618 0B44     		add	r3, r3, r1
 3551 061a 1B68     		ldr	r3, [r3]
 3552 061c D31A     		subs	r3, r2, r3
 3553 061e 13F1630F 		cmn	r3, #99
 3554 0622 46DB     		blt	.L234
1180:..\src/interruptions.c ****             position_counter++;
 3555              		.loc 1 1180 0
 3556 0624 354B     		ldr	r3, .L246+20
 3557 0626 1B68     		ldr	r3, [r3]
 3558 0628 0133     		adds	r3, r3, #1
 3559 062a 344A     		ldr	r2, .L246+20
 3560 062c 1360     		str	r3, [r2]
1181:..\src/interruptions.c ****             
1182:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3561              		.loc 1 1182 0
 3562 062e 334B     		ldr	r3, .L246+20
 3563 0630 1B68     		ldr	r3, [r3]
 3564 0632 F92B     		cmp	r3, #249
 3565 0634 40D9     		bls	.L233
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 86


1183:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3566              		.loc 1 1183 0
 3567 0636 3B6C     		ldr	r3, [r7, #64]
 3568 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3569 063c 002B     		cmp	r3, #0
 3570 063e 11D1     		bne	.L236
 3571              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3572 0640 2F4B     		ldr	r3, .L246+24
 3573 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3574 0644 002B     		cmp	r3, #0
 3575 0646 0DD1     		bne	.L236
1184:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3576              		.loc 1 1184 0 is_stmt 1
 3577 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3578 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3579 0650 2749     		ldr	r1, .L246+8
 3580 0652 3420     		movs	r0, #52
 3581 0654 00FB02F2 		mul	r2, r0, r2
 3582 0658 0A44     		add	r2, r2, r1
 3583 065a 1268     		ldr	r2, [r2]
 3584 065c 2949     		ldr	r1, .L246+28
 3585 065e 1B01     		lsls	r3, r3, #4
 3586 0660 0B44     		add	r3, r3, r1
 3587 0662 1A60     		str	r2, [r3]
 3588              	.L236:
1185:..\src/interruptions.c ****                 }
1186:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3589              		.loc 1 1186 0
 3590 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3591 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3592 066c 2049     		ldr	r1, .L246+8
 3593 066e 3420     		movs	r0, #52
 3594 0670 00FB02F2 		mul	r2, r0, r2
 3595 0674 0A44     		add	r2, r2, r1
 3596 0676 1268     		ldr	r2, [r2]
 3597 0678 1F49     		ldr	r1, .L246+16
 3598 067a 1B01     		lsls	r3, r3, #4
 3599 067c 0B44     		add	r3, r3, r1
 3600 067e 1A60     		str	r2, [r3]
1187:..\src/interruptions.c ****                 
1188:..\src/interruptions.c ****                 if (position_counter == 250){
 3601              		.loc 1 1188 0
 3602 0680 1E4B     		ldr	r3, .L246+20
 3603 0682 1B68     		ldr	r3, [r3]
 3604 0684 FA2B     		cmp	r3, #250
 3605 0686 11D1     		bne	.L237
1189:..\src/interruptions.c ****                     // To do only once
1190:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3606              		.loc 1 1190 0
 3607 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3608 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3609 0690 1749     		ldr	r1, .L246+8
 3610 0692 3420     		movs	r0, #52
 3611 0694 00FB02F2 		mul	r2, r0, r2
 3612 0698 0A44     		add	r2, r2, r1
 3613 069a 0C32     		adds	r2, r2, #12
 3614 069c 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 87


 3615 069e 1449     		ldr	r1, .L246+8
 3616 06a0 3420     		movs	r0, #52
 3617 06a2 00FB03F3 		mul	r3, r0, r3
 3618 06a6 0B44     		add	r3, r3, r1
 3619 06a8 1433     		adds	r3, r3, #20
 3620 06aa 1A60     		str	r2, [r3]
 3621              	.L237:
1191:..\src/interruptions.c ****                 }
1192:..\src/interruptions.c ****                 pwm_input = 0;            
 3622              		.loc 1 1192 0
 3623 06ac 0023     		movs	r3, #0
 3624 06ae FB64     		str	r3, [r7, #76]
1182:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3625              		.loc 1 1182 0
 3626 06b0 02E0     		b	.L233
 3627              	.L234:
1193:..\src/interruptions.c ****             }
1194:..\src/interruptions.c ****         }
1195:..\src/interruptions.c ****         else {
1196:..\src/interruptions.c ****             position_counter = 0;
 3628              		.loc 1 1196 0
 3629 06b2 124B     		ldr	r3, .L246+20
 3630 06b4 0022     		movs	r2, #0
 3631 06b6 1A60     		str	r2, [r3]
 3632              	.L233:
1197:..\src/interruptions.c ****         }
1198:..\src/interruptions.c ****     }
1199:..\src/interruptions.c ****     
1200:..\src/interruptions.c ****     if (motor_dir)
 3633              		.loc 1 1200 0
 3634 06b8 134B     		ldr	r3, .L246+32
 3635 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3636 06bc 002B     		cmp	r3, #0
 3637 06be 03D0     		beq	.L238
1201:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3638              		.loc 1 1201 0
 3639 06c0 0120     		movs	r0, #1
 3640 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3641 06c6 02E0     		b	.L239
 3642              	.L238:
1202:..\src/interruptions.c ****     else
1203:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 3643              		.loc 1 1203 0
 3644 06c8 0020     		movs	r0, #0
 3645 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3646              	.L239:
1204:..\src/interruptions.c **** 
1205:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3647              		.loc 1 1205 0
 3648 06ce FB6C     		ldr	r3, [r7, #76]
 3649 06d0 002B     		cmp	r3, #0
 3650 06d2 B8BF     		it	lt
 3651 06d4 5B42     		rsblt	r3, r3, #0
 3652 06d6 DBB2     		uxtb	r3, r3
 3653 06d8 1846     		mov	r0, r3
 3654 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1206:..\src/interruptions.c **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 88


 3655              		.loc 1 1206 0
 3656 06de 00BF     		nop
 3657 06e0 5037     		adds	r7, r7, #80
 3658              		.cfi_def_cfa_offset 8
 3659 06e2 BD46     		mov	sp, r7
 3660              		.cfi_def_cfa_register 13
 3661              		@ sp needed
 3662 06e4 80BD     		pop	{r7, pc}
 3663              	.L247:
 3664 06e6 00BF     		.align	2
 3665              	.L246:
 3666 06e8 00000000 		.word	pwm_sign
 3667 06ec 00000000 		.word	g_measOld
 3668 06f0 00000000 		.word	g_meas
 3669 06f4 00000000 		.word	g_refOld
 3670 06f8 00000000 		.word	g_ref
 3671 06fc A8000000 		.word	position_counter.10331
 3672 0700 00000000 		.word	change_ext_ref_flag
 3673 0704 00000000 		.word	g_refNew
 3674 0708 98000000 		.word	motor_dir.10330
 3675              		.cfi_endproc
 3676              	.LFE71:
 3677              		.size	motor_control_SH, .-motor_control_SH
 3678              		.section	.text.motor_control_generic,"ax",%progbits
 3679              		.align	2
 3680              		.global	motor_control_generic
 3681              		.thumb
 3682              		.thumb_func
 3683              		.type	motor_control_generic, %function
 3684              	motor_control_generic:
 3685              	.LFB72:
1207:..\src/interruptions.c **** 
1208:..\src/interruptions.c **** //==============================================================================
1209:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1210:..\src/interruptions.c **** //==============================================================================
1211:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 3686              		.loc 1 1211 0
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 80
 3689              		@ frame_needed = 1, uses_anonymous_args = 0
 3690 0000 90B5     		push	{r4, r7, lr}
 3691              		.cfi_def_cfa_offset 12
 3692              		.cfi_offset 4, -12
 3693              		.cfi_offset 7, -8
 3694              		.cfi_offset 14, -4
 3695 0002 95B0     		sub	sp, sp, #84
 3696              		.cfi_def_cfa_offset 96
 3697 0004 00AF     		add	r7, sp, #0
 3698              		.cfi_def_cfa_register 7
 3699 0006 0346     		mov	r3, r0
 3700 0008 FB71     		strb	r3, [r7, #7]
1212:..\src/interruptions.c ****     
1213:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3701              		.loc 1 1213 0
 3702 000a 0023     		movs	r3, #0
 3703 000c FB64     		str	r3, [r7, #76]
1214:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 89


1215:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1216:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1217:..\src/interruptions.c **** 
1218:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 3704              		.loc 1 1218 0
 3705 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3706 0010 1346     		mov	r3, r2
 3707 0012 DB00     		lsls	r3, r3, #3
 3708 0014 9B1A     		subs	r3, r3, r2
 3709 0016 1B01     		lsls	r3, r3, #4
 3710 0018 B033     		adds	r3, r3, #176
 3711 001a 9D4A     		ldr	r2, .L339
 3712 001c 1344     		add	r3, r3, r2
 3713 001e 7B64     		str	r3, [r7, #68]
1219:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 3714              		.loc 1 1219 0
 3715 0020 7B6C     		ldr	r3, [r7, #68]
 3716 0022 93F86030 		ldrb	r3, [r3, #96]
 3717 0026 87F84330 		strb	r3, [r7, #67]
1220:..\src/interruptions.c ****     
1221:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 3718              		.loc 1 1221 0
 3719 002a 7B6C     		ldr	r3, [r7, #68]
 3720 002c 1B68     		ldr	r3, [r3]
 3721 002e FB63     		str	r3, [r7, #60]
1222:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 3722              		.loc 1 1222 0
 3723 0030 7B6C     		ldr	r3, [r7, #68]
 3724 0032 5B68     		ldr	r3, [r3, #4]
 3725 0034 BB63     		str	r3, [r7, #56]
1223:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 3726              		.loc 1 1223 0
 3727 0036 7B6C     		ldr	r3, [r7, #68]
 3728 0038 9B68     		ldr	r3, [r3, #8]
 3729 003a 7B63     		str	r3, [r7, #52]
1224:..\src/interruptions.c **** 
1225:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 3730              		.loc 1 1225 0
 3731 003c 7B6C     		ldr	r3, [r7, #68]
 3732 003e DB68     		ldr	r3, [r3, #12]
 3733 0040 3B63     		str	r3, [r7, #48]
1226:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 3734              		.loc 1 1226 0
 3735 0042 7B6C     		ldr	r3, [r7, #68]
 3736 0044 1B69     		ldr	r3, [r3, #16]
 3737 0046 FB62     		str	r3, [r7, #44]
1227:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 3738              		.loc 1 1227 0
 3739 0048 7B6C     		ldr	r3, [r7, #68]
 3740 004a 5B69     		ldr	r3, [r3, #20]
 3741 004c BB62     		str	r3, [r7, #40]
1228:..\src/interruptions.c **** 
1229:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 3742              		.loc 1 1229 0
 3743 004e 7B6C     		ldr	r3, [r7, #68]
 3744 0050 9B69     		ldr	r3, [r3, #24]
 3745 0052 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 90


1230:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 3746              		.loc 1 1230 0
 3747 0054 7B6C     		ldr	r3, [r7, #68]
 3748 0056 DB69     		ldr	r3, [r3, #28]
 3749 0058 3B62     		str	r3, [r7, #32]
1231:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 3750              		.loc 1 1231 0
 3751 005a 7B6C     		ldr	r3, [r7, #68]
 3752 005c 1B6A     		ldr	r3, [r3, #32]
 3753 005e FB61     		str	r3, [r7, #28]
1232:..\src/interruptions.c ****     
1233:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 3754              		.loc 1 1233 0
 3755 0060 7B6C     		ldr	r3, [r7, #68]
 3756 0062 5B6A     		ldr	r3, [r3, #36]
 3757 0064 BB61     		str	r3, [r7, #24]
1234:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 3758              		.loc 1 1234 0
 3759 0066 7B6C     		ldr	r3, [r7, #68]
 3760 0068 9B6A     		ldr	r3, [r3, #40]
 3761 006a 7B61     		str	r3, [r7, #20]
1235:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 3762              		.loc 1 1235 0
 3763 006c 7B6C     		ldr	r3, [r7, #68]
 3764 006e DB6A     		ldr	r3, [r3, #44]
 3765 0070 3B61     		str	r3, [r7, #16]
1236:..\src/interruptions.c **** 
1237:..\src/interruptions.c ****     // Static Variables
1238:..\src/interruptions.c **** 
1239:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1240:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1241:..\src/interruptions.c ****     
1242:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1243:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1244:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1245:..\src/interruptions.c **** 
1246:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1247:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1248:..\src/interruptions.c **** 
1249:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1250:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 3766              		.loc 1 1250 0
 3767 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3768 0074 1B01     		lsls	r3, r3, #4
 3769 0076 874A     		ldr	r2, .L339+4
 3770 0078 9918     		adds	r1, r3, r2
 3771 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3772 007c 1B01     		lsls	r3, r3, #4
 3773 007e 864A     		ldr	r2, .L339+8
 3774 0080 1A44     		add	r2, r2, r3
 3775 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3776 0084 1846     		mov	r0, r3
 3777 0086 FFF7FEFF 		bl	compute_reference
1251:..\src/interruptions.c ****     
1252:..\src/interruptions.c ****    
1253:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3778              		.loc 1 1253 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 91


 3779 008a 7B6C     		ldr	r3, [r7, #68]
 3780 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3781 0090 032B     		cmp	r3, #3
 3782 0092 00F28082 		bhi	.L249
 3783 0096 01A2     		adr	r2, .L251
 3784 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3785              		.p2align 2
 3786              	.L251:
 3787 009c ED020000 		.word	.L250+1
 3788 00a0 F7040000 		.word	.L252+1
 3789 00a4 C5030000 		.word	.L253+1
 3790 00a8 AD000000 		.word	.L254+1
 3791              		.p2align 1
 3792              	.L254:
1254:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1255:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1256:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3793              		.loc 1 1256 0
 3794 00ac 794B     		ldr	r3, .L339+4
 3795 00ae 1A68     		ldr	r2, [r3]
 3796 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3797 00b4 7949     		ldr	r1, .L339+12
 3798 00b6 3420     		movs	r0, #52
 3799 00b8 00FB03F3 		mul	r3, r0, r3
 3800 00bc 0B44     		add	r3, r3, r1
 3801 00be 1B68     		ldr	r3, [r3]
 3802 00c0 D31A     		subs	r3, r2, r3
 3803 00c2 FB60     		str	r3, [r7, #12]
1257:..\src/interruptions.c **** 
1258:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3804              		.loc 1 1258 0
 3805 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3806 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3807 00c8 7549     		ldr	r1, .L339+16
 3808 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3809 00ce FA68     		ldr	r2, [r7, #12]
 3810 00d0 0A44     		add	r2, r2, r1
 3811 00d2 7349     		ldr	r1, .L339+16
 3812 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1259:..\src/interruptions.c **** 
1260:..\src/interruptions.c ****             // error_sum saturation
1261:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3813              		.loc 1 1261 0
 3814 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3815 00da 714A     		ldr	r2, .L339+16
 3816 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3817 00e0 704A     		ldr	r2, .L339+20
 3818 00e2 9342     		cmp	r3, r2
 3819 00e4 05DD     		ble	.L255
1262:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3820              		.loc 1 1262 0
 3821 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3822 00e8 6D4A     		ldr	r2, .L339+16
 3823 00ea 6E49     		ldr	r1, .L339+20
 3824 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 3825 00f0 0BE0     		b	.L256
 3826              	.L255:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 92


1263:..\src/interruptions.c ****             else {
1264:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3827              		.loc 1 1264 0
 3828 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3829 00f4 6A4A     		ldr	r2, .L339+16
 3830 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3831 00fa 6B4A     		ldr	r2, .L339+24
 3832 00fc 9342     		cmp	r3, r2
 3833 00fe 04DA     		bge	.L256
1265:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3834              		.loc 1 1265 0
 3835 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3836 0102 674A     		ldr	r2, .L339+16
 3837 0104 6849     		ldr	r1, .L339+24
 3838 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 3839              	.L256:
1266:..\src/interruptions.c ****             }
1267:..\src/interruptions.c ****             
1268:..\src/interruptions.c ****             // ------ position PID control ------
1269:..\src/interruptions.c **** 
1270:..\src/interruptions.c ****             i_ref = 0;
 3840              		.loc 1 1270 0
 3841 010a 0023     		movs	r3, #0
 3842 010c BB64     		str	r3, [r7, #72]
1271:..\src/interruptions.c ****             
1272:..\src/interruptions.c ****             // Proportional
1273:..\src/interruptions.c ****             if (k_p_dl != 0)
 3843              		.loc 1 1273 0
 3844 010e 7B6A     		ldr	r3, [r7, #36]
 3845 0110 002B     		cmp	r3, #0
 3846 0112 07D0     		beq	.L257
1274:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3847              		.loc 1 1274 0
 3848 0114 7B6A     		ldr	r3, [r7, #36]
 3849 0116 FA68     		ldr	r2, [r7, #12]
 3850 0118 02FB03F3 		mul	r3, r2, r3
 3851 011c 1B14     		asrs	r3, r3, #16
 3852 011e BA6C     		ldr	r2, [r7, #72]
 3853 0120 1344     		add	r3, r3, r2
 3854 0122 BB64     		str	r3, [r7, #72]
 3855              	.L257:
1275:..\src/interruptions.c **** 
1276:..\src/interruptions.c ****             // Integral
1277:..\src/interruptions.c ****             if (k_i_dl != 0)
 3856              		.loc 1 1277 0
 3857 0124 3B6A     		ldr	r3, [r7, #32]
 3858 0126 002B     		cmp	r3, #0
 3859 0128 0AD0     		beq	.L258
1278:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3860              		.loc 1 1278 0
 3861 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3862 012c 5C4A     		ldr	r2, .L339+16
 3863 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3864 0132 3A6A     		ldr	r2, [r7, #32]
 3865 0134 02FB03F3 		mul	r3, r2, r3
 3866 0138 1B14     		asrs	r3, r3, #16
 3867 013a BA6C     		ldr	r2, [r7, #72]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 93


 3868 013c 1344     		add	r3, r3, r2
 3869 013e BB64     		str	r3, [r7, #72]
 3870              	.L258:
1279:..\src/interruptions.c **** 
1280:..\src/interruptions.c ****             // Derivative
1281:..\src/interruptions.c ****             if (k_d_dl != 0)
 3871              		.loc 1 1281 0
 3872 0140 FB69     		ldr	r3, [r7, #28]
 3873 0142 002B     		cmp	r3, #0
 3874 0144 0CD0     		beq	.L259
1282:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3875              		.loc 1 1282 0
 3876 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3877 0148 584A     		ldr	r2, .L339+28
 3878 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3879 014e FA68     		ldr	r2, [r7, #12]
 3880 0150 D31A     		subs	r3, r2, r3
 3881 0152 FA69     		ldr	r2, [r7, #28]
 3882 0154 02FB03F3 		mul	r3, r2, r3
 3883 0158 1B14     		asrs	r3, r3, #16
 3884 015a BA6C     		ldr	r2, [r7, #72]
 3885 015c 1344     		add	r3, r3, r2
 3886 015e BB64     		str	r3, [r7, #72]
 3887              	.L259:
1283:..\src/interruptions.c ****                         
1284:..\src/interruptions.c ****             // Update previous position
1285:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3888              		.loc 1 1285 0
 3889 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3890 0162 5249     		ldr	r1, .L339+28
 3891 0164 FA68     		ldr	r2, [r7, #12]
 3892 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1286:..\src/interruptions.c **** 
1287:..\src/interruptions.c ****             // motor direction depends on i_ref
1288:..\src/interruptions.c ****             if (i_ref >= 0)
 3893              		.loc 1 1288 0
 3894 016a BB6C     		ldr	r3, [r7, #72]
 3895 016c 002B     		cmp	r3, #0
 3896 016e 04DB     		blt	.L260
1289:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3897              		.loc 1 1289 0
 3898 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3899 0172 4F4A     		ldr	r2, .L339+32
 3900 0174 0121     		movs	r1, #1
 3901 0176 D154     		strb	r1, [r2, r3]
 3902 0178 03E0     		b	.L261
 3903              	.L260:
1290:..\src/interruptions.c ****             else
1291:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3904              		.loc 1 1291 0
 3905 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3906 017c 4C4A     		ldr	r2, .L339+32
 3907 017e 0021     		movs	r1, #0
 3908 0180 D154     		strb	r1, [r2, r3]
 3909              	.L261:
1292:..\src/interruptions.c **** 
1293:..\src/interruptions.c ****             // saturate max current
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 94


1294:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3910              		.loc 1 1294 0
 3911 0182 7B6C     		ldr	r3, [r7, #68]
 3912 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3913 0188 1A46     		mov	r2, r3
 3914 018a BB6C     		ldr	r3, [r7, #72]
 3915 018c 9A42     		cmp	r2, r3
 3916 018e 04DA     		bge	.L262
1295:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3917              		.loc 1 1295 0
 3918 0190 7B6C     		ldr	r3, [r7, #68]
 3919 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3920 0196 BB64     		str	r3, [r7, #72]
 3921 0198 0BE0     		b	.L263
 3922              	.L262:
1296:..\src/interruptions.c ****             else {
1297:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3923              		.loc 1 1297 0
 3924 019a 7B6C     		ldr	r3, [r7, #68]
 3925 019c B3F95C30 		ldrsh	r3, [r3, #92]
 3926 01a0 5A42     		negs	r2, r3
 3927 01a2 BB6C     		ldr	r3, [r7, #72]
 3928 01a4 9A42     		cmp	r2, r3
 3929 01a6 04DD     		ble	.L263
1298:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3930              		.loc 1 1298 0
 3931 01a8 7B6C     		ldr	r3, [r7, #68]
 3932 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 3933 01ae 5B42     		negs	r3, r3
 3934 01b0 BB64     		str	r3, [r7, #72]
 3935              	.L263:
1299:..\src/interruptions.c ****         	}
1300:..\src/interruptions.c **** 
1301:..\src/interruptions.c ****             // current error and curr error sum
1302:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3936              		.loc 1 1302 0
 3937 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3938 01b6 394A     		ldr	r2, .L339+12
 3939 01b8 3421     		movs	r1, #52
 3940 01ba 01FB03F3 		mul	r3, r1, r3
 3941 01be 1344     		add	r3, r3, r2
 3942 01c0 0C33     		adds	r3, r3, #12
 3943 01c2 1B68     		ldr	r3, [r3]
 3944 01c4 BA6C     		ldr	r2, [r7, #72]
 3945 01c6 D31A     		subs	r3, r2, r3
 3946 01c8 BB60     		str	r3, [r7, #8]
1303:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3947              		.loc 1 1303 0
 3948 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3949 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3950 01ce 3949     		ldr	r1, .L339+36
 3951 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3952 01d4 BA68     		ldr	r2, [r7, #8]
 3953 01d6 0A44     		add	r2, r2, r1
 3954 01d8 3649     		ldr	r1, .L339+36
 3955 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1304:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 95


1305:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3956              		.loc 1 1305 0
 3957 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3958 01e0 344A     		ldr	r2, .L339+36
 3959 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3960 01e6 344A     		ldr	r2, .L339+40
 3961 01e8 9342     		cmp	r3, r2
 3962 01ea 05DD     		ble	.L264
1306:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3963              		.loc 1 1306 0
 3964 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3965 01ee 314A     		ldr	r2, .L339+36
 3966 01f0 3149     		ldr	r1, .L339+40
 3967 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 3968 01f6 0BE0     		b	.L265
 3969              	.L264:
1307:..\src/interruptions.c ****             else {
1308:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3970              		.loc 1 1308 0
 3971 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3972 01fa 2E4A     		ldr	r2, .L339+36
 3973 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3974 0200 2E4A     		ldr	r2, .L339+44
 3975 0202 9342     		cmp	r3, r2
 3976 0204 04DA     		bge	.L265
1309:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3977              		.loc 1 1309 0
 3978 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3979 0208 2A4A     		ldr	r2, .L339+36
 3980 020a 2C49     		ldr	r1, .L339+44
 3981 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 3982              	.L265:
1310:..\src/interruptions.c ****             }
1311:..\src/interruptions.c **** 
1312:..\src/interruptions.c ****             // ----- current PID control -----
1313:..\src/interruptions.c **** 
1314:..\src/interruptions.c ****             pwm_input = 0;
 3983              		.loc 1 1314 0
 3984 0210 0023     		movs	r3, #0
 3985 0212 FB64     		str	r3, [r7, #76]
1315:..\src/interruptions.c **** 
1316:..\src/interruptions.c ****             // Proportional
1317:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3986              		.loc 1 1317 0
 3987 0214 BB69     		ldr	r3, [r7, #24]
 3988 0216 002B     		cmp	r3, #0
 3989 0218 07D0     		beq	.L266
1318:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3990              		.loc 1 1318 0
 3991 021a BB69     		ldr	r3, [r7, #24]
 3992 021c BA68     		ldr	r2, [r7, #8]
 3993 021e 02FB03F3 		mul	r3, r2, r3
 3994 0222 1B14     		asrs	r3, r3, #16
 3995 0224 FA6C     		ldr	r2, [r7, #76]
 3996 0226 1344     		add	r3, r3, r2
 3997 0228 FB64     		str	r3, [r7, #76]
 3998              	.L266:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 96


1319:..\src/interruptions.c **** 
1320:..\src/interruptions.c ****             // Integral
1321:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3999              		.loc 1 1321 0
 4000 022a 7B69     		ldr	r3, [r7, #20]
 4001 022c 002B     		cmp	r3, #0
 4002 022e 0AD0     		beq	.L267
1322:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4003              		.loc 1 1322 0
 4004 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4005 0232 204A     		ldr	r2, .L339+36
 4006 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4007 0238 7A69     		ldr	r2, [r7, #20]
 4008 023a 02FB03F3 		mul	r3, r2, r3
 4009 023e 1B14     		asrs	r3, r3, #16
 4010 0240 FA6C     		ldr	r2, [r7, #76]
 4011 0242 1344     		add	r3, r3, r2
 4012 0244 FB64     		str	r3, [r7, #76]
 4013              	.L267:
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****             // Derivative
1325:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4014              		.loc 1 1325 0
 4015 0246 3B69     		ldr	r3, [r7, #16]
 4016 0248 002B     		cmp	r3, #0
 4017 024a 0CD0     		beq	.L268
1326:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4018              		.loc 1 1326 0
 4019 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4020 024e 1C4A     		ldr	r2, .L339+48
 4021 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4022 0254 BA68     		ldr	r2, [r7, #8]
 4023 0256 D31A     		subs	r3, r2, r3
 4024 0258 3A69     		ldr	r2, [r7, #16]
 4025 025a 02FB03F3 		mul	r3, r2, r3
 4026 025e 1B14     		asrs	r3, r3, #16
 4027 0260 FA6C     		ldr	r2, [r7, #76]
 4028 0262 1344     		add	r3, r3, r2
 4029 0264 FB64     		str	r3, [r7, #76]
 4030              	.L268:
1327:..\src/interruptions.c ****              
1328:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1329:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4031              		.loc 1 1329 0
 4032 0266 7B6C     		ldr	r3, [r7, #68]
 4033 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4034 026c 022B     		cmp	r3, #2
 4035 026e 2BD1     		bne	.L269
1330:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4036              		.loc 1 1330 0
 4037 0270 FB6C     		ldr	r3, [r7, #76]
 4038 0272 40F6A932 		movw	r2, #2985
 4039 0276 9342     		cmp	r3, r2
 4040 0278 02DD     		ble	.L270
1331:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4041              		.loc 1 1331 0
 4042 027a 40F6A933 		movw	r3, #2985
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 97


 4043 027e FB64     		str	r3, [r7, #76]
 4044              	.L270:
1332:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4045              		.loc 1 1332 0
 4046 0280 FB6C     		ldr	r3, [r7, #76]
 4047 0282 104A     		ldr	r2, .L339+52
 4048 0284 9342     		cmp	r3, r2
 4049 0286 2BDA     		bge	.L272
1333:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4050              		.loc 1 1333 0
 4051 0288 0E4B     		ldr	r3, .L339+52
 4052 028a FB64     		str	r3, [r7, #76]
 4053 028c 28E0     		b	.L272
 4054              	.L340:
 4055 028e 00BF     		.align	2
 4056              	.L339:
 4057 0290 00000000 		.word	c_mem
 4058 0294 00000000 		.word	g_ref
 4059 0298 00000000 		.word	g_refOld
 4060 029c 00000000 		.word	g_meas
 4061 02a0 AC000000 		.word	pos_error_sum.10358
 4062 02a4 80F0FA02 		.word	50000000
 4063 02a8 800F05FD 		.word	-50000000
 4064 02ac B4000000 		.word	prev_pos_err.10360
 4065 02b0 BC000000 		.word	motor_dir.10363
 4066 02b4 C0000000 		.word	curr_error_sum.10359
 4067 02b8 A0860100 		.word	100000
 4068 02bc 6079FEFF 		.word	-100000
 4069 02c0 C8000000 		.word	prev_curr_err.10361
 4070 02c4 57F4FFFF 		.word	-2985
 4071              	.L269:
1334:..\src/interruptions.c ****             }
1335:..\src/interruptions.c ****             else {
1336:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4072              		.loc 1 1336 0
 4073 02c8 FB6C     		ldr	r3, [r7, #76]
 4074 02ca 642B     		cmp	r3, #100
 4075 02cc 01DD     		ble	.L273
1337:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4076              		.loc 1 1337 0
 4077 02ce 6423     		movs	r3, #100
 4078 02d0 FB64     		str	r3, [r7, #76]
 4079              	.L273:
1338:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4080              		.loc 1 1338 0
 4081 02d2 FB6C     		ldr	r3, [r7, #76]
 4082 02d4 13F1640F 		cmn	r3, #100
 4083 02d8 02DA     		bge	.L272
1339:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4084              		.loc 1 1339 0
 4085 02da 6FF06303 		mvn	r3, #99
 4086 02de FB64     		str	r3, [r7, #76]
 4087              	.L272:
1340:..\src/interruptions.c ****             }
1341:..\src/interruptions.c **** 
1342:..\src/interruptions.c ****             // Update previous current
1343:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 98


 4088              		.loc 1 1343 0
 4089 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4090 02e2 A049     		ldr	r1, .L341
 4091 02e4 BA68     		ldr	r2, [r7, #8]
 4092 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1344:..\src/interruptions.c **** 
1345:..\src/interruptions.c ****         break;
 4093              		.loc 1 1345 0
 4094 02ea 54E1     		b	.L249
 4095              	.L250:
1346:..\src/interruptions.c **** 
1347:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1348:..\src/interruptions.c ****         case CONTROL_ANGLE:
1349:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4096              		.loc 1 1349 0
 4097 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4098 02ee 9E4A     		ldr	r2, .L341+4
 4099 02f0 1B01     		lsls	r3, r3, #4
 4100 02f2 1344     		add	r3, r3, r2
 4101 02f4 1A68     		ldr	r2, [r3]
 4102 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4103 02fa 9C49     		ldr	r1, .L341+8
 4104 02fc 3420     		movs	r0, #52
 4105 02fe 00FB03F3 		mul	r3, r0, r3
 4106 0302 0B44     		add	r3, r3, r1
 4107 0304 1B68     		ldr	r3, [r3]
 4108 0306 D31A     		subs	r3, r2, r3
 4109 0308 FB60     		str	r3, [r7, #12]
1350:..\src/interruptions.c **** 
1351:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4110              		.loc 1 1351 0
 4111 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4112 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4113 030e 9849     		ldr	r1, .L341+12
 4114 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4115 0314 FA68     		ldr	r2, [r7, #12]
 4116 0316 0A44     		add	r2, r2, r1
 4117 0318 9549     		ldr	r1, .L341+12
 4118 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****             // anti-windup (for integral control)
1354:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4119              		.loc 1 1354 0
 4120 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4121 0320 934A     		ldr	r2, .L341+12
 4122 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4123 0326 B3F57A7F 		cmp	r3, #1000
 4124 032a 06DD     		ble	.L274
1355:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4125              		.loc 1 1355 0
 4126 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4127 032e 904A     		ldr	r2, .L341+12
 4128 0330 4FF47A71 		mov	r1, #1000
 4129 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4130 0338 0BE0     		b	.L275
 4131              	.L274:
1356:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 99


1357:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4132              		.loc 1 1357 0
 4133 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4134 033c 8C4A     		ldr	r2, .L341+12
 4135 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4136 0342 13F57A7F 		cmn	r3, #1000
 4137 0346 04DA     		bge	.L275
1358:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4138              		.loc 1 1358 0
 4139 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4140 034a 894A     		ldr	r2, .L341+12
 4141 034c 8949     		ldr	r1, .L341+16
 4142 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4143              	.L275:
1359:..\src/interruptions.c ****             }
1360:..\src/interruptions.c **** 
1361:..\src/interruptions.c ****             // Proportional
1362:..\src/interruptions.c ****             if (k_p != 0) 
 4144              		.loc 1 1362 0
 4145 0352 FB6B     		ldr	r3, [r7, #60]
 4146 0354 002B     		cmp	r3, #0
 4147 0356 05D0     		beq	.L276
1363:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4148              		.loc 1 1363 0
 4149 0358 FB6B     		ldr	r3, [r7, #60]
 4150 035a FA68     		ldr	r2, [r7, #12]
 4151 035c 02FB03F3 		mul	r3, r2, r3
 4152 0360 1B14     		asrs	r3, r3, #16
 4153 0362 FB64     		str	r3, [r7, #76]
 4154              	.L276:
1364:..\src/interruptions.c ****             
1365:..\src/interruptions.c **** 
1366:..\src/interruptions.c ****             // Integral
1367:..\src/interruptions.c ****             if (k_i != 0) 
 4155              		.loc 1 1367 0
 4156 0364 BB6B     		ldr	r3, [r7, #56]
 4157 0366 002B     		cmp	r3, #0
 4158 0368 0AD0     		beq	.L277
1368:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4159              		.loc 1 1368 0
 4160 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4161 036c 804A     		ldr	r2, .L341+12
 4162 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4163 0372 BA6B     		ldr	r2, [r7, #56]
 4164 0374 02FB03F3 		mul	r3, r2, r3
 4165 0378 1B14     		asrs	r3, r3, #16
 4166 037a FA6C     		ldr	r2, [r7, #76]
 4167 037c 1344     		add	r3, r3, r2
 4168 037e FB64     		str	r3, [r7, #76]
 4169              	.L277:
1369:..\src/interruptions.c ****             
1370:..\src/interruptions.c **** 
1371:..\src/interruptions.c ****             // Derivative
1372:..\src/interruptions.c ****             if (k_d != 0) 
 4170              		.loc 1 1372 0
 4171 0380 7B6B     		ldr	r3, [r7, #52]
 4172 0382 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 100


 4173 0384 0CD0     		beq	.L278
1373:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4174              		.loc 1 1373 0
 4175 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4176 0388 7B4A     		ldr	r2, .L341+20
 4177 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4178 038e FA68     		ldr	r2, [r7, #12]
 4179 0390 D31A     		subs	r3, r2, r3
 4180 0392 7A6B     		ldr	r2, [r7, #52]
 4181 0394 02FB03F3 		mul	r3, r2, r3
 4182 0398 1B14     		asrs	r3, r3, #16
 4183 039a FA6C     		ldr	r2, [r7, #76]
 4184 039c 1344     		add	r3, r3, r2
 4185 039e FB64     		str	r3, [r7, #76]
 4186              	.L278:
1374:..\src/interruptions.c ****             
1375:..\src/interruptions.c **** 
1376:..\src/interruptions.c ****             // Update measure
1377:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4187              		.loc 1 1377 0
 4188 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4189 03a2 7549     		ldr	r1, .L341+20
 4190 03a4 FA68     		ldr	r2, [r7, #12]
 4191 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****             if (pwm_input > 0)
 4192              		.loc 1 1379 0
 4193 03aa FB6C     		ldr	r3, [r7, #76]
 4194 03ac 002B     		cmp	r3, #0
 4195 03ae 04DD     		ble	.L279
1380:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4196              		.loc 1 1380 0
 4197 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4198 03b2 724A     		ldr	r2, .L341+24
 4199 03b4 0121     		movs	r1, #1
 4200 03b6 D154     		strb	r1, [r2, r3]
1381:..\src/interruptions.c ****             else
1382:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1383:..\src/interruptions.c **** 
1384:..\src/interruptions.c ****         break;
 4201              		.loc 1 1384 0
 4202 03b8 EDE0     		b	.L249
 4203              	.L279:
1382:..\src/interruptions.c **** 
 4204              		.loc 1 1382 0
 4205 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4206 03bc 6F4A     		ldr	r2, .L341+24
 4207 03be 0021     		movs	r1, #0
 4208 03c0 D154     		strb	r1, [r2, r3]
 4209              		.loc 1 1384 0
 4210 03c2 E8E0     		b	.L249
 4211              	.L253:
1385:..\src/interruptions.c **** 
1386:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1387:..\src/interruptions.c ****         case CONTROL_CURRENT:
1388:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4212              		.loc 1 1388 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 101


 4213 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4214 03c6 684A     		ldr	r2, .L341+4
 4215 03c8 1B01     		lsls	r3, r3, #4
 4216 03ca 1344     		add	r3, r3, r2
 4217 03cc 0C33     		adds	r3, r3, #12
 4218 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4219 03d0 002B     		cmp	r3, #0
 4220 03d2 00F0C480 		beq	.L336
 4221              		.loc 1 1388 0 is_stmt 0 discriminator 1
 4222 03d6 6A4B     		ldr	r3, .L341+28
 4223 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4224 03da 002B     		cmp	r3, #0
 4225 03dc 00F0BF80 		beq	.L336
1389:..\src/interruptions.c ****                 
1390:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4226              		.loc 1 1390 0 is_stmt 1
 4227 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4228 03e2 614A     		ldr	r2, .L341+4
 4229 03e4 1B01     		lsls	r3, r3, #4
 4230 03e6 1344     		add	r3, r3, r2
 4231 03e8 0433     		adds	r3, r3, #4
 4232 03ea 1B68     		ldr	r3, [r3]
 4233 03ec BB64     		str	r3, [r7, #72]
1391:..\src/interruptions.c **** 
1392:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4234              		.loc 1 1392 0
 4235 03ee 7B6C     		ldr	r3, [r7, #68]
 4236 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4237 03f4 1A46     		mov	r2, r3
 4238 03f6 BB6C     		ldr	r3, [r7, #72]
 4239 03f8 9A42     		cmp	r2, r3
 4240 03fa 04DA     		bge	.L282
1393:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4241              		.loc 1 1393 0
 4242 03fc 7B6C     		ldr	r3, [r7, #68]
 4243 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4244 0402 BB64     		str	r3, [r7, #72]
 4245 0404 0BE0     		b	.L283
 4246              	.L282:
1394:..\src/interruptions.c ****                 else {
1395:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4247              		.loc 1 1395 0
 4248 0406 7B6C     		ldr	r3, [r7, #68]
 4249 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4250 040c 5A42     		negs	r2, r3
 4251 040e BB6C     		ldr	r3, [r7, #72]
 4252 0410 9A42     		cmp	r2, r3
 4253 0412 04DD     		ble	.L283
1396:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4254              		.loc 1 1396 0
 4255 0414 7B6C     		ldr	r3, [r7, #68]
 4256 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4257 041a 5B42     		negs	r3, r3
 4258 041c BB64     		str	r3, [r7, #72]
 4259              	.L283:
1397:..\src/interruptions.c ****                 }
1398:..\src/interruptions.c ****                 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 102


1399:..\src/interruptions.c ****                 // current error
1400:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4260              		.loc 1 1400 0
 4261 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4262 0422 524A     		ldr	r2, .L341+8
 4263 0424 3421     		movs	r1, #52
 4264 0426 01FB03F3 		mul	r3, r1, r3
 4265 042a 1344     		add	r3, r3, r2
 4266 042c 0C33     		adds	r3, r3, #12
 4267 042e 1B68     		ldr	r3, [r3]
 4268 0430 BA6C     		ldr	r2, [r7, #72]
 4269 0432 D31A     		subs	r3, r2, r3
 4270 0434 BB60     		str	r3, [r7, #8]
1401:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4271              		.loc 1 1401 0
 4272 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4273 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4274 043a 5249     		ldr	r1, .L341+32
 4275 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4276 0440 BA68     		ldr	r2, [r7, #8]
 4277 0442 0A44     		add	r2, r2, r1
 4278 0444 4F49     		ldr	r1, .L341+32
 4279 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1402:..\src/interruptions.c ****                 
1403:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4280              		.loc 1 1403 0
 4281 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4282 044c 4D4A     		ldr	r2, .L341+32
 4283 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4284 0452 4D4A     		ldr	r2, .L341+36
 4285 0454 9342     		cmp	r3, r2
 4286 0456 05DD     		ble	.L284
1404:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4287              		.loc 1 1404 0
 4288 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4289 045a 4A4A     		ldr	r2, .L341+32
 4290 045c 4A49     		ldr	r1, .L341+36
 4291 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4292 0462 0BE0     		b	.L285
 4293              	.L284:
1405:..\src/interruptions.c ****                 else {
1406:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4294              		.loc 1 1406 0
 4295 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4296 0466 474A     		ldr	r2, .L341+32
 4297 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4298 046c 474A     		ldr	r2, .L341+40
 4299 046e 9342     		cmp	r3, r2
 4300 0470 04DA     		bge	.L285
1407:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4301              		.loc 1 1407 0
 4302 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4303 0474 434A     		ldr	r2, .L341+32
 4304 0476 4549     		ldr	r1, .L341+40
 4305 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4306              	.L285:
1408:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 103


1409:..\src/interruptions.c **** 
1410:..\src/interruptions.c ****                 pwm_input = 0;
 4307              		.loc 1 1410 0
 4308 047c 0023     		movs	r3, #0
 4309 047e FB64     		str	r3, [r7, #76]
1411:..\src/interruptions.c **** 
1412:..\src/interruptions.c ****                 // Proportional
1413:..\src/interruptions.c ****                 if (k_p_c != 0)
 4310              		.loc 1 1413 0
 4311 0480 3B6B     		ldr	r3, [r7, #48]
 4312 0482 002B     		cmp	r3, #0
 4313 0484 07D0     		beq	.L286
1414:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4314              		.loc 1 1414 0
 4315 0486 3B6B     		ldr	r3, [r7, #48]
 4316 0488 BA68     		ldr	r2, [r7, #8]
 4317 048a 02FB03F3 		mul	r3, r2, r3
 4318 048e 1B14     		asrs	r3, r3, #16
 4319 0490 FA6C     		ldr	r2, [r7, #76]
 4320 0492 1344     		add	r3, r3, r2
 4321 0494 FB64     		str	r3, [r7, #76]
 4322              	.L286:
1415:..\src/interruptions.c **** 
1416:..\src/interruptions.c ****                 // Integral
1417:..\src/interruptions.c ****                 if (k_i_c != 0)
 4323              		.loc 1 1417 0
 4324 0496 FB6A     		ldr	r3, [r7, #44]
 4325 0498 002B     		cmp	r3, #0
 4326 049a 0AD0     		beq	.L287
1418:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4327              		.loc 1 1418 0
 4328 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4329 049e 394A     		ldr	r2, .L341+32
 4330 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4331 04a4 FA6A     		ldr	r2, [r7, #44]
 4332 04a6 02FB03F3 		mul	r3, r2, r3
 4333 04aa 1B14     		asrs	r3, r3, #16
 4334 04ac FA6C     		ldr	r2, [r7, #76]
 4335 04ae 1344     		add	r3, r3, r2
 4336 04b0 FB64     		str	r3, [r7, #76]
 4337              	.L287:
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****                 // Derivative
1421:..\src/interruptions.c ****                 if (k_d_c != 0)
 4338              		.loc 1 1421 0
 4339 04b2 BB6A     		ldr	r3, [r7, #40]
 4340 04b4 002B     		cmp	r3, #0
 4341 04b6 0CD0     		beq	.L288
1422:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4342              		.loc 1 1422 0
 4343 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4344 04ba 2A4A     		ldr	r2, .L341
 4345 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4346 04c0 BA68     		ldr	r2, [r7, #8]
 4347 04c2 D31A     		subs	r3, r2, r3
 4348 04c4 BA6A     		ldr	r2, [r7, #40]
 4349 04c6 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 104


 4350 04ca 1B14     		asrs	r3, r3, #16
 4351 04cc FA6C     		ldr	r2, [r7, #76]
 4352 04ce 1344     		add	r3, r3, r2
 4353 04d0 FB64     		str	r3, [r7, #76]
 4354              	.L288:
1423:..\src/interruptions.c ****                 
1424:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4355              		.loc 1 1424 0
 4356 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4357 04d4 2349     		ldr	r1, .L341
 4358 04d6 BA68     		ldr	r2, [r7, #8]
 4359 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1425:..\src/interruptions.c ****                 
1426:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4360              		.loc 1 1426 0
 4361 04dc FB6C     		ldr	r3, [r7, #76]
 4362 04de 002B     		cmp	r3, #0
 4363 04e0 04DB     		blt	.L289
1427:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4364              		.loc 1 1427 0
 4365 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4366 04e4 254A     		ldr	r2, .L341+24
 4367 04e6 0121     		movs	r1, #1
 4368 04e8 D154     		strb	r1, [r2, r3]
1428:..\src/interruptions.c ****                 else
1429:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1430:..\src/interruptions.c ****             }
1431:..\src/interruptions.c ****         break;
 4369              		.loc 1 1431 0
 4370 04ea 38E0     		b	.L336
 4371              	.L289:
1429:..\src/interruptions.c ****             }
 4372              		.loc 1 1429 0
 4373 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4374 04ee 234A     		ldr	r2, .L341+24
 4375 04f0 0021     		movs	r1, #0
 4376 04f2 D154     		strb	r1, [r2, r3]
 4377              		.loc 1 1431 0
 4378 04f4 33E0     		b	.L336
 4379              	.L252:
1432:..\src/interruptions.c ****         
1433:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1434:..\src/interruptions.c ****         case CONTROL_PWM:
1435:..\src/interruptions.c **** 
1436:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4380              		.loc 1 1436 0
 4381 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4382 04f8 1B4A     		ldr	r2, .L341+4
 4383 04fa 1B01     		lsls	r3, r3, #4
 4384 04fc 1344     		add	r3, r3, r2
 4385 04fe 0833     		adds	r3, r3, #8
 4386 0500 1B68     		ldr	r3, [r3]
 4387 0502 FB64     		str	r3, [r7, #76]
1437:..\src/interruptions.c **** 
1438:..\src/interruptions.c ****             if (pwm_input > 0) 
 4388              		.loc 1 1438 0
 4389 0504 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 105


 4390 0506 002B     		cmp	r3, #0
 4391 0508 04DD     		ble	.L290
1439:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4392              		.loc 1 1439 0
 4393 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4394 050c 1B4A     		ldr	r2, .L341+24
 4395 050e 0121     		movs	r1, #1
 4396 0510 D154     		strb	r1, [r2, r3]
 4397 0512 03E0     		b	.L291
 4398              	.L290:
1440:..\src/interruptions.c ****             else 
1441:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4399              		.loc 1 1441 0
 4400 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4401 0516 194A     		ldr	r2, .L341+24
 4402 0518 0021     		movs	r1, #0
 4403 051a D154     		strb	r1, [r2, r3]
 4404              	.L291:
1442:..\src/interruptions.c ****             
1443:..\src/interruptions.c ****           
1444:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1445:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4405              		.loc 1 1445 0
 4406 051c 7B6C     		ldr	r3, [r7, #68]
 4407 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4408 0522 022B     		cmp	r3, #2
 4409 0524 0ED1     		bne	.L292
1446:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4410              		.loc 1 1446 0
 4411 0526 FB6C     		ldr	r3, [r7, #76]
 4412 0528 40F6A932 		movw	r2, #2985
 4413 052c 9342     		cmp	r3, r2
 4414 052e 02DD     		ble	.L293
1447:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4415              		.loc 1 1447 0
 4416 0530 40F6A933 		movw	r3, #2985
 4417 0534 FB64     		str	r3, [r7, #76]
 4418              	.L293:
1448:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4419              		.loc 1 1448 0
 4420 0536 FB6C     		ldr	r3, [r7, #76]
 4421 0538 154A     		ldr	r2, .L341+44
 4422 053a 9342     		cmp	r3, r2
 4423 053c 2ADA     		bge	.L337
1449:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4424              		.loc 1 1449 0
 4425 053e 144B     		ldr	r3, .L341+44
 4426 0540 FB64     		str	r3, [r7, #76]
1450:..\src/interruptions.c ****             }
1451:..\src/interruptions.c ****             else {
1452:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1453:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1454:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1455:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1456:..\src/interruptions.c ****             }
1457:..\src/interruptions.c **** 
1458:..\src/interruptions.c ****         break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 106


 4427              		.loc 1 1458 0
 4428 0542 27E0     		b	.L337
 4429              	.L292:
1452:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4430              		.loc 1 1452 0
 4431 0544 FB6C     		ldr	r3, [r7, #76]
 4432 0546 642B     		cmp	r3, #100
 4433 0548 01DD     		ble	.L296
1453:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4434              		.loc 1 1453 0
 4435 054a 6423     		movs	r3, #100
 4436 054c FB64     		str	r3, [r7, #76]
 4437              	.L296:
1454:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4438              		.loc 1 1454 0
 4439 054e FB6C     		ldr	r3, [r7, #76]
 4440 0550 13F1640F 		cmn	r3, #100
 4441 0554 1EDA     		bge	.L337
1455:..\src/interruptions.c ****             }
 4442              		.loc 1 1455 0
 4443 0556 6FF06303 		mvn	r3, #99
 4444 055a FB64     		str	r3, [r7, #76]
 4445              		.loc 1 1458 0
 4446 055c 1AE0     		b	.L337
 4447              	.L336:
1431:..\src/interruptions.c ****         
 4448              		.loc 1 1431 0
 4449 055e 00BF     		nop
 4450 0560 19E0     		b	.L249
 4451              	.L342:
 4452 0562 00BF     		.align	2
 4453              	.L341:
 4454 0564 C8000000 		.word	prev_curr_err.10361
 4455 0568 00000000 		.word	g_ref
 4456 056c 00000000 		.word	g_meas
 4457 0570 AC000000 		.word	pos_error_sum.10358
 4458 0574 18FCFFFF 		.word	-1000
 4459 0578 B4000000 		.word	prev_pos_err.10360
 4460 057c BC000000 		.word	motor_dir.10363
 4461 0580 00000000 		.word	tension_valid
 4462 0584 C0000000 		.word	curr_error_sum.10359
 4463 0588 A0860100 		.word	100000
 4464 058c 6079FEFF 		.word	-100000
 4465 0590 57F4FFFF 		.word	-2985
 4466              	.L337:
 4467              		.loc 1 1458 0
 4468 0594 00BF     		nop
 4469              	.L249:
1459:..\src/interruptions.c ****             
1460:..\src/interruptions.c ****     }
1461:..\src/interruptions.c **** 
1462:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1463:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1466:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4470              		.loc 1 1466 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 107


 4471 0596 7B6C     		ldr	r3, [r7, #68]
 4472 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4473 059c 022B     		cmp	r3, #2
 4474 059e 23D1     		bne	.L297
1467:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4475              		.loc 1 1467 0
 4476 05a0 FB6C     		ldr	r3, [r7, #76]
 4477 05a2 40F6A932 		movw	r2, #2985
 4478 05a6 9342     		cmp	r3, r2
 4479 05a8 02DD     		ble	.L298
1468:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4480              		.loc 1 1468 0
 4481 05aa 40F6A933 		movw	r3, #2985
 4482 05ae FB64     		str	r3, [r7, #76]
 4483              	.L298:
1469:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4484              		.loc 1 1469 0
 4485 05b0 FB6C     		ldr	r3, [r7, #76]
 4486 05b2 B34A     		ldr	r2, .L343
 4487 05b4 9342     		cmp	r3, r2
 4488 05b6 01DA     		bge	.L299
1470:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4489              		.loc 1 1470 0
 4490 05b8 B14B     		ldr	r3, .L343
 4491 05ba FB64     		str	r3, [r7, #76]
 4492              	.L299:
1471:..\src/interruptions.c ****         
1472:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4493              		.loc 1 1472 0
 4494 05bc 7B6C     		ldr	r3, [r7, #68]
 4495 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4496 05c2 012B     		cmp	r3, #1
 4497 05c4 31D0     		beq	.L301
1473:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4498              		.loc 1 1473 0
 4499 05c6 FB6C     		ldr	r3, [r7, #76]
 4500 05c8 9B02     		lsls	r3, r3, #10
 4501 05ca AE4A     		ldr	r2, .L343+4
 4502 05cc 82FB0312 		smull	r1, r2, r2, r3
 4503 05d0 9211     		asrs	r2, r2, #6
 4504 05d2 DB17     		asrs	r3, r3, #31
 4505 05d4 D31A     		subs	r3, r2, r3
 4506 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4507 05d8 AB49     		ldr	r1, .L343+8
 4508 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4509 05de 02FB03F3 		mul	r3, r2, r3
 4510 05e2 9B12     		asrs	r3, r3, #10
 4511 05e4 FB64     		str	r3, [r7, #76]
 4512 05e6 20E0     		b	.L301
 4513              	.L297:
1474:..\src/interruptions.c ****     }
1475:..\src/interruptions.c ****     else {
1476:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4514              		.loc 1 1476 0
 4515 05e8 FB6C     		ldr	r3, [r7, #76]
 4516 05ea 642B     		cmp	r3, #100
 4517 05ec 01DD     		ble	.L302
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 108


1477:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4518              		.loc 1 1477 0
 4519 05ee 6423     		movs	r3, #100
 4520 05f0 FB64     		str	r3, [r7, #76]
 4521              	.L302:
1478:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4522              		.loc 1 1478 0
 4523 05f2 FB6C     		ldr	r3, [r7, #76]
 4524 05f4 13F1640F 		cmn	r3, #100
 4525 05f8 02DA     		bge	.L303
1479:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4526              		.loc 1 1479 0
 4527 05fa 6FF06303 		mvn	r3, #99
 4528 05fe FB64     		str	r3, [r7, #76]
 4529              	.L303:
1480:..\src/interruptions.c ****         
1481:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4530              		.loc 1 1481 0
 4531 0600 7B6C     		ldr	r3, [r7, #68]
 4532 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4533 0606 012B     		cmp	r3, #1
 4534 0608 0FD0     		beq	.L301
1482:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4535              		.loc 1 1482 0
 4536 060a FB6C     		ldr	r3, [r7, #76]
 4537 060c 9B02     		lsls	r3, r3, #10
 4538 060e 9F4A     		ldr	r2, .L343+12
 4539 0610 82FB0312 		smull	r1, r2, r2, r3
 4540 0614 5211     		asrs	r2, r2, #5
 4541 0616 DB17     		asrs	r3, r3, #31
 4542 0618 D31A     		subs	r3, r2, r3
 4543 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4544 061c 9A49     		ldr	r1, .L343+8
 4545 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4546 0622 02FB03F3 		mul	r3, r2, r3
 4547 0626 9B12     		asrs	r3, r3, #10
 4548 0628 FB64     		str	r3, [r7, #76]
 4549              	.L301:
1483:..\src/interruptions.c ****     }
1484:..\src/interruptions.c **** 
1485:..\src/interruptions.c ****     //// RATE LIMITER ////
1486:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4550              		.loc 1 1486 0
 4551 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4552 062c 984A     		ldr	r2, .L343+16
 4553 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4554 0632 FA6C     		ldr	r2, [r7, #76]
 4555 0634 D31A     		subs	r3, r2, r3
 4556 0636 7A6C     		ldr	r2, [r7, #68]
 4557 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4558 063c 9342     		cmp	r3, r2
 4559 063e 09DD     		ble	.L304
1487:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4560              		.loc 1 1487 0
 4561 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4562 0642 934A     		ldr	r2, .L343+16
 4563 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 109


 4564 0648 7A6C     		ldr	r2, [r7, #68]
 4565 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4566 064e 1344     		add	r3, r3, r2
 4567 0650 FB64     		str	r3, [r7, #76]
 4568 0652 14E0     		b	.L305
 4569              	.L304:
1488:..\src/interruptions.c ****     }
1489:..\src/interruptions.c ****     else {
1490:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4570              		.loc 1 1490 0
 4571 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4572 0656 8E4A     		ldr	r2, .L343+16
 4573 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4574 065c FA6C     		ldr	r2, [r7, #76]
 4575 065e D21A     		subs	r2, r2, r3
 4576 0660 7B6C     		ldr	r3, [r7, #68]
 4577 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4578 0666 5B42     		negs	r3, r3
 4579 0668 9A42     		cmp	r2, r3
 4580 066a 08DA     		bge	.L305
1491:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4581              		.loc 1 1491 0
 4582 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4583 066e 884A     		ldr	r2, .L343+16
 4584 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4585 0674 7A6C     		ldr	r2, [r7, #68]
 4586 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4587 067a 9B1A     		subs	r3, r3, r2
 4588 067c FB64     		str	r3, [r7, #76]
 4589              	.L305:
1492:..\src/interruptions.c ****     }
1493:..\src/interruptions.c ****    
1494:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1495:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4590              		.loc 1 1495 0
 4591 067e 7B6C     		ldr	r3, [r7, #68]
 4592 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4593 0684 022B     		cmp	r3, #2
 4594 0686 0ED1     		bne	.L306
1496:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4595              		.loc 1 1496 0
 4596 0688 FB6C     		ldr	r3, [r7, #76]
 4597 068a 40F6A932 		movw	r2, #2985
 4598 068e 9342     		cmp	r3, r2
 4599 0690 02DD     		ble	.L307
1497:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4600              		.loc 1 1497 0
 4601 0692 40F6A933 		movw	r3, #2985
 4602 0696 FB64     		str	r3, [r7, #76]
 4603              	.L307:
1498:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4604              		.loc 1 1498 0
 4605 0698 FB6C     		ldr	r3, [r7, #76]
 4606 069a 794A     		ldr	r2, .L343
 4607 069c 9342     		cmp	r3, r2
 4608 069e 0EDA     		bge	.L309
1499:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 110


 4609              		.loc 1 1499 0
 4610 06a0 774B     		ldr	r3, .L343
 4611 06a2 FB64     		str	r3, [r7, #76]
 4612 06a4 0BE0     		b	.L309
 4613              	.L306:
1500:..\src/interruptions.c ****     }
1501:..\src/interruptions.c ****     else {
1502:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4614              		.loc 1 1502 0
 4615 06a6 FB6C     		ldr	r3, [r7, #76]
 4616 06a8 642B     		cmp	r3, #100
 4617 06aa 01DD     		ble	.L310
1503:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4618              		.loc 1 1503 0
 4619 06ac 6423     		movs	r3, #100
 4620 06ae FB64     		str	r3, [r7, #76]
 4621              	.L310:
1504:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4622              		.loc 1 1504 0
 4623 06b0 FB6C     		ldr	r3, [r7, #76]
 4624 06b2 13F1640F 		cmn	r3, #100
 4625 06b6 02DA     		bge	.L309
1505:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4626              		.loc 1 1505 0
 4627 06b8 6FF06303 		mvn	r3, #99
 4628 06bc FB64     		str	r3, [r7, #76]
 4629              	.L309:
1506:..\src/interruptions.c ****     }
1507:..\src/interruptions.c **** 
1508:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4630              		.loc 1 1508 0
 4631 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4632 06c0 7349     		ldr	r1, .L343+16
 4633 06c2 FA6C     		ldr	r2, [r7, #76]
 4634 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1509:..\src/interruptions.c ****            
1510:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 4635              		.loc 1 1510 0
 4636 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4637 06ca FA6C     		ldr	r2, [r7, #76]
 4638 06cc 002A     		cmp	r2, #0
 4639 06ce 01DB     		blt	.L311
 4640              		.loc 1 1510 0 is_stmt 0 discriminator 1
 4641 06d0 0121     		movs	r1, #1
 4642 06d2 01E0     		b	.L312
 4643              	.L311:
 4644              		.loc 1 1510 0 discriminator 2
 4645 06d4 4FF0FF31 		mov	r1, #-1
 4646              	.L312:
 4647              		.loc 1 1510 0 discriminator 4
 4648 06d8 6E4A     		ldr	r2, .L343+20
 4649 06da D154     		strb	r1, [r2, r3]
1511:..\src/interruptions.c ****     
1512:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4650              		.loc 1 1512 0 is_stmt 1 discriminator 4
 4651 06dc 7B6C     		ldr	r3, [r7, #68]
 4652 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 111


 4653 06e2 012B     		cmp	r3, #1
 4654 06e4 40F0AA80 		bne	.L313
1513:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1514:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4655              		.loc 1 1514 0
 4656 06e8 7B6C     		ldr	r3, [r7, #68]
 4657 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4658 06ee 012B     		cmp	r3, #1
 4659 06f0 00F09F80 		beq	.L314
 4660              		.loc 1 1514 0 is_stmt 0 discriminator 1
 4661 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4662 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4663 06fa 6748     		ldr	r0, .L343+24
 4664 06fc 1346     		mov	r3, r2
 4665 06fe 5B00     		lsls	r3, r3, #1
 4666 0700 1344     		add	r3, r3, r2
 4667 0702 9B00     		lsls	r3, r3, #2
 4668 0704 1344     		add	r3, r3, r2
 4669 0706 0B44     		add	r3, r3, r1
 4670 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4671 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4672 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4673 0712 624C     		ldr	r4, .L343+28
 4674 0714 1346     		mov	r3, r2
 4675 0716 5B00     		lsls	r3, r3, #1
 4676 0718 1344     		add	r3, r3, r2
 4677 071a 9B00     		lsls	r3, r3, #2
 4678 071c 1344     		add	r3, r3, r2
 4679 071e 0344     		add	r3, r3, r0
 4680 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4681 0724 CB1A     		subs	r3, r1, r3
 4682 0726 312B     		cmp	r3, #49
 4683 0728 00F38380 		bgt	.L314
1515:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4684              		.loc 1 1515 0 is_stmt 1 discriminator 2
 4685 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4686 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4687 0732 5948     		ldr	r0, .L343+24
 4688 0734 1346     		mov	r3, r2
 4689 0736 5B00     		lsls	r3, r3, #1
 4690 0738 1344     		add	r3, r3, r2
 4691 073a 9B00     		lsls	r3, r3, #2
 4692 073c 1344     		add	r3, r3, r2
 4693 073e 0B44     		add	r3, r3, r1
 4694 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4695 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4696 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4697 074a 544C     		ldr	r4, .L343+28
 4698 074c 1346     		mov	r3, r2
 4699 074e 5B00     		lsls	r3, r3, #1
 4700 0750 1344     		add	r3, r3, r2
 4701 0752 9B00     		lsls	r3, r3, #2
 4702 0754 1344     		add	r3, r3, r2
 4703 0756 0344     		add	r3, r3, r0
 4704 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4705 075c CB1A     		subs	r3, r1, r3
1514:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 112


 4706              		.loc 1 1514 0 discriminator 2
 4707 075e 13F1310F 		cmn	r3, #49
 4708 0762 66DB     		blt	.L314
1516:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4709              		.loc 1 1516 0
 4710 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4711 0766 4E4A     		ldr	r2, .L343+32
 4712 0768 1B01     		lsls	r3, r3, #4
 4713 076a 1344     		add	r3, r3, r2
 4714 076c 1A68     		ldr	r2, [r3]
 4715 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4716 0770 4C49     		ldr	r1, .L343+36
 4717 0772 1B01     		lsls	r3, r3, #4
 4718 0774 0B44     		add	r3, r3, r1
 4719 0776 1B68     		ldr	r3, [r3]
 4720 0778 D31A     		subs	r3, r2, r3
1515:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4721              		.loc 1 1515 0
 4722 077a 632B     		cmp	r3, #99
 4723 077c 59DC     		bgt	.L314
 4724              		.loc 1 1516 0
 4725 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4726 0780 474A     		ldr	r2, .L343+32
 4727 0782 1B01     		lsls	r3, r3, #4
 4728 0784 1344     		add	r3, r3, r2
 4729 0786 1A68     		ldr	r2, [r3]
 4730 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4731 078a 4649     		ldr	r1, .L343+36
 4732 078c 1B01     		lsls	r3, r3, #4
 4733 078e 0B44     		add	r3, r3, r1
 4734 0790 1B68     		ldr	r3, [r3]
 4735 0792 D31A     		subs	r3, r2, r3
 4736 0794 13F1630F 		cmn	r3, #99
 4737 0798 4BDB     		blt	.L314
1517:..\src/interruptions.c ****             position_counter[idx]++;
 4738              		.loc 1 1517 0
 4739 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4740 079c 424A     		ldr	r2, .L343+40
 4741 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4742 07a2 0132     		adds	r2, r2, #1
 4743 07a4 4049     		ldr	r1, .L343+40
 4744 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1518:..\src/interruptions.c ****             
1519:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4745              		.loc 1 1519 0
 4746 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4747 07ac 3E4A     		ldr	r2, .L343+40
 4748 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4749 07b2 F92B     		cmp	r3, #249
 4750 07b4 42D9     		bls	.L313
1520:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4751              		.loc 1 1520 0
 4752 07b6 7B6C     		ldr	r3, [r7, #68]
 4753 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4754 07bc 002B     		cmp	r3, #0
 4755 07be 10D1     		bne	.L316
 4756              		.loc 1 1520 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 113


 4757 07c0 3A4B     		ldr	r3, .L343+44
 4758 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4759 07c4 002B     		cmp	r3, #0
 4760 07c6 0CD1     		bne	.L316
1521:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4761              		.loc 1 1521 0 is_stmt 1
 4762 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4763 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4764 07ce 3349     		ldr	r1, .L343+28
 4765 07d0 3420     		movs	r0, #52
 4766 07d2 00FB02F2 		mul	r2, r0, r2
 4767 07d6 0A44     		add	r2, r2, r1
 4768 07d8 1268     		ldr	r2, [r2]
 4769 07da 3549     		ldr	r1, .L343+48
 4770 07dc 1B01     		lsls	r3, r3, #4
 4771 07de 0B44     		add	r3, r3, r1
 4772 07e0 1A60     		str	r2, [r3]
 4773              	.L316:
1522:..\src/interruptions.c ****                 }
1523:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4774              		.loc 1 1523 0
 4775 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4776 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4777 07e8 2C49     		ldr	r1, .L343+28
 4778 07ea 3420     		movs	r0, #52
 4779 07ec 00FB02F2 		mul	r2, r0, r2
 4780 07f0 0A44     		add	r2, r2, r1
 4781 07f2 1268     		ldr	r2, [r2]
 4782 07f4 2B49     		ldr	r1, .L343+36
 4783 07f6 1B01     		lsls	r3, r3, #4
 4784 07f8 0B44     		add	r3, r3, r1
 4785 07fa 1A60     		str	r2, [r3]
1524:..\src/interruptions.c ****                 
1525:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4786              		.loc 1 1525 0
 4787 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4788 07fe 2A4A     		ldr	r2, .L343+40
 4789 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4790 0804 FA2B     		cmp	r3, #250
 4791 0806 11D1     		bne	.L317
1526:..\src/interruptions.c ****                     // To do only once
1527:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4792              		.loc 1 1527 0
 4793 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4794 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4795 0810 2249     		ldr	r1, .L343+28
 4796 0812 3420     		movs	r0, #52
 4797 0814 00FB02F2 		mul	r2, r0, r2
 4798 0818 0A44     		add	r2, r2, r1
 4799 081a 0C32     		adds	r2, r2, #12
 4800 081c 1268     		ldr	r2, [r2]
 4801 081e 1F49     		ldr	r1, .L343+28
 4802 0820 3420     		movs	r0, #52
 4803 0822 00FB03F3 		mul	r3, r0, r3
 4804 0826 0B44     		add	r3, r3, r1
 4805 0828 1433     		adds	r3, r3, #20
 4806 082a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 114


 4807              	.L317:
1528:..\src/interruptions.c ****                 }
1529:..\src/interruptions.c ****                 pwm_input = 0;            
 4808              		.loc 1 1529 0
 4809 082c 0023     		movs	r3, #0
 4810 082e FB64     		str	r3, [r7, #76]
1519:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4811              		.loc 1 1519 0
 4812 0830 04E0     		b	.L313
 4813              	.L314:
1530:..\src/interruptions.c ****             }
1531:..\src/interruptions.c ****         }
1532:..\src/interruptions.c ****         else {
1533:..\src/interruptions.c ****             position_counter[idx] = 0;
 4814              		.loc 1 1533 0
 4815 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4816 0834 1C4A     		ldr	r2, .L343+40
 4817 0836 0021     		movs	r1, #0
 4818 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 4819              	.L313:
1534:..\src/interruptions.c ****         }
1535:..\src/interruptions.c ****     }
1536:..\src/interruptions.c ****     
1537:..\src/interruptions.c ****     
1538:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1539:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 4820              		.loc 1 1539 0
 4821 083c 7B6C     		ldr	r3, [r7, #68]
 4822 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4823 0842 022B     		cmp	r3, #2
 4824 0844 3BD1     		bne	.L318
1540:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1541:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 4825              		.loc 1 1541 0
 4826 0846 FB6C     		ldr	r3, [r7, #76]
 4827 0848 002B     		cmp	r3, #0
 4828 084a B8BF     		it	lt
 4829 084c 5B42     		rsblt	r3, r3, #0
 4830 084e 40F68C22 		movw	r2, #2700
 4831 0852 9342     		cmp	r3, r2
 4832 0854 07DD     		ble	.L319
1542:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 4833              		.loc 1 1542 0
 4834 0856 FB6C     		ldr	r3, [r7, #76]
 4835 0858 002B     		cmp	r3, #0
 4836 085a 02DB     		blt	.L320
 4837              		.loc 1 1542 0 is_stmt 0 discriminator 1
 4838 085c 40F68C23 		movw	r3, #2700
 4839 0860 00E0     		b	.L321
 4840              	.L320:
 4841              		.loc 1 1542 0 discriminator 2
 4842 0862 144B     		ldr	r3, .L343+52
 4843              	.L321:
 4844              		.loc 1 1542 0 discriminator 4
 4845 0864 FB64     		str	r3, [r7, #76]
 4846              	.L319:
1543:..\src/interruptions.c ****         }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 115


1544:..\src/interruptions.c ****         
1545:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 4847              		.loc 1 1545 0 is_stmt 1
 4848 0866 FB6C     		ldr	r3, [r7, #76]
 4849 0868 13F1C70F 		cmn	r3, #199
 4850 086c 27DB     		blt	.L318
 4851              		.loc 1 1545 0 is_stmt 0 discriminator 1
 4852 086e FB6C     		ldr	r3, [r7, #76]
 4853 0870 C72B     		cmp	r3, #199
 4854 0872 24DC     		bgt	.L318
1546:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 4855              		.loc 1 1546 0 is_stmt 1
 4856 0874 FB6C     		ldr	r3, [r7, #76]
 4857 0876 002B     		cmp	r3, #0
 4858 0878 1EDB     		blt	.L322
 4859              		.loc 1 1546 0 is_stmt 0 discriminator 1
 4860 087a C823     		movs	r3, #200
 4861 087c 1EE0     		b	.L323
 4862              	.L344:
 4863 087e 00BF     		.align	2
 4864              	.L343:
 4865 0880 57F4FFFF 		.word	-2985
 4866 0884 81207D05 		.word	92086401
 4867 0888 00000000 		.word	dev_pwm_limit
 4868 088c 1F85EB51 		.word	1374389535
 4869 0890 D0000000 		.word	prev_pwm.10362
 4870 0894 00000000 		.word	pwm_sign
 4871 0898 00000000 		.word	g_measOld
 4872 089c 00000000 		.word	g_meas
 4873 08a0 00000000 		.word	g_refOld
 4874 08a4 00000000 		.word	g_ref
 4875 08a8 D8000000 		.word	position_counter.10364
 4876 08ac 00000000 		.word	change_ext_ref_flag
 4877 08b0 00000000 		.word	g_refNew
 4878 08b4 74F5FFFF 		.word	-2700
 4879              	.L322:
 4880              		.loc 1 1546 0 discriminator 2
 4881 08b8 6FF0C703 		mvn	r3, #199
 4882              	.L323:
 4883              		.loc 1 1546 0 discriminator 4
 4884 08bc FB64     		str	r3, [r7, #76]
 4885              	.L318:
1547:..\src/interruptions.c ****         }
1548:..\src/interruptions.c ****        
1549:..\src/interruptions.c ****     }
1550:..\src/interruptions.c ****     
1551:..\src/interruptions.c ****     // Set motor direction and write pwm value
1552:..\src/interruptions.c ****     switch (idx) {
 4886              		.loc 1 1552 0 is_stmt 1
 4887 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4888 08c0 002B     		cmp	r3, #0
 4889 08c2 02D0     		beq	.L325
 4890 08c4 012B     		cmp	r3, #1
 4891 08c6 26D0     		beq	.L326
1553:..\src/interruptions.c ****         case 0:         // Motor 1
1554:..\src/interruptions.c ****             if (motor_dir[idx])
1555:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 116


1556:..\src/interruptions.c ****             else
1557:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1558:..\src/interruptions.c ****             
1559:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1560:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1561:..\src/interruptions.c ****             }
1562:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1563:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1564:..\src/interruptions.c ****             }
1565:..\src/interruptions.c ****             
1566:..\src/interruptions.c ****             break;
1567:..\src/interruptions.c ****         case 1:         // Motor 2
1568:..\src/interruptions.c ****             
1569:..\src/interruptions.c ****             if (motor_dir[idx])
1570:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1571:..\src/interruptions.c ****             else
1572:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1573:..\src/interruptions.c ****             
1574:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1575:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1576:..\src/interruptions.c ****             }
1577:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1578:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1579:..\src/interruptions.c ****             }
1580:..\src/interruptions.c ****             
1581:..\src/interruptions.c ****             break;
1582:..\src/interruptions.c ****         default:
1583:..\src/interruptions.c ****             break;
 4892              		.loc 1 1583 0
 4893 08c8 4BE0     		b	.L331
 4894              	.L325:
1554:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4895              		.loc 1 1554 0
 4896 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4897 08cc 274A     		ldr	r2, .L345
 4898 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4899 08d0 002B     		cmp	r3, #0
 4900 08d2 03D0     		beq	.L327
1555:..\src/interruptions.c ****             else
 4901              		.loc 1 1555 0
 4902 08d4 0120     		movs	r0, #1
 4903 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4904 08da 02E0     		b	.L328
 4905              	.L327:
1557:..\src/interruptions.c ****             
 4906              		.loc 1 1557 0
 4907 08dc 0020     		movs	r0, #0
 4908 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4909              	.L328:
1559:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 4910              		.loc 1 1559 0
 4911 08e2 7B6C     		ldr	r3, [r7, #68]
 4912 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4913 08e8 012B     		cmp	r3, #1
 4914 08ea 0BD1     		bne	.L329
1560:..\src/interruptions.c ****             }
 4915              		.loc 1 1560 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 117


 4916 08ec FB6C     		ldr	r3, [r7, #76]
 4917 08ee 002B     		cmp	r3, #0
 4918 08f0 B8BF     		it	lt
 4919 08f2 5B42     		rsblt	r3, r3, #0
 4920 08f4 DBB2     		uxtb	r3, r3
 4921 08f6 C3F16403 		rsb	r3, r3, #100
 4922 08fa DBB2     		uxtb	r3, r3
 4923 08fc 1846     		mov	r0, r3
 4924 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1566:..\src/interruptions.c ****         case 1:         // Motor 2
 4925              		.loc 1 1566 0
 4926 0902 2EE0     		b	.L331
 4927              	.L329:
1563:..\src/interruptions.c ****             }
 4928              		.loc 1 1563 0
 4929 0904 FB6C     		ldr	r3, [r7, #76]
 4930 0906 002B     		cmp	r3, #0
 4931 0908 B8BF     		it	lt
 4932 090a 5B42     		rsblt	r3, r3, #0
 4933 090c DBB2     		uxtb	r3, r3
 4934 090e 1846     		mov	r0, r3
 4935 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1566:..\src/interruptions.c ****         case 1:         // Motor 2
 4936              		.loc 1 1566 0
 4937 0914 25E0     		b	.L331
 4938              	.L326:
1569:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4939              		.loc 1 1569 0
 4940 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4941 0918 144A     		ldr	r2, .L345
 4942 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4943 091c 002B     		cmp	r3, #0
 4944 091e 03D0     		beq	.L332
1570:..\src/interruptions.c ****             else
 4945              		.loc 1 1570 0
 4946 0920 0120     		movs	r0, #1
 4947 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4948 0926 02E0     		b	.L333
 4949              	.L332:
1572:..\src/interruptions.c ****             
 4950              		.loc 1 1572 0
 4951 0928 0020     		movs	r0, #0
 4952 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4953              	.L333:
1574:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 4954              		.loc 1 1574 0
 4955 092e 7B6C     		ldr	r3, [r7, #68]
 4956 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4957 0934 012B     		cmp	r3, #1
 4958 0936 0BD1     		bne	.L334
1575:..\src/interruptions.c ****             }
 4959              		.loc 1 1575 0
 4960 0938 FB6C     		ldr	r3, [r7, #76]
 4961 093a 002B     		cmp	r3, #0
 4962 093c B8BF     		it	lt
 4963 093e 5B42     		rsblt	r3, r3, #0
 4964 0940 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 118


 4965 0942 C3F16403 		rsb	r3, r3, #100
 4966 0946 DBB2     		uxtb	r3, r3
 4967 0948 1846     		mov	r0, r3
 4968 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1581:..\src/interruptions.c ****         default:
 4969              		.loc 1 1581 0
 4970 094e 07E0     		b	.L338
 4971              	.L334:
1578:..\src/interruptions.c ****             }
 4972              		.loc 1 1578 0
 4973 0950 FB6C     		ldr	r3, [r7, #76]
 4974 0952 002B     		cmp	r3, #0
 4975 0954 B8BF     		it	lt
 4976 0956 5B42     		rsblt	r3, r3, #0
 4977 0958 DBB2     		uxtb	r3, r3
 4978 095a 1846     		mov	r0, r3
 4979 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4980              	.L338:
1581:..\src/interruptions.c ****         default:
 4981              		.loc 1 1581 0
 4982 0960 00BF     		nop
 4983              	.L331:
1584:..\src/interruptions.c ****     }
1585:..\src/interruptions.c ****     
1586:..\src/interruptions.c **** }
 4984              		.loc 1 1586 0
 4985 0962 00BF     		nop
 4986 0964 5437     		adds	r7, r7, #84
 4987              		.cfi_def_cfa_offset 12
 4988 0966 BD46     		mov	sp, r7
 4989              		.cfi_def_cfa_register 13
 4990              		@ sp needed
 4991 0968 90BD     		pop	{r4, r7, pc}
 4992              	.L346:
 4993 096a 00BF     		.align	2
 4994              	.L345:
 4995 096c BC000000 		.word	motor_dir.10363
 4996              		.cfi_endproc
 4997              	.LFE72:
 4998              		.size	motor_control_generic, .-motor_control_generic
 4999              		.section	.text.vibrotactile_control_generic,"ax",%progbits
 5000              		.align	2
 5001              		.global	vibrotactile_control_generic
 5002              		.thumb
 5003              		.thumb_func
 5004              		.type	vibrotactile_control_generic, %function
 5005              	vibrotactile_control_generic:
 5006              	.LFB73:
1587:..\src/interruptions.c **** 
1588:..\src/interruptions.c **** //==============================================================================
1589:..\src/interruptions.c **** //                                                  VIBROTACTILE CONTROL GENERIC
1590:..\src/interruptions.c **** //==============================================================================
1591:..\src/interruptions.c **** void vibrotactile_control_generic(uint8 idx) {
 5007              		.loc 1 1591 0
 5008              		.cfi_startproc
 5009              		@ args = 0, pretend = 0, frame = 16
 5010              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 119


 5011 0000 80B5     		push	{r7, lr}
 5012              		.cfi_def_cfa_offset 8
 5013              		.cfi_offset 7, -8
 5014              		.cfi_offset 14, -4
 5015 0002 84B0     		sub	sp, sp, #16
 5016              		.cfi_def_cfa_offset 24
 5017 0004 00AF     		add	r7, sp, #0
 5018              		.cfi_def_cfa_register 7
 5019 0006 0346     		mov	r3, r0
 5020 0008 FB71     		strb	r3, [r7, #7]
1592:..\src/interruptions.c ****     uint8 i;
1593:..\src/interruptions.c ****     int16 CYDATA pwm_input = 0;
 5021              		.loc 1 1593 0
 5022 000a 0023     		movs	r3, #0
 5023 000c FB81     		strh	r3, [r7, #14]	@ movhi
1594:..\src/interruptions.c **** 
1595:..\src/interruptions.c ****     // Static Variables
1596:..\src/interruptions.c ****    
1597:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS]; 
1598:..\src/interruptions.c **** 
1599:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1600:..\src/interruptions.c **** 
1601:..\src/interruptions.c ****     pwm_input = g_ref_vibrotactile[idx].pwm;
 5024              		.loc 1 1601 0
 5025 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5026 0010 2F4A     		ldr	r2, .L362
 5027 0012 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 5028 0016 FB81     		strh	r3, [r7, #14]	@ movhi
1602:..\src/interruptions.c **** 
1603:..\src/interruptions.c ****     if (pwm_input > 0) 
 5029              		.loc 1 1603 0
 5030 0018 B7F90E30 		ldrsh	r3, [r7, #14]
 5031 001c 002B     		cmp	r3, #0
 5032 001e 04DD     		ble	.L348
1604:..\src/interruptions.c ****         motor_dir[idx] = TRUE;
 5033              		.loc 1 1604 0
 5034 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5035 0022 2C4A     		ldr	r2, .L362+4
 5036 0024 0121     		movs	r1, #1
 5037 0026 D154     		strb	r1, [r2, r3]
 5038 0028 03E0     		b	.L349
 5039              	.L348:
1605:..\src/interruptions.c ****     else 
1606:..\src/interruptions.c ****         motor_dir[idx] = FALSE;
 5040              		.loc 1 1606 0
 5041 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5042 002c 294A     		ldr	r2, .L362+4
 5043 002e 0021     		movs	r1, #0
 5044 0030 D154     		strb	r1, [r2, r3]
 5045              	.L349:
1607:..\src/interruptions.c ****         
1608:..\src/interruptions.c ****     if(pwm_input > PWM_MAX_VALUE_DC) 
 5046              		.loc 1 1608 0
 5047 0032 B7F90E30 		ldrsh	r3, [r7, #14]
 5048 0036 642B     		cmp	r3, #100
 5049 0038 01DD     		ble	.L350
1609:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 120


 5050              		.loc 1 1609 0
 5051 003a 6423     		movs	r3, #100
 5052 003c FB81     		strh	r3, [r7, #14]	@ movhi
 5053              	.L350:
1610:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 5054              		.loc 1 1610 0
 5055 003e B7F90E30 		ldrsh	r3, [r7, #14]
 5056 0042 13F1640F 		cmn	r3, #100
 5057 0046 02DA     		bge	.L351
1611:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 5058              		.loc 1 1611 0
 5059 0048 4FF69C73 		movw	r3, #65436
 5060 004c FB81     		strh	r3, [r7, #14]	@ movhi
 5061              	.L351:
1612:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5062              		.loc 1 1612 0
 5063 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5064 0050 B7F90E20 		ldrsh	r2, [r7, #14]
 5065 0054 002A     		cmp	r2, #0
 5066 0056 01DB     		blt	.L352
 5067              		.loc 1 1612 0 is_stmt 0 discriminator 1
 5068 0058 0121     		movs	r1, #1
 5069 005a 01E0     		b	.L353
 5070              	.L352:
 5071              		.loc 1 1612 0 discriminator 2
 5072 005c 4FF0FF31 		mov	r1, #-1
 5073              	.L353:
 5074              		.loc 1 1612 0 discriminator 4
 5075 0060 1D4A     		ldr	r2, .L362+8
 5076 0062 D154     		strb	r1, [r2, r3]
1613:..\src/interruptions.c ****  
1614:..\src/interruptions.c ****     // Set motor direction and write pwm value
1615:..\src/interruptions.c ****     switch (idx) {
 5077              		.loc 1 1615 0 is_stmt 1 discriminator 4
 5078 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5079 0066 002B     		cmp	r3, #0
 5080 0068 02D0     		beq	.L355
 5081 006a 012B     		cmp	r3, #1
 5082 006c 16D0     		beq	.L356
1616:..\src/interruptions.c ****         case 0:         // Motor 1
1617:..\src/interruptions.c ****         
1618:..\src/interruptions.c ****             if (motor_dir[idx])
1619:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
1620:..\src/interruptions.c ****             else
1621:..\src/interruptions.c ****                 VT1_DIR_Write(0x01);
1622:..\src/interruptions.c ****          
1623:..\src/interruptions.c ****                PWM_VT_WriteCompare1(abs(pwm_input));    
1624:..\src/interruptions.c ****             
1625:..\src/interruptions.c ****             break;
1626:..\src/interruptions.c ****         case 1:         // Motor 2
1627:..\src/interruptions.c ****             
1628:..\src/interruptions.c ****             if (motor_dir[idx])
1629:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);  // SE MOTOR_DIR_2 è messo a 0 il toast non vibra (amplificat
1630:..\src/interruptions.c ****                 
1631:..\src/interruptions.c ****             else
1632:..\src/interruptions.c ****                 VT2_DIR_Write(0x00);
1633:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 121


1634:..\src/interruptions.c ****             PWM_VT_WriteCompare2(abs(pwm_input));    
1635:..\src/interruptions.c ****         break;
1636:..\src/interruptions.c ****     }
1637:..\src/interruptions.c ****        
1638:..\src/interruptions.c ****     
1639:..\src/interruptions.c **** }
 5083              		.loc 1 1639 0 discriminator 4
 5084 006e 2BE0     		b	.L361
 5085              	.L355:
1618:..\src/interruptions.c ****                 VT1_DIR_Write(0x00);
 5086              		.loc 1 1618 0
 5087 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5088 0072 184A     		ldr	r2, .L362+4
 5089 0074 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5090 0076 002B     		cmp	r3, #0
 5091 0078 03D0     		beq	.L357
1619:..\src/interruptions.c ****             else
 5092              		.loc 1 1619 0
 5093 007a 0020     		movs	r0, #0
 5094 007c FFF7FEFF 		bl	VT1_DIR_Write
 5095 0080 02E0     		b	.L358
 5096              	.L357:
1621:..\src/interruptions.c ****          
 5097              		.loc 1 1621 0
 5098 0082 0120     		movs	r0, #1
 5099 0084 FFF7FEFF 		bl	VT1_DIR_Write
 5100              	.L358:
1623:..\src/interruptions.c ****             
 5101              		.loc 1 1623 0
 5102 0088 B7F90E30 		ldrsh	r3, [r7, #14]
 5103 008c 002B     		cmp	r3, #0
 5104 008e B8BF     		it	lt
 5105 0090 5B42     		rsblt	r3, r3, #0
 5106 0092 9BB2     		uxth	r3, r3
 5107 0094 1846     		mov	r0, r3
 5108 0096 FFF7FEFF 		bl	PWM_VT_WriteCompare1
1625:..\src/interruptions.c ****         case 1:         // Motor 2
 5109              		.loc 1 1625 0
 5110 009a 15E0     		b	.L354
 5111              	.L356:
1628:..\src/interruptions.c ****                 VT2_DIR_Write(0x01);  // SE MOTOR_DIR_2 è messo a 0 il toast non vibra (amplificat
 5112              		.loc 1 1628 0
 5113 009c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5114 009e 0D4A     		ldr	r2, .L362+4
 5115 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5116 00a2 002B     		cmp	r3, #0
 5117 00a4 03D0     		beq	.L359
1629:..\src/interruptions.c ****                 
 5118              		.loc 1 1629 0
 5119 00a6 0120     		movs	r0, #1
 5120 00a8 FFF7FEFF 		bl	VT2_DIR_Write
 5121 00ac 02E0     		b	.L360
 5122              	.L359:
1632:..\src/interruptions.c ****             
 5123              		.loc 1 1632 0
 5124 00ae 0020     		movs	r0, #0
 5125 00b0 FFF7FEFF 		bl	VT2_DIR_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 122


 5126              	.L360:
1634:..\src/interruptions.c ****         break;
 5127              		.loc 1 1634 0
 5128 00b4 B7F90E30 		ldrsh	r3, [r7, #14]
 5129 00b8 002B     		cmp	r3, #0
 5130 00ba B8BF     		it	lt
 5131 00bc 5B42     		rsblt	r3, r3, #0
 5132 00be 9BB2     		uxth	r3, r3
 5133 00c0 1846     		mov	r0, r3
 5134 00c2 FFF7FEFF 		bl	PWM_VT_WriteCompare2
1635:..\src/interruptions.c ****     }
 5135              		.loc 1 1635 0
 5136 00c6 00BF     		nop
 5137              	.L354:
 5138              	.L361:
 5139              		.loc 1 1639 0
 5140 00c8 00BF     		nop
 5141 00ca 1037     		adds	r7, r7, #16
 5142              		.cfi_def_cfa_offset 8
 5143 00cc BD46     		mov	sp, r7
 5144              		.cfi_def_cfa_register 13
 5145              		@ sp needed
 5146 00ce 80BD     		pop	{r7, pc}
 5147              	.L363:
 5148              		.align	2
 5149              	.L362:
 5150 00d0 00000000 		.word	g_ref_vibrotactile
 5151 00d4 E0000000 		.word	motor_dir.10379
 5152 00d8 00000000 		.word	pwm_sign
 5153              		.cfi_endproc
 5154              	.LFE73:
 5155              		.size	vibrotactile_control_generic, .-vibrotactile_control_generic
 5156              		.global	__aeabi_fcmpeq
 5157              		.global	__aeabi_fmul
 5158              		.global	__aeabi_f2iz
 5159              		.global	__aeabi_fcmplt
 5160              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5161              		.align	2
 5162              		.global	encoder_reading_SPI
 5163              		.thumb
 5164              		.thumb_func
 5165              		.type	encoder_reading_SPI, %function
 5166              	encoder_reading_SPI:
 5167              	.LFB74:
1640:..\src/interruptions.c **** 
1641:..\src/interruptions.c **** //==============================================================================
1642:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1643:..\src/interruptions.c **** //==============================================================================
1644:..\src/interruptions.c **** 
1645:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5168              		.loc 1 1645 0
 5169              		.cfi_startproc
 5170              		@ args = 0, pretend = 0, frame = 48
 5171              		@ frame_needed = 1, uses_anonymous_args = 0
 5172 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5173              		.cfi_def_cfa_offset 20
 5174              		.cfi_offset 4, -20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 123


 5175              		.cfi_offset 5, -16
 5176              		.cfi_offset 6, -12
 5177              		.cfi_offset 7, -8
 5178              		.cfi_offset 14, -4
 5179 0002 8FB0     		sub	sp, sp, #60
 5180              		.cfi_def_cfa_offset 80
 5181 0004 02AF     		add	r7, sp, #8
 5182              		.cfi_def_cfa 7, 72
 5183 0006 0346     		mov	r3, r0
 5184 0008 0A46     		mov	r2, r1
 5185 000a FB71     		strb	r3, [r7, #7]
 5186 000c 1346     		mov	r3, r2
 5187 000e BB71     		strb	r3, [r7, #6]
1646:..\src/interruptions.c **** 
1647:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5188              		.loc 1 1647 0
 5189 0010 0023     		movs	r3, #0
 5190 0012 87F82F30 		strb	r3, [r7, #47]
1648:..\src/interruptions.c ****     
1649:..\src/interruptions.c ****     // Encoder Variables  
1650:..\src/interruptions.c ****     uint8 jj;
1651:..\src/interruptions.c ****      
1652:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1653:..\src/interruptions.c ****     int16 tmp_value_encoder;
1654:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1655:..\src/interruptions.c ****     int32 value_encoder;
1656:..\src/interruptions.c ****     int32 speed_encoder;
1657:..\src/interruptions.c ****     int32 value_diff;
1658:..\src/interruptions.c **** 	int8 init_rot = 0;
 5191              		.loc 1 1658 0
 5192 0016 0023     		movs	r3, #0
 5193 0018 87F82730 		strb	r3, [r7, #39]
1659:..\src/interruptions.c **** 
1660:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1661:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1662:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1663:..\src/interruptions.c ****     
1664:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1665:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1666:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1667:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1668:..\src/interruptions.c **** 
1669:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1670:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1671:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1672:..\src/interruptions.c ****     
1673:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5194              		.loc 1 1673 0
 5195 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5196 001e 8D4A     		ldr	r2, .L401
 5197 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5198 0022 002B     		cmp	r3, #0
 5199 0024 19D0     		beq	.L365
1674:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5200              		.loc 1 1674 0
 5201 0026 0323     		movs	r3, #3
 5202 0028 87F82E30 		strb	r3, [r7, #46]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 124


 5203 002c 0AE0     		b	.L366
 5204              	.L367:
1675:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5205              		.loc 1 1675 0
 5206 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5207 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5208 0034 8848     		ldr	r0, .L401+4
 5209 0036 1346     		mov	r3, r2
 5210 0038 5B00     		lsls	r3, r3, #1
 5211 003a 1344     		add	r3, r3, r2
 5212 003c 0B44     		add	r3, r3, r1
 5213 003e 0022     		movs	r2, #0
 5214 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5215              	.L366:
1674:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5216              		.loc 1 1674 0 discriminator 1
 5217 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5218 0048 5A1E     		subs	r2, r3, #1
 5219 004a 87F82E20 		strb	r2, [r7, #46]
 5220 004e 002B     		cmp	r3, #0
 5221 0050 EDD1     		bne	.L367
1676:..\src/interruptions.c ****         
1677:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5222              		.loc 1 1677 0
 5223 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5224 0054 7F4A     		ldr	r2, .L401
 5225 0056 0021     		movs	r1, #0
 5226 0058 D154     		strb	r1, [r2, r3]
 5227              	.L365:
1678:..\src/interruptions.c ****     }
1679:..\src/interruptions.c **** 
1680:..\src/interruptions.c ****     //======================================================     reading sensors
1681:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5228              		.loc 1 1681 0
 5229 005a 0023     		movs	r3, #0
 5230 005c 87F82F30 		strb	r3, [r7, #47]
 5231 0060 0DE0     		b	.L368
 5232              	.L369:
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5233              		.loc 1 1682 0 discriminator 3
 5234 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5235 0066 9B00     		lsls	r3, r3, #2
 5236 0068 07F13002 		add	r2, r7, #48
 5237 006c 1344     		add	r3, r3, r2
 5238 006e 0022     		movs	r2, #0
 5239 0070 43F8282C 		str	r2, [r3, #-40]
1681:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5240              		.loc 1 1681 0 discriminator 3
 5241 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5242 0078 0133     		adds	r3, r3, #1
 5243 007a 87F82F30 		strb	r3, [r7, #47]
 5244              	.L368:
1681:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5245              		.loc 1 1681 0 is_stmt 0 discriminator 1
 5246 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5247 0082 022B     		cmp	r3, #2
 5248 0084 EDD9     		bls	.L369
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 125


 5249              	.LBB9:
1683:..\src/interruptions.c ****     }   
1684:..\src/interruptions.c ****     
1685:..\src/interruptions.c ****     
1686:..\src/interruptions.c ****                                                                         //CS1 for left hand
1687:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5250              		.loc 1 1687 0 is_stmt 1
 5251 0086 0023     		movs	r3, #0
 5252 0088 3B62     		str	r3, [r7, #32]
 5253 008a 2EE0     		b	.L370
 5254              	.L372:
1688:..\src/interruptions.c ****         
1689:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1690:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5255              		.loc 1 1690 0
 5256 008c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5257 008e 7349     		ldr	r1, .L401+8
 5258 0090 1346     		mov	r3, r2
 5259 0092 5B00     		lsls	r3, r3, #1
 5260 0094 1344     		add	r3, r3, r2
 5261 0096 1B01     		lsls	r3, r3, #4
 5262 0098 CA18     		adds	r2, r1, r3
 5263 009a 3B6A     		ldr	r3, [r7, #32]
 5264 009c 1344     		add	r3, r3, r2
 5265 009e 03F2B113 		addw	r3, r3, #433
 5266 00a2 1B78     		ldrb	r3, [r3]
 5267 00a4 87F82F30 		strb	r3, [r7, #47]
1691:..\src/interruptions.c ****         
1692:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5268              		.loc 1 1692 0
 5269 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5270 00aa 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5271 00ae 6C48     		ldr	r0, .L401+12
 5272 00b0 1346     		mov	r3, r2
 5273 00b2 9B00     		lsls	r3, r3, #2
 5274 00b4 1344     		add	r3, r3, r2
 5275 00b6 0344     		add	r3, r3, r0
 5276 00b8 0B44     		add	r3, r3, r1
 5277 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5278 00bc 0F2B     		cmp	r3, #15
 5279 00be 11D9     		bls	.L371
1693:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5280              		.loc 1 1693 0
 5281 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5282 00c2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5283 00c6 6748     		ldr	r0, .L401+16
 5284 00c8 1346     		mov	r3, r2
 5285 00ca 9B00     		lsls	r3, r3, #2
 5286 00cc 1344     		add	r3, r3, r2
 5287 00ce 0B44     		add	r3, r3, r1
 5288 00d0 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5289 00d4 1A46     		mov	r2, r3
 5290 00d6 3B6A     		ldr	r3, [r7, #32]
 5291 00d8 9B00     		lsls	r3, r3, #2
 5292 00da 07F13001 		add	r1, r7, #48
 5293 00de 0B44     		add	r3, r3, r1
 5294 00e0 43F8282C 		str	r2, [r3, #-40]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 126


 5295              	.L371:
1687:..\src/interruptions.c ****         
 5296              		.loc 1 1687 0 discriminator 2
 5297 00e4 3B6A     		ldr	r3, [r7, #32]
 5298 00e6 0133     		adds	r3, r3, #1
 5299 00e8 3B62     		str	r3, [r7, #32]
 5300              	.L370:
1687:..\src/interruptions.c ****         
 5301              		.loc 1 1687 0 is_stmt 0 discriminator 1
 5302 00ea 3B6A     		ldr	r3, [r7, #32]
 5303 00ec 022B     		cmp	r3, #2
 5304 00ee CDDD     		ble	.L372
 5305              	.LBE9:
1694:..\src/interruptions.c ****         }
1695:..\src/interruptions.c ****     }
1696:..\src/interruptions.c ****     
1697:..\src/interruptions.c ****     // S = SIGN BIT
1698:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1699:..\src/interruptions.c ****     // 0 = 0 BIT
1700:..\src/interruptions.c ****     // C = CONTROL BIT
1701:..\src/interruptions.c ****     
1702:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5306              		.loc 1 1702 0 is_stmt 1
 5307 00f0 0023     		movs	r3, #0
 5308 00f2 87F82F30 		strb	r3, [r7, #47]
 5309 00f6 32E3     		b	.L373
 5310              	.L394:
1703:..\src/interruptions.c ****         
1704:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5311              		.loc 1 1704 0
 5312 00f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5313 00fa 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5314 00fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5315 0102 9B00     		lsls	r3, r3, #2
 5316 0104 07F13001 		add	r1, r7, #48
 5317 0108 0B44     		add	r3, r3, r1
 5318 010a 53F8281C 		ldr	r1, [r3, #-40]
 5319 010e 564C     		ldr	r4, .L401+20
 5320 0110 1346     		mov	r3, r2
 5321 0112 9B00     		lsls	r3, r3, #2
 5322 0114 1344     		add	r3, r3, r2
 5323 0116 0344     		add	r3, r3, r0
 5324 0118 44F82310 		str	r1, [r4, r3, lsl #2]
1705:..\src/interruptions.c ****         
1706:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5325              		.loc 1 1706 0
 5326 011c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5327 0120 9B00     		lsls	r3, r3, #2
 5328 0122 07F13002 		add	r2, r7, #48
 5329 0126 1344     		add	r3, r3, r2
 5330 0128 53F8283C 		ldr	r3, [r3, #-40]
 5331 012c 99B2     		uxth	r1, r3
 5332 012e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5333 0130 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5334 0134 4D4C     		ldr	r4, .L401+24
 5335 0136 1346     		mov	r3, r2
 5336 0138 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 127


 5337 013a 1344     		add	r3, r3, r2
 5338 013c 9B00     		lsls	r3, r3, #2
 5339 013e 0344     		add	r3, r3, r0
 5340 0140 6633     		adds	r3, r3, #102
 5341 0142 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5342 0146 9BB2     		uxth	r3, r3
 5343 0148 CB1A     		subs	r3, r1, r3
 5344 014a 9BB2     		uxth	r3, r3
 5345 014c BB85     		strh	r3, [r7, #44]	@ movhi
1707:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5346              		.loc 1 1707 0
 5347 014e B7F92C30 		ldrsh	r3, [r7, #44]
 5348 0152 002B     		cmp	r3, #0
 5349 0154 04DA     		bge	.L374
1708:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5350              		.loc 1 1708 0
 5351 0156 BB8D     		ldrh	r3, [r7, #44]
 5352 0158 03F58053 		add	r3, r3, #4096
 5353 015c 9BB2     		uxth	r3, r3
 5354 015e BB85     		strh	r3, [r7, #44]	@ movhi
 5355              	.L374:
1709:..\src/interruptions.c ****         }       // Range [0, 4096]
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5356              		.loc 1 1711 0
 5357 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5358 0164 B3F5006F 		cmp	r3, #2048
 5359 0168 04DB     		blt	.L375
1712:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5360              		.loc 1 1712 0
 5361 016a BB8D     		ldrh	r3, [r7, #44]
 5362 016c A3F58053 		sub	r3, r3, #4096
 5363 0170 9BB2     		uxth	r3, r3
 5364 0172 BB85     		strh	r3, [r7, #44]	@ movhi
 5365              	.L375:
1713:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1714:..\src/interruptions.c **** 
1715:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5366              		.loc 1 1715 0
 5367 0174 B7F92C30 		ldrsh	r3, [r7, #44]
 5368 0178 1B01     		lsls	r3, r3, #4
 5369 017a FB61     		str	r3, [r7, #28]
1716:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5370              		.loc 1 1716 0
 5371 017c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5372 017e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5373 0182 3B48     		ldr	r0, .L401+28
 5374 0184 1346     		mov	r3, r2
 5375 0186 5B00     		lsls	r3, r3, #1
 5376 0188 1344     		add	r3, r3, r2
 5377 018a 0B44     		add	r3, r3, r1
 5378 018c FA69     		ldr	r2, [r7, #28]
 5379 018e 40F82320 		str	r2, [r0, r3, lsl #2]
1717:..\src/interruptions.c **** 
1718:..\src/interruptions.c ****         // Initialize last_value_encoder
1719:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5380              		.loc 1 1719 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 128


 5381 0192 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5382 0194 374A     		ldr	r2, .L401+32
 5383 0196 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5384 0198 002B     		cmp	r3, #0
 5385 019a 12D0     		beq	.L376
1720:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5386              		.loc 1 1720 0
 5387 019c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5388 019e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5389 01a2 2D48     		ldr	r0, .L401+4
 5390 01a4 1346     		mov	r3, r2
 5391 01a6 5B00     		lsls	r3, r3, #1
 5392 01a8 1344     		add	r3, r3, r2
 5393 01aa 0B44     		add	r3, r3, r1
 5394 01ac FA69     		ldr	r2, [r7, #28]
 5395 01ae 40F82320 		str	r2, [r0, r3, lsl #2]
1721:..\src/interruptions.c ****             if (index == 2)
 5396              		.loc 1 1721 0
 5397 01b2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5398 01b6 022B     		cmp	r3, #2
 5399 01b8 03D1     		bne	.L376
1722:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5400              		.loc 1 1722 0
 5401 01ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5402 01bc 2D4A     		ldr	r2, .L401+32
 5403 01be 0021     		movs	r1, #0
 5404 01c0 D154     		strb	r1, [r2, r3]
 5405              	.L376:
1723:..\src/interruptions.c ****         }
1724:..\src/interruptions.c **** 
1725:..\src/interruptions.c ****         // Take care of rotations
1726:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5406              		.loc 1 1726 0
 5407 01c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5408 01c4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5409 01c8 2348     		ldr	r0, .L401+4
 5410 01ca 1346     		mov	r3, r2
 5411 01cc 5B00     		lsls	r3, r3, #1
 5412 01ce 1344     		add	r3, r3, r2
 5413 01d0 0B44     		add	r3, r3, r1
 5414 01d2 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5415 01d6 FA69     		ldr	r2, [r7, #28]
 5416 01d8 D31A     		subs	r3, r2, r3
 5417 01da BB61     		str	r3, [r7, #24]
1727:..\src/interruptions.c **** 
1728:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1729:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1730:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1731:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1732:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1733:..\src/interruptions.c ****         //                                               |           |
1734:..\src/interruptions.c ****         //                                           24575           -24576
1735:..\src/interruptions.c ****         //                                               |___________|
1736:..\src/interruptions.c ****         //                                                   49152
1737:..\src/interruptions.c **** 
1738:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1739:..\src/interruptions.c ****         // and update the variable only if the difference between
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 129


1740:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1741:..\src/interruptions.c **** 
1742:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1743:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1744:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1745:..\src/interruptions.c **** 
1746:..\src/interruptions.c ****         if (value_diff > 49152)
 5418              		.loc 1 1746 0
 5419 01dc BB69     		ldr	r3, [r7, #24]
 5420 01de B3F5404F 		cmp	r3, #49152
 5421 01e2 19DD     		ble	.L377
1747:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5422              		.loc 1 1747 0
 5423 01e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5424 01e6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5425 01ea 2348     		ldr	r0, .L401+36
 5426 01ec 3421     		movs	r1, #52
 5427 01ee 01FB02F1 		mul	r1, r1, r2
 5428 01f2 0144     		add	r1, r1, r0
 5429 01f4 1944     		add	r1, r1, r3
 5430 01f6 1831     		adds	r1, r1, #24
 5431 01f8 91F90010 		ldrsb	r1, [r1]
 5432 01fc C9B2     		uxtb	r1, r1
 5433 01fe 0139     		subs	r1, r1, #1
 5434 0200 C9B2     		uxtb	r1, r1
 5435 0202 4CB2     		sxtb	r4, r1
 5436 0204 1C49     		ldr	r1, .L401+36
 5437 0206 3420     		movs	r0, #52
 5438 0208 00FB02F2 		mul	r2, r0, r2
 5439 020c 0A44     		add	r2, r2, r1
 5440 020e 1344     		add	r3, r3, r2
 5441 0210 1833     		adds	r3, r3, #24
 5442 0212 2246     		mov	r2, r4
 5443 0214 1A70     		strb	r2, [r3]
 5444 0216 59E0     		b	.L378
 5445              	.L377:
1748:..\src/interruptions.c ****         else{ 
1749:..\src/interruptions.c ****             if (value_diff < -49152)
 5446              		.loc 1 1749 0
 5447 0218 BB69     		ldr	r3, [r7, #24]
 5448 021a 13F5404F 		cmn	r3, #49152
 5449 021e 2DDA     		bge	.L379
1750:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5450              		.loc 1 1750 0
 5451 0220 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5452 0222 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5453 0226 1448     		ldr	r0, .L401+36
 5454 0228 3421     		movs	r1, #52
 5455 022a 01FB02F1 		mul	r1, r1, r2
 5456 022e 0144     		add	r1, r1, r0
 5457 0230 1944     		add	r1, r1, r3
 5458 0232 1831     		adds	r1, r1, #24
 5459 0234 91F90010 		ldrsb	r1, [r1]
 5460 0238 C9B2     		uxtb	r1, r1
 5461 023a 0131     		adds	r1, r1, #1
 5462 023c C9B2     		uxtb	r1, r1
 5463 023e 4CB2     		sxtb	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 130


 5464 0240 0D49     		ldr	r1, .L401+36
 5465 0242 3420     		movs	r0, #52
 5466 0244 00FB02F2 		mul	r2, r0, r2
 5467 0248 0A44     		add	r2, r2, r1
 5468 024a 1344     		add	r3, r3, r2
 5469 024c 1833     		adds	r3, r3, #24
 5470 024e 2246     		mov	r2, r4
 5471 0250 1A70     		strb	r2, [r3]
 5472 0252 3BE0     		b	.L378
 5473              	.L402:
 5474              		.align	2
 5475              	.L401:
 5476 0254 00000000 		.word	reset_last_value_flag
 5477 0258 E4000000 		.word	last_value_encoder.10396
 5478 025c 00000000 		.word	c_mem
 5479 0260 00000000 		.word	Encoder_Check
 5480 0264 00000000 		.word	Encoder_Value
 5481 0268 00000000 		.word	data_encoder_raw
 5482 026c 00000000 		.word	g_mem
 5483 0270 FC000000 		.word	comp_value_encoder.10397
 5484 0274 04000000 		.word	only_first_time.10399
 5485 0278 00000000 		.word	g_meas
 5486              	.L379:
1751:..\src/interruptions.c ****             else{
1752:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5487              		.loc 1 1752 0
 5488 027c BB69     		ldr	r3, [r7, #24]
 5489 027e 002B     		cmp	r3, #0
 5490 0280 B8BF     		it	lt
 5491 0282 5B42     		rsblt	r3, r3, #0
 5492 0284 B3F5804F 		cmp	r3, #16384
 5493 0288 20DD     		ble	.L378
1753:..\src/interruptions.c ****                     error[n_line][index]++;
 5494              		.loc 1 1753 0
 5495 028a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5496 028c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5497 0290 9B48     		ldr	r0, .L403
 5498 0292 1346     		mov	r3, r2
 5499 0294 5B00     		lsls	r3, r3, #1
 5500 0296 1344     		add	r3, r3, r2
 5501 0298 0344     		add	r3, r3, r0
 5502 029a 0B44     		add	r3, r3, r1
 5503 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5504 029e 0133     		adds	r3, r3, #1
 5505 02a0 DCB2     		uxtb	r4, r3
 5506 02a2 9748     		ldr	r0, .L403
 5507 02a4 1346     		mov	r3, r2
 5508 02a6 5B00     		lsls	r3, r3, #1
 5509 02a8 1344     		add	r3, r3, r2
 5510 02aa 0344     		add	r3, r3, r0
 5511 02ac 0B44     		add	r3, r3, r1
 5512 02ae 2246     		mov	r2, r4
 5513 02b0 1A70     		strb	r2, [r3]
1754:..\src/interruptions.c ****                                 
1755:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5514              		.loc 1 1755 0
 5515 02b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 131


 5516 02b4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5517 02b8 9148     		ldr	r0, .L403
 5518 02ba 1346     		mov	r3, r2
 5519 02bc 5B00     		lsls	r3, r3, #1
 5520 02be 1344     		add	r3, r3, r2
 5521 02c0 0344     		add	r3, r3, r0
 5522 02c2 0B44     		add	r3, r3, r1
 5523 02c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5524 02c6 092B     		cmp	r3, #9
 5525 02c8 40F28882 		bls	.L400
 5526              	.L378:
1756:..\src/interruptions.c ****                         // Discard
1757:..\src/interruptions.c ****                         return;
1758:..\src/interruptions.c ****                 }
1759:..\src/interruptions.c ****             }
1760:..\src/interruptions.c ****         }
1761:..\src/interruptions.c **** 
1762:..\src/interruptions.c ****         error[n_line][index] = 0;
 5527              		.loc 1 1762 0
 5528 02cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5529 02ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5530 02d2 8B48     		ldr	r0, .L403
 5531 02d4 1346     		mov	r3, r2
 5532 02d6 5B00     		lsls	r3, r3, #1
 5533 02d8 1344     		add	r3, r3, r2
 5534 02da 0344     		add	r3, r3, r0
 5535 02dc 0B44     		add	r3, r3, r1
 5536 02de 0022     		movs	r2, #0
 5537 02e0 1A70     		strb	r2, [r3]
1763:..\src/interruptions.c ****         
1764:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5538              		.loc 1 1764 0
 5539 02e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5540 02e4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5541 02e8 8648     		ldr	r0, .L403+4
 5542 02ea 1346     		mov	r3, r2
 5543 02ec 5B00     		lsls	r3, r3, #1
 5544 02ee 1344     		add	r3, r3, r2
 5545 02f0 0B44     		add	r3, r3, r1
 5546 02f2 FA69     		ldr	r2, [r7, #28]
 5547 02f4 40F82320 		str	r2, [r0, r3, lsl #2]
1765:..\src/interruptions.c **** 
1766:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5548              		.loc 1 1766 0
 5549 02f8 FB69     		ldr	r3, [r7, #28]
 5550 02fa BB62     		str	r3, [r7, #40]
1767:..\src/interruptions.c **** 
1768:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5551              		.loc 1 1768 0
 5552 02fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5553 02fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5554 0302 8149     		ldr	r1, .L403+8
 5555 0304 3420     		movs	r0, #52
 5556 0306 00FB02F2 		mul	r2, r0, r2
 5557 030a 0A44     		add	r2, r2, r1
 5558 030c 1344     		add	r3, r3, r2
 5559 030e 1833     		adds	r3, r3, #24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 132


 5560 0310 93F90030 		ldrsb	r3, [r3]
 5561 0314 1B04     		lsls	r3, r3, #16
 5562 0316 BA6A     		ldr	r2, [r7, #40]
 5563 0318 1344     		add	r3, r3, r2
 5564 031a BB62     		str	r3, [r7, #40]
1769:..\src/interruptions.c ****         
1770:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5565              		.loc 1 1770 0
 5566 031c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5567 031e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5568 0322 7A48     		ldr	r0, .L403+12
 5569 0324 1346     		mov	r3, r2
 5570 0326 5B00     		lsls	r3, r3, #1
 5571 0328 1344     		add	r3, r3, r2
 5572 032a 9B00     		lsls	r3, r3, #2
 5573 032c 0B44     		add	r3, r3, r1
 5574 032e 6833     		adds	r3, r3, #104
 5575 0330 9B00     		lsls	r3, r3, #2
 5576 0332 0344     		add	r3, r3, r0
 5577 0334 5B68     		ldr	r3, [r3, #4]	@ float
 5578 0336 4FF07E51 		mov	r1, #1065353216
 5579 033a 1846     		mov	r0, r3
 5580 033c FFF7FEFF 		bl	__aeabi_fcmpeq
 5581 0340 0346     		mov	r3, r0
 5582 0342 002B     		cmp	r3, #0
 5583 0344 1AD1     		bne	.L381
1771:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5584              		.loc 1 1771 0
 5585 0346 B86A     		ldr	r0, [r7, #40]
 5586 0348 FFF7FEFF 		bl	__aeabi_i2f
 5587 034c 0446     		mov	r4, r0
 5588 034e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5589 0350 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5590 0354 6D48     		ldr	r0, .L403+12
 5591 0356 1346     		mov	r3, r2
 5592 0358 5B00     		lsls	r3, r3, #1
 5593 035a 1344     		add	r3, r3, r2
 5594 035c 9B00     		lsls	r3, r3, #2
 5595 035e 0B44     		add	r3, r3, r1
 5596 0360 6833     		adds	r3, r3, #104
 5597 0362 9B00     		lsls	r3, r3, #2
 5598 0364 0344     		add	r3, r3, r0
 5599 0366 5B68     		ldr	r3, [r3, #4]	@ float
 5600 0368 1946     		mov	r1, r3
 5601 036a 2046     		mov	r0, r4
 5602 036c FFF7FEFF 		bl	__aeabi_fmul
 5603 0370 0346     		mov	r3, r0
 5604 0372 1846     		mov	r0, r3
 5605 0374 FFF7FEFF 		bl	__aeabi_f2iz
 5606 0378 0346     		mov	r3, r0
 5607 037a BB62     		str	r3, [r7, #40]
 5608              	.L381:
1772:..\src/interruptions.c ****         }
1773:..\src/interruptions.c **** 
1774:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5609              		.loc 1 1774 0
 5610 037c 634B     		ldr	r3, .L403+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 133


 5611 037e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5612 0382 002B     		cmp	r3, #0
 5613 0384 0BD1     		bne	.L383
1775:..\src/interruptions.c ****             // Right / Left hand turn
1776:..\src/interruptions.c ****             if (index == 0) {
 5614              		.loc 1 1776 0
 5615 0386 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5616 038a 002B     		cmp	r3, #0
 5617 038c 07D1     		bne	.L383
1777:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5618              		.loc 1 1777 0
 5619 038e 5F4B     		ldr	r3, .L403+12
 5620 0390 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5621 0394 002B     		cmp	r3, #0
 5622 0396 02D1     		bne	.L383
1778:..\src/interruptions.c ****                     value_encoder *= -1;        
 5623              		.loc 1 1778 0
 5624 0398 BB6A     		ldr	r3, [r7, #40]
 5625 039a 5B42     		negs	r3, r3
 5626 039c BB62     		str	r3, [r7, #40]
 5627              	.L383:
1779:..\src/interruptions.c ****                 }
1780:..\src/interruptions.c ****             }
1781:..\src/interruptions.c ****         } 
1782:..\src/interruptions.c ****         
1783:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5628              		.loc 1 1783 0
 5629 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5630 03a0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5631 03a4 5848     		ldr	r0, .L403+8
 5632 03a6 1346     		mov	r3, r2
 5633 03a8 5B00     		lsls	r3, r3, #1
 5634 03aa 1344     		add	r3, r3, r2
 5635 03ac 9B00     		lsls	r3, r3, #2
 5636 03ae 1344     		add	r3, r3, r2
 5637 03b0 0B44     		add	r3, r3, r1
 5638 03b2 BA6A     		ldr	r2, [r7, #40]
 5639 03b4 40F82320 		str	r2, [r0, r3, lsl #2]
1784:..\src/interruptions.c ****     
1785:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5640              		.loc 1 1785 0
 5641 03b8 BA6A     		ldr	r2, [r7, #40]
 5642 03ba 1346     		mov	r3, r2
 5643 03bc 9B00     		lsls	r3, r3, #2
 5644 03be 1344     		add	r3, r3, r2
 5645 03c0 5B00     		lsls	r3, r3, #1
 5646 03c2 9918     		adds	r1, r3, r2
 5647 03c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5648 03c6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5649 03ca 514C     		ldr	r4, .L403+16
 5650 03cc 1346     		mov	r3, r2
 5651 03ce 5B00     		lsls	r3, r3, #1
 5652 03d0 1344     		add	r3, r3, r2
 5653 03d2 0344     		add	r3, r3, r0
 5654 03d4 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5655 03d8 6FF01102 		mvn	r2, #17
 5656 03dc 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 134


 5657 03e0 1944     		add	r1, r1, r3
 5658 03e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5659 03e4 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5660 03e8 4A4C     		ldr	r4, .L403+20
 5661 03ea 1346     		mov	r3, r2
 5662 03ec 5B00     		lsls	r3, r3, #1
 5663 03ee 1344     		add	r3, r3, r2
 5664 03f0 0344     		add	r3, r3, r0
 5665 03f2 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5666 03f6 1346     		mov	r3, r2
 5667 03f8 DB00     		lsls	r3, r3, #3
 5668 03fa 1344     		add	r3, r3, r2
 5669 03fc 1944     		add	r1, r1, r3
 5670 03fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5671 0400 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5672 0404 444C     		ldr	r4, .L403+24
 5673 0406 1346     		mov	r3, r2
 5674 0408 5B00     		lsls	r3, r3, #1
 5675 040a 1344     		add	r3, r3, r2
 5676 040c 0344     		add	r3, r3, r0
 5677 040e 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5678 0412 5B00     		lsls	r3, r3, #1
 5679 0414 C81A     		subs	r0, r1, r3
 5680 0416 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5681 041a DB00     		lsls	r3, r3, #3
 5682 041c 3F4A     		ldr	r2, .L403+28
 5683 041e 1344     		add	r3, r3, r2
 5684 0420 1946     		mov	r1, r3
 5685 0422 FFF7FEFF 		bl	filter
 5686 0426 0346     		mov	r3, r0
 5687 0428 1BB2     		sxth	r3, r3
 5688 042a 7B61     		str	r3, [r7, #20]
1786:..\src/interruptions.c **** 
1787:..\src/interruptions.c ****         //Update current speed
1788:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5689              		.loc 1 1788 0
 5690 042c 7869     		ldr	r0, [r7, #20]
 5691 042e FFF7FEFF 		bl	__aeabi_i2f
 5692 0432 0446     		mov	r4, r0
 5693 0434 3A4B     		ldr	r3, .L403+32
 5694 0436 1B68     		ldr	r3, [r3]	@ float
 5695 0438 3A49     		ldr	r1, .L403+36
 5696 043a 1846     		mov	r0, r3
 5697 043c FFF7FEFF 		bl	__aeabi_fmul
 5698 0440 0346     		mov	r3, r0
 5699 0442 1946     		mov	r1, r3
 5700 0444 2046     		mov	r0, r4
 5701 0446 FFF7FEFF 		bl	__aeabi_fdiv
 5702 044a 0346     		mov	r3, r0
 5703 044c 1846     		mov	r0, r3
 5704 044e FFF7FEFF 		bl	__aeabi_f2iz
 5705 0452 0346     		mov	r3, r0
 5706 0454 7B61     		str	r3, [r7, #20]
1789:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5707              		.loc 1 1789 0
 5708 0456 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5709 0458 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 135


 5710 045c 2A48     		ldr	r0, .L403+8
 5711 045e 1346     		mov	r3, r2
 5712 0460 5B00     		lsls	r3, r3, #1
 5713 0462 1344     		add	r3, r3, r2
 5714 0464 9B00     		lsls	r3, r3, #2
 5715 0466 1344     		add	r3, r3, r2
 5716 0468 0B44     		add	r3, r3, r1
 5717 046a 0633     		adds	r3, r3, #6
 5718 046c 9B00     		lsls	r3, r3, #2
 5719 046e 0344     		add	r3, r3, r0
 5720 0470 7A69     		ldr	r2, [r7, #20]
 5721 0472 5A60     		str	r2, [r3, #4]
1790:..\src/interruptions.c **** 
1791:..\src/interruptions.c ****         // update old velocity and acceleration values
1792:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5722              		.loc 1 1792 0
 5723 0474 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5724 0476 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5725 047a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5726 047c 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5727 0480 244D     		ldr	r5, .L403+20
 5728 0482 0B46     		mov	r3, r1
 5729 0484 5B00     		lsls	r3, r3, #1
 5730 0486 0B44     		add	r3, r3, r1
 5731 0488 2344     		add	r3, r3, r4
 5732 048a 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5733 048e 224C     		ldr	r4, .L403+24
 5734 0490 1346     		mov	r3, r2
 5735 0492 5B00     		lsls	r3, r3, #1
 5736 0494 1344     		add	r3, r3, r2
 5737 0496 0344     		add	r3, r3, r0
 5738 0498 44F82310 		str	r1, [r4, r3, lsl #2]
1793:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5739              		.loc 1 1793 0
 5740 049c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5741 049e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5742 04a2 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5743 04a4 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5744 04a8 194D     		ldr	r5, .L403+16
 5745 04aa 0B46     		mov	r3, r1
 5746 04ac 5B00     		lsls	r3, r3, #1
 5747 04ae 0B44     		add	r3, r3, r1
 5748 04b0 2344     		add	r3, r3, r4
 5749 04b2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5750 04b6 174C     		ldr	r4, .L403+20
 5751 04b8 1346     		mov	r3, r2
 5752 04ba 5B00     		lsls	r3, r3, #1
 5753 04bc 1344     		add	r3, r3, r2
 5754 04be 0344     		add	r3, r3, r0
 5755 04c0 44F82310 		str	r1, [r4, r3, lsl #2]
1794:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5756              		.loc 1 1794 0
 5757 04c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5758 04c6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5759 04ca 1148     		ldr	r0, .L403+16
 5760 04cc 1346     		mov	r3, r2
 5761 04ce 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 136


 5762 04d0 1344     		add	r3, r3, r2
 5763 04d2 0B44     		add	r3, r3, r1
 5764 04d4 BA6A     		ldr	r2, [r7, #40]
 5765 04d6 40F82320 		str	r2, [r0, r3, lsl #2]
1795:..\src/interruptions.c **** 
1796:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1797:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5766              		.loc 1 1797 0
 5767 04da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5768 04dc 124A     		ldr	r2, .L403+40
 5769 04de D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5770 04e0 002B     		cmp	r3, #0
 5771 04e2 40F03781 		bne	.L384
1798:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 5772              		.loc 1 1798 0
 5773 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5774 04e8 104A     		ldr	r2, .L403+44
 5775 04ea D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5776 04ec 352B     		cmp	r3, #53
 5777 04ee 1FD8     		bhi	.L385
1799:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5778              		.loc 1 1799 0
 5779 04f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5780 04f2 0E4A     		ldr	r2, .L403+44
 5781 04f4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5782 04f6 0132     		adds	r2, r2, #1
 5783 04f8 D1B2     		uxtb	r1, r2
 5784 04fa 0C4A     		ldr	r2, .L403+44
 5785 04fc D154     		strb	r1, [r2, r3]
 5786 04fe 29E1     		b	.L384
 5787              	.L404:
 5788              		.align	2
 5789              	.L403:
 5790 0500 14010000 		.word	error.10398
 5791 0504 E4000000 		.word	last_value_encoder.10396
 5792 0508 00000000 		.word	g_meas
 5793 050c 00000000 		.word	c_mem
 5794 0510 1C010000 		.word	v_value.10403
 5795 0514 34010000 		.word	vv_value.10404
 5796 0518 4C010000 		.word	vvv_value.10405
 5797 051c 00000000 		.word	filt_vel
 5798 0520 00000000 		.word	cycle_time
 5799 0524 0000C040 		.word	1086324736
 5800 0528 00000000 		.word	pos_reconstruct
 5801 052c 64010000 		.word	one_time_execute.10401
 5802              	.L385:
1800:..\src/interruptions.c ****             else {
1801:..\src/interruptions.c **** 
1802:..\src/interruptions.c ****                 //Double encoder translation
1803:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5803              		.loc 1 1803 0
 5804 0530 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5805 0532 AC49     		ldr	r1, .L405
 5806 0534 1346     		mov	r3, r2
 5807 0536 5B00     		lsls	r3, r3, #1
 5808 0538 1344     		add	r3, r3, r2
 5809 053a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 137


 5810 053c 0B44     		add	r3, r3, r1
 5811 053e 03F5D873 		add	r3, r3, #432
 5812 0542 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5813 0544 002B     		cmp	r3, #0
 5814 0546 5ED0     		beq	.L386
1804:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5815              		.loc 1 1804 0
 5816 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5817 054a A749     		ldr	r1, .L405+4
 5818 054c 1346     		mov	r3, r2
 5819 054e 5B00     		lsls	r3, r3, #1
 5820 0550 1344     		add	r3, r3, r2
 5821 0552 9B00     		lsls	r3, r3, #2
 5822 0554 0B44     		add	r3, r3, r1
 5823 0556 1868     		ldr	r0, [r3]
 5824 0558 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5825 055a A349     		ldr	r1, .L405+4
 5826 055c 1346     		mov	r3, r2
 5827 055e 5B00     		lsls	r3, r3, #1
 5828 0560 1344     		add	r3, r3, r2
 5829 0562 9B00     		lsls	r3, r3, #2
 5830 0564 0B44     		add	r3, r3, r1
 5831 0566 0433     		adds	r3, r3, #4
 5832 0568 1C68     		ldr	r4, [r3]
1805:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5833              		.loc 1 1805 0
 5834 056a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5835 056c 9D49     		ldr	r1, .L405
 5836 056e 1346     		mov	r3, r2
 5837 0570 5B00     		lsls	r3, r3, #1
 5838 0572 1344     		add	r3, r3, r2
 5839 0574 1B01     		lsls	r3, r3, #4
 5840 0576 0B44     		add	r3, r3, r1
 5841 0578 03F2B513 		addw	r3, r3, #437
 5842 057c 93F90030 		ldrsb	r3, [r3]
1804:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5843              		.loc 1 1804 0
 5844 0580 1D46     		mov	r5, r3
 5845              		.loc 1 1805 0
 5846 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5847 0584 9749     		ldr	r1, .L405
 5848 0586 1346     		mov	r3, r2
 5849 0588 5B00     		lsls	r3, r3, #1
 5850 058a 1344     		add	r3, r3, r2
 5851 058c 1B01     		lsls	r3, r3, #4
 5852 058e 0B44     		add	r3, r3, r1
 5853 0590 03F5DB73 		add	r3, r3, #438
 5854 0594 93F90030 		ldrsb	r3, [r3]
1804:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5855              		.loc 1 1804 0
 5856 0598 1E46     		mov	r6, r3
 5857              		.loc 1 1805 0
 5858 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5859 059c 9149     		ldr	r1, .L405
 5860 059e 1346     		mov	r3, r2
 5861 05a0 5B00     		lsls	r3, r3, #1
 5862 05a2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 138


 5863 05a4 1B01     		lsls	r3, r3, #4
 5864 05a6 0B44     		add	r3, r3, r1
 5865 05a8 03F2B713 		addw	r3, r3, #439
 5866 05ac 93F90030 		ldrsb	r3, [r3]
1804:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5867              		.loc 1 1804 0
 5868 05b0 0093     		str	r3, [sp]
 5869 05b2 3346     		mov	r3, r6
 5870 05b4 2A46     		mov	r2, r5
 5871 05b6 2146     		mov	r1, r4
 5872 05b8 FFF7FEFF 		bl	calc_turns_fcn
 5873 05bc 0346     		mov	r3, r0
 5874 05be 87F82730 		strb	r3, [r7, #39]
1806:..\src/interruptions.c **** 
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5875              		.loc 1 1808 0
 5876 05c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5877 05c4 8749     		ldr	r1, .L405
 5878 05c6 1346     		mov	r3, r2
 5879 05c8 5B00     		lsls	r3, r3, #1
 5880 05ca 1344     		add	r3, r3, r2
 5881 05cc 1B01     		lsls	r3, r3, #4
 5882 05ce 0B44     		add	r3, r3, r1
 5883 05d0 03F5D273 		add	r3, r3, #420
 5884 05d4 1B68     		ldr	r3, [r3]	@ float
 5885 05d6 4FF00001 		mov	r1, #0
 5886 05da 1846     		mov	r0, r3
 5887 05dc FFF7FEFF 		bl	__aeabi_fcmplt
 5888 05e0 0346     		mov	r3, r0
 5889 05e2 002B     		cmp	r3, #0
 5890 05e4 05D0     		beq	.L387
1809:..\src/interruptions.c ****                         init_rot = -init_rot;
 5891              		.loc 1 1809 0
 5892 05e6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5893 05ea 5B42     		negs	r3, r3
 5894 05ec DBB2     		uxtb	r3, r3
 5895 05ee 87F82730 		strb	r3, [r7, #39]
 5896              	.L387:
1810:..\src/interruptions.c ****                     
1811:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5897              		.loc 1 1811 0
 5898 05f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5899 05f4 7D4A     		ldr	r2, .L405+8
 5900 05f6 3421     		movs	r1, #52
 5901 05f8 01FB03F3 		mul	r3, r1, r3
 5902 05fc 1344     		add	r3, r3, r2
 5903 05fe 1833     		adds	r3, r3, #24
 5904 0600 97F82720 		ldrb	r2, [r7, #39]
 5905 0604 1A70     		strb	r2, [r3]
 5906              	.L386:
1812:..\src/interruptions.c ****                 }    
1813:..\src/interruptions.c **** 
1814:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5907              		.loc 1 1814 0
 5908 0606 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5909 0608 7649     		ldr	r1, .L405
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 139


 5910 060a 1346     		mov	r3, r2
 5911 060c 5B00     		lsls	r3, r3, #1
 5912 060e 1344     		add	r3, r3, r2
 5913 0610 1B01     		lsls	r3, r3, #4
 5914 0612 0B44     		add	r3, r3, r1
 5915 0614 03F5D273 		add	r3, r3, #420
 5916 0618 1B68     		ldr	r3, [r3]	@ float
 5917 061a 4FF07E51 		mov	r1, #1065353216
 5918 061e 1846     		mov	r0, r3
 5919 0620 FFF7FEFF 		bl	__aeabi_fcmpeq
 5920 0624 0346     		mov	r3, r0
 5921 0626 002B     		cmp	r3, #0
 5922 0628 22D1     		bne	.L389
1815:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5923              		.loc 1 1815 0
 5924 062a FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5925 062c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5926 062e 6F4A     		ldr	r2, .L405+8
 5927 0630 3421     		movs	r1, #52
 5928 0632 01FB03F3 		mul	r3, r1, r3
 5929 0636 1344     		add	r3, r3, r2
 5930 0638 1B68     		ldr	r3, [r3]
 5931 063a 1846     		mov	r0, r3
 5932 063c FFF7FEFF 		bl	__aeabi_i2f
 5933 0640 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5934 0642 6849     		ldr	r1, .L405
 5935 0644 1346     		mov	r3, r2
 5936 0646 5B00     		lsls	r3, r3, #1
 5937 0648 1344     		add	r3, r3, r2
 5938 064a 1B01     		lsls	r3, r3, #4
 5939 064c 0B44     		add	r3, r3, r1
 5940 064e 03F5D273 		add	r3, r3, #420
 5941 0652 1B68     		ldr	r3, [r3]	@ float
 5942 0654 1946     		mov	r1, r3
 5943 0656 FFF7FEFF 		bl	__aeabi_fdiv
 5944 065a 0346     		mov	r3, r0
 5945 065c 1846     		mov	r0, r3
 5946 065e FFF7FEFF 		bl	__aeabi_f2iz
 5947 0662 0146     		mov	r1, r0
 5948 0664 614A     		ldr	r2, .L405+8
 5949 0666 3423     		movs	r3, #52
 5950 0668 03FB04F3 		mul	r3, r3, r4
 5951 066c 1344     		add	r3, r3, r2
 5952 066e 1960     		str	r1, [r3]
 5953              	.L389:
1816:..\src/interruptions.c ****                 
1817:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 5954              		.loc 1 1817 0
 5955 0670 97F92730 		ldrsb	r3, [r7, #39]
 5956 0674 1B04     		lsls	r3, r3, #16
 5957 0676 BA6A     		ldr	r2, [r7, #40]
 5958 0678 1344     		add	r3, r3, r2
 5959 067a BB62     		str	r3, [r7, #40]
1818:..\src/interruptions.c ****        
1819:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 5960              		.loc 1 1819 0
 5961 067c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 140


 5962 067e 5949     		ldr	r1, .L405
 5963 0680 1346     		mov	r3, r2
 5964 0682 5B00     		lsls	r3, r3, #1
 5965 0684 1344     		add	r3, r3, r2
 5966 0686 1B01     		lsls	r3, r3, #4
 5967 0688 0B44     		add	r3, r3, r1
 5968 068a 03F5D273 		add	r3, r3, #420
 5969 068e 1B68     		ldr	r3, [r3]	@ float
 5970 0690 4FF07E51 		mov	r1, #1065353216
 5971 0694 1846     		mov	r0, r3
 5972 0696 FFF7FEFF 		bl	__aeabi_fcmpeq
 5973 069a 0346     		mov	r3, r0
 5974 069c 002B     		cmp	r3, #0
 5975 069e 15D1     		bne	.L391
1820:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 5976              		.loc 1 1820 0
 5977 06a0 B86A     		ldr	r0, [r7, #40]
 5978 06a2 FFF7FEFF 		bl	__aeabi_i2f
 5979 06a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5980 06a8 4E49     		ldr	r1, .L405
 5981 06aa 1346     		mov	r3, r2
 5982 06ac 5B00     		lsls	r3, r3, #1
 5983 06ae 1344     		add	r3, r3, r2
 5984 06b0 1B01     		lsls	r3, r3, #4
 5985 06b2 0B44     		add	r3, r3, r1
 5986 06b4 03F5D273 		add	r3, r3, #420
 5987 06b8 1B68     		ldr	r3, [r3]	@ float
 5988 06ba 1946     		mov	r1, r3
 5989 06bc FFF7FEFF 		bl	__aeabi_fmul
 5990 06c0 0346     		mov	r3, r0
 5991 06c2 1846     		mov	r0, r3
 5992 06c4 FFF7FEFF 		bl	__aeabi_f2iz
 5993 06c8 0346     		mov	r3, r0
 5994 06ca BB62     		str	r3, [r7, #40]
 5995              	.L391:
1821:..\src/interruptions.c ****                 }
1822:..\src/interruptions.c **** 
1823:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5996              		.loc 1 1823 0
 5997 06cc 454B     		ldr	r3, .L405
 5998 06ce 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5999 06d2 002B     		cmp	r3, #0
 6000 06d4 07D1     		bne	.L393
1824:..\src/interruptions.c ****                     // Right / Left hand turn
1825:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6001              		.loc 1 1825 0
 6002 06d6 434B     		ldr	r3, .L405
 6003 06d8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6004 06dc 002B     		cmp	r3, #0
 6005 06de 02D1     		bne	.L393
1826:..\src/interruptions.c ****                         value_encoder *= -1;        
 6006              		.loc 1 1826 0
 6007 06e0 BB6A     		ldr	r3, [r7, #40]
 6008 06e2 5B42     		negs	r3, r3
 6009 06e4 BB62     		str	r3, [r7, #40]
 6010              	.L393:
1827:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 141


1828:..\src/interruptions.c ****                 }
1829:..\src/interruptions.c ****          
1830:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6011              		.loc 1 1830 0
 6012 06e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6013 06e8 404A     		ldr	r2, .L405+8
 6014 06ea 3421     		movs	r1, #52
 6015 06ec 01FB03F3 		mul	r3, r1, r3
 6016 06f0 1344     		add	r3, r3, r2
 6017 06f2 BA6A     		ldr	r2, [r7, #40]
 6018 06f4 1A60     		str	r2, [r3]
1831:..\src/interruptions.c ****                 
1832:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6019              		.loc 1 1832 0
 6020 06f6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6021 06f8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6022 06fa 3C49     		ldr	r1, .L405+8
 6023 06fc 3420     		movs	r0, #52
 6024 06fe 00FB02F2 		mul	r2, r0, r2
 6025 0702 0A44     		add	r2, r2, r1
 6026 0704 1268     		ldr	r2, [r2]
 6027 0706 3A49     		ldr	r1, .L405+12
 6028 0708 1B01     		lsls	r3, r3, #4
 6029 070a 0B44     		add	r3, r3, r1
 6030 070c 1A60     		str	r2, [r3]
1833:..\src/interruptions.c **** 
1834:..\src/interruptions.c ****                 // If necessary activate motor
1835:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6031              		.loc 1 1835 0
 6032 070e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6033 0710 384A     		ldr	r2, .L405+16
 6034 0712 0121     		movs	r1, #1
 6035 0714 D154     		strb	r1, [r2, r3]
1836:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1837:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6036              		.loc 1 1837 0
 6037 0716 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6038 0718 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6039 071a 3248     		ldr	r0, .L405
 6040 071c 1346     		mov	r3, r2
 6041 071e DB00     		lsls	r3, r3, #3
 6042 0720 9B1A     		subs	r3, r3, r2
 6043 0722 1B01     		lsls	r3, r3, #4
 6044 0724 0344     		add	r3, r3, r0
 6045 0726 E033     		adds	r3, r3, #224
 6046 0728 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6047 072a 314A     		ldr	r2, .L405+12
 6048 072c 0B01     		lsls	r3, r1, #4
 6049 072e 1344     		add	r3, r3, r2
 6050 0730 0C33     		adds	r3, r3, #12
 6051 0732 0246     		mov	r2, r0
 6052 0734 1A70     		strb	r2, [r3]
1838:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6053              		.loc 1 1838 0
 6054 0736 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6055 0738 2D4A     		ldr	r2, .L405+12
 6056 073a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 142


 6057 073c 1344     		add	r3, r3, r2
 6058 073e 0C33     		adds	r3, r3, #12
 6059 0740 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6060 0742 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6061 0744 1146     		mov	r1, r2
 6062 0746 1846     		mov	r0, r3
 6063 0748 FFF7FEFF 		bl	enable_motor
1839:..\src/interruptions.c ****                 
1840:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6064              		.loc 1 1840 0
 6065 074c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6066 074e 2A4A     		ldr	r2, .L405+20
 6067 0750 0121     		movs	r1, #1
 6068 0752 D154     		strb	r1, [r2, r3]
 6069              	.L384:
1702:..\src/interruptions.c ****         
 6070              		.loc 1 1702 0 discriminator 2
 6071 0754 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6072 0758 0133     		adds	r3, r3, #1
 6073 075a 87F82F30 		strb	r3, [r7, #47]
 6074              	.L373:
1702:..\src/interruptions.c ****         
 6075              		.loc 1 1702 0 is_stmt 0 discriminator 1
 6076 075e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6077 0762 022B     		cmp	r3, #2
 6078 0764 7FF6C8AC 		bls	.L394
1841:..\src/interruptions.c ****             }
1842:..\src/interruptions.c ****         }
1843:..\src/interruptions.c ****     } 
1844:..\src/interruptions.c **** 
1845:..\src/interruptions.c **** 	
1846:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1847:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6079              		.loc 1 1847 0 is_stmt 1
 6080 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6081 076a 224A     		ldr	r2, .L405+16
 6082 076c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6083 076e 002B     		cmp	r3, #0
 6084 0770 35D0     		beq	.L364
1848:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6085              		.loc 1 1848 0
 6086 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6087 0774 214A     		ldr	r2, .L405+24
 6088 0776 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6089 077a 0132     		adds	r2, r2, #1
 6090 077c 1F49     		ldr	r1, .L405+24
 6091 077e 41F82320 		str	r2, [r1, r3, lsl #2]
1849:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6092              		.loc 1 1849 0
 6093 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6094 0784 1D4A     		ldr	r2, .L405+24
 6095 0786 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6096 078a B3F5FA5F 		cmp	r3, #8000
 6097 078e 26D3     		bcc	.L364
1850:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6098              		.loc 1 1850 0
 6099 0790 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 143


 6100 0792 174A     		ldr	r2, .L405+12
 6101 0794 1B01     		lsls	r3, r3, #4
 6102 0796 1344     		add	r3, r3, r2
 6103 0798 0022     		movs	r2, #0
 6104 079a 1A60     		str	r2, [r3]
1851:..\src/interruptions.c ****             
1852:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1853:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6105              		.loc 1 1853 0
 6106 079c B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6107 079e BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6108 07a0 1048     		ldr	r0, .L405
 6109 07a2 1346     		mov	r3, r2
 6110 07a4 DB00     		lsls	r3, r3, #3
 6111 07a6 9B1A     		subs	r3, r3, r2
 6112 07a8 1B01     		lsls	r3, r3, #4
 6113 07aa 0344     		add	r3, r3, r0
 6114 07ac E033     		adds	r3, r3, #224
 6115 07ae 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6116 07b0 0F4A     		ldr	r2, .L405+12
 6117 07b2 0B01     		lsls	r3, r1, #4
 6118 07b4 1344     		add	r3, r3, r2
 6119 07b6 0C33     		adds	r3, r3, #12
 6120 07b8 0246     		mov	r2, r0
 6121 07ba 1A70     		strb	r2, [r3]
1854:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6122              		.loc 1 1854 0
 6123 07bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6124 07be 0C4A     		ldr	r2, .L405+12
 6125 07c0 1B01     		lsls	r3, r3, #4
 6126 07c2 1344     		add	r3, r3, r2
 6127 07c4 0C33     		adds	r3, r3, #12
 6128 07c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6129 07c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6130 07ca 1146     		mov	r1, r2
 6131 07cc 1846     		mov	r0, r3
 6132 07ce FFF7FEFF 		bl	enable_motor
1855:..\src/interruptions.c ****                         
1856:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6133              		.loc 1 1856 0
 6134 07d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6135 07d4 074A     		ldr	r2, .L405+16
 6136 07d6 0021     		movs	r1, #0
 6137 07d8 D154     		strb	r1, [r2, r3]
 6138 07da 00E0     		b	.L364
 6139              	.L400:
1757:..\src/interruptions.c ****                 }
 6140              		.loc 1 1757 0
 6141 07dc 00BF     		nop
 6142              	.L364:
1857:..\src/interruptions.c ****         }
1858:..\src/interruptions.c ****     }
1859:..\src/interruptions.c ****  
1860:..\src/interruptions.c **** }
 6143              		.loc 1 1860 0
 6144 07de 3437     		adds	r7, r7, #52
 6145              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 144


 6146 07e0 BD46     		mov	sp, r7
 6147              		.cfi_def_cfa_register 13
 6148              		@ sp needed
 6149 07e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 6150              	.L406:
 6151              		.align	2
 6152              	.L405:
 6153 07e4 00000000 		.word	c_mem
 6154 07e8 FC000000 		.word	comp_value_encoder.10397
 6155 07ec 00000000 		.word	g_meas
 6156 07f0 00000000 		.word	g_refNew
 6157 07f4 68010000 		.word	safe_startup_motor_activation.10400
 6158 07f8 00000000 		.word	pos_reconstruct
 6159 07fc 6C010000 		.word	count_startup_motor.10402
 6160              		.cfi_endproc
 6161              	.LFE74:
 6162              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6163              		.global	__aeabi_f2d
 6164              		.global	__aeabi_ddiv
 6165              		.global	__aeabi_d2f
 6166              		.section	.text.analog_read_end,"ax",%progbits
 6167              		.align	2
 6168              		.global	analog_read_end
 6169              		.thumb
 6170              		.thumb_func
 6171              		.type	analog_read_end, %function
 6172              	analog_read_end:
 6173              	.LFB75:
1861:..\src/interruptions.c **** 
1862:..\src/interruptions.c **** //==============================================================================
1863:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1864:..\src/interruptions.c **** //==============================================================================
1865:..\src/interruptions.c **** 
1866:..\src/interruptions.c **** void analog_read_end() {
 6174              		.loc 1 1866 0
 6175              		.cfi_startproc
 6176              		@ args = 0, pretend = 0, frame = 8
 6177              		@ frame_needed = 1, uses_anonymous_args = 0
 6178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6179              		.cfi_def_cfa_offset 20
 6180              		.cfi_offset 4, -20
 6181              		.cfi_offset 5, -16
 6182              		.cfi_offset 6, -12
 6183              		.cfi_offset 7, -8
 6184              		.cfi_offset 14, -4
 6185 0002 83B0     		sub	sp, sp, #12
 6186              		.cfi_def_cfa_offset 32
 6187 0004 00AF     		add	r7, sp, #0
 6188              		.cfi_def_cfa_register 7
1867:..\src/interruptions.c **** 
1868:..\src/interruptions.c ****     /* =========================================================================
1869:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1870:..\src/interruptions.c ****     /
1871:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1872:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1873:..\src/interruptions.c ****     /
1874:..\src/interruptions.c ****     /   Definition:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 145


1875:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1876:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1877:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1878:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1879:..\src/interruptions.c ****     /
1880:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1881:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1882:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1883:..\src/interruptions.c ****     /  =========================================================================
1884:..\src/interruptions.c ****     */
1885:..\src/interruptions.c **** 
1886:..\src/interruptions.c ****     int32 CYDATA i_aux;
1887:..\src/interruptions.c **** 
1888:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1889:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1890:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1891:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1892:..\src/interruptions.c ****     static int32 UD_mean_value;
1893:..\src/interruptions.c ****     static int32 LR_mean_value;
1894:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1895:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1896:..\src/interruptions.c ****     static uint16 count = 0;
1897:..\src/interruptions.c ****     static uint32 v_count = 0;
1898:..\src/interruptions.c ****     static uint8 idx = 0;
1899:..\src/interruptions.c ****     
1900:..\src/interruptions.c ****     
1901:..\src/interruptions.c ****     // Wait for conversion end
1902:..\src/interruptions.c ****     
1903:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6189              		.loc 1 1903 0
 6190 0006 08E0     		b	.L408
 6191              	.L409:
1904:..\src/interruptions.c ****         
1905:..\src/interruptions.c ****         if (interrupt_flag){
 6192              		.loc 1 1905 0
 6193 0008 834B     		ldr	r3, .L566+8
 6194 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6195 000c 002B     		cmp	r3, #0
 6196 000e 04D0     		beq	.L408
1906:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6197              		.loc 1 1906 0
 6198 0010 814B     		ldr	r3, .L566+8
 6199 0012 0022     		movs	r2, #0
 6200 0014 1A70     		strb	r2, [r3]
1907:..\src/interruptions.c ****             interrupt_manager();
 6201              		.loc 1 1907 0
 6202 0016 FFF7FEFF 		bl	interrupt_manager
 6203              	.L408:
1903:..\src/interruptions.c ****         
 6204              		.loc 1 1903 0
 6205 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6206 001e 0346     		mov	r3, r0
 6207 0020 002B     		cmp	r3, #0
 6208 0022 F1D0     		beq	.L409
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     }
1910:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 146


1911:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1912:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6209              		.loc 1 1912 0
 6210 0024 7D4B     		ldr	r3, .L566+12
 6211 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6212 002a 022B     		cmp	r3, #2
 6213 002c 34D1     		bne	.L410
1913:..\src/interruptions.c ****         // Read pressure in any case
1914:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
 6214              		.loc 1 1914 0
 6215 002e 7C4B     		ldr	r3, .L566+16
 6216 0030 B3F90030 		ldrsh	r3, [r3]
 6217 0034 A3F20463 		subw	r3, r3, #1540
 6218 0038 1846     		mov	r0, r3
 6219 003a FFF7FEFF 		bl	__aeabi_i2f
 6220 003e 0246     		mov	r2, r0
 6221 0040 784B     		ldr	r3, .L566+20
 6222 0042 1A60     		str	r2, [r3]	@ float
1915:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
 6223              		.loc 1 1915 0
 6224 0044 774B     		ldr	r3, .L566+20
 6225 0046 1B68     		ldr	r3, [r3]	@ float
 6226 0048 1846     		mov	r0, r3
 6227 004a FFF7FEFF 		bl	__aeabi_f2d
 6228 004e 4FF00002 		mov	r2, #0
 6229 0052 754B     		ldr	r3, .L566+24
 6230 0054 FFF7FEFF 		bl	__aeabi_ddiv
 6231 0058 0346     		mov	r3, r0
 6232 005a 0C46     		mov	r4, r1
 6233 005c 1846     		mov	r0, r3
 6234 005e 2146     		mov	r1, r4
 6235 0060 6BA3     		adr	r3, .L566
 6236 0062 D3E90023 		ldrd	r2, [r3]
 6237 0066 FFF7FEFF 		bl	__aeabi_ddiv
 6238 006a 0346     		mov	r3, r0
 6239 006c 0C46     		mov	r4, r1
 6240 006e 1846     		mov	r0, r3
 6241 0070 2146     		mov	r1, r4
 6242 0072 FFF7FEFF 		bl	__aeabi_d2f
 6243 0076 0246     		mov	r2, r0
 6244 0078 6A4B     		ldr	r3, .L566+20
 6245 007a 1A60     		str	r2, [r3]	@ float
1916:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
 6246              		.loc 1 1916 0
 6247 007c 694B     		ldr	r3, .L566+20
 6248 007e 1B68     		ldr	r3, [r3]	@ float
 6249 0080 4FF00001 		mov	r1, #0
 6250 0084 1846     		mov	r0, r3
 6251 0086 FFF7FEFF 		bl	__aeabi_fcmplt
 6252 008a 0346     		mov	r3, r0
 6253 008c 002B     		cmp	r3, #0
 6254 008e 03D0     		beq	.L410
 6255              		.loc 1 1916 0 is_stmt 0 discriminator 1
 6256 0090 644B     		ldr	r3, .L566+20
 6257 0092 4FF00002 		mov	r2, #0
 6258 0096 1A60     		str	r2, [r3]	@ float
 6259              	.L410:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 147


1917:..\src/interruptions.c ****     }
1918:..\src/interruptions.c **** #endif
1919:..\src/interruptions.c ****  
1920:..\src/interruptions.c **** flag_master =  ((int32)(ADC_buf[1] - 1621) * 1990) >> 7;
 6260              		.loc 1 1920 0 is_stmt 1
 6261 0098 614B     		ldr	r3, .L566+16
 6262 009a B3F90230 		ldrsh	r3, [r3, #2]
 6263 009e A3F25563 		subw	r3, r3, #1621
 6264 00a2 40F2C672 		movw	r2, #1990
 6265 00a6 02FB03F3 		mul	r3, r2, r3
 6266 00aa DB11     		asrs	r3, r3, #7
 6267 00ac 5F4A     		ldr	r2, .L566+28
 6268 00ae 1360     		str	r3, [r2]
1921:..\src/interruptions.c ****     
1922:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1923:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6269              		.loc 1 1923 0
 6270 00b0 5F4B     		ldr	r3, .L566+32
 6271 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6272 00b4 042B     		cmp	r3, #4
 6273 00b6 0BD9     		bls	.L412
1924:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6274              		.loc 1 1924 0
 6275 00b8 594B     		ldr	r3, .L566+16
 6276 00ba B3F90830 		ldrsh	r3, [r3, #8]
 6277 00be A3F25563 		subw	r3, r3, #1621
 6278 00c2 40F2C672 		movw	r2, #1990
 6279 00c6 02FB03F3 		mul	r3, r2, r3
 6280 00ca DB11     		asrs	r3, r3, #7
 6281 00cc 594A     		ldr	r2, .L566+36
 6282 00ce 5360     		str	r3, [r2, #4]
 6283              	.L412:
1925:..\src/interruptions.c ****     }
1926:..\src/interruptions.c ****     
1927:..\src/interruptions.c ****     if (interrupt_flag){
 6284              		.loc 1 1927 0
 6285 00d0 514B     		ldr	r3, .L566+8
 6286 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6287 00d4 002B     		cmp	r3, #0
 6288 00d6 04D0     		beq	.L413
1928:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6289              		.loc 1 1928 0
 6290 00d8 4F4B     		ldr	r3, .L566+8
 6291 00da 0022     		movs	r2, #0
 6292 00dc 1A70     		strb	r2, [r3]
1929:..\src/interruptions.c ****         interrupt_manager();
 6293              		.loc 1 1929 0
 6294 00de FFF7FEFF 		bl	interrupt_manager
 6295              	.L413:
1930:..\src/interruptions.c ****     }
1931:..\src/interruptions.c ****     
1932:..\src/interruptions.c ****     // Update cycle power value
1933:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6296              		.loc 1 1933 0
 6297 00e2 544B     		ldr	r3, .L566+36
 6298 00e4 1B68     		ldr	r3, [r3]
 6299 00e6 544A     		ldr	r2, .L566+40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 148


 6300 00e8 82FB0312 		smull	r1, r2, r2, r3
 6301 00ec D211     		asrs	r2, r2, #7
 6302 00ee DB17     		asrs	r3, r3, #31
 6303 00f0 D31A     		subs	r3, r2, r3
 6304 00f2 5249     		ldr	r1, .L566+44
 6305 00f4 1846     		mov	r0, r3
 6306 00f6 FFF7FEFF 		bl	filter
 6307 00fa 0246     		mov	r2, r0
 6308 00fc 504B     		ldr	r3, .L566+48
 6309 00fe 1A60     		str	r2, [r3]
1934:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6310              		.loc 1 1934 0
 6311 0100 504B     		ldr	r3, .L566+52
 6312 0102 1B68     		ldr	r3, [r3]
 6313 0104 002B     		cmp	r3, #0
 6314 0106 08DA     		bge	.L414
 6315              		.loc 1 1934 0 is_stmt 0 discriminator 1
 6316 0108 4D4B     		ldr	r3, .L566+48
 6317 010a 1B68     		ldr	r3, [r3]
 6318 010c 002B     		cmp	r3, #0
 6319 010e 04DB     		blt	.L414
1935:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6320              		.loc 1 1935 0 is_stmt 1
 6321 0110 4D4B     		ldr	r3, .L566+56
 6322 0112 1B6E     		ldr	r3, [r3, #96]
 6323 0114 0133     		adds	r3, r3, #1
 6324 0116 4C4A     		ldr	r2, .L566+56
 6325 0118 1366     		str	r3, [r2, #96]
 6326              	.L414:
1936:..\src/interruptions.c ****     }
1937:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6327              		.loc 1 1937 0
 6328 011a 494B     		ldr	r3, .L566+48
 6329 011c 1B68     		ldr	r3, [r3]
 6330 011e 494A     		ldr	r2, .L566+52
 6331 0120 1360     		str	r3, [r2]
1938:..\src/interruptions.c ****   
1939:..\src/interruptions.c ****     
1940:..\src/interruptions.c ****     // VOLTAGE READING
1941:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1942:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1943:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1944:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1945:..\src/interruptions.c ****     
1946:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6332              		.loc 1 1946 0
 6333 0122 4A4B     		ldr	r3, .L566+60
 6334 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6335 0126 002B     		cmp	r3, #0
 6336 0128 4DD0     		beq	.L415
 6337              		.loc 1 1946 0 is_stmt 0 discriminator 1
 6338 012a 494B     		ldr	r3, .L566+64
 6339 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6340 012e 002B     		cmp	r3, #0
 6341 0130 49D0     		beq	.L415
1947:..\src/interruptions.c ****         count = count + 1;
 6342              		.loc 1 1947 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 149


 6343 0132 484B     		ldr	r3, .L566+68
 6344 0134 1B88     		ldrh	r3, [r3]
 6345 0136 0133     		adds	r3, r3, #1
 6346 0138 9AB2     		uxth	r2, r3
 6347 013a 464B     		ldr	r3, .L566+68
 6348 013c 1A80     		strh	r2, [r3]	@ movhi
1948:..\src/interruptions.c ****         
1949:..\src/interruptions.c ****         if (count == 1000){
 6349              		.loc 1 1949 0
 6350 013e 454B     		ldr	r3, .L566+68
 6351 0140 1B88     		ldrh	r3, [r3]
 6352 0142 B3F57A7F 		cmp	r3, #1000
 6353 0146 3ED1     		bne	.L415
1950:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6354              		.loc 1 1950 0
 6355 0148 434B     		ldr	r3, .L566+72
 6356 014a 0022     		movs	r2, #0
 6357 014c 1A70     		strb	r2, [r3]
 6358 014e 33E0     		b	.L416
 6359              	.L420:
1951:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6360              		.loc 1 1951 0
 6361 0150 414B     		ldr	r3, .L566+72
 6362 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6363 0154 1A46     		mov	r2, r3
 6364 0156 374B     		ldr	r3, .L566+36
 6365 0158 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6366 015c 42F22732 		movw	r2, #8999
 6367 0160 9342     		cmp	r3, r2
 6368 0162 08DC     		bgt	.L417
1952:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6369              		.loc 1 1952 0
 6370 0164 3C4B     		ldr	r3, .L566+72
 6371 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6372 0168 1946     		mov	r1, r3
 6373 016a 3C4B     		ldr	r3, .L566+76
 6374 016c 4FF4FA52 		mov	r2, #8000
 6375 0170 43F82120 		str	r2, [r3, r1, lsl #2]
 6376 0174 1AE0     		b	.L418
 6377              	.L417:
1953:..\src/interruptions.c ****                 }
1954:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1955:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6378              		.loc 1 1955 0
 6379 0176 384B     		ldr	r3, .L566+72
 6380 0178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6381 017a 1A46     		mov	r2, r3
 6382 017c 2D4B     		ldr	r3, .L566+36
 6383 017e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6384 0182 43F2C722 		movw	r2, #12999
 6385 0186 9342     		cmp	r3, r2
 6386 0188 08DC     		bgt	.L419
1956:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6387              		.loc 1 1956 0
 6388 018a 334B     		ldr	r3, .L566+72
 6389 018c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6390 018e 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 150


 6391 0190 324B     		ldr	r3, .L566+76
 6392 0192 42F6E062 		movw	r2, #12000
 6393 0196 43F82120 		str	r2, [r3, r1, lsl #2]
 6394 019a 07E0     		b	.L418
 6395              	.L419:
1957:..\src/interruptions.c ****                     }
1958:..\src/interruptions.c ****                     else
1959:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6396              		.loc 1 1959 0
 6397 019c 2E4B     		ldr	r3, .L566+72
 6398 019e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6399 01a0 1946     		mov	r1, r3
 6400 01a2 2E4B     		ldr	r3, .L566+76
 6401 01a4 45F6C052 		movw	r2, #24000
 6402 01a8 43F82120 		str	r2, [r3, r1, lsl #2]
 6403              	.L418:
1950:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6404              		.loc 1 1950 0 discriminator 2
 6405 01ac 2A4B     		ldr	r3, .L566+72
 6406 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6407 01b0 0133     		adds	r3, r3, #1
 6408 01b2 DAB2     		uxtb	r2, r3
 6409 01b4 284B     		ldr	r3, .L566+72
 6410 01b6 1A70     		strb	r2, [r3]
 6411              	.L416:
1950:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6412              		.loc 1 1950 0 is_stmt 0 discriminator 1
 6413 01b8 274B     		ldr	r3, .L566+72
 6414 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6415 01bc 012B     		cmp	r3, #1
 6416 01be C7D9     		bls	.L420
1960:..\src/interruptions.c ****                 }
1961:..\src/interruptions.c ****             }
1962:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6417              		.loc 1 1962 0 is_stmt 1
 6418 01c0 224B     		ldr	r3, .L566+60
 6419 01c2 0022     		movs	r2, #0
 6420 01c4 1A70     		strb	r2, [r3]
 6421              	.L415:
1963:..\src/interruptions.c ****         }
1964:..\src/interruptions.c ****     }
1965:..\src/interruptions.c **** 
1966:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1967:..\src/interruptions.c **** 
1968:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6422              		.loc 1 1968 0
 6423 01c6 1B4B     		ldr	r3, .L566+36
 6424 01c8 1B68     		ldr	r3, [r3]
 6425 01ca 41F66312 		movw	r2, #6499
 6426 01ce 9342     		cmp	r3, r2
 6427 01d0 00F3FE80 		bgt	.L421
 6428              		.loc 1 1968 0 is_stmt 0 discriminator 1
 6429 01d4 164B     		ldr	r3, .L566+32
 6430 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6431 01d8 042B     		cmp	r3, #4
 6432 01da 06D9     		bls	.L422
 6433              		.loc 1 1968 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 151


 6434 01dc 154B     		ldr	r3, .L566+36
 6435 01de 5B68     		ldr	r3, [r3, #4]
 6436 01e0 41F66312 		movw	r2, #6499
 6437 01e4 9342     		cmp	r3, r2
 6438 01e6 00F3F380 		bgt	.L421
 6439              	.L422:
1969:..\src/interruptions.c ****         // PSoC is powered through uUSB
1970:..\src/interruptions.c ****         
1971:..\src/interruptions.c ****         tension_valid = FALSE;
 6440              		.loc 1 1971 0 is_stmt 1
 6441 01ea 194B     		ldr	r3, .L566+64
 6442 01ec 0022     		movs	r2, #0
 6443 01ee 1A70     		strb	r2, [r3]
1972:..\src/interruptions.c ****             
1973:..\src/interruptions.c ****         if (interrupt_flag){
 6444              		.loc 1 1973 0
 6445 01f0 094B     		ldr	r3, .L566+8
 6446 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6447 01f4 002B     		cmp	r3, #0
 6448 01f6 04D0     		beq	.L423
1974:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6449              		.loc 1 1974 0
 6450 01f8 074B     		ldr	r3, .L566+8
 6451 01fa 0022     		movs	r2, #0
 6452 01fc 1A70     		strb	r2, [r3]
1975:..\src/interruptions.c ****             interrupt_manager();
 6453              		.loc 1 1975 0
 6454 01fe FFF7FEFF 		bl	interrupt_manager
 6455              	.L423:
1976:..\src/interruptions.c ****         }
1977:..\src/interruptions.c ****         
1978:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6456              		.loc 1 1978 0
 6457 0202 154B     		ldr	r3, .L566+72
 6458 0204 0022     		movs	r2, #0
 6459 0206 1A70     		strb	r2, [r3]
 6460 0208 ACE0     		b	.L424
 6461              	.L567:
 6462 020a 00BFAFF3 		.align	3
 6462      0080
 6463              	.L566:
 6464 0210 FCA9F1D2 		.word	-755914244
 6465 0214 4D62703F 		.word	1064329805
 6466 0218 00000000 		.word	interrupt_flag
 6467 021c 00000000 		.word	c_mem
 6468 0220 00000000 		.word	ADC_buf
 6469 0224 00000000 		.word	g_fb_meas
 6470 0228 0000B040 		.word	1085276160
 6471 022c 00000000 		.word	flag_master
 6472 0230 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6473 0234 00000000 		.word	dev_tension
 6474 0238 F1197605 		.word	91625969
 6475 023c 00000000 		.word	filt_detect_pc
 6476 0240 00000000 		.word	detect_power_cycle
 6477 0244 08000000 		.word	detect_power_cycle_prev.10429
 6478 0248 00000000 		.word	g_mem
 6479 024c 0C000000 		.word	first_tension_valid.10428
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 152


 6480 0250 00000000 		.word	tension_valid
 6481 0254 74010000 		.word	count.10430
 6482 0258 76010000 		.word	idx.10432
 6483 025c 00000000 		.word	pow_tension
 6484              	.L427:
1979:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6485              		.loc 1 1979 0
 6486 0260 9F4B     		ldr	r3, .L568
 6487 0262 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6488 0266 002B     		cmp	r3, #0
 6489 0268 59D0     		beq	.L425
1980:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6490              		.loc 1 1980 0
 6491 026a 9E4B     		ldr	r3, .L568+4
 6492 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6493 026e 1946     		mov	r1, r3
 6494 0270 9B4A     		ldr	r2, .L568
 6495 0272 0B46     		mov	r3, r1
 6496 0274 DB00     		lsls	r3, r3, #3
 6497 0276 5B1A     		subs	r3, r3, r1
 6498 0278 1B01     		lsls	r3, r3, #4
 6499 027a 1344     		add	r3, r3, r2
 6500 027c 03F58773 		add	r3, r3, #270
 6501 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6502 0282 022B     		cmp	r3, #2
 6503 0284 37D0     		beq	.L426
1981:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6504              		.loc 1 1981 0 discriminator 1
 6505 0286 974B     		ldr	r3, .L568+4
 6506 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6507 028a 1946     		mov	r1, r3
 6508 028c 944A     		ldr	r2, .L568
 6509 028e 0B46     		mov	r3, r1
 6510 0290 DB00     		lsls	r3, r3, #3
 6511 0292 5B1A     		subs	r3, r3, r1
 6512 0294 1B01     		lsls	r3, r3, #4
 6513 0296 1344     		add	r3, r3, r2
 6514 0298 03F58773 		add	r3, r3, #270
 6515 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1980:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6516              		.loc 1 1980 0 discriminator 1
 6517 029e 032B     		cmp	r3, #3
 6518 02a0 29D0     		beq	.L426
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6519              		.loc 1 1982 0
 6520 02a2 904B     		ldr	r3, .L568+4
 6521 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6522 02a6 1946     		mov	r1, r3
 6523 02a8 8D4A     		ldr	r2, .L568
 6524 02aa 0B46     		mov	r3, r1
 6525 02ac DB00     		lsls	r3, r3, #3
 6526 02ae 5B1A     		subs	r3, r3, r1
 6527 02b0 1B01     		lsls	r3, r3, #4
 6528 02b2 1344     		add	r3, r3, r2
 6529 02b4 03F58773 		add	r3, r3, #270
 6530 02b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1981:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 153


 6531              		.loc 1 1981 0
 6532 02ba 042B     		cmp	r3, #4
 6533 02bc 1BD0     		beq	.L426
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6534              		.loc 1 1983 0
 6535 02be 894B     		ldr	r3, .L568+4
 6536 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6537 02c2 1946     		mov	r1, r3
 6538 02c4 864A     		ldr	r2, .L568
 6539 02c6 0B46     		mov	r3, r1
 6540 02c8 DB00     		lsls	r3, r3, #3
 6541 02ca 5B1A     		subs	r3, r3, r1
 6542 02cc 1B01     		lsls	r3, r3, #4
 6543 02ce 1344     		add	r3, r3, r2
 6544 02d0 03F58773 		add	r3, r3, #270
 6545 02d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6546              		.loc 1 1982 0
 6547 02d6 052B     		cmp	r3, #5
 6548 02d8 0DD0     		beq	.L426
1984:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6549              		.loc 1 1984 0
 6550 02da 824B     		ldr	r3, .L568+4
 6551 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6552 02de 1946     		mov	r1, r3
 6553 02e0 7F4A     		ldr	r2, .L568
 6554 02e2 0B46     		mov	r3, r1
 6555 02e4 DB00     		lsls	r3, r3, #3
 6556 02e6 5B1A     		subs	r3, r3, r1
 6557 02e8 1B01     		lsls	r3, r3, #4
 6558 02ea 1344     		add	r3, r3, r2
 6559 02ec 03F58773 		add	r3, r3, #270
 6560 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1983:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6561              		.loc 1 1983 0
 6562 02f2 072B     		cmp	r3, #7
 6563 02f4 13D1     		bne	.L425
 6564              	.L426:
1985:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6565              		.loc 1 1985 0
 6566 02f6 7B4B     		ldr	r3, .L568+4
 6567 02f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6568 02fa 7B4A     		ldr	r2, .L568+8
 6569 02fc 1B01     		lsls	r3, r3, #4
 6570 02fe 1344     		add	r3, r3, r2
 6571 0300 0C33     		adds	r3, r3, #12
 6572 0302 0022     		movs	r2, #0
 6573 0304 1A70     		strb	r2, [r3]
1986:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6574              		.loc 1 1986 0
 6575 0306 774B     		ldr	r3, .L568+4
 6576 0308 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6577 030a 764B     		ldr	r3, .L568+4
 6578 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6579 030e 764A     		ldr	r2, .L568+8
 6580 0310 1B01     		lsls	r3, r3, #4
 6581 0312 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 154


 6582 0314 0C33     		adds	r3, r3, #12
 6583 0316 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6584 0318 1946     		mov	r1, r3
 6585 031a FFF7FEFF 		bl	enable_motor
 6586              	.L425:
1987:..\src/interruptions.c ****                     
1988:..\src/interruptions.c ****                 }
1989:..\src/interruptions.c ****             }
1990:..\src/interruptions.c **** 
1991:..\src/interruptions.c ****             // Assign dev_tension and reset current
1992:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6587              		.loc 1 1992 0 discriminator 2
 6588 031e 714B     		ldr	r3, .L568+4
 6589 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6590 0322 1946     		mov	r1, r3
 6591 0324 714B     		ldr	r3, .L568+12
 6592 0326 41F28832 		movw	r2, #5000
 6593 032a 43F82120 		str	r2, [r3, r1, lsl #2]
1993:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6594              		.loc 1 1993 0 discriminator 2
 6595 032e 6D4B     		ldr	r3, .L568+4
 6596 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6597 0332 1946     		mov	r1, r3
 6598 0334 6E4A     		ldr	r2, .L568+16
 6599 0336 0B46     		mov	r3, r1
 6600 0338 DB00     		lsls	r3, r3, #3
 6601 033a 5B1A     		subs	r3, r3, r1
 6602 033c 1B01     		lsls	r3, r3, #4
 6603 033e 1344     		add	r3, r3, r2
 6604 0340 03F58873 		add	r3, r3, #272
 6605 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6606 0346 1946     		mov	r1, r3
 6607 0348 6A4A     		ldr	r2, .L568+20
 6608 034a 3423     		movs	r3, #52
 6609 034c 03FB01F3 		mul	r3, r3, r1
 6610 0350 1344     		add	r3, r3, r2
 6611 0352 0C33     		adds	r3, r3, #12
 6612 0354 0022     		movs	r2, #0
 6613 0356 1A60     		str	r2, [r3]
1978:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6614              		.loc 1 1978 0 discriminator 2
 6615 0358 624B     		ldr	r3, .L568+4
 6616 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6617 035c 0133     		adds	r3, r3, #1
 6618 035e DAB2     		uxtb	r2, r3
 6619 0360 604B     		ldr	r3, .L568+4
 6620 0362 1A70     		strb	r2, [r3]
 6621              	.L424:
1978:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6622              		.loc 1 1978 0 is_stmt 0 discriminator 1
 6623 0364 5F4B     		ldr	r3, .L568+4
 6624 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6625 0368 012B     		cmp	r3, #1
 6626 036a 7FF679AF 		bls	.L427
1994:..\src/interruptions.c ****         }
1995:..\src/interruptions.c ****         
1996:..\src/interruptions.c ****         // Reset emg
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 155


1997:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6627              		.loc 1 1997 0 is_stmt 1
 6628 036e 5D4B     		ldr	r3, .L568+4
 6629 0370 0022     		movs	r2, #0
 6630 0372 1A70     		strb	r2, [r3]
 6631 0374 0CE0     		b	.L428
 6632              	.L429:
1998:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6633              		.loc 1 1998 0 discriminator 3
 6634 0376 5B4B     		ldr	r3, .L568+4
 6635 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6636 037a 1946     		mov	r1, r3
 6637 037c 5E4B     		ldr	r3, .L568+24
 6638 037e 0022     		movs	r2, #0
 6639 0380 43F82120 		str	r2, [r3, r1, lsl #2]
1997:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6640              		.loc 1 1997 0 discriminator 3
 6641 0384 574B     		ldr	r3, .L568+4
 6642 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6643 0388 0133     		adds	r3, r3, #1
 6644 038a DAB2     		uxtb	r2, r3
 6645 038c 554B     		ldr	r3, .L568+4
 6646 038e 1A70     		strb	r2, [r3]
 6647              	.L428:
1997:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6648              		.loc 1 1997 0 is_stmt 0 discriminator 1
 6649 0390 544B     		ldr	r3, .L568+4
 6650 0392 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6651 0394 012B     		cmp	r3, #1
 6652 0396 EED9     		bls	.L429
1999:..\src/interruptions.c ****         }
2000:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6653              		.loc 1 2000 0 is_stmt 1
 6654 0398 524B     		ldr	r3, .L568+4
 6655 039a 0022     		movs	r2, #0
 6656 039c 1A70     		strb	r2, [r3]
 6657 039e 0CE0     		b	.L430
 6658              	.L432:
2001:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6659              		.loc 1 2001 0 discriminator 4
 6660 03a0 504B     		ldr	r3, .L568+4
 6661 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6662 03a4 544A     		ldr	r2, .L568+24
 6663 03a6 0233     		adds	r3, r3, #2
 6664 03a8 0021     		movs	r1, #0
 6665 03aa 42F82310 		str	r1, [r2, r3, lsl #2]
2000:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6666              		.loc 1 2000 0 discriminator 4
 6667 03ae 4D4B     		ldr	r3, .L568+4
 6668 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6669 03b2 0133     		adds	r3, r3, #1
 6670 03b4 DAB2     		uxtb	r2, r3
 6671 03b6 4B4B     		ldr	r3, .L568+4
 6672 03b8 1A70     		strb	r2, [r3]
 6673              	.L430:
2000:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6674              		.loc 1 2000 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 156


 6675 03ba 494B     		ldr	r3, .L568
 6676 03bc 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6677 03c0 002B     		cmp	r3, #0
 6678 03c2 00F04D82 		beq	.L548
2000:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6679              		.loc 1 2000 0 discriminator 3
 6680 03c6 474B     		ldr	r3, .L568+4
 6681 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6682 03ca 052B     		cmp	r3, #5
 6683 03cc E8D9     		bls	.L432
1968:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6684              		.loc 1 1968 0 is_stmt 1
 6685 03ce 47E2     		b	.L548
 6686              	.L421:
2002:..\src/interruptions.c ****         }
2003:..\src/interruptions.c ****         
2004:..\src/interruptions.c ****     }
2005:..\src/interruptions.c ****     else {
2006:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2007:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2008:..\src/interruptions.c ****         
2009:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2010:..\src/interruptions.c ****         
2011:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6687              		.loc 1 2011 0
 6688 03d0 4A4B     		ldr	r3, .L568+28
 6689 03d2 1B68     		ldr	r3, [r3]
 6690 03d4 B3F57A7F 		cmp	r3, #1000
 6691 03d8 0DD1     		bne	.L434
 6692              		.loc 1 2011 0 is_stmt 0 discriminator 1
 6693 03da 494B     		ldr	r3, .L568+32
 6694 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6695 03de 002B     		cmp	r3, #0
 6696 03e0 09D1     		bne	.L434
2012:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2013:..\src/interruptions.c ****             tension_valid = TRUE;   
 6697              		.loc 1 2013 0 is_stmt 1
 6698 03e2 474B     		ldr	r3, .L568+32
 6699 03e4 0122     		movs	r2, #1
 6700 03e6 1A70     		strb	r2, [r3]
2014:..\src/interruptions.c ****             count = 0;
 6701              		.loc 1 2014 0
 6702 03e8 464B     		ldr	r3, .L568+36
 6703 03ea 0022     		movs	r2, #0
 6704 03ec 1A80     		strh	r2, [r3]	@ movhi
2015:..\src/interruptions.c ****             v_count = 0;            
 6705              		.loc 1 2015 0
 6706 03ee 434B     		ldr	r3, .L568+28
 6707 03f0 0022     		movs	r2, #0
 6708 03f2 1A60     		str	r2, [r3]
 6709 03f4 2CE0     		b	.L435
 6710              	.L434:
2016:..\src/interruptions.c ****         }
2017:..\src/interruptions.c ****         else {  
2018:..\src/interruptions.c ****             // wait for battery voltage stabilization
2019:..\src/interruptions.c ****             if (v_count < 1000) {
 6711              		.loc 1 2019 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 157


 6712 03f6 414B     		ldr	r3, .L568+28
 6713 03f8 1B68     		ldr	r3, [r3]
 6714 03fa B3F57A7F 		cmp	r3, #1000
 6715 03fe 04D2     		bcs	.L436
2020:..\src/interruptions.c ****                 v_count = v_count + 1;
 6716              		.loc 1 2020 0
 6717 0400 3E4B     		ldr	r3, .L568+28
 6718 0402 1B68     		ldr	r3, [r3]
 6719 0404 0133     		adds	r3, r3, #1
 6720 0406 3D4A     		ldr	r2, .L568+28
 6721 0408 1360     		str	r3, [r2]
 6722              	.L436:
2021:..\src/interruptions.c ****             }
2022:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6723              		.loc 1 2022 0
 6724 040a 364B     		ldr	r3, .L568+4
 6725 040c 0022     		movs	r2, #0
 6726 040e 1A70     		strb	r2, [r3]
 6727 0410 1AE0     		b	.L437
 6728              	.L438:
2023:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6729              		.loc 1 2023 0 discriminator 3
 6730 0412 344B     		ldr	r3, .L568+4
 6731 0414 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6732 0416 1C46     		mov	r4, r3
 6733 0418 324B     		ldr	r3, .L568+4
 6734 041a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6735 041c 1A46     		mov	r2, r3
 6736 041e 334B     		ldr	r3, .L568+12
 6737 0420 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6738 0424 2F4B     		ldr	r3, .L568+4
 6739 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6740 0428 DB00     		lsls	r3, r3, #3
 6741 042a 374A     		ldr	r2, .L568+40
 6742 042c 1344     		add	r3, r3, r2
 6743 042e 1946     		mov	r1, r3
 6744 0430 FFF7FEFF 		bl	filter
 6745 0434 0246     		mov	r2, r0
 6746 0436 354B     		ldr	r3, .L568+44
 6747 0438 43F82420 		str	r2, [r3, r4, lsl #2]
2022:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6748              		.loc 1 2022 0 discriminator 3
 6749 043c 294B     		ldr	r3, .L568+4
 6750 043e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6751 0440 0133     		adds	r3, r3, #1
 6752 0442 DAB2     		uxtb	r2, r3
 6753 0444 274B     		ldr	r3, .L568+4
 6754 0446 1A70     		strb	r2, [r3]
 6755              	.L437:
2022:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6756              		.loc 1 2022 0 is_stmt 0 discriminator 1
 6757 0448 264B     		ldr	r3, .L568+4
 6758 044a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6759 044c 012B     		cmp	r3, #1
 6760 044e E0D9     		bls	.L438
 6761              	.L435:
2024:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 158


2025:..\src/interruptions.c ****         }
2026:..\src/interruptions.c **** 
2027:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6762              		.loc 1 2027 0 is_stmt 1
 6763 0450 244B     		ldr	r3, .L568+4
 6764 0452 0022     		movs	r2, #0
 6765 0454 1A70     		strb	r2, [r3]
 6766 0456 17E0     		b	.L439
 6767              	.L441:
2028:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6768              		.loc 1 2028 0
 6769 0458 224B     		ldr	r3, .L568+4
 6770 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6771 045c 1946     		mov	r1, r3
 6772 045e 244A     		ldr	r2, .L568+16
 6773 0460 0B46     		mov	r3, r1
 6774 0462 DB00     		lsls	r3, r3, #3
 6775 0464 5B1A     		subs	r3, r3, r1
 6776 0466 1B01     		lsls	r3, r3, #4
 6777 0468 1344     		add	r3, r3, r2
 6778 046a E133     		adds	r3, r3, #225
 6779 046c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6780 046e 002B     		cmp	r3, #0
 6781 0470 04D0     		beq	.L440
2029:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6782              		.loc 1 2029 0
 6783 0472 1C4B     		ldr	r3, .L568+4
 6784 0474 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6785 0476 1846     		mov	r0, r3
 6786 0478 FFF7FEFF 		bl	pwm_limit_search
 6787              	.L440:
2027:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6788              		.loc 1 2027 0 discriminator 2
 6789 047c 194B     		ldr	r3, .L568+4
 6790 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6791 0480 0133     		adds	r3, r3, #1
 6792 0482 DAB2     		uxtb	r2, r3
 6793 0484 174B     		ldr	r3, .L568+4
 6794 0486 1A70     		strb	r2, [r3]
 6795              	.L439:
2027:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6796              		.loc 1 2027 0 is_stmt 0 discriminator 1
 6797 0488 164B     		ldr	r3, .L568+4
 6798 048a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6799 048c 012B     		cmp	r3, #1
 6800 048e E3D9     		bls	.L441
2030:..\src/interruptions.c ****         }
2031:..\src/interruptions.c ****         
2032:..\src/interruptions.c ****         // Filter and Set currents
2033:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6801              		.loc 1 2033 0 is_stmt 1
 6802 0490 174B     		ldr	r3, .L568+16
 6803 0492 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6804 0496 002B     		cmp	r3, #0
 6805 0498 40D1     		bne	.L442
2034:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6806              		.loc 1 2034 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 159


 6807 049a 154B     		ldr	r3, .L568+16
 6808 049c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6809 04a0 1C46     		mov	r4, r3
 6810 04a2 1B4B     		ldr	r3, .L568+48
 6811 04a4 B3F90230 		ldrsh	r3, [r3, #2]
 6812 04a8 A3F5CE63 		sub	r3, r3, #1648
 6813 04ac 45F66A02 		movw	r2, #22634
 6814 04b0 02FB03F3 		mul	r3, r2, r3
 6815 04b4 5B13     		asrs	r3, r3, #13
 6816 04b6 1BB2     		sxth	r3, r3
 6817 04b8 1A46     		mov	r2, r3
 6818 04ba 164B     		ldr	r3, .L568+52
 6819 04bc 93F90030 		ldrsb	r3, [r3]
 6820 04c0 03FB02F3 		mul	r3, r3, r2
 6821 04c4 1449     		ldr	r1, .L568+56
 6822 04c6 1846     		mov	r0, r3
 6823 04c8 FFF7FEFF 		bl	filter
 6824 04cc 0146     		mov	r1, r0
 6825 04ce 094A     		ldr	r2, .L568+20
 6826 04d0 3423     		movs	r3, #52
 6827 04d2 03FB04F3 		mul	r3, r3, r4
 6828 04d6 1344     		add	r3, r3, r2
 6829 04d8 0C33     		adds	r3, r3, #12
 6830 04da 1960     		str	r1, [r3]
 6831 04dc 61E0     		b	.L443
 6832              	.L569:
 6833 04de 00BF     		.align	2
 6834              	.L568:
 6835 04e0 00000000 		.word	c_mem
 6836 04e4 76010000 		.word	idx.10432
 6837 04e8 00000000 		.word	g_ref
 6838 04ec 00000000 		.word	dev_tension
 6839 04f0 00000000 		.word	g_mem
 6840 04f4 00000000 		.word	g_meas
 6841 04f8 00000000 		.word	g_adc_meas
 6842 04fc 78010000 		.word	v_count.10431
 6843 0500 00000000 		.word	tension_valid
 6844 0504 74010000 		.word	count.10430
 6845 0508 00000000 		.word	filt_v
 6846 050c 00000000 		.word	dev_tension_f
 6847 0510 00000000 		.word	ADC_buf
 6848 0514 00000000 		.word	pwm_sign
 6849 0518 00000000 		.word	filt_i
 6850              	.L442:
2035:..\src/interruptions.c ****         } 
2036:..\src/interruptions.c ****         else {
2037:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 6851              		.loc 1 2037 0
 6852 051c C54B     		ldr	r3, .L570
 6853 051e 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6854 0522 022B     		cmp	r3, #2
 6855 0524 21D1     		bne	.L444
2038:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2039:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 6856              		.loc 1 2039 0
 6857 0526 C34B     		ldr	r3, .L570
 6858 0528 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 160


 6859 052c 1C46     		mov	r4, r3
 6860 052e C24B     		ldr	r3, .L570+4
 6861 0530 B3F90230 		ldrsh	r3, [r3, #2]
 6862 0534 A3F28F63 		subw	r3, r3, #1679
 6863 0538 45F65072 		movw	r2, #24400
 6864 053c 02FB03F3 		mul	r3, r2, r3
 6865 0540 5B13     		asrs	r3, r3, #13
 6866 0542 1BB2     		sxth	r3, r3
 6867 0544 1A46     		mov	r2, r3
 6868 0546 BD4B     		ldr	r3, .L570+8
 6869 0548 93F90030 		ldrsb	r3, [r3]
 6870 054c 03FB02F3 		mul	r3, r3, r2
 6871 0550 BB49     		ldr	r1, .L570+12
 6872 0552 1846     		mov	r0, r3
 6873 0554 FFF7FEFF 		bl	filter
 6874 0558 0146     		mov	r1, r0
 6875 055a BA4A     		ldr	r2, .L570+16
 6876 055c 3423     		movs	r3, #52
 6877 055e 03FB04F3 		mul	r3, r3, r4
 6878 0562 1344     		add	r3, r3, r2
 6879 0564 0C33     		adds	r3, r3, #12
 6880 0566 1960     		str	r1, [r3]
 6881 0568 1BE0     		b	.L443
 6882              	.L444:
2040:..\src/interruptions.c ****             } else { // [GS]
2041:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 6883              		.loc 1 2041 0
 6884 056a B24B     		ldr	r3, .L570
 6885 056c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6886 0570 1846     		mov	r0, r3
 6887 0572 B14B     		ldr	r3, .L570+4
 6888 0574 B3F90230 		ldrsh	r3, [r3, #2]
 6889 0578 A3F26362 		subw	r2, r3, #1635
 6890 057c 1346     		mov	r3, r2
 6891 057e 1B01     		lsls	r3, r3, #4
 6892 0580 9B1A     		subs	r3, r3, r2
 6893 0582 5B01     		lsls	r3, r3, #5
 6894 0584 1B11     		asrs	r3, r3, #4
 6895 0586 1BB2     		sxth	r3, r3
 6896 0588 1A46     		mov	r2, r3
 6897 058a AC4B     		ldr	r3, .L570+8
 6898 058c 93F90030 		ldrsb	r3, [r3]
 6899 0590 03FB02F2 		mul	r2, r3, r2
 6900 0594 AB49     		ldr	r1, .L570+16
 6901 0596 3423     		movs	r3, #52
 6902 0598 03FB00F3 		mul	r3, r3, r0
 6903 059c 0B44     		add	r3, r3, r1
 6904 059e 0C33     		adds	r3, r3, #12
 6905 05a0 1A60     		str	r2, [r3]
 6906              	.L443:
2042:..\src/interruptions.c ****             }
2043:..\src/interruptions.c ****         }
2044:..\src/interruptions.c ****         
2045:..\src/interruptions.c **** 
2046:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2047:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6907              		.loc 1 2047 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 161


 6908 05a2 A44B     		ldr	r3, .L570
 6909 05a4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6910 05a8 1D46     		mov	r5, r3
 6911 05aa A24B     		ldr	r3, .L570
 6912 05ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6913 05b0 1946     		mov	r1, r3
 6914 05b2 A44A     		ldr	r2, .L570+16
 6915 05b4 3423     		movs	r3, #52
 6916 05b6 03FB01F3 		mul	r3, r3, r1
 6917 05ba 1344     		add	r3, r3, r2
 6918 05bc 0C33     		adds	r3, r3, #12
 6919 05be 1C68     		ldr	r4, [r3]
 6920 05c0 9C4B     		ldr	r3, .L570
 6921 05c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6922 05c6 1946     		mov	r1, r3
 6923 05c8 9E4A     		ldr	r2, .L570+16
 6924 05ca 3423     		movs	r3, #52
 6925 05cc 03FB01F3 		mul	r3, r3, r1
 6926 05d0 1344     		add	r3, r3, r2
 6927 05d2 1A68     		ldr	r2, [r3]
 6928 05d4 974B     		ldr	r3, .L570
 6929 05d6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6930 05da 1846     		mov	r0, r3
 6931 05dc 9549     		ldr	r1, .L570
 6932 05de 0346     		mov	r3, r0
 6933 05e0 5B00     		lsls	r3, r3, #1
 6934 05e2 0344     		add	r3, r3, r0
 6935 05e4 1B01     		lsls	r3, r3, #4
 6936 05e6 0B44     		add	r3, r3, r1
 6937 05e8 03F29513 		addw	r3, r3, #405
 6938 05ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6939 05ee 42FA03F6 		asr	r6, r2, r3
 6940 05f2 904B     		ldr	r3, .L570
 6941 05f4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6942 05f8 1946     		mov	r1, r3
 6943 05fa 924A     		ldr	r2, .L570+16
 6944 05fc 3423     		movs	r3, #52
 6945 05fe 03FB01F3 		mul	r3, r3, r1
 6946 0602 1344     		add	r3, r3, r2
 6947 0604 1C33     		adds	r3, r3, #28
 6948 0606 1A68     		ldr	r2, [r3]
 6949 0608 8A4B     		ldr	r3, .L570
 6950 060a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6951 060e 1846     		mov	r0, r3
 6952 0610 8849     		ldr	r1, .L570
 6953 0612 0346     		mov	r3, r0
 6954 0614 5B00     		lsls	r3, r3, #1
 6955 0616 0344     		add	r3, r3, r0
 6956 0618 1B01     		lsls	r3, r3, #4
 6957 061a 0B44     		add	r3, r3, r1
 6958 061c 03F29513 		addw	r3, r3, #405
 6959 0620 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6960 0622 42FA03FE 		asr	lr, r2, r3
 6961 0626 884B     		ldr	r3, .L570+20
 6962 0628 1A68     		ldr	r2, [r3]
 6963 062a 824B     		ldr	r3, .L570
 6964 062c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 162


 6965 0630 1846     		mov	r0, r3
 6966 0632 8049     		ldr	r1, .L570
 6967 0634 0346     		mov	r3, r0
 6968 0636 5B00     		lsls	r3, r3, #1
 6969 0638 0344     		add	r3, r3, r0
 6970 063a 1B01     		lsls	r3, r3, #4
 6971 063c 0B44     		add	r3, r3, r1
 6972 063e 03F29513 		addw	r3, r3, #405
 6973 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6974 0644 42FA03F3 		asr	r3, r2, r3
 6975 0648 7246     		mov	r2, lr
 6976 064a 3146     		mov	r1, r6
 6977 064c 0020     		movs	r0, #0
 6978 064e FFF7FEFF 		bl	curr_estim
 6979 0652 0346     		mov	r3, r0
 6980 0654 E31A     		subs	r3, r4, r3
 6981 0656 7D49     		ldr	r1, .L570+24
 6982 0658 1846     		mov	r0, r3
 6983 065a FFF7FEFF 		bl	filter
 6984 065e 0346     		mov	r3, r0
 6985 0660 1BB2     		sxth	r3, r3
 6986 0662 1946     		mov	r1, r3
 6987 0664 774A     		ldr	r2, .L570+16
 6988 0666 3423     		movs	r3, #52
 6989 0668 03FB05F3 		mul	r3, r3, r5
 6990 066c 1344     		add	r3, r3, r2
 6991 066e 1033     		adds	r3, r3, #16
 6992 0670 1960     		str	r1, [r3]
2048:..\src/interruptions.c ****         
2049:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2050:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6993              		.loc 1 2050 0
 6994 0672 774B     		ldr	r3, .L570+28
 6995 0674 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6996 0676 042B     		cmp	r3, #4
 6997 0678 40F2D280 		bls	.L445
2051:..\src/interruptions.c ****             // Filter and Set currents
2052:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 6998              		.loc 1 2052 0
 6999 067c 6D4B     		ldr	r3, .L570
 7000 067e 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7001 0682 002B     		cmp	r3, #0
 7002 0684 21D1     		bne	.L446
2053:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7003              		.loc 1 2053 0
 7004 0686 6B4B     		ldr	r3, .L570
 7005 0688 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7006 068c 1C46     		mov	r4, r3
 7007 068e 6A4B     		ldr	r3, .L570+4
 7008 0690 B3F90A30 		ldrsh	r3, [r3, #10]
 7009 0694 A3F5CE63 		sub	r3, r3, #1648
 7010 0698 45F66A02 		movw	r2, #22634
 7011 069c 02FB03F3 		mul	r3, r2, r3
 7012 06a0 5B13     		asrs	r3, r3, #13
 7013 06a2 1BB2     		sxth	r3, r3
 7014 06a4 1A46     		mov	r2, r3
 7015 06a6 654B     		ldr	r3, .L570+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 163


 7016 06a8 93F90130 		ldrsb	r3, [r3, #1]
 7017 06ac 03FB02F3 		mul	r3, r3, r2
 7018 06b0 6849     		ldr	r1, .L570+32
 7019 06b2 1846     		mov	r0, r3
 7020 06b4 FFF7FEFF 		bl	filter
 7021 06b8 0146     		mov	r1, r0
 7022 06ba 624A     		ldr	r2, .L570+16
 7023 06bc 3423     		movs	r3, #52
 7024 06be 03FB04F3 		mul	r3, r3, r4
 7025 06c2 1344     		add	r3, r3, r2
 7026 06c4 0C33     		adds	r3, r3, #12
 7027 06c6 1960     		str	r1, [r3]
 7028 06c8 42E0     		b	.L447
 7029              	.L446:
2054:..\src/interruptions.c ****             } 
2055:..\src/interruptions.c ****             else {
2056:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7030              		.loc 1 2056 0
 7031 06ca 5A4B     		ldr	r3, .L570
 7032 06cc 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7033 06d0 022B     		cmp	r3, #2
 7034 06d2 21D1     		bne	.L448
2057:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2058:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7035              		.loc 1 2058 0
 7036 06d4 574B     		ldr	r3, .L570
 7037 06d6 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7038 06da 1C46     		mov	r4, r3
 7039 06dc 564B     		ldr	r3, .L570+4
 7040 06de B3F90A30 		ldrsh	r3, [r3, #10]
 7041 06e2 A3F28F63 		subw	r3, r3, #1679
 7042 06e6 45F65072 		movw	r2, #24400
 7043 06ea 02FB03F3 		mul	r3, r2, r3
 7044 06ee 5B13     		asrs	r3, r3, #13
 7045 06f0 1BB2     		sxth	r3, r3
 7046 06f2 1A46     		mov	r2, r3
 7047 06f4 514B     		ldr	r3, .L570+8
 7048 06f6 93F90130 		ldrsb	r3, [r3, #1]
 7049 06fa 03FB02F3 		mul	r3, r3, r2
 7050 06fe 5549     		ldr	r1, .L570+32
 7051 0700 1846     		mov	r0, r3
 7052 0702 FFF7FEFF 		bl	filter
 7053 0706 0146     		mov	r1, r0
 7054 0708 4E4A     		ldr	r2, .L570+16
 7055 070a 3423     		movs	r3, #52
 7056 070c 03FB04F3 		mul	r3, r3, r4
 7057 0710 1344     		add	r3, r3, r2
 7058 0712 0C33     		adds	r3, r3, #12
 7059 0714 1960     		str	r1, [r3]
 7060 0716 1BE0     		b	.L447
 7061              	.L448:
2059:..\src/interruptions.c ****                 } else { // [GS]
2060:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7062              		.loc 1 2060 0
 7063 0718 464B     		ldr	r3, .L570
 7064 071a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7065 071e 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 164


 7066 0720 454B     		ldr	r3, .L570+4
 7067 0722 B3F90A30 		ldrsh	r3, [r3, #10]
 7068 0726 A3F26362 		subw	r2, r3, #1635
 7069 072a 1346     		mov	r3, r2
 7070 072c 1B01     		lsls	r3, r3, #4
 7071 072e 9B1A     		subs	r3, r3, r2
 7072 0730 5B01     		lsls	r3, r3, #5
 7073 0732 1B11     		asrs	r3, r3, #4
 7074 0734 1BB2     		sxth	r3, r3
 7075 0736 1A46     		mov	r2, r3
 7076 0738 404B     		ldr	r3, .L570+8
 7077 073a 93F90130 		ldrsb	r3, [r3, #1]
 7078 073e 03FB02F2 		mul	r2, r3, r2
 7079 0742 4049     		ldr	r1, .L570+16
 7080 0744 3423     		movs	r3, #52
 7081 0746 03FB00F3 		mul	r3, r3, r0
 7082 074a 0B44     		add	r3, r3, r1
 7083 074c 0C33     		adds	r3, r3, #12
 7084 074e 1A60     		str	r2, [r3]
 7085              	.L447:
2061:..\src/interruptions.c ****                 }
2062:..\src/interruptions.c ****             }
2063:..\src/interruptions.c ****             
2064:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7086              		.loc 1 2064 0
 7087 0750 384B     		ldr	r3, .L570
 7088 0752 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7089 0756 1D46     		mov	r5, r3
 7090 0758 364B     		ldr	r3, .L570
 7091 075a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7092 075e 1946     		mov	r1, r3
 7093 0760 384A     		ldr	r2, .L570+16
 7094 0762 3423     		movs	r3, #52
 7095 0764 03FB01F3 		mul	r3, r3, r1
 7096 0768 1344     		add	r3, r3, r2
 7097 076a 0C33     		adds	r3, r3, #12
 7098 076c 1C68     		ldr	r4, [r3]
 7099 076e 314B     		ldr	r3, .L570
 7100 0770 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7101 0774 1946     		mov	r1, r3
 7102 0776 334A     		ldr	r2, .L570+16
 7103 0778 3423     		movs	r3, #52
 7104 077a 03FB01F3 		mul	r3, r3, r1
 7105 077e 1344     		add	r3, r3, r2
 7106 0780 1A68     		ldr	r2, [r3]
 7107 0782 2C4B     		ldr	r3, .L570
 7108 0784 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7109 0788 1846     		mov	r0, r3
 7110 078a 2A49     		ldr	r1, .L570
 7111 078c 0346     		mov	r3, r0
 7112 078e 5B00     		lsls	r3, r3, #1
 7113 0790 0344     		add	r3, r3, r0
 7114 0792 1B01     		lsls	r3, r3, #4
 7115 0794 0B44     		add	r3, r3, r1
 7116 0796 03F29513 		addw	r3, r3, #405
 7117 079a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7118 079c 42FA03F6 		asr	r6, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 165


 7119 07a0 244B     		ldr	r3, .L570
 7120 07a2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7121 07a6 1946     		mov	r1, r3
 7122 07a8 264A     		ldr	r2, .L570+16
 7123 07aa 3423     		movs	r3, #52
 7124 07ac 03FB01F3 		mul	r3, r3, r1
 7125 07b0 1344     		add	r3, r3, r2
 7126 07b2 1C33     		adds	r3, r3, #28
 7127 07b4 1A68     		ldr	r2, [r3]
 7128 07b6 1F4B     		ldr	r3, .L570
 7129 07b8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7130 07bc 1846     		mov	r0, r3
 7131 07be 1D49     		ldr	r1, .L570
 7132 07c0 0346     		mov	r3, r0
 7133 07c2 5B00     		lsls	r3, r3, #1
 7134 07c4 0344     		add	r3, r3, r0
 7135 07c6 1B01     		lsls	r3, r3, #4
 7136 07c8 0B44     		add	r3, r3, r1
 7137 07ca 03F29513 		addw	r3, r3, #405
 7138 07ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7139 07d0 42FA03FE 		asr	lr, r2, r3
 7140 07d4 1C4B     		ldr	r3, .L570+20
 7141 07d6 1A69     		ldr	r2, [r3, #16]
 7142 07d8 164B     		ldr	r3, .L570
 7143 07da 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7144 07de 1846     		mov	r0, r3
 7145 07e0 1449     		ldr	r1, .L570
 7146 07e2 0346     		mov	r3, r0
 7147 07e4 5B00     		lsls	r3, r3, #1
 7148 07e6 0344     		add	r3, r3, r0
 7149 07e8 1B01     		lsls	r3, r3, #4
 7150 07ea 0B44     		add	r3, r3, r1
 7151 07ec 03F29513 		addw	r3, r3, #405
 7152 07f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7153 07f2 42FA03F3 		asr	r3, r2, r3
 7154 07f6 7246     		mov	r2, lr
 7155 07f8 3146     		mov	r1, r6
 7156 07fa 0120     		movs	r0, #1
 7157 07fc FFF7FEFF 		bl	curr_estim
 7158 0800 0346     		mov	r3, r0
 7159 0802 E31A     		subs	r3, r4, r3
 7160 0804 1449     		ldr	r1, .L570+36
 7161 0806 1846     		mov	r0, r3
 7162 0808 FFF7FEFF 		bl	filter
 7163 080c 0346     		mov	r3, r0
 7164 080e 1BB2     		sxth	r3, r3
 7165 0810 1946     		mov	r1, r3
 7166 0812 0C4A     		ldr	r2, .L570+16
 7167 0814 3423     		movs	r3, #52
 7168 0816 03FB05F3 		mul	r3, r3, r5
 7169 081a 1344     		add	r3, r3, r2
 7170 081c 1033     		adds	r3, r3, #16
 7171 081e 1960     		str	r1, [r3]
 7172              	.L445:
2065:..\src/interruptions.c ****         }
2066:..\src/interruptions.c ****     
2067:..\src/interruptions.c ****         // Check Interrupt 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 166


2068:..\src/interruptions.c ****     
2069:..\src/interruptions.c ****         if (interrupt_flag){
 7173              		.loc 1 2069 0
 7174 0820 0E4B     		ldr	r3, .L570+40
 7175 0822 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7176 0824 002B     		cmp	r3, #0
 7177 0826 1CD0     		beq	.L433
2070:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7178              		.loc 1 2070 0
 7179 0828 0C4B     		ldr	r3, .L570+40
 7180 082a 0022     		movs	r2, #0
 7181 082c 1A70     		strb	r2, [r3]
2071:..\src/interruptions.c ****             interrupt_manager();
 7182              		.loc 1 2071 0
 7183 082e FFF7FEFF 		bl	interrupt_manager
 7184 0832 16E0     		b	.L433
 7185              	.L571:
 7186              		.align	2
 7187              	.L570:
 7188 0834 00000000 		.word	g_mem
 7189 0838 00000000 		.word	ADC_buf
 7190 083c 00000000 		.word	pwm_sign
 7191 0840 00000000 		.word	filt_i
 7192 0844 00000000 		.word	g_meas
 7193 0848 00000000 		.word	g_ref
 7194 084c 00000000 		.word	filt_curr_diff
 7195 0850 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7196 0854 08000000 		.word	filt_i+8
 7197 0858 08000000 		.word	filt_curr_diff+8
 7198 085c 00000000 		.word	interrupt_flag
 7199              	.L548:
1968:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7200              		.loc 1 1968 0
 7201 0860 00BF     		nop
 7202              	.L433:
2072:..\src/interruptions.c ****         }
2073:..\src/interruptions.c **** 
2074:..\src/interruptions.c ****     }
2075:..\src/interruptions.c ****     
2076:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2077:..\src/interruptions.c ****         
2078:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2079:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7203              		.loc 1 2079 0
 7204 0862 B24B     		ldr	r3, .L572
 7205 0864 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7206 0868 002B     		cmp	r3, #0
 7207 086a 05D1     		bne	.L449
2080:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7208              		.loc 1 2080 0
 7209 086c B04B     		ldr	r3, .L572+4
 7210 086e 0022     		movs	r2, #0
 7211 0870 1A70     		strb	r2, [r3]
2081:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7212              		.loc 1 2081 0
 7213 0872 B04B     		ldr	r3, .L572+8
 7214 0874 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 167


 7215 0876 1A70     		strb	r2, [r3]
 7216              	.L449:
2082:..\src/interruptions.c ****     }
2083:..\src/interruptions.c **** 
2084:..\src/interruptions.c ****     // EMG 1 calibration state machine
2085:..\src/interruptions.c ****    
2086:..\src/interruptions.c ****     // Calibration state machine
2087:..\src/interruptions.c ****     switch(emg_1_status) {
 7217              		.loc 1 2087 0
 7218 0878 AD4B     		ldr	r3, .L572+4
 7219 087a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7220 087c 032B     		cmp	r3, #3
 7221 087e 00F2E180 		bhi	.L549
 7222 0882 01A2     		adr	r2, .L452
 7223 0884 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7224              		.p2align 2
 7225              	.L452:
 7226 0888 99080000 		.word	.L451+1
 7227 088c 49090000 		.word	.L453+1
 7228 0890 5F090000 		.word	.L454+1
 7229 0894 9B090000 		.word	.L455+1
 7230              		.p2align 1
 7231              	.L451:
2088:..\src/interruptions.c ****         case NORMAL: // normal execution
2089:..\src/interruptions.c ****             
2090:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7232              		.loc 1 2090 0
 7233 0898 A74B     		ldr	r3, .L572+12
 7234 089a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7235 089e 022B     		cmp	r3, #2
 7236 08a0 13D0     		beq	.L456
 7237              		.loc 1 2090 0 is_stmt 0 discriminator 1
 7238 08a2 A54B     		ldr	r3, .L572+12
 7239 08a4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7240 08a8 032B     		cmp	r3, #3
 7241 08aa 0ED0     		beq	.L456
2091:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7242              		.loc 1 2091 0 is_stmt 1
 7243 08ac 9F4B     		ldr	r3, .L572
 7244 08ae 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7245 08b2 0233     		adds	r3, r3, #2
 7246 08b4 A14A     		ldr	r2, .L572+16
 7247 08b6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7248 08ba A3F26763 		subw	r3, r3, #1639
 7249 08be 5722     		movs	r2, #87
 7250 08c0 02FB03F3 		mul	r3, r2, r3
 7251 08c4 5B11     		asrs	r3, r3, #5
 7252 08c6 7B60     		str	r3, [r7, #4]
 7253 08c8 07E0     		b	.L457
 7254              	.L456:
2092:..\src/interruptions.c ****             }
2093:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2094:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7255              		.loc 1 2094 0
 7256 08ca 984B     		ldr	r3, .L572
 7257 08cc 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7258 08d0 0233     		adds	r3, r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 168


 7259 08d2 9A4A     		ldr	r2, .L572+16
 7260 08d4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7261 08d8 7B60     		str	r3, [r7, #4]
 7262              	.L457:
2095:..\src/interruptions.c ****             }
2096:..\src/interruptions.c ****             
2097:..\src/interruptions.c ****             if (i_aux < 0) 
 7263              		.loc 1 2097 0
 7264 08da 7B68     		ldr	r3, [r7, #4]
 7265 08dc 002B     		cmp	r3, #0
 7266 08de 01DA     		bge	.L458
2098:..\src/interruptions.c ****                 i_aux = 0;
 7267              		.loc 1 2098 0
 7268 08e0 0023     		movs	r3, #0
 7269 08e2 7B60     		str	r3, [r7, #4]
 7270              	.L458:
2099:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7271              		.loc 1 2099 0
 7272 08e4 9649     		ldr	r1, .L572+20
 7273 08e6 7868     		ldr	r0, [r7, #4]
 7274 08e8 FFF7FEFF 		bl	filter
 7275 08ec 7860     		str	r0, [r7, #4]
2100:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7276              		.loc 1 2100 0
 7277 08ee 7B68     		ldr	r3, [r7, #4]
 7278 08f0 9B02     		lsls	r3, r3, #10
 7279 08f2 1A46     		mov	r2, r3
 7280 08f4 904B     		ldr	r3, .L572+12
 7281 08f6 D3F8F431 		ldr	r3, [r3, #500]
 7282 08fa B2FBF3F3 		udiv	r3, r2, r3
 7283 08fe 7B60     		str	r3, [r7, #4]
2101:..\src/interruptions.c **** 
2102:..\src/interruptions.c ****             if (interrupt_flag){
 7284              		.loc 1 2102 0
 7285 0900 904B     		ldr	r3, .L572+24
 7286 0902 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7287 0904 002B     		cmp	r3, #0
 7288 0906 04D0     		beq	.L459
2103:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7289              		.loc 1 2103 0
 7290 0908 8E4B     		ldr	r3, .L572+24
 7291 090a 0022     		movs	r2, #0
 7292 090c 1A70     		strb	r2, [r3]
2104:..\src/interruptions.c ****                 interrupt_manager();
 7293              		.loc 1 2104 0
 7294 090e FFF7FEFF 		bl	interrupt_manager
 7295              	.L459:
2105:..\src/interruptions.c ****             }
2106:..\src/interruptions.c ****             //Saturation
2107:..\src/interruptions.c ****             if (i_aux < 0)
 7296              		.loc 1 2107 0
 7297 0912 7B68     		ldr	r3, [r7, #4]
 7298 0914 002B     		cmp	r3, #0
 7299 0916 02DA     		bge	.L460
2108:..\src/interruptions.c ****                 i_aux = 0;
 7300              		.loc 1 2108 0
 7301 0918 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 169


 7302 091a 7B60     		str	r3, [r7, #4]
 7303 091c 06E0     		b	.L461
 7304              	.L460:
2109:..\src/interruptions.c ****             else 
2110:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7305              		.loc 1 2110 0
 7306 091e 7B68     		ldr	r3, [r7, #4]
 7307 0920 B3F5806F 		cmp	r3, #1024
 7308 0924 02DD     		ble	.L461
2111:..\src/interruptions.c ****                     i_aux = 1024;
 7309              		.loc 1 2111 0
 7310 0926 4FF48063 		mov	r3, #1024
 7311 092a 7B60     		str	r3, [r7, #4]
 7312              	.L461:
2112:..\src/interruptions.c ****             
2113:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7313              		.loc 1 2113 0
 7314 092c 864A     		ldr	r2, .L572+28
 7315 092e 7B68     		ldr	r3, [r7, #4]
 7316 0930 1360     		str	r3, [r2]
2114:..\src/interruptions.c **** 
2115:..\src/interruptions.c ****             if (interrupt_flag){
 7317              		.loc 1 2115 0
 7318 0932 844B     		ldr	r3, .L572+24
 7319 0934 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7320 0936 002B     		cmp	r3, #0
 7321 0938 00F08680 		beq	.L550
2116:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7322              		.loc 1 2116 0
 7323 093c 814B     		ldr	r3, .L572+24
 7324 093e 0022     		movs	r2, #0
 7325 0940 1A70     		strb	r2, [r3]
2117:..\src/interruptions.c ****                 interrupt_manager();
 7326              		.loc 1 2117 0
 7327 0942 FFF7FEFF 		bl	interrupt_manager
2118:..\src/interruptions.c ****             }
2119:..\src/interruptions.c ****             
2120:..\src/interruptions.c ****             break;
 7328              		.loc 1 2120 0
 7329 0946 7FE0     		b	.L550
 7330              	.L453:
2121:..\src/interruptions.c **** 
2122:..\src/interruptions.c ****         case RESET: // reset variables
2123:..\src/interruptions.c ****             emg_counter_1 = 0;
 7331              		.loc 1 2123 0
 7332 0948 804B     		ldr	r3, .L572+32
 7333 094a 0022     		movs	r2, #0
 7334 094c 1A80     		strh	r2, [r3]	@ movhi
2124:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7335              		.loc 1 2124 0
 7336 094e 7A4B     		ldr	r3, .L572+12
 7337 0950 0022     		movs	r2, #0
 7338 0952 C3F8F421 		str	r2, [r3, #500]
2125:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7339              		.loc 1 2125 0
 7340 0956 764B     		ldr	r3, .L572+4
 7341 0958 0222     		movs	r2, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 170


 7342 095a 1A70     		strb	r2, [r3]
2126:..\src/interruptions.c ****             break;
 7343              		.loc 1 2126 0
 7344 095c 79E0     		b	.L463
 7345              	.L454:
2127:..\src/interruptions.c **** 
2128:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2129:..\src/interruptions.c ****             emg_counter_1++;
 7346              		.loc 1 2129 0
 7347 095e 7B4B     		ldr	r3, .L572+32
 7348 0960 1B88     		ldrh	r3, [r3]
 7349 0962 0133     		adds	r3, r3, #1
 7350 0964 9AB2     		uxth	r2, r3
 7351 0966 794B     		ldr	r3, .L572+32
 7352 0968 1A80     		strh	r2, [r3]	@ movhi
2130:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7353              		.loc 1 2130 0
 7354 096a 784B     		ldr	r3, .L572+32
 7355 096c 1B88     		ldrh	r3, [r3]
 7356 096e B3F5FA7F 		cmp	r3, #500
 7357 0972 6BD1     		bne	.L551
2131:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7358              		.loc 1 2131 0
 7359 0974 754B     		ldr	r3, .L572+32
 7360 0976 0022     		movs	r2, #0
 7361 0978 1A80     		strh	r2, [r3]	@ movhi
2132:..\src/interruptions.c ****                 LED_control(1);
 7362              		.loc 1 2132 0
 7363 097a 0120     		movs	r0, #1
 7364 097c FFF7FEFF 		bl	LED_control
2133:..\src/interruptions.c **** 				
2134:..\src/interruptions.c ****                 if (interrupt_flag){
 7365              		.loc 1 2134 0
 7366 0980 704B     		ldr	r3, .L572+24
 7367 0982 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7368 0984 002B     		cmp	r3, #0
 7369 0986 04D0     		beq	.L465
2135:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7370              		.loc 1 2135 0
 7371 0988 6E4B     		ldr	r3, .L572+24
 7372 098a 0022     		movs	r2, #0
 7373 098c 1A70     		strb	r2, [r3]
2136:..\src/interruptions.c ****                     interrupt_manager();
 7374              		.loc 1 2136 0
 7375 098e FFF7FEFF 		bl	interrupt_manager
 7376              	.L465:
2137:..\src/interruptions.c ****                 }
2138:..\src/interruptions.c ****                 
2139:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7377              		.loc 1 2139 0
 7378 0992 674B     		ldr	r3, .L572+4
 7379 0994 0322     		movs	r2, #3
 7380 0996 1A70     		strb	r2, [r3]
2140:..\src/interruptions.c ****             }
2141:..\src/interruptions.c ****             break;
 7381              		.loc 1 2141 0
 7382 0998 58E0     		b	.L551
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 171


 7383              	.L455:
2142:..\src/interruptions.c **** 
2143:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2144:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2145:..\src/interruptions.c ****             emg_counter_1++;
 7384              		.loc 1 2145 0
 7385 099a 6C4B     		ldr	r3, .L572+32
 7386 099c 1B88     		ldrh	r3, [r3]
 7387 099e 0133     		adds	r3, r3, #1
 7388 09a0 9AB2     		uxth	r2, r3
 7389 09a2 6A4B     		ldr	r3, .L572+32
 7390 09a4 1A80     		strh	r2, [r3]	@ movhi
2146:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7391              		.loc 1 2146 0
 7392 09a6 614B     		ldr	r3, .L572
 7393 09a8 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7394 09ac 0233     		adds	r3, r3, #2
 7395 09ae 634A     		ldr	r2, .L572+16
 7396 09b0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7397 09b4 002B     		cmp	r3, #0
 7398 09b6 07DA     		bge	.L466
2147:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7399              		.loc 1 2147 0
 7400 09b8 5C4B     		ldr	r3, .L572
 7401 09ba 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7402 09be 0233     		adds	r3, r3, #2
 7403 09c0 5E4A     		ldr	r2, .L572+16
 7404 09c2 0021     		movs	r1, #0
 7405 09c4 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7406              	.L466:
2148:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7407              		.loc 1 2148 0
 7408 09c8 584B     		ldr	r3, .L572
 7409 09ca 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7410 09ce 0233     		adds	r3, r3, #2
 7411 09d0 5A4A     		ldr	r2, .L572+16
 7412 09d2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7413 09d6 5A49     		ldr	r1, .L572+20
 7414 09d8 1846     		mov	r0, r3
 7415 09da FFF7FEFF 		bl	filter
 7416 09de 0246     		mov	r2, r0
 7417 09e0 554B     		ldr	r3, .L572+12
 7418 09e2 D3F8F431 		ldr	r3, [r3, #500]
 7419 09e6 1344     		add	r3, r3, r2
 7420 09e8 534A     		ldr	r2, .L572+12
 7421 09ea C2F8F431 		str	r3, [r2, #500]
2149:..\src/interruptions.c ****             
2150:..\src/interruptions.c ****             if (interrupt_flag){
 7422              		.loc 1 2150 0
 7423 09ee 554B     		ldr	r3, .L572+24
 7424 09f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7425 09f2 002B     		cmp	r3, #0
 7426 09f4 04D0     		beq	.L467
2151:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7427              		.loc 1 2151 0
 7428 09f6 534B     		ldr	r3, .L572+24
 7429 09f8 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 172


 7430 09fa 1A70     		strb	r2, [r3]
2152:..\src/interruptions.c ****                 interrupt_manager();
 7431              		.loc 1 2152 0
 7432 09fc FFF7FEFF 		bl	interrupt_manager
 7433              	.L467:
2153:..\src/interruptions.c ****             }
2154:..\src/interruptions.c ****             
2155:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7434              		.loc 1 2155 0
 7435 0a00 524B     		ldr	r3, .L572+32
 7436 0a02 1B88     		ldrh	r3, [r3]
 7437 0a04 B3F57A7F 		cmp	r3, #1000
 7438 0a08 22D1     		bne	.L552
2156:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7439              		.loc 1 2156 0
 7440 0a0a 4B4B     		ldr	r3, .L572+12
 7441 0a0c D3F8F431 		ldr	r3, [r3, #500]
 7442 0a10 4F4A     		ldr	r2, .L572+36
 7443 0a12 A2FB0323 		umull	r2, r3, r2, r3
 7444 0a16 9B09     		lsrs	r3, r3, #6
 7445 0a18 474A     		ldr	r2, .L572+12
 7446 0a1a C2F8F431 		str	r3, [r2, #500]
2157:..\src/interruptions.c **** 
2158:..\src/interruptions.c ****                 if (interrupt_flag){
 7447              		.loc 1 2158 0
 7448 0a1e 494B     		ldr	r3, .L572+24
 7449 0a20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7450 0a22 002B     		cmp	r3, #0
 7451 0a24 04D0     		beq	.L469
2159:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7452              		.loc 1 2159 0
 7453 0a26 474B     		ldr	r3, .L572+24
 7454 0a28 0022     		movs	r2, #0
 7455 0a2a 1A70     		strb	r2, [r3]
2160:..\src/interruptions.c ****                     interrupt_manager();
 7456              		.loc 1 2160 0
 7457 0a2c FFF7FEFF 		bl	interrupt_manager
 7458              	.L469:
2161:..\src/interruptions.c ****                 }                    
2162:..\src/interruptions.c ****                 
2163:..\src/interruptions.c ****                 LED_control(0);
 7459              		.loc 1 2163 0
 7460 0a30 0020     		movs	r0, #0
 7461 0a32 FFF7FEFF 		bl	LED_control
2164:..\src/interruptions.c **** 				
2165:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7462              		.loc 1 2165 0
 7463 0a36 454B     		ldr	r3, .L572+32
 7464 0a38 0022     		movs	r2, #0
 7465 0a3a 1A80     		strh	r2, [r3]	@ movhi
2166:..\src/interruptions.c **** 
2167:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7466              		.loc 1 2167 0
 7467 0a3c 3C4B     		ldr	r3, .L572+4
 7468 0a3e 0022     		movs	r2, #0
 7469 0a40 1A70     		strb	r2, [r3]
2168:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 173


2169:..\src/interruptions.c ****             break;
 7470              		.loc 1 2169 0
 7471 0a42 05E0     		b	.L552
 7472              	.L549:
2170:..\src/interruptions.c **** 
2171:..\src/interruptions.c ****         default:
2172:..\src/interruptions.c ****             break;
 7473              		.loc 1 2172 0
 7474 0a44 00BF     		nop
 7475 0a46 04E0     		b	.L463
 7476              	.L550:
2120:..\src/interruptions.c **** 
 7477              		.loc 1 2120 0
 7478 0a48 00BF     		nop
 7479 0a4a 02E0     		b	.L463
 7480              	.L551:
2141:..\src/interruptions.c **** 
 7481              		.loc 1 2141 0
 7482 0a4c 00BF     		nop
 7483 0a4e 00E0     		b	.L463
 7484              	.L552:
2169:..\src/interruptions.c **** 
 7485              		.loc 1 2169 0
 7486 0a50 00BF     		nop
 7487              	.L463:
2173:..\src/interruptions.c ****     }
2174:..\src/interruptions.c **** 
2175:..\src/interruptions.c ****     if (interrupt_flag){
 7488              		.loc 1 2175 0
 7489 0a52 3C4B     		ldr	r3, .L572+24
 7490 0a54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7491 0a56 002B     		cmp	r3, #0
 7492 0a58 04D0     		beq	.L470
2176:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7493              		.loc 1 2176 0
 7494 0a5a 3A4B     		ldr	r3, .L572+24
 7495 0a5c 0022     		movs	r2, #0
 7496 0a5e 1A70     		strb	r2, [r3]
2177:..\src/interruptions.c ****         interrupt_manager();
 7497              		.loc 1 2177 0
 7498 0a60 FFF7FEFF 		bl	interrupt_manager
 7499              	.L470:
2178:..\src/interruptions.c ****     }
2179:..\src/interruptions.c ****     // EMG 2 calibration state machine
2180:..\src/interruptions.c ****     switch(emg_2_status) {
 7500              		.loc 1 2180 0
 7501 0a64 334B     		ldr	r3, .L572+8
 7502 0a66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7503 0a68 052B     		cmp	r3, #5
 7504 0a6a 00F2C681 		bhi	.L553
 7505 0a6e 01A2     		adr	r2, .L473
 7506 0a70 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7507              		.p2align 2
 7508              	.L473:
 7509 0a74 8D0A0000 		.word	.L472+1
 7510 0a78 590B0000 		.word	.L474+1
 7511 0a7c 810B0000 		.word	.L475+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 174


 7512 0a80 BF0B0000 		.word	.L476+1
 7513 0a84 710C0000 		.word	.L477+1
 7514 0a88 830C0000 		.word	.L478+1
 7515              		.p2align 1
 7516              	.L472:
2181:..\src/interruptions.c ****         case NORMAL: // normal execution
2182:..\src/interruptions.c ****         
2183:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7517              		.loc 1 2183 0
 7518 0a8c 2A4B     		ldr	r3, .L572+12
 7519 0a8e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7520 0a92 022B     		cmp	r3, #2
 7521 0a94 14D0     		beq	.L479
 7522              		.loc 1 2183 0 is_stmt 0 discriminator 1
 7523 0a96 284B     		ldr	r3, .L572+12
 7524 0a98 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7525 0a9c 032B     		cmp	r3, #3
 7526 0a9e 0FD0     		beq	.L479
2184:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7527              		.loc 1 2184 0 is_stmt 1
 7528 0aa0 224B     		ldr	r3, .L572
 7529 0aa2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7530 0aa6 C3F10303 		rsb	r3, r3, #3
 7531 0aaa 244A     		ldr	r2, .L572+16
 7532 0aac 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7533 0ab0 A3F26763 		subw	r3, r3, #1639
 7534 0ab4 5722     		movs	r2, #87
 7535 0ab6 02FB03F3 		mul	r3, r2, r3
 7536 0aba 5B11     		asrs	r3, r3, #5
 7537 0abc 7B60     		str	r3, [r7, #4]
 7538 0abe 08E0     		b	.L480
 7539              	.L479:
2185:..\src/interruptions.c ****             }
2186:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2187:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7540              		.loc 1 2187 0
 7541 0ac0 1A4B     		ldr	r3, .L572
 7542 0ac2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7543 0ac6 C3F10303 		rsb	r3, r3, #3
 7544 0aca 1C4A     		ldr	r2, .L572+16
 7545 0acc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7546 0ad0 7B60     		str	r3, [r7, #4]
 7547              	.L480:
2188:..\src/interruptions.c ****             }
2189:..\src/interruptions.c **** 
2190:..\src/interruptions.c ****             if (i_aux < 0)
 7548              		.loc 1 2190 0
 7549 0ad2 7B68     		ldr	r3, [r7, #4]
 7550 0ad4 002B     		cmp	r3, #0
 7551 0ad6 01DA     		bge	.L481
2191:..\src/interruptions.c ****                 i_aux = 0;
 7552              		.loc 1 2191 0
 7553 0ad8 0023     		movs	r3, #0
 7554 0ada 7B60     		str	r3, [r7, #4]
 7555              	.L481:
2192:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7556              		.loc 1 2192 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 175


 7557 0adc 1D49     		ldr	r1, .L572+40
 7558 0ade 7868     		ldr	r0, [r7, #4]
 7559 0ae0 FFF7FEFF 		bl	filter
 7560 0ae4 7860     		str	r0, [r7, #4]
2193:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7561              		.loc 1 2193 0
 7562 0ae6 7B68     		ldr	r3, [r7, #4]
 7563 0ae8 9B02     		lsls	r3, r3, #10
 7564 0aea 1A46     		mov	r2, r3
 7565 0aec 124B     		ldr	r3, .L572+12
 7566 0aee D3F8F831 		ldr	r3, [r3, #504]
 7567 0af2 B2FBF3F3 		udiv	r3, r2, r3
 7568 0af6 7B60     		str	r3, [r7, #4]
2194:..\src/interruptions.c **** 
2195:..\src/interruptions.c ****             if (interrupt_flag){
 7569              		.loc 1 2195 0
 7570 0af8 124B     		ldr	r3, .L572+24
 7571 0afa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7572 0afc 002B     		cmp	r3, #0
 7573 0afe 04D0     		beq	.L482
2196:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7574              		.loc 1 2196 0
 7575 0b00 104B     		ldr	r3, .L572+24
 7576 0b02 0022     		movs	r2, #0
 7577 0b04 1A70     		strb	r2, [r3]
2197:..\src/interruptions.c ****                 interrupt_manager();
 7578              		.loc 1 2197 0
 7579 0b06 FFF7FEFF 		bl	interrupt_manager
 7580              	.L482:
2198:..\src/interruptions.c ****             }
2199:..\src/interruptions.c ****             
2200:..\src/interruptions.c ****             if (i_aux < 0) 
 7581              		.loc 1 2200 0
 7582 0b0a 7B68     		ldr	r3, [r7, #4]
 7583 0b0c 002B     		cmp	r3, #0
 7584 0b0e 02DA     		bge	.L483
2201:..\src/interruptions.c ****                 i_aux = 0;
 7585              		.loc 1 2201 0
 7586 0b10 0023     		movs	r3, #0
 7587 0b12 7B60     		str	r3, [r7, #4]
 7588 0b14 06E0     		b	.L484
 7589              	.L483:
2202:..\src/interruptions.c ****             else 
2203:..\src/interruptions.c ****                 if (i_aux > 1024)
 7590              		.loc 1 2203 0
 7591 0b16 7B68     		ldr	r3, [r7, #4]
 7592 0b18 B3F5806F 		cmp	r3, #1024
 7593 0b1c 02DD     		ble	.L484
2204:..\src/interruptions.c ****                     i_aux = 1024;
 7594              		.loc 1 2204 0
 7595 0b1e 4FF48063 		mov	r3, #1024
 7596 0b22 7B60     		str	r3, [r7, #4]
 7597              	.L484:
2205:..\src/interruptions.c ****             
2206:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7598              		.loc 1 2206 0
 7599 0b24 084A     		ldr	r2, .L572+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 176


 7600 0b26 7B68     		ldr	r3, [r7, #4]
 7601 0b28 5360     		str	r3, [r2, #4]
2207:..\src/interruptions.c **** 
2208:..\src/interruptions.c ****             break;
 7602              		.loc 1 2208 0
 7603 0b2a 88E1     		b	.L485
 7604              	.L573:
 7605              		.align	2
 7606              	.L572:
 7607 0b2c 00000000 		.word	c_mem
 7608 0b30 00000000 		.word	emg_1_status
 7609 0b34 00000000 		.word	emg_2_status
 7610 0b38 00000000 		.word	g_mem
 7611 0b3c 00000000 		.word	ADC_buf
 7612 0b40 00000000 		.word	filt_emg
 7613 0b44 00000000 		.word	interrupt_flag
 7614 0b48 00000000 		.word	g_adc_meas
 7615 0b4c 7C010000 		.word	emg_counter_1.10422
 7616 0b50 D34D6210 		.word	274877907
 7617 0b54 08000000 		.word	filt_emg+8
 7618              	.L474:
2209:..\src/interruptions.c **** 
2210:..\src/interruptions.c ****         case RESET: // reset variables
2211:..\src/interruptions.c ****             emg_counter_2 = 0;
 7619              		.loc 1 2211 0
 7620 0b58 AC4B     		ldr	r3, .L574
 7621 0b5a 0022     		movs	r2, #0
 7622 0b5c 1A80     		strh	r2, [r3]	@ movhi
2212:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7623              		.loc 1 2212 0
 7624 0b5e AC4B     		ldr	r3, .L574+4
 7625 0b60 0022     		movs	r2, #0
 7626 0b62 C3F8F821 		str	r2, [r3, #504]
2213:..\src/interruptions.c **** 
2214:..\src/interruptions.c ****             if (interrupt_flag){
 7627              		.loc 1 2214 0
 7628 0b66 AB4B     		ldr	r3, .L574+8
 7629 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7630 0b6a 002B     		cmp	r3, #0
 7631 0b6c 04D0     		beq	.L486
2215:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7632              		.loc 1 2215 0
 7633 0b6e A94B     		ldr	r3, .L574+8
 7634 0b70 0022     		movs	r2, #0
 7635 0b72 1A70     		strb	r2, [r3]
2216:..\src/interruptions.c ****                 interrupt_manager();
 7636              		.loc 1 2216 0
 7637 0b74 FFF7FEFF 		bl	interrupt_manager
 7638              	.L486:
2217:..\src/interruptions.c ****             }
2218:..\src/interruptions.c ****             
2219:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7639              		.loc 1 2219 0
 7640 0b78 A74B     		ldr	r3, .L574+12
 7641 0b7a 0422     		movs	r2, #4
 7642 0b7c 1A70     		strb	r2, [r3]
2220:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 177


 7643              		.loc 1 2220 0
 7644 0b7e 5EE1     		b	.L485
 7645              	.L475:
2221:..\src/interruptions.c **** 
2222:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2223:..\src/interruptions.c ****             emg_counter_2++;
 7646              		.loc 1 2223 0
 7647 0b80 A24B     		ldr	r3, .L574
 7648 0b82 1B88     		ldrh	r3, [r3]
 7649 0b84 0133     		adds	r3, r3, #1
 7650 0b86 9AB2     		uxth	r2, r3
 7651 0b88 A04B     		ldr	r3, .L574
 7652 0b8a 1A80     		strh	r2, [r3]	@ movhi
2224:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7653              		.loc 1 2224 0
 7654 0b8c 9F4B     		ldr	r3, .L574
 7655 0b8e 1B88     		ldrh	r3, [r3]
 7656 0b90 B3F5FA7F 		cmp	r3, #500
 7657 0b94 40F03381 		bne	.L554
2225:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7658              		.loc 1 2225 0
 7659 0b98 9C4B     		ldr	r3, .L574
 7660 0b9a 0022     		movs	r2, #0
 7661 0b9c 1A80     		strh	r2, [r3]	@ movhi
2226:..\src/interruptions.c ****                 LED_control(1);
 7662              		.loc 1 2226 0
 7663 0b9e 0120     		movs	r0, #1
 7664 0ba0 FFF7FEFF 		bl	LED_control
2227:..\src/interruptions.c **** 
2228:..\src/interruptions.c ****                 if (interrupt_flag){
 7665              		.loc 1 2228 0
 7666 0ba4 9B4B     		ldr	r3, .L574+8
 7667 0ba6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7668 0ba8 002B     		cmp	r3, #0
 7669 0baa 04D0     		beq	.L488
2229:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7670              		.loc 1 2229 0
 7671 0bac 994B     		ldr	r3, .L574+8
 7672 0bae 0022     		movs	r2, #0
 7673 0bb0 1A70     		strb	r2, [r3]
2230:..\src/interruptions.c ****                     interrupt_manager();
 7674              		.loc 1 2230 0
 7675 0bb2 FFF7FEFF 		bl	interrupt_manager
 7676              	.L488:
2231:..\src/interruptions.c ****                 }
2232:..\src/interruptions.c ****                 
2233:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7677              		.loc 1 2233 0
 7678 0bb6 984B     		ldr	r3, .L574+12
 7679 0bb8 0322     		movs	r2, #3
 7680 0bba 1A70     		strb	r2, [r3]
2234:..\src/interruptions.c ****             }
2235:..\src/interruptions.c ****             break;
 7681              		.loc 1 2235 0
 7682 0bbc 1FE1     		b	.L554
 7683              	.L476:
2236:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 178


2237:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2238:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2239:..\src/interruptions.c ****             emg_counter_2++;
 7684              		.loc 1 2239 0
 7685 0bbe 934B     		ldr	r3, .L574
 7686 0bc0 1B88     		ldrh	r3, [r3]
 7687 0bc2 0133     		adds	r3, r3, #1
 7688 0bc4 9AB2     		uxth	r2, r3
 7689 0bc6 914B     		ldr	r3, .L574
 7690 0bc8 1A80     		strh	r2, [r3]	@ movhi
2240:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7691              		.loc 1 2240 0
 7692 0bca 944B     		ldr	r3, .L574+16
 7693 0bcc 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7694 0bd0 C3F10303 		rsb	r3, r3, #3
 7695 0bd4 924A     		ldr	r2, .L574+20
 7696 0bd6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7697 0bda 002B     		cmp	r3, #0
 7698 0bdc 08DA     		bge	.L489
2241:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7699              		.loc 1 2241 0
 7700 0bde 8F4B     		ldr	r3, .L574+16
 7701 0be0 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7702 0be4 C3F10303 		rsb	r3, r3, #3
 7703 0be8 8D4A     		ldr	r2, .L574+20
 7704 0bea 0021     		movs	r1, #0
 7705 0bec 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7706              	.L489:
2242:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7707              		.loc 1 2242 0
 7708 0bf0 8A4B     		ldr	r3, .L574+16
 7709 0bf2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7710 0bf6 C3F10303 		rsb	r3, r3, #3
 7711 0bfa 894A     		ldr	r2, .L574+20
 7712 0bfc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7713 0c00 8849     		ldr	r1, .L574+24
 7714 0c02 1846     		mov	r0, r3
 7715 0c04 FFF7FEFF 		bl	filter
 7716 0c08 0246     		mov	r2, r0
 7717 0c0a 814B     		ldr	r3, .L574+4
 7718 0c0c D3F8F831 		ldr	r3, [r3, #504]
 7719 0c10 1344     		add	r3, r3, r2
 7720 0c12 7F4A     		ldr	r2, .L574+4
 7721 0c14 C2F8F831 		str	r3, [r2, #504]
2243:..\src/interruptions.c **** 
2244:..\src/interruptions.c ****             if (interrupt_flag){
 7722              		.loc 1 2244 0
 7723 0c18 7E4B     		ldr	r3, .L574+8
 7724 0c1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7725 0c1c 002B     		cmp	r3, #0
 7726 0c1e 04D0     		beq	.L490
2245:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7727              		.loc 1 2245 0
 7728 0c20 7C4B     		ldr	r3, .L574+8
 7729 0c22 0022     		movs	r2, #0
 7730 0c24 1A70     		strb	r2, [r3]
2246:..\src/interruptions.c ****                 interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 179


 7731              		.loc 1 2246 0
 7732 0c26 FFF7FEFF 		bl	interrupt_manager
 7733              	.L490:
2247:..\src/interruptions.c ****             }
2248:..\src/interruptions.c ****             
2249:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7734              		.loc 1 2249 0
 7735 0c2a 784B     		ldr	r3, .L574
 7736 0c2c 1B88     		ldrh	r3, [r3]
 7737 0c2e B3F57A7F 		cmp	r3, #1000
 7738 0c32 40F0E680 		bne	.L555
2250:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7739              		.loc 1 2250 0
 7740 0c36 764B     		ldr	r3, .L574+4
 7741 0c38 D3F8F831 		ldr	r3, [r3, #504]
 7742 0c3c 7A4A     		ldr	r2, .L574+28
 7743 0c3e A2FB0323 		umull	r2, r3, r2, r3
 7744 0c42 9B09     		lsrs	r3, r3, #6
 7745 0c44 724A     		ldr	r2, .L574+4
 7746 0c46 C2F8F831 		str	r3, [r2, #504]
2251:..\src/interruptions.c ****                 LED_control(0);
 7747              		.loc 1 2251 0
 7748 0c4a 0020     		movs	r0, #0
 7749 0c4c FFF7FEFF 		bl	LED_control
2252:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7750              		.loc 1 2252 0
 7751 0c50 6E4B     		ldr	r3, .L574
 7752 0c52 0022     		movs	r2, #0
 7753 0c54 1A80     		strh	r2, [r3]	@ movhi
2253:..\src/interruptions.c ****             
2254:..\src/interruptions.c ****                 if (interrupt_flag){
 7754              		.loc 1 2254 0
 7755 0c56 6F4B     		ldr	r3, .L574+8
 7756 0c58 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7757 0c5a 002B     		cmp	r3, #0
 7758 0c5c 04D0     		beq	.L492
2255:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7759              		.loc 1 2255 0
 7760 0c5e 6D4B     		ldr	r3, .L574+8
 7761 0c60 0022     		movs	r2, #0
 7762 0c62 1A70     		strb	r2, [r3]
2256:..\src/interruptions.c ****                     interrupt_manager();
 7763              		.loc 1 2256 0
 7764 0c64 FFF7FEFF 		bl	interrupt_manager
 7765              	.L492:
2257:..\src/interruptions.c ****                 }
2258:..\src/interruptions.c ****                 
2259:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7766              		.loc 1 2259 0
 7767 0c68 6B4B     		ldr	r3, .L574+12
 7768 0c6a 0522     		movs	r2, #5
 7769 0c6c 1A70     		strb	r2, [r3]
2260:..\src/interruptions.c ****             }
2261:..\src/interruptions.c ****             break;
 7770              		.loc 1 2261 0
 7771 0c6e C8E0     		b	.L555
 7772              	.L477:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 180


2262:..\src/interruptions.c **** 
2263:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2264:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7773              		.loc 1 2264 0
 7774 0c70 6E4B     		ldr	r3, .L574+32
 7775 0c72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7776 0c74 002B     		cmp	r3, #0
 7777 0c76 40F0C680 		bne	.L556
2265:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7778              		.loc 1 2265 0
 7779 0c7a 674B     		ldr	r3, .L574+12
 7780 0c7c 0222     		movs	r2, #2
 7781 0c7e 1A70     		strb	r2, [r3]
2266:..\src/interruptions.c ****             break;
 7782              		.loc 1 2266 0
 7783 0c80 C1E0     		b	.L556
 7784              	.L478:
2267:..\src/interruptions.c **** 
2268:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2269:..\src/interruptions.c ****             emg_counter_2++;
 7785              		.loc 1 2269 0
 7786 0c82 624B     		ldr	r3, .L574
 7787 0c84 1B88     		ldrh	r3, [r3]
 7788 0c86 0133     		adds	r3, r3, #1
 7789 0c88 9AB2     		uxth	r2, r3
 7790 0c8a 604B     		ldr	r3, .L574
 7791 0c8c 1A80     		strh	r2, [r3]	@ movhi
2270:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7792              		.loc 1 2270 0
 7793 0c8e 5F4B     		ldr	r3, .L574
 7794 0c90 1B88     		ldrh	r3, [r3]
 7795 0c92 B3F5FA7F 		cmp	r3, #500
 7796 0c96 40F0D180 		bne	.L557
2271:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7797              		.loc 1 2271 0
 7798 0c9a 5C4B     		ldr	r3, .L574
 7799 0c9c 0022     		movs	r2, #0
 7800 0c9e 1A80     		strh	r2, [r3]	@ movhi
2272:..\src/interruptions.c ****                 
2273:..\src/interruptions.c ****                 if (interrupt_flag){
 7801              		.loc 1 2273 0
 7802 0ca0 5C4B     		ldr	r3, .L574+8
 7803 0ca2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7804 0ca4 002B     		cmp	r3, #0
 7805 0ca6 04D0     		beq	.L495
2274:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7806              		.loc 1 2274 0
 7807 0ca8 5A4B     		ldr	r3, .L574+8
 7808 0caa 0022     		movs	r2, #0
 7809 0cac 1A70     		strb	r2, [r3]
2275:..\src/interruptions.c ****                     interrupt_manager();
 7810              		.loc 1 2275 0
 7811 0cae FFF7FEFF 		bl	interrupt_manager
 7812              	.L495:
2276:..\src/interruptions.c ****                 }
2277:..\src/interruptions.c ****                 
2278:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 181


 7813              		.loc 1 2278 0
 7814 0cb2 5F4B     		ldr	r3, .L574+36
 7815 0cb4 0022     		movs	r2, #0
 7816 0cb6 1A70     		strb	r2, [r3]
 7817 0cb8 93E0     		b	.L496
 7818              	.L500:
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7819              		.loc 1 2279 0
 7820 0cba 5D4B     		ldr	r3, .L574+36
 7821 0cbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7822 0cbe 1946     		mov	r1, r3
 7823 0cc0 564A     		ldr	r2, .L574+16
 7824 0cc2 0B46     		mov	r3, r1
 7825 0cc4 DB00     		lsls	r3, r3, #3
 7826 0cc6 5B1A     		subs	r3, r3, r1
 7827 0cc8 1B01     		lsls	r3, r3, #4
 7828 0cca 1344     		add	r3, r3, r2
 7829 0ccc 03F58773 		add	r3, r3, #270
 7830 0cd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7831 0cd2 022B     		cmp	r3, #2
 7832 0cd4 37D0     		beq	.L497
2280:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7833              		.loc 1 2280 0 discriminator 1
 7834 0cd6 564B     		ldr	r3, .L574+36
 7835 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7836 0cda 1946     		mov	r1, r3
 7837 0cdc 4F4A     		ldr	r2, .L574+16
 7838 0cde 0B46     		mov	r3, r1
 7839 0ce0 DB00     		lsls	r3, r3, #3
 7840 0ce2 5B1A     		subs	r3, r3, r1
 7841 0ce4 1B01     		lsls	r3, r3, #4
 7842 0ce6 1344     		add	r3, r3, r2
 7843 0ce8 03F58773 		add	r3, r3, #270
 7844 0cec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2279:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7845              		.loc 1 2279 0 discriminator 1
 7846 0cee 032B     		cmp	r3, #3
 7847 0cf0 29D0     		beq	.L497
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7848              		.loc 1 2281 0
 7849 0cf2 4F4B     		ldr	r3, .L574+36
 7850 0cf4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7851 0cf6 1946     		mov	r1, r3
 7852 0cf8 484A     		ldr	r2, .L574+16
 7853 0cfa 0B46     		mov	r3, r1
 7854 0cfc DB00     		lsls	r3, r3, #3
 7855 0cfe 5B1A     		subs	r3, r3, r1
 7856 0d00 1B01     		lsls	r3, r3, #4
 7857 0d02 1344     		add	r3, r3, r2
 7858 0d04 03F58773 		add	r3, r3, #270
 7859 0d08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2280:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7860              		.loc 1 2280 0
 7861 0d0a 042B     		cmp	r3, #4
 7862 0d0c 1BD0     		beq	.L497
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7863              		.loc 1 2282 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 182


 7864 0d0e 484B     		ldr	r3, .L574+36
 7865 0d10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7866 0d12 1946     		mov	r1, r3
 7867 0d14 414A     		ldr	r2, .L574+16
 7868 0d16 0B46     		mov	r3, r1
 7869 0d18 DB00     		lsls	r3, r3, #3
 7870 0d1a 5B1A     		subs	r3, r3, r1
 7871 0d1c 1B01     		lsls	r3, r3, #4
 7872 0d1e 1344     		add	r3, r3, r2
 7873 0d20 03F58773 		add	r3, r3, #270
 7874 0d24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2281:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7875              		.loc 1 2281 0
 7876 0d26 052B     		cmp	r3, #5
 7877 0d28 0DD0     		beq	.L497
2283:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7878              		.loc 1 2283 0
 7879 0d2a 414B     		ldr	r3, .L574+36
 7880 0d2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7881 0d2e 1946     		mov	r1, r3
 7882 0d30 3A4A     		ldr	r2, .L574+16
 7883 0d32 0B46     		mov	r3, r1
 7884 0d34 DB00     		lsls	r3, r3, #3
 7885 0d36 5B1A     		subs	r3, r3, r1
 7886 0d38 1B01     		lsls	r3, r3, #4
 7887 0d3a 1344     		add	r3, r3, r2
 7888 0d3c 03F58773 		add	r3, r3, #270
 7889 0d40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2282:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7890              		.loc 1 2282 0
 7891 0d42 072B     		cmp	r3, #7
 7892 0d44 47D1     		bne	.L498
 7893              	.L497:
2284:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7894              		.loc 1 2284 0
 7895 0d46 3A4B     		ldr	r3, .L574+36
 7896 0d48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7897 0d4a 1946     		mov	r1, r3
 7898 0d4c 334A     		ldr	r2, .L574+16
 7899 0d4e 0B46     		mov	r3, r1
 7900 0d50 DB00     		lsls	r3, r3, #3
 7901 0d52 5B1A     		subs	r3, r3, r1
 7902 0d54 1B01     		lsls	r3, r3, #4
 7903 0d56 1344     		add	r3, r3, r2
 7904 0d58 03F20F13 		addw	r3, r3, #271
 7905 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7906 0d5e 002B     		cmp	r3, #0
 7907 0d60 19D1     		bne	.L499
2285:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7908              		.loc 1 2285 0
 7909 0d62 334B     		ldr	r3, .L574+36
 7910 0d64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7911 0d66 1846     		mov	r0, r3
 7912 0d68 314B     		ldr	r3, .L574+36
 7913 0d6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7914 0d6c 1946     		mov	r1, r3
 7915 0d6e 284A     		ldr	r2, .L574+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 183


 7916 0d70 0B46     		mov	r3, r1
 7917 0d72 DB00     		lsls	r3, r3, #3
 7918 0d74 5B1A     		subs	r3, r3, r1
 7919 0d76 1B01     		lsls	r3, r3, #4
 7920 0d78 1344     		add	r3, r3, r2
 7921 0d7a 03F58873 		add	r3, r3, #272
 7922 0d7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7923 0d80 1946     		mov	r1, r3
 7924 0d82 2C4A     		ldr	r2, .L574+40
 7925 0d84 3423     		movs	r3, #52
 7926 0d86 03FB01F3 		mul	r3, r3, r1
 7927 0d8a 1344     		add	r3, r3, r2
 7928 0d8c 1A68     		ldr	r2, [r3]
 7929 0d8e 2A49     		ldr	r1, .L574+44
 7930 0d90 0301     		lsls	r3, r0, #4
 7931 0d92 0B44     		add	r3, r3, r1
 7932 0d94 1A60     		str	r2, [r3]
 7933              	.L499:
2286:..\src/interruptions.c ****                         }
2287:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7934              		.loc 1 2287 0
 7935 0d96 264B     		ldr	r3, .L574+36
 7936 0d98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7937 0d9a 1846     		mov	r0, r3
 7938 0d9c 244B     		ldr	r3, .L574+36
 7939 0d9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7940 0da0 1946     		mov	r1, r3
 7941 0da2 1E4A     		ldr	r2, .L574+16
 7942 0da4 0B46     		mov	r3, r1
 7943 0da6 DB00     		lsls	r3, r3, #3
 7944 0da8 5B1A     		subs	r3, r3, r1
 7945 0daa 1B01     		lsls	r3, r3, #4
 7946 0dac 1344     		add	r3, r3, r2
 7947 0dae E033     		adds	r3, r3, #224
 7948 0db0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7949 0db2 214A     		ldr	r2, .L574+44
 7950 0db4 0301     		lsls	r3, r0, #4
 7951 0db6 1344     		add	r3, r3, r2
 7952 0db8 0C33     		adds	r3, r3, #12
 7953 0dba 0A46     		mov	r2, r1
 7954 0dbc 1A70     		strb	r2, [r3]
2288:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7955              		.loc 1 2288 0
 7956 0dbe 1C4B     		ldr	r3, .L574+36
 7957 0dc0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7958 0dc2 1B4B     		ldr	r3, .L574+36
 7959 0dc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7960 0dc6 1C4A     		ldr	r2, .L574+44
 7961 0dc8 1B01     		lsls	r3, r3, #4
 7962 0dca 1344     		add	r3, r3, r2
 7963 0dcc 0C33     		adds	r3, r3, #12
 7964 0dce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7965 0dd0 1946     		mov	r1, r3
 7966 0dd2 FFF7FEFF 		bl	enable_motor
 7967              	.L498:
2278:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7968              		.loc 1 2278 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 184


 7969 0dd6 164B     		ldr	r3, .L574+36
 7970 0dd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7971 0dda 0133     		adds	r3, r3, #1
 7972 0ddc DAB2     		uxtb	r2, r3
 7973 0dde 144B     		ldr	r3, .L574+36
 7974 0de0 1A70     		strb	r2, [r3]
 7975              	.L496:
2278:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7976              		.loc 1 2278 0 is_stmt 0 discriminator 1
 7977 0de2 134B     		ldr	r3, .L574+36
 7978 0de4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7979 0de6 012B     		cmp	r3, #1
 7980 0de8 7FF667AF 		bls	.L500
2289:..\src/interruptions.c ****                     }
2290:..\src/interruptions.c ****                 }
2291:..\src/interruptions.c ****                     
2292:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7981              		.loc 1 2292 0 is_stmt 1
 7982 0dec 0020     		movs	r0, #0
 7983 0dee FFF7FEFF 		bl	memStore
2293:..\src/interruptions.c ****                     
2294:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7984              		.loc 1 2294 0
 7985 0df2 094B     		ldr	r3, .L574+12
 7986 0df4 0022     		movs	r2, #0
 7987 0df6 1A70     		strb	r2, [r3]
2295:..\src/interruptions.c ****             }
2296:..\src/interruptions.c ****             break;
 7988              		.loc 1 2296 0
 7989 0df8 20E0     		b	.L557
 7990              	.L553:
2297:..\src/interruptions.c ****         default:
2298:..\src/interruptions.c ****             break;
 7991              		.loc 1 2298 0
 7992 0dfa 00BF     		nop
 7993 0dfc 1FE0     		b	.L485
 7994              	.L554:
2235:..\src/interruptions.c **** 
 7995              		.loc 1 2235 0
 7996 0dfe 00BF     		nop
 7997 0e00 1DE0     		b	.L485
 7998              	.L555:
2261:..\src/interruptions.c **** 
 7999              		.loc 1 2261 0
 8000 0e02 00BF     		nop
 8001 0e04 1BE0     		b	.L485
 8002              	.L556:
2266:..\src/interruptions.c **** 
 8003              		.loc 1 2266 0
 8004 0e06 00BF     		nop
 8005 0e08 19E0     		b	.L485
 8006              	.L575:
 8007 0e0a 00BF     		.align	2
 8008              	.L574:
 8009 0e0c 7E010000 		.word	emg_counter_2.10423
 8010 0e10 00000000 		.word	g_mem
 8011 0e14 00000000 		.word	interrupt_flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 185


 8012 0e18 00000000 		.word	emg_2_status
 8013 0e1c 00000000 		.word	c_mem
 8014 0e20 00000000 		.word	ADC_buf
 8015 0e24 08000000 		.word	filt_emg+8
 8016 0e28 D34D6210 		.word	274877907
 8017 0e2c 00000000 		.word	emg_1_status
 8018 0e30 76010000 		.word	idx.10432
 8019 0e34 00000000 		.word	g_meas
 8020 0e38 00000000 		.word	g_ref
 8021              	.L557:
2296:..\src/interruptions.c ****         default:
 8022              		.loc 1 2296 0
 8023 0e3c 00BF     		nop
 8024              	.L485:
2299:..\src/interruptions.c ****     }
2300:..\src/interruptions.c ****         
2301:..\src/interruptions.c ****     if (interrupt_flag){
 8025              		.loc 1 2301 0
 8026 0e3e A74B     		ldr	r3, .L576
 8027 0e40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8028 0e42 002B     		cmp	r3, #0
 8029 0e44 04D0     		beq	.L501
2302:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8030              		.loc 1 2302 0
 8031 0e46 A54B     		ldr	r3, .L576
 8032 0e48 0022     		movs	r2, #0
 8033 0e4a 1A70     		strb	r2, [r3]
2303:..\src/interruptions.c ****         interrupt_manager();
 8034              		.loc 1 2303 0
 8035 0e4c FFF7FEFF 		bl	interrupt_manager
 8036              	.L501:
2304:..\src/interruptions.c ****     }
2305:..\src/interruptions.c ****     
2306:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8037              		.loc 1 2306 0
 8038 0e50 A34B     		ldr	r3, .L576+4
 8039 0e52 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8040 0e56 062B     		cmp	r3, #6
 8041 0e58 05D0     		beq	.L502
 8042              		.loc 1 2306 0 is_stmt 0 discriminator 1
 8043 0e5a A14B     		ldr	r3, .L576+4
 8044 0e5c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8045 0e60 062B     		cmp	r3, #6
 8046 0e62 40F0C481 		bne	.L503
 8047              	.L502:
2307:..\src/interruptions.c ****         // Read joystick
2308:..\src/interruptions.c ****         
2309:..\src/interruptions.c ****         switch (joy_UD_status) {
 8048              		.loc 1 2309 0 is_stmt 1
 8049 0e66 9F4B     		ldr	r3, .L576+8
 8050 0e68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8051 0e6a 052B     		cmp	r3, #5
 8052 0e6c 00F2CB80 		bhi	.L504
 8053 0e70 01A2     		adr	r2, .L506
 8054 0e72 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8055 0e76 00BF     		.p2align 2
 8056              	.L506:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 186


 8057 0e78 910E0000 		.word	.L505+1
 8058 0e7c 2D0F0000 		.word	.L507+1
 8059 0e80 410F0000 		.word	.L508+1
 8060 0e84 750F0000 		.word	.L509+1
 8061 0e88 E10F0000 		.word	.L510+1
 8062 0e8c E10F0000 		.word	.L510+1
 8063              		.p2align 1
 8064              	.L505:
2310:..\src/interruptions.c ****             case NORMAL:
2311:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8065              		.loc 1 2311 0
 8066 0e90 954B     		ldr	r3, .L576+12
 8067 0e92 B3F90430 		ldrsh	r3, [r3, #4]
 8068 0e96 7B60     		str	r3, [r7, #4]
2312:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2313:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8069              		.loc 1 2313 0
 8070 0e98 944B     		ldr	r3, .L576+16
 8071 0e9a 1B68     		ldr	r3, [r3]
 8072 0e9c 7A68     		ldr	r2, [r7, #4]
 8073 0e9e D31A     		subs	r3, r2, r3
 8074 0ea0 1846     		mov	r0, r3
 8075 0ea2 FFF7FEFF 		bl	__aeabi_i2f
 8076 0ea6 0446     		mov	r4, r0
 8077 0ea8 904B     		ldr	r3, .L576+16
 8078 0eaa 1B68     		ldr	r3, [r3]
 8079 0eac 1846     		mov	r0, r3
 8080 0eae FFF7FEFF 		bl	__aeabi_i2f
 8081 0eb2 0346     		mov	r3, r0
 8082 0eb4 1946     		mov	r1, r3
 8083 0eb6 2046     		mov	r0, r4
 8084 0eb8 FFF7FEFF 		bl	__aeabi_fdiv
 8085 0ebc 0346     		mov	r3, r0
 8086 0ebe 1C46     		mov	r4, r3
 8087 0ec0 874B     		ldr	r3, .L576+4
 8088 0ec2 B3F8B632 		ldrh	r3, [r3, #694]
 8089 0ec6 1846     		mov	r0, r3
 8090 0ec8 FFF7FEFF 		bl	__aeabi_i2f
 8091 0ecc 0346     		mov	r3, r0
 8092 0ece 1946     		mov	r1, r3
 8093 0ed0 2046     		mov	r0, r4
 8094 0ed2 FFF7FEFF 		bl	__aeabi_fmul
 8095 0ed6 0346     		mov	r3, r0
 8096 0ed8 1846     		mov	r0, r3
 8097 0eda FFF7FEFF 		bl	__aeabi_f2iz
 8098 0ede 0346     		mov	r3, r0
 8099 0ee0 7B60     		str	r3, [r7, #4]
2314:..\src/interruptions.c ****                 
2315:..\src/interruptions.c ****                 if (interrupt_flag){
 8100              		.loc 1 2315 0
 8101 0ee2 7E4B     		ldr	r3, .L576
 8102 0ee4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8103 0ee6 002B     		cmp	r3, #0
 8104 0ee8 04D0     		beq	.L511
2316:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8105              		.loc 1 2316 0
 8106 0eea 7C4B     		ldr	r3, .L576
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 187


 8107 0eec 0022     		movs	r2, #0
 8108 0eee 1A70     		strb	r2, [r3]
2317:..\src/interruptions.c ****                     interrupt_manager();
 8109              		.loc 1 2317 0
 8110 0ef0 FFF7FEFF 		bl	interrupt_manager
 8111              	.L511:
2318:..\src/interruptions.c ****                 }
2319:..\src/interruptions.c **** 
2320:..\src/interruptions.c ****                 //Saturation
2321:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8112              		.loc 1 2321 0
 8113 0ef4 7B68     		ldr	r3, [r7, #4]
 8114 0ef6 13F5806F 		cmn	r3, #1024
 8115 0efa 01DA     		bge	.L512
2322:..\src/interruptions.c ****                     i_aux = -1024;
 8116              		.loc 1 2322 0
 8117 0efc 7C4B     		ldr	r3, .L576+20
 8118 0efe 7B60     		str	r3, [r7, #4]
 8119              	.L512:
2323:..\src/interruptions.c ****                 if (i_aux > 1024)
 8120              		.loc 1 2323 0
 8121 0f00 7B68     		ldr	r3, [r7, #4]
 8122 0f02 B3F5806F 		cmp	r3, #1024
 8123 0f06 02DD     		ble	.L513
2324:..\src/interruptions.c ****                     i_aux = 1024;
 8124              		.loc 1 2324 0
 8125 0f08 4FF48063 		mov	r3, #1024
 8126 0f0c 7B60     		str	r3, [r7, #4]
 8127              	.L513:
2325:..\src/interruptions.c **** 
2326:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8128              		.loc 1 2326 0
 8129 0f0e 7B68     		ldr	r3, [r7, #4]
 8130 0f10 1BB2     		sxth	r3, r3
 8131 0f12 1A46     		mov	r2, r3
 8132 0f14 774B     		ldr	r3, .L576+24
 8133 0f16 5A62     		str	r2, [r3, #36]
2327:..\src/interruptions.c **** 
2328:..\src/interruptions.c ****                 if (interrupt_flag){
 8134              		.loc 1 2328 0
 8135 0f18 704B     		ldr	r3, .L576
 8136 0f1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8137 0f1c 002B     		cmp	r3, #0
 8138 0f1e 6BD0     		beq	.L558
2329:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8139              		.loc 1 2329 0
 8140 0f20 6E4B     		ldr	r3, .L576
 8141 0f22 0022     		movs	r2, #0
 8142 0f24 1A70     		strb	r2, [r3]
2330:..\src/interruptions.c ****                     interrupt_manager();
 8143              		.loc 1 2330 0
 8144 0f26 FFF7FEFF 		bl	interrupt_manager
2331:..\src/interruptions.c ****                 }
2332:..\src/interruptions.c **** 
2333:..\src/interruptions.c ****             break;
 8145              		.loc 1 2333 0
 8146 0f2a 65E0     		b	.L558
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 188


 8147              	.L507:
2334:..\src/interruptions.c **** 
2335:..\src/interruptions.c ****             case RESET: // reset variables
2336:..\src/interruptions.c ****                 UD_counter = 0;
 8148              		.loc 1 2336 0
 8149 0f2c 724B     		ldr	r3, .L576+28
 8150 0f2e 0022     		movs	r2, #0
 8151 0f30 1A80     		strh	r2, [r3]	@ movhi
2337:..\src/interruptions.c ****                 UD_mean_value = 0;
 8152              		.loc 1 2337 0
 8153 0f32 6E4B     		ldr	r3, .L576+16
 8154 0f34 0022     		movs	r2, #0
 8155 0f36 1A60     		str	r2, [r3]
2338:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8156              		.loc 1 2338 0
 8157 0f38 6A4B     		ldr	r3, .L576+8
 8158 0f3a 0422     		movs	r2, #4
 8159 0f3c 1A70     		strb	r2, [r3]
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****             break;
 8160              		.loc 1 2340 0
 8161 0f3e 62E0     		b	.L504
 8162              	.L508:
2341:..\src/interruptions.c **** 
2342:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2343:..\src/interruptions.c ****                 UD_counter++;
 8163              		.loc 1 2343 0
 8164 0f40 6D4B     		ldr	r3, .L576+28
 8165 0f42 1B88     		ldrh	r3, [r3]
 8166 0f44 0133     		adds	r3, r3, #1
 8167 0f46 9AB2     		uxth	r2, r3
 8168 0f48 6B4B     		ldr	r3, .L576+28
 8169 0f4a 1A80     		strh	r2, [r3]	@ movhi
2344:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8170              		.loc 1 2344 0
 8171 0f4c 6A4B     		ldr	r3, .L576+28
 8172 0f4e 1B88     		ldrh	r3, [r3]
 8173 0f50 642B     		cmp	r3, #100
 8174 0f52 53D1     		bne	.L559
2345:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8175              		.loc 1 2345 0
 8176 0f54 684B     		ldr	r3, .L576+28
 8177 0f56 0022     		movs	r2, #0
 8178 0f58 1A80     		strh	r2, [r3]	@ movhi
2346:..\src/interruptions.c **** 
2347:..\src/interruptions.c ****                     if (interrupt_flag){
 8179              		.loc 1 2347 0
 8180 0f5a 604B     		ldr	r3, .L576
 8181 0f5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8182 0f5e 002B     		cmp	r3, #0
 8183 0f60 04D0     		beq	.L516
2348:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8184              		.loc 1 2348 0
 8185 0f62 5E4B     		ldr	r3, .L576
 8186 0f64 0022     		movs	r2, #0
 8187 0f66 1A70     		strb	r2, [r3]
2349:..\src/interruptions.c ****                         interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 189


 8188              		.loc 1 2349 0
 8189 0f68 FFF7FEFF 		bl	interrupt_manager
 8190              	.L516:
2350:..\src/interruptions.c ****                     }
2351:..\src/interruptions.c **** 
2352:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8191              		.loc 1 2352 0
 8192 0f6c 5D4B     		ldr	r3, .L576+8
 8193 0f6e 0322     		movs	r2, #3
 8194 0f70 1A70     		strb	r2, [r3]
2353:..\src/interruptions.c ****                 }
2354:..\src/interruptions.c **** 
2355:..\src/interruptions.c ****             break;
 8195              		.loc 1 2355 0
 8196 0f72 43E0     		b	.L559
 8197              	.L509:
2356:..\src/interruptions.c **** 
2357:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2358:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2359:..\src/interruptions.c ****                 UD_counter++;
 8198              		.loc 1 2359 0
 8199 0f74 604B     		ldr	r3, .L576+28
 8200 0f76 1B88     		ldrh	r3, [r3]
 8201 0f78 0133     		adds	r3, r3, #1
 8202 0f7a 9AB2     		uxth	r2, r3
 8203 0f7c 5E4B     		ldr	r3, .L576+28
 8204 0f7e 1A80     		strh	r2, [r3]	@ movhi
2360:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8205              		.loc 1 2360 0
 8206 0f80 594B     		ldr	r3, .L576+12
 8207 0f82 B3F90430 		ldrsh	r3, [r3, #4]
 8208 0f86 1A46     		mov	r2, r3
 8209 0f88 584B     		ldr	r3, .L576+16
 8210 0f8a 1B68     		ldr	r3, [r3]
 8211 0f8c 1344     		add	r3, r3, r2
 8212 0f8e 574A     		ldr	r2, .L576+16
 8213 0f90 1360     		str	r3, [r2]
2361:..\src/interruptions.c **** 
2362:..\src/interruptions.c ****                 if (interrupt_flag){
 8214              		.loc 1 2362 0
 8215 0f92 524B     		ldr	r3, .L576
 8216 0f94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8217 0f96 002B     		cmp	r3, #0
 8218 0f98 04D0     		beq	.L517
2363:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8219              		.loc 1 2363 0
 8220 0f9a 504B     		ldr	r3, .L576
 8221 0f9c 0022     		movs	r2, #0
 8222 0f9e 1A70     		strb	r2, [r3]
2364:..\src/interruptions.c ****                     interrupt_manager();
 8223              		.loc 1 2364 0
 8224 0fa0 FFF7FEFF 		bl	interrupt_manager
 8225              	.L517:
2365:..\src/interruptions.c ****                 }
2366:..\src/interruptions.c **** 
2367:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8226              		.loc 1 2367 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 190


 8227 0fa4 544B     		ldr	r3, .L576+28
 8228 0fa6 1B88     		ldrh	r3, [r3]
 8229 0fa8 C82B     		cmp	r3, #200
 8230 0faa 29D1     		bne	.L560
2368:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8231              		.loc 1 2368 0
 8232 0fac 4F4B     		ldr	r3, .L576+16
 8233 0fae 1B68     		ldr	r3, [r3]
 8234 0fb0 524A     		ldr	r2, .L576+32
 8235 0fb2 82FB0312 		smull	r1, r2, r2, r3
 8236 0fb6 9211     		asrs	r2, r2, #6
 8237 0fb8 DB17     		asrs	r3, r3, #31
 8238 0fba D31A     		subs	r3, r2, r3
 8239 0fbc 4B4A     		ldr	r2, .L576+16
 8240 0fbe 1360     		str	r3, [r2]
2369:..\src/interruptions.c **** 
2370:..\src/interruptions.c ****                     if (interrupt_flag){
 8241              		.loc 1 2370 0
 8242 0fc0 464B     		ldr	r3, .L576
 8243 0fc2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8244 0fc4 002B     		cmp	r3, #0
 8245 0fc6 04D0     		beq	.L519
2371:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8246              		.loc 1 2371 0
 8247 0fc8 444B     		ldr	r3, .L576
 8248 0fca 0022     		movs	r2, #0
 8249 0fcc 1A70     		strb	r2, [r3]
2372:..\src/interruptions.c ****                         interrupt_manager();
 8250              		.loc 1 2372 0
 8251 0fce FFF7FEFF 		bl	interrupt_manager
 8252              	.L519:
2373:..\src/interruptions.c ****                     }
2374:..\src/interruptions.c **** 
2375:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8253              		.loc 1 2375 0
 8254 0fd2 494B     		ldr	r3, .L576+28
 8255 0fd4 0022     		movs	r2, #0
 8256 0fd6 1A80     		strh	r2, [r3]	@ movhi
2376:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8257              		.loc 1 2376 0
 8258 0fd8 424B     		ldr	r3, .L576+8
 8259 0fda 0022     		movs	r2, #0
 8260 0fdc 1A70     		strb	r2, [r3]
2377:..\src/interruptions.c ****                 }
2378:..\src/interruptions.c ****             break;
 8261              		.loc 1 2378 0
 8262 0fde 0FE0     		b	.L560
 8263              	.L510:
2379:..\src/interruptions.c **** 
2380:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2381:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8264              		.loc 1 2381 0
 8265 0fe0 474B     		ldr	r3, .L576+36
 8266 0fe2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8267 0fe4 002B     		cmp	r3, #0
 8268 0fe6 0DD1     		bne	.L561
 8269              		.loc 1 2381 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 191


 8270 0fe8 464B     		ldr	r3, .L576+40
 8271 0fea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8272 0fec 002B     		cmp	r3, #0
 8273 0fee 09D1     		bne	.L561
2382:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8274              		.loc 1 2382 0 is_stmt 1
 8275 0ff0 3C4B     		ldr	r3, .L576+8
 8276 0ff2 0222     		movs	r2, #2
 8277 0ff4 1A70     		strb	r2, [r3]
2383:..\src/interruptions.c ****             break;
 8278              		.loc 1 2383 0
 8279 0ff6 05E0     		b	.L561
 8280              	.L558:
2333:..\src/interruptions.c **** 
 8281              		.loc 1 2333 0
 8282 0ff8 00BF     		nop
 8283 0ffa 04E0     		b	.L504
 8284              	.L559:
2355:..\src/interruptions.c **** 
 8285              		.loc 1 2355 0
 8286 0ffc 00BF     		nop
 8287 0ffe 02E0     		b	.L504
 8288              	.L560:
2378:..\src/interruptions.c **** 
 8289              		.loc 1 2378 0
 8290 1000 00BF     		nop
 8291 1002 00E0     		b	.L504
 8292              	.L561:
 8293              		.loc 1 2383 0
 8294 1004 00BF     		nop
 8295              	.L504:
2384:..\src/interruptions.c ****         }
2385:..\src/interruptions.c **** 
2386:..\src/interruptions.c ****         if (interrupt_flag){
 8296              		.loc 1 2386 0
 8297 1006 354B     		ldr	r3, .L576
 8298 1008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8299 100a 002B     		cmp	r3, #0
 8300 100c 04D0     		beq	.L521
2387:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8301              		.loc 1 2387 0
 8302 100e 334B     		ldr	r3, .L576
 8303 1010 0022     		movs	r2, #0
 8304 1012 1A70     		strb	r2, [r3]
2388:..\src/interruptions.c ****             interrupt_manager();
 8305              		.loc 1 2388 0
 8306 1014 FFF7FEFF 		bl	interrupt_manager
 8307              	.L521:
2389:..\src/interruptions.c ****         }
2390:..\src/interruptions.c ****             
2391:..\src/interruptions.c ****         switch (joy_LR_status) {
 8308              		.loc 1 2391 0
 8309 1018 3B4B     		ldr	r3, .L576+44
 8310 101a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8311 101c 052B     		cmp	r3, #5
 8312 101e 00F2DD80 		bhi	.L522
 8313 1022 01A2     		adr	r2, .L524
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 192


 8314 1024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8315              		.p2align 2
 8316              	.L524:
 8317 1028 41100000 		.word	.L523+1
 8318 102c 11110000 		.word	.L525+1
 8319 1030 25110000 		.word	.L526+1
 8320 1034 59110000 		.word	.L527+1
 8321 1038 B3110000 		.word	.L528+1
 8322 103c B3110000 		.word	.L528+1
 8323              		.p2align 1
 8324              	.L523:
2392:..\src/interruptions.c ****             case NORMAL:
2393:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8325              		.loc 1 2393 0
 8326 1040 294B     		ldr	r3, .L576+12
 8327 1042 B3F90630 		ldrsh	r3, [r3, #6]
 8328 1046 7B60     		str	r3, [r7, #4]
2394:..\src/interruptions.c **** 
2395:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8329              		.loc 1 2395 0
 8330 1048 304B     		ldr	r3, .L576+48
 8331 104a 1B68     		ldr	r3, [r3]
 8332 104c 7A68     		ldr	r2, [r7, #4]
 8333 104e D31A     		subs	r3, r2, r3
 8334 1050 1846     		mov	r0, r3
 8335 1052 FFF7FEFF 		bl	__aeabi_i2f
 8336 1056 0446     		mov	r4, r0
 8337 1058 2C4B     		ldr	r3, .L576+48
 8338 105a 1B68     		ldr	r3, [r3]
 8339 105c 1846     		mov	r0, r3
 8340 105e FFF7FEFF 		bl	__aeabi_i2f
 8341 1062 0346     		mov	r3, r0
 8342 1064 1946     		mov	r1, r3
 8343 1066 2046     		mov	r0, r4
 8344 1068 FFF7FEFF 		bl	__aeabi_fdiv
 8345 106c 0346     		mov	r3, r0
 8346 106e 1C46     		mov	r4, r3
 8347 1070 1B4B     		ldr	r3, .L576+4
 8348 1072 B3F8B432 		ldrh	r3, [r3, #692]
 8349 1076 1846     		mov	r0, r3
 8350 1078 FFF7FEFF 		bl	__aeabi_i2f
 8351 107c 0346     		mov	r3, r0
 8352 107e 1946     		mov	r1, r3
 8353 1080 2046     		mov	r0, r4
 8354 1082 FFF7FEFF 		bl	__aeabi_fmul
 8355 1086 0346     		mov	r3, r0
 8356 1088 1846     		mov	r0, r3
 8357 108a FFF7FEFF 		bl	__aeabi_f2iz
 8358 108e 0346     		mov	r3, r0
 8359 1090 7B60     		str	r3, [r7, #4]
2396:..\src/interruptions.c ****                 
2397:..\src/interruptions.c ****                 if (interrupt_flag){
 8360              		.loc 1 2397 0
 8361 1092 124B     		ldr	r3, .L576
 8362 1094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8363 1096 002B     		cmp	r3, #0
 8364 1098 04D0     		beq	.L529
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 193


2398:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8365              		.loc 1 2398 0
 8366 109a 104B     		ldr	r3, .L576
 8367 109c 0022     		movs	r2, #0
 8368 109e 1A70     		strb	r2, [r3]
2399:..\src/interruptions.c ****                     interrupt_manager();
 8369              		.loc 1 2399 0
 8370 10a0 FFF7FEFF 		bl	interrupt_manager
 8371              	.L529:
2400:..\src/interruptions.c ****                 }
2401:..\src/interruptions.c **** 
2402:..\src/interruptions.c ****                 //Saturation
2403:..\src/interruptions.c ****                 if (i_aux < -1024)
 8372              		.loc 1 2403 0
 8373 10a4 7B68     		ldr	r3, [r7, #4]
 8374 10a6 13F5806F 		cmn	r3, #1024
 8375 10aa 01DA     		bge	.L530
2404:..\src/interruptions.c ****                     i_aux = -1024;
 8376              		.loc 1 2404 0
 8377 10ac 104B     		ldr	r3, .L576+20
 8378 10ae 7B60     		str	r3, [r7, #4]
 8379              	.L530:
2405:..\src/interruptions.c ****                 if (i_aux > 1024)
 8380              		.loc 1 2405 0
 8381 10b0 7B68     		ldr	r3, [r7, #4]
 8382 10b2 B3F5806F 		cmp	r3, #1024
 8383 10b6 02DD     		ble	.L531
2406:..\src/interruptions.c ****                     i_aux = 1024;
 8384              		.loc 1 2406 0
 8385 10b8 4FF48063 		mov	r3, #1024
 8386 10bc 7B60     		str	r3, [r7, #4]
 8387              	.L531:
2407:..\src/interruptions.c **** 
2408:..\src/interruptions.c ****                 if (interrupt_flag){
 8388              		.loc 1 2408 0
 8389 10be 074B     		ldr	r3, .L576
 8390 10c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8391 10c2 002B     		cmp	r3, #0
 8392 10c4 04D0     		beq	.L532
2409:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8393              		.loc 1 2409 0
 8394 10c6 054B     		ldr	r3, .L576
 8395 10c8 0022     		movs	r2, #0
 8396 10ca 1A70     		strb	r2, [r3]
2410:..\src/interruptions.c ****                     interrupt_manager();
 8397              		.loc 1 2410 0
 8398 10cc FFF7FEFF 		bl	interrupt_manager
 8399              	.L532:
2411:..\src/interruptions.c ****                 }
2412:..\src/interruptions.c **** 
2413:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8400              		.loc 1 2413 0
 8401 10d0 7B68     		ldr	r3, [r7, #4]
 8402 10d2 1BB2     		sxth	r3, r3
 8403 10d4 1A46     		mov	r2, r3
 8404 10d6 074B     		ldr	r3, .L576+24
 8405 10d8 1A62     		str	r2, [r3, #32]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 194


2414:..\src/interruptions.c **** 
2415:..\src/interruptions.c ****             break;
 8406              		.loc 1 2415 0
 8407 10da 7FE0     		b	.L522
 8408              	.L577:
 8409              		.align	2
 8410              	.L576:
 8411 10dc 00000000 		.word	interrupt_flag
 8412 10e0 00000000 		.word	c_mem
 8413 10e4 00000000 		.word	joy_UD_status
 8414 10e8 00000000 		.word	ADC_buf
 8415 10ec 80010000 		.word	UD_mean_value.10426
 8416 10f0 00FCFFFF 		.word	-1024
 8417 10f4 00000000 		.word	g_adc_meas
 8418 10f8 84010000 		.word	UD_counter.10424
 8419 10fc 1F85EB51 		.word	1374389535
 8420 1100 00000000 		.word	emg_1_status
 8421 1104 00000000 		.word	emg_2_status
 8422 1108 00000000 		.word	joy_LR_status
 8423 110c 88010000 		.word	LR_mean_value.10427
 8424              	.L525:
2416:..\src/interruptions.c **** 
2417:..\src/interruptions.c ****             case RESET: // reset variables
2418:..\src/interruptions.c ****                 LR_counter = 0;
 8425              		.loc 1 2418 0
 8426 1110 644B     		ldr	r3, .L578
 8427 1112 0022     		movs	r2, #0
 8428 1114 1A80     		strh	r2, [r3]	@ movhi
2419:..\src/interruptions.c ****                 LR_mean_value = 0;
 8429              		.loc 1 2419 0
 8430 1116 644B     		ldr	r3, .L578+4
 8431 1118 0022     		movs	r2, #0
 8432 111a 1A60     		str	r2, [r3]
2420:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8433              		.loc 1 2420 0
 8434 111c 634B     		ldr	r3, .L578+8
 8435 111e 0422     		movs	r2, #4
 8436 1120 1A70     		strb	r2, [r3]
2421:..\src/interruptions.c ****             break;
 8437              		.loc 1 2421 0
 8438 1122 5BE0     		b	.L522
 8439              	.L526:
2422:..\src/interruptions.c **** 
2423:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2424:..\src/interruptions.c ****                 LR_counter++;
 8440              		.loc 1 2424 0
 8441 1124 5F4B     		ldr	r3, .L578
 8442 1126 1B88     		ldrh	r3, [r3]
 8443 1128 0133     		adds	r3, r3, #1
 8444 112a 9AB2     		uxth	r2, r3
 8445 112c 5D4B     		ldr	r3, .L578
 8446 112e 1A80     		strh	r2, [r3]	@ movhi
2425:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8447              		.loc 1 2425 0
 8448 1130 5C4B     		ldr	r3, .L578
 8449 1132 1B88     		ldrh	r3, [r3]
 8450 1134 642B     		cmp	r3, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 195


 8451 1136 4CD1     		bne	.L562
2426:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8452              		.loc 1 2426 0
 8453 1138 5A4B     		ldr	r3, .L578
 8454 113a 0022     		movs	r2, #0
 8455 113c 1A80     		strh	r2, [r3]	@ movhi
2427:..\src/interruptions.c **** 
2428:..\src/interruptions.c ****                     if (interrupt_flag){
 8456              		.loc 1 2428 0
 8457 113e 5C4B     		ldr	r3, .L578+12
 8458 1140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8459 1142 002B     		cmp	r3, #0
 8460 1144 04D0     		beq	.L534
2429:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8461              		.loc 1 2429 0
 8462 1146 5A4B     		ldr	r3, .L578+12
 8463 1148 0022     		movs	r2, #0
 8464 114a 1A70     		strb	r2, [r3]
2430:..\src/interruptions.c ****                         interrupt_manager();
 8465              		.loc 1 2430 0
 8466 114c FFF7FEFF 		bl	interrupt_manager
 8467              	.L534:
2431:..\src/interruptions.c ****                     }
2432:..\src/interruptions.c **** 
2433:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8468              		.loc 1 2433 0
 8469 1150 564B     		ldr	r3, .L578+8
 8470 1152 0322     		movs	r2, #3
 8471 1154 1A70     		strb	r2, [r3]
2434:..\src/interruptions.c ****                 }
2435:..\src/interruptions.c ****             break;
 8472              		.loc 1 2435 0
 8473 1156 3CE0     		b	.L562
 8474              	.L527:
2436:..\src/interruptions.c **** 
2437:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2438:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2439:..\src/interruptions.c ****                 LR_counter++;
 8475              		.loc 1 2439 0
 8476 1158 524B     		ldr	r3, .L578
 8477 115a 1B88     		ldrh	r3, [r3]
 8478 115c 0133     		adds	r3, r3, #1
 8479 115e 9AB2     		uxth	r2, r3
 8480 1160 504B     		ldr	r3, .L578
 8481 1162 1A80     		strh	r2, [r3]	@ movhi
2440:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8482              		.loc 1 2440 0
 8483 1164 534B     		ldr	r3, .L578+16
 8484 1166 B3F90630 		ldrsh	r3, [r3, #6]
 8485 116a 1A46     		mov	r2, r3
 8486 116c 4E4B     		ldr	r3, .L578+4
 8487 116e 1B68     		ldr	r3, [r3]
 8488 1170 1344     		add	r3, r3, r2
 8489 1172 4D4A     		ldr	r2, .L578+4
 8490 1174 1360     		str	r3, [r2]
2441:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8491              		.loc 1 2441 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 196


 8492 1176 4B4B     		ldr	r3, .L578
 8493 1178 1B88     		ldrh	r3, [r3]
 8494 117a C82B     		cmp	r3, #200
 8495 117c 2BD1     		bne	.L563
2442:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8496              		.loc 1 2442 0
 8497 117e 4A4B     		ldr	r3, .L578+4
 8498 1180 1B68     		ldr	r3, [r3]
 8499 1182 4D4A     		ldr	r2, .L578+20
 8500 1184 82FB0312 		smull	r1, r2, r2, r3
 8501 1188 9211     		asrs	r2, r2, #6
 8502 118a DB17     		asrs	r3, r3, #31
 8503 118c D31A     		subs	r3, r2, r3
 8504 118e 464A     		ldr	r2, .L578+4
 8505 1190 1360     		str	r3, [r2]
2443:..\src/interruptions.c ****                     
2444:..\src/interruptions.c ****                     if (interrupt_flag){
 8506              		.loc 1 2444 0
 8507 1192 474B     		ldr	r3, .L578+12
 8508 1194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8509 1196 002B     		cmp	r3, #0
 8510 1198 04D0     		beq	.L536
2445:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8511              		.loc 1 2445 0
 8512 119a 454B     		ldr	r3, .L578+12
 8513 119c 0022     		movs	r2, #0
 8514 119e 1A70     		strb	r2, [r3]
2446:..\src/interruptions.c ****                         interrupt_manager();
 8515              		.loc 1 2446 0
 8516 11a0 FFF7FEFF 		bl	interrupt_manager
 8517              	.L536:
2447:..\src/interruptions.c ****                     }
2448:..\src/interruptions.c **** 
2449:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8518              		.loc 1 2449 0
 8519 11a4 3F4B     		ldr	r3, .L578
 8520 11a6 0022     		movs	r2, #0
 8521 11a8 1A80     		strh	r2, [r3]	@ movhi
2450:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8522              		.loc 1 2450 0
 8523 11aa 404B     		ldr	r3, .L578+8
 8524 11ac 0022     		movs	r2, #0
 8525 11ae 1A70     		strb	r2, [r3]
2451:..\src/interruptions.c ****                 }
2452:..\src/interruptions.c ****             break;
 8526              		.loc 1 2452 0
 8527 11b0 11E0     		b	.L563
 8528              	.L528:
2453:..\src/interruptions.c **** 
2454:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2455:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8529              		.loc 1 2455 0
 8530 11b2 424B     		ldr	r3, .L578+24
 8531 11b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8532 11b6 002B     		cmp	r3, #0
 8533 11b8 0FD1     		bne	.L564
 8534              		.loc 1 2455 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 197


 8535 11ba 414B     		ldr	r3, .L578+28
 8536 11bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8537 11be 002B     		cmp	r3, #0
 8538 11c0 0BD1     		bne	.L564
 8539              		.loc 1 2455 0 discriminator 2
 8540 11c2 404B     		ldr	r3, .L578+32
 8541 11c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8542 11c6 002B     		cmp	r3, #0
 8543 11c8 07D1     		bne	.L564
2456:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8544              		.loc 1 2456 0 is_stmt 1
 8545 11ca 384B     		ldr	r3, .L578+8
 8546 11cc 0222     		movs	r2, #2
 8547 11ce 1A70     		strb	r2, [r3]
2457:..\src/interruptions.c ****             break;
 8548              		.loc 1 2457 0
 8549 11d0 03E0     		b	.L564
 8550              	.L562:
2435:..\src/interruptions.c **** 
 8551              		.loc 1 2435 0
 8552 11d2 00BF     		nop
 8553 11d4 02E0     		b	.L522
 8554              	.L563:
2452:..\src/interruptions.c **** 
 8555              		.loc 1 2452 0
 8556 11d6 00BF     		nop
 8557 11d8 00E0     		b	.L522
 8558              	.L564:
 8559              		.loc 1 2457 0
 8560 11da 00BF     		nop
 8561              	.L522:
2458:..\src/interruptions.c ****         }
2459:..\src/interruptions.c ****        
2460:..\src/interruptions.c ****         if (interrupt_flag){
 8562              		.loc 1 2460 0
 8563 11dc 344B     		ldr	r3, .L578+12
 8564 11de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8565 11e0 002B     		cmp	r3, #0
 8566 11e2 04D0     		beq	.L503
2461:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8567              		.loc 1 2461 0
 8568 11e4 324B     		ldr	r3, .L578+12
 8569 11e6 0022     		movs	r2, #0
 8570 11e8 1A70     		strb	r2, [r3]
2462:..\src/interruptions.c ****             interrupt_manager();
 8571              		.loc 1 2462 0
 8572 11ea FFF7FEFF 		bl	interrupt_manager
 8573              	.L503:
2463:..\src/interruptions.c ****         }
2464:..\src/interruptions.c ****     }
2465:..\src/interruptions.c ****     
2466:..\src/interruptions.c ****     // Read also EMG additional sensors port
2467:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8574              		.loc 1 2467 0
 8575 11ee 364B     		ldr	r3, .L578+36
 8576 11f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8577 11f2 062B     		cmp	r3, #6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 198


 8578 11f4 52D9     		bls	.L565
2468:..\src/interruptions.c ****         
2469:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8579              		.loc 1 2469 0
 8580 11f6 354B     		ldr	r3, .L578+40
 8581 11f8 0022     		movs	r2, #0
 8582 11fa 1A70     		strb	r2, [r3]
 8583 11fc 4AE0     		b	.L539
 8584              	.L546:
2470:..\src/interruptions.c ****             
2471:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8585              		.loc 1 2471 0
 8586 11fe 334B     		ldr	r3, .L578+40
 8587 1200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8588 1202 0633     		adds	r3, r3, #6
 8589 1204 2B4A     		ldr	r2, .L578+16
 8590 1206 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8591 120a 7B60     		str	r3, [r7, #4]
2472:..\src/interruptions.c ****             if (i_aux < 0) 
 8592              		.loc 1 2472 0
 8593 120c 7B68     		ldr	r3, [r7, #4]
 8594 120e 002B     		cmp	r3, #0
 8595 1210 01DA     		bge	.L540
2473:..\src/interruptions.c ****                 i_aux = 0;
 8596              		.loc 1 2473 0
 8597 1212 0023     		movs	r3, #0
 8598 1214 7B60     		str	r3, [r7, #4]
 8599              	.L540:
2474:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8600              		.loc 1 2474 0
 8601 1216 2D4B     		ldr	r3, .L578+40
 8602 1218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8603 121a 0233     		adds	r3, r3, #2
 8604 121c DB00     		lsls	r3, r3, #3
 8605 121e 2C4A     		ldr	r2, .L578+44
 8606 1220 1344     		add	r3, r3, r2
 8607 1222 1946     		mov	r1, r3
 8608 1224 7868     		ldr	r0, [r7, #4]
 8609 1226 FFF7FEFF 		bl	filter
 8610 122a 7860     		str	r0, [r7, #4]
2475:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8611              		.loc 1 2475 0
 8612 122c 7B68     		ldr	r3, [r7, #4]
 8613 122e 9B02     		lsls	r3, r3, #10
 8614 1230 002B     		cmp	r3, #0
 8615 1232 01DA     		bge	.L541
 8616 1234 03F2FF33 		addw	r3, r3, #1023
 8617              	.L541:
 8618 1238 9B12     		asrs	r3, r3, #10
 8619 123a 7B60     		str	r3, [r7, #4]
2476:..\src/interruptions.c **** 
2477:..\src/interruptions.c ****             if (interrupt_flag){
 8620              		.loc 1 2477 0
 8621 123c 1C4B     		ldr	r3, .L578+12
 8622 123e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8623 1240 002B     		cmp	r3, #0
 8624 1242 04D0     		beq	.L542
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 199


2478:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8625              		.loc 1 2478 0
 8626 1244 1A4B     		ldr	r3, .L578+12
 8627 1246 0022     		movs	r2, #0
 8628 1248 1A70     		strb	r2, [r3]
2479:..\src/interruptions.c ****                 interrupt_manager();
 8629              		.loc 1 2479 0
 8630 124a FFF7FEFF 		bl	interrupt_manager
 8631              	.L542:
2480:..\src/interruptions.c ****             }
2481:..\src/interruptions.c ****             //Saturation
2482:..\src/interruptions.c ****             if (i_aux < 0)
 8632              		.loc 1 2482 0
 8633 124e 7B68     		ldr	r3, [r7, #4]
 8634 1250 002B     		cmp	r3, #0
 8635 1252 02DA     		bge	.L543
2483:..\src/interruptions.c ****                 i_aux = 0;
 8636              		.loc 1 2483 0
 8637 1254 0023     		movs	r3, #0
 8638 1256 7B60     		str	r3, [r7, #4]
 8639 1258 06E0     		b	.L544
 8640              	.L543:
2484:..\src/interruptions.c ****             else 
2485:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8641              		.loc 1 2485 0
 8642 125a 7B68     		ldr	r3, [r7, #4]
 8643 125c B3F5806F 		cmp	r3, #1024
 8644 1260 02DD     		ble	.L544
2486:..\src/interruptions.c ****                     i_aux = 1024;
 8645              		.loc 1 2486 0
 8646 1262 4FF48063 		mov	r3, #1024
 8647 1266 7B60     		str	r3, [r7, #4]
 8648              	.L544:
2487:..\src/interruptions.c ****             
2488:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8649              		.loc 1 2488 0
 8650 1268 184B     		ldr	r3, .L578+40
 8651 126a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8652 126c 1949     		ldr	r1, .L578+48
 8653 126e 0233     		adds	r3, r3, #2
 8654 1270 7A68     		ldr	r2, [r7, #4]
 8655 1272 41F82320 		str	r2, [r1, r3, lsl #2]
2489:..\src/interruptions.c **** 
2490:..\src/interruptions.c ****             if (interrupt_flag){
 8656              		.loc 1 2490 0
 8657 1276 0E4B     		ldr	r3, .L578+12
 8658 1278 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8659 127a 002B     		cmp	r3, #0
 8660 127c 04D0     		beq	.L545
2491:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8661              		.loc 1 2491 0
 8662 127e 0C4B     		ldr	r3, .L578+12
 8663 1280 0022     		movs	r2, #0
 8664 1282 1A70     		strb	r2, [r3]
2492:..\src/interruptions.c ****                 interrupt_manager();
 8665              		.loc 1 2492 0
 8666 1284 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 200


 8667              	.L545:
2469:..\src/interruptions.c ****             
 8668              		.loc 1 2469 0 discriminator 2
 8669 1288 104B     		ldr	r3, .L578+40
 8670 128a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8671 128c 0133     		adds	r3, r3, #1
 8672 128e DAB2     		uxtb	r2, r3
 8673 1290 0E4B     		ldr	r3, .L578+40
 8674 1292 1A70     		strb	r2, [r3]
 8675              	.L539:
2469:..\src/interruptions.c ****             
 8676              		.loc 1 2469 0 is_stmt 0 discriminator 1
 8677 1294 0D4B     		ldr	r3, .L578+40
 8678 1296 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8679 1298 052B     		cmp	r3, #5
 8680 129a B0D9     		bls	.L546
 8681              	.L565:
2493:..\src/interruptions.c ****             }
2494:..\src/interruptions.c ****         }
2495:..\src/interruptions.c ****     }
2496:..\src/interruptions.c ****     
2497:..\src/interruptions.c **** }
 8682              		.loc 1 2497 0 is_stmt 1
 8683 129c 00BF     		nop
 8684 129e 0C37     		adds	r7, r7, #12
 8685              		.cfi_def_cfa_offset 20
 8686 12a0 BD46     		mov	sp, r7
 8687              		.cfi_def_cfa_register 13
 8688              		@ sp needed
 8689 12a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 8690              	.L579:
 8691              		.align	2
 8692              	.L578:
 8693 12a4 8C010000 		.word	LR_counter.10425
 8694 12a8 88010000 		.word	LR_mean_value.10427
 8695 12ac 00000000 		.word	joy_LR_status
 8696 12b0 00000000 		.word	interrupt_flag
 8697 12b4 00000000 		.word	ADC_buf
 8698 12b8 1F85EB51 		.word	1374389535
 8699 12bc 00000000 		.word	emg_1_status
 8700 12c0 00000000 		.word	emg_2_status
 8701 12c4 00000000 		.word	joy_UD_status
 8702 12c8 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8703 12cc 76010000 		.word	idx.10432
 8704 12d0 00000000 		.word	filt_emg
 8705 12d4 00000000 		.word	g_adc_meas
 8706              		.cfi_endproc
 8707              	.LFE75:
 8708              		.size	analog_read_end, .-analog_read_end
 8709              		.section	.text.overcurrent_control,"ax",%progbits
 8710              		.align	2
 8711              		.global	overcurrent_control
 8712              		.thumb
 8713              		.thumb_func
 8714              		.type	overcurrent_control, %function
 8715              	overcurrent_control:
 8716              	.LFB76:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 201


2498:..\src/interruptions.c **** 
2499:..\src/interruptions.c **** //==============================================================================
2500:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2501:..\src/interruptions.c **** //==============================================================================
2502:..\src/interruptions.c **** 
2503:..\src/interruptions.c **** void overcurrent_control() {
 8717              		.loc 1 2503 0
 8718              		.cfi_startproc
 8719              		@ args = 0, pretend = 0, frame = 8
 8720              		@ frame_needed = 1, uses_anonymous_args = 0
 8721              		@ link register save eliminated.
 8722 0000 80B4     		push	{r7}
 8723              		.cfi_def_cfa_offset 4
 8724              		.cfi_offset 7, -4
 8725 0002 83B0     		sub	sp, sp, #12
 8726              		.cfi_def_cfa_offset 16
 8727 0004 00AF     		add	r7, sp, #0
 8728              		.cfi_def_cfa_register 7
 8729              	.LBB10:
2504:..\src/interruptions.c ****     
2505:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8730              		.loc 1 2505 0
 8731 0006 0023     		movs	r3, #0
 8732 0008 FB71     		strb	r3, [r7, #7]
 8733 000a 6CE0     		b	.L581
 8734              	.L586:
2506:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8735              		.loc 1 2506 0
 8736 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8737 000e 3A49     		ldr	r1, .L588
 8738 0010 1346     		mov	r3, r2
 8739 0012 DB00     		lsls	r3, r3, #3
 8740 0014 9B1A     		subs	r3, r3, r2
 8741 0016 1B01     		lsls	r3, r3, #4
 8742 0018 0B44     		add	r3, r3, r1
 8743 001a 03F58673 		add	r3, r3, #268
 8744 001e B3F90030 		ldrsh	r3, [r3]
 8745 0022 002B     		cmp	r3, #0
 8746 0024 5CD0     		beq	.L582
 8747              	.LBB11:
2507:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8748              		.loc 1 2507 0
 8749 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8750 0028 3449     		ldr	r1, .L588+4
 8751 002a 1346     		mov	r3, r2
 8752 002c DB00     		lsls	r3, r3, #3
 8753 002e 9B1A     		subs	r3, r3, r2
 8754 0030 1B01     		lsls	r3, r3, #4
 8755 0032 0B44     		add	r3, r3, r1
 8756 0034 03F58873 		add	r3, r3, #272
 8757 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8758 003a 1946     		mov	r1, r3
 8759 003c 304A     		ldr	r2, .L588+8
 8760 003e 3423     		movs	r3, #52
 8761 0040 03FB01F3 		mul	r3, r3, r1
 8762 0044 1344     		add	r3, r3, r2
 8763 0046 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 202


 8764 0048 1B68     		ldr	r3, [r3]
 8765 004a 3B60     		str	r3, [r7]
2508:..\src/interruptions.c ****             // check if the current is over the limit
2509:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2510:..\src/interruptions.c ****                 if (curr < 0){
 8766              		.loc 1 2510 0
 8767 004c 3B68     		ldr	r3, [r7]
 8768 004e 002B     		cmp	r3, #0
 8769 0050 02DA     		bge	.L583
2511:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8770              		.loc 1 2511 0
 8771 0052 3B68     		ldr	r3, [r7]
 8772 0054 5B42     		negs	r3, r3
 8773 0056 3B60     		str	r3, [r7]
 8774              	.L583:
2512:..\src/interruptions.c ****                 }
2513:..\src/interruptions.c ****          //   }
2514:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8775              		.loc 1 2514 0
 8776 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8777 005a 2749     		ldr	r1, .L588
 8778 005c 1346     		mov	r3, r2
 8779 005e DB00     		lsls	r3, r3, #3
 8780 0060 9B1A     		subs	r3, r3, r2
 8781 0062 1B01     		lsls	r3, r3, #4
 8782 0064 0B44     		add	r3, r3, r1
 8783 0066 03F58673 		add	r3, r3, #268
 8784 006a B3F90030 		ldrsh	r3, [r3]
 8785 006e 1A46     		mov	r2, r3
 8786 0070 3B68     		ldr	r3, [r7]
 8787 0072 9A42     		cmp	r2, r3
 8788 0074 09DA     		bge	.L584
2515:..\src/interruptions.c ****                 //decrease pwm_limit
2516:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8789              		.loc 1 2516 0
 8790 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8791 0078 224A     		ldr	r2, .L588+12
 8792 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8793 007e 013A     		subs	r2, r2, #1
 8794 0080 91B2     		uxth	r1, r2
 8795 0082 204A     		ldr	r2, .L588+12
 8796 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8797 0088 18E0     		b	.L587
 8798              	.L584:
2517:..\src/interruptions.c ****             // check if the current is in the safe zone
2518:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8799              		.loc 1 2518 0
 8800 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8801 008c 1A49     		ldr	r1, .L588
 8802 008e 1346     		mov	r3, r2
 8803 0090 DB00     		lsls	r3, r3, #3
 8804 0092 9B1A     		subs	r3, r3, r2
 8805 0094 1B01     		lsls	r3, r3, #4
 8806 0096 0B44     		add	r3, r3, r1
 8807 0098 03F58673 		add	r3, r3, #268
 8808 009c B3F90030 		ldrsh	r3, [r3]
 8809 00a0 A3F10A02 		sub	r2, r3, #10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 203


 8810 00a4 3B68     		ldr	r3, [r7]
 8811 00a6 9A42     		cmp	r2, r3
 8812 00a8 08DD     		ble	.L587
2519:..\src/interruptions.c ****                 //increase pwm_limit
2520:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8813              		.loc 1 2520 0
 8814 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8815 00ac 154A     		ldr	r2, .L588+12
 8816 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8817 00b2 0132     		adds	r2, r2, #1
 8818 00b4 91B2     		uxth	r1, r2
 8819 00b6 134A     		ldr	r2, .L588+12
 8820 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8821              	.L587:
2521:..\src/interruptions.c ****             }
2522:..\src/interruptions.c **** 
2523:..\src/interruptions.c ****             // Bound pwm_limit
2524:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2525:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2526:..\src/interruptions.c ****             else 
2527:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8822              		.loc 1 2527 0
 8823 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8824 00be 114A     		ldr	r2, .L588+12
 8825 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8826 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8827 00c6 1049     		ldr	r1, .L588+16
 8828 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8829 00cc 9A42     		cmp	r2, r3
 8830 00ce 07D9     		bls	.L582
2528:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8831              		.loc 1 2528 0
 8832 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8833 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8834 00d4 0C49     		ldr	r1, .L588+16
 8835 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8836 00da 0A4A     		ldr	r2, .L588+12
 8837 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8838              	.L582:
 8839              	.LBE11:
2505:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8840              		.loc 1 2505 0 discriminator 2
 8841 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8842 00e2 0133     		adds	r3, r3, #1
 8843 00e4 FB71     		strb	r3, [r7, #7]
 8844              	.L581:
2505:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8845              		.loc 1 2505 0 is_stmt 0 discriminator 1
 8846 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8847 00e8 012B     		cmp	r3, #1
 8848 00ea 8FD9     		bls	.L586
 8849              	.LBE10:
2529:..\src/interruptions.c ****         }
2530:..\src/interruptions.c ****     }
2531:..\src/interruptions.c **** }
 8850              		.loc 1 2531 0 is_stmt 1
 8851 00ec 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 204


 8852 00ee 0C37     		adds	r7, r7, #12
 8853              		.cfi_def_cfa_offset 4
 8854 00f0 BD46     		mov	sp, r7
 8855              		.cfi_def_cfa_register 13
 8856              		@ sp needed
 8857 00f2 80BC     		pop	{r7}
 8858              		.cfi_restore 7
 8859              		.cfi_def_cfa_offset 0
 8860 00f4 7047     		bx	lr
 8861              	.L589:
 8862 00f6 00BF     		.align	2
 8863              	.L588:
 8864 00f8 00000000 		.word	c_mem
 8865 00fc 00000000 		.word	g_mem
 8866 0100 00000000 		.word	g_meas
 8867 0104 00000000 		.word	dev_pwm_limit
 8868 0108 00000000 		.word	dev_pwm_sat
 8869              		.cfi_endproc
 8870              	.LFE76:
 8871              		.size	overcurrent_control, .-overcurrent_control
 8872              		.section	.text.pwm_limit_search,"ax",%progbits
 8873              		.align	2
 8874              		.global	pwm_limit_search
 8875              		.thumb
 8876              		.thumb_func
 8877              		.type	pwm_limit_search, %function
 8878              	pwm_limit_search:
 8879              	.LFB77:
2532:..\src/interruptions.c **** 
2533:..\src/interruptions.c **** //==============================================================================
2534:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2535:..\src/interruptions.c **** //==============================================================================
2536:..\src/interruptions.c **** 
2537:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8880              		.loc 1 2537 0
 8881              		.cfi_startproc
 8882              		@ args = 0, pretend = 0, frame = 16
 8883              		@ frame_needed = 1, uses_anonymous_args = 0
 8884              		@ link register save eliminated.
 8885 0000 80B4     		push	{r7}
 8886              		.cfi_def_cfa_offset 4
 8887              		.cfi_offset 7, -4
 8888 0002 85B0     		sub	sp, sp, #20
 8889              		.cfi_def_cfa_offset 24
 8890 0004 00AF     		add	r7, sp, #0
 8891              		.cfi_def_cfa_register 7
 8892 0006 0346     		mov	r3, r0
 8893 0008 FB71     		strb	r3, [r7, #7]
2538:..\src/interruptions.c **** 
2539:..\src/interruptions.c ****     uint8 CYDATA index;
2540:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 8894              		.loc 1 2540 0
 8895 000a 46F28473 		movw	r3, #26500
 8896 000e FB81     		strh	r3, [r7, #14]	@ movhi
2541:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8897              		.loc 1 2541 0
 8898 0010 42F6EC43 		movw	r3, #11500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 205


 8899 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2542:..\src/interruptions.c ****     
2543:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8900              		.loc 1 2543 0
 8901 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8902 0018 1F4A     		ldr	r2, .L597
 8903 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8904 001e FB89     		ldrh	r3, [r7, #14]
 8905 0020 9A42     		cmp	r2, r3
 8906 0022 05DD     		ble	.L591
2544:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8907              		.loc 1 2544 0
 8908 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8909 0026 1D4A     		ldr	r2, .L597+4
 8910 0028 0021     		movs	r1, #0
 8911 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2545:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2546:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2547:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2548:..\src/interruptions.c ****         } else {
2549:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2550:..\src/interruptions.c ****         }
2551:..\src/interruptions.c ****     } else {
2552:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2553:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2554:..\src/interruptions.c ****     }
2555:..\src/interruptions.c **** }
 8912              		.loc 1 2555 0
 8913 002e 2EE0     		b	.L596
 8914              	.L591:
2545:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8915              		.loc 1 2545 0
 8916 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8917 0032 194A     		ldr	r2, .L597
 8918 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8919 0038 BB89     		ldrh	r3, [r7, #12]
 8920 003a 9A42     		cmp	r2, r3
 8921 003c 17DA     		bge	.L593
2546:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 8922              		.loc 1 2546 0
 8923 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8924 0040 1749     		ldr	r1, .L597+8
 8925 0042 1346     		mov	r3, r2
 8926 0044 DB00     		lsls	r3, r3, #3
 8927 0046 9B1A     		subs	r3, r3, r2
 8928 0048 1B01     		lsls	r3, r3, #4
 8929 004a 0B44     		add	r3, r3, r1
 8930 004c E233     		adds	r3, r3, #226
 8931 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8932 0050 022B     		cmp	r3, #2
 8933 0052 06D1     		bne	.L594
2547:..\src/interruptions.c ****         } else {
 8934              		.loc 1 2547 0
 8935 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8936 0056 114A     		ldr	r2, .L597+4
 8937 0058 40F6A931 		movw	r1, #2985
 8938 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 206


 8939              		.loc 1 2555 0
 8940 0060 15E0     		b	.L596
 8941              	.L594:
2549:..\src/interruptions.c ****         }
 8942              		.loc 1 2549 0
 8943 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8944 0064 0D4A     		ldr	r2, .L597+4
 8945 0066 6421     		movs	r1, #100
 8946 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8947              		.loc 1 2555 0
 8948 006c 0FE0     		b	.L596
 8949              	.L593:
2552:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8950              		.loc 1 2552 0
 8951 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8952 0070 094A     		ldr	r2, .L597
 8953 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8954 0076 BB89     		ldrh	r3, [r7, #12]
 8955 0078 D31A     		subs	r3, r2, r3
 8956 007a 5B12     		asrs	r3, r3, #9
 8957 007c FB72     		strb	r3, [r7, #11]
2553:..\src/interruptions.c ****     }
 8958              		.loc 1 2553 0
 8959 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8960 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8961 0082 0849     		ldr	r1, .L597+12
 8962 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8963 0086 91B2     		uxth	r1, r2
 8964 0088 044A     		ldr	r2, .L597+4
 8965 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8966              	.L596:
 8967              		.loc 1 2555 0
 8968 008e 00BF     		nop
 8969 0090 1437     		adds	r7, r7, #20
 8970              		.cfi_def_cfa_offset 4
 8971 0092 BD46     		mov	sp, r7
 8972              		.cfi_def_cfa_register 13
 8973              		@ sp needed
 8974 0094 80BC     		pop	{r7}
 8975              		.cfi_restore 7
 8976              		.cfi_def_cfa_offset 0
 8977 0096 7047     		bx	lr
 8978              	.L598:
 8979              		.align	2
 8980              	.L597:
 8981 0098 00000000 		.word	dev_tension
 8982 009c 00000000 		.word	dev_pwm_sat
 8983 00a0 00000000 		.word	c_mem
 8984 00a4 00000000 		.word	pwm_preload_values
 8985              		.cfi_endproc
 8986              	.LFE77:
 8987              		.size	pwm_limit_search, .-pwm_limit_search
 8988              		.global	__aeabi_ui2f
 8989              		.global	__aeabi_dcmpgt
 8990              		.section	.text.cycles_counter_update,"ax",%progbits
 8991              		.align	2
 8992              		.global	cycles_counter_update
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 207


 8993              		.thumb
 8994              		.thumb_func
 8995              		.type	cycles_counter_update, %function
 8996              	cycles_counter_update:
 8997              	.LFB78:
2556:..\src/interruptions.c **** 
2557:..\src/interruptions.c **** //==============================================================================
2558:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2559:..\src/interruptions.c **** //==============================================================================
2560:..\src/interruptions.c **** 
2561:..\src/interruptions.c **** void cycles_counter_update() {
 8998              		.loc 1 2561 0
 8999              		.cfi_startproc
 9000              		@ args = 0, pretend = 0, frame = 24
 9001              		@ frame_needed = 1, uses_anonymous_args = 0
 9002 0000 90B5     		push	{r4, r7, lr}
 9003              		.cfi_def_cfa_offset 12
 9004              		.cfi_offset 4, -12
 9005              		.cfi_offset 7, -8
 9006              		.cfi_offset 14, -4
 9007 0002 87B0     		sub	sp, sp, #28
 9008              		.cfi_def_cfa_offset 40
 9009 0004 00AF     		add	r7, sp, #0
 9010              		.cfi_def_cfa_register 7
2562:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2563:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2564:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2565:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2566:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2567:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2568:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2569:..\src/interruptions.c ****     static int32 thr_pos = 0;
2570:..\src/interruptions.c ****     static int32 max_pos = 0;
2571:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2572:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9011              		.loc 1 2572 0
 9012 0006 0023     		movs	r3, #0
 9013 0008 FB60     		str	r3, [r7, #12]
 9014 000a 0023     		movs	r3, #0
 9015 000c BB60     		str	r3, [r7, #8]
 9016 000e 0023     		movs	r3, #0
 9017 0010 3B61     		str	r3, [r7, #16]
2573:..\src/interruptions.c ****     int32 step;
2574:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2575:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2576:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2577:..\src/interruptions.c **** 
2578:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9018              		.loc 1 2578 0
 9019 0012 A64B     		ldr	r3, .L677
 9020 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9021 0018 1946     		mov	r1, r3
 9022 001a A54A     		ldr	r2, .L677+4
 9023 001c 3423     		movs	r3, #52
 9024 001e 03FB01F3 		mul	r3, r3, r1
 9025 0022 1344     		add	r3, r3, r2
 9026 0024 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 208


 9027 0026 A14B     		ldr	r3, .L677
 9028 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9029 002c 1846     		mov	r0, r3
 9030 002e 9F49     		ldr	r1, .L677
 9031 0030 0346     		mov	r3, r0
 9032 0032 5B00     		lsls	r3, r3, #1
 9033 0034 0344     		add	r3, r3, r0
 9034 0036 1B01     		lsls	r3, r3, #4
 9035 0038 0B44     		add	r3, r3, r1
 9036 003a 03F29513 		addw	r3, r3, #405
 9037 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9038 0040 42FA03F3 		asr	r3, r2, r3
 9039 0044 FB60     		str	r3, [r7, #12]
2579:..\src/interruptions.c ****         
2580:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2581:..\src/interruptions.c ****     switch (pos_cycle_status){
 9040              		.loc 1 2581 0
 9041 0046 9B4B     		ldr	r3, .L677+8
 9042 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9043 004a 012B     		cmp	r3, #1
 9044 004c 3DD0     		beq	.L601
 9045 004e 022B     		cmp	r3, #2
 9046 0050 74D0     		beq	.L602
 9047 0052 002B     		cmp	r3, #0
 9048 0054 40F02781 		bne	.L600
2582:..\src/interruptions.c ****         case STATE_INACTIVE:
2583:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9049              		.loc 1 2583 0
 9050 0058 944B     		ldr	r3, .L677
 9051 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9052 005e 072B     		cmp	r3, #7
 9053 0060 04D0     		beq	.L604
 9054              		.loc 1 2583 0 is_stmt 0 discriminator 1
 9055 0062 954B     		ldr	r3, .L677+12
 9056 0064 93F90030 		ldrsb	r3, [r3]
 9057 0068 012B     		cmp	r3, #1
 9058 006a 0CD0     		beq	.L605
 9059              	.L604:
 9060              		.loc 1 2583 0 discriminator 3
 9061 006c 8F4B     		ldr	r3, .L677
 9062 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9063 0072 072B     		cmp	r3, #7
 9064 0074 40F01481 		bne	.L667
 9065              		.loc 1 2583 0 discriminator 4
 9066 0078 8F4B     		ldr	r3, .L677+12
 9067 007a 93F90030 		ldrsb	r3, [r3]
 9068 007e B3F1FF3F 		cmp	r3, #-1
 9069 0082 40F00D81 		bne	.L667
 9070              	.L605:
2584:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9071              		.loc 1 2584 0 is_stmt 1
 9072 0086 8D4A     		ldr	r2, .L677+16
 9073 0088 FB68     		ldr	r3, [r7, #12]
 9074 008a 1360     		str	r3, [r2]
2585:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9075              		.loc 1 2585 0
 9076 008c 8C4B     		ldr	r3, .L677+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 209


 9077 008e 1A68     		ldr	r2, [r3]
 9078 0090 8A4B     		ldr	r3, .L677+16
 9079 0092 1B68     		ldr	r3, [r3]
 9080 0094 9A42     		cmp	r2, r3
 9081 0096 05DD     		ble	.L607
 9082              		.loc 1 2585 0 is_stmt 0 discriminator 1
 9083 0098 894B     		ldr	r3, .L677+20
 9084 009a 1A68     		ldr	r2, [r3]
 9085 009c 874B     		ldr	r3, .L677+16
 9086 009e 1B68     		ldr	r3, [r3]
 9087 00a0 D31A     		subs	r3, r2, r3
 9088 00a2 04E0     		b	.L608
 9089              	.L607:
 9090              		.loc 1 2585 0 discriminator 2
 9091 00a4 854B     		ldr	r3, .L677+16
 9092 00a6 1A68     		ldr	r2, [r3]
 9093 00a8 854B     		ldr	r3, .L677+20
 9094 00aa 1B68     		ldr	r3, [r3]
 9095 00ac D31A     		subs	r3, r2, r3
 9096              	.L608:
 9097              		.loc 1 2585 0 discriminator 4
 9098 00ae BB60     		str	r3, [r7, #8]
2586:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9099              		.loc 1 2586 0 is_stmt 1 discriminator 4
 9100 00b0 BB68     		ldr	r3, [r7, #8]
 9101 00b2 142B     		cmp	r3, #20
 9102 00b4 05DD     		ble	.L609
2587:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9103              		.loc 1 2587 0
 9104 00b6 7D4B     		ldr	r3, .L677
 9105 00b8 5A6D     		ldr	r2, [r3, #84]
 9106 00ba BB68     		ldr	r3, [r7, #8]
 9107 00bc 1344     		add	r3, r3, r2
 9108 00be 7B4A     		ldr	r2, .L677
 9109 00c0 5365     		str	r3, [r2, #84]
 9110              	.L609:
2588:..\src/interruptions.c ****                 }
2589:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9111              		.loc 1 2589 0
 9112 00c2 7C4B     		ldr	r3, .L677+8
 9113 00c4 0122     		movs	r2, #1
 9114 00c6 1A70     		strb	r2, [r3]
2590:..\src/interruptions.c ****             }
2591:..\src/interruptions.c ****             break;
 9115              		.loc 1 2591 0
 9116 00c8 EAE0     		b	.L667
 9117              	.L601:
2592:..\src/interruptions.c ****         case STATE_ACTIVE:
2593:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9118              		.loc 1 2593 0
 9119 00ca 784B     		ldr	r3, .L677
 9120 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9121 00d0 072B     		cmp	r3, #7
 9122 00d2 05D0     		beq	.L610
 9123              		.loc 1 2593 0 is_stmt 0 discriminator 1
 9124 00d4 784B     		ldr	r3, .L677+12
 9125 00d6 93F90030 		ldrsb	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 210


 9126 00da B3F1FF3F 		cmp	r3, #-1
 9127 00de 0BD0     		beq	.L611
 9128              	.L610:
 9129              		.loc 1 2593 0 discriminator 3
 9130 00e0 724B     		ldr	r3, .L677
 9131 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9132 00e6 072B     		cmp	r3, #7
 9133 00e8 40F0DC80 		bne	.L668
 9134              		.loc 1 2593 0 discriminator 4
 9135 00ec 724B     		ldr	r3, .L677+12
 9136 00ee 93F90030 		ldrsb	r3, [r3]
 9137 00f2 012B     		cmp	r3, #1
 9138 00f4 40F0D680 		bne	.L668
 9139              	.L611:
2594:..\src/interruptions.c ****                 max_pos = curr_pos;
 9140              		.loc 1 2594 0 is_stmt 1
 9141 00f8 714A     		ldr	r2, .L677+20
 9142 00fa FB68     		ldr	r3, [r7, #12]
 9143 00fc 1360     		str	r3, [r2]
2595:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9144              		.loc 1 2595 0
 9145 00fe 704B     		ldr	r3, .L677+20
 9146 0100 1A68     		ldr	r2, [r3]
 9147 0102 6E4B     		ldr	r3, .L677+16
 9148 0104 1B68     		ldr	r3, [r3]
 9149 0106 9A42     		cmp	r2, r3
 9150 0108 05DD     		ble	.L613
 9151              		.loc 1 2595 0 is_stmt 0 discriminator 1
 9152 010a 6D4B     		ldr	r3, .L677+20
 9153 010c 1A68     		ldr	r2, [r3]
 9154 010e 6B4B     		ldr	r3, .L677+16
 9155 0110 1B68     		ldr	r3, [r3]
 9156 0112 D31A     		subs	r3, r2, r3
 9157 0114 04E0     		b	.L614
 9158              	.L613:
 9159              		.loc 1 2595 0 discriminator 2
 9160 0116 694B     		ldr	r3, .L677+16
 9161 0118 1A68     		ldr	r2, [r3]
 9162 011a 694B     		ldr	r3, .L677+20
 9163 011c 1B68     		ldr	r3, [r3]
 9164 011e D31A     		subs	r3, r2, r3
 9165              	.L614:
 9166              		.loc 1 2595 0 discriminator 4
 9167 0120 BB60     		str	r3, [r7, #8]
2596:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9168              		.loc 1 2596 0 is_stmt 1 discriminator 4
 9169 0122 BB68     		ldr	r3, [r7, #8]
 9170 0124 142B     		cmp	r3, #20
 9171 0126 05DD     		ble	.L615
2597:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9172              		.loc 1 2597 0
 9173 0128 604B     		ldr	r3, .L677
 9174 012a 5A6D     		ldr	r2, [r3, #84]
 9175 012c BB68     		ldr	r3, [r7, #8]
 9176 012e 1344     		add	r3, r3, r2
 9177 0130 5E4A     		ldr	r2, .L677
 9178 0132 5365     		str	r3, [r2, #84]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 211


 9179              	.L615:
2598:..\src/interruptions.c ****                 }
2599:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9180              		.loc 1 2599 0
 9181 0134 5F4B     		ldr	r3, .L677+8
 9182 0136 0222     		movs	r2, #2
 9183 0138 1A70     		strb	r2, [r3]
2600:..\src/interruptions.c ****             }
2601:..\src/interruptions.c ****             break;
 9184              		.loc 1 2601 0
 9185 013a B3E0     		b	.L668
 9186              	.L602:
2602:..\src/interruptions.c ****         case COUNTER_INC:
2603:..\src/interruptions.c **** 
2604:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9187              		.loc 1 2604 0
 9188 013c 604B     		ldr	r3, .L677+20
 9189 013e 1A68     		ldr	r2, [r3]
 9190 0140 5E4B     		ldr	r3, .L677+16
 9191 0142 1B68     		ldr	r3, [r3]
 9192 0144 9A42     		cmp	r2, r3
 9193 0146 05DD     		ble	.L616
 9194              		.loc 1 2604 0 is_stmt 0 discriminator 1
 9195 0148 5D4B     		ldr	r3, .L677+20
 9196 014a 1A68     		ldr	r2, [r3]
 9197 014c 5B4B     		ldr	r3, .L677+16
 9198 014e 1B68     		ldr	r3, [r3]
 9199 0150 D31A     		subs	r3, r2, r3
 9200 0152 04E0     		b	.L617
 9201              	.L616:
 9202              		.loc 1 2604 0 discriminator 2
 9203 0154 594B     		ldr	r3, .L677+16
 9204 0156 1A68     		ldr	r2, [r3]
 9205 0158 594B     		ldr	r3, .L677+20
 9206 015a 1B68     		ldr	r3, [r3]
 9207 015c D31A     		subs	r3, r2, r3
 9208              	.L617:
 9209              		.loc 1 2604 0 discriminator 4
 9210 015e BB60     		str	r3, [r7, #8]
2605:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9211              		.loc 1 2605 0 is_stmt 1 discriminator 4
 9212 0160 584B     		ldr	r3, .L677+24
 9213 0162 1B68     		ldr	r3, [r3]
 9214 0164 BA68     		ldr	r2, [r7, #8]
 9215 0166 9A42     		cmp	r2, r3
 9216 0168 40F39680 		ble	.L618
2606:..\src/interruptions.c ****                 //update position histogram
2607:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9217              		.loc 1 2607 0
 9218 016c 4F4B     		ldr	r3, .L677
 9219 016e D3F8E820 		ldr	r2, [r3, #232]
 9220 0172 4E4B     		ldr	r3, .L677
 9221 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9222 0178 1846     		mov	r0, r3
 9223 017a 4C49     		ldr	r1, .L677
 9224 017c 0346     		mov	r3, r0
 9225 017e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 212


 9226 0180 0344     		add	r3, r3, r0
 9227 0182 1B01     		lsls	r3, r3, #4
 9228 0184 0B44     		add	r3, r3, r1
 9229 0186 03F29513 		addw	r3, r3, #405
 9230 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9231 018c 42FA03F3 		asr	r3, r2, r3
 9232 0190 4D4A     		ldr	r2, .L677+28
 9233 0192 82FB0312 		smull	r1, r2, r2, r3
 9234 0196 9210     		asrs	r2, r2, #2
 9235 0198 DB17     		asrs	r3, r3, #31
 9236 019a D31A     		subs	r3, r2, r3
 9237 019c 7B60     		str	r3, [r7, #4]
2608:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9238              		.loc 1 2608 0
 9239 019e 474B     		ldr	r3, .L677+16
 9240 01a0 1A68     		ldr	r2, [r3]
 9241 01a2 7B68     		ldr	r3, [r7, #4]
 9242 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9243 01a8 FB70     		strb	r3, [r7, #3]
2609:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9244              		.loc 1 2609 0
 9245 01aa 454B     		ldr	r3, .L677+20
 9246 01ac 1A68     		ldr	r2, [r3]
 9247 01ae 7B68     		ldr	r3, [r7, #4]
 9248 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9249 01b4 BB70     		strb	r3, [r7, #2]
2610:..\src/interruptions.c ****                 
2611:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2612:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9250              		.loc 1 2612 0
 9251 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9252 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9253 01ba 9342     		cmp	r3, r2
 9254 01bc 28BF     		it	cs
 9255 01be 1346     		movcs	r3, r2
 9256 01c0 7B70     		strb	r3, [r7, #1]
2613:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9257              		.loc 1 2613 0
 9258 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9259 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9260 01c6 9342     		cmp	r3, r2
 9261 01c8 38BF     		it	cc
 9262 01ca 1346     		movcc	r3, r2
 9263 01cc 3B70     		strb	r3, [r7]
2614:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9264              		.loc 1 2614 0
 9265 01ce 7B78     		ldrb	r3, [r7, #1]
 9266 01d0 FB75     		strb	r3, [r7, #23]
 9267 01d2 0DE0     		b	.L619
 9268              	.L621:
2615:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2616:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9269              		.loc 1 2616 0 discriminator 4
 9270 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9271 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9272 01d8 3449     		ldr	r1, .L677
 9273 01da 0632     		adds	r2, r2, #6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 213


 9274 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9275 01e0 0132     		adds	r2, r2, #1
 9276 01e2 3249     		ldr	r1, .L677
 9277 01e4 0633     		adds	r3, r3, #6
 9278 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2614:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9279              		.loc 1 2614 0 discriminator 4
 9280 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9281 01ec 0133     		adds	r3, r3, #1
 9282 01ee FB75     		strb	r3, [r7, #23]
 9283              	.L619:
2614:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9284              		.loc 1 2614 0 is_stmt 0 discriminator 1
 9285 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9286 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9287 01f4 9A42     		cmp	r2, r3
 9288 01f6 02D8     		bhi	.L620
2614:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9289              		.loc 1 2614 0 discriminator 3
 9290 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9291 01fa 092B     		cmp	r3, #9
 9292 01fc EAD9     		bls	.L621
 9293              	.L620:
2617:..\src/interruptions.c ****                 }
2618:..\src/interruptions.c ****                 
2619:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2620:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9294              		.loc 1 2620 0 is_stmt 1
 9295 01fe 2B4B     		ldr	r3, .L677
 9296 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9297 0204 002B     		cmp	r3, #0
 9298 0206 00DA     		bge	.L622
 9299 0208 0333     		adds	r3, r3, #3
 9300              	.L622:
 9301 020a 9B10     		asrs	r3, r3, #2
 9302 020c 1BB2     		sxth	r3, r3
 9303 020e 7B60     		str	r3, [r7, #4]
2621:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9304              		.loc 1 2621 0
 9305 0210 264B     		ldr	r3, .L677
 9306 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9307 0216 012B     		cmp	r3, #1
 9308 0218 0CD1     		bne	.L623
2622:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9309              		.loc 1 2622 0
 9310 021a 244B     		ldr	r3, .L677
 9311 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9312 0220 1946     		mov	r1, r3
 9313 0222 234A     		ldr	r2, .L677+4
 9314 0224 3423     		movs	r3, #52
 9315 0226 03FB01F3 		mul	r3, r3, r1
 9316 022a 1344     		add	r3, r3, r2
 9317 022c 1433     		adds	r3, r3, #20
 9318 022e 1B68     		ldr	r3, [r3]
 9319 0230 3B61     		str	r3, [r7, #16]
 9320 0232 0BE0     		b	.L624
 9321              	.L623:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 214


2623:..\src/interruptions.c ****                 else
2624:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9322              		.loc 1 2624 0
 9323 0234 1D4B     		ldr	r3, .L677
 9324 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9325 023a 1946     		mov	r1, r3
 9326 023c 1C4A     		ldr	r2, .L677+4
 9327 023e 3423     		movs	r3, #52
 9328 0240 03FB01F3 		mul	r3, r3, r1
 9329 0244 1344     		add	r3, r3, r2
 9330 0246 0C33     		adds	r3, r3, #12
 9331 0248 1B68     		ldr	r3, [r3]
 9332 024a 3B61     		str	r3, [r7, #16]
 9333              	.L624:
2625:..\src/interruptions.c **** 
2626:..\src/interruptions.c ****                 if (curr_ref < 0){
 9334              		.loc 1 2626 0
 9335 024c 3B69     		ldr	r3, [r7, #16]
 9336 024e 002B     		cmp	r3, #0
 9337 0250 02DA     		bge	.L625
2627:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9338              		.loc 1 2627 0
 9339 0252 3B69     		ldr	r3, [r7, #16]
 9340 0254 5B42     		negs	r3, r3
 9341 0256 3B61     		str	r3, [r7, #16]
 9342              	.L625:
2628:..\src/interruptions.c ****                 }
2629:..\src/interruptions.c ****                 
2630:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9343              		.loc 1 2630 0
 9344 0258 144B     		ldr	r3, .L677
 9345 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9346 025e 1A46     		mov	r2, r3
 9347 0260 3B69     		ldr	r3, [r7, #16]
 9348 0262 9A42     		cmp	r2, r3
 9349 0264 05DA     		bge	.L626
2631:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9350              		.loc 1 2631 0
 9351 0266 114B     		ldr	r3, .L677
 9352 0268 DB6C     		ldr	r3, [r3, #76]
 9353 026a 0133     		adds	r3, r3, #1
 9354 026c 0F4A     		ldr	r2, .L677
 9355 026e D364     		str	r3, [r2, #76]
 9356 0270 12E0     		b	.L618
 9357              	.L626:
2632:..\src/interruptions.c ****                 else
2633:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9358              		.loc 1 2633 0
 9359 0272 3A69     		ldr	r2, [r7, #16]
 9360 0274 7B68     		ldr	r3, [r7, #4]
 9361 0276 92FBF3F3 		sdiv	r3, r2, r3
 9362 027a DBB2     		uxtb	r3, r3
 9363 027c 3969     		ldr	r1, [r7, #16]
 9364 027e 7A68     		ldr	r2, [r7, #4]
 9365 0280 91FBF2F2 		sdiv	r2, r1, r2
 9366 0284 D2B2     		uxtb	r2, r2
 9367 0286 0949     		ldr	r1, .L677
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 215


 9368 0288 1032     		adds	r2, r2, #16
 9369 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9370 028e 0132     		adds	r2, r2, #1
 9371 0290 0649     		ldr	r1, .L677
 9372 0292 1033     		adds	r3, r3, #16
 9373 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9374              	.L618:
2634:..\src/interruptions.c ****             }
2635:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9375              		.loc 1 2635 0
 9376 0298 064B     		ldr	r3, .L677+8
 9377 029a 0022     		movs	r2, #0
 9378 029c 1A70     		strb	r2, [r3]
2636:..\src/interruptions.c ****             break;
 9379              		.loc 1 2636 0
 9380 029e 02E0     		b	.L600
 9381              	.L667:
2591:..\src/interruptions.c ****         case STATE_ACTIVE:
 9382              		.loc 1 2591 0
 9383 02a0 00BF     		nop
 9384 02a2 00E0     		b	.L600
 9385              	.L668:
2601:..\src/interruptions.c ****         case COUNTER_INC:
 9386              		.loc 1 2601 0
 9387 02a4 00BF     		nop
 9388              	.L600:
2637:..\src/interruptions.c ****     }
2638:..\src/interruptions.c ****     
2639:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2640:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9389              		.loc 1 2640 0
 9390 02a6 0023     		movs	r3, #0
 9391 02a8 FB75     		strb	r3, [r7, #23]
 9392 02aa 4FE0     		b	.L627
 9393              	.L678:
 9394              		.align	2
 9395              	.L677:
 9396 02ac 00000000 		.word	g_mem
 9397 02b0 00000000 		.word	g_meas
 9398 02b4 8E010000 		.word	pos_cycle_status.10503
 9399 02b8 00000000 		.word	pwm_sign
 9400 02bc 90010000 		.word	thr_pos.10510
 9401 02c0 94010000 		.word	max_pos.10511
 9402 02c4 10000000 		.word	bin_threshold.10508
 9403 02c8 67666666 		.word	1717986919
 9404              	.L635:
2641:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9405              		.loc 1 2641 0
 9406 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9407 02ce 9C4A     		ldr	r2, .L679
 9408 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9409 02d2 012B     		cmp	r3, #1
 9410 02d4 13D0     		beq	.L629
 9411 02d6 022B     		cmp	r3, #2
 9412 02d8 22D0     		beq	.L630
 9413 02da 002B     		cmp	r3, #0
 9414 02dc 33D1     		bne	.L628
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 216


2642:..\src/interruptions.c ****             case STATE_INACTIVE:
2643:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9415              		.loc 1 2643 0
 9416 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9417 02e0 984A     		ldr	r2, .L679+4
 9418 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9419 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9420 02e8 9749     		ldr	r1, .L679+8
 9421 02ea F832     		adds	r2, r2, #248
 9422 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9423 02f0 9342     		cmp	r3, r2
 9424 02f2 25DD     		ble	.L669
2644:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9425              		.loc 1 2644 0
 9426 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9427 02f6 924A     		ldr	r2, .L679
 9428 02f8 0121     		movs	r1, #1
 9429 02fa D154     		strb	r1, [r2, r3]
2645:..\src/interruptions.c ****                 }
2646:..\src/interruptions.c ****                 break;
 9430              		.loc 1 2646 0
 9431 02fc 20E0     		b	.L669
 9432              	.L629:
2647:..\src/interruptions.c ****             case STATE_ACTIVE:
2648:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9433              		.loc 1 2648 0
 9434 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9435 0300 904A     		ldr	r2, .L679+4
 9436 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9437 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9438 0308 8F49     		ldr	r1, .L679+8
 9439 030a F833     		adds	r3, r3, #248
 9440 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9441 0310 0A3B     		subs	r3, r3, #10
 9442 0312 9A42     		cmp	r2, r3
 9443 0314 16DA     		bge	.L670
2649:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9444              		.loc 1 2649 0
 9445 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9446 0318 894A     		ldr	r2, .L679
 9447 031a 0221     		movs	r1, #2
 9448 031c D154     		strb	r1, [r2, r3]
2650:..\src/interruptions.c ****                 }
2651:..\src/interruptions.c ****                 break;
 9449              		.loc 1 2651 0
 9450 031e 11E0     		b	.L670
 9451              	.L630:
2652:..\src/interruptions.c ****             case COUNTER_INC:
2653:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9452              		.loc 1 2653 0
 9453 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9454 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9455 0324 8849     		ldr	r1, .L679+8
 9456 0326 0432     		adds	r2, r2, #4
 9457 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9458 032c 0132     		adds	r2, r2, #1
 9459 032e 8649     		ldr	r1, .L679+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 217


 9460 0330 0433     		adds	r3, r3, #4
 9461 0332 41F82320 		str	r2, [r1, r3, lsl #2]
2654:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9462              		.loc 1 2654 0
 9463 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9464 0338 814A     		ldr	r2, .L679
 9465 033a 0021     		movs	r1, #0
 9466 033c D154     		strb	r1, [r2, r3]
2655:..\src/interruptions.c ****                 break;
 9467              		.loc 1 2655 0
 9468 033e 02E0     		b	.L628
 9469              	.L669:
2646:..\src/interruptions.c ****             case STATE_ACTIVE:
 9470              		.loc 1 2646 0
 9471 0340 00BF     		nop
 9472 0342 00E0     		b	.L628
 9473              	.L670:
2651:..\src/interruptions.c ****             case COUNTER_INC:
 9474              		.loc 1 2651 0
 9475 0344 00BF     		nop
 9476              	.L628:
2640:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9477              		.loc 1 2640 0 discriminator 2
 9478 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9479 0348 0133     		adds	r3, r3, #1
 9480 034a FB75     		strb	r3, [r7, #23]
 9481              	.L627:
2640:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9482              		.loc 1 2640 0 is_stmt 0 discriminator 1
 9483 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9484 034e 012B     		cmp	r3, #1
 9485 0350 07D8     		bhi	.L634
2640:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9486              		.loc 1 2640 0 discriminator 3
 9487 0352 7E4B     		ldr	r3, .L679+12
 9488 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9489 0356 002B     		cmp	r3, #0
 9490 0358 03D1     		bne	.L634
2640:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9491              		.loc 1 2640 0 discriminator 4
 9492 035a 7D4B     		ldr	r3, .L679+16
 9493 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9494 035e 002B     		cmp	r3, #0
 9495 0360 B4D0     		beq	.L635
 9496              	.L634:
2656:..\src/interruptions.c ****         }
2657:..\src/interruptions.c ****     }
2658:..\src/interruptions.c ****     
2659:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2660:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9497              		.loc 1 2660 0 is_stmt 1
 9498 0362 0023     		movs	r3, #0
 9499 0364 FB75     		strb	r3, [r7, #23]
 9500 0366 57E0     		b	.L636
 9501              	.L645:
2661:..\src/interruptions.c ****         switch (motion_status[i]){
 9502              		.loc 1 2661 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 218


 9503 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9504 036a 7A4A     		ldr	r2, .L679+20
 9505 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9506 036e 012B     		cmp	r3, #1
 9507 0370 18D0     		beq	.L638
 9508 0372 022B     		cmp	r3, #2
 9509 0374 37D0     		beq	.L639
 9510 0376 002B     		cmp	r3, #0
 9511 0378 4BD1     		bne	.L637
2662:..\src/interruptions.c ****             case STATE_INACTIVE:
2663:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9512              		.loc 1 2663 0
 9513 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9514 037c 714A     		ldr	r2, .L679+4
 9515 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9516 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9517 0384 7049     		ldr	r1, .L679+8
 9518 0386 F832     		adds	r2, r2, #248
 9519 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9520 038c 9342     		cmp	r3, r2
 9521 038e 3DDD     		ble	.L671
2664:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9522              		.loc 1 2664 0
 9523 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9524 0392 7149     		ldr	r1, .L679+24
 9525 0394 FA68     		ldr	r2, [r7, #12]
 9526 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2665:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
 9527              		.loc 1 2665 0
 9528 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9529 039c 6D4A     		ldr	r2, .L679+20
 9530 039e 0121     		movs	r1, #1
 9531 03a0 D154     		strb	r1, [r2, r3]
2666:..\src/interruptions.c ****                 }
2667:..\src/interruptions.c ****                 break;
 9532              		.loc 1 2667 0
 9533 03a2 33E0     		b	.L671
 9534              	.L638:
2668:..\src/interruptions.c ****             case STATE_ACTIVE:
2669:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9535              		.loc 1 2669 0
 9536 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9537 03a6 674A     		ldr	r2, .L679+4
 9538 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9539 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9540 03ae 6649     		ldr	r1, .L679+8
 9541 03b0 F833     		adds	r3, r3, #248
 9542 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9543 03b6 0A3B     		subs	r3, r3, #10
 9544 03b8 9A42     		cmp	r2, r3
 9545 03ba 29DA     		bge	.L672
2670:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9546              		.loc 1 2670 0
 9547 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9548 03be 664A     		ldr	r2, .L679+24
 9549 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9550 03c4 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 219


 9551 03c6 D31A     		subs	r3, r2, r3
 9552 03c8 002B     		cmp	r3, #0
 9553 03ca B8BF     		it	lt
 9554 03cc 5B42     		rsblt	r3, r3, #0
 9555 03ce C82B     		cmp	r3, #200
 9556 03d0 04DD     		ble	.L643
2671:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9557              		.loc 1 2671 0
 9558 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9559 03d4 5F4A     		ldr	r2, .L679+20
 9560 03d6 0221     		movs	r1, #2
 9561 03d8 D154     		strb	r1, [r2, r3]
2672:..\src/interruptions.c ****                     }
2673:..\src/interruptions.c ****                     else {
2674:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2675:..\src/interruptions.c ****                     }
2676:..\src/interruptions.c ****                 }
2677:..\src/interruptions.c ****                 break;
 9562              		.loc 1 2677 0
 9563 03da 19E0     		b	.L672
 9564              	.L643:
2674:..\src/interruptions.c ****                     }
 9565              		.loc 1 2674 0
 9566 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9567 03de 5D4A     		ldr	r2, .L679+20
 9568 03e0 0021     		movs	r1, #0
 9569 03e2 D154     		strb	r1, [r2, r3]
 9570              		.loc 1 2677 0
 9571 03e4 14E0     		b	.L672
 9572              	.L639:
2678:..\src/interruptions.c ****             case COUNTER_INC:
2679:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9573              		.loc 1 2679 0
 9574 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9575 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9576 03ea 574A     		ldr	r2, .L679+8
 9577 03ec 1A33     		adds	r3, r3, #26
 9578 03ee 9B00     		lsls	r3, r3, #2
 9579 03f0 1344     		add	r3, r3, r2
 9580 03f2 5B68     		ldr	r3, [r3, #4]
 9581 03f4 5A1C     		adds	r2, r3, #1
 9582 03f6 5448     		ldr	r0, .L679+8
 9583 03f8 01F11A03 		add	r3, r1, #26
 9584 03fc 9B00     		lsls	r3, r3, #2
 9585 03fe 0344     		add	r3, r3, r0
 9586 0400 5A60     		str	r2, [r3, #4]
2680:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9587              		.loc 1 2680 0
 9588 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9589 0404 534A     		ldr	r2, .L679+20
 9590 0406 0021     		movs	r1, #0
 9591 0408 D154     		strb	r1, [r2, r3]
2681:..\src/interruptions.c ****                 break;
 9592              		.loc 1 2681 0
 9593 040a 02E0     		b	.L637
 9594              	.L671:
2667:..\src/interruptions.c ****             case STATE_ACTIVE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 220


 9595              		.loc 1 2667 0
 9596 040c 00BF     		nop
 9597 040e 00E0     		b	.L637
 9598              	.L672:
2677:..\src/interruptions.c ****             case COUNTER_INC:
 9599              		.loc 1 2677 0
 9600 0410 00BF     		nop
 9601              	.L637:
2660:..\src/interruptions.c ****         switch (motion_status[i]){
 9602              		.loc 1 2660 0 discriminator 2
 9603 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9604 0414 0133     		adds	r3, r3, #1
 9605 0416 FB75     		strb	r3, [r7, #23]
 9606              	.L636:
2660:..\src/interruptions.c ****         switch (motion_status[i]){
 9607              		.loc 1 2660 0 is_stmt 0 discriminator 1
 9608 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9609 041a 012B     		cmp	r3, #1
 9610 041c 07D8     		bhi	.L644
2660:..\src/interruptions.c ****         switch (motion_status[i]){
 9611              		.loc 1 2660 0 discriminator 3
 9612 041e 4B4B     		ldr	r3, .L679+12
 9613 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9614 0422 002B     		cmp	r3, #0
 9615 0424 03D1     		bne	.L644
2660:..\src/interruptions.c ****         switch (motion_status[i]){
 9616              		.loc 1 2660 0 discriminator 4
 9617 0426 4A4B     		ldr	r3, .L679+16
 9618 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9619 042a 002B     		cmp	r3, #0
 9620 042c 9CD0     		beq	.L645
 9621              	.L644:
2682:..\src/interruptions.c ****         }
2683:..\src/interruptions.c ****     }
2684:..\src/interruptions.c ****     
2685:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2686:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9622              		.loc 1 2686 0 is_stmt 1
 9623 042e 0023     		movs	r3, #0
 9624 0430 FB75     		strb	r3, [r7, #23]
 9625 0432 A3E0     		b	.L646
 9626              	.L657:
2687:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9627              		.loc 1 2687 0
 9628 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9629 0436 494A     		ldr	r2, .L679+28
 9630 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9631 043a 012B     		cmp	r3, #1
 9632 043c 19D0     		beq	.L648
 9633 043e 022B     		cmp	r3, #2
 9634 0440 68D0     		beq	.L649
 9635 0442 002B     		cmp	r3, #0
 9636 0444 40F09780 		bne	.L647
2688:..\src/interruptions.c ****             case STATE_INACTIVE:
2689:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9637              		.loc 1 2689 0
 9638 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 221


 9639 044a 3E4A     		ldr	r2, .L679+4
 9640 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9641 0450 434B     		ldr	r3, .L679+32
 9642 0452 1B68     		ldr	r3, [r3]
 9643 0454 9A42     		cmp	r2, r3
 9644 0456 70DD     		ble	.L673
2690:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9645              		.loc 1 2690 0
 9646 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9647 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9648 045e 0346     		mov	r3, r0
 9649 0460 1A46     		mov	r2, r3
 9650 0462 404B     		ldr	r3, .L679+36
 9651 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2691:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9652              		.loc 1 2691 0
 9653 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9654 046a 3C4A     		ldr	r2, .L679+28
 9655 046c 0121     		movs	r1, #1
 9656 046e D154     		strb	r1, [r2, r3]
2692:..\src/interruptions.c ****                 }
2693:..\src/interruptions.c ****                 break;
 9657              		.loc 1 2693 0
 9658 0470 63E0     		b	.L673
 9659              	.L648:
2694:..\src/interruptions.c ****             case STATE_ACTIVE:
2695:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9660              		.loc 1 2695 0
 9661 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9662 0474 334A     		ldr	r2, .L679+4
 9663 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9664 047a 394B     		ldr	r3, .L679+32
 9665 047c 1B68     		ldr	r3, [r3]
 9666 047e 0A3B     		subs	r3, r3, #10
 9667 0480 9A42     		cmp	r2, r3
 9668 0482 77DA     		bge	.L674
2696:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9669              		.loc 1 2696 0
 9670 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9671 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9672 048a 0346     		mov	r3, r0
 9673 048c 1A46     		mov	r2, r3
 9674 048e 364B     		ldr	r3, .L679+40
 9675 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2697:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9676              		.loc 1 2697 0
 9677 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9678 0496 334A     		ldr	r2, .L679+36
 9679 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9680 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9681 049e 3249     		ldr	r1, .L679+40
 9682 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9683 04a4 9A42     		cmp	r2, r3
 9684 04a6 0AD2     		bcs	.L653
2698:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9685              		.loc 1 2698 0
 9686 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 222


 9687 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9688 04ac 2D49     		ldr	r1, .L679+36
 9689 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9690 04b2 03F5BB53 		add	r3, r3, #5984
 9691 04b6 1033     		adds	r3, r3, #16
 9692 04b8 2A49     		ldr	r1, .L679+36
 9693 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9694              	.L653:
2699:..\src/interruptions.c ****                     }
2700:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9695              		.loc 1 2700 0
 9696 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9697 04c0 284A     		ldr	r2, .L679+36
 9698 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9699 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9700 04c8 2749     		ldr	r1, .L679+40
 9701 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9702 04ce D31A     		subs	r3, r2, r3
 9703 04d0 1846     		mov	r0, r3
 9704 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9705 04d6 0346     		mov	r3, r0
 9706 04d8 1846     		mov	r0, r3
 9707 04da FFF7FEFF 		bl	__aeabi_f2d
 9708 04de 4FF00002 		mov	r2, #0
 9709 04e2 224B     		ldr	r3, .L679+44
 9710 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9711 04e8 0346     		mov	r3, r0
 9712 04ea 0C46     		mov	r4, r1
 9713 04ec 1846     		mov	r0, r3
 9714 04ee 2146     		mov	r1, r4
 9715 04f0 4FF00002 		mov	r2, #0
 9716 04f4 1E4B     		ldr	r3, .L679+48
 9717 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 9718 04fa 0346     		mov	r3, r0
 9719 04fc 002B     		cmp	r3, #0
 9720 04fe 04D0     		beq	.L666
2701:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9721              		.loc 1 2701 0
 9722 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9723 0502 164A     		ldr	r2, .L679+28
 9724 0504 0221     		movs	r1, #2
 9725 0506 D154     		strb	r1, [r2, r3]
2702:..\src/interruptions.c ****                     }
2703:..\src/interruptions.c ****                     else {
2704:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2705:..\src/interruptions.c ****                     }
2706:..\src/interruptions.c ****                 }
2707:..\src/interruptions.c ****                 break;
 9726              		.loc 1 2707 0
 9727 0508 34E0     		b	.L674
 9728              	.L666:
2704:..\src/interruptions.c ****                     }
 9729              		.loc 1 2704 0
 9730 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9731 050c 134A     		ldr	r2, .L679+28
 9732 050e 0021     		movs	r1, #0
 9733 0510 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 223


 9734              		.loc 1 2707 0
 9735 0512 2FE0     		b	.L674
 9736              	.L649:
2708:..\src/interruptions.c ****             case COUNTER_INC:
2709:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9737              		.loc 1 2709 0
 9738 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9739 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9740 0518 0B4A     		ldr	r2, .L679+8
 9741 051a 1833     		adds	r3, r3, #24
 9742 051c 9B00     		lsls	r3, r3, #2
 9743 051e 1344     		add	r3, r3, r2
 9744 0520 5B68     		ldr	r3, [r3, #4]
 9745 0522 5A1C     		adds	r2, r3, #1
 9746 0524 0848     		ldr	r0, .L679+8
 9747 0526 01F11803 		add	r3, r1, #24
 9748 052a 9B00     		lsls	r3, r3, #2
 9749 052c 0344     		add	r3, r3, r0
 9750 052e 5A60     		str	r2, [r3, #4]
2710:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9751              		.loc 1 2710 0
 9752 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9753 0532 0A4A     		ldr	r2, .L679+28
 9754 0534 0021     		movs	r1, #0
 9755 0536 D154     		strb	r1, [r2, r3]
2711:..\src/interruptions.c ****                 break;
 9756              		.loc 1 2711 0
 9757 0538 1DE0     		b	.L647
 9758              	.L673:
2693:..\src/interruptions.c ****             case STATE_ACTIVE:
 9759              		.loc 1 2693 0
 9760 053a 00BF     		nop
 9761 053c 1BE0     		b	.L647
 9762              	.L680:
 9763 053e 00BF     		.align	2
 9764              	.L679:
 9765 0540 98010000 		.word	emg_cycle_status.10504
 9766 0544 00000000 		.word	g_adc_meas
 9767 0548 00000000 		.word	g_mem
 9768 054c 00000000 		.word	emg_1_status
 9769 0550 00000000 		.word	emg_2_status
 9770 0554 9C010000 		.word	motion_status.10505
 9771 0558 A0010000 		.word	start_emg_pos.10525
 9772 055c A8010000 		.word	emg_excess_status.10506
 9773 0560 14000000 		.word	exc_act_thr.10509
 9774 0564 AC010000 		.word	timer_exc_s.10523
 9775 0568 B4010000 		.word	timer_exc_e.10524
 9776 056c 00004940 		.word	1078525952
 9777 0570 00001040 		.word	1074790400
 9778              	.L674:
2707:..\src/interruptions.c ****             case COUNTER_INC:
 9779              		.loc 1 2707 0
 9780 0574 00BF     		nop
 9781              	.L647:
2686:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9782              		.loc 1 2686 0 discriminator 2
 9783 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 224


 9784 0578 0133     		adds	r3, r3, #1
 9785 057a FB75     		strb	r3, [r7, #23]
 9786              	.L646:
2686:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9787              		.loc 1 2686 0 is_stmt 0 discriminator 1
 9788 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9789 057e 012B     		cmp	r3, #1
 9790 0580 08D8     		bhi	.L656
2686:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9791              		.loc 1 2686 0 discriminator 3
 9792 0582 2D4B     		ldr	r3, .L681
 9793 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9794 0586 002B     		cmp	r3, #0
 9795 0588 04D1     		bne	.L656
2686:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9796              		.loc 1 2686 0 discriminator 4
 9797 058a 2C4B     		ldr	r3, .L681+4
 9798 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9799 058e 002B     		cmp	r3, #0
 9800 0590 3FF450AF 		beq	.L657
 9801              	.L656:
2712:..\src/interruptions.c ****         }
2713:..\src/interruptions.c ****     }
2714:..\src/interruptions.c ****     
2715:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2716:..\src/interruptions.c ****     switch (rest_cycle_status){
 9802              		.loc 1 2716 0 is_stmt 1
 9803 0594 2A4B     		ldr	r3, .L681+8
 9804 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9805 0598 012B     		cmp	r3, #1
 9806 059a 11D0     		beq	.L659
 9807 059c 022B     		cmp	r3, #2
 9808 059e 2AD0     		beq	.L660
 9809 05a0 002B     		cmp	r3, #0
 9810 05a2 42D1     		bne	.L658
2717:..\src/interruptions.c ****         case STATE_INACTIVE:
2718:..\src/interruptions.c ****             if (rest_enabled){
 9811              		.loc 1 2718 0
 9812 05a4 274B     		ldr	r3, .L681+12
 9813 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9814 05a8 002B     		cmp	r3, #0
 9815 05aa 3BD0     		beq	.L675
2719:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9816              		.loc 1 2719 0
 9817 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9818 05b0 0346     		mov	r3, r0
 9819 05b2 1A46     		mov	r2, r3
 9820 05b4 244B     		ldr	r3, .L681+16
 9821 05b6 1A60     		str	r2, [r3]
2720:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9822              		.loc 1 2720 0
 9823 05b8 214B     		ldr	r3, .L681+8
 9824 05ba 0122     		movs	r2, #1
 9825 05bc 1A70     		strb	r2, [r3]
2721:..\src/interruptions.c ****             }
2722:..\src/interruptions.c ****             break;
 9826              		.loc 1 2722 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 225


 9827 05be 31E0     		b	.L675
 9828              	.L659:
2723:..\src/interruptions.c ****         case STATE_ACTIVE:
2724:..\src/interruptions.c ****             if (!rest_enabled){
 9829              		.loc 1 2724 0
 9830 05c0 204B     		ldr	r3, .L681+12
 9831 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9832 05c4 002B     		cmp	r3, #0
 9833 05c6 2FD1     		bne	.L676
2725:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9834              		.loc 1 2725 0
 9835 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9836 05cc 0346     		mov	r3, r0
 9837 05ce 1A46     		mov	r2, r3
 9838 05d0 1E4B     		ldr	r3, .L681+20
 9839 05d2 1A60     		str	r2, [r3]
2726:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9840              		.loc 1 2726 0
 9841 05d4 1C4B     		ldr	r3, .L681+16
 9842 05d6 1A68     		ldr	r2, [r3]
 9843 05d8 1C4B     		ldr	r3, .L681+20
 9844 05da 1B68     		ldr	r3, [r3]
 9845 05dc 9A42     		cmp	r2, r3
 9846 05de 06D2     		bcs	.L664
2727:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9847              		.loc 1 2727 0
 9848 05e0 194B     		ldr	r3, .L681+16
 9849 05e2 1B68     		ldr	r3, [r3]
 9850 05e4 03F5BB53 		add	r3, r3, #5984
 9851 05e8 1033     		adds	r3, r3, #16
 9852 05ea 174A     		ldr	r2, .L681+16
 9853 05ec 1360     		str	r3, [r2]
 9854              	.L664:
2728:..\src/interruptions.c ****                 }
2729:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9855              		.loc 1 2729 0
 9856 05ee 144B     		ldr	r3, .L681+8
 9857 05f0 0222     		movs	r2, #2
 9858 05f2 1A70     		strb	r2, [r3]
2730:..\src/interruptions.c ****             }
2731:..\src/interruptions.c ****             break;
 9859              		.loc 1 2731 0
 9860 05f4 18E0     		b	.L676
 9861              	.L660:
2732:..\src/interruptions.c ****         case COUNTER_INC: 
2733:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9862              		.loc 1 2733 0
 9863 05f6 164B     		ldr	r3, .L681+24
 9864 05f8 DA6D     		ldr	r2, [r3, #92]
 9865 05fa 134B     		ldr	r3, .L681+16
 9866 05fc 1968     		ldr	r1, [r3]
 9867 05fe 134B     		ldr	r3, .L681+20
 9868 0600 1B68     		ldr	r3, [r3]
 9869 0602 CB1A     		subs	r3, r1, r3
 9870 0604 1349     		ldr	r1, .L681+28
 9871 0606 A1FB0313 		umull	r1, r3, r1, r3
 9872 060a 1B09     		lsrs	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 226


 9873 060c 1344     		add	r3, r3, r2
 9874 060e 104A     		ldr	r2, .L681+24
 9875 0610 D365     		str	r3, [r2, #92]
2734:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9876              		.loc 1 2734 0
 9877 0612 0F4B     		ldr	r3, .L681+24
 9878 0614 1B6D     		ldr	r3, [r3, #80]
 9879 0616 0133     		adds	r3, r3, #1
 9880 0618 0D4A     		ldr	r2, .L681+24
 9881 061a 1365     		str	r3, [r2, #80]
2735:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9882              		.loc 1 2735 0
 9883 061c 084B     		ldr	r3, .L681+8
 9884 061e 0022     		movs	r2, #0
 9885 0620 1A70     		strb	r2, [r3]
2736:..\src/interruptions.c ****             break;
 9886              		.loc 1 2736 0
 9887 0622 02E0     		b	.L658
 9888              	.L675:
2722:..\src/interruptions.c ****         case STATE_ACTIVE:
 9889              		.loc 1 2722 0
 9890 0624 00BF     		nop
 9891 0626 00E0     		b	.L658
 9892              	.L676:
2731:..\src/interruptions.c ****         case COUNTER_INC: 
 9893              		.loc 1 2731 0
 9894 0628 00BF     		nop
 9895              	.L658:
2737:..\src/interruptions.c ****     }
2738:..\src/interruptions.c ****           
2739:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2740:..\src/interruptions.c ****     save_cycles_eeprom();
 9896              		.loc 1 2740 0
 9897 062a FFF7FEFF 		bl	save_cycles_eeprom
2741:..\src/interruptions.c ****     
2742:..\src/interruptions.c **** }
 9898              		.loc 1 2742 0
 9899 062e 00BF     		nop
 9900 0630 1C37     		adds	r7, r7, #28
 9901              		.cfi_def_cfa_offset 12
 9902 0632 BD46     		mov	sp, r7
 9903              		.cfi_def_cfa_register 13
 9904              		@ sp needed
 9905 0634 90BD     		pop	{r4, r7, pc}
 9906              	.L682:
 9907 0636 00BF     		.align	2
 9908              	.L681:
 9909 0638 00000000 		.word	emg_1_status
 9910 063c 00000000 		.word	emg_2_status
 9911 0640 BC010000 		.word	rest_cycle_status.10507
 9912 0644 00000000 		.word	rest_enabled
 9913 0648 C0010000 		.word	timer_value_s.10521
 9914 064c C4010000 		.word	timer_value_e.10522
 9915 0650 00000000 		.word	g_mem
 9916 0654 1F85EB51 		.word	1374389535
 9917              		.cfi_endproc
 9918              	.LFE78:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 227


 9919              		.size	cycles_counter_update, .-cycles_counter_update
 9920              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9921              		.align	2
 9922              		.global	save_cycles_eeprom
 9923              		.thumb
 9924              		.thumb_func
 9925              		.type	save_cycles_eeprom, %function
 9926              	save_cycles_eeprom:
 9927              	.LFB79:
2743:..\src/interruptions.c **** 
2744:..\src/interruptions.c **** //==============================================================================
2745:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2746:..\src/interruptions.c **** //==============================================================================
2747:..\src/interruptions.c **** 
2748:..\src/interruptions.c **** void save_cycles_eeprom() {
 9928              		.loc 1 2748 0
 9929              		.cfi_startproc
 9930              		@ args = 0, pretend = 0, frame = 24
 9931              		@ frame_needed = 1, uses_anonymous_args = 0
 9932 0000 80B5     		push	{r7, lr}
 9933              		.cfi_def_cfa_offset 8
 9934              		.cfi_offset 7, -8
 9935              		.cfi_offset 14, -4
 9936 0002 86B0     		sub	sp, sp, #24
 9937              		.cfi_def_cfa_offset 32
 9938 0004 00AF     		add	r7, sp, #0
 9939              		.cfi_def_cfa_register 7
2749:..\src/interruptions.c **** 
2750:..\src/interruptions.c ****     cystatus status;
2751:..\src/interruptions.c ****     static uint8 row_number;
2752:..\src/interruptions.c ****     uint8 row_start = 1;
 9940              		.loc 1 2752 0
 9941 0006 0123     		movs	r3, #1
 9942 0008 FB75     		strb	r3, [r7, #23]
2753:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 9943              		.loc 1 2753 0
 9944 000a 394B     		ldr	r3, .L699
 9945 000c 3B61     		str	r3, [r7, #16]
2754:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 9946              		.loc 1 2754 0
 9947 000e 394B     		ldr	r3, .L699+4
 9948 0010 FB60     		str	r3, [r7, #12]
2755:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9949              		.loc 1 2755 0
 9950 0012 FB7D     		ldrb	r3, [r7, #23]
 9951 0014 0633     		adds	r3, r3, #6
 9952 0016 FB72     		strb	r3, [r7, #11]
2756:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2757:..\src/interruptions.c **** 
2758:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2759:..\src/interruptions.c ****     switch(cycles_status) {
 9953              		.loc 1 2759 0
 9954 0018 374B     		ldr	r3, .L699+8
 9955 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9956 001c 042B     		cmp	r3, #4
 9957 001e 63D8     		bhi	.L695
 9958 0020 01A2     		adr	r2, .L686
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 228


 9959 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9960 0026 00BF     		.p2align 2
 9961              	.L686:
 9962 0028 3D000000 		.word	.L685+1
 9963 002c 5B000000 		.word	.L687+1
 9964 0030 8B000000 		.word	.L688+1
 9965 0034 C7000000 		.word	.L689+1
 9966 0038 DF000000 		.word	.L696+1
 9967              		.p2align 1
 9968              	.L685:
2760:..\src/interruptions.c ****         case PREPARE_DATA:
2761:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2762:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9969              		.loc 1 2762 0
 9970 003c 7022     		movs	r2, #112
 9971 003e 3969     		ldr	r1, [r7, #16]
 9972 0040 F868     		ldr	r0, [r7, #12]
 9973 0042 FFF7FEFF 		bl	memcpy
2763:..\src/interruptions.c ****             m_addr = addr_start;
 9974              		.loc 1 2763 0
 9975 0046 2D4A     		ldr	r2, .L699+12
 9976 0048 3B69     		ldr	r3, [r7, #16]
 9977 004a 1360     		str	r3, [r2]
2764:..\src/interruptions.c ****             row_number = row_start;
 9978              		.loc 1 2764 0
 9979 004c 2C4A     		ldr	r2, .L699+16
 9980 004e FB7D     		ldrb	r3, [r7, #23]
 9981 0050 1370     		strb	r3, [r2]
2765:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9982              		.loc 1 2765 0
 9983 0052 294B     		ldr	r3, .L699+8
 9984 0054 0122     		movs	r2, #1
 9985 0056 1A70     		strb	r2, [r3]
2766:..\src/interruptions.c ****             break;
 9986              		.loc 1 2766 0
 9987 0058 46E0     		b	.L684
 9988              	.L687:
2767:..\src/interruptions.c ****             
2768:..\src/interruptions.c ****         case WRITE_CYCLES:
2769:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9989              		.loc 1 2769 0
 9990 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2770:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9991              		.loc 1 2770 0
 9992 005e 274B     		ldr	r3, .L699+12
 9993 0060 1A68     		ldr	r2, [r3]
 9994 0062 274B     		ldr	r3, .L699+16
 9995 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9996 0066 1946     		mov	r1, r3
 9997 0068 1046     		mov	r0, r2
 9998 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9999 006e 7860     		str	r0, [r7, #4]
2771:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10000              		.loc 1 2771 0
 10001 0070 7B68     		ldr	r3, [r7, #4]
 10002 0072 072B     		cmp	r3, #7
 10003 0074 02D0     		beq	.L691
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 229


 10004              		.loc 1 2771 0 is_stmt 0 discriminator 1
 10005 0076 7B68     		ldr	r3, [r7, #4]
 10006 0078 002B     		cmp	r3, #0
 10007 007a 32D1     		bne	.L697
 10008              	.L691:
2772:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10009              		.loc 1 2772 0 is_stmt 1
 10010 007c 1E4B     		ldr	r3, .L699+8
 10011 007e 0222     		movs	r2, #2
 10012 0080 1A70     		strb	r2, [r3]
2773:..\src/interruptions.c ****                 can_write = FALSE;
 10013              		.loc 1 2773 0
 10014 0082 204B     		ldr	r3, .L699+20
 10015 0084 0022     		movs	r2, #0
 10016 0086 1A70     		strb	r2, [r3]
2774:..\src/interruptions.c ****             }
2775:..\src/interruptions.c ****             break;
 10017              		.loc 1 2775 0
 10018 0088 2BE0     		b	.L697
 10019              	.L688:
2776:..\src/interruptions.c ****             
2777:..\src/interruptions.c ****         case WAIT_QUERY:
2778:..\src/interruptions.c ****             status = EEPROM_Query();
 10020              		.loc 1 2778 0
 10021 008a FFF7FEFF 		bl	EEPROM_Query
 10022 008e 7860     		str	r0, [r7, #4]
2779:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10023              		.loc 1 2779 0
 10024 0090 7B68     		ldr	r3, [r7, #4]
 10025 0092 002B     		cmp	r3, #0
 10026 0094 27D1     		bne	.L698
2780:..\src/interruptions.c ****                 if (row_number < row_end) {
 10027              		.loc 1 2780 0
 10028 0096 1A4B     		ldr	r3, .L699+16
 10029 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10030 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10031 009c 9A42     		cmp	r2, r3
 10032 009e 0ED9     		bls	.L694
2781:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10033              		.loc 1 2781 0
 10034 00a0 164B     		ldr	r3, .L699+12
 10035 00a2 1B68     		ldr	r3, [r3]
 10036 00a4 1033     		adds	r3, r3, #16
 10037 00a6 154A     		ldr	r2, .L699+12
 10038 00a8 1360     		str	r3, [r2]
2782:..\src/interruptions.c ****                     row_number = row_number + 1;
 10039              		.loc 1 2782 0
 10040 00aa 154B     		ldr	r3, .L699+16
 10041 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10042 00ae 0133     		adds	r3, r3, #1
 10043 00b0 DAB2     		uxtb	r2, r3
 10044 00b2 134B     		ldr	r3, .L699+16
 10045 00b4 1A70     		strb	r2, [r3]
2783:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10046              		.loc 1 2783 0
 10047 00b6 104B     		ldr	r3, .L699+8
 10048 00b8 0122     		movs	r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 230


 10049 00ba 1A70     		strb	r2, [r3]
2784:..\src/interruptions.c ****                 }
2785:..\src/interruptions.c ****                 else {
2786:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2787:..\src/interruptions.c ****                 }
2788:..\src/interruptions.c ****             }
2789:..\src/interruptions.c ****             break;
 10050              		.loc 1 2789 0
 10051 00bc 13E0     		b	.L698
 10052              	.L694:
2786:..\src/interruptions.c ****                 }
 10053              		.loc 1 2786 0
 10054 00be 0E4B     		ldr	r3, .L699+8
 10055 00c0 0322     		movs	r2, #3
 10056 00c2 1A70     		strb	r2, [r3]
 10057              		.loc 1 2789 0
 10058 00c4 0FE0     		b	.L698
 10059              	.L689:
2790:..\src/interruptions.c ****            
2791:..\src/interruptions.c ****         case WRITE_END:
2792:..\src/interruptions.c ****             can_write = TRUE;            
 10060              		.loc 1 2792 0
 10061 00c6 0F4B     		ldr	r3, .L699+20
 10062 00c8 0122     		movs	r2, #1
 10063 00ca 1A70     		strb	r2, [r3]
2793:..\src/interruptions.c ****             cycles_status = NONE;
 10064              		.loc 1 2793 0
 10065 00cc 0A4B     		ldr	r3, .L699+8
 10066 00ce 0422     		movs	r2, #4
 10067 00d0 1A70     		strb	r2, [r3]
2794:..\src/interruptions.c ****             
2795:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2796:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10068              		.loc 1 2796 0
 10069 00d2 7022     		movs	r2, #112
 10070 00d4 F968     		ldr	r1, [r7, #12]
 10071 00d6 3869     		ldr	r0, [r7, #16]
 10072 00d8 FFF7FEFF 		bl	memcpy
2797:..\src/interruptions.c ****             break;
 10073              		.loc 1 2797 0
 10074 00dc 04E0     		b	.L684
 10075              	.L696:
2798:..\src/interruptions.c ****             
2799:..\src/interruptions.c ****         case NONE:
2800:..\src/interruptions.c ****             break;
 10076              		.loc 1 2800 0
 10077 00de 00BF     		nop
 10078 00e0 02E0     		b	.L695
 10079              	.L697:
2775:..\src/interruptions.c ****             
 10080              		.loc 1 2775 0
 10081 00e2 00BF     		nop
 10082 00e4 00E0     		b	.L695
 10083              	.L698:
2789:..\src/interruptions.c ****            
 10084              		.loc 1 2789 0
 10085 00e6 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 231


 10086              	.L684:
 10087              	.L695:
2801:..\src/interruptions.c ****     }
2802:..\src/interruptions.c ****     
2803:..\src/interruptions.c **** }
 10088              		.loc 1 2803 0
 10089 00e8 00BF     		nop
 10090 00ea 1837     		adds	r7, r7, #24
 10091              		.cfi_def_cfa_offset 8
 10092 00ec BD46     		mov	sp, r7
 10093              		.cfi_def_cfa_register 13
 10094              		@ sp needed
 10095 00ee 80BD     		pop	{r7, pc}
 10096              	.L700:
 10097              		.align	2
 10098              	.L699:
 10099 00f0 10000000 		.word	g_mem+16
 10100 00f4 10000000 		.word	c_mem+16
 10101 00f8 00000000 		.word	cycles_status
 10102 00fc C8010000 		.word	m_addr.10566
 10103 0100 CC010000 		.word	row_number.10561
 10104 0104 00000000 		.word	can_write
 10105              		.cfi_endproc
 10106              	.LFE79:
 10107              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10108              		.bss
 10109              	state.10225:
 10110 0000 00       		.space	1
 10111 0001 000000   		.align	2
 10112              	rx_queue.10229:
 10113 0004 000000   		.space	3
 10114              	data_packet_length.10227:
 10115 0007 00       		.space	1
 10116              	data_packet_index.10226:
 10117 0008 00       		.space	1
 10118 0009 000000   		.align	2
 10119              	data_packet_buffer.10228:
 10120 000c 00000000 		.space	128
 10120      00000000 
 10120      00000000 
 10120      00000000 
 10120      00000000 
 10121              		.data
 10122              		.align	1
 10123              		.type	counter_calibration.10245, %object
 10124              		.size	counter_calibration.10245, 2
 10125              	counter_calibration.10245:
 10126 0000 0100     		.short	1
 10127              		.align	1
 10128              		.type	counter_tension_func.10246, %object
 10129              		.size	counter_tension_func.10246, 2
 10130              	counter_tension_func.10246:
 10131 0002 0100     		.short	1
 10132              		.bss
 10133              		.align	2
 10134              	current_emg.10261:
 10135 008c 0000     		.space	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 232


 10136              	fsm_state.10298:
 10137 008e 00       		.space	1
 10138 008f 00       		.align	2
 10139              	pos_error_sum.10325:
 10140 0090 00000000 		.space	4
 10141              		.align	2
 10142              	prev_pos_err.10327:
 10143 0094 00000000 		.space	4
 10144              	motor_dir.10330:
 10145 0098 00       		.space	1
 10146 0099 000000   		.align	2
 10147              	curr_error_sum.10326:
 10148 009c 00000000 		.space	4
 10149              		.align	2
 10150              	prev_curr_err.10328:
 10151 00a0 00000000 		.space	4
 10152              		.align	2
 10153              	prev_pwm.10329:
 10154 00a4 00000000 		.space	4
 10155              		.align	2
 10156              	position_counter.10331:
 10157 00a8 00000000 		.space	4
 10158              		.align	2
 10159              	pos_error_sum.10358:
 10160 00ac 00000000 		.space	8
 10160      00000000 
 10161              		.align	2
 10162              	prev_pos_err.10360:
 10163 00b4 00000000 		.space	8
 10163      00000000 
 10164              		.align	2
 10165              	motor_dir.10363:
 10166 00bc 0000     		.space	2
 10167 00be 0000     		.align	2
 10168              	curr_error_sum.10359:
 10169 00c0 00000000 		.space	8
 10169      00000000 
 10170              		.align	2
 10171              	prev_curr_err.10361:
 10172 00c8 00000000 		.space	8
 10172      00000000 
 10173              		.align	2
 10174              	prev_pwm.10362:
 10175 00d0 00000000 		.space	8
 10175      00000000 
 10176              		.align	2
 10177              	position_counter.10364:
 10178 00d8 00000000 		.space	8
 10178      00000000 
 10179              		.align	2
 10180              	motor_dir.10379:
 10181 00e0 0000     		.space	2
 10182 00e2 0000     		.align	2
 10183              	last_value_encoder.10396:
 10184 00e4 00000000 		.space	24
 10184      00000000 
 10184      00000000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 233


 10184      00000000 
 10184      00000000 
 10185              		.align	2
 10186              	comp_value_encoder.10397:
 10187 00fc 00000000 		.space	24
 10187      00000000 
 10187      00000000 
 10187      00000000 
 10187      00000000 
 10188              		.data
 10189              		.align	2
 10190              		.type	only_first_time.10399, %object
 10191              		.size	only_first_time.10399, 2
 10192              	only_first_time.10399:
 10193 0004 01       		.byte	1
 10194 0005 01       		.byte	1
 10195              		.bss
 10196              		.align	2
 10197              	error.10398:
 10198 0114 00000000 		.space	6
 10198      0000
 10199 011a 0000     		.align	2
 10200              	v_value.10403:
 10201 011c 00000000 		.space	24
 10201      00000000 
 10201      00000000 
 10201      00000000 
 10201      00000000 
 10202              		.align	2
 10203              	vv_value.10404:
 10204 0134 00000000 		.space	24
 10204      00000000 
 10204      00000000 
 10204      00000000 
 10204      00000000 
 10205              		.align	2
 10206              	vvv_value.10405:
 10207 014c 00000000 		.space	24
 10207      00000000 
 10207      00000000 
 10207      00000000 
 10207      00000000 
 10208              		.align	2
 10209              	one_time_execute.10401:
 10210 0164 0000     		.space	2
 10211 0166 0000     		.align	2
 10212              	safe_startup_motor_activation.10400:
 10213 0168 0000     		.space	2
 10214 016a 0000     		.align	2
 10215              	count_startup_motor.10402:
 10216 016c 00000000 		.space	8
 10216      00000000 
 10217              		.data
 10218 0006 0000     		.align	2
 10219              		.type	detect_power_cycle_prev.10429, %object
 10220              		.size	detect_power_cycle_prev.10429, 4
 10221              	detect_power_cycle_prev.10429:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 234


 10222 0008 FDFFFFFF 		.word	-3
 10223              		.type	first_tension_valid.10428, %object
 10224              		.size	first_tension_valid.10428, 1
 10225              	first_tension_valid.10428:
 10226 000c 01       		.byte	1
 10227              		.bss
 10228              		.align	1
 10229              	count.10430:
 10230 0174 0000     		.space	2
 10231              	idx.10432:
 10232 0176 00       		.space	1
 10233 0177 00       		.align	2
 10234              	v_count.10431:
 10235 0178 00000000 		.space	4
 10236              		.align	1
 10237              	emg_counter_1.10422:
 10238 017c 0000     		.space	2
 10239              		.align	1
 10240              	emg_counter_2.10423:
 10241 017e 0000     		.space	2
 10242              		.align	2
 10243              	UD_mean_value.10426:
 10244 0180 00000000 		.space	4
 10245              		.align	1
 10246              	UD_counter.10424:
 10247 0184 0000     		.space	2
 10248 0186 0000     		.align	2
 10249              	LR_mean_value.10427:
 10250 0188 00000000 		.space	4
 10251              		.align	1
 10252              	LR_counter.10425:
 10253 018c 0000     		.space	2
 10254              	pos_cycle_status.10503:
 10255 018e 00       		.space	1
 10256 018f 00       		.align	2
 10257              	thr_pos.10510:
 10258 0190 00000000 		.space	4
 10259              		.align	2
 10260              	max_pos.10511:
 10261 0194 00000000 		.space	4
 10262              		.data
 10263 000d 000000   		.align	2
 10264              		.type	bin_threshold.10508, %object
 10265              		.size	bin_threshold.10508, 4
 10266              	bin_threshold.10508:
 10267 0010 FA000000 		.word	250
 10268              		.bss
 10269              		.align	2
 10270              	emg_cycle_status.10504:
 10271 0198 0000     		.space	2
 10272 019a 0000     		.align	2
 10273              	motion_status.10505:
 10274 019c 0000     		.space	2
 10275 019e 0000     		.align	2
 10276              	start_emg_pos.10525:
 10277 01a0 00000000 		.space	8
 10277      00000000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 235


 10278              		.align	2
 10279              	emg_excess_status.10506:
 10280 01a8 0000     		.space	2
 10281              		.data
 10282              		.align	2
 10283              		.type	exc_act_thr.10509, %object
 10284              		.size	exc_act_thr.10509, 4
 10285              	exc_act_thr.10509:
 10286 0014 D4030000 		.word	980
 10287              		.bss
 10288 01aa 0000     		.align	2
 10289              	timer_exc_s.10523:
 10290 01ac 00000000 		.space	8
 10290      00000000 
 10291              		.align	2
 10292              	timer_exc_e.10524:
 10293 01b4 00000000 		.space	8
 10293      00000000 
 10294              	rest_cycle_status.10507:
 10295 01bc 00       		.space	1
 10296 01bd 000000   		.align	2
 10297              	timer_value_s.10521:
 10298 01c0 00000000 		.space	4
 10299              		.align	2
 10300              	timer_value_e.10522:
 10301 01c4 00000000 		.space	4
 10302              		.align	2
 10303              	m_addr.10566:
 10304 01c8 00000000 		.space	4
 10305              	row_number.10561:
 10306 01cc 00       		.space	1
 10307              		.text
 10308              	.Letext0:
 10309              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10310              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10311              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10312              		.file 5 "..\\src\\commands.h"
 10313              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10314              		.file 7 "..\\src\\globals.h"
 10315              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10316              		.section	.debug_info,"",%progbits
 10317              	.Ldebug_info0:
 10318 0000 9B1C0000 		.4byte	0x1c9b
 10319 0004 0400     		.2byte	0x4
 10320 0006 00000000 		.4byte	.Ldebug_abbrev0
 10321 000a 04       		.byte	0x4
 10322 000b 01       		.uleb128 0x1
 10323 000c 89090000 		.4byte	.LASF362
 10324 0010 0C       		.byte	0xc
 10325 0011 0B120000 		.4byte	.LASF363
 10326 0015 B1000000 		.4byte	.LASF364
 10327 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10328 001d 00000000 		.4byte	0
 10329 0021 00000000 		.4byte	.Ldebug_line0
 10330 0025 02       		.uleb128 0x2
 10331 0026 01       		.byte	0x1
 10332 0027 06       		.byte	0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 236


 10333 0028 5D040000 		.4byte	.LASF0
 10334 002c 02       		.uleb128 0x2
 10335 002d 01       		.byte	0x1
 10336 002e 08       		.byte	0x8
 10337 002f ED040000 		.4byte	.LASF1
 10338 0033 02       		.uleb128 0x2
 10339 0034 02       		.byte	0x2
 10340 0035 05       		.byte	0x5
 10341 0036 DC0F0000 		.4byte	.LASF2
 10342 003a 02       		.uleb128 0x2
 10343 003b 02       		.byte	0x2
 10344 003c 07       		.byte	0x7
 10345 003d AF110000 		.4byte	.LASF3
 10346 0041 03       		.uleb128 0x3
 10347 0042 A1120000 		.4byte	.LASF9
 10348 0046 02       		.byte	0x2
 10349 0047 3F       		.byte	0x3f
 10350 0048 4C000000 		.4byte	0x4c
 10351 004c 02       		.uleb128 0x2
 10352 004d 04       		.byte	0x4
 10353 004e 05       		.byte	0x5
 10354 004f 3A030000 		.4byte	.LASF4
 10355 0053 02       		.uleb128 0x2
 10356 0054 04       		.byte	0x4
 10357 0055 07       		.byte	0x7
 10358 0056 6D080000 		.4byte	.LASF5
 10359 005a 02       		.uleb128 0x2
 10360 005b 08       		.byte	0x8
 10361 005c 05       		.byte	0x5
 10362 005d 4F0A0000 		.4byte	.LASF6
 10363 0061 02       		.uleb128 0x2
 10364 0062 08       		.byte	0x8
 10365 0063 07       		.byte	0x7
 10366 0064 4F0D0000 		.4byte	.LASF7
 10367 0068 04       		.uleb128 0x4
 10368 0069 04       		.byte	0x4
 10369 006a 05       		.byte	0x5
 10370 006b 696E7400 		.ascii	"int\000"
 10371 006f 02       		.uleb128 0x2
 10372 0070 04       		.byte	0x4
 10373 0071 07       		.byte	0x7
 10374 0072 770B0000 		.4byte	.LASF8
 10375 0076 03       		.uleb128 0x3
 10376 0077 8B000000 		.4byte	.LASF10
 10377 007b 03       		.byte	0x3
 10378 007c 2C       		.byte	0x2c
 10379 007d 41000000 		.4byte	0x41
 10380 0081 05       		.uleb128 0x5
 10381 0082 B60F0000 		.4byte	.LASF11
 10382 0086 04       		.byte	0x4
 10383 0087 E401     		.2byte	0x1e4
 10384 0089 2C000000 		.4byte	0x2c
 10385 008d 05       		.uleb128 0x5
 10386 008e FE120000 		.4byte	.LASF12
 10387 0092 04       		.byte	0x4
 10388 0093 E501     		.2byte	0x1e5
 10389 0095 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 237


 10390 0099 05       		.uleb128 0x5
 10391 009a 23010000 		.4byte	.LASF13
 10392 009e 04       		.byte	0x4
 10393 009f E601     		.2byte	0x1e6
 10394 00a1 53000000 		.4byte	0x53
 10395 00a5 05       		.uleb128 0x5
 10396 00a6 07020000 		.4byte	.LASF14
 10397 00aa 04       		.byte	0x4
 10398 00ab E701     		.2byte	0x1e7
 10399 00ad 25000000 		.4byte	0x25
 10400 00b1 05       		.uleb128 0x5
 10401 00b2 9B100000 		.4byte	.LASF15
 10402 00b6 04       		.byte	0x4
 10403 00b7 E801     		.2byte	0x1e8
 10404 00b9 33000000 		.4byte	0x33
 10405 00bd 05       		.uleb128 0x5
 10406 00be 2E120000 		.4byte	.LASF16
 10407 00c2 04       		.byte	0x4
 10408 00c3 E901     		.2byte	0x1e9
 10409 00c5 4C000000 		.4byte	0x4c
 10410 00c9 05       		.uleb128 0x5
 10411 00ca 05040000 		.4byte	.LASF17
 10412 00ce 04       		.byte	0x4
 10413 00cf EA01     		.2byte	0x1ea
 10414 00d1 D5000000 		.4byte	0xd5
 10415 00d5 02       		.uleb128 0x2
 10416 00d6 04       		.byte	0x4
 10417 00d7 04       		.byte	0x4
 10418 00d8 370B0000 		.4byte	.LASF18
 10419 00dc 02       		.uleb128 0x2
 10420 00dd 08       		.byte	0x8
 10421 00de 04       		.byte	0x4
 10422 00df 920A0000 		.4byte	.LASF19
 10423 00e3 02       		.uleb128 0x2
 10424 00e4 01       		.byte	0x1
 10425 00e5 08       		.byte	0x8
 10426 00e6 88050000 		.4byte	.LASF20
 10427 00ea 05       		.uleb128 0x5
 10428 00eb B00B0000 		.4byte	.LASF21
 10429 00ef 04       		.byte	0x4
 10430 00f0 8602     		.2byte	0x286
 10431 00f2 53000000 		.4byte	0x53
 10432 00f6 05       		.uleb128 0x5
 10433 00f7 1B0E0000 		.4byte	.LASF22
 10434 00fb 04       		.byte	0x4
 10435 00fc 8E02     		.2byte	0x28e
 10436 00fe 02010000 		.4byte	0x102
 10437 0102 06       		.uleb128 0x6
 10438 0103 81000000 		.4byte	0x81
 10439 0107 02       		.uleb128 0x2
 10440 0108 08       		.byte	0x8
 10441 0109 04       		.byte	0x4
 10442 010a 620C0000 		.4byte	.LASF23
 10443 010e 02       		.uleb128 0x2
 10444 010f 04       		.byte	0x4
 10445 0110 07       		.byte	0x7
 10446 0111 10000000 		.4byte	.LASF24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 238


 10447 0115 07       		.uleb128 0x7
 10448 0116 E3000000 		.4byte	0xe3
 10449 011a 25010000 		.4byte	0x125
 10450 011e 08       		.uleb128 0x8
 10451 011f 0E010000 		.4byte	0x10e
 10452 0123 07       		.byte	0x7
 10453 0124 00       		.byte	0
 10454 0125 09       		.uleb128 0x9
 10455 0126 DB120000 		.4byte	.LASF33
 10456 012a 01       		.byte	0x1
 10457 012b 2C000000 		.4byte	0x2c
 10458 012f 05       		.byte	0x5
 10459 0130 94       		.byte	0x94
 10460 0131 66010000 		.4byte	0x166
 10461 0135 0A       		.uleb128 0xa
 10462 0136 E0070000 		.4byte	.LASF25
 10463 013a 00       		.byte	0
 10464 013b 0A       		.uleb128 0xa
 10465 013c B90B0000 		.4byte	.LASF26
 10466 0140 01       		.byte	0x1
 10467 0141 0A       		.uleb128 0xa
 10468 0142 92020000 		.4byte	.LASF27
 10469 0146 02       		.byte	0x2
 10470 0147 0A       		.uleb128 0xa
 10471 0148 D5010000 		.4byte	.LASF28
 10472 014c 03       		.byte	0x3
 10473 014d 0A       		.uleb128 0xa
 10474 014e 8F010000 		.4byte	.LASF29
 10475 0152 04       		.byte	0x4
 10476 0153 0A       		.uleb128 0xa
 10477 0154 53000000 		.4byte	.LASF30
 10478 0158 05       		.byte	0x5
 10479 0159 0A       		.uleb128 0xa
 10480 015a AF080000 		.4byte	.LASF31
 10481 015e 06       		.byte	0x6
 10482 015f 0A       		.uleb128 0xa
 10483 0160 310F0000 		.4byte	.LASF32
 10484 0164 07       		.byte	0x7
 10485 0165 00       		.byte	0
 10486 0166 09       		.uleb128 0x9
 10487 0167 5D0A0000 		.4byte	.LASF34
 10488 016b 01       		.byte	0x1
 10489 016c 2C000000 		.4byte	0x2c
 10490 0170 05       		.byte	0x5
 10491 0171 A8       		.byte	0xa8
 10492 0172 8F010000 		.4byte	0x18f
 10493 0176 0A       		.uleb128 0xa
 10494 0177 93120000 		.4byte	.LASF35
 10495 017b 00       		.byte	0
 10496 017c 0A       		.uleb128 0xa
 10497 017d 4A090000 		.4byte	.LASF36
 10498 0181 01       		.byte	0x1
 10499 0182 0A       		.uleb128 0xa
 10500 0183 520C0000 		.4byte	.LASF37
 10501 0187 02       		.byte	0x2
 10502 0188 0A       		.uleb128 0xa
 10503 0189 50080000 		.4byte	.LASF38
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 239


 10504 018d 03       		.byte	0x3
 10505 018e 00       		.byte	0
 10506 018f 03       		.uleb128 0x3
 10507 0190 5E120000 		.4byte	.LASF39
 10508 0194 06       		.byte	0x6
 10509 0195 7E       		.byte	0x7e
 10510 0196 9A010000 		.4byte	0x19a
 10511 019a 0B       		.uleb128 0xb
 10512 019b 5E120000 		.4byte	.LASF39
 10513 019f 0C       		.uleb128 0xc
 10514 01a0 04       		.byte	0x4
 10515 01a1 8F010000 		.4byte	0x18f
 10516 01a5 0D       		.uleb128 0xd
 10517 01a6 170A0000 		.4byte	.LASF42
 10518 01aa 10       		.byte	0x10
 10519 01ab 07       		.byte	0x7
 10520 01ac F5       		.byte	0xf5
 10521 01ad E2010000 		.4byte	0x1e2
 10522 01b1 0E       		.uleb128 0xe
 10523 01b2 706F7300 		.ascii	"pos\000"
 10524 01b6 07       		.byte	0x7
 10525 01b7 F6       		.byte	0xf6
 10526 01b8 BD000000 		.4byte	0xbd
 10527 01bc 00       		.byte	0
 10528 01bd 0F       		.uleb128 0xf
 10529 01be 2F090000 		.4byte	.LASF40
 10530 01c2 07       		.byte	0x7
 10531 01c3 F7       		.byte	0xf7
 10532 01c4 BD000000 		.4byte	0xbd
 10533 01c8 04       		.byte	0x4
 10534 01c9 0E       		.uleb128 0xe
 10535 01ca 70776D00 		.ascii	"pwm\000"
 10536 01ce 07       		.byte	0x7
 10537 01cf F8       		.byte	0xf8
 10538 01d0 BD000000 		.4byte	0xbd
 10539 01d4 08       		.byte	0x8
 10540 01d5 0F       		.uleb128 0xf
 10541 01d6 B20D0000 		.4byte	.LASF41
 10542 01da 07       		.byte	0x7
 10543 01db F9       		.byte	0xf9
 10544 01dc 81000000 		.4byte	0x81
 10545 01e0 0C       		.byte	0xc
 10546 01e1 00       		.byte	0
 10547 01e2 10       		.uleb128 0x10
 10548 01e3 F80E0000 		.4byte	.LASF43
 10549 01e7 34       		.byte	0x34
 10550 01e8 07       		.byte	0x7
 10551 01e9 0001     		.2byte	0x100
 10552 01eb 4B020000 		.4byte	0x24b
 10553 01ef 11       		.uleb128 0x11
 10554 01f0 706F7300 		.ascii	"pos\000"
 10555 01f4 07       		.byte	0x7
 10556 01f5 0101     		.2byte	0x101
 10557 01f7 4B020000 		.4byte	0x24b
 10558 01fb 00       		.byte	0
 10559 01fc 12       		.uleb128 0x12
 10560 01fd 2F090000 		.4byte	.LASF40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 240


 10561 0201 07       		.byte	0x7
 10562 0202 0201     		.2byte	0x102
 10563 0204 BD000000 		.4byte	0xbd
 10564 0208 0C       		.byte	0xc
 10565 0209 12       		.uleb128 0x12
 10566 020a DE100000 		.4byte	.LASF44
 10567 020e 07       		.byte	0x7
 10568 020f 0301     		.2byte	0x103
 10569 0211 BD000000 		.4byte	0xbd
 10570 0215 10       		.byte	0x10
 10571 0216 12       		.uleb128 0x12
 10572 0217 A5080000 		.4byte	.LASF45
 10573 021b 07       		.byte	0x7
 10574 021c 0401     		.2byte	0x104
 10575 021e BD000000 		.4byte	0xbd
 10576 0222 14       		.byte	0x14
 10577 0223 11       		.uleb128 0x11
 10578 0224 726F7400 		.ascii	"rot\000"
 10579 0228 07       		.byte	0x7
 10580 0229 0501     		.2byte	0x105
 10581 022b 5B020000 		.4byte	0x25b
 10582 022f 18       		.byte	0x18
 10583 0230 11       		.uleb128 0x11
 10584 0231 76656C00 		.ascii	"vel\000"
 10585 0235 07       		.byte	0x7
 10586 0236 0601     		.2byte	0x106
 10587 0238 4B020000 		.4byte	0x24b
 10588 023c 1C       		.byte	0x1c
 10589 023d 11       		.uleb128 0x11
 10590 023e 61636300 		.ascii	"acc\000"
 10591 0242 07       		.byte	0x7
 10592 0243 0701     		.2byte	0x107
 10593 0245 4B020000 		.4byte	0x24b
 10594 0249 28       		.byte	0x28
 10595 024a 00       		.byte	0
 10596 024b 07       		.uleb128 0x7
 10597 024c BD000000 		.4byte	0xbd
 10598 0250 5B020000 		.4byte	0x25b
 10599 0254 08       		.uleb128 0x8
 10600 0255 0E010000 		.4byte	0x10e
 10601 0259 02       		.byte	0x2
 10602 025a 00       		.byte	0
 10603 025b 07       		.uleb128 0x7
 10604 025c A5000000 		.4byte	0xa5
 10605 0260 6B020000 		.4byte	0x26b
 10606 0264 08       		.uleb128 0x8
 10607 0265 0E010000 		.4byte	0x10e
 10608 0269 02       		.byte	0x2
 10609 026a 00       		.byte	0
 10610 026b 10       		.uleb128 0x10
 10611 026c 4C0B0000 		.4byte	.LASF46
 10612 0270 28       		.byte	0x28
 10613 0271 07       		.byte	0x7
 10614 0272 0A01     		.2byte	0x10a
 10615 0274 A0020000 		.4byte	0x2a0
 10616 0278 11       		.uleb128 0x11
 10617 0279 656D6700 		.ascii	"emg\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 241


 10618 027d 07       		.byte	0x7
 10619 027e 0B01     		.2byte	0x10b
 10620 0280 A0020000 		.4byte	0x2a0
 10621 0284 00       		.byte	0
 10622 0285 12       		.uleb128 0x12
 10623 0286 030C0000 		.4byte	.LASF47
 10624 028a 07       		.byte	0x7
 10625 028b 0C01     		.2byte	0x10c
 10626 028d B0020000 		.4byte	0x2b0
 10627 0291 08       		.byte	0x8
 10628 0292 12       		.uleb128 0x12
 10629 0293 FB0F0000 		.4byte	.LASF48
 10630 0297 07       		.byte	0x7
 10631 0298 0D01     		.2byte	0x10d
 10632 029a A0020000 		.4byte	0x2a0
 10633 029e 20       		.byte	0x20
 10634 029f 00       		.byte	0
 10635 02a0 07       		.uleb128 0x7
 10636 02a1 BD000000 		.4byte	0xbd
 10637 02a5 B0020000 		.4byte	0x2b0
 10638 02a9 08       		.uleb128 0x8
 10639 02aa 0E010000 		.4byte	0x10e
 10640 02ae 01       		.byte	0x1
 10641 02af 00       		.byte	0
 10642 02b0 07       		.uleb128 0x7
 10643 02b1 BD000000 		.4byte	0xbd
 10644 02b5 C0020000 		.4byte	0x2c0
 10645 02b9 08       		.uleb128 0x8
 10646 02ba 0E010000 		.4byte	0x10e
 10647 02be 05       		.byte	0x5
 10648 02bf 00       		.byte	0
 10649 02c0 10       		.uleb128 0x10
 10650 02c1 21060000 		.4byte	.LASF49
 10651 02c5 04       		.byte	0x4
 10652 02c6 07       		.byte	0x7
 10653 02c7 1001     		.2byte	0x110
 10654 02c9 DB020000 		.4byte	0x2db
 10655 02cd 12       		.uleb128 0x12
 10656 02ce 7F050000 		.4byte	.LASF50
 10657 02d2 07       		.byte	0x7
 10658 02d3 1101     		.2byte	0x111
 10659 02d5 D5000000 		.4byte	0xd5
 10660 02d9 00       		.byte	0
 10661 02da 00       		.byte	0
 10662 02db 10       		.uleb128 0x10
 10663 02dc A9000000 		.4byte	.LASF51
 10664 02e0 86       		.byte	0x86
 10665 02e1 07       		.byte	0x7
 10666 02e2 1801     		.2byte	0x118
 10667 02e4 1D030000 		.4byte	0x31d
 10668 02e8 12       		.uleb128 0x12
 10669 02e9 EA060000 		.4byte	.LASF52
 10670 02ed 07       		.byte	0x7
 10671 02ee 1901     		.2byte	0x119
 10672 02f0 1D030000 		.4byte	0x31d
 10673 02f4 00       		.byte	0
 10674 02f5 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 242


 10675 02f6 950D0000 		.4byte	.LASF53
 10676 02fa 07       		.byte	0x7
 10677 02fb 1A01     		.2byte	0x11a
 10678 02fd B1000000 		.4byte	0xb1
 10679 0301 80       		.byte	0x80
 10680 0302 11       		.uleb128 0x11
 10681 0303 696E6400 		.ascii	"ind\000"
 10682 0307 07       		.byte	0x7
 10683 0308 1B01     		.2byte	0x11b
 10684 030a B1000000 		.4byte	0xb1
 10685 030e 82       		.byte	0x82
 10686 030f 12       		.uleb128 0x12
 10687 0310 65020000 		.4byte	.LASF54
 10688 0314 07       		.byte	0x7
 10689 0315 1C01     		.2byte	0x11c
 10690 0317 81000000 		.4byte	0x81
 10691 031b 84       		.byte	0x84
 10692 031c 00       		.byte	0
 10693 031d 07       		.uleb128 0x7
 10694 031e 81000000 		.4byte	0x81
 10695 0322 2D030000 		.4byte	0x32d
 10696 0326 08       		.uleb128 0x8
 10697 0327 0E010000 		.4byte	0x10e
 10698 032b 7F       		.byte	0x7f
 10699 032c 00       		.byte	0
 10700 032d 10       		.uleb128 0x10
 10701 032e E3030000 		.4byte	.LASF55
 10702 0332 70       		.byte	0x70
 10703 0333 07       		.byte	0x7
 10704 0334 2501     		.2byte	0x125
 10705 0336 CA030000 		.4byte	0x3ca
 10706 033a 12       		.uleb128 0x12
 10707 033b 00000000 		.4byte	.LASF56
 10708 033f 07       		.byte	0x7
 10709 0340 2601     		.2byte	0x126
 10710 0342 CA030000 		.4byte	0x3ca
 10711 0346 00       		.byte	0
 10712 0347 12       		.uleb128 0x12
 10713 0348 22020000 		.4byte	.LASF57
 10714 034c 07       		.byte	0x7
 10715 034d 2701     		.2byte	0x127
 10716 034f DA030000 		.4byte	0x3da
 10717 0353 08       		.byte	0x8
 10718 0354 12       		.uleb128 0x12
 10719 0355 450C0000 		.4byte	.LASF58
 10720 0359 07       		.byte	0x7
 10721 035a 2801     		.2byte	0x128
 10722 035c EA030000 		.4byte	0x3ea
 10723 0360 30       		.byte	0x30
 10724 0361 12       		.uleb128 0x12
 10725 0362 B9010000 		.4byte	.LASF59
 10726 0366 07       		.byte	0x7
 10727 0367 2901     		.2byte	0x129
 10728 0369 99000000 		.4byte	0x99
 10729 036d 40       		.byte	0x40
 10730 036e 12       		.uleb128 0x12
 10731 036f AB120000 		.4byte	.LASF60
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 243


 10732 0373 07       		.byte	0x7
 10733 0374 2A01     		.2byte	0x12a
 10734 0376 99000000 		.4byte	0x99
 10735 037a 44       		.byte	0x44
 10736 037b 12       		.uleb128 0x12
 10737 037c 15010000 		.4byte	.LASF61
 10738 0380 07       		.byte	0x7
 10739 0381 2B01     		.2byte	0x12b
 10740 0383 99000000 		.4byte	0x99
 10741 0387 48       		.byte	0x48
 10742 0388 12       		.uleb128 0x12
 10743 0389 C3080000 		.4byte	.LASF62
 10744 038d 07       		.byte	0x7
 10745 038e 2C01     		.2byte	0x12c
 10746 0390 99000000 		.4byte	0x99
 10747 0394 4C       		.byte	0x4c
 10748 0395 12       		.uleb128 0x12
 10749 0396 19000000 		.4byte	.LASF63
 10750 039a 07       		.byte	0x7
 10751 039b 2D01     		.2byte	0x12d
 10752 039d 99000000 		.4byte	0x99
 10753 03a1 50       		.byte	0x50
 10754 03a2 12       		.uleb128 0x12
 10755 03a3 CC020000 		.4byte	.LASF64
 10756 03a7 07       		.byte	0x7
 10757 03a8 2E01     		.2byte	0x12e
 10758 03aa CA030000 		.4byte	0x3ca
 10759 03ae 54       		.byte	0x54
 10760 03af 12       		.uleb128 0x12
 10761 03b0 9B0C0000 		.4byte	.LASF65
 10762 03b4 07       		.byte	0x7
 10763 03b5 2F01     		.2byte	0x12f
 10764 03b7 CA030000 		.4byte	0x3ca
 10765 03bb 5C       		.byte	0x5c
 10766 03bc 12       		.uleb128 0x12
 10767 03bd B0030000 		.4byte	.LASF66
 10768 03c1 07       		.byte	0x7
 10769 03c2 3001     		.2byte	0x130
 10770 03c4 FA030000 		.4byte	0x3fa
 10771 03c8 64       		.byte	0x64
 10772 03c9 00       		.byte	0
 10773 03ca 07       		.uleb128 0x7
 10774 03cb 99000000 		.4byte	0x99
 10775 03cf DA030000 		.4byte	0x3da
 10776 03d3 08       		.uleb128 0x8
 10777 03d4 0E010000 		.4byte	0x10e
 10778 03d8 01       		.byte	0x1
 10779 03d9 00       		.byte	0
 10780 03da 07       		.uleb128 0x7
 10781 03db 99000000 		.4byte	0x99
 10782 03df EA030000 		.4byte	0x3ea
 10783 03e3 08       		.uleb128 0x8
 10784 03e4 0E010000 		.4byte	0x10e
 10785 03e8 09       		.byte	0x9
 10786 03e9 00       		.byte	0
 10787 03ea 07       		.uleb128 0x7
 10788 03eb 99000000 		.4byte	0x99
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 244


 10789 03ef FA030000 		.4byte	0x3fa
 10790 03f3 08       		.uleb128 0x8
 10791 03f4 0E010000 		.4byte	0x10e
 10792 03f8 03       		.byte	0x3
 10793 03f9 00       		.byte	0
 10794 03fa 07       		.uleb128 0x7
 10795 03fb 81000000 		.4byte	0x81
 10796 03ff 0A040000 		.4byte	0x40a
 10797 0403 08       		.uleb128 0x8
 10798 0404 0E010000 		.4byte	0x10e
 10799 0408 0B       		.byte	0xb
 10800 0409 00       		.byte	0
 10801 040a 10       		.uleb128 0x10
 10802 040b 88020000 		.4byte	.LASF67
 10803 040f 10       		.byte	0x10
 10804 0410 07       		.byte	0x7
 10805 0411 3701     		.2byte	0x137
 10806 0413 99040000 		.4byte	0x499
 10807 0417 11       		.uleb128 0x11
 10808 0418 696400   		.ascii	"id\000"
 10809 041b 07       		.byte	0x7
 10810 041c 3801     		.2byte	0x138
 10811 041e 81000000 		.4byte	0x81
 10812 0422 00       		.byte	0
 10813 0423 12       		.uleb128 0x12
 10814 0424 16100000 		.4byte	.LASF68
 10815 0428 07       		.byte	0x7
 10816 0429 3901     		.2byte	0x139
 10817 042b 99040000 		.4byte	0x499
 10818 042f 01       		.byte	0x1
 10819 0430 12       		.uleb128 0x12
 10820 0431 52100000 		.4byte	.LASF69
 10821 0435 07       		.byte	0x7
 10822 0436 3A01     		.2byte	0x13a
 10823 0438 99040000 		.4byte	0x499
 10824 043c 04       		.byte	0x4
 10825 043d 12       		.uleb128 0x12
 10826 043e 47050000 		.4byte	.LASF70
 10827 0442 07       		.byte	0x7
 10828 0443 3B01     		.2byte	0x13b
 10829 0445 81000000 		.4byte	0x81
 10830 0449 07       		.byte	0x7
 10831 044a 12       		.uleb128 0x12
 10832 044b 6C030000 		.4byte	.LASF71
 10833 044f 07       		.byte	0x7
 10834 0450 3C01     		.2byte	0x13c
 10835 0452 81000000 		.4byte	0x81
 10836 0456 08       		.byte	0x8
 10837 0457 12       		.uleb128 0x12
 10838 0458 AE020000 		.4byte	.LASF72
 10839 045c 07       		.byte	0x7
 10840 045d 3D01     		.2byte	0x13d
 10841 045f 81000000 		.4byte	0x81
 10842 0463 09       		.byte	0x9
 10843 0464 12       		.uleb128 0x12
 10844 0465 83110000 		.4byte	.LASF73
 10845 0469 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 245


 10846 046a 3E01     		.2byte	0x13e
 10847 046c 81000000 		.4byte	0x81
 10848 0470 0A       		.byte	0xa
 10849 0471 12       		.uleb128 0x12
 10850 0472 17110000 		.4byte	.LASF74
 10851 0476 07       		.byte	0x7
 10852 0477 3F01     		.2byte	0x13f
 10853 0479 81000000 		.4byte	0x81
 10854 047d 0B       		.byte	0xb
 10855 047e 12       		.uleb128 0x12
 10856 047f 8A0E0000 		.4byte	.LASF75
 10857 0483 07       		.byte	0x7
 10858 0484 4001     		.2byte	0x140
 10859 0486 81000000 		.4byte	0x81
 10860 048a 0C       		.byte	0xc
 10861 048b 12       		.uleb128 0x12
 10862 048c B0030000 		.4byte	.LASF66
 10863 0490 07       		.byte	0x7
 10864 0491 4101     		.2byte	0x141
 10865 0493 99040000 		.4byte	0x499
 10866 0497 0D       		.byte	0xd
 10867 0498 00       		.byte	0
 10868 0499 07       		.uleb128 0x7
 10869 049a 81000000 		.4byte	0x81
 10870 049e A9040000 		.4byte	0x4a9
 10871 04a2 08       		.uleb128 0x8
 10872 04a3 0E010000 		.4byte	0x10e
 10873 04a7 02       		.byte	0x2
 10874 04a8 00       		.byte	0
 10875 04a9 10       		.uleb128 0x10
 10876 04aa 49120000 		.4byte	.LASF76
 10877 04ae 70       		.byte	0x70
 10878 04af 07       		.byte	0x7
 10879 04b0 4801     		.2byte	0x148
 10880 04b2 23060000 		.4byte	0x623
 10881 04b6 11       		.uleb128 0x11
 10882 04b7 6B5F7000 		.ascii	"k_p\000"
 10883 04bb 07       		.byte	0x7
 10884 04bc 4901     		.2byte	0x149
 10885 04be BD000000 		.4byte	0xbd
 10886 04c2 00       		.byte	0
 10887 04c3 11       		.uleb128 0x11
 10888 04c4 6B5F6900 		.ascii	"k_i\000"
 10889 04c8 07       		.byte	0x7
 10890 04c9 4A01     		.2byte	0x14a
 10891 04cb BD000000 		.4byte	0xbd
 10892 04cf 04       		.byte	0x4
 10893 04d0 11       		.uleb128 0x11
 10894 04d1 6B5F6400 		.ascii	"k_d\000"
 10895 04d5 07       		.byte	0x7
 10896 04d6 4B01     		.2byte	0x14b
 10897 04d8 BD000000 		.4byte	0xbd
 10898 04dc 08       		.byte	0x8
 10899 04dd 12       		.uleb128 0x12
 10900 04de EE0D0000 		.4byte	.LASF77
 10901 04e2 07       		.byte	0x7
 10902 04e3 4C01     		.2byte	0x14c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 246


 10903 04e5 BD000000 		.4byte	0xbd
 10904 04e9 0C       		.byte	0xc
 10905 04ea 12       		.uleb128 0x12
 10906 04eb 33060000 		.4byte	.LASF78
 10907 04ef 07       		.byte	0x7
 10908 04f0 4D01     		.2byte	0x14d
 10909 04f2 BD000000 		.4byte	0xbd
 10910 04f6 10       		.byte	0x10
 10911 04f7 12       		.uleb128 0x12
 10912 04f8 04060000 		.4byte	.LASF79
 10913 04fc 07       		.byte	0x7
 10914 04fd 4E01     		.2byte	0x14e
 10915 04ff BD000000 		.4byte	0xbd
 10916 0503 14       		.byte	0x14
 10917 0504 12       		.uleb128 0x12
 10918 0505 D7100000 		.4byte	.LASF80
 10919 0509 07       		.byte	0x7
 10920 050a 4F01     		.2byte	0x14f
 10921 050c BD000000 		.4byte	0xbd
 10922 0510 18       		.byte	0x18
 10923 0511 12       		.uleb128 0x12
 10924 0512 E3060000 		.4byte	.LASF81
 10925 0516 07       		.byte	0x7
 10926 0517 5001     		.2byte	0x150
 10927 0519 BD000000 		.4byte	0xbd
 10928 051d 1C       		.byte	0x1c
 10929 051e 12       		.uleb128 0x12
 10930 051f E60F0000 		.4byte	.LASF82
 10931 0523 07       		.byte	0x7
 10932 0524 5101     		.2byte	0x151
 10933 0526 BD000000 		.4byte	0xbd
 10934 052a 20       		.byte	0x20
 10935 052b 12       		.uleb128 0x12
 10936 052c F1060000 		.4byte	.LASF83
 10937 0530 07       		.byte	0x7
 10938 0531 5201     		.2byte	0x152
 10939 0533 BD000000 		.4byte	0xbd
 10940 0537 24       		.byte	0x24
 10941 0538 12       		.uleb128 0x12
 10942 0539 39080000 		.4byte	.LASF84
 10943 053d 07       		.byte	0x7
 10944 053e 5301     		.2byte	0x153
 10945 0540 BD000000 		.4byte	0xbd
 10946 0544 28       		.byte	0x28
 10947 0545 12       		.uleb128 0x12
 10948 0546 23130000 		.4byte	.LASF85
 10949 054a 07       		.byte	0x7
 10950 054b 5401     		.2byte	0x154
 10951 054d BD000000 		.4byte	0xbd
 10952 0551 2C       		.byte	0x2c
 10953 0552 12       		.uleb128 0x12
 10954 0553 D3080000 		.4byte	.LASF86
 10955 0557 07       		.byte	0x7
 10956 0558 5501     		.2byte	0x155
 10957 055a 81000000 		.4byte	0x81
 10958 055e 30       		.byte	0x30
 10959 055f 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 247


 10960 0560 C0100000 		.4byte	.LASF87
 10961 0564 07       		.byte	0x7
 10962 0565 5601     		.2byte	0x156
 10963 0567 81000000 		.4byte	0x81
 10964 056b 31       		.byte	0x31
 10965 056c 12       		.uleb128 0x12
 10966 056d 000E0000 		.4byte	.LASF88
 10967 0571 07       		.byte	0x7
 10968 0572 5701     		.2byte	0x157
 10969 0574 81000000 		.4byte	0x81
 10970 0578 32       		.byte	0x32
 10971 0579 12       		.uleb128 0x12
 10972 057a 66120000 		.4byte	.LASF89
 10973 057e 07       		.byte	0x7
 10974 057f 5801     		.2byte	0x158
 10975 0581 81000000 		.4byte	0x81
 10976 0585 33       		.byte	0x33
 10977 0586 12       		.uleb128 0x12
 10978 0587 3A010000 		.4byte	.LASF90
 10979 058b 07       		.byte	0x7
 10980 058c 5901     		.2byte	0x159
 10981 058e BD000000 		.4byte	0xbd
 10982 0592 34       		.byte	0x34
 10983 0593 12       		.uleb128 0x12
 10984 0594 63060000 		.4byte	.LASF91
 10985 0598 07       		.byte	0x7
 10986 0599 5A01     		.2byte	0x15a
 10987 059b BD000000 		.4byte	0xbd
 10988 059f 38       		.byte	0x38
 10989 05a0 12       		.uleb128 0x12
 10990 05a1 080B0000 		.4byte	.LASF92
 10991 05a5 07       		.byte	0x7
 10992 05a6 5B01     		.2byte	0x15b
 10993 05a8 BD000000 		.4byte	0xbd
 10994 05ac 3C       		.byte	0x3c
 10995 05ad 12       		.uleb128 0x12
 10996 05ae A5050000 		.4byte	.LASF93
 10997 05b2 07       		.byte	0x7
 10998 05b3 5C01     		.2byte	0x15c
 10999 05b5 BD000000 		.4byte	0xbd
 11000 05b9 40       		.byte	0x40
 11001 05ba 12       		.uleb128 0x12
 11002 05bb A3010000 		.4byte	.LASF94
 11003 05bf 07       		.byte	0x7
 11004 05c0 5D01     		.2byte	0x15d
 11005 05c2 23060000 		.4byte	0x623
 11006 05c6 44       		.byte	0x44
 11007 05c7 12       		.uleb128 0x12
 11008 05c8 CD120000 		.4byte	.LASF95
 11009 05cc 07       		.byte	0x7
 11010 05cd 5E01     		.2byte	0x15e
 11011 05cf B1000000 		.4byte	0xb1
 11012 05d3 5C       		.byte	0x5c
 11013 05d4 12       		.uleb128 0x12
 11014 05d5 3F090000 		.4byte	.LASF96
 11015 05d9 07       		.byte	0x7
 11016 05da 5F01     		.2byte	0x15f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 248


 11017 05dc 81000000 		.4byte	0x81
 11018 05e0 5E       		.byte	0x5e
 11019 05e1 12       		.uleb128 0x12
 11020 05e2 A30B0000 		.4byte	.LASF97
 11021 05e6 07       		.byte	0x7
 11022 05e7 6001     		.2byte	0x160
 11023 05e9 81000000 		.4byte	0x81
 11024 05ed 5F       		.byte	0x5f
 11025 05ee 12       		.uleb128 0x12
 11026 05ef 52050000 		.4byte	.LASF98
 11027 05f3 07       		.byte	0x7
 11028 05f4 6101     		.2byte	0x161
 11029 05f6 81000000 		.4byte	0x81
 11030 05fa 60       		.byte	0x60
 11031 05fb 12       		.uleb128 0x12
 11032 05fc F3050000 		.4byte	.LASF99
 11033 0600 07       		.byte	0x7
 11034 0601 6201     		.2byte	0x162
 11035 0603 81000000 		.4byte	0x81
 11036 0607 61       		.byte	0x61
 11037 0608 12       		.uleb128 0x12
 11038 0609 FB040000 		.4byte	.LASF100
 11039 060d 07       		.byte	0x7
 11040 060e 6301     		.2byte	0x163
 11041 0610 81000000 		.4byte	0x81
 11042 0614 62       		.byte	0x62
 11043 0615 12       		.uleb128 0x12
 11044 0616 B0030000 		.4byte	.LASF66
 11045 061a 07       		.byte	0x7
 11046 061b 6401     		.2byte	0x164
 11047 061d 33060000 		.4byte	0x633
 11048 0621 63       		.byte	0x63
 11049 0622 00       		.byte	0
 11050 0623 07       		.uleb128 0x7
 11051 0624 D5000000 		.4byte	0xd5
 11052 0628 33060000 		.4byte	0x633
 11053 062c 08       		.uleb128 0x8
 11054 062d 0E010000 		.4byte	0x10e
 11055 0631 05       		.byte	0x5
 11056 0632 00       		.byte	0
 11057 0633 07       		.uleb128 0x7
 11058 0634 81000000 		.4byte	0x81
 11059 0638 43060000 		.4byte	0x643
 11060 063c 08       		.uleb128 0x8
 11061 063d 0E010000 		.4byte	0x10e
 11062 0641 0C       		.byte	0xc
 11063 0642 00       		.byte	0
 11064 0643 10       		.uleb128 0x10
 11065 0644 C2110000 		.4byte	.LASF101
 11066 0648 30       		.byte	0x30
 11067 0649 07       		.byte	0x7
 11068 064a 6B01     		.2byte	0x16b
 11069 064c C6060000 		.4byte	0x6c6
 11070 0650 12       		.uleb128 0x12
 11071 0651 C20A0000 		.4byte	.LASF102
 11072 0655 07       		.byte	0x7
 11073 0656 6C01     		.2byte	0x16c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 249


 11074 0658 C6060000 		.4byte	0x6c6
 11075 065c 00       		.byte	0
 11076 065d 11       		.uleb128 0x11
 11077 065e 72657300 		.ascii	"res\000"
 11078 0662 07       		.byte	0x7
 11079 0663 6D01     		.2byte	0x16d
 11080 0665 99040000 		.4byte	0x499
 11081 0669 05       		.byte	0x5
 11082 066a 12       		.uleb128 0x12
 11083 066b FF080000 		.4byte	.LASF103
 11084 066f 07       		.byte	0x7
 11085 0670 6E01     		.2byte	0x16e
 11086 0672 4B020000 		.4byte	0x24b
 11087 0676 08       		.byte	0x8
 11088 0677 12       		.uleb128 0x12
 11089 0678 2C060000 		.4byte	.LASF104
 11090 067c 07       		.byte	0x7
 11091 067d 6F01     		.2byte	0x16f
 11092 067f D6060000 		.4byte	0x6d6
 11093 0683 14       		.byte	0x14
 11094 0684 12       		.uleb128 0x12
 11095 0685 E60C0000 		.4byte	.LASF105
 11096 0689 07       		.byte	0x7
 11097 068a 7001     		.2byte	0x170
 11098 068c 81000000 		.4byte	0x81
 11099 0690 20       		.byte	0x20
 11100 0691 12       		.uleb128 0x12
 11101 0692 6B020000 		.4byte	.LASF106
 11102 0696 07       		.byte	0x7
 11103 0697 7101     		.2byte	0x171
 11104 0699 99040000 		.4byte	0x499
 11105 069d 21       		.byte	0x21
 11106 069e 12       		.uleb128 0x12
 11107 069f 320C0000 		.4byte	.LASF107
 11108 06a3 07       		.byte	0x7
 11109 06a4 7201     		.2byte	0x172
 11110 06a6 A5000000 		.4byte	0xa5
 11111 06aa 24       		.byte	0x24
 11112 06ab 12       		.uleb128 0x12
 11113 06ac C90E0000 		.4byte	.LASF108
 11114 06b0 07       		.byte	0x7
 11115 06b1 7301     		.2byte	0x173
 11116 06b3 5B020000 		.4byte	0x25b
 11117 06b7 25       		.byte	0x25
 11118 06b8 12       		.uleb128 0x12
 11119 06b9 B0030000 		.4byte	.LASF66
 11120 06bd 07       		.byte	0x7
 11121 06be 7401     		.2byte	0x174
 11122 06c0 E6060000 		.4byte	0x6e6
 11123 06c4 28       		.byte	0x28
 11124 06c5 00       		.byte	0
 11125 06c6 07       		.uleb128 0x7
 11126 06c7 81000000 		.4byte	0x81
 11127 06cb D6060000 		.4byte	0x6d6
 11128 06cf 08       		.uleb128 0x8
 11129 06d0 0E010000 		.4byte	0x10e
 11130 06d4 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 250


 11131 06d5 00       		.byte	0
 11132 06d6 07       		.uleb128 0x7
 11133 06d7 C9000000 		.4byte	0xc9
 11134 06db E6060000 		.4byte	0x6e6
 11135 06df 08       		.uleb128 0x8
 11136 06e0 0E010000 		.4byte	0x10e
 11137 06e4 02       		.byte	0x2
 11138 06e5 00       		.byte	0
 11139 06e6 07       		.uleb128 0x7
 11140 06e7 81000000 		.4byte	0x81
 11141 06eb F6060000 		.4byte	0x6f6
 11142 06ef 08       		.uleb128 0x8
 11143 06f0 0E010000 		.4byte	0x10e
 11144 06f4 07       		.byte	0x7
 11145 06f5 00       		.byte	0
 11146 06f6 10       		.uleb128 0x10
 11147 06f7 1B020000 		.4byte	.LASF109
 11148 06fb 10       		.byte	0x10
 11149 06fc 07       		.byte	0x7
 11150 06fd 7B01     		.2byte	0x17b
 11151 06ff 45070000 		.4byte	0x745
 11152 0703 12       		.uleb128 0x12
 11153 0704 110C0000 		.4byte	.LASF110
 11154 0708 07       		.byte	0x7
 11155 0709 7C01     		.2byte	0x17c
 11156 070b 45070000 		.4byte	0x745
 11157 070f 00       		.byte	0
 11158 0710 12       		.uleb128 0x12
 11159 0711 BF120000 		.4byte	.LASF111
 11160 0715 07       		.byte	0x7
 11161 0716 7D01     		.2byte	0x17d
 11162 0718 CA030000 		.4byte	0x3ca
 11163 071c 04       		.byte	0x4
 11164 071d 12       		.uleb128 0x12
 11165 071e 79060000 		.4byte	.LASF112
 11166 0722 07       		.byte	0x7
 11167 0723 7E01     		.2byte	0x17e
 11168 0725 55070000 		.4byte	0x755
 11169 0729 0C       		.byte	0xc
 11170 072a 12       		.uleb128 0x12
 11171 072b E30E0000 		.4byte	.LASF113
 11172 072f 07       		.byte	0x7
 11173 0730 7F01     		.2byte	0x17f
 11174 0732 81000000 		.4byte	0x81
 11175 0736 0E       		.byte	0xe
 11176 0737 12       		.uleb128 0x12
 11177 0738 AA040000 		.4byte	.LASF114
 11178 073c 07       		.byte	0x7
 11179 073d 8001     		.2byte	0x180
 11180 073f 81000000 		.4byte	0x81
 11181 0743 0F       		.byte	0xf
 11182 0744 00       		.byte	0
 11183 0745 07       		.uleb128 0x7
 11184 0746 8D000000 		.4byte	0x8d
 11185 074a 55070000 		.4byte	0x755
 11186 074e 08       		.uleb128 0x8
 11187 074f 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 251


 11188 0753 01       		.byte	0x1
 11189 0754 00       		.byte	0
 11190 0755 07       		.uleb128 0x7
 11191 0756 81000000 		.4byte	0x81
 11192 075a 65070000 		.4byte	0x765
 11193 075e 08       		.uleb128 0x8
 11194 075f 0E010000 		.4byte	0x10e
 11195 0763 01       		.byte	0x1
 11196 0764 00       		.byte	0
 11197 0765 10       		.uleb128 0x10
 11198 0766 CD0B0000 		.4byte	.LASF115
 11199 076a 20       		.byte	0x20
 11200 076b 07       		.byte	0x7
 11201 076c 8701     		.2byte	0x187
 11202 076e A7070000 		.4byte	0x7a7
 11203 0772 12       		.uleb128 0x12
 11204 0773 F3020000 		.4byte	.LASF116
 11205 0777 07       		.byte	0x7
 11206 0778 8801     		.2byte	0x188
 11207 077a 81000000 		.4byte	0x81
 11208 077e 00       		.byte	0
 11209 077f 12       		.uleb128 0x12
 11210 0780 A0110000 		.4byte	.LASF117
 11211 0784 07       		.byte	0x7
 11212 0785 8901     		.2byte	0x189
 11213 0787 81000000 		.4byte	0x81
 11214 078b 01       		.byte	0x1
 11215 078c 12       		.uleb128 0x12
 11216 078d 3D0B0000 		.4byte	.LASF118
 11217 0791 07       		.byte	0x7
 11218 0792 8A01     		.2byte	0x18a
 11219 0794 A7070000 		.4byte	0x7a7
 11220 0798 02       		.byte	0x2
 11221 0799 12       		.uleb128 0x12
 11222 079a B0030000 		.4byte	.LASF66
 11223 079e 07       		.byte	0x7
 11224 079f 8B01     		.2byte	0x18b
 11225 07a1 C6060000 		.4byte	0x6c6
 11226 07a5 1B       		.byte	0x1b
 11227 07a6 00       		.byte	0
 11228 07a7 07       		.uleb128 0x7
 11229 07a8 81000000 		.4byte	0x81
 11230 07ac BD070000 		.4byte	0x7bd
 11231 07b0 08       		.uleb128 0x8
 11232 07b1 0E010000 		.4byte	0x10e
 11233 07b5 04       		.byte	0x4
 11234 07b6 08       		.uleb128 0x8
 11235 07b7 0E010000 		.4byte	0x10e
 11236 07bb 04       		.byte	0x4
 11237 07bc 00       		.byte	0
 11238 07bd 10       		.uleb128 0x10
 11239 07be D60E0000 		.4byte	.LASF119
 11240 07c2 20       		.byte	0x20
 11241 07c3 07       		.byte	0x7
 11242 07c4 9201     		.2byte	0x192
 11243 07c6 19080000 		.4byte	0x819
 11244 07ca 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 252


 11245 07cb DC0C0000 		.4byte	.LASF120
 11246 07cf 07       		.byte	0x7
 11247 07d0 9301     		.2byte	0x193
 11248 07d2 19080000 		.4byte	0x819
 11249 07d6 00       		.byte	0
 11250 07d7 12       		.uleb128 0x12
 11251 07d8 A1100000 		.4byte	.LASF121
 11252 07dc 07       		.byte	0x7
 11253 07dd 9401     		.2byte	0x194
 11254 07df 81000000 		.4byte	0x81
 11255 07e3 06       		.byte	0x6
 11256 07e4 12       		.uleb128 0x12
 11257 07e5 6B000000 		.4byte	.LASF122
 11258 07e9 07       		.byte	0x7
 11259 07ea 9501     		.2byte	0x195
 11260 07ec 81000000 		.4byte	0x81
 11261 07f0 07       		.byte	0x7
 11262 07f1 12       		.uleb128 0x12
 11263 07f2 B8060000 		.4byte	.LASF123
 11264 07f6 07       		.byte	0x7
 11265 07f7 9601     		.2byte	0x196
 11266 07f9 FA030000 		.4byte	0x3fa
 11267 07fd 08       		.byte	0x8
 11268 07fe 12       		.uleb128 0x12
 11269 07ff 01030000 		.4byte	.LASF124
 11270 0803 07       		.byte	0x7
 11271 0804 9701     		.2byte	0x197
 11272 0806 81000000 		.4byte	0x81
 11273 080a 14       		.byte	0x14
 11274 080b 12       		.uleb128 0x12
 11275 080c B0030000 		.4byte	.LASF66
 11276 0810 07       		.byte	0x7
 11277 0811 9801     		.2byte	0x198
 11278 0813 29080000 		.4byte	0x829
 11279 0817 15       		.byte	0x15
 11280 0818 00       		.byte	0
 11281 0819 07       		.uleb128 0x7
 11282 081a 81000000 		.4byte	0x81
 11283 081e 29080000 		.4byte	0x829
 11284 0822 08       		.uleb128 0x8
 11285 0823 0E010000 		.4byte	0x10e
 11286 0827 05       		.byte	0x5
 11287 0828 00       		.byte	0
 11288 0829 07       		.uleb128 0x7
 11289 082a 81000000 		.4byte	0x81
 11290 082e 39080000 		.4byte	0x839
 11291 0832 08       		.uleb128 0x8
 11292 0833 0E010000 		.4byte	0x10e
 11293 0837 0A       		.byte	0xa
 11294 0838 00       		.byte	0
 11295 0839 10       		.uleb128 0x10
 11296 083a C10E0000 		.4byte	.LASF125
 11297 083e 20       		.byte	0x20
 11298 083f 07       		.byte	0x7
 11299 0840 9F01     		.2byte	0x19f
 11300 0842 6E080000 		.4byte	0x86e
 11301 0846 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 253


 11302 0847 69040000 		.4byte	.LASF126
 11303 084b 07       		.byte	0x7
 11304 084c A001     		.2byte	0x1a0
 11305 084e 15010000 		.4byte	0x115
 11306 0852 00       		.byte	0
 11307 0853 12       		.uleb128 0x12
 11308 0854 89030000 		.4byte	.LASF127
 11309 0858 07       		.byte	0x7
 11310 0859 A101     		.2byte	0x1a1
 11311 085b F6060000 		.4byte	0x6f6
 11312 085f 08       		.byte	0x8
 11313 0860 12       		.uleb128 0x12
 11314 0861 B0030000 		.4byte	.LASF66
 11315 0865 07       		.byte	0x7
 11316 0866 A201     		.2byte	0x1a2
 11317 0868 E6060000 		.4byte	0x6e6
 11318 086c 18       		.byte	0x18
 11319 086d 00       		.byte	0
 11320 086e 10       		.uleb128 0x10
 11321 086f 2B0A0000 		.4byte	.LASF128
 11322 0873 10       		.byte	0x10
 11323 0874 07       		.byte	0x7
 11324 0875 A901     		.2byte	0x1a9
 11325 0877 BD080000 		.4byte	0x8bd
 11326 087b 12       		.uleb128 0x12
 11327 087c 26090000 		.4byte	.LASF129
 11328 0880 07       		.byte	0x7
 11329 0881 AA01     		.2byte	0x1aa
 11330 0883 BD000000 		.4byte	0xbd
 11331 0887 00       		.byte	0
 11332 0888 12       		.uleb128 0x12
 11333 0889 05130000 		.4byte	.LASF130
 11334 088d 07       		.byte	0x7
 11335 088e AB01     		.2byte	0x1ab
 11336 0890 BD000000 		.4byte	0xbd
 11337 0894 04       		.byte	0x4
 11338 0895 12       		.uleb128 0x12
 11339 0896 83060000 		.4byte	.LASF131
 11340 089a 07       		.byte	0x7
 11341 089b AC01     		.2byte	0x1ac
 11342 089d BD000000 		.4byte	0xbd
 11343 08a1 08       		.byte	0x8
 11344 08a2 12       		.uleb128 0x12
 11345 08a3 0F080000 		.4byte	.LASF132
 11346 08a7 07       		.byte	0x7
 11347 08a8 AD01     		.2byte	0x1ad
 11348 08aa 81000000 		.4byte	0x81
 11349 08ae 0C       		.byte	0xc
 11350 08af 12       		.uleb128 0x12
 11351 08b0 B0030000 		.4byte	.LASF66
 11352 08b4 07       		.byte	0x7
 11353 08b5 AE01     		.2byte	0x1ae
 11354 08b7 99040000 		.4byte	0x499
 11355 08bb 0D       		.byte	0xd
 11356 08bc 00       		.byte	0
 11357 08bd 10       		.uleb128 0x10
 11358 08be BC0F0000 		.4byte	.LASF133
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 254


 11359 08c2 10       		.byte	0x10
 11360 08c3 07       		.byte	0x7
 11361 08c4 B501     		.2byte	0x1b5
 11362 08c6 FF080000 		.4byte	0x8ff
 11363 08ca 12       		.uleb128 0x12
 11364 08cb 22080000 		.4byte	.LASF134
 11365 08cf 07       		.byte	0x7
 11366 08d0 B601     		.2byte	0x1b6
 11367 08d2 8D000000 		.4byte	0x8d
 11368 08d6 00       		.byte	0
 11369 08d7 12       		.uleb128 0x12
 11370 08d8 1E0F0000 		.4byte	.LASF135
 11371 08dc 07       		.byte	0x7
 11372 08dd B701     		.2byte	0x1b7
 11373 08df B1000000 		.4byte	0xb1
 11374 08e3 02       		.byte	0x2
 11375 08e4 12       		.uleb128 0x12
 11376 08e5 96080000 		.4byte	.LASF136
 11377 08e9 07       		.byte	0x7
 11378 08ea B801     		.2byte	0x1b8
 11379 08ec 45070000 		.4byte	0x745
 11380 08f0 04       		.byte	0x4
 11381 08f1 12       		.uleb128 0x12
 11382 08f2 B0030000 		.4byte	.LASF66
 11383 08f6 07       		.byte	0x7
 11384 08f7 B901     		.2byte	0x1b9
 11385 08f9 E6060000 		.4byte	0x6e6
 11386 08fd 08       		.byte	0x8
 11387 08fe 00       		.byte	0
 11388 08ff 10       		.uleb128 0x10
 11389 0900 C6010000 		.4byte	.LASF137
 11390 0904 10       		.byte	0x10
 11391 0905 07       		.byte	0x7
 11392 0906 C001     		.2byte	0x1c0
 11393 0908 34090000 		.4byte	0x934
 11394 090c 12       		.uleb128 0x12
 11395 090d 7A040000 		.4byte	.LASF138
 11396 0911 07       		.byte	0x7
 11397 0912 C101     		.2byte	0x1c1
 11398 0914 81000000 		.4byte	0x81
 11399 0918 00       		.byte	0
 11400 0919 12       		.uleb128 0x12
 11401 091a 290B0000 		.4byte	.LASF139
 11402 091e 07       		.byte	0x7
 11403 091f C201     		.2byte	0x1c2
 11404 0921 81000000 		.4byte	0x81
 11405 0925 01       		.byte	0x1
 11406 0926 12       		.uleb128 0x12
 11407 0927 B0030000 		.4byte	.LASF66
 11408 092b 07       		.byte	0x7
 11409 092c C301     		.2byte	0x1c3
 11410 092e 34090000 		.4byte	0x934
 11411 0932 02       		.byte	0x2
 11412 0933 00       		.byte	0
 11413 0934 07       		.uleb128 0x7
 11414 0935 81000000 		.4byte	0x81
 11415 0939 44090000 		.4byte	0x944
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 255


 11416 093d 08       		.uleb128 0x8
 11417 093e 0E010000 		.4byte	0x10e
 11418 0942 0D       		.byte	0xd
 11419 0943 00       		.byte	0
 11420 0944 10       		.uleb128 0x10
 11421 0945 440A0000 		.4byte	.LASF140
 11422 0949 10       		.byte	0x10
 11423 094a 07       		.byte	0x7
 11424 094b CA01     		.2byte	0x1ca
 11425 094d A0090000 		.4byte	0x9a0
 11426 0951 12       		.uleb128 0x12
 11427 0952 D8110000 		.4byte	.LASF141
 11428 0956 07       		.byte	0x7
 11429 0957 CC01     		.2byte	0x1cc
 11430 0959 BD000000 		.4byte	0xbd
 11431 095d 00       		.byte	0
 11432 095e 12       		.uleb128 0x12
 11433 095f FA070000 		.4byte	.LASF142
 11434 0963 07       		.byte	0x7
 11435 0964 CD01     		.2byte	0x1cd
 11436 0966 D5000000 		.4byte	0xd5
 11437 096a 04       		.byte	0x4
 11438 096b 12       		.uleb128 0x12
 11439 096c 320E0000 		.4byte	.LASF143
 11440 0970 07       		.byte	0x7
 11441 0971 CE01     		.2byte	0x1ce
 11442 0973 D5000000 		.4byte	0xd5
 11443 0977 08       		.byte	0x8
 11444 0978 12       		.uleb128 0x12
 11445 0979 6C090000 		.4byte	.LASF144
 11446 097d 07       		.byte	0x7
 11447 097e CF01     		.2byte	0x1cf
 11448 0980 81000000 		.4byte	0x81
 11449 0984 0C       		.byte	0xc
 11450 0985 12       		.uleb128 0x12
 11451 0986 8B0F0000 		.4byte	.LASF145
 11452 098a 07       		.byte	0x7
 11453 098b D001     		.2byte	0x1d0
 11454 098d 81000000 		.4byte	0x81
 11455 0991 0D       		.byte	0xd
 11456 0992 12       		.uleb128 0x12
 11457 0993 B0030000 		.4byte	.LASF66
 11458 0997 07       		.byte	0x7
 11459 0998 D101     		.2byte	0x1d1
 11460 099a 55070000 		.4byte	0x755
 11461 099e 0E       		.byte	0xe
 11462 099f 00       		.byte	0
 11463 09a0 10       		.uleb128 0x10
 11464 09a1 CF060000 		.4byte	.LASF146
 11465 09a5 02       		.byte	0x2
 11466 09a6 07       		.byte	0x7
 11467 09a7 D401     		.2byte	0x1d4
 11468 09a9 BB090000 		.4byte	0x9bb
 11469 09ad 11       		.uleb128 0x11
 11470 09ae 70776D00 		.ascii	"pwm\000"
 11471 09b2 07       		.byte	0x7
 11472 09b3 D501     		.2byte	0x1d5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 256


 11473 09b5 B1000000 		.4byte	0xb1
 11474 09b9 00       		.byte	0
 11475 09ba 00       		.byte	0
 11476 09bb 10       		.uleb128 0x10
 11477 09bc 50020000 		.4byte	.LASF147
 11478 09c0 12       		.byte	0x12
 11479 09c1 07       		.byte	0x7
 11480 09c2 DB01     		.2byte	0x1db
 11481 09c4 FD090000 		.4byte	0x9fd
 11482 09c8 12       		.uleb128 0x12
 11483 09c9 EE120000 		.4byte	.LASF148
 11484 09cd 07       		.byte	0x7
 11485 09ce DC01     		.2byte	0x1dc
 11486 09d0 81000000 		.4byte	0x81
 11487 09d4 00       		.byte	0
 11488 09d5 12       		.uleb128 0x12
 11489 09d6 8D110000 		.4byte	.LASF149
 11490 09da 07       		.byte	0x7
 11491 09db DD01     		.2byte	0x1dd
 11492 09dd 45070000 		.4byte	0x745
 11493 09e1 02       		.byte	0x2
 11494 09e2 12       		.uleb128 0x12
 11495 09e3 37000000 		.4byte	.LASF150
 11496 09e7 07       		.byte	0x7
 11497 09e8 DE01     		.2byte	0x1de
 11498 09ea 81000000 		.4byte	0x81
 11499 09ee 06       		.byte	0x6
 11500 09ef 12       		.uleb128 0x12
 11501 09f0 B0030000 		.4byte	.LASF66
 11502 09f4 07       		.byte	0x7
 11503 09f5 DF01     		.2byte	0x1df
 11504 09f7 FD090000 		.4byte	0x9fd
 11505 09fb 07       		.byte	0x7
 11506 09fc 00       		.byte	0
 11507 09fd 07       		.uleb128 0x7
 11508 09fe 81000000 		.4byte	0x81
 11509 0a02 0D0A0000 		.4byte	0xa0d
 11510 0a06 08       		.uleb128 0x8
 11511 0a07 0E010000 		.4byte	0x10e
 11512 0a0b 09       		.byte	0x9
 11513 0a0c 00       		.byte	0
 11514 0a0d 13       		.uleb128 0x13
 11515 0a0e F3110000 		.4byte	.LASF151
 11516 0a12 F402     		.2byte	0x2f4
 11517 0a14 07       		.byte	0x7
 11518 0a15 E801     		.2byte	0x1e8
 11519 0a17 F20A0000 		.4byte	0xaf2
 11520 0a1b 12       		.uleb128 0x12
 11521 0a1c 9E0B0000 		.4byte	.LASF152
 11522 0a20 07       		.byte	0x7
 11523 0a21 EA01     		.2byte	0x1ea
 11524 0a23 81000000 		.4byte	0x81
 11525 0a27 00       		.byte	0
 11526 0a28 12       		.uleb128 0x12
 11527 0a29 B0030000 		.4byte	.LASF66
 11528 0a2d 07       		.byte	0x7
 11529 0a2e EB01     		.2byte	0x1eb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 257


 11530 0a30 F20A0000 		.4byte	0xaf2
 11531 0a34 01       		.byte	0x1
 11532 0a35 11       		.uleb128 0x11
 11533 0a36 636E7400 		.ascii	"cnt\000"
 11534 0a3a 07       		.byte	0x7
 11535 0a3b EC01     		.2byte	0x1ec
 11536 0a3d 2D030000 		.4byte	0x32d
 11537 0a41 10       		.byte	0x10
 11538 0a42 12       		.uleb128 0x12
 11539 0a43 43030000 		.4byte	.LASF153
 11540 0a47 07       		.byte	0x7
 11541 0a48 ED01     		.2byte	0x1ed
 11542 0a4a 020B0000 		.4byte	0xb02
 11543 0a4e 80       		.byte	0x80
 11544 0a4f 11       		.uleb128 0x11
 11545 0a50 64657600 		.ascii	"dev\000"
 11546 0a54 07       		.byte	0x7
 11547 0a55 EE01     		.2byte	0x1ee
 11548 0a57 0A040000 		.4byte	0x40a
 11549 0a5b A0       		.byte	0xa0
 11550 0a5c 12       		.uleb128 0x12
 11551 0a5d 04100000 		.4byte	.LASF154
 11552 0a61 07       		.byte	0x7
 11553 0a62 EF01     		.2byte	0x1ef
 11554 0a64 120B0000 		.4byte	0xb12
 11555 0a68 B0       		.byte	0xb0
 11556 0a69 14       		.uleb128 0x14
 11557 0a6a 656E6300 		.ascii	"enc\000"
 11558 0a6e 07       		.byte	0x7
 11559 0a6f F001     		.2byte	0x1f0
 11560 0a71 220B0000 		.4byte	0xb22
 11561 0a75 9001     		.2byte	0x190
 11562 0a77 14       		.uleb128 0x14
 11563 0a78 656D6700 		.ascii	"emg\000"
 11564 0a7c 07       		.byte	0x7
 11565 0a7d F101     		.2byte	0x1f1
 11566 0a7f F6060000 		.4byte	0x6f6
 11567 0a83 F001     		.2byte	0x1f0
 11568 0a85 14       		.uleb128 0x14
 11569 0a86 696D7500 		.ascii	"imu\000"
 11570 0a8a 07       		.byte	0x7
 11571 0a8b F201     		.2byte	0x1f2
 11572 0a8d 65070000 		.4byte	0x765
 11573 0a91 0002     		.2byte	0x200
 11574 0a93 14       		.uleb128 0x14
 11575 0a94 65787000 		.ascii	"exp\000"
 11576 0a98 07       		.byte	0x7
 11577 0a99 F301     		.2byte	0x1f3
 11578 0a9b BD070000 		.4byte	0x7bd
 11579 0a9f 2002     		.2byte	0x220
 11580 0aa1 15       		.uleb128 0x15
 11581 0aa2 86000000 		.4byte	.LASF155
 11582 0aa6 07       		.byte	0x7
 11583 0aa7 F401     		.2byte	0x1f4
 11584 0aa9 320B0000 		.4byte	0xb32
 11585 0aad 4002     		.2byte	0x240
 11586 0aaf 14       		.uleb128 0x14
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 258


 11587 0ab0 534800   		.ascii	"SH\000"
 11588 0ab3 07       		.byte	0x7
 11589 0ab4 F601     		.2byte	0x1f6
 11590 0ab6 6E080000 		.4byte	0x86e
 11591 0aba A002     		.2byte	0x2a0
 11592 0abc 15       		.uleb128 0x15
 11593 0abd 31010000 		.4byte	.LASF156
 11594 0ac1 07       		.byte	0x7
 11595 0ac2 F701     		.2byte	0x1f7
 11596 0ac4 BD080000 		.4byte	0x8bd
 11597 0ac8 B002     		.2byte	0x2b0
 11598 0aca 14       		.uleb128 0x14
 11599 0acb 4D5300   		.ascii	"MS\000"
 11600 0ace 07       		.byte	0x7
 11601 0acf F801     		.2byte	0x1f8
 11602 0ad1 FF080000 		.4byte	0x8ff
 11603 0ad5 C002     		.2byte	0x2c0
 11604 0ad7 14       		.uleb128 0x14
 11605 0ad8 464200   		.ascii	"FB\000"
 11606 0adb 07       		.byte	0x7
 11607 0adc F901     		.2byte	0x1f9
 11608 0ade 44090000 		.4byte	0x944
 11609 0ae2 D002     		.2byte	0x2d0
 11610 0ae4 14       		.uleb128 0x14
 11611 0ae5 575200   		.ascii	"WR\000"
 11612 0ae8 07       		.byte	0x7
 11613 0ae9 FA01     		.2byte	0x1fa
 11614 0aeb BB090000 		.4byte	0x9bb
 11615 0aef E002     		.2byte	0x2e0
 11616 0af1 00       		.byte	0
 11617 0af2 07       		.uleb128 0x7
 11618 0af3 81000000 		.4byte	0x81
 11619 0af7 020B0000 		.4byte	0xb02
 11620 0afb 08       		.uleb128 0x8
 11621 0afc 0E010000 		.4byte	0x10e
 11622 0b00 0E       		.byte	0xe
 11623 0b01 00       		.byte	0
 11624 0b02 07       		.uleb128 0x7
 11625 0b03 81000000 		.4byte	0x81
 11626 0b07 120B0000 		.4byte	0xb12
 11627 0b0b 08       		.uleb128 0x8
 11628 0b0c 0E010000 		.4byte	0x10e
 11629 0b10 1F       		.byte	0x1f
 11630 0b11 00       		.byte	0
 11631 0b12 07       		.uleb128 0x7
 11632 0b13 A9040000 		.4byte	0x4a9
 11633 0b17 220B0000 		.4byte	0xb22
 11634 0b1b 08       		.uleb128 0x8
 11635 0b1c 0E010000 		.4byte	0x10e
 11636 0b20 01       		.byte	0x1
 11637 0b21 00       		.byte	0
 11638 0b22 07       		.uleb128 0x7
 11639 0b23 43060000 		.4byte	0x643
 11640 0b27 320B0000 		.4byte	0xb32
 11641 0b2b 08       		.uleb128 0x8
 11642 0b2c 0E010000 		.4byte	0x10e
 11643 0b30 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 259


 11644 0b31 00       		.byte	0
 11645 0b32 07       		.uleb128 0x7
 11646 0b33 39080000 		.4byte	0x839
 11647 0b37 420B0000 		.4byte	0xb42
 11648 0b3b 08       		.uleb128 0x8
 11649 0b3c 0E010000 		.4byte	0x10e
 11650 0b40 02       		.byte	0x2
 11651 0b41 00       		.byte	0
 11652 0b42 10       		.uleb128 0x10
 11653 0b43 9C0D0000 		.4byte	.LASF157
 11654 0b47 28       		.byte	0x28
 11655 0b48 07       		.byte	0x7
 11656 0b49 0502     		.2byte	0x205
 11657 0b4b 9E0B0000 		.4byte	0xb9e
 11658 0b4f 12       		.uleb128 0x12
 11659 0b50 6C050000 		.4byte	.LASF158
 11660 0b54 07       		.byte	0x7
 11661 0b55 0602     		.2byte	0x206
 11662 0b57 81000000 		.4byte	0x81
 11663 0b5b 00       		.byte	0
 11664 0b5c 12       		.uleb128 0x12
 11665 0b5d BD030000 		.4byte	.LASF159
 11666 0b61 07       		.byte	0x7
 11667 0b62 0702     		.2byte	0x207
 11668 0b64 9E0B0000 		.4byte	0xb9e
 11669 0b68 02       		.byte	0x2
 11670 0b69 12       		.uleb128 0x12
 11671 0b6a D10C0000 		.4byte	.LASF160
 11672 0b6e 07       		.byte	0x7
 11673 0b6f 0802     		.2byte	0x208
 11674 0b71 9E0B0000 		.4byte	0xb9e
 11675 0b75 08       		.byte	0x8
 11676 0b76 12       		.uleb128 0x12
 11677 0b77 A80D0000 		.4byte	.LASF161
 11678 0b7b 07       		.byte	0x7
 11679 0b7c 0902     		.2byte	0x209
 11680 0b7e 9E0B0000 		.4byte	0xb9e
 11681 0b82 0E       		.byte	0xe
 11682 0b83 12       		.uleb128 0x12
 11683 0b84 1B090000 		.4byte	.LASF162
 11684 0b88 07       		.byte	0x7
 11685 0b89 0A02     		.2byte	0x20a
 11686 0b8b AE0B0000 		.4byte	0xbae
 11687 0b8f 14       		.byte	0x14
 11688 0b90 12       		.uleb128 0x12
 11689 0b91 3D020000 		.4byte	.LASF163
 11690 0b95 07       		.byte	0x7
 11691 0b96 0B02     		.2byte	0x20b
 11692 0b98 B1000000 		.4byte	0xb1
 11693 0b9c 24       		.byte	0x24
 11694 0b9d 00       		.byte	0
 11695 0b9e 07       		.uleb128 0x7
 11696 0b9f B1000000 		.4byte	0xb1
 11697 0ba3 AE0B0000 		.4byte	0xbae
 11698 0ba7 08       		.uleb128 0x8
 11699 0ba8 0E010000 		.4byte	0x10e
 11700 0bac 02       		.byte	0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 260


 11701 0bad 00       		.byte	0
 11702 0bae 07       		.uleb128 0x7
 11703 0baf D5000000 		.4byte	0xd5
 11704 0bb3 BE0B0000 		.4byte	0xbbe
 11705 0bb7 08       		.uleb128 0x8
 11706 0bb8 0E010000 		.4byte	0x10e
 11707 0bbc 03       		.byte	0x3
 11708 0bbd 00       		.byte	0
 11709 0bbe 10       		.uleb128 0x10
 11710 0bbf 10130000 		.4byte	.LASF164
 11711 0bc3 08       		.byte	0x8
 11712 0bc4 07       		.byte	0x7
 11713 0bc5 1202     		.2byte	0x212
 11714 0bc7 E60B0000 		.4byte	0xbe6
 11715 0bcb 12       		.uleb128 0x12
 11716 0bcc 6F060000 		.4byte	.LASF165
 11717 0bd0 07       		.byte	0x7
 11718 0bd1 1302     		.2byte	0x213
 11719 0bd3 BD000000 		.4byte	0xbd
 11720 0bd7 00       		.byte	0
 11721 0bd8 12       		.uleb128 0x12
 11722 0bd9 83020000 		.4byte	.LASF166
 11723 0bdd 07       		.byte	0x7
 11724 0bde 1402     		.2byte	0x214
 11725 0be0 BD000000 		.4byte	0xbd
 11726 0be4 04       		.byte	0x4
 11727 0be5 00       		.byte	0
 11728 0be6 10       		.uleb128 0x10
 11729 0be7 8D040000 		.4byte	.LASF167
 11730 0beb 06       		.byte	0x6
 11731 0bec 07       		.byte	0x7
 11732 0bed 1B02     		.2byte	0x21b
 11733 0bef 280C0000 		.4byte	0xc28
 11734 0bf3 12       		.uleb128 0x12
 11735 0bf4 65080000 		.4byte	.LASF168
 11736 0bf8 07       		.byte	0x7
 11737 0bf9 1C02     		.2byte	0x21c
 11738 0bfb 81000000 		.4byte	0x81
 11739 0bff 00       		.byte	0
 11740 0c00 12       		.uleb128 0x12
 11741 0c01 2C130000 		.4byte	.LASF169
 11742 0c05 07       		.byte	0x7
 11743 0c06 1D02     		.2byte	0x21d
 11744 0c08 81000000 		.4byte	0x81
 11745 0c0c 01       		.byte	0x1
 11746 0c0d 12       		.uleb128 0x12
 11747 0c0e 10070000 		.4byte	.LASF170
 11748 0c12 07       		.byte	0x7
 11749 0c13 1E02     		.2byte	0x21e
 11750 0c15 B1000000 		.4byte	0xb1
 11751 0c19 02       		.byte	0x2
 11752 0c1a 12       		.uleb128 0x12
 11753 0c1b FC0A0000 		.4byte	.LASF171
 11754 0c1f 07       		.byte	0x7
 11755 0c20 1F02     		.2byte	0x21f
 11756 0c22 B1000000 		.4byte	0xb1
 11757 0c26 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 261


 11758 0c27 00       		.byte	0
 11759 0c28 16       		.uleb128 0x16
 11760 0c29 01       		.byte	0x1
 11761 0c2a 2C000000 		.4byte	0x2c
 11762 0c2e 07       		.byte	0x7
 11763 0c2f 2302     		.2byte	0x223
 11764 0c31 5A0C0000 		.4byte	0xc5a
 11765 0c35 0A       		.uleb128 0xa
 11766 0c36 8C060000 		.4byte	.LASF172
 11767 0c3a 00       		.byte	0
 11768 0c3b 0A       		.uleb128 0xa
 11769 0c3c 740E0000 		.4byte	.LASF173
 11770 0c40 01       		.byte	0x1
 11771 0c41 0A       		.uleb128 0xa
 11772 0c42 6E0C0000 		.4byte	.LASF174
 11773 0c46 02       		.byte	0x2
 11774 0c47 0A       		.uleb128 0xa
 11775 0c48 E6020000 		.4byte	.LASF175
 11776 0c4c 03       		.byte	0x3
 11777 0c4d 0A       		.uleb128 0xa
 11778 0c4e 320B0000 		.4byte	.LASF176
 11779 0c52 04       		.byte	0x4
 11780 0c53 0A       		.uleb128 0xa
 11781 0c54 120E0000 		.4byte	.LASF177
 11782 0c58 05       		.byte	0x5
 11783 0c59 00       		.byte	0
 11784 0c5a 05       		.uleb128 0x5
 11785 0c5b 16060000 		.4byte	.LASF178
 11786 0c5f 07       		.byte	0x7
 11787 0c60 2B02     		.2byte	0x22b
 11788 0c62 280C0000 		.4byte	0xc28
 11789 0c66 16       		.uleb128 0x16
 11790 0c67 01       		.byte	0x1
 11791 0c68 2C000000 		.4byte	0x2c
 11792 0c6c 07       		.byte	0x7
 11793 0c6d 2D02     		.2byte	0x22d
 11794 0c6f 920C0000 		.4byte	0xc92
 11795 0c73 0A       		.uleb128 0xa
 11796 0c74 30020000 		.4byte	.LASF179
 11797 0c78 00       		.byte	0
 11798 0c79 0A       		.uleb128 0xa
 11799 0c7a 89080000 		.4byte	.LASF180
 11800 0c7e 01       		.byte	0x1
 11801 0c7f 0A       		.uleb128 0xa
 11802 0c80 34090000 		.4byte	.LASF181
 11803 0c84 02       		.byte	0x2
 11804 0c85 0A       		.uleb128 0xa
 11805 0c86 27040000 		.4byte	.LASF182
 11806 0c8a 03       		.byte	0x3
 11807 0c8b 0A       		.uleb128 0xa
 11808 0c8c E9120000 		.4byte	.LASF183
 11809 0c90 04       		.byte	0x4
 11810 0c91 00       		.byte	0
 11811 0c92 05       		.uleb128 0x5
 11812 0c93 5A0F0000 		.4byte	.LASF184
 11813 0c97 07       		.byte	0x7
 11814 0c98 3402     		.2byte	0x234
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 262


 11815 0c9a 660C0000 		.4byte	0xc66
 11816 0c9e 17       		.uleb128 0x17
 11817 0c9f 4A060000 		.4byte	.LASF185
 11818 0ca3 01       		.byte	0x1
 11819 0ca4 62       		.byte	0x62
 11820 0ca5 00000000 		.4byte	.LFB64
 11821 0ca9 18000000 		.4byte	.LFE64-.LFB64
 11822 0cad 01       		.uleb128 0x1
 11823 0cae 9C       		.byte	0x9c
 11824 0caf 17       		.uleb128 0x17
 11825 0cb0 70110000 		.4byte	.LASF186
 11826 0cb4 01       		.byte	0x1
 11827 0cb5 6D       		.byte	0x6d
 11828 0cb6 00000000 		.4byte	.LFB65
 11829 0cba 20000000 		.4byte	.LFE65-.LFB65
 11830 0cbe 01       		.uleb128 0x1
 11831 0cbf 9C       		.byte	0x9c
 11832 0cc0 18       		.uleb128 0x18
 11833 0cc1 B00A0000 		.4byte	.LASF218
 11834 0cc5 01       		.byte	0x1
 11835 0cc6 86       		.byte	0x86
 11836 0cc7 00000000 		.4byte	.LFB66
 11837 0ccb 0C020000 		.4byte	.LFE66-.LFB66
 11838 0ccf 01       		.uleb128 0x1
 11839 0cd0 9C       		.byte	0x9c
 11840 0cd1 550D0000 		.4byte	0xd55
 11841 0cd5 19       		.uleb128 0x19
 11842 0cd6 5E010000 		.4byte	.LASF187
 11843 0cda 01       		.byte	0x1
 11844 0cdb 8B       		.byte	0x8b
 11845 0cdc 81000000 		.4byte	0x81
 11846 0ce0 05       		.uleb128 0x5
 11847 0ce1 03       		.byte	0x3
 11848 0ce2 00000000 		.4byte	state.10225
 11849 0ce6 19       		.uleb128 0x19
 11850 0ce7 35070000 		.4byte	.LASF188
 11851 0ceb 01       		.byte	0x1
 11852 0cec 8E       		.byte	0x8e
 11853 0ced 81000000 		.4byte	0x81
 11854 0cf1 05       		.uleb128 0x5
 11855 0cf2 03       		.byte	0x3
 11856 0cf3 08000000 		.4byte	data_packet_index.10226
 11857 0cf7 19       		.uleb128 0x19
 11858 0cf8 DB0D0000 		.4byte	.LASF189
 11859 0cfc 01       		.byte	0x1
 11860 0cfd 8F       		.byte	0x8f
 11861 0cfe 81000000 		.4byte	0x81
 11862 0d02 05       		.uleb128 0x5
 11863 0d03 03       		.byte	0x3
 11864 0d04 07000000 		.4byte	data_packet_length.10227
 11865 0d08 19       		.uleb128 0x19
 11866 0d09 47070000 		.4byte	.LASF190
 11867 0d0d 01       		.byte	0x1
 11868 0d0e 90       		.byte	0x90
 11869 0d0f 1D030000 		.4byte	0x31d
 11870 0d13 05       		.uleb128 0x5
 11871 0d14 03       		.byte	0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 263


 11872 0d15 0C000000 		.4byte	data_packet_buffer.10228
 11873 0d19 19       		.uleb128 0x19
 11874 0d1a E00B0000 		.4byte	.LASF191
 11875 0d1e 01       		.byte	0x1
 11876 0d1f 91       		.byte	0x91
 11877 0d20 99040000 		.4byte	0x499
 11878 0d24 05       		.uleb128 0x5
 11879 0d25 03       		.byte	0x3
 11880 0d26 04000000 		.4byte	rx_queue.10229
 11881 0d2a 19       		.uleb128 0x19
 11882 0d2b F5010000 		.4byte	.LASF192
 11883 0d2f 01       		.byte	0x1
 11884 0d30 94       		.byte	0x94
 11885 0d31 81000000 		.4byte	0x81
 11886 0d35 02       		.uleb128 0x2
 11887 0d36 91       		.byte	0x91
 11888 0d37 75       		.sleb128 -11
 11889 0d38 19       		.uleb128 0x19
 11890 0d39 FA060000 		.4byte	.LASF193
 11891 0d3d 01       		.byte	0x1
 11892 0d3e 95       		.byte	0x95
 11893 0d3f 81000000 		.4byte	0x81
 11894 0d43 02       		.uleb128 0x2
 11895 0d44 91       		.byte	0x91
 11896 0d45 77       		.sleb128 -9
 11897 0d46 19       		.uleb128 0x19
 11898 0d47 42080000 		.4byte	.LASF194
 11899 0d4b 01       		.byte	0x1
 11900 0d4c 96       		.byte	0x96
 11901 0d4d 81000000 		.4byte	0x81
 11902 0d51 02       		.uleb128 0x2
 11903 0d52 91       		.byte	0x91
 11904 0d53 76       		.sleb128 -10
 11905 0d54 00       		.byte	0
 11906 0d55 1A       		.uleb128 0x1a
 11907 0d56 24100000 		.4byte	.LASF201
 11908 0d5a 01       		.byte	0x1
 11909 0d5b 0C01     		.2byte	0x10c
 11910 0d5d 00000000 		.4byte	.LFB67
 11911 0d61 D0040000 		.4byte	.LFE67-.LFB67
 11912 0d65 01       		.uleb128 0x1
 11913 0d66 9C       		.byte	0x9c
 11914 0d67 D90D0000 		.4byte	0xdd9
 11915 0d6b 1B       		.uleb128 0x1b
 11916 0d6c 71070000 		.4byte	.LASF195
 11917 0d70 01       		.byte	0x1
 11918 0d71 0E01     		.2byte	0x10e
 11919 0d73 8D000000 		.4byte	0x8d
 11920 0d77 05       		.uleb128 0x5
 11921 0d78 03       		.byte	0x3
 11922 0d79 00000000 		.4byte	counter_calibration.10245
 11923 0d7d 1B       		.uleb128 0x1b
 11924 0d7e 250D0000 		.4byte	.LASF196
 11925 0d82 01       		.byte	0x1
 11926 0d83 0F01     		.2byte	0x10f
 11927 0d85 8D000000 		.4byte	0x8d
 11928 0d89 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 264


 11929 0d8a 03       		.byte	0x3
 11930 0d8b 02000000 		.4byte	counter_tension_func.10246
 11931 0d8f 1B       		.uleb128 0x1b
 11932 0d90 0C020000 		.4byte	.LASF197
 11933 0d94 01       		.byte	0x1
 11934 0d95 1001     		.2byte	0x110
 11935 0d97 D90D0000 		.4byte	0xdd9
 11936 0d9b 03       		.uleb128 0x3
 11937 0d9c 91       		.byte	0x91
 11938 0d9d A86C     		.sleb128 -2520
 11939 0d9f 1B       		.uleb128 0x1b
 11940 0da0 080D0000 		.4byte	.LASF198
 11941 0da4 01       		.byte	0x1
 11942 0da5 1201     		.2byte	0x112
 11943 0da7 81000000 		.4byte	0x81
 11944 0dab 02       		.uleb128 0x2
 11945 0dac 91       		.byte	0x91
 11946 0dad 6F       		.sleb128 -17
 11947 0dae 1B       		.uleb128 0x1b
 11948 0daf 6D0A0000 		.4byte	.LASF199
 11949 0db3 01       		.byte	0x1
 11950 0db4 1301     		.2byte	0x113
 11951 0db6 81000000 		.4byte	0x81
 11952 0dba 02       		.uleb128 0x2
 11953 0dbb 91       		.byte	0x91
 11954 0dbc 6E       		.sleb128 -18
 11955 0dbd 1C       		.uleb128 0x1c
 11956 0dbe 9A020000 		.4byte	.LBB2
 11957 0dc2 50000000 		.4byte	.LBE2-.LBB2
 11958 0dc6 1B       		.uleb128 0x1b
 11959 0dc7 51030000 		.4byte	.LASF200
 11960 0dcb 01       		.byte	0x1
 11961 0dcc C901     		.2byte	0x1c9
 11962 0dce EA0D0000 		.4byte	0xdea
 11963 0dd2 04       		.uleb128 0x4
 11964 0dd3 91       		.byte	0x91
 11965 0dd4 90F77E   		.sleb128 -17520
 11966 0dd7 00       		.byte	0
 11967 0dd8 00       		.byte	0
 11968 0dd9 07       		.uleb128 0x7
 11969 0dda E3000000 		.4byte	0xe3
 11970 0dde EA0D0000 		.4byte	0xdea
 11971 0de2 1D       		.uleb128 0x1d
 11972 0de3 0E010000 		.4byte	0x10e
 11973 0de7 C309     		.2byte	0x9c3
 11974 0de9 00       		.byte	0
 11975 0dea 07       		.uleb128 0x7
 11976 0deb E3000000 		.4byte	0xe3
 11977 0def FB0D0000 		.4byte	0xdfb
 11978 0df3 1D       		.uleb128 0x1d
 11979 0df4 0E010000 		.4byte	0x10e
 11980 0df8 973A     		.2byte	0x3a97
 11981 0dfa 00       		.byte	0
 11982 0dfb 1A       		.uleb128 0x1a
 11983 0dfc 37100000 		.4byte	.LASF202
 11984 0e00 01       		.byte	0x1
 11985 0e01 1D02     		.2byte	0x21d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 265


 11986 0e03 00000000 		.4byte	.LFB68
 11987 0e07 CC050000 		.4byte	.LFE68-.LFB68
 11988 0e0b 01       		.uleb128 0x1
 11989 0e0c 9C       		.byte	0x9c
 11990 0e0d B10E0000 		.4byte	0xeb1
 11991 0e11 1E       		.uleb128 0x1e
 11992 0e12 F5080000 		.4byte	.LASF203
 11993 0e16 01       		.byte	0x1
 11994 0e17 1D02     		.2byte	0x21d
 11995 0e19 81000000 		.4byte	0x81
 11996 0e1d 02       		.uleb128 0x2
 11997 0e1e 91       		.byte	0x91
 11998 0e1f 5F       		.sleb128 -33
 11999 0e20 1E       		.uleb128 0x1e
 12000 0e21 5A070000 		.4byte	.LASF204
 12001 0e25 01       		.byte	0x1
 12002 0e26 1D02     		.2byte	0x21d
 12003 0e28 B10E0000 		.4byte	0xeb1
 12004 0e2c 02       		.uleb128 0x2
 12005 0e2d 91       		.byte	0x91
 12006 0e2e 58       		.sleb128 -40
 12007 0e2f 1E       		.uleb128 0x1e
 12008 0e30 22120000 		.4byte	.LASF205
 12009 0e34 01       		.byte	0x1
 12010 0e35 1D02     		.2byte	0x21d
 12011 0e37 B10E0000 		.4byte	0xeb1
 12012 0e3b 02       		.uleb128 0x2
 12013 0e3c 91       		.byte	0x91
 12014 0e3d 54       		.sleb128 -44
 12015 0e3e 1B       		.uleb128 0x1b
 12016 0e3f 72050000 		.4byte	.LASF206
 12017 0e43 01       		.byte	0x1
 12018 0e44 1F02     		.2byte	0x21f
 12019 0e46 BD000000 		.4byte	0xbd
 12020 0e4a 02       		.uleb128 0x2
 12021 0e4b 91       		.byte	0x91
 12022 0e4c 74       		.sleb128 -12
 12023 0e4d 1B       		.uleb128 0x1b
 12024 0e4e 96040000 		.4byte	.LASF207
 12025 0e52 01       		.byte	0x1
 12026 0e53 2002     		.2byte	0x220
 12027 0e55 BD000000 		.4byte	0xbd
 12028 0e59 02       		.uleb128 0x2
 12029 0e5a 91       		.byte	0x91
 12030 0e5b 68       		.sleb128 -24
 12031 0e5c 1B       		.uleb128 0x1b
 12032 0e5d A0040000 		.4byte	.LASF208
 12033 0e61 01       		.byte	0x1
 12034 0e62 2002     		.2byte	0x220
 12035 0e64 BD000000 		.4byte	0xbd
 12036 0e68 02       		.uleb128 0x2
 12037 0e69 91       		.byte	0x91
 12038 0e6a 64       		.sleb128 -28
 12039 0e6b 1F       		.uleb128 0x1f
 12040 0e6c 4D4F5400 		.ascii	"MOT\000"
 12041 0e70 01       		.byte	0x1
 12042 0e71 2102     		.2byte	0x221
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 266


 12043 0e73 B70E0000 		.4byte	0xeb7
 12044 0e77 02       		.uleb128 0x2
 12045 0e78 91       		.byte	0x91
 12046 0e79 70       		.sleb128 -16
 12047 0e7a 1B       		.uleb128 0x1b
 12048 0e7b ED110000 		.4byte	.LASF209
 12049 0e7f 01       		.byte	0x1
 12050 0e80 2202     		.2byte	0x222
 12051 0e82 81000000 		.4byte	0x81
 12052 0e86 02       		.uleb128 0x2
 12053 0e87 91       		.byte	0x91
 12054 0e88 6F       		.sleb128 -17
 12055 0e89 1B       		.uleb128 0x1b
 12056 0e8a D40B0000 		.4byte	.LASF210
 12057 0e8e 01       		.byte	0x1
 12058 0e8f 2402     		.2byte	0x224
 12059 0e91 55070000 		.4byte	0x755
 12060 0e95 05       		.uleb128 0x5
 12061 0e96 03       		.byte	0x3
 12062 0e97 8C000000 		.4byte	current_emg.10261
 12063 0e9b 20       		.uleb128 0x20
 12064 0e9c 00000000 		.4byte	.Ldebug_ranges0+0
 12065 0ea0 1B       		.uleb128 0x1b
 12066 0ea1 54010000 		.4byte	.LASF211
 12067 0ea5 01       		.byte	0x1
 12068 0ea6 4902     		.2byte	0x249
 12069 0ea8 BD000000 		.4byte	0xbd
 12070 0eac 02       		.uleb128 0x2
 12071 0ead 91       		.byte	0x91
 12072 0eae 60       		.sleb128 -32
 12073 0eaf 00       		.byte	0
 12074 0eb0 00       		.byte	0
 12075 0eb1 0C       		.uleb128 0xc
 12076 0eb2 04       		.byte	0x4
 12077 0eb3 A5010000 		.4byte	0x1a5
 12078 0eb7 0C       		.uleb128 0xc
 12079 0eb8 04       		.byte	0x4
 12080 0eb9 A9040000 		.4byte	0x4a9
 12081 0ebd 21       		.uleb128 0x21
 12082 0ebe 31110000 		.4byte	.LASF212
 12083 0ec2 01       		.byte	0x1
 12084 0ec3 FC02     		.2byte	0x2fc
 12085 0ec5 00000000 		.4byte	.LFB69
 12086 0ec9 34030000 		.4byte	.LFE69-.LFB69
 12087 0ecd 01       		.uleb128 0x1
 12088 0ece 9C       		.byte	0x9c
 12089 0ecf 4D0F0000 		.4byte	0xf4d
 12090 0ed3 1E       		.uleb128 0x1e
 12091 0ed4 F5080000 		.4byte	.LASF203
 12092 0ed8 01       		.byte	0x1
 12093 0ed9 FC02     		.2byte	0x2fc
 12094 0edb 81000000 		.4byte	0x81
 12095 0edf 02       		.uleb128 0x2
 12096 0ee0 91       		.byte	0x91
 12097 0ee1 67       		.sleb128 -25
 12098 0ee2 1E       		.uleb128 0x1e
 12099 0ee3 5A070000 		.4byte	.LASF204
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 267


 12100 0ee7 01       		.byte	0x1
 12101 0ee8 FC02     		.2byte	0x2fc
 12102 0eea B10E0000 		.4byte	0xeb1
 12103 0eee 02       		.uleb128 0x2
 12104 0eef 91       		.byte	0x91
 12105 0ef0 60       		.sleb128 -32
 12106 0ef1 1E       		.uleb128 0x1e
 12107 0ef2 22120000 		.4byte	.LASF205
 12108 0ef6 01       		.byte	0x1
 12109 0ef7 FC02     		.2byte	0x2fc
 12110 0ef9 B10E0000 		.4byte	0xeb1
 12111 0efd 02       		.uleb128 0x2
 12112 0efe 91       		.byte	0x91
 12113 0eff 5C       		.sleb128 -36
 12114 0f00 22       		.uleb128 0x22
 12115 0f01 18000000 		.4byte	.Ldebug_ranges0+0x18
 12116 0f05 280F0000 		.4byte	0xf28
 12117 0f09 1B       		.uleb128 0x1b
 12118 0f0a 54010000 		.4byte	.LASF211
 12119 0f0e 01       		.byte	0x1
 12120 0f0f 0303     		.2byte	0x303
 12121 0f11 BD000000 		.4byte	0xbd
 12122 0f15 02       		.uleb128 0x2
 12123 0f16 91       		.byte	0x91
 12124 0f17 74       		.sleb128 -12
 12125 0f18 1B       		.uleb128 0x1b
 12126 0f19 5B020000 		.4byte	.LASF213
 12127 0f1d 01       		.byte	0x1
 12128 0f1e 0403     		.2byte	0x304
 12129 0f20 BD000000 		.4byte	0xbd
 12130 0f24 02       		.uleb128 0x2
 12131 0f25 91       		.byte	0x91
 12132 0f26 70       		.sleb128 -16
 12133 0f27 00       		.byte	0
 12134 0f28 20       		.uleb128 0x20
 12135 0f29 30000000 		.4byte	.Ldebug_ranges0+0x30
 12136 0f2d 1B       		.uleb128 0x1b
 12137 0f2e 430E0000 		.4byte	.LASF214
 12138 0f32 01       		.byte	0x1
 12139 0f33 2903     		.2byte	0x329
 12140 0f35 BD000000 		.4byte	0xbd
 12141 0f39 02       		.uleb128 0x2
 12142 0f3a 91       		.byte	0x91
 12143 0f3b 6C       		.sleb128 -20
 12144 0f3c 1B       		.uleb128 0x1b
 12145 0f3d A80A0000 		.4byte	.LASF215
 12146 0f41 01       		.byte	0x1
 12147 0f42 2A03     		.2byte	0x32a
 12148 0f44 BD000000 		.4byte	0xbd
 12149 0f48 02       		.uleb128 0x2
 12150 0f49 91       		.byte	0x91
 12151 0f4a 68       		.sleb128 -24
 12152 0f4b 00       		.byte	0
 12153 0f4c 00       		.byte	0
 12154 0f4d 1A       		.uleb128 0x1a
 12155 0f4e D40A0000 		.4byte	.LASF216
 12156 0f52 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 268


 12157 0f53 5503     		.2byte	0x355
 12158 0f55 00000000 		.4byte	.LFB70
 12159 0f59 B0010000 		.4byte	.LFE70-.LFB70
 12160 0f5d 01       		.uleb128 0x1
 12161 0f5e 9C       		.byte	0x9c
 12162 0f5f C10F0000 		.4byte	0xfc1
 12163 0f63 1E       		.uleb128 0x1e
 12164 0f64 F5080000 		.4byte	.LASF203
 12165 0f68 01       		.byte	0x1
 12166 0f69 5503     		.2byte	0x355
 12167 0f6b 81000000 		.4byte	0x81
 12168 0f6f 02       		.uleb128 0x2
 12169 0f70 91       		.byte	0x91
 12170 0f71 77       		.sleb128 -9
 12171 0f72 1E       		.uleb128 0x1e
 12172 0f73 5A070000 		.4byte	.LASF204
 12173 0f77 01       		.byte	0x1
 12174 0f78 5503     		.2byte	0x355
 12175 0f7a B10E0000 		.4byte	0xeb1
 12176 0f7e 02       		.uleb128 0x2
 12177 0f7f 91       		.byte	0x91
 12178 0f80 70       		.sleb128 -16
 12179 0f81 1E       		.uleb128 0x1e
 12180 0f82 22120000 		.4byte	.LASF205
 12181 0f86 01       		.byte	0x1
 12182 0f87 5503     		.2byte	0x355
 12183 0f89 B10E0000 		.4byte	0xeb1
 12184 0f8d 02       		.uleb128 0x2
 12185 0f8e 91       		.byte	0x91
 12186 0f8f 6C       		.sleb128 -20
 12187 0f90 1E       		.uleb128 0x1e
 12188 0f91 96040000 		.4byte	.LASF207
 12189 0f95 01       		.byte	0x1
 12190 0f96 5603     		.2byte	0x356
 12191 0f98 BD000000 		.4byte	0xbd
 12192 0f9c 02       		.uleb128 0x2
 12193 0f9d 91       		.byte	0x91
 12194 0f9e 68       		.sleb128 -24
 12195 0f9f 1E       		.uleb128 0x1e
 12196 0fa0 A0040000 		.4byte	.LASF208
 12197 0fa4 01       		.byte	0x1
 12198 0fa5 5603     		.2byte	0x356
 12199 0fa7 BD000000 		.4byte	0xbd
 12200 0fab 02       		.uleb128 0x2
 12201 0fac 91       		.byte	0x91
 12202 0fad 00       		.sleb128 0
 12203 0fae 1B       		.uleb128 0x1b
 12204 0faf 450D0000 		.4byte	.LASF217
 12205 0fb3 01       		.byte	0x1
 12206 0fb4 5903     		.2byte	0x359
 12207 0fb6 81000000 		.4byte	0x81
 12208 0fba 05       		.uleb128 0x5
 12209 0fbb 03       		.byte	0x3
 12210 0fbc 8E000000 		.4byte	fsm_state.10298
 12211 0fc0 00       		.byte	0
 12212 0fc1 23       		.uleb128 0x23
 12213 0fc2 93060000 		.4byte	.LASF219
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 269


 12214 0fc6 01       		.byte	0x1
 12215 0fc7 8B03     		.2byte	0x38b
 12216 0fc9 00000000 		.4byte	.LFB71
 12217 0fcd 0C070000 		.4byte	.LFE71-.LFB71
 12218 0fd1 01       		.uleb128 0x1
 12219 0fd2 9C       		.byte	0x9c
 12220 0fd3 78110000 		.4byte	0x1178
 12221 0fd7 1B       		.uleb128 0x1b
 12222 0fd8 AF010000 		.4byte	.LASF220
 12223 0fdc 01       		.byte	0x1
 12224 0fdd 8D03     		.2byte	0x38d
 12225 0fdf BD000000 		.4byte	0xbd
 12226 0fe3 02       		.uleb128 0x2
 12227 0fe4 91       		.byte	0x91
 12228 0fe5 74       		.sleb128 -12
 12229 0fe6 1B       		.uleb128 0x1b
 12230 0fe7 C70C0000 		.4byte	.LASF221
 12231 0feb 01       		.byte	0x1
 12232 0fec 8E03     		.2byte	0x38e
 12233 0fee BD000000 		.4byte	0xbd
 12234 0ff2 03       		.uleb128 0x3
 12235 0ff3 91       		.byte	0x91
 12236 0ff4 B07F     		.sleb128 -80
 12237 0ff6 1B       		.uleb128 0x1b
 12238 0ff7 FE100000 		.4byte	.LASF222
 12239 0ffb 01       		.byte	0x1
 12240 0ffc 8F03     		.2byte	0x38f
 12241 0ffe BD000000 		.4byte	0xbd
 12242 1002 03       		.uleb128 0x3
 12243 1003 91       		.byte	0x91
 12244 1004 AC7F     		.sleb128 -84
 12245 1006 1B       		.uleb128 0x1b
 12246 1007 0B0C0000 		.4byte	.LASF223
 12247 100b 01       		.byte	0x1
 12248 100c 9003     		.2byte	0x390
 12249 100e BD000000 		.4byte	0xbd
 12250 1012 02       		.uleb128 0x2
 12251 1013 91       		.byte	0x91
 12252 1014 70       		.sleb128 -16
 12253 1015 1B       		.uleb128 0x1b
 12254 1016 080D0000 		.4byte	.LASF198
 12255 101a 01       		.byte	0x1
 12256 101b 9203     		.2byte	0x392
 12257 101d 81000000 		.4byte	0x81
 12258 1021 02       		.uleb128 0x2
 12259 1022 91       		.byte	0x91
 12260 1023 6F       		.sleb128 -17
 12261 1024 1B       		.uleb128 0x1b
 12262 1025 EF030000 		.4byte	.LASF224
 12263 1029 01       		.byte	0x1
 12264 102a 9403     		.2byte	0x394
 12265 102c B70E0000 		.4byte	0xeb7
 12266 1030 02       		.uleb128 0x2
 12267 1031 91       		.byte	0x91
 12268 1032 68       		.sleb128 -24
 12269 1033 1B       		.uleb128 0x1b
 12270 1034 63030000 		.4byte	.LASF225
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 270


 12271 1038 01       		.byte	0x1
 12272 1039 9503     		.2byte	0x395
 12273 103b 81000000 		.4byte	0x81
 12274 103f 02       		.uleb128 0x2
 12275 1040 91       		.byte	0x91
 12276 1041 67       		.sleb128 -25
 12277 1042 1F       		.uleb128 0x1f
 12278 1043 6B5F7000 		.ascii	"k_p\000"
 12279 1047 01       		.byte	0x1
 12280 1048 9703     		.2byte	0x397
 12281 104a BD000000 		.4byte	0xbd
 12282 104e 02       		.uleb128 0x2
 12283 104f 91       		.byte	0x91
 12284 1050 60       		.sleb128 -32
 12285 1051 1F       		.uleb128 0x1f
 12286 1052 6B5F6900 		.ascii	"k_i\000"
 12287 1056 01       		.byte	0x1
 12288 1057 9803     		.2byte	0x398
 12289 1059 BD000000 		.4byte	0xbd
 12290 105d 02       		.uleb128 0x2
 12291 105e 91       		.byte	0x91
 12292 105f 5C       		.sleb128 -36
 12293 1060 1F       		.uleb128 0x1f
 12294 1061 6B5F6400 		.ascii	"k_d\000"
 12295 1065 01       		.byte	0x1
 12296 1066 9903     		.2byte	0x399
 12297 1068 BD000000 		.4byte	0xbd
 12298 106c 02       		.uleb128 0x2
 12299 106d 91       		.byte	0x91
 12300 106e 58       		.sleb128 -40
 12301 106f 1B       		.uleb128 0x1b
 12302 1070 EE0D0000 		.4byte	.LASF77
 12303 1074 01       		.byte	0x1
 12304 1075 9B03     		.2byte	0x39b
 12305 1077 BD000000 		.4byte	0xbd
 12306 107b 02       		.uleb128 0x2
 12307 107c 91       		.byte	0x91
 12308 107d 54       		.sleb128 -44
 12309 107e 1B       		.uleb128 0x1b
 12310 107f 33060000 		.4byte	.LASF78
 12311 1083 01       		.byte	0x1
 12312 1084 9C03     		.2byte	0x39c
 12313 1086 BD000000 		.4byte	0xbd
 12314 108a 02       		.uleb128 0x2
 12315 108b 91       		.byte	0x91
 12316 108c 50       		.sleb128 -48
 12317 108d 1B       		.uleb128 0x1b
 12318 108e 04060000 		.4byte	.LASF79
 12319 1092 01       		.byte	0x1
 12320 1093 9D03     		.2byte	0x39d
 12321 1095 BD000000 		.4byte	0xbd
 12322 1099 02       		.uleb128 0x2
 12323 109a 91       		.byte	0x91
 12324 109b 4C       		.sleb128 -52
 12325 109c 1B       		.uleb128 0x1b
 12326 109d D7100000 		.4byte	.LASF80
 12327 10a1 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 271


 12328 10a2 9F03     		.2byte	0x39f
 12329 10a4 BD000000 		.4byte	0xbd
 12330 10a8 02       		.uleb128 0x2
 12331 10a9 91       		.byte	0x91
 12332 10aa 48       		.sleb128 -56
 12333 10ab 1B       		.uleb128 0x1b
 12334 10ac E3060000 		.4byte	.LASF81
 12335 10b0 01       		.byte	0x1
 12336 10b1 A003     		.2byte	0x3a0
 12337 10b3 BD000000 		.4byte	0xbd
 12338 10b7 02       		.uleb128 0x2
 12339 10b8 91       		.byte	0x91
 12340 10b9 44       		.sleb128 -60
 12341 10ba 1B       		.uleb128 0x1b
 12342 10bb E60F0000 		.4byte	.LASF82
 12343 10bf 01       		.byte	0x1
 12344 10c0 A103     		.2byte	0x3a1
 12345 10c2 BD000000 		.4byte	0xbd
 12346 10c6 02       		.uleb128 0x2
 12347 10c7 91       		.byte	0x91
 12348 10c8 40       		.sleb128 -64
 12349 10c9 1B       		.uleb128 0x1b
 12350 10ca F1060000 		.4byte	.LASF83
 12351 10ce 01       		.byte	0x1
 12352 10cf A303     		.2byte	0x3a3
 12353 10d1 BD000000 		.4byte	0xbd
 12354 10d5 03       		.uleb128 0x3
 12355 10d6 91       		.byte	0x91
 12356 10d7 BC7F     		.sleb128 -68
 12357 10d9 1B       		.uleb128 0x1b
 12358 10da 39080000 		.4byte	.LASF84
 12359 10de 01       		.byte	0x1
 12360 10df A403     		.2byte	0x3a4
 12361 10e1 BD000000 		.4byte	0xbd
 12362 10e5 03       		.uleb128 0x3
 12363 10e6 91       		.byte	0x91
 12364 10e7 B87F     		.sleb128 -72
 12365 10e9 1B       		.uleb128 0x1b
 12366 10ea 23130000 		.4byte	.LASF85
 12367 10ee 01       		.byte	0x1
 12368 10ef A503     		.2byte	0x3a5
 12369 10f1 BD000000 		.4byte	0xbd
 12370 10f5 03       		.uleb128 0x3
 12371 10f6 91       		.byte	0x91
 12372 10f7 B47F     		.sleb128 -76
 12373 10f9 1B       		.uleb128 0x1b
 12374 10fa AA060000 		.4byte	.LASF226
 12375 10fe 01       		.byte	0x1
 12376 10ff A903     		.2byte	0x3a9
 12377 1101 BD000000 		.4byte	0xbd
 12378 1105 05       		.uleb128 0x5
 12379 1106 03       		.byte	0x3
 12380 1107 90000000 		.4byte	pos_error_sum.10325
 12381 110b 1B       		.uleb128 0x1b
 12382 110c DE040000 		.4byte	.LASF227
 12383 1110 01       		.byte	0x1
 12384 1111 AA03     		.2byte	0x3aa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 272


 12385 1113 BD000000 		.4byte	0xbd
 12386 1117 05       		.uleb128 0x5
 12387 1118 03       		.byte	0x3
 12388 1119 9C000000 		.4byte	curr_error_sum.10326
 12389 111d 1B       		.uleb128 0x1b
 12390 111e 760C0000 		.4byte	.LASF228
 12391 1122 01       		.byte	0x1
 12392 1123 AC03     		.2byte	0x3ac
 12393 1125 BD000000 		.4byte	0xbd
 12394 1129 05       		.uleb128 0x5
 12395 112a 03       		.byte	0x3
 12396 112b 94000000 		.4byte	prev_pos_err.10327
 12397 112f 1B       		.uleb128 0x1b
 12398 1130 CD0D0000 		.4byte	.LASF229
 12399 1134 01       		.byte	0x1
 12400 1135 AD03     		.2byte	0x3ad
 12401 1137 BD000000 		.4byte	0xbd
 12402 113b 05       		.uleb128 0x5
 12403 113c 03       		.byte	0x3
 12404 113d A0000000 		.4byte	prev_curr_err.10328
 12405 1141 1B       		.uleb128 0x1b
 12406 1142 49100000 		.4byte	.LASF230
 12407 1146 01       		.byte	0x1
 12408 1147 AE03     		.2byte	0x3ae
 12409 1149 BD000000 		.4byte	0xbd
 12410 114d 05       		.uleb128 0x5
 12411 114e 03       		.byte	0x3
 12412 114f A4000000 		.4byte	prev_pwm.10329
 12413 1153 1B       		.uleb128 0x1b
 12414 1154 39060000 		.4byte	.LASF231
 12415 1158 01       		.byte	0x1
 12416 1159 B003     		.2byte	0x3b0
 12417 115b 81000000 		.4byte	0x81
 12418 115f 05       		.uleb128 0x5
 12419 1160 03       		.byte	0x3
 12420 1161 98000000 		.4byte	motor_dir.10330
 12421 1165 1B       		.uleb128 0x1b
 12422 1166 16070000 		.4byte	.LASF232
 12423 116a 01       		.byte	0x1
 12424 116b B103     		.2byte	0x3b1
 12425 116d 99000000 		.4byte	0x99
 12426 1171 05       		.uleb128 0x5
 12427 1172 03       		.byte	0x3
 12428 1173 A8000000 		.4byte	position_counter.10331
 12429 1177 00       		.byte	0
 12430 1178 1A       		.uleb128 0x1a
 12431 1179 BB050000 		.4byte	.LASF233
 12432 117d 01       		.byte	0x1
 12433 117e BB04     		.2byte	0x4bb
 12434 1180 00000000 		.4byte	.LFB72
 12435 1184 70090000 		.4byte	.LFE72-.LFB72
 12436 1188 01       		.uleb128 0x1
 12437 1189 9C       		.byte	0x9c
 12438 118a 31130000 		.4byte	0x1331
 12439 118e 24       		.uleb128 0x24
 12440 118f 69647800 		.ascii	"idx\000"
 12441 1193 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 273


 12442 1194 BB04     		.2byte	0x4bb
 12443 1196 81000000 		.4byte	0x81
 12444 119a 03       		.uleb128 0x3
 12445 119b 91       		.byte	0x91
 12446 119c A77F     		.sleb128 -89
 12447 119e 1B       		.uleb128 0x1b
 12448 119f AF010000 		.4byte	.LASF220
 12449 11a3 01       		.byte	0x1
 12450 11a4 BD04     		.2byte	0x4bd
 12451 11a6 BD000000 		.4byte	0xbd
 12452 11aa 02       		.uleb128 0x2
 12453 11ab 91       		.byte	0x91
 12454 11ac 6C       		.sleb128 -20
 12455 11ad 1B       		.uleb128 0x1b
 12456 11ae C70C0000 		.4byte	.LASF221
 12457 11b2 01       		.byte	0x1
 12458 11b3 BE04     		.2byte	0x4be
 12459 11b5 BD000000 		.4byte	0xbd
 12460 11b9 03       		.uleb128 0x3
 12461 11ba 91       		.byte	0x91
 12462 11bb AC7F     		.sleb128 -84
 12463 11bd 1B       		.uleb128 0x1b
 12464 11be FE100000 		.4byte	.LASF222
 12465 11c2 01       		.byte	0x1
 12466 11c3 BF04     		.2byte	0x4bf
 12467 11c5 BD000000 		.4byte	0xbd
 12468 11c9 03       		.uleb128 0x3
 12469 11ca 91       		.byte	0x91
 12470 11cb A87F     		.sleb128 -88
 12471 11cd 1B       		.uleb128 0x1b
 12472 11ce 0B0C0000 		.4byte	.LASF223
 12473 11d2 01       		.byte	0x1
 12474 11d3 C004     		.2byte	0x4c0
 12475 11d5 BD000000 		.4byte	0xbd
 12476 11d9 02       		.uleb128 0x2
 12477 11da 91       		.byte	0x91
 12478 11db 68       		.sleb128 -24
 12479 11dc 1F       		.uleb128 0x1f
 12480 11dd 4D4F5400 		.ascii	"MOT\000"
 12481 11e1 01       		.byte	0x1
 12482 11e2 C204     		.2byte	0x4c2
 12483 11e4 B70E0000 		.4byte	0xeb7
 12484 11e8 02       		.uleb128 0x2
 12485 11e9 91       		.byte	0x91
 12486 11ea 64       		.sleb128 -28
 12487 11eb 1B       		.uleb128 0x1b
 12488 11ec ED110000 		.4byte	.LASF209
 12489 11f0 01       		.byte	0x1
 12490 11f1 C304     		.2byte	0x4c3
 12491 11f3 81000000 		.4byte	0x81
 12492 11f7 02       		.uleb128 0x2
 12493 11f8 91       		.byte	0x91
 12494 11f9 63       		.sleb128 -29
 12495 11fa 1F       		.uleb128 0x1f
 12496 11fb 6B5F7000 		.ascii	"k_p\000"
 12497 11ff 01       		.byte	0x1
 12498 1200 C504     		.2byte	0x4c5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 274


 12499 1202 BD000000 		.4byte	0xbd
 12500 1206 02       		.uleb128 0x2
 12501 1207 91       		.byte	0x91
 12502 1208 5C       		.sleb128 -36
 12503 1209 1F       		.uleb128 0x1f
 12504 120a 6B5F6900 		.ascii	"k_i\000"
 12505 120e 01       		.byte	0x1
 12506 120f C604     		.2byte	0x4c6
 12507 1211 BD000000 		.4byte	0xbd
 12508 1215 02       		.uleb128 0x2
 12509 1216 91       		.byte	0x91
 12510 1217 58       		.sleb128 -40
 12511 1218 1F       		.uleb128 0x1f
 12512 1219 6B5F6400 		.ascii	"k_d\000"
 12513 121d 01       		.byte	0x1
 12514 121e C704     		.2byte	0x4c7
 12515 1220 BD000000 		.4byte	0xbd
 12516 1224 02       		.uleb128 0x2
 12517 1225 91       		.byte	0x91
 12518 1226 54       		.sleb128 -44
 12519 1227 1B       		.uleb128 0x1b
 12520 1228 EE0D0000 		.4byte	.LASF77
 12521 122c 01       		.byte	0x1
 12522 122d C904     		.2byte	0x4c9
 12523 122f BD000000 		.4byte	0xbd
 12524 1233 02       		.uleb128 0x2
 12525 1234 91       		.byte	0x91
 12526 1235 50       		.sleb128 -48
 12527 1236 1B       		.uleb128 0x1b
 12528 1237 33060000 		.4byte	.LASF78
 12529 123b 01       		.byte	0x1
 12530 123c CA04     		.2byte	0x4ca
 12531 123e BD000000 		.4byte	0xbd
 12532 1242 02       		.uleb128 0x2
 12533 1243 91       		.byte	0x91
 12534 1244 4C       		.sleb128 -52
 12535 1245 1B       		.uleb128 0x1b
 12536 1246 04060000 		.4byte	.LASF79
 12537 124a 01       		.byte	0x1
 12538 124b CB04     		.2byte	0x4cb
 12539 124d BD000000 		.4byte	0xbd
 12540 1251 02       		.uleb128 0x2
 12541 1252 91       		.byte	0x91
 12542 1253 48       		.sleb128 -56
 12543 1254 1B       		.uleb128 0x1b
 12544 1255 D7100000 		.4byte	.LASF80
 12545 1259 01       		.byte	0x1
 12546 125a CD04     		.2byte	0x4cd
 12547 125c BD000000 		.4byte	0xbd
 12548 1260 02       		.uleb128 0x2
 12549 1261 91       		.byte	0x91
 12550 1262 44       		.sleb128 -60
 12551 1263 1B       		.uleb128 0x1b
 12552 1264 E3060000 		.4byte	.LASF81
 12553 1268 01       		.byte	0x1
 12554 1269 CE04     		.2byte	0x4ce
 12555 126b BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 275


 12556 126f 02       		.uleb128 0x2
 12557 1270 91       		.byte	0x91
 12558 1271 40       		.sleb128 -64
 12559 1272 1B       		.uleb128 0x1b
 12560 1273 E60F0000 		.4byte	.LASF82
 12561 1277 01       		.byte	0x1
 12562 1278 CF04     		.2byte	0x4cf
 12563 127a BD000000 		.4byte	0xbd
 12564 127e 03       		.uleb128 0x3
 12565 127f 91       		.byte	0x91
 12566 1280 BC7F     		.sleb128 -68
 12567 1282 1B       		.uleb128 0x1b
 12568 1283 F1060000 		.4byte	.LASF83
 12569 1287 01       		.byte	0x1
 12570 1288 D104     		.2byte	0x4d1
 12571 128a BD000000 		.4byte	0xbd
 12572 128e 03       		.uleb128 0x3
 12573 128f 91       		.byte	0x91
 12574 1290 B87F     		.sleb128 -72
 12575 1292 1B       		.uleb128 0x1b
 12576 1293 39080000 		.4byte	.LASF84
 12577 1297 01       		.byte	0x1
 12578 1298 D204     		.2byte	0x4d2
 12579 129a BD000000 		.4byte	0xbd
 12580 129e 03       		.uleb128 0x3
 12581 129f 91       		.byte	0x91
 12582 12a0 B47F     		.sleb128 -76
 12583 12a2 1B       		.uleb128 0x1b
 12584 12a3 23130000 		.4byte	.LASF85
 12585 12a7 01       		.byte	0x1
 12586 12a8 D304     		.2byte	0x4d3
 12587 12aa BD000000 		.4byte	0xbd
 12588 12ae 03       		.uleb128 0x3
 12589 12af 91       		.byte	0x91
 12590 12b0 B07F     		.sleb128 -80
 12591 12b2 1B       		.uleb128 0x1b
 12592 12b3 AA060000 		.4byte	.LASF226
 12593 12b7 01       		.byte	0x1
 12594 12b8 D704     		.2byte	0x4d7
 12595 12ba A0020000 		.4byte	0x2a0
 12596 12be 05       		.uleb128 0x5
 12597 12bf 03       		.byte	0x3
 12598 12c0 AC000000 		.4byte	pos_error_sum.10358
 12599 12c4 1B       		.uleb128 0x1b
 12600 12c5 DE040000 		.4byte	.LASF227
 12601 12c9 01       		.byte	0x1
 12602 12ca D804     		.2byte	0x4d8
 12603 12cc A0020000 		.4byte	0x2a0
 12604 12d0 05       		.uleb128 0x5
 12605 12d1 03       		.byte	0x3
 12606 12d2 C0000000 		.4byte	curr_error_sum.10359
 12607 12d6 1B       		.uleb128 0x1b
 12608 12d7 760C0000 		.4byte	.LASF228
 12609 12db 01       		.byte	0x1
 12610 12dc DA04     		.2byte	0x4da
 12611 12de A0020000 		.4byte	0x2a0
 12612 12e2 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 276


 12613 12e3 03       		.byte	0x3
 12614 12e4 B4000000 		.4byte	prev_pos_err.10360
 12615 12e8 1B       		.uleb128 0x1b
 12616 12e9 CD0D0000 		.4byte	.LASF229
 12617 12ed 01       		.byte	0x1
 12618 12ee DB04     		.2byte	0x4db
 12619 12f0 A0020000 		.4byte	0x2a0
 12620 12f4 05       		.uleb128 0x5
 12621 12f5 03       		.byte	0x3
 12622 12f6 C8000000 		.4byte	prev_curr_err.10361
 12623 12fa 1B       		.uleb128 0x1b
 12624 12fb 49100000 		.4byte	.LASF230
 12625 12ff 01       		.byte	0x1
 12626 1300 DC04     		.2byte	0x4dc
 12627 1302 A0020000 		.4byte	0x2a0
 12628 1306 05       		.uleb128 0x5
 12629 1307 03       		.byte	0x3
 12630 1308 D0000000 		.4byte	prev_pwm.10362
 12631 130c 1B       		.uleb128 0x1b
 12632 130d 39060000 		.4byte	.LASF231
 12633 1311 01       		.byte	0x1
 12634 1312 DE04     		.2byte	0x4de
 12635 1314 55070000 		.4byte	0x755
 12636 1318 05       		.uleb128 0x5
 12637 1319 03       		.byte	0x3
 12638 131a BC000000 		.4byte	motor_dir.10363
 12639 131e 1B       		.uleb128 0x1b
 12640 131f 16070000 		.4byte	.LASF232
 12641 1323 01       		.byte	0x1
 12642 1324 DF04     		.2byte	0x4df
 12643 1326 CA030000 		.4byte	0x3ca
 12644 132a 05       		.uleb128 0x5
 12645 132b 03       		.byte	0x3
 12646 132c D8000000 		.4byte	position_counter.10364
 12647 1330 00       		.byte	0
 12648 1331 1A       		.uleb128 0x1a
 12649 1332 930E0000 		.4byte	.LASF234
 12650 1336 01       		.byte	0x1
 12651 1337 3706     		.2byte	0x637
 12652 1339 00000000 		.4byte	.LFB73
 12653 133d DC000000 		.4byte	.LFE73-.LFB73
 12654 1341 01       		.uleb128 0x1
 12655 1342 9C       		.byte	0x9c
 12656 1343 82130000 		.4byte	0x1382
 12657 1347 24       		.uleb128 0x24
 12658 1348 69647800 		.ascii	"idx\000"
 12659 134c 01       		.byte	0x1
 12660 134d 3706     		.2byte	0x637
 12661 134f 81000000 		.4byte	0x81
 12662 1353 02       		.uleb128 0x2
 12663 1354 91       		.byte	0x91
 12664 1355 6F       		.sleb128 -17
 12665 1356 25       		.uleb128 0x25
 12666 1357 6900     		.ascii	"i\000"
 12667 1359 01       		.byte	0x1
 12668 135a 3806     		.2byte	0x638
 12669 135c 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 277


 12670 1360 1B       		.uleb128 0x1b
 12671 1361 AF010000 		.4byte	.LASF220
 12672 1365 01       		.byte	0x1
 12673 1366 3906     		.2byte	0x639
 12674 1368 B1000000 		.4byte	0xb1
 12675 136c 02       		.uleb128 0x2
 12676 136d 91       		.byte	0x91
 12677 136e 76       		.sleb128 -10
 12678 136f 1B       		.uleb128 0x1b
 12679 1370 39060000 		.4byte	.LASF231
 12680 1374 01       		.byte	0x1
 12681 1375 3D06     		.2byte	0x63d
 12682 1377 55070000 		.4byte	0x755
 12683 137b 05       		.uleb128 0x5
 12684 137c 03       		.byte	0x3
 12685 137d E0000000 		.4byte	motor_dir.10379
 12686 1381 00       		.byte	0
 12687 1382 1A       		.uleb128 0x1a
 12688 1383 0D040000 		.4byte	.LASF235
 12689 1387 01       		.byte	0x1
 12690 1388 6D06     		.2byte	0x66d
 12691 138a 00000000 		.4byte	.LFB74
 12692 138e 00080000 		.4byte	.LFE74-.LFB74
 12693 1392 01       		.uleb128 0x1
 12694 1393 9C       		.byte	0x9c
 12695 1394 0A150000 		.4byte	0x150a
 12696 1398 1E       		.uleb128 0x1e
 12697 1399 2A010000 		.4byte	.LASF236
 12698 139d 01       		.byte	0x1
 12699 139e 6D06     		.2byte	0x66d
 12700 13a0 81000000 		.4byte	0x81
 12701 13a4 03       		.uleb128 0x3
 12702 13a5 91       		.byte	0x91
 12703 13a6 BF7F     		.sleb128 -65
 12704 13a8 1E       		.uleb128 0x1e
 12705 13a9 F70B0000 		.4byte	.LASF237
 12706 13ad 01       		.byte	0x1
 12707 13ae 6D06     		.2byte	0x66d
 12708 13b0 81000000 		.4byte	0x81
 12709 13b4 03       		.uleb128 0x3
 12710 13b5 91       		.byte	0x91
 12711 13b6 BE7F     		.sleb128 -66
 12712 13b8 1B       		.uleb128 0x1b
 12713 13b9 F4070000 		.4byte	.LASF238
 12714 13bd 01       		.byte	0x1
 12715 13be 6F06     		.2byte	0x66f
 12716 13c0 81000000 		.4byte	0x81
 12717 13c4 02       		.uleb128 0x2
 12718 13c5 91       		.byte	0x91
 12719 13c6 67       		.sleb128 -25
 12720 13c7 1F       		.uleb128 0x1f
 12721 13c8 6A6A00   		.ascii	"jj\000"
 12722 13cb 01       		.byte	0x1
 12723 13cc 7206     		.2byte	0x672
 12724 13ce 81000000 		.4byte	0x81
 12725 13d2 02       		.uleb128 0x2
 12726 13d3 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 278


 12727 13d4 66       		.sleb128 -26
 12728 13d5 1B       		.uleb128 0x1b
 12729 13d6 D7030000 		.4byte	.LASF239
 12730 13da 01       		.byte	0x1
 12731 13db 7406     		.2byte	0x674
 12732 13dd 0A150000 		.4byte	0x150a
 12733 13e1 02       		.uleb128 0x2
 12734 13e2 91       		.byte	0x91
 12735 13e3 40       		.sleb128 -64
 12736 13e4 1B       		.uleb128 0x1b
 12737 13e5 5E110000 		.4byte	.LASF240
 12738 13e9 01       		.byte	0x1
 12739 13ea 7506     		.2byte	0x675
 12740 13ec B1000000 		.4byte	0xb1
 12741 13f0 02       		.uleb128 0x2
 12742 13f1 91       		.byte	0x91
 12743 13f2 64       		.sleb128 -28
 12744 13f3 1B       		.uleb128 0x1b
 12745 13f4 B80D0000 		.4byte	.LASF241
 12746 13f8 01       		.byte	0x1
 12747 13f9 7606     		.2byte	0x676
 12748 13fb BD000000 		.4byte	0xbd
 12749 13ff 02       		.uleb128 0x2
 12750 1400 91       		.byte	0x91
 12751 1401 54       		.sleb128 -44
 12752 1402 1B       		.uleb128 0x1b
 12753 1403 ED0F0000 		.4byte	.LASF242
 12754 1407 01       		.byte	0x1
 12755 1408 7706     		.2byte	0x677
 12756 140a BD000000 		.4byte	0xbd
 12757 140e 02       		.uleb128 0x2
 12758 140f 91       		.byte	0x91
 12759 1410 60       		.sleb128 -32
 12760 1411 1B       		.uleb128 0x1b
 12761 1412 27050000 		.4byte	.LASF243
 12762 1416 01       		.byte	0x1
 12763 1417 7806     		.2byte	0x678
 12764 1419 BD000000 		.4byte	0xbd
 12765 141d 02       		.uleb128 0x2
 12766 141e 91       		.byte	0x91
 12767 141f 4C       		.sleb128 -52
 12768 1420 1B       		.uleb128 0x1b
 12769 1421 C80F0000 		.4byte	.LASF244
 12770 1425 01       		.byte	0x1
 12771 1426 7906     		.2byte	0x679
 12772 1428 BD000000 		.4byte	0xbd
 12773 142c 02       		.uleb128 0x2
 12774 142d 91       		.byte	0x91
 12775 142e 50       		.sleb128 -48
 12776 142f 1B       		.uleb128 0x1b
 12777 1430 830C0000 		.4byte	.LASF245
 12778 1434 01       		.byte	0x1
 12779 1435 7A06     		.2byte	0x67a
 12780 1437 A5000000 		.4byte	0xa5
 12781 143b 02       		.uleb128 0x2
 12782 143c 91       		.byte	0x91
 12783 143d 5F       		.sleb128 -33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 279


 12784 143e 1B       		.uleb128 0x1b
 12785 143f 120D0000 		.4byte	.LASF246
 12786 1443 01       		.byte	0x1
 12787 1444 7C06     		.2byte	0x67c
 12788 1446 1A150000 		.4byte	0x151a
 12789 144a 05       		.uleb128 0x5
 12790 144b 03       		.byte	0x3
 12791 144c E4000000 		.4byte	last_value_encoder.10396
 12792 1450 1B       		.uleb128 0x1b
 12793 1451 A8070000 		.4byte	.LASF247
 12794 1455 01       		.byte	0x1
 12795 1456 7D06     		.2byte	0x67d
 12796 1458 1A150000 		.4byte	0x151a
 12797 145c 05       		.uleb128 0x5
 12798 145d 03       		.byte	0x3
 12799 145e FC000000 		.4byte	comp_value_encoder.10397
 12800 1462 1B       		.uleb128 0x1b
 12801 1463 21040000 		.4byte	.LASF248
 12802 1467 01       		.byte	0x1
 12803 1468 7E06     		.2byte	0x67e
 12804 146a 30150000 		.4byte	0x1530
 12805 146e 05       		.uleb128 0x5
 12806 146f 03       		.byte	0x3
 12807 1470 14010000 		.4byte	error.10398
 12808 1474 1B       		.uleb128 0x1b
 12809 1475 A60F0000 		.4byte	.LASF249
 12810 1479 01       		.byte	0x1
 12811 147a 8006     		.2byte	0x680
 12812 147c 55070000 		.4byte	0x755
 12813 1480 05       		.uleb128 0x5
 12814 1481 03       		.byte	0x3
 12815 1482 04000000 		.4byte	only_first_time.10399
 12816 1486 1B       		.uleb128 0x1b
 12817 1487 92030000 		.4byte	.LASF250
 12818 148b 01       		.byte	0x1
 12819 148c 8106     		.2byte	0x681
 12820 148e 55070000 		.4byte	0x755
 12821 1492 05       		.uleb128 0x5
 12822 1493 03       		.byte	0x3
 12823 1494 68010000 		.4byte	safe_startup_motor_activation.10400
 12824 1498 1B       		.uleb128 0x1b
 12825 1499 98000000 		.4byte	.LASF251
 12826 149d 01       		.byte	0x1
 12827 149e 8206     		.2byte	0x682
 12828 14a0 55070000 		.4byte	0x755
 12829 14a4 05       		.uleb128 0x5
 12830 14a5 03       		.byte	0x3
 12831 14a6 64010000 		.4byte	one_time_execute.10401
 12832 14aa 1B       		.uleb128 0x1b
 12833 14ab 150B0000 		.4byte	.LASF252
 12834 14af 01       		.byte	0x1
 12835 14b0 8306     		.2byte	0x683
 12836 14b2 CA030000 		.4byte	0x3ca
 12837 14b6 05       		.uleb128 0x5
 12838 14b7 03       		.byte	0x3
 12839 14b8 6C010000 		.4byte	count_startup_motor.10402
 12840 14bc 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 280


 12841 14bd 360A0000 		.4byte	.LASF253
 12842 14c1 01       		.byte	0x1
 12843 14c2 8506     		.2byte	0x685
 12844 14c4 1A150000 		.4byte	0x151a
 12845 14c8 05       		.uleb128 0x5
 12846 14c9 03       		.byte	0x3
 12847 14ca 1C010000 		.4byte	v_value.10403
 12848 14ce 1B       		.uleb128 0x1b
 12849 14cf 1A130000 		.4byte	.LASF254
 12850 14d3 01       		.byte	0x1
 12851 14d4 8606     		.2byte	0x686
 12852 14d6 1A150000 		.4byte	0x151a
 12853 14da 05       		.uleb128 0x5
 12854 14db 03       		.byte	0x3
 12855 14dc 34010000 		.4byte	vv_value.10404
 12856 14e0 1B       		.uleb128 0x1b
 12857 14e1 FD010000 		.4byte	.LASF255
 12858 14e5 01       		.byte	0x1
 12859 14e6 8706     		.2byte	0x687
 12860 14e8 1A150000 		.4byte	0x151a
 12861 14ec 05       		.uleb128 0x5
 12862 14ed 03       		.byte	0x3
 12863 14ee 4C010000 		.4byte	vvv_value.10405
 12864 14f2 1C       		.uleb128 0x1c
 12865 14f3 86000000 		.4byte	.LBB9
 12866 14f7 6A000000 		.4byte	.LBE9-.LBB9
 12867 14fb 1F       		.uleb128 0x1f
 12868 14fc 6A00     		.ascii	"j\000"
 12869 14fe 01       		.byte	0x1
 12870 14ff 9706     		.2byte	0x697
 12871 1501 68000000 		.4byte	0x68
 12872 1505 02       		.uleb128 0x2
 12873 1506 91       		.byte	0x91
 12874 1507 58       		.sleb128 -40
 12875 1508 00       		.byte	0
 12876 1509 00       		.byte	0
 12877 150a 07       		.uleb128 0x7
 12878 150b 99000000 		.4byte	0x99
 12879 150f 1A150000 		.4byte	0x151a
 12880 1513 08       		.uleb128 0x8
 12881 1514 0E010000 		.4byte	0x10e
 12882 1518 02       		.byte	0x2
 12883 1519 00       		.byte	0
 12884 151a 07       		.uleb128 0x7
 12885 151b BD000000 		.4byte	0xbd
 12886 151f 30150000 		.4byte	0x1530
 12887 1523 08       		.uleb128 0x8
 12888 1524 0E010000 		.4byte	0x10e
 12889 1528 01       		.byte	0x1
 12890 1529 08       		.uleb128 0x8
 12891 152a 0E010000 		.4byte	0x10e
 12892 152e 02       		.byte	0x2
 12893 152f 00       		.byte	0
 12894 1530 07       		.uleb128 0x7
 12895 1531 81000000 		.4byte	0x81
 12896 1535 46150000 		.4byte	0x1546
 12897 1539 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 281


 12898 153a 0E010000 		.4byte	0x10e
 12899 153e 01       		.byte	0x1
 12900 153f 08       		.uleb128 0x8
 12901 1540 0E010000 		.4byte	0x10e
 12902 1544 02       		.byte	0x2
 12903 1545 00       		.byte	0
 12904 1546 23       		.uleb128 0x23
 12905 1547 7A0E0000 		.4byte	.LASF256
 12906 154b 01       		.byte	0x1
 12907 154c 4A07     		.2byte	0x74a
 12908 154e 00000000 		.4byte	.LFB75
 12909 1552 D8120000 		.4byte	.LFE75-.LFB75
 12910 1556 01       		.uleb128 0x1
 12911 1557 9C       		.byte	0x9c
 12912 1558 32160000 		.4byte	0x1632
 12913 155c 1B       		.uleb128 0x1b
 12914 155d 2C0E0000 		.4byte	.LASF257
 12915 1561 01       		.byte	0x1
 12916 1562 5E07     		.2byte	0x75e
 12917 1564 BD000000 		.4byte	0xbd
 12918 1568 02       		.uleb128 0x2
 12919 1569 91       		.byte	0x91
 12920 156a 64       		.sleb128 -28
 12921 156b 1B       		.uleb128 0x1b
 12922 156c 6F0F0000 		.4byte	.LASF258
 12923 1570 01       		.byte	0x1
 12924 1571 6007     		.2byte	0x760
 12925 1573 8D000000 		.4byte	0x8d
 12926 1577 05       		.uleb128 0x5
 12927 1578 03       		.byte	0x3
 12928 1579 7C010000 		.4byte	emg_counter_1.10422
 12929 157d 1B       		.uleb128 0x1b
 12930 157e 7D0F0000 		.4byte	.LASF259
 12931 1582 01       		.byte	0x1
 12932 1583 6107     		.2byte	0x761
 12933 1585 8D000000 		.4byte	0x8d
 12934 1589 05       		.uleb128 0x5
 12935 158a 03       		.byte	0x3
 12936 158b 7E010000 		.4byte	emg_counter_2.10423
 12937 158f 1B       		.uleb128 0x1b
 12938 1590 C1020000 		.4byte	.LASF260
 12939 1594 01       		.byte	0x1
 12940 1595 6207     		.2byte	0x762
 12941 1597 8D000000 		.4byte	0x8d
 12942 159b 05       		.uleb128 0x5
 12943 159c 03       		.byte	0x3
 12944 159d 84010000 		.4byte	UD_counter.10424
 12945 15a1 1B       		.uleb128 0x1b
 12946 15a2 31040000 		.4byte	.LASF261
 12947 15a6 01       		.byte	0x1
 12948 15a7 6307     		.2byte	0x763
 12949 15a9 8D000000 		.4byte	0x8d
 12950 15ad 05       		.uleb128 0x5
 12951 15ae 03       		.byte	0x3
 12952 15af 8C010000 		.4byte	LR_counter.10425
 12953 15b3 1B       		.uleb128 0x1b
 12954 15b4 E90B0000 		.4byte	.LASF262
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 282


 12955 15b8 01       		.byte	0x1
 12956 15b9 6407     		.2byte	0x764
 12957 15bb BD000000 		.4byte	0xbd
 12958 15bf 05       		.uleb128 0x5
 12959 15c0 03       		.byte	0x3
 12960 15c1 80010000 		.4byte	UD_mean_value.10426
 12961 15c5 1B       		.uleb128 0x1b
 12962 15c6 73120000 		.4byte	.LASF263
 12963 15ca 01       		.byte	0x1
 12964 15cb 6507     		.2byte	0x765
 12965 15cd BD000000 		.4byte	0xbd
 12966 15d1 05       		.uleb128 0x5
 12967 15d2 03       		.byte	0x3
 12968 15d3 88010000 		.4byte	LR_mean_value.10427
 12969 15d7 1B       		.uleb128 0x1b
 12970 15d8 1A030000 		.4byte	.LASF264
 12971 15dc 01       		.byte	0x1
 12972 15dd 6607     		.2byte	0x766
 12973 15df 81000000 		.4byte	0x81
 12974 15e3 05       		.uleb128 0x5
 12975 15e4 03       		.byte	0x3
 12976 15e5 0C000000 		.4byte	first_tension_valid.10428
 12977 15e9 1B       		.uleb128 0x1b
 12978 15ea 8D050000 		.4byte	.LASF265
 12979 15ee 01       		.byte	0x1
 12980 15ef 6707     		.2byte	0x767
 12981 15f1 BD000000 		.4byte	0xbd
 12982 15f5 05       		.uleb128 0x5
 12983 15f6 03       		.byte	0x3
 12984 15f7 08000000 		.4byte	detect_power_cycle_prev.10429
 12985 15fb 1B       		.uleb128 0x1b
 12986 15fc 460B0000 		.4byte	.LASF266
 12987 1600 01       		.byte	0x1
 12988 1601 6807     		.2byte	0x768
 12989 1603 8D000000 		.4byte	0x8d
 12990 1607 05       		.uleb128 0x5
 12991 1608 03       		.byte	0x3
 12992 1609 74010000 		.4byte	count.10430
 12993 160d 1B       		.uleb128 0x1b
 12994 160e ED010000 		.4byte	.LASF267
 12995 1612 01       		.byte	0x1
 12996 1613 6907     		.2byte	0x769
 12997 1615 99000000 		.4byte	0x99
 12998 1619 05       		.uleb128 0x5
 12999 161a 03       		.byte	0x3
 13000 161b 78010000 		.4byte	v_count.10431
 13001 161f 1F       		.uleb128 0x1f
 13002 1620 69647800 		.ascii	"idx\000"
 13003 1624 01       		.byte	0x1
 13004 1625 6A07     		.2byte	0x76a
 13005 1627 81000000 		.4byte	0x81
 13006 162b 05       		.uleb128 0x5
 13007 162c 03       		.byte	0x3
 13008 162d 76010000 		.4byte	idx.10432
 13009 1631 00       		.byte	0
 13010 1632 26       		.uleb128 0x26
 13011 1633 570E0000 		.4byte	.LASF268
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 283


 13012 1637 01       		.byte	0x1
 13013 1638 C709     		.2byte	0x9c7
 13014 163a 00000000 		.4byte	.LFB76
 13015 163e 0C010000 		.4byte	.LFE76-.LFB76
 13016 1642 01       		.uleb128 0x1
 13017 1643 9C       		.byte	0x9c
 13018 1644 79160000 		.4byte	0x1679
 13019 1648 1C       		.uleb128 0x1c
 13020 1649 06000000 		.4byte	.LBB10
 13021 164d E6000000 		.4byte	.LBE10-.LBB10
 13022 1651 1F       		.uleb128 0x1f
 13023 1652 6900     		.ascii	"i\000"
 13024 1654 01       		.byte	0x1
 13025 1655 C909     		.2byte	0x9c9
 13026 1657 81000000 		.4byte	0x81
 13027 165b 02       		.uleb128 0x2
 13028 165c 91       		.byte	0x91
 13029 165d 77       		.sleb128 -9
 13030 165e 1C       		.uleb128 0x1c
 13031 165f 26000000 		.4byte	.LBB11
 13032 1663 BA000000 		.4byte	.LBE11-.LBB11
 13033 1667 1B       		.uleb128 0x1b
 13034 1668 2F090000 		.4byte	.LASF40
 13035 166c 01       		.byte	0x1
 13036 166d CB09     		.2byte	0x9cb
 13037 166f BD000000 		.4byte	0xbd
 13038 1673 02       		.uleb128 0x2
 13039 1674 91       		.byte	0x91
 13040 1675 70       		.sleb128 -16
 13041 1676 00       		.byte	0
 13042 1677 00       		.byte	0
 13043 1678 00       		.byte	0
 13044 1679 21       		.uleb128 0x21
 13045 167a 4C040000 		.4byte	.LASF269
 13046 167e 01       		.byte	0x1
 13047 167f E909     		.2byte	0x9e9
 13048 1681 00000000 		.4byte	.LFB77
 13049 1685 A8000000 		.4byte	.LFE77-.LFB77
 13050 1689 01       		.uleb128 0x1
 13051 168a 9C       		.byte	0x9c
 13052 168b CC160000 		.4byte	0x16cc
 13053 168f 1E       		.uleb128 0x1e
 13054 1690 8C0C0000 		.4byte	.LASF270
 13055 1694 01       		.byte	0x1
 13056 1695 E909     		.2byte	0x9e9
 13057 1697 81000000 		.4byte	0x81
 13058 169b 02       		.uleb128 0x2
 13059 169c 91       		.byte	0x91
 13060 169d 6F       		.sleb128 -17
 13061 169e 1B       		.uleb128 0x1b
 13062 169f F4070000 		.4byte	.LASF238
 13063 16a3 01       		.byte	0x1
 13064 16a4 EB09     		.2byte	0x9eb
 13065 16a6 81000000 		.4byte	0x81
 13066 16aa 02       		.uleb128 0x2
 13067 16ab 91       		.byte	0x91
 13068 16ac 73       		.sleb128 -13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 284


 13069 16ad 1B       		.uleb128 0x1b
 13070 16ae FC0C0000 		.4byte	.LASF271
 13071 16b2 01       		.byte	0x1
 13072 16b3 EC09     		.2byte	0x9ec
 13073 16b5 8D000000 		.4byte	0x8d
 13074 16b9 02       		.uleb128 0x2
 13075 16ba 91       		.byte	0x91
 13076 16bb 76       		.sleb128 -10
 13077 16bc 1B       		.uleb128 0x1b
 13078 16bd D9080000 		.4byte	.LASF272
 13079 16c1 01       		.byte	0x1
 13080 16c2 ED09     		.2byte	0x9ed
 13081 16c4 8D000000 		.4byte	0x8d
 13082 16c8 02       		.uleb128 0x2
 13083 16c9 91       		.byte	0x91
 13084 16ca 74       		.sleb128 -12
 13085 16cb 00       		.byte	0
 13086 16cc 23       		.uleb128 0x23
 13087 16cd 56090000 		.4byte	.LASF273
 13088 16d1 01       		.byte	0x1
 13089 16d2 010A     		.2byte	0xa01
 13090 16d4 00000000 		.4byte	.LFB78
 13091 16d8 58060000 		.4byte	.LFE78-.LFB78
 13092 16dc 01       		.uleb128 0x1
 13093 16dd 9C       		.byte	0x9c
 13094 16de 64180000 		.4byte	0x1864
 13095 16e2 1B       		.uleb128 0x1b
 13096 16e3 26000000 		.4byte	.LASF274
 13097 16e7 01       		.byte	0x1
 13098 16e8 020A     		.2byte	0xa02
 13099 16ea 81000000 		.4byte	0x81
 13100 16ee 05       		.uleb128 0x5
 13101 16ef 03       		.byte	0x3
 13102 16f0 8E010000 		.4byte	pos_cycle_status.10503
 13103 16f4 1B       		.uleb128 0x1b
 13104 16f5 B00E0000 		.4byte	.LASF275
 13105 16f9 01       		.byte	0x1
 13106 16fa 030A     		.2byte	0xa03
 13107 16fc 55070000 		.4byte	0x755
 13108 1700 05       		.uleb128 0x5
 13109 1701 03       		.byte	0x3
 13110 1702 98010000 		.4byte	emg_cycle_status.10504
 13111 1706 1B       		.uleb128 0x1b
 13112 1707 870D0000 		.4byte	.LASF276
 13113 170b 01       		.byte	0x1
 13114 170c 040A     		.2byte	0xa04
 13115 170e 55070000 		.4byte	0x755
 13116 1712 05       		.uleb128 0x5
 13117 1713 03       		.byte	0x3
 13118 1714 9C010000 		.4byte	motion_status.10505
 13119 1718 1B       		.uleb128 0x1b
 13120 1719 580B0000 		.4byte	.LASF277
 13121 171d 01       		.byte	0x1
 13122 171e 050A     		.2byte	0xa05
 13123 1720 55070000 		.4byte	0x755
 13124 1724 05       		.uleb128 0x5
 13125 1725 03       		.byte	0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 285


 13126 1726 A8010000 		.4byte	emg_excess_status.10506
 13127 172a 1B       		.uleb128 0x1b
 13128 172b 1F110000 		.4byte	.LASF278
 13129 172f 01       		.byte	0x1
 13130 1730 060A     		.2byte	0xa06
 13131 1732 81000000 		.4byte	0x81
 13132 1736 05       		.uleb128 0x5
 13133 1737 03       		.byte	0x3
 13134 1738 BC010000 		.4byte	rest_cycle_status.10507
 13135 173c 1B       		.uleb128 0x1b
 13136 173d 7B030000 		.4byte	.LASF279
 13137 1741 01       		.byte	0x1
 13138 1742 070A     		.2byte	0xa07
 13139 1744 BD000000 		.4byte	0xbd
 13140 1748 05       		.uleb128 0x5
 13141 1749 03       		.byte	0x3
 13142 174a 10000000 		.4byte	bin_threshold.10508
 13143 174e 1B       		.uleb128 0x1b
 13144 174f B4100000 		.4byte	.LASF280
 13145 1753 01       		.byte	0x1
 13146 1754 080A     		.2byte	0xa08
 13147 1756 BD000000 		.4byte	0xbd
 13148 175a 05       		.uleb128 0x5
 13149 175b 03       		.byte	0x3
 13150 175c 14000000 		.4byte	exc_act_thr.10509
 13151 1760 1B       		.uleb128 0x1b
 13152 1761 48020000 		.4byte	.LASF281
 13153 1765 01       		.byte	0x1
 13154 1766 090A     		.2byte	0xa09
 13155 1768 BD000000 		.4byte	0xbd
 13156 176c 05       		.uleb128 0x5
 13157 176d 03       		.byte	0x3
 13158 176e 90010000 		.4byte	thr_pos.10510
 13159 1772 1B       		.uleb128 0x1b
 13160 1773 840B0000 		.4byte	.LASF282
 13161 1777 01       		.byte	0x1
 13162 1778 0A0A     		.2byte	0xa0a
 13163 177a BD000000 		.4byte	0xbd
 13164 177e 05       		.uleb128 0x5
 13165 177f 03       		.byte	0x3
 13166 1780 94010000 		.4byte	max_pos.10511
 13167 1784 1F       		.uleb128 0x1f
 13168 1785 6900     		.ascii	"i\000"
 13169 1787 01       		.byte	0x1
 13170 1788 0B0A     		.2byte	0xa0b
 13171 178a 81000000 		.4byte	0x81
 13172 178e 02       		.uleb128 0x2
 13173 178f 91       		.byte	0x91
 13174 1790 6F       		.sleb128 -17
 13175 1791 1B       		.uleb128 0x1b
 13176 1792 43060000 		.4byte	.LASF283
 13177 1796 01       		.byte	0x1
 13178 1797 0B0A     		.2byte	0xa0b
 13179 1799 81000000 		.4byte	0x81
 13180 179d 02       		.uleb128 0x2
 13181 179e 91       		.byte	0x91
 13182 179f 5B       		.sleb128 -37
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 286


 13183 17a0 1B       		.uleb128 0x1b
 13184 17a1 7A010000 		.4byte	.LASF284
 13185 17a5 01       		.byte	0x1
 13186 17a6 0B0A     		.2byte	0xa0b
 13187 17a8 81000000 		.4byte	0x81
 13188 17ac 02       		.uleb128 0x2
 13189 17ad 91       		.byte	0x91
 13190 17ae 5A       		.sleb128 -38
 13191 17af 1B       		.uleb128 0x1b
 13192 17b0 200E0000 		.4byte	.LASF285
 13193 17b4 01       		.byte	0x1
 13194 17b5 0B0A     		.2byte	0xa0b
 13195 17b7 81000000 		.4byte	0x81
 13196 17bb 02       		.uleb128 0x2
 13197 17bc 91       		.byte	0x91
 13198 17bd 59       		.sleb128 -39
 13199 17be 1B       		.uleb128 0x1b
 13200 17bf 260E0000 		.4byte	.LASF286
 13201 17c3 01       		.byte	0x1
 13202 17c4 0B0A     		.2byte	0xa0b
 13203 17c6 81000000 		.4byte	0x81
 13204 17ca 02       		.uleb128 0x2
 13205 17cb 91       		.byte	0x91
 13206 17cc 58       		.sleb128 -40
 13207 17cd 1B       		.uleb128 0x1b
 13208 17ce 6B0E0000 		.4byte	.LASF287
 13209 17d2 01       		.byte	0x1
 13210 17d3 0C0A     		.2byte	0xa0c
 13211 17d5 BD000000 		.4byte	0xbd
 13212 17d9 02       		.uleb128 0x2
 13213 17da 91       		.byte	0x91
 13214 17db 64       		.sleb128 -28
 13215 17dc 1B       		.uleb128 0x1b
 13216 17dd 3E050000 		.4byte	.LASF288
 13217 17e1 01       		.byte	0x1
 13218 17e2 0C0A     		.2byte	0xa0c
 13219 17e4 BD000000 		.4byte	0xbd
 13220 17e8 02       		.uleb128 0x2
 13221 17e9 91       		.byte	0x91
 13222 17ea 60       		.sleb128 -32
 13223 17eb 1B       		.uleb128 0x1b
 13224 17ec D30F0000 		.4byte	.LASF289
 13225 17f0 01       		.byte	0x1
 13226 17f1 0C0A     		.2byte	0xa0c
 13227 17f3 BD000000 		.4byte	0xbd
 13228 17f7 02       		.uleb128 0x2
 13229 17f8 91       		.byte	0x91
 13230 17f9 68       		.sleb128 -24
 13231 17fa 1B       		.uleb128 0x1b
 13232 17fb D9040000 		.4byte	.LASF290
 13233 17ff 01       		.byte	0x1
 13234 1800 0D0A     		.2byte	0xa0d
 13235 1802 BD000000 		.4byte	0xbd
 13236 1806 02       		.uleb128 0x2
 13237 1807 91       		.byte	0x91
 13238 1808 5C       		.sleb128 -36
 13239 1809 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 287


 13240 180a 8C070000 		.4byte	.LASF291
 13241 180e 01       		.byte	0x1
 13242 180f 0E0A     		.2byte	0xa0e
 13243 1811 99000000 		.4byte	0x99
 13244 1815 05       		.uleb128 0x5
 13245 1816 03       		.byte	0x3
 13246 1817 C0010000 		.4byte	timer_value_s.10521
 13247 181b 1B       		.uleb128 0x1b
 13248 181c 27070000 		.4byte	.LASF292
 13249 1820 01       		.byte	0x1
 13250 1821 0E0A     		.2byte	0xa0e
 13251 1823 99000000 		.4byte	0x99
 13252 1827 05       		.uleb128 0x5
 13253 1828 03       		.byte	0x3
 13254 1829 C4010000 		.4byte	timer_value_e.10522
 13255 182d 1B       		.uleb128 0x1b
 13256 182e 8F100000 		.4byte	.LASF293
 13257 1832 01       		.byte	0x1
 13258 1833 0F0A     		.2byte	0xa0f
 13259 1835 CA030000 		.4byte	0x3ca
 13260 1839 05       		.uleb128 0x5
 13261 183a 03       		.byte	0x3
 13262 183b AC010000 		.4byte	timer_exc_s.10523
 13263 183f 1B       		.uleb128 0x1b
 13264 1840 6A100000 		.4byte	.LASF294
 13265 1844 01       		.byte	0x1
 13266 1845 0F0A     		.2byte	0xa0f
 13267 1847 CA030000 		.4byte	0x3ca
 13268 184b 05       		.uleb128 0x5
 13269 184c 03       		.byte	0x3
 13270 184d B4010000 		.4byte	timer_exc_e.10524
 13271 1851 1B       		.uleb128 0x1b
 13272 1852 BB070000 		.4byte	.LASF295
 13273 1856 01       		.byte	0x1
 13274 1857 100A     		.2byte	0xa10
 13275 1859 A0020000 		.4byte	0x2a0
 13276 185d 05       		.uleb128 0x5
 13277 185e 03       		.byte	0x3
 13278 185f A0010000 		.4byte	start_emg_pos.10525
 13279 1863 00       		.byte	0
 13280 1864 23       		.uleb128 0x23
 13281 1865 1F0C0000 		.4byte	.LASF296
 13282 1869 01       		.byte	0x1
 13283 186a BC0A     		.2byte	0xabc
 13284 186c 00000000 		.4byte	.LFB79
 13285 1870 08010000 		.4byte	.LFE79-.LFB79
 13286 1874 01       		.uleb128 0x1
 13287 1875 9C       		.byte	0x9c
 13288 1876 EA180000 		.4byte	0x18ea
 13289 187a 1B       		.uleb128 0x1b
 13290 187b F7100000 		.4byte	.LASF297
 13291 187f 01       		.byte	0x1
 13292 1880 BE0A     		.2byte	0xabe
 13293 1882 EA000000 		.4byte	0xea
 13294 1886 02       		.uleb128 0x2
 13295 1887 91       		.byte	0x91
 13296 1888 64       		.sleb128 -28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 288


 13297 1889 1B       		.uleb128 0x1b
 13298 188a 4C0E0000 		.4byte	.LASF298
 13299 188e 01       		.byte	0x1
 13300 188f BF0A     		.2byte	0xabf
 13301 1891 81000000 		.4byte	0x81
 13302 1895 05       		.uleb128 0x5
 13303 1896 03       		.byte	0x3
 13304 1897 CC010000 		.4byte	row_number.10561
 13305 189b 1B       		.uleb128 0x1b
 13306 189c 11050000 		.4byte	.LASF299
 13307 18a0 01       		.byte	0x1
 13308 18a1 C00A     		.2byte	0xac0
 13309 18a3 81000000 		.4byte	0x81
 13310 18a7 02       		.uleb128 0x2
 13311 18a8 91       		.byte	0x91
 13312 18a9 77       		.sleb128 -9
 13313 18aa 1B       		.uleb128 0x1b
 13314 18ab 000F0000 		.4byte	.LASF300
 13315 18af 01       		.byte	0x1
 13316 18b0 C10A     		.2byte	0xac1
 13317 18b2 EA180000 		.4byte	0x18ea
 13318 18b6 02       		.uleb128 0x2
 13319 18b7 91       		.byte	0x91
 13320 18b8 70       		.sleb128 -16
 13321 18b9 1B       		.uleb128 0x1b
 13322 18ba 82010000 		.4byte	.LASF301
 13323 18be 01       		.byte	0x1
 13324 18bf C20A     		.2byte	0xac2
 13325 18c1 EA180000 		.4byte	0x18ea
 13326 18c5 02       		.uleb128 0x2
 13327 18c6 91       		.byte	0x91
 13328 18c7 6C       		.sleb128 -20
 13329 18c8 1B       		.uleb128 0x1b
 13330 18c9 8B120000 		.4byte	.LASF302
 13331 18cd 01       		.byte	0x1
 13332 18ce C30A     		.2byte	0xac3
 13333 18d0 81000000 		.4byte	0x81
 13334 18d4 02       		.uleb128 0x2
 13335 18d5 91       		.byte	0x91
 13336 18d6 6B       		.sleb128 -21
 13337 18d7 1B       		.uleb128 0x1b
 13338 18d8 6A0B0000 		.4byte	.LASF303
 13339 18dc 01       		.byte	0x1
 13340 18dd C40A     		.2byte	0xac4
 13341 18df EA180000 		.4byte	0x18ea
 13342 18e3 05       		.uleb128 0x5
 13343 18e4 03       		.byte	0x3
 13344 18e5 C8010000 		.4byte	m_addr.10566
 13345 18e9 00       		.byte	0
 13346 18ea 0C       		.uleb128 0xc
 13347 18eb 04       		.byte	0x4
 13348 18ec 81000000 		.4byte	0x81
 13349 18f0 07       		.uleb128 0x7
 13350 18f1 00190000 		.4byte	0x1900
 13351 18f5 00190000 		.4byte	0x1900
 13352 18f9 08       		.uleb128 0x8
 13353 18fa 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 289


 13354 18fe 1C       		.byte	0x1c
 13355 18ff 00       		.byte	0
 13356 1900 27       		.uleb128 0x27
 13357 1901 81000000 		.4byte	0x81
 13358 1905 19       		.uleb128 0x19
 13359 1906 0B0F0000 		.4byte	.LASF304
 13360 190a 01       		.byte	0x1
 13361 190b 40       		.byte	0x40
 13362 190c 16190000 		.4byte	0x1916
 13363 1910 05       		.uleb128 0x5
 13364 1911 03       		.byte	0x3
 13365 1912 00000000 		.4byte	pwm_preload_values
 13366 1916 27       		.uleb128 0x27
 13367 1917 F0180000 		.4byte	0x18f0
 13368 191b 28       		.uleb128 0x28
 13369 191c 76100000 		.4byte	.LASF305
 13370 1920 08       		.byte	0x8
 13371 1921 1207     		.2byte	0x712
 13372 1923 27190000 		.4byte	0x1927
 13373 1927 06       		.uleb128 0x6
 13374 1928 76000000 		.4byte	0x76
 13375 192c 07       		.uleb128 0x7
 13376 192d A0090000 		.4byte	0x9a0
 13377 1931 3C190000 		.4byte	0x193c
 13378 1935 08       		.uleb128 0x8
 13379 1936 0E010000 		.4byte	0x10e
 13380 193a 01       		.byte	0x1
 13381 193b 00       		.byte	0
 13382 193c 28       		.uleb128 0x28
 13383 193d E0050000 		.4byte	.LASF306
 13384 1941 07       		.byte	0x7
 13385 1942 3802     		.2byte	0x238
 13386 1944 2C190000 		.4byte	0x192c
 13387 1948 07       		.uleb128 0x7
 13388 1949 A5010000 		.4byte	0x1a5
 13389 194d 58190000 		.4byte	0x1958
 13390 1951 08       		.uleb128 0x8
 13391 1952 0E010000 		.4byte	0x10e
 13392 1956 01       		.byte	0x1
 13393 1957 00       		.byte	0
 13394 1958 28       		.uleb128 0x28
 13395 1959 DA070000 		.4byte	.LASF307
 13396 195d 07       		.byte	0x7
 13397 195e 3902     		.2byte	0x239
 13398 1960 48190000 		.4byte	0x1948
 13399 1964 28       		.uleb128 0x28
 13400 1965 35050000 		.4byte	.LASF308
 13401 1969 07       		.byte	0x7
 13402 196a 3902     		.2byte	0x239
 13403 196c 48190000 		.4byte	0x1948
 13404 1970 28       		.uleb128 0x28
 13405 1971 BE0C0000 		.4byte	.LASF309
 13406 1975 07       		.byte	0x7
 13407 1976 3902     		.2byte	0x239
 13408 1978 48190000 		.4byte	0x1948
 13409 197c 07       		.uleb128 0x7
 13410 197d E2010000 		.4byte	0x1e2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 290


 13411 1981 8C190000 		.4byte	0x198c
 13412 1985 08       		.uleb128 0x8
 13413 1986 0E010000 		.4byte	0x10e
 13414 198a 01       		.byte	0x1
 13415 198b 00       		.byte	0
 13416 198c 28       		.uleb128 0x28
 13417 198d 85070000 		.4byte	.LASF310
 13418 1991 07       		.byte	0x7
 13419 1992 3A02     		.2byte	0x23a
 13420 1994 7C190000 		.4byte	0x197c
 13421 1998 28       		.uleb128 0x28
 13422 1999 81120000 		.4byte	.LASF311
 13423 199d 07       		.byte	0x7
 13424 199e 3A02     		.2byte	0x23a
 13425 19a0 7C190000 		.4byte	0x197c
 13426 19a4 28       		.uleb128 0x28
 13427 19a5 CD110000 		.4byte	.LASF312
 13428 19a9 07       		.byte	0x7
 13429 19aa 3B02     		.2byte	0x23b
 13430 19ac 6B020000 		.4byte	0x26b
 13431 19b0 28       		.uleb128 0x28
 13432 19b1 C9030000 		.4byte	.LASF313
 13433 19b5 07       		.byte	0x7
 13434 19b6 3B02     		.2byte	0x23b
 13435 19b8 6B020000 		.4byte	0x26b
 13436 19bc 28       		.uleb128 0x28
 13437 19bd 500F0000 		.4byte	.LASF314
 13438 19c1 07       		.byte	0x7
 13439 19c2 3C02     		.2byte	0x23c
 13440 19c4 C0020000 		.4byte	0x2c0
 13441 19c8 28       		.uleb128 0x28
 13442 19c9 93000000 		.4byte	.LASF315
 13443 19cd 07       		.byte	0x7
 13444 19ce 3D02     		.2byte	0x23d
 13445 19d0 DB020000 		.4byte	0x2db
 13446 19d4 28       		.uleb128 0x28
 13447 19d5 690F0000 		.4byte	.LASF316
 13448 19d9 07       		.byte	0x7
 13449 19da 3E02     		.2byte	0x23e
 13450 19dc 0D0A0000 		.4byte	0xa0d
 13451 19e0 28       		.uleb128 0x28
 13452 19e1 710B0000 		.4byte	.LASF317
 13453 19e5 07       		.byte	0x7
 13454 19e6 3E02     		.2byte	0x23e
 13455 19e8 0D0A0000 		.4byte	0xa0d
 13456 19ec 28       		.uleb128 0x28
 13457 19ed 3E0A0000 		.4byte	.LASF318
 13458 19f1 07       		.byte	0x7
 13459 19f2 3F02     		.2byte	0x23f
 13460 19f4 E60B0000 		.4byte	0xbe6
 13461 19f8 07       		.uleb128 0x7
 13462 19f9 BE0B0000 		.4byte	0xbbe
 13463 19fd 081A0000 		.4byte	0x1a08
 13464 1a01 08       		.uleb128 0x8
 13465 1a02 0E010000 		.4byte	0x10e
 13466 1a06 01       		.byte	0x1
 13467 1a07 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 291


 13468 1a08 28       		.uleb128 0x28
 13469 1a09 AA0C0000 		.4byte	.LASF319
 13470 1a0d 07       		.byte	0x7
 13471 1a0e 4002     		.2byte	0x240
 13472 1a10 F8190000 		.4byte	0x19f8
 13473 1a14 28       		.uleb128 0x28
 13474 1a15 990A0000 		.4byte	.LASF320
 13475 1a19 07       		.byte	0x7
 13476 1a1a 4002     		.2byte	0x240
 13477 1a1c F8190000 		.4byte	0x19f8
 13478 1a20 28       		.uleb128 0x28
 13479 1a21 940C0000 		.4byte	.LASF321
 13480 1a25 07       		.byte	0x7
 13481 1a26 4002     		.2byte	0x240
 13482 1a28 F8190000 		.4byte	0x19f8
 13483 1a2c 07       		.uleb128 0x7
 13484 1a2d BE0B0000 		.4byte	0xbbe
 13485 1a31 3C1A0000 		.4byte	0x1a3c
 13486 1a35 08       		.uleb128 0x8
 13487 1a36 0E010000 		.4byte	0x10e
 13488 1a3a 02       		.byte	0x2
 13489 1a3b 00       		.byte	0
 13490 1a3c 28       		.uleb128 0x28
 13491 1a3d D7050000 		.4byte	.LASF322
 13492 1a41 07       		.byte	0x7
 13493 1a42 4102     		.2byte	0x241
 13494 1a44 2C1A0000 		.4byte	0x1a2c
 13495 1a48 07       		.uleb128 0x7
 13496 1a49 BE0B0000 		.4byte	0xbbe
 13497 1a4d 581A0000 		.4byte	0x1a58
 13498 1a51 08       		.uleb128 0x8
 13499 1a52 0E010000 		.4byte	0x10e
 13500 1a56 07       		.byte	0x7
 13501 1a57 00       		.byte	0
 13502 1a58 28       		.uleb128 0x28
 13503 1a59 12020000 		.4byte	.LASF323
 13504 1a5d 07       		.byte	0x7
 13505 1a5e 4202     		.2byte	0x242
 13506 1a60 481A0000 		.4byte	0x1a48
 13507 1a64 28       		.uleb128 0x28
 13508 1a65 F6030000 		.4byte	.LASF324
 13509 1a69 07       		.byte	0x7
 13510 1a6a 4302     		.2byte	0x243
 13511 1a6c BE0B0000 		.4byte	0xbbe
 13512 1a70 28       		.uleb128 0x28
 13513 1a71 2E030000 		.4byte	.LASF325
 13514 1a75 07       		.byte	0x7
 13515 1a76 4502     		.2byte	0x245
 13516 1a78 8D000000 		.4byte	0x8d
 13517 1a7c 28       		.uleb128 0x28
 13518 1a7d 1E0A0000 		.4byte	.LASF326
 13519 1a81 07       		.byte	0x7
 13520 1a82 4602     		.2byte	0x246
 13521 1a84 8D000000 		.4byte	0x8d
 13522 1a88 28       		.uleb128 0x28
 13523 1a89 3A0D0000 		.4byte	.LASF327
 13524 1a8d 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 292


 13525 1a8e 4702     		.2byte	0x247
 13526 1a90 D5000000 		.4byte	0xd5
 13527 1a94 28       		.uleb128 0x28
 13528 1a95 0A060000 		.4byte	.LASF328
 13529 1a99 07       		.byte	0x7
 13530 1a9a 4902     		.2byte	0x249
 13531 1a9c BD000000 		.4byte	0xbd
 13532 1aa0 28       		.uleb128 0x28
 13533 1aa1 F40D0000 		.4byte	.LASF329
 13534 1aa5 07       		.byte	0x7
 13535 1aa6 4A02     		.2byte	0x24a
 13536 1aa8 A0020000 		.4byte	0x2a0
 13537 1aac 28       		.uleb128 0x28
 13538 1aad E9100000 		.4byte	.LASF330
 13539 1ab1 07       		.byte	0x7
 13540 1ab2 4B02     		.2byte	0x24b
 13541 1ab4 45070000 		.4byte	0x745
 13542 1ab8 28       		.uleb128 0x28
 13543 1ab9 0A100000 		.4byte	.LASF331
 13544 1abd 07       		.byte	0x7
 13545 1abe 4C02     		.2byte	0x24c
 13546 1ac0 45070000 		.4byte	0x745
 13547 1ac4 28       		.uleb128 0x28
 13548 1ac5 C1060000 		.4byte	.LASF332
 13549 1ac9 07       		.byte	0x7
 13550 1aca 4D02     		.2byte	0x24d
 13551 1acc A0020000 		.4byte	0x2a0
 13552 1ad0 28       		.uleb128 0x28
 13553 1ad1 83100000 		.4byte	.LASF333
 13554 1ad5 07       		.byte	0x7
 13555 1ad6 4E02     		.2byte	0x24e
 13556 1ad8 A0020000 		.4byte	0x2a0
 13557 1adc 28       		.uleb128 0x28
 13558 1add 660D0000 		.4byte	.LASF334
 13559 1ae1 07       		.byte	0x7
 13560 1ae2 4F02     		.2byte	0x24f
 13561 1ae4 BD000000 		.4byte	0xbd
 13562 1ae8 28       		.uleb128 0x28
 13563 1ae9 63070000 		.4byte	.LASF335
 13564 1aed 07       		.byte	0x7
 13565 1aee 5102     		.2byte	0x251
 13566 1af0 920C0000 		.4byte	0xc92
 13567 1af4 28       		.uleb128 0x28
 13568 1af5 5F050000 		.4byte	.LASF336
 13569 1af9 07       		.byte	0x7
 13570 1afa 5202     		.2byte	0x252
 13571 1afc 5A0C0000 		.4byte	0xc5a
 13572 1b00 28       		.uleb128 0x28
 13573 1b01 B5040000 		.4byte	.LASF337
 13574 1b05 07       		.byte	0x7
 13575 1b06 5302     		.2byte	0x253
 13576 1b08 5A0C0000 		.4byte	0xc5a
 13577 1b0c 28       		.uleb128 0x28
 13578 1b0d 790D0000 		.4byte	.LASF338
 13579 1b11 07       		.byte	0x7
 13580 1b12 5402     		.2byte	0x254
 13581 1b14 5A0C0000 		.4byte	0xc5a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 293


 13582 1b18 28       		.uleb128 0x28
 13583 1b19 FD110000 		.4byte	.LASF339
 13584 1b1d 07       		.byte	0x7
 13585 1b1e 5502     		.2byte	0x255
 13586 1b20 5A0C0000 		.4byte	0xc5a
 13587 1b24 28       		.uleb128 0x28
 13588 1b25 05090000 		.4byte	.LASF340
 13589 1b29 07       		.byte	0x7
 13590 1b2a 5802     		.2byte	0x258
 13591 1b2c 55070000 		.4byte	0x755
 13592 1b30 28       		.uleb128 0x28
 13593 1b31 46010000 		.4byte	.LASF341
 13594 1b35 07       		.byte	0x7
 13595 1b36 5902     		.2byte	0x259
 13596 1b38 81000000 		.4byte	0x81
 13597 1b3c 28       		.uleb128 0x28
 13598 1b3d CA040000 		.4byte	.LASF342
 13599 1b41 07       		.byte	0x7
 13600 1b42 5A02     		.2byte	0x25a
 13601 1b44 81000000 		.4byte	0x81
 13602 1b48 28       		.uleb128 0x28
 13603 1b49 64010000 		.4byte	.LASF343
 13604 1b4d 07       		.byte	0x7
 13605 1b4e 5B02     		.2byte	0x25b
 13606 1b50 81000000 		.4byte	0x81
 13607 1b54 28       		.uleb128 0x28
 13608 1b55 B5120000 		.4byte	.LASF344
 13609 1b59 07       		.byte	0x7
 13610 1b5a 5D02     		.2byte	0x25d
 13611 1b5c 81000000 		.4byte	0x81
 13612 1b60 28       		.uleb128 0x28
 13613 1b61 B10C0000 		.4byte	.LASF345
 13614 1b65 07       		.byte	0x7
 13615 1b66 5E02     		.2byte	0x25e
 13616 1b68 81000000 		.4byte	0x81
 13617 1b6c 28       		.uleb128 0x28
 13618 1b6d 1B050000 		.4byte	.LASF346
 13619 1b71 07       		.byte	0x7
 13620 1b72 5F02     		.2byte	0x25f
 13621 1b74 81000000 		.4byte	0x81
 13622 1b78 28       		.uleb128 0x28
 13623 1b79 E5080000 		.4byte	.LASF347
 13624 1b7d 07       		.byte	0x7
 13625 1b7e 6002     		.2byte	0x260
 13626 1b80 81000000 		.4byte	0x81
 13627 1b84 28       		.uleb128 0x28
 13628 1b85 7E0A0000 		.4byte	.LASF348
 13629 1b89 07       		.byte	0x7
 13630 1b8a 6102     		.2byte	0x261
 13631 1b8c 81000000 		.4byte	0x81
 13632 1b90 07       		.uleb128 0x7
 13633 1b91 B1000000 		.4byte	0xb1
 13634 1b95 A01B0000 		.4byte	0x1ba0
 13635 1b99 08       		.uleb128 0x8
 13636 1b9a 0E010000 		.4byte	0x10e
 13637 1b9e 0B       		.byte	0xb
 13638 1b9f 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 294


 13639 1ba0 28       		.uleb128 0x28
 13640 1ba1 C2040000 		.4byte	.LASF349
 13641 1ba5 07       		.byte	0x7
 13642 1ba6 6502     		.2byte	0x265
 13643 1ba8 901B0000 		.4byte	0x1b90
 13644 1bac 28       		.uleb128 0x28
 13645 1bad 34120000 		.4byte	.LASF350
 13646 1bb1 07       		.byte	0x7
 13647 1bb2 6602     		.2byte	0x266
 13648 1bb4 81000000 		.4byte	0x81
 13649 1bb8 07       		.uleb128 0x7
 13650 1bb9 A5000000 		.4byte	0xa5
 13651 1bbd C81B0000 		.4byte	0x1bc8
 13652 1bc1 08       		.uleb128 0x8
 13653 1bc2 0E010000 		.4byte	0x10e
 13654 1bc6 01       		.byte	0x1
 13655 1bc7 00       		.byte	0
 13656 1bc8 28       		.uleb128 0x28
 13657 1bc9 B2050000 		.4byte	.LASF351
 13658 1bcd 07       		.byte	0x7
 13659 1bce 6902     		.2byte	0x269
 13660 1bd0 B81B0000 		.4byte	0x1bb8
 13661 1bd4 07       		.uleb128 0x7
 13662 1bd5 99000000 		.4byte	0x99
 13663 1bd9 EA1B0000 		.4byte	0x1bea
 13664 1bdd 08       		.uleb128 0x8
 13665 1bde 0E010000 		.4byte	0x10e
 13666 1be2 01       		.byte	0x1
 13667 1be3 08       		.uleb128 0x8
 13668 1be4 0E010000 		.4byte	0x10e
 13669 1be8 04       		.byte	0x4
 13670 1be9 00       		.byte	0
 13671 1bea 28       		.uleb128 0x28
 13672 1beb C9070000 		.4byte	.LASF352
 13673 1bef 07       		.byte	0x7
 13674 1bf0 6C02     		.2byte	0x26c
 13675 1bf2 D41B0000 		.4byte	0x1bd4
 13676 1bf6 07       		.uleb128 0x7
 13677 1bf7 8D000000 		.4byte	0x8d
 13678 1bfb 0C1C0000 		.4byte	0x1c0c
 13679 1bff 08       		.uleb128 0x8
 13680 1c00 0E010000 		.4byte	0x10e
 13681 1c04 01       		.byte	0x1
 13682 1c05 08       		.uleb128 0x8
 13683 1c06 0E010000 		.4byte	0x10e
 13684 1c0a 04       		.byte	0x4
 13685 1c0b 00       		.byte	0
 13686 1c0c 28       		.uleb128 0x28
 13687 1c0d 09110000 		.4byte	.LASF353
 13688 1c11 07       		.byte	0x7
 13689 1c12 6E02     		.2byte	0x26e
 13690 1c14 F61B0000 		.4byte	0x1bf6
 13691 1c18 07       		.uleb128 0x7
 13692 1c19 81000000 		.4byte	0x81
 13693 1c1d 2E1C0000 		.4byte	0x1c2e
 13694 1c21 08       		.uleb128 0x8
 13695 1c22 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 295


 13696 1c26 01       		.byte	0x1
 13697 1c27 08       		.uleb128 0x8
 13698 1c28 0E010000 		.4byte	0x10e
 13699 1c2c 04       		.byte	0x4
 13700 1c2d 00       		.byte	0
 13701 1c2e 28       		.uleb128 0x28
 13702 1c2f 9A070000 		.4byte	.LASF354
 13703 1c33 07       		.byte	0x7
 13704 1c34 6F02     		.2byte	0x26f
 13705 1c36 181C0000 		.4byte	0x1c18
 13706 1c3a 28       		.uleb128 0x28
 13707 1c3b 3C040000 		.4byte	.LASF355
 13708 1c3f 07       		.byte	0x7
 13709 1c40 7002     		.2byte	0x270
 13710 1c42 55070000 		.4byte	0x755
 13711 1c46 28       		.uleb128 0x28
 13712 1c47 8C0B0000 		.4byte	.LASF356
 13713 1c4b 07       		.byte	0x7
 13714 1c4c 7302     		.2byte	0x273
 13715 1c4e BD000000 		.4byte	0xbd
 13716 1c52 28       		.uleb128 0x28
 13717 1c53 A4060000 		.4byte	.LASF357
 13718 1c57 07       		.byte	0x7
 13719 1c58 7602     		.2byte	0x276
 13720 1c5a 9F010000 		.4byte	0x19f
 13721 1c5e 28       		.uleb128 0x28
 13722 1c5f 7F080000 		.4byte	.LASF358
 13723 1c63 07       		.byte	0x7
 13724 1c64 7902     		.2byte	0x279
 13725 1c66 9F010000 		.4byte	0x19f
 13726 1c6a 07       		.uleb128 0x7
 13727 1c6b 420B0000 		.4byte	0xb42
 13728 1c6f 7A1C0000 		.4byte	0x1c7a
 13729 1c73 08       		.uleb128 0x8
 13730 1c74 0E010000 		.4byte	0x10e
 13731 1c78 04       		.byte	0x4
 13732 1c79 00       		.byte	0
 13733 1c7a 28       		.uleb128 0x28
 13734 1c7b D1050000 		.4byte	.LASF359
 13735 1c7f 07       		.byte	0x7
 13736 1c80 8202     		.2byte	0x282
 13737 1c82 6A1C0000 		.4byte	0x1c6a
 13738 1c86 28       		.uleb128 0x28
 13739 1c87 07070000 		.4byte	.LASF360
 13740 1c8b 07       		.byte	0x7
 13741 1c8c 8202     		.2byte	0x282
 13742 1c8e 6A1C0000 		.4byte	0x1c6a
 13743 1c92 28       		.uleb128 0x28
 13744 1c93 52120000 		.4byte	.LASF361
 13745 1c97 07       		.byte	0x7
 13746 1c98 8B02     		.2byte	0x28b
 13747 1c9a 81000000 		.4byte	0x81
 13748 1c9e 00       		.byte	0
 13749              		.section	.debug_abbrev,"",%progbits
 13750              	.Ldebug_abbrev0:
 13751 0000 01       		.uleb128 0x1
 13752 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 296


 13753 0002 01       		.byte	0x1
 13754 0003 25       		.uleb128 0x25
 13755 0004 0E       		.uleb128 0xe
 13756 0005 13       		.uleb128 0x13
 13757 0006 0B       		.uleb128 0xb
 13758 0007 03       		.uleb128 0x3
 13759 0008 0E       		.uleb128 0xe
 13760 0009 1B       		.uleb128 0x1b
 13761 000a 0E       		.uleb128 0xe
 13762 000b 55       		.uleb128 0x55
 13763 000c 17       		.uleb128 0x17
 13764 000d 11       		.uleb128 0x11
 13765 000e 01       		.uleb128 0x1
 13766 000f 10       		.uleb128 0x10
 13767 0010 17       		.uleb128 0x17
 13768 0011 00       		.byte	0
 13769 0012 00       		.byte	0
 13770 0013 02       		.uleb128 0x2
 13771 0014 24       		.uleb128 0x24
 13772 0015 00       		.byte	0
 13773 0016 0B       		.uleb128 0xb
 13774 0017 0B       		.uleb128 0xb
 13775 0018 3E       		.uleb128 0x3e
 13776 0019 0B       		.uleb128 0xb
 13777 001a 03       		.uleb128 0x3
 13778 001b 0E       		.uleb128 0xe
 13779 001c 00       		.byte	0
 13780 001d 00       		.byte	0
 13781 001e 03       		.uleb128 0x3
 13782 001f 16       		.uleb128 0x16
 13783 0020 00       		.byte	0
 13784 0021 03       		.uleb128 0x3
 13785 0022 0E       		.uleb128 0xe
 13786 0023 3A       		.uleb128 0x3a
 13787 0024 0B       		.uleb128 0xb
 13788 0025 3B       		.uleb128 0x3b
 13789 0026 0B       		.uleb128 0xb
 13790 0027 49       		.uleb128 0x49
 13791 0028 13       		.uleb128 0x13
 13792 0029 00       		.byte	0
 13793 002a 00       		.byte	0
 13794 002b 04       		.uleb128 0x4
 13795 002c 24       		.uleb128 0x24
 13796 002d 00       		.byte	0
 13797 002e 0B       		.uleb128 0xb
 13798 002f 0B       		.uleb128 0xb
 13799 0030 3E       		.uleb128 0x3e
 13800 0031 0B       		.uleb128 0xb
 13801 0032 03       		.uleb128 0x3
 13802 0033 08       		.uleb128 0x8
 13803 0034 00       		.byte	0
 13804 0035 00       		.byte	0
 13805 0036 05       		.uleb128 0x5
 13806 0037 16       		.uleb128 0x16
 13807 0038 00       		.byte	0
 13808 0039 03       		.uleb128 0x3
 13809 003a 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 297


 13810 003b 3A       		.uleb128 0x3a
 13811 003c 0B       		.uleb128 0xb
 13812 003d 3B       		.uleb128 0x3b
 13813 003e 05       		.uleb128 0x5
 13814 003f 49       		.uleb128 0x49
 13815 0040 13       		.uleb128 0x13
 13816 0041 00       		.byte	0
 13817 0042 00       		.byte	0
 13818 0043 06       		.uleb128 0x6
 13819 0044 35       		.uleb128 0x35
 13820 0045 00       		.byte	0
 13821 0046 49       		.uleb128 0x49
 13822 0047 13       		.uleb128 0x13
 13823 0048 00       		.byte	0
 13824 0049 00       		.byte	0
 13825 004a 07       		.uleb128 0x7
 13826 004b 01       		.uleb128 0x1
 13827 004c 01       		.byte	0x1
 13828 004d 49       		.uleb128 0x49
 13829 004e 13       		.uleb128 0x13
 13830 004f 01       		.uleb128 0x1
 13831 0050 13       		.uleb128 0x13
 13832 0051 00       		.byte	0
 13833 0052 00       		.byte	0
 13834 0053 08       		.uleb128 0x8
 13835 0054 21       		.uleb128 0x21
 13836 0055 00       		.byte	0
 13837 0056 49       		.uleb128 0x49
 13838 0057 13       		.uleb128 0x13
 13839 0058 2F       		.uleb128 0x2f
 13840 0059 0B       		.uleb128 0xb
 13841 005a 00       		.byte	0
 13842 005b 00       		.byte	0
 13843 005c 09       		.uleb128 0x9
 13844 005d 04       		.uleb128 0x4
 13845 005e 01       		.byte	0x1
 13846 005f 03       		.uleb128 0x3
 13847 0060 0E       		.uleb128 0xe
 13848 0061 0B       		.uleb128 0xb
 13849 0062 0B       		.uleb128 0xb
 13850 0063 49       		.uleb128 0x49
 13851 0064 13       		.uleb128 0x13
 13852 0065 3A       		.uleb128 0x3a
 13853 0066 0B       		.uleb128 0xb
 13854 0067 3B       		.uleb128 0x3b
 13855 0068 0B       		.uleb128 0xb
 13856 0069 01       		.uleb128 0x1
 13857 006a 13       		.uleb128 0x13
 13858 006b 00       		.byte	0
 13859 006c 00       		.byte	0
 13860 006d 0A       		.uleb128 0xa
 13861 006e 28       		.uleb128 0x28
 13862 006f 00       		.byte	0
 13863 0070 03       		.uleb128 0x3
 13864 0071 0E       		.uleb128 0xe
 13865 0072 1C       		.uleb128 0x1c
 13866 0073 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 298


 13867 0074 00       		.byte	0
 13868 0075 00       		.byte	0
 13869 0076 0B       		.uleb128 0xb
 13870 0077 13       		.uleb128 0x13
 13871 0078 00       		.byte	0
 13872 0079 03       		.uleb128 0x3
 13873 007a 0E       		.uleb128 0xe
 13874 007b 3C       		.uleb128 0x3c
 13875 007c 19       		.uleb128 0x19
 13876 007d 00       		.byte	0
 13877 007e 00       		.byte	0
 13878 007f 0C       		.uleb128 0xc
 13879 0080 0F       		.uleb128 0xf
 13880 0081 00       		.byte	0
 13881 0082 0B       		.uleb128 0xb
 13882 0083 0B       		.uleb128 0xb
 13883 0084 49       		.uleb128 0x49
 13884 0085 13       		.uleb128 0x13
 13885 0086 00       		.byte	0
 13886 0087 00       		.byte	0
 13887 0088 0D       		.uleb128 0xd
 13888 0089 13       		.uleb128 0x13
 13889 008a 01       		.byte	0x1
 13890 008b 03       		.uleb128 0x3
 13891 008c 0E       		.uleb128 0xe
 13892 008d 0B       		.uleb128 0xb
 13893 008e 0B       		.uleb128 0xb
 13894 008f 3A       		.uleb128 0x3a
 13895 0090 0B       		.uleb128 0xb
 13896 0091 3B       		.uleb128 0x3b
 13897 0092 0B       		.uleb128 0xb
 13898 0093 01       		.uleb128 0x1
 13899 0094 13       		.uleb128 0x13
 13900 0095 00       		.byte	0
 13901 0096 00       		.byte	0
 13902 0097 0E       		.uleb128 0xe
 13903 0098 0D       		.uleb128 0xd
 13904 0099 00       		.byte	0
 13905 009a 03       		.uleb128 0x3
 13906 009b 08       		.uleb128 0x8
 13907 009c 3A       		.uleb128 0x3a
 13908 009d 0B       		.uleb128 0xb
 13909 009e 3B       		.uleb128 0x3b
 13910 009f 0B       		.uleb128 0xb
 13911 00a0 49       		.uleb128 0x49
 13912 00a1 13       		.uleb128 0x13
 13913 00a2 38       		.uleb128 0x38
 13914 00a3 0B       		.uleb128 0xb
 13915 00a4 00       		.byte	0
 13916 00a5 00       		.byte	0
 13917 00a6 0F       		.uleb128 0xf
 13918 00a7 0D       		.uleb128 0xd
 13919 00a8 00       		.byte	0
 13920 00a9 03       		.uleb128 0x3
 13921 00aa 0E       		.uleb128 0xe
 13922 00ab 3A       		.uleb128 0x3a
 13923 00ac 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 299


 13924 00ad 3B       		.uleb128 0x3b
 13925 00ae 0B       		.uleb128 0xb
 13926 00af 49       		.uleb128 0x49
 13927 00b0 13       		.uleb128 0x13
 13928 00b1 38       		.uleb128 0x38
 13929 00b2 0B       		.uleb128 0xb
 13930 00b3 00       		.byte	0
 13931 00b4 00       		.byte	0
 13932 00b5 10       		.uleb128 0x10
 13933 00b6 13       		.uleb128 0x13
 13934 00b7 01       		.byte	0x1
 13935 00b8 03       		.uleb128 0x3
 13936 00b9 0E       		.uleb128 0xe
 13937 00ba 0B       		.uleb128 0xb
 13938 00bb 0B       		.uleb128 0xb
 13939 00bc 3A       		.uleb128 0x3a
 13940 00bd 0B       		.uleb128 0xb
 13941 00be 3B       		.uleb128 0x3b
 13942 00bf 05       		.uleb128 0x5
 13943 00c0 01       		.uleb128 0x1
 13944 00c1 13       		.uleb128 0x13
 13945 00c2 00       		.byte	0
 13946 00c3 00       		.byte	0
 13947 00c4 11       		.uleb128 0x11
 13948 00c5 0D       		.uleb128 0xd
 13949 00c6 00       		.byte	0
 13950 00c7 03       		.uleb128 0x3
 13951 00c8 08       		.uleb128 0x8
 13952 00c9 3A       		.uleb128 0x3a
 13953 00ca 0B       		.uleb128 0xb
 13954 00cb 3B       		.uleb128 0x3b
 13955 00cc 05       		.uleb128 0x5
 13956 00cd 49       		.uleb128 0x49
 13957 00ce 13       		.uleb128 0x13
 13958 00cf 38       		.uleb128 0x38
 13959 00d0 0B       		.uleb128 0xb
 13960 00d1 00       		.byte	0
 13961 00d2 00       		.byte	0
 13962 00d3 12       		.uleb128 0x12
 13963 00d4 0D       		.uleb128 0xd
 13964 00d5 00       		.byte	0
 13965 00d6 03       		.uleb128 0x3
 13966 00d7 0E       		.uleb128 0xe
 13967 00d8 3A       		.uleb128 0x3a
 13968 00d9 0B       		.uleb128 0xb
 13969 00da 3B       		.uleb128 0x3b
 13970 00db 05       		.uleb128 0x5
 13971 00dc 49       		.uleb128 0x49
 13972 00dd 13       		.uleb128 0x13
 13973 00de 38       		.uleb128 0x38
 13974 00df 0B       		.uleb128 0xb
 13975 00e0 00       		.byte	0
 13976 00e1 00       		.byte	0
 13977 00e2 13       		.uleb128 0x13
 13978 00e3 13       		.uleb128 0x13
 13979 00e4 01       		.byte	0x1
 13980 00e5 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 300


 13981 00e6 0E       		.uleb128 0xe
 13982 00e7 0B       		.uleb128 0xb
 13983 00e8 05       		.uleb128 0x5
 13984 00e9 3A       		.uleb128 0x3a
 13985 00ea 0B       		.uleb128 0xb
 13986 00eb 3B       		.uleb128 0x3b
 13987 00ec 05       		.uleb128 0x5
 13988 00ed 01       		.uleb128 0x1
 13989 00ee 13       		.uleb128 0x13
 13990 00ef 00       		.byte	0
 13991 00f0 00       		.byte	0
 13992 00f1 14       		.uleb128 0x14
 13993 00f2 0D       		.uleb128 0xd
 13994 00f3 00       		.byte	0
 13995 00f4 03       		.uleb128 0x3
 13996 00f5 08       		.uleb128 0x8
 13997 00f6 3A       		.uleb128 0x3a
 13998 00f7 0B       		.uleb128 0xb
 13999 00f8 3B       		.uleb128 0x3b
 14000 00f9 05       		.uleb128 0x5
 14001 00fa 49       		.uleb128 0x49
 14002 00fb 13       		.uleb128 0x13
 14003 00fc 38       		.uleb128 0x38
 14004 00fd 05       		.uleb128 0x5
 14005 00fe 00       		.byte	0
 14006 00ff 00       		.byte	0
 14007 0100 15       		.uleb128 0x15
 14008 0101 0D       		.uleb128 0xd
 14009 0102 00       		.byte	0
 14010 0103 03       		.uleb128 0x3
 14011 0104 0E       		.uleb128 0xe
 14012 0105 3A       		.uleb128 0x3a
 14013 0106 0B       		.uleb128 0xb
 14014 0107 3B       		.uleb128 0x3b
 14015 0108 05       		.uleb128 0x5
 14016 0109 49       		.uleb128 0x49
 14017 010a 13       		.uleb128 0x13
 14018 010b 38       		.uleb128 0x38
 14019 010c 05       		.uleb128 0x5
 14020 010d 00       		.byte	0
 14021 010e 00       		.byte	0
 14022 010f 16       		.uleb128 0x16
 14023 0110 04       		.uleb128 0x4
 14024 0111 01       		.byte	0x1
 14025 0112 0B       		.uleb128 0xb
 14026 0113 0B       		.uleb128 0xb
 14027 0114 49       		.uleb128 0x49
 14028 0115 13       		.uleb128 0x13
 14029 0116 3A       		.uleb128 0x3a
 14030 0117 0B       		.uleb128 0xb
 14031 0118 3B       		.uleb128 0x3b
 14032 0119 05       		.uleb128 0x5
 14033 011a 01       		.uleb128 0x1
 14034 011b 13       		.uleb128 0x13
 14035 011c 00       		.byte	0
 14036 011d 00       		.byte	0
 14037 011e 17       		.uleb128 0x17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 301


 14038 011f 2E       		.uleb128 0x2e
 14039 0120 00       		.byte	0
 14040 0121 3F       		.uleb128 0x3f
 14041 0122 19       		.uleb128 0x19
 14042 0123 03       		.uleb128 0x3
 14043 0124 0E       		.uleb128 0xe
 14044 0125 3A       		.uleb128 0x3a
 14045 0126 0B       		.uleb128 0xb
 14046 0127 3B       		.uleb128 0x3b
 14047 0128 0B       		.uleb128 0xb
 14048 0129 27       		.uleb128 0x27
 14049 012a 19       		.uleb128 0x19
 14050 012b 11       		.uleb128 0x11
 14051 012c 01       		.uleb128 0x1
 14052 012d 12       		.uleb128 0x12
 14053 012e 06       		.uleb128 0x6
 14054 012f 40       		.uleb128 0x40
 14055 0130 18       		.uleb128 0x18
 14056 0131 9742     		.uleb128 0x2117
 14057 0133 19       		.uleb128 0x19
 14058 0134 00       		.byte	0
 14059 0135 00       		.byte	0
 14060 0136 18       		.uleb128 0x18
 14061 0137 2E       		.uleb128 0x2e
 14062 0138 01       		.byte	0x1
 14063 0139 3F       		.uleb128 0x3f
 14064 013a 19       		.uleb128 0x19
 14065 013b 03       		.uleb128 0x3
 14066 013c 0E       		.uleb128 0xe
 14067 013d 3A       		.uleb128 0x3a
 14068 013e 0B       		.uleb128 0xb
 14069 013f 3B       		.uleb128 0x3b
 14070 0140 0B       		.uleb128 0xb
 14071 0141 11       		.uleb128 0x11
 14072 0142 01       		.uleb128 0x1
 14073 0143 12       		.uleb128 0x12
 14074 0144 06       		.uleb128 0x6
 14075 0145 40       		.uleb128 0x40
 14076 0146 18       		.uleb128 0x18
 14077 0147 9642     		.uleb128 0x2116
 14078 0149 19       		.uleb128 0x19
 14079 014a 01       		.uleb128 0x1
 14080 014b 13       		.uleb128 0x13
 14081 014c 00       		.byte	0
 14082 014d 00       		.byte	0
 14083 014e 19       		.uleb128 0x19
 14084 014f 34       		.uleb128 0x34
 14085 0150 00       		.byte	0
 14086 0151 03       		.uleb128 0x3
 14087 0152 0E       		.uleb128 0xe
 14088 0153 3A       		.uleb128 0x3a
 14089 0154 0B       		.uleb128 0xb
 14090 0155 3B       		.uleb128 0x3b
 14091 0156 0B       		.uleb128 0xb
 14092 0157 49       		.uleb128 0x49
 14093 0158 13       		.uleb128 0x13
 14094 0159 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 302


 14095 015a 18       		.uleb128 0x18
 14096 015b 00       		.byte	0
 14097 015c 00       		.byte	0
 14098 015d 1A       		.uleb128 0x1a
 14099 015e 2E       		.uleb128 0x2e
 14100 015f 01       		.byte	0x1
 14101 0160 3F       		.uleb128 0x3f
 14102 0161 19       		.uleb128 0x19
 14103 0162 03       		.uleb128 0x3
 14104 0163 0E       		.uleb128 0xe
 14105 0164 3A       		.uleb128 0x3a
 14106 0165 0B       		.uleb128 0xb
 14107 0166 3B       		.uleb128 0x3b
 14108 0167 05       		.uleb128 0x5
 14109 0168 27       		.uleb128 0x27
 14110 0169 19       		.uleb128 0x19
 14111 016a 11       		.uleb128 0x11
 14112 016b 01       		.uleb128 0x1
 14113 016c 12       		.uleb128 0x12
 14114 016d 06       		.uleb128 0x6
 14115 016e 40       		.uleb128 0x40
 14116 016f 18       		.uleb128 0x18
 14117 0170 9642     		.uleb128 0x2116
 14118 0172 19       		.uleb128 0x19
 14119 0173 01       		.uleb128 0x1
 14120 0174 13       		.uleb128 0x13
 14121 0175 00       		.byte	0
 14122 0176 00       		.byte	0
 14123 0177 1B       		.uleb128 0x1b
 14124 0178 34       		.uleb128 0x34
 14125 0179 00       		.byte	0
 14126 017a 03       		.uleb128 0x3
 14127 017b 0E       		.uleb128 0xe
 14128 017c 3A       		.uleb128 0x3a
 14129 017d 0B       		.uleb128 0xb
 14130 017e 3B       		.uleb128 0x3b
 14131 017f 05       		.uleb128 0x5
 14132 0180 49       		.uleb128 0x49
 14133 0181 13       		.uleb128 0x13
 14134 0182 02       		.uleb128 0x2
 14135 0183 18       		.uleb128 0x18
 14136 0184 00       		.byte	0
 14137 0185 00       		.byte	0
 14138 0186 1C       		.uleb128 0x1c
 14139 0187 0B       		.uleb128 0xb
 14140 0188 01       		.byte	0x1
 14141 0189 11       		.uleb128 0x11
 14142 018a 01       		.uleb128 0x1
 14143 018b 12       		.uleb128 0x12
 14144 018c 06       		.uleb128 0x6
 14145 018d 00       		.byte	0
 14146 018e 00       		.byte	0
 14147 018f 1D       		.uleb128 0x1d
 14148 0190 21       		.uleb128 0x21
 14149 0191 00       		.byte	0
 14150 0192 49       		.uleb128 0x49
 14151 0193 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 303


 14152 0194 2F       		.uleb128 0x2f
 14153 0195 05       		.uleb128 0x5
 14154 0196 00       		.byte	0
 14155 0197 00       		.byte	0
 14156 0198 1E       		.uleb128 0x1e
 14157 0199 05       		.uleb128 0x5
 14158 019a 00       		.byte	0
 14159 019b 03       		.uleb128 0x3
 14160 019c 0E       		.uleb128 0xe
 14161 019d 3A       		.uleb128 0x3a
 14162 019e 0B       		.uleb128 0xb
 14163 019f 3B       		.uleb128 0x3b
 14164 01a0 05       		.uleb128 0x5
 14165 01a1 49       		.uleb128 0x49
 14166 01a2 13       		.uleb128 0x13
 14167 01a3 02       		.uleb128 0x2
 14168 01a4 18       		.uleb128 0x18
 14169 01a5 00       		.byte	0
 14170 01a6 00       		.byte	0
 14171 01a7 1F       		.uleb128 0x1f
 14172 01a8 34       		.uleb128 0x34
 14173 01a9 00       		.byte	0
 14174 01aa 03       		.uleb128 0x3
 14175 01ab 08       		.uleb128 0x8
 14176 01ac 3A       		.uleb128 0x3a
 14177 01ad 0B       		.uleb128 0xb
 14178 01ae 3B       		.uleb128 0x3b
 14179 01af 05       		.uleb128 0x5
 14180 01b0 49       		.uleb128 0x49
 14181 01b1 13       		.uleb128 0x13
 14182 01b2 02       		.uleb128 0x2
 14183 01b3 18       		.uleb128 0x18
 14184 01b4 00       		.byte	0
 14185 01b5 00       		.byte	0
 14186 01b6 20       		.uleb128 0x20
 14187 01b7 0B       		.uleb128 0xb
 14188 01b8 01       		.byte	0x1
 14189 01b9 55       		.uleb128 0x55
 14190 01ba 17       		.uleb128 0x17
 14191 01bb 00       		.byte	0
 14192 01bc 00       		.byte	0
 14193 01bd 21       		.uleb128 0x21
 14194 01be 2E       		.uleb128 0x2e
 14195 01bf 01       		.byte	0x1
 14196 01c0 3F       		.uleb128 0x3f
 14197 01c1 19       		.uleb128 0x19
 14198 01c2 03       		.uleb128 0x3
 14199 01c3 0E       		.uleb128 0xe
 14200 01c4 3A       		.uleb128 0x3a
 14201 01c5 0B       		.uleb128 0xb
 14202 01c6 3B       		.uleb128 0x3b
 14203 01c7 05       		.uleb128 0x5
 14204 01c8 27       		.uleb128 0x27
 14205 01c9 19       		.uleb128 0x19
 14206 01ca 11       		.uleb128 0x11
 14207 01cb 01       		.uleb128 0x1
 14208 01cc 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 304


 14209 01cd 06       		.uleb128 0x6
 14210 01ce 40       		.uleb128 0x40
 14211 01cf 18       		.uleb128 0x18
 14212 01d0 9742     		.uleb128 0x2117
 14213 01d2 19       		.uleb128 0x19
 14214 01d3 01       		.uleb128 0x1
 14215 01d4 13       		.uleb128 0x13
 14216 01d5 00       		.byte	0
 14217 01d6 00       		.byte	0
 14218 01d7 22       		.uleb128 0x22
 14219 01d8 0B       		.uleb128 0xb
 14220 01d9 01       		.byte	0x1
 14221 01da 55       		.uleb128 0x55
 14222 01db 17       		.uleb128 0x17
 14223 01dc 01       		.uleb128 0x1
 14224 01dd 13       		.uleb128 0x13
 14225 01de 00       		.byte	0
 14226 01df 00       		.byte	0
 14227 01e0 23       		.uleb128 0x23
 14228 01e1 2E       		.uleb128 0x2e
 14229 01e2 01       		.byte	0x1
 14230 01e3 3F       		.uleb128 0x3f
 14231 01e4 19       		.uleb128 0x19
 14232 01e5 03       		.uleb128 0x3
 14233 01e6 0E       		.uleb128 0xe
 14234 01e7 3A       		.uleb128 0x3a
 14235 01e8 0B       		.uleb128 0xb
 14236 01e9 3B       		.uleb128 0x3b
 14237 01ea 05       		.uleb128 0x5
 14238 01eb 11       		.uleb128 0x11
 14239 01ec 01       		.uleb128 0x1
 14240 01ed 12       		.uleb128 0x12
 14241 01ee 06       		.uleb128 0x6
 14242 01ef 40       		.uleb128 0x40
 14243 01f0 18       		.uleb128 0x18
 14244 01f1 9642     		.uleb128 0x2116
 14245 01f3 19       		.uleb128 0x19
 14246 01f4 01       		.uleb128 0x1
 14247 01f5 13       		.uleb128 0x13
 14248 01f6 00       		.byte	0
 14249 01f7 00       		.byte	0
 14250 01f8 24       		.uleb128 0x24
 14251 01f9 05       		.uleb128 0x5
 14252 01fa 00       		.byte	0
 14253 01fb 03       		.uleb128 0x3
 14254 01fc 08       		.uleb128 0x8
 14255 01fd 3A       		.uleb128 0x3a
 14256 01fe 0B       		.uleb128 0xb
 14257 01ff 3B       		.uleb128 0x3b
 14258 0200 05       		.uleb128 0x5
 14259 0201 49       		.uleb128 0x49
 14260 0202 13       		.uleb128 0x13
 14261 0203 02       		.uleb128 0x2
 14262 0204 18       		.uleb128 0x18
 14263 0205 00       		.byte	0
 14264 0206 00       		.byte	0
 14265 0207 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 305


 14266 0208 34       		.uleb128 0x34
 14267 0209 00       		.byte	0
 14268 020a 03       		.uleb128 0x3
 14269 020b 08       		.uleb128 0x8
 14270 020c 3A       		.uleb128 0x3a
 14271 020d 0B       		.uleb128 0xb
 14272 020e 3B       		.uleb128 0x3b
 14273 020f 05       		.uleb128 0x5
 14274 0210 49       		.uleb128 0x49
 14275 0211 13       		.uleb128 0x13
 14276 0212 00       		.byte	0
 14277 0213 00       		.byte	0
 14278 0214 26       		.uleb128 0x26
 14279 0215 2E       		.uleb128 0x2e
 14280 0216 01       		.byte	0x1
 14281 0217 3F       		.uleb128 0x3f
 14282 0218 19       		.uleb128 0x19
 14283 0219 03       		.uleb128 0x3
 14284 021a 0E       		.uleb128 0xe
 14285 021b 3A       		.uleb128 0x3a
 14286 021c 0B       		.uleb128 0xb
 14287 021d 3B       		.uleb128 0x3b
 14288 021e 05       		.uleb128 0x5
 14289 021f 11       		.uleb128 0x11
 14290 0220 01       		.uleb128 0x1
 14291 0221 12       		.uleb128 0x12
 14292 0222 06       		.uleb128 0x6
 14293 0223 40       		.uleb128 0x40
 14294 0224 18       		.uleb128 0x18
 14295 0225 9742     		.uleb128 0x2117
 14296 0227 19       		.uleb128 0x19
 14297 0228 01       		.uleb128 0x1
 14298 0229 13       		.uleb128 0x13
 14299 022a 00       		.byte	0
 14300 022b 00       		.byte	0
 14301 022c 27       		.uleb128 0x27
 14302 022d 26       		.uleb128 0x26
 14303 022e 00       		.byte	0
 14304 022f 49       		.uleb128 0x49
 14305 0230 13       		.uleb128 0x13
 14306 0231 00       		.byte	0
 14307 0232 00       		.byte	0
 14308 0233 28       		.uleb128 0x28
 14309 0234 34       		.uleb128 0x34
 14310 0235 00       		.byte	0
 14311 0236 03       		.uleb128 0x3
 14312 0237 0E       		.uleb128 0xe
 14313 0238 3A       		.uleb128 0x3a
 14314 0239 0B       		.uleb128 0xb
 14315 023a 3B       		.uleb128 0x3b
 14316 023b 05       		.uleb128 0x5
 14317 023c 49       		.uleb128 0x49
 14318 023d 13       		.uleb128 0x13
 14319 023e 3F       		.uleb128 0x3f
 14320 023f 19       		.uleb128 0x19
 14321 0240 3C       		.uleb128 0x3c
 14322 0241 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 306


 14323 0242 00       		.byte	0
 14324 0243 00       		.byte	0
 14325 0244 00       		.byte	0
 14326              		.section	.debug_aranges,"",%progbits
 14327 0000 94000000 		.4byte	0x94
 14328 0004 0200     		.2byte	0x2
 14329 0006 00000000 		.4byte	.Ldebug_info0
 14330 000a 04       		.byte	0x4
 14331 000b 00       		.byte	0
 14332 000c 0000     		.2byte	0
 14333 000e 0000     		.2byte	0
 14334 0010 00000000 		.4byte	.LFB64
 14335 0014 18000000 		.4byte	.LFE64-.LFB64
 14336 0018 00000000 		.4byte	.LFB65
 14337 001c 20000000 		.4byte	.LFE65-.LFB65
 14338 0020 00000000 		.4byte	.LFB66
 14339 0024 0C020000 		.4byte	.LFE66-.LFB66
 14340 0028 00000000 		.4byte	.LFB67
 14341 002c D0040000 		.4byte	.LFE67-.LFB67
 14342 0030 00000000 		.4byte	.LFB68
 14343 0034 CC050000 		.4byte	.LFE68-.LFB68
 14344 0038 00000000 		.4byte	.LFB69
 14345 003c 34030000 		.4byte	.LFE69-.LFB69
 14346 0040 00000000 		.4byte	.LFB70
 14347 0044 B0010000 		.4byte	.LFE70-.LFB70
 14348 0048 00000000 		.4byte	.LFB71
 14349 004c 0C070000 		.4byte	.LFE71-.LFB71
 14350 0050 00000000 		.4byte	.LFB72
 14351 0054 70090000 		.4byte	.LFE72-.LFB72
 14352 0058 00000000 		.4byte	.LFB73
 14353 005c DC000000 		.4byte	.LFE73-.LFB73
 14354 0060 00000000 		.4byte	.LFB74
 14355 0064 00080000 		.4byte	.LFE74-.LFB74
 14356 0068 00000000 		.4byte	.LFB75
 14357 006c D8120000 		.4byte	.LFE75-.LFB75
 14358 0070 00000000 		.4byte	.LFB76
 14359 0074 0C010000 		.4byte	.LFE76-.LFB76
 14360 0078 00000000 		.4byte	.LFB77
 14361 007c A8000000 		.4byte	.LFE77-.LFB77
 14362 0080 00000000 		.4byte	.LFB78
 14363 0084 58060000 		.4byte	.LFE78-.LFB78
 14364 0088 00000000 		.4byte	.LFB79
 14365 008c 08010000 		.4byte	.LFE79-.LFB79
 14366 0090 00000000 		.4byte	0
 14367 0094 00000000 		.4byte	0
 14368              		.section	.debug_ranges,"",%progbits
 14369              	.Ldebug_ranges0:
 14370 0000 68010000 		.4byte	.LBB3
 14371 0004 AA010000 		.4byte	.LBE3
 14372 0008 AC010000 		.4byte	.LBB4
 14373 000c F2010000 		.4byte	.LBE4
 14374 0010 00000000 		.4byte	0
 14375 0014 00000000 		.4byte	0
 14376 0018 3A000000 		.4byte	.LBB5
 14377 001c 40010000 		.4byte	.LBE5
 14378 0020 42010000 		.4byte	.LBB6
 14379 0024 BC010000 		.4byte	.LBE6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 307


 14380 0028 00000000 		.4byte	0
 14381 002c 00000000 		.4byte	0
 14382 0030 BE010000 		.4byte	.LBB7
 14383 0034 20030000 		.4byte	.LBE7
 14384 0038 22030000 		.4byte	.LBB8
 14385 003c 24030000 		.4byte	.LBE8
 14386 0040 00000000 		.4byte	0
 14387 0044 00000000 		.4byte	0
 14388 0048 00000000 		.4byte	.LFB64
 14389 004c 18000000 		.4byte	.LFE64
 14390 0050 00000000 		.4byte	.LFB65
 14391 0054 20000000 		.4byte	.LFE65
 14392 0058 00000000 		.4byte	.LFB66
 14393 005c 0C020000 		.4byte	.LFE66
 14394 0060 00000000 		.4byte	.LFB67
 14395 0064 D0040000 		.4byte	.LFE67
 14396 0068 00000000 		.4byte	.LFB68
 14397 006c CC050000 		.4byte	.LFE68
 14398 0070 00000000 		.4byte	.LFB69
 14399 0074 34030000 		.4byte	.LFE69
 14400 0078 00000000 		.4byte	.LFB70
 14401 007c B0010000 		.4byte	.LFE70
 14402 0080 00000000 		.4byte	.LFB71
 14403 0084 0C070000 		.4byte	.LFE71
 14404 0088 00000000 		.4byte	.LFB72
 14405 008c 70090000 		.4byte	.LFE72
 14406 0090 00000000 		.4byte	.LFB73
 14407 0094 DC000000 		.4byte	.LFE73
 14408 0098 00000000 		.4byte	.LFB74
 14409 009c 00080000 		.4byte	.LFE74
 14410 00a0 00000000 		.4byte	.LFB75
 14411 00a4 D8120000 		.4byte	.LFE75
 14412 00a8 00000000 		.4byte	.LFB76
 14413 00ac 0C010000 		.4byte	.LFE76
 14414 00b0 00000000 		.4byte	.LFB77
 14415 00b4 A8000000 		.4byte	.LFE77
 14416 00b8 00000000 		.4byte	.LFB78
 14417 00bc 58060000 		.4byte	.LFE78
 14418 00c0 00000000 		.4byte	.LFB79
 14419 00c4 08010000 		.4byte	.LFE79
 14420 00c8 00000000 		.4byte	0
 14421 00cc 00000000 		.4byte	0
 14422              		.section	.debug_line,"",%progbits
 14423              	.Ldebug_line0:
 14424 0000 4B0C0000 		.section	.debug_str,"MS",%progbits,1
 14424      0200AC01 
 14424      00000201 
 14424      FB0E0D00 
 14424      01010101 
 14425              	.LASF56:
 14426 0000 656D675F 		.ascii	"emg_act_counter\000"
 14426      6163745F 
 14426      636F756E 
 14426      74657200 
 14427              	.LASF24:
 14428 0010 73697A65 		.ascii	"sizetype\000"
 14428      74797065 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 308


 14428      00
 14429              	.LASF63:
 14430 0019 706F7765 		.ascii	"power_cycles\000"
 14430      725F6379 
 14430      636C6573 
 14430      00
 14431              	.LASF274:
 14432 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14432      6379636C 
 14432      655F7374 
 14432      61747573 
 14432      00
 14433              	.LASF150:
 14434 0037 77726973 		.ascii	"wrist_direction_association\000"
 14434      745F6469 
 14434      72656374 
 14434      696F6E5F 
 14434      6173736F 
 14435              	.LASF30:
 14436 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14436      545F4D4F 
 14436      44455F45 
 14436      4D475F46 
 14436      4346535F 
 14437              	.LASF122:
 14438 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14438      5F414443 
 14438      5F73656E 
 14438      736F7273 
 14438      5F706F72 
 14439              	.LASF155:
 14440 0086 75736572 		.ascii	"user\000"
 14440      00
 14441              	.LASF10:
 14442 008b 696E7433 		.ascii	"int32_t\000"
 14442      325F7400 
 14443              	.LASF315:
 14444 0093 675F7278 		.ascii	"g_rx\000"
 14444      00
 14445              	.LASF251:
 14446 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14446      74696D65 
 14446      5F657865 
 14446      63757465 
 14446      00
 14447              	.LASF51:
 14448 00a9 73745F64 		.ascii	"st_data\000"
 14448      61746100 
 14449              	.LASF364:
 14450 00b1 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 14450      73657273 
 14450      5C6D676E 
 14450      6F63636F 
 14450      5C446F63 
 14451 00de 5F574953 		.ascii	"_WISH_VIBES\\FW_Socket - WISH+Dayton\\PULSE_Socket."
 14451      485F5649 
 14451      4245535C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 309


 14451      46575F53 
 14451      6F636B65 
 14452 010f 63796473 		.ascii	"cydsn\000"
 14452      6E00
 14453              	.LASF61:
 14454 0115 746F7461 		.ascii	"total_runtime\000"
 14454      6C5F7275 
 14454      6E74696D 
 14454      6500
 14455              	.LASF13:
 14456 0123 75696E74 		.ascii	"uint32\000"
 14456      333200
 14457              	.LASF236:
 14458 012a 6E5F6C69 		.ascii	"n_line\000"
 14458      6E6500
 14459              	.LASF156:
 14460 0131 4A4F595F 		.ascii	"JOY_spec\000"
 14460      73706563 
 14460      00
 14461              	.LASF90:
 14462 013a 706F735F 		.ascii	"pos_lim_inf\000"
 14462      6C696D5F 
 14462      696E6600 
 14463              	.LASF341:
 14464 0146 74656E73 		.ascii	"tension_valid\000"
 14464      696F6E5F 
 14464      76616C69 
 14464      6400
 14465              	.LASF211:
 14466 0154 6572725F 		.ascii	"err_joy_1\000"
 14466      6A6F795F 
 14466      3100
 14467              	.LASF187:
 14468 015e 73746174 		.ascii	"state\000"
 14468      6500
 14469              	.LASF343:
 14470 0164 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14470      65735F69 
 14470      6E746572 
 14470      72757074 
 14470      5F666C61 
 14471              	.LASF284:
 14472 017a 62696E5F 		.ascii	"bin_max\000"
 14472      6D617800 
 14473              	.LASF301:
 14474 0182 61646472 		.ascii	"addr_start_c\000"
 14474      5F737461 
 14474      72745F63 
 14474      00
 14475              	.LASF29:
 14476 018f 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14476      545F4D4F 
 14476      44455F45 
 14476      4D475F46 
 14476      43465300 
 14477              	.LASF94:
 14478 01a3 63757272 		.ascii	"curr_lookup\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 310


 14478      5F6C6F6F 
 14478      6B757000 
 14479              	.LASF220:
 14480 01af 70776D5F 		.ascii	"pwm_input\000"
 14480      696E7075 
 14480      7400
 14481              	.LASF59:
 14482 01b9 72657374 		.ascii	"rest_counter\000"
 14482      5F636F75 
 14482      6E746572 
 14482      00
 14483              	.LASF137:
 14484 01c6 73745F4D 		.ascii	"st_MASTER_spec\000"
 14484      41535445 
 14484      525F7370 
 14484      656300
 14485              	.LASF28:
 14486 01d5 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14486      545F4D4F 
 14486      44455F45 
 14486      4D475F49 
 14486      4E544547 
 14487              	.LASF267:
 14488 01ed 765F636F 		.ascii	"v_count\000"
 14488      756E7400 
 14489              	.LASF192:
 14490 01f5 72785F64 		.ascii	"rx_data\000"
 14490      61746100 
 14491              	.LASF255:
 14492 01fd 7676765F 		.ascii	"vvv_value\000"
 14492      76616C75 
 14492      6500
 14493              	.LASF14:
 14494 0207 696E7438 		.ascii	"int8\000"
 14494      00
 14495              	.LASF197:
 14496 020c 696E666F 		.ascii	"info_\000"
 14496      5F00
 14497              	.LASF323:
 14498 0212 66696C74 		.ascii	"filt_emg\000"
 14498      5F656D67 
 14498      00
 14499              	.LASF109:
 14500 021b 73745F65 		.ascii	"st_emg\000"
 14500      6D6700
 14501              	.LASF57:
 14502 0222 706F7369 		.ascii	"position_hist\000"
 14502      74696F6E 
 14502      5F686973 
 14502      7400
 14503              	.LASF179:
 14504 0230 50524550 		.ascii	"PREPARE_DATA\000"
 14504      4152455F 
 14504      44415441 
 14504      00
 14505              	.LASF163:
 14506 023d 74656D70 		.ascii	"temp_value\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 311


 14506      5F76616C 
 14506      756500
 14507              	.LASF281:
 14508 0248 7468725F 		.ascii	"thr_pos\000"
 14508      706F7300 
 14509              	.LASF147:
 14510 0250 73745F57 		.ascii	"st_WR_spec\000"
 14510      525F7370 
 14510      656300
 14511              	.LASF213:
 14512 025b 6572725F 		.ascii	"err_joy_2\000"
 14512      6A6F795F 
 14512      3200
 14513              	.LASF54:
 14514 0265 72656164 		.ascii	"ready\000"
 14514      7900
 14515              	.LASF106:
 14516 026b 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14516      6964785F 
 14516      7573655F 
 14516      666F725F 
 14516      636F6E74 
 14517              	.LASF166:
 14518 0283 6761696E 		.ascii	"gain\000"
 14518      00
 14519              	.LASF67:
 14520 0288 73745F64 		.ascii	"st_device\000"
 14520      65766963 
 14520      6500
 14521              	.LASF27:
 14522 0292 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14522      545F4D4F 
 14522      44455F45 
 14522      4D475F50 
 14522      524F504F 
 14523              	.LASF72:
 14524 02ae 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14524      326E645F 
 14524      6D6F746F 
 14524      725F666C 
 14524      616700
 14525              	.LASF260:
 14526 02c1 55445F63 		.ascii	"UD_counter\000"
 14526      6F756E74 
 14526      657200
 14527              	.LASF64:
 14528 02cc 65786365 		.ascii	"excessive_signal_activity\000"
 14528      73736976 
 14528      655F7369 
 14528      676E616C 
 14528      5F616374 
 14529              	.LASF175:
 14530 02e6 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14530      414E445F 
 14530      4D45414E 
 14530      00
 14531              	.LASF116:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 312


 14532 02f3 72656164 		.ascii	"read_imu_flag\000"
 14532      5F696D75 
 14532      5F666C61 
 14532      6700
 14533              	.LASF124:
 14534 0301 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14534      72645F45 
 14534      4D475F68 
 14534      6973746F 
 14534      72795F6F 
 14535              	.LASF264:
 14536 031a 66697273 		.ascii	"first_tension_valid\000"
 14536      745F7465 
 14536      6E73696F 
 14536      6E5F7661 
 14536      6C696400 
 14537              	.LASF325:
 14538 032e 74696D65 		.ascii	"timer_value\000"
 14538      725F7661 
 14538      6C756500 
 14539              	.LASF4:
 14540 033a 6C6F6E67 		.ascii	"long int\000"
 14540      20696E74 
 14540      00
 14541              	.LASF153:
 14542 0343 756E7573 		.ascii	"unused_bytes1\000"
 14542      65645F62 
 14542      79746573 
 14542      3100
 14543              	.LASF200:
 14544 0351 454D475F 		.ascii	"EMG_history_info_\000"
 14544      68697374 
 14544      6F72795F 
 14544      696E666F 
 14544      5F00
 14545              	.LASF225:
 14546 0363 53485F45 		.ascii	"SH_ENC_L\000"
 14546      4E435F4C 
 14546      00
 14547              	.LASF71:
 14548 036c 72657365 		.ascii	"reset_counters\000"
 14548      745F636F 
 14548      756E7465 
 14548      727300
 14549              	.LASF279:
 14550 037b 62696E5F 		.ascii	"bin_threshold\000"
 14550      74687265 
 14550      73686F6C 
 14550      6400
 14551              	.LASF127:
 14552 0389 75736572 		.ascii	"user_emg\000"
 14552      5F656D67 
 14552      00
 14553              	.LASF250:
 14554 0392 73616665 		.ascii	"safe_startup_motor_activation\000"
 14554      5F737461 
 14554      72747570 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 313


 14554      5F6D6F74 
 14554      6F725F61 
 14555              	.LASF66:
 14556 03b0 756E7573 		.ascii	"unused_bytes\000"
 14556      65645F62 
 14556      79746573 
 14556      00
 14557              	.LASF159:
 14558 03bd 61636365 		.ascii	"accel_value\000"
 14558      6C5F7661 
 14558      6C756500 
 14559              	.LASF313:
 14560 03c9 675F6164 		.ascii	"g_adc_measOld\000"
 14560      635F6D65 
 14560      61734F6C 
 14560      6400
 14561              	.LASF239:
 14562 03d7 6175785F 		.ascii	"aux_encoder\000"
 14562      656E636F 
 14562      64657200 
 14563              	.LASF55:
 14564 03e3 73745F63 		.ascii	"st_counters\000"
 14564      6F756E74 
 14564      65727300 
 14565              	.LASF224:
 14566 03ef 53485F4D 		.ascii	"SH_MOT\000"
 14566      4F5400
 14567              	.LASF324:
 14568 03f6 66696C74 		.ascii	"filt_detect_pc\000"
 14568      5F646574 
 14568      6563745F 
 14568      706300
 14569              	.LASF17:
 14570 0405 666C6F61 		.ascii	"float32\000"
 14570      74333200 
 14571              	.LASF235:
 14572 040d 656E636F 		.ascii	"encoder_reading_SPI\000"
 14572      6465725F 
 14572      72656164 
 14572      696E675F 
 14572      53504900 
 14573              	.LASF248:
 14574 0421 6572726F 		.ascii	"error\000"
 14574      7200
 14575              	.LASF182:
 14576 0427 57524954 		.ascii	"WRITE_END\000"
 14576      455F454E 
 14576      4400
 14577              	.LASF261:
 14578 0431 4C525F63 		.ascii	"LR_counter\000"
 14578      6F756E74 
 14578      657200
 14579              	.LASF355:
 14580 043c 706F735F 		.ascii	"pos_reconstruct\000"
 14580      7265636F 
 14580      6E737472 
 14580      75637400 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 314


 14581              	.LASF269:
 14582 044c 70776D5F 		.ascii	"pwm_limit_search\000"
 14582      6C696D69 
 14582      745F7365 
 14582      61726368 
 14582      00
 14583              	.LASF0:
 14584 045d 7369676E 		.ascii	"signed char\000"
 14584      65642063 
 14584      68617200 
 14585              	.LASF126:
 14586 0469 75736572 		.ascii	"user_code_string\000"
 14586      5F636F64 
 14586      655F7374 
 14586      72696E67 
 14586      00
 14587              	.LASF138:
 14588 047a 6D617374 		.ascii	"master_mode_active\000"
 14588      65725F6D 
 14588      6F64655F 
 14588      61637469 
 14588      766500
 14589              	.LASF167:
 14590 048d 73745F63 		.ascii	"st_calib\000"
 14590      616C6962 
 14590      00
 14591              	.LASF207:
 14592 0496 6572725F 		.ascii	"err_emg_1\000"
 14592      656D675F 
 14592      3100
 14593              	.LASF208:
 14594 04a0 6572725F 		.ascii	"err_emg_2\000"
 14594      656D675F 
 14594      3200
 14595              	.LASF114:
 14596 04aa 73776974 		.ascii	"switch_emg\000"
 14596      63685F65 
 14596      6D6700
 14597              	.LASF337:
 14598 04b5 656D675F 		.ascii	"emg_2_status\000"
 14598      325F7374 
 14598      61747573 
 14598      00
 14599              	.LASF349:
 14600 04c2 4144435F 		.ascii	"ADC_buf\000"
 14600      62756600 
 14601              	.LASF342:
 14602 04ca 696E7465 		.ascii	"interrupt_flag\000"
 14602      72727570 
 14602      745F666C 
 14602      616700
 14603              	.LASF290:
 14604 04d9 73746570 		.ascii	"step\000"
 14604      00
 14605              	.LASF227:
 14606 04de 63757272 		.ascii	"curr_error_sum\000"
 14606      5F657272 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 315


 14606      6F725F73 
 14606      756D00
 14607              	.LASF1:
 14608 04ed 756E7369 		.ascii	"unsigned char\000"
 14608      676E6564 
 14608      20636861 
 14608      7200
 14609              	.LASF100:
 14610 04fb 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14610      72657665 
 14610      72735F6D 
 14610      6F746F72 
 14610      5F666C61 
 14611              	.LASF299:
 14612 0511 726F775F 		.ascii	"row_start\000"
 14612      73746172 
 14612      7400
 14613              	.LASF346:
 14614 051b 666F7263 		.ascii	"forced_open\000"
 14614      65645F6F 
 14614      70656E00 
 14615              	.LASF243:
 14616 0527 73706565 		.ascii	"speed_encoder\000"
 14616      645F656E 
 14616      636F6465 
 14616      7200
 14617              	.LASF308:
 14618 0535 675F7265 		.ascii	"g_refNew\000"
 14618      664E6577 
 14618      00
 14619              	.LASF288:
 14620 053e 63757272 		.ascii	"curr_off\000"
 14620      5F6F6666 
 14620      00
 14621              	.LASF70:
 14622 0547 72696768 		.ascii	"right_left\000"
 14622      745F6C65 
 14622      667400
 14623              	.LASF98:
 14624 0552 656E636F 		.ascii	"encoder_line\000"
 14624      6465725F 
 14624      6C696E65 
 14624      00
 14625              	.LASF336:
 14626 055f 656D675F 		.ascii	"emg_1_status\000"
 14626      315F7374 
 14626      61747573 
 14626      00
 14627              	.LASF158:
 14628 056c 666C6167 		.ascii	"flags\000"
 14628      7300
 14629              	.LASF206:
 14630 0572 68616E64 		.ascii	"handle_value\000"
 14630      6C655F76 
 14630      616C7565 
 14630      00
 14631              	.LASF50:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 316


 14632 057f 70726573 		.ascii	"pressure\000"
 14632      73757265 
 14632      00
 14633              	.LASF20:
 14634 0588 63686172 		.ascii	"char\000"
 14634      00
 14635              	.LASF265:
 14636 058d 64657465 		.ascii	"detect_power_cycle_prev\000"
 14636      63745F70 
 14636      6F776572 
 14636      5F637963 
 14636      6C655F70 
 14637              	.LASF93:
 14638 05a5 6D61785F 		.ascii	"max_step_pos\000"
 14638      73746570 
 14638      5F706F73 
 14638      00
 14639              	.LASF351:
 14640 05b2 70776D5F 		.ascii	"pwm_sign\000"
 14640      7369676E 
 14640      00
 14641              	.LASF233:
 14642 05bb 6D6F746F 		.ascii	"motor_control_generic\000"
 14642      725F636F 
 14642      6E74726F 
 14642      6C5F6765 
 14642      6E657269 
 14643              	.LASF359:
 14644 05d1 675F696D 		.ascii	"g_imu\000"
 14644      7500
 14645              	.LASF322:
 14646 05d7 66696C74 		.ascii	"filt_vel\000"
 14646      5F76656C 
 14646      00
 14647              	.LASF306:
 14648 05e0 675F7265 		.ascii	"g_ref_vibrotactile\000"
 14648      665F7669 
 14648      62726F74 
 14648      61637469 
 14648      6C6500
 14649              	.LASF99:
 14650 05f3 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14650      72617465 
 14650      5F6C696D 
 14650      69746572 
 14650      00
 14651              	.LASF79:
 14652 0604 6B5F645F 		.ascii	"k_d_c\000"
 14652      6300
 14653              	.LASF328:
 14654 060a 666C6167 		.ascii	"flag_master\000"
 14654      5F6D6173 
 14654      74657200 
 14655              	.LASF178:
 14656 0616 6164635F 		.ascii	"adc_status\000"
 14656      73746174 
 14656      757300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 317


 14657              	.LASF49:
 14658 0621 73745F66 		.ascii	"st_fb_meas\000"
 14658      625F6D65 
 14658      617300
 14659              	.LASF104:
 14660 062c 6D5F6D75 		.ascii	"m_mult\000"
 14660      6C7400
 14661              	.LASF78:
 14662 0633 6B5F695F 		.ascii	"k_i_c\000"
 14662      6300
 14663              	.LASF231:
 14664 0639 6D6F746F 		.ascii	"motor_dir\000"
 14664      725F6469 
 14664      7200
 14665              	.LASF283:
 14666 0643 62696E5F 		.ascii	"bin_st\000"
 14666      737400
 14667              	.LASF185:
 14668 064a 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14668      52533438 
 14668      355F5258 
 14668      5F457849 
 14668      6E746572 
 14669              	.LASF91:
 14670 0663 706F735F 		.ascii	"pos_lim_sup\000"
 14670      6C696D5F 
 14670      73757000 
 14671              	.LASF165:
 14672 066f 6F6C645F 		.ascii	"old_value\000"
 14672      76616C75 
 14672      6500
 14673              	.LASF112:
 14674 0679 656D675F 		.ascii	"emg_speed\000"
 14674      73706565 
 14674      6400
 14675              	.LASF131:
 14676 0683 72657374 		.ascii	"rest_vel\000"
 14676      5F76656C 
 14676      00
 14677              	.LASF172:
 14678 068c 4E4F524D 		.ascii	"NORMAL\000"
 14678      414C00
 14679              	.LASF219:
 14680 0693 6D6F746F 		.ascii	"motor_control_SH\000"
 14680      725F636F 
 14680      6E74726F 
 14680      6C5F5348 
 14680      00
 14681              	.LASF357:
 14682 06a4 7046696C 		.ascii	"pFile\000"
 14682      6500
 14683              	.LASF226:
 14684 06aa 706F735F 		.ascii	"pos_error_sum\000"
 14684      6572726F 
 14684      725F7375 
 14684      6D00
 14685              	.LASF123:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 318


 14686 06b8 4144435F 		.ascii	"ADC_conf\000"
 14686      636F6E66 
 14686      00
 14687              	.LASF332:
 14688 06c1 6465765F 		.ascii	"dev_tension_f\000"
 14688      74656E73 
 14688      696F6E5F 
 14688      6600
 14689              	.LASF146:
 14690 06cf 73745F72 		.ascii	"st_ref_vibrotactile\000"
 14690      65665F76 
 14690      6962726F 
 14690      74616374 
 14690      696C6500 
 14691              	.LASF81:
 14692 06e3 6B5F695F 		.ascii	"k_i_dl\000"
 14692      646C00
 14693              	.LASF52:
 14694 06ea 62756666 		.ascii	"buffer\000"
 14694      657200
 14695              	.LASF83:
 14696 06f1 6B5F705F 		.ascii	"k_p_c_dl\000"
 14696      635F646C 
 14696      00
 14697              	.LASF193:
 14698 06fa 72785F64 		.ascii	"rx_data_type\000"
 14698      6174615F 
 14698      74797065 
 14698      00
 14699              	.LASF360:
 14700 0707 675F696D 		.ascii	"g_imuNew\000"
 14700      754E6577 
 14700      00
 14701              	.LASF170:
 14702 0710 73706565 		.ascii	"speed\000"
 14702      6400
 14703              	.LASF232:
 14704 0716 706F7369 		.ascii	"position_counter\000"
 14704      74696F6E 
 14704      5F636F75 
 14704      6E746572 
 14704      00
 14705              	.LASF292:
 14706 0727 74696D65 		.ascii	"timer_value_e\000"
 14706      725F7661 
 14706      6C75655F 
 14706      6500
 14707              	.LASF188:
 14708 0735 64617461 		.ascii	"data_packet_index\000"
 14708      5F706163 
 14708      6B65745F 
 14708      696E6465 
 14708      7800
 14709              	.LASF190:
 14710 0747 64617461 		.ascii	"data_packet_buffer\000"
 14710      5F706163 
 14710      6B65745F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 319


 14710      62756666 
 14710      657200
 14711              	.LASF204:
 14712 075a 73745F72 		.ascii	"st_ref_p\000"
 14712      65665F70 
 14712      00
 14713              	.LASF335:
 14714 0763 6379636C 		.ascii	"cycles_status\000"
 14714      65735F73 
 14714      74617475 
 14714      7300
 14715              	.LASF195:
 14716 0771 636F756E 		.ascii	"counter_calibration\000"
 14716      7465725F 
 14716      63616C69 
 14716      62726174 
 14716      696F6E00 
 14717              	.LASF310:
 14718 0785 675F6D65 		.ascii	"g_meas\000"
 14718      617300
 14719              	.LASF291:
 14720 078c 74696D65 		.ascii	"timer_value_s\000"
 14720      725F7661 
 14720      6C75655F 
 14720      7300
 14721              	.LASF354:
 14722 079a 456E636F 		.ascii	"Encoder_Check\000"
 14722      6465725F 
 14722      43686563 
 14722      6B00
 14723              	.LASF247:
 14724 07a8 636F6D70 		.ascii	"comp_value_encoder\000"
 14724      5F76616C 
 14724      75655F65 
 14724      6E636F64 
 14724      657200
 14725              	.LASF295:
 14726 07bb 73746172 		.ascii	"start_emg_pos\000"
 14726      745F656D 
 14726      675F706F 
 14726      7300
 14727              	.LASF352:
 14728 07c9 64617461 		.ascii	"data_encoder_raw\000"
 14728      5F656E63 
 14728      6F646572 
 14728      5F726177 
 14728      00
 14729              	.LASF307:
 14730 07da 675F7265 		.ascii	"g_ref\000"
 14730      6600
 14731              	.LASF25:
 14732 07e0 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14732      545F4D4F 
 14732      44455F45 
 14732      58544552 
 14732      4E414C00 
 14733              	.LASF238:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 320


 14734 07f4 696E6465 		.ascii	"index\000"
 14734      7800
 14735              	.LASF142:
 14736 07fa 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14736      6D756D5F 
 14736      70726573 
 14736      73757265 
 14736      5F6B5061 
 14737              	.LASF132:
 14738 080f 72657374 		.ascii	"rest_position_flag\000"
 14738      5F706F73 
 14738      6974696F 
 14738      6E5F666C 
 14738      616700
 14739              	.LASF134:
 14740 0822 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14740      7469636B 
 14740      5F636C6F 
 14740      73757265 
 14740      5F737065 
 14741              	.LASF84:
 14742 0839 6B5F695F 		.ascii	"k_i_c_dl\000"
 14742      635F646C 
 14742      00
 14743              	.LASF194:
 14744 0842 7061636B 		.ascii	"package_count\000"
 14744      6167655F 
 14744      636F756E 
 14744      7400
 14745              	.LASF38:
 14746 0850 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14746      5F414E44 
 14746      5F504F53 
 14746      5F434F4E 
 14746      54524F4C 
 14747              	.LASF168:
 14748 0865 656E6162 		.ascii	"enabled\000"
 14748      6C656400 
 14749              	.LASF5:
 14750 086d 6C6F6E67 		.ascii	"long unsigned int\000"
 14750      20756E73 
 14750      69676E65 
 14750      6420696E 
 14750      7400
 14751              	.LASF358:
 14752 087f 70454D47 		.ascii	"pEMGHFile\000"
 14752      4846696C 
 14752      6500
 14753              	.LASF180:
 14754 0889 57524954 		.ascii	"WRITE_CYCLES\000"
 14754      455F4359 
 14754      434C4553 
 14754      00
 14755              	.LASF136:
 14756 0896 6A6F7973 		.ascii	"joystick_gains\000"
 14756      7469636B 
 14756      5F676169 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 321


 14756      6E7300
 14757              	.LASF45:
 14758 08a5 686F6C64 		.ascii	"hold_curr\000"
 14758      5F637572 
 14758      7200
 14759              	.LASF31:
 14760 08af 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14760      545F4D4F 
 14760      44455F4A 
 14760      4F595354 
 14760      49434B00 
 14761              	.LASF62:
 14762 08c3 746F7461 		.ascii	"total_time_rest\000"
 14762      6C5F7469 
 14762      6D655F72 
 14762      65737400 
 14763              	.LASF86:
 14764 08d3 61637469 		.ascii	"activ\000"
 14764      7600
 14765              	.LASF272:
 14766 08d9 6D696E5F 		.ascii	"min_tension\000"
 14766      74656E73 
 14766      696F6E00 
 14767              	.LASF347:
 14768 08e5 62617474 		.ascii	"battery_low_SoC\000"
 14768      6572795F 
 14768      6C6F775F 
 14768      536F4300 
 14769              	.LASF203:
 14770 08f5 6D6F746F 		.ascii	"motor_idx\000"
 14770      725F6964 
 14770      7800
 14771              	.LASF103:
 14772 08ff 6D5F6F66 		.ascii	"m_off\000"
 14772      6600
 14773              	.LASF340:
 14774 0905 72657365 		.ascii	"reset_last_value_flag\000"
 14774      745F6C61 
 14774      73745F76 
 14774      616C7565 
 14774      5F666C61 
 14775              	.LASF162:
 14776 091b 71756174 		.ascii	"quat_value\000"
 14776      5F76616C 
 14776      756500
 14777              	.LASF129:
 14778 0926 72657374 		.ascii	"rest_pos\000"
 14778      5F706F73 
 14778      00
 14779              	.LASF40:
 14780 092f 63757272 		.ascii	"curr\000"
 14780      00
 14781              	.LASF181:
 14782 0934 57414954 		.ascii	"WAIT_QUERY\000"
 14782      5F515545 
 14782      525900
 14783              	.LASF96:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 322


 14784 093f 696E7075 		.ascii	"input_mode\000"
 14784      745F6D6F 
 14784      646500
 14785              	.LASF36:
 14786 094a 434F4E54 		.ascii	"CONTROL_PWM\000"
 14786      524F4C5F 
 14786      50574D00 
 14787              	.LASF273:
 14788 0956 6379636C 		.ascii	"cycles_counter_update\000"
 14788      65735F63 
 14788      6F756E74 
 14788      65725F75 
 14788      70646174 
 14789              	.LASF144:
 14790 096c 76696272 		.ascii	"vibrotactile_feedback_active\000"
 14790      6F746163 
 14790      74696C65 
 14790      5F666565 
 14790      64626163 
 14791              	.LASF362:
 14792 0989 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14792      43313120 
 14792      352E342E 
 14792      31203230 
 14792      31363036 
 14793 09bc 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14793      20726576 
 14793      6973696F 
 14793      6E203233 
 14793      37373135 
 14794 09ef 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14794      66756E63 
 14794      74696F6E 
 14794      2D736563 
 14794      74696F6E 
 14795              	.LASF42:
 14796 0a17 73745F72 		.ascii	"st_ref\000"
 14796      656600
 14797              	.LASF326:
 14798 0a1e 74696D65 		.ascii	"timer_value0\000"
 14798      725F7661 
 14798      6C756530 
 14798      00
 14799              	.LASF128:
 14800 0a2b 73745F53 		.ascii	"st_SH_spec\000"
 14800      485F7370 
 14800      656300
 14801              	.LASF253:
 14802 0a36 765F7661 		.ascii	"v_value\000"
 14802      6C756500 
 14803              	.LASF318:
 14804 0a3e 63616C69 		.ascii	"calib\000"
 14804      6200
 14805              	.LASF140:
 14806 0a44 73745F46 		.ascii	"st_FB_spec\000"
 14806      425F7370 
 14806      656300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 323


 14807              	.LASF6:
 14808 0a4f 6C6F6E67 		.ascii	"long long int\000"
 14808      206C6F6E 
 14808      6720696E 
 14808      7400
 14809              	.LASF34:
 14810 0a5d 53485F63 		.ascii	"SH_control_mode\000"
 14810      6F6E7472 
 14810      6F6C5F6D 
 14810      6F646500 
 14811              	.LASF199:
 14812 0a6d 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14812      4E445F4D 
 14812      4F544F52 
 14812      5F494458 
 14812      00
 14813              	.LASF348:
 14814 0a7e 6368616E 		.ascii	"change_ext_ref_flag\000"
 14814      67655F65 
 14814      78745F72 
 14814      65665F66 
 14814      6C616700 
 14815              	.LASF19:
 14816 0a92 646F7562 		.ascii	"double\000"
 14816      6C6500
 14817              	.LASF320:
 14818 0a99 66696C74 		.ascii	"filt_curr_diff\000"
 14818      5F637572 
 14818      725F6469 
 14818      666600
 14819              	.LASF215:
 14820 0aa8 706F735F 		.ascii	"pos_sum\000"
 14820      73756D00 
 14821              	.LASF218:
 14822 0ab0 696E7465 		.ascii	"interrupt_manager\000"
 14822      72727570 
 14822      745F6D61 
 14822      6E616765 
 14822      7200
 14823              	.LASF102:
 14824 0ac2 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14824      7261775F 
 14824      72656164 
 14824      5F636F6E 
 14824      6600
 14825              	.LASF216:
 14826 0ad4 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14826      7574655F 
 14826      536F6674 
 14826      48616E64 
 14826      5F325F6D 
 14827              	.LASF171:
 14828 0afc 72657065 		.ascii	"repetitions\000"
 14828      74697469 
 14828      6F6E7300 
 14829              	.LASF92:
 14830 0b08 6D61785F 		.ascii	"max_step_neg\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 324


 14830      73746570 
 14830      5F6E6567 
 14830      00
 14831              	.LASF252:
 14832 0b15 636F756E 		.ascii	"count_startup_motor\000"
 14832      745F7374 
 14832      61727475 
 14832      705F6D6F 
 14832      746F7200 
 14833              	.LASF139:
 14834 0b29 736C6176 		.ascii	"slave_ID\000"
 14834      655F4944 
 14834      00
 14835              	.LASF176:
 14836 0b32 57414954 		.ascii	"WAIT\000"
 14836      00
 14837              	.LASF18:
 14838 0b37 666C6F61 		.ascii	"float\000"
 14838      7400
 14839              	.LASF118:
 14840 0b3d 494D555F 		.ascii	"IMU_conf\000"
 14840      636F6E66 
 14840      00
 14841              	.LASF266:
 14842 0b46 636F756E 		.ascii	"count\000"
 14842      7400
 14843              	.LASF46:
 14844 0b4c 73745F61 		.ascii	"st_adc_meas\000"
 14844      64635F6D 
 14844      65617300 
 14845              	.LASF277:
 14846 0b58 656D675F 		.ascii	"emg_excess_status\000"
 14846      65786365 
 14846      73735F73 
 14846      74617475 
 14846      7300
 14847              	.LASF303:
 14848 0b6a 6D5F6164 		.ascii	"m_addr\000"
 14848      647200
 14849              	.LASF317:
 14850 0b71 635F6D65 		.ascii	"c_mem\000"
 14850      6D00
 14851              	.LASF8:
 14852 0b77 756E7369 		.ascii	"unsigned int\000"
 14852      676E6564 
 14852      20696E74 
 14852      00
 14853              	.LASF282:
 14854 0b84 6D61785F 		.ascii	"max_pos\000"
 14854      706F7300 
 14855              	.LASF356:
 14856 0b8c 72657374 		.ascii	"rest_pos_curr_ref\000"
 14856      5F706F73 
 14856      5F637572 
 14856      725F7265 
 14856      6600
 14857              	.LASF152:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 325


 14858 0b9e 666C6167 		.ascii	"flag\000"
 14858      00
 14859              	.LASF97:
 14860 0ba3 636F6E74 		.ascii	"control_mode\000"
 14860      726F6C5F 
 14860      6D6F6465 
 14860      00
 14861              	.LASF21:
 14862 0bb0 63797374 		.ascii	"cystatus\000"
 14862      61747573 
 14862      00
 14863              	.LASF26:
 14864 0bb9 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14864      545F4D4F 
 14864      44455F45 
 14864      4E434F44 
 14864      45523300 
 14865              	.LASF115:
 14866 0bcd 73745F69 		.ascii	"st_imu\000"
 14866      6D7500
 14867              	.LASF210:
 14868 0bd4 63757272 		.ascii	"current_emg\000"
 14868      656E745F 
 14868      656D6700 
 14869              	.LASF191:
 14870 0be0 72785F71 		.ascii	"rx_queue\000"
 14870      75657565 
 14870      00
 14871              	.LASF262:
 14872 0be9 55445F6D 		.ascii	"UD_mean_value\000"
 14872      65616E5F 
 14872      76616C75 
 14872      6500
 14873              	.LASF237:
 14874 0bf7 6173736F 		.ascii	"assoc_motor\000"
 14874      635F6D6F 
 14874      746F7200 
 14875              	.LASF47:
 14876 0c03 6164645F 		.ascii	"add_emg\000"
 14876      656D6700 
 14877              	.LASF223:
 14878 0c0b 695F7265 		.ascii	"i_ref\000"
 14878      6600
 14879              	.LASF110:
 14880 0c11 656D675F 		.ascii	"emg_threshold\000"
 14880      74687265 
 14880      73686F6C 
 14880      6400
 14881              	.LASF296:
 14882 0c1f 73617665 		.ascii	"save_cycles_eeprom\000"
 14882      5F637963 
 14882      6C65735F 
 14882      65657072 
 14882      6F6D00
 14883              	.LASF107:
 14884 0c32 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14884      725F6861 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 326


 14884      6E646C65 
 14884      5F726174 
 14884      696F00
 14885              	.LASF58:
 14886 0c45 63757272 		.ascii	"current_hist\000"
 14886      656E745F 
 14886      68697374 
 14886      00
 14887              	.LASF37:
 14888 0c52 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14888      524F4C5F 
 14888      43555252 
 14888      454E5400 
 14889              	.LASF23:
 14890 0c62 6C6F6E67 		.ascii	"long double\000"
 14890      20646F75 
 14890      626C6500 
 14891              	.LASF174:
 14892 0c6e 44495343 		.ascii	"DISCARD\000"
 14892      41524400 
 14893              	.LASF228:
 14894 0c76 70726576 		.ascii	"prev_pos_err\000"
 14894      5F706F73 
 14894      5F657272 
 14894      00
 14895              	.LASF245:
 14896 0c83 696E6974 		.ascii	"init_rot\000"
 14896      5F726F74 
 14896      00
 14897              	.LASF270:
 14898 0c8c 6D6F745F 		.ascii	"mot_idx\000"
 14898      69647800 
 14899              	.LASF321:
 14900 0c94 66696C74 		.ascii	"filt_i\000"
 14900      5F6900
 14901              	.LASF65:
 14902 0c9b 6D6F7469 		.ascii	"motion_counter\000"
 14902      6F6E5F63 
 14902      6F756E74 
 14902      657200
 14903              	.LASF319:
 14904 0caa 66696C74 		.ascii	"filt_v\000"
 14904      5F7600
 14905              	.LASF345:
 14906 0cb1 72657374 		.ascii	"rest_enabled\000"
 14906      5F656E61 
 14906      626C6564 
 14906      00
 14907              	.LASF309:
 14908 0cbe 675F7265 		.ascii	"g_refOld\000"
 14908      664F6C64 
 14908      00
 14909              	.LASF221:
 14910 0cc7 706F735F 		.ascii	"pos_error\000"
 14910      6572726F 
 14910      7200
 14911              	.LASF160:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 327


 14912 0cd1 6779726F 		.ascii	"gyro_value\000"
 14912      5F76616C 
 14912      756500
 14913              	.LASF120:
 14914 0cdc 63757272 		.ascii	"curr_time\000"
 14914      5F74696D 
 14914      6500
 14915              	.LASF105:
 14916 0ce6 646F7562 		.ascii	"double_encoder_on_off\000"
 14916      6C655F65 
 14916      6E636F64 
 14916      65725F6F 
 14916      6E5F6F66 
 14917              	.LASF271:
 14918 0cfc 6D61785F 		.ascii	"max_tension\000"
 14918      74656E73 
 14918      696F6E00 
 14919              	.LASF198:
 14920 0d08 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14920      525F4944 
 14920      5800
 14921              	.LASF246:
 14922 0d12 6C617374 		.ascii	"last_value_encoder\000"
 14922      5F76616C 
 14922      75655F65 
 14922      6E636F64 
 14922      657200
 14923              	.LASF196:
 14924 0d25 636F756E 		.ascii	"counter_tension_func\000"
 14924      7465725F 
 14924      74656E73 
 14924      696F6E5F 
 14924      66756E63 
 14925              	.LASF327:
 14926 0d3a 6379636C 		.ascii	"cycle_time\000"
 14926      655F7469 
 14926      6D6500
 14927              	.LASF217:
 14928 0d45 66736D5F 		.ascii	"fsm_state\000"
 14928      73746174 
 14928      6500
 14929              	.LASF7:
 14930 0d4f 6C6F6E67 		.ascii	"long long unsigned int\000"
 14930      206C6F6E 
 14930      6720756E 
 14930      7369676E 
 14930      65642069 
 14931              	.LASF334:
 14932 0d66 64657465 		.ascii	"detect_power_cycle\000"
 14932      63745F70 
 14932      6F776572 
 14932      5F637963 
 14932      6C6500
 14933              	.LASF338:
 14934 0d79 6A6F795F 		.ascii	"joy_UD_status\000"
 14934      55445F73 
 14934      74617475 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 328


 14934      7300
 14935              	.LASF276:
 14936 0d87 6D6F7469 		.ascii	"motion_status\000"
 14936      6F6E5F73 
 14936      74617475 
 14936      7300
 14937              	.LASF53:
 14938 0d95 6C656E67 		.ascii	"length\000"
 14938      746800
 14939              	.LASF157:
 14940 0d9c 73745F69 		.ascii	"st_imu_data\000"
 14940      6D755F64 
 14940      61746100 
 14941              	.LASF161:
 14942 0da8 6D61675F 		.ascii	"mag_value\000"
 14942      76616C75 
 14942      6500
 14943              	.LASF41:
 14944 0db2 6F6E6F66 		.ascii	"onoff\000"
 14944      6600
 14945              	.LASF241:
 14946 0db8 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14946      76616C75 
 14946      655F656E 
 14946      636F6465 
 14946      725F3332 
 14947              	.LASF229:
 14948 0dcd 70726576 		.ascii	"prev_curr_err\000"
 14948      5F637572 
 14948      725F6572 
 14948      7200
 14949              	.LASF189:
 14950 0ddb 64617461 		.ascii	"data_packet_length\000"
 14950      5F706163 
 14950      6B65745F 
 14950      6C656E67 
 14950      746800
 14951              	.LASF77:
 14952 0dee 6B5F705F 		.ascii	"k_p_c\000"
 14952      6300
 14953              	.LASF329:
 14954 0df4 6465765F 		.ascii	"dev_tension\000"
 14954      74656E73 
 14954      696F6E00 
 14955              	.LASF88:
 14956 0e00 6D6F746F 		.ascii	"motor_driver_type\000"
 14956      725F6472 
 14956      69766572 
 14956      5F747970 
 14956      6500
 14957              	.LASF177:
 14958 0e12 57414954 		.ascii	"WAIT_EoC\000"
 14958      5F456F43 
 14958      00
 14959              	.LASF22:
 14960 0e1b 72656738 		.ascii	"reg8\000"
 14960      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 329


 14961              	.LASF285:
 14962 0e20 62696E5F 		.ascii	"bin_1\000"
 14962      3100
 14963              	.LASF286:
 14964 0e26 62696E5F 		.ascii	"bin_2\000"
 14964      3200
 14965              	.LASF257:
 14966 0e2c 695F6175 		.ascii	"i_aux\000"
 14966      7800
 14967              	.LASF143:
 14968 0e32 70726F70 		.ascii	"prop_err_fb_gain\000"
 14968      5F657272 
 14968      5F66625F 
 14968      6761696E 
 14968      00
 14969              	.LASF214:
 14970 0e43 706F735F 		.ascii	"pos_diff\000"
 14970      64696666 
 14970      00
 14971              	.LASF298:
 14972 0e4c 726F775F 		.ascii	"row_number\000"
 14972      6E756D62 
 14972      657200
 14973              	.LASF268:
 14974 0e57 6F766572 		.ascii	"overcurrent_control\000"
 14974      63757272 
 14974      656E745F 
 14974      636F6E74 
 14974      726F6C00 
 14975              	.LASF287:
 14976 0e6b 63757272 		.ascii	"curr_pos\000"
 14976      5F706F73 
 14976      00
 14977              	.LASF173:
 14978 0e74 52455345 		.ascii	"RESET\000"
 14978      5400
 14979              	.LASF256:
 14980 0e7a 616E616C 		.ascii	"analog_read_end\000"
 14980      6F675F72 
 14980      6561645F 
 14980      656E6400 
 14981              	.LASF75:
 14982 0e8a 6465765F 		.ascii	"dev_type\000"
 14982      74797065 
 14982      00
 14983              	.LASF234:
 14984 0e93 76696272 		.ascii	"vibrotactile_control_generic\000"
 14984      6F746163 
 14984      74696C65 
 14984      5F636F6E 
 14984      74726F6C 
 14985              	.LASF275:
 14986 0eb0 656D675F 		.ascii	"emg_cycle_status\000"
 14986      6379636C 
 14986      655F7374 
 14986      61747573 
 14986      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 330


 14987              	.LASF125:
 14988 0ec1 73745F75 		.ascii	"st_user\000"
 14988      73657200 
 14989              	.LASF108:
 14990 0ec9 67656172 		.ascii	"gears_params\000"
 14990      735F7061 
 14990      72616D73 
 14990      00
 14991              	.LASF119:
 14992 0ed6 73745F65 		.ascii	"st_expansion\000"
 14992      7870616E 
 14992      73696F6E 
 14992      00
 14993              	.LASF113:
 14994 0ee3 656D675F 		.ascii	"emg_calibration_flag\000"
 14994      63616C69 
 14994      62726174 
 14994      696F6E5F 
 14994      666C6167 
 14995              	.LASF43:
 14996 0ef8 73745F6D 		.ascii	"st_meas\000"
 14996      65617300 
 14997              	.LASF300:
 14998 0f00 61646472 		.ascii	"addr_start\000"
 14998      5F737461 
 14998      727400
 14999              	.LASF304:
 15000 0f0b 70776D5F 		.ascii	"pwm_preload_values\000"
 15000      7072656C 
 15000      6F61645F 
 15000      76616C75 
 15000      657300
 15001              	.LASF135:
 15002 0f1e 6A6F7973 		.ascii	"joystick_threshold\000"
 15002      7469636B 
 15002      5F746872 
 15002      6573686F 
 15002      6C6400
 15003              	.LASF32:
 15004 0f31 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 15004      545F4D4F 
 15004      44455F45 
 15004      4D475F50 
 15004      524F504F 
 15005              	.LASF314:
 15006 0f50 675F6662 		.ascii	"g_fb_meas\000"
 15006      5F6D6561 
 15006      7300
 15007              	.LASF184:
 15008 0f5a 636F756E 		.ascii	"counter_status\000"
 15008      7465725F 
 15008      73746174 
 15008      757300
 15009              	.LASF316:
 15010 0f69 675F6D65 		.ascii	"g_mem\000"
 15010      6D00
 15011              	.LASF258:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 331


 15012 0f6f 656D675F 		.ascii	"emg_counter_1\000"
 15012      636F756E 
 15012      7465725F 
 15012      3100
 15013              	.LASF259:
 15014 0f7d 656D675F 		.ascii	"emg_counter_2\000"
 15014      636F756E 
 15014      7465725F 
 15014      3200
 15015              	.LASF145:
 15016 0f8b 61697263 		.ascii	"airchamber_feedback_active\000"
 15016      68616D62 
 15016      65725F66 
 15016      65656462 
 15016      61636B5F 
 15017              	.LASF249:
 15018 0fa6 6F6E6C79 		.ascii	"only_first_time\000"
 15018      5F666972 
 15018      73745F74 
 15018      696D6500 
 15019              	.LASF11:
 15020 0fb6 75696E74 		.ascii	"uint8\000"
 15020      3800
 15021              	.LASF133:
 15022 0fbc 73745F4A 		.ascii	"st_JOY_spec\000"
 15022      4F595F73 
 15022      70656300 
 15023              	.LASF244:
 15024 0fc8 76616C75 		.ascii	"value_diff\000"
 15024      655F6469 
 15024      666600
 15025              	.LASF289:
 15026 0fd3 63757272 		.ascii	"curr_ref\000"
 15026      5F726566 
 15026      00
 15027              	.LASF2:
 15028 0fdc 73686F72 		.ascii	"short int\000"
 15028      7420696E 
 15028      7400
 15029              	.LASF82:
 15030 0fe6 6B5F645F 		.ascii	"k_d_dl\000"
 15030      646C00
 15031              	.LASF242:
 15032 0fed 76616C75 		.ascii	"value_encoder\000"
 15032      655F656E 
 15032      636F6465 
 15032      7200
 15033              	.LASF48:
 15034 0ffb 6A6F7973 		.ascii	"joystick\000"
 15034      7469636B 
 15034      00
 15035              	.LASF154:
 15036 1004 6D6F746F 		.ascii	"motor\000"
 15036      7200
 15037              	.LASF331:
 15038 100a 6465765F 		.ascii	"dev_pwm_sat\000"
 15038      70776D5F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 332


 15038      73617400 
 15039              	.LASF68:
 15040 1016 68775F6D 		.ascii	"hw_maint_date\000"
 15040      61696E74 
 15040      5F646174 
 15040      6500
 15041              	.LASF201:
 15042 1024 66756E63 		.ascii	"function_scheduler\000"
 15042      74696F6E 
 15042      5F736368 
 15042      6564756C 
 15042      657200
 15043              	.LASF202:
 15044 1037 636F6D70 		.ascii	"compute_reference\000"
 15044      7574655F 
 15044      72656665 
 15044      72656E63 
 15044      6500
 15045              	.LASF230:
 15046 1049 70726576 		.ascii	"prev_pwm\000"
 15046      5F70776D 
 15046      00
 15047              	.LASF69:
 15048 1052 73746174 		.ascii	"stats_period_begin_date\000"
 15048      735F7065 
 15048      72696F64 
 15048      5F626567 
 15048      696E5F64 
 15049              	.LASF294:
 15050 106a 74696D65 		.ascii	"timer_exc_e\000"
 15050      725F6578 
 15050      635F6500 
 15051              	.LASF305:
 15052 1076 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15052      52784275 
 15052      66666572 
 15052      00
 15053              	.LASF333:
 15054 1083 706F775F 		.ascii	"pow_tension\000"
 15054      74656E73 
 15054      696F6E00 
 15055              	.LASF293:
 15056 108f 74696D65 		.ascii	"timer_exc_s\000"
 15056      725F6578 
 15056      635F7300 
 15057              	.LASF15:
 15058 109b 696E7431 		.ascii	"int16\000"
 15058      3600
 15059              	.LASF121:
 15060 10a1 72656164 		.ascii	"read_exp_port_flag\000"
 15060      5F657870 
 15060      5F706F72 
 15060      745F666C 
 15060      616700
 15061              	.LASF280:
 15062 10b4 6578635F 		.ascii	"exc_act_thr\000"
 15062      6163745F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 333


 15062      74687200 
 15063              	.LASF87:
 15064 10c0 61637469 		.ascii	"activate_pwm_rescaling\000"
 15064      76617465 
 15064      5F70776D 
 15064      5F726573 
 15064      63616C69 
 15065              	.LASF80:
 15066 10d7 6B5F705F 		.ascii	"k_p_dl\000"
 15066      646C00
 15067              	.LASF44:
 15068 10de 65737469 		.ascii	"estim_curr\000"
 15068      6D5F6375 
 15068      727200
 15069              	.LASF330:
 15070 10e9 6465765F 		.ascii	"dev_pwm_limit\000"
 15070      70776D5F 
 15070      6C696D69 
 15070      7400
 15071              	.LASF297:
 15072 10f7 73746174 		.ascii	"status\000"
 15072      757300
 15073              	.LASF222:
 15074 10fe 63757272 		.ascii	"curr_error\000"
 15074      5F657272 
 15074      6F7200
 15075              	.LASF353:
 15076 1109 456E636F 		.ascii	"Encoder_Value\000"
 15076      6465725F 
 15076      56616C75 
 15076      6500
 15077              	.LASF74:
 15078 1117 75736572 		.ascii	"user_id\000"
 15078      5F696400 
 15079              	.LASF278:
 15080 111f 72657374 		.ascii	"rest_cycle_status\000"
 15080      5F637963 
 15080      6C655F73 
 15080      74617475 
 15080      7300
 15081              	.LASF212:
 15082 1131 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15082      7574655F 
 15082      536F6674 
 15082      48616E64 
 15082      5F325F6D 
 15083              	.LASF240:
 15084 115e 746D705F 		.ascii	"tmp_value_encoder\000"
 15084      76616C75 
 15084      655F656E 
 15084      636F6465 
 15084      7200
 15085              	.LASF186:
 15086 1170 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15086      4359434C 
 15086      45535F48 
 15086      616E646C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 334


 15086      657200
 15087              	.LASF73:
 15088 1183 62617564 		.ascii	"baud_rate\000"
 15088      5F726174 
 15088      6500
 15089              	.LASF149:
 15090 118d 66617374 		.ascii	"fast_act_threshold\000"
 15090      5F616374 
 15090      5F746872 
 15090      6573686F 
 15090      6C6400
 15091              	.LASF117:
 15092 11a0 5350495F 		.ascii	"SPI_read_delay\000"
 15092      72656164 
 15092      5F64656C 
 15092      617900
 15093              	.LASF3:
 15094 11af 73686F72 		.ascii	"short unsigned int\000"
 15094      7420756E 
 15094      7369676E 
 15094      65642069 
 15094      6E7400
 15095              	.LASF101:
 15096 11c2 73745F65 		.ascii	"st_encoder\000"
 15096      6E636F64 
 15096      657200
 15097              	.LASF312:
 15098 11cd 675F6164 		.ascii	"g_adc_meas\000"
 15098      635F6D65 
 15098      617300
 15099              	.LASF141:
 15100 11d8 6D61785F 		.ascii	"max_residual_current\000"
 15100      72657369 
 15100      6475616C 
 15100      5F637572 
 15100      72656E74 
 15101              	.LASF209:
 15102 11ed 454E435F 		.ascii	"ENC_L\000"
 15102      4C00
 15103              	.LASF151:
 15104 11f3 73745F65 		.ascii	"st_eeprom\000"
 15104      6570726F 
 15104      6D00
 15105              	.LASF339:
 15106 11fd 6A6F795F 		.ascii	"joy_LR_status\000"
 15106      4C525F73 
 15106      74617475 
 15106      7300
 15107              	.LASF363:
 15108 120b 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15108      72635C69 
 15108      6E746572 
 15108      72757074 
 15108      696F6E73 
 15109              	.LASF205:
 15110 1222 73745F72 		.ascii	"st_refOld_p\000"
 15110      65664F6C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 335


 15110      645F7000 
 15111              	.LASF16:
 15112 122e 696E7433 		.ascii	"int32\000"
 15112      3200
 15113              	.LASF350:
 15114 1234 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15114      4F465F41 
 15114      4E414C4F 
 15114      475F494E 
 15114      50555453 
 15115              	.LASF76:
 15116 1249 73745F6D 		.ascii	"st_motor\000"
 15116      6F746F72 
 15116      00
 15117              	.LASF361:
 15118 1252 6D617374 		.ascii	"master_mode\000"
 15118      65725F6D 
 15118      6F646500 
 15119              	.LASF39:
 15120 125e 46535F46 		.ascii	"FS_FILE\000"
 15120      494C4500 
 15121              	.LASF89:
 15122 1266 706F735F 		.ascii	"pos_lim_flag\000"
 15122      6C696D5F 
 15122      666C6167 
 15122      00
 15123              	.LASF263:
 15124 1273 4C525F6D 		.ascii	"LR_mean_value\000"
 15124      65616E5F 
 15124      76616C75 
 15124      6500
 15125              	.LASF311:
 15126 1281 675F6D65 		.ascii	"g_measOld\000"
 15126      61734F6C 
 15126      6400
 15127              	.LASF302:
 15128 128b 726F775F 		.ascii	"row_end\000"
 15128      656E6400 
 15129              	.LASF35:
 15130 1293 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15130      524F4C5F 
 15130      414E474C 
 15130      4500
 15131              	.LASF9:
 15132 12a1 5F5F696E 		.ascii	"__int32_t\000"
 15132      7433325F 
 15132      7400
 15133              	.LASF60:
 15134 12ab 77697265 		.ascii	"wire_disp\000"
 15134      5F646973 
 15134      7000
 15135              	.LASF344:
 15136 12b5 63616E5F 		.ascii	"can_write\000"
 15136      77726974 
 15136      6500
 15137              	.LASF111:
 15138 12bf 656D675F 		.ascii	"emg_max_value\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc0mdmuC.s 			page 336


 15138      6D61785F 
 15138      76616C75 
 15138      6500
 15139              	.LASF95:
 15140 12cd 63757272 		.ascii	"current_limit\000"
 15140      656E745F 
 15140      6C696D69 
 15140      7400
 15141              	.LASF33:
 15142 12db 53485F69 		.ascii	"SH_input_mode\000"
 15142      6E707574 
 15142      5F6D6F64 
 15142      6500
 15143              	.LASF183:
 15144 12e9 4E4F4E45 		.ascii	"NONE\000"
 15144      00
 15145              	.LASF148:
 15146 12ee 61637469 		.ascii	"activation_mode\000"
 15146      76617469 
 15146      6F6E5F6D 
 15146      6F646500 
 15147              	.LASF12:
 15148 12fe 75696E74 		.ascii	"uint16\000"
 15148      313600
 15149              	.LASF130:
 15150 1305 72657374 		.ascii	"rest_delay\000"
 15150      5F64656C 
 15150      617900
 15151              	.LASF164:
 15152 1310 73745F66 		.ascii	"st_filter\000"
 15152      696C7465 
 15152      7200
 15153              	.LASF254:
 15154 131a 76765F76 		.ascii	"vv_value\000"
 15154      616C7565 
 15154      00
 15155              	.LASF85:
 15156 1323 6B5F645F 		.ascii	"k_d_c_dl\000"
 15156      635F646C 
 15156      00
 15157              	.LASF169:
 15158 132c 64697265 		.ascii	"direction\000"
 15158      6374696F 
 15158      6E00
 15159              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
